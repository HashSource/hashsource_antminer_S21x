;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 4F8D701355090F12D3AEA7E45841EBD7330613F64940452D5006A2C6CE6D660C
; Input MD5    : A57E06E4854B53D2E4AE7BBEA4F31F62
; Input CRC32  : 4125A40D
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/hashsource_antminer_S21x/bitmain_firmware/FR-1.1(250416-S21 Hyd.)/minerfs.no_header.image_extract/bin/busybox
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libm.so.6'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD start+1             ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x5D718             ; SHT file offset
DCD 0x5000400           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 9                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x1A                ; Number of entries in SHT
DCW 0x19                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0x5C478             ; File offset
DCD unk_6C478           ; Virtual address
DCD 0x6C478             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x154               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
dword_10080 DCD 0x10154 ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0x5C484             ; Size in file image
DCD 0x5C484             ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0x5CF08             ; File offset
DCD off_7CF08           ; Virtual address
DCD 0x7CF08             ; Physical address
DCD 0x6F1               ; Size in file image
DCD 0xCC4               ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0x5CF10             ; File offset
DCD stru_7CF10          ; Virtual address
DCD 0x7CF10             ; Physical address
DCD 0xF0                ; Size in file image
DCD 0xF0                ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x170               ; File offset
DCD dword_10170         ; Virtual address
DCD 0x10170             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
dword_10120 DCD 0       ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHT Entry 8
DCD 0x6474E552          ; Type: RO-AFTER
DCD 0x5CF08             ; File offset
DCD off_7CF08           ; Virtual address
DCD 0x7CF08             ; Physical address
DCD 0xF8                ; Size in file image
DCD 0xF8                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10154
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10170 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 3, 2, 0          ; ABI: Linux 3.2.0
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0x90, 0xFB, 0x2E, 0x94, 0x73, 0x4A, 0xE5 ; Desc
DCB 0x76, 0xEB, 0xE8, 0xF0, 0x12, 0xA7, 0x5F
DCB 0xC, 0xC, 0xB4, 0, 0x5D, 0x66
; ELF Hash Table
elf_hash_nbucket DCD 0x107
elf_hash_nchain DCD 0x135
elf_hash_bucket DCD 0, 0xA3, 0, 0, 0, 0x105, 0x119, 0x107
DCD 0xE8, 0x27, 0xF9, 0, 0xE0, 0x12C, 0
DCD 0x134, 0x130, 0, 0, 0x108, 0x2E, 0, 0
DCD 0x118, 0x71, 0, 0x2F, 0x117, 0, 0, 0x26
DCD 0x4C, 0x4A, 0x6C, 0xF, 0, 0x5A, 0, 0
DCD 0, 0xCB, 0x7C, 0, 0x132, 0xD9, 0xB0
DCD 0x128, 0xE4, 0xF3, 0xD5, 0xF2, 0xDE
DCD 0x3F, 0x115, 0x127, 0xAC, 0xCA, 0x88
DCD 0, 0x82, 0, 0, 0x126, 0x95, 0x1F, 0xE7
DCD 0x66, 0x106, 0x124, 0xDD, 0x94, 0xCE
DCD 0xE9, 0x2A, 0, 0, 0xFC, 0x104, 0x3D
DCD 0xB9, 0x4E, 4, 0xCD, 0x5C, 0, 0x30, 0x10
DCD 0x6A, 0x9E, 0x70, 0, 0xED, 0x25, 0xC4
DCD 0xAD, 0, 0, 0xA4, 0, 0xFF, 0, 0xB2, 0x116
DCD 0, 0x12F, 3, 0, 0, 0xFA, 0, 0xF5, 9
DCD 0, 0x29, 0x103, 0, 0, 0x120, 0x12D, 0xD3
DCD 0x10A, 0x58, 0xC3, 0, 0, 0, 0, 0x113
DCD 0x10F, 0xC5, 0x22, 0xB3, 0x101, 0, 0x11C
DCD 0x131, 0x74, 0xD0, 0x125, 0, 0x81, 0xA0
DCD 0x129, 0x123, 0, 0x11A, 0x12E, 0x15
DCD 0, 0x9F, 0x59, 0, 0xF0, 0x50, 0x102
DCD 0xDC, 0, 0, 0, 0xE1, 0, 0, 0x35, 0x97
DCD 0x9A, 0x19, 0, 0x9B, 0x11D, 0x92, 0x109
DCD 0x28, 0xEC, 0, 0, 0, 0, 0x111, 0, 0
DCD 0xF1, 0, 0x64, 0, 0x31, 0, 0xDB, 0, 0x68
DCD 0x11B, 0xE6, 0, 0x112, 0x7B, 0x93, 0
DCD 0x10E, 0x133, 0x10D, 0xFD, 0x11E, 0
DCD 0x55, 0xC2, 0x7A, 0x7E, 0x8B, 0x34, 0
DCD 0x12B, 0, 0xAE, 0xEB, 0, 0xFB, 0x1A
DCD 0xB6, 0xC6, 0x1B, 0x90, 0, 0x100, 0
DCD 0x4B, 0xC1, 0x89, 0xAF, 0xE3, 0x78, 0
DCD 0x110, 0x122, 0x54, 0xEF, 0, 0, 0xD4
DCD 0xBB, 0x77, 0, 0x114, 0x63, 0xA9, 0xEA
DCD 0, 0xE2, 0xD2, 0xD8, 0xD6, 0, 0xE5, 0x45
DCD 0xA6, 6, 0x10B, 0, 0x12A, 0, 0x38, 2
DCD 0, 0xBA, 0
elf_hash_chain DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCD 0, 0x17, 0, 0, 0x11, 0, 0, 0, 0, 0, 0x1C
DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCD 0, 0, 0, 0, 8, 0, 0x12, 0, 0x18, 0, 0
DCD 0, 0, 0, 0, 0x16, 0, 0x4D, 0, 0x3B, 0x20
DCD 0, 0, 0x40, 0, 0, 0, 0, 0x47, 0x56, 0x2D
DCD 0, 0, 0, 0, 0, 0, 0x39, 0, 0, 0, 0, 0
DCD 0x61, 0, 0x49, 0, 0, 0, 0, 0, 0, 0x72
DCD 7, 0, 0, 0, 0x52, 0x60, 0x6D, 0x3A, 0x4F
DCD 0x65, 0x6E, 0x1E, 0x24, 0, 0x3C, 0x23
DCD 0, 0, 0, 0, 0, 0x53, 0, 0, 0xC, 0, 0x43
DCD 0, 0, 0, 0, 0, 0x44, 0, 0x79, 0x87, 0
DCD 0, 0x51, 0x46, 0, 0, 0, 0, 0, 0, 0xA
DCD 1, 0x41, 0x83, 0, 0, 0x14, 0, 0, 0x48
DCD 0, 0x9D, 0x13, 0, 0x8D, 0x7D, 0, 0, 0x33
DCD 0, 0x37, 0, 0, 0x7F, 0x8A, 0, 0x2C, 0
DCD 0x6F, 0, 0x2B, 0x5E, 0, 0, 0xAA, 0x62
DCD 0, 0, 0xB7, 0xB, 0x67, 0xB1, 0, 0, 0xA2
DCD 0x6B, 0x69, 0xAB, 0, 0xA7, 0x36, 0x75
DCD 0x5D, 0x98, 0xA1, 0, 0, 0, 0, 0x85, 0
DCD 0, 0x21, 0x96, 0xBE, 0x86, 0, 0xDF, 0
DCD 0x99, 0, 0xA8, 0xCC, 0, 0, 0x91, 0xB8
DCD 0, 0x5B, 0xA5, 0, 0x8F, 0, 0, 0xB5, 0xBD
DCD 0xC0, 0x57, 0, 5, 0, 0, 0, 0, 0x5F, 0
DCD 0xCF, 0, 0, 0, 0xC8, 0xDA, 0xC7, 0, 0xFE
DCD 0x32, 0x9C, 0, 0x10C, 0xBF, 0x1D, 0
DCD 0, 0, 0x80, 0, 0x8E, 0, 0xD, 0xF8, 0x73
DCD 0, 0xEE, 0, 0xD1, 0, 0xD7, 0x84, 0xE
DCD 0xF7, 0x121, 0x8C, 0xF6, 0, 0x42, 0xF4
DCD 0, 0, 0x76, 0, 0x11F, 0xB4, 0, 0, 0xC9
DCD 0x3E, 0xBC
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aFdopen - byte_11DFC, 0, 0, \ ; "fdopen"
           0x12, 0, 0>
Elf32_Sym <aEndgrent - byte_11DFC, 0, 0,\ ; "endgrent"
           0x12, 0, 0>
Elf32_Sym <aFputsUnlocked - byte_11DFC, \ ; "fputs_unlocked"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrstr - byte_11DFC, strstr,\ ; "strstr"
           0, 0x12, 0, 0>
Elf32_Sym <aGnuDevMajor - byte_11DFC, 0,\ ; "gnu_dev_major"
           0, 0x12, 0, 0>
Elf32_Sym <aEtherHostton - byte_11DFC, \ ; "ether_hostton"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aRaise - byte_11DFC, 0, 0, \ ; "raise"
           0x12, 0, 0>
Elf32_Sym <aVasprintf - byte_11DFC, 0, \ ; "vasprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aSendfile64 - byte_11DFC, 0, \ ; "sendfile64"
           0, 0x12, 0, 0>
Elf32_Sym <aCloselog+5 - byte_11DFC, 0, \ ; "log"
           0, 0x12, 0, 0>
Elf32_Sym <aStrverscmp - byte_11DFC, 0, \ ; "strverscmp"
           0, 0x12, 0, 0>
Elf32_Sym <aInetAton - byte_11DFC, 0, 0,\ ; "inet_aton"
           0x12, 0, 0>
Elf32_Sym <aGetpwnam - byte_11DFC, 0, 0,\ ; "getpwnam"
           0x12, 0, 0>
Elf32_Sym <aFsync - byte_11DFC, 0, 0, \ ; "fsync"
           0x12, 0, 0>
Elf32_Sym <aSetbuf - byte_11DFC, 0, 0, \ ; "setbuf"
           0x12, 0, 0>
Elf32_Sym <aStrcasestr - byte_11DFC, 0, \ ; "strcasestr"
           0, 0x12, 0, 0>
Elf32_Sym <aStrcmp - byte_11DFC, 0, 0, \ ; "strcmp"
           0x12, 0, 0>
Elf32_Sym <aStrtol - byte_11DFC, 0, 0, \ ; "strtol"
           0x12, 0, 0>
Elf32_Sym <aEnviron - byte_11DFC, \ ; "__environ"
           __environ, 4, 0x11, 0, 0x17>
Elf32_Sym <aGetpwuid - byte_11DFC, 0, 0,\ ; "getpwuid"
           0x12, 0, 0>
Elf32_Sym <aItmDeregistert - byte_11DFC,\ ; "_ITM_deregisterTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aSetsockopt - byte_11DFC, 0, \ ; "setsockopt"
           0, 0x12, 0, 0>
Elf32_Sym <aStrcspn - byte_11DFC, 0, 0, \ ; "strcspn"
           0x12, 0, 0>
Elf32_Sym <aUtimes+1 - byte_11DFC, 0, 0,\ ; "times"
           0x12, 0, 0>
Elf32_Sym <aGnuDevMakedev - byte_11DFC, \ ; "gnu_dev_makedev"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aDprintf - byte_11DFC, 0, 0, \ ; "dprintf"
           0x12, 0, 0>
Elf32_Sym <aClearenv - byte_11DFC, 0, 0,\ ; "clearenv"
           0x12, 0, 0>
Elf32_Sym <aDprintf+1 - byte_11DFC, 0, \ ; "printf"
           0, 0x12, 0, 0>
Elf32_Sym <aHstrerror - byte_11DFC, 0, \ ; "hstrerror"
           0, 0x12, 0, 0>
Elf32_Sym <aGnuDevMinor - byte_11DFC, 0,\ ; "gnu_dev_minor"
           0, 0x12, 0, 0>
Elf32_Sym <aRegerror - byte_11DFC, 0, 0,\ ; "regerror"
           0x12, 0, 0>
Elf32_Sym <aSetrlimit64 - byte_11DFC, 0,\ ; "setrlimit64"
           0, 0x12, 0, 0>
Elf32_Sym <aFread+1 - byte_11DFC, 0, 0, \ ; "read"
           0x12, 0, 0>
Elf32_Sym <aTcflush - byte_11DFC, 0, 0, \ ; "tcflush"
           0x12, 0, 0>
Elf32_Sym <aMktime - byte_11DFC, 0, 0, \ ; "mktime"
           0x12, 0, 0>
Elf32_Sym <aLongjmp - byte_11DFC, 0, 0, \ ; "longjmp"
           0x12, 0, 0>
Elf32_Sym <aFflush - byte_11DFC, 0, 0, \ ; "fflush"
           0x12, 0, 0>
Elf32_Sym <aGetuid - byte_11DFC, 0, 0, \ ; "getuid"
           0x12, 0, 0>
Elf32_Sym <aSigprocmask - byte_11DFC, 0,\ ; "sigprocmask"
           0, 0x12, 0, 0>
Elf32_Sym <aSetjmp - byte_11DFC, 0, 0, \ ; "_setjmp"
           0x12, 0, 0>
Elf32_Sym <aMemmove - byte_11DFC, 0, 0, \ ; "memmove"
           0x12, 0, 0>
Elf32_Sym <aLsetxattr - byte_11DFC, \ ; "lsetxattr"
           lsetxattr, 0, 0x12, 0, 0>
Elf32_Sym <aStrchrnul - byte_11DFC, 0, \ ; "strchrnul"
           0, 0x12, 0, 0>
Elf32_Sym <aRegfree+3 - byte_11DFC, 0, \ ; "free"
           0, 0x12, 0, 0>
Elf32_Sym <aNanosleep - byte_11DFC, 0, \ ; "nanosleep"
           0, 0x12, 0, 0>
Elf32_Sym <aFilenoUnlocked - byte_11DFC,\ ; "fileno_unlocked"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aInetPton - byte_11DFC, 0, 0,\ ; "inet_pton"
           0x12, 0, 0>
Elf32_Sym <aExit - byte_11DFC, 0, 0, \ ; "_exit"
           0x12, 0, 0>
Elf32_Sym <aPututxline - byte_11DFC, 0, \ ; "pututxline"
           0, 0x12, 0, 0>
Elf32_Sym <aMemcpy - byte_11DFC, 0, 0, \ ; "memcpy"
           0x12, 0, 0>
Elf32_Sym <aExecvp - byte_11DFC, 0, 0, \ ; "execvp"
           0x12, 0, 0>
Elf32_Sym <aExeclp - byte_11DFC, 0, 0, \ ; "execlp"
           0x12, 0, 0>
stru_10DFC Elf32_Sym <aShmget - byte_11DFC, 0, 0, \ ; "shmget"
           0x12, 0, 0>
Elf32_Sym <aStrsignal+3 - byte_11DFC, 0,\ ; "signal"
           0, 0x12, 0, 0>
Elf32_Sym <aCtime+1 - byte_11DFC, 0, 0, \ ; "time"
           0x12, 0, 0>
Elf32_Sym <aRmdir - byte_11DFC, 0, 0, \ ; "rmdir"
           0x12, 0, 0>
Elf32_Sym <aGethostid - byte_11DFC, 0, \ ; "gethostid"
           0, 0x12, 0, 0>
Elf32_Sym <aTcsetpgrp - byte_11DFC, 0, \ ; "tcsetpgrp"
           0, 0x12, 0, 0>
Elf32_Sym <aSendmsg - byte_11DFC, 0, 0, \ ; "sendmsg"
           0x12, 0, 0>
Elf32_Sym <aPow - byte_11DFC, 0, 0, \ ; "pow"
           0x12, 0, 0>
Elf32_Sym <aFtruncate64 - byte_11DFC, 0,\ ; "ftruncate64"
           0, 0x12, 0, 0>
Elf32_Sym <aMemcmp - byte_11DFC, 0, 0, \ ; "memcmp"
           0x12, 0, 0>
Elf32_Sym <aInetNtoa - byte_11DFC, 0, 0,\ ; "inet_ntoa"
           0x12, 0, 0>
Elf32_Sym <aNanosleep+4 - byte_11DFC, 0,\ ; "sleep"
           0, 0x12, 0, 0>
Elf32_Sym <aStpcpy - byte_11DFC, 0, 0, \ ; "stpcpy"
           0x12, 0, 0>
Elf32_Sym <aGetcUnlocked - byte_11DFC, \ ; "getc_unlocked"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aUname - byte_11DFC, 0, 0, \ ; "uname"
           0x12, 0, 0>
Elf32_Sym <aCtime - byte_11DFC, 0, 0, \ ; "ctime"
           0x12, 0, 0>
Elf32_Sym <aLremovexattr+1 - byte_11DFC,\ ; "removexattr"
           removexattr, 0, 0x12, 0, 0>
Elf32_Sym <aOptind - byte_11DFC, optind,\ ; "optind"
           4, 0x11, 0, 0x17>
Elf32_Sym <aRecvfrom - byte_11DFC, 0, 0,\ ; "recvfrom"
           0x12, 0, 0>
Elf32_Sym <aStrdup - byte_11DFC, 0, 0, \ ; "strdup"
           0x12, 0, 0>
Elf32_Sym <aSetutxent - byte_11DFC, 0, \ ; "setutxent"
           0, 0x12, 0, 0>
Elf32_Sym <aCfgetispeed - byte_11DFC, 0,\ ; "cfgetispeed"
           0, 0x12, 0, 0>
Elf32_Sym <aAlarm - byte_11DFC, 0, 0, \ ; "alarm"
           0x12, 0, 0>
Elf32_Sym <aSysconf - byte_11DFC, 0, 0, \ ; "sysconf"
           0x12, 0, 0>
Elf32_Sym <aUnlink - byte_11DFC, 0, 0, \ ; "unlink"
           0x12, 0, 0>
Elf32_Sym <aDup2 - byte_11DFC, 0, 0, \ ; "dup2"
           0x12, 0, 0>
Elf32_Sym <aReboot - byte_11DFC, 0, 0, \ ; "reboot"
           0x12, 0, 0>
Elf32_Sym <aGetrlimit64 - byte_11DFC, 0,\ ; "getrlimit64"
           0, 0x12, 0, 0>
Elf32_Sym <aRealloc - byte_11DFC, 0, 0, \ ; "realloc"
           0x12, 0, 0>
Elf32_Sym <aKillpg - byte_11DFC, 0, 0, \ ; "killpg"
           0x12, 0, 0>
Elf32_Sym <aStrptime - byte_11DFC, 0, 0,\ ; "strptime"
           0x12, 0, 0>
Elf32_Sym <aStrdup+3 - byte_11DFC, 0, 0,\ ; "dup"
           0x12, 0, 0>
Elf32_Sym <aGetpriority - byte_11DFC, 0,\ ; "getpriority"
           0, 0x12, 0, 0>
Elf32_Sym <aInitgroups - byte_11DFC, 0, \ ; "initgroups"
           0, 0x12, 0, 0>
Elf32_Sym <aRegexec - byte_11DFC, 0, 0, \ ; "regexec"
           0x12, 0, 0>
Elf32_Sym <aLocaltimeR - byte_11DFC, 0, \ ; "localtime_r"
           0, 0x12, 0, 0>
Elf32_Sym <aWait - byte_11DFC, 0, 0, \ ; "wait"
           0x12, 0, 0>
Elf32_Sym <aGetloginR - byte_11DFC, 0, \ ; "getlogin_r"
           0, 0x12, 0, 0>
Elf32_Sym <aShmat - byte_11DFC, 0, 0, \ ; "shmat"
           0x12, 0, 0>
Elf32_Sym <aFchdir+1 - byte_11DFC, 0, 0,\ ; "chdir"
           0x12, 0, 0>
Elf32_Sym <aStrcasecmp - byte_11DFC, 0, \ ; "strcasecmp"
           0, 0x12, 0, 0>
Elf32_Sym <aTcgetpgrp+2 - byte_11DFC, 0,\ ; "getpgrp"
           0, 0x12, 0, 0>
Elf32_Sym <aGeteuid - byte_11DFC, 0, 0, \ ; "geteuid"
           0x12, 0, 0>
Elf32_Sym <aStrsignal - byte_11DFC, 0, \ ; "strsignal"
           0, 0x12, 0, 0>
Elf32_Sym <aPoll - byte_11DFC, 0, 0, \ ; "poll"
           0x12, 0, 0>
Elf32_Sym <aSetgroups - byte_11DFC, 0, \ ; "setgroups"
           0, 0x12, 0, 0>
Elf32_Sym <aCfsetospeed - byte_11DFC, 0,\ ; "cfsetospeed"
           0, 0x12, 0, 0>
Elf32_Sym <aSemop - byte_11DFC, 0, 0, \ ; "semop"
           0x12, 0, 0>
Elf32_Sym <aFxstat64 - byte_11DFC, 0, 0,\ ; "__fxstat64"
           0x12, 0, 0>
Elf32_Sym <aReadlink - byte_11DFC, 0, 0,\ ; "readlink"
           0x12, 0, 0>
Elf32_Sym <aGetegid - byte_11DFC, 0, 0, \ ; "getegid"
           0x12, 0, 0>
Elf32_Sym <aSigaction - byte_11DFC, 0, \ ; "sigaction"
           0, 0x12, 0, 0>
Elf32_Sym <aStderr - byte_11DFC, stderr,\ ; "stderr"
           4, 0x11, 0, 0x17>
Elf32_Sym <aFwrite - byte_11DFC, 0, 0, \ ; "fwrite"
           0x12, 0, 0>
Elf32_Sym <aStrcat - byte_11DFC, 0, 0, \ ; "strcat"
           0x12, 0, 0>
Elf32_Sym <aIoctl - byte_11DFC, 0, 0, \ ; "ioctl"
           0x12, 0, 0>
Elf32_Sym <aLseek64 - byte_11DFC, 0, 0, \ ; "lseek64"
           0x12, 0, 0>
Elf32_Sym <aRegfree - byte_11DFC, 0, 0, \ ; "regfree"
           0x12, 0, 0>
Elf32_Sym <aStrtoll - byte_11DFC, 0, 0, \ ; "strtoll"
           0x12, 0, 0>
Elf32_Sym <aCapget - byte_11DFC, 0, 0, \ ; "capget"
           0x12, 0, 0>
Elf32_Sym <aUsleep - byte_11DFC, 0, 0, \ ; "usleep"
           0x12, 0, 0>
Elf32_Sym <aWaitpid - byte_11DFC, 0, 0, \ ; "waitpid"
           0x12, 0, 0>
Elf32_Sym <aTcsetattr - byte_11DFC, 0, \ ; "tcsetattr"
           0, 0x12, 0, 0>
Elf32_Sym <aStrcpy - byte_11DFC, 0, 0, \ ; "strcpy"
           0x12, 0, 0>
Elf32_Sym <aChroot - byte_11DFC, 0, 0, \ ; "chroot"
           0x12, 0, 0>
Elf32_Sym <aFread - byte_11DFC, 0, 0, \ ; "fread"
           0x12, 0, 0>
Elf32_Sym <aSchedYield - byte_11DFC, 0, \ ; "sched_yield"
           0, 0x12, 0, 0>
Elf32_Sym <aFerrorUnlocked - byte_11DFC,\ ; "ferror_unlocked"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aShmctl - byte_11DFC, 0, 0, \ ; "shmctl"
           0x12, 0, 0>
Elf32_Sym <aGetmntent - byte_11DFC, 0, \ ; "getmntent"
           0, 0x12, 0, 0>
Elf32_Sym <aOpendir - byte_11DFC, 0, 0, \ ; "opendir"
           0x12, 0, 0>
Elf32_Sym <aUmount2 - byte_11DFC, 0, 0, \ ; "umount2"
           0x12, 0, 0>
Elf32_Sym <aLsetxattr+1 - byte_11DFC, \ ; "setxattr"
           setxattr, 0, 0x12, 0, 0>
Elf32_Sym <aFnmatch - byte_11DFC, 0, 0, \ ; "fnmatch"
           0x12, 0, 0>
Elf32_Sym <aFopen64+1 - byte_11DFC, 0, \ ; "open64"
           0, 0x12, 0, 0>
Elf32_Sym <aGetenv - byte_11DFC, 0, 0, \ ; "getenv"
           0x12, 0, 0>
Elf32_Sym <aSetpriority - byte_11DFC, 0,\ ; "setpriority"
           0, 0x12, 0, 0>
Elf32_Sym <aMkstemp64 - byte_11DFC, 0, \ ; "mkstemp64"
           0, 0x12, 0, 0>
Elf32_Sym <aPuts - byte_11DFC, 0, 0, \ ; "puts"
           0x12, 0, 0>
Elf32_Sym <aSetgid - byte_11DFC, 0, 0, \ ; "setgid"
           0x12, 0, 0>
Elf32_Sym <aMalloc - byte_11DFC, 0, 0, \ ; "malloc"
           0x12, 0, 0>
Elf32_Sym <aSigaddset - byte_11DFC, 0, \ ; "sigaddset"
           0, 0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_11DFC, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aHstrerror+1 - byte_11DFC, 0,\ ; "strerror"
           0, 0x12, 0, 0>
Elf32_Sym <aSystem - byte_11DFC, 0, 0, \ ; "system"
           0x12, 0, 0>
Elf32_Sym <aStrftime - byte_11DFC, 0, 0,\ ; "strftime"
           0x12, 0, 0>
Elf32_Sym <aTcdrain - byte_11DFC, 0, 0, \ ; "tcdrain"
           0x12, 0, 0>
Elf32_Sym <aHErrnoLocation - byte_11DFC,\ ; "__h_errno_location"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aLocaltime - byte_11DFC, 0, \ ; "localtime"
           0, 0x12, 0, 0>
Elf32_Sym <aStrsep - byte_11DFC, 0, 0, \ ; "strsep"
           0x12, 0, 0>
Elf32_Sym <aLremovexattr - byte_11DFC, \ ; "lremovexattr"
           lremovexattr, 0, 0x12, 0, 0>
Elf32_Sym <aMktemp - byte_11DFC, 0, 0, \ ; "mktemp"
           0x12, 0, 0>
Elf32_Sym <aCloselog - byte_11DFC, 0, 0,\ ; "closelog"
           0x12, 0, 0>
Elf32_Sym <aSethostname - byte_11DFC, 0,\ ; "sethostname"
           0, 0x12, 0, 0>
Elf32_Sym <aDirname - byte_11DFC, 0, 0, \ ; "dirname"
           0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_11DFC, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aRename - byte_11DFC, 0, 0, \ ; "rename"
           0x12, 0, 0>
Elf32_Sym <aGetoptLong - byte_11DFC, 0, \ ; "getopt_long"
           0, 0x12, 0, 0>
Elf32_Sym <aKill - byte_11DFC, 0, 0, \ ; "kill"
           0x12, 0, 0>
Elf32_Sym <aGetcwd - byte_11DFC, 0, 0, \ ; "getcwd"
           0x12, 0, 0>
Elf32_Sym <aGetpid - byte_11DFC, 0, 0, \ ; "getpid"
           0x12, 0, 0>
Elf32_Sym <aExit+1 - byte_11DFC, 0, 0, \ ; "exit"
           0x12, 0, 0>
Elf32_Sym <aSyscall - byte_11DFC, 0, 0, \ ; "syscall"
           0x12, 0, 0>
Elf32_Sym <aSin - byte_11DFC, 0, 0, \ ; "sin"
           0x12, 0, 0>
Elf32_Sym <aStrtoul - byte_11DFC, 0, 0, \ ; "strtoul"
           0x12, 0, 0>
Elf32_Sym <aTcgetpgrp - byte_11DFC, 0, \ ; "tcgetpgrp"
           0, 0x12, 0, 0>
Elf32_Sym <aStrlen - byte_11DFC, 0, 0, \ ; "strlen"
           0x12, 0, 0>
Elf32_Sym <aGetcharUnlocke - byte_11DFC,\ ; "getchar_unlocked"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSetsid - byte_11DFC, 0, 0, \ ; "setsid"
           0x12, 0, 0>
Elf32_Sym <aVprintf - byte_11DFC, 0, 0, \ ; "vprintf"
           0x12, 0, 0>
Elf32_Sym <aStrchr - byte_11DFC, 0, 0, \ ; "strchr"
           0x12, 0, 0>
Elf32_Sym <aSrand - byte_11DFC, 0, 0, \ ; "srand"
           0x12, 0, 0>
Elf32_Sym <aUnsetenv+2 - byte_11DFC, 0, \ ; "setenv"
           0, 0x12, 0, 0>
Elf32_Sym <aPersonality - byte_11DFC, 0,\ ; "personality"
           0, 0x12, 0, 0>
Elf32_Sym <aMemrchr - byte_11DFC, 0, 0, \ ; "memrchr"
           0x12, 0, 0>
Elf32_Sym <aTtynameR - byte_11DFC, 0, 0,\ ; "ttyname_r"
           0x12, 0, 0>
Elf32_Sym <aFchown - byte_11DFC, 0, 0, \ ; "fchown"
           0x12, 0, 0>
Elf32_Sym <aExecve - byte_11DFC, 0, 0, \ ; "execve"
           0x12, 0, 0>
Elf32_Sym <aGetopt - byte_11DFC, 0, 0, \ ; "getopt"
           0x12, 0, 0>
Elf32_Sym <aVfprintf+1 - byte_11DFC, 0, \ ; "fprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aGetpagesize - byte_11DFC, 0,\ ; "getpagesize"
           0, 0x12, 0, 0>
Elf32_Sym <aCfsetispeed - byte_11DFC, 0,\ ; "cfsetispeed"
           0, 0x12, 0, 0>
Elf32_Sym <aFchown+1 - byte_11DFC, \ ; "chown"
           chown, 0, 0x12, 0, 0>
Elf32_Sym <aStdin - byte_11DFC, stdin, \ ; "stdin"
           4, 0x11, 0, 0x17>
Elf32_Sym <aUngetc - byte_11DFC, 0, 0, \ ; "ungetc"
           0x12, 0, 0>
Elf32_Sym <aFcntl - byte_11DFC, 0, 0, \ ; "fcntl"
           0x12, 0, 0>
Elf32_Sym <aExecv - byte_11DFC, 0, 0, \ ; "execv"
           0x12, 0, 0>
Elf32_Sym <aSqrt - byte_11DFC, 0, 0, \ ; "sqrt"
           0x12, 0, 0>
Elf32_Sym <aCfgetospeed - byte_11DFC, 0,\ ; "cfgetospeed"
           0, 0x12, 0, 0>
Elf32_Sym <aSigfillset - byte_11DFC, 0, \ ; "sigfillset"
           0, 0x12, 0, 0>
Elf32_Sym <aErrnoLocation - byte_11DFC, \ ; "__errno_location"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrncasecmp - byte_11DFC, 0,\ ; "strncasecmp"
           0, 0x12, 0, 0>
Elf32_Sym <aKlogctl - byte_11DFC, 0, 0, \ ; "klogctl"
           0x12, 0, 0>
Elf32_Sym <aVsnprintf+1 - byte_11DFC, 0,\ ; "snprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aMkdir - byte_11DFC, 0, 0, \ ; "mkdir"
           0x12, 0, 0>
Elf32_Sym <aSemget - byte_11DFC, 0, 0, \ ; "semget"
           0x12, 0, 0>
Elf32_Sym <aBind - byte_11DFC, 0, 0, \ ; "bind"
           0x12, 0, 0>
Elf32_Sym <aGetservbyport - byte_11DFC, \ ; "getservbyport"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGetgid - byte_11DFC, 0, 0, \ ; "getgid"
           0x12, 0, 0>
Elf32_Sym <aGetgrouplist - byte_11DFC, \ ; "getgrouplist"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aMemset - byte_11DFC, 0, 0, \ ; "memset"
           0x12, 0, 0>
Elf32_Sym <aGetmntentR - byte_11DFC, 0, \ ; "getmntent_r"
           0, 0x12, 0, 0>
Elf32_Sym <aBsearch - byte_11DFC, 0, 0, \ ; "bsearch"
           0x12, 0, 0>
Elf32_Sym <aUtimes - byte_11DFC, 0, 0, \ ; "utimes"
           0x12, 0, 0>
Elf32_Sym <aStrncpy - byte_11DFC, 0, 0, \ ; "strncpy"
           0x12, 0, 0>
Elf32_Sym <aFscanf - byte_11DFC, 0, 0, \ ; "fscanf"
           0x12, 0, 0>
Elf32_Sym <aMallopt - byte_11DFC, 0, 0, \ ; "mallopt"
           0x12, 0, 0>
Elf32_Sym <aSigsuspend - byte_11DFC, 0, \ ; "sigsuspend"
           0, 0x12, 0, 0>
Elf32_Sym <aStrtoull - byte_11DFC, 0, 0,\ ; "strtoull"
           0x12, 0, 0>
Elf32_Sym <aStatvfs64 - byte_11DFC, 0, \ ; "statvfs64"
           0, 0x12, 0, 0>
Elf32_Sym <aPrctl - byte_11DFC, 0, 0, \ ; "prctl"
           0x12, 0, 0>
Elf32_Sym <aStrtod - byte_11DFC, 0, 0, \ ; "strtod"
           0x12, 0, 0>
Elf32_Sym <aReadlink+4 - byte_11DFC, \ ; "link"
           link, 0, 0x12, 0, 0>
Elf32_Sym <aFwrite+1 - byte_11DFC, 0, 0,\ ; "write"
           0x12, 0, 0>
Elf32_Sym <aSigdelset - byte_11DFC, 0, \ ; "sigdelset"
           0, 0x12, 0, 0>
Elf32_Sym <aEtherAtonR - byte_11DFC, 0, \ ; "ether_aton_r"
           0, 0x12, 0, 0>
Elf32_Sym <aShmdt - byte_11DFC, 0, 0, \ ; "shmdt"
           0x12, 0, 0>
Elf32_Sym <aVfork - byte_11DFC, 0, 0, \ ; "vfork"
           0x12, 0, 0>
Elf32_Sym <aMemchr - byte_11DFC, 0, 0, \ ; "memchr"
           0x12, 0, 0>
Elf32_Sym <aVsprintf - byte_11DFC, 0, 0,\ ; "vsprintf"
           0x12, 0, 0>
Elf32_Sym <aAccess - byte_11DFC, 0, 0, \ ; "access"
           0x12, 0, 0>
Elf32_Sym <aSrand+1 - byte_11DFC, 0, 0, \ ; "rand"
           0x12, 0, 0>
Elf32_Sym <aStdout - byte_11DFC, stdout,\ ; "stdout"
           4, 0x11, 0, 0x17>
Elf32_Sym <aFclose - byte_11DFC, 0, 0, \ ; "fclose"
           0x12, 0, 0>
Elf32_Sym <aTcgetsid+2 - byte_11DFC, 0, \ ; "getsid"
           0, 0x12, 0, 0>
Elf32_Sym <aStrnlen - byte_11DFC, 0, 0, \ ; "strnlen"
           0x12, 0, 0>
Elf32_Sym <aPipe - byte_11DFC, 0, 0, \ ; "pipe"
           0x12, 0, 0>
Elf32_Sym <aFseeko64 - byte_11DFC, 0, 0,\ ; "fseeko64"
           0x12, 0, 0>
Elf32_Sym <aEndmntent - byte_11DFC, 0, \ ; "endmntent"
           0, 0x12, 0, 0>
Elf32_Sym <aPosixFallocate - byte_11DFC,\ ; "posix_fallocate64"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrtok - byte_11DFC, 0, 0, \ ; "strtok"
           0x12, 0, 0>
Elf32_Sym <aSemctl - byte_11DFC, 0, 0, \ ; "semctl"
           0x12, 0, 0>
Elf32_Sym <aSendto - byte_11DFC, 0, 0, \ ; "sendto"
           0x12, 0, 0>
Elf32_Sym <aEndutxent - byte_11DFC, 0, \ ; "endutxent"
           0, 0x12, 0, 0>
Elf32_Sym <aSigemptyset - byte_11DFC, 0,\ ; "sigemptyset"
           0, 0x12, 0, 0>
Elf32_Sym <aPopen - byte_11DFC, 0, 0, \ ; "popen"
           0x12, 0, 0>
Elf32_Sym <aVfork+1 - byte_11DFC, 0, 0, \ ; "fork"
           0x12, 0, 0>
Elf32_Sym <aPutenv - byte_11DFC, 0, 0, \ ; "putenv"
           0x12, 0, 0>
Elf32_Sym <aStime - byte_11DFC, 0, 0, \ ; "stime"
           0x12, 0, 0>
Elf32_Sym <aGetnameinfo - byte_11DFC, 0,\ ; "getnameinfo"
           0, 0x12, 0, 0>
Elf32_Sym <aStrrchr - byte_11DFC, 0, 0, \ ; "strrchr"
           0x12, 0, 0>
Elf32_Sym <aVfprintf - byte_11DFC, 0, 0,\ ; "vfprintf"
           0x12, 0, 0>
Elf32_Sym <aLchown - byte_11DFC, lchown,\ ; "lchown"
           0, 0x12, 0, 0>
Elf32_Sym <aSyslog - byte_11DFC, 0, 0, \ ; "syslog"
           0x12, 0, 0>
Elf32_Sym <aSymlink - byte_11DFC, \ ; "symlink"
           symlink, 0, 0x12, 0, 0>
Elf32_Sym <aUpdwtmpx - byte_11DFC, 0, 0,\ ; "updwtmpx"
           0x12, 0, 0>
Elf32_Sym <aSetuid - byte_11DFC, 0, 0, \ ; "setuid"
           0x12, 0, 0>
Elf32_Sym <aSscanf - byte_11DFC, 0, 0, \ ; "sscanf"
           0x12, 0, 0>
Elf32_Sym <aSetpgid - byte_11DFC, 0, 0, \ ; "setpgid"
           0x12, 0, 0>
Elf32_Sym <aClearerr - byte_11DFC, 0, 0,\ ; "clearerr"
           0x12, 0, 0>
Elf32_Sym <aVasprintf+2 - byte_11DFC, 0,\ ; "sprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aReaddir64 - byte_11DFC, 0, \ ; "readdir64"
           0, 0x12, 0, 0>
Elf32_Sym <aMkdtemp - byte_11DFC, 0, 0, \ ; "mkdtemp"
           0x12, 0, 0>
Elf32_Sym <aOpenlog - byte_11DFC, 0, 0, \ ; "openlog"
           0x12, 0, 0>
Elf32_Sym <aRegcomp - byte_11DFC, 0, 0, \ ; "regcomp"
           0x12, 0, 0>
Elf32_Sym <aGetgroups - byte_11DFC, 0, \ ; "getgroups"
           0, 0x12, 0, 0>
Elf32_Sym <aExp - byte_11DFC, 0, 0, \ ; "exp"
           0x12, 0, 0>
Elf32_Sym <aGetsockname - byte_11DFC, \ ; "getsockname"
           getsockname, 0, 0x12, 0, 0>
Elf32_Sym <aVsnprintf - byte_11DFC, 0, \ ; "vsnprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aGetppid - byte_11DFC, 0, 0, \ ; "getppid"
           0x12, 0, 0>
Elf32_Sym <aAtoi - byte_11DFC, 0, 0, \ ; "atoi"
           0x12, 0, 0>
Elf32_Sym <aRecvmsg - byte_11DFC, 0, 0, \ ; "recvmsg"
           0x12, 0, 0>
Elf32_Sym <aFchdir - byte_11DFC, 0, 0, \ ; "fchdir"
           0x12, 0, 0>
Elf32_Sym <aFopen64 - byte_11DFC, 0, 0, \ ; "fopen64"
           0x12, 0, 0>
Elf32_Sym <aQsort - byte_11DFC, 0, 0, \ ; "qsort"
           0x12, 0, 0>
Elf32_Sym <aStrpbrk - byte_11DFC, 0, 0, \ ; "strpbrk"
           0x12, 0, 0>
Elf32_Sym <aFreeaddrinfo - byte_11DFC, \ ; "freeaddrinfo"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGetaddrinfo - byte_11DFC, 0,\ ; "getaddrinfo"
           0, 0x12, 0, 0>
Elf32_Sym <aCapset - byte_11DFC, 0, 0, \ ; "capset"
           0x12, 0, 0>
Elf32_Sym <aInetNtop - byte_11DFC, 0, 0,\ ; "inet_ntop"
           0x12, 0, 0>
Elf32_Sym <aFgetsUnlocked - byte_11DFC, \ ; "fgets_unlocked"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSocket - byte_11DFC, 0, 0, \ ; "socket"
           0x12, 0, 0>
Elf32_Sym <aSchedGetaffini - byte_11DFC,\ ; "sched_getaffinity"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSetmntent - byte_11DFC, 0, \ ; "setmntent"
           0, 0x12, 0, 0>
Elf32_Sym <aCfsetspeed - byte_11DFC, 0, \ ; "cfsetspeed"
           0, 0x12, 0, 0>
Elf32_Sym <aAtof - byte_11DFC, 0, 0, \ ; "atof"
           0x12, 0, 0>
Elf32_Sym <aItmRegistertmc - byte_11DFC,\ ; "_ITM_registerTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aInetAddr - byte_11DFC, 0, 0,\ ; "inet_addr"
           0x12, 0, 0>
Elf32_Sym <aCmsgNxthdr - byte_11DFC, 0, \ ; "__cmsg_nxthdr"
           0, 0x12, 0, 0>
Elf32_Sym <aFsync+1 - byte_11DFC, 0, 0, \ ; "sync"
           0x12, 0, 0>
Elf32_Sym <aEnviron+2 - byte_11DFC, \ ; "environ"
           __environ, 4, 0x21, 0, 0x17>
Elf32_Sym <aGetline - byte_11DFC, 0, 0, \ ; "getline"
           0x12, 0, 0>
Elf32_Sym <aIfNametoindex - byte_11DFC, \ ; "if_nametoindex"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGetspnamR - byte_11DFC, 0, \ ; "getspnam_r"
           0, 0x12, 0, 0>
Elf32_Sym <aUmask - byte_11DFC, 0, 0, \ ; "umask"
           0x12, 0, 0>
Elf32_Sym <aFchmod+1 - byte_11DFC, 0, 0,\ ; "chmod"
           0x12, 0, 0>
Elf32_Sym <aOptarg - byte_11DFC, optarg,\ ; "optarg"
           4, 0x11, 0, 0x17>
Elf32_Sym <aGethostbyname - byte_11DFC, \ ; "gethostbyname"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aXstat64 - byte_11DFC, 0, 0, \ ; "__xstat64"
           0x12, 0, 0>
Elf32_Sym <aIsatty - byte_11DFC, 0, 0, \ ; "isatty"
           0x12, 0, 0>
Elf32_Sym <aXmknod - byte_11DFC, 0, 0, \ ; "__xmknod"
           0x12, 0, 0>
Elf32_Sym <aUnsetenv - byte_11DFC, 0, 0,\ ; "unsetenv"
           0x12, 0, 0>
Elf32_Sym <aStrncmp - byte_11DFC, 0, 0, \ ; "strncmp"
           0x12, 0, 0>
Elf32_Sym <aAbort - byte_11DFC, 0, 0, \ ; "abort"
           0x12, 0, 0>
Elf32_Sym <aFeofUnlocked - byte_11DFC, \ ; "feof_unlocked"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGetutxent - byte_11DFC, 0, \ ; "getutxent"
           0, 0x12, 0, 0>
Elf32_Sym <aRealpath - byte_11DFC, 0, 0,\ ; "realpath"
           0x12, 0, 0>
Elf32_Sym <aFclose+1 - byte_11DFC, 0, 0,\ ; "close"
           0x12, 0, 0>
Elf32_Sym <aLxstat64 - byte_11DFC, 0, 0,\ ; "__lxstat64"
           0x12, 0, 0>
Elf32_Sym <aMkfifo - byte_11DFC, 0, 0, \ ; "mkfifo"
           0x12, 0, 0>
Elf32_Sym <aConnect - byte_11DFC, 0, 0, \ ; "connect"
           0x12, 0, 0>
Elf32_Sym <aClosedir - byte_11DFC, 0, 0,\ ; "closedir"
           0x12, 0, 0>
Elf32_Sym <aGetgrgid - byte_11DFC, 0, 0,\ ; "getgrgid"
           0x12, 0, 0>
Elf32_Sym <aDiv - byte_11DFC, 0, 0, \ ; "div"
           0x12, 0, 0>
Elf32_Sym <aGetgrnam - byte_11DFC, 0, 0,\ ; "getgrnam"
           0x12, 0, 0>
Elf32_Sym <aAtan2 - byte_11DFC, 0, 0, \ ; "atan2"
           0x12, 0, 0>
Elf32_Sym <aPutcharUnlocke - byte_11DFC,\ ; "putchar_unlocked"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrspn - byte_11DFC, 0, 0, \ ; "strspn"
           0x12, 0, 0>
Elf32_Sym <aFchmod - byte_11DFC, 0, 0, \ ; "fchmod"
           0x12, 0, 0>
Elf32_Sym <aCos - byte_11DFC, 0, 0, \ ; "cos"
           0x12, 0, 0>
Elf32_Sym <aTcgetattr - byte_11DFC, 0, \ ; "tcgetattr"
           0, 0x12, 0, 0>
Elf32_Sym <aPutcUnlocked - byte_11DFC, \ ; "putc_unlocked"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aTcgetsid - byte_11DFC, 0, 0,\ ; "tcgetsid"
           0x12, 0, 0>
Elf32_Sym <aFtello64 - byte_11DFC, 0, 0,\ ; "ftello64"
           0x12, 0, 0>
Elf32_Sym <aPclose - byte_11DFC, 0, 0, \ ; "pclose"
           0x12, 0, 0>
Elf32_Sym <aMount - byte_11DFC, 0, 0, \ ; "mount"
           0x12, 0, 0>
; ELF String Table
byte_11DFC DCB 0
aLibmSo6 DCB "libm.so.6",0
aItmDeregistert DCB "_ITM_deregisterTMCloneTable",0
aGmonStart DCB "__gmon_start__",0
aItmRegistertmc DCB "_ITM_registerTMCloneTable",0
aCos DCB "cos",0
aExp DCB "exp",0
aSin DCB "sin",0
aSqrt DCB "sqrt",0
aAtan2 DCB "atan2",0
aPow DCB "pow",0
aLibcSo6 DCB "libc.so.6",0
aKlogctl DCB "klogctl",0
aDprintf DCB "dprintf",0
aSetuid DCB "setuid",0
aChroot DCB "chroot",0
aStrcasestr DCB "strcasestr",0
aSocket DCB "socket",0
aPutcharUnlocke DCB "putchar_unlocked",0
aMkdtemp DCB "mkdtemp",0
aGetspnamR DCB "getspnam_r",0
aFflush DCB "fflush",0
aPutcUnlocked DCB "putc_unlocked",0
aStrcpy DCB "strcpy",0
aSigsuspend DCB "sigsuspend",0
aShmget DCB "shmget",0
aGethostid DCB "gethostid",0
aVasprintf DCB "vasprintf",0
aFchmod DCB "fchmod",0
aFnmatch DCB "fnmatch",0
aGnuDevMajor DCB "gnu_dev_major",0
aExecv DCB "execv",0
aSrand DCB "srand",0
aTtynameR DCB "ttyname_r",0
aStrsignal DCB "strsignal",0
aStrncmp DCB "strncmp",0
aInetAton DCB "inet_aton",0
aOptind DCB "optind",0
aStrrchr DCB "strrchr",0
aWait DCB "wait",0
aRegexec DCB "regexec",0
aPipe DCB "pipe",0
aTcdrain DCB "tcdrain",0
aShmat DCB "shmat",0
aStatvfs64 DCB "statvfs64",0
aConnect DCB "connect",0
aFilenoUnlocked DCB "fileno_unlocked",0
aFtruncate64 DCB "ftruncate64",0
aGetpwuid DCB "getpwuid",0
aSemctl DCB "semctl",0
aClosedir DCB "closedir",0
aInitgroups DCB "initgroups",0
aInetNtoa DCB "inet_ntoa",0
aNanosleep DCB "nanosleep",0
aFchdir DCB "fchdir",0
aFeofUnlocked DCB "feof_unlocked",0
aGetgrgid DCB "getgrgid",0
aInetNtop DCB "inet_ntop",0
aStrncpy DCB "strncpy",0
aPersonality DCB "personality",0
aPuts DCB "puts",0
aGetpriority DCB "getpriority",0
aTcgetsid DCB "tcgetsid",0
aSigprocmask DCB "sigprocmask",0
aRegfree DCB "regfree",0
aSigfillset DCB "sigfillset",0
aShmctl DCB "shmctl",0
aUnlink DCB "unlink",0
aFgetsUnlocked DCB "fgets_unlocked",0
aMkdir DCB "mkdir",0
aShmdt DCB "shmdt",0
aRealloc DCB "realloc",0
aFsync DCB "fsync",0
aAbort DCB "abort",0
aStdin DCB "stdin",0
aStrtoll DCB "strtoll",0
aExit DCB "_exit",0
aVsprintf DCB "vsprintf",0
aDiv DCB "div",0
aMemchr DCB "memchr",0
aStrpbrk DCB "strpbrk",0
aMemrchr DCB "memrchr",0
aPopen DCB "popen",0
aLsetxattr DCB "lsetxattr",0
aGetpid DCB "getpid",0
aKill DCB "kill",0
aStrspn DCB "strspn",0
aPosixFallocate DCB "posix_fallocate64",0
aStrdup DCB "strdup",0
aGetcUnlocked DCB "getc_unlocked",0
aInetPton DCB "inet_pton",0
aStrftime DCB "strftime",0
aLocaltimeR DCB "localtime_r",0
aStrtod DCB "strtod",0
aSetutxent DCB "setutxent",0
aStrtok DCB "strtok",0
aStrtol DCB "strtol",0
aIsatty DCB "isatty",0
aSetmntent DCB "setmntent",0
aLchown DCB "lchown",0
aSchedYield DCB "sched_yield",0
aClearenv DCB "clearenv",0
aStrchrnul DCB "strchrnul",0
aSyslog DCB "syslog",0
aSymlink DCB "symlink",0
aCfsetispeed DCB "cfsetispeed",0
aReboot DCB "reboot",0
aExeclp DCB "execlp",0
aGetpwnam DCB "getpwnam",0
aGetppid DCB "getppid",0
aStrlen DCB "strlen",0
aUngetc DCB "ungetc",0
aPrctl DCB "prctl",0
aSigemptyset DCB "sigemptyset",0
aOpenlog DCB "openlog",0
aGetaddrinfo DCB "getaddrinfo",0
aGetcharUnlocke DCB "getchar_unlocked",0
aMemset DCB "memset",0
aDirname DCB "dirname",0
aCfgetospeed DCB "cfgetospeed",0
aStrstr DCB "strstr",0
aStrcspn DCB "strcspn",0
aRmdir DCB "rmdir",0
aErrnoLocation DCB "__errno_location",0
aTcsetattr DCB "tcsetattr",0
aBind DCB "bind",0
aMemcmp DCB "memcmp",0
aGetpagesize DCB "getpagesize",0
aGetnameinfo DCB "getnameinfo",0
aEndgrent DCB "endgrent",0
aSetgroups DCB "setgroups",0
aGetopt DCB "getopt",0
aGetloginR DCB "getlogin_r",0
aDup2 DCB "dup2",0
aClearerr DCB "clearerr",0
aUnsetenv DCB "unsetenv",0
aLongjmp DCB "longjmp",0
aStrptime DCB "strptime",0
aVsnprintf DCB "vsnprintf",0
aSetjmp DCB "_setjmp",0
aPoll DCB "poll",0
aSigaddset DCB "sigaddset",0
aCtime DCB "ctime",0
aGetgrnam DCB "getgrnam",0
aSethostname DCB "sethostname",0
aPutenv DCB "putenv",0
aFchown DCB "fchown",0
aStdout DCB "stdout",0
aFseeko64 DCB "fseeko64",0
aMktemp DCB "mktemp",0
aInetAddr DCB "inet_addr",0
aRegerror DCB "regerror",0
aStrnlen DCB "strnlen",0
aMemcpy DCB "memcpy",0
aFclose DCB "fclose",0
aTcsetpgrp DCB "tcsetpgrp",0
aGetmntent DCB "getmntent",0
aStrtoul DCB "strtoul",0
aVprintf DCB "vprintf",0
aSetsockopt DCB "setsockopt",0
aMalloc DCB "malloc",0
aKillpg DCB "killpg",0
aStrcat DCB "strcat",0
aUmask DCB "umask",0
aStrcasecmp DCB "strcasecmp",0
aFtello64 DCB "ftello64",0
aRealpath DCB "realpath",0
aRaise DCB "raise",0
aSetpgid DCB "setpgid",0
aGetgid DCB "getgid",0
aOpendir DCB "opendir",0
aSchedGetaffini DCB "sched_getaffinity",0
aGetenv DCB "getenv",0
aSscanf DCB "sscanf",0
aRecvfrom DCB "recvfrom",0
aRegcomp DCB "regcomp",0
aOptarg DCB "optarg",0
aStderr DCB "stderr",0
aSigdelset DCB "sigdelset",0
aIoctl DCB "ioctl",0
aAlarm DCB "alarm",0
aSystem DCB "system",0
aSetrlimit64 DCB "setrlimit64",0
aGethostbyname DCB "gethostbyname",0
aPututxline DCB "pututxline",0
aGetgroups DCB "getgroups",0
aGetuid DCB "getuid",0
aReadlink DCB "readlink",0
aFscanf DCB "fscanf",0
aEtherAtonR DCB "ether_aton_r",0
aExecve DCB "execve",0
aGetegid DCB "getegid",0
aGetoptLong DCB "getopt_long",0
aExecvp DCB "execvp",0
aStrncasecmp DCB "strncasecmp",0
aIfNametoindex DCB "if_nametoindex",0
aSendfile64 DCB "sendfile64",0
aSendmsg DCB "sendmsg",0
aStrtoull DCB "strtoull",0
aPclose DCB "pclose",0
aUtimes DCB "utimes",0
aUsleep DCB "usleep",0
aCmsgNxthdr DCB "__cmsg_nxthdr",0
aGetcwd DCB "getcwd",0
aFwrite DCB "fwrite",0
aUpdwtmpx DCB "updwtmpx",0
aFread DCB "fread",0
aRename DCB "rename",0
aSigaction DCB "sigaction",0
aMkstemp64 DCB "mkstemp64",0
aGnuDevMinor DCB "gnu_dev_minor",0
aGeteuid DCB "geteuid",0
aEtherHostton DCB "ether_hostton",0
aAtof DCB "atof",0
aAtoi DCB "atoi",0
aStime DCB "stime",0
aTcflush DCB "tcflush",0
aWaitpid DCB "waitpid",0
aStrverscmp DCB "strverscmp",0
aLocaltime DCB "localtime",0
aEndutxent DCB "endutxent",0
aLseek64 DCB "lseek64",0
aFerrorUnlocked DCB "ferror_unlocked",0
aStrchr DCB "strchr",0
aCapset DCB "capset",0
aEndmntent DCB "endmntent",0
aGetsockname DCB "getsockname",0
aSendto DCB "sendto",0
aVfork DCB "vfork",0
aMktime DCB "mktime",0
aMallopt DCB "mallopt",0
aGetline DCB "getline",0
aLremovexattr DCB "lremovexattr",0
aFdopen DCB "fdopen",0
aReaddir64 DCB "readdir64",0
aQsort DCB "qsort",0
aHstrerror DCB "hstrerror",0
aTcgetattr DCB "tcgetattr",0
aGetutxent DCB "getutxent",0
aUmount2 DCB "umount2",0
aSyscall DCB "syscall",0
aBsearch DCB "bsearch",0
aFreeaddrinfo DCB "freeaddrinfo",0
aCapget DCB "capget",0
aSetsid DCB "setsid",0
aCfsetspeed DCB "cfsetspeed",0
aFcntl DCB "fcntl",0
aGetrlimit64 DCB "getrlimit64",0
aCfsetospeed DCB "cfsetospeed",0
aCfgetispeed DCB "cfgetispeed",0
aHErrnoLocation DCB "__h_errno_location",0
aGetmntentR DCB "getmntent_r",0
aMount DCB "mount",0
aMemmove DCB "memmove",0
aUname DCB "uname",0
aFopen64 DCB "fopen64",0
aStrsep DCB "strsep",0
aAccess DCB "access",0
aGetgrouplist DCB "getgrouplist",0
aSetgid DCB "setgid",0
aMkfifo DCB "mkfifo",0
aSetbuf DCB "setbuf",0
aStrcmp DCB "strcmp",0
aRecvmsg DCB "recvmsg",0
aTcgetpgrp DCB "tcgetpgrp",0
aLibcStartMain DCB "__libc_start_main",0
aSemop DCB "semop",0
aStpcpy DCB "stpcpy",0
aSetpriority DCB "setpriority",0
aGetservbyport DCB "getservbyport",0
aVfprintf DCB "vfprintf",0
aCloselog DCB "closelog",0
aSysconf DCB "sysconf",0
aGnuDevMakedev DCB "gnu_dev_makedev",0
aFputsUnlocked DCB "fputs_unlocked",0
aSemget DCB "semget",0
aEnviron DCB "__environ",0
aXstat64 DCB "__xstat64",0
aFxstat64 DCB "__fxstat64",0
aLxstat64 DCB "__lxstat64",0
aXmknod DCB "__xmknod",0
aGlibc24 DCB "GLIBC_2.4",0
DCB 0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; fdopen@@GLIBC_2.4
DCW 2                   ; endgrent@@GLIBC_2.4
DCW 2                   ; fputs_unlocked@@GLIBC_2.4
DCW 2                   ; strstr@@GLIBC_2.4
DCW 2                   ; gnu_dev_major@@GLIBC_2.4
DCW 2                   ; ether_hostton@@GLIBC_2.4
DCW 2                   ; raise@@GLIBC_2.4
DCW 2                   ; vasprintf@@GLIBC_2.4
DCW 2                   ; sendfile64@@GLIBC_2.4
DCW 3                   ; log@@GLIBC_2.4
DCW 2                   ; strverscmp@@GLIBC_2.4
DCW 2                   ; inet_aton@@GLIBC_2.4
DCW 2                   ; getpwnam@@GLIBC_2.4
DCW 2                   ; fsync@@GLIBC_2.4
DCW 2                   ; setbuf@@GLIBC_2.4
DCW 2                   ; strcasestr@@GLIBC_2.4
DCW 2                   ; strcmp@@GLIBC_2.4
DCW 2                   ; strtol@@GLIBC_2.4
DCW 2                   ; __environ@@GLIBC_2.4
DCW 2                   ; getpwuid@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_deregisterTMCloneTable
DCW 2                   ; setsockopt@@GLIBC_2.4
DCW 2                   ; strcspn@@GLIBC_2.4
DCW 2                   ; times@@GLIBC_2.4
DCW 2                   ; gnu_dev_makedev@@GLIBC_2.4
DCW 2                   ; dprintf@@GLIBC_2.4
DCW 2                   ; clearenv@@GLIBC_2.4
DCW 2                   ; printf@@GLIBC_2.4
DCW 2                   ; hstrerror@@GLIBC_2.4
DCW 2                   ; gnu_dev_minor@@GLIBC_2.4
DCW 2                   ; regerror@@GLIBC_2.4
DCW 2                   ; setrlimit64@@GLIBC_2.4
DCW 2                   ; read@@GLIBC_2.4
DCW 2                   ; tcflush@@GLIBC_2.4
DCW 2                   ; mktime@@GLIBC_2.4
DCW 2                   ; longjmp@@GLIBC_2.4
DCW 2                   ; fflush@@GLIBC_2.4
DCW 2                   ; getuid@@GLIBC_2.4
DCW 2                   ; sigprocmask@@GLIBC_2.4
DCW 2                   ; _setjmp@@GLIBC_2.4
DCW 2                   ; memmove@@GLIBC_2.4
DCW 2                   ; lsetxattr@@GLIBC_2.4
DCW 2                   ; strchrnul@@GLIBC_2.4
DCW 2                   ; free@@GLIBC_2.4
DCW 2                   ; nanosleep@@GLIBC_2.4
DCW 2                   ; fileno_unlocked@@GLIBC_2.4
DCW 2                   ; inet_pton@@GLIBC_2.4
DCW 2                   ; _exit@@GLIBC_2.4
DCW 2                   ; pututxline@@GLIBC_2.4
DCW 2                   ; memcpy@@GLIBC_2.4
DCW 2                   ; execvp@@GLIBC_2.4
DCW 2                   ; execlp@@GLIBC_2.4
DCW 2                   ; shmget@@GLIBC_2.4
DCW 2                   ; signal@@GLIBC_2.4
DCW 2                   ; time@@GLIBC_2.4
DCW 2                   ; rmdir@@GLIBC_2.4
DCW 2                   ; gethostid@@GLIBC_2.4
DCW 2                   ; tcsetpgrp@@GLIBC_2.4
DCW 2                   ; sendmsg@@GLIBC_2.4
DCW 3                   ; pow@@GLIBC_2.4
DCW 2                   ; ftruncate64@@GLIBC_2.4
DCW 2                   ; memcmp@@GLIBC_2.4
DCW 2                   ; inet_ntoa@@GLIBC_2.4
DCW 2                   ; sleep@@GLIBC_2.4
DCW 2                   ; stpcpy@@GLIBC_2.4
DCW 2                   ; getc_unlocked@@GLIBC_2.4
DCW 2                   ; uname@@GLIBC_2.4
DCW 2                   ; ctime@@GLIBC_2.4
DCW 2                   ; removexattr@@GLIBC_2.4
DCW 2                   ; optind@@GLIBC_2.4
DCW 2                   ; recvfrom@@GLIBC_2.4
DCW 2                   ; strdup@@GLIBC_2.4
DCW 2                   ; setutxent@@GLIBC_2.4
DCW 2                   ; cfgetispeed@@GLIBC_2.4
DCW 2                   ; alarm@@GLIBC_2.4
DCW 2                   ; sysconf@@GLIBC_2.4
DCW 2                   ; unlink@@GLIBC_2.4
DCW 2                   ; dup2@@GLIBC_2.4
DCW 2                   ; reboot@@GLIBC_2.4
DCW 2                   ; getrlimit64@@GLIBC_2.4
DCW 2                   ; realloc@@GLIBC_2.4
DCW 2                   ; killpg@@GLIBC_2.4
DCW 2                   ; strptime@@GLIBC_2.4
DCW 2                   ; dup@@GLIBC_2.4
DCW 2                   ; getpriority@@GLIBC_2.4
DCW 2                   ; initgroups@@GLIBC_2.4
DCW 2                   ; regexec@@GLIBC_2.4
DCW 2                   ; localtime_r@@GLIBC_2.4
DCW 2                   ; wait@@GLIBC_2.4
DCW 2                   ; getlogin_r@@GLIBC_2.4
DCW 2                   ; shmat@@GLIBC_2.4
DCW 2                   ; chdir@@GLIBC_2.4
DCW 2                   ; strcasecmp@@GLIBC_2.4
DCW 2                   ; getpgrp@@GLIBC_2.4
DCW 2                   ; geteuid@@GLIBC_2.4
DCW 2                   ; strsignal@@GLIBC_2.4
DCW 2                   ; poll@@GLIBC_2.4
DCW 2                   ; setgroups@@GLIBC_2.4
DCW 2                   ; cfsetospeed@@GLIBC_2.4
DCW 2                   ; semop@@GLIBC_2.4
DCW 2                   ; __fxstat64@@GLIBC_2.4
DCW 2                   ; readlink@@GLIBC_2.4
DCW 2                   ; getegid@@GLIBC_2.4
DCW 2                   ; sigaction@@GLIBC_2.4
DCW 2                   ; stderr@@GLIBC_2.4
DCW 2                   ; fwrite@@GLIBC_2.4
DCW 2                   ; strcat@@GLIBC_2.4
DCW 2                   ; ioctl@@GLIBC_2.4
DCW 2                   ; lseek64@@GLIBC_2.4
DCW 2                   ; regfree@@GLIBC_2.4
DCW 2                   ; strtoll@@GLIBC_2.4
DCW 2                   ; capget@@GLIBC_2.4
DCW 2                   ; usleep@@GLIBC_2.4
DCW 2                   ; waitpid@@GLIBC_2.4
DCW 2                   ; tcsetattr@@GLIBC_2.4
DCW 2                   ; strcpy@@GLIBC_2.4
DCW 2                   ; chroot@@GLIBC_2.4
DCW 2                   ; fread@@GLIBC_2.4
DCW 2                   ; sched_yield@@GLIBC_2.4
DCW 2                   ; ferror_unlocked@@GLIBC_2.4
DCW 2                   ; shmctl@@GLIBC_2.4
DCW 2                   ; getmntent@@GLIBC_2.4
DCW 2                   ; opendir@@GLIBC_2.4
DCW 2                   ; umount2@@GLIBC_2.4
DCW 2                   ; setxattr@@GLIBC_2.4
DCW 2                   ; fnmatch@@GLIBC_2.4
DCW 2                   ; open64@@GLIBC_2.4
DCW 2                   ; getenv@@GLIBC_2.4
DCW 2                   ; setpriority@@GLIBC_2.4
DCW 2                   ; mkstemp64@@GLIBC_2.4
DCW 2                   ; puts@@GLIBC_2.4
DCW 2                   ; setgid@@GLIBC_2.4
DCW 2                   ; malloc@@GLIBC_2.4
DCW 2                   ; sigaddset@@GLIBC_2.4
DCW 2                   ; __libc_start_main@@GLIBC_2.4
DCW 2                   ; strerror@@GLIBC_2.4
DCW 2                   ; system@@GLIBC_2.4
DCW 2                   ; strftime@@GLIBC_2.4
DCW 2                   ; tcdrain@@GLIBC_2.4
DCW 2                   ; __h_errno_location@@GLIBC_2.4
DCW 2                   ; localtime@@GLIBC_2.4
DCW 2                   ; strsep@@GLIBC_2.4
DCW 2                   ; lremovexattr@@GLIBC_2.4
DCW 2                   ; mktemp@@GLIBC_2.4
DCW 2                   ; closelog@@GLIBC_2.4
DCW 2                   ; sethostname@@GLIBC_2.4
DCW 2                   ; dirname@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 2                   ; rename@@GLIBC_2.4
DCW 2                   ; getopt_long@@GLIBC_2.4
DCW 2                   ; kill@@GLIBC_2.4
DCW 2                   ; getcwd@@GLIBC_2.4
DCW 2                   ; getpid@@GLIBC_2.4
DCW 2                   ; exit@@GLIBC_2.4
DCW 2                   ; syscall@@GLIBC_2.4
DCW 3                   ; sin@@GLIBC_2.4
DCW 2                   ; strtoul@@GLIBC_2.4
DCW 2                   ; tcgetpgrp@@GLIBC_2.4
DCW 2                   ; strlen@@GLIBC_2.4
DCW 2                   ; getchar_unlocked@@GLIBC_2.4
DCW 2                   ; setsid@@GLIBC_2.4
DCW 2                   ; vprintf@@GLIBC_2.4
DCW 2                   ; strchr@@GLIBC_2.4
DCW 2                   ; srand@@GLIBC_2.4
DCW 2                   ; setenv@@GLIBC_2.4
DCW 2                   ; personality@@GLIBC_2.4
DCW 2                   ; memrchr@@GLIBC_2.4
DCW 2                   ; ttyname_r@@GLIBC_2.4
DCW 2                   ; fchown@@GLIBC_2.4
DCW 2                   ; execve@@GLIBC_2.4
DCW 2                   ; getopt@@GLIBC_2.4
DCW 2                   ; fprintf@@GLIBC_2.4
DCW 2                   ; getpagesize@@GLIBC_2.4
DCW 2                   ; cfsetispeed@@GLIBC_2.4
DCW 2                   ; chown@@GLIBC_2.4
DCW 2                   ; stdin@@GLIBC_2.4
DCW 2                   ; ungetc@@GLIBC_2.4
DCW 2                   ; fcntl@@GLIBC_2.4
DCW 2                   ; execv@@GLIBC_2.4
DCW 3                   ; sqrt@@GLIBC_2.4
DCW 2                   ; cfgetospeed@@GLIBC_2.4
DCW 2                   ; sigfillset@@GLIBC_2.4
DCW 2                   ; __errno_location@@GLIBC_2.4
DCW 2                   ; strncasecmp@@GLIBC_2.4
DCW 2                   ; klogctl@@GLIBC_2.4
DCW 2                   ; snprintf@@GLIBC_2.4
DCW 2                   ; mkdir@@GLIBC_2.4
DCW 2                   ; semget@@GLIBC_2.4
DCW 2                   ; bind@@GLIBC_2.4
DCW 2                   ; getservbyport@@GLIBC_2.4
DCW 2                   ; getgid@@GLIBC_2.4
DCW 2                   ; getgrouplist@@GLIBC_2.4
DCW 2                   ; memset@@GLIBC_2.4
DCW 2                   ; getmntent_r@@GLIBC_2.4
DCW 2                   ; bsearch@@GLIBC_2.4
DCW 2                   ; utimes@@GLIBC_2.4
DCW 2                   ; strncpy@@GLIBC_2.4
DCW 2                   ; fscanf@@GLIBC_2.4
DCW 2                   ; mallopt@@GLIBC_2.4
DCW 2                   ; sigsuspend@@GLIBC_2.4
DCW 2                   ; strtoull@@GLIBC_2.4
DCW 2                   ; statvfs64@@GLIBC_2.4
DCW 2                   ; prctl@@GLIBC_2.4
DCW 2                   ; strtod@@GLIBC_2.4
DCW 2                   ; link@@GLIBC_2.4
DCW 2                   ; write@@GLIBC_2.4
DCW 2                   ; sigdelset@@GLIBC_2.4
DCW 2                   ; ether_aton_r@@GLIBC_2.4
DCW 2                   ; shmdt@@GLIBC_2.4
DCW 2                   ; vfork@@GLIBC_2.4
DCW 2                   ; memchr@@GLIBC_2.4
DCW 2                   ; vsprintf@@GLIBC_2.4
DCW 2                   ; access@@GLIBC_2.4
DCW 2                   ; rand@@GLIBC_2.4
DCW 2                   ; stdout@@GLIBC_2.4
DCW 2                   ; fclose@@GLIBC_2.4
DCW 2                   ; getsid@@GLIBC_2.4
DCW 2                   ; strnlen@@GLIBC_2.4
DCW 2                   ; pipe@@GLIBC_2.4
DCW 2                   ; fseeko64@@GLIBC_2.4
DCW 2                   ; endmntent@@GLIBC_2.4
DCW 2                   ; posix_fallocate64@@GLIBC_2.4
DCW 2                   ; strtok@@GLIBC_2.4
DCW 2                   ; semctl@@GLIBC_2.4
DCW 2                   ; sendto@@GLIBC_2.4
DCW 2                   ; endutxent@@GLIBC_2.4
DCW 2                   ; sigemptyset@@GLIBC_2.4
DCW 2                   ; popen@@GLIBC_2.4
DCW 2                   ; fork@@GLIBC_2.4
DCW 2                   ; putenv@@GLIBC_2.4
DCW 2                   ; stime@@GLIBC_2.4
DCW 2                   ; getnameinfo@@GLIBC_2.4
DCW 2                   ; strrchr@@GLIBC_2.4
DCW 2                   ; vfprintf@@GLIBC_2.4
DCW 2                   ; lchown@@GLIBC_2.4
DCW 2                   ; syslog@@GLIBC_2.4
DCW 2                   ; symlink@@GLIBC_2.4
DCW 2                   ; updwtmpx@@GLIBC_2.4
DCW 2                   ; setuid@@GLIBC_2.4
DCW 2                   ; sscanf@@GLIBC_2.4
DCW 2                   ; setpgid@@GLIBC_2.4
DCW 2                   ; clearerr@@GLIBC_2.4
DCW 2                   ; sprintf@@GLIBC_2.4
DCW 2                   ; readdir64@@GLIBC_2.4
DCW 2                   ; mkdtemp@@GLIBC_2.4
DCW 2                   ; openlog@@GLIBC_2.4
DCW 2                   ; regcomp@@GLIBC_2.4
DCW 2                   ; getgroups@@GLIBC_2.4
DCW 3                   ; exp@@GLIBC_2.4
DCW 2                   ; getsockname@@GLIBC_2.4
DCW 2                   ; vsnprintf@@GLIBC_2.4
DCW 2                   ; getppid@@GLIBC_2.4
DCW 2                   ; atoi@@GLIBC_2.4
DCW 2                   ; recvmsg@@GLIBC_2.4
DCW 2                   ; fchdir@@GLIBC_2.4
DCW 2                   ; fopen64@@GLIBC_2.4
DCW 2                   ; qsort@@GLIBC_2.4
DCW 2                   ; strpbrk@@GLIBC_2.4
DCW 2                   ; freeaddrinfo@@GLIBC_2.4
DCW 2                   ; getaddrinfo@@GLIBC_2.4
DCW 2                   ; capset@@GLIBC_2.4
DCW 2                   ; inet_ntop@@GLIBC_2.4
DCW 2                   ; fgets_unlocked@@GLIBC_2.4
DCW 2                   ; socket@@GLIBC_2.4
DCW 2                   ; sched_getaffinity@@GLIBC_2.4
DCW 2                   ; setmntent@@GLIBC_2.4
DCW 2                   ; cfsetspeed@@GLIBC_2.4
DCW 2                   ; atof@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_registerTMCloneTable
DCW 2                   ; inet_addr@@GLIBC_2.4
DCW 2                   ; __cmsg_nxthdr@@GLIBC_2.4
DCW 2                   ; sync@@GLIBC_2.4
DCW 2                   ; environ@@GLIBC_2.4
DCW 2                   ; getline@@GLIBC_2.4
DCW 2                   ; if_nametoindex@@GLIBC_2.4
DCW 2                   ; getspnam_r@@GLIBC_2.4
DCW 2                   ; umask@@GLIBC_2.4
DCW 2                   ; chmod@@GLIBC_2.4
DCW 2                   ; optarg@@GLIBC_2.4
DCW 2                   ; gethostbyname@@GLIBC_2.4
DCW 2                   ; __xstat64@@GLIBC_2.4
DCW 2                   ; isatty@@GLIBC_2.4
DCW 2                   ; __xmknod@@GLIBC_2.4
DCW 2                   ; unsetenv@@GLIBC_2.4
DCW 2                   ; strncmp@@GLIBC_2.4
DCW 2                   ; abort@@GLIBC_2.4
DCW 2                   ; feof_unlocked@@GLIBC_2.4
DCW 2                   ; getutxent@@GLIBC_2.4
DCW 2                   ; realpath@@GLIBC_2.4
DCW 2                   ; close@@GLIBC_2.4
DCW 2                   ; __lxstat64@@GLIBC_2.4
DCW 2                   ; mkfifo@@GLIBC_2.4
DCW 2                   ; connect@@GLIBC_2.4
DCW 2                   ; closedir@@GLIBC_2.4
DCW 2                   ; getgrgid@@GLIBC_2.4
DCW 2                   ; div@@GLIBC_2.4
DCW 2                   ; getgrnam@@GLIBC_2.4
DCW 3                   ; atan2@@GLIBC_2.4
DCW 2                   ; putchar_unlocked@@GLIBC_2.4
DCW 2                   ; strspn@@GLIBC_2.4
DCW 2                   ; fchmod@@GLIBC_2.4
DCW 3                   ; cos@@GLIBC_2.4
DCW 2                   ; tcgetattr@@GLIBC_2.4
DCW 2                   ; putc_unlocked@@GLIBC_2.4
DCW 2                   ; tcgetsid@@GLIBC_2.4
DCW 2                   ; ftello64@@GLIBC_2.4
DCW 2                   ; pclose@@GLIBC_2.4
DCW 2                   ; mount@@GLIBC_2.4
DCW 0
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libm.so.6"
               aLibmSo6 - byte_11DFC, \
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 3, \ ; "GLIBC_2.4"
               aGlibc24 - byte_11DFC, 0>
Elf32_Verneed <1, 1, \  ; "libc.so.6"
               aLibcSo6 - byte_11DFC, \
               0x10, 0>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_11DFC, 0>
; ELF REL Relocation Table
Elf32_Rel <0x7D4B8, 0x9415> ; R_ARM_GLOB_DAT __gmon_start__
Elf32_Rel <0x7D600, 0x1314> ; R_ARM_COPY __environ
Elf32_Rel <0x7D604, 0x4614> ; R_ARM_COPY optind
Elf32_Rel <0x7D608, 0x6914> ; R_ARM_COPY stderr
Elf32_Rel <0x7D610, 0xB014> ; R_ARM_COPY stdin
Elf32_Rel <0x7D614, 0xD714> ; R_ARM_COPY stdout
Elf32_Rel <0x7D618, 0x11714> ; R_ARM_COPY optarg
; ELF JMPREL Relocation Table
Elf32_Rel <0x7D00C, 0x116> ; R_ARM_JUMP_SLOT fdopen
Elf32_Rel <0x7D010, 0x216> ; R_ARM_JUMP_SLOT endgrent
Elf32_Rel <0x7D014, 0x316> ; R_ARM_JUMP_SLOT fputs_unlocked
Elf32_Rel <0x7D018, 0x416> ; R_ARM_JUMP_SLOT strstr
Elf32_Rel <0x7D01C, 0x516> ; R_ARM_JUMP_SLOT gnu_dev_major
Elf32_Rel <0x7D020, 0x616> ; R_ARM_JUMP_SLOT ether_hostton
Elf32_Rel <0x7D024, 0x716> ; R_ARM_JUMP_SLOT raise
Elf32_Rel <0x7D028, 0x816> ; R_ARM_JUMP_SLOT vasprintf
Elf32_Rel <0x7D02C, 0x916> ; R_ARM_JUMP_SLOT sendfile64
Elf32_Rel <0x7D030, 0xA16> ; R_ARM_JUMP_SLOT log
Elf32_Rel <0x7D034, 0xB16> ; R_ARM_JUMP_SLOT strverscmp
Elf32_Rel <0x7D038, 0xC16> ; R_ARM_JUMP_SLOT inet_aton
Elf32_Rel <0x7D03C, 0xD16> ; R_ARM_JUMP_SLOT getpwnam
Elf32_Rel <0x7D040, 0xE16> ; R_ARM_JUMP_SLOT fsync
Elf32_Rel <0x7D044, 0xF16> ; R_ARM_JUMP_SLOT setbuf
Elf32_Rel <0x7D048, 0x1016> ; R_ARM_JUMP_SLOT strcasestr
Elf32_Rel <0x7D04C, 0x1116> ; R_ARM_JUMP_SLOT strcmp
Elf32_Rel <0x7D050, 0x1216> ; R_ARM_JUMP_SLOT strtol
Elf32_Rel <0x7D054, 0x1416> ; R_ARM_JUMP_SLOT getpwuid
Elf32_Rel <0x7D058, 0x1616> ; R_ARM_JUMP_SLOT setsockopt
Elf32_Rel <0x7D05C, 0x1716> ; R_ARM_JUMP_SLOT strcspn
Elf32_Rel <0x7D060, 0x1816> ; R_ARM_JUMP_SLOT times
Elf32_Rel <0x7D064, 0x1916> ; R_ARM_JUMP_SLOT gnu_dev_makedev
Elf32_Rel <0x7D068, 0x1A16> ; R_ARM_JUMP_SLOT dprintf
Elf32_Rel <0x7D06C, 0x1B16> ; R_ARM_JUMP_SLOT clearenv
Elf32_Rel <0x7D070, 0x1C16> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x7D074, 0x1D16> ; R_ARM_JUMP_SLOT hstrerror
Elf32_Rel <0x7D078, 0x1E16> ; R_ARM_JUMP_SLOT gnu_dev_minor
Elf32_Rel <0x7D07C, 0x1F16> ; R_ARM_JUMP_SLOT regerror
Elf32_Rel <0x7D080, 0x2016> ; R_ARM_JUMP_SLOT setrlimit64
Elf32_Rel <0x7D084, 0x2116> ; R_ARM_JUMP_SLOT read
Elf32_Rel <0x7D088, 0x2216> ; R_ARM_JUMP_SLOT tcflush
Elf32_Rel <0x7D08C, 0x2316> ; R_ARM_JUMP_SLOT mktime
Elf32_Rel <0x7D090, 0x2416> ; R_ARM_JUMP_SLOT longjmp
Elf32_Rel <0x7D094, 0x2516> ; R_ARM_JUMP_SLOT fflush
Elf32_Rel <0x7D098, 0x2616> ; R_ARM_JUMP_SLOT getuid
Elf32_Rel <0x7D09C, 0x2716> ; R_ARM_JUMP_SLOT sigprocmask
Elf32_Rel <0x7D0A0, 0x2816> ; R_ARM_JUMP_SLOT _setjmp
Elf32_Rel <0x7D0A4, 0x2916> ; R_ARM_JUMP_SLOT memmove
Elf32_Rel <0x7D0A8, 0x2A16> ; R_ARM_JUMP_SLOT lsetxattr
Elf32_Rel <0x7D0AC, 0x2B16> ; R_ARM_JUMP_SLOT strchrnul
Elf32_Rel <0x7D0B0, 0x2C16> ; R_ARM_JUMP_SLOT free
Elf32_Rel <0x7D0B4, 0x2D16> ; R_ARM_JUMP_SLOT nanosleep
Elf32_Rel <0x7D0B8, 0x2E16> ; R_ARM_JUMP_SLOT fileno_unlocked
Elf32_Rel <0x7D0BC, 0x2F16> ; R_ARM_JUMP_SLOT inet_pton
Elf32_Rel <0x7D0C0, 0x3016> ; R_ARM_JUMP_SLOT _exit
Elf32_Rel <0x7D0C4, 0x3116> ; R_ARM_JUMP_SLOT pututxline
Elf32_Rel <0x7D0C8, 0x3216> ; R_ARM_JUMP_SLOT memcpy
Elf32_Rel <0x7D0CC, 0x3316> ; R_ARM_JUMP_SLOT execvp
Elf32_Rel <0x7D0D0, 0x3416> ; R_ARM_JUMP_SLOT execlp
Elf32_Rel <0x7D0D4, 0x3516> ; R_ARM_JUMP_SLOT shmget
Elf32_Rel <0x7D0D8, 0x3616> ; R_ARM_JUMP_SLOT signal
Elf32_Rel <0x7D0DC, 0x3716> ; R_ARM_JUMP_SLOT time
Elf32_Rel <0x7D0E0, 0x3816> ; R_ARM_JUMP_SLOT rmdir
Elf32_Rel <0x7D0E4, 0x3916> ; R_ARM_JUMP_SLOT gethostid
Elf32_Rel <0x7D0E8, 0x3A16> ; R_ARM_JUMP_SLOT tcsetpgrp
Elf32_Rel <0x7D0EC, 0x3B16> ; R_ARM_JUMP_SLOT sendmsg
Elf32_Rel <0x7D0F0, 0x3C16> ; R_ARM_JUMP_SLOT pow
Elf32_Rel <0x7D0F4, 0x3D16> ; R_ARM_JUMP_SLOT ftruncate64
Elf32_Rel <0x7D0F8, 0x3E16> ; R_ARM_JUMP_SLOT memcmp
Elf32_Rel <0x7D0FC, 0x3F16> ; R_ARM_JUMP_SLOT inet_ntoa
Elf32_Rel <0x7D100, 0x4016> ; R_ARM_JUMP_SLOT sleep
Elf32_Rel <0x7D104, 0x4116> ; R_ARM_JUMP_SLOT stpcpy
Elf32_Rel <0x7D108, 0x4216> ; R_ARM_JUMP_SLOT getc_unlocked
Elf32_Rel <0x7D10C, 0x4316> ; R_ARM_JUMP_SLOT uname
Elf32_Rel <0x7D110, 0x4416> ; R_ARM_JUMP_SLOT ctime
Elf32_Rel <0x7D114, 0x4516> ; R_ARM_JUMP_SLOT removexattr
Elf32_Rel <0x7D118, 0x4716> ; R_ARM_JUMP_SLOT recvfrom
Elf32_Rel <0x7D11C, 0x4816> ; R_ARM_JUMP_SLOT strdup
Elf32_Rel <0x7D120, 0x4916> ; R_ARM_JUMP_SLOT setutxent
Elf32_Rel <0x7D124, 0x4A16> ; R_ARM_JUMP_SLOT cfgetispeed
Elf32_Rel <0x7D128, 0x4B16> ; R_ARM_JUMP_SLOT alarm
Elf32_Rel <0x7D12C, 0x4C16> ; R_ARM_JUMP_SLOT sysconf
Elf32_Rel <0x7D130, 0x4D16> ; R_ARM_JUMP_SLOT unlink
Elf32_Rel <0x7D134, 0x4E16> ; R_ARM_JUMP_SLOT dup2
Elf32_Rel <0x7D138, 0x4F16> ; R_ARM_JUMP_SLOT reboot
Elf32_Rel <0x7D13C, 0x5016> ; R_ARM_JUMP_SLOT getrlimit64
Elf32_Rel <0x7D140, 0x5116> ; R_ARM_JUMP_SLOT realloc
Elf32_Rel <0x7D144, 0x5216> ; R_ARM_JUMP_SLOT killpg
Elf32_Rel <0x7D148, 0x5316> ; R_ARM_JUMP_SLOT strptime
Elf32_Rel <0x7D14C, 0x5416> ; R_ARM_JUMP_SLOT dup
Elf32_Rel <0x7D150, 0x5516> ; R_ARM_JUMP_SLOT getpriority
Elf32_Rel <0x7D154, 0x5616> ; R_ARM_JUMP_SLOT initgroups
Elf32_Rel <0x7D158, 0x5716> ; R_ARM_JUMP_SLOT regexec
Elf32_Rel <0x7D15C, 0x5816> ; R_ARM_JUMP_SLOT localtime_r
Elf32_Rel <0x7D160, 0x5916> ; R_ARM_JUMP_SLOT wait
Elf32_Rel <0x7D164, 0x5A16> ; R_ARM_JUMP_SLOT getlogin_r
Elf32_Rel <0x7D168, 0x5B16> ; R_ARM_JUMP_SLOT shmat
Elf32_Rel <0x7D16C, 0x5C16> ; R_ARM_JUMP_SLOT chdir
Elf32_Rel <0x7D170, 0x5D16> ; R_ARM_JUMP_SLOT strcasecmp
Elf32_Rel <0x7D174, 0x5E16> ; R_ARM_JUMP_SLOT getpgrp
Elf32_Rel <0x7D178, 0x5F16> ; R_ARM_JUMP_SLOT geteuid
Elf32_Rel <0x7D17C, 0x6016> ; R_ARM_JUMP_SLOT strsignal
Elf32_Rel <0x7D180, 0x6116> ; R_ARM_JUMP_SLOT poll
Elf32_Rel <0x7D184, 0x6216> ; R_ARM_JUMP_SLOT setgroups
Elf32_Rel <0x7D188, 0x6316> ; R_ARM_JUMP_SLOT cfsetospeed
Elf32_Rel <0x7D18C, 0x6416> ; R_ARM_JUMP_SLOT semop
Elf32_Rel <0x7D190, 0x6516> ; R_ARM_JUMP_SLOT __fxstat64
Elf32_Rel <0x7D194, 0x6616> ; R_ARM_JUMP_SLOT readlink
Elf32_Rel <0x7D198, 0x6716> ; R_ARM_JUMP_SLOT getegid
Elf32_Rel <0x7D19C, 0x6816> ; R_ARM_JUMP_SLOT sigaction
Elf32_Rel <0x7D1A0, 0x6A16> ; R_ARM_JUMP_SLOT fwrite
Elf32_Rel <0x7D1A4, 0x6B16> ; R_ARM_JUMP_SLOT strcat
Elf32_Rel <0x7D1A8, 0x6C16> ; R_ARM_JUMP_SLOT ioctl
Elf32_Rel <0x7D1AC, 0x6D16> ; R_ARM_JUMP_SLOT lseek64
Elf32_Rel <0x7D1B0, 0x6E16> ; R_ARM_JUMP_SLOT regfree
Elf32_Rel <0x7D1B4, 0x6F16> ; R_ARM_JUMP_SLOT strtoll
Elf32_Rel <0x7D1B8, 0x7016> ; R_ARM_JUMP_SLOT capget
Elf32_Rel <0x7D1BC, 0x7116> ; R_ARM_JUMP_SLOT usleep
Elf32_Rel <0x7D1C0, 0x7216> ; R_ARM_JUMP_SLOT waitpid
Elf32_Rel <0x7D1C4, 0x7316> ; R_ARM_JUMP_SLOT tcsetattr
Elf32_Rel <0x7D1C8, 0x7416> ; R_ARM_JUMP_SLOT strcpy
Elf32_Rel <0x7D1CC, 0x7516> ; R_ARM_JUMP_SLOT chroot
Elf32_Rel <0x7D1D0, 0x7616> ; R_ARM_JUMP_SLOT fread
Elf32_Rel <0x7D1D4, 0x7716> ; R_ARM_JUMP_SLOT sched_yield
Elf32_Rel <0x7D1D8, 0x7816> ; R_ARM_JUMP_SLOT ferror_unlocked
Elf32_Rel <0x7D1DC, 0x7916> ; R_ARM_JUMP_SLOT shmctl
Elf32_Rel <0x7D1E0, 0x7A16> ; R_ARM_JUMP_SLOT getmntent
Elf32_Rel <0x7D1E4, 0x7B16> ; R_ARM_JUMP_SLOT opendir
Elf32_Rel <0x7D1E8, 0x7C16> ; R_ARM_JUMP_SLOT umount2
Elf32_Rel <0x7D1EC, 0x7D16> ; R_ARM_JUMP_SLOT setxattr
Elf32_Rel <0x7D1F0, 0x7E16> ; R_ARM_JUMP_SLOT fnmatch
Elf32_Rel <0x7D1F4, 0x7F16> ; R_ARM_JUMP_SLOT open64
Elf32_Rel <0x7D1F8, 0x8016> ; R_ARM_JUMP_SLOT getenv
Elf32_Rel <0x7D1FC, 0x8116> ; R_ARM_JUMP_SLOT setpriority
Elf32_Rel <0x7D200, 0x8216> ; R_ARM_JUMP_SLOT mkstemp64
Elf32_Rel <0x7D204, 0x8316> ; R_ARM_JUMP_SLOT puts
Elf32_Rel <0x7D208, 0x8416> ; R_ARM_JUMP_SLOT setgid
Elf32_Rel <0x7D20C, 0x8516> ; R_ARM_JUMP_SLOT malloc
Elf32_Rel <0x7D210, 0x8616> ; R_ARM_JUMP_SLOT sigaddset
Elf32_Rel <0x7D214, 0x8716> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x7D218, 0x8816> ; R_ARM_JUMP_SLOT strerror
Elf32_Rel <0x7D21C, 0x8916> ; R_ARM_JUMP_SLOT system
Elf32_Rel <0x7D220, 0x8A16> ; R_ARM_JUMP_SLOT strftime
Elf32_Rel <0x7D224, 0x8B16> ; R_ARM_JUMP_SLOT tcdrain
Elf32_Rel <0x7D228, 0x8C16> ; R_ARM_JUMP_SLOT __h_errno_location
Elf32_Rel <0x7D22C, 0x8D16> ; R_ARM_JUMP_SLOT localtime
Elf32_Rel <0x7D230, 0x8E16> ; R_ARM_JUMP_SLOT strsep
Elf32_Rel <0x7D234, 0x8F16> ; R_ARM_JUMP_SLOT lremovexattr
Elf32_Rel <0x7D238, 0x9016> ; R_ARM_JUMP_SLOT mktemp
Elf32_Rel <0x7D23C, 0x9116> ; R_ARM_JUMP_SLOT closelog
Elf32_Rel <0x7D240, 0x9216> ; R_ARM_JUMP_SLOT sethostname
Elf32_Rel <0x7D244, 0x9316> ; R_ARM_JUMP_SLOT dirname
Elf32_Rel <0x7D248, 0x9416> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x7D24C, 0x9516> ; R_ARM_JUMP_SLOT rename
Elf32_Rel <0x7D250, 0x9616> ; R_ARM_JUMP_SLOT getopt_long
Elf32_Rel <0x7D254, 0x9716> ; R_ARM_JUMP_SLOT kill
Elf32_Rel <0x7D258, 0x9816> ; R_ARM_JUMP_SLOT getcwd
Elf32_Rel <0x7D25C, 0x9916> ; R_ARM_JUMP_SLOT getpid
Elf32_Rel <0x7D260, 0x9A16> ; R_ARM_JUMP_SLOT exit
Elf32_Rel <0x7D264, 0x9B16> ; R_ARM_JUMP_SLOT syscall
Elf32_Rel <0x7D268, 0x9C16> ; R_ARM_JUMP_SLOT sin
Elf32_Rel <0x7D26C, 0x9D16> ; R_ARM_JUMP_SLOT strtoul
Elf32_Rel <0x7D270, 0x9E16> ; R_ARM_JUMP_SLOT tcgetpgrp
Elf32_Rel <0x7D274, 0x9F16> ; R_ARM_JUMP_SLOT strlen
Elf32_Rel <0x7D278, 0xA016> ; R_ARM_JUMP_SLOT getchar_unlocked
Elf32_Rel <0x7D27C, 0xA116> ; R_ARM_JUMP_SLOT setsid
Elf32_Rel <0x7D280, 0xA216> ; R_ARM_JUMP_SLOT vprintf
Elf32_Rel <0x7D284, 0xA316> ; R_ARM_JUMP_SLOT strchr
Elf32_Rel <0x7D288, 0xA416> ; R_ARM_JUMP_SLOT srand
Elf32_Rel <0x7D28C, 0xA516> ; R_ARM_JUMP_SLOT setenv
Elf32_Rel <0x7D290, 0xA616> ; R_ARM_JUMP_SLOT personality
Elf32_Rel <0x7D294, 0xA716> ; R_ARM_JUMP_SLOT memrchr
Elf32_Rel <0x7D298, 0xA816> ; R_ARM_JUMP_SLOT ttyname_r
Elf32_Rel <0x7D29C, 0xA916> ; R_ARM_JUMP_SLOT fchown
Elf32_Rel <0x7D2A0, 0xAA16> ; R_ARM_JUMP_SLOT execve
Elf32_Rel <0x7D2A4, 0xAB16> ; R_ARM_JUMP_SLOT getopt
Elf32_Rel <0x7D2A8, 0xAC16> ; R_ARM_JUMP_SLOT fprintf
Elf32_Rel <0x7D2AC, 0xAD16> ; R_ARM_JUMP_SLOT getpagesize
Elf32_Rel <0x7D2B0, 0xAE16> ; R_ARM_JUMP_SLOT cfsetispeed
Elf32_Rel <0x7D2B4, 0xAF16> ; R_ARM_JUMP_SLOT chown
Elf32_Rel <0x7D2B8, 0xB116> ; R_ARM_JUMP_SLOT ungetc
Elf32_Rel <0x7D2BC, 0xB216> ; R_ARM_JUMP_SLOT fcntl
Elf32_Rel <0x7D2C0, 0xB316> ; R_ARM_JUMP_SLOT execv
Elf32_Rel <0x7D2C4, 0xB416> ; R_ARM_JUMP_SLOT sqrt
Elf32_Rel <0x7D2C8, 0xB516> ; R_ARM_JUMP_SLOT cfgetospeed
Elf32_Rel <0x7D2CC, 0xB616> ; R_ARM_JUMP_SLOT sigfillset
Elf32_Rel <0x7D2D0, 0xB716> ; R_ARM_JUMP_SLOT __errno_location
Elf32_Rel <0x7D2D4, 0xB816> ; R_ARM_JUMP_SLOT strncasecmp
Elf32_Rel <0x7D2D8, 0xB916> ; R_ARM_JUMP_SLOT klogctl
Elf32_Rel <0x7D2DC, 0xBA16> ; R_ARM_JUMP_SLOT snprintf
Elf32_Rel <0x7D2E0, 0xBB16> ; R_ARM_JUMP_SLOT mkdir
Elf32_Rel <0x7D2E4, 0xBC16> ; R_ARM_JUMP_SLOT semget
Elf32_Rel <0x7D2E8, 0xBD16> ; R_ARM_JUMP_SLOT bind
Elf32_Rel <0x7D2EC, 0xBE16> ; R_ARM_JUMP_SLOT getservbyport
Elf32_Rel <0x7D2F0, 0xBF16> ; R_ARM_JUMP_SLOT getgid
Elf32_Rel <0x7D2F4, 0xC016> ; R_ARM_JUMP_SLOT getgrouplist
Elf32_Rel <0x7D2F8, 0xC116> ; R_ARM_JUMP_SLOT memset
Elf32_Rel <0x7D2FC, 0xC216> ; R_ARM_JUMP_SLOT getmntent_r
Elf32_Rel <0x7D300, 0xC316> ; R_ARM_JUMP_SLOT bsearch
Elf32_Rel <0x7D304, 0xC416> ; R_ARM_JUMP_SLOT utimes
Elf32_Rel <0x7D308, 0xC516> ; R_ARM_JUMP_SLOT strncpy
Elf32_Rel <0x7D30C, 0xC616> ; R_ARM_JUMP_SLOT fscanf
Elf32_Rel <0x7D310, 0xC716> ; R_ARM_JUMP_SLOT mallopt
Elf32_Rel <0x7D314, 0xC816> ; R_ARM_JUMP_SLOT sigsuspend
Elf32_Rel <0x7D318, 0xC916> ; R_ARM_JUMP_SLOT strtoull
Elf32_Rel <0x7D31C, 0xCA16> ; R_ARM_JUMP_SLOT statvfs64
Elf32_Rel <0x7D320, 0xCB16> ; R_ARM_JUMP_SLOT prctl
Elf32_Rel <0x7D324, 0xCC16> ; R_ARM_JUMP_SLOT strtod
Elf32_Rel <0x7D328, 0xCD16> ; R_ARM_JUMP_SLOT link
Elf32_Rel <0x7D32C, 0xCE16> ; R_ARM_JUMP_SLOT write
Elf32_Rel <0x7D330, 0xCF16> ; R_ARM_JUMP_SLOT sigdelset
Elf32_Rel <0x7D334, 0xD016> ; R_ARM_JUMP_SLOT ether_aton_r
Elf32_Rel <0x7D338, 0xD116> ; R_ARM_JUMP_SLOT shmdt
Elf32_Rel <0x7D33C, 0xD216> ; R_ARM_JUMP_SLOT vfork
Elf32_Rel <0x7D340, 0xD316> ; R_ARM_JUMP_SLOT memchr
Elf32_Rel <0x7D344, 0xD416> ; R_ARM_JUMP_SLOT vsprintf
Elf32_Rel <0x7D348, 0xD516> ; R_ARM_JUMP_SLOT access
Elf32_Rel <0x7D34C, 0xD616> ; R_ARM_JUMP_SLOT rand
Elf32_Rel <0x7D350, 0xD816> ; R_ARM_JUMP_SLOT fclose
Elf32_Rel <0x7D354, 0xD916> ; R_ARM_JUMP_SLOT getsid
Elf32_Rel <0x7D358, 0xDA16> ; R_ARM_JUMP_SLOT strnlen
Elf32_Rel <0x7D35C, 0xDB16> ; R_ARM_JUMP_SLOT pipe
Elf32_Rel <0x7D360, 0xDC16> ; R_ARM_JUMP_SLOT fseeko64
Elf32_Rel <0x7D364, 0xDD16> ; R_ARM_JUMP_SLOT endmntent
Elf32_Rel <0x7D368, 0xDE16> ; R_ARM_JUMP_SLOT posix_fallocate64
Elf32_Rel <0x7D36C, 0xDF16> ; R_ARM_JUMP_SLOT strtok
Elf32_Rel <0x7D370, 0xE016> ; R_ARM_JUMP_SLOT semctl
Elf32_Rel <0x7D374, 0xE116> ; R_ARM_JUMP_SLOT sendto
Elf32_Rel <0x7D378, 0xE216> ; R_ARM_JUMP_SLOT endutxent
Elf32_Rel <0x7D37C, 0xE316> ; R_ARM_JUMP_SLOT sigemptyset
Elf32_Rel <0x7D380, 0xE416> ; R_ARM_JUMP_SLOT popen
Elf32_Rel <0x7D384, 0xE516> ; R_ARM_JUMP_SLOT fork
Elf32_Rel <0x7D388, 0xE616> ; R_ARM_JUMP_SLOT putenv
Elf32_Rel <0x7D38C, 0xE716> ; R_ARM_JUMP_SLOT stime
Elf32_Rel <0x7D390, 0xE816> ; R_ARM_JUMP_SLOT getnameinfo
Elf32_Rel <0x7D394, 0xE916> ; R_ARM_JUMP_SLOT strrchr
Elf32_Rel <0x7D398, 0xEA16> ; R_ARM_JUMP_SLOT vfprintf
Elf32_Rel <0x7D39C, 0xEB16> ; R_ARM_JUMP_SLOT lchown
Elf32_Rel <0x7D3A0, 0xEC16> ; R_ARM_JUMP_SLOT syslog
Elf32_Rel <0x7D3A4, 0xED16> ; R_ARM_JUMP_SLOT symlink
Elf32_Rel <0x7D3A8, 0xEE16> ; R_ARM_JUMP_SLOT updwtmpx
Elf32_Rel <0x7D3AC, 0xEF16> ; R_ARM_JUMP_SLOT setuid
Elf32_Rel <0x7D3B0, 0xF016> ; R_ARM_JUMP_SLOT sscanf
Elf32_Rel <0x7D3B4, 0xF116> ; R_ARM_JUMP_SLOT setpgid
Elf32_Rel <0x7D3B8, 0xF216> ; R_ARM_JUMP_SLOT clearerr
Elf32_Rel <0x7D3BC, 0xF316> ; R_ARM_JUMP_SLOT sprintf
Elf32_Rel <0x7D3C0, 0xF416> ; R_ARM_JUMP_SLOT readdir64
Elf32_Rel <0x7D3C4, 0xF516> ; R_ARM_JUMP_SLOT mkdtemp
Elf32_Rel <0x7D3C8, 0xF616> ; R_ARM_JUMP_SLOT openlog
Elf32_Rel <0x7D3CC, 0xF716> ; R_ARM_JUMP_SLOT regcomp
Elf32_Rel <0x7D3D0, 0xF816> ; R_ARM_JUMP_SLOT getgroups
Elf32_Rel <0x7D3D4, 0xF916> ; R_ARM_JUMP_SLOT exp
Elf32_Rel <0x7D3D8, 0xFA16> ; R_ARM_JUMP_SLOT getsockname
Elf32_Rel <0x7D3DC, 0xFB16> ; R_ARM_JUMP_SLOT vsnprintf
Elf32_Rel <0x7D3E0, 0xFC16> ; R_ARM_JUMP_SLOT getppid
Elf32_Rel <0x7D3E4, 0xFD16> ; R_ARM_JUMP_SLOT atoi
Elf32_Rel <0x7D3E8, 0xFE16> ; R_ARM_JUMP_SLOT recvmsg
Elf32_Rel <0x7D3EC, 0xFF16> ; R_ARM_JUMP_SLOT fchdir
Elf32_Rel <0x7D3F0, 0x10016> ; R_ARM_JUMP_SLOT fopen64
Elf32_Rel <0x7D3F4, 0x10116> ; R_ARM_JUMP_SLOT qsort
Elf32_Rel <0x7D3F8, 0x10216> ; R_ARM_JUMP_SLOT strpbrk
Elf32_Rel <0x7D3FC, 0x10316> ; R_ARM_JUMP_SLOT freeaddrinfo
Elf32_Rel <0x7D400, 0x10416> ; R_ARM_JUMP_SLOT getaddrinfo
Elf32_Rel <0x7D404, 0x10516> ; R_ARM_JUMP_SLOT capset
Elf32_Rel <0x7D408, 0x10616> ; R_ARM_JUMP_SLOT inet_ntop
Elf32_Rel <0x7D40C, 0x10716> ; R_ARM_JUMP_SLOT fgets_unlocked
Elf32_Rel <0x7D410, 0x10816> ; R_ARM_JUMP_SLOT socket
Elf32_Rel <0x7D414, 0x10916> ; R_ARM_JUMP_SLOT sched_getaffinity
Elf32_Rel <0x7D418, 0x10A16> ; R_ARM_JUMP_SLOT setmntent
Elf32_Rel <0x7D41C, 0x10B16> ; R_ARM_JUMP_SLOT cfsetspeed
Elf32_Rel <0x7D420, 0x10C16> ; R_ARM_JUMP_SLOT atof
Elf32_Rel <0x7D424, 0x10E16> ; R_ARM_JUMP_SLOT inet_addr
Elf32_Rel <0x7D428, 0x10F16> ; R_ARM_JUMP_SLOT __cmsg_nxthdr
Elf32_Rel <0x7D42C, 0x11016> ; R_ARM_JUMP_SLOT sync
Elf32_Rel <0x7D430, 0x11216> ; R_ARM_JUMP_SLOT getline
Elf32_Rel <0x7D434, 0x11316> ; R_ARM_JUMP_SLOT if_nametoindex
Elf32_Rel <0x7D438, 0x11416> ; R_ARM_JUMP_SLOT getspnam_r
Elf32_Rel <0x7D43C, 0x11516> ; R_ARM_JUMP_SLOT umask
Elf32_Rel <0x7D440, 0x11616> ; R_ARM_JUMP_SLOT chmod
Elf32_Rel <0x7D444, 0x11816> ; R_ARM_JUMP_SLOT gethostbyname
Elf32_Rel <0x7D448, 0x11916> ; R_ARM_JUMP_SLOT __xstat64
Elf32_Rel <0x7D44C, 0x11A16> ; R_ARM_JUMP_SLOT isatty
Elf32_Rel <0x7D450, 0x11B16> ; R_ARM_JUMP_SLOT __xmknod
Elf32_Rel <0x7D454, 0x11C16> ; R_ARM_JUMP_SLOT unsetenv
Elf32_Rel <0x7D458, 0x11D16> ; R_ARM_JUMP_SLOT strncmp
Elf32_Rel <0x7D45C, 0x11E16> ; R_ARM_JUMP_SLOT abort
Elf32_Rel <0x7D460, 0x11F16> ; R_ARM_JUMP_SLOT feof_unlocked
Elf32_Rel <0x7D464, 0x12016> ; R_ARM_JUMP_SLOT getutxent
Elf32_Rel <0x7D468, 0x12116> ; R_ARM_JUMP_SLOT realpath
Elf32_Rel <0x7D46C, 0x12216> ; R_ARM_JUMP_SLOT close
Elf32_Rel <0x7D470, 0x12316> ; R_ARM_JUMP_SLOT __lxstat64
Elf32_Rel <0x7D474, 0x12416> ; R_ARM_JUMP_SLOT mkfifo
Elf32_Rel <0x7D478, 0x12516> ; R_ARM_JUMP_SLOT connect
Elf32_Rel <0x7D47C, 0x12616> ; R_ARM_JUMP_SLOT closedir
Elf32_Rel <0x7D480, 0x12716> ; R_ARM_JUMP_SLOT getgrgid
Elf32_Rel <0x7D484, 0x12816> ; R_ARM_JUMP_SLOT div
Elf32_Rel <0x7D488, 0x12916> ; R_ARM_JUMP_SLOT getgrnam
Elf32_Rel <0x7D48C, 0x12A16> ; R_ARM_JUMP_SLOT atan2
Elf32_Rel <0x7D490, 0x12B16> ; R_ARM_JUMP_SLOT putchar_unlocked
Elf32_Rel <0x7D494, 0x12C16> ; R_ARM_JUMP_SLOT strspn
Elf32_Rel <0x7D498, 0x12D16> ; R_ARM_JUMP_SLOT fchmod
Elf32_Rel <0x7D49C, 0x12E16> ; R_ARM_JUMP_SLOT cos
Elf32_Rel <0x7D4A0, 0x12F16> ; R_ARM_JUMP_SLOT tcgetattr
Elf32_Rel <0x7D4A4, 0x13016> ; R_ARM_JUMP_SLOT putc_unlocked
Elf32_Rel <0x7D4A8, 0x13116> ; R_ARM_JUMP_SLOT tcgetsid
Elf32_Rel <0x7D4AC, 0x13216> ; R_ARM_JUMP_SLOT ftello64
Elf32_Rel <0x7D4B0, 0x13316> ; R_ARM_JUMP_SLOT pclose
Elf32_Rel <0x7D4B4, 0x13416> ; R_ARM_JUMP_SLOT mount
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x13424
CODE32



; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              sub_16238
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x13430
CODE32



; void sub_13430()
sub_13430
PUSH            {LR}
LDR             LR, =(_GLOBAL_OFFSET_TABLE_ - 0x13440)
ADD             LR, PC, LR ; _GLOBAL_OFFSET_TABLE_
LDR             PC, [LR,#(off_7D008 - 0x7D000)]!
; End of function sub_13430

off_13440 DCD _GLOBAL_OFFSET_TABLE_ - 0x13440
; [0000000C BYTES: COLLAPSED FUNCTION fdopen]
; [0000000C BYTES: COLLAPSED FUNCTION endgrent]
; [0000000C BYTES: COLLAPSED FUNCTION fputs_unlocked]
; [0000000C BYTES: COLLAPSED FUNCTION strstr]
; [0000000C BYTES: COLLAPSED FUNCTION gnu_dev_major]
; [0000000C BYTES: COLLAPSED FUNCTION ether_hostton]
; [0000000C BYTES: COLLAPSED FUNCTION raise]
; [0000000C BYTES: COLLAPSED FUNCTION vasprintf]
; [0000000C BYTES: COLLAPSED FUNCTION sendfile64]
; [0000000C BYTES: COLLAPSED FUNCTION log]
; [0000000C BYTES: COLLAPSED FUNCTION strverscmp]
; [0000000C BYTES: COLLAPSED FUNCTION inet_aton]
; [0000000C BYTES: COLLAPSED FUNCTION getpwnam]
; [0000000C BYTES: COLLAPSED FUNCTION fsync]
; [0000000C BYTES: COLLAPSED FUNCTION setbuf]
; [0000000C BYTES: COLLAPSED FUNCTION strcasestr]
; [0000000C BYTES: COLLAPSED FUNCTION strcmp]
; [0000000C BYTES: COLLAPSED FUNCTION strtol]
; [0000000C BYTES: COLLAPSED FUNCTION getpwuid]
; [0000000C BYTES: COLLAPSED FUNCTION setsockopt]
; [0000000C BYTES: COLLAPSED FUNCTION strcspn]
; [0000000C BYTES: COLLAPSED FUNCTION times]
; [0000000C BYTES: COLLAPSED FUNCTION gnu_dev_makedev]
; [0000000C BYTES: COLLAPSED FUNCTION dprintf]
; [0000000C BYTES: COLLAPSED FUNCTION clearenv]
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION hstrerror]
; [0000000C BYTES: COLLAPSED FUNCTION gnu_dev_minor]
; [0000000C BYTES: COLLAPSED FUNCTION regerror]
; [0000000C BYTES: COLLAPSED FUNCTION setrlimit64]
; [0000000C BYTES: COLLAPSED FUNCTION read]
; [0000000C BYTES: COLLAPSED FUNCTION tcflush]
; [0000000C BYTES: COLLAPSED FUNCTION mktime]
; [0000000C BYTES: COLLAPSED FUNCTION longjmp]
; [0000000C BYTES: COLLAPSED FUNCTION fflush]
; [0000000C BYTES: COLLAPSED FUNCTION getuid]
; [0000000C BYTES: COLLAPSED FUNCTION sigprocmask]
; [0000000C BYTES: COLLAPSED FUNCTION _setjmp]
; [0000000C BYTES: COLLAPSED FUNCTION memmove]
; [0000000C BYTES: COLLAPSED FUNCTION lsetxattr]
; [0000000C BYTES: COLLAPSED FUNCTION strchrnul]
; [0000000C BYTES: COLLAPSED FUNCTION free]
; [0000000C BYTES: COLLAPSED FUNCTION nanosleep]
; [0000000C BYTES: COLLAPSED FUNCTION fileno_unlocked]
; [0000000C BYTES: COLLAPSED FUNCTION inet_pton]
; [0000000C BYTES: COLLAPSED FUNCTION _exit]
; [0000000C BYTES: COLLAPSED FUNCTION pututxline]
; [0000000C BYTES: COLLAPSED FUNCTION memcpy]
; [0000000C BYTES: COLLAPSED FUNCTION execvp]
; [0000000C BYTES: COLLAPSED FUNCTION execlp]
; [0000000C BYTES: COLLAPSED FUNCTION shmget]
; [0000000C BYTES: COLLAPSED FUNCTION signal]
; [0000000C BYTES: COLLAPSED FUNCTION time]
; [0000000C BYTES: COLLAPSED FUNCTION rmdir]
; [0000000C BYTES: COLLAPSED FUNCTION gethostid]
; [0000000C BYTES: COLLAPSED FUNCTION tcsetpgrp]
; [0000000C BYTES: COLLAPSED FUNCTION sendmsg]
; [0000000C BYTES: COLLAPSED FUNCTION pow]
; [0000000C BYTES: COLLAPSED FUNCTION ftruncate64]
; [0000000C BYTES: COLLAPSED FUNCTION memcmp]
; [0000000C BYTES: COLLAPSED FUNCTION inet_ntoa]
; [0000000C BYTES: COLLAPSED FUNCTION sleep]
; [0000000C BYTES: COLLAPSED FUNCTION stpcpy]
; [0000000C BYTES: COLLAPSED FUNCTION getc_unlocked]
; [0000000C BYTES: COLLAPSED FUNCTION uname]
; [0000000C BYTES: COLLAPSED FUNCTION ctime]
; [0000000C BYTES: COLLAPSED FUNCTION removexattr]
; [0000000C BYTES: COLLAPSED FUNCTION recvfrom]
; [0000000C BYTES: COLLAPSED FUNCTION strdup]
; [0000000C BYTES: COLLAPSED FUNCTION setutxent]
; [0000000C BYTES: COLLAPSED FUNCTION cfgetispeed]
; [0000000C BYTES: COLLAPSED FUNCTION alarm]
; [0000000C BYTES: COLLAPSED FUNCTION sysconf]
; [0000000C BYTES: COLLAPSED FUNCTION unlink]
; [0000000C BYTES: COLLAPSED FUNCTION dup2]
; [0000000C BYTES: COLLAPSED FUNCTION reboot]
; [0000000C BYTES: COLLAPSED FUNCTION getrlimit64]
; [0000000C BYTES: COLLAPSED FUNCTION realloc]
; [0000000C BYTES: COLLAPSED FUNCTION killpg]
; [0000000C BYTES: COLLAPSED FUNCTION strptime]
; [0000000C BYTES: COLLAPSED FUNCTION dup]
; [0000000C BYTES: COLLAPSED FUNCTION getpriority]
; [0000000C BYTES: COLLAPSED FUNCTION initgroups]
; [0000000C BYTES: COLLAPSED FUNCTION regexec]
; [0000000C BYTES: COLLAPSED FUNCTION localtime_r]
; [0000000C BYTES: COLLAPSED FUNCTION wait]
; [0000000C BYTES: COLLAPSED FUNCTION getlogin_r]
; [0000000C BYTES: COLLAPSED FUNCTION shmat]
; [0000000C BYTES: COLLAPSED FUNCTION chdir]
; [0000000C BYTES: COLLAPSED FUNCTION strcasecmp]
; [0000000C BYTES: COLLAPSED FUNCTION getpgrp]
; [0000000C BYTES: COLLAPSED FUNCTION geteuid]
; [0000000C BYTES: COLLAPSED FUNCTION strsignal]
; [0000000C BYTES: COLLAPSED FUNCTION poll]
; [0000000C BYTES: COLLAPSED FUNCTION setgroups]
; [0000000C BYTES: COLLAPSED FUNCTION cfsetospeed]
; [0000000C BYTES: COLLAPSED FUNCTION semop]
CODE16
; [00000004 BYTES: COLLAPSED FUNCTION j___fxstat64]
CODE32
; [0000000C BYTES: COLLAPSED FUNCTION __fxstat64]
; [0000000C BYTES: COLLAPSED FUNCTION readlink]
; [0000000C BYTES: COLLAPSED FUNCTION getegid]
; [0000000C BYTES: COLLAPSED FUNCTION sigaction]
; [0000000C BYTES: COLLAPSED FUNCTION fwrite]
; [0000000C BYTES: COLLAPSED FUNCTION strcat]
; [0000000C BYTES: COLLAPSED FUNCTION ioctl]
; [0000000C BYTES: COLLAPSED FUNCTION lseek64]
; [0000000C BYTES: COLLAPSED FUNCTION regfree]
; [0000000C BYTES: COLLAPSED FUNCTION strtoll]
; [0000000C BYTES: COLLAPSED FUNCTION capget]
; [0000000C BYTES: COLLAPSED FUNCTION usleep]
; [0000000C BYTES: COLLAPSED FUNCTION waitpid]
; [0000000C BYTES: COLLAPSED FUNCTION tcsetattr]
; [0000000C BYTES: COLLAPSED FUNCTION strcpy]
; [0000000C BYTES: COLLAPSED FUNCTION chroot]
; [0000000C BYTES: COLLAPSED FUNCTION fread]
; [0000000C BYTES: COLLAPSED FUNCTION sched_yield]
; [0000000C BYTES: COLLAPSED FUNCTION ferror_unlocked]
; [0000000C BYTES: COLLAPSED FUNCTION shmctl]
; [0000000C BYTES: COLLAPSED FUNCTION getmntent]
; [0000000C BYTES: COLLAPSED FUNCTION opendir]
; [0000000C BYTES: COLLAPSED FUNCTION umount2]
; [0000000C BYTES: COLLAPSED FUNCTION setxattr]
; [0000000C BYTES: COLLAPSED FUNCTION fnmatch]
; [0000000C BYTES: COLLAPSED FUNCTION open64]
; [0000000C BYTES: COLLAPSED FUNCTION getenv]
; [0000000C BYTES: COLLAPSED FUNCTION setpriority]
; [0000000C BYTES: COLLAPSED FUNCTION mkstemp64]
; [0000000C BYTES: COLLAPSED FUNCTION puts]
; [0000000C BYTES: COLLAPSED FUNCTION setgid]
; [0000000C BYTES: COLLAPSED FUNCTION malloc]
; [0000000C BYTES: COLLAPSED FUNCTION sigaddset]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION strerror]
; [0000000C BYTES: COLLAPSED FUNCTION system]
; [0000000C BYTES: COLLAPSED FUNCTION strftime]
; [0000000C BYTES: COLLAPSED FUNCTION tcdrain]
; [0000000C BYTES: COLLAPSED FUNCTION __h_errno_location]
; [0000000C BYTES: COLLAPSED FUNCTION localtime]
; [0000000C BYTES: COLLAPSED FUNCTION strsep]
; [0000000C BYTES: COLLAPSED FUNCTION lremovexattr]
; [0000000C BYTES: COLLAPSED FUNCTION mktemp]
; [0000000C BYTES: COLLAPSED FUNCTION closelog]
; [0000000C BYTES: COLLAPSED FUNCTION sethostname]
; [0000000C BYTES: COLLAPSED FUNCTION dirname]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION rename]
; [0000000C BYTES: COLLAPSED FUNCTION getopt_long]
; [0000000C BYTES: COLLAPSED FUNCTION kill]
; [0000000C BYTES: COLLAPSED FUNCTION getcwd]
; [0000000C BYTES: COLLAPSED FUNCTION getpid]
; [0000000C BYTES: COLLAPSED FUNCTION exit]
; [0000000C BYTES: COLLAPSED FUNCTION syscall]
; [0000000C BYTES: COLLAPSED FUNCTION sin]
; [0000000C BYTES: COLLAPSED FUNCTION strtoul]
; [0000000C BYTES: COLLAPSED FUNCTION tcgetpgrp]
; [0000000C BYTES: COLLAPSED FUNCTION strlen]
; [0000000C BYTES: COLLAPSED FUNCTION getchar_unlocked]
; [0000000C BYTES: COLLAPSED FUNCTION setsid]
; [0000000C BYTES: COLLAPSED FUNCTION vprintf]
; [0000000C BYTES: COLLAPSED FUNCTION strchr]
; [0000000C BYTES: COLLAPSED FUNCTION srand]
; [0000000C BYTES: COLLAPSED FUNCTION setenv]
; [0000000C BYTES: COLLAPSED FUNCTION personality]
; [0000000C BYTES: COLLAPSED FUNCTION memrchr]
; [0000000C BYTES: COLLAPSED FUNCTION ttyname_r]
; [0000000C BYTES: COLLAPSED FUNCTION fchown]
; [0000000C BYTES: COLLAPSED FUNCTION execve]
; [0000000C BYTES: COLLAPSED FUNCTION getopt]
; [0000000C BYTES: COLLAPSED FUNCTION fprintf]
; [0000000C BYTES: COLLAPSED FUNCTION getpagesize]
; [0000000C BYTES: COLLAPSED FUNCTION cfsetispeed]
; [0000000C BYTES: COLLAPSED FUNCTION chown]
; [0000000C BYTES: COLLAPSED FUNCTION ungetc]
; [0000000C BYTES: COLLAPSED FUNCTION fcntl]
; [0000000C BYTES: COLLAPSED FUNCTION execv]
; [0000000C BYTES: COLLAPSED FUNCTION sqrt]
; [0000000C BYTES: COLLAPSED FUNCTION cfgetospeed]
; [0000000C BYTES: COLLAPSED FUNCTION sigfillset]
; [0000000C BYTES: COLLAPSED FUNCTION __errno_location]
; [0000000C BYTES: COLLAPSED FUNCTION strncasecmp]
; [0000000C BYTES: COLLAPSED FUNCTION klogctl]
; [0000000C BYTES: COLLAPSED FUNCTION snprintf]
; [0000000C BYTES: COLLAPSED FUNCTION mkdir]
; [0000000C BYTES: COLLAPSED FUNCTION semget]
; [0000000C BYTES: COLLAPSED FUNCTION bind]
; [0000000C BYTES: COLLAPSED FUNCTION getservbyport]
; [0000000C BYTES: COLLAPSED FUNCTION getgid]
; [0000000C BYTES: COLLAPSED FUNCTION getgrouplist]
; [0000000C BYTES: COLLAPSED FUNCTION memset]
; [0000000C BYTES: COLLAPSED FUNCTION getmntent_r]
; [0000000C BYTES: COLLAPSED FUNCTION bsearch]
; [0000000C BYTES: COLLAPSED FUNCTION utimes]
; [0000000C BYTES: COLLAPSED FUNCTION strncpy]
; [0000000C BYTES: COLLAPSED FUNCTION fscanf]
; [0000000C BYTES: COLLAPSED FUNCTION mallopt]
; [0000000C BYTES: COLLAPSED FUNCTION sigsuspend]
; [0000000C BYTES: COLLAPSED FUNCTION strtoull]
; [0000000C BYTES: COLLAPSED FUNCTION statvfs64]
; [0000000C BYTES: COLLAPSED FUNCTION prctl]
; [0000000C BYTES: COLLAPSED FUNCTION strtod]
; [0000000C BYTES: COLLAPSED FUNCTION link]
; [0000000C BYTES: COLLAPSED FUNCTION write]
; [0000000C BYTES: COLLAPSED FUNCTION sigdelset]
; [0000000C BYTES: COLLAPSED FUNCTION ether_aton_r]
; [0000000C BYTES: COLLAPSED FUNCTION shmdt]
; [0000000C BYTES: COLLAPSED FUNCTION vfork]
; [0000000C BYTES: COLLAPSED FUNCTION memchr]
; [0000000C BYTES: COLLAPSED FUNCTION vsprintf]
; [0000000C BYTES: COLLAPSED FUNCTION access]
; [0000000C BYTES: COLLAPSED FUNCTION rand]
; [0000000C BYTES: COLLAPSED FUNCTION fclose]
; [0000000C BYTES: COLLAPSED FUNCTION getsid]
; [0000000C BYTES: COLLAPSED FUNCTION strnlen]
; [0000000C BYTES: COLLAPSED FUNCTION pipe]
; [0000000C BYTES: COLLAPSED FUNCTION fseeko64]
; [0000000C BYTES: COLLAPSED FUNCTION endmntent]
; [0000000C BYTES: COLLAPSED FUNCTION posix_fallocate64]
; [0000000C BYTES: COLLAPSED FUNCTION strtok]
; [0000000C BYTES: COLLAPSED FUNCTION semctl]
; [0000000C BYTES: COLLAPSED FUNCTION sendto]
; [0000000C BYTES: COLLAPSED FUNCTION endutxent]
; [0000000C BYTES: COLLAPSED FUNCTION sigemptyset]
; [0000000C BYTES: COLLAPSED FUNCTION popen]
; [0000000C BYTES: COLLAPSED FUNCTION fork]
; [0000000C BYTES: COLLAPSED FUNCTION putenv]
; [0000000C BYTES: COLLAPSED FUNCTION stime]
; [0000000C BYTES: COLLAPSED FUNCTION getnameinfo]
; [0000000C BYTES: COLLAPSED FUNCTION strrchr]
; [0000000C BYTES: COLLAPSED FUNCTION vfprintf]
; [0000000C BYTES: COLLAPSED FUNCTION lchown]
; [0000000C BYTES: COLLAPSED FUNCTION syslog]
; [0000000C BYTES: COLLAPSED FUNCTION symlink]
; [0000000C BYTES: COLLAPSED FUNCTION updwtmpx]
; [0000000C BYTES: COLLAPSED FUNCTION setuid]
; [0000000C BYTES: COLLAPSED FUNCTION sscanf]
; [0000000C BYTES: COLLAPSED FUNCTION setpgid]
; [0000000C BYTES: COLLAPSED FUNCTION clearerr]
; [0000000C BYTES: COLLAPSED FUNCTION sprintf]
; [0000000C BYTES: COLLAPSED FUNCTION readdir64]
; [0000000C BYTES: COLLAPSED FUNCTION mkdtemp]
; [0000000C BYTES: COLLAPSED FUNCTION openlog]
; [0000000C BYTES: COLLAPSED FUNCTION regcomp]
; [0000000C BYTES: COLLAPSED FUNCTION getgroups]
; [0000000C BYTES: COLLAPSED FUNCTION exp]
; [0000000C BYTES: COLLAPSED FUNCTION getsockname]
; [0000000C BYTES: COLLAPSED FUNCTION vsnprintf]
; [0000000C BYTES: COLLAPSED FUNCTION getppid]
; [0000000C BYTES: COLLAPSED FUNCTION atoi]
; [0000000C BYTES: COLLAPSED FUNCTION recvmsg]
; [0000000C BYTES: COLLAPSED FUNCTION fchdir]
; [0000000C BYTES: COLLAPSED FUNCTION fopen64]
; [0000000C BYTES: COLLAPSED FUNCTION qsort]
; [0000000C BYTES: COLLAPSED FUNCTION strpbrk]
; [0000000C BYTES: COLLAPSED FUNCTION freeaddrinfo]
; [0000000C BYTES: COLLAPSED FUNCTION getaddrinfo]
; [0000000C BYTES: COLLAPSED FUNCTION capset]
; [0000000C BYTES: COLLAPSED FUNCTION inet_ntop]
; [0000000C BYTES: COLLAPSED FUNCTION fgets_unlocked]
; [0000000C BYTES: COLLAPSED FUNCTION socket]
; [0000000C BYTES: COLLAPSED FUNCTION sched_getaffinity]
; [0000000C BYTES: COLLAPSED FUNCTION setmntent]
; [0000000C BYTES: COLLAPSED FUNCTION cfsetspeed]
; [0000000C BYTES: COLLAPSED FUNCTION atof]
; [0000000C BYTES: COLLAPSED FUNCTION inet_addr]
; [0000000C BYTES: COLLAPSED FUNCTION __cmsg_nxthdr]
; [0000000C BYTES: COLLAPSED FUNCTION sync]
; [0000000C BYTES: COLLAPSED FUNCTION getline]
; [0000000C BYTES: COLLAPSED FUNCTION if_nametoindex]
; [0000000C BYTES: COLLAPSED FUNCTION getspnam_r]
; [0000000C BYTES: COLLAPSED FUNCTION umask]
; [0000000C BYTES: COLLAPSED FUNCTION chmod]
; [0000000C BYTES: COLLAPSED FUNCTION gethostbyname]
CODE16


; Attributes: thunk

; int sub_140FC()
sub_140FC
BX              PC
ALIGN 4
; End of function sub_140FC

CODE32
; [0000000C BYTES: COLLAPSED FUNCTION __xstat64]
; [0000000C BYTES: COLLAPSED FUNCTION isatty]
; [0000000C BYTES: COLLAPSED FUNCTION __xmknod]
; [0000000C BYTES: COLLAPSED FUNCTION unsetenv]
; [0000000C BYTES: COLLAPSED FUNCTION strncmp]
; [0000000C BYTES: COLLAPSED FUNCTION abort]
; [0000000C BYTES: COLLAPSED FUNCTION feof_unlocked]
; [0000000C BYTES: COLLAPSED FUNCTION getutxent]
; [0000000C BYTES: COLLAPSED FUNCTION realpath]
; [0000000C BYTES: COLLAPSED FUNCTION close]
CODE16


; Attributes: thunk

; int sub_14178()
sub_14178
BX              PC
ALIGN 4
; End of function sub_14178

CODE32
; [0000000C BYTES: COLLAPSED FUNCTION __lxstat64]
; [0000000C BYTES: COLLAPSED FUNCTION mkfifo]
; [0000000C BYTES: COLLAPSED FUNCTION connect]
; [0000000C BYTES: COLLAPSED FUNCTION closedir]
; [0000000C BYTES: COLLAPSED FUNCTION getgrgid]
; [0000000C BYTES: COLLAPSED FUNCTION div]
; [0000000C BYTES: COLLAPSED FUNCTION getgrnam]
; [0000000C BYTES: COLLAPSED FUNCTION atan2]
; [0000000C BYTES: COLLAPSED FUNCTION putchar_unlocked]
; [0000000C BYTES: COLLAPSED FUNCTION strspn]
; [0000000C BYTES: COLLAPSED FUNCTION fchmod]
; [0000000C BYTES: COLLAPSED FUNCTION cos]
; [0000000C BYTES: COLLAPSED FUNCTION tcgetattr]
; [0000000C BYTES: COLLAPSED FUNCTION putc_unlocked]
; [0000000C BYTES: COLLAPSED FUNCTION tcgetsid]
; [0000000C BYTES: COLLAPSED FUNCTION ftello64]
; [0000000C BYTES: COLLAPSED FUNCTION pclose]
; [0000000C BYTES: COLLAPSED FUNCTION mount]

; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x14254
CODE32
ALIGN 8
; LOAD ends


; Segment type: Pure code
AREA .text, CODE, ALIGN=3
; ORG 0x14258
CODE32



; int __fastcall sub_14258(int, char **)
sub_14258

var_7C= -0x7C
var_74= -0x74
var_6C= -0x6C
var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_54= -0x54
var_4C= -0x4C

PUSH            {R4-R11,LR}
MOV             R5, R1
SUB             SP, SP, #0x7C
LDR             R1, =aKpthm ; "^kPThm"
MOV             R0, R5
BL              sub_593CC
TST             R0, #0x10
MOV             R6, R0
LDR             R0, =aPosixlyCorrect ; "POSIXLY_CORRECT"
MOVNE           R4, #0x100000
MOVEQ           R4, #0x400
AND             R11, R6, #2
BL              getenv
CMP             R0, #0
MOVNE           R4, #0x200
ANDS            R2, R6, #8
MOVNE           R4, #0
LDRNE           R2, =aSize ; "     Size"
BNE             loc_142C8
MOVS            R3, R11
MOV             R1, R2
MOVNE           R3, #1
MOV             R0, R4
BL              sub_5A318
MOV             R1, R0
LDR             R0, =aSBlocks ; "%s-blocks"
BL              sub_177E4
MOV             R2, R0

loc_142C8
ANDS            R3, R6, #4
LDR             R0, =aUse ; "Use%"
STR             R3, [SP,#0x7C+var_6C]
LDR             R3, =aType ; "Type       "
LDR             R1, =(asc_6B39D+1) ; ""
MOVNE           R1, R3
CMP             R11, #0
LDR             R3, =aCapacity ; "Capacity"
MOVEQ           R3, R0
LDR             R0, =aFilesystemS15s ; "Filesystem           %s%-15sUsed Availa"...
BL              printf
LDR             R3, =optind
LDR             R3, [R3]
ADD             R6, R5, R3,LSL#2
LDR             R3, [R5,R3,LSL#2]
CMP             R3, #0
BNE             loc_14328
LDR             R1, =(aNTR+5) ; "r"
LDR             R0, =file ; "/proc/mounts"
BL              setmntent
SUBS            R5, R0, #0
BNE             loc_1432C
LDR             R0, =file ; "/proc/mounts"
BL              sub_16B40

loc_14328
MOV             R5, #0

loc_1432C
MOV             R7, #0

loc_14330
CMP             R5, #0
BEQ             loc_1435C
MOV             R0, R5  ; stream
BL              getmntent
SUBS            R9, R0, #0
BNE             loc_1439C
MOV             R0, R5  ; stream
BL              endmntent

loc_14350
MOV             R0, R7
ADD             SP, SP, #0x7C ; '|'
POP             {R4-R11,PC}

loc_1435C
ADD             R8, R6, #4
LDR             R6, [R6]
CMP             R6, #0
BEQ             loc_14350
MOV             R1, #1
MOV             R0, R6
BL              sub_58A20
SUBS            R9, R0, #0
BNE             loc_14398
MOV             R1, R6
LDR             R0, =aSCanTFindMount ; "%s: can't find mount point"
BL              sub_16DDC
MOV             R6, R8
MOV             R7, #1
B               loc_1435C

loc_14398
MOV             R6, R8

loc_1439C
LDR             R10, [R9]
LDR             R1, =aRootfs ; "rootfs"
MOV             R0, R10 ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_14330
LDR             R8, [R9,#4]
ADD             R1, SP, #0x7C+var_64
LDR             R3, [R9,#8]
MOV             R0, R8
STR             R3, [SP,#0x7C+var_68]
BL              statvfs64
CMP             R0, #0
BEQ             loc_143E4
MOV             R0, R8
MOV             R7, #1
BL              sub_16B80
B               loc_14330

loc_143E4
LDR             R3, [SP,#0x7C+var_60]
LDR             R1, [SP,#0x7C+var_5C+4]
CMP             R3, #0
LDREQ           R3, [SP,#0x7C+var_64]
STREQ           R3, [SP,#0x7C+var_60]
LDR             R3, [SP,#0x7C+var_5C]
ORRS            R2, R3, R1
MOVNE           R2, #1
MOVEQ           R2, #0
CMP             R5, #0
MOVEQ           R2, #1
CMP             R2, #0
BEQ             loc_14330
LDR             R2, [SP,#0x7C+var_54]
SUBS            R3, R3, R2
STR             R3, [SP,#0x7C+var_74]
LDR             R3, [SP,#0x7C+var_54+4]
LDR             R2, [SP,#0x7C+var_74]
SBC             R3, R1, R3
STR             R3, [SP,#0x7C+var_74+4]
LDR             R3, [SP,#0x7C+var_4C]
ADDS            R3, R2, R3
LDR             R2, [SP,#0x7C+var_74+4]
STR             R3, [SP,#0x7C+var_7C]
LDR             R3, [SP,#0x7C+var_4C+4]
ADC             R3, R2, R3
STR             R3, [SP,#0x7C+var_7C+4]
LDRD            R2, R3, [SP,#0x7C+var_7C]
ORRS            R3, R2, R3
MOVEQ           R9, #0
BEQ             loc_14498

loc_14460
LDRD            R2, R3, [SP,#0x7C+var_7C]
ADR             R1, dword_145A0
LDRD            R0, R1, [R1]
CMP             R3, R1
CMPEQ           R2, R0
BHI             loc_14578
LDR             R3, [SP,#0x7C+var_7C]
LDR             R2, [SP,#0x7C+var_74]
MOV             R1, R3
MOV             R0, R3,LSR#1
MOV             R3, #0x64 ; 'd'
MLA             R0, R3, R2, R0
BLX             sub_15CA0
MOV             R9, R0

loc_14498
MOV             R1, R10
CLZ             R10, R11
MOV             R10, R10,LSR#5
LDR             R0, =(a20s_0+1) ; format
BL              printf
CMP             R0, #0x14
MOVLE           R0, #0
ANDGT           R0, R10, #1
CMP             R0, #0
BEQ             loc_144CC
LDR             R1, =(asc_6B39D+1) ; ""
LDR             R0, =a20s_0 ; "\n%-20s"
BL              printf

loc_144CC
LDR             R3, [SP,#0x7C+var_6C]
CMP             R3, #0
BEQ             loc_14504
LDR             R1, [SP,#0x7C+var_68]
LDR             R0, =a10s_0 ; " %-10s"
BL              printf
CMP             R0, #0xB
MOVLE           R0, #0
ANDGT           R0, R10, #1
CMP             R0, #0
BEQ             loc_14504
LDR             R1, =(asc_6B39D+1) ; ""
LDR             R0, =a30s ; "\n%-30s"
BL              printf

loc_14504
MOV             R3, R4
LDR             R2, [SP,#0x7C+var_60]
LDRD            R0, R1, [SP,#0x7C+var_5C]
BL              sub_5A318
MOV             R1, R0
LDR             R0, =a9s ; " %9s "
BL              printf
LDR             R1, [SP,#0x7C+var_54]
MOV             R3, R4
LDR             R0, [SP,#0x7C+var_5C]
LDR             R12, [SP,#0x7C+var_5C+4]
LDR             R2, [SP,#0x7C+var_60]
SUBS            R0, R0, R1
LDR             R1, [SP,#0x7C+var_54+4]
SBC             R1, R12, R1
BL              sub_5A318
MOV             R1, R0
LDR             R0, =(a9s+1) ; format
BL              printf
MOV             R3, R4
LDR             R2, [SP,#0x7C+var_60]
LDRD            R0, R1, [SP,#0x7C+var_4C]
BL              sub_5A318
MOV             R3, R8
MOV             R1, R0
MOV             R2, R9
LDR             R0, =a9s3uS ; "%9s %3u%% %s\n"
BL              printf
B               loc_14330

loc_14578
LDRD            R2, R3, [SP,#0x7C+var_7C]
MOVS            R3, R3,LSR#1
MOV             R2, R2,RRX
STRD            R2, R3, [SP,#0x7C+var_7C]
LDRD            R2, R3, [SP,#0x7C+var_74]
MOVS            R3, R3,LSR#1
MOV             R2, R2,RRX
STRD            R2, R3, [SP,#0x7C+var_74]
B               loc_14460
; End of function sub_14258

ALIGN 0x10
dword_145A0 DCD 0x1446F85
DCD 0
off_145A8 DCD aKpthm    ; "^kPThm"
off_145AC DCD aPosixlyCorrect ; "POSIXLY_CORRECT"
off_145B0 DCD aSize     ; "     Size"
off_145B4 DCD aSBlocks  ; "%s-blocks"
off_145B8 DCD aUse      ; "Use%"
off_145BC DCD aType     ; "Type       "
off_145C0 DCD asc_6B39D+1 ; ""
off_145C4 DCD aCapacity ; "Capacity"
off_145C8 DCD aFilesystemS15s ; "Filesystem           %s%-15sUsed Availa"...
off_145CC DCD optind
off_145D0 DCD aNTR+5    ; "r"
off_145D4 DCD file      ; "/proc/mounts"
off_145D8 DCD aSCanTFindMount ; "%s: can't find mount point"
off_145DC DCD aRootfs   ; "rootfs"
off_145E0 DCD a20s_0+1  ; "%-20s"
off_145E4 DCD a20s_0    ; "\n%-20s"
off_145E8 DCD a10s_0    ; " %-10s"
off_145EC DCD a30s      ; "\n%-30s"
off_145F0 DCD a9s       ; " %9s "
off_145F4 DCD a9s+1     ; "%9s "
off_145F8 DCD a9s3uS    ; "%9s %3u%% %s\n"
ALIGN 0x10



; int __fastcall sub_14600(int, int)
sub_14600

var_C= -0xC
var_8= -8

LDR             R3, [R1,#4]
PUSH            {R4-R11,LR}
VPUSH           {D8-D9}
SUB             SP, SP, #0xC
CMP             R3, #0
BNE             loc_1461C

loc_14618
BL              sub_162F0

loc_1461C
LDR             R3, =dword_7DB94
ADD             R7, R1, #4
VLDR            D8, =0.0
LDR             R9, =unk_639D4
LDR             R5, [R3]
LDR             R10, =a0123456789_0 ; "0123456789."

loc_14634
LDR             R4, [R7]
MOV             R1, #0x2E ; '.' ; c
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_14748
MOV             R1, R10 ; accept
MOV             R0, R4  ; s
BL              strspn
MOV             R3, #0
LDRB            R11, [R4,R0]
MOV             R6, R0
STRB            R3, [R4,R0]
ADD             R8, R4, R0
STR             R3, [R5]
MOV             R1, SP  ; endptr
MOV             R0, R4  ; nptr
BL              strtod
LDR             R3, [R5]
VMOV.F64        D9, D0
CMP             R3, #0
BNE             loc_14618
LDR             R3, [SP,#0xC+var_C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14618
MOV             R0, R8
MOV             R3, #0x31 ; '1'
STRB            R11, [R4,R6]
MOV             R1, R9  ; int
LDRB            R4, [R8,#-1]
STRB            R3, [R0,#-1]! ; int
BL              sub_62090
VMOV            S15, R0
STRB            R4, [R8,#-1]
VCVT.F64.U32    D7, S15
VMLA.F64        D8, D7, D9

loc_146C8
LDR             R3, [R7,#4]!
CMP             R3, #0
BNE             loc_14634
VCMPE.F64       D8, #0.0
MOV             R2, #0x7FFFFFFF
VMRS            APSR_nzcv, FPSCR
STRD            R2, R3, [SP,#0xC+var_C]
BLT             loc_14718
VLDR            D7, =2.14748365e9
VCMPE.F64       D8, D7
VMRS            APSR_nzcv, FPSCR
BPL             loc_14718
VCVT.S32.F64    S14, D8
VSTR            S14, [SP,#0xC+var_C]
VCVT.F64.S32    D7, S14
VSUB.F64        D8, D8, D7
VLDR            D7, =1.0e9
VMUL.F64        D8, D8, D7
VCVT.S32.F64    S16, D8
VSTR            S16, [SP,#0xC+var_8]

loc_14718
MOV             R4, #0

loc_1471C
STR             R4, [R5]
MOV             R1, SP  ; remaining
MOV             R0, SP  ; requested_time
BL              nanosleep
LDR             R3, [R5]
CMP             R3, #4
BEQ             loc_1471C
MOV             R0, #0
ADD             SP, SP, #0xC
VPOP            {D8-D9}
POP             {R4-R11,PC}

loc_14748               ; int
MOV             R1, R9
MOV             R0, R4  ; int
BL              sub_62090
VMOV            S15, R0
VCVT.F64.U32    D7, S15
VADD.F64        D8, D8, D7
B               loc_146C8
; End of function sub_14600

ALIGN 8
dbl_14768 DCFD 0.0
dbl_14770 DCFD 2.14748365e9
dbl_14778 DCFD 1.0e9
off_14780 DCD dword_7DB94
off_14784 DCD unk_639D4
off_14788 DCD a0123456789_0 ; "0123456789."
ALIGN 0x10



; int __fastcall sub_14790(unsigned int *, int)
sub_14790

eflags= -0x2C
var_24= -0x24
var_20= -0x20
command= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_8= -8

PUSH            {R4-R11,LR}
SUBS            R4, R0, #0
VPUSH           {D8-D11}
MOV             R5, R1
SUB             SP, SP, #0x2C
BNE             loc_147C8
MOV             R0, R5
MOV             R1, R4
BL              sub_4B308
MOV             R5, R0

loc_147B8
MOV             R0, R5
ADD             SP, SP, #0x2C ; ','
VPOP            {D8-D11}
POP             {R4-R11,PC}

loc_147C8
VLDR            D11, =0.0
MOV             R0, #2
BL              sub_4A4D8
STR             R0, [SP,#0x2C+var_20]

loc_147D8
LDR             R3, [R4]
LDR             R11, =dword_7DB98
LDR             R0, [R4,#8]
STR             R3, [SP,#0x2C+var_24]
AND             R8, R3, #0x7F
LDR             R6, [R11]
LDR             R3, [R4,#4]
STR             R3, [R6,#-0x38]
LDR             R3, [SP,#0x2C+var_24]
STR             R0, [SP,#0x2C+var_8]
UBFX            R3, R3, #8, #8
CMP             R3, #1
STR             R3, [SP,#0x2C+var_14]
BNE             loc_148C4
LDR             R3, [R0]
AND             R3, R3, #0xFF00
CMP             R3, #0x2700
LDREQ           R6, [R0,#8]
BEQ             loc_1483C
CMP             R3, #0x1800
BNE             loc_148AC
LDR             R3, [R6,#0x8C]
MOV             R6, #0x18
LDR             R2, [R0,#8]
MLA             R6, R6, R2, R3

loc_1483C
LDR             R0, [R0,#0xC]
CMP             R0, #0
BEQ             loc_148B4
LDR             R1, [SP,#0x2C+var_20]
BL              sub_14790
BL              sub_4AD78
MOV             R8, R0
MOV             R0, R6
BL              sub_4A470
MOV             R1, R8
BL              sub_4AAB0

loc_14868               ; jumptable 00014950 case 0
LDR             R3, [SP,#0x2C+var_24]
AND             R3, R3, #0xFF00
CMP             R3, #0x600
LDRLS           R4, [R4,#0x10]
BLS             loc_14884
CMP             R3, #0x1000
BCS             loc_148A0

loc_14884
LDR             R3, =dword_7DB98
LDR             R3, [R3]
LDR             R3, [R3,#-0x14]
CMP             R3, #0
BNE             loc_148A0
CMP             R4, #0
BNE             loc_147D8

loc_148A0
LDR             R0, [SP,#0x2C+var_20]
BL              sub_4B604
B               loc_147B8

loc_148AC
LDR             R0, =aNotAnArray ; "Not an array"

loc_148B0
BL              sub_4AC50

loc_148B4
MOV             R0, R6
BL              sub_4A470
BL              sub_4A6AC
B               loc_14868 ; jumptable 00014950 case 0

loc_148C4
LDR             R3, [SP,#0x2C+var_24]
TST             R3, #0x10000
BEQ             loc_148DC
LDR             R1, [SP,#0x2C+var_20]
BL              sub_14790
MOV             R7, R0

loc_148DC
LDR             R3, [SP,#0x2C+var_24]
TST             R3, #0x20000
BEQ             loc_148FC
LDR             R3, [SP,#0x2C+var_20]
LDR             R0, [R4,#0xC]
ADD             R1, R3, #0x18
BL              sub_14790
MOV             R10, R0

loc_148FC
LDR             R3, [SP,#0x2C+var_24]
TST             R3, #0x40000
BEQ             loc_14914
MOV             R0, R7
BL              sub_4AD78
MOV             R9, R0

loc_14914
LDR             R3, [SP,#0x2C+var_24]
TST             R3, #0x80000
BEQ             loc_1492C
MOV             R0, R10
BL              sub_4AD78
STR             R0, [SP,#0x2C+command]

loc_1492C
LDR             R3, [SP,#0x2C+var_24]
TST             R3, #0x100000
BEQ             loc_14944
MOV             R0, R7
BL              sub_4A828
VMOV.F64        D9, D0

loc_14944
LDR             R3, [SP,#0x2C+var_14]
SUB             R3, R3, #2
CMP             R3, #0x26 ; switch 39 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_14950 ; jumptable 00014950 default case, cases 6,7,13,16
jpt_14950 DCD loc_14868 ; jump table for switch statement
DCD loc_14D04
DCD loc_14B44
DCD loc_14B44
DCD loc_14A78
DCD loc_14A6C
DCD def_14950
DCD def_14950
DCD loc_14D3C
DCD loc_14D28
DCD loc_14D20
DCD loc_149F4
DCD loc_14B08
DCD def_14950
DCD loc_15414
DCD loc_1528C
DCD def_14950
DCD loc_153A4
DCD loc_1550C
DCD loc_153A4
DCD loc_15060
DCD loc_15350
DCD loc_14D80
DCD loc_14E8C
DCD loc_14F60
DCD loc_14D94
DCD loc_153D8
DCD loc_153FC
DCD loc_14E30
DCD loc_14E3C
DCD loc_14F60
DCD loc_14DBC
DCD loc_15414
DCD loc_14D10
DCD loc_1529C
DCD loc_14E4C
DCD loc_152B4
DCD loc_14D48
DCD loc_14D30

loc_149F4               ; jumptable 00014950 case 11
LDR             R0, [SP,#0x2C+var_8]
LDR             R3, [R0]
AND             R3, R3, #0xFF00
CMP             R3, #0x1300
BNE             loc_14A5C
LDR             R3, [SP,#0x2C+var_24]
TST             R3, #0x200000
BEQ             loc_14A44

loc_14A14
LDR             R3, [R4]
ORR             R3, R3, #0x200000
STR             R3, [R4]
LDR             R3, [SP,#0x2C+var_8]
LDR             R0, [R3,#0xC]
BL              sub_4C558
CMP             R0, #0
LDRNE           R3, [R4]
BICNE           R3, R3, #0x200000
STRNE           R3, [R4]

loc_14A3C
LDR             R4, [R4,#0x10]
B               loc_14868 ; jumptable 00014950 case 0

loc_14A44
LDR             R0, [R0,#8]
BL              sub_4C558
CMP             R0, #0
BNE             loc_14A14

loc_14A54
LDR             R4, [R4,#0xC]
B               loc_14868 ; jumptable 00014950 case 0

loc_14A5C
BL              sub_4C558

loc_14A60
CMP             R0, #0
BEQ             loc_14A54
B               loc_14A3C

loc_14A6C               ; jumptable 00014950 case 5
MOV             R0, R7
BL              sub_4A8BC
B               loc_14A60

loc_14A78               ; jumptable 00014950 case 4
MOV             R0, R10
BL              sub_4A470
LDR             R2, [R7]
MOV             R3, R0
LDR             R0, [R0,#0xC]
STR             R3, [SP,#0x2C+var_14]
ANDS            R8, R2, #0x800
ORREQ           R2, R2, #0x800
LDRNE           R8, [R7,#0x14]
STREQ           R2, [R7]
ADD             R0, R0, #0x11
BL              sub_174DC
LDR             R3, [SP,#0x2C+var_14]
ADD             R2, R0, #0xC
STR             R0, [R7,#0x14]
MOV             R6, R0
STMIB           R0, {R2,R8}
MOV             R8, #0
STR             R2, [R0]

loc_14AC4
LDR             R2, [R3,#4]
CMP             R8, R2
BCS             loc_14868 ; jumptable 00014950 case 0
LDR             R2, [R3,#0x10]
LDR             R11, [R2,R8,LSL#2]

loc_14AD8
CMP             R11, #0
ADDEQ           R8, R8, #1
BEQ             loc_14AC4
ADD             R1, R11, #0x1C ; src
LDR             R0, [R6] ; dest
STR             R3, [SP,#0x2C+var_14]
BL              strcpy
MOV             R0, R6
BL              sub_4A3D0
LDR             R11, [R11,#0x18]
LDR             R3, [SP,#0x2C+var_14]
B               loc_14AD8

loc_14B08               ; jumptable 00014950 case 12
LDR             R0, [R7,#0x14]
LDR             R2, [R0,#4]
LDR             R3, [R0]
CMP             R2, R3
BCC             loc_14B2C
LDR             R6, [R0,#8]
BL              free
STR             R6, [R7,#0x14]
B               loc_14A54

loc_14B2C
ADD             R0, R0, #4
BL              sub_4A3D0
MOV             R1, R0
MOV             R0, R7
BL              sub_4B32C
B               loc_14A3C

loc_14B44               ; jumptable 00014950 cases 2,3
LDR             R3, =stdout
LDR             R11, [R3]
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_14BE0
LDR             R1, [SP,#0x2C+command]
LDR             R0, [R6,#-0x44]
BL              sub_4A98C
LDR             R3, [R0]
MOV             R11, R0
CMP             R3, #0
BNE             loc_14BDC
CMP             R8, #0x7C ; '|'
LDR             R1, =(aProcNetRaw+0xC) ; "w"
BNE             loc_14C38
LDR             R0, [SP,#0x2C+command] ; command
BL              popen
CMP             R0, #0
STR             R0, [R11]
BNE             loc_14BD4
LDR             R0, =aPopen_0 ; "popen"
BL              sub_16B40
ALIGN 0x10
dbl_14BA0 DCFD 0.0
off_14BA8 DCD aNotAnArray ; "Not an array"
off_14BAC DCD stdout
off_14BB0 DCD aProcNetRaw+0xC ; "w"
off_14BB4 DCD aPopen_0  ; "popen"
off_14BB8 DCD dword_7DB98
off_14BBC DCD aNoA+3    ; "a"
off_14BC0 DCD aPossibleSyntax ; "Possible syntax error"
off_14BC4 DCD aCallToUndefine ; "Call to undefined function"
dword_14BC8 DCD 0xAAAAAAAB
off_14BCC DCD aNTR+5    ; "r"
off_14BD0 DCD dword_7DB94

loc_14BD4
MOV             R3, #1
STR             R3, [R11,#0x14]

loc_14BDC
LDR             R11, [R11]

loc_14BE0
LDR             R3, [SP,#0x2C+var_24]
LDR             R0, [SP,#0x2C+var_8]
AND             R3, R3, #0xFF00
CMP             R3, #0x400
BNE             loc_14CE8
CMP             R0, #0
LDRNE           R3, =dword_7DB98
LDRNE           R8, [R3]
BNE             loc_14CCC
LDR             R0, [R6,#0x34]
BL              sub_4AD78
MOV             R1, R11
BL              fputs_unlocked

loc_14C14
LDR             R3, =dword_7DB98
LDR             R3, [R3]
LDR             R0, [R3,#0x20]
BL              sub_4AD78
MOV             R1, R11
BL              fputs_unlocked

loc_14C2C               ; stream
MOV             R0, R11
BL              fflush
B               loc_14868 ; jumptable 00014950 case 0

loc_14C38
LDR             R3, =(aNoA+3) ; "a"
CMP             R8, #0x77 ; 'w'
LDR             R0, [SP,#0x2C+command]
MOVNE           R1, R3
BL              sub_17590
STR             R0, [R11]
B               loc_14BDC

loc_14C54
ADD             R0, SP, #0x2C+var_8
BL              sub_4A40C
LDR             R1, [SP,#0x2C+var_20]
BL              sub_14790
LDR             R2, [R0]
TST             R2, #1
BEQ             loc_14CDC
STR             R0, [SP,#0x2C+var_10]
LDR             R0, [R8,#0x14]
LDR             R6, [R8,#-0x20]
BL              sub_4AD78
LDR             R3, [SP,#0x2C+var_10]
STR             R0, [SP,#0x2C+var_14]
MOV             R0, R3
BL              sub_4A828
MOV             R1, #0xF0
MOV             R3, #1
LDR             R2, [SP,#0x2C+var_14]
MOV             R0, R6
BL              sub_4AC78
LDR             R0, [R8,#-0x20]
MOV             R1, R11

loc_14CAC
BL              fputs_unlocked
LDR             R3, [SP,#0x2C+var_8]
CMP             R3, #0
BEQ             loc_14CCC
LDR             R0, [R8,#0x1C]
BL              sub_4AD78
MOV             R1, R11
BL              fputs_unlocked

loc_14CCC
LDR             R3, [SP,#0x2C+var_8]
CMP             R3, #0
BNE             loc_14C54
B               loc_14C14

loc_14CDC
BL              sub_4AD78
MOV             R1, R11
B               loc_14CAC

loc_14CE8
BL              sub_4C344
MOV             R1, R11
MOV             R6, R0
BL              fputs_unlocked
MOV             R0, R6  ; ptr
BL              free
B               loc_14C2C

loc_14D04               ; jumptable 00014950 case 1
LDR             R3, [R4,#8]
STR             R3, [R6,#-0x3C]
B               loc_14868 ; jumptable 00014950 case 0

loc_14D10               ; jumptable 00014950 case 33
MOV             R1, R7
MOV             R0, R5
BL              sub_4B4B0
B               loc_14868 ; jumptable 00014950 case 0

loc_14D20               ; jumptable 00014950 case 10
MOV             R3, #1
STR             R3, [R6,#-0x10]

loc_14D28               ; jumptable 00014950 case 9
MOV             R3, #1
STR             R3, [R6,#-0x14]

loc_14D30               ; jumptable 00014950 case 38
MOV             R0, R5
BL              sub_4A5C4
B               loc_14868 ; jumptable 00014950 case 0

loc_14D3C               ; jumptable 00014950 case 8
VCVT.S32.F64    S15, D9
VMOV            R0, S15
BL              sub_4B9E0

loc_14D48               ; jumptable 00014950 case 37
LDR             R5, [R4,#8]
LDR             R3, [R6,#0x50]
CMP             R5, R3
BNE             loc_14D5C
BL              sub_4B08C

loc_14D5C
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_14868 ; jumptable 00014950 case 0
MOV             R0, R5
BL              sub_4A470
LDR             R1, [SP,#0x2C+command]
BL              sub_4A98C

loc_14D78
MOV             R5, R0
B               loc_14868 ; jumptable 00014950 case 0

loc_14D80               ; jumptable 00014950 case 22
LDR             R5, [R4,#8]
MOV             R2, #0x18
LDR             R3, [R6,#0x8C]
MLA             R5, R2, R5, R3
B               loc_14D5C

loc_14D94               ; jumptable 00014950 case 25
MOV             R0, R10
BL              sub_4A470
MOV             R1, R9
BL              sub_4A93C
VMOV.F64        D0, #1.0
CMP             R0, #0
VMOVEQ.F64      D0, D11

loc_14DB0
MOV             R0, R5
BL              sub_4B458
B               loc_14868 ; jumptable 00014950 case 0

loc_14DBC               ; jumptable 00014950 case 31
LDR             R0, [R6,#0x34]
STR             R4, [SP,#0x2C+var_8]
BL              sub_4AD78
MOV             R9, R0

loc_14DCC
ADD             R6, R6, #0x94
LDR             R0, [SP,#0x2C+var_8]
MOV             R1, R6
BL              sub_4BA78
MOV             R3, #0  ; pmatch
MOV             R11, R0
STR             R3, [SP,#0x2C+eflags] ; eflags
MOV             R2, R3  ; nmatch
MOV             R1, R9  ; string
BL              regexec
CMP             R6, R11
MOV             R3, R0
BNE             loc_14E10
STR             R0, [SP,#0x2C+var_14]
MOV             R0, R6  ; preg
BL              regfree
LDR             R3, [SP,#0x2C+var_14]

loc_14E10
SUB             R8, R8, #0x21 ; '!'
CLZ             R8, R8
MOV             R8, R8,LSR#5
CMP             R3, #0
EOREQ           R8, R8, #1
VMOV            S0, R8

loc_14E28
VCVT.F64.S32    D0, S0
B               loc_14DB0

loc_14E30               ; jumptable 00014950 case 28
LDR             R3, [R4,#0xC]
STR             R3, [SP,#0x2C+var_8]
B               loc_14DCC

loc_14E3C               ; jumptable 00014950 case 29
MOV             R1, R10
MOV             R0, R7
BL              sub_4B4B0
B               loc_14D78

loc_14E4C               ; jumptable 00014950 case 35
LDR             R3, [R4,#0xC]
LDR             R3, [R3]
AND             R3, R3, #0xFF00
CMP             R3, #0x1200
BEQ             loc_14E68

def_14950               ; jumptable 00014950 default case, cases 6,7,13,16
LDR             R0, =aPossibleSyntax ; "Possible syntax error"
B               loc_148B0

loc_14E68
MOV             R0, R7
BL              sub_4A8BC
LDR             R3, [R4,#0xC]
CMP             R0, #0
MOV             R1, R5
LDRNE           R0, [R3,#8]
LDREQ           R0, [R3,#0xC]
BL              sub_14790
B               loc_14D78

loc_14E8C               ; jumptable 00014950 case 23
LDR             R3, [R4,#0xC]
LDR             R0, [R3]
CMP             R0, #0
BNE             loc_14EAC
LDR             R3, [R3,#4]
CMP             R3, #0
LDREQ           R0, =aCallToUndefine ; "Call to undefined function"
BEQ             loc_148B0

loc_14EAC
ADD             R0, R0, #1
BL              sub_4A4D8
MOV             R11, R0
ADD             R8, R0, #0x18

loc_14EBC
LDR             R3, [SP,#0x2C+var_8]
SUB             R2, R8, #0x18
CMP             R3, #0
BEQ             loc_14F2C
ADD             R0, SP, #0x2C+var_8
STR             R2, [SP,#0x2C+var_10]
BL              sub_4A40C
LDR             R1, [SP,#0x2C+var_20]
BL              sub_14790
LDR             R2, [SP,#0x2C+var_10]
MOV             R1, R0
STR             R0, [SP,#0x2C+var_14]
MOV             R0, R2
BL              sub_4B4B0
LDR             R2, [R8,#-0x18]
LDR             R3, [SP,#0x2C+var_14]
ORR             R2, R2, #0x2000
STR             R2, [R8,#-0x18]
LDR             R2, =0xAAAAAAAB
STR             R3, [R8,#-4]
SUB             R3, R8, R11
MOV             R3, R3,ASR#3
ADD             R8, R8, #0x18
MUL             R3, R2, R3
LDR             R2, [R4,#0xC]
LDR             R2, [R2]
CMP             R3, R2
BCC             loc_14EBC

loc_14F2C
LDR             R3, [R4,#0xC]
MOV             R1, R5
LDR             R8, [R6,#0x8C]
STR             R11, [R6,#0x8C]
LDR             R11, [R6,#-0x3C]
LDR             R0, [R3,#4]
BL              sub_14790
STR             R11, [R6,#-0x3C]
MOV             R5, R0
LDR             R0, [R6,#0x8C]
BL              sub_4B604
STR             R8, [R6,#0x8C]
B               loc_14868 ; jumptable 00014950 case 0

loc_14F60               ; jumptable 00014950 cases 24,30
LDR             R3, [SP,#0x2C+var_24]
AND             R8, R3, #0xFF00
LDR             R3, [SP,#0x2C+var_8]
CMP             R3, #0
BEQ             loc_1501C
LDR             R0, [R6,#-0x44]
MOV             R1, R9
BL              sub_4A98C
LDR             R3, [R0]
MOV             R6, R0
CMP             R3, #0
BNE             loc_14FB0
CMP             R8, #0x2000
BNE             loc_1500C
LDR             R1, =(aNTR+5) ; "r"
MOV             R0, R9  ; command
BL              popen
MOV             R3, #1
STR             R0, [R6]
STR             R3, [R6,#0x14]

loc_14FB0
LDR             R3, [R6]
CMP             R3, #0
BEQ             loc_1503C
LDR             R3, [R4,#0xC]
MOV             R0, R6
CMP             R3, #0
LDREQ           R3, [R11]
LDREQ           R10, [R3,#0x34]
MOV             R1, R10
BL              sub_4B6F4
SUBS            R8, R0, #0
BLE             loc_15000
LDR             R3, [SP,#0x2C+var_8]
CMP             R3, #0
BNE             loc_15000
LDR             R6, [R11]
LDR             R0, [R6,#0x48]
BL              sub_4B490
LDR             R0, [R6,#0x4C]
BL              sub_4B490

loc_15000
VMOV            S15, R8

loc_15004
VCVT.F64.S32    D0, S15
B               loc_14DB0

loc_1500C
MOV             R0, R9
BL              sub_61C9C
STR             R0, [R6]
B               loc_14FB0

loc_1501C
LDR             R3, [R6,#-0x50]
CMP             R3, #0
BNE             loc_15030
BL              sub_4B50C
STR             R0, [R6,#-0x50]

loc_15030
LDR             R6, [R6,#-0x50]
CMP             R6, #0
BNE             loc_14FB0

loc_1503C
LDR             R3, =dword_7DB94
LDR             R3, [R3]
VLDR            S0, [R3]
LDR             R3, [R11]
VCVT.F64.S32    D0, S0
LDR             R0, [R3,#0x44]
BL              sub_4B458
VMOV.F64        D0, #-1.0
B               loc_14DB0

loc_15060               ; jumptable 00014950 case 20
CMP             R8, #0xC
LDRLS           PC, [PC,R8,LSL#2] ; switch jump
B               def_15064 ; jumptable 00015064 default case
jpt_15064 DCD loc_150A0 ; jump table for switch statement
DCD loc_150B8
DCD loc_150D0
DCD loc_150E0
DCD loc_150EC
DCD loc_150F8
DCD loc_15104
DCD loc_15110
DCD loc_1513C
DCD loc_15150
DCD loc_15198
DCD loc_151C0
DCD loc_15208

loc_150A0               ; jumptable 00015064 case 0
VMOV            R0, R1, D9
BLX             sub_62C80
BLX             sub_62B48
VMOV            D8, R0, R1

def_15064               ; jumptable 00015064 default case
VMOV.F64        D0, D8
B               loc_14DB0

loc_150B8               ; jumptable 00015064 case 1
BL              rand
VMOV            S15, R0
VCVT.F64.S32    D6, S15
VLDR            D7, =2.14748365e9
VDIV.F64        D8, D6, D7
B               def_15064 ; jumptable 00015064 default case

loc_150D0               ; jumptable 00015064 case 2
VMOV.F64        D0, D9
BL              cos

loc_150D8
VMOV.F64        D8, D0
B               def_15064 ; jumptable 00015064 default case

loc_150E0               ; jumptable 00015064 case 3
VMOV.F64        D0, D9
BL              exp
B               loc_150D8

loc_150EC               ; jumptable 00015064 case 4
VMOV.F64        D0, D9
BL              log
B               loc_150D8

loc_150F8               ; jumptable 00015064 case 5
VMOV.F64        D0, D9
BL              sin
B               loc_150D8

loc_15104               ; jumptable 00015064 case 6
VMOV.F64        D0, D9
BL              sqrt
B               loc_150D8

loc_15110               ; jumptable 00015064 case 7
LDR             R0, [SP,#0x2C+var_8]
VLDR            S15, [R6,#0x90]
CMP             R0, #0
VCVT.F64.U32    D8, S15
VCVTNE.U32.F64  S15, D9
VMOVNE          R0, S15 ; timer
BNE             loc_15130
BL              time

loc_15130
STR             R0, [R6,#0x90]
BL              srand
B               def_15064 ; jumptable 00015064 default case

loc_1513C               ; jumptable 00015064 case 8
MOV             R0, #0
BL              time

loc_15144
VMOV            S15, R0

loc_15148
VCVT.F64.S32    D8, S15
B               def_15064 ; jumptable 00015064 default case

loc_15150               ; jumptable 00015064 case 9
LDR             R3, [SP,#0x2C+var_8]
CMP             R3, #0
BNE             loc_1517C
LDR             R0, [R6,#0x34]
BL              sub_4AD78
MOV             R9, R0

loc_15168               ; s
MOV             R0, R9
BL              strlen
VMOV            S15, R0
VCVT.F64.U32    D8, S15
B               def_15064 ; jumptable 00015064 default case

loc_1517C
LDR             R3, [R7]
TST             R3, #2
LDRNE           R3, [R7,#0x14]
VLDRNE          S16, [R3]
VCVTNE.F64.U32  D8, S16
BNE             def_15064 ; jumptable 00015064 default case
B               loc_15168

loc_15198               ; jumptable 00015064 case 10
BL              sub_177D8
CMP             R9, #0
BEQ             loc_15284
LDRB            R3, [R9]
CMP             R3, #0
BEQ             loc_15284
MOV             R0, R9  ; command
BL              system
MOV             R0, R0,ASR#8
B               loc_15144

loc_151C0               ; jumptable 00015064 case 11
LDR             R3, [SP,#0x2C+var_8]
CMP             R3, #0
LDREQ           R3, =stdout
LDREQ           R0, [R3]
BEQ             loc_151F8
CMP             R9, #0
BEQ             loc_15200
LDRB            R3, [R9]
CMP             R3, #0
BEQ             loc_15200
MOV             R1, R9
LDR             R0, [R6,#-0x44]
BL              sub_4A98C
LDR             R0, [R0] ; stream

loc_151F8
BL              fflush
B               def_15064 ; jumptable 00015064 default case

loc_15200
BL              sub_177D8
B               def_15064 ; jumptable 00015064 default case

loc_15208               ; jumptable 00015064 case 12
MOV             R1, R9
LDR             R0, [R6,#-0x44]
BL              sub_4A93C
SUBS            R11, R0, #0
MOVEQ           R8, R11
BEQ             loc_15274
LDR             R0, [R11] ; stream
CMP             R0, #0
BEQ             loc_1523C
LDR             R3, [R11,#0x14]
CMP             R3, #0
BEQ             loc_1527C
BL              pclose

loc_1523C
MOV             R8, R0
LDR             R0, [R11,#4] ; ptr
BL              free
MOV             R1, R9
LDR             R0, [R6,#-0x44]
BL              sub_4AAB0
CMP             R8, #0
BEQ             loc_15274
LDR             R3, =dword_7DB94
LDR             R0, [R6,#0x44]
LDR             R3, [R3]
VLDR            S0, [R3]
VCVT.F64.S32    D0, S0
BL              sub_4B458

loc_15274
VMOV            S15, R8
B               loc_15148

loc_1527C
BL              fclose
B               loc_1523C

loc_15284
VMOV.F64        D8, D11
B               def_15064 ; jumptable 00015064 default case

loc_1528C               ; jumptable 00014950 case 15
MOV             R1, R5
MOV             R0, R4
BL              sub_4BD98
B               loc_14D78

loc_1529C               ; jumptable 00014950 case 34
LDR             R0, [SP,#0x2C+var_8]
BL              sub_4C344

loc_152A4
MOV             R1, R0
MOV             R0, R5
BL              sub_4B308
B               loc_14868 ; jumptable 00014950 case 0

loc_152B4               ; jumptable 00014950 case 36
MOV             R0, R10
BL              sub_4A828
CMP             R8, #0x4D ; 'M'
VMOV.F64        D10, D0
BEQ             loc_15320
BGT             loc_152E4
CMP             R8, #0x21 ; '!'
BEQ             loc_15338
CMP             R8, #0x2D ; '-'
VNEGEQ.F64      D10, D0

loc_152DC
VMOV.F64        D0, D10
B               loc_14DB0

loc_152E4
CMP             R8, #0x6D ; 'm'
BEQ             loc_1532C
CMP             R8, #0x70 ; 'p'
BEQ             loc_1530C
CMP             R8, #0x50 ; 'P'
VMOVEQ.F64      D7, #1.0
VADDEQ.F64      D10, D0, D7
BNE             loc_152DC

loc_15304
VMOV.F64        D0, D10
B               loc_15314

loc_1530C
VMOV.F64        D0, #1.0
VADD.F64        D0, D10, D0

loc_15314
MOV             R0, R10
BL              sub_4B458
B               loc_152DC

loc_15320
VMOV.F64        D7, #1.0
VSUB.F64        D10, D0, D7
B               loc_15304

loc_1532C
VMOV.F64        D0, #1.0
VSUB.F64        D0, D10, D0
B               loc_15314

loc_15338
MOV             R0, R10
VMOV.F64        D10, #1.0
BL              sub_4A8BC
CMP             R0, #0
VMOVNE.F64      D10, D11
B               loc_152DC

loc_15350               ; jumptable 00014950 case 21
MOV             R0, R10
BL              sub_4A828
VCVT.S32.F64    S15, D0
VMOV            R5, S15
CMP             R5, #0
LDRLT           R0, =aAccessToNegati ; "Access to negative field"
BLT             loc_148B0
LDREQ           R5, [R6,#0x34]
BEQ             loc_14868 ; jumptable 00014950 case 0
BL              sub_4B08C
LDR             R3, [R6,#-0x34]
CMP             R3, R5
BGE             loc_1538C
MOV             R0, R5
BL              sub_4A60C

loc_1538C
MOV             R3, #0x18
MUL             R5, R3, R5
LDR             R3, [R6,#-0x2C]
SUB             R5, R5, #0x18
ADD             R5, R3, R5
B               loc_14868 ; jumptable 00014950 case 0

loc_153A4               ; jumptable 00014950 cases 17,19
LDR             R3, [SP,#0x2C+var_24]
AND             R3, R3, #0xFF00
CMP             R3, #0x1300
LDRNE           R2, =(asc_6B39D+1) ; ""
BNE             loc_153C4
LDR             R0, [R6,#0x30]
BL              sub_4AD78
MOV             R2, R0

loc_153C4
LDR             R3, [SP,#0x2C+command]
MOV             R1, R9
LDR             R0, =aSSS ; "%s%s%s"
BL              sub_177E4
B               loc_152A4

loc_153D8               ; jumptable 00014950 case 26
MOV             R0, R7
BL              sub_4A8BC
CMP             R0, #0
VMOVEQ.F64      D0, D11
BEQ             loc_14DB0

loc_153EC
LDR             R0, [R4,#0xC]
BL              sub_4C558
VMOV            S15, R0
B               loc_15004

loc_153FC               ; jumptable 00014950 case 27
MOV             R0, R7
BL              sub_4A8BC
CMP             R0, #0
VMOVNE.F64      D0, #1.0
BNE             loc_14DB0
B               loc_153EC

loc_15414               ; jumptable 00014950 cases 14,32
MOV             R0, R10
SUB             R8, R8, #0x25 ; '%'
BL              sub_4A828
VMOV.F64        D10, D0
CMP             R8, #0xA ; switch 11 cases
LDRLS           PC, [PC,R8,LSL#2] ; switch jump
B               def_15428 ; jumptable 00015428 default case, cases 2-4,7,9
jpt_15428 DCD loc_154E4 ; jump table for switch statement
DCD loc_154D0
DCD def_15428
DCD def_15428
DCD def_15428
DCD loc_15488
DCD loc_1545C
DCD def_15428
DCD loc_15480
DCD def_15428
DCD loc_15490

loc_1545C               ; jumptable 00015428 case 6
VADD.F64        D9, D9, D0

def_15428               ; jumptable 00015428 default case, cases 2-4,7,9
LDR             R3, [SP,#0x2C+var_24]
VMOV.F64        D0, D9
AND             R0, R3, #0xFF00
CMP             R0, #0x1000
MOVEQ           R0, R5
MOVNE           R0, R7
BL              sub_4B458
B               loc_14D78

loc_15480               ; jumptable 00015428 case 8
VSUB.F64        D9, D9, D0
B               def_15428 ; jumptable 00015428 default case, cases 2-4,7,9

loc_15488               ; jumptable 00015428 case 5
VMUL.F64        D9, D9, D0
B               def_15428 ; jumptable 00015428 default case, cases 2-4,7,9

loc_15490               ; jumptable 00015428 case 10
VCMP.F64        D0, #0.0
VMRS            APSR_nzcv, FPSCR
BNE             loc_154A4

loc_1549C
LDR             R0, =aDivisionByZero ; "Division by zero"
B               loc_148B0

loc_154A4
VDIV.F64        D9, D9, D0
B               def_15428 ; jumptable 00015428 default case, cases 2-4,7,9
ALIGN 0x10
dbl_154B0 DCFD 2.14748365e9
off_154B8 DCD stdout
off_154BC DCD dword_7DB94
off_154C0 DCD aAccessToNegati ; "Access to negative field"
off_154C4 DCD asc_6B39D+1 ; ""
off_154C8 DCD aSSS      ; "%s%s%s"
off_154CC DCD aDivisionByZero ; "Division by zero"

loc_154D0               ; jumptable 00015428 case 1
VMOV.F64        D1, D0
VMOV.F64        D0, D9
BL              pow
VMOV.F64        D9, D0
B               def_15428 ; jumptable 00015428 default case, cases 2-4,7,9

loc_154E4               ; jumptable 00015428 case 0
VCMP.F64        D0, #0.0
VMRS            APSR_nzcv, FPSCR
BEQ             loc_1549C
VDIV.F64        D7, D9, D0
VMOV            R0, R1, D7
BLX             sub_62C80
BLX             sub_62B48
VMOV            D7, R0, R1
VMLS.F64        D9, D7, D10
B               def_15428 ; jumptable 00015428 default case, cases 2-4,7,9

loc_1550C               ; jumptable 00014950 case 18
MOV             R0, R7
MOVW            R8, #0x4201
BL              sub_4A828
LDR             R3, [R7]
EOR             R3, R3, #0x4000
TST             R3, R8
BEQ             loc_155A8
MOV             R0, R10
BL              sub_4A828
LDR             R3, [R10]
EOR             R3, R3, #0x4000
TST             R3, R8
BEQ             loc_155A8
MOV             R0, R7
BL              sub_4A828
MOV             R0, R10
VMOV.F64        D10, D0
BL              sub_4A828
VSUB.F64        D0, D10, D0

loc_15558
LDR             R3, [SP,#0x2C+var_24]
AND             R3, R3, #0x7E ; '~'
CMP             R3, #2
BEQ             loc_155E8
CMP             R3, #4
BEQ             loc_155FC
CMP             R3, #0
BNE             loc_1558C
VCMPE.F64       D0, #0.0
VMRS            APSR_nzcv, FPSCR
MOVGT           R3, #1
MOVLE           R3, #0

loc_15588
STR             R3, [SP,#0x2C+var_18]

loc_1558C
LDR             R3, [SP,#0x2C+var_24]
LDR             R2, [SP,#0x2C+var_18]
MVN             R3, R3
AND             R3, R3, #1
EOR             R3, R3, R2
VMOV            S0, R3
B               loc_14E28

loc_155A8
MOV             R0, R7
BL              sub_4AD78
MOV             R8, R0
MOV             R0, R10
BL              sub_4AD78
LDR             R3, [R6,#-0x1C]
MOV             R1, R0  ; s2
MOV             R0, R8  ; s1
CMP             R3, #0
BEQ             loc_155E0
BL              strcasecmp

loc_155D4
VMOV            S15, R0
VCVT.F64.S32    D0, S15
B               loc_15558

loc_155E0
BL              strcmp
B               loc_155D4

loc_155E8
VCMPE.F64       D0, #0.0
VMRS            APSR_nzcv, FPSCR
MOVGE           R3, #1
MOVLT           R3, #0
B               loc_15588

loc_155FC
VCMP.F64        D0, #0.0
VMRS            APSR_nzcv, FPSCR
MOVEQ           R3, #1
MOVNE           R3, #0
B               loc_15588
; End of function sub_14790



; Attributes: noreturn

; void __fastcall __noreturn sub_15610(int, char **)
sub_15610

var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
s= -0x1C

LDR             R3, =aConvfmt ; "CONVFMT"
MOV             R0, #0x258
PUSH            {R4-R11,LR}
MOV             R5, #0
VPUSH           {D8}
SUB             SP, SP, #0x4C
MOV             R8, R1
STR             R3, [SP,#0x4C+var_24]
LDR             R3, =a6g ; "%.6g"
STR             R5, [SP,#0x4C+var_30]
STR             R5, [SP,#0x4C+var_2C]
STR             R3, [SP,#0x4C+var_20]
STR             R5, [SP,#0x4C+var_28]
BL              sub_174DC
LDR             R3, =dword_7DB98
ADD             R4, R0, #0x88
STR             R4, [R3]
MOV             R3, #0xC000
MOV             R2, #0x18 ; n
STR             R3, [R4,#0x68]
MOV             R3, #1
STR             R3, [R4,#0x90]
MOV             R1, R5  ; c
ADD             R0, SP, #0x4C+s ; s
VLDR            D8, =0.0
BL              memset
MOV             R0, #0xF1
BL              sub_1748C
STR             R0, [R4,#-0x20]
BL              sub_4A444
STR             R0, [R4,#-0x4C]
BL              sub_4A444
STR             R0, [R4,#-0x48]
BL              sub_4A444
STR             R0, [R4,#-0x44]
BL              sub_4A444
STR             R0, [R4,#-0x40]

loc_156A4
LDR             R3, [SP,#0x4C+var_24]
LDRB            R6, [R3]
CMP             R6, #0
BNE             loc_15838
LDR             R0, [R4,#0x18]
BL              sub_4B14C
LDR             R0, [R4,#0x24]
BL              sub_4B14C
LDR             R1, =aDevStdin ; "/dev/stdin"
LDR             R0, [R4,#-0x44]
BL              sub_4A98C
LDR             R3, =stdin
LDR             R1, =aDevStdout ; "/dev/stdout"
LDR             R3, [R3]
STR             R3, [R0]
LDR             R0, [R4,#-0x44]
BL              sub_4A98C
LDR             R3, =stdout
LDR             R1, =aDevStderr ; "/dev/stderr"
LDR             R3, [R3]
STR             R3, [R0]
LDR             R0, [R4,#-0x44]
BL              sub_4A98C
LDR             R3, =stderr
LDR             R3, [R3]
STR             R3, [R0]
LDR             R3, =__environ
LDR             R5, [R3]
CMP             R5, #0
SUBNE           R5, R5, #4
MOVNE           R10, #0x3D ; '='
BNE             loc_158EC

loc_15724
MOV             R3, #0
ADD             R10, SP, #0x4C+var_28
STR             R3, [SP,#0x4C+var_44]
ADD             R3, SP, #0x4C+var_2C
STR             R3, [SP,#0x4C+var_4C]
ADD             R2, SP, #0x4C+var_34
ADD             R3, SP, #0x4C+var_30
STR             R10, [SP,#0x4C+var_48]
LDR             R1, =aFVFEW ; "+F:v:*f:*e:*W:"
MOV             R0, R8
BL              sub_593CC
LDR             R3, =optind
TST             R0, #0x10
MOV             R9, R0
LDR             R3, [R3]
STR             R3, [SP,#0x4C+var_3C]
ADD             R7, R8, R3,LSL#2
BNE             loc_158FC

loc_1576C
TST             R9, #1
BEQ             loc_15788
LDR             R0, [SP,#0x4C+var_34]
BL              sub_4AB88
LDR             R1, [SP,#0x4C+var_34]
LDR             R0, [R4,#0x18]
BL              sub_4B32C

loc_15788
LDR             R3, [SP,#0x4C+var_30]
CMP             R3, #0
BNE             loc_15908
STR             R3, [SP,#0x4C+var_38]

loc_15798
LDR             R3, [SP,#0x4C+var_2C]
CMP             R3, #0
BNE             loc_15920
LDR             R3, =aCmdLine ; "cmd. line"
STR             R3, [R4,#-0x3C]

loc_157AC
LDR             R3, [SP,#0x4C+var_28]
CMP             R3, #0
BNE             loc_15990
TST             R9, #0xC
BNE             loc_157D8
LDR             R3, [SP,#0x4C+var_3C]
LDR             R0, [R8,R3,LSL#2]
CMP             R0, #0
BEQ             loc_1591C
ADD             R7, R7, #4
BL              sub_4D030

loc_157D8
MOV             R5, #0
LDR             R2, =aAwk ; "awk"
MOV             R1, #0
LDR             R0, [R4,#0x40]
BL              sub_4B424

loc_157EC
LDR             R2, [R7,R5,LSL#2]
ADD             R5, R5, #1
CMP             R2, #0
BNE             loc_159A0
VMOV            S15, R5
VCVT.F64.S32    D0, S15
LDR             R0, [R4,#0x3C]
BL              sub_4B458
ADD             R1, SP, #0x4C+s
LDR             R0, [R4,#-0x80]
BL              sub_14790
LDR             R3, [R4,#-0x74]
CMP             R3, #0
BNE             loc_159B0
LDR             R3, [R4,#-0x68]
CMP             R3, #0
BNE             loc_159B0

loc_15830
MOV             R0, #0
BL              sub_4B9E0

loc_15838
LDR             R6, [R4,#-0x4C]
ADD             R0, SP, #0x4C+var_24
BL              sub_4A3D0
MOV             R1, R0
MOV             R0, R6
BL              sub_4A98C
ADD             R3, R5, #4
MOV             R6, R0
STR             R0, [R4,R3,LSL#2]
LDR             R3, [SP,#0x4C+var_20]
LDRB            R3, [R3]
CMP             R3, #0xFF
BEQ             loc_158A8
ADD             R0, SP, #0x4C+var_20
BL              sub_4A3D0
MOV             R1, R0
MOV             R0, R6
BL              sub_4B32C

loc_15880
LDR             R3, [SP,#0x4C+var_24]
ADD             R5, R5, #1
LDRB            R2, [R3]
CMP             R2, #0x2A ; '*'
LDREQ           R2, [R6]
ADDEQ           R3, R3, #1
ORREQ           R2, R2, #0x400
STREQ           R2, [R6]
STREQ           R3, [SP,#0x4C+var_24]
B               loc_156A4

loc_158A8
VMOV.F64        D0, D8
BL              sub_4B458
B               loc_15880

loc_158B4               ; c
MOV             R1, #0x3D ; '='
MOV             R0, R7  ; s
BL              strchr
SUBS            R11, R0, #0
BEQ             loc_158EC
MOV             R9, R11
STRB            R6, [R9],#1
LDR             R0, [R4,#0x58]
BL              sub_4A470
MOV             R1, R7
BL              sub_4A98C
MOV             R1, R9
BL              sub_4B360
STRB            R10, [R11]

loc_158EC
LDR             R7, [R5,#4]!
CMP             R7, #0
BNE             loc_158B4
B               loc_15724

loc_158FC
LDR             R0, =aWarningOptionW ; "warning: option -W is ignored"
BL              sub_16DDC
B               loc_1576C

loc_15908
ADD             R0, SP, #0x4C+var_30
BL              sub_5D2FC
BL              sub_4B378
CMP             R0, #0
BNE             loc_15788

loc_1591C
BL              sub_162F0

loc_15920
ADD             R0, SP, #0x4C+var_2C
MOV             R5, #0
BL              sub_5D2FC
STR             R0, [R4,#-0x3C]
MOV             R6, #1
BL              sub_61D20
MOV             R11, R0

loc_1593C
ADD             R1, R6, #0x1000
MOV             R0, R5
BL              sub_174B4
MOV             R3, R11 ; stream
MOV             R5, R0
MOVW            R2, #0xFFE ; n
ADD             R0, R0, R6 ; ptr
MOV             R1, #1  ; size
BL              fread
CMP             R0, #0
ADD             R6, R6, R0
BGT             loc_1593C
LDRB            R3, [SP,#0x4C+var_38]
MOV             R0, R11 ; stream
STRB            R3, [R5,R6]
BL              fclose
ADD             R0, R5, #1
BL              sub_4D030
MOV             R0, R5  ; ptr
BL              free
B               loc_15798

loc_15990
MOV             R0, R10
BL              sub_5D2FC
BL              sub_4D030
B               loc_157AC

loc_159A0
MOV             R1, R5
LDR             R0, [R4,#0x40]
BL              sub_4B424
B               loc_157EC

loc_159B0
LDR             R3, [R4,#-0x50]
CMP             R3, #0
BNE             loc_159C4
BL              sub_4B50C
STR             R0, [R4,#-0x50]

loc_159C4
VLDR            D8, =0.0
MOV             R5, #0

loc_159CC
LDR             R3, [R4,#-0x50]
CMP             R3, #0
BEQ             loc_15830
STR             R5, [R4,#-0x10]
VMOV.F64        D0, D8
LDR             R0, [R4,#0x48]
BL              sub_4B458

loc_159E8
LDR             R1, [R4,#0x34]
LDR             R0, [R4,#-0x50]
BL              sub_4B6F4
CMP             R0, #0
BGT             loc_15A14
BEQ             loc_15A40
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R0, [R3] ; errnum
BL              strerror
BL              sub_4AC50

loc_15A14
STR             R5, [R4,#-0x14]
LDR             R0, [R4,#0x4C]
BL              sub_4B490
LDR             R0, [R4,#0x48]
BL              sub_4B490
ADD             R1, SP, #0x4C+s
LDR             R0, [R4,#-0x74]
BL              sub_14790
LDR             R3, [R4,#-0x10]
CMP             R3, #0
BEQ             loc_159E8

loc_15A40
BL              sub_4B50C
STR             R0, [R4,#-0x50]
B               loc_159CC
; End of function sub_15610

ALIGN 0x10
dbl_15A50 DCFD 0.0
off_15A58 DCD aConvfmt  ; "CONVFMT"
off_15A5C DCD a6g       ; "%.6g"
off_15A60 DCD dword_7DB98
off_15A64 DCD aDevStdin ; "/dev/stdin"
off_15A68 DCD stdin
off_15A6C DCD aDevStdout ; "/dev/stdout"
off_15A70 DCD stdout
off_15A74 DCD aDevStderr ; "/dev/stderr"
off_15A78 DCD stderr
off_15A7C DCD __environ
off_15A80 DCD aFVFEW    ; "+F:v:*f:*e:*W:"
off_15A84 DCD optind
off_15A88 DCD aCmdLine  ; "cmd. line"
off_15A8C DCD aAwk      ; "awk"
off_15A90 DCD aWarningOptionW ; "warning: option -W is ignored"
off_15A94 DCD dword_7DB94



; _BYTE *__fastcall sub_15A98(unsigned __int64, _BYTE *, int)
sub_15A98

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R4, R0
MOV             R5, R1
ADR             R1, dword_15C80
LDRD            R0, R1, [R1]
MOV             R6, R2
STR             R3, [SP,#0xC+var_8]
CMP             R5, R1
CMPEQ           R4, R0
MOVLS           R11, #0
BLS             loc_15AFC
MOV             R3, #0xA
MOV             R11, #0
MUL             R2, R3, R5
UMULL           R4, R5, R4, R3
ADD             R5, R2, R5

loc_15AD8
MOV             R3, R4,LSR#10
MOV             R12, R5,LSR#10
ORR             R3, R3, R5,LSL#22
CMP             R12, R1
MOV             R5, R12
CMPEQ           R3, R0

loc_15AF0
MOV             R4, R3
ADD             R11, R11, #1
BHI             loc_15AD8

loc_15AFC
LDR             R0, =0xCCCCCCCD
MOV             R8, R4
LDR             R7, =a0123456789 ; "0123456789"
UMULL           R0, R1, R4, R0
MOV             R0, R4
MOV             R9, R1,LSR#3
MOV             R1, #0xA
BLX             sub_161AC
LDR             R0, =0x51EB851F
MOV             R10, R1
CMP             R11, #0
LDR             R12, =a123456789 ; " 123456789"
UMULL           R0, R1, R4, R0
MOV             R3, R1,LSR#5
STR             R3, [SP,#0xC+var_C]
BNE             loc_15BC4
LDR             R2, =0xD1B71759
MOV             R1, #0xA
UMULL           R4, R5, R4, R2
MOV             R2, R5,LSR#13
LDRB            R4, [R12,R2]
LDR             R2, =0x10624DD3
CMP             R4, #0x20 ; ' '
STRB            R4, [R6]
MOVNE           R4, R7
MOVEQ           R4, R12
UMULL           R2, R3, R8, R2
MOV             R0, R3,LSR#6
BLX             sub_15EFC
LDRB            R2, [R4,R1]
MOV             R1, #0xA
LDR             R0, [SP,#0xC+var_C]
CMP             R2, #0x20 ; ' '
STRB            R2, [R6,#1]
MOVNE           R4, R7
BLX             sub_15EFC
LDRB            R3, [R4,R1]
MOV             R0, R9
MOV             R1, #0xA
CMP             R3, #0x20 ; ' '
STRB            R3, [R6,#2]
MOVNE           R4, R7
BLX             sub_15EFC
LDRB            R3, [R4,R1]
STRB            R3, [R6,#3]
LDRB            R3, [R7,R10]

loc_15BB4
ADD             R0, R6, #5
STRB            R3, [R6,#4]
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_15BC4
CMP             R9, #0x63 ; 'c'
BLS             loc_15C48
LDR             R0, =0xD1B71759
UMULL           R0, R1, R4, R0
MOV             R1, R1,LSR#13
LDRB            R4, [R12,R1]
LDR             R1, =0x10624DD3
CMP             R4, #0x20 ; ' '
STRB            R4, [R6]
MOVEQ           R4, R12
MOVNE           R4, R7
UMULL           R2, R3, R8, R1
MOV             R1, #0xA
MOV             R0, R3,LSR#6
BLX             sub_15EFC
LDRB            R1, [R4,R1]
MOV             R0, R9
CMP             R1, #0x20 ; ' '
STRB            R1, [R6,#1]
MOV             R1, #0xA
MOVNE           R4, R7
BLX             sub_15EFC
LDR             R0, [SP,#0xC+var_C]
MOV             R10, R1
MOV             R1, #0xA
BLX             sub_15EFC
LDRB            R3, [R4,R1]

loc_15C30
STRB            R3, [R6,#2]
LDRB            R3, [R7,R10]
STRB            R3, [R6,#3]
LDR             R3, [SP,#0xC+var_8]
LDRB            R3, [R3,R11]
B               loc_15BB4

loc_15C48
LDR             R3, [SP,#0xC+var_C]
MOV             R1, #0xA
MOV             R0, R9
LDRB            R4, [R12,R3]
CMP             R4, #0x20 ; ' '
STRB            R4, [R6]
MOVNE           R4, R7
MOVEQ           R4, R12
BLX             sub_15EFC
LDRB            R3, [R4,R1]
STRB            R3, [R6,#1]
MOV             R3, #0x2E ; '.'
B               loc_15C30
; End of function sub_15A98

ALIGN 0x10
dword_15C80 DCD 0x1869F
DCD 0
dword_15C88 DCD 0xCCCCCCCD
off_15C8C DCD a0123456789 ; "0123456789"
dword_15C90 DCD 0x51EB851F
off_15C94 DCD a123456789 ; " 123456789"
dword_15C98 DCD 0xD1B71759
dword_15C9C DCD 0x10624DD3
CODE16



; unsigned int __fastcall sub_15CA0(unsigned int result, unsigned int)
sub_15CA0
SUBS            R2, R1, #1
IT EQ
BXEQ            LR
BCC.W           loc_15EF2
CMP             R0, R1
BLS.W           loc_15EDC
TST             R1, R2
BEQ.W           loc_15EE4
CLZ.W           R3, R0
CLZ.W           R2, R1
SUB.W           R3, R2, R3
RSB.W           R3, R3, #0x1F
ADR             R2, loc_15CD8
ADD.W           R3, R2, R3,LSL#4
MOV.W           R2, #0
MOV             PC, R3
ALIGN 8

loc_15CD8
CMP.W           R0, R1,LSL#31
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#31
CMP.W           R0, R1,LSL#30
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#30
CMP.W           R0, R1,LSL#29
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#29
CMP.W           R0, R1,LSL#28
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#28
CMP.W           R0, R1,LSL#27
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#27
CMP.W           R0, R1,LSL#26
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#26
CMP.W           R0, R1,LSL#25
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#25
CMP.W           R0, R1,LSL#24
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#24
CMP.W           R0, R1,LSL#23
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#23
CMP.W           R0, R1,LSL#22
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#22
CMP.W           R0, R1,LSL#21
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#21
CMP.W           R0, R1,LSL#20
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#20
CMP.W           R0, R1,LSL#19
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#19
CMP.W           R0, R1,LSL#18
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#18
CMP.W           R0, R1,LSL#17
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#17
CMP.W           R0, R1,LSL#16
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#16
CMP.W           R0, R1,LSL#15
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#15
CMP.W           R0, R1,LSL#14
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#14
CMP.W           R0, R1,LSL#13
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#13
CMP.W           R0, R1,LSL#12
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#12
CMP.W           R0, R1,LSL#11
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#11
CMP.W           R0, R1,LSL#10
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#10
CMP.W           R0, R1,LSL#9
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#9
CMP.W           R0, R1,LSL#8
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#8
CMP.W           R0, R1,LSL#7
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#7
CMP.W           R0, R1,LSL#6
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#6
CMP.W           R0, R1,LSL#5
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#5
CMP.W           R0, R1,LSL#4
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#4
CMP.W           R0, R1,LSL#3
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#3
CMP.W           R0, R1,LSL#2
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#2
CMP.W           R0, R1,LSL#1
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#1
CMP.W           R0, R1
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1
MOV             R0, R2
BX              LR

loc_15EDC
ITE EQ
MOVEQ           R0, #1
MOVNE           R0, #0
BX              LR

loc_15EE4
CLZ.W           R2, R1
RSB.W           R2, R2, #0x1F
LSR.W           R0, R0, R2
BX              LR

loc_15EF2
CBZ             R0, loc_15EF8
MOV.W           R0, #0xFFFFFFFF

loc_15EF8
B.W             loc_62C74
; End of function sub_15CA0




; unsigned int __fastcall sub_15EFC(unsigned int, unsigned int)
sub_15EFC
CMP             R1, #0
BEQ             loc_15EF2
PUSH.W          {R0,R1,LR}
BL              sub_15CA0
POP.W           {R1,R2,LR}
MUL             R3, R2, R0
SUB.W           R1, R1, R3
BX              LR
; End of function sub_15EFC

ALIGN 4



; int __fastcall sub_15F18(int, int)
sub_15F18

; FUNCTION CHUNK AT 0001619A SIZE 00000012 BYTES

CMP             R1, #0
BEQ.W           loc_1619A
; End of function sub_15F18




; int __fastcall sub_15F1E(int result, unsigned int)
sub_15F1E
EOR.W           R12, R0, R1
IT MI
NEGMI           R1, R1
SUBS            R2, R1, #1
BEQ.W           loc_1616A
MOVS            R3, R0
IT MI
NEGMI           R3, R0
CMP             R3, R1
BLS.W           loc_16174
TST             R1, R2
BEQ.W           loc_16184
CLZ.W           R2, R3
CLZ.W           R0, R1
SUB.W           R2, R0, R2
RSB.W           R2, R2, #0x1F
ADR             R0, loc_15F60
ADD.W           R2, R0, R2,LSL#4
MOV.W           R0, #0
MOV             PC, R2
ALIGN 0x10

loc_15F60
CMP.W           R3, R1,LSL#31
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#31
CMP.W           R3, R1,LSL#30
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#30
CMP.W           R3, R1,LSL#29
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#29
CMP.W           R3, R1,LSL#28
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#28
CMP.W           R3, R1,LSL#27
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#27
CMP.W           R3, R1,LSL#26
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#26
CMP.W           R3, R1,LSL#25
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#25
CMP.W           R3, R1,LSL#24
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#24
CMP.W           R3, R1,LSL#23
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#23
CMP.W           R3, R1,LSL#22
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#22
CMP.W           R3, R1,LSL#21
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#21
CMP.W           R3, R1,LSL#20
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#20
CMP.W           R3, R1,LSL#19
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#19
CMP.W           R3, R1,LSL#18
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#18
CMP.W           R3, R1,LSL#17
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#17
CMP.W           R3, R1,LSL#16
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#16
CMP.W           R3, R1,LSL#15
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#15
CMP.W           R3, R1,LSL#14
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#14
CMP.W           R3, R1,LSL#13
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#13
CMP.W           R3, R1,LSL#12
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#12
CMP.W           R3, R1,LSL#11
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#11
CMP.W           R3, R1,LSL#10
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#10
CMP.W           R3, R1,LSL#9
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#9
CMP.W           R3, R1,LSL#8
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#8
CMP.W           R3, R1,LSL#7
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#7
CMP.W           R3, R1,LSL#6
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#6
CMP.W           R3, R1,LSL#5
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#5
CMP.W           R3, R1,LSL#4
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#4
CMP.W           R3, R1,LSL#3
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#3
CMP.W           R3, R1,LSL#2
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#2
CMP.W           R3, R1,LSL#1
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#1
CMP.W           R3, R1
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1
CMP.W           R12, #0
IT MI
NEGMI           R0, R0
BX              LR

loc_1616A
TEQ.W           R12, R0
IT MI
NEGMI           R0, R0
BX              LR

loc_16174
IT CC
MOVCC           R0, #0
ITT EQ
MOVEQ.W         R0, R12,ASR#31
ORREQ.W         R0, R0, #1
BX              LR

loc_16184
CLZ.W           R2, R1
RSB.W           R2, R2, #0x1F
CMP.W           R12, #0
LSR.W           R0, R3, R2
IT MI
NEGMI           R0, R0
BX              LR
; End of function sub_15F1E

; START OF FUNCTION CHUNK FOR sub_15F18
;   ADDITIONAL PARENT FUNCTION sub_161AC

loc_1619A
CMP             R0, #0
IT GT
MOVGT           R0, #0x7FFFFFFF
IT LT
MOVLT.W         R0, #0x80000000
B.W             loc_62C74
; END OF FUNCTION CHUNK FOR sub_15F18



; int __fastcall sub_161AC(int, unsigned int)
sub_161AC

; FUNCTION CHUNK AT 0001619A SIZE 00000012 BYTES

CMP             R1, #0
BEQ             loc_1619A
PUSH.W          {R0,R1,LR}
BL              sub_15F1E
POP.W           {R1,R2,LR}
MUL             R3, R2, R0
SUB.W           R1, R1, R3
BX              LR
; End of function sub_161AC

ALIGN 4



; unsigned int __fastcall sub_161C8(double)
sub_161C8
VLDR            D7, =2.32830644e-10
VMOV            D6, R0, R1
VLDR            D5, =4.2949673e9
VMUL.F64        D7, D6, D7
VCVT.U32.F64    S14, D7
VCVT.F64.U32    D4, S14
VMOV            R1, S14
VMLS.F64        D6, D4, D5
VCVT.U32.F64    S15, D6
VMOV            R0, S15
BX              LR
; End of function sub_161C8

ALIGN 8
dbl_161F8 DCFD 2.32830644e-10
dbl_16200 DCFD 4.2949673e9


; Attributes: noreturn

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT start
start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(nullsub_3+1)
PUSH.W          {R12}   ; fini
LDR             R0, =main ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function start

off_1622C DCD nullsub_3+1
off_16230 DCD main
off_16234 DCD init+1
CODE32



; int sub_16238()
sub_16238
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x16248)
LDR             R2, =(__gmon_start___ptr_0 - 0x7D000)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function sub_16238

off_16254 DCD _GLOBAL_OFFSET_TABLE_ - 0x16248
off_16258 DCD __gmon_start___ptr_0 - 0x7D000
CODE16



; void *sub_1625C()
sub_1625C
MOVW            R0, #:lower16:unk_7D5FC
MOVW            R3, #:lower16:unk_7D5FC
MOVT            R0, #:upper16:unk_7D5FC
MOVT            R3, #:upper16:unk_7D5FC
CMP             R3, R0
BEQ             locret_1627C
MOV             R3, #0
CBZ             R3, locret_1627C
BX              R3

locret_1627C
BX              LR
; End of function sub_1625C

ALIGN 0x10



; __int64 sub_16280()
sub_16280
MOVW            R0, #:lower16:unk_7D5FC
MOVW            R1, #:lower16:unk_7D5FC
MOVT            R0, #:upper16:unk_7D5FC
MOVT            R1, #:upper16:unk_7D5FC
SUBS            R1, R1, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_162A8
MOV             R3, #0
CBZ             R3, locret_162A8
BX              R3

locret_162A8
BX              LR
; End of function sub_16280

ALIGN 4



; void *sub_162AC()
sub_162AC
PUSH            {R4,LR}
MOV             R4, #byte_7D774
LDRB            R3, [R4]
CBNZ            R3, locret_162C2
BL              sub_1625C
MOVS            R3, #1
STRB            R3, [R4]

locret_162C2
POP             {R4,PC}
; End of function sub_162AC



; Attributes: thunk

sub_162C4
B               sub_16280
; End of function sub_162C4

ALIGN 4
CODE32



; int __fastcall sub_162C8(_DWORD *)
sub_162C8
MOV             R3, R0

loc_162CC
LDR             R2, [R3]
ADD             R1, R3, #4
CMP             R2, #0
BNE             loc_162E8
SUB             R0, R3, R0
MOV             R0, R0,ASR#2
BX              LR

loc_162E8
MOV             R3, R1
B               loc_162CC
; End of function sub_162C8



; Attributes: noreturn

; void __noreturn sub_162F0()
sub_162F0
PUSH            {R4,LR}
BL              sub_16E08

loc_162F8
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R1, =s2 ; "sh"
BL              strcmp
CMP             R0, #0
BGE             loc_16368
LDR             R1, =aMkdir_0 ; "mkdir"
MOV             R0, R4  ; s1
BL              strcmp
CMP             R0, #0
BGE             loc_16378
LDR             R1, =aFalse ; "false"
MOV             R0, R4  ; s1
BL              strcmp
LDR             R3, =unk_644B8
CMP             R0, #0
MOVLT           R2, #0x7B ; '{'
MOVGE           R2, #0xF6
MOVLT           R0, #0
MOVGE           R0, #0x7B ; '{'
ADD             R1, R3, #0xB0
MOVGE           R3, R1

loc_16350
MOV             R2, R2,LSR#2
MOV             R0, R0,LSR#2

loc_16358
CMP             R0, R2
BCS             loc_163BC
SUB             LR, R4, #1
B               loc_16390

loc_16368
MOV             R2, #0x1EC
MOVW            R0, #0x171
LDR             R3, =s2 ; "sh"
B               loc_16350

loc_16378
MOVW            R2, #0x171
MOV             R0, #0xF6
LDR             R3, =aMkdir_0 ; "mkdir"
B               loc_16350

loc_16388
CMP             R5, #0
POPEQ           {R4-R6,PC}

loc_16390
LDRB            R12, [R3],#1
LDRB            R5, [LR,#1]!
CMP             R5, R12
BEQ             loc_16388
MOV             R1, R3

loc_163A4
CMP             R12, #0
MOV             R3, R1
ADDEQ           R0, R0, #1
BEQ             loc_16358
LDRB            R12, [R1],#1
B               loc_163A4

loc_163BC
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_162F0

off_163C4 DCD s2        ; "sh"
off_163C8 DCD aMkdir_0  ; "mkdir"
off_163CC DCD aFalse    ; "false"
off_163D0 DCD unk_644B8



; int *__fastcall sub_163D4(int)
sub_163D4
PUSH            {R4,LR}
MOV             R4, R0
BL              __errno_location
LDR             R3, =dword_7DB94
STR             R0, [R3]
LDR             R3, =dword_7DB90
STR             R4, [R3]
POP             {R4,PC}
; End of function sub_163D4

off_163F4 DCD dword_7DB94
off_163F8 DCD dword_7DB90


; Attributes: noreturn

; void __fastcall __noreturn sub_163FC(int, int, int)
sub_163FC
MOV             R5, R0
PUSH            {R7,LR}
MOV             R0, R2
MOV             R6, R1
MOV             R4, R2
BL              sub_162C8
LDR             R3, =dword_7DB90
MOV             R7, R0
STR             R6, [R3]
BIC             R3, R5, #4
CMP             R3, #0x69 ; 'i'
CMPNE           R5, #0x1E
LDR             R6, =byte_7D5F8
MOVNE           R3, #1
MOVEQ           R3, #0
CMP             R0, #2
MOVNE           R3, #0
ANDEQ           R3, R3, #1
CMP             R3, #0
BEQ             loc_16468
LDR             R1, =aHelp ; "--help"
LDR             R0, [R4,#4] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_16468

loc_16460
STRB            R0, [R6]
BL              sub_16E08

loc_16468
LDR             R3, =off_630C8
MOV             R1, R4
MOV             R0, R7
LDR             R3, [R3,R5,LSL#2]
BLX             R3
B               loc_16460
; End of function sub_163FC

off_16480 DCD dword_7DB90
off_16484 DCD byte_7D5F8
off_16488 DCD aHelp     ; "--help"
off_1648C DCD off_630C8


; Attributes: noreturn

; void __fastcall __noreturn sub_16490(unsigned __int8 *, const char **)
sub_16490
PUSH            {R4,R7,R11,LR}
MOV             R4, R1
LDR             R1, =aBusybox ; "busybox"
MOV             R5, R0
BL              sub_1684C
CMP             R0, #0
BEQ             loc_1675C
LDR             R0, [R4,#4]
CMP             R0, #0
BNE             loc_16578

loc_164B8
MOV             R0, #2
LDR             R4, =unk_644B8
BL              sub_17280
LDR             R8, =asc_65659 ; "\t"
MOV             R1, #2  ; fd2
MOV             R7, R0
LDR             R9, =(aSPingStatistic+0x49) ; ", "
MOV             R0, #1  ; fd
LDR             R10, =asc_649D9 ; ",\n"
BL              dup2
LDR             R0, =aBusyboxV129320 ; "BusyBox v1.29.3 (2025-04-16 10:16:12 CS"...
SUB             R7, R7, #1
BL              sub_1712C
MOV             R5, #0
LDR             R0, =aMultiCallBinar ; " multi-call binary.\n"
BL              sub_1712C
LDR             R0, =aBusyboxIsCopyr ; "BusyBox is copyrighted by many authors "...
BL              sub_1712C

loc_16500
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_1651C
LDR             R0, =(aShellReturnedI+0x13) ; "\n"
BL              sub_1712C

loc_16514               ; status
MOV             R0, #0

loc_16518
BL              exit

loc_1651C               ; s
MOV             R0, R4
BL              strlen
ADD             R11, R0, #2
MOV             R6, R0
SUB             R3, R7, R11
CMP             R3, R5
BGT             loc_16564
MOV             R0, R10
BL              sub_1712C

loc_16540
MOV             R5, #6
MOV             R0, R8
BL              sub_1712C

loc_1654C
MOV             R0, R4
ADD             R6, R6, #1
BL              sub_1712C
ADD             R5, R5, R11
ADD             R4, R4, R6
B               loc_16500

loc_16564
CMP             R5, #0
BEQ             loc_16540
MOV             R0, R9
BL              sub_1712C
B               loc_1654C

loc_16578
LDR             R1, =aList ; "--list"
BL              sub_1684C
CMP             R0, #0
BEQ             loc_16604
LDR             R5, =unk_644B8
MOV             R6, #0
LDR             R7, =byte_6447A
MOV             R1, #2  ; fd2
LDR             R8, =off_632B4 ; "/"
MOV             R0, #1  ; fd
LDR             R9, =(aShellReturnedI+0x13) ; "\n"
BL              dup2

loc_165A8
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_16514
LDR             R3, [R4,#4]
LDRB            R3, [R3,#6]
CMP             R3, #0
BEQ             loc_165E0
LDRB            R3, [R7,R6,LSR#1]
TST             R6, #1
ANDEQ           R3, R3, #0xF
MOVNE           R3, R3,LSR#4
LDR             R0, [R8,R3,LSL#2]
ADD             R0, R0, #1
BL              sub_1712C

loc_165E0
MOV             R0, R5
ADD             R6, R6, #1
BL              sub_1712C
MOV             R0, R9
BL              sub_1712C

loc_165F4
LDRB            R3, [R5],#1
CMP             R3, #0
BNE             loc_165F4
B               loc_165A8

loc_16604
LDR             R5, [R4,#4]
LDR             R1, =aInstall ; "--install"
MOV             R0, R5  ; s1
BL              strcmp
SUBS            R7, R0, #0
BNE             loc_16714
LDR             R0, =aProcSelfExe ; "/proc/self/exe"
BL              sub_17B80
SUBS            R5, R0, #0
BNE             loc_16648
LDR             R5, [R4]
LDRB            R3, [R5]
CMP             R3, #0x2F ; '/'
BEQ             loc_16648
MOV             R1, R5
LDR             R0, =aSIsNotAnAbsolu ; "'%s' is not an absolute path"
BL              sub_16DBC

loc_16648               ; s1
LDR             R0, [R4,#8]
CMP             R0, #0
BEQ             loc_16670
LDR             R1, =aS ; "-s"
BL              strcmp
CMP             R0, #0
BNE             loc_16670
ADDS            R4, R4, #4
MOVNE           R7, #1
MOVEQ           R7, #0

loc_16670
LDR             R3, =link
CMP             R7, #0
LDR             R10, =off_632B4 ; "/"
LDR             R7, =unk_644B8
LDR             R11, =dword_7DB94
LDR             R8, [R4,#8]
MOV             R4, #0
LDR             R6, =symlink
MOVEQ           R6, R3

loc_16694
CMP             R8, #0
MOVNE           R0, R8
BNE             loc_166B8
LDR             R3, =byte_6447A
TST             R4, #1
LDRB            R3, [R3,R4,LSR#1]
ANDEQ           R3, R3, #0xF
MOVNE           R3, R3,LSR#4
LDR             R0, [R10,R3,LSL#2]

loc_166B8
MOV             R1, R7
BL              sub_16998
MOV             R1, R0  ; to
MOV             R9, R0
MOV             R0, R5  ; from
BLX             R6 ; link symlink
CMP             R0, #0
BEQ             loc_166F0
LDR             R2, [R11]
LDR             R2, [R2]
CMP             R2, #0x11
BEQ             loc_166F0
MOV             R0, R9
BL              sub_16B80

loc_166F0               ; ptr
MOV             R0, R9
BL              free

loc_166F8
LDRB            R3, [R7],#1
CMP             R3, #0
BNE             loc_166F8
ADD             R4, R4, #1
CMP             R4, #0x7B ; '{'
BNE             loc_16694
B               loc_16514

loc_16714
LDR             R1, =aHelp ; "--help"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_16754
LDR             R3, [R4,#8]
CMP             R3, #0
STRNE           R3, [R4]
STRNE           R0, [R4,#8]
BEQ             loc_164B8

loc_1673C
LDR             R0, [R4]
BL              sub_16A1C
LDR             R3, =dword_7DB90
MOV             R1, R4
STR             R0, [R3]
BL              sub_16490

loc_16754
ADD             R4, R4, #4
B               loc_1673C

loc_1675C
MOV             R0, R5
BL              loc_162F8
; End of function sub_16490

CMP             R0, #0
BLT             loc_16778
MOV             R2, R4
MOV             R1, R5
BL              sub_163FC

loc_16778
LDR             R3, =dword_7DB90
LDR             R0, [R3]
BL              sub_1712C
LDR             R0, =aAppletNotFound ; ": applet not found\n"
BL              sub_1712C
MOV             R0, #0x7F
B               loc_16518
off_16794 DCD aBusybox  ; "busybox"
off_16798 DCD unk_644B8
off_1679C DCD asc_65659 ; "\t"
off_167A0 DCD aSPingStatistic+0x49 ; ", "
off_167A4 DCD asc_649D9 ; ",\n"
off_167A8 DCD aBusyboxV129320 ; "BusyBox v1.29.3 (2025-04-16 10:16:12 CS"...
off_167AC DCD aMultiCallBinar ; " multi-call binary.\n"
off_167B0 DCD aBusyboxIsCopyr ; "BusyBox is copyrighted by many authors "...
off_167B4 DCD aShellReturnedI+0x13 ; "\n"
off_167B8 DCD aList     ; "--list"
off_167BC DCD byte_6447A
off_167C0 DCD off_632B4 ; "/"
off_167C4 DCD aInstall  ; "--install"
off_167C8 DCD aProcSelfExe ; "/proc/self/exe"
off_167CC DCD aSIsNotAnAbsolu ; "'%s' is not an absolute path"
off_167D0 DCD aS        ; "-s"
off_167D4 DCD link
off_167D8 DCD dword_7DB94
off_167DC DCD symlink
off_167E0 DCD aHelp     ; "--help"
off_167E4 DCD dword_7DB90
off_167E8 DCD aAppletNotFound ; ": applet not found\n"


; Attributes: noreturn

; int main(int, char **, char **)
main
PUSH            {R4,LR}
MOV             R5, R1
MOV             R0, #0xFFFFFFFF ; param
MOV             R1, #0x2000 ; val
BL              mallopt
MOV             R1, #0x7F00 ; val
MOV             R0, #0xFFFFFFFD ; param
BL              mallopt
LDR             R0, =aBusybox ; "busybox"
BL              sub_163D4
LDR             R4, =dword_7DB90
LDR             R3, [R5]
STR             R3, [R4]
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
ADDEQ           R3, R3, #1
STREQ           R3, [R4]
LDR             R0, [R4]
BL              sub_169FC
MOV             R1, R5
STR             R0, [R4]
BL              sub_16490
; End of function main

off_16844 DCD aBusybox  ; "busybox"
off_16848 DCD dword_7DB90



; unsigned __int8 *__fastcall sub_1684C(unsigned __int8 *, int)
sub_1684C
SUB             R1, R1, #1

loc_16850
LDRB            R2, [R1,#1]!
MOV             R3, R0
CMP             R2, #0
BNE             loc_16868

loc_16860
MOV             R0, R3
BX              LR

loc_16868
ADD             R0, R3, #1
LDRB            R3, [R3]
CMP             R3, R2
BEQ             loc_16850
MOV             R3, #0
B               loc_16860
; End of function sub_1684C




; int __fastcall sub_16880(char *s1, char *s2)
sub_16880
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R6, R1
MOV             R5, #0

loc_16890
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_168A8
MOV             R5, #0xFFFFFFFF

loc_168A0
MOV             R0, R5
POP             {R4-R6,PC}

loc_168A8               ; s2
MOV             R1, R6
MOV             R0, R4  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_168A0
MOV             R0, R4  ; s
ADD             R5, R5, #1
BL              strlen
ADD             R0, R0, #1
ADD             R4, R4, R0
B               loc_16890
; End of function sub_16880




; int __fastcall sub_168D4(const char *, char *s)
sub_168D4
PUSH            {R4-R8,LR}
MOV             R5, R0
MOV             R0, R1  ; s
MOV             R8, R1
BL              strlen
SUBS            R7, R0, #0
BNE             loc_16950

loc_168F0
MOV             R4, #0xFFFFFFFF
B               loc_16948

loc_168F8               ; n
MOV             R2, R7
MOV             R1, R8  ; s2
MOV             R0, R5  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_16928
LDRB            R3, [R5,R7]
CMP             R3, #0
BEQ             loc_1695C
CMN             R4, #1
BNE             loc_168F0
MOV             R4, R6

loc_16928               ; s
MOV             R0, R5
ADD             R6, R6, #1
BL              strlen
ADD             R0, R0, #1
ADD             R5, R5, R0

loc_1693C
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_168F8

loc_16948
MOV             R0, R4
POP             {R4-R8,PC}

loc_16950
MOV             R6, #0
MOV             R4, #0xFFFFFFFF
B               loc_1693C

loc_1695C
MOV             R4, R6
B               loc_16948
; End of function sub_168D4




; char *__fastcall sub_16964(char *s, int)
sub_16964
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R0

loc_16970
CMP             R5, #0
BNE             loc_16980
MOV             R0, R4
POP             {R4-R6,PC}

loc_16980               ; s
MOV             R0, R4
SUB             R5, R5, #1
BL              strlen
ADD             R0, R0, #1
ADD             R4, R4, R0
B               loc_16970
; End of function sub_16964




; char *__fastcall sub_16998(const char *, _BYTE *)
sub_16998
PUSH            {R4-R6,LR}
CMP             R0, #0
LDR             R5, =(asc_6B39D+1) ; ""
MOVNE           R5, R0
MOV             R4, R1
MOV             R1, #0x2F ; '/'
MOV             R0, R5
BL              sub_16AA8
MOV             R1, R4

loc_169BC
MOV             R3, R1
ADD             R1, R1, #1
LDRB            R2, [R3]
CMP             R2, #0x2F ; '/'
BEQ             loc_169BC
LDR             R1, =(asc_6B39D+1) ; ""
CMP             R0, #0
LDR             R2, =(asc_69510+3) ; "/"
LDR             R0, =aSSS ; "%s%s%s"
MOVNE           R2, R1
MOV             R1, R5
POP             {R4-R6,LR}
B               sub_177E4
; End of function sub_16998

off_169F0 DCD asc_6B39D+1 ; ""
off_169F4 DCD asc_69510+3 ; "/"
off_169F8 DCD aSSS      ; "%s%s%s"



; char *__fastcall sub_169FC(const char *)
sub_169FC
PUSH            {R4,LR}
MOV             R1, #0x2F ; '/' ; c
MOV             R4, R0
BL              strrchr
CMP             R0, #0
ADDNE           R4, R0, #1
MOV             R0, R4
POP             {R4,PC}
; End of function sub_169FC




; char *__fastcall sub_16A1C(const char *)
sub_16A1C
PUSH            {R4,LR}
MOV             R1, #0x2F ; '/' ; c
MOV             R4, R0
BL              strrchr
CMP             R0, #0
BEQ             loc_16A4C
CMP             R4, R0
BNE             loc_16A48
LDRB            R3, [R4,#1]
CMP             R3, #0
BEQ             loc_16A4C

loc_16A48
ADD             R4, R0, #1

loc_16A4C
MOV             R0, R4
POP             {R4,PC}
; End of function sub_16A1C




; char *__fastcall sub_16A54(const char *)
sub_16A54
PUSH            {R4,LR}
MOV             R1, #0x2F ; '/'
MOV             R4, R0
BL              sub_16AA8
CMP             R0, #0
ADDNE           R0, R0, #1
MOVNE           R2, #0
BNE             loc_16A84

loc_16A74
MOV             R0, R4
POP             {R4,LR}
B               sub_16A1C

loc_16A80
STRB            R2, [R0]

loc_16A84
LDRB            R1, [R0,#-1]!
SUB             R3, R1, #0x2F ; '/'
CMP             R4, R0
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVEQ           R3, #0
CMP             R3, #0
BNE             loc_16A80
B               loc_16A74
; End of function sub_16A54




; const char *__fastcall sub_16AA8(const char *, int)
sub_16AA8
SUBS            R2, R0, #0
BEQ             loc_16AE4
LDRB            R3, [R2]
CMP             R3, #0
BEQ             loc_16AEC
PUSH            {R4-R6,LR}
MOV             R4, R2
MOV             R5, R1
BL              strlen
SUB             R0, R0, #1
LDRB            R1, [R4,R0]
CMP             R1, R5
ADDEQ           R0, R4, R0
MOVNE           R0, #0
POP             {R4-R6,PC}

loc_16AE4
MOV             R0, R2
BX              LR

loc_16AEC
MOV             R0, R3
BX              LR
; End of function sub_16AA8




; void sub_16AF4(const char *, ...)
sub_16AF4

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {R0-R2,LR}
ADD             R3, SP, #0xC+varg_r1
STR             R3, [SP,#0xC+var_8]
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R0, [R3] ; errnum
CMP             R0, #0
BEQ             loc_16B1C
BL              strerror

loc_16B1C
MOV             R2, R0
LDR             R1, [SP,#0xC+var_8]
LDR             R0, [SP,#0xC+varg_r0]
BL              sub_16BA4
ADD             SP, SP, #0xC
POP             {LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_16AF4

off_16B3C DCD dword_7DB94


; Attributes: noreturn

; void __noreturn sub_16B40(const char *, ...)
sub_16B40

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {R0-R2,LR}
ADD             R3, SP, #0xC+varg_r1
STR             R3, [SP,#0xC+var_8]
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R0, [R3] ; errnum
CMP             R0, #0
BEQ             loc_16B68
BL              strerror

loc_16B68
MOV             R2, R0
LDR             R1, [SP,#0xC+var_8]
LDR             R0, [SP,#0xC+varg_r0]
BL              sub_16BA4
BL              sub_16E08
; End of function sub_16B40

off_16B7C DCD dword_7DB94



; void __fastcall sub_16B80(const char *)
sub_16B80
MOV             R1, R0
LDR             R0, =(aSS_8+3) ; "%s"
B               sub_16AF4
; End of function sub_16B80

off_16B8C DCD aSS_8+3   ; "%s"


; Attributes: noreturn

; void __fastcall __noreturn sub_16B90(const char *)
sub_16B90
MOV             R1, R0
PUSH            {R4,LR}
LDR             R0, =(aSS_8+3) ; "%s"
BL              sub_16B40
; End of function sub_16B90

off_16BA0 DCD aSS_8+3   ; "%s"



; void __fastcall sub_16BA4(const char *, char *, const char *)
sub_16BA4

var_68= -0x68
var_64= -0x64
var_60= -0x60
dest= -0x5C
var_58= -0x58
var_54= -0x54

LDR             R3, =dword_7D4BC
PUSH            {R4-R11,LR}
MOV             R6, R2
SUB             SP, SP, #0x6C
LDR             R2, [R3]
STR             R3, [SP,#0x6C+var_64]
CMP             R2, #0
BEQ             loc_16D08
LDR             R7, =dword_7DB90
CMP             R0, #0
LDR             R3, =(asc_6B39D+1) ; ""
MOV             R4, R0
MOV             R10, R1
LDR             R0, [R7] ; s
MOVEQ           R4, R3
BL              strlen
CMP             R6, #0
ADD             R5, R0, #2
STR             R7, [SP,#0x6C+var_60]
MOV             R9, R0
STR             R5, [SP,#0x6C+var_68]
MOVEQ           R7, R6
BEQ             loc_16C0C
MOV             R0, R6  ; s
BL              strlen
MOV             R7, R0

loc_16C0C
LDR             R3, =off_7D4C0 ; "\n"
LDR             R0, [R3] ; "\n" ; s
BL              strlen
RSB             R1, R5, #0x50 ; 'P' ; maxlen
MOV             R8, R0
CMP             R1, #0
BLE             loc_16C58
ADD             R11, SP, #0x6C+var_54
MOV             R3, R10 ; arg
ADD             R0, R11, R5 ; s
MOV             R2, R4  ; format
STR             R10, [SP,#0x6C+var_58]
BL              vsnprintf
RSB             R3, R8, #0x4D ; 'M'
STR             R11, [SP,#0x6C+dest]
SUB             R3, R3, R7
ADD             R11, R5, R0
CMP             R3, R11
BGT             loc_16D20

loc_16C58               ; va_list
MOV             R2, R10
MOV             R1, R4  ; char *
ADD             R0, SP, #0x6C+dest ; char **
BL              vasprintf
SUBS            R10, R0, #0
BLT             loc_16D08
ADD             R11, R5, R10
LDR             R0, [SP,#0x6C+dest] ; ptr
ADD             R1, R11, R7
ADD             R1, R1, R8
ADD             R1, R1, #3 ; size
BL              realloc
SUBS            R1, R0, #0 ; src
BNE             loc_16D10
LDR             R3, [SP,#0x6C+dest]
ADD             R8, R10, #1
MOV             R2, #0xA
STR             R1, [SP,#0x6C+var_68]
STRB            R2, [R3,R10]

loc_16CA4
LDR             R3, [SP,#0x6C+var_64]
LDR             R3, [R3]
TST             R3, #1
BEQ             loc_16CC8
BL              sub_177D8
MOV             R2, R8  ; n
LDR             R1, [SP,#0x6C+dest] ; buf
MOV             R0, #2  ; fd
BL              sub_17FB8

loc_16CC8
LDR             R3, [SP,#0x6C+var_64]
LDR             R2, [SP,#0x6C+dest]
LDR             R3, [R3]
TST             R3, #2
BEQ             loc_16CF4
LDR             R3, [SP,#0x6C+var_68]
LDR             R1, =(aSS_8+3) ; "%s"
ADD             R2, R2, R3
LDR             R3, =dword_7D4C4
LDR             R0, [R3] ; pri
BL              syslog

loc_16CF4               ; ptr
LDR             R0, [SP,#0x6C+dest]
ADD             R3, SP, #0x6C+var_54
CMP             R0, R3
BEQ             loc_16D08
BL              free

loc_16D08
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R11,PC}

loc_16D10               ; n
MOV             R2, R10
ADD             R0, R1, R5 ; dest
STR             R1, [SP,#0x6C+dest]
BL              memmove

loc_16D20
LDR             R3, [SP,#0x6C+var_60]
LDR             R0, [SP,#0x6C+dest] ; dest
LDR             R1, [R3] ; src
BL              strcpy
LDR             R3, [SP,#0x6C+dest]
MOV             R1, #0x3A ; ':'
CMP             R6, #0
MOV             R2, #0x20 ; ' '
STRB            R1, [R3,R9]
LDR             R3, [SP,#0x6C+dest]
ADD             R9, R3, R9
STRB            R2, [R9,#1]
BEQ             loc_16D88
LDRB            R3, [R4]
LDR             R0, [SP,#0x6C+dest]
CMP             R3, #0
STRBNE          R1, [R0,R11]
ADDNE           R3, R11, #1
LDRNE           R1, [SP,#0x6C+dest]
ADDNE           R11, R11, #2
STRBNE          R2, [R1,R3]
MOV             R1, R6  ; src
LDR             R0, [SP,#0x6C+dest]
ADD             R0, R0, R11 ; dest
ADD             R11, R11, R7
BL              strcpy

loc_16D88
LDR             R3, =off_7D4C0 ; "\n"
ADD             R8, R11, R8
LDR             R0, [SP,#0x6C+dest]
LDR             R1, [R3] ; "\n" ; src
ADD             R0, R0, R11 ; dest
BL              strcpy
B               loc_16CA4
; End of function sub_16BA4

off_16DA4 DCD dword_7D4BC
off_16DA8 DCD dword_7DB90
off_16DAC DCD asc_6B39D+1 ; ""
off_16DB0 DCD off_7D4C0 ; "\n"
off_16DB4 DCD aSS_8+3   ; "%s"
off_16DB8 DCD dword_7D4C4


; Attributes: noreturn

; void __noreturn sub_16DBC(const char *, ...)
sub_16DBC

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {R0-R2,LR}
MOV             R2, #0
ADD             R1, SP, #0xC+varg_r1
LDR             R0, [SP,#0xC+varg_r0]
STR             R1, [SP,#0xC+var_8]
BL              sub_16BA4
BL              sub_16E08
; End of function sub_16DBC




; void sub_16DDC(const char *, ...)
sub_16DDC

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {R0-R2,LR}
MOV             R2, #0
ADD             R1, SP, #0xC+varg_r1
LDR             R0, [SP,#0xC+varg_r0]
STR             R1, [SP,#0xC+var_8]
BL              sub_16BA4
ADD             SP, SP, #0xC
POP             {LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_16DDC



; Attributes: noreturn

; void __noreturn sub_16E08()
sub_16E08
LDR             R3, =off_7DB9C
PUSH            {R4,LR}
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_16E20
BLX             R3

loc_16E20
LDR             R3, =byte_7D5F8
LDRB            R0, [R3] ; status
BL              exit
; End of function sub_16E08

off_16E2C DCD off_7DB9C
off_16E30 DCD byte_7D5F8



; int __fastcall sub_16E34(int)
sub_16E34
PUSH            {R4-R6,LR}
MOV             R1, #3  ; cmd
MOV             R5, R0
BL              fcntl
TST             R0, #0x800
MOV             R4, R0
BNE             loc_16E60
ORR             R2, R0, #0x800
MOV             R1, #4  ; cmd
MOV             R0, R5  ; fd
BL              fcntl

loc_16E60
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_16E34




; int __fastcall sub_16E68(int)
sub_16E68
PUSH            {R4-R6,LR}
MOV             R1, #3  ; cmd
MOV             R5, R0
BL              fcntl
TST             R0, #0x800
MOV             R4, R0
BEQ             loc_16E94
BIC             R2, R0, #0x800
MOV             R1, #4  ; cmd
MOV             R0, R5  ; fd
BL              fcntl

loc_16E94
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_16E68




; int __fastcall sub_16E9C(int)
sub_16E9C
MOV             R2, #1
MOV             R1, #2  ; cmd
B               fcntl
; End of function sub_16E9C




; char *__fastcall sub_16EA8(char *, const char *)
sub_16EA8
MOV             R2, #0x10 ; n
B               strncpy
; End of function sub_16EA8




; _BYTE *__fastcall sub_16EB0(unsigned int, _BYTE *, int)
sub_16EB0
PUSH            {R4-R10,LR}
SUBS            R9, R2, #0
MOV             R6, R1
BEQ             loc_16F28
LDR             R4, =0x3B9ACA00
MOV             R8, #0xA
LDR             R10, =0xCCCCCCCD
MOV             R7, #0

loc_16ED0
MOV             R1, R4
BLX             sub_15EFC
MOV             R2, R0
MOV             R0, R1
ORRS            R3, R2, R7
MOVNE           R3, #1
MOVEQ           R3, #0
CMP             R4, #1
ORREQ           R3, R3, #1
CMP             R3, #0
MOVEQ           R7, R3
BEQ             loc_16F18
SUBS            R9, R9, #1
BEQ             loc_16F28
ADD             R2, R2, #0x30 ; '0'
ADD             R7, R7, #1
STRB            R2, [R6]
ADD             R6, R6, #1

loc_16F18
UMULL           R4, R5, R4, R10
SUBS            R8, R8, #1
MOV             R4, R5,LSR#3
BNE             loc_16ED0

loc_16F28
MOV             R0, R6
POP             {R4-R10,PC}
; End of function sub_16EB0

dword_16F30 DCD 0x3B9ACA00
dword_16F34 DCD 0xCCCCCCCD



; _BYTE *__fastcall sub_16F38(signed int, _BYTE *, int)
sub_16F38
CMP             R2, #0
BEQ             loc_16F5C
CMP             R0, #0
MOVLT           R3, #0x2D ; '-'
RSBLT           R0, R0, #0
STRBLT          R3, [R1]
SUBLT           R2, R2, #1
ADDLT           R1, R1, #1
B               sub_16EB0

loc_16F5C
MOV             R0, R1
BX              LR
; End of function sub_16F38




; _BYTE *__fastcall sub_16F64(unsigned int)
sub_16F64
PUSH            {R4,LR}
MOV             R2, #0xB
LDR             R4, =byte_7D775
MOV             R1, R4
BL              sub_16EB0
MOV             R3, #0
STRB            R3, [R0]
MOV             R0, R4
POP             {R4,PC}
; End of function sub_16F64

off_16F88 DCD byte_7D775



; _BYTE *__fastcall sub_16F8C(signed int)
sub_16F8C
PUSH            {R4,LR}
MOV             R2, #0xB
LDR             R4, =byte_7D775
MOV             R1, R4
BL              sub_16F38
MOV             R3, #0
STRB            R3, [R0]
MOV             R0, R4
POP             {R4,PC}
; End of function sub_16F8C

off_16FB0 DCD byte_7D775



; int __fastcall sub_16FB4(int, unsigned __int8 *, int)
sub_16FB4
PUSH            {R4,R5,LR}
MOV             R3, R0
LDR             R4, =a0123456789abcd ; "0123456789ABCDEF"
ADD             R5, R1, R2

loc_16FC4
CMP             R1, R5
ADD             R3, R3, #2
BNE             loc_16FD8
ADD             R0, R0, R2,LSL#1
POP             {R4,R5,PC}

loc_16FD8
LDRB            R12, [R1],#1
LDRB            LR, [R4,R12,LSR#4]
AND             R12, R12, #0xF
LDRB            R12, [R4,R12]
ORR             LR, LR, #0x20 ; ' '
ORR             R12, R12, #0x20 ; ' '
STRB            LR, [R3,#-2]
STRB            R12, [R3,#-1]
B               loc_16FC4
; End of function sub_16FB4

off_16FFC DCD a0123456789abcd ; "0123456789ABCDEF"



; _BYTE *__fastcall sub_17000(_BYTE *result, unsigned __int8 *, int)
sub_17000
LDR             R3, =dword_7DB94
ADD             R2, R0, R2
PUSH            {R4-R6,LR}
LDR             LR, [R3]
MOV             R3, #0x16
STR             R3, [LR]

loc_17018
LDRB            R12, [R1]
CMP             R12, #0
BEQ             loc_170D8
CMP             R0, R2
BNE             loc_17038
MOV             R3, #0x22 ; '"'

loc_17030
STR             R3, [LR]
POP             {R4-R6,PC}

loc_17038
SUB             R3, R12, #0x30 ; '0'
ADD             R4, R1, #1
UXTB            R3, R3
CMP             R3, #9
BLS             loc_17064
ORR             R3, R12, #0x20 ; ' '
SUB             R12, R3, #0x61 ; 'a'
CMP             R12, #5
BHI             loc_170E0
SUB             R3, R3, #0x57 ; 'W'
UXTB            R3, R3

loc_17064
LDRB            R12, [R1,#1]
MOV             R3, R3,LSL#4
UXTB            R3, R3
SUB             R5, R12, #0x30 ; '0'
UXTB            R5, R5
CMP             R5, #9
ORRLS           R3, R5, R3
BLS             loc_170B8
ORR             R5, R12, #0x20 ; ' '
SUB             R6, R5, #0x61 ; 'a'
CMP             R6, #5
SUBLS           R5, R5, #0x57 ; 'W'
ORRLS           R3, R5, R3
UXTBLS          R3, R3
BLS             loc_170B8
CMP             R12, #0
CMPNE           R12, #0x3A ; ':'
MOVEQ           R5, #1
MOVNE           R5, #0
BNE             loc_170E0
MOV             R3, R3,LSR#4

loc_170B8
CMP             R12, #0
STRB            R3, [R0],#1
ADDNE           R4, R1, #2
LDRB            R3, [R4]
CMP             R3, #0x3A ; ':'
ADDEQ           R4, R4, #1
MOV             R1, R4
B               loc_17018

loc_170D8
MOV             R3, R12
B               loc_17030

loc_170E0
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_17000

off_170E8 DCD dword_7DB94



; ssize_t __fastcall sub_170EC(char, int, int)
sub_170EC

var_5= -5
var_4= -4

PUSH            {R0-R2,LR}
ADD             R1, SP, #0xC+var_4
STRB            R0, [R1,#-1]! ; buf
MOV             R2, #1  ; n
MOV             R0, #2  ; fd
BL              write
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_170EC




; ssize_t __fastcall sub_1710C(char *)
sub_1710C
PUSH            {R4,LR}
MOV             R4, R0
BL              strlen
MOV             R1, R4  ; buf
MOV             R2, R0  ; n
POP             {R4,LR}
MOV             R0, #1  ; fd
B               sub_17FB8
; End of function sub_1710C




; ssize_t __fastcall sub_1712C(char *)
sub_1712C
PUSH            {R4,LR}
MOV             R4, R0
BL              strlen
MOV             R1, R4  ; buf
MOV             R2, R0  ; n
POP             {R4,LR}
MOV             R0, #2  ; fd
B               sub_17FB8
; End of function sub_1712C




; int __fastcall sub_1714C(int fd, int *, int *)
sub_1714C

var_8= -8
var_6= -6
var_s0=  0

CMN             R0, #1
PUSH            {R0,R1,R4-R8,LR}
MOV             R5, R0
MOV             R7, R1
MOV             R8, R2
MOVNE           R4, R0
MOVNE           R5, #0xFFFFFFFF
BNE             loc_171B4
MOV             R0, #1  ; fd
BL              isatty
CMP             R0, #0
MOVNE           R4, #1
BNE             loc_171B4
MOV             R0, #2  ; fd
BL              isatty
SUBS            R4, R0, #0
MOVNE           R4, #2
BNE             loc_171B4
BL              isatty
CMP             R0, #0
BNE             loc_171B4
MOV             R1, R4
LDR             R0, =aDevTty ; "/dev/tty"
BL              open64
MOV             R4, R0
MOV             R5, R0

loc_171B4
ADD             R2, SP, #8+var_s0
MOV             R3, #0
MOV             R0, R4  ; fd
STR             R3, [R2,#-8]!
MOVW            R1, #0x5413 ; request
BL              ioctl
CMP             R0, #0
LDRHEQ          R4, [SP,#8+var_8]
MOVNE           R4, #1
CLZEQ           R4, R4
MOVEQ           R4, R4,LSR#5
CMP             R8, #0
BEQ             loc_1721C
LDR             R0, =name ; "LINES"
LDRH            R6, [SP,#8+var_8]
BL              getenv
CMP             R0, #0
BEQ             loc_17208
BL              atoi
MOV             R4, #0
MOV             R6, R0

loc_17208
SUB             R2, R6, #2
MOVW            R3, #0x752D
CMP             R2, R3
MOVHI           R6, #0x18
STR             R6, [R8]

loc_1721C
CMP             R7, #0
BEQ             loc_17258
LDR             R0, =aColumns ; "COLUMNS"
LDRH            R6, [SP,#8+var_6]
BL              getenv
CMP             R0, #0
BEQ             loc_17244
BL              atoi
MOV             R4, #0
MOV             R6, R0

loc_17244
SUB             R2, R6, #2
MOVW            R3, #0x752D
CMP             R2, R3
MOVHI           R6, #0x50 ; 'P'
STR             R6, [R7]

loc_17258
CMP             R5, #0
BLT             loc_17268
MOV             R0, R5  ; fd
BL              close

loc_17268
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_1714C

off_17274 DCD aDevTty   ; "/dev/tty"
off_17278 DCD name      ; "LINES"
off_1727C DCD aColumns  ; "COLUMNS"



; int __fastcall sub_17280(int, int, int)
sub_17280

var_8= -8

PUSH            {R0-R2,LR}
MOV             R2, #0
ADD             R1, SP, #0xC+var_8
BL              sub_1714C
LDR             R0, [SP,#0xC+var_8]
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_17280




; int __fastcall sub_1729C(struct termios *termios_p)
sub_1729C
MOV             R1, #0  ; optional_actions
MOV             R2, R0  ; termios_p
MOV             R0, R1  ; fd
B               tcsetattr
; End of function sub_1729C




; int __fastcall sub_172AC(int, int, struct termios *s, char)
sub_172AC
PUSH            {R4-R8,LR}
MOV             R4, R2
MOV             R5, R1
MOV             R7, R0
MOV             R2, #0x3C ; '<' ; n
MOV             R1, #0  ; c
MOV             R0, R4  ; s
MOV             R6, R3
BL              memset
MOV             R1, R4  ; termios_p
MOV             R0, R7  ; fd
BL              tcgetattr
MOV             R12, R4
MOV             R7, R0
LDM             R12!, {R0-R3}
MOV             LR, R5
TST             R6, #1
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3}
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3}
STM             LR!, {R0-R3}
LDR             R3, [R5,#0xC]
LDM             R12, {R0-R2}
STM             LR, {R0-R2}
BIC             R2, R3, #0x4A ; 'J'
BICNE           R3, R3, #0x4B ; 'K'
STR             R2, [R5,#0xC]
MOV             R0, R7
STRNE           R3, [R5,#0xC]
MOV             R3, #0x100
TST             R6, #2
STRH            R3, [R5,#0x16]
LDRNE           R3, [R5]
BICNE           R3, R3, #0x500
STRNE           R3, [R5]
TST             R6, #4
LDRNE           R3, [R5,#4]
BICNE           R3, R3, #4
STRNE           R3, [R5,#4]
TST             R6, #8
LDRNE           R3, [R5]
BICNE           R3, R3, #0x3F40
BICNE           R3, R3, #2
STRNE           R3, [R5]
POP             {R4-R8,PC}
; End of function sub_172AC




; int __fastcall sub_17364(int, struct termios *s, char)
sub_17364

termios_p= -0x3C

PUSH            {R4,LR}
SUB             SP, SP, #0x40
MOV             R3, R2
MOV             R4, R0
MOV             R2, R1  ; s
ADD             R1, SP, #0x40+termios_p ; int
BL              sub_172AC
ADD             R2, SP, #0x40+termios_p ; termios_p
MOV             R1, #0  ; optional_actions
MOV             R0, R4  ; fd
BL              tcsetattr
ADD             SP, SP, #0x40 ; '@'
POP             {R4,PC}
; End of function sub_17364




; __pid_t __fastcall sub_17398(__pid_t pid, int *stat_loc, int options)
sub_17398
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R4, =dword_7DB94
MOV             R6, R1
MOV             R7, R2

loc_173AC               ; options
MOV             R2, R7
MOV             R1, R6  ; stat_loc
MOV             R0, R5  ; pid
BL              waitpid
CMN             R0, #1
POPNE           {R4-R8,PC}
LDR             R3, [R4]
LDR             R3, [R3]
CMP             R3, #4
POPNE           {R4-R8,PC}
B               loc_173AC
; End of function sub_17398

off_173D8 DCD dword_7DB94



; __pid_t __fastcall sub_173DC(int *stat_loc)
sub_173DC
MOV             R1, R0  ; stat_loc
MOV             R2, #1  ; options
MOV             R0, #0xFFFFFFFF ; pid
B               sub_17398
; End of function sub_173DC




; int __fastcall sub_173EC(__pid_t, int, int)
sub_173EC

stat_loc= -8

CMP             R0, #0
PUSH            {R0-R2,LR}
BGT             loc_17404

loc_173F8               ; pid
MOV             R0, #0xFFFFFFFF

loc_173FC
ADD             SP, SP, #0xC
POP             {PC}

loc_17404               ; options
MOV             R2, #0
ADD             R1, SP, #0xC+stat_loc ; stat_loc
BL              sub_17398
CMN             R0, #1
BEQ             loc_173F8
LDR             R3, [SP,#0xC+stat_loc]
ANDS            R0, R3, #0x7F
UBFXEQ          R0, R3, #8, #8
BEQ             loc_173FC
ADD             R3, R0, #1
SBFX            R3, R3, #1, #7
CMP             R3, #0
ADDGT           R0, R0, #0x180
MOVLE           R0, #0
B               loc_173FC
; End of function sub_173EC



; Attributes: noreturn

; void __noreturn sub_17440()
sub_17440
PUSH            {R4,LR}
LDR             R0, =aOutOfMemory ; "out of memory"
BL              sub_16DBC
; End of function sub_17440

off_1744C DCD aOutOfMemory ; "out of memory"



; void *__fastcall sub_17450(size_t)
sub_17450
PUSH            {R4-R6,LR}
MOV             R4, R0
BL              malloc
MOVS            R4, R4
MOV             R5, R0
MOVNE           R4, #1
CMP             R0, #0
MOVNE           R4, #0
CMP             R4, #0
BEQ             loc_17480
LDR             R0, =aOutOfMemory ; "out of memory"
BL              sub_16DDC

loc_17480
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_17450

off_17488 DCD aOutOfMemory ; "out of memory"



; void *__fastcall sub_1748C(size_t)
sub_1748C
PUSH            {R4,LR}
MOV             R4, R0
BL              malloc
MOVS            R4, R4
MOVNE           R4, #1
CMP             R0, #0
MOVNE           R4, #0
CMP             R4, #0
POPEQ           {R4,PC}
BL              sub_17440
; End of function sub_1748C




; void *__fastcall sub_174B4(void *, size_t)
sub_174B4
PUSH            {R4,LR}
MOV             R4, R1
BL              realloc
MOVS            R4, R4
MOVNE           R4, #1
CMP             R0, #0
MOVNE           R4, #0
CMP             R4, #0
POPEQ           {R4,PC}
BL              sub_17440
; End of function sub_174B4




; void *__fastcall sub_174DC(size_t)
sub_174DC
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_1748C
MOV             R2, R4  ; n
MOV             R1, #0  ; c
BL              memset
POP             {R4,PC}
; End of function sub_174DC




; char *__fastcall sub_174F8(const char *)
sub_174F8
SUBS            R3, R0, #0
BEQ             loc_17514
PUSH            {R4,LR}
BL              strdup
CMP             R0, #0
POPNE           {R4,PC}
BL              sub_17440

loc_17514
MOV             R0, R3
BX              LR
; End of function sub_174F8




; void *__fastcall sub_1751C(char *, int)
sub_1751C
PUSH            {R4-R6,LR}
SUB             R3, R0, #1
MOV             R5, R0
MOV             R4, R1

loc_1752C
CMP             R4, #0
BNE             loc_17558

loc_17534
SUB             R4, R1, R4
ADD             R0, R4, #1
BL              sub_1748C
MOV             R2, #0
MOV             R1, R5  ; src
STRB            R2, [R0,R4]
MOV             R2, R4  ; n
POP             {R4-R6,LR}
B               memcpy

loc_17558
LDRB            R2, [R3,#1]!
CMP             R2, #0
BEQ             loc_17534
SUB             R4, R4, #1
B               loc_1752C
; End of function sub_1751C




; void *__fastcall sub_1756C(const void *, size_t)
sub_1756C
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R5, R0
MOV             R0, R1
BL              sub_1748C
MOV             R2, R4  ; n
MOV             R1, R5  ; src
POP             {R4-R6,LR}
B               memcpy
; End of function sub_1756C




; int __fastcall sub_17590(const char *, int)
sub_17590
PUSH            {R4,LR}
MOV             R4, R0
BL              fopen64
CMP             R0, #0
POPNE           {R4,PC}
MOV             R1, R4
LDR             R0, =aCanTOpenS ; "can't open '%s'"
BL              sub_16B40
; End of function sub_17590

off_175B0 DCD aCanTOpenS ; "can't open '%s'"



; int __fastcall sub_175B4(const char *, int)
sub_175B4
PUSH            {R4,LR}
MOV             R4, R0
BL              open64
CMP             R0, #0
POPGE           {R4,PC}
MOV             R1, R4
LDR             R0, =aCanTOpenS ; "can't open '%s'"
BL              sub_16B40
; End of function sub_175B4

off_175D4 DCD aCanTOpenS ; "can't open '%s'"



; int __fastcall sub_175D8(const char *, int)
sub_175D8
MOVW            R2, #0x1B6
B               sub_175B4
; End of function sub_175D8




; int __fastcall sub_175E0(const char *, int)
sub_175E0
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              open64
SUBS            R4, R0, #0
BGE             loc_17600
MOV             R1, R5
LDR             R0, =aCanTOpenS ; "can't open '%s'"
BL              sub_16AF4

loc_17600
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_175E0

off_17608 DCD aCanTOpenS ; "can't open '%s'"



; int __fastcall sub_1760C(const char *, int)
sub_1760C
MOVW            R2, #0x1B6
B               sub_175E0
; End of function sub_1760C




; int __fastcall sub_17614(const char *)
sub_17614
MOV             R1, #0x800
B               sub_175D8
; End of function sub_17614




; int __fastcall sub_1761C(const char *)
sub_1761C
PUSH            {R4,LR}
MOV             R4, R0
BL              unlink
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R1, R4
LDR             R0, =aCanTRemoveFile ; "can't remove file '%s'"
BL              sub_16B40
; End of function sub_1761C

off_1763C DCD aCanTRemoveFile ; "can't remove file '%s'"



; int __fastcall sub_17640(const char *, const char *)
sub_17640
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
BL              rename
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R2, R5
MOV             R1, R4
LDR             R0, =aCanTMoveSToS ; "can't move '%s' to '%s'"
BL              sub_16B40
; End of function sub_17640

off_17668 DCD aCanTMoveSToS ; "can't move '%s' to '%s'"



; int __fastcall sub_1766C(int *)
sub_1766C
PUSH            {R4,LR}
BL              pipe
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R0, =aCanTCreatePipe ; "can't create pipe"
BL              sub_16B40
; End of function sub_1766C

off_17684 DCD aCanTCreatePipe ; "can't create pipe"



; int __fastcall sub_17688(int, int)
sub_17688
PUSH            {R4,LR}
MOV             R4, R1
BL              dup2
CMP             R0, R4
POPEQ           {R4,PC}
LDR             R0, =aCanTDuplicateF ; "can't duplicate file descriptor"
BL              sub_16B40
; End of function sub_17688

off_176A4 DCD aCanTDuplicateF ; "can't duplicate file descriptor"



; int __fastcall sub_176A8(int result, int)
sub_176A8
CMP             R0, R1
BXEQ            LR
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_17688
MOV             R0, R4  ; fd
POP             {R4,LR}
B               close
; End of function sub_176A8




; ssize_t __fastcall sub_176C8(ssize_t result, char *, size_t)
sub_176C8
PUSH            {R4,LR}
SUBS            R4, R2, #0
POPEQ           {R4,PC}
BL              sub_17FB8
CMP             R0, R4
POPEQ           {R4,PC}
LDR             R2, =aShortWrite ; "short write"
CMP             R0, #0
LDR             R3, =aWriteError ; "write error"
MOVGE           R0, R2
MOVLT           R0, R3
BL              sub_16B40
; End of function sub_176C8

off_176F8 DCD aShortWrite ; "short write"
off_176FC DCD aWriteError ; "write error"



; int __fastcall sub_17700(int)
sub_17700
PUSH            {R4,LR}
BL              close
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R0, =aCloseFailed ; "close failed"
BL              sub_16B40
; End of function sub_17700

off_17718 DCD aCloseFailed ; "close failed"



; int __fastcall sub_1771C(int, int, __int64, int)
sub_1771C

var_8= -8
arg_0=  0x10

PUSH            {R0,R1,R4,R6,R7,LR}
MOV             R6, R2
LDR             R4, [SP,#8+arg_0]
MOV             R7, R3
STR             R4, [SP,#8+var_8]
BL              lseek64
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_17768
CMP             R4, #0
BNE             loc_17760
MOV             R2, R6
MOV             R3, R7
LDR             R0, =aLseekLlu ; "lseek(%llu)"
BL              sub_16B40

loc_17760
LDR             R0, =aLseek ; "lseek"
BL              sub_16B40

loc_17768
ADD             SP, SP, #8
POP             {R4,R6,R7,PC}
; End of function sub_1771C

off_17770 DCD aLseekLlu ; "lseek(%llu)"
off_17774 DCD aLseek    ; "lseek"



; int __fastcall sub_17778(const char *)
sub_17778
PUSH            {R4,LR}
MOV             R4, R0
BL              mkstemp64
CMP             R0, #0
POPGE           {R4,PC}
MOV             R1, R4
LDR             R0, =aCanTCreateTemp ; "can't create temp file '%s'"
BL              sub_16B40
; End of function sub_17778

off_17798 DCD aCanTCreateTemp ; "can't create temp file '%s'"



; int __fastcall sub_1779C(FILE *, const char *)
sub_1779C
PUSH            {R4,LR}
MOV             R4, R1
BL              ferror_unlocked
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R1, R4
LDR             R0, =aSIOError ; "%s: I/O error"
BL              sub_16DBC
; End of function sub_1779C

off_177BC DCD aSIOError ; "%s: I/O error"



; int sub_177C0()
sub_177C0
LDR             R3, =stdout
LDR             R1, =aStandardOutput ; "standard output"
LDR             R0, [R3]
B               sub_1779C
; End of function sub_177C0

off_177D0 DCD stdout
off_177D4 DCD aStandardOutput ; "standard output"



; int sub_177D8()
sub_177D8
MOV             R0, #0  ; stream
B               fflush
; End of function sub_177D8

; [00000004 BYTES: COLLAPSED FUNCTION j_putchar_unlocked]



; char *sub_177E4(const char *, ...)
sub_177E4

var_C= -0xC
var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {R0-R2,LR}
ADD             R2, SP, #0xC+varg_r1 ; va_list
ADD             R0, SP, #0xC+var_8 ; char **
LDR             R1, [SP,#0xC+varg_r0] ; char *
STR             R2, [SP,#0xC+var_C]
BL              vasprintf
CMP             R0, #0
BGE             loc_1780C
BL              sub_17440

loc_1780C
LDR             R0, [SP,#0xC+var_8]
ADD             SP, SP, #0xC
POP             {LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_177E4




; int __fastcall sub_17820(const char *, const char *)
sub_17820
PUSH            {R4,LR}
MOV             R2, #1  ; replace
BL              setenv
CMP             R0, #0
POPEQ           {R4,PC}
BL              sub_17440
; End of function sub_17820




; void __fastcall sub_17838(const char *)
sub_17838
PUSH            {R4-R6,LR}
MOV             R1, #0x3D ; '=' ; c
SUB             SP, SP, #0x70
MOV             R5, R0
BL              strchr
SUBS            R4, R0, #0
BEQ             loc_1787C
SUB             R6, R4, R5
CMP             R6, #0x6F ; 'o'
BHI             loc_17894
MOV             R1, R5  ; src
MOV             R5, SP
MOV             R2, R6  ; n
MOV             R0, SP  ; dest
MOV             R4, #0
BL              memcpy
STRB            R4, [R0,R6]

loc_1787C               ; name
MOV             R0, R5
BL              unsetenv
MOV             R0, R4  ; ptr
ADD             SP, SP, #0x70 ; 'p'
POP             {R4-R6,LR}
B               free

loc_17894
MOV             R0, R5
MOV             R1, R6
BL              sub_1751C
MOV             R5, R0
MOV             R4, R0
B               loc_1787C
; End of function sub_17838




; void __fastcall sub_178AC(char *)
sub_178AC
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_17838
MOV             R0, R4  ; ptr
POP             {R4,LR}
B               free
; End of function sub_178AC




; int __fastcall sub_178C4(__gid_t)
sub_178C4
PUSH            {R4,LR}
BL              setgid
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R0, =aSetgid_0 ; "setgid"
BL              sub_16B40
; End of function sub_178C4

off_178DC DCD aSetgid_0 ; "setgid"



; int __fastcall sub_178E0(__uid_t)
sub_178E0
PUSH            {R4,LR}
BL              setuid
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R0, =aSetuid_0 ; "setuid"
BL              sub_16B40
; End of function sub_178E0

off_178F8 DCD aSetuid_0 ; "setuid"



; int __fastcall sub_178FC(const char *)
sub_178FC
PUSH            {R4,LR}
MOV             R4, R0
BL              chdir
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R1, R4
LDR             R0, =aCanTChangeDire ; "can't change directory to '%s'"
BL              sub_16B40
; End of function sub_178FC

off_1791C DCD aCanTChangeDire ; "can't change directory to '%s'"



; int __fastcall sub_17920(const char *)
sub_17920
PUSH            {R4,LR}
MOV             R4, R0
BL              chroot
CMP             R0, #0
BEQ             loc_17940
MOV             R1, R4
LDR             R0, =aCanTChangeRoot ; "can't change root directory to '%s'"
BL              sub_16B40

loc_17940
LDR             R0, =(asc_69510+3) ; "/"
POP             {R4,LR}
B               sub_178FC
; End of function sub_17920

off_1794C DCD aCanTChangeRoot ; "can't change root directory to '%s'"
off_17950 DCD asc_69510+3 ; "/"



; DIR *__fastcall sub_17954(const char *)
sub_17954
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              opendir
SUBS            R4, R0, #0
BNE             loc_17974
MOV             R1, R5
LDR             R0, =aCanTOpenS ; "can't open '%s'"
BL              sub_16AF4

loc_17974
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_17954

off_1797C DCD aCanTOpenS ; "can't open '%s'"



; DIR *__fastcall sub_17980(const char *)
sub_17980
PUSH            {R4,LR}
MOV             R4, R0
BL              opendir
CMP             R0, #0
POPNE           {R4,PC}
MOV             R1, R4
LDR             R0, =aCanTOpenS ; "can't open '%s'"
BL              sub_16B40
; End of function sub_17980

off_179A0 DCD aCanTOpenS ; "can't open '%s'"



; int __fastcall sub_179A4(int, int, int)
sub_179A4
PUSH            {R4,LR}
BL              socket
CMP             R0, #0
POPGE           {R4,PC}
LDR             R0, =(aReadErrorMReop+0x1A) ; "socket"
BL              sub_16B40
; End of function sub_179A4

off_179BC DCD aReadErrorMReop+0x1A ; "socket"



; int __fastcall sub_179C0(int, const struct sockaddr *, socklen_t)
sub_179C0
PUSH            {R4,LR}
BL              bind
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R0, =aBind_0 ; "bind"
BL              sub_16B40
; End of function sub_179C0

off_179D8 DCD aBind_0   ; "bind"



; ssize_t __fastcall sub_179DC(int, const void *, size_t, const struct sockaddr *, socklen_t)
sub_179DC

arg_0=  4

PUSH            {R0-R2,LR} ; addr
LDR             R12, [SP,#0xC+arg_0]
STMEA           SP, {R3,R12}
MOV             R3, #0  ; flags
BL              sendto
CMP             R0, #0
BGE             loc_17A00
LDR             R0, =aSendto_0 ; "sendto"
BL              sub_16B40

loc_17A00
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_179DC

off_17A08 DCD aSendto_0 ; "sendto"



; int __fastcall sub_17A0C(const char *)
sub_17A0C
PUSH            {R4,LR}
MOV             R4, R0
BLX             sub_62DFC
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R1, R4
LDR             R0, =aCanTStatS ; "can't stat '%s'"
BL              sub_16B40
; End of function sub_17A0C

off_17A2C DCD aCanTStatS ; "can't stat '%s'"



; int __fastcall sub_17A30(int, int, const char *)
sub_17A30
PUSH            {R4,LR}
MOV             R4, R2
BLX             sub_62E08
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R0, R4
BL              sub_16B90
; End of function sub_17A30




; int sub_17A4C(int, unsigned int, int, const char *, ...)
sub_17A4C

var_4= -4
varg_r3=  4
arg_0=  8

PUSH            {R3}
PUSH            {R0,R1,LR}
BL              ioctl
CMP             R0, #0
BGE             loc_17A8C
ADD             R3, SP, #8+arg_0
STR             R3, [SP,#8+var_4]
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R0, [R3] ; errnum
BL              strerror
LDR             R1, [SP,#8+var_4]
MOV             R2, R0
LDR             R0, [SP,#8+varg_r3]
BL              sub_16BA4
BL              sub_16E08

loc_17A8C
ADD             SP, SP, #8
POP             {LR}
ADD             SP, SP, #4
BX              LR
; End of function sub_17A4C

off_17A9C DCD dword_7DB94



; int sub_17AA0(int, unsigned int, int, const char *, ...)
sub_17AA0

var_8= -8
varg_r3=  8
arg_0=  0xC

PUSH            {R3}
PUSH            {R0-R2,R4,LR}
BL              ioctl
SUBS            R4, R0, #0
BGE             loc_17ADC
ADD             R3, SP, #0xC+arg_0
STR             R3, [SP,#0xC+var_8]
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R0, [R3] ; errnum
BL              strerror
LDR             R1, [SP,#0xC+var_8]
MOV             R2, R0
LDR             R0, [SP,#0xC+varg_r3]
BL              sub_16BA4

loc_17ADC
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4,LR}
ADD             SP, SP, #4
BX              LR
; End of function sub_17AA0

off_17AF0 DCD dword_7DB94



; int __fastcall sub_17AF4(int, unsigned int, int, const char *)
sub_17AF4
PUSH            {R4-R6,LR}
MOV             R5, R3
BL              ioctl
SUBS            R4, R0, #0
BGE             loc_17B10
MOV             R0, R5
BL              sub_16B80

loc_17B10
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_17AF4




; int __fastcall sub_17B18(int, unsigned int, int, const char *)
sub_17B18
PUSH            {R4,LR}
MOV             R4, R3
BL              ioctl
CMP             R0, #0
POPGE           {R4,PC}
MOV             R0, R4
BL              sub_16B90
; End of function sub_17B18




; char *__fastcall sub_17B34(int)
sub_17B34
PUSH            {LR}
SUB             SP, SP, #0x84
MOV             R2, #0x7F ; buflen
MOV             R1, SP  ; buf
BL              ttyname_r
CMP             R0, #0
MOVNE           R0, #0
BNE             loc_17B5C
MOV             R0, SP
BL              sub_174F8

loc_17B5C
ADD             SP, SP, #0x84
POP             {PC}
; End of function sub_17B34




; __pid_t sub_17B64()
sub_17B64
PUSH            {R4,LR}
BL              fork
CMP             R0, #0
POPGE           {R4,PC}
LDR             R0, =(aVfork_0+1) ; "fork"
BL              sub_16B40
; End of function sub_17B64

off_17B7C DCD aVfork_0+1 ; "fork"



; void *__fastcall sub_17B80(const char *)
sub_17B80
PUSH            {R4-R6,LR}
MOV             R5, #0
MOV             R6, R0
MOV             R4, R5

loc_17B90
ADD             R5, R5, #0x50 ; 'P'
MOV             R0, R4
MOV             R1, R5
BL              sub_174B4
MOV             R2, R5  ; len
MOV             R1, R0  ; buf
MOV             R4, R0
MOV             R0, R6  ; path
BL              readlink
CMN             R0, #1
BNE             loc_17BD0
MOV             R0, R4  ; ptr
MOV             R4, #0
BL              free

loc_17BC8
MOV             R0, R4
POP             {R4-R6,PC}

loc_17BD0
CMP             R5, R0
BLE             loc_17B90
MOV             R3, #0
STRB            R3, [R4,R0]
B               loc_17BC8
; End of function sub_17B80




; char *__fastcall sub_17BE4(const char *)
sub_17BE4
PUSH            {R4-R8,LR}
MOV             R7, #0x15
BL              sub_174F8
MOV             R4, R0

loc_17BF4               ; s
MOV             R0, R4
BL              strlen
ADD             R6, R0, #1
B               loc_17C4C

loc_17C04
SUBS            R7, R7, #1
BNE             loc_17C14
BL              free
B               loc_17C74

loc_17C14
LDRB            R3, [R5]
CMP             R3, #0x2F ; '/'
BEQ             loc_17C88
BL              strlen
ADD             R6, R6, R0
MOV             R0, R4
MOV             R1, R6
BL              sub_174B4
MOV             R4, R0
BL              sub_16A54
MOV             R1, R5  ; src
BL              strcpy
MOV             R0, R5  ; ptr
BL              free

loc_17C4C
MOV             R0, R4
BL              sub_17B80
SUBS            R5, R0, #0
BNE             loc_17C04
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
CMPNE           R3, #0x16
BEQ             loc_17C80

loc_17C74               ; ptr
MOV             R0, R4
MOV             R4, #0
BL              free

loc_17C80
MOV             R0, R4
POP             {R4-R8,PC}

loc_17C88               ; ptr
MOV             R0, R4
MOV             R4, R5
BL              free
B               loc_17BF4
; End of function sub_17BE4

off_17C98 DCD dword_7DB94



; void *__fastcall sub_17C9C(const char *)
sub_17C9C
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_17B80
SUBS            R4, R0, #0
BNE             loc_17CDC
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R0, [R3] ; errnum
CMP             R0, #0x16
LDREQ           R2, =aNotASymlink ; "not a symlink"
BEQ             loc_17CD0
BL              strerror
MOV             R2, R0

loc_17CD0
MOV             R1, R5
LDR             R0, =aSCannotReadLin ; "%s: cannot read link: %s"
BL              sub_16DDC

loc_17CDC
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_17C9C

off_17CE4 DCD dword_7DB94
off_17CE8 DCD aNotASymlink ; "not a symlink"
off_17CEC DCD aSCannotReadLin ; "%s: cannot read link: %s"



; char *__fastcall sub_17CF0(const char *)
sub_17CF0
MOV             R1, #0  ; resolved
B               realpath
; End of function sub_17CF0




; _BYTE *__fastcall sub_17CF8(const char *)
sub_17CF8
LDR             R3, =dword_7DB94
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R6, [R3]
MOV             R3, #0
STR             R3, [R6]
BL              sub_17CF0
SUBS            R4, R0, #0
BNE             loc_17D90
LDR             R3, [R6]
CMP             R3, #2
BNE             loc_17D90
MOV             R1, #0x2F ; '/' ; c
MOV             R0, R5  ; s
BL              strrchr
CMP             R0, #0
BEQ             loc_17D90
STRB            R4, [R0]
ADD             R6, R0, #1
MOV             R0, R5
BL              sub_17CF0
SUBS            R7, R0, #0
BEQ             loc_17D90
BL              strlen
MOV             R5, R0
MOV             R0, R6  ; s
BL              strlen
ADD             R1, R0, R5
MOV             R0, R7
ADD             R1, R1, #2
BL              sub_174B4
MOV             R3, #0x2F ; '/'
MOV             R4, R0
STRB            R3, [R0,R5]
ADD             R0, R5, #1
MOV             R1, R6  ; src
ADD             R0, R4, R0 ; dest
BL              strcpy

loc_17D90
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_17CF8

off_17D98 DCD dword_7DB94



; __int64 __fastcall sub_17D9C(int fd, int, __int64)
sub_17D9C

var_100C= -0x100C
var_1008= -0x1008
buf= -0x1004

CMP             R2, #0
PUSH            {R4-R11,LR}
MOV             R5, R3
SBCS            R3, R3, #0
SUB             SP, SP, #0x1000
MOV             R9, R0
SUB             SP, SP, #0xC
MOV             R10, R1
MOV             R4, R2
BGE             loc_17DE4
RSBS            R4, R2, #0
RSC             R5, R5, #0
CMP             R0, #0
MOVGE           R11, #1
BGE             loc_17E84

loc_17DD8
MOV             R6, #0xFFFFFFFF
MOV             R7, R6
B               loc_17F04

loc_17DE4
CMP             R0, #0
BLT             loc_17DD8
ORRS            R3, R4, R5
MOV             R11, #0
BNE             loc_17E84
MOV             R4, #0x1000000
MOV             R5, #0
MOV             R3, #1
STR             R3, [SP,#0x100C+var_100C]

loc_17E08
MOV             R6, #0
MOV             R8, #0x1000000
MOV             R7, R6

loc_17E14
CMP             R8, #0
BNE             loc_17E90

loc_17E1C
MOV             R0, #0x1000
MOV             R1, #0
CMP             R0, R4
MOV             R2, R4
SBCS            R3, R1, R5
MOV             R0, R9  ; fd
MOVLT           R2, #0x1000 ; nbytes
ADD             R1, SP, #0x100C+buf ; buf
BL              sub_1800C
SUBS            R3, R0, #0
BLT             loc_17EC8
BEQ             loc_17F04
CMP             R10, #0
BLT             loc_17ED4
MOV             R2, R3  ; n
ADD             R1, SP, #0x100C+buf ; buf
MOV             R0, R10 ; fd
STR             R3, [SP,#0x100C+var_1008]
BL              sub_17FB8
LDR             R3, [SP,#0x100C+var_1008]
CMP             R3, R0
BLE             loc_17ED4
CMP             R11, #0
BNE             loc_17F18
LDR             R0, =aWriteError ; "write error"
B               loc_17ECC

loc_17E84
MOV             R3, #0xFFFFFFFF
STR             R3, [SP,#0x100C+var_100C]
B               loc_17E08

loc_17E90
MOV             R3, R8,ASR#31
CMP             R4, R8
MOV             R2, R8
SBCS            R1, R5, R3
MOV             R0, R10
MOVLT           R2, R4
MOV             R1, R9
MOV             R3, R2
MOV             R2, #0
BL              sendfile64
SUBS            R3, R0, #0
BLT             loc_17E1C
BNE             loc_17ED8
B               loc_17F04

loc_17EC8
LDR             R0, =aReadError ; "read error"

loc_17ECC
BL              sub_16AF4
B               loc_17DD8

loc_17ED4
MOV             R8, #0

loc_17ED8
LDR             R1, [SP,#0x100C+var_100C]
MOV             R2, R3
MOV             R3, R3,ASR#31
ADDS            R6, R6, R2
ADC             R7, R7, R3
CMN             R1, #1
BNE             loc_17E14
SUBS            R4, R4, R2
SBC             R5, R5, R3
ORRS            R3, R4, R5
BNE             loc_17E14

loc_17F04
MOV             R0, R6
MOV             R1, R7
ADD             SP, SP, #0x1000
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_17F18
MOV             R8, #0
MOV             R10, #0xFFFFFFFF
B               loc_17ED8
; End of function sub_17D9C

off_17F24 DCD aWriteError ; "write error"
off_17F28 DCD aReadError ; "read error"



; __int64 __fastcall sub_17F2C(int, int, __int64)
sub_17F2C
PUSH            {R4,R5}
MOV             R4, R2
MOV             R5, R3
ORRS            R12, R4, R5
BEQ             loc_17F48
POP             {R4,R5}
B               sub_17D9C

loc_17F48
MOV             R0, R2
MOV             R1, R3
POP             {R4,R5}
BX              LR
; End of function sub_17F2C




; __int64 __fastcall sub_17F58(int, int, __int64)
sub_17F58
PUSH            {R4-R8,LR}
MOV             R6, R3
MOV             R7, R2
BL              sub_17F2C
MOV             R3, R6,ASR#31
EOR             R12, R3, R7
EOR             LR, R3, R6
SUBS            R4, R12, R3
SBC             R5, LR, R3
CMP             R5, R1
CMPEQ           R4, R0
POPEQ           {R4-R8,PC}
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R1, R3
CMPEQ           R0, R2
BEQ             loc_17FA4
LDR             R0, =aShortRead ; "short read"
BL              sub_16DBC

loc_17FA4
BL              sub_16E08
; End of function sub_17F58

off_17FA8 DCD aShortRead ; "short read"



; __int64 __fastcall sub_17FAC(int, int)
sub_17FAC
MOV             R2, #0
MOV             R3, #0
B               sub_17D9C
; End of function sub_17FAC




; ssize_t __fastcall sub_17FB8(int fd, char *buf, size_t n)
sub_17FB8
PUSH            {R4-R8,LR}
MOV             R7, R0
MOV             R6, R1
MOV             R5, R2
MOV             R4, #0

loc_17FCC
CMP             R5, #0
BEQ             loc_17FF4
MOV             R2, R5  ; n
MOV             R1, R6  ; buf
MOV             R0, R7  ; fd
BL              sub_180F4
CMP             R0, #0
BGE             loc_17FFC
CMP             R4, #0
MOVEQ           R4, R0

loc_17FF4
MOV             R0, R4
POP             {R4-R8,PC}

loc_17FFC
ADD             R4, R4, R0
ADD             R6, R6, R0
SUB             R5, R5, R0
B               loc_17FCC
; End of function sub_17FB8




; ssize_t __fastcall sub_1800C(int fd, void *buf, size_t nbytes)
sub_1800C
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R4, =dword_7DB94
MOV             R6, R1
MOV             R7, R2

loc_18020               ; nbytes
MOV             R2, R7
MOV             R1, R6  ; buf
MOV             R0, R5  ; fd
BL              read
CMP             R0, #0
POPGE           {R4-R8,PC}
LDR             R3, [R4]
LDR             R3, [R3]
CMP             R3, #4
POPNE           {R4-R8,PC}
B               loc_18020
; End of function sub_1800C

off_1804C DCD dword_7DB94



; ssize_t __fastcall sub_18050(int fd, char *buf, size_t nbytes)
sub_18050
PUSH            {R4-R8,LR}
MOV             R7, R0
MOV             R6, R1
MOV             R5, R2
MOV             R4, #0

loc_18064
CMP             R5, #0
BEQ             loc_1808C
MOV             R2, R5  ; nbytes
MOV             R1, R6  ; buf
MOV             R0, R7  ; fd
BL              sub_1800C
CMP             R0, #0
BGE             loc_18094
CMP             R4, #0
MOVEQ           R4, R0

loc_1808C
MOV             R0, R4
POP             {R4-R8,PC}

loc_18094
BEQ             loc_1808C
ADD             R6, R6, R0
ADD             R4, R4, R0
SUB             R5, R5, R0
B               loc_18064
; End of function sub_18050




; ssize_t __fastcall sub_180A8(int, char *, size_t)
sub_180A8
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_18050
MOV             R4, R0
MOV             R0, R5  ; fd
BL              close
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_180A8




; ssize_t __fastcall sub_180C8(int, char *, size_t)
sub_180C8
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R1, #0
MOV             R5, R2
BL              open64
CMP             R0, #0
POPLT           {R4-R6,PC}
MOV             R2, R5
MOV             R1, R4
POP             {R4-R6,LR}
B               sub_180A8
; End of function sub_180C8




; ssize_t __fastcall sub_180F4(int fd, void *buf, size_t n)
sub_180F4
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R8, =dword_7DB94
MOV             R6, R1
MOV             R7, R2
MOV             R4, #0

loc_1810C               ; n
MOV             R2, R7
MOV             R1, R6  ; buf
MOV             R0, R5  ; fd
BL              write
CMP             R0, #0
POPGE           {R4-R8,PC}
LDR             R3, [R8]
LDR             R2, [R3]
CMP             R2, #4
POPNE           {R4-R8,PC}
STR             R4, [R3]
B               loc_1810C
; End of function sub_180F4

off_1813C DCD dword_7DB94



; void sub_18140(int)
sub_18140
LDR             R3, =dword_7DBA0
STR             R0, [R3]
BX              LR
; End of function sub_18140

off_1814C DCD dword_7DBA0



; int __fastcall sub_18150(int, const struct sigaction *)
sub_18150
MOV             R2, #0  ; oact
B               sigaction
; End of function sub_18150




; int __fastcall sub_18158(int)
sub_18158

var_80= -0x80

PUSH            {R4,LR}
SUB             SP, SP, #0x80
MOV             R4, R0
MOV             R0, SP  ; set
BL              sigfillset
MOV             R2, #0  ; oset
MOV             R1, SP  ; set
MOV             R0, R4  ; how
BL              sigprocmask
ADD             SP, SP, #0x80
POP             {R4,PC}
; End of function sub_18158




; __sighandler_t __fastcall sub_18184(__sighandler_t result, void (*)(int))
sub_18184
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R7, R1
MOV             R5, #1
MOV             R6, #0

loc_18198
CMP             R4, #0
POPEQ           {R4-R8,PC}
TST             R4, R5
BEQ             loc_181B8
MOV             R1, R7  ; handler
MOV             R0, R6  ; sig
SUB             R4, R4, R5
BL              signal

loc_181B8
ADD             R6, R6, #1
MOV             R5, R5,LSL#1
B               loc_18198
; End of function sub_18184



; Attributes: bp-based frame fpd=4

; void *__fastcall sub_181C4(int, void (*)(int))
sub_181C4

var_90= -0x90
s= -0x8C

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x94
MOV             R5, R1
MOV             R4, R0
MOV             R2, #0x88 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x94+s ; s
ADD             R7, SP, #0x90
BL              memset
MOV             R6, #0
STR             R5, [R7,#4+var_90]!
MOV             R5, #1

loc_181F4
CMP             R4, #0
BNE             loc_18204
ADD             SP, SP, #0x94
POP             {R4-R7,PC}

loc_18204
TST             R4, R5
BEQ             loc_1821C
MOV             R1, R7
MOV             R0, R6
SUB             R4, R4, R5
BL              sub_18150

loc_1821C
ADD             R6, R6, #1
MOV             R5, R5,LSL#1
B               loc_181F4
; End of function sub_181C4




; int __fastcall sub_18228(int)
sub_18228

var_80= -0x80

PUSH            {R4,LR}
SUB             SP, SP, #0x80
MOV             R4, R0
MOV             R0, SP  ; set
BL              sigemptyset
MOV             R1, R4  ; signo
MOV             R0, SP  ; set
BL              sigaddset
MOV             R2, #0  ; oset
MOV             R1, SP  ; set
MOV             R0, #1  ; how
BL              sigprocmask
ADD             SP, SP, #0x80
POP             {R4,PC}
; End of function sub_18228



; Attributes: noreturn

; void __fastcall __noreturn sub_18260(int)
sub_18260
PUSH            {R4,LR}
MOV             R1, #0  ; handler
MOV             R4, R0
BL              signal
MOV             R0, R4
BL              sub_18228
MOV             R0, R4  ; sig
BL              raise
ORR             R0, R4, #0x80 ; status
BL              _exit
; End of function sub_18260




; int __fastcall sub_18288(int, void (*)(int))
sub_18288

var_90= -0x90
s= -0x8C

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x94
MOV             R4, R0
MOV             R5, R1
MOV             R2, #0x88 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x94+s ; s
BL              memset
ADD             R1, SP, #0x94+var_90
MOV             R0, R4
STR             R5, [SP,#0x94+var_90]
BL              sub_18150
ADD             SP, SP, #0x94
POP             {R4,R5,PC}
; End of function sub_18288




; int __fastcall sub_182C0(int)
sub_182C0
MOV             R2, R0
PUSH            {R4,LR}
MOV             R1, #1
MOVW            R0, #0x107 ; sysno
BL              syscall
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R0, =aClockGettimeMo ; "clock_gettime(MONOTONIC) failed"
BL              sub_16DBC
; End of function sub_182C0

off_182E4 DCD aClockGettimeMo ; "clock_gettime(MONOTONIC) failed"



; struct tm *__fastcall sub_182E8(int, int *)
sub_182E8

var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
c= -9

PUSH            {R4-R11,LR}
MOV             R3, #0
SUB             SP, SP, #0x24
MOV             R4, R1
MOV             R1, #0x3A ; ':' ; c
MOV             R5, R0
STRB            R3, [SP,#0x24+c]
BL              strrchr
SUBS            R3, R0, #0
STR             R3, [SP,#0x24+var_10]
BEQ             loc_1842C
ADD             R7, R4, #8
ADD             R8, R4, #4
ADD             R6, SP, #0x24+c
MOV             R3, R8
STR             R6, [SP,#0x24+var_24]
MOV             R2, R7
LDR             R1, =(aUUUUUC_0+9) ; format
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #1
BGT             loc_18378
ADD             R9, R4, #0x10
ADD             R10, R4, #0xC
STR             R6, [SP,#0x24+var_1C]
MOV             R3, R10
STMEA           SP, {R7,R8}
MOV             R2, R9
LDR             R1, =(format+3) ; format
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #3
BLE             loc_183B8

loc_1836C
LDR             R3, [R4,#0x10]
SUB             R3, R3, #1
STR             R3, [R4,#0x10]

loc_18378
LDRB            R3, [SP,#0x24+c]
CMP             R3, #0x3A ; ':'
BNE             loc_183A8
LDR             R1, =(aUUUUC+9) ; format
MOV             R3, R6
LDR             R0, [SP,#0x24+var_10]
MOV             R2, R4

loc_18394               ; s
ADD             R0, R0, #1
BL              sscanf
CMP             R0, #1
MOVEQ           R3, #0
BEQ             loc_18524

loc_183A8
LDRB            R3, [SP,#0x24+c]
CMP             R3, #0
BNE             loc_18420
B               loc_18518

loc_183B8
ADD             R11, R4, #0x14
STR             R6, [SP,#0x24+var_18]
STMFA           SP, {R7,R8}
MOV             R3, R9
STR             R10, [SP,#0x24+var_24]
MOV             R2, R11
LDR             R1, =format ; "%u.%u.%u-%u:%u%c"
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #4
BLE             loc_183F8

loc_183E4
LDR             R3, [R4,#0x14]
SUB             R3, R3, #0x760
SUB             R3, R3, #0xC
STR             R3, [R4,#0x14]
B               loc_1836C

loc_183F8
STR             R6, [SP,#0x24+var_18]
MOV             R3, R9
STMFA           SP, {R7,R8}
MOV             R2, R11
STR             R10, [SP,#0x24+var_24]
MOV             R0, R5  ; s
LDR             R1, =aUUUUUC_0 ; "%u-%u-%u %u:%u%c"
BL              sscanf
CMP             R0, #4
BGT             loc_183E4

loc_18420
MOV             R1, R5
LDR             R0, =aInvalidDateS ; "invalid date '%s'"
BL              sub_16DBC

loc_1842C               ; c
MOV             R1, #0x2D ; '-'
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_184BC
ADD             R3, R4, #8
ADD             R6, R4, #0x14
ADD             R7, R4, #0x10
ADD             R8, R4, #0xC
ADD             R9, SP, #0x24+c
STR             R3, [SP,#0x24+var_20]
STR             R9, [SP,#0x24+var_1C]
MOV             R3, R7
STR             R8, [SP,#0x24+var_24]
MOV             R2, R6
LDR             R1, =aUUUUC ; "%u-%u-%u %u%c"
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #3
BLE             loc_1849C

loc_1847C
LDR             R3, [R4,#0x14]
SUB             R3, R3, #0x760
SUB             R3, R3, #0xC
STR             R3, [R4,#0x14]
LDR             R3, [R4,#0x10]
SUB             R3, R3, #1
STR             R3, [R4,#0x10]
B               loc_183A8

loc_1849C
STRD            R8, R9, [SP,#0x24+var_24]
MOV             R3, R7
MOV             R2, R6
LDR             R1, =aUUUC ; "%u-%u-%u%c"
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #2
BGT             loc_1847C

loc_184BC
LDRB            R3, [R5]
CMP             R3, #0x40 ; '@'
BNE             loc_1852C
MOV             R2, #0xA
MOV             R1, #0
ADD             R0, R5, #1
BL              sub_189FC
LDR             R3, =dword_7DB94
STR             R0, [SP,#0x24+c+1]
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_18520
ADD             R0, SP, #0x24+c+1 ; timer
BL              localtime
SUBS            R12, R0, #0
BEQ             loc_18520
LDM             R12!, {R0-R3}
STM             R4!, {R0-R3}
LDM             R12!, {R0-R3}
STM             R4!, {R0-R3}
LDM             R12, {R0-R2}
STM             R4, {R0-R2}

loc_18518
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_18520
MOV             R3, #0x31 ; '1'

loc_18524
STRB            R3, [SP,#0x24+c]
B               loc_183A8

loc_1852C
MOV             R1, #0x2E ; '.'
MOV             R0, R5
BL              strchrnul
SUB             R0, R0, R5
LDR             R7, [R4,#0x14]
CMP             R0, #2
ADD             R1, R4, #4
ADD             R6, SP, #0x24+c
BNE             loc_18598
MOV             R2, R1
MOV             R3, R6
LDR             R1, =(a2u2u2u2u2uC+0xC) ; format
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #0

loc_18568
BLE             loc_18420

loc_1856C               ; c
LDRB            R1, [SP,#0x24+c]
MOV             R3, #0
STR             R3, [R4]
CMP             R1, #0x2E ; '.'
BNE             loc_183A8
MOV             R0, R5  ; s
BL              strchr
MOV             R3, R6
MOV             R2, R4
LDR             R1, =(aUUUUC+9) ; "%u%c"
B               loc_18394

loc_18598
CMP             R0, #4
ADD             R12, R4, #8
BNE             loc_185C4
MOV             R3, R1
STR             R6, [SP,#0x24+var_24]
MOV             R2, R12
LDR             R1, =(a2u2u2u2u2uC+9) ; format
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #1
B               loc_18568

loc_185C4
CMP             R0, #6
ADD             LR, R4, #0xC
BNE             loc_185F0
STMEA           SP, {R1,R6}
MOV             R3, R12
MOV             R2, LR
LDR             R1, =(a2u2u2u2u2uC+6) ; format
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #2
B               loc_18568

loc_185F0
CMP             R0, #8
ADD             R8, R4, #0x10
BNE             loc_18630
STMFA           SP, {R1,R6}
MOV             R3, LR
STR             R12, [SP,#0x24+var_24]
MOV             R2, R8
LDR             R1, =(a2u2u2u2u2uC+3) ; format
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #3
BLE             loc_18420

loc_18620
LDR             R3, [R4,#0x10]
SUB             R3, R3, #1
STR             R3, [R4,#0x10]
B               loc_1856C

loc_18630
CMP             R0, #0xA
ADD             R2, R4, #0x14
BNE             loc_186BC
STR             R1, [SP,#0x24+var_1C]
MOV             R3, R8
STR             R6, [SP,#0x24+var_18]
MOV             R0, R5  ; s
STR             R12, [SP,#0x24+var_20]
STR             LR, [SP,#0x24+var_24]
LDR             R1, =a2u2u2u2u2uC ; "%2u%2u%2u%2u%2u%c"
BL              sscanf
CMP             R0, #4
BLE             loc_18420
LDR             R3, [R4,#0x10]
CMP             R7, #0x31 ; '1'
SUB             R3, R3, #1
STR             R3, [R4,#0x10]
BLE             loc_1856C
LDR             R2, =0x51EB851F
MOV             R1, #0x64 ; 'd'
UMULL           R2, R3, R7, R2
LDR             R2, [R4,#0x14]
MOV             R3, R3,LSR#5
MLA             R3, R1, R3, R2
SUB             R2, R7, #0x32 ; '2'
ADD             R7, R7, #0x32 ; '2'
CMP             R3, R2
STR             R3, [R4,#0x14]
ADDCC           R3, R3, R1
STRCC           R3, [R4,#0x14]
LDR             R3, [R4,#0x14]
CMP             R3, R7
SUBHI           R3, R3, #0x64 ; 'd'
STRHI           R3, [R4,#0x14]
B               loc_1856C

loc_186BC
CMP             R0, #0xC
BNE             loc_18420
STR             R1, [SP,#0x24+var_1C]
MOV             R3, R8
STR             R6, [SP,#0x24+var_18]
MOV             R0, R5  ; s
STR             R12, [SP,#0x24+var_20]
STR             LR, [SP,#0x24+var_24]
LDR             R1, =a4u2u2u2u2uC ; "%4u%2u%2u%2u%2u%c"
BL              sscanf
CMP             R0, #4
BLE             loc_18420
LDR             R3, [R4,#0x14]
SUB             R3, R3, #0x760
SUB             R3, R3, #0xC
STR             R3, [R4,#0x14]
B               loc_18620
; End of function sub_182E8

off_18700 DCD aUUUUUC_0+9 ; "%u:%u%c"
off_18704 DCD format+3  ; "%u.%u-%u:%u%c"
off_18708 DCD aUUUUC+9  ; "%u%c"
off_1870C DCD format    ; "%u.%u.%u-%u:%u%c"
off_18710 DCD aUUUUUC_0 ; "%u-%u-%u %u:%u%c"
off_18714 DCD aInvalidDateS ; "invalid date '%s'"
off_18718 DCD aUUUUC    ; "%u-%u-%u %u%c"
off_1871C DCD aUUUC     ; "%u-%u-%u%c"
off_18720 DCD dword_7DB94
off_18724 DCD a2u2u2u2u2uC+0xC ; "%2u%c"
off_18728 DCD a2u2u2u2u2uC+9 ; "%2u%2u%c"
off_1872C DCD a2u2u2u2u2uC+6 ; "%2u%2u%2u%c"
off_18730 DCD a2u2u2u2u2uC+3 ; "%2u%2u%2u%2u%c"
off_18734 DCD a2u2u2u2u2uC ; "%2u%2u%2u%2u%2u%c"
dword_18738 DCD 0x51EB851F
off_1873C DCD a4u2u2u2u2uC ; "%4u%2u%2u%2u%2u%c"



; time_t __fastcall sub_18740(const char *, struct tm *tp)
sub_18740
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, R1  ; tp
BL              mktime
CMN             R0, #1
POPNE           {R4,PC}
MOV             R1, R4
LDR             R0, =aInvalidDateS ; "invalid date '%s'"
BL              sub_16DBC
; End of function sub_18740

off_18764 DCD aInvalidDateS ; "invalid date '%s'"



; char *__fastcall sub_18768(char *, size_t, time_t)
sub_18768

timer= -8

PUSH            {R0-R2,R4,R5,LR}
MOV             R4, R0
SUBS            R0, R2, #0
MOV             R5, R1
BNE             loc_18788
ADD             R0, SP, #0xC+timer ; timer
BL              time
ADD             R0, SP, #0xC+timer ; timer

loc_18788
BL              localtime
LDR             R2, =(aYMDHMS+9) ; format
MOV             R3, R0  ; tp
MOV             R1, R5  ; maxsize
MOV             R0, R4  ; s
BL              strftime
ADD             R0, R4, R0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_18768

off_187AC DCD aYMDHMS+9 ; "%H:%M:%S"



; __int64 __fastcall sub_187B0(int, int, int)
sub_187B0

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R0-R2,LR}
MOV             R0, SP
BL              sub_182C0
LDR             R0, [SP,#0xC+var_8]
LDR             R2, =0x10624DD3
SMULL           R2, R3, R0, R2
MOV             R0, R0,ASR#31
LDR             R2, [SP,#0xC+var_C]
RSB             R0, R0, R3,ASR#6
LDR             R3, =0xF4240
MOV             R1, R0,ASR#31
SMLAL           R0, R1, R3, R2
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_187B0

dword_187E8 DCD 0x10624DD3
dword_187EC DCD 0xF4240



; __int64 __fastcall sub_187F0(int, int, int)
sub_187F0

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R0-R2,LR}
MOV             R0, SP
BL              sub_182C0
LDR             R0, [SP,#0xC+var_8]
LDR             R2, =0x431BDE83
SMULL           R2, R3, R0, R2
MOV             R0, R0,ASR#31
LDR             R2, [SP,#0xC+var_C]
RSB             R0, R0, R3,ASR#18
MOV             R3, #0x3E8
MOV             R1, R0,ASR#31
SMLAL           R0, R1, R3, R2
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_187F0

dword_18828 DCD 0x431BDE83



; void __fastcall __spoils<R1,R2,R3,R12,LR> sub_1882C(int, int, int)
sub_1882C

var_C= -0xC

PUSH            {R0-R2,LR}
MOV             R0, SP
BL              sub_182C0
LDR             R0, [SP,#0xC+var_C]
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1882C




; __int64 __fastcall sub_18844(int, int, _BYTE *)
sub_18844
LDRB            R3, [R2]
CMP             R3, #0
BXEQ            LR
LDR             R2, =dword_7DB94
SUB             R12, R3, #0x30 ; '0'
CMP             R12, #9
LDR             R2, [R2]
BLS             loc_18880
ORR             R3, R3, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R3, #0x19
BLS             loc_18880
LDR             R3, [R2]
CMP             R3, #0
BEQ             loc_18894

loc_18880
MOV             R3, #0x22 ; '"'
MOV             R0, #0xFFFFFFFF
STR             R3, [R2]
MOV             R1, #0xFFFFFFFF
BX              LR

loc_18894
MOV             R3, #0x16
STR             R3, [R2]
BX              LR
; End of function sub_18844

off_188A0 DCD dword_7DB94



; __int64 __fastcall sub_188A4(const char *, char *, int)
sub_188A4

endptr= -4

PUSH            {R0,R1,R4,LR}
SUBS            R4, R1, #0
ADDEQ           R4, SP, #8+endptr
LDR             R1, =dword_7DB94
STR             R0, [R4]
LDRB            R3, [R0]
LDR             R1, [R1]
SUB             R12, R3, #0x30 ; '0'
CMP             R12, #9
BLS             loc_188F4
ORR             R3, R3, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R3, #0x19
BLS             loc_188F4
MOV             R3, #0x22 ; '"'
MOV             R0, #0xFFFFFFFF ; nptr
STR             R3, [R1]
MOV             R1, #0xFFFFFFFF

loc_188EC
ADD             SP, SP, #8
POP             {R4,PC}

loc_188F4
MOV             R3, #0
STR             R3, [R1]
MOV             R1, R4  ; endptr
BL              strtoull
LDR             R2, [R4]
BL              sub_18844
B               loc_188EC
; End of function sub_188A4

off_18910 DCD dword_7DB94



; __int64 __fastcall sub_18914(char *, char *, int)
sub_18914

endptr= -4

PUSH            {R0,R1,R4,LR}
SUBS            R4, R1, #0
ADDEQ           R4, SP, #8+endptr
LDR             R1, =dword_7DB94
STR             R0, [R4]
LDRB            R3, [R0]
LDR             R1, [R1]
CMP             R3, #0x2D ; '-'
LDRBEQ          R3, [R0,#1]
SUB             R12, R3, #0x30 ; '0'
CMP             R12, #9
BLS             loc_18970
ORR             R3, R3, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
UXTB            R3, R3
CMP             R3, #0x19
BLS             loc_18970
MOV             R3, #0x22 ; '"'
MOV             R0, #0xFFFFFFFF ; nptr
STR             R3, [R1]
MOV             R1, #0xFFFFFFFF

loc_18968
ADD             SP, SP, #8
POP             {R4,PC}

loc_18970
MOV             R3, #0
STR             R3, [R1]
MOV             R1, R4  ; endptr
BL              strtoll
LDR             R2, [R4]
BL              sub_18844
B               loc_18968
; End of function sub_18914

off_1898C DCD dword_7DB94



; int __fastcall sub_18990(const char *, char *, char *)
sub_18990

endptr= -8

PUSH            {R0-R2,R4,R5,LR}
SUBS            R4, R1, #0
ADDEQ           R4, SP, #0xC+endptr
LDR             R1, =dword_7DB94
STR             R0, [R4]
LDRB            R3, [R0]
LDR             R1, [R1]
SUB             R12, R3, #0x30 ; '0'
CMP             R12, #9
BLS             loc_189D4
ORR             R3, R3, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R3, #0x19
MOVHI           R3, #0x22 ; '"'
MOVHI           R0, #0xFFFFFFFF ; nptr
STRHI           R3, [R1]
BHI             loc_189F0

loc_189D4
MOV             R5, #0
STR             R5, [R1]
MOV             R1, R4  ; endptr
BL              strtoul
LDR             R2, [R4]
MOV             R1, R5
BL              sub_18844

loc_189F0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_18990

off_189F8 DCD dword_7DB94



; int __fastcall sub_189FC(char *, char *, int)
sub_189FC

endptr= -4

PUSH            {R0,R1,R4,LR}
SUBS            R4, R1, #0
ADDEQ           R4, SP, #8+endptr
LDR             R1, =dword_7DB94
STR             R0, [R4]
LDRB            R3, [R0]
LDR             R1, [R1]
CMP             R3, #0x2D ; '-'
LDRBEQ          R3, [R0,#1]
SUB             R12, R3, #0x30 ; '0'
CMP             R12, #9
BLS             loc_18A4C
ORR             R3, R3, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
UXTB            R3, R3
CMP             R3, #0x19
MOVHI           R3, #0x22 ; '"'
MOVHI           R0, #0xFFFFFFFF ; nptr
STRHI           R3, [R1]
BHI             loc_18A68

loc_18A4C
MOV             R3, #0
STR             R3, [R1]
MOV             R1, R4  ; endptr
BL              strtol
LDR             R2, [R4]
MOV             R1, R0,ASR#31
BL              sub_18844

loc_18A68
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_189FC

off_18A70 DCD dword_7DB94



; int __fastcall sub_18A74(int, char **)
sub_18A74

var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C

LDR             R2, =aSha512 ; "sha512"
MOV             R3, #0
PUSH            {R4,R5,LR}
SUB             SP, SP, #0x4C
STR             R3, [SP,#0x4C+var_30]
MOV             R4, R1
MOV             R0, R4
STRD            R2, R3, [SP,#0x4C+var_38]
ADD             R3, SP, #0x4C+var_38
STR             R3, [SP,#0x4C+var_44]
STR             R3, [SP,#0x4C+var_48]
ADD             R3, SP, #0x4C+var_34
STR             R3, [SP,#0x4C+var_4C]
ADD             R3, SP, #0x4C+var_30
LDR             R2, =aStdin_0 ; "stdin"
LDR             R1, =aSpSMA ; "^sP:+S:m:a:"
BL              sub_593F8
LDR             R3, =optind
LDR             R5, [R3]
LDR             R2, [R4,R5,LSL#2]
ADD             R3, R4, R5,LSL#2
CMP             R2, #0
BEQ             loc_18AE0
LDR             R2, [SP,#0x4C+var_34]
CMP             R2, #0
LDREQ           R3, [R3,#4]
STREQ           R3, [SP,#0x4C+var_34]

loc_18AE0
LDR             R1, [SP,#0x4C+var_38]
ADD             R0, SP, #0x4C+var_2C
BL              sub_5FB7C
LDR             R1, [SP,#0x4C+var_34]
CMP             R1, #0
BEQ             loc_18B00
MOV             R2, #0x23 ; '#'
BL              sub_60B34

loc_18B00
LDR             R0, [SP,#0x4C+var_30]
MOV             R1, #0
BL              sub_176A8
LDR             R0, [R4,R5,LSL#2]
CMP             R0, #0
BNE             loc_18B2C
LDR             R3, =stdin
LDR             R0, [R3]
BL              sub_58D24
CMP             R0, #0
BEQ             loc_18B3C

loc_18B2C
MOV             R2, #1
ADD             R1, SP, #0x4C+var_2C
BL              sub_5FBFC
BL              puts

loc_18B3C
MOV             R0, #0
ADD             SP, SP, #0x4C ; 'L'
POP             {R4,R5,PC}
; End of function sub_18A74

off_18B48 DCD aSha512   ; "sha512"
off_18B4C DCD aStdin_0  ; "stdin"
off_18B50 DCD aSpSMA    ; "^sP:+S:m:a:"
off_18B54 DCD optind
off_18B58 DCD stdin



; unsigned int sub_18B5C()
sub_18B5C
MOV             R0, #0xA
B               sleep
; End of function sub_18B5C




; int __fastcall sub_18B64(const char *)
sub_18B64
PUSH            {R4,LR}
MOV             R2, #0xA
MOV             R1, #0
BL              sub_18990
CMP             R0, #0
POPLT           {R4,PC}
POP             {R4,LR}
B               sub_60F24
; End of function sub_18B64




; int sub_18B84()
sub_18B84
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
LDR             R0, [R3]
ADD             R0, R0, #0x48 ; 'H' ; termios_p
BL              sub_1729C
CMP             R0, #0
POPGE           {R4,PC}
LDR             R0, =aTcsetattr_0 ; "tcsetattr"
BL              sub_16B40
; End of function sub_18B84

off_18BA8 DCD dword_7DB98
off_18BAC DCD aTcsetattr_0 ; "tcsetattr"



; ssize_t sub_18BB0()
sub_18BB0
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
LDR             R3, [R3]
LDR             R2, [R3,#0x48]
ORR             R1, R2, #0x1400
STR             R1, [R3,#0x48]
LDRB            R1, [R3,#0x44]
CMP             R1, #0xD
ORREQ           R2, R2, #0x1500
STREQ           R2, [R3,#0x48]
LDR             R2, [R3,#0x54]
ORR             R2, R2, #0xA30
ORR             R2, R2, #0xB
STR             R2, [R3,#0x54]
MOV             R2, #3
STRB            R2, [R3,#0x59]
MOV             R2, #0x1C
STRB            R2, [R3,#0x5A]
MOV             R2, #0xA
STRB            R2, [R3,#0x64]
MOV             R2, #0
STRB            R2, [R3,#0x60]
MOVW            R2, #0x415
STRH            R2, [R3,#0x5C]
BL              sub_18B84
MOV             R2, #1  ; n
LDR             R1, =(aShellReturnedI+0x13) ; buf
MOV             R0, R2  ; fd
POP             {R4,LR}
B               sub_17FB8
; End of function sub_18BB0

off_18C28 DCD dword_7DB98
off_18C2C DCD aShellReturnedI+0x13 ; "\n"


; Attributes: noreturn

; void __fastcall __noreturn handler(int)
handler
PUSH            {R4,LR}
BL              sub_18BB0
MOV             R0, #0  ; status
BL              _exit
; End of function handler



; Attributes: noreturn

; void __fastcall __noreturn sub_18C40(int, char **)
sub_18C40

var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_10= -0x10
buf= -9
var_8= -8
var_4= -4

PUSH            {R4-R11,LR}
MOV             R0, #0x104
SUB             SP, SP, #0x24
MOV             R5, R1
BL              sub_174DC
LDR             R3, =dword_7DB98
MOV             R4, R0
STR             R0, [R3]
LDR             R3, =aBinLogin ; "/bin/login"
ADD             R2, R0, #0x10
LDR             R1, =aILhFHilMtWn ; "^I:LH:f:hil:mt:+wn"
STR             R3, [R0,#4]
LDR             R3, =aEtcIssue ; "/etc/issue"
STR             R3, [R0,#0x14]
MOV             R3, #0xD
STRB            R3, [R0,#0x44]
ADD             R3, R0, #4
STR             R3, [SP,#0x24+var_20]
ADD             R3, R0, #0x14
STR             R0, [SP,#0x24+var_1C]
STR             R3, [SP,#0x24+var_24]
ADD             R3, R0, #8
MOV             R0, R5
BL              sub_593CC
TST             R0, #1
BEQ             loc_18CBC
LDR             R0, [R4,#0x10]
BL              sub_174F8
MOV             R1, R0
STR             R0, [R4,#0x10]
BL              sub_5E730

loc_18CBC
LDR             R3, =optind
LDR             R9, =(aNoCarrier+0xA) ; ","
LDR             R3, [R3]
LDR             R2, [R5,R3,LSL#2]
ADD             R8, R5, R3,LSL#2
ADD             R5, SP, #0x24+var_4
STR             R2, [R4,#0xC]
LDRB            R1, [R2]
LDR             R3, [R8,#4]
SUB             R1, R1, #0x30 ; '0'
CMP             R1, #9
STRLS           R3, [R4,#0xC]
MOVLS           R3, R2
STR             R3, [R5,#-4]!

loc_18CF4               ; delim
MOV             R1, R9
MOV             R0, R5  ; stringp
BL              strsep
SUBS            R7, R0, #0
BNE             loc_18E28
LDR             R1, [R8,#8]
CMP             R1, #0
BEQ             loc_18D1C
LDR             R0, =(aGotTerm+6) ; "TERM"
BL              sub_17820

loc_18D1C
BL              setsid
SUBS            R5, R0, #0
BGE             loc_18D8C
BL              getpid
MOV             R6, R0
MOV             R0, #0
BL              getsid
CMP             R0, R6
MOV             R5, R0
LDRNE           R0, =aSetsid_0 ; "setsid"
BNE             loc_18F38
MOVW            R1, #0x802
LDR             R0, =aDevTty ; "/dev/tty"
BL              open64
SUBS            R6, R0, #0
BLT             loc_18D8C
MOV             R1, #1  ; handler
MOV             R0, R1  ; sig
BL              signal
MOVW            R1, #0x5422 ; request
MOV             R8, R0
MOV             R0, R6  ; fd
BL              ioctl
MOV             R0, R6  ; fd
BL              close
MOV             R1, R8  ; handler
MOV             R0, #1  ; sig
BL              signal

loc_18D8C
MOV             R1, #2
LDR             R0, =aDevNull ; "/dev/null"
BL              sub_175D8
MOV             R1, #1
MOV             R6, R0
BL              sub_17688
MOV             R1, #2
MOV             R0, R6
BL              sub_17688

loc_18DB0
CMP             R6, #2
BGT             loc_18E70
LDR             R3, =off_7DB9C
MOV             R1, #1  ; option
LDR             R2, =sub_18B5C
LDR             R8, =dword_7DB90
STR             R2, [R3]
LDR             R3, =off_7D4C0 ; "\n"
LDR             R2, =(aLoginTimedOutA+0x22) ; "\r\n"
LDR             R0, [R8] ; ident
STR             R2, [R3] ; "\n"
MOV             R2, #0x20 ; ' ' ; facility
BL              openlog
LDR             R3, =dword_7D4BC
MOV             R1, #3  ; cmd
STR             R1, [R3]
LDR             R3, [R4,#0xC]
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BNE             loc_18E84
LDRB            R6, [R3,#1]
CMP             R6, #0
BNE             loc_18E8C
MOV             R0, R6  ; fd
BL              fcntl
AND             R0, R0, #3
CMP             R0, #2
BEQ             loc_18F3C
LDR             R0, =aStdinIsNotOpen ; "stdin is not open for read/write"
B               loc_18E6C

loc_18E28
LDR             R6, [R4,#0x18]
BL              sub_18B64
LDR             R3, [R4,#0x18]
ADD             R6, R4, R6,LSL#2
ADD             R2, R4, R3,LSL#2
STR             R0, [R6,#0x1C]
LDR             R2, [R2,#0x1C]
CMP             R2, #0
BGE             loc_18E58
LDR             R0, =aBadSpeedS ; "bad speed: %s"
MOV             R1, R7

loc_18E54
BL              sub_16DBC

loc_18E58
ADD             R3, R3, #1
CMP             R3, #0xA
STR             R3, [R4,#0x18]
BLE             loc_18CF4
LDR             R0, =aTooManyAlterna ; "too many alternate speeds"

loc_18E6C
BL              sub_16DBC

loc_18E70               ; fd
MOV             R0, R6
SUB             R8, R6, #1
BL              close
MOV             R6, R8
B               loc_18DB0

loc_18E84
CMP             R2, #0x2F ; '/'
BEQ             loc_18E9C

loc_18E8C
MOV             R1, R3
LDR             R0, =aDevS_0 ; "/dev/%s"
BL              sub_177E4
STR             R0, [R4,#0xC]

loc_18E9C               ; fd
MOV             R0, #0
BL              close
MOVW            R1, #0x802
LDR             R0, [R4,#0xC]
BL              sub_175D8
MOV             R2, #0  ; group
MOV             R1, R2  ; owner
MOV             R0, R2  ; fd
BL              fchown
MOV             R1, #0x190 ; mode
MOV             R0, #0  ; fd
BL              fchmod

loc_18ECC
LDR             R0, [R4,#0xC]
BL              sub_60EB8
MOV             R1, R0
LDR             R0, =aGettyS ; "getty: %s"
BL              sub_177E4
STR             R0, [R8]
MOV             R0, #0
BL              sub_16E68
MOV             R1, #1
MOV             R0, #0
BL              sub_17688
MOV             R1, #2
MOV             R0, #0
BL              sub_17688
MOV             R0, #0
BL              tcgetsid
SUBS            R3, R5, R0
MOVNE           R3, #1
ORRS            R3, R3, R0,LSR#31
BEQ             loc_18F50
MOV             R2, #1
MOVW            R1, #0x540E ; request
MOV             R0, #0  ; fd
BL              ioctl
CMP             R0, #0
BGE             loc_18F50
LDR             R0, =aTiocsctty ; "TIOCSCTTY"

loc_18F38
BL              sub_16B40

loc_18F3C
MOV             R0, R6
BL              sub_17B34
CMP             R0, #0
STRNE           R0, [R4,#0xC]
B               loc_18ECC

loc_18F50               ; pgrp_id
MOV             R1, R5
MOV             R0, #0  ; fd
BL              tcsetpgrp
CMP             R0, #0
LDRLT           R0, =aTcsetpgrp_0 ; "tcsetpgrp"
BLT             loc_18F38
ADD             R8, R4, #0x48 ; 'H'
MOV             R0, #0  ; fd
MOV             R1, R8  ; termios_p
BL              tcgetattr
CMP             R0, #0
LDRLT           R0, =aTcgetattr_0 ; "tcgetattr"
BLT             loc_18F38
LDR             R3, [R4,#8]
MOV             R0, R5
LDR             R2, [R4,#0xC]
MOV             R1, #6
STR             R3, [SP,#0x24+var_24]
LDR             R3, =aLogin ; "LOGIN"
BL              sub_61694
LDR             R1, =sub_18140
MOV             R0, #0xE
LDR             R5, [R4,#0x1C]
BL              sub_18288
MOV             R0, #5  ; seconds
BL              alarm
MOV             R0, #0  ; fd
BL              tcdrain
MOV             R0, #0  ; seconds
BL              alarm
MOV             R1, #2  ; queue_selector
MOV             R0, #0  ; fd
BL              tcflush
CMP             R5, #0
BEQ             loc_18FE8
MOV             R1, R5  ; speed
MOV             R0, R8  ; termios_p
BL              cfsetspeed

loc_18FE8
LDR             R2, [R4,#0x50]
LDR             R3, =0x500F134F
LDR             R6, =dword_7DBC0
AND             R3, R3, R2
ORR             R2, R3, #0x4B0
STR             R2, [R4,#0x50]
LDR             R2, [R6]
TST             R2, #2
ORRNE           R3, R3, #0xCB0
STRNE           R3, [R4,#0x50]
TST             R2, #0x10
LDRNE           R3, [R4,#0x50]
MOV             R2, #5
STR             R2, [R4,#0x4C]
MOV             R2, #0x100
STRH            R2, [R4,#0x5E]
ORRNE           R3, R3, #0x80000000
STRNE           R3, [R4,#0x50]
MOV             R3, #0
STR             R3, [R4,#0x48]
STR             R3, [R4,#0x54]
STRB            R3, [R4,#0x58]
BL              sub_18B84
LDR             R3, [R6]
TST             R3, #1
BEQ             loc_19058
LDR             R0, [R4,#0x10]
BL              sub_1710C

loc_19058
LDR             R3, [R6]
TST             R3, #0x80
BEQ             loc_190E4
MOV             R9, #0
ADD             R5, R4, #0x84
STRB            R9, [R4,#0x5F]
BL              sub_18B84
MOV             R0, #1  ; seconds
BL              sleep
MOV             R2, #0x7F ; nbytes
MOV             R1, R5  ; buf
MOV             R0, R9  ; fd
BL              sub_1800C
CMP             R0, #0
BLE             loc_190D8
ADD             R3, R4, R0
MOV             R1, R5
STRB            R9, [R3,#0x84]
ADD             R3, R5, R0

loc_190A4
CMP             R1, R3
MOV             R0, R1
BCS             loc_190D8
LDRB            R2, [R0]
ADD             R1, R1, #1
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #9
BHI             loc_190A4
BL              sub_18B64
SUBS            R1, R0, #0 ; speed
BLE             loc_190D8
MOV             R0, R8  ; termios_p
BL              cfsetspeed

loc_190D8
MOV             R3, #1
STRB            R3, [R4,#0x5F]
BL              sub_18B84

loc_190E4               ; handler
LDR             R1, =handler
MOV             R0, #0xE ; sig
BL              signal
LDR             R0, [R4] ; seconds
BL              alarm
LDR             R3, [R6]
TST             R3, #0x200
BNE             loc_191AC

loc_19104
LDR             R5, [R6]
ANDS            R5, R5, #0x400
BNE             loc_19294
LDR             R10, =dword_7DB94

loc_19114
LDR             R9, =asc_64E92 ; "\b \b"
LDR             R0, =0x186A0 ; useconds
BL              usleep
MOV             R1, #0  ; queue_selector
MOV             R0, R1  ; fd
BL              tcflush

loc_1912C
LDR             R3, [R6]
TST             R3, #0x20
BNE             loc_19144
LDR             R1, [R4,#0xC]
LDR             R0, [R4,#0x14]
BL              sub_5D328

loc_19144
BL              sub_5D4C4
ADD             R7, R4, #0x84
LDR             R3, [R10]
MOV             R11, R7
STR             R3, [SP,#0x24+var_10]

loc_19158
LDR             R3, [SP,#0x24+var_10]
MOV             R2, #4
ADD             R1, SP, #0x24+buf ; buf
MOV             R0, #0  ; fd
STR             R2, [R3]
MOV             R2, #1  ; nbytes
BL              read
CMP             R0, #0
BGT             loc_191D0
BL              sub_18BB0
LDR             R3, [SP,#0x24+var_10]
LDR             R3, [R3]
SUB             R3, R3, #4
CMP             R3, #1
BHI             loc_191C8

loc_19194               ; status
MOV             R0, #0
BL              exit

loc_1919C
LDRB            R3, [SP,#0x24+buf]
CMP             R3, #0xD
CMPNE           R3, #0xA
BEQ             loc_19104

loc_191AC               ; nbytes
MOV             R2, #1
ADD             R1, SP, #0x24+buf ; buf
MOV             R0, #0  ; fd
BL              sub_1800C
CMP             R0, #1
BEQ             loc_1919C
B               loc_19104

loc_191C8
LDR             R0, =aReadError ; "read error"
B               loc_18F38

loc_191D0
LDRB            R2, [SP,#0x24+buf]
CMP             R2, #8
BEQ             loc_19254
BHI             loc_191FC
CMP             R2, #0
BEQ             loc_192E8
SUB             R1, R2, #3
CMP             R1, #1
BHI             loc_19210
BL              sub_18BB0
B               loc_19194

loc_191FC
CMP             R2, #0xD
BEQ             loc_19278
BHI             loc_19244
CMP             R2, #0xA
BEQ             loc_19278

loc_19210
CMP             R2, #0x1F
BLS             loc_19158
SUB             R2, R11, R7
CMP             R2, #0x7E ; '~'
BHI             loc_19158
MOV             R2, #1  ; n
ADD             R1, SP, #0x24+buf ; buf
MOV             R0, R2  ; fd
ADD             R11, R11, #1
BL              sub_17FB8
LDRB            R2, [SP,#0x24+buf]
STRB            R2, [R11,#-1]
B               loc_19158

loc_19244
CMP             R2, #0x15
BEQ             loc_192DC
CMP             R2, #0x7F
BNE             loc_19210

loc_19254
CMP             R7, R11
STRB            R2, [R4,#0x5B]
BCS             loc_19158
MOV             R2, #3  ; n
MOV             R1, R9  ; buf
MOV             R0, #1  ; fd
SUB             R11, R11, #1
BL              sub_17FB8
B               loc_19158

loc_19278
MOV             R2, #0
STRB            R2, [R11]
LDRB            R3, [SP,#0x24+buf]
STRB            R3, [R4,#0x44]
LDRB            R3, [R4,#0x84]
CMP             R3, R2
BEQ             loc_1912C

loc_19294               ; seconds
MOV             R0, #0
BL              alarm
BL              sub_18BB0
LDR             R1, [R4,#4] ; arg
MOV             R3, #0
STR             R3, [SP,#0x24+var_24]
MOV             R3, R7
LDR             R2, =asc_64E96 ; "--"
MOV             R0, R1  ; file
BL              execlp
LDR             R1, [R4,#4]
LDR             R0, =aCanTExecuteS ; "can't execute '%s'"
B               loc_18E54

loc_192C8
SUB             R11, R11, #1
MOV             R2, #3  ; n
MOV             R1, R9  ; buf
MOV             R0, #1  ; fd
BL              sub_17FB8

loc_192DC
CMP             R7, R11
BCC             loc_192C8
B               loc_19158

loc_192E8
LDR             R1, [R4,#0x18]
CMP             R1, #1
BLE             loc_19158
ADD             R0, R5, #1
BLX             sub_161AC
ADD             R3, R4, R1,LSL#2
MOV             R5, R1
MOV             R0, R8  ; termios_p
LDR             R1, [R3,#0x1C] ; speed
BL              cfsetspeed
BL              sub_18B84
B               loc_19114
; End of function sub_18C40

off_19318 DCD dword_7DB98
off_1931C DCD aBinLogin ; "/bin/login"
off_19320 DCD aILhFHilMtWn ; "^I:LH:f:hil:mt:+wn"
off_19324 DCD aEtcIssue ; "/etc/issue"
off_19328 DCD optind
off_1932C DCD aNoCarrier+0xA ; ","
off_19330 DCD aGotTerm+6 ; "TERM"
off_19334 DCD aSetsid_0 ; "setsid"
off_19338 DCD aDevTty   ; "/dev/tty"
off_1933C DCD aDevNull  ; "/dev/null"
off_19340 DCD off_7DB9C
off_19344 DCD sub_18B5C
off_19348 DCD dword_7DB90
off_1934C DCD off_7D4C0 ; "\n"
off_19350 DCD aLoginTimedOutA+0x22 ; "\r\n"
off_19354 DCD dword_7D4BC
off_19358 DCD aStdinIsNotOpen ; "stdin is not open for read/write"
off_1935C DCD aBadSpeedS ; "bad speed: %s"
off_19360 DCD aTooManyAlterna ; "too many alternate speeds"
off_19364 DCD aDevS_0   ; "/dev/%s"
off_19368 DCD aGettyS   ; "getty: %s"
off_1936C DCD aTiocsctty ; "TIOCSCTTY"
off_19370 DCD aTcsetpgrp_0 ; "tcsetpgrp"
off_19374 DCD aTcgetattr_0 ; "tcgetattr"
off_19378 DCD aLogin    ; "LOGIN"
off_1937C DCD sub_18140
dword_19380 DCD 0x500F134F
off_19384 DCD dword_7DBC0
off_19388 DCD handler
off_1938C DCD dword_7DB94
off_19390 DCD asc_64E92 ; "\b \b"
; const __useconds_t useconds
useconds DCD 0x186A0
off_19398 DCD aReadError ; "read error"
off_1939C DCD asc_64E96 ; "--"
off_193A0 DCD aCanTExecuteS ; "can't execute '%s'"


; Attributes: noreturn

; void __fastcall __noreturn sub_193A4(int)
sub_193A4
PUSH            {R4,LR}
MOV             R0, #1
BL              sub_16E34
LDR             R0, =buf ; termios_p
BL              sub_1729C
MOV             R1, #0x3C ; '<'
LDR             R0, =aLoginTimedOutA ; "\r\nLogin timed out after %u seconds\r"...
BL              printf
BL              sub_177D8
MOV             R0, #1
BL              sub_16E68
MOV             R0, #0  ; status
BL              _exit
; End of function sub_193A4

off_193D8 DCD buf
off_193DC DCD aLoginTimedOutA ; "\r\nLogin timed out after %u seconds\r"...



; int __fastcall sub_193E0(int, char **)
sub_193E0

var_54= -0x54
var_4C= -0x4C
var_48= -0x48
name= -0x44
s= -0x43

PUSH            {R4-R11,LR}
MOV             R5, #0
SUB             SP, SP, #0x54
MOV             R4, R1
STR             R5, [SP,#0x54+var_4C]
BL              sub_5D500
MOV             R9, R0
MOV             R0, #0xC
BL              sub_61B48
ADD             R3, SP, #0x54+var_4C
ADD             R2, SP, #0x54+var_48
LDR             R1, =aFHP ; "f:h:p"
MOV             R0, R4
STRB            R5, [SP,#0x54+name]
BL              sub_593CC
TST             R0, #1
MOV             R5, R0
BEQ             loc_19448
CMP             R9, #0
BEQ             loc_19438
LDR             R0, =aFIsForRootOnly ; "-f is for root only"
BL              sub_16DBC

loc_19438
MOV             R2, #0x40 ; '@'
LDR             R1, [SP,#0x54+var_48]
ADD             R0, SP, #0x54+name
BL              sub_60B34

loc_19448
LDR             R3, =optind
LDR             R3, [R3]
LDR             R1, [R4,R3,LSL#2]
CMP             R1, #0
BEQ             loc_19468
MOV             R2, #0x40 ; '@'
ADD             R0, SP, #0x54+name
BL              sub_60B34

loc_19468               ; termios_p
LDR             R1, =buf
MOV             R0, #0  ; fd
BL              tcgetattr
CMP             R0, #0
BLT             loc_19770
MOV             R0, #1  ; fd
BL              isatty
CMP             R0, #0
BEQ             loc_19770
LDR             R1, =sub_193A4 ; handler
MOV             R0, #0xE ; sig
BL              signal
MOV             R0, #0x3C ; '<' ; seconds
BL              alarm
MOV             R0, #0
BL              sub_17B34
CMP             R0, #0
BNE             loc_194B8
LDR             R0, =aUnknown ; "UNKNOWN"
BL              sub_174F8

loc_194B8
BL              sub_60EB8
LDR             R2, [SP,#0x54+var_4C]
MOV             R6, R0
MOV             R1, R0
CMP             R2, #0
BEQ             loc_19530
LDR             R0, =aOnSFromS ; " on '%s' from '%s'"
BL              sub_177E4

loc_194D8
LDR             R3, =dword_7DB90
MOV             R8, #3
LDR             R10, =aUnknown ; "UNKNOWN"
MOV             R7, R0
LDR             R11, =aLoginIncorrect ; "Login incorrect"
MOV             R2, #0x20 ; ' ' ; facility
MOV             R1, #3  ; option
LDR             R0, [R3] ; ident
BL              openlog

loc_194FC               ; queue_selector
MOV             R1, #0
MOV             R0, R1  ; fd
BL              tcflush
LDRB            R3, [SP,#0x54+name]
CMP             R3, #0
BNE             loc_195B8
MOV             R4, #0xA

loc_19518
BL              sub_5D4C4

loc_1951C
BL              getchar_unlocked
CMN             R0, #1
BNE             loc_1953C

loc_19528               ; status
MOV             R0, #1
BL              exit

loc_19530
LDR             R0, =aOnS ; " on '%s'"
BL              sub_177E4
B               loc_194D8

loc_1953C
CMP             R0, #0xA
BNE             loc_19550
SUBS            R4, R4, #1
BEQ             loc_19528
B               loc_19518

loc_19550
UXTB            R0, R0
SUB             R3, R0, #9
CMP             R0, #0x20 ; ' '
CMPNE           R3, #4
BLS             loc_1951C
LDR             R3, =stdin
MOV             R1, #0x3E ; '>'
STRB            R0, [SP,#0x54+name]
ADD             R0, SP, #0x54+s
LDR             R2, [R3]
BL              fgets_unlocked
CMP             R0, #0
BEQ             loc_19528
MOV             R1, #0xA ; c
ADD             R0, SP, #0x54+s ; s
BL              strchr
CMP             R0, #0
BEQ             loc_19528
ADD             R3, SP, #0x54+s

loc_1959C
MOV             R2, R3
ADD             R3, R3, #1
LDRB            R1, [R2]
CMP             R1, #0x20 ; ' '
BHI             loc_1959C
MOV             R3, #0
STRB            R3, [R2]

loc_195B8               ; name
ADD             R0, SP, #0x54+name
BL              getpwnam
SUBS            R4, R0, #0
BNE             loc_195E8
MOV             R1, R10 ; src
ADD             R0, SP, #0x54+name ; dest
BL              strcpy

loc_195D4
MOV             R0, R4
BL              sub_585DC
CMP             R0, #0
BGT             loc_19648
B               loc_195FC

loc_195E8
LDR             R3, [R4,#4]
LDRB            R3, [R3]
CMP             R3, #0x2A ; '*'
CMPNE           R3, #0x21 ; '!'
BNE             loc_19624

loc_195FC
MOV             R0, #3
BIC             R5, R5, #1
BL              sub_57988
MOV             R0, R11 ; s
BL              puts
SUBS            R8, R8, #1
BEQ             loc_1975C
MOV             R3, #0
STRB            R3, [SP,#0x54+name]
B               loc_194FC

loc_19624
TST             R5, #1
BNE             loc_19648
LDR             R3, [R4,#8]
CMP             R3, #0
BEQ             loc_19748

loc_19638
LDR             R3, [R4,#4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_195D4

loc_19648               ; seconds
MOV             R0, #0
BL              alarm
LDR             R3, [R4,#8]
CMP             R3, #0
BEQ             loc_19670
LDR             R0, =aEtcNologin ; "/etc/nologin"
BL              sub_61C9C
SUBS            R8, R0, #0
MOVNE           R5, #1
BNE             loc_19798

loc_19670               ; group
LDR             R2, [R4,#0xC]
MOV             R0, #0  ; fd
LDR             R1, [R4,#8] ; owner
BL              fchown
MOV             R1, #0x180 ; mode
MOV             R0, #0  ; fd
BL              fchmod
BL              getpid
CMP             R9, #0
MOV             R1, #7
LDREQ           R3, [SP,#0x54+var_4C]
MOVNE           R3, #0
MOV             R2, R6
STR             R3, [SP,#0x54+var_54]
ADD             R3, SP, #0x54+name
BL              sub_61694
MOV             R0, R4
BL              sub_57CD8
TST             R5, #4
MOV             R2, R4
MOVEQ           R1, #3
MOVNE           R1, #1
LDR             R0, [R4,#0x18]
BL              sub_60C00
MOV             R1, #0  ; type
LDR             R0, =aHushlogin ; ".hushlogin"
BL              access
CMP             R0, #0
BEQ             loc_19710
MOV             R1, #0
LDR             R0, =aEtcMotd ; "/etc/motd"
BL              open64
SUBS            R5, R0, #0
BLT             loc_19710
BL              sub_177D8
MOV             R1, #1
MOV             R0, R5
BL              sub_17FAC
MOV             R0, R5  ; fd
BL              close

loc_19710
LDR             R3, [R4,#8]
CMP             R3, #0
BNE             loc_1972C
MOV             R2, R7
LDR             R1, =aRootLoginS ; "root login%s"
MOV             R0, #6  ; pri
BL              syslog

loc_1972C               ; handler
MOV             R1, #0
MOV             R0, #2  ; sig
BL              signal
MOV             R2, #0
MOV             R1, #1
LDR             R0, [R4,#0x18]
BL              sub_609D8

loc_19748
MOV             R0, R6
BL              sub_60B70
CMP             R0, #0
BEQ             loc_195FC
B               loc_19638

loc_1975C
MOV             R3, R7
ADD             R2, SP, #0x54+name
LDR             R1, =aInvalidPasswor ; "invalid password for '%s'%s"
MOV             R0, #4  ; pri
BL              syslog

loc_19770
MOV             R0, #1
ADD             SP, SP, #0x54 ; 'T'
POP             {R4-R11,PC}

loc_1977C
CMP             R4, #0xA
BNE             loc_1978C
MOV             R0, #0xD ; c
BL              j_putchar_unlocked

loc_1978C
MOV             R5, #0
MOV             R0, R4  ; c
BL              j_putchar_unlocked

loc_19798               ; stream
MOV             R0, R8
BL              getc_unlocked
CMN             R0, #1
MOV             R4, R0
BNE             loc_1977C
CMP             R5, #0
BEQ             loc_197BC
LDR             R0, =aSystemClosedFo ; "\r\nSystem closed for routine maintenan"...
BL              puts

loc_197BC               ; stream
MOV             R0, R8
BL              fclose
BL              sub_177D8
MOV             R0, #1  ; fd
BL              tcdrain
B               loc_19528
; End of function sub_193E0

off_197D4 DCD aFHP      ; "f:h:p"
off_197D8 DCD aFIsForRootOnly ; "-f is for root only"
off_197DC DCD optind
off_197E0 DCD buf
off_197E4 DCD sub_193A4
off_197E8 DCD aUnknown  ; "UNKNOWN"
off_197EC DCD aOnSFromS ; " on '%s' from '%s'"
off_197F0 DCD dword_7DB90
off_197F4 DCD aLoginIncorrect ; "Login incorrect"
off_197F8 DCD aOnS      ; " on '%s'"
off_197FC DCD stdin
off_19800 DCD aEtcNologin ; "/etc/nologin"
off_19804 DCD aHushlogin ; ".hushlogin"
off_19808 DCD aEtcMotd  ; "/etc/motd"
off_1980C DCD aRootLoginS ; "root login%s"
off_19810 DCD aInvalidPasswor ; "invalid password for '%s'%s"
off_19814 DCD aSystemClosedFo ; "\r\nSystem closed for routine maintenan"...



; int __fastcall sub_19818(int, char **)
sub_19818

result= -0x154
var_14C= -0x14C
var_148= -0x148
var_140= -0x140
var_13C= -0x13C
var_134= -0x134
result_buf= -0x128
buffer= -0x104
var_4= -4

LDR             R3, =aSha512 ; "sha512"
MOV             R2, #0x20 ; ' ' ; facility
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x154
LDR             R6, =dword_7D4BC
ADD             R5, SP, #0x154+var_4
MOV             R4, R1
MOV             R1, #0  ; option
STR             R3, [R5,#-0x13C]!
MOV             R3, #3
STR             R3, [R6]
LDR             R3, =dword_7DB90
LDR             R0, [R3] ; ident
BL              openlog
MOV             R2, R5
LDR             R1, =aALud ; "a:lud"
MOV             R0, R4
BL              sub_593CC
LDR             R3, =optind
MOV             R8, R0
LDR             R5, [R3]
BL              getuid
ANDS            R7, R8, #0xE
MOV             R10, R0
STR             R6, [SP,#0x154+var_148]
BEQ             loc_19898
CMP             R0, #0
BNE             loc_19894
LDR             R3, [R4,R5,LSL#2]
CMP             R3, #0
BNE             loc_19898

loc_19894
BL              sub_162F0

loc_19898
MOV             R0, R10
BL              sub_57ADC
BL              sub_174F8
LDR             R6, [R4,R5,LSL#2]
MOV             R11, R0
CMP             R6, #0
MOVEQ           R6, R0
MOV             R0, R6
BL              sub_57A70
CMP             R10, #0
MOV             R4, R0
BEQ             loc_198E4
LDR             R3, [R0,#8]
CMP             R3, R10
BEQ             loc_198E4
LDR             R0, =aSCanTChangePas ; "%s can't change password for %s"
MOV             R2, R6
MOV             R1, R11

loc_198E0
BL              sub_16DBC

loc_198E4
LDR             R2, =dword_7DB94
MOV             R3, #0
ADD             R9, SP, #0x154+var_13C
STR             R3, [SP,#0x154+var_13C]
ADD             R1, SP, #0x154+result_buf ; result_buf
LDR             R2, [R2]
STR             R3, [R2]
MOV             R3, #0x100 ; buflen
STR             R2, [SP,#0x154+var_14C]
ADD             R2, SP, #0x154+buffer ; buffer
STR             R9, [SP,#0x154+result] ; result
LDR             R0, [R4] ; name
BL              getspnam_r
CMP             R0, #0
BNE             loc_19948
LDR             R5, [SP,#0x154+var_13C]
CMP             R5, #0
BEQ             loc_19948
LDR             R0, [R5] ; s1
LDR             R1, [R4] ; s2
BL              strcmp
CMP             R0, #0
LDREQ           R3, [R5,#4]
STREQ           R3, [R4,#4]
BEQ             loc_1996C

loc_19948
LDR             R3, [SP,#0x154+var_14C]
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_1996C
LDR             R3, =aEtcPasswd ; "/etc/passwd"
MOV             R1, R6
LDR             R2, =aEtcShadow ; "/etc/shadow"
LDR             R0, =aNoRecordOfSInS ; "no record of %s in %s, using %s"
BL              sub_16AF4

loc_1996C
LDR             R1, [R4,#4]
CMP             R7, #0
LDRB            R3, [R1]
SUB             R3, R3, #0x21 ; '!'
UXTB            R3, R3
BNE             loc_19AF8
MOVS            R5, R10
MOV             R1, R6
MOVNE           R5, #1
CMP             R3, #0
MOVEQ           R3, R5
MOVNE           R3, #0
CMP             R3, #0
LDRNE           R0, =aCanTChangeLock ; "can't change locked password for %s"
BNE             loc_19AD0
LDR             R0, =aChangingPasswo ; "Changing password for %s\n"
BL              printf
LDR             R3, [SP,#0x154+var_140]
CMP             R10, #0
STR             R3, [SP,#0x154+var_14C]
BEQ             loc_19A28
LDR             R3, [R4,#4]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_19A28
LDR             R0, =aOldPassword ; "Old password: "
BL              sub_578F0
SUBS            R10, R0, #0
BEQ             loc_19A1C
MOV             R2, #1
LDR             R1, [R4,#4]
BL              sub_5FBFC
LDR             R1, [R4,#4] ; s2
BL              strcmp
CMP             R0, #0
BEQ             loc_19A2C
LDR             R2, [R4]
MOV             R0, #4  ; pri
LDR             R1, =aIncorrectPassw ; "incorrect password for %s"
BL              syslog
MOV             R0, #3
BL              sub_57988
LDR             R0, =aIncorrectPassw_0 ; "Incorrect password"
BL              puts

loc_19A1C
MOV             R4, R7
MOV             R5, R7
B               loc_19A9C

loc_19A28
LDR             R10, =(asc_6B39D+1) ; ""

loc_19A2C
LDR             R0, =aNewPassword ; "New password: "
BL              sub_578F0
SUBS            R7, R0, #0
MOVEQ           R4, R7
MOVEQ           R5, R7
BEQ             loc_19A9C
MOV             R2, R4
MOV             R1, R7
MOV             R0, R10
BL              sub_5DBFC
CMP             R0, #0
MOVNE           R4, R5
MOVEQ           R4, #0
CMP             R4, #0
MOVNE           R4, #0
MOVNE           R5, R4
BNE             loc_19A9C
LDR             R0, =aRetypePassword ; "Retype password: "
BL              sub_578F0
SUBS            R5, R0, #0
MOVEQ           R4, R5
BEQ             loc_19A9C
MOV             R1, R7  ; s2
BL              strcmp
CMP             R0, #0
BEQ             loc_19AD4
LDR             R0, =aPasswordsDonTM ; "Passwords don't match"
BL              puts

loc_19A9C
MOV             R0, R10
BL              sub_5DB1C
MOV             R0, R7
BL              sub_5DB1C
MOV             R0, R5
BL              sub_5DB1C
CMP             R4, #0
BNE             loc_19B30
LDR             R0, =aPasswordForSIs ; "password for %s is unchanged"
MOV             R1, R6
LDR             R2, [SP,#0x154+var_148]
MOV             R3, #1
STR             R3, [R2]

loc_19AD0
BL              sub_16DBC

loc_19AD4
LDR             R1, [SP,#0x154+var_14C]
MOV             R0, R9
BL              sub_5FB7C
MOV             R2, #1
MOV             R1, R9
MOV             R0, R7
BL              sub_5FBFC
MOV             R4, R0
B               loc_19A9C

loc_19AF8
TST             R8, #2
BEQ             loc_19BC4
CMP             R3, #0
BNE             loc_19B24

loc_19B08
LDR             R3, =(asc_6B39D+1) ; ""
TST             R8, #4
LDR             R2, =(aRun_0+1) ; "un"
MOV             R1, R6
LDR             R0, =aPasswordForSIs_0 ; "password for %s is already %slocked"
MOVEQ           R2, R3
B               loc_198E0

loc_19B24
LDR             R0, =aS_0 ; "!%s"
BL              sub_177E4

loc_19B2C
MOV             R4, R0

loc_19B30
LDR             R2, =0xEA6000
MOV             R3, #0
MOV             R1, R9
MOV             R0, #1
STRD            R2, R3, [SP,#0x154+var_134]
STRD            R2, R3, [SP,#0x154+var_13C]
BL              setrlimit64
MOV             R1, #1
MOV             R0, #0xE
BL              sub_18184
MOV             R0, #0x3F ; '?' ; mask
BL              umask
MOV             R0, #0
BL              sub_178E0
MOV             R2, R4
MOV             R1, R6
LDR             R0, =aEtcShadow ; "/etc/shadow"
BL              sub_611D0
CMP             R0, #0
BGT             loc_19BF0
BNE             loc_19BF8

loc_19B84
MOV             R1, R6
MOV             R2, R4
LDR             R0, =aEtcPasswd ; "/etc/passwd"
BL              sub_611D0
CMP             R0, #0
LDRLT           R1, =aEtcPasswd ; "/etc/passwd"
BLT             loc_19BFC
MOV             R2, R11
MOV             R1, R6
LDR             R0, =aPasswordForSCh ; "password for %s changed by %s"
BL              sub_16DDC
CMP             R4, #0
BEQ             loc_19B08
MOV             R0, #0
ADD             SP, SP, #0x154
POP             {R4-R11,PC}

loc_19BC4
TST             R8, #4
BEQ             loc_19BE0
CMP             R3, #0
BNE             loc_19B08
ADD             R0, R1, #1
BL              sub_174F8
B               loc_19B2C

loc_19BE0
TST             R8, #8
LDR             R4, =(asc_6B39D+1) ; ""
MOVEQ           R4, #0
B               loc_19B30

loc_19BF0
LDR             R4, =(aUnrecognizedFi_0+0x22) ; "x"
B               loc_19B84

loc_19BF8
LDR             R1, =aEtcShadow ; "/etc/shadow"

loc_19BFC
LDR             R0, =aCanTUpdatePass ; "can't update password file %s"
B               loc_19AD0
; End of function sub_19818

off_19C04 DCD aSha512   ; "sha512"
off_19C08 DCD dword_7D4BC
off_19C0C DCD dword_7DB90
off_19C10 DCD aALud     ; "a:lud"
off_19C14 DCD optind
off_19C18 DCD aSCanTChangePas ; "%s can't change password for %s"
off_19C1C DCD dword_7DB94
off_19C20 DCD aEtcPasswd ; "/etc/passwd"
off_19C24 DCD aEtcShadow ; "/etc/shadow"
off_19C28 DCD aNoRecordOfSInS ; "no record of %s in %s, using %s"
off_19C2C DCD aCanTChangeLock ; "can't change locked password for %s"
off_19C30 DCD aChangingPasswo ; "Changing password for %s\n"
off_19C34 DCD aOldPassword ; "Old password: "
off_19C38 DCD aIncorrectPassw ; "incorrect password for %s"
off_19C3C DCD aIncorrectPassw_0 ; "Incorrect password"
off_19C40 DCD asc_6B39D+1 ; ""
off_19C44 DCD aNewPassword ; "New password: "
off_19C48 DCD aRetypePassword ; "Retype password: "
off_19C4C DCD aPasswordsDonTM ; "Passwords don't match"
off_19C50 DCD aPasswordForSIs ; "password for %s is unchanged"
off_19C54 DCD aRun_0+1  ; "un"
off_19C58 DCD aPasswordForSIs_0 ; "password for %s is already %slocked"
off_19C5C DCD aS_0      ; "!%s"
dword_19C60 DCD 0xEA6000
off_19C64 DCD aPasswordForSCh ; "password for %s changed by %s"
off_19C68 DCD aUnrecognizedFi_0+0x22 ; "x"
off_19C6C DCD aCanTUpdatePass ; "can't update password file %s"



; int sub_19C70()
sub_19C70
LDR             R0, =dword_7DBC0
LDR             R3, =dword_7DB98
LDR             R0, [R0]
LDR             R2, [R3]
TST             R0, #0x80
LDR             R1, [R2,#0x14]
LDR             R3, [R2]
BEQ             loc_19CC0
CMP             R1, R3
BCC             loc_19CD8
LDR             R1, [R2,#0x34]
LDR             R3, [R1,R3,LSL#2]
LDR             R0, [R3,#-4]
LDR             R3, [R2,#0x1C]
ADD             R3, R0, R3
LDR             R0, [R2,#0x18]
CMP             R0, R3
MOVHI           R0, #0
MOVLS           R0, #1
BX              LR

loc_19CC0
LDR             R0, [R2,#0x1C]
ADD             R0, R3, R0
CMP             R0, R1
MOVCC           R0, #0
MOVCS           R0, #1
BX              LR

loc_19CD8
MOV             R0, #1
BX              LR
; End of function sub_19C70

off_19CE0 DCD dword_7DBC0
off_19CE4 DCD dword_7DB98



; int __fastcall sub_19CE8(int)
sub_19CE8
LDR             R3, =dword_7DB98
LDR             R3, [R3]
LDR             R2, [R3,#0x14]
CMP             R2, R0
SUBLS           R0, R2, #1
CMP             R0, #0
LDRGE           R3, [R3,#0x34]
LDRGE           R3, [R3,R0,LSL#2]
LDRGE           R0, [R3,#-4]
ADDGE           R0, R0, #1
MOVLT           R0, #0
BX              LR
; End of function sub_19CE8

off_19D18 DCD dword_7DB98



; int sub_19D1C()
sub_19D1C
PUSH            {R4,LR}
BL              sub_177D8
MOV             R1, #0  ; optional_actions
LDR             R3, =dword_7DB98
POP             {R4,LR}
LDR             R3, [R3]
ADD             R2, R3, #0x8C ; termios_p
LDR             R0, [R3,#4] ; fd
B               tcsetattr
; End of function sub_19D1C

off_19D40 DCD dword_7DB98



; int sub_19D44()
sub_19D44
LDR             R3, =dword_7DB98
LDR             R0, =aU0hK ; "\x1B[%u;0H\x1B[K"
LDR             R3, [R3]
LDR             R1, [R3,#0x1C]
ADD             R1, R1, #2
B               printf
; End of function sub_19D44

off_19D5C DCD dword_7DB98
off_19D60 DCD aU0hK     ; "\x1B[%u;0H\x1B[K"


; Attributes: noreturn

; void __fastcall __noreturn sub_19D64(int)
sub_19D64
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_19D1C
LDR             R3, =dword_7DB98
LDR             R3, [R3]
LDR             R2, [R3,#8]
TST             R2, #0x800
BNE             loc_19D8C
LDR             R0, [R3,#4]
BL              sub_16E68

loc_19D8C
BL              sub_19D44
CMP             R4, #0
BGE             loc_19DA0
RSB             R0, R4, #0
BL              sub_18260

loc_19DA0               ; status
MOV             R0, R4
BL              exit
; End of function sub_19D64

off_19DA8 DCD dword_7DB98


; Attributes: noreturn

; void __fastcall __noreturn sub_19DAC(int)
sub_19DAC
PUSH            {R4,LR}
RSB             R0, R0, #0
BL              sub_19D64
; End of function sub_19DAC




; int __fastcall sub_19DB8(const char *)
sub_19DB8
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_19D44
MOV             R2, R4
LDR             R3, =dword_7DB98
LDR             R0, =(aSS7mSM+6) ; format
POP             {R4,LR}
LDR             R3, [R3]
LDR             R1, [R3,#0x20]
SUB             R1, R1, #1
B               printf
; End of function sub_19DB8

off_19DE4 DCD dword_7DB98
off_19DE8 DCD aSS7mSM+6 ; "\x1B[7m%.*s\x1B[m"



; char *__fastcall sub_19DEC(char *result)
sub_19DEC

eflags= -8

LDR             R3, =dword_7DB98
PUSH            {R0,R1,R4-R8,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0x80]
CMP             R3, #0
BEQ             loc_19E20
MOV             R6, R0,LSL#2
MOV             R5, R0
ADD             R7, R4, #0x60 ; '`'
MOV             R8, #0

loc_19E14
LDR             R3, [R4,#0x14]
CMP             R3, R5
BCS             loc_19E28

loc_19E20
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_19E28
LDR             R1, [R4,#0x34]
MOV             R3, #0  ; pmatch
STR             R8, [SP,#8+eflags] ; eflags
MOV             R2, R3  ; nmatch
MOV             R0, R7  ; preg
LDR             R1, [R1,R6] ; string
BL              regexec
CMP             R0, #0
BNE             loc_19E88
LDR             R2, [R4,#0x5C]
LDR             R0, [R4,#0x50]
CMP             R2, #0
BEQ             loc_19E6C
SUB             R3, R2, #0xC0000001
LDR             R3, [R0,R3,LSL#2]
CMP             R3, R5
BEQ             loc_19E88

loc_19E6C
MOVW            R1, #0x404
BL              sub_62544
LDR             R3, [R4,#0x5C]
STR             R0, [R4,#0x50]
ADD             R2, R3, #1
STR             R2, [R4,#0x5C]
STR             R5, [R0,R3,LSL#2]

loc_19E88
ADD             R5, R5, #1
ADD             R6, R6, #4
B               loc_19E14
; End of function sub_19DEC

off_19E94 DCD dword_7DB98



; void sub_19E98()
sub_19E98

var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1C
LDR             R8, =dword_7DB98
LDR             R3, =0x98967F
LDR             R4, [R8]
LDR             R9, [R4,#0x14]
LDR             R11, [R4,#0x20]
LDRB            R6, [R4,#0x88]
ADD             R2, R9, #1
CMP             R2, R3
BHI             loc_1A1AC
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #8
SUBNE           R11, R11, #8
ADD             R3, R11, #5
MOV             R0, R3
STR             R3, [SP,#0x1C+var_10]
BL              sub_1748C
CMP             R6, #0
ADD             R5, R0, #4
LDR             R3, [R4,#0x14]
BNE             loc_19FC4
LDR             R2, [R4,#0x34]
MOV             R0, R5
LDR             R4, [R2,R3,LSL#2]
MOV             R1, R4
BL              stpcpy
MOV             R10, R0
SUB             R0, R4, #4 ; ptr
BL              free

loc_19F14
LDR             R4, [R8]
MOV             R7, #0
MOV             R6, R7
MOV             R3, #2
STR             R3, [SP,#0x1C+var_18]

loc_19F28
MOV             R3, #0
STRB            R6, [R10]
STR             R3, [R4,#0x88]

loc_19F34
LDR             R1, [R4,#0x28]
LDR             R2, [R4,#0x2C]
CMP             R1, R2
BLT             loc_1A00C
MOV             R0, #0
BL              sub_16E34
LDR             R3, =dword_7DB94
STR             R0, [SP,#0x1C+var_C]
LDR             R3, [R3]
STR             R3, [SP,#0x1C+var_14]

loc_19F5C
LDR             R3, [SP,#0x1C+var_14]
MOV             R2, #0
LDR             R1, =buf ; buf
MOV             R0, #0  ; fd
STR             R2, [R3]
MOV             R2, #0x400 ; nbytes
BL              sub_1800C
LDR             R3, [SP,#0x1C+var_14]
STR             R0, [R4,#0x24]
LDR             R2, [R3]
CMP             R2, #0xB
BNE             loc_19FE0
MOV             R0, #0  ; timer
BL              time
CMP             R7, R0
MOV             R2, R0
BEQ             loc_19FB0
LDR             R3, [SP,#0x1C+var_18]
SUBS            R3, R3, #1
STR             R3, [SP,#0x1C+var_18]
BMI             loc_19FDC

loc_19FB0
STR             R2, [SP,#0x1C+var_8]
BL              sched_yield
LDR             R2, [SP,#0x1C+var_8]
MOV             R7, R2
B               loc_19F5C

loc_19FC4
ADD             R3, R3, #1
MOV             R10, R5
STR             R3, [R4,#0x14]
MOV             R3, #0
STR             R3, [R4,#0x10]
B               loc_19F14

loc_19FDC
MOV             R7, R0

loc_19FE0
LDR             R2, [SP,#0x1C+var_C]
MOV             R1, #4  ; cmd
MOV             R0, #0  ; fd
BL              fcntl
LDR             R2, [R4,#0x24]
STR             R6, [R4,#0x28]
CMP             R2, #0
STR             R2, [R4,#0x2C]
BLE             loc_1A0FC
MOV             R3, #1
STR             R3, [SP,#0x1C+var_18]

loc_1A00C
LDR             R1, [R4,#0x28]
LDR             R2, =buf
LDRB            R2, [R2,R1]
CMP             R2, #8
BNE             loc_1A054
LDR             R0, [R4,#0x10]
CMP             R0, #0
BEQ             loc_1A054
LDRB            R12, [R10,#-1]
CMP             R12, #9
BEQ             loc_1A054
ADD             R1, R1, #1
SUB             R0, R0, #1
STR             R1, [R4,#0x28]
SUB             R10, R10, #1
STR             R0, [R4,#0x10]
STRB            R6, [R10]
B               loc_19F34

loc_1A054
LDR             R0, =dword_7DBC0
LDR             R0, [R0]
TST             R0, #0x100
BEQ             loc_1A0C0
CMP             R2, #0x1B
BEQ             loc_1A0A4
LDR             R0, [R4,#0x84]
CMP             R0, #0
BEQ             loc_1A0C0
SUB             R0, R2, #0x30 ; '0'
UXTB            R0, R0
CMP             R0, #9
BLS             loc_1A0A4
SUB             R0, R2, #0x3B ; ';'
AND             R0, R0, #0xDF
CMP             R0, #0
CMPNE           R2, #0x6D ; 'm'
MOVEQ           R0, #1
MOVNE           R0, #0
BNE             loc_1A0BC

loc_1A0A4
SUBS            R2, R2, #0x6D ; 'm'
ADD             R1, R1, #1
MOVNE           R2, #1
STR             R1, [R4,#0x28]
STR             R2, [R4,#0x84]
B               loc_19F34

loc_1A0BC
STR             R0, [R4,#0x84]

loc_1A0C0
LDR             R0, [R4,#0x10]
CMP             R2, #9
ADD             R12, R0, #1
ADDEQ           R0, R0, #8
BICEQ           R12, R0, #7
CMP             R12, R11
BGT             loc_1A0FC
CMP             R2, #0xA
ADD             R1, R1, #1
STR             R12, [R4,#0x10]
STR             R1, [R4,#0x28]
BNE             loc_1A1B4
MOV             R3, #1
STR             R6, [R4,#0x10]
STR             R3, [R4,#0x88]

loc_1A0FC
LDR             R10, [R8]
MOVW            R1, #0x408
LDR             R2, [R10,#0x14]
LDR             R0, [R10,#0x34]
BL              sub_62544
STR             R0, [R10,#0x34]
MOV             R0, R5  ; s
BL              strlen
ADD             R1, R0, #5
SUB             R0, R5, #4
BL              sub_174B4
LDR             R2, [R10,#0x14]
ADD             R1, R0, #4
LDR             R3, [R10,#0x34]
STR             R1, [R3,R2,LSL#2]
LDR             R3, [R10,#0x18]
STR             R3, [R0]
LDR             R3, [R10,#0x88]
LDR             R2, [R10,#0x14]
CMP             R3, #0
LDRNE           R3, [R10,#0x18]
ADDNE           R3, R3, #1
STRNE           R3, [R10,#0x18]
LDR             R3, =0x98967E
CMP             R2, R3
BLS             loc_1A1CC
MOV             R3, #0
STR             R3, [R10,#0x24]

loc_1A16C
LDR             R3, [R10,#0x24]
CMP             R3, #0
BGE             loc_1A22C
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0xB
MOVEQ           R3, #1
STREQ           R3, [R10,#0x24]
BEQ             loc_1A19C
LDR             R0, =aReadError ; "read error"
BL              sub_19DB8

loc_1A19C
MOV             R0, R9
BL              sub_19DEC
MOV             R3, #0xFFFFFFFF
STR             R3, [R10,#0x58]

loc_1A1AC
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_1A1B4
CMP             R2, #0
STRB            R6, [R10,#1]
MOVEQ           R2, #0xA
ADD             R10, R10, #1
STRB            R2, [R10,#-1]
B               loc_19F34

loc_1A1CC
BL              sub_19C70
CMP             R0, #0
BNE             loc_1A1FC
LDRD            R2, R3, [R10,#0x58]
CMP             R2, R3
BLT             loc_1A1F0
MOV             R0, R9
BL              sub_19DEC
LDR             R9, [R10,#0x14]

loc_1A1F0
LDRD            R2, R3, [R10,#0x58]
CMP             R2, R3
BLT             loc_1A16C

loc_1A1FC
LDR             R3, [R10,#0x24]
CMP             R3, #0
BLE             loc_1A16C
LDR             R3, [R10,#0x14]
LDR             R0, [SP,#0x1C+var_10]
ADD             R3, R3, #1
STR             R3, [R10,#0x14]
BL              sub_1748C
ADD             R5, R0, #4
STR             R6, [R10,#0x10]
MOV             R10, R5
B               loc_19F28

loc_1A22C
LDREQ           R3, [R10,#0x18]
STREQ           R3, [R10,#0x4C]
B               loc_1A19C
; End of function sub_19E98

off_1A238 DCD dword_7DB98
dword_1A23C DCD 0x98967F
off_1A240 DCD dword_7DBC0
off_1A244 DCD dword_7DB94
off_1A248 DCD buf
dword_1A24C DCD 0x98967E
off_1A250 DCD aReadError ; "read error"



; void __fastcall sub_1A254(int)
sub_1A254
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
LDR             R4, [R3]
BGT             loc_1A274
MOV             R3, #0
STR             R3, [R4]
POP             {R4-R6,PC}

loc_1A274
LDR             R2, [R4,#0x34]
LDR             R3, [R4]
LDR             R3, [R2,R3,LSL#2]
LDR             R3, [R3,#-4]
CMP             R3, R5
BCC             loc_1A2B8

loc_1A28C
LDR             R3, [R4]
LDR             R1, [R2,R3,LSL#2]
LDR             R1, [R1,#-4]
CMP             R1, R5
CMPNE           R3, #0
POPLE           {R4-R6,PC}
SUB             R3, R3, #1
STR             R3, [R4]
B               loc_1A28C

loc_1A2B0
ADD             R3, R3, #1
STR             R3, [R4]

loc_1A2B8
LDR             R3, [R4]
LDR             R2, [R4,#0x34]
LDR             R2, [R2,R3,LSL#2]
LDR             R2, [R2,#-4]
CMP             R5, R2
POPEQ           {R4-R6,PC}
LDR             R2, [R4,#0x14]
CMP             R3, R2
BCC             loc_1A2B0
LDR             R3, [R4,#0x24]
CMP             R3, #0
POPLE           {R4-R6,PC}
BL              sub_19E98
B               loc_1A2B8
; End of function sub_1A254

off_1A2F0 DCD dword_7DB98



; void sub_1A2F4()
sub_1A2F4
LDR             R12, =dword_7DBC0
LDR             R3, =dword_7DB98
LDR             R12, [R12]
LDR             R3, [R3]
TST             R12, #0x80
LDR             R1, [R3]
LDR             R0, [R3,#0x1C]
LDR             R2, [R3,#0x14]
BEQ             loc_1A358
CMP             R1, R2
STRHI           R2, [R3]
LDR             R2, [R3,#0x18]
LDR             R1, [R3]
LDR             R3, [R3,#0x34]
ADD             R2, R2, #1
LDR             R3, [R3,R1,LSL#2]
LDR             R3, [R3,#-4]
ADD             R3, R0, R3
CMP             R3, R2
BXLS            LR
PUSH            {R4,LR}
SUB             R0, R2, R0
BL              sub_1A254
POP             {R4,LR}
B               sub_19E98

loc_1A358
ADD             R2, R2, #1
ADD             R1, R1, R0
CMP             R1, R2
SUBHI           R2, R2, R0
STRHI           R2, [R3]
LDR             R2, [R3]
CMP             R2, #0
MOVLT           R2, #0
STRLT           R2, [R3]
BX              LR
; End of function sub_1A2F4

off_1A380 DCD dword_7DBC0
off_1A384 DCD dword_7DB98



; void sub_1A388()
sub_1A388

var_1000= -0x1000

LDR             R3, =dword_7DB98
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x1040
SUB             SP, SP, #0x28
LDR             R4, [R3]
LDR             R3, [R4,#0x4C]
CMN             R3, #2
BCC             loc_1A3D0
MOV             R1, #0
LDR             R0, =aProcSelfFd0 ; "/proc/self/fd/0"
BL              open64
SUBS            R6, R0, #0
BGE             loc_1A3F0
LDR             R3, [R4,#0x4C]
CMN             R3, #1
BEQ             loc_1A3DC

loc_1A3C8
MOV             R3, #0xFFFFFFFD
STR             R3, [R4,#0x4C]

loc_1A3D0
ADD             SP, SP, #0x1040
ADD             SP, SP, #0x28 ; '('
POP             {R4-R8,PC}

loc_1A3DC
MOV             R1, #0
LDR             R0, [R4,#0x44]
BL              open64
SUBS            R6, R0, #0
BLT             loc_1A3C8

loc_1A3F0
MOV             R1, SP
MOV             R0, R6
BLX             sub_62E08
SUBS            R5, R0, #0
BNE             loc_1A418
ADD             R7, SP, #0x1068+var_1000
LDR             R3, [R7,#-0x58]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BEQ             loc_1A474

loc_1A418
MOV             R3, #0xFFFFFFFD
STR             R3, [R4,#0x4C]

loc_1A420               ; fd
MOV             R0, R6
BL              close
B               loc_1A3D0

loc_1A42C
MOV             R3, #0

loc_1A430
LDRB            R2, [R7,R3]
CMP             R2, #0xA
BNE             loc_1A448
ADD             R5, R5, #1
CMP             R5, R8
BEQ             loc_1A46C

loc_1A448
ADD             R3, R3, #1
CMP             R0, R3
BNE             loc_1A430

loc_1A454               ; nbytes
MOV             R2, #0x1000
MOV             R1, R7  ; buf
MOV             R0, R6  ; fd
BL              sub_1800C
CMP             R0, #0
BGT             loc_1A42C

loc_1A46C
STR             R5, [R4,#0x4C]
B               loc_1A420

loc_1A474
LDR             R8, =0x98967F
B               loc_1A454
; End of function sub_1A388

off_1A47C DCD dword_7DB98
off_1A480 DCD aProcSelfFd0 ; "/proc/self/fd/0"
dword_1A484 DCD 0x98967F



; void sub_1A488()
sub_1A488
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0xC]
CMP             R3, #0
POPGE           {R4-R6,PC}
BL              sub_19D44
LDR             R1, [R4,#0x44]
LDR             R0, =a7mS ; "\x1B[7m%s"
BL              printf
LDR             R2, [R4,#0x3C]
CMP             R2, #1
BLS             loc_1A4C8
LDR             R1, [R4,#0x40]
LDR             R0, =aFileIOfI ; " (file %i of %i)"
BL              printf

loc_1A4C8
LDR             R5, [R4]
MOV             R0, R5
BL              sub_19CE8
LDR             R3, =dword_7DBC0
MOV             R1, R0
LDR             R0, [R4,#0x1C]
LDR             R3, [R3]
TST             R3, #0x80
BEQ             loc_1A568
LDR             R5, [R4,#0x18]
ADD             R0, R1, R0
CMP             R0, R5
MOVCC           R5, R0

loc_1A4FC
MOV             R2, R5
LDR             R0, =aLinesII ; " lines %i-%i"
BL              printf
BL              sub_1A388
LDR             R1, [R4,#0x4C]
CMP             R1, #0
BLT             loc_1A520
LDR             R0, =aI ; "/%i"
BL              printf

loc_1A520
BL              sub_19C70
CMP             R0, #0
BEQ             loc_1A578
LDR             R0, =aEnd ; " (END)"
BL              printf
LDR             R2, [R4,#0x3C]
CMP             R2, #1
BLS             loc_1A55C
LDR             R3, [R4,#0x40]
CMP             R2, R3
BEQ             loc_1A55C
LDR             R2, [R4,#0x48]
LDR             R0, =aNextS ; " - next: %s"
LDR             R1, [R2,R3,LSL#2]

loc_1A558
BL              printf

loc_1A55C               ; format
LDR             R0, =(a7mSFileIOfIM+0x16) ; "\x1B[m"
POP             {R4-R6,LR}
B               printf

loc_1A568
ADD             R0, R5, R0
BL              sub_19CE8
MOV             R5, R0
B               loc_1A4FC

loc_1A578
LDR             R1, [R4,#0x4C]
CMP             R1, #0
BLE             loc_1A55C
MOV             R3, R1,ASR#1
MOV             R0, #0x64 ; 'd'
MLA             R0, R0, R5, R3
BLX             sub_15F18
CMP             R0, #0x64 ; 'd'
MOVCC           R1, R0
MOVCS           R1, #0x64 ; 'd'
LDR             R0, =aI_0 ; " %i%%"
B               loc_1A558
; End of function sub_1A488

off_1A5A8 DCD dword_7DB98
off_1A5AC DCD a7mS      ; "\x1B[7m%s"
off_1A5B0 DCD aFileIOfI ; " (file %i of %i)"
off_1A5B4 DCD dword_7DBC0
off_1A5B8 DCD aLinesII  ; " lines %i-%i"
off_1A5BC DCD aI        ; "/%i"
off_1A5C0 DCD aEnd      ; " (END)"
off_1A5C4 DCD aNextS    ; " - next: %s"
off_1A5C8 DCD a7mSFileIOfIM+0x16 ; "\x1B[m"
off_1A5CC DCD aI_0      ; " %i%%"



; void sub_1A5D0()
sub_1A5D0
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0xC]
CMP             R3, #0
POPGE           {R4,PC}
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #6
BEQ             loc_1A600
POP             {R4,LR}
B               sub_1A488

loc_1A600
BL              sub_19D44
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_1A628
BL              sub_19C70
CMP             R0, #0
BNE             loc_1A648
MOV             R0, #0x3A ; ':' ; c
POP             {R4,LR}
B               j_putchar_unlocked

loc_1A628
LDR             R1, [R4,#0x44]

loc_1A62C
LDR             R3, [R4,#0x3C]
CMP             R3, #1
BLS             loc_1A650
LDR             R2, [R4,#0x40]
LDR             R0, =a7mSFileIOfIM ; "\x1B[7m%s (file %i of %i)\x1B[m"
POP             {R4,LR}
B               printf

loc_1A648
LDR             R1, =(aEnd+1) ; "(END)"
B               loc_1A62C

loc_1A650
LDR             R0, =a7mSM_0 ; "\x1B[7m%s\x1B[m"
POP             {R4,LR}
B               printf
; End of function sub_1A5D0

off_1A65C DCD dword_7DB98
off_1A660 DCD dword_7DBC0
off_1A664 DCD a7mSFileIOfIM ; "\x1B[7m%s (file %i of %i)\x1B[m"
off_1A668 DCD aEnd+1    ; "(END)"
off_1A66C DCD a7mSM_0   ; "\x1B[7m%s\x1B[m"


; Attributes: bp-based frame fpd=0xFFFFFFE0

; void sub_1A670()
sub_1A670

eflags= -0x24
var_20= -0x20
dest= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
pmatch= -0xC

PUSH            {R4-R11,LR}
MOV             R2, #0
MOV             R9, #0
ADD             R11, SP, #0x20
MOV             R1, R2
SUB             SP, SP, #0x24
LDR             R0, =aUUh ; "\x1B[%u;%uH"
BL              printf

loc_1A690
LDR             R3, =dword_7DB98
LDR             R4, =dword_7DBC0
LDR             R5, [R3]
LDR             R2, [R5,#0x1C]
CMP             R2, R9
BCS             loc_1A6E4
LDR             R3, [R4]
TST             R3, #0x41
BEQ             loc_1A97C
LDR             R1, [R5,#0x24]
CMP             R1, #0
BGT             loc_1A97C
TST             R3, #0x40
LDR             R3, [R5,#0x14]
LDREQ           R1, [R5]
MOVNE           R1, #0
SUB             R3, R3, R1
CMP             R2, R3
BCC             loc_1A97C
MOV             R0, #0
BL              sub_19D64

loc_1A6E4               ; format
LDR             R0, =(aU0hK+7) ; "\x1B[K"
MOV             R6, R9,LSL#2
BL              printf
LDR             R3, [R4]
TST             R3, #8
BEQ             loc_1A728
LDR             R3, [R5,#0x30]
LDR             R2, [R5,#0x38]
LDR             R3, [R3,R9,LSL#2]
CMP             R3, R2
LDRNE           R3, [R3,#-4]
LDRNE           R0, =a7u ; "%7u "
LDREQ           R0, =(asc_6582A+2) ; "        "
ADDNE           R3, R3, #1
STRNE           R3, [R11,#-0x20+var_10]
LDR             R1, [R11,#-0x20+var_10]
BL              printf

loc_1A728
LDR             R3, [R5,#0x30]
LDR             R2, [R5,#0x80]
LDR             R4, [R3,R6]
LDR             R3, [R5,#0x20]
CMP             R2, #0
ADD             R3, R3, #8
BEQ             loc_1A8AC
BIC             R3, R3, #7
STR             SP, [R11,#-0x20+var_14]
SUB             SP, SP, R3
MOV             R6, R4
ADD             R8, SP, #0x24+dest
MOV             R7, R8

loc_1A75C
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_1A7EC

loc_1A768               ; dest
MOV             R0, R7
LDR             R10, =aSS7mSM ; "%s%.*s\x1B[7m%.*s\x1B[m"
LDR             R7, =(asc_6B39D+1) ; ""
MOV             R1, R6  ; src
MOV             R6, #0
BL              strcpy
MOV             R3, R6

loc_1A784               ; string
MOV             R1, R4
STR             R3, [SP,#0x24+eflags] ; eflags
MOV             R2, #1  ; nmatch
SUB             R3, R11, #-(-0x20+pmatch) ; pmatch
ADD             R0, R5, #0x60 ; '`' ; preg
BL              regexec
LDRD            R2, R3, [R11,#-0x20+pmatch]
CMP             R3, R2
MOVLE           R1, #0
MOVGT           R1, #1
CMP             R0, #0
MOVEQ           R0, R1
MOVNE           R0, #0
CMP             R0, #0
BNE             loc_1A85C
CMP             R6, #0
LDR             R1, =(asc_6B39D+1) ; ""
MOV             R2, R8
MOVNE           R1, R6
LDR             R0, =(aSSS_2+2) ; format
BL              printf
MOV             R0, R6  ; ptr
BL              free
LDR             SP, [R11,#-0x20+var_14]

loc_1A7E4
ADD             R9, R9, #1
B               loc_1A690

loc_1A7EC               ; reject
LDR             R1, =reject
MOV             R0, R6  ; s
BL              strcspn
SUBS            R10, R0, #0
BEQ             loc_1A830
LDRB            R2, [R6,R10]
ADD             R3, R6, R10
CMP             R2, #0
BEQ             loc_1A768
MOV             R1, R6  ; src
MOV             R0, R7  ; dest
MOV             R2, R10 ; n
STR             R3, [R11,#-0x20+var_18]
BL              memcpy
LDR             R3, [R11,#-0x20+var_18]
ADD             R7, R7, R10
MOV             R6, R3

loc_1A830               ; accept
LDR             R1, =reject
MOV             R0, R6  ; s
BL              strspn
MOV             R1, #0x2E ; '.' ; c
MOV             R10, R0
MOV             R2, R0  ; n
MOV             R0, R7  ; s
BL              memset
ADD             R7, R7, R10
ADD             R6, R6, R10
B               loc_1A75C

loc_1A85C
ADD             R1, R8, R2
SUB             R3, R3, R2
CMP             R6, #0
STR             R1, [SP,#0x24+var_20]
STR             R3, [SP,#0x24+eflags]
MOVNE           R1, R6
MOV             R3, R8
MOVEQ           R1, R7
MOV             R0, R10
BL              sub_177E4
STR             R0, [R11,#-0x20+var_18]
MOV             R0, R6  ; ptr
BL              free
LDR             R3, [R11,#-0x20+pmatch.rm_eo]
LDR             R2, [R11,#-0x20+var_18]
ADD             R8, R8, R3
ADD             R4, R4, R3
MOV             R6, R2
MOV             R3, #1
B               loc_1A784

loc_1A8AC
BIC             R3, R3, #7
LDR             R6, =reject
MOV             R7, SP
SUB             SP, SP, R3
ADD             R5, SP, #0x24+dest

loc_1A8C0
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_1A8DC

loc_1A8CC               ; s
MOV             R0, R4
BL              puts
MOV             SP, R7
B               loc_1A7E4

loc_1A8DC               ; reject
MOV             R1, R6
MOV             R0, R4  ; s
BL              strcspn
SUBS            R1, R0, #0
BEQ             loc_1A910
LDRB            R3, [R4,R1]
ADD             R8, R4, R1
CMP             R3, #0
BEQ             loc_1A8CC
MOV             R2, R4
MOV             R4, R8
LDR             R0, =(aSS_5+3) ; "%.*s"
BL              printf

loc_1A910               ; accept
MOV             R1, R6
MOV             R0, R4  ; s
BL              strspn
MOV             R8, #0x3F ; '?'
SUB             R1, R4, #1
ADD             R12, R5, R0
MOV             R3, R5
MOV             LR, #0x7B ; '{'

loc_1A930
LDRB            R2, [R1,#1]!
ADD             R3, R3, #1
CMP             R2, #0x7F
STRBEQ          R8, [R3,#-1]
BEQ             loc_1A958
CMP             R2, #0x9B
LDRNE           R10, =aAbcdefghiKlmno ; "@ABCDEFGHI@KLMNOPQRSTUVWXYZ[\\]^_"
STRBEQ          LR, [R3,#-1]
LDRBNE          R2, [R10,R2]
STRBNE          R2, [R3,#-1]

loc_1A958
CMP             R12, R3
BNE             loc_1A930
MOV             R3, #0
ADD             R4, R4, R0
STRB            R3, [R5,R0]
MOV             R1, R5
LDR             R0, =a7mSM_0 ; "\x1B[7m%s\x1B[m"
BL              printf
B               loc_1A8C0

loc_1A97C
BL              sub_1A5D0
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}
; End of function sub_1A670

off_1A988 DCD aUUh      ; "\x1B[%u;%uH"
off_1A98C DCD dword_7DB98
off_1A990 DCD dword_7DBC0
off_1A994 DCD aU0hK+7   ; "\x1B[K"
off_1A998 DCD a7u       ; "%7u "
off_1A99C DCD asc_6582A+2 ; "        "
off_1A9A0 DCD aSS7mSM   ; "%s%.*s\x1B[7m%.*s\x1B[m"
off_1A9A4 DCD asc_6B39D+1 ; ""
off_1A9A8 DCD aSSS_2+2  ; "%s%s\n"
off_1A9AC DCD reject
off_1A9B0 DCD aSS_5+3   ; "%.*s"
off_1A9B4 DCD aAbcdefghiKlmno ; "@ABCDEFGHI@KLMNOPQRSTUVWXYZ[\\]^_"
off_1A9B8 DCD a7mSM_0   ; "\x1B[7m%s\x1B[m"



; void sub_1A9BC()
sub_1A9BC
LDR             R3, =dword_7DB98
LDR             R2, =dword_7DBC0
PUSH            {R4-R8,LR}
LDR             R1, [R3]
LDR             R2, [R2]
LDR             R3, [R1]
ANDS            R7, R2, #0x80
MOVNE           R0, R3,LSL#2
BNE             loc_1AA24

loc_1A9E0
LDR             R12, [R1,#0x1C]
MOV             R2, #0

loc_1A9E8
CMP             R12, R2
BCC             loc_1AA18
LDR             LR, [R1,#0x14]
ADD             R4, R2, #1
LDR             R0, [R1,#0x30]
CMP             LR, R3
BCS             loc_1AA50

loc_1AA04
LDR             R3, [R1,#0x38]
STR             R3, [R0,R2,LSL#2]
ADD             R2, R2, #1
CMP             R12, R2
BCS             loc_1AA04

loc_1AA18
POP             {R4-R8,LR}
B               sub_1A670

loc_1AA20
SUB             R3, R3, #1

loc_1AA24
CMP             R3, #0
BEQ             loc_1A9E0
LDR             R2, [R1,#0x34]
LDR             R12, [R2,R0]!
SUB             R0, R0, #4
LDR             R2, [R2,#-4]
LDR             R12, [R12,#-4]
LDR             R2, [R2,#-4]
CMP             R12, R2
BEQ             loc_1AA20
B               loc_1A9E0

loc_1AA50
LDR             R5, [R1,#0x34]
LDR             R6, [R5,R3,LSL#2]
LDR             R8, [R6,#-4]
STR             R6, [R0,R2,LSL#2]

loc_1AA60
ADD             R3, R3, #1
MOV             R2, R4
CMP             LR, R3
MOVCC           R0, #0
MOVCS           R0, #1
CMP             R7, #0
MOVEQ           R0, #0
CMP             R0, #0
BEQ             loc_1A9E8
LDR             R0, [R5,R3,LSL#2]
LDR             R0, [R0,#-4]
CMP             R8, R0
BEQ             loc_1AA60
B               loc_1A9E8
; End of function sub_1A9BC

off_1AA98 DCD dword_7DB98
off_1AA9C DCD dword_7DBC0



; void sub_1AAA0()
sub_1AAA0
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0x34]
CMP             R3, #0
BNE             loc_1AB40

loc_1AAB8
LDR             R0, [R4,#0x44]
MOV             R5, #0
MOV             R6, #0xFFFFFFFF
STR             R5, [R4]
STR             R6, [R4,#0x14]
CMP             R0, R5
STR             R5, [R4,#0x18]
BEQ             loc_1AB48
MOV             R1, R5
BL              sub_175D8
MOV             R1, R5
BL              sub_176A8
STR             R6, [R4,#0x4C]

loc_1AAEC
MOV             R3, #0
STR             R3, [R4,#0x28]
STR             R3, [R4,#0x2C]
STR             R3, [R4,#0x10]
MOV             R3, #1
STR             R3, [R4,#0x88]
BL              sub_19E98
POP             {R4-R6,LR}
B               sub_1A9BC

loc_1AB10
LDR             R0, [R0,R5,LSL#2]
ADD             R5, R5, #1
SUB             R0, R0, #4 ; ptr
BL              free

loc_1AB20
LDR             R3, [R4,#0x14]
LDR             R0, [R4,#0x34] ; ptr
CMP             R3, R5
BCS             loc_1AB10
BL              free
MOV             R3, #0
STR             R3, [R4,#0x34]
B               loc_1AAB8

loc_1AB40
MOV             R5, #0
B               loc_1AB20

loc_1AB48
LDR             R0, =aStandardInput ; "standard input"
BL              sub_174F8
MOV             R3, #0xFFFFFFFE
STR             R0, [R4,#0x44]
STR             R3, [R4,#0x4C]
B               loc_1AAEC
; End of function sub_1AAA0

off_1AB60 DCD dword_7DB98
off_1AB64 DCD aStandardInput ; "standard input"



; void __fastcall sub_1AB68(int)
sub_1AB68
LDR             R3, =dword_7DB98
CMP             R0, #1
PUSH            {R4,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0x40]
BNE             loc_1AB98
LDR             R2, [R4,#0x3C]
CMP             R3, R2
LDREQ           R0, =aNoNextFile ; "No next file"
BEQ             loc_1ABDC

loc_1AB90
ADD             R0, R0, R3
B               loc_1ABAC

loc_1AB98
CMP             R3, #1
BEQ             loc_1ABD8
CMP             R0, #0
MOVEQ           R0, #1
BNE             loc_1AB90

loc_1ABAC
STR             R0, [R4,#0x40]
LDR             R0, [R4,#0x44] ; ptr
BL              free
LDR             R3, [R4,#0x40]
LDR             R2, [R4,#0x48]
SUB             R3, R3, #0xC0000001
LDR             R0, [R2,R3,LSL#2]
BL              sub_174F8
STR             R0, [R4,#0x44]
POP             {R4,LR}
B               sub_1AAA0

loc_1ABD8
LDR             R0, =aNoPreviousFile_0 ; "No previous file"

loc_1ABDC
POP             {R4,LR}
B               sub_19DB8
; End of function sub_1AB68

off_1ABE4 DCD dword_7DB98
off_1ABE8 DCD aNoNextFile ; "No next file"
off_1ABEC DCD aNoPreviousFile_0 ; "No previous file"



; void __fastcall sub_1ABF0(int)
sub_1ABF0
LDR             R3, =dword_7DB98
LDR             R1, =dword_7DBC0
PUSH            {R4,LR}
LDR             R3, [R3]
LDR             R1, [R1]
LDR             R2, [R3]
TST             R1, #0x80
ADDEQ           R0, R0, R2
STREQ           R0, [R3]
BEQ             loc_1AC2C
LDR             R3, [R3,#0x34]
LDR             R3, [R3,R2,LSL#2]
LDR             R3, [R3,#-4]
ADD             R0, R0, R3
BL              sub_1A254

loc_1AC2C
BL              sub_19E98
BL              sub_1A2F4
POP             {R4,LR}
B               sub_1A9BC
; End of function sub_1ABF0

off_1AC3C DCD dword_7DB98
off_1AC40 DCD dword_7DBC0



; void __fastcall sub_1AC44(int)
sub_1AC44
LDR             R1, =dword_7DBC0
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
LDR             R1, [R1]
LDR             R2, [R3]
ANDS            R1, R1, #0x80
LDR             R3, [R2]
BEQ             loc_1AC84
LDR             R2, [R2,#0x34]
LDR             R3, [R2,R3,LSL#2]
LDR             R3, [R3,#-4]
SUB             R0, R3, R0
BL              sub_1A254

loc_1AC78
BL              sub_19E98
POP             {R4,LR}
B               sub_1A9BC

loc_1AC84
SUB             R0, R3, R0
CMP             R0, #0
MOVLT           R0, R1
STR             R0, [R2]
B               loc_1AC78
; End of function sub_1AC44

off_1AC98 DCD dword_7DBC0
off_1AC9C DCD dword_7DB98



; void __fastcall sub_1ACA0(int, int)
sub_1ACA0
SUBS            R2, R0, #0
PUSH            {R4,LR}
BGT             loc_1ACC0
LDR             R3, =dword_7DB98
MOV             R2, #0
LDR             R3, [R3]

loc_1ACB8
STR             R2, [R3]
B               loc_1ACCC

loc_1ACC0
CMP             R1, #0
BEQ             loc_1ACDC
BL              sub_1A254

loc_1ACCC
BL              sub_19E98
BL              sub_1A2F4
POP             {R4,LR}
B               sub_1A9BC

loc_1ACDC
LDR             R3, =dword_7DB98
LDR             R3, [R3]
B               loc_1ACB8
; End of function sub_1ACA0

off_1ACE8 DCD dword_7DB98



; void __fastcall sub_1ACEC(int)
sub_1ACEC
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
LDR             R5, [R3]
LDR             R3, [R5,#0x80]
CMP             R3, #0
POPEQ           {R4-R6,PC}
LDR             R3, [R5,#0x5C]
BIC             R4, R0, R0,ASR#31
CMP             R3, R4
BGT             loc_1AD28
LDR             R3, [R5,#0x24]
CMP             R3, #0
BLE             loc_1AD28
STR             R4, [R5,#0x58]
BL              sub_19E98

loc_1AD28
LDR             R3, [R5,#0x5C]
CMP             R3, #0
BEQ             loc_1AD58
CMP             R3, R4
MOV             R1, #0
SUBLE           R4, R3, #1
LDR             R3, [R5,#0x50]
BICLE           R4, R4, R4,ASR#31
STR             R4, [R5,#0x54]
LDR             R0, [R3,R4,LSL#2]
POP             {R4-R6,LR}
B               sub_1ACA0

loc_1AD58
LDR             R0, =aNoMatchesFound ; "No matches found"
POP             {R4-R6,LR}
B               sub_19DB8
; End of function sub_1ACEC

off_1AD64 DCD dword_7DB98
off_1AD68 DCD aNoMatchesFound ; "No matches found"



; int sub_1AD6C()
sub_1AD6C

var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

LDR             R2, =dword_7DB98
MOV             R3, #0
PUSH            {R4-R9,LR}
SUB             SP, SP, #0x14
LDR             R7, =aUUh ; "\x1B[%u;%uH"
LDR             R4, [R2]
LDR             R8, =dword_7DB94
STR             R3, [SP,#0x14+var_14]
MOV             R3, #1
LDR             R2, [R4,#4]
ADD             R6, R4, #0xC8
STRH            R3, [SP,#0x14+var_10]
STRH            R3, [SP,#0x14+var_8]
STR             R2, [SP,#0x14+var_C]

loc_1ADA4               ; termios_p
MOV             R2, R6
MOV             R1, #0  ; optional_actions
LDR             R0, [R4,#4] ; fd
BL              tcsetattr
BL              sub_19C70
CMP             R0, #0
MOVEQ           R5, #1
BEQ             loc_1ADD4
LDR             R5, [R4,#0x24]
CMP             R5, #0
MOVGT           R5, #0
MOVLE           R5, #1

loc_1ADD4
LDR             R2, [R4,#0xC]
CMP             R2, #0
BLT             loc_1ADF4
LDR             R1, [R4,#0x1C]
ADD             R2, R2, #1
MOV             R0, R7  ; format
ADD             R1, R1, #2
BL              printf

loc_1ADF4
BL              sub_177D8
LDRB            R3, [R4,#0x104]
CMP             R3, #0
BNE             loc_1AE14
MOV             R2, #0xFFFFFFFF ; timeout
RSB             R1, R5, #2 ; nfds
ADD             R0, SP, R5,LSL#3 ; fds
BL              sub_60AD4

loc_1AE14
MOV             R2, #0xFFFFFFFE
ADD             R1, R4, #0x104
LDR             R0, [R4,#4] ; fd
BL              sub_60068
CMN             R0, #1
MOV             R5, R0
MOV             R9, R1
BNE             loc_1AE58
LDR             R3, [R8]
LDR             R3, [R3]
CMP             R3, #0xB
BNE             loc_1AE50
BL              sub_19E98
BL              sub_1A9BC
B               loc_1ADA4

loc_1AE50
MOV             R0, #0
BL              sub_19D64

loc_1AE58
BL              sub_19D1C
MOV             R0, R5
MOV             R1, R9
ADD             SP, SP, #0x14
POP             {R4-R9,PC}
; End of function sub_1AD6C

off_1AE6C DCD dword_7DB98
off_1AE70 DCD aUUh      ; "\x1B[%u;%uH"
off_1AE74 DCD dword_7DB94



; unsigned int __fastcall sub_1AE78(int)
sub_1AE78
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
MOV             R6, R0
MOV             R5, #0xFFFFFFFF
LDR             R4, [R3]

loc_1AE8C
STR             R6, [R4,#0xC]
BL              sub_1AD6C
CMP             R0, #0x1F
STR             R5, [R4,#0xC]
MOVHI           R3, #0
MOVLS           R3, #1
CMP             R0, #0xD
MOVEQ           R3, #0
CMP             R0, #8
MOVEQ           R3, #0
ANDNE           R3, R3, #1
CMP             R3, #0
POPEQ           {R4-R6,PC}
B               loc_1AE8C
; End of function sub_1AE78

off_1AEC4 DCD dword_7DB98



; _BYTE *__fastcall sub_1AEC8(int)
sub_1AEC8
PUSH            {R4-R10,LR}
MOV             R8, R0
MOV             R0, #1
LDR             R9, =asc_64E92 ; "\b \b"
MOV             R4, #0
BL              sub_174DC
LDR             R3, =dword_7DB98
MOV             R6, R0
LDR             R7, [R3]

loc_1AEEC
ADD             R3, R8, R4
STR             R3, [R7,#0xC]
BL              sub_1AD6C
CMP             R0, #0xD
MOV             R5, R0
BEQ             loc_1AF7C
CMP             R0, #0x7F
MOVEQ           R5, #8
CMP             R4, #0
SUB             R3, R5, #8
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVEQ           R3, #0
CMP             R3, #0
BEQ             loc_1AF38
MOV             R0, R9  ; format
SUB             R4, R4, #1
BL              printf
B               loc_1AEEC

loc_1AF38
CMP             R5, #0x1F
BLE             loc_1AEEC
LDR             R3, [R7,#0x20]
SUB             R3, R3, #1
SUB             R3, R3, R8
CMP             R3, R4
BLS             loc_1AEEC
MOV             R0, R5  ; c
ADD             R10, R4, #1
BL              j_putchar_unlocked
STRB            R5, [R6,R4]
ADD             R1, R4, #2
MOV             R0, R6
MOV             R4, R10
BL              sub_174B4
MOV             R6, R0
B               loc_1AEEC

loc_1AF7C
MOV             R3, #0
MOV             R0, R6
STRB            R3, [R6,R4]
MOV             R3, #0xFFFFFFFF
STR             R3, [R7,#0xC]
POP             {R4-R10,PC}
; End of function sub_1AEC8

off_1AF94 DCD asc_64E92 ; "\b \b"
off_1AF98 DCD dword_7DB98



; void sub_1AF9C()
sub_1AF9C
PUSH            {R4-R6,LR}
LDR             R0, =aExamine ; "Examine: "
BL              sub_19DB8
MOV             R0, #9
BL              sub_1AEC8
LDRB            R3, [R0]
MOV             R5, R0
CMP             R3, #0
BNE             loc_1AFD0
BL              sub_1A5D0

loc_1AFC4
MOV             R0, R5
POP             {R4-R6,LR}
B               free

loc_1AFD0               ; type
MOV             R1, #4
BL              access
CMP             R0, #0
BEQ             loc_1AFEC
LDR             R0, =aCannotReadThis ; "Cannot read this file"
BL              sub_19DB8
B               loc_1AFC4

loc_1AFEC
LDR             R3, =dword_7DB98
LDR             R4, [R3]
LDR             R0, [R4,#0x44] ; ptr
BL              free
LDR             R3, [R4,#0x48]
STR             R5, [R4,#0x44]
STR             R5, [R3]
MOV             R3, #1
STR             R3, [R4,#0x40]
STR             R3, [R4,#0x3C]
POP             {R4-R6,LR}
B               sub_1AAA0
; End of function sub_1AF9C

off_1B01C DCD aExamine  ; "Examine: "
off_1B020 DCD aCannotReadThis ; "Cannot read this file"
off_1B024 DCD dword_7DB98



; void sub_1B028()
sub_1B028
LDR             R3, =dword_7DB98
PUSH            {R4-R8,LR}
MOV             R5, #0
LDR             R4, [R3]
LDR             R0, [R4,#0x50] ; ptr
BL              free
LDR             R3, [R4,#0x80]
STR             R5, [R4,#0x50]
STR             R5, [R4,#0x54]
CMP             R3, R5
STR             R5, [R4,#0x5C]
BEQ             loc_1B064
ADD             R0, R4, #0x60 ; '`' ; preg
BL              regfree
STR             R5, [R4,#0x80]

loc_1B064
LDR             R5, =dword_7DBC0
BL              sub_19D44
LDR             R3, [R5]
MOV             R7, R5
TST             R3, #0x8000
MOVNE           R0, #0x3F ; '?'
MOVEQ           R0, #0x2F ; '/' ; c
BL              j_putchar_unlocked
MOV             R0, #1
BL              sub_1AEC8
LDRB            R3, [R0]
MOV             R6, R0
CMP             R3, #0
BNE             loc_1B0A8
BL              free
POP             {R4-R8,LR}
B               sub_1A670

loc_1B0A8
LDR             R2, [R5]
MOV             R1, R0
ADD             R0, R4, #0x60 ; '`'
MOV             R2, R2,LSR#4
AND             R2, R2, #2
BL              sub_62594
MOV             R5, R0
MOV             R0, R6  ; ptr
BL              free
CMP             R5, #0
BEQ             loc_1B0E8
MOV             R0, R5
BL              sub_19DB8
MOV             R0, R5
POP             {R4-R8,LR}
B               free

loc_1B0E8
MOV             R3, #1
STR             R5, [R4,#0x54]
STR             R3, [R4,#0x80]
MOV             R0, R5
BL              sub_19DEC
LDR             R2, [R4,#0x5C]

loc_1B100
LDR             R3, [R4,#0x54]
CMP             R3, R2
BGE             loc_1B120
LDR             R1, [R4,#0x50]
LDR             R0, [R1,R3,LSL#2]
LDR             R1, [R4]
CMP             R0, R1
BLE             loc_1B13C

loc_1B120
LDR             R2, [R7]
TST             R2, #0x8000
SUBNE           R3, R3, #1
STRNE           R3, [R4,#0x54]
LDR             R0, [R4,#0x54]
POP             {R4-R8,LR}
B               sub_1ACEC

loc_1B13C
ADD             R3, R3, #1
STR             R3, [R4,#0x54]
B               loc_1B100
; End of function sub_1B028

off_1B148 DCD dword_7DB98
off_1B14C DCD dword_7DBC0


; Attributes: bp-based frame fpd=0xFFFFFFE0

; int __fastcall sub_1B150(int, char **)
sub_1B150

var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
ptr= -0x24
src= -0x20
var_1C= -0x1C
var_18= -0x18
var_4= -4

PUSH            {R4-R11,LR}
MOV             R6, R0
ADD             R11, SP, #0x20
MOV             R0, #0x114
SUB             SP, SP, #0x3C
MOV             R5, R1
BL              sub_174DC
LDR             R3, =dword_7DB98
MOV             R4, R0
STR             R0, [R3]
LDR             R3, =(asc_6B3FB+0x1F) ; "~"
MOV             R2, #0xFFFFFFFF
STR             R2, [R0,#0xC]
STR             R2, [R0,#0x58]
STR             R3, [R0,#0x38]
MOV             R3, #1
STR             R3, [R0,#0x40]
STR             R3, [R0,#0x24]
STR             R3, [R0,#0x88]
MOV             R0, R5
LDR             R1, =aEmmnIfsrs ; "EMmN~IFSRs"
BL              sub_593CC
LDR             R3, =optind
LDR             R0, =aLess ; "LESS"
LDR             R3, [R3]
SUB             R6, R6, R3
ADD             R5, R5, R3,LSL#2
STR             R6, [R4,#0x3C]
STR             R5, [R4,#0x48]
BL              getenv
CMP             R0, #0
SUBNE           R0, R0, #1
LDRNE           R3, =dword_7DBC0
BNE             loc_1B218

loc_1B1D8               ; fd
MOV             R0, #1
BL              isatty
CMP             R0, #0
BEQ             loc_1B304
LDR             R0, [R4,#0x3C] ; fd
CMP             R0, #0
BNE             loc_1B26C
BL              isatty
CMP             R0, #0
BEQ             loc_1B27C
BL              sub_162F0

loc_1B204
CMP             R2, #0x4D ; 'M'
BEQ             loc_1B254
BHI             loc_1B228
CMP             R2, #0x46 ; 'F'
BEQ             loc_1B244

loc_1B218
LDRB            R2, [R0,#1]!
CMP             R2, #0
BNE             loc_1B204
B               loc_1B1D8

loc_1B228
CMP             R2, #0x52 ; 'R'
BEQ             loc_1B260
CMP             R2, #0x53 ; 'S'
BNE             loc_1B218
LDR             R2, [R3]
ORR             R2, R2, #0x80
B               loc_1B24C

loc_1B244
LDR             R2, [R3]
ORR             R2, R2, #0x40 ; '@'

loc_1B24C
STR             R2, [R3]
B               loc_1B218

loc_1B254
LDR             R2, [R3]
ORR             R2, R2, #2
B               loc_1B24C

loc_1B260
LDR             R2, [R3]
ORR             R2, R2, #0x100
B               loc_1B24C

loc_1B26C
LDR             R3, [R4,#0x48]
LDR             R0, [R3]
BL              sub_174F8
STR             R0, [R4,#0x44]

loc_1B27C
LDR             R3, =dword_7DBC0
MOV             R0, #1
LDR             R3, [R3]
TST             R3, #0x10
LDRNE           R3, =(asc_6B39D+1) ; ""
STRNE           R3, [R4,#0x38]
BL              sub_17B34
SUBS            R7, R0, #0
BNE             loc_1B314

loc_1B2A0
MOV             R1, #0
LDR             R0, =aDevTty ; "/dev/tty"
BL              open64
CMP             R0, #0
MOVGE           R6, R0
MOVLT           R6, #1

loc_1B2B8
MOV             R0, R6
BL              sub_16E34
MOV             R3, #2
STR             R0, [R4,#8]
ADD             R2, R4, #0x8C ; s
ADD             R1, R4, #0xC8 ; int
STR             R6, [R4,#4]
MOV             R0, R6  ; int
BL              sub_172AC
ADD             R2, R4, #0x1C
ADD             R1, R4, #0x20 ; ' '
MOV             R0, R6  ; fd
BL              sub_1714C
LDR             R3, [R4,#0x20]
CMP             R3, #0x13
BLS             loc_1B304
LDR             R3, [R4,#0x1C]
CMP             R3, #2
BHI             loc_1B334

loc_1B304
MOV             R0, R5
BL              sub_57910
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_1B314
MOV             R1, #0
BL              open64
MOV             R6, R0
MOV             R0, R7  ; ptr
BL              free
CMP             R6, #0
BLT             loc_1B2A0
B               loc_1B2B8

loc_1B334
SUB             R3, R3, #2
LDR             R1, =sub_19DAC
STR             R3, [R4,#0x1C]
LDR             R0, =0x700F44E
BL              sub_18184
LDR             R0, [R4,#0x1C]
ADD             R0, R0, #1
MOV             R0, R0,LSL#2
BL              sub_1748C
STR             R0, [R4,#0x30]
BL              sub_1AAA0

loc_1B360
LDR             R6, =dword_7DB98

loc_1B364
MOV             R0, #0xFFFFFFFF
BL              sub_1AE78
CMP             R0, #0x4E ; 'N'
MOV             R4, R0
BEQ             loc_1B700
BGT             loc_1B53C
CMP             R0, #0x25 ; '%'
BEQ             loc_1B4F4
BGT             loc_1B480
CMN             R0, #6
BEQ             loc_1B4F4
BGT             loc_1B450
CMN             R0, #0xA
BEQ             loc_1B630
CMN             R0, #7
BEQ             loc_1B520
CMN             R0, #0xB

loc_1B3A8
BEQ             loc_1B620

def_1B978               ; jumptable 0001B978 default case, cases 3-9,11,14-19
UXTB            R3, R4
SUB             R2, R3, #0x30 ; '0'
CMP             R2, #9
BHI             loc_1B364
SUB             R6, R11, #-(-0x20+var_4)
MOV             R5, #1
STRB            R3, [R6,#-0x10]!
BL              sub_19D44
MOV             R1, R4
LDR             R0, =aC_0 ; ":%c"
BL              printf

loc_1B3D8
ADD             R7, R5, #1
MOV             R0, R7
BL              sub_1AE78
CMP             R0, #0xFF
MOV             R4, R0
BHI             loc_1B418
UXTB            R3, R0
SUB             R2, R3, #0x30 ; '0'
CMP             R2, #9
BHI             loc_1B418
ADD             R2, R6, R7
MOV             R5, R7
STRB            R3, [R2,#-1]
BL              j_putchar_unlocked
CMP             R7, #0xF
BNE             loc_1B3D8

loc_1B418
SUB             R3, R11, #-(-0x20+var_4)
MOV             R1, #0
ADD             R5, R3, R5
MOV             R2, #0xA
MOV             R0, R6
STRB            R1, [R5,#-0x10]
BL              sub_18990
LDR             R3, =0x98967E
MOV             R5, R0
SUB             R0, R0, #1
CMP             R0, R3
BLS             loc_1BA90
BL              sub_1A670
B               loc_1B360

loc_1B450
CMN             R0, #2
BEQ             loc_1B614
BGT             loc_1B470
CMN             R0, #3

loc_1B460               ; jumptable 0001B978 default case, cases 3-9,11,14-19
BNE             def_1B978

loc_1B464
MOV             R0, #1

loc_1B468
BL              sub_1ABF0
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B470
CMP             R0, #0xD
BEQ             loc_1B464
CMP             R0, #0x20 ; ' '
B               loc_1B3A8

loc_1B480
CMP             R0, #0x3D ; '='
BEQ             loc_1B6E0 ; jumptable 0001B978 case 2
BGT             loc_1B504
CMP             R0, #0x2F ; '/'
BEQ             loc_1B6E8
BGT             loc_1B4E4
CMP             R0, #0x2D ; '-'
BNE             def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19
BL              sub_19D44
MOV             R0, R4  ; c
BL              j_putchar_unlocked
MOV             R0, #1
BL              sub_1AE78
CMP             R0, #0x4E ; 'N'
BEQ             loc_1B780
BGT             loc_1B720
CMP             R0, #0x45 ; 'E'
BEQ             loc_1B760
CMP             R0, #0x4D ; 'M'
BNE             loc_1B5D4
LDR             R2, =dword_7DBC0
LDR             R3, [R2]
EOR             R3, R3, #2

loc_1B4DC
STR             R3, [R2]
B               loc_1B5D4

loc_1B4E4
CMP             R0, #0x3A ; ':'
BEQ             loc_1B960
CMP             R0, #0x3C ; '<'
BNE             def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B4F4
MOV             R1, #0
MOV             R0, R1

loc_1B4FC
BL              sub_1ACA0
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B504
CMP             R0, #0x3F ; '?'
BEQ             loc_1B710
BLT             loc_1B520
CMP             R0, #0x45 ; 'E'
BEQ             loc_1B6D8 ; jumptable 0001B978 case 1
CMP             R0, #0x47 ; 'G'
BNE             def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B520
LDR             R5, [R6]
LDR             R3, =0x98967F
STR             R3, [R5]
BL              sub_19E98
MOV             R1, #0
LDR             R0, [R5]
B               loc_1B4FC

loc_1B53C
CMP             R0, #0x6B ; 'k'
BEQ             loc_1B614
BGT             loc_1B590
CMP             R0, #0x64 ; 'd'
BEQ             loc_1B640
BGT             loc_1B574
CMP             R0, #0x52 ; 'R'
BEQ             loc_1B5D4
CMP             R0, #0x62 ; 'b'
BEQ             loc_1B630
CMP             R0, #0x51 ; 'Q'
BNE             def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B56C               ; jumptable 0001B978 case 13
MOV             R0, #0
BL              sub_19D64

loc_1B574
CMP             R0, #0x66 ; 'f'
BEQ             loc_1B620
BLT             loc_1B464
CMP             R0, #0x67 ; 'g'
BEQ             loc_1B4F4
CMP             R0, #0x6A ; 'j'
B               loc_1B460

loc_1B590
CMP             R0, #0x73 ; 's'
BEQ             loc_1B654
BGT             loc_1B5DC
CMP             R0, #0x70 ; 'p'
BEQ             loc_1B4F4
BGT             loc_1B5C4
CMP             R0, #0x6E ; 'n'
BNE             def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19
LDR             R3, [R6]
LDR             R0, [R3,#0x54]
ADD             R0, R0, #1

loc_1B5BC
BL              sub_1ACEC
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B5C4
CMP             R0, #0x71 ; 'q'
BEQ             loc_1B56C ; jumptable 0001B978 case 13
CMP             R0, #0x72 ; 'r'
BNE             def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B5D4
BL              sub_1A670
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B5DC
CMP             R0, #0x77 ; 'w'
BEQ             loc_1B630
BGT             loc_1B604
CMP             R0, #0x75 ; 'u'
BNE             def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19
LDR             R3, [R6]
LDR             R0, [R3,#0x1C]
ADD             R0, R0, #1
MOV             R0, R0,LSR#1
B               loc_1B618

loc_1B604
CMP             R0, #0x79 ; 'y'
BEQ             loc_1B614
CMP             R0, #0x7A ; 'z'
B               loc_1B3A8

loc_1B614
MOV             R0, #1

loc_1B618
BL              sub_1AC44
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B620
LDR             R3, [R6]
LDR             R0, [R3,#0x1C]
ADD             R0, R0, #1
B               loc_1B468

loc_1B630
LDR             R3, [R6]
LDR             R0, [R3,#0x1C]
ADD             R0, R0, #1
B               loc_1B618

loc_1B640
LDR             R3, [R6]
LDR             R0, [R3,#0x1C]
ADD             R0, R0, #1
MOV             R0, R0,LSR#1
B               loc_1B468

loc_1B654
LDR             R0, =aLogFile ; "Log file: "
BL              sub_19DB8
MOV             R0, #0xA
BL              sub_1AEC8
LDRB            R3, [R0]
MOV             R7, R0
CMP             R3, #0
LDREQ           R0, =(asc_6B39D+1) ; ""
BEQ             loc_1B6AC
BL              sub_61CB4
SUBS            R8, R0, #0
LDREQ           R0, =aErrorOpeningLo ; "Error opening log file"
BEQ             loc_1B6AC
LDR             R9, [R6]
MOV             R5, #0
LDR             R10, =(aSS_2+3) ; "%s\n"

loc_1B694
LDR             R3, [R9,#0x14]
CMP             R5, R3
BLS             loc_1B6BC
MOV             R0, R8  ; stream
BL              fclose
LDR             R0, =aDone ; "Done"

loc_1B6AC
BL              sub_19DB8
MOV             R0, R7  ; ptr
BL              free
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B6BC
LDR             R3, [R9,#0x34]
MOV             R1, R10 ; format
MOV             R0, R8  ; stream
LDR             R2, [R3,R5,LSL#2]
ADD             R5, R5, #1
BL              fprintf
B               loc_1B694

loc_1B6D8               ; jumptable 0001B978 case 1
BL              sub_1AF9C
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B6E0               ; jumptable 0001B978 case 2
BL              sub_1A488
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B6E8
LDR             R2, =dword_7DBC0
LDR             R3, [R2]
BIC             R3, R3, #0x8000

loc_1B6F4
STR             R3, [R2]
BL              sub_1B028
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1B700
LDR             R3, [R6]
LDR             R0, [R3,#0x54]
SUB             R0, R0, #1
B               loc_1B5BC

loc_1B710
LDR             R2, =dword_7DBC0
LDR             R3, [R2]
ORR             R3, R3, #0x8000
B               loc_1B6F4

loc_1B720
CMP             R0, #0x6D ; 'm'
BEQ             loc_1B750
CMP             R0, #0x7E ; '~'
BEQ             loc_1B770
CMP             R0, #0x53 ; 'S'
BNE             loc_1B5D4
LDR             R2, =dword_7DBC0
LDR             R3, [R2]
EOR             R3, R3, #0x80
STR             R3, [R2]

loc_1B748
BL              sub_1A9BC
B               loc_1B5D4

loc_1B750
LDR             R2, =dword_7DBC0
LDR             R3, [R2]
EOR             R3, R3, #4
B               loc_1B4DC

loc_1B760
LDR             R2, =dword_7DBC0
LDR             R3, [R2]
EOR             R3, R3, #1
B               loc_1B4DC

loc_1B770
LDR             R2, =dword_7DBC0
LDR             R3, [R2]
EOR             R3, R3, #0x10
B               loc_1B4DC

loc_1B780
LDR             R3, =dword_7DBC0
MOV             R8, #0
LDR             R7, [R6]
MOV             R9, R8
STR             SP, [R11,#-0x20+var_30]
LDR             R2, [R3]
STR             R8, [R11,#-0x20+var_2C]
STR             R8, [R11,#-0x20+var_18]
EOR             R1, R2, #8
TST             R2, #8
STR             R1, [R3]
LDR             R3, [R7,#0x20]
STR             R3, [R11,#-0x20+var_1C]
ADD             R3, R3, #8
BIC             R3, R3, #7
SUB             SP, SP, R3
LDR             R3, [R7,#0x34]
STR             SP, [R11,#-0x20+src]
LDR             R2, [R11,#-0x20+src]
STR             R3, [R11,#-0x20+ptr]
LDREQ           R3, [R11,#-0x20+var_1C]
SUBEQ           R3, R3, #8
STREQ           R3, [R11,#-0x20+var_1C]
LDR             R3, [R11,#-0x20+ptr]
LDR             R10, [R3]
LDR             R3, [R10,#-4]
STR             R3, [R11,#-0x20+var_28]

loc_1B7EC
MOV             R5, #0
B               loc_1B7F8

loc_1B7F4
MOV             R2, R3

loc_1B7F8
LDRB            R3, [R10]
CMP             R3, #0
STRB            R3, [R2]
BEQ             loc_1B8C4
CMP             R3, #9
ADD             R1, R5, #1
MOVNE           R5, R1
LDR             R1, [R11,#-0x20+var_1C]
ADDEQ           R5, R5, #8
ADD             R10, R10, #1
BICEQ           R5, R5, #7
ADD             R3, R2, #1
CMP             R5, R1
BLT             loc_1B7F4
MOV             R1, #0
STRB            R1, [R2,#1]
MOV             R2, R3

loc_1B83C
LDR             R3, [R11,#-0x20+src]
SUB             R2, R2, R3
ADD             R0, R2, #5
STR             R2, [R11,#-0x20+var_34]
BL              sub_1748C
LDR             R2, [R11,#-0x20+var_28]
ADD             R3, R0, #4
LDR             R1, [R11,#-0x20+src] ; src
STR             R2, [R0]
MOV             R0, R3  ; dest
LDR             R2, [R11,#-0x20+var_34]
STR             R3, [R11,#-0x20+var_34]
ADD             R2, R2, #1 ; n
BL              memcpy
LDR             R2, [R11,#-0x20+var_18]
MOV             R0, R8
MOVW            R1, #0x408
BL              sub_62544
LDR             R2, [R11,#-0x20+var_18]
MOV             R8, R0
LDR             R3, [R11,#-0x20+var_34]
STR             R3, [R0,R2,LSL#2]
ADD             R3, R2, #1
STR             R3, [R11,#-0x20+var_18]
LDR             R3, [R11,#-0x20+var_1C]
CMP             R3, R5
BLE             loc_1B8BC
LDR             R3, [R7,#0x14]
CMP             R3, R9
BCC             loc_1B92C
LDR             R3, [R10,#-4]
STR             R3, [R11,#-0x20+var_28]

loc_1B8BC
LDR             R2, [R11,#-0x20+src]
B               loc_1B7EC

loc_1B8C4
MOV             R3, R9,LSL#2
STR             R2, [R11,#-0x20+var_38]
STR             R3, [R11,#-0x20+var_34]
LDR             R3, [R11,#-0x20+ptr]
LDR             R0, [R3,R9,LSL#2]
SUB             R0, R0, #4 ; ptr
BL              free
LDR             R1, [R7]
LDR             R2, [R11,#-0x20+var_18]
LDR             R3, [R11,#-0x20+var_2C]
CMP             R9, R1
LDR             R1, [R7,#0x14]
ADD             R9, R9, #1
MOVEQ           R3, R2
STR             R3, [R11,#-0x20+var_2C]
CMP             R1, R9
LDRD            R2, R3, [R11,#-0x20+var_38]
BCC             loc_1B83C
LDR             R1, [R11,#-0x20+ptr]
ADD             R3, R1, R3
LDR             R1, [R11,#-0x20+var_28]
LDR             R10, [R3,#4]
LDR             R3, [R10,#-4]
CMP             R1, R3
BNE             loc_1B83C
B               loc_1B7F8

loc_1B92C               ; ptr
LDR             R0, [R11,#-0x20+ptr]
STR             R2, [R11,#-0x20+var_18]
BL              free
LDR             R3, [R11,#-0x20+var_2C]
LDR             R2, [R11,#-0x20+var_18]
STR             R8, [R7,#0x34]
STR             R3, [R7]
MOV             R3, #0
STR             R2, [R7,#0x14]
STR             R5, [R7,#0x10]
STR             R3, [R7,#0x80]
LDR             SP, [R11,#-0x20+var_30]
B               loc_1B748

loc_1B960
LDR             R0, =(aTheseFeaturesA+0x5B) ; " :"
BL              sub_19DB8
MOV             R0, #2
BL              sub_1AE78
SUB             R0, R0, #0x64 ; 'd'
CMP             R0, #0x14 ; switch 21 cases
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19
jpt_1B978 DCD loc_1B9D4 ; jump table for switch statement
DCD loc_1B6D8
DCD loc_1B6E0
DCD def_1B978
DCD def_1B978
DCD def_1B978
DCD def_1B978
DCD def_1B978
DCD def_1B978
DCD def_1B978
DCD loc_1BA74
DCD def_1B978
DCD loc_1BA80
DCD loc_1B56C
DCD def_1B978
DCD def_1B978
DCD def_1B978
DCD def_1B978
DCD def_1B978
DCD def_1B978
DCD loc_1BA88

loc_1B9D4               ; jumptable 0001B978 case 0
LDR             R5, [R6]
LDR             R3, [R5,#0x3C]
CMP             R3, #1
BLS             def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19
LDR             R0, [R5,#0x40]
CMP             R0, #1
BEQ             loc_1BA2C
MOV             R0, #0xFFFFFFFF
BL              sub_1AB68
LDR             R3, [R5,#0x3C]
MOV             R0, #8
MOV             R2, #3

loc_1BA04
CMP             R2, R3
SUBHI           R3, R3, #1
STRHI           R3, [R5,#0x3C]
BHI             def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19
LDR             R1, [R5,#0x48]
ADD             R2, R2, #1
LDR             R12, [R1,R0]!
ADD             R0, R0, #4
STR             R12, [R1,#-4]
B               loc_1BA04

loc_1BA2C
BL              sub_1AB68
LDR             R3, [R5,#0x3C]
MOV             R0, #4
MOV             R2, #2

loc_1BA3C
CMP             R2, R3
BLS             loc_1BA5C
SUB             R3, R3, #1
STR             R3, [R5,#0x3C]
LDR             R3, [R5,#0x40]
SUB             R3, R3, #1
STR             R3, [R5,#0x40]
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1BA5C
LDR             R1, [R5,#0x48]
ADD             R2, R2, #1
LDR             R12, [R1,R0]!
ADD             R0, R0, #4
STR             R12, [R1,#-4]
B               loc_1BA3C

loc_1BA74               ; jumptable 0001B978 case 10
MOV             R0, #1

loc_1BA78
BL              sub_1AB68
B               def_1B978 ; jumptable 0001B978 default case, cases 3-9,11,14-19

loc_1BA80               ; jumptable 0001B978 case 12
MOV             R0, #0xFFFFFFFF
B               loc_1BA78

loc_1BA88               ; jumptable 0001B978 case 20
MOV             R0, #0
B               loc_1BA78

loc_1BA90
CMP             R4, #0x47 ; 'G'
BEQ             loc_1BB5C
BGT             loc_1BB24
CMP             R4, #0x25 ; '%'
BEQ             loc_1BB94
BGT             loc_1BAD8
CMN             R4, #2
BEQ             loc_1BB48
BGT             loc_1BAC8
CMN             R4, #3

loc_1BAB8
BNE             loc_1B360

loc_1BABC
MOV             R0, R5
BL              sub_1ABF0
B               loc_1B360

loc_1BAC8
CMP             R4, #0xD
BEQ             loc_1BABC
CMP             R4, #0x20 ; ' '
B               loc_1BAB8

loc_1BAD8
CMP             R4, #0x3C ; '<'
BEQ             loc_1BB5C
BGT             loc_1BB04
CMP             R4, #0x2F ; '/'
BNE             loc_1B360
LDR             R2, =dword_7DBC0
LDR             R3, [R2]
BIC             R3, R3, #0x8000

loc_1BAF8
STR             R3, [R2]
BL              sub_1B028
B               loc_1B360

loc_1BB04
CMP             R4, #0x3E ; '>'
BEQ             loc_1BB5C
CMP             R4, #0x3F ; '?'
BNE             loc_1B360
LDR             R2, =dword_7DBC0
LDR             R3, [R2]
ORR             R3, R3, #0x8000
B               loc_1BAF8

loc_1BB24
CMP             R4, #0x6E ; 'n'
BEQ             loc_1BBC4
BGT             loc_1BB68
CMP             R4, #0x65 ; 'e'
BGT             loc_1BB54
CMP             R4, #0x64 ; 'd'
BGE             loc_1BABC
CMP             R4, #0x62 ; 'b'

loc_1BB44
BNE             loc_1B360

loc_1BB48
MOV             R0, R5
BL              sub_1AC44
B               loc_1B360

loc_1BB54
CMP             R4, #0x67 ; 'g'
BNE             loc_1B360

loc_1BB5C
MOV             R1, #1

loc_1BB60
BL              sub_1ACA0
B               loc_1B360

loc_1BB68
CMP             R4, #0x77 ; 'w'
BEQ             loc_1BB48
BGT             loc_1BB84
CMP             R4, #0x70 ; 'p'
BEQ             loc_1BB94
CMP             R4, #0x75 ; 'u'
B               loc_1BB44

loc_1BB84
CMP             R4, #0x79 ; 'y'
BEQ             loc_1BB48
CMP             R4, #0x7A ; 'z'
B               loc_1BAB8

loc_1BB94
BL              sub_1A388
LDR             R3, =dword_7DB98
MOV             R1, #1
LDR             R3, [R3]
LDR             R2, [R3,#0x4C]
CMP             R2, #0
LDRLE           R2, [R3,#0x18]
LDR             R3, =0x51EB851F
MUL             R2, R2, R5
UMULL           R2, R3, R2, R3
MOV             R0, R3,LSR#5
B               loc_1BB60

loc_1BBC4
LDR             R3, =dword_7DB98
LDR             R3, [R3]
LDR             R0, [R3,#0x54]
ADD             R0, R5, R0
BL              sub_1ACEC
B               loc_1B360
; End of function sub_1B150

off_1BBDC DCD dword_7DB98
off_1BBE0 DCD asc_6B3FB+0x1F ; "~"
off_1BBE4 DCD aEmmnIfsrs ; "EMmN~IFSRs"
off_1BBE8 DCD optind
off_1BBEC DCD aLess     ; "LESS"
off_1BBF0 DCD dword_7DBC0
off_1BBF4 DCD asc_6B39D+1 ; ""
off_1BBF8 DCD aDevTty   ; "/dev/tty"
off_1BBFC DCD sub_19DAC
dword_1BC00 DCD 0x700F44E
off_1BC04 DCD aC_0      ; ":%c"
dword_1BC08 DCD 0x98967E
dword_1BC0C DCD 0x98967F
off_1BC10 DCD aLogFile  ; "Log file: "
off_1BC14 DCD aErrorOpeningLo ; "Error opening log file"
off_1BC18 DCD aSS_2+3   ; "%s\n"
off_1BC1C DCD aDone     ; "Done"
off_1BC20 DCD aTheseFeaturesA+0x5B ; " :"
dword_1BC24 DCD 0x51EB851F



; int __fastcall sub_1BC28(int, char **)
sub_1BC28

flags= -0x14
name= -0xC
s= -8

LDR             R3, =(asc_6B39D+1) ; ""
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
MOV             R4, R1
LDR             R1, =aHxNV ; "^hx:n:v:"
MOV             R0, R4
MOV             R8, #0
STR             R3, [SP,#0x14+s]
ADD             R3, SP, #0x14+s
STR             R3, [SP,#0x14+flags]
ADD             R3, SP, #0x14+name
MOV             R2, R3
LDR             R7, =lsetxattr
BL              sub_593CC
LDR             R3, =optind
AND             R5, R0, #2
LDR             R6, =lremovexattr
LDR             R3, [R3]
ADD             R4, R4, R3,LSL#2
AND             R3, R0, #1
CMP             R3, #0
LDR             R3, =setxattr
MOVEQ           R7, R3
LDR             R3, =removexattr
MOVEQ           R6, R3

loc_1BC8C
CMP             R5, #0
LDR             R9, [R4]
LDR             R10, [SP,#0x14+name]
BEQ             loc_1BCD4
MOV             R1, R10 ; name
MOV             R0, R9  ; path
BLX             R6 ; removexattr lremovexattr

loc_1BCA8
CMP             R0, #0
BEQ             loc_1BCBC
MOV             R8, #1
LDR             R0, [R4]
BL              sub_16B80

loc_1BCBC
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_1BC8C
MOV             R0, R8
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_1BCD4
LDR             R11, [SP,#0x14+s]
MOV             R0, R11 ; s
BL              strlen
STR             R5, [SP,#0x14+flags] ; flags
MOV             R3, R0  ; size
MOV             R2, R11 ; value
MOV             R1, R10 ; name
MOV             R0, R9  ; path
BLX             R7 ; lsetxattr setxattr
B               loc_1BCA8
; End of function sub_1BC28

off_1BCFC DCD asc_6B39D+1 ; ""
off_1BD00 DCD aHxNV     ; "^hx:n:v:"
off_1BD04 DCD lsetxattr
off_1BD08 DCD optind
off_1BD0C DCD lremovexattr
off_1BD10 DCD setxattr
off_1BD14 DCD removexattr



; int __fastcall sub_1BD18(char *s1, char *s2)
sub_1BD18
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R6, R1
MOV             R5, #0

loc_1BD28
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_1BD40
MOV             R5, #0xFFFFFFFF

loc_1BD38
MOV             R0, R5
POP             {R4-R6,PC}

loc_1BD40               ; s2
MOV             R1, R6
MOV             R0, R4  ; s1
BL              strcasecmp
CMP             R0, #0
BEQ             loc_1BD38
MOV             R0, R4  ; s
ADD             R5, R5, #1
BL              strlen
ADD             R0, R0, #1
ADD             R4, R4, R0
B               loc_1BD28
; End of function sub_1BD18




; int __fastcall sub_1BD6C(char *)
sub_1BD6C
MOV             R2, #0
MOV             R1, R2
B               sub_189FC
; End of function sub_1BD6C




; int __fastcall sub_1BD78(int fd, char, int)
sub_1BD78
PUSH            {R4-R8,LR}
ANDS            R5, R1, #1
MOV             R6, R0
MOV             R4, R1
MOV             R7, R2
BEQ             loc_1BDA0
MOVW            R1, #0x541F ; request
BL              ioctl
SUBS            R5, R0, #0
BLT             loc_1BDF4

loc_1BDA0
TST             R4, #2
BEQ             loc_1BDBC
MOVW            R1, #0x5453 ; request
MOV             R0, R6  ; fd
BL              ioctl
SUBS            R5, R0, #0
BLT             loc_1BE0C

loc_1BDBC
TST             R4, #4
BEQ             loc_1BDDC
MOV             R2, R7
MOVW            R1, #0x541E ; request
MOV             R0, R6  ; fd
BL              ioctl
SUBS            R5, R0, #0
BLT             loc_1BE14

loc_1BDDC
TST             R4, #8
BEQ             loc_1BDEC
MOV             R0, R6  ; fd
BL              close

loc_1BDEC
MOV             R0, R5
POP             {R4-R8,PC}

loc_1BDF4
LDR             R0, =aCanTSetSerialI ; "can't set serial info"

loc_1BDF8
BL              sub_16B80
TST             R4, #0x10
BNE             loc_1BDDC
MOV             R0, #1  ; status
BL              exit

loc_1BE0C
LDR             R0, =aCanTAutoconfig ; "can't autoconfigure port"
B               loc_1BDF8

loc_1BE14
LDR             R0, =aCanTGetSerialI ; "can't get serial info"
B               loc_1BDF8
; End of function sub_1BD78

off_1BE1C DCD aCanTSetSerialI ; "can't set serial info"
off_1BE20 DCD aCanTAutoconfig ; "can't autoconfigure port"
off_1BE24 DCD aCanTGetSerialI ; "can't get serial info"



; int __fastcall sub_1BE28(int, char **)
sub_1BE28

var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_18= -0x18

PUSH            {R4-R11,LR}
MOV             R4, R1
SUB             SP, SP, #0x54
LDR             R1, =aBgavzgq ; "^bGavzgq"
MOV             R0, R4
BL              sub_593CC
LDR             R3, =optind
MOV             R5, R0
LDR             R3, [R3]
ADD             R7, R4, R3,LSL#2
LDR             R2, [R7,#4]
CMP             R2, #0
ORREQ           R5, R0, #0x20 ; ' '
ANDS            R6, R5, #0x20 ; ' '
BNE             loc_1BFDC
LDR             R4, [R4,R3,LSL#2]
MOVW            R1, #0x802
MOV             R0, R4
BL              sub_586C8
SUBS            R8, R0, #0
BGE             loc_1C34C
MOV             R0, R4
BL              sub_16B80
MOV             R0, #0xC9 ; status
BL              exit

loc_1BE8C
LDRB            R2, [R4]
MOV             R0, R9  ; s1
STR             R3, [SP,#0x54+var_48]
CMP             R2, #0x5E ; '^'
ADDEQ           R4, R4, #1
STR             R2, [SP,#0x54+var_4C]
MOV             R1, R4  ; s2
BL              sub_1BD18
CMP             R0, #0
LDRD            R2, R3, [SP,#0x54+var_4C]
BGE             loc_1BEC4
LDR             R0, =aInvalidFlagS ; "invalid flag: %s"
MOV             R1, R4

loc_1BEC0
BL              sub_16DBC

loc_1BEC4
SUB             R1, R0, #0x10
CMP             R1, #6
BHI             loc_1BEE8
ADD             R6, R3, #8
LDR             R3, [R3,#8]
CMP             R3, #0
MOVEQ           R1, R4
LDREQ           R0, =aSRequiresAnArg ; "%s requires an argument"
BEQ             loc_1BEC0

loc_1BEE8
CMP             R2, #0x5E ; '^'
BNE             loc_1BF08
SUB             R3, R0, #6
CMP             R3, #9
BLS             loc_1BF9C
MOV             R1, R4
LDR             R0, =aCanTInvertS ; "can't invert %s"
B               loc_1BEC0

loc_1BF08               ; switch 24 cases
CMP             R0, #0x17
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_1BF0C ; jumptable 0001BF0C default case
jpt_1BF0C DCD loc_1BF74 ; jump table for switch statement
DCD loc_1BF74
DCD loc_1BF74
DCD loc_1BF74
DCD loc_1BF74
DCD loc_1BF74
DCD loc_1BF84
DCD loc_1BF84
DCD loc_1BF84
DCD loc_1BF84
DCD loc_1BF84
DCD loc_1BF84
DCD loc_1BF84
DCD loc_1BF84
DCD loc_1BF84
DCD loc_1BF84
DCD loc_1C02C
DCD loc_1C03C
DCD loc_1C04C
DCD loc_1C05C
DCD loc_1C084
DCD loc_1C094
DCD loc_1C0A4
DCD loc_1C0E4

loc_1BF74               ; jumptable 0001BF0C cases 0-5
LDR             R3, [SP,#0x54+var_30]
BIC             R3, R3, #0x1000
BIC             R3, R3, #0x30 ; '0'
STR             R3, [SP,#0x54+var_30]

loc_1BF84               ; jumptable 0001BF0C cases 6-15
LDR             R3, =word_64294
MOV             R0, R0,LSL#1
LDRH            R2, [R3,R0]
LDR             R3, [SP,#0x54+var_30]
ORR             R3, R3, R2
B               loc_1BFB0

loc_1BF9C
LDR             R3, =word_64294
MOV             R0, R0,LSL#1
LDRH            R2, [R3,R0]
LDR             R3, [SP,#0x54+var_30]
BIC             R3, R3, R2

loc_1BFB0
STR             R3, [SP,#0x54+var_30]

def_1BF0C               ; jumptable 0001BF0C default case
MOV             R3, R6

loc_1BFB8
LDR             R4, [R3,#4]
ADD             R6, R3, #4
CMP             R4, #0
BNE             loc_1BE8C
ADD             R2, SP, #0x54+var_40
MOV             R1, #9
MOV             R0, R8  ; fd
BL              sub_1BD78
STR             R4, [R7,#4]

loc_1BFDC
TST             R5, #0x28
BEQ             loc_1C020
LDR             R10, =(aSSS_0+6) ; "%s%s"

loc_1BFE8
LDR             R4, [R7]
AND             R9, R5, #7
MOVW            R1, #0x802
MOV             R0, R4
BL              sub_586C8
SUBS            R2, R9, #1
MOVNE           R2, #1
ANDS            R2, R2, R0,LSR#31
BEQ             loc_1C0F8
MOV             R0, R4
BL              sub_16B80

loc_1C014
LDR             R3, [R7,#4]!
CMP             R3, #0
BNE             loc_1BFE8

loc_1C020
MOV             R0, #0
ADD             SP, SP, #0x54 ; 'T'
POP             {R4-R11,PC}

loc_1C02C               ; jumptable 0001BF0C case 16
LDR             R0, [R6]
BL              sub_1BD6C
STR             R0, [SP,#0x54+var_38]
B               def_1BF0C ; jumptable 0001BF0C default case

loc_1C03C               ; jumptable 0001BF0C case 17
LDR             R0, [R6]
BL              sub_1BD6C
STR             R0, [SP,#0x54+var_34]
B               def_1BF0C ; jumptable 0001BF0C default case

loc_1C04C               ; jumptable 0001BF0C case 18
LDR             R0, [R6]
BL              sub_1BD6C
STR             R0, [SP,#0x54+var_28]
B               def_1BF0C ; jumptable 0001BF0C default case

loc_1C05C               ; jumptable 0001BF0C case 19
LDR             R4, [R6]
LDR             R0, =aUnknown_2 ; "unknown"
MOV             R1, R4  ; s2
BL              sub_1BD18
CMP             R0, #0
MOVLT           R1, R4
LDRLT           R0, =aIllegalUartTyp ; "illegal UART type: %s"
BLT             loc_1BEC0
STR             R0, [SP,#0x54+var_40]
B               def_1BF0C ; jumptable 0001BF0C default case

loc_1C084               ; jumptable 0001BF0C case 20
LDR             R0, [R6]
BL              sub_1BD6C
STR             R0, [SP,#0x54+var_24]
B               def_1BF0C ; jumptable 0001BF0C default case

loc_1C094               ; jumptable 0001BF0C case 21
LDR             R0, [R6]
BL              sub_1BD6C
STRH            R0, [SP,#0x54+var_20]
B               def_1BF0C ; jumptable 0001BF0C default case

loc_1C0A4               ; jumptable 0001BF0C case 22
LDR             R4, [R6]
MOV             R1, R10 ; s2
MOV             R0, R4  ; s1
BL              strcasecmp
CMP             R0, #0
MOVWEQ          R0, #0xFFFF
BEQ             loc_1C0DC
MOV             R1, R11 ; s2
MOV             R0, R4  ; s1
BL              strcasecmp
CMP             R0, #0
BEQ             loc_1C0DC
MOV             R0, R4
BL              sub_1BD6C

loc_1C0DC
STRH            R0, [SP,#0x54+var_18]
B               def_1BF0C ; jumptable 0001BF0C default case

loc_1C0E4               ; jumptable 0001BF0C case 23
ADD             R2, SP, #0x54+var_40
MOV             R1, #7
MOV             R0, R8  ; fd
BL              sub_1BD78
B               def_1BF0C ; jumptable 0001BF0C default case

loc_1C0F8
CMP             R0, #0
BLT             loc_1C014
ADD             R2, SP, #0x54+var_40
MOV             R1, #0x1C
BL              sub_1BD78
CMP             R0, #0
BLT             loc_1C014
LDR             R1, [SP,#0x54+var_40]
CMP             R1, #0x13
LDRGT           R2, =aUndefined ; "undefined"
BGT             loc_1C130
LDR             R0, =aUnknown_2 ; "unknown"
BL              sub_16964
MOV             R2, R0

loc_1C130               ; switch 5 cases
CMP             R9, #4
LDRLS           PC, [PC,R9,LSL#2] ; switch jump
B               def_1C134 ; jumptable 0001C134 default case, case 3
jpt_1C134 DCD loc_1C150 ; jump table for switch statement
DCD loc_1C174
DCD loc_1C1D8
DCD def_1C134
DCD loc_1C204

loc_1C150               ; jumptable 0001C134 case 0
LDR             R3, [SP,#0x54+var_34]
MOV             R1, R4
LDR             R0, =aSUartSPort0x4x ; "%s, UART: %s, Port: 0x%.4x, IRQ: %d"
STR             R3, [SP,#0x54+var_54]
LDR             R3, [SP,#0x54+var_38]
BL              printf

def_1C134               ; jumptable 0001C134 default case, case 3
LDR             R6, =(asc_6B39D+1) ; ""
LDR             R4, =aFlags ; ", Flags: "
B               loc_1C19C

loc_1C174               ; jumptable 0001C134 case 1
LDR             R3, [SP,#0x54+var_40]
CMP             R3, #0
BEQ             loc_1C014
MOV             R1, R4
LDR             R6, =(aDup+6) ; ")"
LDR             R4, =asc_6549B ; " ("
STR             R2, [SP,#0x54+var_54]
LDR             R0, =aSAt0x4xIrqDIsA ; "%s at 0x%.4x (irq = %d) is a %s"
LDRD            R2, R3, [SP,#0x54+var_38]
BL              printf

loc_1C19C
LDR             R11, [SP,#0x54+var_30]
MOVW            R3, #0x1030
AND             R3, R11, R3
CMP             R3, #0x30 ; '0'
BEQ             loc_1C334
BHI             loc_1C280
CMP             R3, #0x10
BEQ             loc_1C33C
CMP             R3, #0x20 ; ' '
BEQ             loc_1C344

loc_1C1C4
CMP             R9, #1
MOVGT           R1, #0
BGT             loc_1C2A0

loc_1C1D0
MOV             R3, R4
B               loc_1C2C0

loc_1C1D8               ; jumptable 0001C134 case 2
LDR             R3, [SP,#0x54+var_24]
MOV             R1, R4
LDR             R0, =aSUartSPort0x4x_0 ; "%s uart %s port 0x%.4x irq %d baud_base"...
LDR             R6, =(asc_6B39D+1) ; ""
STR             R3, [SP,#0x54+var_50]
LDR             R3, [SP,#0x54+var_34]
LDR             R4, =(asc_6582A+9) ; " "
STR             R3, [SP,#0x54+var_54]
LDR             R3, [SP,#0x54+var_38]
BL              printf
B               loc_1C19C

loc_1C204               ; jumptable 0001C134 case 4
LDR             R3, [SP,#0x54+var_34]
MOV             R1, R4
LDR             R0, =aSLineDUartSPor ; "%s, Line %d, UART: %s, Port: 0x%.4x, IR"...
STR             R3, [SP,#0x54+var_50]
LDR             R3, [SP,#0x54+var_38]
STR             R3, [SP,#0x54+var_54]
MOV             R3, R2
LDR             R2, [SP,#0x54+var_3C]
BL              printf
LDR             R1, [SP,#0x54+var_24]
LDR             R3, [SP,#0x54+var_28]
LDRH            R2, [SP,#0x54+var_20]
LDR             R0, =aBaudBaseDClose ; "\tBaud_base: %d, close_delay: %u, divis"...
BL              printf
LDR             R0, =aClosingWait ; "\tclosing_wait: "
BL              printf
LDRH            R1, [SP,#0x54+var_18]
CMP             R1, #0
BEQ             loc_1C26C
MOVW            R3, #0xFFFF
CMP             R1, R3
LDREQ           R0, =aNone_0 ; "none"
BEQ             loc_1C270
LDR             R0, =(aSIsAlreadyRunn+0x16) ; "%u\n"
BL              printf
B               loc_1C274

loc_1C26C
LDR             R0, =aInfinite ; "infinite"

loc_1C270
BL              puts

loc_1C274
LDR             R6, =(aShellReturnedI+0x13) ; "\n"
LDR             R4, =aFlags_0 ; "\tFlags: "
B               loc_1C19C

loc_1C280
CMP             R3, #0x1000
BEQ             loc_1C29C
MOVW            R2, #0x1010
CMP             R3, R2
BNE             loc_1C1C4
MOV             R1, #4
B               loc_1C2A0

loc_1C29C
MOV             R1, #3

loc_1C2A0
LDR             R0, =aSpdNormal ; "spd_normal"
BL              sub_16964
SUBS            R2, R0, #0
BEQ             loc_1C1D0
MOV             R1, R4
MOV             R0, R10 ; format
BL              printf
LDR             R3, =(asc_6582A+9) ; " "

loc_1C2C0
MOV             R8, #6

loc_1C2C4
LDR             R1, =word_64294
MOV             R2, R8,LSL#1
LDRH            R2, [R2,R1]
TST             R2, R11
BEQ             loc_1C314
CMP             R9, #1
BGT             loc_1C2EC
SUB             R2, R8, #9
CMP             R2, #5
BLS             loc_1C314

loc_1C2EC
MOV             R1, R8
LDR             R0, =aSpdNormal ; "spd_normal"
STR             R3, [SP,#0x54+var_4C]
BL              sub_16964
LDR             R3, [SP,#0x54+var_4C]
MOV             R2, R0
MOV             R0, R10 ; format
MOV             R1, R3
BL              printf
LDR             R3, =(asc_6582A+9) ; " "

loc_1C314
ADD             R8, R8, #1
CMP             R8, #0x10
BNE             loc_1C2C4
CMP             R4, R3
LDR             R0, =(asc_6B39D+1) ; ""
MOVNE           R0, R6  ; s
BL              puts
B               loc_1C014

loc_1C334
MOV             R1, #5
B               loc_1C2A0

loc_1C33C
MOV             R1, #1
B               loc_1C2A0

loc_1C344
MOV             R1, #2
B               loc_1C2A0

loc_1C34C
ADD             R2, SP, #0x54+var_40
MOV             R1, #4
BL              sub_1BD78
TST             R5, #0x10
MOV             R3, R7
STRNE           R6, [SP,#0x54+var_30]
LDR             R9, =aSpdNormal ; "spd_normal"
LDR             R10, =aNone_0 ; "none"
LDR             R11, =aInfinite ; "infinite"
B               loc_1BFB8
; End of function sub_1BE28

off_1C374 DCD aBgavzgq  ; "^bGavzgq"
off_1C378 DCD optind
off_1C37C DCD aInvalidFlagS ; "invalid flag: %s"
off_1C380 DCD aSRequiresAnArg ; "%s requires an argument"
off_1C384 DCD aCanTInvertS ; "can't invert %s"
off_1C388 DCD word_64294
off_1C38C DCD aSSS_0+6  ; "%s%s"
off_1C390 DCD aUnknown_2 ; "unknown"
off_1C394 DCD aIllegalUartTyp ; "illegal UART type: %s"
off_1C398 DCD aUndefined ; "undefined"
off_1C39C DCD aSUartSPort0x4x ; "%s, UART: %s, Port: 0x%.4x, IRQ: %d"
off_1C3A0 DCD asc_6B39D+1 ; ""
off_1C3A4 DCD aFlags    ; ", Flags: "
off_1C3A8 DCD aDup+6    ; ")"
off_1C3AC DCD asc_6549B ; " ("
off_1C3B0 DCD aSAt0x4xIrqDIsA ; "%s at 0x%.4x (irq = %d) is a %s"
off_1C3B4 DCD aSUartSPort0x4x_0 ; "%s uart %s port 0x%.4x irq %d baud_base"...
off_1C3B8 DCD asc_6582A+9 ; " "
off_1C3BC DCD aSLineDUartSPor ; "%s, Line %d, UART: %s, Port: 0x%.4x, IR"...
off_1C3C0 DCD aBaudBaseDClose ; "\tBaud_base: %d, close_delay: %u, divis"...
off_1C3C4 DCD aClosingWait ; "\tclosing_wait: "
off_1C3C8 DCD aNone_0   ; "none"
off_1C3CC DCD aSIsAlreadyRunn+0x16 ; "%u\n"
off_1C3D0 DCD aInfinite ; "infinite"
off_1C3D4 DCD aShellReturnedI+0x13 ; "\n"
off_1C3D8 DCD aFlags_0  ; "\tFlags: "
off_1C3DC DCD aSpdNormal ; "spd_normal"



; int __fastcall sub_1C3E0(int, char **)
sub_1C3E0

var_E8= -0xE8
var_E4= -0xE4
var_E0= -0xE0
var_DC= -0xDC
var_D8= -0xD8
s= -0xD4
src= -0xD0
addr= -0xC8
var_C0= -0xC0
var_BE= -0xBE
var_BC= -0xBC
var_B5= -0xB5
var_B4= -0xB4
var_B0= -0xB0
var_AC= -0xAC
var_9C= -0x9C
var_96= -0x96
var_8C= -0x8C
var_88= -0x88
var_84= -0x84
var_82= -0x82
var_80= -0x80
var_7C= -0x7C
var_7A= -0x7A
var_78= -0x78
dest= -0x18
var_s0=  0

LDR             R3, =aEth0 ; "eth0"
PUSH            {R4-R10,LR}
MOV             R9, R1
SUB             SP, SP, #0xE8
LDR             R1, =aBiP ; "^bi:p:"
ADD             R2, SP, #0xE8+var_D8
MOV             R0, R9
STR             R3, [SP,#0xE8+var_D8]
ADD             R3, SP, #0xE8+s
BL              sub_593CC
ANDS            R4, R0, #4
MOV             R6, R0
ADD             R5, SP, #0xE8+var_8C
BEQ             loc_1C48C
LDR             R7, [SP,#0xE8+s]
ADD             R3, SP, #0xE8+var_78
STR             R3, [SP,#0xE8+var_DC]
ADD             R10, SP, #0xE8+var_80
ADD             R3, SP, #0xE8+var_7C
ADD             R8, SP, #0xE8+var_84
STR             R3, [SP,#0xE8+var_E0]
MOV             R2, R5
STR             R10, [SP,#0xE8+var_E4]
ADD             R3, SP, #0xE8+var_88
STR             R8, [SP,#0xE8+var_E8]
MOV             R0, R7  ; s
LDR             R1, =a2x2x2x2x2x2x ; "%2x:%2x:%2x:%2x:%2x:%2x"
BL              sscanf
CMP             R0, #3
MOV             R4, R0
BGT             loc_1C63C
STMEA           SP, {R8,R10}
ADD             R3, SP, #0xE8+var_88
MOV             R2, R5
LDR             R1, =(aSUUUU+2) ; format
MOV             R0, R7  ; s
BL              sscanf
CMP             R0, #3
MOV             R4, R0
BGT             loc_1C63C
MOV             R4, #0
LDR             R0, =aCanTReadWakeOn ; "can't read Wake-On-LAN pass"
BL              sub_16DDC

loc_1C48C
MOV             R2, #0
MOV             R1, #3
MOV             R0, #0x11
AND             R8, R6, #1
BL              sub_179A4
LDR             R3, =optind
ADD             R6, SP, #0xE8+addr
MOV             R7, R0
MOV             R1, R6  ; addr
LDR             R3, [R3]
LDR             R9, [R9,R3,LSL#2]
MOV             R0, R9  ; asc
BL              ether_aton_r
CMP             R0, #0
BNE             loc_1C4E0
MOV             R1, R6  ; addr
MOV             R0, R9  ; hostname
BL              ether_hostton
CMP             R0, #0
BEQ             loc_1C4E0
BL              sub_162F0

loc_1C4E0
MOV             R3, #0xFFFFFFFF
CMP             R8, #0
STR             R3, [SP,#0xE8+var_8C]
STRH            R3, [R5,#4]
LDRH            R3, [R6,#4]
LDMEQ           R6, {R0,R1}
STRH            R3, [SP,#0xE8+var_82]
MOVW            R3, #0x4208
STREQ           R0, [SP,#0xE8+var_8C]
STRH            R3, [SP,#0xE8+var_80]
MOV             R3, #0xFFFFFFFF
LDR             R0, [SP,#0xE8+addr]
STR             R3, [SP,#0x6A]
STRH            R3, [SP,#0xE8+var_7A]
MOV             R3, #0
STRHEQ          R1, [SP,#0xE8+var_88]
STR             R0, [SP,#0x62]

loc_1C524
LDR             R0, [R6]
ADD             R2, R5, R3
ADD             R3, R3, #6
CMP             R3, #0x60 ; '`'
STR             R0, [R2,#0x14]
LDRH            R1, [R6,#4]
STRH            R1, [R2,#0x18]
BNE             loc_1C524
LDR             R1, [SP,#0xE8+var_D8]
ADD             R0, SP, #0xE8+var_AC
BL              sub_16EA8
LDR             R3, [SP,#0xE8+var_D8]
ADD             R2, SP, #0xE8+var_AC
MOVW            R1, #0x8927
MOV             R0, R7
STR             R3, [SP,#0xE8+var_E8]
LDR             R3, =aSiocgifhwaddrO ; "SIOCGIFHWADDR on %s failed"
BL              sub_17A4C
ADD             R3, SP, #0xE8+var_s0
CMP             R4, #0
LDR             R2, [R3,#-0x9A]!
MOVEQ           R4, #0x74 ; 't'
LDRH            R3, [R3,#4]
STR             R2, [SP,#0x62]
STRH            R3, [SP,#0xE8+var_82]
BEQ             loc_1C5A0
MOV             R2, R4  ; n
ADD             R4, R4, #0x74 ; 't'
ADD             R1, SP, #0xE8+src ; src
ADD             R0, SP, #0xE8+dest ; dest
BL              memcpy

loc_1C5A0
CMP             R8, #0
BEQ             loc_1C5C0
MOV             R0, R7
BL              sub_6241C
CMP             R0, #0
BEQ             loc_1C5C0
LDR             R0, =aSoBroadcast ; "SO_BROADCAST"
BL              sub_16AF4

loc_1C5C0
LDR             R1, [SP,#0xE8+var_D8]
ADD             R0, SP, #0xE8+var_AC
BL              sub_16EA8
LDR             R3, =aSiocgifindex ; "SIOCGIFINDEX"
ADD             R2, SP, #0xE8+var_AC
MOVW            R1, #0x8933
MOV             R0, R7
BL              sub_17B18
MOV             R2, #0x12 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xE8+var_BE ; s
BL              memset
MOV             R3, #0x11
LDM             R5, {R0,R1}
STRH            R3, [SP,#0xE8+var_C0]
MOV             R2, R4
LDR             R3, [SP,#0xE8+var_9C]
STR             R0, [SP,#0xE8+var_B4]
MOV             R0, R7
STRH            R1, [SP,#0xE8+var_B0]
MOV             R1, R5
STR             R3, [SP,#0xE8+var_BC]
MOV             R3, #6
STRB            R3, [SP,#0xE8+var_B5]
MOV             R3, #0x14
STR             R3, [SP,#0xE8+var_E8]
ADD             R3, SP, #0xE8+var_C0
BL              sub_179DC
MOV             R0, #0
ADD             SP, SP, #0xE8
POP             {R4-R10,PC}

loc_1C63C
MOV             R3, #0
ADD             R2, SP, #0xE8+src

loc_1C644
LDR             R1, [R5,R3,LSL#2]
STRB            R1, [R3,R2]
ADD             R3, R3, #1
CMP             R3, R4
BLT             loc_1C644
B               loc_1C48C
; End of function sub_1C3E0

off_1C65C DCD aEth0     ; "eth0"
off_1C660 DCD aBiP      ; "^bi:p:"
off_1C664 DCD a2x2x2x2x2x2x ; "%2x:%2x:%2x:%2x:%2x:%2x"
off_1C668 DCD aSUUUU+2  ; "%u.%u.%u.%u"
off_1C66C DCD aCanTReadWakeOn ; "can't read Wake-On-LAN pass"
off_1C670 DCD optind
off_1C674 DCD aSiocgifhwaddrO ; "SIOCGIFHWADDR on %s failed"
off_1C678 DCD aSoBroadcast ; "SO_BROADCAST"
off_1C67C DCD aSiocgifindex ; "SIOCGIFINDEX"



; int __fastcall sub_1C680(const char *, int)
sub_1C680

var_4= -4

CMP             R1, #0
PUSH            {R0,R1,R4-R6,LR}
STR             R0, [SP,#8+var_4]
BEQ             loc_1C6D8
LDR             R6, =asc_65657 ; "# "
LDR             R5, =0x430101
LDR             R1, =sub_61CA8
BL              sub_5DDC4
MOV             R4, R0

loc_1C6A4
MOV             R3, R6
MOV             R2, R5
ADD             R1, SP, #8+var_4
MOV             R0, R4
BL              sub_5DE1C
CMP             R0, #0
BNE             loc_1C6C8

loc_1C6C0
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_1C6C8
MOV             R1, #0
LDR             R0, [SP,#8+var_4]
BL              sub_1C680
B               loc_1C6A4

loc_1C6D8
MOV             R4, R0
BL              strlen
MOV             R1, R0  ; len
MOV             R0, R4  ; name
BL              sethostname
CMP             R0, #0
BEQ             loc_1C6C0
LDR             R0, =aSethostname_0 ; "sethostname"
BL              sub_16B40
; End of function sub_1C680

off_1C6FC DCD asc_65657 ; "# "
dword_1C700 DCD 0x430101
off_1C704 DCD sub_61CA8
off_1C708 DCD aSethostname_0 ; "sethostname"



; int __fastcall sub_1C70C(int, char **)
sub_1C70C

var_4= -4

PUSH            {R0,R1,R4-R8,LR}
MOV             R5, R1
LDR             R3, =aDomain ; "domain"
ADD             R2, SP, #8+var_4
MOV             R0, R5
LDR             R1, =aDfisfV ; "dfisF:v"
BL              sub_593CC
LDR             R3, =optind
MOV             R4, R0
LDR             R6, [R3]
BL              sub_60AA0
LDR             R3, =dword_7DB90
LDR             R3, [R3]
LDRB            R3, [R3]
CMP             R3, #0x64 ; 'd'
MOVEQ           R4, #1
ANDS            R8, R4, #7
BEQ             loc_1C804
BL              sub_62520
LDR             R6, [R0]
MOV             R5, R0
MOV             R1, #0x2E ; '.'
MOV             R0, R6
BL              strchrnul
ANDS            R3, R4, #2
MOVNE           R0, R6
BNE             loc_1C820
TST             R4, #8
STRBNE          R3, [R0]
LDRNE           R0, [R5]
BNE             loc_1C820
TST             R4, #1
BEQ             loc_1C7AC
LDRB            R3, [R0]
CMP             R3, #0
ADDNE           R0, R0, #1
BNE             loc_1C820

loc_1C7A0
MOV             R0, #0
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_1C7AC
LDR             R3, [R5,#0xC]
CMP             R3, #4
BNE             loc_1C7A0
LDR             R4, [R5,#0x10]
LDR             R6, =(aViaS+4) ; "%s "
LDR             R7, =(aSS_8+3) ; "%s"

loc_1C7C4
LDR             R3, [R4],#4
CMP             R3, #0
BNE             loc_1C7DC
MOV             R0, #0xA ; c
BL              j_putchar_unlocked
B               loc_1C7A0

loc_1C7DC
LDR             R5, [R4]
LDR             R0, [R3] ; in
CMP             R5, #0
MOVNE           R5, R6
MOVEQ           R5, R7
BL              inet_ntoa
MOV             R1, R0
MOV             R0, R5  ; format
BL              printf
B               loc_1C7C4

loc_1C804
TST             R4, #8
BEQ             loc_1C828
MOV             R7, R0
MOV             R1, #0x2E ; '.'
BL              strchrnul
STRB            R8, [R0]
MOV             R0, R7  ; s

loc_1C820
BL              puts
B               loc_1C7A0

loc_1C828
ANDS            R1, R4, #0x10
MOVNE           R1, #1
LDRNE           R0, [SP,#8+var_4]
BNE             loc_1C848
LDR             R3, [R5,R6,LSL#2]
CMP             R3, #0
BEQ             loc_1C820
MOV             R0, R3

loc_1C848
BL              sub_1C680
B               loc_1C7A0
; End of function sub_1C70C

off_1C850 DCD aDomain   ; "domain"
off_1C854 DCD aDfisfV   ; "dfisF:v"
off_1C858 DCD optind
off_1C85C DCD dword_7DB90
off_1C860 DCD aViaS+4   ; "%s "
off_1C864 DCD aSS_8+3   ; "%s"



; unsigned int __fastcall sub_1C868(int, int)
sub_1C868

var_5C= -0x5C
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_34= -0x34
var_24= -0x24
var_14= -0x14

LDR             R3, [R1,#4]
PUSH            {R4-R11,LR}
ADD             R7, R1, #4
SUB             SP, SP, #0x5C
CMP             R3, #0
BEQ             loc_1C8B0
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BNE             loc_1C8AC
LDRB            R2, [R3,#1]
CMP             R2, #0x61 ; 'a'
BNE             loc_1C8AC
LDRB            R3, [R3,#2]
CMP             R3, #0
ADDEQ           R7, R1, #8
MOVEQ           R3, #1
BEQ             loc_1C8B0

loc_1C8AC
MOV             R3, #0

loc_1C8B0
LDR             R0, [R7]
CMP             R0, #0
BEQ             loc_1C8D4
LDR             R3, [R7,#4]
CMP             R3, #0
BNE             loc_1C8DC

loc_1C8C8
BL              sub_1D6FC

loc_1C8CC
ADD             SP, SP, #0x5C ; '\'
POP             {R4-R11,PC}

loc_1C8D4
MOV             R0, R3
B               loc_1C8C8

loc_1C8DC
MOV             R1, #2
MOV             R10, #0
MOV             R2, #0
MOV             R0, R1
ADD             R5, SP, #0x5C+var_24
MOV             R11, R10
BL              sub_179A4
LDR             R1, [R7]
STR             R0, [SP,#0x5C+var_50]
MOV             R0, R5
BL              sub_16EA8
STR             R10, [SP,#0x5C+var_4C]

loc_1C90C
LDR             R6, [R7,#4]
ADD             R8, R7, #4
CMP             R6, #0
MOVEQ           R0, R6
BEQ             loc_1C8CC
LDRB            R3, [R6]
MOV             R4, #0
CMP             R3, #0x2D ; '-'
ADDEQ           R6, R6, #1
MOVEQ           R3, #0x2A ; '*'
MOVNE           R3, #0x15

loc_1C938
LDR             R2, =off_63314 ; "metric"
LDR             R1, [R4,R2] ; s2
ADD             R9, R2, R4
CMP             R1, #0
BNE             loc_1CA94
LDRH            R4, [R9,#4]
LDR             R6, =off_6330C ; "SIFADDR"
MOV             R4, R4,LSR#6

loc_1C958               ; base
ANDS            R2, R4, #2
LDR             R7, [R8]
AND             R3, R4, #0x120
ORR             R11, R11, R3
AND             R3, R4, #1
BEQ             loc_1CBCC
CMP             R3, #0
BEQ             loc_1CB6C
LDR             R1, =aInet_0 ; "inet"
MOV             R0, R7  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_1CA8C
MOV             R3, #2
LDR             R1, =aDefault ; "default"
MOV             R0, R7  ; s1
STR             R3, [SP,#0x5C+var_44]
BL              strcmp
CMP             R0, #0
STREQ           R0, [SP,#0x5C+var_40]
BEQ             loc_1C9F8
LDRB            R3, [R7]
CMP             R3, #0x2B ; '+'
BNE             loc_1C9E4
LDRB            R3, [R7,#1]
CMP             R3, #0
BNE             loc_1C9E4
SUB             R3, R11, #0x120
CLZ             R3, R3
MOV             R3, R3,LSR#5
ANDS            R3, R3, R4,LSR#9
LDRNE           R2, [SP,#0x5C+var_4C]
MVNNE           R3, R10
ORRNE           R3, R3, R2
BNE             loc_1C9F4

loc_1C9E4
MOV             R1, #0
MOV             R0, R7
BL              sub_62484
LDR             R3, [R0,#8]

loc_1C9F4
STR             R3, [SP,#0x5C+var_40]

loc_1C9F8
TST             R4, #0x100
LDRNE           R3, [SP,#0x5C+var_40]
STRNE           R3, [SP,#0x5C+var_4C]
TST             R4, #0x20
LDRNE           R10, [SP,#0x5C+var_40]
ADD             R3, SP, #0x5C+var_44

loc_1CA10
LDRH            R2, [R6,#6]
ADD             LR, R3, #0x10
ADD             R2, R5, R2

loc_1CA1C
MOV             R12, R3
ADD             R2, R2, #8
LDM             R12!, {R0,R1}
CMP             R12, LR
STR             R0, [R2,#-8]
STR             R1, [R2,#-4]
MOV             R3, R12
BNE             loc_1CA1C

loc_1CA3C
LDR             R3, [R6]
MOV             R2, R5
LDRH            R1, [R6,#4]
LDR             R0, [SP,#0x5C+var_50]
STR             R3, [SP,#0x5C+var_5C]
LDR             R3, =aSiocS ; "SIOC%s"
BL              sub_17A4C
TST             R4, #0x80
MOVNE           R2, R5
MOVNE           R3, #0
BEQ             loc_1CB14

loc_1CA68
MOV             R0, R2
LDRB            R1, [R2],#1
CMP             R1, #0
BNE             loc_1CBE8
CMP             R3, #0
BEQ             loc_1CB14
LDRB            R3, [R0,#-1]
CMP             R3, #0x2D ; '-'
BNE             loc_1CB14

loc_1CA8C
MOV             R7, R8
B               loc_1C90C

loc_1CA94               ; s1
MOV             R0, R6
STR             R3, [SP,#0x5C+var_48]
BL              strcmp
CMP             R0, #0
ADD             R4, R4, #8
LDR             R3, [SP,#0x5C+var_48]
BNE             loc_1C938
LDRB            R4, [R9,#4]
ANDS            R4, R4, R3
BNE             loc_1CAC8
LDR             R0, =aBadS ; "bad: '%s'"
SUB             R1, R6, #1

loc_1CAC4
BL              sub_16DBC

loc_1CAC8
TST             R4, #0x30
BEQ             loc_1CB20
LDRH            R4, [R9,#4]
AND             R3, R11, #0x20 ; ' '
MOV             R4, R4,LSR#6
TST             R3, R4
BEQ             loc_1CAE8

loc_1CAE4
BL              sub_162F0

loc_1CAE8
LDR             R2, [R7,#8]
LDR             R3, =off_63314 ; "metric"
LDR             R6, =off_632CC ; "SIFMETRIC"
CMP             R2, #0
SUB             R3, R9, R3
ADD             R6, R6, R3
ADD             R3, R7, #8
BNE             loc_1CB64
TST             R4, #0x10
BNE             loc_1CAE4
AND             R4, R4, #0x40 ; '@'

loc_1CB14
TST             R4, #0x40
BEQ             loc_1CA8C
MOV             R4, #4

loc_1CB20
MOV             R2, R5
LDR             R3, =aSiocgifflags ; "SIOCGIFFLAGS"
MOVW            R1, #0x8913
LDR             R0, [SP,#0x5C+var_50]
BL              sub_17B18
LDRH            R3, [SP,#0x5C+var_14]
TST             R4, #0xC
LDRH            R2, [R9,#6]
MOVW            R1, #0x8914
LDR             R0, [SP,#0x5C+var_50]
ORRNE           R3, R3, R2
BICEQ           R3, R3, R2
STRH            R3, [SP,#0x5C+var_14]
MOV             R2, R5
LDR             R3, =aSiocsifflags ; "SIOCSIFFLAGS"
BL              sub_17B18
B               loc_1CA8C

loc_1CB64
MOV             R8, R3
B               loc_1C958

loc_1CB6C               ; s
MOV             R1, R7
LDR             R0, =aEther ; "ether"
BL              sub_168D4
ADDS            R0, R0, #1
BEQ             loc_1CAE4
LDR             R7, [R8,#4]
ADD             R3, R8, #4
CMP             R7, #0
BEQ             loc_1CAE4
CMP             R0, #1
BEQ             loc_1CBA4

loc_1CB98
MOV             R1, R7
LDR             R0, =aInvalidHwAddrS ; "invalid hw-addr %s"
B               loc_1CAC4

loc_1CBA4
ADD             R1, SP, #0x5C+var_34
MOV             R0, R7
STR             R3, [SP,#0x5C+var_48]
BL              sub_5A454
CMP             R0, #0
LDR             R3, [SP,#0x5C+var_48]
BNE             loc_1CB98
MOV             R8, R3
ADD             R3, SP, #0x5C+var_34
B               loc_1CA10

loc_1CBCC               ; endptr
MOV             R1, R2
MOV             R0, R7  ; nptr
STR             R3, [SP,#0x5C+var_48]
BL              strtoul
LDRH            R2, [R6,#6]
STR             R0, [R5,R2]
B               loc_1CA3C

loc_1CBE8
CMP             R1, #0x3A ; ':'
ADDEQ           R3, R3, #1
SXTHEQ          R3, R3
B               loc_1CA68
; End of function sub_1C868

off_1CBF8 DCD off_63314 ; "metric"
off_1CBFC DCD off_6330C ; "SIFADDR"
off_1CC00 DCD aInet_0   ; "inet"
off_1CC04 DCD aDefault  ; "default"
off_1CC08 DCD aSiocS    ; "SIOC%s"
off_1CC0C DCD aBadS     ; "bad: '%s'"
off_1CC10 DCD off_632CC ; "SIFMETRIC"
off_1CC14 DCD aSiocgifflags ; "SIOCGIFFLAGS"
off_1CC18 DCD aSiocsifflags ; "SIOCSIFFLAGS"
; const int off_1CC1C
off_1CC1C DCD aEther    ; "ether"
off_1CC20 DCD aInvalidHwAddrS ; "invalid hw-addr %s"



; int __fastcall sub_1CC24(unsigned __int8 *)
sub_1CC24
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R8, =a02x ; "%02X-"
MOV             R0, #0x31 ; '1'
ADD             R7, R4, #0x10
BL              sub_1748C
BL              sub_57710
MOV             R5, R0
MOV             R6, R0

loc_1CC48
LDRB            R2, [R4],#1
MOV             R0, R6  ; s
MOV             R1, R8  ; format
ADD             R6, R6, #3
BL              sprintf
CMP             R7, R4
BNE             loc_1CC48
MOV             R3, #0
MOV             R0, R5
STRB            R3, [R5,#0x2F]
POP             {R4-R8,PC}
; End of function sub_1CC24

off_1CC74 DCD a02x      ; "%02X-"
LDRH            R3, [R0]
MOVW            R2, #0xFFFD
SUB             R3, R3, #1
UXTH            R3, R3
CMP             R3, R2
BHI             loc_1CC98
ADD             R0, R0, #2
B               sub_1CC24

loc_1CC98
LDR             R0, =aNoneSet ; "[NONE SET]"
BX              LR
off_1CCA0 DCD aNoneSet  ; "[NONE SET]"



; int __fastcall sub_1CCA4(const char *, struct in_addr *)
sub_1CCA4
MOV             R2, #0
B               sub_5A53C
; End of function sub_1CCA4




; const char *__fastcall sub_1CCAC(_WORD *, unsigned int)
sub_1CCAC
LDRH            R3, [R0]
MOVW            R2, #0xFFFD
SUB             R3, R3, #1
UXTH            R3, R3
CMP             R3, R2
BHI             loc_1CCD8
PUSH            {R4,LR}
MOV             R2, #0xFFFFFF00
BL              sub_5A5B0
POP             {R4,LR}
B               sub_57710

loc_1CCD8
LDR             R0, =aNoneSet ; "[NONE SET]"
BX              LR
; End of function sub_1CCAC

off_1CCE0 DCD aNoneSet  ; "[NONE SET]"



; int __fastcall sub_1CCE4(unsigned __int8 *)
sub_1CCE4

var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R0-R4,LR}
LDRB            R12, [R0,#5]
LDRB            R3, [R0,#2]
LDRB            R2, [R0,#1]
LDRB            R1, [R0]
STR             R12, [SP,#0x10+var_8]
LDRB            R12, [R0,#4]
STR             R12, [SP,#0x10+var_C]
LDRB            R0, [R0,#3]
STR             R0, [SP,#0x10+var_10]
LDR             R0, =a02x02x02x02x02 ; "%02X:%02X:%02X:%02X:%02X:%02X"
BL              sub_177E4
ADD             SP, SP, #0x14
POP             {LR}
B               sub_57710
; End of function sub_1CCE4

off_1CD20 DCD a02x02x02x02x02 ; "%02X:%02X:%02X:%02X:%02X:%02X"



; char *__fastcall sub_1CD24(int *, char *s2)
sub_1CD24
PUSH            {R4-R8,LR}
MOV             R6, R0
LDR             R4, [R0,#4]
MOV             R7, R1

loc_1CD34
CMP             R4, #0
BNE             loc_1CD88

loc_1CD3C
MOV             R0, #0x110
BL              sub_174DC
MOV             R1, R7
MOV             R5, R0
ADD             R0, R0, #8
BL              sub_16EA8
CMP             R4, #0
STR             R4, [R5,#4]
MOVNE           R2, R4
MOVEQ           R2, R6
LDR             R3, [R2]
MOV             R4, R5
CMP             R3, #0
STR             R3, [R5]
STREQ           R5, [R6,#4]
STRNE           R5, [R3,#4]
STR             R5, [R2]

loc_1CD80
MOV             R0, R4
POP             {R4-R8,PC}

loc_1CD88               ; s2
MOV             R1, R7
ADD             R0, R4, #8 ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_1CD80
BLT             loc_1CD3C
LDR             R4, [R4,#4]
B               loc_1CD34
; End of function sub_1CD24




; int __fastcall sub_1CDA8(int *, const char *)
sub_1CDA8

var_24C= -0x24C
var_248= -0x248
var_244= -0x244
var_240= -0x240
var_23C= -0x23C
var_238= -0x238
var_234= -0x234
var_230= -0x230
var_22C= -0x22C
var_228= -0x228
var_224= -0x224
var_220= -0x220
var_21C= -0x21C
var_218= -0x218
dest= -0x214
haystack= -0x204
var_4= -4

PUSH            {R4-R11,LR}
MOV             R9, R0
SUB             SP, SP, #0x24C
MOV             R8, R1
LDR             R0, =aProcNetDev ; "/proc/net/dev"
LDR             R1, =(aNTR+5) ; "r"
BL              sub_61C78
SUBS            R6, R0, #0
MOVEQ           R4, R6
BEQ             loc_1CF80
MOV             R2, R6
MOV             R1, #0x200
ADD             R0, SP, #0x24C+haystack
BL              fgets_unlocked
MOV             R2, R6
MOV             R1, #0x200
ADD             R0, SP, #0x24C+haystack
BL              fgets_unlocked
LDR             R1, =aCompressed ; "compressed"
ADD             R0, SP, #0x24C+haystack ; haystack
BL              strstr
CMP             R0, #0
MOVNE           R7, #2
BNE             loc_1CE1C
LDR             R1, =(aWrongAddressSL+0x27) ; "bytes"
ADD             R0, SP, #0x24C+haystack ; haystack
BL              strstr
MOVS            R7, R0
MOVNE           R7, #1

loc_1CE1C
MOV             R10, #0
MOV             R11, #0

loc_1CE24
MOV             R2, R6
MOV             R1, #0x200
ADD             R0, SP, #0x24C+haystack
BL              fgets_unlocked
SUBS            R4, R0, #0
BEQ             loc_1CF78
ADD             R0, SP, #0x24C+haystack
BL              sub_60E74
MOV             R1, R0  ; src
MOV             R5, R0

loc_1CE4C
SUB             R4, R5, R1
CMP             R4, #0xF
BGT             loc_1CF98
LDRB            R3, [R5],#1
CMP             R3, #0x3A ; ':'
BNE             loc_1CF8C
MOV             R2, R4  ; n
ADD             R0, SP, #0x24C+dest ; dest
BL              memcpy
ADD             R3, SP, #0x24C+var_4
ADD             R4, R3, R4
MOV             R3, #0
STRB            R3, [R4,#-0x210]

loc_1CE80               ; s2
ADD             R1, SP, #0x24C+dest
MOV             R0, R9  ; int
BL              sub_1CD24
ADD             R3, R0, #0xA0
MOV             R4, R0
MOV             R2, #0x70 ; 'p' ; n
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
ADD             R2, R4, #0xD8
LDR             R1, =off_63468 ; "%n%llu%u%u%u%u%n%n%n%llu%u%u%u%u%u"
STR             R2, [SP,#0x24C+var_218]
ADD             R2, R4, #0xFC
STR             R2, [SP,#0x24C+var_21C]
ADD             R2, R4, #0xDC
STR             R2, [SP,#0x24C+var_220]
ADD             R2, R4, #0x100
STR             R2, [SP,#0x24C+var_224]
ADD             R2, R4, #0xCC
STR             R2, [SP,#0x24C+var_228]
ADD             R2, R4, #0xC4
STR             R2, [SP,#0x24C+var_22C]
ADD             R2, R4, #0xA8
STR             R2, [SP,#0x24C+var_230]
ADD             R2, R4, #0xB8
STR             R2, [SP,#0x24C+var_234]
ADD             R2, R4, #0xD0
STR             R2, [SP,#0x24C+var_238]
ADD             R2, R4, #0xD4
STR             R2, [SP,#0x24C+var_23C]
ADD             R2, R4, #0xEC
STR             R2, [SP,#0x24C+var_240]
ADD             R2, R4, #0xF0
STR             R2, [SP,#0x24C+var_244]
ADD             R2, R4, #0xC8
STR             R2, [SP,#0x24C+var_248]
ADD             R2, R4, #0xC0
MOV             R3, R0
STR             R2, [SP,#0x24C+var_24C]
LDR             R1, [R1,R7,LSL#2] ; format
ADD             R2, R4, #0xB0
MOV             R0, R5  ; s
BL              sscanf
CMP             R7, #2
BEQ             loc_1CF50
CMP             R7, #0
STRDEQ          R10, R11, [R4,#0xB0]
STRDEQ          R10, R11, [R4,#0xB8]
MOV             R3, #0
STR             R3, [R4,#0xD0]
STR             R3, [R4,#0xD4]
STR             R3, [R4,#0xD8]

loc_1CF50
CMP             R8, #0
MOV             R5, #1
STR             R5, [R4,#0x9C]
BEQ             loc_1CE24
ADD             R1, SP, #0x24C+dest ; s2
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_1CE24
MOV             R4, R5

loc_1CF78               ; stream
MOV             R0, R6
BL              fclose

loc_1CF80
MOV             R0, R4
ADD             SP, SP, #0x24C
POP             {R4-R11,PC}

loc_1CF8C
LDRB            R3, [R5]
CMP             R3, #0x20 ; ' '
BHI             loc_1CE4C

loc_1CF98
MOV             R3, #0
ADD             R5, SP, #0x24C+haystack
STRB            R3, [SP,#0x24C+dest]
B               loc_1CE80
; End of function sub_1CDA8

off_1CFA8 DCD aProcNetDev ; "/proc/net/dev"
off_1CFAC DCD aNTR+5    ; "r"
off_1CFB0 DCD aCompressed ; "compressed"
off_1CFB4 DCD aWrongAddressSL+0x27 ; "bytes"
off_1CFB8 DCD off_63468 ; "%n%llu%u%u%u%u%n%n%n%llu%u%u%u%u%u"



; int __fastcall sub_1CFBC(unsigned __int64, __int64)
sub_1CFBC

var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R10,LR}
MOV             R3, R1
LDR             LR, =unk_65759
MOV             R5, R1
SUB             SP, SP, #0x18
MOV             R4, R0
MOV             R8, #4
MOV             R12, #0
MOVW            R6, #0x3FF
MOV             R7, #0
MOV             R1, #0xA

loc_1CFE8
CMP             R5, R7
CMPEQ           R4, R6
BLS             loc_1D018
UBFX            R12, R4, #0, #0xA
MOV             R9, R4,LSR#10
MUL             R12, R1, R12
MOV             R10, R5,LSR#10
ORR             R9, R9, R5,LSL#22
ADD             LR, LR, #3
MOV             R4, R9
MOV             R5, R10
MOV             R12, R12,LSR#10

loc_1D018
SUBS            R8, R8, #1
BNE             loc_1CFE8
STR             R2, [SP,#0x18+var_8]
MOV             R2, R0
STR             LR, [SP,#0x18+var_C]
STR             R12, [SP,#0x18+var_10]
STRD            R4, R5, [SP,#0x18+var_18]
LDR             R0, =aXBytesLluLluUS ; "X bytes:%llu (%llu.%u %sB)%s"
BL              printf
ADD             SP, SP, #0x18
POP             {R4-R10,PC}
; End of function sub_1CFBC

off_1D044 DCD unk_65759
off_1D048 DCD aXBytesLluLluUS ; "X bytes:%llu (%llu.%u %sB)%s"



; int __fastcall sub_1D04C(int)
sub_1D04C
LDR             R2, =unk_633C4

loc_1D050
LDR             R3, [R2,#4]!
CMP             R3, #0
BEQ             loc_1D068
LDR             R1, [R3,#8]
CMP             R1, R0
BNE             loc_1D050

loc_1D068
MOV             R0, R3
BX              LR
; End of function sub_1D04C

off_1D070 DCD unk_633C4



; int __fastcall sub_1D074(int, int)
sub_1D074

var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_10= -0x10
var_4= -4
var_s0=  0

PUSH            {R4-R8,LR}
MOV             R8, R1
MOV             R1, #2
SUB             SP, SP, #0x30
MOV             R2, #0
ADD             R6, R0, #8
MOV             R4, R0
MOV             R0, R1
BL              sub_179A4
MOV             R1, R6
MOV             R7, R0
ADD             R0, SP, #0x30+var_20
BL              sub_16EA8
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x8913 ; request
MOV             R0, R7  ; fd
BL              ioctl
CMP             R0, #0
BGE             loc_1D0FC
MOV             R0, R7  ; fd
BL              close
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R0, [R3] ; errnum
CMP             R0, #0x13
LDREQ           R2, =aDeviceNotFound ; "Device not found"
BEQ             loc_1D0E8
BL              strerror
MOV             R2, R0

loc_1D0E8
LDR             R0, =aSErrorFetching ; "%s: error fetching interface informatio"...
MOV             R1, R6
BL              sub_16DDC
MOV             R0, #0xFFFFFFFF
B               loc_1D2E0

loc_1D0FC
LDRH            R3, [SP,#0x30+var_10]
MOV             R2, #0x78 ; 'x' ; n
MOV             R1, #0  ; c
ADD             R0, R4, #0x20 ; ' ' ; s
STRH            R3, [R4,#0x1A]
MOV             R3, #0xFFFFFFFF
STR             R3, [R4,#0x1C]
BL              memset
MOV             R1, R6
ADD             R0, SP, #0x30+var_20
BL              sub_16EA8
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x8927 ; request
MOV             R0, R7  ; fd
BL              ioctl
CMP             R0, #0
MOV             R1, R6
ADDGE           R2, SP, #0x30+var_s0
ADD             R0, SP, #0x30+var_20
LDRGE           R3, [R2,#-0xE]!
STRGE           R3, [R4,#0x78]
LDRGE           R3, [R2,#4]
STRGE           R3, [R4,#0x7C]
LDRH            R3, [SP,#0x30+var_10]
STRH            R3, [R4,#0x18]
BL              sub_16EA8
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x891D ; request
MOV             R0, R7  ; fd
BL              ioctl
CMP             R0, #0
MOV             R1, R6
LDRGE           R3, [SP,#0x30+var_10]
ADD             R0, SP, #0x30+var_20
STRGE           R3, [R4,#0x20]
BL              sub_16EA8
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x8921 ; request
MOV             R0, R7  ; fd
BL              ioctl
CMP             R0, #0
MOV             R1, R6
LDRGE           R3, [SP,#0x30+var_10]
ADD             R0, SP, #0x30+var_20
STRGE           R3, [R4,#0x24]
BL              sub_16EA8
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x8970 ; request
MOV             R0, R7  ; fd
BL              ioctl
CMP             R0, #0
ADDEQ           R3, SP, #0x30+var_s0
ADDEQ           R12, R4, #0x28 ; '('
LDMDBEQ         R3, {R0-R3}
STMEQ           R12, {R0-R3}
MOV             R1, R6
ADD             R0, SP, #0x30+var_20
BL              sub_16EA8
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x8942 ; request
MOV             R0, R7  ; fd
BL              ioctl
CMP             R0, #0
MOV             R1, R6
LDRGE           R3, [SP,#0x30+var_10]
ADD             R0, SP, #0x30+var_20
STRGE           R3, [R4,#0x1C]
BL              sub_16EA8
MOV             R3, #2
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x8915 ; request
MOV             R0, R7  ; fd
STRH            R3, [SP,#0x30+var_10]
BL              ioctl
CMP             R0, #0
BNE             loc_1D2C8
ADD             R5, SP, #0x30+var_10
MOV             R3, #1
STR             R3, [R4,#0x98]
ADD             R12, R4, #0x38 ; '8'
LDM             R5, {R0-R3}
STM             R12, {R0-R3}
MOV             R1, R6
ADD             R0, SP, #0x30+var_20
BL              sub_16EA8
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x8917 ; request
MOV             R0, R7  ; fd
BL              ioctl
CMP             R0, #0
LDMGE           R5, {R0-R3}
ADDGE           R12, R4, #0x48 ; 'H'
STMGE           R12, {R0-R3}
MOV             R1, R6
ADD             R0, SP, #0x30+var_20
BL              sub_16EA8
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x8919 ; request
MOV             R0, R7  ; fd
BL              ioctl
CMP             R0, #0
LDMGE           R5, {R0-R3}
ADDGE           R12, R4, #0x58 ; 'X'
STMGE           R12, {R0-R3}
MOV             R1, R6
ADD             R0, SP, #0x30+var_20
BL              sub_16EA8
ADD             R2, SP, #0x30+var_20
MOVW            R1, #0x891B ; request
MOV             R0, R7  ; fd
BL              ioctl
CMP             R0, #0
LDMGE           R5, {R0-R3}
ADDGE           R12, R4, #0x68 ; 'h'
STMGE           R12, {R0-R3}

loc_1D2C8               ; fd
MOV             R0, R7
BL              close
LDRH            R0, [R4,#0x1A]
AND             R0, R0, #1
ORRS            R0, R0, R8
BNE             loc_1D2E8

loc_1D2E0
ADD             SP, SP, #0x30 ; '0'
POP             {R4-R8,PC}

loc_1D2E8
LDR             R3, =unk_63398
LDRH            R1, [R4,#0x38]
MOV             R2, R3

loc_1D2F4
LDR             R5, [R2,#4]!
CMP             R5, #0
BNE             loc_1D31C

loc_1D300
LDR             R5, [R3,#4]!
CMP             R5, #0
BEQ             loc_1D328
LDR             R2, [R5,#8]
CMP             R2, #0
BEQ             loc_1D328
B               loc_1D300

loc_1D31C
LDR             R0, [R5,#8]
CMP             R1, R0
BNE             loc_1D2F4

loc_1D328
LDRSH           R0, [R4,#0x18]
BIC             R8, R0, #2
BL              sub_1D04C
SUBS            R7, R0, #0
BNE             loc_1D348
MOV             R0, #0xFFFFFFFF
BL              sub_1D04C
MOV             R7, R0

loc_1D348
LDR             R2, [R7,#4]
MOV             R1, R6
LDR             R0, =a9sLinkEncapS ; "%-9s Link encap:%s  "
BL              printf
LDR             R2, [R7,#0x10]
CMP             R2, #0
ADDNE           R0, R4, #0x78 ; 'x'
LDRNE           R12, [R7,#0xC]
MOVNE           R3, R0
BNE             loc_1D60C

loc_1D370
LDRH            R3, [R4,#0x1A]
TST             R3, #0x2000
BEQ             loc_1D3A4
LDR             R3, =off_633DC ; "unknown"
LDRB            R2, [R4,#0x34]
LDR             R0, =aMediaS ; "Media:%s"
LDR             R1, [R3,R2,LSL#2]
BL              printf
LDRH            R3, [R4,#0x1A]
TST             R3, #0x4000
BEQ             loc_1D3A4
LDR             R0, =aAuto_0 ; "(auto)"
BL              printf

loc_1D3A4               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
LDR             R3, [R4,#0x98]
CMP             R3, #0
BEQ             loc_1D448
LDR             R6, [R5]
MOV             R1, #1
LDR             R3, [R5,#0x14]
ADD             R0, R4, #0x38 ; '8'
BLX             R3
MOV             R1, R6
MOV             R2, R0
LDR             R0, =aSAddrS ; "          %s addr:%s "
BL              printf
LDRH            R3, [R4,#0x1A]
TST             R3, #0x10
BEQ             loc_1D404
MOV             R1, #1
LDR             R3, [R5,#0x14]
ADD             R0, R4, #0x48 ; 'H'
BLX             R3
MOV             R1, R0
LDR             R0, =aPTPS ; " P-t-P:%s "
BL              printf

loc_1D404
LDRH            R2, [R4,#0x1A]
LDR             R3, [R5,#0x14]
TST             R2, #2
BEQ             loc_1D42C
MOV             R1, #1
ADD             R0, R4, #0x58 ; 'X'
BLX             R3
MOV             R1, R0
LDR             R0, =aBcastS ; " Bcast:%s "
BL              printf

loc_1D42C
MOV             R1, #1
LDR             R3, [R5,#0x14]
ADD             R0, R4, #0x68 ; 'h'
BLX             R3
MOV             R1, R0
LDR             R0, =aMaskS ; " Mask:%s\n"
BL              printf

loc_1D448
LDR             R0, =asc_6582A ; "          "
BL              printf
LDRSH           R3, [R4,#0x1A]
CMP             R3, #0
BNE             loc_1D638
LDR             R0, =aNoFlags ; "[NO FLAGS] "
BL              printf

loc_1D464
LDR             R2, [R4,#0x20]
LDR             R1, [R4,#0x24]
LDR             R0, =aMtuDMetricD ; " MTU:%d  Metric:%d"
CMP             R2, #0
MOVEQ           R2, #1
BL              printf
MOV             R0, #0xA ; c
BL              j_putchar_unlocked
LDR             R3, [R4,#0x9C]
CMP             R3, #0
BEQ             loc_1D568
LDR             R0, =asc_6582A ; "          "
BL              printf
LDR             R3, [R4,#0xEC]
LDR             R0, =aRxPacketsLluEr ; "RX packets:%llu errors:%lu dropped:%lu "...
STR             R3, [SP,#0x30+var_24]
LDR             R3, [R4,#0xF0]
STR             R3, [SP,#0x30+var_28]
LDR             R3, [R4,#0xC8]
STR             R3, [SP,#0x30+var_2C]
LDR             R3, [R4,#0xC0]
STR             R3, [SP,#0x30+var_30]
LDRD            R2, R3, [R4,#0xA0]
BL              printf
MOVW            R3, #0x101
CMP             R8, R3
BNE             loc_1D4DC
LDR             R1, [R4,#0xD4]
LDR             R0, =aCompressedLu ; "             compressed:%lu\n"
BL              printf

loc_1D4DC
LDR             R0, =asc_6582A ; "          "
BL              printf
LDR             R3, [R4,#0xFC]
LDR             R0, =aTxPacketsLluEr ; "TX packets:%llu errors:%lu dropped:%lu "...
STR             R3, [SP,#0x30+var_24]
LDR             R3, [R4,#0x100]
STR             R3, [SP,#0x30+var_28]
LDR             R3, [R4,#0xCC]
STR             R3, [SP,#0x30+var_2C]
LDR             R3, [R4,#0xC4]
STR             R3, [SP,#0x30+var_30]
LDRD            R2, R3, [R4,#0xA8]
BL              printf
LDR             R1, [R4,#0xDC]
LDR             R0, =aCollisionsLu ; "          collisions:%lu "
BL              printf
MOVW            R3, #0x101
CMP             R8, R3
BNE             loc_1D534
LDR             R1, [R4,#0xD8]
LDR             R0, =aCompressedLu_0 ; "compressed:%lu "
BL              printf

loc_1D534
LDR             R1, [R4,#0x1C]
CMN             R1, #1
BEQ             loc_1D548
LDR             R0, =aTxqueuelenD ; "txqueuelen:%d "
BL              printf

loc_1D548
LDR             R0, =aR ; "\n          R"
BL              printf
LDR             R2, =aT ; "  T"
LDRD            R0, R1, [R4,#0xB0]
BL              sub_1CFBC
LDR             R2, =(aShellReturnedI+0x13) ; "\n"
LDRD            R0, R1, [R4,#0xB8]
BL              sub_1CFBC

loc_1D568
LDRB            R3, [R4,#0x32]
CMP             R3, #0
BNE             loc_1D58C
LDR             R3, [R4,#0x28]
CMP             R3, #0
BNE             loc_1D58C
LDR             R3, [R4,#0x30]
BICS            R3, R3, #0xFF0000
BEQ             loc_1D5F0

loc_1D58C
LDR             R0, =asc_6582A ; "          "
BL              printf
LDRB            R1, [R4,#0x32]
CMP             R1, #0
BEQ             loc_1D5A8
LDR             R0, =aInterruptD ; "Interrupt:%d "
BL              printf

loc_1D5A8
LDRH            R1, [R4,#0x30]
CMP             R1, #0xFF
BLS             loc_1D5BC
LDR             R0, =aBaseAddress0xL ; "Base address:0x%lx "
BL              printf

loc_1D5BC
LDR             R1, [R4,#0x28]
CMP             R1, #0
BEQ             loc_1D5D4
LDR             R2, [R4,#0x2C]
LDR             R0, =aMemoryLxLx ; "Memory:%lx-%lx "
BL              printf

loc_1D5D4
LDRB            R1, [R4,#0x33]
CMP             R1, #0
BEQ             loc_1D5E8
LDR             R0, =aDmaChanX ; "DMA chan:%x "
BL              printf

loc_1D5E8               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked

loc_1D5F0               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
MOV             R0, #0
B               loc_1D2E0

loc_1D600
LDRB            R1, [R3],#1
CMP             R1, #0
BNE             loc_1D624

loc_1D60C
SUB             R1, R3, R0
CMP             R12, R1
BGT             loc_1D600
LDR             R3, [R7,#0x1C]
CMP             R3, #0
BNE             loc_1D370

loc_1D624
BLX             R2
MOV             R1, R0
LDR             R0, =aHwaddrS ; "HWaddr %s  "
BL              printf
B               loc_1D370

loc_1D638
LDR             R6, =unk_642B2
LDR             R5, =aUp ; "UP"
LDR             R7, =(aViaS+4) ; "%s "

loc_1D644
LDRSH           R2, [R4,#0x1A]
LDRH            R3, [R6,#2]!
TST             R2, R3
BEQ             loc_1D660
MOV             R1, R5
MOV             R0, R7  ; format
BL              printf

loc_1D660               ; s
MOV             R0, R5
BL              strlen
ADD             R0, R0, #1
LDRB            R3, [R5,R0]!
CMP             R3, #0
BNE             loc_1D644
B               loc_1D464
; End of function sub_1D074

off_1D67C DCD dword_7DB94
off_1D680 DCD aDeviceNotFound ; "Device not found"
off_1D684 DCD aSErrorFetching ; "%s: error fetching interface informatio"...
off_1D688 DCD unk_63398
off_1D68C DCD a9sLinkEncapS ; "%-9s Link encap:%s  "
off_1D690 DCD off_633DC ; "unknown"
off_1D694 DCD aMediaS   ; "Media:%s"
off_1D698 DCD aAuto_0   ; "(auto)"
off_1D69C DCD aSAddrS   ; "          %s addr:%s "
off_1D6A0 DCD aPTPS     ; " P-t-P:%s "
off_1D6A4 DCD aBcastS   ; " Bcast:%s "
off_1D6A8 DCD aMaskS    ; " Mask:%s\n"
off_1D6AC DCD asc_6582A ; "          "
off_1D6B0 DCD aNoFlags  ; "[NO FLAGS] "
off_1D6B4 DCD aMtuDMetricD ; " MTU:%d  Metric:%d"
off_1D6B8 DCD aRxPacketsLluEr ; "RX packets:%llu errors:%lu dropped:%lu "...
off_1D6BC DCD aCompressedLu ; "             compressed:%lu\n"
off_1D6C0 DCD aTxPacketsLluEr ; "TX packets:%llu errors:%lu dropped:%lu "...
off_1D6C4 DCD aCollisionsLu ; "          collisions:%lu "
off_1D6C8 DCD aCompressedLu_0 ; "compressed:%lu "
off_1D6CC DCD aTxqueuelenD ; "txqueuelen:%d "
off_1D6D0 DCD aR        ; "\n          R"
off_1D6D4 DCD aT        ; "  T"
off_1D6D8 DCD aShellReturnedI+0x13 ; "\n"
off_1D6DC DCD aInterruptD ; "Interrupt:%d "
off_1D6E0 DCD aBaseAddress0xL ; "Base address:0x%lx "
off_1D6E4 DCD aMemoryLxLx ; "Memory:%lx-%lx "
off_1D6E8 DCD aDmaChanX ; "DMA chan:%x "
off_1D6EC DCD aHwaddrS  ; "HWaddr %s  "
off_1D6F0 DCD unk_642B2
off_1D6F4 DCD aUp       ; "UP"
off_1D6F8 DCD aViaS+4   ; "%s "



; unsigned int __fastcall sub_1D6FC(char *)
sub_1D6FC

var_14= -0x14
var_10= -0x10
var_C= -0xC
ptr= -8

PUSH            {R4-R9,LR}
CMP             R0, #1
SUB             SP, SP, #0x14
MOV             R3, #0
MOVNE           R1, R0
MOVEQ           R1, R3
MOV             R5, R0
MOV             R0, SP
STR             R3, [SP,#0x14+var_14]
STR             R3, [SP,#0x14+var_10]
BL              sub_1CDA8
SUBS            R4, R0, #0
BNE             loc_1D7A8
MOV             R1, #2
LDR             R9, =aSiocgifconf ; "SIOCGIFCONF"
MOV             R2, R4
MOV             R0, R1
STR             R4, [SP,#0x14+ptr]
MOV             R6, #0x3C0
BL              sub_179A4
MOV             R8, R0

loc_1D750
MOV             R1, R6
LDR             R0, [SP,#0x14+ptr]
STR             R6, [SP,#0x14+var_C]
BL              sub_174B4
MOV             R3, R9
STR             R0, [SP,#0x14+ptr]
ADD             R2, SP, #0x14+var_C
MOVW            R1, #0x8912
MOV             R0, R8
BL              sub_17B18
LDR             R3, [SP,#0x14+var_C]
CMP             R6, R3
ADD             R6, R6, #0x140
BEQ             loc_1D750
LDR             R6, [SP,#0x14+ptr]

loc_1D78C
LDR             R3, [SP,#0x14+var_C]
CMP             R4, R3
BLT             loc_1D7D0
MOV             R0, R8  ; fd
BL              close
LDR             R0, [SP,#0x14+ptr] ; ptr
BL              free

loc_1D7A8
CMP             R5, #1
LDRLS           R4, [SP,#0x14+var_14]
BLS             loc_1D7FC
MOV             R1, R5  ; s2
MOV             R0, SP  ; int
BL              sub_1CD24
MOV             R1, #1
BL              sub_1D074

loc_1D7C8
MOV             R0, R0,LSR#31
B               loc_1D808

loc_1D7D0               ; s2
ADD             R1, R6, R4
MOV             R0, SP  ; int
BL              sub_1CD24
ADD             R4, R4, #0x20 ; ' '
B               loc_1D78C

loc_1D7E4
MOV             R1, R5
MOV             R0, R4
BL              sub_1D074
CMP             R0, #0
BLT             loc_1D7C8
LDR             R4, [R4]

loc_1D7FC
CMP             R4, #0
BNE             loc_1D7E4
MOV             R0, R4

loc_1D808
ADD             SP, SP, #0x14
POP             {R4-R9,PC}
; End of function sub_1D6FC

off_1D810 DCD aSiocgifconf ; "SIOCGIFCONF"


; Attributes: noreturn

; void __noreturn sub_1D814()
sub_1D814
PUSH            {R4,LR}
BL              sub_162F0
; End of function sub_1D814




; int __fastcall sub_1D81C(int, int)
sub_1D81C
PUSH            {R4,LR}
ADD             R0, R1, #4
BL              sub_1F300
POP             {R4,LR}
B               sub_20798
; End of function sub_1D81C




; int __fastcall sub_1D830(int, int)
sub_1D830
PUSH            {R4,LR}
ADD             R0, R1, #4
BL              sub_1F300
POP             {R4,LR}
B               sub_20E98
; End of function sub_1D830




; int __fastcall sub_1D844(int, int)
sub_1D844
PUSH            {R4,LR}
ADD             R0, R1, #4
BL              sub_1F300
POP             {R4,LR}
B               sub_229FC
; End of function sub_1D844




; int __fastcall sub_1D858(int, int)
sub_1D858
PUSH            {R4,LR}
ADD             R0, R1, #4
BL              sub_1F300
MOV             R4, R0
LDR             R1, [R0] ; s
CMP             R1, #0
MOVEQ           R0, #0xFFFFFFFF
BEQ             loc_1D884
LDR             R0, =aAddress_0 ; "address"
ADD             R4, R4, #4
BL              sub_168D4

loc_1D884
LDR             R3, =off_634C0
ADD             R0, R0, #1
LDR             R3, [R3,R0,LSL#2]
MOV             R0, R4
POP             {R4,LR}
BX              R3
; End of function sub_1D858

; const int off_1D89C
off_1D89C DCD aAddress_0 ; "address"
off_1D8A0 DCD off_634C0



; int __fastcall sub_1D8A4(const char *)
sub_1D8A4

var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_68= -0x68
var_5C= -0x5C
var_58= -0x58
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
dest= -0x40
var_C= -0xC

LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_1D8B8
MOV             R0, #0  ; s
BX              LR

loc_1D8B8
PUSH            {R4-R10,LR}
MOV             R3, #0
SUB             SP, SP, #0x58 ; 'X'
LDR             R1, =aPLxLxLxXXLuN ; "%*p: %lX %lX %lX %X %X %lu %n"
ADD             R2, SP, #0x78+var_5C
MOV             R5, R0
STR             R3, [SP,#0x78+var_44]
ADD             R3, SP, #0x78+var_44
STR             R3, [SP,#0x78+var_68]
ADD             R3, SP, #0x78+var_50
STR             R3, [SP,#0x78+var_6C]
ADD             R3, SP, #0x78+var_48
STR             R3, [SP,#0x78+var_70]
ADD             R3, SP, #0x78+var_4C
STR             R3, [SP,#0x78+var_74]
ADD             R3, SP, #0x78+var_54
STR             R3, [SP,#0x78+var_78]
ADD             R3, SP, #0x78+var_58
BL              sscanf
CMP             R0, #5
MOVLE           R0, #1
BLE             loc_1DAD4
LDR             R3, =dword_7DB98
LDR             R2, [SP,#0x78+var_48]
LDR             R8, [R3]
LDR             R3, [R8]
AND             R1, R3, #3
CMP             R1, #3
BEQ             loc_1D948
CMP             R2, #1
BNE             loc_1D99C
LDR             R1, [SP,#0x78+var_54]
TST             R1, #0x10000
BEQ             loc_1D99C
TST             R3, #2

loc_1D944
BEQ             loc_1DAD0

loc_1D948
LDR             R1, [SP,#0x78+var_58]
LDR             R3, =(asc_66E31+1) ; "??"
LDR             R6, =(aProcNetUnix+0xA) ; "unix"
CMP             R1, #0
LDR             R7, [SP,#0x78+var_54]
MOVNE           R6, R3
LDR             R3, [SP,#0x78+var_4C]
AND             R10, R7, #0x10000
SUB             R3, R3, #1
CMP             R3, #4
LDRLS           R1, =off_634D4 ; "STREAM"
LDRHI           R9, =aUnknown ; "UNKNOWN"
LDRLS           R9, [R1,R3,LSL#2]
CMP             R2, #4  ; switch 5 cases
LDRLS           PC, [PC,R2,LSL#2] ; switch jump
B               def_1D980 ; jumptable 0001D980 default case
jpt_1D980 DCD loc_1D9A4 ; jump table for switch statement
DCD loc_1DA58
DCD loc_1DA84
DCD loc_1DA6C
DCD loc_1DA74

loc_1D99C
TST             R3, #1
B               loc_1D944

loc_1D9A4               ; jumptable 0001D980 case 0
LDR             R4, =aFree ; "FREE"

loc_1D9A8
LDR             R1, =asc_65E75 ; "[ "
ADD             R0, SP, #0x78+dest ; dest
BL              strcpy
CMP             R10, #0
BEQ             loc_1D9C8
LDR             R1, =aAcc ; "ACC "
ADD             R0, SP, #0x78+dest ; dest
BL              strcat

loc_1D9C8
TST             R7, #0x20000
BEQ             loc_1D9DC
LDR             R1, =aW ; "W "
ADD             R0, SP, #0x78+dest ; dest
BL              strcat

loc_1D9DC
TST             R7, #0x40000
BEQ             loc_1D9F0
LDR             R1, =aN ; "N "
ADD             R0, SP, #0x78+dest ; dest
BL              strcat

loc_1D9F0
LDR             R1, =(aMissing_1+8) ; "]"
ADD             R0, SP, #0x78+dest ; dest
BL              strcat
LDR             R3, [SP,#0x78+var_50]
MOV             R1, R6
STR             R4, [SP,#0x78+var_74]
STR             R9, [SP,#0x78+var_78]
STR             R3, [SP,#0x78+var_70]
ADD             R3, SP, #0x78+dest
LDR             R2, [SP,#0x78+var_5C]
LDR             R0, =a5s6lu11s10s13s ; "%-5s %-6lu %-11s %-10s %-13s %6lu "
BL              printf
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #0x200
BEQ             loc_1DAA4
LDR             R4, [SP,#0x78+var_50]
MOV             R1, #0xD3
MOV             R0, R4
BLX             sub_15EFC
ADD             R1, R1, #2
LDR             R1, [R8,R1,LSL#2]

loc_1DA48
CMP             R1, #0
BNE             loc_1DA8C
LDR             R1, =(asc_6AE7B+3) ; "-"
B               loc_1DA9C

loc_1DA58               ; jumptable 0001D980 case 1
LDR             R3, =(asc_6B39D+1) ; ""
CMP             R10, #0
LDR             R4, =aListening ; "LISTENING"
MOVEQ           R4, R3
B               loc_1D9A8

loc_1DA6C               ; jumptable 0001D980 case 3
LDR             R4, =aConnected ; "CONNECTED"
B               loc_1D9A8

loc_1DA74               ; jumptable 0001D980 case 4
LDR             R4, =aDisconnecting ; "DISCONNECTING"
B               loc_1D9A8

def_1D980               ; jumptable 0001D980 default case
LDR             R4, =aUnknown ; "UNKNOWN"
B               loc_1D9A8

loc_1DA84               ; jumptable 0001D980 case 2
LDR             R4, =(aDisconnecting+3) ; "CONNECTING"
B               loc_1D9A8

loc_1DA8C
LDR             R3, [R1,#4]
CMP             R4, R3
BNE             loc_1DADC
ADD             R1, R1, #8

loc_1DA9C               ; format
LDR             R0, =(a20s_0+1) ; "%-20s"
BL              printf

loc_1DAA4
LDR             R3, [SP,#0x78+var_44]
LDR             R6, =stdout
ADD             R5, R5, R3
MOV             R0, R5
SUB             R5, R5, #1
BL              sub_57D48

loc_1DABC
LDRB            R4, [R5,#1]!
CMP             R4, #0
BNE             loc_1DAE4
MOV             R0, #0xA ; c
BL              j_putchar_unlocked

loc_1DAD0
MOV             R0, #0

loc_1DAD4
ADD             SP, SP, #0x58 ; 'X'
POP             {R4-R10,PC}

loc_1DADC
LDR             R1, [R1]
B               loc_1DA48

loc_1DAE4               ; stream
LDR             R1, [R6]
MOV             R0, R4  ; int
BL              sub_5E4E0
B               loc_1DABC
; End of function sub_1D8A4

off_1DAF4 DCD aPLxLxLxXXLuN ; "%*p: %lX %lX %lX %X %X %lu %n"
off_1DAF8 DCD dword_7DB98
off_1DAFC DCD asc_66E31+1 ; "??"
off_1DB00 DCD aProcNetUnix+0xA ; "unix"
off_1DB04 DCD off_634D4 ; "STREAM"
off_1DB08 DCD aUnknown  ; "UNKNOWN"
off_1DB0C DCD aFree     ; "FREE"
off_1DB10 DCD asc_65E75 ; "[ "
off_1DB14 DCD aAcc      ; "ACC "
off_1DB18 DCD aW        ; "W "
off_1DB1C DCD aN        ; "N "
off_1DB20 DCD aMissing_1+8 ; "]"
off_1DB24 DCD a5s6lu11s10s13s ; "%-5s %-6lu %-11s %-10s %-13s %6lu "
off_1DB28 DCD dword_7DBC0
off_1DB2C DCD asc_6AE7B+3 ; "-"
off_1DB30 DCD asc_6B39D+1 ; ""
off_1DB34 DCD aListening ; "LISTENING"
off_1DB38 DCD aConnected ; "CONNECTED"
off_1DB3C DCD aDisconnecting ; "DISCONNECTING"
off_1DB40 DCD aDisconnecting+3 ; "CONNECTING"
off_1DB44 DCD a20s_0+1  ; "%-20s"
off_1DB48 DCD stdout



; char *__fastcall sub_1DB4C(const struct sockaddr *, unsigned int, const char *, int)
sub_1DB4C
PUSH            {R4-R8,LR}
SUBS            R7, R3, #0
MOV             R8, R0
MOV             R5, R1
MOV             R6, R2
BEQ             loc_1DBCC

loc_1DB64
MOV             R0, R8
BL              sub_6249C
MOV             R4, R0

loc_1DB70
REV16           R0, R5
UXTH            R0, R0  ; port
CMP             R0, #0
LDREQ           R2, =(asc_69C62+1) ; "*"
BEQ             loc_1DBAC
CMP             R7, #0
BNE             loc_1DBA0
MOV             R1, R6  ; proto
BL              getservbyport
CMP             R0, #0
LDRNE           R2, [R0]
BNE             loc_1DBAC

loc_1DBA0
UXTH            R0, R5
BL              sub_16F8C
MOV             R2, R0

loc_1DBAC
MOV             R1, R4
LDR             R0, =aSS_0 ; "%s:%s"
BL              sub_177E4
MOV             R5, R0
MOV             R0, R4  ; ptr
BL              free
MOV             R0, R5
POP             {R4-R8,PC}

loc_1DBCC
BL              sub_62494
SUBS            R4, R0, #0
BEQ             loc_1DB64
B               loc_1DB70
; End of function sub_1DB4C

off_1DBDC DCD asc_69C62+1 ; "*"
off_1DBE0 DCD aSS_0     ; "%s:%s"



; int __fastcall sub_1DBE4(const char *, int, int, int)
sub_1DBE4

var_238= -0x238
var_234= -0x234
s= -0x230
var_210= -0x210
var_10= -0x10

CMP             R3, #0
BEQ             loc_1DCB8
PUSH            {R4-R6,LR}
ADD             R6, R0, #6
LDRB            R3, [R0,#6]
SUB             SP, SP, #0x228
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
BHI             loc_1DCB0
MOV             R3, R0
LDR             R2, =aSCmdline ; "%s/cmdline"
MOV             R1, #0x1D ; maxlen
ADD             R0, SP, #0x238+s ; s
BL              snprintf
MOVW            R2, #0x1FF
MOV             R5, R0
ADD             R1, SP, #0x238+var_210
ADD             R0, SP, #0x238+s
BL              sub_180C8
CMP             R0, #0
BGE             loc_1DC44

loc_1DC38
MOV             R0, #0

loc_1DC3C
ADD             SP, SP, #0x228
POP             {R4-R6,PC}

loc_1DC44
ADD             R3, SP, #0x238+var_10
MOV             R4, #0
ADD             R0, R3, R0
ADD             R3, SP, #0x238+s
STRB            R4, [R0,#-0x200]
SUB             R0, R5, #7
ADD             R0, R3, R0 ; dest
LDR             R1, =(aGotRawSocketFd+0xF) ; src
BL              strcpy
ADD             R0, SP, #0x238+var_210
BL              sub_169FC
MOV             R1, R0
MOV             R0, R6
BL              sub_16998
MOV             R3, R4
MOV             R5, R0
STR             R4, [SP,#0x238+var_234]
MOV             R1, #0x21 ; '!'
STR             R0, [SP,#0x238+var_238]
ADD             R0, SP, #0x238+s
LDR             R2, =sub_1DCCC
BL              sub_60474
MOV             R4, R0
MOV             R0, R5  ; ptr
BL              free
CMP             R4, #0
BEQ             loc_1DC38

loc_1DCB0
MOV             R0, #2
B               loc_1DC3C

loc_1DCB8
MOV             R0, #1
BX              LR
; End of function sub_1DBE4

off_1DCC0 DCD aSCmdline ; "%s/cmdline"
off_1DCC4 DCD aGotRawSocketFd+0xF ; "fd"
off_1DCC8 DCD sub_1DCCC



; int __fastcall sub_1DCCC(const char *, unsigned __int8 *, const char *)
sub_1DCCC

var_4= -4

PUSH            {R0,R1,R4-R6,LR}
MOV             R6, R2
BL              sub_17B80
SUBS            R4, R0, #0
BEQ             loc_1DD80
LDR             R1, =aSocket_0 ; "socket:["
STR             R4, [SP,#8+var_4]
BL              sub_1684C
SUBS            R5, R0, #0
BEQ             loc_1DD8C
LDR             R0, [SP,#8+var_4]
MOV             R2, #0
ADD             R1, SP, #8+var_4
ADD             R0, R0, #8
BL              sub_18990
LDR             R3, [SP,#8+var_4]
MOV             R5, R0
LDRB            R3, [R3]
CMP             R3, #0x5D ; ']'

loc_1DD18
BEQ             loc_1DD20

loc_1DD1C
MOV             R5, #0xFFFFFFFF

loc_1DD20               ; ptr
MOV             R0, R4
BL              free
CMP             R5, #0
BLT             loc_1DD80
LDR             R3, =dword_7DB98
MOV             R1, #0xD3
MOV             R0, R5
LDR             R4, [R3]
MOV             R3, #2
STR             R3, [R4,#4]
ADD             R4, R4, #8
BLX             sub_15EFC
ADD             R4, R4, R1,LSL#2

loc_1DD54
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_1DDCC
MOV             R0, #0x1C
BL              sub_174DC
MOV             R2, #0x14
STR             R0, [R4]
MOV             R1, R6
STR             R5, [R0,#4]
ADD             R0, R0, #8
BL              sub_60B34

loc_1DD80
MOV             R0, #1
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_1DD8C
LDR             R1, =a0000 ; "[0000]:"
LDR             R0, [SP,#8+var_4]
BL              sub_1684C
CMP             R0, #0
BEQ             loc_1DD1C
LDR             R0, [SP,#8+var_4]
MOV             R2, R5
MOV             R1, R5
ADD             R0, R0, #7
BL              sub_18990
LDR             R3, =dword_7DB94
MOV             R5, R0
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
B               loc_1DD18

loc_1DDCC
LDR             R2, [R3,#4]
CMP             R5, R2
BEQ             loc_1DD80
MOV             R4, R3
B               loc_1DD54
; End of function sub_1DCCC

off_1DDE0 DCD aSocket_0 ; "socket:["
off_1DDE4 DCD dword_7DB98
off_1DDE8 DCD a0000     ; "[0000]:"
off_1DDEC DCD dword_7DB94



; int __fastcall sub_1DDF0(const char *, int (*)(void))
sub_1DDF0
PUSH            {R4-R10,LR}
MOV             R8, R0
MOV             R9, R1
BL              sub_61CD8
SUBS            R5, R0, #0
POPEQ           {R4-R10,PC}
LDR             R7, =(aShellReturnedI+0x13) ; "\n"
MOV             R4, #0
LDR             R10, =aSBogusDataOnLi ; "%s: bogus data on line %d"

loc_1DE14
MOV             R1, R7
MOV             R0, R5
BL              sub_589FC
SUBS            R6, R0, #0
BNE             loc_1DE34
MOV             R0, R5
POP             {R4-R10,LR}
B               fclose

loc_1DE34
ADD             R4, R4, #1
CMP             R4, #1
BEQ             loc_1DE5C
BLX             R9
CMP             R0, #0
BEQ             loc_1DE5C
MOV             R2, R4
MOV             R1, R8
MOV             R0, R10
BL              sub_16DDC

loc_1DE5C               ; ptr
MOV             R0, R6
BL              free
B               loc_1DE14
; End of function sub_1DDF0

off_1DE68 DCD aShellReturnedI+0x13 ; "\n"
off_1DE6C DCD aSBogusDataOnLi ; "%s: bogus data on line %d"



; int __fastcall sub_1DE70(int, char *s)
sub_1DE70

var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_54= -0x54
var_50= -0x50
s= -0x48
var_24= -0x24

PUSH            {R4-R6,LR}
MOV             R4, R0
SUB             SP, SP, #0x68
ADD             R3, R4, #0x38 ; '8'
ADD             R6, SP, #0x68+var_24
MOV             R0, R1  ; s
STR             R3, [SP,#0x68+var_50]
ADD             R3, R4, #0xC
STR             R3, [SP,#0x68+var_54]
ADD             R3, R4, #0x30 ; '0'
STR             R3, [SP,#0x68+var_58]
ADD             R3, R4, #0x34 ; '4'
STR             R3, [SP,#0x68+var_5C]
ADD             R3, R4, #8
STR             R3, [SP,#0x68+var_60]
ADD             R3, R4, #4
STR             R3, [SP,#0x68+var_64]
ADD             R2, SP, #0x68+s
STR             R6, [SP,#0x68+var_68]
MOV             R3, R4
LDR             R1, =aD3209aFaFX3209 ; "%*d: %32[0-9A-Fa-f]:%X %32[0-9A-Fa-f]:%"...
BL              sscanf
CMP             R0, #8
MOVLE           R0, #1
BLE             loc_1DF14
ADD             R0, SP, #0x68+s ; s
BL              strlen
CMP             R0, #8
BHI             loc_1DF10
ADD             R2, R4, #0x14
LDR             R1, =aX ; "%X"
MOV             R5, #2
ADD             R0, SP, #0x68+s ; s
BL              sscanf
STRH            R5, [R4,#0x10]
ADD             R2, R4, #0x24 ; '$'
LDR             R1, =aX ; "%X"
MOV             R0, R6  ; s
BL              sscanf
STRH            R5, [R4,#0x20]

loc_1DF10
MOV             R0, #0

loc_1DF14
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R6,PC}
; End of function sub_1DE70

off_1DF1C DCD aD3209aFaFX3209 ; "%*d: %32[0-9A-Fa-f]:%X %32[0-9A-Fa-f]:%"...
off_1DF20 DCD aX        ; "%X"



; void __fastcall sub_1DF24(int, const char *, const char *, int)
sub_1DF24

var_14= -0x14
var_10= -0x10
var_C= -0xC

LDR             R12, =dword_7DB98
CMP             R3, #0
PUSH            {R4-R9,LR}
SUB             SP, SP, #0x14
LDR             R6, [R12]
LDR             R12, [R6]
BEQ             loc_1DFDC
TST             R12, #1

loc_1DF44
BEQ             loc_1E024
MOV             R8, R0
AND             R3, R12, #4
MOV             R4, R0
MOV             R7, R1
ADD             R0, R0, #0x10
LDR             R1, [R8],#0x20
MOV             R5, R2
BL              sub_1DB4C
LDR             R3, [R6]
MOV             R9, R0
MOV             R2, R5
LDR             R1, [R4,#4]
MOV             R0, R8
AND             R3, R3, #4
BL              sub_1DB4C
STR             R7, [SP,#0x14+var_C]
MOV             R8, R0
STR             R0, [SP,#0x14+var_10]
MOV             R1, R5
STR             R9, [SP,#0x14+var_14]
LDR             R0, =aS6lu6lu23s23s1 ; "%s   %6lu %6lu %-23s %-23s %-12s"
LDRD            R2, R3, [R4,#0x30]
BL              printf
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #0x200
BEQ             loc_1DFFC
LDR             R4, [R4,#0x38]
MOV             R1, #0xD3
MOV             R0, R4
BLX             sub_15EFC
ADD             R1, R1, #2
LDR             R1, [R6,R1,LSL#2]

loc_1DFCC
CMP             R1, #0
BNE             loc_1DFE4
LDR             R1, =(asc_6AE7B+3) ; "-"
B               loc_1DFF4

loc_1DFDC
TST             R12, #2
B               loc_1DF44

loc_1DFE4
LDR             R3, [R1,#4]
CMP             R4, R3
BNE             loc_1E01C
ADD             R1, R1, #8

loc_1DFF4
LDR             R0, =a20s ; "%.20s"
BL              printf

loc_1DFFC               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
MOV             R0, R9  ; ptr
BL              free
MOV             R0, R8  ; ptr
ADD             SP, SP, #0x14
POP             {R4-R9,LR}
B               free

loc_1E01C
LDR             R1, [R1]
B               loc_1DFCC

loc_1E024
ADD             SP, SP, #0x14
POP             {R4-R9,PC}
; End of function sub_1DF24

off_1E02C DCD dword_7DB98
off_1E030 DCD aS6lu6lu23s23s1 ; "%s   %6lu %6lu %-23s %-23s %-12s"
off_1E034 DCD dword_7DBC0
off_1E038 DCD asc_6AE7B+3 ; "-"
off_1E03C DCD a20s      ; "%.20s"



; int __fastcall sub_1E040(char *s)
sub_1E040

var_40= -0x40
var_38= -0x38
var_1C= -0x1C

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x44
MOV             R1, R0  ; s
ADD             R0, SP, #0x44+var_40 ; int
BL              sub_1DE70
SUBS            R4, R0, #0
MOVNE           R4, #1
BNE             loc_1E080
LDR             R5, [SP,#0x44+var_1C]
LDR             R0, [SP,#0x44+var_38]
BL              sub_16F8C
MOV             R3, R5
MOV             R1, R0
LDR             R2, =(aProcNetRaw+0xA) ; "raw"
ADD             R0, SP, #0x44+var_40
BL              sub_1DF24

loc_1E080
MOV             R0, R4
ADD             SP, SP, #0x44 ; 'D'
POP             {R4,R5,PC}
; End of function sub_1E040

off_1E08C DCD aProcNetRaw+0xA ; "raw"



; int __fastcall sub_1E090(char *)
sub_1E090

s= -0x3C
var_34= -0x34
var_18= -0x18

PUSH            {R4,LR}
SUB             SP, SP, #0x40
MOV             R4, R0
MOV             R2, #0x3C ; '<' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x40+s ; s
BL              memset
MOV             R1, R4  ; s
ADD             R0, SP, #0x40+s ; int
BL              sub_1DE70
SUBS            R4, R0, #0
MOVNE           R4, #1
BNE             loc_1E0F4
LDR             R3, [SP,#0x40+var_34]
CMP             R3, #1
LDREQ           R1, =aEstablished ; "ESTABLISHED"
BEQ             loc_1E0E4
LDR             R2, =aUnknown ; "UNKNOWN"
CMP             R3, #7
LDR             R1, =(asc_6B39D+1) ; ""
MOVNE           R1, R2

loc_1E0E4
LDR             R3, [SP,#0x40+var_18]
ADD             R0, SP, #0x40+s
LDR             R2, =(aProcNetUdp+0xA) ; "udp"
BL              sub_1DF24

loc_1E0F4
MOV             R0, R4
ADD             SP, SP, #0x40 ; '@'
POP             {R4,PC}
; End of function sub_1E090

off_1E100 DCD aEstablished ; "ESTABLISHED"
off_1E104 DCD aUnknown  ; "UNKNOWN"
off_1E108 DCD asc_6B39D+1 ; ""
off_1E10C DCD aProcNetUdp+0xA ; "udp"



; int __fastcall sub_1E110(char *)
sub_1E110

s= -0x3C
var_38= -0x38
var_34= -0x34

PUSH            {R4,LR}
SUB             SP, SP, #0x40
MOV             R4, R0
MOV             R2, #0x3C ; '<' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x40+s ; s
BL              memset
MOV             R1, R4  ; s
ADD             R0, SP, #0x40+s ; int
BL              sub_1DE70
SUBS            R4, R0, #0
MOVNE           R4, #1
BNE             loc_1E160
LDR             R0, [SP,#0x40+var_34]
LDR             R1, =off_634E8 ; ""
LDR             R3, [SP,#0x40+var_38]
LDR             R2, =(aProcNetTcp+0xA) ; "tcp"
LDR             R1, [R1,R0,LSL#2]
ADD             R0, SP, #0x40+s
BL              sub_1DF24

loc_1E160
MOV             R0, R4
ADD             SP, SP, #0x40 ; '@'
POP             {R4,PC}
; End of function sub_1E110

off_1E16C DCD off_634E8 ; ""
off_1E170 DCD aProcNetTcp+0xA ; "tcp"



; int __fastcall sub_1E174(int, char **)
sub_1E174

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4,R5,LR}
MOV             R0, #0x358
MOV             R5, R1
BL              sub_174DC
LDR             R3, =dword_7DB98
MOV             R4, R0
STR             R0, [R3]
MOV             R3, #0xF1
LDR             R1, =aLaentuwxrp ; "laentuwxrp"
STR             R3, [R0]
MOV             R0, R5
BL              sub_593CC
TST             R0, #1
MOV             R5, R0
LDRNE           R3, [R4]
BICNE           R3, R3, #1
ORRNE           R3, R3, #2
STRNE           R3, [R4]
TST             R0, #2
LDRNE           R3, [R4]
ORRNE           R3, R3, #3
STRNE           R3, [R4]
TST             R0, #8
LDRNE           R3, [R4]
ORRNE           R3, R3, #4
STRNE           R3, [R4]
ANDS            R2, R0, #0x100
BEQ             loc_1E204
EOR             R1, R0, #4
LDR             R0, [R4]
UBFX            R1, R1, #2, #1
AND             R0, R0, #4
BL              sub_1EFDC

loc_1E1F8
MOV             R0, #0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_1E204
LDR             R3, =(asc_6B39D+1) ; ""
TST             R0, #0x200
STR             R3, [R4,#0x354]
BEQ             loc_1E258
LDR             R3, =aPidProgramName ; "PID/Program name    "
MOV             R1, #0x21 ; '!'
STR             R2, [SP,#0xC+var_8]
STR             R2, [SP,#0xC+var_C]
STR             R3, [R4,#0x354]
MOV             R3, #1
STR             R3, [R4,#4]
LDR             R0, =(aNoProcessInfoI+0x13) ; "/proc"
LDR             R3, =sub_1DBE4
BL              sub_60474
CMP             R0, #0
BNE             loc_1E258
LDR             R3, [R4,#4]
CMP             R3, #1
LDREQ           R0, =aCanTScanProcAr ; "can't scan /proc - are you root?"
LDRNE           R0, =aShowingOnlyPro ; "showing only processes with your user I"...
BL              sub_16DDC

loc_1E258
LDR             R1, [R4]
ANDS            R5, R5, #0xF0
BICNE           R1, R1, #0xF0
ORRNE           R5, R1, R5
STRNE           R5, [R4]
LDR             R3, [R4]
TST             R3, #0x70
BEQ             loc_1E2B8
LDR             R0, =aActiveInternet ; "Active Internet connections "
BL              printf
LDR             R3, [R4]
AND             R2, R3, #3
CMP             R2, #3
LDREQ           R0, =aServersAndEsta ; "(servers and established)"
BEQ             loc_1E2A0
TST             R3, #2
LDRNE           R0, =aOnlyServers ; "(only servers)"
LDREQ           R0, =aWOServers ; "(w/o servers)"

loc_1E2A0
BL              printf
LDR             R3, [R4,#0x354]
LDR             R2, =aForeignAddress ; "Foreign Address"
LDR             R1, =aLocalAddress ; "Local Address"
LDR             R0, =aProtoRecvQSend ; "\nProto Recv-Q Send-Q %-23s %-23s State"...
BL              printf

loc_1E2B8
LDR             R3, [R4]
TST             R3, #0x10
BEQ             loc_1E2D0
LDR             R1, =sub_1E110
LDR             R0, =aProcNetTcp ; "/proc/net/tcp"
BL              sub_1DDF0

loc_1E2D0
LDR             R3, [R4]
TST             R3, #0x20
BEQ             loc_1E2E8
LDR             R1, =sub_1E090
LDR             R0, =aProcNetUdp ; "/proc/net/udp"
BL              sub_1DDF0

loc_1E2E8
LDR             R3, [R4]
TST             R3, #0x40
BEQ             loc_1E300
LDR             R1, =sub_1E040
LDR             R0, =aProcNetRaw ; "/proc/net/raw"
BL              sub_1DDF0

loc_1E300
LDR             R3, [R4]
TST             R3, #0x80
BEQ             loc_1E1F8
LDR             R0, =aActiveUnixDoma ; "Active UNIX domain sockets "
BL              printf
LDR             R3, [R4]
AND             R2, R3, #3
CMP             R2, #3
LDREQ           R0, =aServersAndEsta ; "(servers and established)"
BEQ             loc_1E334
TST             R3, #2
LDRNE           R0, =aOnlyServers ; "(only servers)"
LDREQ           R0, =aWOServers ; "(w/o servers)"

loc_1E334
BL              printf
LDR             R1, [R4,#0x354]
LDR             R0, =aProtoRefcntFla ; "\nProto RefCnt Flags       Type       S"...
BL              printf
LDR             R1, =sub_1D8A4
LDR             R0, =aProcNetUnix ; "/proc/net/unix"
BL              sub_1DDF0
B               loc_1E1F8
; End of function sub_1E174

off_1E354 DCD dword_7DB98
off_1E358 DCD aLaentuwxrp ; "laentuwxrp"
off_1E35C DCD asc_6B39D+1 ; ""
off_1E360 DCD aPidProgramName ; "PID/Program name    "
off_1E364 DCD aNoProcessInfoI+0x13 ; "/proc"
off_1E368 DCD sub_1DBE4
off_1E36C DCD aCanTScanProcAr ; "can't scan /proc - are you root?"
off_1E370 DCD aShowingOnlyPro ; "showing only processes with your user I"...
off_1E374 DCD aActiveInternet ; "Active Internet connections "
off_1E378 DCD aServersAndEsta ; "(servers and established)"
off_1E37C DCD aOnlyServers ; "(only servers)"
off_1E380 DCD aWOServers ; "(w/o servers)"
off_1E384 DCD aForeignAddress ; "Foreign Address"
off_1E388 DCD aLocalAddress ; "Local Address"
off_1E38C DCD aProtoRecvQSend ; "\nProto Recv-Q Send-Q %-23s %-23s State"...
off_1E390 DCD sub_1E110
off_1E394 DCD aProcNetTcp ; "/proc/net/tcp"
off_1E398 DCD sub_1E090
off_1E39C DCD aProcNetUdp ; "/proc/net/udp"
off_1E3A0 DCD sub_1E040
off_1E3A4 DCD aProcNetRaw ; "/proc/net/raw"
off_1E3A8 DCD aActiveUnixDoma ; "Active UNIX domain sockets "
off_1E3AC DCD aProtoRefcntFla ; "\nProto RefCnt Flags       Type       S"...
off_1E3B0 DCD sub_1D8A4
off_1E3B4 DCD aProcNetUnix ; "/proc/net/unix"


; Attributes: noreturn

; void __fastcall __noreturn sub_1E3B8(int)
sub_1E3B8

var_10= -0x10

LDR             R4, =buf
PUSH            {R0-R3,R7,LR}
MOV             R1, #1  ; handler
MOV             R0, #2  ; sig
BL              signal
LDR             R5, [R4,#termios.c_cc+0xB]
LDR             R1, [R4,#(dword_7D7E0 - 0x7D790)]
LDR             R2, [R4,#termios.c_cc+7]
MOV             R3, R5
LDR             R0, =aSPingStatistic ; "\n--- %s ping statistics ---\n%lu packe"...
BL              printf
LDR             R1, [R4,#termios.c_cc+0xF]
CMP             R1, #0
BEQ             loc_1E3F8
LDR             R0, =aLuDuplicates ; "%lu duplicates, "
BL              printf

loc_1E3F8
LDR             R1, [R4,#termios.c_cc+7]
CMP             R1, #0
BEQ             loc_1E418
SUB             R3, R1, R5
MOV             R0, #0x64 ; 'd'
MUL             R0, R0, R3
BLX             sub_15CA0
MOV             R1, R0

loc_1E418
LDR             R0, =aLuPacketLoss ; "%lu%% packet loss\n"
BL              printf
LDR             R8, [R4,#termios.c_cc+0x17]
CMN             R8, #1
BEQ             loc_1E488
LDR             R6, =0x10624DD3
MOV             R3, #0
LDR             R2, [R4,#termios.c_cc+0xF]
LDR             R0, [R4,#termios.c_cc+0x1F]
LDR             R1, [R4,#termios.c_ispeed]
ADD             R2, R2, R5
BLX             sub_62C44
UMULL           R2, R3, R0, R6
LDR             R12, [R4,#termios.c_cc+0x1B]
MOV             LR, R3,LSR#6
UMULL           R2, R3, R8, R6
MOV             R2, #0x3E8
UMULL           R6, R7, R12, R6
MOV             R1, R3,LSR#6
MLS             R0, R2, LR, R0
MOV             R3, R7,LSR#6
MLS             R12, R2, R3, R12
STR             R0, [SP,#0x10+var_10]
LDR             R0, =aRoundTripMinAv ; "round-trip min/avg/max = %u.%03u/%u.%03"...
MLS             R2, R2, R1, R8
STMFA           SP, {R3,R12}
MOV             R3, LR
BL              printf

loc_1E488
CMP             R5, #0
MOVEQ           R0, #1
BEQ             loc_1E4B0
LDR             R0, [R4,#(dword_7D7CC - 0x7D790)]
CMP             R0, #0
BEQ             loc_1E4B0
LDR             R0, [R4,#termios.c_line]
CMP             R0, R5
MOVLS           R0, #0
MOVHI           R0, #1  ; status

loc_1E4B0
BL              exit
; End of function sub_1E3B8

off_1E4B4 DCD buf
off_1E4B8 DCD aSPingStatistic ; "\n--- %s ping statistics ---\n%lu packe"...
off_1E4BC DCD aLuDuplicates ; "%lu duplicates, "
off_1E4C0 DCD aLuPacketLoss ; "%lu%% packet loss\n"
dword_1E4C4 DCD 0x10624DD3
off_1E4C8 DCD aRoundTripMinAv ; "round-trip min/avg/max = %u.%03u/%u.%03"...



; void sub_1E4CC(int)
sub_1E4CC

var_C= -0xC

PUSH            {R0-R2,R4-R7,LR}
MOV             R7, #0
LDR             R4, =buf
LDR             R5, [R4,#(dword_7D7DC - 0x7D790)]
LDR             R2, [R4,#termios.c_lflag]
LDRB            R1, [R4,#termios.c_cc+0x15] ; c
MOV             R0, R5  ; s
ADD             R2, R2, #0xC ; n
BL              memset
MOV             R3, #8
STRH            R7, [R5,#2]
STRB            R3, [R5]
LDR             R3, [R4,#termios.c_cc+7]
REV16           R3, R3
STRH            R3, [R5,#6]
LDRH            R3, [R4,#termios.c_cc+0x13]
STRH            R3, [R5,#4]
BL              sub_187B0
STR             R0, [R4,#termios.c_ospeed]
STR             R0, [R5,#8]
MOV             R0, R5
LDR             R1, [R4,#termios.c_lflag]
ADD             R1, R1, #8
BL              sub_5A500
STRH            R0, [R5,#2]
MOV             R12, #1
LDR             R3, [R4,#termios.c_cc+7]
MOV             R5, R4
UBFX            R2, R3, #3, #7
AND             R0, R3, #7
ADD             R2, R4, R2
ADD             R3, R3, R12
LDRB            R1, [R2,#0x68]
BIC             R1, R1, R12,LSL R0
STRB            R1, [R2,#0x68]
LDR             R2, [R4,#(dword_7D7CC - 0x7D790)]
LDR             R6, [R4,#termios.c_lflag]
STR             R3, [R4,#termios.c_cc+7]
CMP             R2, R7
ADD             R6, R6, #8
BEQ             loc_1E588
LDR             R3, [R4,#termios.c_ospeed]
SUB             R3, R3, R2
CMP             R3, R7
BLT             loc_1E588
MOV             R0, R7  ; int
BL              sub_1E3B8

loc_1E588
MOV             R3, #0x10
LDR             R1, [R5,#(dword_7D7DC - 0x7D790)]
MOV             R2, R6
STR             R3, [SP,#0xC+var_C]
MOV             R0, #0
LDR             R3, =unk_7D7E8
BL              sub_179DC
CMP             R6, R0
BEQ             loc_1E5B4
LDR             R0, =aWriteError ; "write error"
BL              sub_16DBC

loc_1E5B4
LDR             R3, [R5,#termios.c_line]
CMP             R3, #0
BEQ             loc_1E5CC
LDR             R2, [R5,#termios.c_cc+7]
CMP             R3, R2
BLS             loc_1E5E8

loc_1E5CC               ; handler
LDR             R1, =sub_1E4CC
MOV             R0, #0xE ; sig
BL              signal
MOV             R0, #1

loc_1E5DC
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
B               alarm

loc_1E5E8
LDR             R3, [R5,#termios.c_cc+0xB]
LDR             R4, [R5,#(dword_7D7D0 - 0x7D790)]
CMP             R3, #0
BEQ             loc_1E604
LDR             R4, [R5,#termios.c_cc+0x1B]
MOVS            R4, R4,LSR#19
MOVEQ           R4, #1

loc_1E604               ; handler
LDR             R1, =sub_1E3B8
MOV             R0, #0xE ; sig
BL              signal
MOV             R0, R4
B               loc_1E5DC
; End of function sub_1E4CC

off_1E618 DCD buf
off_1E61C DCD unk_7D7E8
off_1E620 DCD aWriteError ; "write error"
off_1E624 DCD sub_1E4CC
off_1E628 DCD sub_1E3B8


; Attributes: noreturn

; void __fastcall __noreturn sub_1E62C(int, char **)
sub_1E62C

optlen= -0x44
addr_len= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_2C= -0x2C
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
addr= -0x14

PUSH            {R4-R11,LR}
MOV             R3, #0
LDR             R4, =buf
SUB             SP, SP, #0x44
MOV             R2, #0x38 ; '8'
MOV             R7, R1
MOV             R0, R7
LDR             R1, =aQvacSTWWINp4 ; "^qvAc:+s:t:+w:+W:+I:np:4"
STRB            R3, [R4,#termios.c_lflag+1]
STRB            R3, [R4,#termios.c_lflag+2]
STRB            R3, [R4,#termios.c_lflag+3]
STRB            R3, [R4,#(dword_7D7D0+1 - 0x7D790)]
STRB            R3, [R4,#(dword_7D7D0+2 - 0x7D790)]
STRB            R3, [R4,#(dword_7D7D0+3 - 0x7D790)]
MOV             R3, #0xFFFFFFFF
STRB            R3, [R4,#termios.c_cc+0x17]
STRB            R3, [R4,#termios.c_cc+0x18]
STRB            R3, [R4,#termios.c_cc+0x19]
STRB            R3, [R4,#termios.c_cc+0x1A]
ADD             R3, SP, #0x44+var_1C
STR             R3, [SP,#0x44+var_34]
ADD             R3, R4, #4
STR             R3, [SP,#0x44+var_38]
ADD             R3, R4, #0x40 ; '@'
STR             R3, [SP,#0x44+var_3C]
ADD             R3, R4, #0x3C ; '<'
STRB            R2, [R4,#termios.c_lflag]
MOV             R2, #0xA
STR             R3, [SP,#0x44+addr_len]
ADD             R3, R4, #0x14
STRB            R2, [R4,#(dword_7D7D0 - 0x7D790)]
ADD             R2, R4, #0x10
STR             R3, [SP,#0x44+optlen]
ADD             R3, SP, #0x44+var_20
BL              sub_593CC
TST             R0, #0x10
MOV             R8, R0
BEQ             loc_1E6D0
LDR             R0, [SP,#0x44+var_20]
BL              sub_621A8
STR             R0, [R4,#termios.c_lflag]

loc_1E6D0
TST             R8, #0x100
BEQ             loc_1E710
LDR             R0, [R4,#termios.c_oflag]
BL              if_nametoindex
CMP             R0, #0
MOV             R5, R0
STR             R0, [R4]
BNE             loc_1E710
MOV             R1, R0
LDR             R0, [R4,#termios.c_oflag]
BL              sub_6248C
STRB            R5, [R4,#termios.c_oflag]
STR             R0, [R4,#termios.c_cflag]
STRB            R5, [R4,#termios.c_oflag+1]
STRB            R5, [R4,#termios.c_oflag+2]
STRB            R5, [R4,#termios.c_oflag+3]

loc_1E710
TST             R8, #0x400
BEQ             loc_1E730
MOV             R3, #0xFF
MOV             R2, #0
MOV             R1, #0x10
LDR             R0, [SP,#0x44+var_1C]
BL              sub_62034
STRB            R0, [R4,#termios.c_cc+0x15]

loc_1E730
LDR             R5, [R4,#(dword_7D7CC - 0x7D790)]
CMP             R5, #0
BEQ             loc_1E75C
BL              sub_187B0
MOVW            R3, #0x863
CMP             R5, R3
MOVCS           R5, R3
LDR             R3, =0xF4240
MLA             R5, R3, R5, R0
ORR             R5, R5, #1
STR             R5, [R4,#(dword_7D7CC - 0x7D790)]

loc_1E75C
BL              getpid
LDR             R3, =optind
MOV             R1, #0
STRH            R0, [R4,#termios.c_cc+0x13]
LDR             R3, [R3]
LDR             R0, [R7,R3,LSL#2]
STR             R0, [R4,#(dword_7D7E0 - 0x7D790)]
BL              sub_62484
LDR             R3, [R4,#termios.c_cflag]
MOV             R5, R0
CMP             R3, #0
BEQ             loc_1E7AC
LDRH            R2, [R3,#4]
LDRH            R3, [R0,#4]
CMP             R2, R3
MOVNE           R3, #0
STRBNE          R3, [R4,#termios.c_cflag]
STRBNE          R3, [R4,#termios.c_cflag+1]
STRBNE          R3, [R4,#termios.c_cflag+2]
STRBNE          R3, [R4,#termios.c_cflag+3]

loc_1E7AC
ADD             R7, R5, #4
MOV             R0, R7
BL              sub_6249C
LDR             R1, [R4,#(dword_7D7E0 - 0x7D790)]
MOV             R2, R0
STR             R0, [R4,#(dword_7D7E4 - 0x7D790)]
LDR             R0, =aPingSS ; "PING %s (%s)"
BL              printf
LDR             R0, [R4,#termios.c_cflag]
CMP             R0, #0
BEQ             loc_1E7EC
ADD             R0, R0, #4
BL              sub_6249C
MOV             R1, R0
LDR             R0, =(aReadFromS+4) ; " from %s"
BL              printf

loc_1E7EC
LDR             R1, [R4,#termios.c_lflag]
LDR             R0, =aDDataBytes ; ": %d data bytes\n"
BL              printf
MOV             R2, #1  ; protocol
MOV             R1, #3  ; type
MOV             R0, #2  ; domain
BL              socket
CMP             R0, #0
BGE             loc_1E830
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #1
LDREQ           R0, =aPermissionDeni ; "permission denied (are you root?)"
BEQ             loc_1E8D0
LDR             R0, =aCanTCreateRawS ; "can't create raw socket"
BL              sub_16B40

loc_1E830
MOV             R1, #0
BL              sub_176A8
LDR             R1, [R4,#termios.c_oflag]
CMP             R1, #0
BEQ             loc_1E84C
MOV             R0, #0
BL              sub_62424

loc_1E84C
LDR             R0, [R4,#termios.c_lflag]
ADD             R0, R0, #0x88
STR             R0, [R4,#(dword_7D7D4 - 0x7D790)]
BL              sub_174DC
STR             R0, [R4,#(dword_7D7D8 - 0x7D790)]
LDR             R0, [R4,#termios.c_lflag]
ADD             R0, R0, #0xC
BL              sub_174DC
LDR             LR, =unk_7D7E8
MOV             R3, R7
ADD             R2, R5, #0x14
STR             R0, [R4,#(dword_7D7DC - 0x7D790)]

loc_1E87C
MOV             R12, R3
ADD             LR, LR, #8
LDM             R12!, {R0,R1}
CMP             R12, R2
STR             R0, [LR,#-8]
STR             R1, [LR,#-4]
MOV             R3, R12
BNE             loc_1E87C
LDR             R3, [R4,#termios.c_cflag]
CMP             R3, #0
BEQ             loc_1E8E4
LDR             R2, [R3]
MOV             R1, #0  ; level
ADD             R3, R3, #4 ; optval
MOV             R0, R1  ; fd
STR             R2, [SP,#0x44+optlen] ; optlen
MOV             R2, #0x20 ; ' ' ; optname
BL              setsockopt
CMP             R0, #0
BEQ             loc_1E8D4
LDR             R0, =aCanTSetMultica ; "can't set multicast source interface"

loc_1E8D0
BL              sub_16DBC

loc_1E8D4
LDR             R1, [R4,#termios.c_cflag]
LDR             R2, [R1]
ADD             R1, R1, #4
BL              sub_179C0

loc_1E8E4
MOV             R0, #0
BL              sub_6241C
LDR             R2, [R4,#termios.c_lflag]
MOV             R1, #8
MOV             R0, #0
ADD             R2, R2, #0xE00
MOV             R2, R2,LSL#1
BL              sub_623FC
LDR             R3, [R4,#termios.c_cc+3]
CMP             R3, #0
BEQ             loc_1E934
MOV             R1, #0
MOV             R2, #2
MOV             R0, R1
BL              sub_623D0
MOV             R1, #0
LDR             R3, [R4,#termios.c_cc+3]
MOV             R2, #0x21 ; '!'
MOV             R0, R1
BL              sub_623D0

loc_1E934
LDR             R11, =0x10624DD3
MOV             R0, #2  ; sig
LDR             R1, =sub_1E3B8 ; handler
BL              signal

loc_1E944
LDR             R9, =dword_7DBC0
MOV             R0, #0  ; int
BL              sub_1E4CC

loc_1E950
MOV             R3, #0x10
LDR             R1, [R4,#(dword_7D7D8 - 0x7D790)] ; buf
STR             R3, [SP,#0x44+var_18]
ADD             R3, SP, #0x44+var_18
STR             R3, [SP,#0x44+addr_len] ; addr_len
ADD             R3, SP, #0x44+addr
STR             R3, [SP,#0x44+optlen] ; addr
MOV             R3, #0  ; flags
LDR             R2, [R4,#(dword_7D7D4 - 0x7D790)] ; n
MOV             R0, R3  ; fd
BL              recvfrom
CMP             R0, #0
BGE             loc_1E9A4
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #4
BEQ             loc_1E950
LDR             R0, =aRecvfrom_0 ; "recvfrom"
BL              sub_16AF4
B               loc_1E950

loc_1E9A4
LDR             R3, [R4,#termios.c_lflag]
LDR             R10, [R4,#(dword_7D7D8 - 0x7D790)]
ADD             R3, R3, #8
CMP             R3, R0
BHI             loc_1EB4C
LDRB            R3, [R10]
LDRH            R2, [R4,#termios.c_cc+0x13]
AND             R3, R3, #0xF
MOV             R5, R3,LSL#2
SUB             R8, R0, R5
ADD             R5, R10, R5
LDRH            R1, [R5,#4]
CMP             R1, R2
BNE             loc_1EB4C
LDRB            R1, [R10,R3,LSL#2]
CMP             R1, #0
BNE             loc_1EB2C
LDRH            R7, [R5,#6]
CMP             R8, #0xB
ADDHI           R5, R5, #8
MOVLS           R5, R1
LDR             R0, [SP,#0x44+addr.sa_data+2] ; in
BL              inet_ntoa
CMP             R5, #0
REV16           R7, R7
UXTH            R7, R7
MOV             R2, R0
LDRB            R3, [R10,#8]
BEQ             loc_1EA5C
STRD            R2, R3, [SP,#0x44+var_2C]
BL              sub_187B0
LDR             R6, [R5]
LDR             R2, [R4,#termios.c_cc+0x1F]
LDR             R3, [R4,#termios.c_ispeed]
SUB             R6, R0, R6
ADDS            R0, R2, R6
ADC             R1, R3, #0
LDRD            R2, R3, [SP,#0x44+var_2C]
STR             R1, [R4,#termios.c_ispeed]
LDR             R1, [R4,#termios.c_cc+0x17]
STR             R0, [R4,#termios.c_cc+0x1F]
CMP             R6, R1
LDR             R1, [R4,#termios.c_cc+0x1B]
STRCC           R6, [R4,#termios.c_cc+0x17]
CMP             R6, R1
STRHI           R6, [R4,#termios.c_cc+0x1B]

loc_1EA5C
AND             R12, R7, #7
UBFX            R0, R7, #3, #7
MOV             R1, #1
ADD             R0, R0, #0x68 ; 'h'
MOV             R1, R1,LSL R12
LDRB            R12, [R4,R0]
UXTB            R1, R1
TST             R1, R12
ORREQ           R1, R1, R12
LDRNE           R1, [R4,#termios.c_cc+0xF]
STRBEQ          R1, [R4,R0]
LDREQ           R1, [R4,#termios.c_cc+0xB]
ADDNE           R1, R1, #1
LDRNE           R10, =aDup ; " (DUP!)"
STRNE           R1, [R4,#termios.c_cc+0xF]
ADDEQ           R1, R1, #1
LDREQ           R10, =(aDup+7) ; ""
STREQ           R1, [R4,#termios.c_cc+0xB]
LDR             R1, [R9]
TST             R1, #1
BNE             loc_1EAF8
STR             R3, [SP,#0x44+optlen]
MOV             R1, R8
MOV             R3, R7
LDR             R0, =aDBytesFromSSeq ; "%d bytes from %s: seq=%u ttl=%d"
BL              printf
CMP             R5, #0
BEQ             loc_1EAEC
MOV             R1, #0x3E8
MOV             R0, R6
BLX             sub_15EFC
MOV             R2, R1
UMULL           R0, R1, R6, R11
LDR             R0, =aTimeU03uMs ; " time=%u.%03u ms"
MOV             R1, R1,LSR#6
BL              printf

loc_1EAEC               ; s
MOV             R0, R10
BL              puts
BL              sub_177D8

loc_1EAF8
MOV             R3, #1

loc_1EAFC
LDR             R2, [R4,#termios.c_line]
CMP             R2, #0
BEQ             loc_1EB14
LDR             R1, [R4,#termios.c_cc+0xB]
CMP             R2, R1
BLS             loc_1EB54

loc_1EB14
CMP             R3, #0
BEQ             loc_1E950
LDR             R3, [R9]
TST             R3, #4
BNE             loc_1E944
B               loc_1E950

loc_1EB2C
CMP             R1, #8
BEQ             loc_1EB4C
CMP             R1, #0x12
LDR             R0, =aWarningGotIcmp ; "warning: got ICMP %d (%s)"
LDRLS           R3, =off_63518 ; "Echo Reply"
LDRHI           R2, =aUnknownIcmpTyp ; "unknown ICMP type"
LDRLS           R2, [R3,R1,LSL#2]
BL              sub_16DDC

loc_1EB4C
MOV             R3, #0
B               loc_1EAFC

loc_1EB54               ; int
MOV             R0, #0
BL              sub_1E3B8
; End of function sub_1E62C

off_1EB5C DCD buf
off_1EB60 DCD aQvacSTWWINp4 ; "^qvAc:+s:t:+w:+W:+I:np:4"
dword_1EB64 DCD 0xF4240
off_1EB68 DCD optind
off_1EB6C DCD aPingSS   ; "PING %s (%s)"
off_1EB70 DCD aReadFromS+4 ; " from %s"
off_1EB74 DCD aDDataBytes ; ": %d data bytes\n"
off_1EB78 DCD dword_7DB94
off_1EB7C DCD aPermissionDeni ; "permission denied (are you root?)"
off_1EB80 DCD aCanTCreateRawS ; "can't create raw socket"
off_1EB84 DCD unk_7D7E8
off_1EB88 DCD aCanTSetMultica ; "can't set multicast source interface"
dword_1EB8C DCD 0x10624DD3
off_1EB90 DCD sub_1E3B8
off_1EB94 DCD dword_7DBC0
off_1EB98 DCD aRecvfrom_0 ; "recvfrom"
off_1EB9C DCD aDup      ; " (DUP!)"
off_1EBA0 DCD aDup+7    ; ""
off_1EBA4 DCD aDBytesFromSSeq ; "%d bytes from %s: seq=%u ttl=%d"
off_1EBA8 DCD aTimeU03uMs ; " time=%u.%03u ms"
off_1EBAC DCD aWarningGotIcmp ; "warning: got ICMP %d (%s)"
off_1EBB0 DCD off_63518 ; "Echo Reply"
off_1EBB4 DCD aUnknownIcmpTyp ; "unknown ICMP type"



; int __fastcall sub_1EBB8(const char *, const char ***)
sub_1EBB8
PUSH            {R4-R8,LR}
LDR             R6, [R1]
LDR             R4, [R6]
CMP             R4, #0
BEQ             loc_1EC30
MOV             R5, R0
MOV             R7, R1

loc_1EBD4               ; s2
MOV             R1, R4
ADD             R0, R5, #2 ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_1EC1C
ADD             R3, R6, #4
STR             R3, [R7]
LDRB            R3, [R5,#1]
TST             R3, #0x10
BEQ             loc_1EC14
LDR             R3, [R6,#4]
CMP             R3, #0
BNE             loc_1EC0C
BL              sub_162F0

loc_1EC0C
ADD             R6, R6, #8
STR             R6, [R7]

loc_1EC14
LDRB            R0, [R5,#1]
POP             {R4-R8,PC}

loc_1EC1C
LDRB            R3, [R5]
LDRB            R0, [R5,R3]!
CMP             R0, #0
POPEQ           {R4-R8,PC}
B               loc_1EBD4

loc_1EC30
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_1EBB8




; int __fastcall sub_1EC38(int, const char **)
sub_1EC38

var_6C= -0x6C
var_64= -0x64
s= -0x54
var_50= -0x50
var_4C= -0x4C
var_40= -0x40
var_30= -0x30
var_2C= -0x2C
var_20= -0x20
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4
var_s0=  0

PUSH            {R4-R10,LR}
SUB             SP, SP, #0x70
ADD             R5, SP, #0x70+var_s0
MOV             R6, R0
STR             R1, [R5,#-0x6C]!
MOV             R1, R5
LDR             R0, =asc_662A2 ; "\a"
BL              sub_1EBB8
LDR             R4, [SP,#0x70+var_6C]
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_1EC6C

loc_1EC68
BL              sub_162F0

loc_1EC6C               ; n
MOV             R2, #0x54 ; 'T'
MOV             R1, #0  ; c
MOV             R7, R0
ADD             R0, SP, #0x70+s ; s
BL              memset
LDR             R8, [R4]
ADD             R3, R4, #4
MOV             R1, #0x2F ; '/' ; c
STR             R3, [SP,#0x70+var_6C]
MOV             R0, R8  ; s
BL              strchr
SUBS            R9, R0, #0
LDREQ           R4, =aDefault ; "default"
BEQ             loc_1ECD4
MOV             R2, #0x20 ; ' ' ; int
MOV             R1, #0  ; int
ADD             R0, R9, #1 ; int
MOV             R4, #0
BL              sub_6206C
MOV             R3, #0xFFFFFFFF
MVN             R0, R3,LSR R0
MOV             R3, #2
REV             R0, R0
STR             R0, [SP,#0x70+var_2C]
STRB            R4, [R9]
STRH            R3, [SP,#0x70+var_30]

loc_1ECD4
ADD             R1, SP, #0x70+var_50
AND             R2, R7, #2
MOV             R0, R8
BL              sub_5A53C
CMP             R0, #0
MOVLT           R1, R8
BLT             loc_1EE20
CMP             R9, #0
LDR             R8, =0x51EB851F
MOVNE           R3, #0x2F ; '/'
STRBNE          R3, [R9]
CMP             R7, #0
ANDNE           R0, R7, #1
LDR             R9, =word_642CE
LDR             R7, =asc_662B1 ; "\t"
CMP             R0, #0
MOVNE           R3, #1
MOVEQ           R3, #5
STRH            R3, [SP,#0x70+var_20]

loc_1ED20
LDR             R3, [SP,#0x70+var_6C]
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_1ED9C
LDRH            R2, [SP,#0x70+var_20]
TST             R2, #0x200
BEQ             loc_1ED4C
LDR             R3, [SP,#0x70+var_10]
CMP             R3, #0
LDREQ           R3, =(a0Llo+4) ; "lo"
STREQ           R3, [SP,#0x70+var_10]

loc_1ED4C
LDR             R0, [SP,#0x70+var_2C]
CMP             R0, #0
BEQ             loc_1EF5C
REV             R3, R0
MVN             R1, R3
ADDS            R12, R1, #1
MOVNE           R12, #1
ANDS            R12, R12, R2,LSR#2
LDRNE           R0, =aNetmask8xAndHo ; "netmask %.8x and host route conflict"
BNE             loc_1EE24
RSB             R3, R3, #0
TST             R3, R1
MOVNE           R1, R4
LDRNE           R0, =aBogusNetmaskS ; "bogus netmask %s"
BNE             loc_1EE24
LDR             R3, [SP,#0x70+var_4C]
BICS            R3, R3, R0
BEQ             loc_1EF5C
LDR             R0, =aNetmaskAndRout ; "netmask and route address conflict"
BL              sub_16DBC

loc_1ED9C
MOV             R1, R5
MOV             R0, R7
BL              sub_1EBB8
LDR             R3, [SP,#0x70+var_6C]
TST             R0, #0x20
LDR             R10, [R3,#-4]
BEQ             loc_1EDD4
AND             R0, R0, #3
LDRH            R2, [SP,#0x70+var_20]
MOV             R0, R0,LSL#1
LDRH            R3, [R9,R0]
ORR             R3, R3, R2
STRH            R3, [SP,#0x70+var_20]
B               loc_1ED20

loc_1EDD4
CMP             R0, #0x10
BNE             loc_1EDF0
MOV             R0, R10
BL              sub_620B0
ADD             R0, R0, #1
STRH            R0, [SP,#0x70+var_14]
B               loc_1ED20

loc_1EDF0
CMP             R0, #0x11
BNE             loc_1EE3C
LDR             R2, [SP,#0x70+var_2C]
CMP             R2, #0
BNE             loc_1EC68
ADD             R4, SP, #0x70+var_64
MOV             R0, R10
MOV             R1, R4
BL              sub_5A53C
CMP             R0, #0
BGE             loc_1EE28
MOV             R1, R10

loc_1EE20
LDR             R0, =aResolvingS ; "resolving %s"

loc_1EE24
BL              sub_16DBC

loc_1EE28
LDM             R4, {R0-R3}
ADD             R12, SP, #0x70+var_30
MOV             R4, R10
STM             R12, {R0-R3}
B               loc_1ED20

loc_1EE3C
CMP             R0, #0x12
BNE             loc_1EE84
LDRH            R3, [SP,#0x70+var_20]
TST             R3, #2
BNE             loc_1EC68
MOV             R2, #1
ADD             R1, SP, #0x70+var_40
MOV             R0, R10
BL              sub_5A53C
LDRH            R3, [SP,#0x70+var_20]
CMP             R0, #0
ORR             R3, R3, #2
STRH            R3, [SP,#0x70+var_20]
BEQ             loc_1ED20
MOV             R1, R10
LDRGE           R0, =aGatewaySIsANet ; "gateway %s is a NETWORK"
BGE             loc_1EE24
B               loc_1EE20

loc_1EE84
CMP             R0, #0x13
BNE             loc_1EEB0
LDRH            R3, [SP,#0x70+var_20]
MOV             R2, #0x8000 ; int
MOV             R1, #0x40 ; '@' ; int
MOV             R0, R10 ; int
ORR             R3, R3, #0x40 ; '@'
STRH            R3, [SP,#0x70+var_20]
BL              sub_6206C
STR             R0, [SP,#0x70+var_C]
B               loc_1ED20

loc_1EEB0
CMP             R0, #0x14
BNE             loc_1EEDC
LDRH            R3, [SP,#0x70+var_20]
MOV             R2, #0x7FFFFFFF ; int
MOV             R1, #0x80 ; int
MOV             R0, R10 ; int
ORR             R3, R3, #0x80
STRH            R3, [SP,#0x70+var_20]
BL              sub_6206C
STR             R0, [SP,#0x70+var_8]
B               loc_1ED20

loc_1EEDC
CMP             R0, #0x15
BNE             loc_1EF18
LDRH            R3, [SP,#0x70+var_20]
MOV             R0, R10
ORR             R3, R3, #0x100
STRH            R3, [SP,#0x70+var_20]
BL              sub_620B0
STRH            R0, [SP,#0x70+var_4]
BL              sub_60F80
UMULL           R0, R1, R0, R8
LDRH            R3, [SP,#0x70+var_4]
MOV             R2, R1,LSR#5
SMULBB          R3, R3, R2
STRH            R3, [SP,#0x70+var_4]
B               loc_1ED20

loc_1EF18
LDR             R2, [SP,#0x70+var_10]
CMP             R2, #0
BNE             loc_1EC68
CMP             R0, #0x16
BNE             loc_1EF3C

loc_1EF2C
LDR             R3, [SP,#0x70+var_6C]
LDR             R3, [R3,#-4]
STR             R3, [SP,#0x70+var_10]
B               loc_1ED20

loc_1EF3C
CMP             R0, #0
BNE             loc_1EC68
ADD             R2, R3, #4
LDR             R3, [R3,#4]
STR             R2, [SP,#0x70+var_6C]
CMP             R3, #0
BEQ             loc_1EF2C
B               loc_1EC68

loc_1EF5C
CMP             R6, #1
BNE             loc_1EF70
TST             R2, #4
MOVNE           R3, #0xFFFFFFFF
STRNE           R3, [SP,#0x70+var_2C]

loc_1EF70
MOV             R1, #2
MOV             R2, #0
MOV             R0, R1
BL              sub_179A4
CMP             R6, #1
LDREQ           R3, =aSiocaddrt ; "SIOCADDRT"
ADDEQ           R2, SP, #0x70+s
MOVWEQ          R1, #0x890B
LDRNE           R3, =aSiocdelrt ; "SIOCDELRT"
ADDNE           R2, SP, #0x70+s
MOVWNE          R1, #0x890C
BL              sub_17B18
ADD             SP, SP, #0x70 ; 'p'
POP             {R4-R10,PC}
; End of function sub_1EC38

off_1EFA8 DCD asc_662A2 ; "\a"
off_1EFAC DCD aDefault  ; "default"
dword_1EFB0 DCD 0x51EB851F
off_1EFB4 DCD word_642CE
off_1EFB8 DCD asc_662B1 ; "\t"
off_1EFBC DCD a0Llo+4   ; "lo"
off_1EFC0 DCD aNetmask8xAndHo ; "netmask %.8x and host route conflict"
off_1EFC4 DCD aBogusNetmaskS ; "bogus netmask %s"
off_1EFC8 DCD aNetmaskAndRout ; "netmask and route address conflict"
off_1EFCC DCD aResolvingS ; "resolving %s"
off_1EFD0 DCD aGatewaySIsANet ; "gateway %s is a NETWORK"
off_1EFD4 DCD aSiocaddrt ; "SIOCADDRT"
off_1EFD8 DCD aSiocdelrt ; "SIOCDELRT"



; int __fastcall sub_1EFDC(int, int)
sub_1EFDC

var_B4= -0xB4
var_B0= -0xB0
var_AC= -0xAC
var_A8= -0xA8
var_A4= -0xA4
var_A0= -0xA0
var_9C= -0x9C
var_98= -0x98
var_94= -0x94
var_8C= -0x8C
var_88= -0x88
in= -0x84
var_80= -0x80
var_7C= -0x7C
var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_68= -0x68
var_64= -0x64
var_54= -0x54
s= -0x52
var_50= -0x50
var_44= -0x44

PUSH            {R4-R11,LR}
MOV             R6, R0
SUB             SP, SP, #0xB4
LDR             R0, =aProcNetRoute ; "/proc/net/route"
MOV             R7, R1
BL              sub_61CA8
LDR             R3, =aMetricRefUse ; "Metric Ref    Use"
CMP             R7, #0
LDR             R1, =aMssWindowIrtt ; "  MSS Window  irtt"
MOV             R4, R0
LDR             R0, =aKernelIpRoutin ; "Kernel IP routing table\nDestination   "...
MOVEQ           R1, R3
BL              printf
LDR             R1, =asc_66227 ; "%*[^\n]\n"
MOV             R0, R4  ; stream
BL              fscanf
CMP             R0, #0
BLT             loc_1F09C
LDR             R10, =a63sLxLxXDDDLxD ; "%63s%lx%lx%X%d%d%d%lx%d%d%d\n"
LDR             R11, =a1515s1515s16s6 ; "%-15.15s %-15.15s %-16s%-6s"

loc_1F02C
ADD             R5, SP, #0xB4+var_44

loc_1F030
ADD             R3, SP, #0xB4+var_68
MOV             R2, R5
STR             R3, [SP,#0xB4+var_94]
ADD             R3, SP, #0xB4+var_6C
STR             R3, [SP,#0xB4+var_98]
ADD             R3, SP, #0xB4+var_70
STR             R3, [SP,#0xB4+var_9C]
ADD             R3, SP, #0xB4+in
STR             R3, [SP,#0xB4+var_A0]
ADD             R3, SP, #0xB4+var_74
STR             R3, [SP,#0xB4+var_A4]
ADD             R3, SP, #0xB4+var_78
STR             R3, [SP,#0xB4+var_A8]
ADD             R3, SP, #0xB4+var_7C
STR             R3, [SP,#0xB4+var_AC]
ADD             R3, SP, #0xB4+var_80
STR             R3, [SP,#0xB4+var_B0]
ADD             R3, SP, #0xB4+var_88
STR             R3, [SP,#0xB4+var_B4]
MOV             R1, R10 ; format
ADD             R3, SP, #0xB4+var_8C
MOV             R0, R4  ; stream
BL              fscanf
CMP             R0, #0xB
BEQ             loc_1F0B4
CMP             R0, #0
BGE             loc_1F0AC

loc_1F09C               ; stream
MOV             R0, R4
BL              feof_unlocked
CMP             R0, #0
BNE             loc_1F1B0

loc_1F0AC
LDR             R0, =aReadError ; "read error"
BL              sub_16B40

loc_1F0B4
LDR             R1, [SP,#0xB4+var_80]
TST             R1, #1
BEQ             loc_1F030
LDR             R12, =(a6d2d7dS+0x11) ; ""
AND             R8, R1, #0x3F ; '?'
LDR             LR, =unk_642D4
ADD             R2, SP, #0xB4+var_64

loc_1F0D0
LDRB            R0, [R12,#1]!
CMP             R0, #0
STRB            R0, [R2]
BNE             loc_1F190
TST             R1, #0x200
ADD             R0, SP, #0xB4+s ; s
MOVNE           R2, #0x21 ; '!'
MOV             R1, #0  ; c
STRBNE          R2, [SP,#0xB4+var_64]
MOV             R2, #0xE ; n
BL              memset
MOV             R2, #2
ORR             R1, R6, #0x8000
STRH            R2, [SP,#0xB4+var_54]
ADD             R0, SP, #0xB4+var_54
LDR             R2, [SP,#0xB4+var_8C]
STR             R2, [SP,#0xB4+var_50]
LDR             R2, [SP,#0xB4+in]
BL              sub_5A5B0
LDR             R2, [SP,#0xB4+var_88]
MOV             R9, R0
ORR             R1, R6, #0x4000
ADD             R0, SP, #0xB4+var_54
STR             R2, [SP,#0xB4+var_50]
LDR             R2, [SP,#0xB4+in]
BL              sub_5A5B0
MOV             R8, R0
LDR             R0, [SP,#0xB4+in] ; in
BL              inet_ntoa
ADD             R3, SP, #0xB4+var_64
MOV             R2, R8
MOV             R1, R9
STR             R3, [SP,#0xB4+var_B4]
MOV             R3, R0
MOV             R0, R11 ; format
BL              printf
MOV             R0, R9  ; ptr
BL              free
MOV             R0, R8  ; ptr
BL              free
CMP             R7, #0
STR             R5, [SP,#0xB4+var_B4]
BEQ             loc_1F1A0
LDRD            R2, R3, [SP,#0xB4+var_6C]
LDR             R1, [SP,#0xB4+var_70]
LDR             R0, =a5d5d6dS ; "%5d %-5d %6d %s\n"

loc_1F188
BL              printf
B               loc_1F02C

loc_1F190
LDRH            R0, [LR,#2]!
TST             R0, R8
ADDNE           R2, R2, #1
B               loc_1F0D0

loc_1F1A0
LDRD            R2, R3, [SP,#0xB4+var_7C]
LDR             R1, [SP,#0xB4+var_74]
LDR             R0, =a6d2d7dS ; "%-6d %-2d %7d %s\n"
B               loc_1F188

loc_1F1B0               ; stream
MOV             R0, R4
BL              fclose
ADD             SP, SP, #0xB4
POP             {R4-R11,PC}
; End of function sub_1EFDC

off_1F1C0 DCD aProcNetRoute ; "/proc/net/route"
off_1F1C4 DCD aMetricRefUse ; "Metric Ref    Use"
off_1F1C8 DCD aMssWindowIrtt ; "  MSS Window  irtt"
off_1F1CC DCD aKernelIpRoutin ; "Kernel IP routing table\nDestination   "...
off_1F1D0 DCD asc_66227 ; "%*[^\n]\n"
off_1F1D4 DCD a63sLxLxXDDDLxD ; "%63s%lx%lx%X%d%d%d%lx%d%d%d\n"
off_1F1D8 DCD a1515s1515s16s6 ; "%-15.15s %-15.15s %-16s%-6s"
off_1F1DC DCD aReadError ; "read error"
off_1F1E0 DCD a6d2d7dS+0x11 ; ""
off_1F1E4 DCD unk_642D4
off_1F1E8 DCD a5d5d6dS  ; "%5d %-5d %6d %s\n"
off_1F1EC DCD a6d2d7dS  ; "%-6d %-2d %7d %s\n"



; int __fastcall sub_1F1F0(int, const char **, const char **, char *)
sub_1F1F0

var_C= -0xC
s1= -4

PUSH            {R0-R8,LR}
MOV             R5, R1
LDR             R6, =aNet ; "-net"
MOV             R7, #0x23 ; '#'
LDR             R8, =aHost ; "-host"
STR             R1, [SP,#0x10+var_C]

loc_1F208
LDR             R4, [R5,#4]!
CMP             R4, #0
BNE             loc_1F248
ADD             R2, SP, #0x10+s1
LDR             R1, =aANe ; "A:ne"
LDR             R0, [SP,#0x10+var_C]
BL              sub_593CC
TST             R0, #1
MOV             R4, R0
BEQ             loc_1F278
LDR             R1, =aInet_0 ; "inet"
LDR             R0, [SP,#0x10+s1] ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_1F278

loc_1F244
BL              sub_162F0

loc_1F248               ; s2
MOV             R1, R6
MOV             R0, R4  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_1F270
MOV             R1, R8  ; s2
MOV             R0, R4  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_1F208

loc_1F270
STRB            R7, [R4]
B               loc_1F208

loc_1F278
LDR             R3, =optind
LDR             R2, [R3]
LDR             R3, [SP,#0x10+var_C]
LDR             R5, [R3,R2,LSL#2]
ADD             R1, R3, R2,LSL#2
CMP             R5, #0
STR             R1, [SP,#0x10+var_C]
BNE             loc_1F2B4
TST             R4, #2
MOVW            R0, #0xFFF
AND             R1, R4, #4
MOVEQ           R0, #0
BL              sub_1EFDC
MOV             R0, R5
BL              sub_588D8

loc_1F2B4
ADD             R1, SP, #0x10+var_C
LDR             R0, =byte_66319
BL              sub_1EBB8
CMP             R0, #0
BEQ             loc_1F244
LDR             R1, [SP,#0x10+var_C]
LDR             R3, [R1]
CMP             R3, #0
BEQ             loc_1F244
BL              sub_1EC38
MOV             R0, #0
ADD             SP, SP, #0x10
POP             {R4-R8,PC}
; End of function sub_1F1F0

off_1F2E8 DCD aNet      ; "-net"
off_1F2EC DCD aHost     ; "-host"
off_1F2F0 DCD aANe      ; "A:ne"
off_1F2F4 DCD aInet_0   ; "inet"
off_1F2F8 DCD optind
off_1F2FC DCD byte_66319



; _BYTE **__fastcall sub_1F300(_BYTE **)
sub_1F300
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R6, =aOneline ; "oneline"
LDR             R7, =byte_7D781
LDR             R8, =byte_6632E

loc_1F314
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_1F354
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BNE             loc_1F354
LDRB            R2, [R3,#1]
ADD             R1, R3, #1 ; s
ADD             R5, R4, #4
CMP             R2, #0x2D ; '-'
BNE             loc_1F378
ADD             R1, R3, #2
LDRB            R3, [R3,#2]
CMP             R3, #0
BNE             loc_1F378
MOV             R4, R5

loc_1F354
LDR             R3, =dword_7DBA4
MOV             R0, R4
LDR             R3, [R3]
CMP             R3, #0
LDR             R3, =byte_7DBA8
MOVEQ           R2, #0xA
MOVNE           R2, #0x5C ; '\'
STRB            R2, [R3]
POP             {R4-R8,PC}

loc_1F378               ; int
MOV             R0, R6
BL              sub_168D4
CMP             R0, #0
BGE             loc_1F38C

loc_1F388
BL              sub_162F0

loc_1F38C               ; s2
LDR             R1, [R4,#4]
BNE             loc_1F3A8
LDR             R3, =dword_7DBA4
MOV             R2, #1
STR             R2, [R3]

loc_1F3A0
MOV             R4, R5
B               loc_1F314

loc_1F3A8
CMP             R0, #1
BNE             loc_1F3D4
CMP             R1, #0
BEQ             loc_1F388
LDR             R0, =s1 ; "inet"
BL              sub_16880
CMP             R0, #0
BGE             loc_1F3DC
LDR             R1, =aFamily ; "family"
LDR             R0, [R4,#4]
BL              sub_23EE8

loc_1F3D4
SUB             R0, R0, #2
MOV             R5, R4

loc_1F3DC
LDRB            R3, [R8,R0]
ADD             R5, R5, #4
STRB            R3, [R7]
B               loc_1F3A0
; End of function sub_1F300

; const int off_1F3EC
off_1F3EC DCD aOneline  ; "oneline"
off_1F3F0 DCD byte_7D781
off_1F3F4 DCD byte_6632E
off_1F3F8 DCD dword_7DBA4
off_1F3FC DCD byte_7DBA8
off_1F400 DCD s1        ; "inet"
off_1F404 DCD aFamily   ; "family"



; int __fastcall sub_1F408(int, _DWORD *, _DWORD *)
sub_1F408
PUSH            {R4-R8,LR}
MOV             R8, R0
LDR             R0, [R1]
MOV             R5, R1
MOV             R6, R2
ADD             R0, R0, #4
BL              sub_174DC
LDR             R2, [R5] ; n
MOV             R7, R0
MOV             R1, R5  ; src
ADD             R0, R0, #4 ; dest
BL              memcpy

loc_1F438
LDR             R4, [R6]
CMP             R4, #0
BNE             loc_1F460
STR             R7, [R6]
MOV             R2, R4
MOV             R1, R5
MOV             R0, R8
BL              sub_233E8
MOV             R0, R4
POP             {R4-R8,PC}

loc_1F460
MOV             R6, R4
B               loc_1F438
; End of function sub_1F408




; int sub_1F468()
sub_1F468
PUSH            {R4,LR}
LDR             R4, =buf
LDR             R2, [R4,#(buf.c_cc+0xB - 0x7D790)]
LDR             R1, [R4,#(buf.c_oflag - 0x7D790)]
LDR             R0, [R4,#(buf.c_cflag - 0x7D790)]
BL              sub_22B54
CMP             R0, #0
BGE             loc_1F498
LDR             R0, =aCanTSendFlushR ; "can't send flush request"
BL              sub_16AF4
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_1F498
MOV             R0, #0
STRB            R0, [R4,#(buf.c_cc+0xB - 0x7D790)]
STRB            R0, [R4,#(buf.c_cc+0xC - 0x7D790)]
STRB            R0, [R4,#(buf.c_cc+0xD - 0x7D790)]
STRB            R0, [R4,#(buf.c_cc+0xE - 0x7D790)]
POP             {R4,PC}
; End of function sub_1F468

off_1F4B0 DCD buf
off_1F4B4 DCD aCanTSendFlushR ; "can't send flush request"



; int __fastcall sub_1F4B8(int, int)
sub_1F4B8

var_A8= -0xA8
var_A4= -0xA4
var_A0= -0xA0
var_9C= -0x9C
var_98= -0x98
var_94= -0x94
var_90= -0x90
s= -0x84
dest= -0x80

LDRH            R2, [R1,#4]
PUSH            {R4-R7,LR}
SUB             SP, SP, #0xAC
LDR             R3, [R1]
SUB             R0, R2, #0x14
CMP             R0, #1
BLS             loc_1F4E4

loc_1F4D4
MOV             R6, #0

loc_1F4D8
MOV             R0, R6
ADD             SP, SP, #0xAC
POP             {R4-R7,PC}

loc_1F4E4
SUBS            R3, R3, #0x18
MOV             R4, R1
BPL             loc_1F504
MOV             R1, R3
LDR             R0, =aWrongNlmsgLenD ; "wrong nlmsg len %d"
BL              sub_16DDC

loc_1F4FC
MOV             R6, #0xFFFFFFFF
B               loc_1F4D8

loc_1F504
LDR             R5, =buf
LDR             R1, [R5,#(buf.c_oflag - 0x7D790)]
CMP             R1, #0
CMPNE           R2, #0x14
BNE             loc_1F4D4
ADD             R2, R4, #0x18
MOV             R1, #8
ADD             R0, SP, #0xAC+var_A8
BL              sub_23174
LDR             R3, [SP,#0xAC+var_A0]
CMP             R3, #0
LDR             R3, [SP,#0xAC+var_A4]
STREQ           R3, [SP,#0xAC+var_A0]
CMP             R3, #0
LDREQ           R3, [SP,#0xAC+var_A0]
STREQ           R3, [SP,#0xAC+var_A4]
LDR             R3, [R5,#(buf.c_cc+0x13 - 0x7D790)]
CMP             R3, #0
BEQ             loc_1F55C
LDR             R2, [R4,#0x14]
CMP             R3, R2
BNE             loc_1F4D4

loc_1F55C
LDRB            R2, [R4,#0x13]
LDR             R3, [R5,#(buf.c_lflag - 0x7D790)]
EOR             R3, R3, R2
LDR             R2, [R5,#(buf.c_line - 0x7D790)]
TST             R3, R2
BNE             loc_1F4D4
LDRB            R3, [R4,#0x12]
LDR             R6, [R5,#(buf.c_cc+3 - 0x7D790)]
EOR             R6, R6, R3
LDR             R3, [R5,#(buf.c_cc+7 - 0x7D790)]
ANDS            R6, R6, R3
BNE             loc_1F4D4
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_1F640

loc_1F598
LDRB            R3, [R5,#(dword_7D7CC - 0x7D790)]
CMP             R3, #0
BNE             loc_1F674

loc_1F5A4
LDR             R3, [R5,#(buf.c_oflag - 0x7D790)]
CMP             R3, #0
BEQ             loc_1F6D8
LDR             R3, [R5,#(buf.c_cc+0xB - 0x7D790)]
LDR             R2, [R4]
ADD             R3, R3, #3
BIC             R3, R3, #3
ADD             R3, R3, R2
LDR             R2, [R5,#(buf.c_cc+0xF - 0x7D790)]
CMP             R3, R2
BHI             loc_1F6C8

loc_1F5D0
LDR             R2, [R5,#(buf.c_cc+0xB - 0x7D790)]
MOV             R1, R4  ; src
LDR             R3, [R5,#(buf.c_oflag - 0x7D790)]
ADD             R2, R2, #3
BIC             R2, R2, #3
ADD             R3, R3, R2
LDR             R2, [R4] ; n
MOV             R0, R3  ; dest
BL              memcpy
LDR             R2, =0x10015
STR             R2, [R0,#4]
LDR             R1, [R5,#(buf.c_cflag - 0x7D790)]
LDR             R2, [R1,#0x1C]
ADD             R2, R2, #1
STR             R2, [R1,#0x1C]
STR             R2, [R0,#8]
LDR             R2, [R4]
ADD             R3, R0, R2
LDR             R2, [R5,#(buf.c_oflag - 0x7D790)]
SUB             R3, R3, R2
MOV             R2, #1
STR             R3, [R5,#(buf.c_cc+0xB - 0x7D790)]
MOV             R3, #0
STRB            R2, [R5,#(buf.c_ospeed - 0x7D790)]
STRB            R3, [R5,#(buf.c_ospeed+1 - 0x7D790)]
STRB            R3, [R5,#(buf.c_ospeed+2 - 0x7D790)]
STRB            R3, [R5,#(buf.c_ospeed+3 - 0x7D790)]
B               loc_1F4D8

loc_1F640
LDR             R1, [SP,#0xAC+var_9C]
CMP             R1, #0
ADDNE           R1, R1, #4
BNE             loc_1F65C
LDR             R0, [R4,#0x14]
BL              sub_2350C
MOV             R1, R0  ; name

loc_1F65C               ; flags
MOV             R2, #0
LDR             R0, [R5] ; pattern
BL              fnmatch
CMP             R0, #0
BNE             loc_1F4D4
B               loc_1F598

loc_1F674
LDR             R7, [SP,#0xAC+var_A0]
CMP             R7, #0
BEQ             loc_1F5A4
MOV             R2, #0x14 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xAC+s ; s
BL              memset
LDRB            R3, [R4,#0x10]
MOV             R1, R7
ADD             R0, SP, #0xAC+dest ; dest
STRB            R3, [SP,#0xAC+s]
LDRH            R2, [R1],#4 ; src
SUB             R2, R2, #4 ; n
BL              memcpy
LDRSH           R2, [R5,#(dword_7D7CC+2 - 0x7D790)]
ADD             R0, SP, #0xAC+s
LDR             R1, =dword_7D7CC
BL              sub_23FDC
CMP             R0, #0
BNE             loc_1F4D8
B               loc_1F5A4

loc_1F6C8
BL              sub_1F468
CMP             R0, #0
BNE             loc_1F4FC
B               loc_1F5D0

loc_1F6D8
LDRH            R3, [R4,#4]
CMP             R3, #0x15
BNE             loc_1F6EC
LDR             R0, =aDeleted ; "Deleted "
BL              printf

loc_1F6EC
LDR             R3, [R5,#(buf.c_cc+0x1F - 0x7D790)]
CMP             R3, #0
BEQ             loc_1F714
LDR             R5, [R4,#0x14]
MOV             R0, R5
BL              sub_2350C
MOV             R1, R5
MOV             R2, R0
LDR             R0, =aUS ; "%u: %s"
BL              printf

loc_1F714
LDRB            R1, [R4,#0x10]
CMP             R1, #2
LDREQ           R0, =aInet ; "    inet "
BEQ             loc_1F730
CMP             R1, #0xA
BNE             loc_1F8F8
LDR             R0, =aInet6 ; "    inet6 "

loc_1F730
BL              printf

loc_1F734
LDR             R1, [SP,#0xAC+var_A0]
CMP             R1, #0
BEQ             loc_1F790
ADD             R1, R1, #4
LDRB            R0, [R4,#0x10]
BL              sub_24048
LDR             R3, =stdout
LDR             R1, [R3]
BL              fputs_unlocked
LDR             R5, [SP,#0xAC+var_A4]
CMP             R5, #0
BEQ             loc_1F784
LDR             R1, [SP,#0xAC+var_A0]
MOV             R2, #4  ; n
ADD             R5, R5, #4
MOV             R0, R5  ; s1
ADD             R1, R1, R2 ; s2
BL              memcmp
CMP             R0, #0
BNE             loc_1F904

loc_1F784
LDRB            R1, [R4,#0x11]
LDR             R0, =(a0D+1) ; format
BL              printf

loc_1F790
LDR             R1, [SP,#0xAC+var_98]
CMP             R1, #0
BEQ             loc_1F7B4
ADD             R1, R1, #4
LDRB            R0, [R4,#0x10]
BL              sub_24048
MOV             R1, R0
LDR             R0, =aBrdS ; "brd %s "
BL              printf

loc_1F7B4
LDR             R1, [SP,#0xAC+var_94]
CMP             R1, #0
BEQ             loc_1F7D8
ADD             R1, R1, #4
LDRB            R0, [R4,#0x10]
BL              sub_24048
MOV             R1, R0
LDR             R0, =aAnyS ; "any %s "
BL              printf

loc_1F7D8
LDRB            R0, [R4,#0x13]
BL              sub_23888
MOV             R1, R0
LDR             R0, =aScopeS ; "scope %s "
BL              printf
LDRB            R3, [R4,#0x12]
TST             R3, #1
BEQ             loc_1F808
BIC             R3, R3, #1
LDR             R0, =aSecondary ; "secondary "
STRB            R3, [R4,#0x12]
BL              printf

loc_1F808
LDRB            R3, [R4,#0x12]
TST             R3, #0x40
BEQ             loc_1F824
BIC             R3, R3, #0x40 ; '@'
LDR             R0, =aTentative ; "tentative "
STRB            R3, [R4,#0x12]
BL              printf

loc_1F824
LDRB            R3, [R4,#0x12]
TST             R3, #0x20
BEQ             loc_1F840
BIC             R3, R3, #0x20 ; ' '
LDR             R0, =aDeprecated ; "deprecated "
STRB            R3, [R4,#0x12]
BL              printf

loc_1F840
LDRB            R3, [R4,#0x12]
TST             R3, #0x80
ANDNE           R3, R3, #0x7F
STRBNE          R3, [R4,#0x12]
BNE             loc_1F85C
LDR             R0, =aDynamic ; "dynamic "
BL              printf

loc_1F85C
LDRB            R1, [R4,#0x12]
CMP             R1, #0
BEQ             loc_1F870
LDR             R0, =aFlags02x ; "flags %02x "
BL              printf

loc_1F870
LDR             R0, [SP,#0xAC+var_9C]
CMP             R0, #0
BEQ             loc_1F88C
LDR             R3, =stdout
ADD             R0, R0, #4
LDR             R1, [R3]
BL              fputs_unlocked

loc_1F88C
LDR             R4, [SP,#0xAC+var_90]
CMP             R4, #0
BEQ             loc_1F8EC
LDR             R3, =byte_7DBA8
LDRB            R0, [R3] ; c
BL              j_putchar_unlocked
LDR             R2, [R4,#8]
CMN             R2, #1
BNE             loc_1F924
LDR             R1, =aValidLftForeve ; "valid_lft forever"
ADD             R0, SP, #0xAC+s ; dest
BL              strcpy

loc_1F8BC
LDR             R4, [R4,#4]
ADD             R0, SP, #0xAC+s ; s
BL              strlen
ADD             R3, SP, #0xAC+s
CMN             R4, #1
ADD             R0, R3, R0 ; s
BNE             loc_1F934
LDR             R1, =aPreferredLftFo ; " preferred_lft forever"
BL              strcpy

loc_1F8E0
ADD             R1, SP, #0xAC+s
LDR             R0, =aS_2 ; "       %s"
BL              printf

loc_1F8EC               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
B               loc_1F4D8

loc_1F8F8
LDR             R0, =aFamilyD ; "    family %d "
BL              printf
B               loc_1F734

loc_1F904
MOV             R1, R5
LDRB            R0, [R4,#0x10]
BL              sub_24048
LDRB            R2, [R4,#0x11]
MOV             R1, R0
LDR             R0, =aPeerSD ; " peer %s/%d "
BL              printf
B               loc_1F790

loc_1F924
LDR             R1, =aValidLftDsec ; "valid_lft %dsec"
ADD             R0, SP, #0xAC+s ; s
BL              sprintf
B               loc_1F8BC

loc_1F934
MOV             R2, R4
LDR             R1, =aPreferredLftDs ; " preferred_lft %dsec"
BL              sprintf
B               loc_1F8E0
; End of function sub_1F4B8

off_1F944 DCD aWrongNlmsgLenD ; "wrong nlmsg len %d"
off_1F948 DCD buf
dword_1F94C DCD 0x10015
off_1F950 DCD dword_7D7CC
off_1F954 DCD aDeleted  ; "Deleted "
off_1F958 DCD aUS       ; "%u: %s"
off_1F95C DCD aInet     ; "    inet "
off_1F960 DCD aInet6    ; "    inet6 "
off_1F964 DCD stdout
off_1F968 DCD a0D+1     ; "/%d "
off_1F96C DCD aBrdS     ; "brd %s "
off_1F970 DCD aAnyS     ; "any %s "
off_1F974 DCD aScopeS   ; "scope %s "
off_1F978 DCD aSecondary ; "secondary "
off_1F97C DCD aTentative ; "tentative "
off_1F980 DCD aDeprecated ; "deprecated "
off_1F984 DCD aDynamic  ; "dynamic "
off_1F988 DCD aFlags02x ; "flags %02x "
off_1F98C DCD byte_7DBA8
off_1F990 DCD aValidLftForeve ; "valid_lft forever"
off_1F994 DCD aPreferredLftFo ; " preferred_lft forever"
off_1F998 DCD aS_2      ; "       %s"
off_1F99C DCD aFamilyD  ; "    family %d "
off_1F9A0 DCD aPeerSD   ; " peer %s/%d "
off_1F9A4 DCD aValidLftDsec ; "valid_lft %dsec"
off_1F9A8 DCD aPreferredLftDs ; " preferred_lft %dsec"



; int __fastcall sub_1F9AC(int)
sub_1F9AC

len= -0x110
s= -0x108
var_F8= -0xF8
var_C8= -0xC8
var_C4= -0xC4
var_C0= -0xC0
var_BC= -0xBC
var_B8= -0xB8
var_B4= -0xB4
var_B0= -0xB0
var_A0= -0xA0

LDRH            R2, [R0,#4]
LDR             R3, [R0]
SUB             R2, R2, #0x10
CMP             R2, #1
BLS             loc_1F9C8
MOV             R0, #0
BX              LR

loc_1F9C8
SUBS            R3, R3, #0x20 ; ' '
BMI             loc_1FCE4
PUSH            {R4-R7,LR}
SUB             SP, SP, #0xFC
LDR             R6, =buf
LDR             R2, [R6,#(buf.c_cc+0x13 - 0x7D790)]
CMP             R2, #0
BEQ             loc_1F9F4
LDR             R1, [R0,#0x14]
CMP             R2, R1
BNE             loc_1FCA8

loc_1F9F4
LDR             R2, [R6,#(buf.c_ispeed - 0x7D790)]
CMP             R2, #0
BEQ             loc_1FA0C
LDR             R2, [R0,#0x18]
TST             R2, #1
BEQ             loc_1FCA8

loc_1FA0C
ADD             R2, R0, #0x20 ; ' '
MOV             R1, #0x2B ; '+'
MOV             R4, R0
ADD             R0, SP, #0x110+var_C8
BL              sub_23174
LDR             R1, [SP,#0x110+var_BC]
CMP             R1, #0
BNE             loc_1FA40
LDR             R0, =aNilIfname ; "nil ifname"
BL              sub_16DDC
MOV             R0, #0xFFFFFFFF

loc_1FA38
ADD             SP, SP, #0xFC
POP             {R4-R7,PC}

loc_1FA40               ; pattern
LDR             R0, [R6]
CMP             R0, #0
BNE             loc_1FC84

loc_1FA4C
LDRH            R3, [R4,#4]
CMP             R3, #0x11
BEQ             loc_1FCB0

loc_1FA58
LDR             R2, [SP,#0x110+var_BC]
LDR             R1, [R4,#0x14]
LDR             R0, =aDS ; "%d: %s"
ADD             R2, R2, #4
BL              printf
LDR             R5, [SP,#0x110+var_B4]
CMP             R5, #0
BEQ             loc_1FCBC
LDR             R5, [R5,#4]
CMP             R5, #0
LDREQ           R0, =aNone ; "@NONE: "
BEQ             loc_1FCC0
MOV             R0, R5
BL              sub_2350C
MOV             R1, R0
LDR             R0, =aS_3 ; "@%s: "
BL              printf
MOV             R0, R5
BL              sub_23550
MVN             R5, R0
AND             R5, R5, #1

loc_1FAAC
LDR             R7, [R4,#0x18]
MOV             R0, #0x3C ; '<' ; c
BL              j_putchar_unlocked
AND             R3, R7, #0x41 ; 'A'
CMP             R3, #1
BNE             loc_1FACC
LDR             R0, =aNoCarrier ; "NO-CARRIER,"
BL              printf

loc_1FACC
LDR             R1, =aLoopback ; "LOOPBACK"
BIC             R2, R7, #0x40 ; '@'
LDR             R3, =(aNoCarrier+0xA) ; ","
LDR             R0, =unk_63564 ; int
BL              sub_5E3AC
SUBS            R1, R0, #0
BEQ             loc_1FAF0
LDR             R0, =(aUnrecognizedFi_0+0x21) ; "%x"
BL              printf

loc_1FAF0
CMP             R5, #0
BEQ             loc_1FB00
LDR             R0, =aMDown ; ",M-DOWN"
BL              printf

loc_1FB00               ; format
LDR             R0, =(asc_69C10+2) ; "> "
BL              printf
LDR             R3, [SP,#0x110+var_B8]
CMP             R3, #0
BEQ             loc_1FB20
LDR             R1, [R3,#4]
LDR             R0, =aMtuU ; "mtu %u "
BL              printf

loc_1FB20
LDR             R1, [SP,#0x110+var_B0]
CMP             R1, #0
BEQ             loc_1FB38
ADD             R1, R1, #4
LDR             R0, =aQdiscS ; "qdisc %s "
BL              printf

loc_1FB38
LDR             R3, [SP,#0x110+var_A0]
CMP             R3, #0
BEQ             loc_1FB58
LDR             R0, [R3,#4]
BL              sub_2350C
MOV             R1, R0
LDR             R0, =aMasterS ; "master %s "
BL              printf

loc_1FB58
LDR             R3, [R6,#(buf.c_cc+0x1B - 0x7D790)]
CMP             R3, #0
BEQ             loc_1FBC4
LDR             R7, [SP,#0x110+var_BC]
MOV             R2, #0  ; protocol
MOV             R1, #1  ; type
MOV             R0, #2  ; domain
BL              socket
SUBS            R5, R0, #0
ADD             R7, R7, #4
BLT             loc_1FBC4
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x110+s ; s
BL              memset
MOV             R1, R7
ADD             R0, SP, #0x110+s
BL              sub_16EA8
LDR             R3, =aSiocgiftxqlen ; "SIOCGIFTXQLEN"
ADD             R2, SP, #0x110+s
MOVW            R1, #0x8942
MOV             R0, R5
BL              sub_17AF4
CMP             R0, #0
MOV             R0, R5  ; fd
BGE             loc_1FCC8
BL              close

loc_1FBC4
LDRSB           R3, [R6,#(buf.c_cc+0x17 - 0x7D790)]
CMP             R3, #0x11
CMPNE           R3, #0
BNE             loc_1FC78
LDR             R3, =byte_7DBA8
ADD             R1, SP, #0x110+s
LDRH            R0, [R4,#0x12]
LDRB            R5, [R3]
BL              sub_235C8
MOV             R2, R0
LDR             R0, =aCLinkS ; "%c    link/%s "
MOV             R1, R5
BL              printf
LDR             R0, [SP,#0x110+var_C4]
CMP             R0, #0
BEQ             loc_1FC2C
LDRH            R1, [R0],#4 ; cp
MOV             R3, #0x40 ; '@'
LDRH            R2, [R4,#0x12] ; int
STR             R3, [SP,#0x110+len] ; len
ADD             R3, SP, #0x110+s ; buf
SUB             R1, R1, #4 ; int
BL              sub_231F8
LDR             R3, =stdout
LDR             R1, [R3]
BL              fputs_unlocked

loc_1FC2C
LDR             R3, [SP,#0x110+var_C0]
CMP             R3, #0
BEQ             loc_1FC78
LDR             R3, [R4,#0x18]
TST             R3, #0x10
LDRNE           R0, =aPeer ; " peer "
LDREQ           R0, =aBrd ; " brd "
BL              printf
LDR             R0, [SP,#0x110+var_C0]
MOV             R3, #0x40 ; '@'
LDRH            R2, [R4,#0x12] ; int
LDRH            R1, [R0],#4 ; cp
STR             R3, [SP,#0x110+len] ; len
ADD             R3, SP, #0x110+s ; buf
SUB             R1, R1, #4 ; int
BL              sub_231F8
LDR             R3, =stdout
LDR             R1, [R3]
BL              fputs_unlocked

loc_1FC78               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
B               loc_1FCA8

loc_1FC84
LDRSB           R3, [R6,#(buf.c_cc+0x17 - 0x7D790)]
CMP             R3, #0x11
CMPNE           R3, #0
BNE             loc_1FA4C
MOV             R2, #0  ; flags
ADD             R1, R1, #4 ; name
BL              fnmatch
CMP             R0, #0
BEQ             loc_1FA4C

loc_1FCA8
MOV             R0, #0
B               loc_1FA38

loc_1FCB0
LDR             R0, =aDeleted ; "Deleted "
BL              printf
B               loc_1FA58

loc_1FCBC               ; format
LDR             R0, =(aReverseISearch+0x16) ; ": "

loc_1FCC0
BL              printf
B               loc_1FAAC

loc_1FCC8
BL              close
LDR             R1, [SP,#0x110+var_F8]
CMP             R1, #0
BEQ             loc_1FBC4
LDR             R0, =aQlenD ; "qlen %d"
BL              printf
B               loc_1FBC4

loc_1FCE4
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_1F9AC

off_1FCEC DCD buf
off_1FCF0 DCD aNilIfname ; "nil ifname"
off_1FCF4 DCD aDS       ; "%d: %s"
off_1FCF8 DCD aNone     ; "@NONE: "
off_1FCFC DCD aS_3      ; "@%s: "
off_1FD00 DCD aNoCarrier ; "NO-CARRIER,"
off_1FD04 DCD aLoopback ; "LOOPBACK"
off_1FD08 DCD aNoCarrier+0xA ; ","
; const int off_1FD0C
off_1FD0C DCD unk_63564
off_1FD10 DCD aUnrecognizedFi_0+0x21 ; "%x"
off_1FD14 DCD aMDown    ; ",M-DOWN"
off_1FD18 DCD asc_69C10+2 ; "> "
off_1FD1C DCD aMtuU     ; "mtu %u "
off_1FD20 DCD aQdiscS   ; "qdisc %s "
off_1FD24 DCD aMasterS  ; "master %s "
off_1FD28 DCD aSiocgiftxqlen ; "SIOCGIFTXQLEN"
off_1FD2C DCD byte_7DBA8
off_1FD30 DCD aCLinkS   ; "%c    link/%s "
off_1FD34 DCD stdout
off_1FD38 DCD aPeer     ; " peer "
off_1FD3C DCD aBrd      ; " brd "
off_1FD40 DCD aDeleted  ; "Deleted "
off_1FD44 DCD aReverseISearch+0x16 ; ": "
off_1FD48 DCD aQlenD    ; "qlen %d"



; int __fastcall sub_1FD4C(int, __int16, char **)
sub_1FD4C

n= -0x184
var_178= -0x178
var_174= -0x174
var_170= -0x170
var_168= -0x168
var_160= -0x160
var_15C= -0x15C
var_158= -0x158
var_154= -0x154
var_14C= -0x14C
var_148= -0x148
var_144= -0x144
var_140= -0x140
var_138= -0x138
var_134= -0x134
var_130= -0x130
s= -0x11C
var_118= -0x118
var_116= -0x116
var_10C= -0x10C
var_10B= -0x10B
var_109= -0x109
var_108= -0x108
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x184
STR             R0, [SP,#0x184+var_174]
MOV             R4, R1
MOV             R8, R2
MOV             R1, #0  ; c
MOV             R2, #0x118 ; n
ADD             R0, SP, #0x184+s ; s
BL              memset
MOV             R3, #0x18
MOV             R5, #0
STR             R3, [SP,#0x184+s]
MOV             R6, R5
LDRH            R3, [SP,#0x184+var_174]
MOV             R10, R5
MOV             R7, R5
MOV             R11, R5
MOV             R9, R5
ORR             R4, R4, #1
STRH            R3, [SP,#0x184+var_118]
LDR             R3, =byte_7D781
STRH            R4, [SP,#0x184+var_116]
STR             R5, [SP,#0x184+var_178]
LDRB            R3, [R3]
STRB            R3, [SP,#0x184+var_10C]

loc_1FDB0               ; s2
LDR             R1, [R8]
CMP             R1, #0
BNE             loc_1FDF4
CMP             R9, #0
LDREQ           R0, =aNeedDevIface ; "need \"dev IFACE\""
BEQ             loc_200DC
CMP             R11, #0
BEQ             loc_20058
MOV             R1, R9
MOV             R0, R11
BL              sub_1684C
CMP             R0, #0
BNE             loc_20058
MOV             R2, R11
MOV             R1, R9
LDR             R0, =aDevSMustMatchL ; "\"dev\" (%s) must match \"label\" (%s)"
BL              sub_16DBC

loc_1FDF4
LDR             R0, =aPeer_0 ; "peer"
BL              sub_16880
SUBS            R3, R0, #0
BLT             loc_1FE18
MOV             R0, R8
STR             R3, [SP,#0x184+var_170]
BL              sub_23EC4
LDR             R3, [SP,#0x184+var_170]
MOV             R8, R0

loc_1FE18
CMP             R3, #1
LDR             R4, [R8]
BHI             loc_1FE84
CMP             R10, #0
BEQ             loc_1FE38
LDR             R0, =aPeer_0 ; "peer"
MOV             R1, R4

loc_1FE34
BL              sub_23FAC

loc_1FE38
LDRB            R2, [SP,#0x184+var_10C]
MOV             R1, R4
ADD             R0, SP, #0x184+var_154
BL              sub_23D18
LDRB            R3, [SP,#0x184+var_10C]
MOV             R2, #1  ; int
LDRB            R10, [SP,#0x184+var_154+1]
MOV             R1, #0x118 ; int
ADD             R0, SP, #0x184+s ; int
CMP             R3, #0
LDRBEQ          R3, [SP,#0x184+var_154]
STR             R10, [SP,#0x184+n] ; n
STRBEQ          R3, [SP,#0x184+var_10C]
ADD             R3, SP, #0x184+var_154+4 ; src
BL              sub_230B4
LDRH            R3, [SP,#0x184+var_154+2]
STRB            R3, [SP,#0x184+var_10B]

loc_1FE7C
ADD             R8, R8, #4
B               loc_1FDB0

loc_1FE84
CMP             R3, #3
BHI             loc_1FF18
CMP             R6, #0
MOVNE           R1, R4
LDRNE           R0, =aBroadcast ; "broadcast"
BNE             loc_1FE34
LDRB            R3, [R4]
CMP             R3, #0x2B ; '+'
BNE             loc_1FEFC
LDRB            R3, [R4,#1]
CMP             R3, #0
MOVEQ           R6, #0xFFFFFFFF
BEQ             loc_1FE7C

loc_1FEB8
LDRB            R2, [SP,#0x184+var_10C]
MOV             R1, R4
ADD             R0, SP, #0x184+var_140
BL              sub_23CCC
LDRB            R3, [SP,#0x184+var_10C]
MOV             R2, #4  ; int
MOV             R1, #0x118 ; int
ADD             R0, SP, #0x184+s ; int
CMP             R3, #0
LDRBEQ          R3, [SP,#0x184+var_140]
STRBEQ          R3, [SP,#0x184+var_10C]
LDRB            R3, [SP,#0x184+var_140+1]
STR             R3, [SP,#0x184+n] ; n
ADD             R3, SP, #0x184+var_140+4 ; src
BL              sub_230B4
LDRB            R6, [SP,#0x184+var_140+1]
B               loc_1FE7C

loc_1FEFC
CMP             R3, #0x2D ; '-'
BNE             loc_1FEB8
LDRB            R3, [R4,#1]
CMP             R3, #0
MOVEQ           R6, #0xFFFFFFFE
BEQ             loc_1FE7C
B               loc_1FEB8

loc_1FF18
CMP             R3, #4
BNE             loc_1FF7C
LDR             R3, [SP,#0x184+var_178]
CMP             R3, #0
MOVNE           R1, R4
LDRNE           R0, =aAnycast ; "anycast"
BNE             loc_1FE34
LDRB            R2, [SP,#0x184+var_10C]
MOV             R1, R4
ADD             R0, SP, #0x184+var_140
BL              sub_23CCC
LDRB            R3, [SP,#0x184+var_10C]
MOV             R2, #5  ; int
MOV             R1, #0x118 ; int
ADD             R0, SP, #0x184+s ; int
CMP             R3, #0
LDRBEQ          R3, [SP,#0x184+var_140]
STRBEQ          R3, [SP,#0x184+var_10C]
LDRB            R3, [SP,#0x184+var_140+1]
STR             R3, [SP,#0x184+n] ; n
ADD             R3, SP, #0x184+var_140+4 ; src
BL              sub_230B4
LDRB            R3, [SP,#0x184+var_140+1]
STR             R3, [SP,#0x184+var_178]
B               loc_1FE7C

loc_1FF7C
CMP             R3, #5
BNE             loc_1FFBC
ADD             R0, SP, #0x184+var_4
MOV             R3, #0
STR             R3, [R0,#-0x13C]!
MOV             R1, R4
BL              sub_238C8
CMP             R0, #0
BEQ             loc_1FFAC
LDR             R1, =aScope ; "scope"
LDR             R0, [R8]
BL              sub_23EE8

loc_1FFAC
LDR             R3, [SP,#0x184+var_140]
MOV             R5, #1
STRB            R3, [SP,#0x184+var_109]
B               loc_1FE7C

loc_1FFBC
CMP             R3, #6
BEQ             loc_20050
CMP             R3, #7
BNE             loc_1FFF8
MOV             R0, R4  ; s
MOV             R11, R4
BL              strlen
ADD             R0, R0, #1
MOV             R3, R4  ; src
STR             R0, [SP,#0x184+n] ; n
MOV             R2, #3  ; int
MOV             R1, #0x118 ; int
ADD             R0, SP, #0x184+s ; int
BL              sub_230B4
B               loc_1FE7C

loc_1FFF8
CMP             R7, #0
BEQ             loc_2000C
MOV             R1, R4
LDR             R0, =(a7local+1) ; "local"
BL              sub_23FC4

loc_2000C
LDRB            R2, [SP,#0x184+var_10C]
MOV             R1, R4
ADD             R0, SP, #0x184+var_168
BL              sub_23D18
LDRB            R3, [SP,#0x184+var_10C]
MOV             R2, #2  ; int
MOV             R1, #0x118 ; int
ADD             R0, SP, #0x184+s ; int
CMP             R3, #0
LDRBEQ          R3, [SP,#0x184+var_168]
STRBEQ          R3, [SP,#0x184+var_10C]
LDRB            R3, [SP,#0x184+var_168+1]
STR             R3, [SP,#0x184+n] ; n
ADD             R3, SP, #0x184+var_168+4 ; src
BL              sub_230B4
LDRB            R7, [SP,#0x184+var_168+1]
B               loc_1FE7C

loc_20050
MOV             R9, R4
B               loc_1FE7C

loc_20058
LDR             R3, [SP,#0x184+var_174]
SUBS            R4, R3, #0x15
MOVNE           R4, #1
MOVS            R7, R7
MOVNE           R7, #1
CMP             R10, #0
MOVEQ           R10, R7
MOVNE           R10, #0
TST             R4, R10
BEQ             loc_200B4
ADD             LR, SP, #0x184+var_168
ADD             R12, SP, #0x184+var_154
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
MOV             R2, #1  ; int
LDR             R3, [LR]
MOV             R1, #0x118 ; int
ADD             R0, SP, #0x184+s ; int
STR             R3, [R12]
LDRB            R3, [SP,#0x184+var_168+1]
STR             R3, [SP,#0x184+n] ; n
ADD             R3, SP, #0x184+var_168+4 ; src
BL              sub_230B4

loc_200B4
LDRB            R3, [SP,#0x184+var_10B]
CMP             R3, #0
LDRHEQ          R3, [SP,#0x184+var_168+2]
STRBEQ          R3, [SP,#0x184+var_10B]
ANDS            R7, R4, R6,LSR#31
BEQ             loc_20140
LDRB            R3, [SP,#0x184+var_10C]
CMP             R3, #2
BEQ             loc_200E0
LDR             R0, =aBroadcastCanBe ; "broadcast can be set only for IPv4 addr"...

loc_200DC
BL              sub_16DBC

loc_200E0
ADD             LR, SP, #0x184+var_154
ADD             R12, SP, #0x184+var_140
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDRSH           R0, [SP,#0x184+var_140+2]
LDR             R3, [LR]
CMP             R0, #0x1E
STR             R3, [R12]
BGT             loc_20140
LDR             R2, [SP,#0x184+var_140+4]
MOV             R3, #0
MOV             R1, #0x1F
MOV             R12, #1

loc_20114
CMP             R0, R1
BLE             loc_201BC
CMP             R3, #0
LDRB            R3, [SP,#0x184+var_140+1]
STRNE           R2, [SP,#0x184+var_140+4]
MOV             R1, #0x118 ; int
MOV             R2, #4  ; int
ADD             R0, SP, #0x184+s ; int
STR             R3, [SP,#0x184+n] ; n
ADD             R3, SP, #0x184+var_140+4 ; src
BL              sub_230B4

loc_20140
EOR             R5, R5, #1
TST             R4, R5
BEQ             loc_2017C
LDRB            R3, [SP,#0x184+var_168]
CMP             R3, #2
MOVNE           R3, #0
BNE             loc_20178
LDRB            R3, [SP,#0x184+var_168+1]
CMP             R3, #0
BEQ             loc_20178
LDRB            R3, [SP,#0x184+var_168+4]
CMP             R3, #0x7F
MOVNE           R3, #0
MOVEQ           R3, #0xFE

loc_20178
STRB            R3, [SP,#0x184+var_109]

loc_2017C
ADD             R0, SP, #0x184+var_140
BL              sub_22AF4
ADD             R0, SP, #0x184+var_140
BL              sub_23598
MOV             R0, R9
BL              sub_23574
MOV             R2, #0
STR             R0, [SP,#0x184+var_108]
ADD             R1, SP, #0x184+s
ADD             R0, SP, #0x184+var_140
BL              sub_22DD4
CMP             R0, #0
MOVLT           R0, #2
MOVGE           R0, #0
ADD             SP, SP, #0x184
POP             {R4-R11,PC}

loc_201BC
RSB             R3, R1, #0x1F
CMN             R6, #1
MOV             R3, R12,LSL R3
SUB             R1, R1, #1
REV             R3, R3
ORREQ           R2, R2, R3
BICNE           R2, R2, R3
MOV             R3, R7
B               loc_20114
; End of function sub_1FD4C

off_201E0 DCD byte_7D781
off_201E4 DCD aNeedDevIface ; "need \"dev IFACE\""
off_201E8 DCD aDevSMustMatchL ; "\"dev\" (%s) must match \"label\" (%s)"
off_201EC DCD aPeer_0   ; "peer"
off_201F0 DCD aBroadcast ; "broadcast"
off_201F4 DCD aAnycast  ; "anycast"
off_201F8 DCD aScope    ; "scope"
off_201FC DCD a7local+1 ; "local"
off_20200 DCD aBroadcastCanBe ; "broadcast can be set only for IPv4 addr"...



; int __fastcall sub_20204(char **, speed_t c_ospeed)
sub_20204

var_E4C= -0xE4C
var_E48= -0xE48
var_E44= -0xE44
var_E40= -0xE40
var_E3C= -0xE3C
dest= -0xE38
var_E28= -0xE28
var_E04= -0xE04
var_E00= -0xE00
var_DFC= -0xDFC
var_DF8= -0xDF8
var_C= -0xC

PUSH            {R4-R11,LR}
MOV             R7, #0
LDR             R4, =buf
SUB             SP, SP, #0xE40
SUB             SP, SP, #0xC
MOV             R5, R0
LDR             R9, =dword_7DBA4
MOV             R6, R1
MOV             R2, #0x50 ; 'P' ; n
MOV             R1, R7  ; c
MOV             R0, R4  ; s
STR             R7, [SP,#0xE4C+var_E44]
LDR             R8, [R9]
STR             R7, [SP,#0xE4C+var_E40]
BL              memset
MOV             R3, #1
STR             R8, [R4,#termios.c_cc+0x1F]
STRB            R3, [R4,#termios.c_cc+0x1B]
CMP             R6, R7
LDR             R3, =byte_7D781
STRB            R7, [R4,#termios.c_cc+0x1C]
STRB            R7, [R4,#termios.c_cc+0x1D]
STRB            R7, [R4,#termios.c_cc+0x1E]
LDRB            R3, [R3]
STRB            R3, [R4,#termios.c_cc+0x17]
LDR             R3, [R5]
BEQ             loc_204E8
CMP             R3, R7
BNE             loc_20284
LDR             R1, =aFlush ; "flush"
LDR             R0, =aSRequiresAnArg ; "%s requires an argument"
BL              sub_16DBC

loc_20284
LDRSB           R3, [R4,#termios.c_cc+0x17]
CMP             R3, #0x11
BNE             loc_204E8
LDR             R0, =aCanTFlushLinkA ; "can't flush link addresses"
BL              sub_16DBC

loc_20298               ; s1
MOV             R0, R7
BL              sub_16880
CMP             R0, #0
BNE             loc_203CC
MOV             R0, R5
BL              sub_23EC4
LDRSB           R2, [R4,#termios.c_cc+0x17]
MOV             R5, R0
LDR             R1, [R0]
MOV             R0, R11
BL              sub_23D18
LDRSB           R3, [R4,#termios.c_cc+0x17]
CMP             R3, #0
LDRBEQ          R3, [R4,#(dword_7D7CC - 0x7D790)]
STRBEQ          R3, [R4,#termios.c_cc+0x17]

loc_202D4
ADD             R5, R5, #4

loc_202D8               ; s2
LDR             R1, [R5]
CMP             R1, #0
BNE             loc_20298
ADD             R7, SP, #0xE4C+var_E28
MOV             R0, R7
BL              sub_22AF4
LDR             R3, =byte_7D781
MOV             R2, #0x12
MOV             R0, R7
LDRSB           R1, [R3]
BL              sub_22B8C
ADD             R2, SP, #0xE4C+var_E44
LDR             R1, =sub_1F408
MOV             R0, R7
BL              sub_22BD8
CMP             R8, #0
BEQ             loc_20328
MOV             R0, R8
BL              sub_23574
STR             R0, [R4,#termios.c_cc+0x13]

loc_20328
CMP             R6, #0
LDRSB           R1, [R4,#termios.c_cc+0x17]
BEQ             loc_204FC
ADD             R3, SP, #0xE4C+var_E04
LDR             R8, =sub_1F4B8
STR             R3, [R4,#termios.c_oflag]
MOV             R3, #0
MOV             R5, R3
MOV             R2, #0xE
STRB            R3, [R4,#termios.c_cc+0xB]
STRB            R3, [R4,#termios.c_cc+0xC]
STRB            R3, [R4,#termios.c_cc+0xD]
STRB            R3, [R4,#termios.c_cc+0xE]
STRB            R3, [R4,#termios.c_cc+0xF]
STRB            R2, [R4,#termios.c_cc+0x10]
STRB            R3, [R4,#termios.c_cc+0x11]
STRB            R3, [R4,#termios.c_cc+0x12]
STR             R7, [R4,#termios.c_cflag]

loc_20370
MOV             R2, #0x16
LDRSB           R1, [R4,#termios.c_cc+0x17]
MOV             R0, R7
BL              sub_22B8C
MOV             R2, #0
MOV             R1, R8
MOV             R0, R7
STRB            R5, [R4,#termios.c_ospeed]
STRB            R5, [R4,#termios.c_ospeed+1]
STRB            R5, [R4,#termios.c_ospeed+2]
STRB            R5, [R4,#termios.c_ospeed+3]
BL              sub_22BD8
LDR             R6, [R4,#termios.c_ospeed]
CMP             R6, #0
BEQ             loc_203BC
BL              sub_1F468
CMP             R0, #0
BGE             loc_20370
MOV             R6, #1

loc_203BC
MOV             R0, R6
ADD             SP, SP, #0xE40
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_203CC
CMP             R0, #1
BNE             loc_20474
ADD             R2, SP, #0xE4C+var_C
MOV             R3, #0
ADD             R2, R2, #8
MOV             R0, R5
STR             R3, [R2,#-0xE00]!
STR             R2, [SP,#0xE4C+var_E4C]
STR             R2, [SP,#0xE4C+var_E48]
BL              sub_23EC4
LDR             R2, [SP,#0xE4C+var_E4C]
MOV             R3, #0xFFFFFFFF
STRB            R3, [R4,#termios.c_line]
MOV             R5, R0
STRB            R3, [R4,#termios.c_cc]
STRB            R3, [R4,#termios.c_cc+1]
STRB            R3, [R4,#termios.c_cc+2]
LDR             R1, [R0]
MOV             R0, R2
BL              sub_238C8
CMP             R0, #0
BEQ             loc_20468
LDR             R3, [R5]
MOV             R1, R10 ; s2
MOV             R0, R3  ; s1
STR             R3, [SP,#0xE4C+var_E4C]
BL              strcmp
CMP             R0, #0
LDR             R3, [SP,#0xE4C+var_E4C]
BEQ             loc_20450
LDR             R1, =aScope ; "scope"
MOV             R0, R3
BL              sub_23EE8

loc_20450
MOV             R3, #0xFF
STRB            R0, [R4,#termios.c_line]
STR             R3, [SP,#0xE4C+var_E04]
STRB            R0, [R4,#termios.c_cc]
STRB            R0, [R4,#termios.c_cc+1]
STRB            R0, [R4,#termios.c_cc+2]

loc_20468
LDR             R3, [SP,#0xE4C+var_E04]
STR             R3, [R4,#termios.c_lflag]
B               loc_202D4

loc_20474
CMP             R0, #2
BNE             loc_20498
MOV             R3, #0
MOV             R2, #1
STRB            R2, [R4,#termios.c_ispeed]
STRB            R3, [R4,#termios.c_ispeed+1]
STRB            R3, [R4,#termios.c_ispeed+2]
STRB            R3, [R4,#termios.c_ispeed+3]
B               loc_202D4

loc_20498
CMP             R0, #3
BNE             loc_204B8
MOV             R0, R5
BL              sub_23EC4
LDR             R3, [R0]
MOV             R5, R0
STR             R3, [R4]
B               loc_202D4

loc_204B8
CMP             R0, #4
BNE             loc_204CC
MOV             R0, R5
BL              sub_23EC4
MOV             R5, R0

loc_204CC
CMP             R8, #0
LDR             R1, [R5]
BEQ             loc_204E0
LDR             R0, =(aProcNetDev+0xA) ; "dev"
BL              sub_23FC4

loc_204E0
MOV             R8, R1
B               loc_202D4

loc_204E8
MOV             R8, #0
LDR             R7, =aTo ; "to"
LDR             R10, =(aBufferUTooSmal+0x10) ; "all"
LDR             R11, =dword_7D7CC
B               loc_202D8

loc_204FC
CMP             R1, #0x11
BEQ             loc_20520
MOV             R2, #0x16
MOV             R0, R7
BL              sub_22B8C
ADD             R2, SP, #0xE4C+var_E40
LDR             R1, =sub_1F408
MOV             R0, R7
BL              sub_22BD8

loc_20520
LDRSB           R3, [R4,#termios.c_cc+0x17]
SUBS            R7, R3, #0x11
MOVNE           R7, #1
CMP             R3, #0
MOVEQ           R7, #0
CMP             R7, #0
BEQ             loc_2055C
LDR             R7, [R4,#termios.c_cc+0x1F]
ADD             R8, SP, #0xE4C+var_E44
ADD             R11, SP, #0xE4C+var_E3C
MOVS            R7, R7
MOVNE           R7, #1

loc_20550
LDR             R10, [R8]
CMP             R10, #0
BNE             loc_20584

loc_2055C
LDR             R8, [SP,#0xE4C+var_E44]

loc_20560
CMP             R8, #0
BEQ             loc_203BC
CMP             R7, #0
BEQ             loc_206E0

loc_20570
LDRSB           R3, [R4,#termios.c_cc+0x17]
CMP             R3, #0x11
BNE             loc_20700

loc_2057C
LDR             R8, [R8]
B               loc_20560

loc_20584
LDR             R5, [SP,#0xE4C+var_E40]

loc_20588
CMP             R5, #0
LDREQ           R3, [R10]
STREQ           R3, [R8]
BEQ             loc_20550
LDR             R2, [R5,#0x18]
LDR             R3, [R10,#0x18]
CMP             R2, R3
BNE             loc_206D8
LDRSB           R3, [R4,#termios.c_cc+0x17]
CMP             R3, #0
BEQ             loc_205C0
LDRB            R2, [R5,#0x14]
CMP             R3, R2
BNE             loc_206D8

loc_205C0
LDRB            R2, [R5,#0x17]
LDR             R3, [R4,#termios.c_lflag]
EOR             R3, R3, R2
LDR             R2, [R4,#termios.c_line]
TST             R3, R2
BNE             loc_206D8
LDRB            R2, [R5,#0x16]
LDR             R3, [R4,#termios.c_cc+3]
EOR             R3, R3, R2
LDR             R2, [R4,#termios.c_cc+7]
TST             R3, R2
BNE             loc_206D8
LDRB            R3, [R4,#(dword_7D7CC - 0x7D790)]
CMP             R3, #0
BNE             loc_20608
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_206D0

loc_20608
LDR             R3, [R5,#4]
ADD             R2, R5, #0x1C
MOV             R1, #8
ADD             R0, SP, #0xE4C+var_E04
SUB             R3, R3, #0x18
BL              sub_23174
LDR             R3, [SP,#0xE4C+var_DFC]
CMP             R3, #0
LDREQ           R3, [SP,#0xE4C+var_E00]
STREQ           R3, [SP,#0xE4C+var_DFC]
LDRB            R3, [R4,#(dword_7D7CC - 0x7D790)]
CMP             R3, #0
BEQ             loc_20694
LDR             R3, [SP,#0xE4C+var_DFC]
CMP             R3, #0
BEQ             loc_20694
MOV             R2, #0x14 ; n
MOV             R1, #0  ; c
MOV             R0, R11 ; s
STR             R3, [SP,#0xE4C+var_E4C]
BL              memset
LDR             R3, [SP,#0xE4C+var_E4C]
ADD             R0, SP, #0xE4C+dest ; dest
LDRB            R2, [R5,#0x14]
MOV             R1, R3
STRB            R2, [SP,#0xE4C+var_E3C]
LDRH            R2, [R1],#4 ; src
SUB             R2, R2, #4 ; n
BL              memcpy
LDRSH           R2, [R4,#(dword_7D7CC+2 - 0x7D790)]
MOV             R0, R11
LDR             R1, =dword_7D7CC
BL              sub_23FDC
CMP             R0, #0
BNE             loc_206D8

loc_20694
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_206D0
LDR             R1, [SP,#0xE4C+var_DF8]
CMP             R1, #0
ADDNE           R1, R1, #4
BNE             loc_206BC
LDR             R0, [R5,#0x18]
BL              sub_2350C
MOV             R1, R0  ; name

loc_206BC               ; flags
MOV             R2, #0
LDR             R0, [R4] ; pattern
BL              fnmatch
CMP             R0, #0
BNE             loc_206D8

loc_206D0
MOV             R8, R10
B               loc_20550

loc_206D8
LDR             R5, [R5]
B               loc_20588

loc_206E0
LDR             R3, [R9]
CMP             R3, #0
BNE             loc_20570
ADD             R0, R8, #4
BL              sub_1F9AC
CMP             R0, #0
BEQ             loc_20570
B               loc_2057C

loc_20700
LDR             R10, [R8,#0x18]
LDR             R5, [SP,#0xE4C+var_E40]

loc_20708
CMP             R5, #0
BEQ             loc_2057C
LDRH            R3, [R5,#8]
ADD             R1, R5, #4
CMP             R3, #0x14
BNE             loc_2075C
LDR             R3, [R5,#4]
CMP             R3, #0x13
BLS             loc_2057C
LDR             R3, [R5,#0x18]
CMP             R3, R10
BNE             loc_2075C
LDRSB           R3, [R4,#termios.c_cc+0x17]
CMP             R3, #0
BEQ             loc_20750
LDRB            R2, [R5,#0x14]
CMP             R3, R2
BNE             loc_2075C

loc_20750
MOV             R2, #0
MOV             R0, R2
BL              sub_1F4B8

loc_2075C
LDR             R5, [R5]
B               loc_20708
; End of function sub_20204

off_20764 DCD buf
off_20768 DCD dword_7DBA4
off_2076C DCD byte_7D781
off_20770 DCD aFlush    ; "flush"
off_20774 DCD aSRequiresAnArg ; "%s requires an argument"
off_20778 DCD aCanTFlushLinkA ; "can't flush link addresses"
off_2077C DCD sub_1F408
off_20780 DCD sub_1F4B8
off_20784 DCD aScope    ; "scope"
off_20788 DCD aProcNetDev+0xA ; "dev"
off_2078C DCD aTo       ; "to"
off_20790 DCD aBufferUTooSmal+0x10 ; "all"
off_20794 DCD dword_7D7CC



; int __fastcall sub_20798(char **)
sub_20798
LDR             R1, [R0] ; s
PUSH            {R4,LR}
MOV             R4, R0
CMP             R1, #0
BEQ             loc_2081C
LDR             R0, =aAdd ; "add"
BL              sub_168D4
SUBS            R1, R0, #0
BGE             loc_207CC
LDR             R3, =dword_7DB90
LDR             R0, [R4]
LDR             R1, [R3]
BL              sub_23EE8

loc_207CC
CMP             R1, #4
ADD             R4, R4, #4
BGT             loc_20820
BEQ             loc_20814
CMP             R1, #0
MOV             R0, #0x14
MOVEQ           R1, #0x600
BEQ             loc_20808

loc_207EC
SUB             R3, R1, #1
CMP             R3, #1
MOVLS           R1, #0x100
BLS             loc_20808
CMP             R1, #3
MOVEQ           R1, #0x500
MOVNE           R1, #0

loc_20808
MOV             R2, R4
POP             {R4,LR}
B               sub_1FD4C

loc_20814
MOV             R0, #0x15
B               loc_207EC

loc_2081C
MOV             R1, #2

loc_20820
SUB             R1, R1, #8
MOV             R0, R4
CLZ             R1, R1
POP             {R4,LR}
MOV             R1, R1,LSR#5
B               sub_20204
; End of function sub_20798

; const int off_20838
off_20838 DCD aAdd      ; "add"
off_2083C DCD dword_7DB90



; int sub_20840()
sub_20840
MOV             R1, #2  ; type
PUSH            {R4,LR}
MOV             R2, #0  ; protocol
MOV             R0, R1  ; domain
BL              socket
CMP             R0, #0
POPGE           {R4,PC}
MOV             R2, #0  ; protocol
MOV             R1, #2  ; type
MOV             R0, #0x11 ; domain
BL              socket
CMP             R0, #0
POPGE           {R4,PC}
MOV             R2, #0
MOV             R1, #2
MOV             R0, #0xA
POP             {R4,LR}
B               sub_179A4
; End of function sub_20840




; int __fastcall sub_20888(const char *, int)
sub_20888

n= -0x458
src= -0x44C
var_444= -0x444
s= -0x420
var_410= -0x410
var_40C= -0x40C

PUSH            {R4,LR}
SUB             SP, SP, #0x450
SUB             SP, SP, #8
MOV             R2, #0x420 ; n
MOV             R4, R0
ADD             R0, SP, #0x458+s ; s
STR             R1, [SP,#0x458+src]
MOV             R1, #0  ; c
BL              memset
LDR             R3, =byte_7D781
MOV             R0, #0x20 ; ' '
LDR             R1, =0x10010
LDRB            R3, [R3]
STRD            R0, R1, [SP,#0x458+s]
ADD             R0, SP, #0x458+var_444
STRB            R3, [SP,#0x458+var_410]
BL              sub_22AF4
MOV             R0, R4
BL              sub_23574
MOV             R3, #4
STR             R0, [SP,#0x458+var_40C]
STR             R3, [SP,#0x458+n] ; n
MOV             R2, #0xA ; int
ADD             R3, SP, #0x458+src ; src
MOV             R1, #0x420 ; int
ADD             R0, SP, #0x458+s ; int
BL              sub_230B4
MOV             R2, #0
ADD             R1, SP, #0x458+s
ADD             R0, SP, #0x458+var_444
BL              sub_22DD4
CMP             R0, #0
BGE             loc_20910
BL              sub_16E08

loc_20910
ADD             SP, SP, #0x450
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_20888

off_2091C DCD byte_7D781
dword_20920 DCD 0x10010



; int __fastcall sub_20924(char **, int)
sub_20924

n= -0x484
var_478= -0x478
var_474= -0x474
var_470= -0x470
src= -0x46C
var_46A= -0x46A
var_468= -0x468
var_464= -0x464
var_448= -0x448
s= -0x424
var_414= -0x414
var_410= -0x410

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x480
SUB             SP, SP, #4
MOV             R11, R1
ADD             R6, SP, #0x484+s
MOV             R4, R0
MOV             R2, #0x420 ; n
MOV             R1, #0  ; c
MOV             R0, R6  ; s
LDR             R10, =aLink ; "link"
BL              memset
MOV             R3, #0x20 ; ' '
MOV             R8, #0
STR             R3, [SP,#0x484+s]
MOV             R3, #1
STRH            R3, [R6,#6]
CMP             R11, #0x10
LDR             R3, =byte_7D781
MOV             R5, R8
MOV             R9, R8
STRH            R11, [R6,#4]
STR             R8, [SP,#0x484+var_478]
LDRB            R3, [R3]
STRB            R3, [SP,#0x484+var_414]
MOVWEQ          R3, #0x601
STRHEQ          R3, [R6,#6]

loc_2098C
LDR             R7, [R4]
CMP             R7, #0
BEQ             loc_209BC
MOV             R1, R7  ; s
MOV             R0, R10 ; int
BL              sub_168D4
CMP             R0, #2
BNE             loc_20AAC
MOV             R0, R4
BL              sub_23EC4
LDR             R7, [R0]
ADD             R4, R0, #4

loc_209BC
ADD             R0, SP, #0x484+var_448
BL              sub_22AF4
ADD             R0, SP, #0x484+var_448
BL              sub_23598
CMP             R7, #0
BEQ             loc_20BFC
LDR             R3, [SP,#0x484+s]
MOV             R10, #0
MOV             R2, #0x12 ; int
MOV             R1, #0x420 ; int
STR             R10, [SP,#0x484+n] ; n
MOV             R0, R6  ; int
ADD             R3, R3, #3
BIC             R3, R3, #3
STR             R3, [SP,#0x484+var_474]
MOV             R3, R10 ; src
BL              sub_230B4
MOV             R0, R7  ; s
BL              strlen
MOV             R3, R7  ; src
STR             R0, [SP,#0x484+n] ; n
MOV             R2, #1  ; int
MOV             R1, #0x420 ; int
MOV             R0, R6  ; int
BL              sub_230B4
LDR             R3, [R4]
CMP             R3, R10
BEQ             loc_20BE4
LDR             R3, [SP,#0x484+s]
MOV             R2, #2  ; int
MOV             R1, #0x420 ; int
STR             R10, [SP,#0x484+n] ; n
MOV             R0, R6  ; int
ADD             R3, R3, #3
BIC             R3, R3, #3
STR             R3, [SP,#0x484+var_470]
MOV             R3, R10 ; src
BL              sub_230B4
MOV             R0, R7  ; s1
LDR             R1, =(aTypeVlan+5) ; s2
BL              strcmp
CMP             R0, #0
ADDEQ           R7, SP, #0x484+var_464
STREQ           R0, [SP,#0x484+var_468]
STREQ           R0, [R7],#-4
BEQ             loc_20B98
LDR             R1, =(aTypeVrf+5) ; s2
MOV             R0, R7  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_20BCC
LDR             R7, [R4]
LDR             R1, =(aLinuxImmutable+0xA) ; "table"
MOV             R0, R7  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_20DA0
LDR             R1, =aTypeVrf ; "type vrf"
MOV             R0, R7
B               loc_20B50

loc_20AAC
CMP             R0, #0
BNE             loc_20AD0
MOV             R0, R4
BL              sub_23EC4
LDR             R3, [R0]
MOV             R4, R0
STR             R3, [SP,#0x484+var_478]

loc_20AC8
ADD             R4, R4, #4
B               loc_2098C

loc_20AD0
CMP             R0, #1
BNE             loc_20AEC
MOV             R0, R4
BL              sub_23EC4
MOV             R4, R0
LDR             R9, [R0]
B               loc_20AC8

loc_20AEC
CMP             R0, #4
BNE             loc_20B08
MOV             R0, R4
BL              sub_23EC4
MOV             R4, R0
LDR             R8, [R0]
B               loc_20AC8

loc_20B08
CMP             R0, #3
BNE             loc_20B30
CMP             R5, #0
BEQ             loc_20B24
LDR             R1, =(aProcNetDev+0xA) ; "dev"
LDR             R0, [R4]
BL              sub_23FAC

loc_20B24
MOV             R0, R4
BL              sub_23EC4
MOV             R4, R0

loc_20B30
LDR             R5, [R4]
B               loc_20AC8

loc_20B38
LDR             R0, =aId_0 ; "id"
BL              sub_168D4
SUBS            R10, R0, #0
BGE             loc_20B54
LDR             R1, =aTypeVlan ; "type vlan"
LDR             R0, [R4]

loc_20B50
BL              sub_23EE8

loc_20B54
MOV             R0, R4
BL              sub_23EC4
CMP             R10, #0
MOV             R4, R0
BNE             loc_20C84
LDR             R1, =(aSetgid_0+4) ; "id"
LDR             R0, [R0]
BL              sub_23F4C
MOV             R3, #2
MOV             R2, #1  ; int
STR             R3, [SP,#0x484+n] ; n
ADD             R3, SP, #0x484+src ; src
STRH            R0, [SP,#0x484+src]

loc_20B88               ; int
MOV             R1, #0x420
ADD             R0, SP, #0x484+s ; int
BL              sub_230B4

loc_20B94
ADD             R4, R4, #4

loc_20B98               ; s
LDR             R1, [R4]
CMP             R1, #0
BNE             loc_20B38
LDR             R3, [SP,#0x484+var_464]
CMP             R3, #0
BEQ             loc_20BCC
MOV             R3, #8
MOV             R2, #2  ; int
STR             R3, [SP,#0x484+n] ; n
MOV             R1, #0x420 ; int
MOV             R3, R7  ; src
ADD             R0, SP, #0x484+s ; int

loc_20BC8
BL              sub_230B4

loc_20BCC
LDR             R3, [SP,#0x484+s]
LDR             R2, [SP,#0x484+var_470]
ADD             R3, R3, #3
BIC             R3, R3, #3
SUB             R3, R3, R2
STRH            R3, [R6,R2]

loc_20BE4
LDR             R3, [SP,#0x484+s]
LDR             R2, [SP,#0x484+var_474]
ADD             R3, R3, #3
BIC             R3, R3, #3
SUB             R3, R3, R2
STRH            R3, [R6,R2]

loc_20BFC
CMP             R11, #0x10
BEQ             loc_20DD4
CMP             R5, #0
BEQ             loc_20E50
MOV             R0, R5
MOV             R5, R9
BL              sub_23574
STR             R0, [SP,#0x484+var_410]

loc_20C1C
CMP             R5, #0
BEQ             loc_20C5C
MOV             R0, R5  ; s
BL              strlen
ADD             R3, R0, #1
SUB             R0, R0, #1
CMP             R0, #0xE
LDRHI           R1, =(aSBadVariableNa+0x13) ; "name"
MOVHI           R0, R5
BHI             loc_20B50
STR             R3, [SP,#0x484+n] ; n
MOV             R2, #3  ; int
MOV             R3, R5  ; src
MOV             R1, #0x420 ; int
ADD             R0, SP, #0x484+s ; int
BL              sub_230B4

loc_20C5C
MOV             R2, #0
ADD             R1, SP, #0x484+s
ADD             R0, SP, #0x484+var_448
BL              sub_22DD4
CMP             R0, #0
MOVGE           R0, #0
MOVLT           R0, #2

loc_20C78
ADD             SP, SP, #0x480
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_20C84
CMP             R10, #5
LDR             R1, [R0] ; s2
BNE             loc_20CD4
LDR             R0, =a8021q ; "802.1q"
BL              sub_168D4
CMP             R0, #0
MOVEQ           R3, #0x8100
BEQ             loc_20CB0
CMP             R0, #1
BNE             loc_20CC8
LDR             R3, =0xFFFF88A8

loc_20CB0
STRH            R3, [SP,#0x484+var_46A]
MOV             R3, #2
STR             R3, [SP,#0x484+n]
MOV             R2, #5
ADD             R3, SP, #0x484+var_46A
B               loc_20B88

loc_20CC8
LDR             R1, [R4]
LDR             R0, =aUnknownVlanEnc ; "unknown VLAN encapsulation protocol '%s"...

loc_20CD0
BL              sub_16DBC

loc_20CD4
LDR             R0, =aOn ; "on"
BL              sub_16880
CMP             R0, #0
BGE             loc_20CFC
MOV             R1, R10
LDR             R0, =aId_0 ; "id"
BL              sub_16964
MOV             R1, R0
LDR             R0, =aArgumentOfSMus ; "argument of \"%s\" must be \"on\" or \""...
B               loc_20CD0

loc_20CFC
CMP             R10, #1
LDR             R1, [SP,#0x484+var_464]
LDR             R3, [SP,#0x484+var_468]
BNE             loc_20D30
CMP             R0, #0
BIC             R3, R3, #1
ORR             R1, R1, #1
STR             R3, [SP,#0x484+var_468]
STR             R1, [SP,#0x484+var_464]
ORREQ           R3, R3, #1
BNE             loc_20B94

loc_20D28
STR             R3, [SP,#0x484+var_468]
B               loc_20B94

loc_20D30
CMP             R10, #2
BNE             loc_20D58
CMP             R0, #0
BIC             R3, R3, #2
ORR             R1, R1, #2
STR             R3, [SP,#0x484+var_468]
STR             R1, [SP,#0x484+var_464]
ORREQ           R3, R3, #2
BEQ             loc_20D28
B               loc_20B94

loc_20D58
CMP             R10, #3
BNE             loc_20D80
CMP             R0, #0
BIC             R3, R3, #8
ORR             R1, R1, #8
STR             R3, [SP,#0x484+var_468]
STR             R1, [SP,#0x484+var_464]
ORREQ           R3, R3, #8
BEQ             loc_20D28
B               loc_20B94

loc_20D80
CMP             R0, #0
ORR             R1, R1, #4
BIC             R3, R3, #4
STR             R1, [SP,#0x484+var_464]
STR             R3, [SP,#0x484+var_468]
BNE             loc_20B94
ORR             R3, R3, #4
B               loc_20D28

loc_20DA0
MOV             R0, R4
BL              sub_23EC4
LDR             R1, =(aLinuxImmutable+0xA) ; "table"
LDR             R0, [R0]
BL              sub_23F48
MOV             R3, #4
STR             R0, [SP,#0x484+var_468]
STR             R3, [SP,#0x484+n]
MOV             R2, #1
ADD             R3, SP, #0x484+var_468
MOV             R1, #0x420
MOV             R0, R6
B               loc_20BC8

loc_20DD4
LDR             R3, [SP,#0x484+var_478]
CMP             R9, #0
MOVNE           R5, R9
CMP             R3, #0
BEQ             loc_20E10
MOV             R0, R3
BL              sub_23574
MOV             R3, #4
STR             R0, [SP,#0x484+var_468]
STR             R3, [SP,#0x484+n] ; n
MOV             R2, #5  ; int
ADD             R3, SP, #0x484+var_468 ; src
MOV             R1, #0x420 ; int
ADD             R0, SP, #0x484+s ; int
BL              sub_230B4

loc_20E10
CMP             R8, #0
BEQ             loc_20C1C
MOV             R2, R8  ; s
MOV             R1, #0x20 ; ' ' ; int
ADD             R0, SP, #0x484+var_468 ; int
BL              sub_232C0
CMP             R0, #0
MOVLT           R0, #0xFFFFFFFF
BLT             loc_20C78
STR             R0, [SP,#0x484+n] ; n
ADD             R3, SP, #0x484+var_468 ; src
MOV             R2, #1  ; int
MOV             R1, #0x420 ; int
ADD             R0, SP, #0x484+s ; int
BL              sub_230B4
B               loc_20C1C

loc_20E50
MOV             R0, #1
B               loc_20C78
; End of function sub_20924

off_20E58 DCD aLink     ; "link"
off_20E5C DCD byte_7D781
off_20E60 DCD aTypeVlan+5 ; "vlan"
off_20E64 DCD aTypeVrf+5 ; "vrf"
off_20E68 DCD aLinuxImmutable+0xA ; "table"
off_20E6C DCD aTypeVrf  ; "type vrf"
off_20E70 DCD aProcNetDev+0xA ; "dev"
; const int off_20E74
off_20E74 DCD aId_0     ; "id"
off_20E78 DCD aTypeVlan ; "type vlan"
off_20E7C DCD aSetgid_0+4 ; "id"
off_20E80 DCD aSBadVariableNa+0x13 ; "name"
; const int off_20E84
off_20E84 DCD a8021q    ; "802.1q"
dword_20E88 DCD 0xFFFF88A8
off_20E8C DCD aUnknownVlanEnc ; "unknown VLAN encapsulation protocol '%s"...
off_20E90 DCD aOn       ; "on"
off_20E94 DCD aArgumentOfSMus ; "argument of \"%s\" must be \"on\" or \""...



; int __fastcall sub_20E98(char **)
sub_20E98

var_50= -0x50
var_4C= -0x4C
var_48= -0x48
s= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_24= -0x24
var_14= -0x14

LDR             R2, =byte_7D5F8
MOV             R1, #2
PUSH            {R4-R11,LR}
MOV             R11, R0
SUB             SP, SP, #0x54
STRB            R1, [R2]
LDR             R1, [R0] ; s
CMP             R1, #0
BEQ             loc_20F0C
LDR             R0, =aAdd_0 ; "add"
BL              sub_168D4
CMP             R0, #0
BGE             loc_20EDC
LDR             R2, =dword_7DB90
LDR             R0, [R11]
LDR             R1, [R2]
BL              sub_23EE8

loc_20EDC
CMP             R0, #1
ADD             R11, R11, #4
BGT             loc_20F04
CMP             R0, #0
MOV             R0, R11
MOVEQ           R1, #0x10
MOVNE           R1, #0x11
BL              sub_20924

loc_20EFC
ADD             SP, SP, #0x54 ; 'T'
POP             {R4-R11,PC}

loc_20F04
CMP             R0, #2
BEQ             loc_2111C

loc_20F0C
LDR             R2, =byte_7D781
MOV             R1, #0x11
MOV             R0, R11
STRB            R1, [R2]
MOV             R1, #0
BL              sub_20204
B               loc_20EFC

loc_20F28               ; s
MOV             R1, R8
LDR             R0, =aUp_2 ; "up"
BL              sub_168D4
SUBS            R8, R0, #0
ORREQ           R5, R5, #1
ORREQ           R4, R4, #1
BEQ             loc_20F6C
CMP             R8, #1
ORREQ           R5, R5, #1
BICEQ           R4, R4, #1
BEQ             loc_20F6C
CMP             R8, #2
BNE             loc_20F90
MOV             R0, R11
BL              sub_23EC4
LDR             R7, [R0]
MOV             R11, R0

loc_20F6C
ADD             R11, R11, #4

loc_20F70
LDR             R8, [R11]
CMP             R8, #0
BNE             loc_20F28
CMP             R6, #0
BNE             loc_21140
LDR             R1, =aDev_0 ; "\"dev\""
LDR             R0, =aSRequiresAnArg ; "%s requires an argument"
B               loc_210B0

loc_20F90
CMP             R8, #3
BNE             loc_20FD0
MOV             R0, R11
BL              sub_23EC4
LDR             R3, [SP,#0x54+var_50]
MOV             R11, R0
CMN             R3, #1
BEQ             loc_20FBC
LDR             R1, [R0]
LDR             R0, =aMtu ; "mtu"

loc_20FB8
BL              sub_23FAC

loc_20FBC
LDR             R1, =aMtu ; "mtu"
LDR             R0, [R0]
BL              sub_23F00
STR             R0, [SP,#0x54+var_50]
B               loc_20F6C

loc_20FD0
CMP             R8, #4
BNE             loc_21008
MOV             R0, R11
BL              sub_23EC4
CMN             R10, #1
MOV             R11, R0
LDRNE           R1, [R0]
LDRNE           R0, =aQlen ; "qlen"
BNE             loc_20FB8
LDR             R1, =aQlen ; "qlen"
LDR             R0, [R0]
BL              sub_23F00
MOV             R10, R0
B               loc_20F6C

loc_21008
CMP             R8, #8
BNE             loc_21028
MOV             R0, R11
BL              sub_23EC4
LDR             R3, [R0]
MOV             R11, R0
STR             R3, [SP,#0x54+var_4C]
B               loc_20F6C

loc_21028
CMP             R8, #9
BNE             loc_2104C
MOV             R0, R11
BL              sub_23EC4
MOV             R11, R0
LDR             R0, [R0]
BL              sub_23574
MOV             R9, R0
B               loc_20F6C

loc_2104C
CMP             R8, #0xA
BEQ             loc_2110C
BLS             loc_21080
CMP             R8, #0xB
BNE             loc_2106C
MOV             R0, R11
BL              sub_23EC4
MOV             R11, R0

loc_2106C
CMP             R6, #0
LDR             R1, [R11]
BEQ             loc_21114
LDR             R0, =(aProcNetDev+0xA) ; "dev"
BL              sub_23FC4

loc_21080
MOV             R0, R11
BL              sub_23EC4
LDR             R1, [R0] ; s2
MOV             R11, R0
LDR             R0, =aOn ; "on"
BL              sub_16880
CMP             R8, #5
BNE             loc_210C4
CMP             R0, #0
BGE             loc_210B4
LDR             R1, =aMulticast ; "multicast"

loc_210AC
LDR             R0, =aArgumentOfSMus ; "argument of \"%s\" must be \"on\" or \""...

loc_210B0
BL              sub_16DBC

loc_210B4
ORR             R5, R5, #0x1000
ORREQ           R4, R4, #0x1000
BICNE           R4, R4, #0x1000
B               loc_20F6C

loc_210C4
CMP             R8, #6
BNE             loc_210E8
CMP             R0, #0
LDRLT           R1, =aArp ; "arp"
BLT             loc_210AC
ORR             R5, R5, #0x80
BICEQ           R4, R4, #0x80
ORRNE           R4, R4, #0x80
B               loc_20F6C

loc_210E8
CMP             R8, #7
BNE             loc_20F6C
CMP             R0, #0
LDRLT           R1, =aPromisc ; "promisc"
BLT             loc_210AC
ORR             R5, R5, #0x100
ORREQ           R4, R4, #0x100
BICNE           R4, R4, #0x100
B               loc_20F6C

loc_2110C
MOV             R9, #0
B               loc_20F6C

loc_21114
MOV             R6, R1
B               loc_20F6C

loc_2111C
MOV             R7, #0
MOV             R9, #0xFFFFFFFF
STR             R7, [SP,#0x54+var_4C]
MOV             R10, R9
STR             R9, [SP,#0x54+var_50]
MOV             R4, R7
MOV             R5, R7
MOV             R6, R7
B               loc_20F70

loc_21140
LDR             R3, [SP,#0x54+var_4C]
CMP             R3, #0
BEQ             loc_21254
MOV             R2, R8
MOV             R1, #2
MOV             R0, #0x11
BL              sub_179A4
MOV             R1, R6
MOV             R11, R0
ADD             R0, SP, #0x54+var_24
BL              sub_16EA8
LDR             R3, =aSiocgifindex ; "SIOCGIFINDEX"
ADD             R2, SP, #0x54+var_24
MOVW            R1, #0x8933
MOV             R0, R11
BL              sub_17B18
LDR             R3, [SP,#0x54+var_14]
MOV             R0, R11
MOV             R2, #0x14
ADD             R1, SP, #0x54+s
STR             R8, [SP,#0x54+var_3C]
STR             R3, [SP,#0x54+var_40]
LDR             R3, =0x60000011
STR             R8, [SP,#0x54+var_38]
STR             R8, [SP,#0x54+var_34]
STR             R3, [SP,#0x54+s]
BL              sub_179C0
MOV             R2, #0x14
ADD             R1, SP, #0x54+s
MOV             R0, R11
BL              sub_57A54
MOV             R0, R11 ; fd
BL              close
LDRH            R3, [SP,#0x54+var_3C]
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, R8  ; c
ADD             R0, SP, #0x54+s ; s
LDRB            R11, [SP,#0x54+var_3C+3]
STR             R3, [SP,#0x54+var_48]
BL              memset
MOV             R1, R6
ADD             R0, SP, #0x54+s
BL              sub_16EA8
LDR             R3, [SP,#0x54+var_48]
ADD             R0, SP, #0x54+var_34+2 ; int
LDR             R2, [SP,#0x54+var_4C] ; s
CMP             R3, #1
STRH            R3, [SP,#0x54+var_34]
MOVNE           R1, #0x13
MOVEQ           R1, #0xE ; int
BL              sub_232C0
CMP             R0, #0
BGE             loc_2121C
MOV             R0, #1  ; status
BL              exit

loc_2121C
CMP             R0, R11
BEQ             loc_21234
MOV             R2, R11
LDR             R1, [SP,#0x54+var_4C]
LDR             R0, =aWrongAddressSL ; "wrong address (%s) length: expected %d "...
BL              sub_16DBC

loc_21234
BL              sub_20840
LDR             R3, =aSiocsifhwaddr ; "SIOCSIFHWADDR"
MOV             R8, R0
ADD             R2, SP, #0x54+s
MOVW            R1, #0x8924
BL              sub_17B18
MOV             R0, R8  ; fd
BL              close

loc_21254
CMP             R7, #0
BEQ             loc_212AC
MOV             R1, R7  ; s2
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_212AC
MOV             R1, R6
ADD             R0, SP, #0x54+var_24
BL              sub_16EA8
MOV             R1, R7
ADD             R0, SP, #0x54+var_14
BL              sub_16EA8
BL              sub_20840
LDR             R3, =aSiocsifname ; "SIOCSIFNAME"
MOV             R6, R0
ADD             R2, SP, #0x54+var_24
MOVW            R1, #0x8923
BL              sub_17B18
MOV             R0, R6  ; fd
MOV             R6, R7
BL              close

loc_212AC
CMN             R10, #1
BEQ             loc_212F8
BL              sub_20840
MOV             R2, #0x20 ; ' ' ; n
MOV             R7, R0
MOV             R1, #0  ; c
ADD             R0, SP, #0x54+var_24 ; s
BL              memset
MOV             R1, R6
ADD             R0, SP, #0x54+var_24
BL              sub_16EA8
LDR             R3, =aSiocsiftxqlen ; "SIOCSIFTXQLEN"
ADD             R2, SP, #0x54+var_24
MOVW            R1, #0x8943
MOV             R0, R7
STR             R10, [SP,#0x54+var_14]
BL              sub_17B18
MOV             R0, R7  ; fd
BL              close

loc_212F8
LDR             R3, [SP,#0x54+var_50]
CMN             R3, #1
BEQ             loc_2134C
BL              sub_20840
MOV             R2, #0x20 ; ' ' ; n
MOV             R7, R0
MOV             R1, #0  ; c
ADD             R0, SP, #0x54+var_24 ; s
BL              memset
MOV             R1, R6
ADD             R0, SP, #0x54+var_24
BL              sub_16EA8
LDR             R3, [SP,#0x54+var_50]
ADD             R2, SP, #0x54+var_24
MOVW            R1, #0x8922
MOV             R0, R7
STR             R3, [SP,#0x54+var_14]
LDR             R3, =aSiocsifmtu ; "SIOCSIFMTU"
BL              sub_17B18
MOV             R0, R7  ; fd
BL              close

loc_2134C
CMN             R9, #1
BEQ             loc_21360
MOV             R1, R9
MOV             R0, R6
BL              sub_20888

loc_21360
CMP             R5, #0
BEQ             loc_213CC
MOV             R1, R6
ADD             R0, SP, #0x54+var_24
BL              sub_16EA8
BL              sub_20840
LDR             R3, =aSiocgifflags ; "SIOCGIFFLAGS"
ADD             R2, SP, #0x54+var_24
MOVW            R1, #0x8913
MOV             R6, R0
BL              sub_17B18
LDRSH           R3, [SP,#0x54+var_14]
EOR             R2, R3, R4
TST             R2, R5
BEQ             loc_213C4
UXTH            R3, R3
ADD             R2, SP, #0x54+var_24
MOVW            R1, #0x8914
EOR             R4, R4, R3
MOV             R0, R6
AND             R5, R5, R4
EOR             R5, R5, R3
LDR             R3, =aSiocsifflags ; "SIOCSIFFLAGS"
STRH            R5, [SP,#0x54+var_14]
BL              sub_17B18

loc_213C4               ; fd
MOV             R0, R6
BL              close

loc_213CC
MOV             R0, #0
B               loc_20EFC
; End of function sub_20E98

off_213D4 DCD byte_7D5F8
; const int off_213D8
off_213D8 DCD aAdd_0    ; "add"
off_213DC DCD dword_7DB90
off_213E0 DCD byte_7D781
; const int off_213E4
off_213E4 DCD aUp_2     ; "up"
off_213E8 DCD aDev_0    ; "\"dev\""
off_213EC DCD aSRequiresAnArg ; "%s requires an argument"
off_213F0 DCD aMtu      ; "mtu"
off_213F4 DCD aQlen     ; "qlen"
off_213F8 DCD aProcNetDev+0xA ; "dev"
off_213FC DCD aOn       ; "on"
off_21400 DCD aMulticast ; "multicast"
off_21404 DCD aArgumentOfSMus ; "argument of \"%s\" must be \"on\" or \""...
off_21408 DCD aArp      ; "arp"
off_2140C DCD aPromisc  ; "promisc"
off_21410 DCD aSiocgifindex ; "SIOCGIFINDEX"
dword_21414 DCD 0x60000011
off_21418 DCD aWrongAddressSL ; "wrong address (%s) length: expected %d "...
off_2141C DCD aSiocsifhwaddr ; "SIOCSIFHWADDR"
off_21420 DCD aSiocsifname ; "SIOCSIFNAME"
off_21424 DCD aSiocsiftxqlen ; "SIOCSIFTXQLEN"
off_21428 DCD aSiocsifmtu ; "SIOCSIFMTU"
off_2142C DCD aSiocgifflags ; "SIOCGIFFLAGS"
off_21430 DCD aSiocsifflags ; "SIOCSIFFLAGS"



; _BYTE *sub_21434()
sub_21434
LDR             R3, =buf
MOV             R2, #0x8C ; n
PUSH            {R4,LR}
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
MOV             R2, #0xFFFFFFFF
STRB            R2, [R0,#0x52]
STRB            R2, [R0,#0x53]
STRB            R2, [R0,#0x7A]
STRB            R2, [R0,#0x7B]
POP             {R4,PC}
; End of function sub_21434

off_21464 DCD buf



; int sub_21468()
sub_21468
PUSH            {R4,LR}
LDR             R4, =buf
LDR             R2, [R4,#(buf.c_lflag - 0x7D790)]
LDR             R1, [R4,#(buf.c_cflag - 0x7D790)]
LDR             R0, [R4,#(buf.c_cc+3 - 0x7D790)]
BL              sub_22B54
CMP             R0, #0
BGE             loc_21498
LDR             R0, =aCanTSendFlushR ; "can't send flush request"
BL              sub_16AF4
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_21498
MOV             R0, #0
STRB            R0, [R4,#(buf.c_lflag - 0x7D790)]
STRB            R0, [R4,#(buf.c_lflag+1 - 0x7D790)]
STRB            R0, [R4,#(buf.c_lflag+2 - 0x7D790)]
STRB            R0, [R4,#(buf.c_lflag+3 - 0x7D790)]
POP             {R4,PC}
; End of function sub_21468

off_214B0 DCD buf
off_214B4 DCD aCanTSendFlushR ; "can't send flush request"



; int __fastcall sub_214B8(int, int *)
sub_214B8

var_98= -0x98
var_90= -0x90
var_8F= -0x8F
var_8E= -0x8E
var_8C= -0x8C
s= -0x7C
var_7B= -0x7B
var_7A= -0x7A
dest= -0x78
var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_38= -0x38
var_2C= -0x2C

LDRH            R3, [R1,#4]
PUSH            {R4-R8,LR}
MOV             R4, R1
LDR             R2, [R1]
SUB             SP, SP, #0x98
SUB             R1, R3, #0x18
CMP             R1, #1
BLS             loc_214FC
LDRH            R1, [R4,#6]
LDR             R0, =stderr
STR             R1, [SP,#0x98+var_98]
LDR             R1, =aNotARoute08x08 ; "Not a route: %08x %08x %08x\n"
LDR             R0, [R0] ; stream
BL              fprintf

loc_214F0
MOV             R0, #0
ADD             SP, SP, #0x98
POP             {R4-R8,PC}

loc_214FC
LDR             R5, =buf
LDR             R1, [R5,#(buf.c_cflag - 0x7D790)]
CMP             R1, #0
CMPNE           R3, #0x18
BNE             loc_214F0
SUBS            R3, R2, #0x1C
BPL             loc_21524
MOV             R1, R3
LDR             R0, =aWrongNlmsgLenD ; "wrong nlmsg len %d"
BL              sub_16DBC

loc_21524
ADD             R2, R4, #0x1C
MOV             R1, #0x19
ADD             R0, SP, #0x98+var_68
BL              sub_23174
LDR             R3, [SP,#0x98+var_2C]
LDRB            R7, [R4,#0x10]
CMP             R3, #0
LDRNE           R2, [R3,#4]
LDRBEQ          R2, [R4,#0x14]
CMP             R7, #0xA
LDR             R3, [R5]
BEQ             loc_21B64
CMP             R7, #2
MOVEQ           R6, #0x20 ; ' '
MOVNE           R6, #0xFFFFFFFF
CMP             R3, #0
BGT             loc_2177C

loc_21568
LDRB            R2, [R4,#0x16]
LDR             R3, [R5,#(buf.c_cc+7 - 0x7D790)]
EOR             R3, R3, R2
LDR             R2, [R5,#(buf.c_cc+0xB - 0x7D790)]
TST             R3, R2
BNE             loc_214F0
LDRB            R8, [R5,#(dword_7D7CC - 0x7D790)]
CMP             R8, #0
BEQ             loc_215A4
CMP             R7, R8
BNE             loc_214F0
LDRSH           R2, [R5,#(dword_7D7CC+2 - 0x7D790)]
LDRB            R3, [R4,#0x11]
CMP             R2, R3
BGT             loc_214F0

loc_215A4
LDRB            R3, [R5,#(dword_7D7E0 - 0x7D790)]
CMP             R3, #0
BEQ             loc_215D0
CMP             R7, R3
BNE             loc_214F0
LDRSH           R3, [R5,#(dword_7D7E0+2 - 0x7D790)]
CMP             R3, #0
BLT             loc_215D0
LDRB            R2, [R4,#0x11]
CMP             R3, R2
BLT             loc_214F0

loc_215D0
LDRB            R3, [R5,#(byte_7D7F4 - 0x7D790)]
CMP             R3, #0
BEQ             loc_215F4
CMP             R7, R3
BNE             loc_214F0
LDRSH           R2, [R5,#(word_7D7F6 - 0x7D790)]
LDRB            R3, [R4,#0x12]
CMP             R2, R3
BGT             loc_214F0

loc_215F4
LDRB            R3, [R5,#(dword_7D808 - 0x7D790)]
CMP             R3, #0
BEQ             loc_21620
CMP             R7, R3
BNE             loc_214F0
LDRSH           R3, [R5,#(dword_7D808+2 - 0x7D790)]
CMP             R3, #0
BLT             loc_21620
LDRB            R2, [R4,#0x12]
CMP             R3, R2
BLT             loc_214F0

loc_21620               ; n
MOV             R2, #0x14
MOV             R1, #0  ; c
ADD             R0, SP, #0x98+s ; s
BL              memset
MOV             R1, #0  ; c
MOV             R2, #0x14 ; n
ADD             R0, SP, #0x98+var_90 ; s
BL              memset
LDR             R1, [SP,#0x98+var_60]
CMP             R1, #0
BEQ             loc_21670
LDRB            R3, [R4,#0x12]
CMP             R7, #0xA
MOVNE           R2, #4
MOVEQ           R2, #0x10 ; n
ADD             R1, R1, #4 ; src
ADD             R0, SP, #0x98+dest ; dest
STRH            R3, [SP,#0x98+var_7A]
STRB            R2, [SP,#0x98+var_7B]
BL              memcpy

loc_21670
LDR             R1, [SP,#0x98+var_64]
CMP             R1, #0
BEQ             loc_216A0
LDRB            R3, [R4,#0x11]
CMP             R7, #0xA
MOVNE           R2, #4
MOVEQ           R2, #0x10 ; n
ADD             R1, R1, #4 ; src
ADD             R0, SP, #0x98+var_8C ; dest
STRH            R3, [SP,#0x98+var_8E]
STRB            R2, [SP,#0x98+var_8F]
BL              memcpy

loc_216A0
CMP             R8, #0
BNE             loc_21788

loc_216A8
LDRB            R3, [R5,#(dword_7D7E0 - 0x7D790)]
CMP             R3, #0
BNE             loc_217A4

loc_216B4
LDRB            R3, [R5,#(byte_7D7F4 - 0x7D790)]
CMP             R3, #0
BNE             loc_217CC

loc_216C0
LDRB            R3, [R5,#(dword_7D808 - 0x7D790)]
CMP             R3, #0
BNE             loc_217E8

loc_216CC
LDR             R3, [R5,#(buf.c_cc+0x13 - 0x7D790)]
CMP             R3, #0
BNE             loc_21810

loc_216D8
LDR             R3, [R5,#(buf.c_cflag - 0x7D790)]
CMP             R3, #0
BEQ             loc_2189C
LDRH            R3, [R4,#0x10]
CMP             R3, #0xA
BNE             loc_21714
LDRB            R3, [R4,#0x17]
CMP             R3, #7
BNE             loc_21714
LDR             R3, [SP,#0x98+var_50]
CMP             R3, #0
BEQ             loc_21714
LDR             R3, [R3,#4]
CMN             R3, #1
BEQ             loc_214F0

loc_21714
LDR             R3, [R5,#(buf.c_lflag - 0x7D790)]
LDR             R2, [R4]
ADD             R3, R3, #3
BIC             R3, R3, #3
ADD             R3, R3, R2
LDR             R2, [R5,#(buf.c_line - 0x7D790)]
CMP             R3, R2
BLS             loc_2182C
BL              sub_21468
CMP             R0, #0
BEQ             loc_2182C
BL              sub_16E08

loc_21744
CMP             R2, #0
BNE             loc_214F0
CMP             R3, #0xFF
BNE             loc_21768
LDRB            R3, [R4,#0x17]
CMP             R3, #2
BNE             loc_214F0

loc_21760
MOV             R6, #0x80
B               loc_21568

loc_21768
CMP             R3, #0xFE
BNE             loc_214F0
LDRB            R3, [R4,#0x17]
CMP             R3, #2
B               loc_21B7C

loc_2177C
CMP             R3, R2
BNE             loc_214F0
B               loc_21568

loc_21788
LDRSH           R2, [R5,#(dword_7D7CC+2 - 0x7D790)]
ADD             R0, SP, #0x98+var_90
LDR             R1, =dword_7D7CC
BL              sub_23FDC
CMP             R0, #0
BNE             loc_214F0
B               loc_216A8

loc_217A4
LDRSH           R3, [R5,#(dword_7D7E0+2 - 0x7D790)]
CMP             R3, #0
BLT             loc_216B4
LDRB            R2, [R4,#0x11]
ADD             R0, SP, #0x98+var_90
LDR             R1, =dword_7D7E0
BL              sub_23FDC
CMP             R0, #0
BNE             loc_214F0
B               loc_216B4

loc_217CC
LDRSH           R2, [R5,#(word_7D7F6 - 0x7D790)]
ADD             R0, SP, #0x98+s
LDR             R1, =byte_7D7F4
BL              sub_23FDC
CMP             R0, #0
BNE             loc_214F0
B               loc_216C0

loc_217E8
LDRSH           R3, [R5,#(dword_7D808+2 - 0x7D790)]
CMP             R3, #0
BLT             loc_216CC
LDRB            R2, [R4,#0x12]
ADD             R0, SP, #0x98+s
LDR             R1, =dword_7D808
BL              sub_23FDC
CMP             R0, #0
BNE             loc_214F0
B               loc_216CC

loc_21810
LDR             R2, [SP,#0x98+var_58]
CMP             R2, #0
BEQ             loc_214F0
LDR             R2, [R2,#4]
CMP             R3, R2
BNE             loc_214F0
B               loc_216D8

loc_2182C
LDR             R2, [R5,#(buf.c_lflag - 0x7D790)]
MOV             R1, R4  ; src
LDR             R3, [R5,#(buf.c_cflag - 0x7D790)]
ADD             R2, R2, #3
BIC             R2, R2, #3
ADD             R3, R3, R2
LDR             R2, [R4] ; n
MOV             R0, R3  ; dest
BL              memcpy
LDR             R2, =0x10019
STR             R2, [R0,#4]
LDR             R1, [R5,#(buf.c_cc+3 - 0x7D790)]
LDR             R2, [R1,#0x1C]
ADD             R2, R2, #1
STR             R2, [R1,#0x1C]
STR             R2, [R0,#8]
LDR             R2, [R4]
ADD             R3, R0, R2
LDR             R2, [R5,#(buf.c_cflag - 0x7D790)]
SUB             R3, R3, R2
MOV             R2, #1
STR             R3, [R5,#(buf.c_lflag - 0x7D790)]
MOV             R3, #0
STRB            R2, [R5,#(buf.c_oflag - 0x7D790)]
STRB            R3, [R5,#(buf.c_oflag+1 - 0x7D790)]
STRB            R3, [R5,#(buf.c_oflag+2 - 0x7D790)]
STRB            R3, [R5,#(buf.c_oflag+3 - 0x7D790)]
B               loc_214F0

loc_2189C
LDRH            R3, [R4,#4]
CMP             R3, #0x19
BNE             loc_218B0
LDR             R0, =aDeleted ; "Deleted "
BL              printf

loc_218B0
LDRB            R0, [R4,#0x17]
CMP             R0, #1
BEQ             loc_218CC
BL              sub_238F8
MOV             R1, R0
LDR             R0, =(aViaS+4) ; format
BL              printf

loc_218CC
LDR             R3, [SP,#0x98+var_64]
LDRB            R2, [R4,#0x11]
CMP             R3, #0
BEQ             loc_21AE4
CMP             R2, R6
LDRB            R0, [R4,#0x10]
ADD             R1, R3, #4
BEQ             loc_21AD0
BL              sub_24048
LDRB            R2, [R4,#0x11]
MOV             R1, R0
LDR             R0, =(aFromSU+5) ; format
BL              printf

loc_21900
LDR             R3, [SP,#0x98+var_60]
LDRB            R2, [R4,#0x12]
CMP             R3, #0
BEQ             loc_21B14
CMP             R2, R6
LDRB            R0, [R4,#0x10]
ADD             R1, R3, #4
BEQ             loc_21B00
BL              sub_24048
LDRB            R2, [R4,#0x12]
MOV             R1, R0
LDR             R0, =aFromSU ; "from %s/%u "
BL              printf

loc_21934
LDR             R1, [SP,#0x98+var_54]
CMP             R1, #0
BEQ             loc_21964
LDRSH           R3, [R5,#(buf.c_cc+0x19 - 0x7D790)]
CMP             R3, R6
BEQ             loc_21964
ADD             R1, R1, #4
LDRB            R0, [R4,#0x10]
BL              sub_24048
MOV             R1, R0
LDR             R0, =aViaS ; "via %s "
BL              printf

loc_21964
LDR             R3, [SP,#0x98+var_58]
CMP             R3, #0
BEQ             loc_21984
LDR             R0, [R3,#4]
BL              sub_2350C
MOV             R1, R0
LDR             R0, =aDevS ; "dev %s "
BL              printf

loc_21984
LDR             R3, [R4,#0x18]
TST             R3, #0x200
BNE             loc_219B8
LDRB            R0, [R4,#0x16]
CMP             R0, #0
BEQ             loc_219B8
LDR             R3, [R5,#(buf.c_cc+0xB - 0x7D790)]
CMN             R3, #1
BEQ             loc_219B8
BL              sub_23888
MOV             R1, R0
LDR             R0, =aScopeS ; "scope %s "
BL              printf

loc_219B8
LDR             R1, [SP,#0x98+var_4C]
CMP             R6, #0
CMPNE           R1, #0
BEQ             loc_219E0
ADD             R1, R1, #4
LDRB            R0, [R4,#0x10]
BL              sub_24048
MOV             R1, R0
LDR             R0, =aSrcS ; " src %s "
BL              printf

loc_219E0
LDR             R3, [SP,#0x98+var_50]
CMP             R3, #0
BEQ             loc_219F8
LDR             R1, [R3,#4]
LDR             R0, =aMetricD ; " metric %d "
BL              printf

loc_219F8
LDR             R3, [R4,#0x18]
TST             R3, #1
BEQ             loc_21A0C
LDR             R0, =aDead ; "dead "
BL              printf

loc_21A0C
LDR             R3, [R4,#0x18]
TST             R3, #4
BEQ             loc_21A20
LDR             R0, =aOnlink ; "onlink "
BL              printf

loc_21A20
LDR             R3, [R4,#0x18]
TST             R3, #2
BEQ             loc_21A34
LDR             R0, =aPervasive ; "pervasive "
BL              printf

loc_21A34
LDR             R3, [R4,#0x18]
TST             R3, #0x100
BEQ             loc_21A48
LDR             R0, =aNotify ; "notify "
BL              printf

loc_21A48
LDRB            R3, [R4,#0x10]
CMP             R3, #0xA
BNE             loc_21A94
LDR             R5, [SP,#0x98+var_38]
LDR             R3, [R4,#0x18]
CMP             R5, #0
ADDNE           R5, R5, #4
TST             R3, #0x200
BNE             loc_21B28
CMP             R5, #0
BEQ             loc_21A94
LDR             R3, [R5,#8]
CMP             R3, #0
BNE             loc_21B38

loc_21A80
LDR             R1, [R5,#0xC]
CMP             R1, #0
BEQ             loc_21A94
LDR             R0, =(aBunzipErrorD+6) ; " error %d"
BL              printf

loc_21A94
LDR             R3, [SP,#0x98+var_5C]
CMP             R3, #0
BEQ             loc_21AC4
LDR             R2, =buf
LDR             R2, [R2,#(buf.c_cc+0xF - 0x7D790)]
CMP             R2, #0
BNE             loc_21AC4
LDR             R0, [R3,#4]
BL              sub_2350C
MOV             R1, R0
LDR             R0, =aIifS ; " iif %s"
BL              printf

loc_21AC4               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
B               loc_214F0

loc_21AD0
BL              sub_24048
MOV             R1, R0
LDR             R0, =(aViaS+4) ; format

loc_21ADC
BL              printf
B               loc_21900

loc_21AE4
CMP             R2, #0
MOVNE           R1, R2
LDRNE           R0, =a0D ; "0/%d "
BNE             loc_21ADC
LDR             R0, =aDefault_0 ; "default "
BL              printf
B               loc_21900

loc_21B00
BL              sub_24048
MOV             R1, R0
LDR             R0, =aFromS ; "from %s "

loc_21B0C
BL              printf
B               loc_21934

loc_21B14
CMP             R2, #0
BEQ             loc_21934
MOV             R1, R2
LDR             R0, =aFrom0U ; "from 0/%u "
B               loc_21B0C

loc_21B28
LDR             R3, =byte_7DBA8
LDR             R0, =aCCache ; "%c    cache "
LDRB            R1, [R3]
BL              printf

loc_21B38
LDR             R4, [R5,#8]
CMP             R4, #0
BEQ             loc_21A80
BL              sub_23ADC
MOV             R1, R0
MOV             R0, R4
BLX             sub_15CA0
MOV             R1, R0
LDR             R0, =aExpiresDsec ; " expires %dsec"
BL              printf
B               loc_21A80

loc_21B64
CMP             R3, #0
BEQ             loc_21760
LDR             R2, [R4,#0x18]
AND             R2, R2, #0x200
BGE             loc_21744
CMP             R2, #0

loc_21B7C
BEQ             loc_214F0
B               loc_21760
; End of function sub_214B8

off_21B84 DCD stderr
off_21B88 DCD aNotARoute08x08 ; "Not a route: %08x %08x %08x\n"
off_21B8C DCD buf
off_21B90 DCD aWrongNlmsgLenD ; "wrong nlmsg len %d"
off_21B94 DCD dword_7D7CC
off_21B98 DCD dword_7D7E0
off_21B9C DCD byte_7D7F4
off_21BA0 DCD dword_7D808
dword_21BA4 DCD 0x10019
off_21BA8 DCD aDeleted  ; "Deleted "
off_21BAC DCD aViaS+4   ; "%s "
off_21BB0 DCD aFromSU+5 ; "%s/%u "
off_21BB4 DCD aFromSU   ; "from %s/%u "
off_21BB8 DCD aViaS     ; "via %s "
off_21BBC DCD aDevS     ; "dev %s "
off_21BC0 DCD aScopeS   ; "scope %s "
off_21BC4 DCD aSrcS     ; " src %s "
off_21BC8 DCD aMetricD  ; " metric %d "
off_21BCC DCD aDead     ; "dead "
off_21BD0 DCD aOnlink   ; "onlink "
off_21BD4 DCD aPervasive ; "pervasive "
off_21BD8 DCD aNotify   ; "notify "
off_21BDC DCD aBunzipErrorD+6 ; " error %d"
off_21BE0 DCD aIifS     ; " iif %s"
off_21BE4 DCD a0D       ; "0/%d "
off_21BE8 DCD aDefault_0 ; "default "
off_21BEC DCD aFromS    ; "from %s "
off_21BF0 DCD aFrom0U   ; "from 0/%u "
off_21BF4 DCD byte_7DBA8
off_21BF8 DCD aCCache   ; "%c    cache "
off_21BFC DCD aExpiresDsec ; " expires %dsec"



; int __fastcall sub_21C00(const char **)
sub_21C00

n= -0x4B4
var_4AC= -0x4AC
var_488= -0x488
src= -0x487
var_480= -0x480
var_47C= -0x47C
var_478= -0x478
var_474= -0x474
var_46C= -0x46C
s= -0x420
var_41C= -0x41C
var_410= -0x410
var_40F= -0x40F
var_40E= -0x40E
var_408= -0x408
var_404= -0x404

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x4B0
SUB             SP, SP, #4
MOV             R1, #0  ; c
MOVW            R2, #0x41C ; n
MOV             R4, R0
ADD             R0, SP, #0x4B4+s ; s
MOV             R5, #0
BL              memset
BL              sub_21434
LDR             R3, =byte_7D781
MOV             R8, R5
LDR             R1, =0x1001A
MOV             R7, R5
MOV             R6, R5
ADD             R9, SP, #0x4B4+var_488
LDRB            R3, [R3]
MOV             R0, #0x1C
STRD            R0, R1, [SP,#0x4B4+s]
STRB            R3, [SP,#0x4B4+var_410]

loc_21C50               ; s2
LDR             R1, [R4]
CMP             R1, #0
BNE             loc_21D08
LDRB            R3, [SP,#0x4B4+var_40F]
CMP             R3, #0
LDREQ           R0, =aNeedAtLeastDes ; "need at least destination address"
BEQ             loc_21D04
ADD             R0, SP, #0x4B4+var_4AC
BL              sub_22AF4
ADD             R0, SP, #0x4B4+var_4AC
BL              sub_23598
CMP             R7, #0
CMPEQ           R6, #0
BEQ             loc_21CAC
CMP             R6, #0
BNE             loc_21E38

loc_21C90
MOV             R0, R7
BL              sub_23574
MOV             R2, #4
MOV             R3, R0
MOVW            R1, #0x41C
ADD             R0, SP, #0x4B4+s
BL              sub_23060

loc_21CAC
LDRB            R3, [SP,#0x4B4+var_410]
ADD             R2, SP, #0x4B4+s
MOV             R1, R2
ADD             R0, SP, #0x4B4+var_4AC
CMP             R3, #0
MOVEQ           R3, #2
STRBEQ          R3, [SP,#0x4B4+var_410]
BL              sub_22DD4
CMP             R0, #0
BLT             loc_21F00
EOR             R5, R5, #1
TST             R8, R5
BEQ             loc_21F1C
MOV             R2, #0
ADD             R1, SP, #0x4B4+s
MOV             R0, R2
LDR             R4, [SP,#0x4B4+s]
BL              sub_214B8
LDRH            R3, [SP,#0x4B4+var_41C]
CMP             R3, #0x18
BEQ             loc_21E60
LDR             R0, =aNotARoute ; "not a route?"

loc_21D04
BL              sub_16DBC

loc_21D08
LDR             R0, =aFrom ; "from"
BL              sub_16880
CMP             R0, #6  ; switch 7 cases
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_21D14 ; jumptable 00021D14 default case
jpt_21D14 DCD loc_21D38 ; jump table for switch statement
DCD loc_21D9C
DCD loc_21DB0
DCD loc_21DB0
DCD loc_21DC4
DCD loc_21E30
DCD loc_21DD4

loc_21D38               ; jumptable 00021D14 case 0
MOV             R0, R4
BL              sub_23EC4
LDRB            R2, [SP,#0x4B4+var_410]
MOV             R4, R0
LDR             R1, [R0]
ADD             R0, SP, #0x4B4+var_488
BL              sub_23D18
LDRB            R3, [SP,#0x4B4+var_410]
CMP             R3, #0
LDRBEQ          R3, [SP,#0x4B4+var_488]
STRBEQ          R3, [SP,#0x4B4+var_410]
LDRB            R3, [SP,#0x4B4+src]
CMP             R3, #0
BEQ             loc_21D88
STR             R3, [SP,#0x4B4+n] ; n
MOV             R2, #2  ; int
ADD             R3, SP, #0x4B4+src+3 ; src
MOVW            R1, #0x41C ; int
ADD             R0, SP, #0x4B4+s ; int
BL              sub_230B4

loc_21D88
LDRH            R3, [R9,#2]
MOV             R5, #1
STRB            R3, [SP,#0x4B4+var_40E]

loc_21D94
ADD             R4, R4, #4
B               loc_21C50

loc_21D9C               ; jumptable 00021D14 case 1
MOV             R0, R4
BL              sub_23EC4
MOV             R4, R0
LDR             R6, [R0]
B               loc_21D94

loc_21DB0               ; jumptable 00021D14 cases 2,3
MOV             R0, R4
BL              sub_23EC4
MOV             R4, R0
LDR             R7, [R0]
B               loc_21D94

loc_21DC4               ; jumptable 00021D14 case 4
LDR             R3, [SP,#0x4B4+var_408]
ORR             R3, R3, #0x100
STR             R3, [SP,#0x4B4+var_408]
B               loc_21D94

loc_21DD4               ; jumptable 00021D14 case 6
MOV             R0, R4
BL              sub_23EC4
MOV             R4, R0

def_21D14               ; jumptable 00021D14 default case
LDRB            R2, [SP,#0x4B4+var_410]
ADD             R0, SP, #0x4B4+var_488
LDR             R1, [R4]
BL              sub_23D18
LDRB            R3, [SP,#0x4B4+var_410]
CMP             R3, #0
LDRBEQ          R3, [SP,#0x4B4+var_488]
STRBEQ          R3, [SP,#0x4B4+var_410]
LDRB            R3, [SP,#0x4B4+src]
CMP             R3, #0
BEQ             loc_21E24
STR             R3, [SP,#0x4B4+n] ; n
MOV             R2, #1  ; int
ADD             R3, SP, #0x4B4+src+3 ; src
MOVW            R1, #0x41C ; int
ADD             R0, SP, #0x4B4+s ; int
BL              sub_230B4

loc_21E24
LDRH            R3, [R9,#2]
STRB            R3, [SP,#0x4B4+var_40F]
B               loc_21D94

loc_21E30               ; jumptable 00021D14 case 5
MOV             R8, #1
B               loc_21D94

loc_21E38
MOV             R0, R6
BL              sub_23574
MOV             R2, #3
MOV             R3, R0
MOVW            R1, #0x41C
ADD             R0, SP, #0x4B4+s
BL              sub_23060
CMP             R7, #0
BNE             loc_21C90
B               loc_21CAC

loc_21E60
SUBS            R3, R4, #0x1C
BPL             loc_21E74
MOV             R1, R3
LDR             R0, =aWrongLenD ; "wrong len %d"
BL              sub_16DBC

loc_21E74
ADD             R2, SP, #0x4B4+var_404
MOV             R1, #0x19
ADD             R0, SP, #0x4B4+var_488
BL              sub_23174
LDR             R3, [SP,#0x4B4+var_46C]
CMP             R3, #0
BEQ             loc_21F08
MOV             R2, #2
STRH            R2, [R3,#2]
LDRH            R3, [R3]
SUB             R3, R3, #0xE0000004
MOV             R3, R3,LSL#3
STRB            R3, [SP,#0x4B4+var_40E]

loc_21EA8
CMP             R7, #0
BNE             loc_21EBC
LDR             R3, [SP,#0x4B4+var_478]
CMP             R3, #0
STRHNE          R7, [R3,#2]

loc_21EBC
LDR             R3, [SP,#0x4B4+var_474]
CMP             R3, #0
MOVNE           R2, #0
STRHNE          R2, [R3,#2]
CMP             R6, #0
BNE             loc_21EE0
LDR             R3, [SP,#0x4B4+var_47C]
CMP             R3, #0
STRHNE          R6, [R3,#2]

loc_21EE0
LDR             R3, =0x1001A
ADD             R2, SP, #0x4B4+s
MOV             R1, R2
ADD             R0, SP, #0x4B4+var_4AC
STR             R3, [SP,#0x4B4+var_41C]
BL              sub_22DD4
CMP             R0, #0
BGE             loc_21F1C

loc_21F00
MOV             R0, #2
B               loc_21F30

loc_21F08
LDR             R3, [SP,#0x4B4+var_480]
CMP             R3, #0
LDREQ           R0, =aCanTConnectThe ; "can't connect the route"
BEQ             loc_21D04
B               loc_21EA8

loc_21F1C
MOV             R2, #0
ADD             R1, SP, #0x4B4+s
MOV             R0, R2
BL              sub_214B8
MOV             R0, #0

loc_21F30
ADD             SP, SP, #0x4B0
ADD             SP, SP, #4
POP             {R4-R9,PC}
; End of function sub_21C00

off_21F3C DCD byte_7D781
dword_21F40 DCD 0x1001A
off_21F44 DCD aNeedAtLeastDes ; "need at least destination address"
off_21F48 DCD aNotARoute ; "not a route?"
off_21F4C DCD aFrom     ; "from"
off_21F50 DCD aWrongLenD ; "wrong len %d"
off_21F54 DCD aCanTConnectThe ; "can't connect the route"



; int __fastcall sub_21F58(char **, int)
sub_21F58

var_E44= -0xE44
var_E3C= -0xE3C
var_E38= -0xE38
var_E34= -0xE34
var_E32= -0xE32
var_E2E= -0xE2E
var_E2A= -0xE2A
var_E28= -0xE28
var_E0C= -0xE0C
var_E08= -0xE08
var_E04= -0xE04
var_DFC= -0xDFC
var_DF8= -0xDF8
var_DF4= -0xDF4
var_DF0= -0xDF0
var_DEC= -0xDEC
var_4= -4

LDR             R2, =byte_7D781
PUSH            {R4-R11,LR}
SUB             SP, SP, #0xE40
LDR             R4, =buf
MOV             R7, #0
MOV             R6, R1
SUB             SP, SP, #4
LDRSB           R5, [R2]
MOV             R11, R0
BL              sub_21434
CMP             R6, R7
MOV             R2, #0xFFFFFFFE
STRB            R2, [R4]
STRB            R7, [R4,#(buf.c_iflag+1 - 0x7D790)]
STRB            R7, [R4,#(buf.c_iflag+2 - 0x7D790)]
STRB            R7, [R4,#(buf.c_iflag+3 - 0x7D790)]
BEQ             loc_223D4
LDR             R2, [R11]
CMP             R2, R7
BNE             loc_223E8
LDR             R1, =aIpRouteFlush ; "\"ip route flush\""
LDR             R0, =aSRequiresAnArg ; "%s requires an argument"
BL              sub_16DBC

loc_21FB4               ; int
MOV             R0, R9
BL              sub_168D4
CMP             R0, #0
BNE             loc_22018
ADD             R2, SP, #0xE44+var_4
STR             R0, [R2,#-0xE00]!
MOV             R0, R11
STR             R2, [SP,#0xE44+var_E3C]
STR             R2, [SP,#0xE44+var_E38]
BL              sub_23EC4
LDR             R2, [SP,#0xE44+var_E3C]
MOV             R11, R0
LDR             R1, [R0] ; s2
MOV             R0, R2  ; int
BL              sub_237F8
CMP             R0, #0
BEQ             loc_22034
LDR             R1, [R11] ; s2
MOV             R0, R9  ; s1
BL              sub_16880
CMP             R0, #0xA
BEQ             loc_22034
LDR             R1, =aProtocol ; "protocol"

loc_22010
LDR             R0, [R11]

loc_22014
BL              sub_23EE8

loc_22018
SUB             R2, R0, #1
CMP             R2, #1
BHI             loc_22144
MOV             R0, R11
BL              sub_23EC4
LDR             R7, [R0]
MOV             R11, R0

loc_22034
ADD             R11, R11, #4

loc_22038               ; s
LDR             R1, [R11]
CMP             R1, #0
BNE             loc_21FB4
CMP             R5, #0
BNE             loc_22058
LDR             R5, [R4]
CMP             R5, #0
MOVNE           R5, #2

loc_22058
ADD             R9, SP, #0xE44+var_E28
MOV             R0, R9
BL              sub_22AF4
MOV             R0, R9
BL              sub_23598
CMP             R7, #0
CMPEQ           R8, #0
BEQ             loc_2208C
CMP             R8, #0
BNE             loc_223F0

loc_22080
MOV             R0, R7
BL              sub_23574
STR             R0, [R4,#(buf.c_cc+0x13 - 0x7D790)]

loc_2208C
CMP             R6, #0
LDR             R3, [R4]
BEQ             loc_22454
SUBS            R2, R5, #0xA
MOVNE           R2, #1
CMN             R3, #1
MOVNE           R2, #0
CMP             R2, #0
BNE             loc_22408

loc_220B0
ADD             R3, SP, #0xE44+var_E04
LDR             R8, =sub_214B8
STR             R3, [R4,#(buf.c_cflag - 0x7D790)]
MOV             R3, #0
MOV             R7, R3
MOV             R2, #0xE
STRB            R3, [R4,#(buf.c_lflag - 0x7D790)]
STRB            R3, [R4,#(buf.c_lflag+1 - 0x7D790)]
STRB            R3, [R4,#(buf.c_lflag+2 - 0x7D790)]
STRB            R3, [R4,#(buf.c_lflag+3 - 0x7D790)]
STRB            R3, [R4,#(buf.c_line - 0x7D790)]
STRB            R2, [R4,#(buf.c_cc - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+1 - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+2 - 0x7D790)]
STR             R9, [R4,#(buf.c_cc+3 - 0x7D790)]

loc_220EC
MOV             R2, #0x1A
MOV             R1, R5
MOV             R0, R9
BL              sub_22B8C
MOV             R2, #0
MOV             R1, R8
MOV             R0, R9
STRB            R7, [R4,#(buf.c_oflag - 0x7D790)]
STRB            R7, [R4,#(buf.c_oflag+1 - 0x7D790)]
STRB            R7, [R4,#(buf.c_oflag+2 - 0x7D790)]
STRB            R7, [R4,#(buf.c_oflag+3 - 0x7D790)]
BL              sub_22BD8
LDR             R3, [R4,#(buf.c_oflag - 0x7D790)]
CMP             R3, #0
BEQ             loc_22440
BL              sub_21468
CMP             R0, #0
BEQ             loc_220EC

loc_22134
MOV             R0, R6
ADD             SP, SP, #0xE40
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_22144
CMP             R0, #3
BNE             loc_22160
MOV             R0, R11
BL              sub_23EC4
MOV             R11, R0
LDR             R8, [R0]
B               loc_22034

loc_22160
CMP             R0, #4
BNE             loc_22188
MOV             R0, R11
BL              sub_23EC4
MOV             R11, R0
LDR             R1, [R0]
LDR             R0, =(buf.c_cc+0x17)
MOV             R2, R5

loc_22180
BL              sub_23D18
B               loc_22034

loc_22188
CMP             R0, #5
BNE             loc_221E8
MOV             R0, R11
BL              sub_23EC4
LDR             R1, [R0] ; s
MOV             R11, R0
MOV             R0, R9  ; int
BL              sub_168D4
CMP             R0, #6
BNE             loc_221B8

loc_221B0
MOV             R2, #0xFFFFFFFF
B               loc_221C4

loc_221B8
CMP             R0, #0xA
BNE             loc_221D8
MOV             R2, #0

loc_221C4
STRB            R2, [R4]
STRB            R2, [R4,#(buf.c_iflag+1 - 0x7D790)]
STRB            R2, [R4,#(buf.c_iflag+2 - 0x7D790)]
STRB            R2, [R4,#(buf.c_iflag+3 - 0x7D790)]
B               loc_22034

loc_221D8
CMP             R0, #0xE
BEQ             loc_22034
LDR             R1, =(aLinuxImmutable+0xA) ; "table"
B               loc_22010

loc_221E8
CMP             R0, #6
BEQ             loc_221B0
CMP             R0, #9
BNE             loc_2227C
MOV             R0, R11
BL              sub_23EC4
MOV             R2, #0xFFFFFFFF
MOV             R11, R0
STRB            R2, [R4,#(buf.c_cc+0xB - 0x7D790)]
STRB            R2, [R4,#(buf.c_cc+0xC - 0x7D790)]
STRB            R2, [R4,#(buf.c_cc+0xD - 0x7D790)]
STRB            R2, [R4,#(buf.c_cc+0xE - 0x7D790)]
LDR             R1, [R0]
ADD             R0, SP, #0xE44+var_E04
BL              sub_238C8
CMP             R0, #0
BEQ             loc_22270
LDR             R2, [R11]
LDR             R1, =(aBufferUTooSmal+0x10) ; s2
MOV             R0, R2  ; s1
STR             R2, [SP,#0xE44+var_E3C]
BL              strcmp
CMP             R0, #0
LDR             R2, [SP,#0xE44+var_E3C]
LDRNE           R1, =aScope ; "scope"
MOVNE           R0, R2
BNE             loc_22014
MOV             R2, #0xFF
STR             R2, [SP,#0xE44+var_E04]
MOV             R2, #0
STRB            R2, [R4,#(buf.c_cc+0xB - 0x7D790)]
STRB            R2, [R4,#(buf.c_cc+0xC - 0x7D790)]
STRB            R2, [R4,#(buf.c_cc+0xD - 0x7D790)]
STRB            R2, [R4,#(buf.c_cc+0xE - 0x7D790)]

loc_22270
LDR             R2, [SP,#0xE44+var_E04]
STR             R2, [R4,#(buf.c_cc+7 - 0x7D790)]
B               loc_22034

loc_2227C
CMP             R0, #7
BNE             loc_22328
MOV             R0, R11
BL              sub_23EC4
LDR             R1, [R0] ; s
MOV             R11, R0
MOV             R0, R9  ; int
BL              sub_168D4
CMP             R0, #0xB
BNE             loc_222C0
MOV             R0, R11
BL              sub_23EC4
MOV             R2, R5
MOV             R11, R0
LDR             R1, [R0]
LDR             R0, =byte_7D7F4
B               loc_22180

loc_222C0
CMP             R0, #0xC
BNE             loc_222E4
MOV             R0, R11
BL              sub_23EC4
MOV             R2, R5
MOV             R11, R0
LDR             R1, [R0]
LDR             R0, =dword_7D808
B               loc_22180

loc_222E4
CMP             R0, #0xD
BNE             loc_222F8
MOV             R0, R11
BL              sub_23EC4
MOV             R11, R0

loc_222F8
MOV             R2, R5
LDR             R1, [R11]
LDR             R0, =dword_7D808
BL              sub_23D18
LDR             R2, =dword_7D808
SUB             R1, R2, #0x14
ADD             R0, R2, #0x14

loc_22314
LDR             R12, [R2],#4
CMP             R2, R0
STR             R12, [R1],#4
BNE             loc_22314
B               loc_22034

loc_22328
CMP             R0, #8
BNE             loc_22348
MOV             R0, R11
BL              sub_23EC4
MOV             R11, R0
LDR             R1, [R0] ; s
MOV             R0, R9  ; int
BL              sub_168D4

loc_22348
CMP             R0, #0xB
BNE             loc_2236C
MOV             R0, R11
BL              sub_23EC4
MOV             R2, R5
MOV             R11, R0
LDR             R1, [R0]
LDR             R0, =dword_7D7CC
B               loc_22180

loc_2236C
CMP             R0, #0xC
BNE             loc_22390
MOV             R0, R11
BL              sub_23EC4
MOV             R2, R5
MOV             R11, R0
LDR             R1, [R0]
MOV             R0, R10
B               loc_22180

loc_22390
CMP             R0, #0xD
BNE             loc_223A4
MOV             R0, R11
BL              sub_23EC4
MOV             R11, R0

loc_223A4
MOV             R2, R5
LDR             R1, [R11]
MOV             R0, R10
BL              sub_23D18
LDR             R2, =dword_7D7E0
SUB             R1, R2, #0x14
ADD             R0, R2, #0x14

loc_223C0
LDR             R12, [R2],#4
CMP             R2, R0
STR             R12, [R1],#4
BNE             loc_223C0
B               loc_22034

loc_223D4
MOV             R7, R6
MOV             R8, R6

loc_223DC
LDR             R9, =aProtocol_0 ; "protocol"
LDR             R10, =dword_7D7E0
B               loc_22038

loc_223E8
MOV             R8, R7
B               loc_223DC

loc_223F0
MOV             R0, R8
BL              sub_23574
CMP             R7, #0
STR             R0, [R4,#(buf.c_cc+0xF - 0x7D790)]
BNE             loc_22080
B               loc_2208C

loc_22408
MOV             R1, #1
LDR             R0, =aProcSysNetIpv4 ; "/proc/sys/net/ipv4/route/flush"
BL              sub_1760C
SUBS            R7, R0, #0
BLT             loc_22438
MOV             R2, #2  ; n
LDR             R1, =a1 ; "-1"
BL              write
CMP             R0, #1
BGT             loc_22448
LDR             R0, =aCanTFlushRouti ; "can't flush routing cache"
BL              sub_16AF4

loc_22438
CMP             R5, #2
BNE             loc_220B0

loc_22440
MOV             R6, #0
B               loc_22134

loc_22448               ; fd
MOV             R0, R7
BL              close
B               loc_22438

loc_22454
CMN             R3, #1
BEQ             loc_22480
MOV             R2, #0x1A
MOV             R1, R5
MOV             R0, R9
BL              sub_22B8C

loc_2246C
MOV             R2, #0
LDR             R1, =sub_214B8
MOV             R0, R9
BL              sub_22BD8
B               loc_22134

loc_22480
MOV             R3, #0x10
MOV             R2, #0x1C
STRH            R3, [SP,#0xE44+var_E34]
ADD             R1, SP, #0xE44+var_E04
LDR             R3, =0x101001A
LDR             R0, [SP,#0xE44+var_E28]
STR             R6, [SP,#0xE44+var_DF4]
STRD            R2, R3, [SP,#0xE44+var_E04]
LDR             R3, [SP,#0xE44+var_E0C]
STR             R6, [SP,#0xE44+var_E32]
STR             R6, [SP,#0xE44+var_E2E]
ADD             R3, R3, #1
STRH            R6, [SP,#0xE44+var_E2A]
STR             R3, [SP,#0xE44+var_E0C]
STR             R3, [SP,#0xE44+var_E08]
STR             R3, [SP,#0xE44+var_DFC]
MOV             R3, #0x200
STR             R3, [SP,#0xE44+var_DEC]
MOV             R3, #0xC
STR             R3, [SP,#0xE44+var_E44]
ADD             R3, SP, #0xE44+var_E34
STR             R6, [SP,#0xE44+var_DF8]
STR             R6, [SP,#0xE44+var_DF0]
STRB            R5, [SP,#0xE44+var_DF4]
BL              sub_179DC
CMP             R0, #0
BGE             loc_2246C
LDR             R0, =aCanTSendDumpRe ; "can't send dump request"
BL              sub_16B40
; End of function sub_21F58

off_224F4 DCD byte_7D781
off_224F8 DCD buf
off_224FC DCD aIpRouteFlush ; "\"ip route flush\""
off_22500 DCD aSRequiresAnArg ; "%s requires an argument"
off_22504 DCD aProtocol ; "protocol"
off_22508 DCD sub_214B8
off_2250C DCD buf.c_cc+0x17
off_22510 DCD aLinuxImmutable+0xA ; "table"
off_22514 DCD aBufferUTooSmal+0x10 ; "all"
off_22518 DCD aScope    ; "scope"
off_2251C DCD byte_7D7F4
off_22520 DCD dword_7D808
off_22524 DCD dword_7D7CC
off_22528 DCD dword_7D7E0
off_2252C DCD aProtocol_0 ; "protocol"
off_22530 DCD aProcSysNetIpv4 ; "/proc/sys/net/ipv4/route/flush"
off_22534 DCD a1        ; "-1"
off_22538 DCD aCanTFlushRouti ; "can't flush routing cache"
dword_2253C DCD 0x101001A
off_22540 DCD aCanTSendDumpRe ; "can't send dump request"



; int __fastcall sub_22544(int, __int16, char **)
sub_22544

n= -0x554
var_548= -0x548
var_544= -0x544
var_540= -0x540
var_520= -0x520
src= -0x51C
s= -0x420
var_410= -0x410
var_40F= -0x40F
var_40C= -0x40C
var_40B= -0x40B
var_40A= -0x40A
var_409= -0x409
var_408= -0x408

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x550
SUB             SP, SP, #4
MOV             R9, R0
ADD             R5, SP, #0x554+s
MOV             R6, R1
MOV             R4, R2
MOV             R1, #0  ; c
MOVW            R2, #0x41C ; n
MOV             R0, R5  ; s
BL              memset
MOV             R3, #0x1C
CMP             R9, #0x19
STR             R3, [SP,#0x554+s]
MOV             R8, #0
LDR             R3, =byte_7D781
ORR             R6, R6, #1
STRH            R6, [R5,#6]
MOV             R10, R8
MOV             R6, R8
MOV             R7, R8
LDRB            R3, [R3]
ADD             R11, SP, #0x554+var_540
STRH            R9, [R5,#4]
STRB            R3, [SP,#0x554+var_410]
MOV             R3, #0xFFFFFFFE
STRB            R3, [SP,#0x554+var_40C]
MOV             R3, #0xFFFFFFFF
STRB            R3, [SP,#0x554+var_40A]
MOVNE           R3, #0
STRBNE          R3, [SP,#0x554+var_40A]
MOVNE           R3, #3
STRBNE          R3, [SP,#0x554+var_40B]
MOVNE           R3, #1
STRBNE          R3, [SP,#0x554+var_409]
LDR             R3, =0x80004
STR             R3, [SP,#0x554+var_520]

loc_225D8               ; s
LDR             R1, [R4]
CMP             R1, #0
BNE             loc_226C8
ADD             R0, SP, #0x554+var_544
BL              sub_22AF4
CMP             R10, #0
BEQ             loc_22618
ADD             R0, SP, #0x554+var_544
BL              sub_23598
MOV             R0, R10
BL              sub_23574
MOV             R2, #4
MOV             R3, R0
MOVW            R1, #0x41C
MOV             R0, R5
BL              sub_23060

loc_22618
LDRH            R3, [SP,#0x554+var_520]
ADD             R0, SP, #0x554+var_520
CMP             R3, #4
BLS             loc_22660
CMP             R7, #0
BEQ             loc_22640
MOV             R3, R7
MOV             R2, #1
MOV             R1, #0x100
BL              sub_23120

loc_22640
LDRH            R3, [SP,#0x554+var_520]
MOV             R2, #8  ; int
MOVW            R1, #0x41C ; int
MOV             R0, R5  ; int
SUB             R3, R3, #4
STR             R3, [SP,#0x554+n] ; n
ADD             R3, SP, #0x554+src ; src
BL              sub_230B4

loc_22660
CMP             R8, #0
BNE             loc_22690
LDRB            R3, [SP,#0x554+var_409]
AND             R2, R3, #0xF7
CMP             R2, #2
MOVEQ           R3, #0xFFFFFFFE
BEQ             loc_2268C
SUB             R2, R3, #3
CMP             R2, #2
BHI             loc_229B4

loc_22688
MOV             R3, #0xFFFFFFFD

loc_2268C
STRB            R3, [SP,#0x554+var_40A]

loc_22690
LDRB            R3, [SP,#0x554+var_410]
MOV             R2, #0
MOV             R1, R5
ADD             R0, SP, #0x554+var_544
CMP             R3, #0
MOVEQ           R3, #2
STRBEQ          R3, [SP,#0x554+var_410]
BL              sub_22DD4
CMP             R0, #0
MOVLT           R0, #2
MOVGE           R0, #0
ADD             SP, SP, #0x550
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_226C8
LDR             R0, =aSrc ; "src"
BL              sub_168D4
CMP             R0, #0
BNE             loc_22724
MOV             R0, R4
BL              sub_23EC4
LDRB            R2, [SP,#0x554+var_410]
MOV             R4, R0
LDR             R1, [R0]
ADD             R0, SP, #0x554+var_544
BL              sub_23CCC
LDRB            R3, [SP,#0x554+var_410]
MOV             R2, #7  ; int
CMP             R3, #0
LDRBEQ          R3, [SP,#0x554+var_544]
STRBEQ          R3, [SP,#0x554+var_410]
LDRB            R3, [SP,#0x554+var_544+1]
STR             R3, [SP,#0x554+n] ; n
ADD             R3, SP, #0x554+var_540 ; src

loc_22714               ; int
MOVW            R1, #0x41C
MOV             R0, R5  ; int
BL              sub_230B4
B               loc_227C8

loc_22724
CMP             R0, #1
BNE             loc_22770
MOV             R0, R4
ORR             R6, R6, #1
BL              sub_23EC4
LDRB            R2, [SP,#0x554+var_410]
MOV             R4, R0
LDR             R1, [R0]
ADD             R0, SP, #0x554+var_544
BL              sub_23CCC
LDRB            R3, [SP,#0x554+var_410]
MOV             R2, #5
CMP             R3, #0
LDRBEQ          R3, [SP,#0x554+var_544]
STRBEQ          R3, [SP,#0x554+var_410]
LDRB            R3, [SP,#0x554+var_544+1]
STR             R3, [SP,#0x554+n]
ADD             R3, SP, #0x554+var_540
B               loc_22714

loc_22770
CMP             R0, #2
BNE             loc_227D0
MOV             R0, R4
BL              sub_23EC4
LDR             R1, =(aIpcLock+4) ; "lock"
MOV             R4, R0
LDR             R0, [R0] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_227A8
MOV             R0, R4
ORR             R7, R7, #4
BL              sub_23EC4
MOV             R4, R0

loc_227A8
LDR             R1, =aMtu_1 ; "mtu"
LDR             R0, [R4]
BL              sub_23F00
MOV             R2, #2
MOV             R3, R0

loc_227BC
MOV             R1, #0x100
ADD             R0, SP, #0x554+var_520
BL              sub_23120

loc_227C8
ADD             R4, R4, #4
B               loc_225D8

loc_227D0
CMP             R0, #3
BNE             loc_22820
MOV             R0, R4
BL              sub_23EC4
LDR             R1, =(aIpcLock+4) ; "lock"
MOV             R4, R0
LDR             R0, [R0] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_22808
MOV             R0, R4
ORR             R7, R7, #0x100
BL              sub_23EC4
MOV             R4, R0

loc_22808
LDR             R1, =aAdvmss ; "advmss"
LDR             R0, [R4]
BL              sub_23F00
MOV             R2, #8
MOV             R3, R0
B               loc_227BC

loc_22820
CMP             R0, #4
BNE             loc_22864
MOV             R0, R4
BL              sub_23EC4
LDR             R1, [R0]
MOV             R4, R0
ADD             R0, SP, #0x554+var_544
BL              sub_238C8
CMP             R0, #0
BEQ             loc_22854
LDR             R1, =aScope_0 ; "scope"

loc_2284C
LDR             R0, [R4]
BL              sub_23EE8

loc_22854
LDR             R3, [SP,#0x554+var_544]
MOV             R8, #1
STRB            R3, [SP,#0x554+var_40A]
B               loc_227C8

loc_22864
CMP             R0, #5
BNE             loc_228A0
MOV             R0, R4
BL              sub_23EC4
LDR             R1, [R0] ; s2
MOV             R4, R0
ADD             R0, SP, #0x554+var_544 ; int
BL              sub_237F8
CMP             R0, #0
LDRNE           R1, =aProtocol_1 ; "protocol"
BNE             loc_2284C
LDR             R3, [SP,#0x554+var_544]
ORR             R6, R6, #4
STRB            R3, [SP,#0x554+var_40B]
B               loc_227C8

loc_228A0
SUB             R3, R0, #6
CMP             R3, #1
BHI             loc_228C0
MOV             R0, R4
BL              sub_23EC4
MOV             R4, R0
LDR             R10, [R0]
B               loc_227C8

loc_228C0
CMP             R0, #9
BNE             loc_228F8
MOV             R0, R4
BL              sub_23EC4
LDR             R1, =aMetric ; "metric"
MOV             R4, R0
LDR             R0, [R0]
BL              sub_23F48
MOV             R2, #6
MOV             R3, R0
MOVW            R1, #0x41C
MOV             R0, R5
BL              sub_23060
B               loc_227C8

loc_228F8
CMP             R0, #0xA
LDREQ           R3, [SP,#0x554+var_408]
ORREQ           R3, R3, #4
STREQ           R3, [SP,#0x554+var_408]
BEQ             loc_227C8
CMP             R0, #8
BNE             loc_22920
MOV             R0, R4
BL              sub_23EC4
MOV             R4, R0

loc_22920
LDR             R1, [R4]
LDRB            R3, [R1]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
BLS             loc_2295C
ADD             R0, SP, #0x554+var_548
BL              sub_239C8
CMP             R0, #0
BNE             loc_2295C
MOV             R0, R4
ORR             R6, R6, #8
BL              sub_23EC4
LDR             R3, [SP,#0x554+var_548]
MOV             R4, R0
STRB            R3, [SP,#0x554+var_409]

loc_2295C
TST             R6, #2
LDR             R1, [R4]
BEQ             loc_22970
LDR             R0, =(aSendto_0+4) ; "to"
BL              sub_23FC4

loc_22970
LDRB            R2, [SP,#0x554+var_410]
ADD             R0, SP, #0x554+var_544
BL              sub_23D18
LDRB            R3, [SP,#0x554+var_410]
ORR             R6, R6, #2
CMP             R3, #0
LDRBEQ          R3, [SP,#0x554+var_544]
STRBEQ          R3, [SP,#0x554+var_410]
LDRH            R3, [SP,#0x554+var_544+2]
STRB            R3, [SP,#0x554+var_40F]
LDRB            R3, [SP,#0x554+var_544+1]
CMP             R3, #0
BEQ             loc_227C8
STR             R3, [SP,#0x554+n]
MOV             R2, #1
MOV             R3, R11
B               loc_22714

loc_229B4
CMP             R3, #1
BHI             loc_22690
CMP             R9, #0x19
MOVEQ           R3, #0xFFFFFFFF
BEQ             loc_2268C
TST             R6, #1
BEQ             loc_22688
B               loc_22690
; End of function sub_22544

off_229D4 DCD byte_7D781
dword_229D8 DCD 0x80004
; const int off_229DC
off_229DC DCD aSrc      ; "src"
off_229E0 DCD aIpcLock+4 ; "lock"
off_229E4 DCD aMtu_1    ; "mtu"
off_229E8 DCD aAdvmss   ; "advmss"
off_229EC DCD aScope_0  ; "scope"
off_229F0 DCD aProtocol_1 ; "protocol"
off_229F4 DCD aMetric   ; "metric"
off_229F8 DCD aSendto_0+4 ; "to"



; int __fastcall sub_229FC(char **)
sub_229FC
LDR             R1, [R0] ; s
CMP             R1, #0
BNE             loc_22A0C

loc_22A08
B               sub_21F58

loc_22A0C
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, =aA ; "a"
BL              sub_168D4
ADD             R2, R4, #4
CMP             R0, #0xC ; switch 13 cases
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_22A24 ; jumptable 00022A24 default case
jpt_22A24 DCD loc_22AD4 ; jump table for switch statement
DCD loc_22AD4
DCD loc_22A60
DCD loc_22AE0
DCD loc_22AE0
DCD loc_22A70
DCD loc_22A7C
DCD loc_22A88
DCD loc_22A88
DCD loc_22A98
DCD loc_22AA4
DCD loc_22AB0
DCD loc_22ABC

loc_22A60               ; jumptable 00022A24 case 2
MOV             R0, #0x18
MOV             R1, #0xC00

loc_22A68
POP             {R4,LR}
B               sub_22544

loc_22A70               ; jumptable 00022A24 case 5
MOV             R0, #0x19
MOV             R1, #0
B               loc_22A68

loc_22A7C               ; jumptable 00022A24 case 6
MOV             R0, R2
POP             {R4,LR}
B               sub_21C00

loc_22A88               ; jumptable 00022A24 cases 7,8
MOV             R1, #0

loc_22A8C
MOV             R0, R2
POP             {R4,LR}
B               loc_22A08

loc_22A98               ; jumptable 00022A24 case 9
MOV             R0, #0x18
MOV             R1, #0x400
B               loc_22A68

loc_22AA4               ; jumptable 00022A24 case 10
MOV             R0, #0x18
MOV             R1, #0x500
B               loc_22A68

loc_22AB0               ; jumptable 00022A24 case 11
MOV             R0, #0x18
MOV             R1, #0x200
B               loc_22A68

loc_22ABC               ; jumptable 00022A24 case 12
MOV             R1, #1
B               loc_22A8C

def_22A24               ; jumptable 00022A24 default case
LDR             R3, =dword_7DB90
LDR             R0, [R4]
LDR             R1, [R3]
BL              sub_23EE8

loc_22AD4               ; jumptable 00022A24 cases 0,1
MOV             R0, #0x18
MOV             R1, #0x600
B               loc_22A68

loc_22AE0               ; jumptable 00022A24 cases 3,4
MOV             R0, #0x18
MOV             R1, #0x100
B               loc_22A68
; End of function sub_229FC

; const int off_22AEC
off_22AEC DCD aA        ; "a"
off_22AF0 DCD dword_7DB90



; time_t __fastcall sub_22AF4(int *)
sub_22AF4
PUSH            {R4-R6,LR}
MOV             R2, #0x24 ; '$' ; n
MOV             R1, #0  ; c
MOV             R4, R0
MOV             R5, R4
BL              memset
MOV             R2, #0
MOV             R1, #3
MOV             R0, #0x10
BL              sub_179A4
MOV             R3, #0x10
STR             R0, [R4]
MOV             R2, #0xC
STRH            R3, [R5,#4]!
MOV             R1, R5
BL              sub_179C0
MOV             R2, #0xC
MOV             R1, R5
LDR             R0, [R4]
BL              sub_57A54
MOV             R0, #0  ; timer
BL              time
STR             R0, [R4,#0x1C]
POP             {R4-R6,PC}
; End of function sub_22AF4




; ssize_t __fastcall sub_22B54(int *, const void *, size_t)
sub_22B54

var_10= -0x10
var_4= -4
var_2= -2
var_s2=  2
var_s6=  6

PUSH            {R0-R6,LR}
MOV             R3, #0
STR             R3, [SP,#0x10+var_2]
STR             R3, [SP,#0x10+var_s2]
STRH            R3, [SP,#0x10+var_s6]
MOV             R3, #0x10
STRH            R3, [SP,#0x10+var_4]
MOV             R3, #0xC
STR             R3, [SP,#0x10+var_10]
ADD             R3, SP, R3
LDR             R0, [R0]
BL              sub_179DC
ADD             SP, SP, #0x1C
POP             {PC}
; End of function sub_22B54




; ssize_t __fastcall sub_22B8C(int *, int, __int16, int)
sub_22B8C

var_C= -0xC
var_8= -8
var_6= -6
var_4= -4
var_s0=  0
var_s4=  4

PUSH            {R0-R6,LR}
MOVW            R3, #0x301
STRH            R3, [SP,#0x10+var_6]
MOV             R3, #0
MOV             LR, #0x14
STR             R3, [SP,#0x10+var_s0]
LDR             R3, [R0,#0x1C]
STRH            R2, [SP,#0x10+var_8]
MOV             R2, LR
STRB            R1, [SP,#0x10+var_s4]
ADD             R1, SP, #0x10+var_C
ADD             R3, R3, #1
STR             LR, [SP,#0x10+var_C]
STR             R3, [R0,#0x1C]
STR             R3, [R0,#0x20]
STR             R3, [SP,#0x10+var_4]
BL              sub_22B54
ADD             SP, SP, #0x1C
POP             {PC}
; End of function sub_22B8C




; int __fastcall sub_22BD8(int *, int (__fastcall *)(char *, unsigned int *, int), int)
sub_22BD8

var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
message= -0x20

PUSH            {R4-R11,LR}
MOV             R6, R0
LDR             R10, =dword_7DB94
SUB             SP, SP, #0x3C
MOV             R0, #0x2000
MOV             R8, R1
LDR             R11, =aOverrun ; "OVERRUN"
MOV             R9, R2
BL              sub_1748C
MOV             R5, R0
MOV             R3, #0x2000
STR             R0, [SP,#0x3C+var_34]
STR             R3, [SP,#0x3C+var_30]

loc_22C0C
MOV             R3, #0xC
MOV             R2, #0  ; flags
STR             R3, [SP,#0x3C+message.msg_namelen]
ADD             R3, SP, #0x3C+var_34
STR             R3, [SP,#0x3C+message.msg_iov]
ADD             R7, SP, #0x3C+var_2C
MOV             R3, #1
ADD             R1, SP, #0x3C+message ; message
LDR             R0, [R6] ; fd
STR             R3, [SP,#0x3C+message.msg_iovlen]
STR             R7, [SP,#0x3C+message]
STR             R2, [SP,#0x3C+message.msg_control]
STR             R2, [SP,#0x3C+message.msg_controllen]
STR             R2, [SP,#0x3C+message.msg_flags]
BL              recvmsg
SUBS            R3, R0, #0
BGE             loc_22C6C
LDR             R3, [R10]
LDR             R3, [R3]
CMP             R3, #4
BEQ             loc_22C0C
MOV             R0, R11
BL              sub_16AF4
B               loc_22C0C

loc_22C6C
BNE             loc_22C9C
LDR             R0, =aEofOnNetlink ; "EOF on netlink"

loc_22C74
BL              sub_16DDC

loc_22C78
MOV             R2, #0xFFFFFFFF

loc_22C7C               ; ptr
MOV             R0, R5
STR             R2, [SP,#0x3C+var_38]
BL              free
LDR             R2, [SP,#0x3C+var_38]
CMP             R2, #0
BEQ             loc_22DA4
LDR             R0, =aDumpTerminated ; "dump terminated"
BL              sub_16DBC

loc_22C9C
LDR             R1, [SP,#0x3C+message.msg_namelen]
CMP             R1, #0xC
BEQ             loc_22D88
LDR             R0, =aSenderAddressL ; "sender address length == %d"

loc_22CAC
BL              sub_16DBC

loc_22CB0
LDR             R2, [SP,#0x3C+var_28]
CMP             R2, #0
BEQ             loc_22D04

loc_22CBC
LDR             R2, [R4]
ADD             R2, R2, #3
BIC             R2, R2, #3
SUB             R3, R3, R2
ADD             R4, R4, R2

loc_22CD0
CMP             R3, #0xF
BLE             loc_22CEC
LDR             R1, [R4]
CMP             R1, #0xF
BLS             loc_22CEC
CMP             R3, R1
BCS             loc_22CB0

loc_22CEC
LDR             R2, [SP,#0x3C+message.msg_flags]
TST             R2, #0x20
BEQ             loc_22D90
LDR             R0, =aMessageTruncat ; "message truncated"
BL              sub_16DDC
B               loc_22C0C

loc_22D04
LDR             R12, [R4,#0xC]
LDR             R0, [R6,#8]
CMP             R12, R0
BNE             loc_22CBC
LDR             R12, [R4,#8]
LDR             R0, [R6,#0x20]
CMP             R12, R0
BNE             loc_22CBC
LDRH            R0, [R4,#4]
CMP             R0, #3
BEQ             loc_22C7C
CMP             R0, #2
BNE             loc_22D64
CMP             R1, #0x23 ; '#'
LDRLS           R0, =aErrorTruncated ; "ERROR truncated"
BLS             loc_22C74
LDR             R2, =dword_7DB94
LDR             R3, [R4,#0x10]
LDR             R0, =aRtnetlinkAnswe ; "RTNETLINK answers"
LDR             R2, [R2]
RSB             R3, R3, #0
STR             R3, [R2]
BL              sub_16AF4
B               loc_22C78

loc_22D64
MOV             R2, R9
MOV             R1, R4
MOV             R0, R7
STR             R3, [SP,#0x3C+var_38]
BLX             R8
SUBS            R2, R0, #0
LDR             R3, [SP,#0x3C+var_38]
BLT             loc_22C7C
B               loc_22CBC

loc_22D88
MOV             R4, R5
B               loc_22CD0

loc_22D90
CMP             R3, #0
BEQ             loc_22C0C
MOV             R1, R3
LDR             R0, =aRemnantOfSizeD ; "remnant of size %d!"
B               loc_22CAC

loc_22DA4
MOV             R0, R2
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}
; End of function sub_22BD8

off_22DB0 DCD dword_7DB94
off_22DB4 DCD aOverrun  ; "OVERRUN"
off_22DB8 DCD aEofOnNetlink ; "EOF on netlink"
off_22DBC DCD aDumpTerminated ; "dump terminated"
off_22DC0 DCD aSenderAddressL ; "sender address length == %d"
off_22DC4 DCD aMessageTruncat ; "message truncated"
off_22DC8 DCD aErrorTruncated ; "ERROR truncated"
off_22DCC DCD aRtnetlinkAnswe ; "RTNETLINK answers"
off_22DD0 DCD aRemnantOfSizeD ; "remnant of size %d!"



; int __fastcall sub_22DD4(int *, int, void *)
sub_22DD4

var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_2A= -0x2A
var_26= -0x26
var_22= -0x22
message= -0x20

LDR             R3, [R1]
PUSH            {R4-R11,LR}
MOV             R6, R0
SUB             SP, SP, #0x44
MOV             R0, #0x2000
MOV             R4, R1
MOV             R7, R2
STR             R1, [SP,#0x44+var_34]
STR             R3, [SP,#0x44+var_30]
BL              sub_1748C
ADD             R3, SP, #0x44+var_2C
MOV             R2, #1
STR             R3, [SP,#0x44+message]
MOV             R3, #0xC
STR             R3, [SP,#0x44+message.msg_namelen]
ADD             R3, SP, #0x44+var_34
STR             R3, [SP,#0x44+message.msg_iov]
MOV             R3, #0
CMP             R7, #0
STRD            R2, R3, [SP,#0x44+message.msg_iovlen]
STR             R3, [SP,#0x44+message.msg_controllen]
MOV             R8, R0
STR             R3, [SP,#0x44+message.msg_flags]
MOV             R2, #0  ; flags
STR             R3, [SP,#0x44+var_2A]
ADD             R1, SP, #0x44+message ; message
STR             R3, [SP,#0x44+var_26]
STRH            R3, [SP,#0x44+var_22]
MOV             R3, #0x10
LDR             R5, [R6,#0x1C]
STRH            R3, [SP,#0x44+var_2C]
LDRHEQ          R3, [R4,#6]
ADD             R5, R5, #1
LDR             R0, [R6] ; fd
STR             R5, [R6,#0x1C]
ORREQ           R3, R3, #4
STR             R5, [R4,#8]
STRHEQ          R3, [R4,#6]
BL              sendmsg
CMP             R0, #0
LDRLT           R0, =aCanTTalkToRtne ; "can't talk to rtnetlink"
BLT             loc_22FB4
LDR             R9, =aUnexpectedRepl ; "unexpected reply!"
LDR             R10, =aMessageTruncat ; "message truncated"
LDR             R11, =dword_7DB94
STR             R8, [SP,#0x44+var_34]

loc_22E8C
MOV             R3, #0x2000
ADD             R1, SP, #0x44+message ; message
MOV             R2, #0  ; flags
LDR             R0, [R6] ; fd
STR             R3, [SP,#0x44+var_30]
BL              recvmsg
SUBS            R1, R0, #0
BGE             loc_22EC8
LDR             R3, [R11]
LDR             R3, [R3]
CMP             R3, #4
BEQ             loc_22E8C
LDR             R0, =aOverrun ; "OVERRUN"
BL              sub_16AF4
B               loc_22E8C

loc_22EC8
BNE             loc_22EEC
LDR             R0, =aEofOnNetlink ; "EOF on netlink"

loc_22ED0
BL              sub_16DDC

loc_22ED4
MOV             R4, #0xFFFFFFFF

loc_22ED8               ; ptr
MOV             R0, R8
BL              free
MOV             R0, R4
ADD             SP, SP, #0x44 ; 'D'
POP             {R4-R11,PC}

loc_22EEC
LDR             R3, [SP,#0x44+message.msg_namelen]
CMP             R3, #0xC
BEQ             loc_23018
LDR             R0, =aSenderAddressL ; "sender address length == %d"
MOV             R1, R3

loc_22F00
BL              sub_16DBC

loc_22F04
LDR             R2, [R3]
CMP             R1, R2
SUB             R0, R2, #0x10
MOVGE           R12, #0
MOVLT           R12, #1
ORRS            R12, R12, R0,LSR#31
BEQ             loc_22F3C
LDR             R3, [SP,#0x44+message.msg_flags]
TST             R3, #0x20
LDRNE           R0, =aTruncatedMessa ; "truncated message"
BNE             loc_22ED0
MOV             R1, R2
LDR             R0, =aMalformedMessa ; "malformed message: len=%d!"
B               loc_22F00

loc_22F3C
CMP             R4, #0
BNE             loc_22FF8
LDR             LR, [R3,#0xC]
LDR             R12, [R6,#8]
CMP             LR, R12
BNE             loc_22FF4
LDR             R12, [R3,#8]
CMP             R5, R12
BNE             loc_22FF4
LDRH            R12, [R3,#4]
CMP             R12, #2
BNE             loc_22FBC
CMP             R0, #0x13
LDRLE           R0, =aErrorTruncated ; "ERROR truncated"
BLE             loc_22ED0
LDR             R2, =dword_7DB94
LDR             R4, [R3,#0x10]
LDR             R2, [R2]
CMP             R4, #0
RSB             R1, R4, #0
STR             R1, [R2]
BNE             loc_22FB0
CMP             R7, #0
LDRNE           R2, [R3] ; n
BEQ             loc_22ED8

loc_22FA0               ; src
MOV             R1, R3
MOV             R0, R7  ; dest
BL              memcpy
B               loc_22ED8

loc_22FB0
LDR             R0, =aRtnetlinkAnswe ; "RTNETLINK answers"

loc_22FB4
BL              sub_16AF4
B               loc_22ED4

loc_22FBC
CMP             R7, #0
BNE             loc_22FA0
MOV             R0, R9
STR             R3, [SP,#0x44+var_38]
STR             R1, [SP,#0x44+var_3C]
STR             R2, [SP,#0x44+var_40]
BL              sub_16DDC
LDR             R2, [SP,#0x44+var_40]
LDR             R1, [SP,#0x44+var_3C]
LDR             R3, [SP,#0x44+var_38]
ADD             R2, R2, #3
BIC             R2, R2, #3
SUB             R1, R1, R2
ADD             R3, R3, R2

loc_22FF4
LDR             R4, [SP,#0x44+var_2A+2]

loc_22FF8
CMP             R1, #0xF
BGT             loc_22F04
LDR             R3, [SP,#0x44+message.msg_flags]
TST             R3, #0x20
BEQ             loc_23020
MOV             R0, R10
BL              sub_16DDC
B               loc_22E8C

loc_23018
MOV             R3, R8
B               loc_22FF4

loc_23020
CMP             R1, #0
BEQ             loc_22E8C
LDR             R0, =aRemnantOfSizeD ; "remnant of size %d!"
B               loc_22F00
; End of function sub_22DD4

off_23030 DCD aCanTTalkToRtne ; "can't talk to rtnetlink"
off_23034 DCD aUnexpectedRepl ; "unexpected reply!"
off_23038 DCD aMessageTruncat ; "message truncated"
off_2303C DCD dword_7DB94
off_23040 DCD aOverrun  ; "OVERRUN"
off_23044 DCD aEofOnNetlink ; "EOF on netlink"
off_23048 DCD aSenderAddressL ; "sender address length == %d"
off_2304C DCD aTruncatedMessa ; "truncated message"
off_23050 DCD aMalformedMessa ; "malformed message: len=%d!"
off_23054 DCD aErrorTruncated ; "ERROR truncated"
off_23058 DCD aRtnetlinkAnswe ; "RTNETLINK answers"
off_2305C DCD aRemnantOfSizeD ; "remnant of size %d!"



; int __fastcall sub_23060(unsigned int *, signed int, __int16, int)
sub_23060
LDR             R12, [R0]
PUSH            {LR}
ADD             LR, R12, #0xB
BIC             LR, LR, #3
CMP             LR, R1
BGT             loc_230AC
ADD             R12, R12, #3
BIC             R12, R12, #3
ADD             R1, R0, R12
STRH            R2, [R1,#2]
MOV             R2, #8
STRH            R2, [R0,R12]
STR             R3, [R1,#4]
LDR             R3, [R0]
ADD             R3, R3, #0xB
BIC             R3, R3, #3
STR             R3, [R0]
MOV             R0, #0
POP             {PC}

loc_230AC
MOV             R0, #0xFFFFFFFF
POP             {PC}
; End of function sub_23060




; int __fastcall sub_230B4(size_t *, int, __int16, void *src, size_t n)
sub_230B4

n=  0x10

PUSH            {R4-R6,LR}
LDR             R6, [SP,#n]
LDR             R12, [R0]
ADD             R5, R6, #4
ADD             R12, R12, #3
ADD             LR, R5, R12
BIC             LR, LR, #3
CMP             LR, R1
BGT             loc_23118
BIC             R12, R12, #3
MOV             R4, R0
ADD             R0, R0, R12
MOV             R1, R3  ; src
STRH            R2, [R0,#2]
MOV             R2, R6  ; n
STRH            R5, [R4,R12]
ADD             R0, R0, #4 ; dest
BL              memcpy
LDR             R3, [R4]
MOV             R0, #0
ADD             R3, R3, #3
ADD             R3, R3, R5
BIC             R3, R3, #3
STR             R3, [R4]
POP             {R4-R6,PC}

loc_23118
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_230B4




; int __fastcall sub_23120(_WORD *, unsigned int, __int16, int)
sub_23120
LDRH            R12, [R0]
PUSH            {LR}
ADD             LR, R12, #0xB
BIC             LR, LR, #3
CMP             LR, R1
BHI             loc_2316C
ADD             R12, R12, #3
BIC             R12, R12, #3
ADD             R1, R0, R12
STRH            R2, [R1,#2]
MOV             R2, #8
STRH            R2, [R0,R12]
STR             R3, [R1,#4]
LDRH            R3, [R0]
ADD             R3, R3, #0xB
BIC             R3, R3, #3
STRH            R3, [R0]
MOV             R0, #0
POP             {PC}

loc_2316C
MOV             R0, #0xFFFFFFFF
POP             {PC}
; End of function sub_23120




; void __fastcall sub_23174(void *, int, unsigned __int16 *, int)
sub_23174
PUSH            {R4-R8,LR}
MOV             R5, R2
ADD             R2, R1, #1
MOV             R6, R1
MOV             R2, R2,LSL#2 ; n
MOV             R1, #0  ; c
MOV             R7, R0
MOV             R4, R3
BL              memset

loc_23198
CMP             R4, #3
BLE             loc_231E8
LDRH            R2, [R5]
CMP             R2, #3
BLS             loc_231B4
CMP             R2, R4
BLE             loc_231C8

loc_231B4
LDRH            R2, [R5]
MOV             R1, R4
LDR             R0, =aDeficitDRtaLen ; "deficit %d, rta_len=%d!"
POP             {R4-R8,LR}
B               sub_16DDC

loc_231C8
LDRH            R3, [R5,#2]
ADD             R2, R2, #3
BIC             R2, R2, #3
SUB             R4, R4, R2
CMP             R3, R6
STRLE           R5, [R7,R3,LSL#2]
ADD             R5, R5, R2
B               loc_23198

loc_231E8
CMP             R4, #0
POPEQ           {R4-R8,PC}
B               loc_231B4
; End of function sub_23174

off_231F4 DCD aDeficitDRtaLen ; "deficit %d, rta_len=%d!"



; const char *__fastcall sub_231F8(unsigned __int8 *cp, int, int, char *buf, socklen_t len)
sub_231F8

len=  0x24

CMP             R1, #4
PUSH            {R0,R4-R11,LR}
MOV             R12, R2
LDR             R8, [SP,#4+len]
MOV             R2, R3  ; buf
BNE             loc_2329C
BIC             R4, R12, #8
MOVW            R3, #0x30A
CMP             R12, R3
CMPNE           R4, #0x300
MOVEQ           R4, #1
MOVNE           R4, #0
BNE             loc_232A0
MOV             R1, R0  ; cp
MOV             R3, R8  ; len
MOV             R0, #2  ; af
ADD             SP, SP, #4
POP             {R4-R11,LR}
B               inet_ntop

loc_23244
CMP             R5, #0
ADD             R0, R6, R4 ; s
BNE             loc_23280
MOV             R1, R8  ; maxlen
ADD             R4, R4, #2
SUB             R8, R8, #2
LDRB            R3, [R7]
MOV             R2, R11 ; format
BL              snprintf

loc_23268
ADD             R5, R5, #1

loc_2326C
CMP             R5, R10
BLT             loc_23244
MOV             R0, R6
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_23280               ; maxlen
MOV             R1, R8
LDRB            R3, [R7,R5]
MOV             R2, R9  ; format
SUB             R8, R8, #3
BL              snprintf
ADD             R4, R4, #3
B               loc_23268

loc_2329C
MOV             R4, #0

loc_232A0
LDR             R9, =(aMac02x02x02x02+0x1C) ; ":%02x"
MOV             R5, R4
MOV             R6, R2
MOV             R10, R1
MOV             R7, R0
ADD             R11, R9, #1
B               loc_2326C
; End of function sub_231F8

off_232BC DCD aMac02x02x02x02+0x1C ; ":%02x"



; int __fastcall sub_232C0(_DWORD *, int, char *s)
sub_232C0

var_14= -0x14
var_10= -0x10

PUSH            {R4-R10,LR}
MOV             R8, R0
SUB             SP, SP, #0x18
MOV             R7, R1
MOV             R0, R2  ; s
MOV             R1, #0x2E ; '.' ; c
MOV             R5, R2
BL              strchr
SUBS            R4, R0, #0
BEQ             loc_23390
MOV             R2, #2
MOV             R1, R5
ADD             R0, SP, #0x18+var_14
BL              sub_23B64
CMP             R0, #0
BEQ             loc_23310

loc_23300
MOV             R1, R5
LDR             R0, =aSIsInvalidLlad ; "\"%s\" is invalid lladdr"
BL              sub_16DDC
B               loc_23324

loc_23310
CMP             R7, #3
LDRGT           R3, [SP,#0x18+var_10]
MOVGT           R0, #4
STRGT           R3, [R8]
BGT             loc_23328

loc_23324
MOV             R0, #0xFFFFFFFF

loc_23328
ADD             SP, SP, #0x18
POP             {R4-R10,PC}

loc_23330               ; c
MOV             R1, #0x3A ; ':'
MOV             R0, R5  ; s
BL              strchr
SUBS            R6, R0, #0
ADD             R2, SP, #0x18+var_14
STRBNE          R9, [R6],#1
MOV             R1, R10 ; format
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #1
BNE             loc_23300
LDR             R3, [SP,#0x18+var_14]
CMP             R3, #0xFF
BHI             loc_23300
CMP             R6, #0
STRB            R3, [R8,R4]
ADD             R3, R4, #1
BEQ             loc_23388
MOV             R4, R3
MOV             R5, R6

loc_23380
CMP             R4, R7
BLT             loc_23330

loc_23388
ADD             R0, R4, #1
B               loc_23328

loc_23390
MOV             R9, R4
LDR             R10, =(aUnrecognizedFi_0+0x21) ; "%x"
B               loc_23380
; End of function sub_232C0

off_2339C DCD aSIsInvalidLlad ; "\"%s\" is invalid lladdr"
off_233A0 DCD aUnrecognizedFi_0+0x21 ; "%x"



; _DWORD *__fastcall sub_233A4(int)
sub_233A4
LDR             R3, =dword_7D61C
MOV             R2, R0
LDR             R3, [R3]
CMP             R3, #0
ANDNE           R1, R0, #0xF
LDRNE           R0, [R3,R1,LSL#2]
BNE             loc_233D8
MOV             R0, R3
BX              LR

loc_233C8
LDR             R3, [R0,#4]
CMP             R3, R2
BXEQ            LR
LDR             R0, [R0]

loc_233D8
CMP             R0, #0
BXEQ            LR
B               loc_233C8
; End of function sub_233A4

off_233E4 DCD dword_7D61C



; int __fastcall sub_233E8(int, int)
sub_233E8

var_BC= -0xBC
var_B4= -0xB4

LDRH            R3, [R1,#4]
CMP             R3, #0x10
BEQ             loc_233FC
MOV             R0, #0
BX              LR

loc_233FC
LDR             R3, [R1]
CMP             R3, #0x13
BLS             loc_23500
PUSH            {R4-R6,LR}
SUB             SP, SP, #0xB0
SUB             R3, R3, #0x20 ; ' '
ADD             R2, R1, #0x20 ; ' '
MOV             R5, R1
MOV             R0, SP
MOV             R1, #0x2B ; '+'
BL              sub_23174
LDR             R3, [SP,#0xC0+var_B4]
CMP             R3, #0
BEQ             loc_234E0
LDR             R4, =dword_7D61C
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_23450
MOV             R0, #0x40 ; '@'
BL              sub_174DC
STR             R0, [R4]

loc_23450
LDR             R3, [R5,#0x14]
LDR             R6, [R4]
AND             R2, R3, #0xF
ADD             R6, R6, R2,LSL#2

loc_23460
LDR             R4, [R6]
CMP             R4, #0
BNE             loc_234EC
MOV             R0, #0x2C ; ','
BL              sub_1748C
LDR             R3, [R6]
MOV             R4, R0
STR             R3, [R0]
LDR             R3, [R5,#0x14]
STR             R3, [R0,#4]
STR             R0, [R6]

loc_2348C
LDRH            R3, [R5,#0x12]
ADD             R0, R4, #0x14 ; dest
LDR             R1, [SP,#0xC0+var_BC]
STR             R3, [R4,#8]
LDR             R3, [R5,#0x18]
CMP             R1, #0
STREQ           R1, [R4,#0xC]
STREQ           R1, [R4,#0x14]
STR             R3, [R4,#0x10]
STREQ           R1, [R0,#4]
BEQ             loc_234D0
LDRH            R2, [R1],#4 ; src
SUB             R2, R2, #4
CMP             R2, #8
STR             R2, [R4,#0xC]
MOVGE           R2, #8  ; n
BL              memcpy

loc_234D0
LDR             R1, [SP,#0xC0+var_B4]
ADD             R0, R4, #0x1C ; dest
ADD             R1, R1, #4 ; src
BL              strcpy

loc_234E0
MOV             R0, #0
ADD             SP, SP, #0xB0
POP             {R4-R6,PC}

loc_234EC
LDR             R2, [R4,#4]
CMP             R3, R2
BEQ             loc_2348C
MOV             R6, R4
B               loc_23460

loc_23500
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_233E8

off_23508 DCD dword_7D61C



; const char *__fastcall sub_2350C(int)
sub_2350C
PUSH            {R4,LR}
SUBS            R4, R0, #0
BEQ             loc_23540
BL              sub_233A4
CMP             R0, #0
BEQ             loc_2352C
ADD             R0, R0, #0x1C
POP             {R4,PC}

loc_2352C
MOV             R1, R4
LDR             R0, =aIfD ; "if%d"
BL              sub_177E4
POP             {R4,LR}
B               sub_57710

loc_23540
LDR             R0, =(asc_69C62+1) ; "*"
POP             {R4,PC}
; End of function sub_2350C

off_23548 DCD aIfD      ; "if%d"
off_2354C DCD asc_69C62+1 ; "*"



; _DWORD *__fastcall sub_23550(int)
sub_23550
SUBS            R3, R0, #0
BEQ             loc_2356C
PUSH            {R4,LR}
BL              sub_233A4
CMP             R0, #0
LDRNE           R0, [R0,#0x10]
POP             {R4,PC}

loc_2356C
MOV             R0, R3
BX              LR
; End of function sub_23550




; int __fastcall sub_23574(const char *)
sub_23574
PUSH            {R4,LR}
MOV             R4, R0
BL              if_nametoindex
CMP             R0, #0
POPGT           {R4,PC}
MOV             R1, R4
LDR             R0, =aCanTFindDevice ; "can't find device '%s'"
BL              sub_16DBC
; End of function sub_23574

off_23594 DCD aCanTFindDevice ; "can't find device '%s'"



; int __fastcall sub_23598(int *, int, int, int)
sub_23598
PUSH            {R4,LR}
MOV             R2, #0x12
MOV             R4, R0
MOV             R1, #0
BL              sub_22B8C
MOV             R2, #0
LDR             R1, =sub_233E8
MOV             R0, R4
BL              sub_22BD8
MOV             R0, #0
POP             {R4,PC}
; End of function sub_23598

off_235C4 DCD sub_233E8



; const char *__fastcall sub_235C8(int, char *)
sub_235C8
PUSH            {R4-R8,LR}
MOV             R7, R0
LDR             R5, =unk_642E0
MOV             R6, R1
LDR             R4, =s  ; "generic"
ADD             R8, R5, #0x26 ; '&'

loc_235E0
LDRH            R3, [R5,#2]!
CMP             R3, R7
BEQ             loc_23618
MOV             R0, R4  ; s
BL              strlen
CMP             R5, R8
ADD             R0, R0, #1
ADD             R4, R4, R0
BNE             loc_235E0
MOV             R4, R6
MOV             R2, R7
LDR             R1, =aD ; "[%d]"
MOV             R0, R6  ; s
BL              sprintf

loc_23618
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_235C8

off_23620 DCD unk_642E0
off_23624 DCD s         ; "generic"
off_23628 DCD aD        ; "[%d]"



; void __fastcall sub_2362C(const char *, int)
sub_2362C

var_30= -0x30
var_2C= -0x2C
s= -0x28

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x34
MOV             R2, R0
MOV             R5, R0
MOV             R9, R1
ADD             R0, SP, #0x34+s ; s
LDR             R1, =aEtcIproute2RtS ; "/etc/iproute2/rt_%s"
LDR             R8, =asc_65657 ; "# "
LDR             R7, =0x470202
BL              sprintf
LDR             R1, =sub_61C9C
ADD             R0, SP, #0x34+s
BL              sub_5DDC4
MOV             R4, R0

loc_23664
MOV             R3, R8
MOV             R2, R7
ADD             R1, SP, #0x34+var_30
MOV             R0, R4
BL              sub_5DE1C
CMP             R0, #0
BEQ             loc_236AC
MOV             R2, #0
LDR             R0, [SP,#0x34+var_30]
MOV             R1, R2
BL              sub_18990
CMP             R0, #0x400
MOV             R6, R0
BCC             loc_236BC
LDR             R2, [R4,#0x18]
MOV             R1, R5
LDR             R0, =aDatabaseSIsCor ; "database %s is corrupted at line %d"
BL              sub_16DDC

loc_236AC
MOV             R0, R4
BL              sub_5DDEC
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R9,PC}

loc_236BC
LDR             R0, [SP,#0x34+var_2C]
BL              sub_174F8
STR             R0, [R9,R6,LSL#2]
B               loc_23664
; End of function sub_2362C

off_236CC DCD aEtcIproute2RtS ; "/etc/iproute2/rt_%s"
off_236D0 DCD asc_65657 ; "# "
dword_236D4 DCD 0x470202
off_236D8 DCD sub_61C9C
off_236DC DCD aDatabaseSIsCor ; "database %s is corrupted at line %d"



; void sub_236E0()
sub_236E0
PUSH            {R4,LR}
LDR             R4, =dword_7D624
LDR             R3, [R4]
CMP             R3, #0
POPNE           {R4,PC}
MOVW            R0, #0x1008
BL              sub_174DC
LDR             R3, =aGlobal ; "global"
ADD             R1, R0, #8
STR             R0, [R4]
POP             {R4,LR}
STR             R3, [R0,#8]
LDR             R3, =aNowhere ; "nowhere"
STR             R3, [R0,#0x404]
LDR             R3, =(aHost+1) ; "host"
STR             R3, [R0,#0x400]
LDR             R3, =(aNotASymlink+9) ; "link"
STR             R3, [R0,#0x3FC]
LDR             R3, =aSite ; "site"
STR             R3, [R0,#0x328]
LDR             R0, =aScopes ; "scopes"
B               sub_2362C
; End of function sub_236E0

off_23738 DCD dword_7D624
off_2373C DCD aGlobal   ; "global"
off_23740 DCD aNowhere  ; "nowhere"
off_23744 DCD aHost+1   ; "host"
off_23748 DCD aNotASymlink+9 ; "link"
off_2374C DCD aSite     ; "site"
off_23750 DCD aScopes   ; "scopes"



; int __fastcall sub_23754(int, unsigned int *, char *s2, char *)
sub_23754
PUSH            {R4-R10,LR}
MOV             R5, R0
LDR             R0, [R0] ; s1
MOV             R6, R1
MOV             R7, R2
MOV             R10, R3
CMP             R0, #0
BEQ             loc_23790
MOV             R1, R2  ; s2
BL              strcmp
CMP             R0, #0
BNE             loc_23790
LDR             R3, [R5,#4]
STR             R3, [R6]
POP             {R4-R10,PC}

loc_23790
ADD             R9, R5, #8
MOV             R4, #0

loc_23798
LDR             R8, [R9],#4
CMP             R8, #0
BEQ             loc_237C8
MOV             R1, R7  ; s2
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_237C8
STR             R8, [R5]
STR             R4, [R5,#4]
STR             R4, [R6]
POP             {R4-R10,PC}

loc_237C8
ADD             R4, R4, #1
CMP             R4, #0x400
BNE             loc_23798
MOV             R2, R10
MOV             R1, #0
MOV             R0, R7
BL              sub_18990
CMP             R0, #0x400
STRCC           R0, [R6]
MOVCC           R0, #0
MOVCS           R0, #0xFFFFFFFF
POP             {R4-R10,PC}
; End of function sub_23754




; int __fastcall sub_237F8(unsigned int *, char *s2)
sub_237F8
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R4, =dword_7D620
MOV             R6, R1
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_23864
MOVW            R0, #0x1008
BL              sub_174DC
LDR             R12, =off_63580 ; "none"
ADD             R3, R0, #8
MOV             R2, R3
STR             R0, [R4]
ADD             R7, R12, #0x30 ; '0'

loc_23830
MOV             LR, R12
ADD             R2, R2, #8
LDM             LR!, {R0,R1}
CMP             LR, R7
STR             R0, [R2,#-8]
STR             R1, [R2,#-4]
MOV             R12, LR
BNE             loc_23830
LDR             R0, [LR]
MOV             R1, R3
STR             R0, [R2]
LDR             R0, =aProtos ; "protos"
BL              sub_2362C

loc_23864               ; s2
MOV             R2, R6
MOV             R1, R5  ; int
LDR             R0, [R4] ; int
MOV             R3, #0
POP             {R4-R8,LR}
B               sub_23754
; End of function sub_237F8

off_2387C DCD dword_7D620
off_23880 DCD off_63580 ; "none"
off_23884 DCD aProtos   ; "protos"



; _BYTE *__fastcall sub_23888(unsigned int)
sub_23888
CMP             R0, #0x400
BCC             loc_23894

loc_23890
B               sub_16F8C

loc_23894
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_236E0
ADD             R2, R4, #2
LDR             R3, =dword_7D624
LDR             R3, [R3]
LDR             R0, [R3,R2,LSL#2]
CMP             R0, #0
POPNE           {R4,PC}
MOV             R0, R4
POP             {R4,LR}
B               loc_23890
; End of function sub_23888

off_238C4 DCD dword_7D624



; int __fastcall sub_238C8(unsigned int *, char *)
sub_238C8
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
BL              sub_236E0
LDR             R0, =dword_7D624
MOV             R2, R5  ; s2
MOV             R1, R4  ; int
MOV             R3, #0
POP             {R4-R6,LR}
LDR             R0, [R0] ; int
B               sub_23754
; End of function sub_238C8

off_238F4 DCD dword_7D624



; char *__fastcall sub_238F8(signed int)
sub_238F8
CMP             R0, #0xB ; switch 12 cases
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_238FC ; jumptable 000238FC default case
jpt_238FC DCD loc_23990 ; jump table for switch statement
DCD loc_23934
DCD loc_2393C
DCD loc_23944
DCD loc_2394C
DCD loc_23954
DCD loc_2395C
DCD loc_23964
DCD loc_2396C
DCD loc_23974
DCD loc_2397C
DCD loc_23984

loc_23934               ; jumptable 000238FC case 1
LDR             R0, =aUnicast ; "unicast"
BX              LR

loc_2393C               ; jumptable 000238FC case 2
LDR             R0, =(a7local+1) ; "local"
BX              LR

loc_23944               ; jumptable 000238FC case 3
LDR             R0, =(aNetBroadcast+4) ; "broadcast"
BX              LR

loc_2394C               ; jumptable 000238FC case 4
LDR             R0, =aAnycast_0 ; "anycast"
BX              LR

loc_23954               ; jumptable 000238FC case 5
LDR             R0, =aMulticast ; "multicast"
BX              LR

loc_2395C               ; jumptable 000238FC case 6
LDR             R0, =aBlackhole ; "blackhole"
BX              LR

loc_23964               ; jumptable 000238FC case 7
LDR             R0, =aUnreachable ; "unreachable"
BX              LR

loc_2396C               ; jumptable 000238FC case 8
LDR             R0, =aProhibit ; "prohibit"
BX              LR

loc_23974               ; jumptable 000238FC case 9
LDR             R0, =aThrow ; "throw"
BX              LR

loc_2397C               ; jumptable 000238FC case 10
LDR             R0, =aNat ; "nat"
BX              LR

loc_23984               ; jumptable 000238FC case 11
LDR             R0, =aXresolve ; "xresolve"
BX              LR

def_238FC               ; jumptable 000238FC default case
B               sub_16F8C

loc_23990               ; jumptable 000238FC case 0
LDR             R0, =aNone_0 ; "none"
BX              LR
; End of function sub_238F8

off_23998 DCD aUnicast  ; "unicast"
off_2399C DCD a7local+1 ; "local"
off_239A0 DCD aNetBroadcast+4 ; "broadcast"
off_239A4 DCD aAnycast_0 ; "anycast"
off_239A8 DCD aMulticast ; "multicast"
off_239AC DCD aBlackhole ; "blackhole"
off_239B0 DCD aUnreachable ; "unreachable"
off_239B4 DCD aProhibit ; "prohibit"
off_239B8 DCD aThrow    ; "throw"
off_239BC DCD aNat      ; "nat"
off_239C0 DCD aXresolve ; "xresolve"
off_239C4 DCD aNone_0   ; "none"



; int __fastcall sub_239C8(unsigned int *, char *, char *)
sub_239C8

endptr= -8

PUSH            {R0-R2,R4,R5,LR}
MOV             R5, R0
LDR             R0, =aLocal_0 ; "local"
MOV             R4, R1
BL              sub_168D4
ADD             R3, R0, #1
CMP             R3, #1
BEQ             loc_23A78
CMP             R3, #2
BEQ             loc_23A80
SUB             R0, R0, #2
CMP             R0, #1
BLS             loc_23A88
CMP             R3, #5
BEQ             loc_23A90
CMP             R3, #6
BEQ             loc_23A98
CMP             R3, #7
BEQ             loc_23AA0
CMP             R3, #8
BEQ             loc_23AA8
CMP             R3, #9
BEQ             loc_23AB0
CMP             R3, #0xA
BEQ             loc_23AB8
CMP             R3, #0xB
BEQ             loc_23AC0
CMP             R3, #0xC
BEQ             loc_23AC8
MOV             R2, #0  ; base
ADD             R1, SP, #0xC+endptr ; endptr
MOV             R0, R4  ; nptr
BL              strtoul
LDR             R3, [SP,#0xC+endptr]
CMP             R3, R4
BEQ             loc_23AD0
LDRB            R3, [R3]
CMP             R0, #0xFF
CMPLS           R3, #0
BNE             loc_23AD0

loc_23A68
STR             R0, [R5]
MOV             R0, #0

loc_23A70
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_23A78
MOV             R0, #2
B               loc_23A68

loc_23A80
MOV             R0, #0xA
B               loc_23A68

loc_23A88
MOV             R0, #3
B               loc_23A68

loc_23A90
MOV             R0, #4
B               loc_23A68

loc_23A98
MOV             R0, #5
B               loc_23A68

loc_23AA0
MOV             R0, #8
B               loc_23A68

loc_23AA8
MOV             R0, #7
B               loc_23A68

loc_23AB0
MOV             R0, #6
B               loc_23A68

loc_23AB8
MOV             R0, #0xB
B               loc_23A68

loc_23AC0
MOV             R0, #1
B               loc_23A68

loc_23AC8
MOV             R0, #9
B               loc_23A68

loc_23AD0
MOV             R0, #0xFFFFFFFF
B               loc_23A70
; End of function sub_239C8

; const int off_23AD8
off_23AD8 DCD aLocal_0  ; "local"



; int __fastcall sub_23ADC(int, int, int)
sub_23ADC

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R0-R2,R4,R5,LR}
LDR             R4, =dword_7D628
LDR             R0, [R4]
CMP             R0, #0
BNE             loc_23B4C
LDR             R0, =aProcNetPsched ; "/proc/net/psched"
BL              sub_61C9C
SUBS            R5, R0, #0
BEQ             loc_23B34
ADD             R3, SP, #0xC+var_8
MOV             R2, SP
LDR             R1, =a08x08x08x08x ; "%*08x%*08x%08x%08x"
BL              fscanf
CMP             R0, #2
BNE             loc_23B2C
LDR             R3, =0xF4240
LDR             R2, [SP,#0xC+var_C]
CMP             R2, R3
LDREQ           R3, [SP,#0xC+var_8]
STREQ           R3, [R4]

loc_23B2C               ; stream
MOV             R0, R5
BL              fclose

loc_23B34
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_23B48
BL              sub_60F80
STR             R0, [R4]

loc_23B48
LDR             R0, [R4]

loc_23B4C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_23ADC

off_23B54 DCD dword_7D628
off_23B58 DCD aProcNetPsched ; "/proc/net/psched"
off_23B5C DCD a08x08x08x08x ; "%*08x%*08x%08x%08x"
dword_23B60 DCD 0xF4240



; unsigned int __fastcall sub_23B64(_BYTE *, const char *, int)
sub_23B64
PUSH            {R4-R6,LR}
MOV             R6, R1
MOV             R4, R2
MOV             R1, #0  ; c
MOV             R2, #0x14 ; n
MOV             R5, R0
BL              memset
LDR             R1, =aDefault ; "default"
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_23BBC
LDR             R1, =(aBufferUTooSmal+0x10) ; s2
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_23BBC
LDR             R1, =aAny ; "any"
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_23BE0

loc_23BBC
CMP             R4, #0xA
STRB            R4, [R5]
MOVEQ           R3, #0x10
MOVNE           R3, #4

loc_23BCC
STRB            R3, [R5,#1]
MOV             R3, #0xFFFFFFFF
STRH            R3, [R5,#2]
MOV             R0, #0
POP             {R4-R6,PC}

loc_23BE0               ; c
MOV             R1, #0x3A ; ':'
MOV             R0, R6  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_23C3C
MOV             R0, #0xA ; af
SUBS            R3, R4, R0
STRB            R0, [R5]
MOVNE           R3, #1
CMP             R4, #0
MOVNE           R4, R3
MOVEQ           R4, #0
CMP             R4, #0
BEQ             loc_23C20

loc_23C18
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_23C20               ; buf
ADD             R2, R5, #4
MOV             R1, R6  ; cp
BL              inet_pton
CMP             R0, #0
MOVGT           R3, #0x10
BGT             loc_23BCC
B               loc_23C18

loc_23C3C
BICS            R0, R4, #2
BNE             loc_23C18
MOV             R3, #2
SUB             R6, R6, #1
STRB            R3, [R5]
MOV             R2, R0
MOV             R3, R0
MOV             LR, #0xA

loc_23C5C
LDRB            R12, [R6,#1]!
CMP             R12, #0
BNE             loc_23C7C
MOV             R3, #4
STRB            R3, [R5,#1]
MOV             R3, #0xFFFFFFFF
STRH            R3, [R5,#2]
POP             {R4-R6,PC}

loc_23C7C
SUB             R1, R12, #0x30 ; '0'
UXTB            R1, R1
CMP             R1, #9
BHI             loc_23CA4
MLA             R3, LR, R3, R1
CMP             R3, #0xFF
BHI             loc_23C18
ADD             R1, R5, R2
STRB            R3, [R1,#4]
B               loc_23C5C

loc_23CA4
CMP             R12, #0x2E ; '.'
BNE             loc_23C18
ADD             R2, R2, #1
CMP             R2, #3
BHI             loc_23C18
MOV             R3, #0
B               loc_23C5C
; End of function sub_23B64

off_23CC0 DCD aDefault  ; "default"
off_23CC4 DCD aBufferUTooSmal+0x10 ; "all"
off_23CC8 DCD aAny      ; "any"



; unsigned int __fastcall sub_23CCC(_BYTE *, const char *, int)
sub_23CCC
CMP             R2, #0x11
PUSH            {R4,LR}
BNE             loc_23CE4
LDR             R2, =(aCommandCUsesOn+0x1B) ; "address"
LDR             R0, =aSMayBeInetSBut ; "\"%s\" may be inet %s, but it is not al"...
BL              sub_16DBC

loc_23CE4
MOV             R4, R1
BL              sub_23B64
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R3, R4
LDR             R2, =(aCommandCUsesOn+0x1B) ; "address"
LDR             R1, =aInet_0 ; "inet"
LDR             R0, =aAnSSIsExpected ; "an %s %s is expected rather than \"%s\""
BL              sub_16DBC
; End of function sub_23CCC

off_23D08 DCD aCommandCUsesOn+0x1B ; "address"
off_23D0C DCD aSMayBeInetSBut ; "\"%s\" may be inet %s, but it is not al"...
off_23D10 DCD aInet_0   ; "inet"
off_23D14 DCD aAnSSIsExpected ; "an %s %s is expected rather than \"%s\""



; unsigned int __fastcall sub_23D18(_WORD *, const char *, int)
sub_23D18

var_18= -0x18
var_14= -0x14

CMP             R2, #0x11
PUSH            {R4-R9,LR}
SUB             SP, SP, #0x1C
BNE             loc_23D34
LDR             R2, =aPrefix ; "prefix"
LDR             R0, =aSMayBeInetSBut ; "\"%s\" may be inet %s, but it is not al"...
BL              sub_16DBC

loc_23D34
MOV             R6, R1
MOV             R8, R2
MOV             R1, #0  ; c
MOV             R2, #0x14 ; n
MOV             R5, R0
BL              memset
LDR             R1, =aDefault ; "default"
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_23D88
LDR             R1, =(aBufferUTooSmal+0x10) ; s2
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_23D88
LDR             R1, =aAny ; "any"
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_23D94

loc_23D88
STRB            R8, [R5]

loc_23D8C
ADD             SP, SP, #0x1C
POP             {R4-R9,PC}

loc_23D94               ; c
MOV             R1, #0x2F ; '/'
MOV             R0, R6  ; s
BL              strchr
SUBS            R7, R0, #0
MOV             R2, R8
MOVNE           R3, #0
MOV             R1, R6
STRBNE          R3, [R7]
MOV             R0, R5
BL              sub_23B64
SUBS            R2, R0, #0
BNE             loc_23E98
LDRB            R3, [R5]
CMP             R3, #0xA
MOVEQ           R3, #0x80
MOVNE           R3, #0x20 ; ' '
CMP             R7, #0
STRH            R3, [R5,#2]
BEQ             loc_23D8C
ADD             R9, R7, #1
MOV             R1, R2
MOV             R0, R9
STRB            R2, [SP,#0x1C+var_18]
BL              sub_18990
LDR             R3, =dword_7DB94
MOV             R4, R0
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_23E34
LDRSH           R3, [R5,#2]
CMP             R0, R3
BHI             loc_23E34

loc_23E18
LDRB            R3, [SP,#0x1C+var_18]
CMP             R3, #2
BEQ             loc_23E60

loc_23E24
STRH            R4, [R5,#2]

loc_23E28
MOV             R3, #0x2F ; '/'
STRB            R3, [R7]
B               loc_23D8C

loc_23E34
MOV             R2, R8
MOV             R1, R9
ADD             R0, SP, #0x1C+var_18
BL              sub_23B64
CMP             R0, #0
BEQ             loc_23E18

loc_23E4C
MOV             R3, R6
LDR             R2, =aPrefix ; "prefix"
LDR             R1, =aInet_0 ; "inet"
LDR             R0, =aAnSSIsExpected ; "an %s %s is expected rather than \"%s\""
BL              sub_16DBC

loc_23E60
LDR             R3, [SP,#0x1C+var_14]
REV             R3, R3
RSB             R4, R3, #0
BICS            R4, R4, R3
BNE             loc_23E4C

loc_23E74
CMP             R3, #0
BNE             loc_23E8C
LDRSH           R3, [R5,#2]
CMP             R4, R3
BHI             loc_23E4C
B               loc_23E24

loc_23E8C
ADD             R4, R4, #1
MOV             R3, R3,LSL#1
B               loc_23E74

loc_23E98
CMP             R7, #0
BEQ             loc_23D8C
B               loc_23E28
; End of function sub_23D18

off_23EA4 DCD aPrefix   ; "prefix"
off_23EA8 DCD aSMayBeInetSBut ; "\"%s\" may be inet %s, but it is not al"...
off_23EAC DCD aDefault  ; "default"
off_23EB0 DCD aBufferUTooSmal+0x10 ; "all"
off_23EB4 DCD aAny      ; "any"
off_23EB8 DCD dword_7DB94
off_23EBC DCD aInet_0   ; "inet"
off_23EC0 DCD aAnSSIsExpected ; "an %s %s is expected rather than \"%s\""



; int __fastcall sub_23EC4(int)
sub_23EC4
LDR             R3, [R0,#4]
CMP             R3, #0
BNE             loc_23EDC
PUSH            {R4,LR}
LDR             R0, =aCommandLineIsN ; "command line is not complete, try \"hel"...
BL              sub_16DBC

loc_23EDC
ADD             R0, R0, #4
BX              LR
; End of function sub_23EC4

off_23EE4 DCD aCommandLineIsN ; "command line is not complete, try \"hel"...


; Attributes: noreturn

; void __fastcall __noreturn sub_23EE8(const char *, const char *)
sub_23EE8
MOV             R2, R1
PUSH            {R4,LR}
MOV             R1, R0
LDR             R0, =aInvalidArgumen ; "invalid argument '%s' to '%s'"
BL              sub_16DBC
; End of function sub_23EE8

off_23EFC DCD aInvalidArgumen ; "invalid argument '%s' to '%s'"



; unsigned int __fastcall sub_23F00(const char *, char *, char *)
sub_23F00

endptr= -8

PUSH            {R0-R2,R4,R5,LR}
MOV             R4, R0
LDRB            R3, [R0]
MOV             R5, R1
CMP             R3, #0
BEQ             loc_23F34
MOV             R2, #0  ; base
ADD             R1, SP, #0xC+endptr ; endptr
BL              strtoul
LDR             R3, [SP,#0xC+endptr]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_23F40

loc_23F34
MOV             R1, R5
MOV             R0, R4
BL              sub_23EE8

loc_23F40
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_23F00



; Attributes: thunk

; int __fastcall sub_23F48(_DWORD, _DWORD)
sub_23F48
B               sub_23F00
; End of function sub_23F48




; unsigned int __fastcall sub_23F4C(const char *, char *, char *)
sub_23F4C

endptr= -8

PUSH            {R0-R2,R4,R5,LR}
MOV             R4, R0
LDRB            R3, [R0]
MOV             R5, R1
CMP             R3, #0
BEQ             loc_23F94
MOV             R2, #0  ; base
ADD             R1, SP, #0xC+endptr ; endptr
BL              strtoul
LDR             R3, [SP,#0xC+endptr]
CMP             R0, #0x10000
LDRB            R2, [R3]
MOVCS           R3, #0
MOVCC           R3, #1
CMP             R2, #0
MOVNE           R3, #0
CMP             R3, #0
BNE             loc_23FA0

loc_23F94
MOV             R1, R5
MOV             R0, R4
BL              sub_23EE8

loc_23FA0
UXTH            R0, R0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_23F4C



; Attributes: noreturn

; void __fastcall __noreturn sub_23FAC(const char *, const char *)
sub_23FAC
MOV             R2, R1
PUSH            {R4,LR}
MOV             R1, R0
LDR             R0, =aDuplicateSSIsT ; "duplicate \"%s\": \"%s\" is the second "...
BL              sub_16DBC
; End of function sub_23FAC

off_23FC0 DCD aDuplicateSSIsT ; "duplicate \"%s\": \"%s\" is the second "...


; Attributes: noreturn

; void __fastcall __noreturn sub_23FC4(const char *, const char *)
sub_23FC4
MOV             R2, R1
PUSH            {R4,LR}
MOV             R1, R0
LDR             R0, =aEitherSIsDupli ; "either \"%s\" is duplicate, or \"%s\" i"...
BL              sub_16DBC
; End of function sub_23FC4

off_23FD8 DCD aEitherSIsDupli ; "either \"%s\" is duplicate, or \"%s\" i"...



; int __fastcall sub_23FDC(int, int, int)
sub_23FDC
PUSH            {R4-R8,LR}
MOVS            R5, R2,ASR#5
ADD             R7, R0, #4
ADD             R6, R1, #4
AND             R4, R2, #0x1F
BEQ             loc_24010
MOV             R2, R5,LSL#2 ; n
MOV             R1, R6  ; s2
MOV             R0, R7  ; s1
BL              memcmp
CMP             R0, #0
MOVNE           R4, #0xFFFFFFFF
BNE             loc_24040

loc_24010
CMP             R4, #0
BEQ             loc_24040
MOV             R3, #0xFFFFFFFF
RSB             R4, R4, #0x20 ; ' '
MOV             R4, R3,LSL R4
LDR             R2, [R6,R5,LSL#2]
LDR             R3, [R7,R5,LSL#2]
REV             R4, R4
EOR             R3, R3, R2
TST             R3, R4
MOVNE           R4, #1
MOVEQ           R4, #0

loc_24040
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_23FDC




; const char *__fastcall sub_24048(int, const void *)
sub_24048
CMP             R0, #2
BEQ             loc_24058
CMP             R0, #0xA
BNE             loc_24088

loc_24058
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, #0x2E ; '.'
MOV             R5, R1
BL              sub_174DC
BL              sub_57710
MOV             R1, R5  ; cp
MOV             R2, R0  ; buf
MOV             R3, #0x2E ; '.' ; len
MOV             R0, R4  ; af
POP             {R4-R6,LR}
B               inet_ntop

loc_24088
LDR             R0, =asc_66E31 ; "???"
BX              LR
; End of function sub_24048

off_24090 DCD asc_66E31 ; "???"



; _BYTE *__fastcall sub_24094(char, const void *, int)
sub_24094
PUSH            {R4-R10,LR}
MOV             R6, R1
MOV             R5, R2
MOV             R9, R0
MOV             R1, #0xFF
MOV             R0, R6
BL              strnlen
ADD             R8, R0, R5
MOV             R7, R0
ADD             R0, R8, #2
BL              sub_174DC
MOV             R4, R0
STRB            R9, [R0]
STRB            R8, [R0,#1]
ADD             R0, R5, #2
MOV             R2, R7  ; n
MOV             R1, R6  ; src
ADD             R0, R4, R0 ; dest
BL              memcpy
MOV             R0, R4
POP             {R4-R10,PC}
; End of function sub_24094




; void __fastcall sub_240E8(int, unsigned int)
sub_240E8
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_26090
BL              rand
STR             R0, [R4,#4]
BL              sub_1882C
LDR             R3, =buf
UXTH            R0, R0
MOVW            R2, #(word_7D9DE - 0x7D790)
STRH            R0, [R3,R2] ; word_7D9DE
ADD             R2, R3, #0x24C
LDRH            R12, [R2]
CMP             R12, #0
MOVEQ           R1, R0
STRHEQ          R1, [R2]
LDRH            R2, [R2]
SUB             R0, R0, R2
LDR             R2, =dword_7D990
REV16           R0, R0
STRH            R0, [R4,#8]
LDR             R0, [R2]
STR             R0, [R4,#0x1C]
LDRH            R2, [R2,#(word_7D994 - 0x7D990)]
STRH            R2, [R4,#0x20]
LDR             R1, [R3,#(dword_7D9CC - 0x7D790)]
CMP             R1, #0
POPEQ           {R4,PC}
MOV             R0, R4
POP             {R4,LR}
B               sub_26D10
; End of function sub_240E8

off_24160 DCD buf
off_24164 DCD dword_7D990



; void __fastcall sub_24168(__int64)
sub_24168
PUSH            {R4-R6,LR}
MOVW            R2, #0x4002
MOV             R4, R0
MOV             R1, #0x39 ; '9'
BL              sub_26D7C
ADD             R0, R4, #0xF0
BL              sub_26CDC
LDR             R12, =buf
MOV             R3, #0
MOV             R2, #1
MOV             R5, R12

loc_24194
ADD             R1, R12, R2,ASR#3
AND             LR, R2, #7
LDRB            R1, [R1,#0x20C]
MOV             R1, R1,ASR LR
TST             R1, #1
ADDNE           R1, R4, R3
ADDNE           R3, R3, #1
ADDNE           R1, R1, R0
STRBNE          R2, [R1,#0xF2]
ADD             R2, R2, #1
CMP             R2, #0xFF
BNE             loc_24194
CMP             R3, #0
BEQ             loc_241EC
ADD             R2, R4, R0
MOV             R1, #0x37 ; '7'
STRB            R3, [R2,#0xF1]
ADD             R3, R4, R3
ADD             R0, R3, R0
MOV             R3, #0xFFFFFFFF
STRB            R1, [R2,#0xF0]
STRB            R3, [R0,#0xF2]

loc_241EC
LDR             R1, [R5,#(dword_7D9D0 - 0x7D790)]
CMP             R1, #0
BEQ             loc_24200
MOV             R0, R4
BL              sub_26D10

loc_24200
LDR             R1, [R5,#(dword_7D9D4 - 0x7D790)]
CMP             R1, #0
BEQ             loc_24214
MOV             R0, R4
BL              sub_26D10

loc_24214
LDR             R1, [R5,#(dword_7D9D8 - 0x7D790)]
CMP             R1, #0
BEQ             loc_24228
MOV             R0, R4
BL              sub_26D10

loc_24228
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #0x100000
BEQ             loc_2424C
LDR             R3, [R4,#0xC]
CMP             R3, #0
LDRHEQ          R3, [R4,#0xA]
ORREQ           R3, R3, #0x80
STRHEQ          R3, [R4,#0xA]

loc_2424C
LDR             R5, [R5,#(dword_7D9C8 - 0x7D790)]

loc_24250
CMP             R5, #0
POPEQ           {R4-R6,PC}
LDR             R1, [R5]
MOV             R0, R4
BL              sub_26D10
LDR             R5, [R5,#4]
B               loc_24250
; End of function sub_24168

off_2426C DCD buf
off_24270 DCD dword_7DBC0



; ssize_t __fastcall sub_24274(const void *, int)
sub_24274

var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R0-R4,LR}
MOV             R2, #0x44 ; 'D'
LDR             R3, =buf
LDR             R3, [R3,#(dword_7D998 - 0x7D790)]
STR             R3, [SP,#0x10+var_8]
LDR             R3, =dword_64308
STR             R3, [SP,#0x10+var_C]
MOV             R3, #0x43 ; 'C'
STR             R3, [SP,#0x10+var_10]
MOV             R3, #0xFFFFFFFF
BL              sub_26248
ADD             SP, SP, #0x14
POP             {PC}
; End of function sub_24274

off_242A8 DCD buf
off_242AC DCD dword_64308



; ssize_t __fastcall sub_242B0(int, int)
sub_242B0

var_278= -0x278
var_274= -0x274

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x27C
MOV             R5, R0
MOV             R4, R1
ADD             R0, SP, #0x27C+var_278
MOV             R1, #1
BL              sub_240E8
CMP             R4, #0
STR             R5, [SP,#0x27C+var_274]
BEQ             loc_242E8
MOV             R2, R4
MOV             R1, #0x32 ; '2'
ADD             R0, SP, #0x27C+var_278
BL              sub_26D7C

loc_242E8
ADD             R0, SP, #0x27C+var_278
BL              sub_24168
LDR             R1, =aDiscover ; "discover"
LDR             R0, =aSendingS ; "sending %s"
BL              sub_16DDC
MOV             R1, #0
ADD             R0, SP, #0x27C+var_278
BL              sub_24274
ADD             SP, SP, #0x27C
POP             {R4,R5,PC}
; End of function sub_242B0

off_24310 DCD aDiscover ; "discover"
off_24314 DCD aSendingS ; "sending %s"



; ssize_t __fastcall sub_24318(int, int, int)
sub_24318

var_274= -0x274
var_270= -0x270

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x278
MOV             R4, R2
MOV             R6, R0
MOV             R5, R1
ADD             R0, SP, #0x278+var_274
MOV             R1, #3
BL              sub_240E8
MOV             R2, R4
ADD             R0, SP, #0x278+var_274
MOV             R1, #0x32 ; '2'
STR             R6, [SP,#0x278+var_270]
BL              sub_26D7C
MOV             R2, R5
MOV             R1, #0x36 ; '6'
ADD             R0, SP, #0x278+var_274
BL              sub_26D7C
ADD             R0, SP, #0x278+var_274
BL              sub_24168
MOV             R0, R4  ; in
BL              inet_ntoa
MOV             R1, R0
LDR             R0, =aSendingSelectF ; "sending select for %s"
BL              sub_16DDC
MOV             R1, #0
ADD             R0, SP, #0x278+var_274
BL              sub_24274
ADD             SP, SP, #0x278
POP             {R4-R6,PC}
; End of function sub_24318

off_2438C DCD aSendingSelectF ; "sending select for %s"



; ssize_t __fastcall sub_24390(int, int)
sub_24390

var_278= -0x278

PUSH            {R4,R5,LR}
MOV             R5, R1
SUB             SP, SP, #0x27C
MOV             R1, #4
MOV             R4, R0
ADD             R0, SP, R1
BL              sub_240E8
MOV             R2, R5
ADD             R0, SP, #0x27C+var_278
MOV             R1, #0x32 ; '2'
BL              sub_26D7C
MOV             R2, R4
ADD             R0, SP, #0x27C+var_278
MOV             R1, #0x36 ; '6'
BL              sub_26D7C
LDR             R1, =aDecline ; "decline"
LDR             R0, =aSendingS ; "sending %s"
BL              sub_16DDC
MOV             R1, #0
ADD             R0, SP, #0x27C+var_278
BL              sub_24274
ADD             SP, SP, #0x27C
POP             {R4,R5,PC}
; End of function sub_24390

off_243EC DCD aDecline  ; "decline"
off_243F0 DCD aSendingS ; "sending %s"



; ssize_t __fastcall sub_243F4(int, int, int)
sub_243F4

var_280= -0x280
var_274= -0x274
var_270= -0x270
var_268= -0x268

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x280
MOV             R5, R1
MOV             R6, R0
MOV             R1, #3
ADD             R0, SP, #0x280+var_274
MOV             R4, R2
BL              sub_240E8
ADD             R0, SP, #0x280+var_274
STR             R6, [SP,#0x280+var_270]
STR             R4, [SP,#0x280+var_268]
BL              sub_24168
MOV             R0, R5  ; in
BL              inet_ntoa
MOV             R1, R0
LDR             R0, =aSendingRenewTo ; "sending renew to %s"
BL              sub_16DDC
CMP             R5, #0
BEQ             loc_24464
MOV             R3, #0x43 ; 'C'
MOV             R2, #0x44 ; 'D'
STR             R3, [SP,#0x280+var_280]
MOV             R1, R4
MOV             R3, R5
ADD             R0, SP, #0x280+var_274
BL              sub_26400

loc_2445C
ADD             SP, SP, #0x280
POP             {R4-R6,PC}

loc_24464
MOV             R1, R4
ADD             R0, SP, #0x280+var_274
BL              sub_24274
B               loc_2445C
; End of function sub_243F4

off_24474 DCD aSendingRenewTo ; "sending renew to %s"



; int __fastcall sub_24478(void *, int)
sub_24478

var_2D4= -0x2D4
var_2D0= -0x2D0
s= -0x2CC
var_2C4= -0x2C4
var_2C0= -0x2C0
cmsg= -0x2BC
var_2B8= -0x2B8
var_2B0= -0x2B0
var_290= -0x290
var_28C= -0x28C
var_288= -0x288
var_287= -0x287
var_286= -0x286
var_27A= -0x27A
var_278= -0x278
var_276= -0x276
src= -0x274
var_188= -0x188

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x2D8
MOV             R3, #0x290
MOV             R7, R0
MOV             R8, R1
ADD             R4, SP, #0x2D8+var_290
MOV             R2, #0x1C ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x2D8+s ; s
STR             R3, [SP,#0x2D8+var_2D0]
STR             R4, [SP,#0x2D8+var_2D4]
LDR             R6, =dword_7DB94
BL              memset
ADD             R3, SP, #0x2D8+var_2D4
STR             R3, [SP,#0x2D8+var_2C4]
MOV             R3, #1
STR             R3, [SP,#0x2D8+var_2C0]
ADD             R3, SP, #0x2D8+var_2B0
STR             R3, [SP,#0x2D8+cmsg]
MOV             R3, #0x20 ; ' '
STR             R3, [SP,#0x2D8+var_2B8]

loc_244CC               ; flags
MOV             R2, #0
ADD             R1, SP, #0x2D8+s ; message
MOV             R0, R8  ; fd
BL              recvmsg
SUBS            R5, R0, #0
BGE             loc_24518
LDR             R3, [R6]
LDR             R3, [R3]
CMP             R3, #4
BEQ             loc_244CC
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_2450C
LDR             R0, =aPacketReadErro ; "packet read error, ignoring"
BL              sub_16DDC

loc_2450C
MOV             R0, R5
ADD             SP, SP, #0x2D8
POP             {R4-R8,PC}

loc_24518
CMP             R5, #0x1B
BGT             loc_24544
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_24538

loc_24530
MOV             R5, #0xFFFFFFFE
B               loc_2450C

loc_24538
LDR             R0, =aPacketIsTooSho ; "packet is too short, ignoring"

loc_2453C
BL              sub_16DDC
B               loc_24530

loc_24544
LDRH            R6, [R4,#2]
REV16           R6, R6
UXTH            R6, R6
CMP             R6, R5
BLE             loc_24570
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
LDRNE           R0, =aOversizedPacke ; "oversized packet, ignoring"
BNE             loc_2453C
B               loc_24530

loc_24570
LDRB            R3, [SP,#0x2D8+var_287]
CMP             R3, #0x11
BNE             loc_245B0
LDRB            R3, [SP,#0x2D8+var_290]
CMP             R3, #0x45 ; 'E'
BNE             loc_245B0
LDRH            R3, [R4,#0x16]
CMP             R3, #0x4400
BNE             loc_245B0
LDRH            R2, [R4,#0x18]
SUB             R3, R6, #0x14
UXTH            R3, R3
REV16           R2, R2
UXTH            R2, R2
CMP             R2, R3
BEQ             loc_245C8

loc_245B0
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
LDRNE           R0, =aUnrelatedBogus ; "unrelated/bogus packet, ignoring"
BNE             loc_2453C
B               loc_24530

loc_245C8
LDRH            R5, [R4,#0xA]
MOV             R3, #0
MOV             R1, #0x14
MOV             R0, R4
STRH            R3, [R4,#0xA]
BL              sub_5A500
CMP             R0, R5
BEQ             loc_24600
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
LDRNE           R0, =aBadIpHeaderChe ; "bad IP header checksum, ignoring"
BNE             loc_2453C
B               loc_24530

loc_24600
LDR             R3, [SP,#0x2D8+var_2B8]
CMP             R3, #0xB
BHI             loc_2464C

loc_2460C
MOV             R3, #0
STR             R3, [SP,#0x2D8+var_290]
LDRH            R5, [R4,#0x1A]
LDRH            R2, [R4,#0x18]
STR             R3, [R4,#4]
CMP             R5, R3
STRB            R3, [R4,#8]
STRH            R2, [R4,#2]
STRH            R3, [R4,#0x1A]
BNE             loc_24690

loc_24634
LDR             R3, =0x63538263
LDR             R2, [SP,#0x2D8+var_188]
CMP             R2, R3
BEQ             loc_246BC
LDR             R0, =aPacketWithBadM ; "packet with bad magic, ignoring"
B               loc_2453C

loc_2464C               ; cmsg
LDR             R1, [SP,#0x2D8+cmsg]
MOVW            R5, #0x107

loc_24654
CMP             R1, #0
BEQ             loc_2460C
LDR             R3, [R1,#4]
CMP             R3, R5
BNE             loc_24680
LDR             R3, [R1,#8]
CMP             R3, #8
BNE             loc_24680
LDR             R3, [R1,#0xC]
TST             R3, #8
BNE             loc_24634

loc_24680               ; mhdr
ADD             R0, SP, #0x2D8+s
BL              __cmsg_nxthdr
MOV             R1, R0
B               loc_24654

loc_24690
MOV             R1, R6
MOV             R0, R4
BL              sub_5A500
CMP             R0, R5
BEQ             loc_24634
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
LDRNE           R0, =aPacketWithBadU ; "packet with bad UDP checksum received, "...
BNE             loc_2453C
B               loc_24530

loc_246BC
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_246D8
LDR             R1, =aAPacket ; "a packet"
LDR             R0, =aReceivedS ; "received %s"
BL              sub_16DDC

loc_246D8
ADD             R0, SP, #0x2D8+src
SUB             R5, R6, #0x1C
BL              sub_26110
MOV             R2, R5  ; n
ADD             R1, SP, #0x2D8+src ; src
MOV             R0, R7  ; dest
BL              memcpy
B               loc_2450C
; End of function sub_24478

off_246F8 DCD dword_7DB94
off_246FC DCD dword_7DBAC
off_24700 DCD aPacketReadErro ; "packet read error, ignoring"
off_24704 DCD aPacketIsTooSho ; "packet is too short, ignoring"
off_24708 DCD aOversizedPacke ; "oversized packet, ignoring"
off_2470C DCD aUnrelatedBogus ; "unrelated/bogus packet, ignoring"
off_24710 DCD aBadIpHeaderChe ; "bad IP header checksum, ignoring"
dword_24714 DCD 0x63538263
off_24718 DCD aPacketWithBadM ; "packet with bad magic, ignoring"
off_2471C DCD aPacketWithBadU ; "packet with bad UDP checksum received, "...
off_24720 DCD aAPacket  ; "a packet"
off_24724 DCD aReceivedS ; "received %s"



; int sub_24728()
sub_24728
PUSH            {R4,LR}
MOV             R0, #0
BL              sub_61B48
LDR             R2, =dword_7D4BC
POP             {R4,LR}
LDR             R3, [R2]
BIC             R3, R3, #1
STR             R3, [R2]
LDR             R3, =buf
LDR             R0, [R3,#(dword_7D9C0 - 0x7D790)]
B               sub_5E30C
; End of function sub_24728

off_24754 DCD dword_7D4BC
off_24758 DCD buf



; int __fastcall sub_2475C(char *, const char *, unsigned __int8 *)
sub_2475C

var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R0-R4,LR}
LDRB            R12, [R2,#3]
LDRB            R3, [R2]
STR             R12, [SP,#0x10+var_8]
LDRB            R12, [R2,#2]
STR             R12, [SP,#0x10+var_C]
LDRB            R2, [R2,#1]
STR             R2, [SP,#0x10+var_10]
MOV             R2, R1
LDR             R1, =aSUUUU ; "%s%u.%u.%u.%u"
BL              sprintf
ADD             SP, SP, #0x14
POP             {PC}
; End of function sub_2475C

off_24790 DCD aSUUUU    ; "%s%u.%u.%u.%u"



; void __fastcall sub_24794(int)
sub_24794

var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R7,LR}
MOV             R6, R0
LDR             R4, =dword_7DBAC
SUB             SP, SP, #0x1C
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_247D4
CMP             R0, #0
LDREQ           R1, =aNone_0 ; "none"
BEQ             loc_247CC
LDR             R3, =aKernel ; "kernel"
CMP             R0, #1
LDR             R1, =(aProcNetRaw+0xA) ; "raw"
MOVEQ           R1, R3

loc_247CC
LDR             R0, =aEnteringListen ; "entering listen mode: %s"
BL              sub_16DDC

loc_247D4
LDR             R5, =dword_7D4C8
LDR             R3, =dword_7D62C
LDR             R0, [R5] ; fd
STR             R6, [R3]
CMP             R0, #0
BLT             loc_247F8
BL              close
MOV             R3, #0xFFFFFFFF
STR             R3, [R5]

loc_247F8
CMP             R6, #1
BNE             loc_2481C
LDR             R3, =buf
MOV             R0, #0x44 ; 'D'
LDR             R1, [R3,#(dword_7D9BC - 0x7D790)]
BL              sub_267E0
STR             R0, [R5]

loc_24814
ADD             SP, SP, #0x1C
POP             {R4-R7,PC}

loc_2481C
CMP             R6, #0
BEQ             loc_24814
LDR             R3, =buf
LDR             R7, [R3,#(dword_7D998 - 0x7D790)]
LDR             R3, [R4]
CMP             R3, #1
BLS             loc_24844
MOV             R1, R7
LDR             R0, =aOpeningRawSock ; "opening raw socket on ifindex %d"
BL              sub_16DDC

loc_24844
MOV             R2, #8
MOV             R1, #2
MOV             R0, #0x11
BL              sub_179A4
LDR             R3, [R4]
MOV             R6, R0
CMP             R3, #1
BLS             loc_2486C
LDR             R0, =aGotRawSocketFd ; "got raw socket fd"
BL              sub_16DDC

loc_2486C
MOV             R3, #0
MOV             R2, #0x14
STR             R3, [SP,#0x1C+var_10]
ADD             R1, SP, #0x1C+var_18
STR             R3, [SP,#0x1C+var_C]
MOV             R0, R6
STR             R3, [SP,#0x1C+var_8]
LDR             R3, =0x80011
STMFA           SP, {R3,R7}
BL              sub_179C0
MOV             R2, #8
MOVW            R1, #0x107
MOV             R0, R6
BL              sub_623F4
CMP             R0, #0
BEQ             loc_248D4
LDR             R2, =dword_7DB94
LDR             R3, [R4]
LDR             R2, [R2]
LDR             R2, [R2]
CMP             R2, #0x5C ; '\'
BEQ             loc_248D4
CMP             R3, #0
BEQ             loc_248D4
LDR             R0, =aCanTSetPacketA ; "can't set PACKET_AUXDATA on raw socket"
BL              sub_16DDC

loc_248D4
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_248E8
LDR             R0, =aCreatedRawSock ; "created raw socket"
BL              sub_16DDC

loc_248E8
STR             R6, [R5]
B               loc_24814
; End of function sub_24794

off_248F0 DCD dword_7DBAC
off_248F4 DCD aNone_0   ; "none"
off_248F8 DCD aKernel   ; "kernel"
off_248FC DCD aProcNetRaw+0xA ; "raw"
off_24900 DCD aEnteringListen ; "entering listen mode: %s"
off_24904 DCD dword_7D4C8
off_24908 DCD dword_7D62C
off_2490C DCD buf
off_24910 DCD aOpeningRawSock ; "opening raw socket on ifindex %d"
off_24914 DCD aGotRawSocketFd ; "got raw socket fd"
dword_24918 DCD 0x80011
off_2491C DCD dword_7DB94
off_24920 DCD aCanTSetPacketA ; "can't set PACKET_AUXDATA on raw socket"
off_24924 DCD aCreatedRawSock ; "created raw socket"



; char *__fastcall sub_24928(int, char, const char *)
sub_24928

var_10= -0x10
var_8= -8

LDR             R3, =byte_67678
PUSH            {R4-R11,LR}
AND             R9, R1, #0xF
LDRB            R5, [R0,#-1]
SUB             SP, SP, #0x14
MOV             R7, R0
MOV             R10, R2
LDRB            R8, [R3,R9]
ADD             R7, R7, #4
MOV             R1, R8
ADD             R0, R5, R8
BLX             sub_15CA0
LDR             R3, =byte_66EEC
LDRB            R4, [R3,R9]
MUL             R4, R4, R0
MOV             R0, R10 ; s
BL              strlen
ADD             R4, R4, #2
ADD             R0, R4, R0
BL              sub_1748C
MOV             R2, R10
LDR             R1, =aS_7 ; "%s="
MOV             R6, R0
LDR             R10, =(aUnknownUidU+0xC) ; "%u"
BL              sprintf
LDR             R3, =aLd ; "%ld"
CMP             R9, #7
LDR             R2, =(aCountIsTooBigL+0x12) ; "%lu"
ADD             R4, R6, R0
MOVNE           R2, R3
STR             R2, [SP,#0x14+var_10]

loc_249A4
CMP             R8, R5
SUB             R11, R7, #4
MOV             R2, R11
BGT             loc_24CC4
SUB             R1, R9, #1
CMP             R1, #0xC ; switch 13 cases
LDRLS           PC, [PC,R1,LSL#2] ; switch jump
B               def_249BC ; jumptable 000249BC default case, case 8
jpt_249BC DCD loc_249F8 ; jump table for switch statement
DCD loc_249F8
DCD loc_24A84
DCD loc_24A84
DCD loc_24A50
DCD loc_24A64
DCD loc_24A74
DCD loc_24A74
DCD def_249BC
DCD loc_24B98
DCD loc_24BA8
DCD loc_24C34
DCD loc_24C5C

loc_249F8               ; jumptable 000249BC cases 0,1
MOV             R0, R4
MOV             R2, R11
LDR             R1, =(asc_6B39D+1) ; ""
BL              sub_2475C
CMP             R9, #1
ADD             R4, R4, R0
BEQ             def_249BC ; jumptable 000249BC default case, case 8
MOV             R2, R7
LDR             R1, =(asc_69510+3) ; "/"
MOV             R0, R4
BL              sub_2475C

loc_24A24
ADD             R4, R4, R0

def_249BC               ; jumptable 000249BC default case, case 8
SUB             R5, R5, R8
ADD             R7, R7, R8
CMP             R8, R5
BGT             loc_24CC4
MOV             R3, #0x20 ; ' '
ADD             R4, R4, #1
STRB            R3, [R4,#-1]
MOV             R3, #0
STRB            R3, [R4]
B               loc_249A4

loc_24A50               ; jumptable 000249BC case 4
LDRB            R2, [R7,#-4]

loc_24A54               ; format
MOV             R1, R10

loc_24A58               ; s
MOV             R0, R4
BL              sprintf
B               loc_24A24

loc_24A64               ; jumptable 000249BC case 5
LDRH            R2, [R11]
REV16           R2, R2
UXTH            R2, R2
B               loc_24A54

loc_24A74               ; jumptable 000249BC cases 6,7
LDR             R2, [R11]
LDR             R1, [SP,#0x14+var_10]
REV             R2, R2
B               loc_24A58

loc_24A84               ; jumptable 000249BC cases 2,3
MOV             R2, R5
MOV             R1, R11 ; src
MOV             R0, R4  ; dest
BL              memcpy
CMP             R9, #4
MOV             R3, #0
STRB            R3, [R4,R5]
BNE             loc_24CC4
MOV             R2, R4

loc_24AA8
MOV             R0, R2
LDRB            R3, [R2],#1
ORR             R1, R3, #0x20 ; ' '
SUB             R1, R1, #0x61 ; 'a'
CMP             R1, #0x19
BLS             loc_24AA8
SUB             R1, R3, #0x30 ; '0'
CMP             R1, #9
BLS             loc_24AA8
CMP             R3, #0x2E ; '.'
CMPNE           R3, #0
BEQ             loc_24CAC
CMP             R3, #0x2D ; '-'
CMPNE           R3, #0x5F ; '_'
BEQ             loc_24AA8
MOV             R2, R5
LDR             R1, =aBad ; "bad"
MOV             R0, R4
BL              sub_60B34
B               loc_24CC4

loc_24AF8
LDRB            R10, [R2]
ADD             R7, R2, #1
CMP             R10, #0x20 ; ' '
BHI             loc_24CC4
ADD             R0, R10, #7
SUB             R5, R5, #1
MOV             R0, R0,LSR#3
MOV             R2, R7
MOV             R3, #0
STR             R3, [SP,#0x14+var_8]

loc_24B20
CMP             R0, R3
BNE             loc_24B88
SUB             R5, R5, R0
ADD             R7, R7, R0
CMP             R5, #3
BLE             loc_24CC4
MOV             R2, R9
MOV             R0, R4
BL              sub_2475C
ADD             R4, R4, R0
MOV             R2, R10
MOV             R1, R8  ; format
MOV             R0, R4  ; s
BL              sprintf
ADD             R4, R4, R0
MOV             R2, R7
LDR             R1, =(asc_6B39D+1) ; ""
MOV             R0, R4
BL              sub_2475C
LDR             R1, =(asc_6582A+9) ; " "
ADD             R4, R4, R0
ADD             R2, R7, #4
SUB             R5, R5, #4

loc_24B7C
CMP             R5, #4
BGT             loc_24AF8
B               loc_24CC4

loc_24B88
LDRB            R12, [R2],#1
STRB            R12, [R3,R9]
ADD             R3, R3, #1
B               loc_24B20

loc_24B98               ; jumptable 000249BC case 9
LDR             R1, =(asc_6B39D+1) ; ""
ADD             R9, SP, #0x14+var_8
LDR             R8, =(aFrom0U+6) ; "/%u "
B               loc_24B7C

loc_24BA8               ; jumptable 000249BC case 10
CMP             R5, #0x15
BLE             loc_24CC4
LDRB            R2, [R11]
CMP             R2, #0x20 ; ' '
BHI             loc_24CC4
LDRB            R1, [R11,#1]
ADD             R1, R1, #0x20 ; ' '
SUB             R1, R1, R2
CMP             R1, #0x80
BGT             loc_24CC4
LDR             R1, =(aMtuU+4) ; format
MOV             R0, R4  ; s
BL              sprintf
ADD             R4, R4, R0
LDRB            R2, [R11,#1]
LDR             R1, =(aMtuU+4) ; format
MOV             R0, R4  ; s
BL              sprintf
ADD             R4, R4, R0
ADD             R1, R11, #2
MOV             R0, R4
LDR             R8, =(asc_6582A+9) ; " "
BL              sub_27340
SUB             R5, R5, #0x16
ADD             R3, R11, #0x12
ADD             R4, R4, R0
ADD             R7, R3, R5

loc_24C14
SUB             R2, R7, R5
MOV             R0, R4
MOV             R1, R8
BL              sub_2475C
SUBS            R5, R5, #4
ADD             R4, R4, R0
BMI             loc_24CC4
B               loc_24C14

loc_24C34               ; jumptable 000249BC case 11
MOV             R2, R6
MOV             R1, R5
MOV             R0, R11

loc_24C40
BL              sub_25D4C
SUBS            R4, R0, #0
BEQ             loc_24CC4
MOV             R0, R6  ; ptr
MOV             R6, R4
BL              free
B               loc_24CC4

loc_24C5C               ; jumptable 000249BC case 12
LDRB            R2, [R11]
ADD             R0, R11, #1
SUB             R7, R5, #1
CMP             R2, #0
MOVEQ           R2, R6
MOVEQ           R1, R7
BEQ             loc_24C40
CMP             R2, #1
BNE             loc_24CC4
LDR             R1, =(asc_6B39D+1) ; ""
ADD             R5, R5, R11
LDR             R8, =(asc_6582A+9) ; " "

loc_24C8C
SUB             R2, R5, R7
SUBS            R7, R7, #4
BMI             loc_24CC4
MOV             R0, R4
BL              sub_2475C
MOV             R1, R8
ADD             R4, R4, R0
B               loc_24C8C

loc_24CAC
CMP             R3, #0
BEQ             loc_24CC4
LDRB            R3, [R0,#1]
ADD             R2, R0, #1
CMP             R3, #0
BNE             loc_24AA8

loc_24CC4
MOV             R0, R6
ADD             SP, SP, #0x14
POP             {R4-R11,PC}
; End of function sub_24928

off_24CD0 DCD byte_67678
off_24CD4 DCD byte_66EEC
off_24CD8 DCD aS_7      ; "%s="
off_24CDC DCD aUnknownUidU+0xC ; "%u"
off_24CE0 DCD aLd       ; "%ld"
off_24CE4 DCD aCountIsTooBigL+0x12 ; "%lu"
off_24CE8 DCD asc_6B39D+1 ; ""
off_24CEC DCD asc_69510+3 ; "/"
off_24CF0 DCD aBad      ; "bad"
off_24CF4 DCD asc_6582A+9 ; " "
off_24CF8 DCD aFrom0U+6 ; "/%u "
off_24CFC DCD aMtuU+4   ; "%u "



; void __fastcall sub_24D00(int, const char *)
sub_24D00

var_30= -0x30
var_2C= -0x2C
var_28= -0x28
s= -0x24
var_20= -0x20
var_1C= -0x1C
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x34
MOV             R4, R0
STR             R1, [SP,#0x34+var_30]
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x34+s ; s
BL              memset
CMP             R4, #0
MOVEQ           R7, R4
MOVEQ           R6, #6
BEQ             loc_24D9C
MOV             R5, #1
MOV             R6, #6
MOV             R7, #0
MOV             R8, R5

loc_24D40
MOV             R1, R5
MOV             R0, R4
BL              sub_26BB4
CMP             R0, #0
BEQ             loc_24D90
CMP             R5, #0x34 ; '4'
ADD             R3, R6, #1
LDRBEQ          R3, [R0]
ORREQ           R7, R7, R3
BEQ             loc_24D70
CMP             R5, #1
MOVEQ           R6, R3

loc_24D70
MOV             R3, R5,LSR#5
ADD             R2, SP, #0x34+var_4
ADD             R6, R6, #1
ADD             R3, R2, R3,LSL#2
AND             R2, R5, #0x1F
LDR             R1, [R3,#-0x20]
ORR             R2, R1, R8,LSL R2
STR             R2, [R3,#-0x20]

loc_24D90
ADD             R5, R5, #1
CMP             R5, #0xFF
BNE             loc_24D40

loc_24D9C
LDR             R5, =buf
MOV             R0, R6,LSL#2
BL              sub_174DC
LDR             R1, [R5,#(dword_7D9BC - 0x7D790)]
MOV             R6, R0
LDR             R0, =aInterfaceS ; "interface=%s"
BL              sub_177E4
STR             R0, [R6]
BL              putenv
CMP             R4, #0
STR             R5, [SP,#0x34+var_2C]
BEQ             loc_24F2C
MOV             R0, #0x13
ADD             R5, R6, #8
BL              sub_1748C
ADD             R2, R4, #0x10
MOV             R8, R0
LDR             R1, =(aIp+1) ; "ip="
STR             R0, [R6,#4]
BL              sub_2475C
MOV             R0, R8  ; string
BL              putenv
LDR             R3, [R4,#0x14]
CMP             R3, #0
BEQ             loc_24E28
MOV             R0, #0x17
ADD             R5, R6, #0xC
BL              sub_1748C
ADD             R2, R4, #0x14
MOV             R8, R0
STR             R0, [R6,#8]
LDR             R1, =aSiaddr ; "siaddr="
BL              sub_2475C
MOV             R0, R8  ; string
BL              putenv

loc_24E28
TST             R7, #1
BNE             loc_24E50
LDRB            R3, [R4,#0x6C]
CMP             R3, #0
BEQ             loc_24E50
ADD             R1, R4, #0x6C ; 'l'
LDR             R0, =aBootFile128s ; "boot_file=%.128s"
BL              sub_177E4
STR             R0, [R5],#4
BL              putenv

loc_24E50
TST             R7, #2
BNE             loc_24E78
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
BEQ             loc_24E78
ADD             R1, R4, #0x2C ; ','
LDR             R0, =aSname64s ; "sname=%.64s"
BL              sub_177E4
STR             R0, [R5],#4
BL              putenv

loc_24E78
LDR             R8, =unk_67633
LDR             R7, =aSubnet ; "subnet"
LDR             R11, =aMaskU ; "mask=%u"

loc_24E84
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_24F9C
LDR             R10, =aOptU ; "opt%u="
MOV             R7, R3
MOV             R3, #1

loc_24E9C
MOV             R2, R7,LSR#5
ADD             R1, SP, #0x34+var_4
ADD             R2, R1, R2,LSL#2
LDR             R2, [R2,#-0x20]
CMP             R2, #0
ADDEQ           R7, R7, #0x20 ; ' '
BEQ             loc_24F24
AND             R1, R7, #0x1F
ANDS            R2, R2, R3,LSL R1
BEQ             loc_24F20
MOV             R1, R7
MOV             R0, R4
BL              sub_26BB4
LDRB            R11, [R0,#-1]
MOV             R3, #2
MOV             R9, R0
MOV             R0, #9
MLA             R0, R3, R11, R0
BL              sub_1748C
MOV             R2, R7
MOV             R8, R0
MOV             R1, R10 ; format
STR             R0, [R5],#4
BL              sprintf
MOV             R2, R11
MOV             R1, R9
ADD             R0, R8, R0
BL              sub_16FB4
MOV             R2, #0
STRB            R2, [R0]
MOV             R0, R8  ; string
BL              putenv
MOV             R3, #1

loc_24F20
ADD             R7, R7, #1

loc_24F24
CMP             R7, #0xFF
BLE             loc_24E9C

loc_24F2C
LDR             R3, [SP,#0x34+var_2C]
LDR             R1, [R3,#(dword_7D9C4 - 0x7D790)]
LDR             R3, =dword_7DBAC
LDR             R2, [R3]
MOV             R7, R3
CMP             R2, #0
BEQ             loc_24F54
LDR             R2, [SP,#0x34+var_30]
LDR             R0, =aExecutingSS ; "executing %s %s"
BL              sub_16DDC

loc_24F54
LDR             R3, [SP,#0x34+var_2C]
SUB             R5, R6, #4
LDR             R8, =(aS_2+6) ; " %s"
ADD             R0, SP, #0x34+s
LDR             R3, [R3,#(dword_7D9C4 - 0x7D790)]
STR             R3, [SP,#0x34+s]
LDR             R3, [SP,#0x34+var_30]
STR             R3, [SP,#0x34+var_20]
MOV             R3, #0
STR             R3, [SP,#0x34+var_1C]
BL              sub_61B38

loc_24F80
LDR             R4, [R5,#4]!
CMP             R4, #0
BNE             loc_25060
MOV             R0, R6  ; ptr
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R11,LR}
B               free

loc_24F9C
LDRB            R9, [R8]
MOV             R1, #1
AND             R2, R9, #0x1F
MOV             R3, R9,LSR#5
MOV             R1, R1,LSL R2
ADD             R2, SP, #0x34+var_4
ADD             R3, R2, R3,LSL#2
LDR             R2, [R3,#-0x20]
TST             R1, R2
MOVEQ           R10, R5
BEQ             loc_2501C
BIC             R2, R2, R1
MOV             R0, R4
MOV             R1, R9
STR             R2, [R3,#-0x20]
MOV             R10, R5
BL              sub_26BB4
MOV             R2, R7
LDRB            R1, [R8,#-1]
STR             R0, [SP,#0x34+var_28]
BL              sub_24928
STR             R0, [R10],#4
BL              putenv
CMP             R9, #1
LDR             R3, [SP,#0x34+var_28]
BNE             loc_2501C
LDRB            R1, [R3,#-1]
CMP             R1, #4
LDREQ           R3, [R3]
MOVEQ           R1, #0
REVEQ           R3, R3
BEQ             loc_25040

loc_2501C               ; s
MOV             R0, R7
ADD             R8, R8, #2
BL              strlen
ADD             R0, R0, #1
MOV             R5, R10
ADD             R7, R7, R0
B               loc_24E84

loc_25038
MOV             R3, R3,LSL#1
ADD             R1, R1, #1

loc_25040
CMP             R3, #0
BNE             loc_25038
MOV             R0, R11
ADD             R10, R5, #8
BL              sub_177E4
STR             R0, [R5,#4]
BL              putenv
B               loc_2501C

loc_25060
LDR             R3, [R7]
CMP             R3, #1
BLS             loc_25078
MOV             R1, R4
MOV             R0, R8
BL              sub_16DDC

loc_25078
MOV             R0, R4
BL              sub_178AC
B               loc_24F80
; End of function sub_24D00

off_25084 DCD buf
off_25088 DCD aInterfaceS ; "interface=%s"
off_2508C DCD aIp+1     ; "ip="
off_25090 DCD aSiaddr   ; "siaddr="
off_25094 DCD aBootFile128s ; "boot_file=%.128s"
off_25098 DCD aSname64s ; "sname=%.64s"
off_2509C DCD unk_67633
off_250A0 DCD aSubnet   ; "subnet"
off_250A4 DCD aMaskU    ; "mask=%u"
off_250A8 DCD aOptU     ; "opt%u="
off_250AC DCD dword_7DBAC
off_250B0 DCD aExecutingSS ; "executing %s %s"
off_250B4 DCD aS_2+6    ; " %s"



; ssize_t __fastcall sub_250B8(int, int)
sub_250B8

var_284= -0x284
var_278= -0x278
var_26C= -0x26C

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x284
MOV             R5, R0
MOV             R4, R1
ADD             R0, SP, #0x284+var_278
MOV             R1, #7
BL              sub_240E8
MOV             R2, R5
MOV             R1, #0x36 ; '6'
ADD             R0, SP, #0x284+var_278
STR             R4, [SP,#0x284+var_26C]
BL              sub_26D7C
LDR             R1, =aRelease ; "release"
LDR             R0, =aSendingS ; "sending %s"
BL              sub_16DDC
CMP             R5, #0
BEQ             loc_25120
MOV             R3, #0x43 ; 'C'
MOV             R2, #0x44 ; 'D'
STR             R3, [SP,#0x284+var_284]
MOV             R1, R4
MOV             R3, R5
ADD             R0, SP, #0x284+var_278
BL              sub_26400

loc_25118
ADD             SP, SP, #0x284
POP             {R4,R5,PC}

loc_25120
MOV             R1, R4
ADD             R0, SP, #0x284+var_278
BL              sub_24274
B               loc_25118
; End of function sub_250B8

off_25130 DCD aRelease  ; "release"
off_25134 DCD aSendingS ; "sending %s"



; void __fastcall sub_25138(int, int, int, int)
sub_25138
PUSH            {R0-R6,LR}
LDR             R3, =dword_7D630
LDR             R2, [R3]
MOV             R4, R3
SUB             R2, R2, #2
CMP             R2, #3
BHI             loc_25190
MOV             R5, R1
MOV             R6, R0
BL              inet_ntoa
MOV             R1, R0  ; src
MOV             R0, SP  ; dest
BL              strcpy
MOV             R0, R5  ; in
BL              inet_ntoa
MOV             R2, SP
MOV             R1, R0
LDR             R0, =aUnicastingARel ; "unicasting a release of %s to %s"
BL              sub_16DDC
MOV             R1, R5
MOV             R0, R6
BL              sub_250B8

loc_25190
LDR             R0, =aEnteringReleas ; "entering released state"
BL              sub_16DDC
LDR             R1, =aDeconfig ; "deconfig"
MOV             R0, #0
BL              sub_24D00
MOV             R0, #0
BL              sub_24794
MOV             R3, #6
STR             R3, [R4]
ADD             SP, SP, #0x10
POP             {R4-R6,PC}
; End of function sub_25138

off_251BC DCD dword_7D630
off_251C0 DCD aUnicastingARel ; "unicasting a release of %s to %s"
off_251C4 DCD aEnteringReleas ; "entering released state"
off_251C8 DCD aDeconfig ; "deconfig"


; Attributes: bp-based frame fpd=0x29C

; int __fastcall sub_251CC(int, char **)
sub_251CC

var_30C= -0x30C
var_308= -0x308
var_304= -0x304
var_300= -0x300
var_2FC= -0x2FC
var_2F8= -0x2F8
var_2F4= -0x2F4
var_2F0= -0x2F0
var_2EC= -0x2EC
var_2E8= -0x2E8
var_2E4= -0x2E4
var_2E0= -0x2E0
var_2DC= -0x2DC
var_2D8= -0x2D8
var_2D0= -0x2D0
var_2CC= -0x2CC
s2= -0x2C8
var_2C4= -0x2C4
var_2C0= -0x2C0
var_2BC= -0x2BC
var_2B8= -0x2B8
var_2B0= -0x2B0
var_2AC= -0x2AC
var_2A8= -0x2A8
cp= -0x2A4
var_2A0= -0x2A0
var_29C= -0x29C
var_298= -0x298
var_294= -0x294
seconds= -0x290
var_28C= -0x28C
fds= -0x288
var_27A= -0x27A
var_278= -0x278
n= -0x276
in= -0x268
s1= -0x25C
var_4= -4

LDR             R3, =a2000 ; "2000"
MOV             R2, #0x14
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x30C
LDR             R4, =buf
MOV             R8, #0
MOV             R0, R1
ADD             R5, SP, #0x30C+var_298
STR             R3, [SP,#0x30C+var_2A0]
MOV             R3, #3
STRD            R2, R3, [SP,#0x30C+var_294]
MOV             R2, R4
STR             R3, [SP,#0x30C+var_28C]
ADD             R7, SP, #0x70
LDR             R3, =aEth0 ; "eth0"
STR             R8, [SP,#0x30C+var_29C]
STR             R8, [SP,#0x30C+var_298]
STR             R3, [R4,#(dword_7D9BC - 0x7D790)]
LDR             R3, =aEtcUdhcpcDefau ; "/etc/udhcpc/default.script"
LDR             R1, =aUdhcp1293 ; "udhcp 1.29.3"
LDR             R9, =dword_7DBAC
STR             R3, [R2,#(dword_7D9C4 - 0x7D790)]!
ADD             R3, SP, #0x30C+var_4
STR             R1, [R3,#-0x2AC]!
ADD             R1, SP, #0x30C+var_2A0
STR             R2, [SP,#0x30C+var_2F4]
ADD             R2, SP, #0x30C+cp
STR             R2, [SP,#0x30C+var_2F8]
ADD             R2, R4, #0x230
STR             R1, [SP,#0x30C+var_2DC]
ADD             R1, SP, #0x30C+var_294
STR             R2, [SP,#0x30C+var_2FC]
ADD             R2, R4, #0x22C
STR             R1, [SP,#0x30C+var_2E8]
ADD             R1, SP, #0x30C+var_28C
STR             R2, [SP,#0x30C+var_300]
ADD             R2, SP, #0x30C+var_2A8
STR             R1, [SP,#0x30C+var_2EC]
ADD             R1, SP, #0x30C+seconds
STR             R2, [SP,#0x30C+var_304]
ADD             R2, SP, #0x30C+var_2AC
STR             R1, [SP,#0x30C+var_2F0]
STR             R2, [SP,#0x30C+var_308]
STR             R2, [SP,#0x30C+var_30C]
LDR             R1, =aCvHHFINpQrrSTT ; "^CV:H:h:F:i:np:qRr:s:T:+t:+SA:+O:*ox:*f"...
LDR             R2, =aClientidNone ; "clientid-none"
STR             R9, [SP,#0x30C+var_2D8]
STR             R5, [SP,#0x30C+var_2E0]
STR             R7, [SP,#0x30C+var_2E4]
BL              sub_593F8
TST             R0, #0xC
MOV             R6, R0
STR             R9, [SP,#0x30C+var_2BC]
BEQ             loc_252C0
LDR             R0, =aOptionHNameIsD ; "option -h NAME is deprecated, use -x ho"...
BL              sub_16DDC
MOV             R2, R8
LDR             R1, [SP,#0x30C+var_2AC]
MOV             R0, #0xC
BL              sub_24094
STR             R0, [R4,#(dword_7D9D4 - 0x7D790)]

loc_252C0
TST             R6, #0x10
BEQ             loc_252E4
MOV             R2, #3
LDR             R1, [SP,#0x30C+var_2A8]
MOV             R0, #0x51 ; 'Q'
BL              sub_24094
MOV             R3, #1
STR             R0, [R4,#(dword_7D9D8 - 0x7D790)]
STRB            R3, [R0,#2]

loc_252E4
ANDS            R8, R6, #0x400
BEQ             loc_252F8
LDR             R0, [SP,#0x30C+cp] ; cp
BL              inet_addr
MOV             R8, R0

loc_252F8
LDR             R9, =dword_7DB94
LDR             R10, =aSubnet ; "subnet"
LDR             R11, =unk_67632
LDR             R0, [SP,#0x30C+var_2A0]
BL              sub_620B0
STR             R0, [SP,#0x30C+var_2C0]

loc_25310
LDR             R3, [SP,#0x30C+var_29C]
CMP             R3, #0
BNE             loc_2533C
TST             R6, #0x20000
LDREQ           R2, =unk_67633
MOVEQ           R0, #1
BEQ             loc_253BC

loc_2532C
LDR             R7, =aSubnet ; "subnet"
LDR             R9, =unk_67632
LDR             R10, =dword_7D9C8
B               loc_253F4

loc_2533C
MOV             R0, R7
BL              sub_5D2FC
MOV             R2, #0
STR             R0, [SP,#0x30C+s2]
MOV             R1, R2
BL              sub_18990
LDR             R2, [R9]
LDR             R3, [SP,#0x30C+s2]
LDR             R2, [R2]
CMP             R0, #0xFE
CMPLS           R2, #0
BEQ             loc_25380
MOV             R1, R10 ; s1
MOV             R0, R3  ; s2
BL              sub_26B2C
ADD             R0, R11, R0,LSL#1
LDRB            R0, [R0,#1]

loc_25380
ADD             R2, R4, R0,LSR#3
MOV             R1, #1
AND             R0, R0, #7
LDRB            R3, [R2,#0x20C]
ORR             R0, R3, R1,LSL R0
STRB            R0, [R2,#0x20C]
B               loc_25310

loc_2539C
LDRB            R1, [R2,#-1]
ADD             R2, R2, #2
TST             R1, #0x10
ADDNE           R1, R4, R3,LSR#3
ANDNE           R3, R3, #7
LDRBNE          R12, [R1,#0x20C]
ORRNE           R3, R12, R0,LSL R3
STRBNE          R3, [R1,#0x20C]

loc_253BC
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_2539C
B               loc_2532C

loc_253CC
MOV             R0, R5
BL              sub_5D2FC
BL              sub_174F8
MOV             R3, R7
MOV             R11, R0
MOV             R2, R9
MOV             R1, R10
BL              sub_27038
MOV             R0, R11 ; ptr
BL              free

loc_253F4
LDR             R2, [SP,#0x30C+var_298]
CMP             R2, #0
BNE             loc_253CC
LDR             R5, =dword_7D990
LDR             R0, [R4,#(dword_7D9BC - 0x7D790)]
MOV             R3, R5
ADD             R1, R5, #8
BL              sub_26644
SUBS            R3, R0, #0
STR             R3, [SP,#0x30C+s2]
BNE             loc_25C6C
TST             R6, #1
BEQ             loc_25548

loc_25428
MOV             R11, #0

loc_2542C
LDR             R1, [SP,#0x30C+var_2B0]
LDRB            R3, [R1]
CMP             R3, #0
BEQ             loc_2544C
MOV             R2, #0
MOV             R0, #0x3C ; '<'
BL              sub_24094
STR             R0, [R4,#(dword_7D9D0 - 0x7D790)]

loc_2544C
TST             R6, #0x4000
BEQ             loc_25478
LDR             R3, =dword_7DB90
MOV             R2, #0x18 ; facility
MOV             R1, #1  ; option
LDR             R0, [R3] ; ident
BL              openlog
LDR             R2, =dword_7D4BC
LDR             R3, [R2]
ORR             R3, R3, #2
STR             R3, [R2]

loc_25478
BL              sub_61C40
LDR             R0, [R4,#(dword_7D9C0 - 0x7D790)]
MOV             R4, #0
BL              sub_5E30C
LDR             R0, =aStartedV1293 ; "started, v1.29.3"
MOV             R5, R4
BL              sub_16DDC
BL              sub_26580
BL              sub_187B0
BL              srand
LDR             R3, =dword_7D630
MOV             R0, R4
LDR             R1, =aDeconfig ; "deconfig"
MOV             R7, R4
STR             R4, [R3]
BL              sub_24D00
MOV             R0, #2
BL              sub_24794
LDR             R3, =dword_7D990
ADD             R3, R3, #8
STR             R3, [SP,#0x30C+var_2B8]

def_259BC               ; jumptable 000259BC default case, case 2
LDR             R3, =dword_7D4C8
ADD             R0, SP, #0x30C+fds
SUB             R10, R4, R7
LDR             R1, [R3]
BL              sub_265C8
CMP             R10, #0
BGT             loc_25594

loc_254E8
LDR             R3, =dword_7D990
MOV             R2, #0
LDR             R1, [SP,#0x30C+var_2B8]
LDR             R0, [R3,#(dword_7D9BC - 0x7D990)]
BL              sub_26644
CMP             R0, #0
BNE             loc_258A0
CMP             R11, #0
LDR             R7, =dword_7D630
LDRNE           R2, =dword_7D990
LDRNE           R3, [R2]
STRNE           R3, [R11]
LDRHNE          R3, [R2,#(word_7D994 - 0x7D990)]
STRHNE          R3, [R11,#4]
LDR             R3, [R7,#0x29C+var_29C]
CMP             R3, #5  ; switch 6 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_25528 ; jumptable 00025528 default case
jpt_25528 DCD loc_25674 ; jump table for switch statement
DCD loc_25700
DCD loc_25760
DCD loc_25798
DCD loc_257E4
DCD loc_25798

loc_25548
MOV             R1, #0x3D ; '='
LDR             R0, [R4,#(dword_7D9C8 - 0x7D790)]
BL              sub_26DE4
CMP             R0, #0
BNE             loc_25428
MOV             R2, #7
LDR             R1, =(asc_6B39D+1) ; ""
MOV             R0, #0x3D ; '='
BL              sub_24094
MOV             R3, #1
STR             R0, [R4,#(dword_7D9CC - 0x7D790)]
STRB            R3, [R0,#2]
LDR             R3, [R4,#(dword_7D9CC - 0x7D790)]
LDR             R2, [R5]
ADD             R11, R3, #3
STR             R2, [R3,#3]
LDRH            R3, [R5,#(word_7D994 - 0x7D990)]
STRH            R3, [R11,#4]
B               loc_2542C

loc_25594
LDR             R3, [SP,#0x30C+var_2BC]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_255B0
MOV             R1, R10
LDR             R0, =aWaitingUSecond ; "waiting %u seconds"
BL              sub_16DDC

loc_255B0
BL              sub_1882C
LDR             R3, =0x20C49A
MOV             R9, R0
MOV             R1, #2  ; nfds
ADD             R0, SP, #0x30C+fds ; fds
CMP             R10, R3
MOVLE           R2, #0x3E8
MOVGT           R2, #0x7FFFFFFF
MULLE           R2, R2, R10 ; timeout
BL              poll
CMP             R0, #0
BGE             loc_2560C
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #4
BNE             loc_25604
SUB             R7, R7, R9
BL              sub_1882C
ADD             R7, R0, R7
B               def_259BC ; jumptable 000259BC default case, case 2

loc_25604
LDR             R0, =aPoll_0 ; "poll"
BL              sub_16B40

loc_2560C
BEQ             loc_254E8
BL              sub_26614
CMP             R0, #0xC
BEQ             loc_25880
CMP             R0, #0xF
BEQ             loc_25894
CMP             R0, #0xA
BNE             loc_258B8
LDR             R3, =word_7D9DC
MOV             R2, #0
LDR             R7, =dword_7D630
LDR             R0, =aPerformingDhcp ; "performing DHCP renew"
STRB            R2, [R3]
STRB            R2, [R3,#(word_7D9DC+1 - 0x7D9DC)]
BL              sub_16DDC
LDR             R3, [R7,#0x29C+var_29C]
SUB             R3, R3, #1
CMP             R3, #5  ; switch 6 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_25654 ; jumptable 00025654 default case
jpt_25654 DCD loc_25870 ; jump table for switch statement
DCD loc_25838
DCD loc_25840
DCD loc_25840
DCD loc_25864
DCD loc_25870

loc_25674               ; jumptable 00025528 case 0
LDR             R2, [SP,#0x30C+var_28C]
CMP             R2, R5
MOVLE           R3, #0
MOVGT           R3, #1
CMP             R2, #0
MOVEQ           R3, #1
CMP             R3, #0
BEQ             loc_2572C
CMP             R5, #0
BNE             loc_256A4
BL              rand
STR             R0, [SP,#0x30C+var_2CC]

loc_256A4
MOV             R1, R8
LDR             R0, [SP,#0x30C+var_2CC]
BL              sub_242B0

loc_256B0
LDR             R4, [SP,#0x30C+seconds]
ADD             R5, R5, #1

loc_256B8
MOV             R7, #0
B               def_259BC ; jumptable 000259BC default case, case 2

loc_256C0
TST             R6, #0x40
BEQ             loc_25754
LDR             R0, =aNoLeaseFailing ; "no lease, failing"
BL              sub_16DDC
MOV             R3, #1
STR             R3, [SP,#0x30C+s2]

loc_256D8
LDR             R3, =dword_7DBC8
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_256F4
LDR             R3, =buf
LDR             R0, [R3,#(dword_7D9C0 - 0x7D790)] ; name
BL              unlink

loc_256F4
LDR             R0, [SP,#0x30C+s2]
ADD             SP, SP, #0x30C
POP             {R4-R11,PC}

loc_25700               ; jumptable 00025528 case 1
CMP             R5, #2
BGT             loc_2571C
MOV             R2, R8
LDR             R1, [SP,#0x30C+var_2D0]
LDR             R0, [SP,#0x30C+var_2CC]
BL              sub_24318
B               loc_256B0

loc_2571C
MOV             R0, #2
BL              sub_24794
MOV             R3, #0
STR             R3, [R7,#0x29C+var_29C]

loc_2572C
LDR             R1, =aLeasefail ; "leasefail"
MOV             R0, #0
BL              sub_24D00
TST             R6, #0x200000
BEQ             loc_256C0
BIC             R6, R6, #0x280000
LDR             R0, =aNoLeaseForking ; "no lease, forking to background"
ORR             R6, R6, #0x80000
BL              sub_16DDC
BL              sub_24728

loc_25754
LDR             R4, [SP,#0x30C+var_294]

loc_25758
MOV             R5, #0
B               loc_256B8

loc_25760               ; jumptable 00025528 case 2
MOV             R3, #3
MOV             R2, #0
STR             R3, [R7,#0x29C+var_29C]
MOV             R0, #1
LDR             R3, =word_7D9DC
STRB            R2, [R3]
STRB            R2, [R3,#(word_7D9DC+1 - 0x7D9DC)]
BL              sub_24794
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_25C78
LDR             R0, =aEnteringRenewS ; "entering renew state"
BL              sub_16DDC

loc_25798               ; jumptable 00025528 cases 3,5
CMP             R4, #0x3C ; '<'
BLE             loc_257C0

loc_257A0
MOV             R2, R8
LDR             R1, [SP,#0x30C+var_2D0]
LDR             R0, [SP,#0x30C+var_2CC]
BL              sub_243F4
CMP             R0, #0
BLT             loc_257C0

loc_257B8
MOV             R4, R4,ASR#1
B               loc_256B8

loc_257C0
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_257D8
LDR             R0, =aEnteringRebind ; "entering rebinding state"
BL              sub_16DDC

loc_257D8
LDR             R3, =dword_7D630
MOV             R2, #4
STR             R2, [R3]

loc_257E4               ; jumptable 00025528 case 4
MOV             R0, #2
BL              sub_24794
CMP             R4, #0
BLE             loc_25808
MOV             R2, R8
MOV             R1, #0
LDR             R0, [SP,#0x30C+var_2CC]
BL              sub_243F4
B               loc_257B8

loc_25808
LDR             R0, =aLeaseLostEnter ; "lease lost, entering init state"
MOV             R5, #0
BL              sub_16DDC
LDR             R1, =aDeconfig ; "deconfig"
MOV             R0, #0
BL              sub_24D00
LDR             R3, =dword_7D630
STR             R5, [R3]
LDR             R3, =word_7D9DC
STRB            R5, [R3]
STRB            R5, [R3,#(word_7D9DC+1 - 0x7D9DC)]
B               loc_256B8

loc_25838               ; jumptable 00025654 case 1
MOV             R0, #1
BL              sub_24794

loc_25840               ; jumptable 00025654 cases 2,3
MOV             R3, #5

loc_25844
STR             R3, [R7,#0x29C+var_29C]

def_25654               ; jumptable 00025654 default case
LDR             R3, [R7,#0x29C+var_29C]
CMP             R3, #5
BNE             loc_25C64
LDR             R3, [SP,#0x30C+var_294]
CMP             R4, R3
MOVGE           R4, R3
B               loc_25798 ; jumptable 00025528 cases 3,5

loc_25864               ; jumptable 00025654 case 4
LDR             R1, =aDeconfig ; "deconfig"
MOV             R0, #0
BL              sub_24D00

loc_25870               ; jumptable 00025654 cases 0,5
MOV             R0, #2
BL              sub_24794
MOV             R3, #0
B               loc_25844

loc_25880
MOV             R1, R8
LDR             R0, [SP,#0x30C+var_2D0]
BL              sub_25138

loc_2588C
MOV             R4, #0x7FFFFFFF
B               def_259BC ; jumptable 000259BC default case, case 2

loc_25894
LDR             R1, =aSigterm ; "SIGTERM"
LDR             R0, =aReceivedS ; "received %s"
BL              sub_16DDC

loc_258A0
TST             R6, #0x200
BEQ             loc_256D8
MOV             R1, R8
LDR             R0, [SP,#0x30C+var_2D0]
BL              sub_25138
B               loc_256D8

loc_258B8
LDR             R3, =dword_7D4C8
LDR             R1, [R3]
LDRSH           R3, [SP,#0x30C+var_27A]
CMP             R3, #0
BEQ             def_259BC ; jumptable 000259BC default case, case 2
LDR             R3, =dword_7D62C
ADD             R0, SP, #0x30C+var_278
LDR             R3, [R3]
CMP             R3, #1
BNE             loc_25950
BL              sub_26190

loc_258E4
CMN             R0, #1
MOV             R10, R0
BNE             loc_2590C
LDR             R0, =aReadErrorMReop ; "read error: %m, reopening socket"
BL              sub_16DDC
LDR             R0, [SP,#0x30C+seconds] ; seconds
BL              sleep
LDR             R3, =dword_7D62C
LDR             R0, [R3]
BL              sub_24794

loc_2590C
BL              sub_1882C
CMP             R10, #0
SUB             R7, R7, R9
ADD             R7, R0, R7
BLT             def_259BC ; jumptable 000259BC default case, case 2
LDR             R1, [SP,#0x30C+n+2]
LDR             R3, [SP,#0x30C+var_2CC]
CMP             R1, R3
BEQ             loc_25958
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BEQ             def_259BC ; jumptable 000259BC default case, case 2
LDR             R2, [SP,#0x30C+var_2CC]
LDR             R0, =aXidXOurIsXIgno ; "xid %x (our is %x), ignoring packet"
BL              sub_16DDC
B               def_259BC ; jumptable 000259BC default case, case 2

loc_25950
BL              sub_24478
B               loc_258E4

loc_25958               ; n
LDRB            R2, [SP,#0x30C+n]
CMP             R2, #6
BNE             loc_25978
LDR             R1, =dword_7D990 ; s2
ADD             R0, SP, #0x30C+s1 ; s1
BL              memcmp
SUBS            R10, R0, #0
BEQ             loc_25994

loc_25978
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
LDRNE           R0, =aChaddrDoesNotM ; "chaddr does not match, ignoring packet"
BEQ             def_259BC ; jumptable 000259BC default case, case 2

loc_2598C
BL              sub_16DDC
B               def_259BC ; jumptable 000259BC default case, case 2

loc_25994
MOV             R1, #0x35 ; '5'
ADD             R0, SP, #0x30C+var_278
BL              sub_26BB4
CMP             R0, #0
LDREQ           R0, =aNoMessageTypeO ; "no message type option, ignoring packet"
BEQ             loc_2598C
LDR             R9, =dword_7D630
LDR             R3, [R9]
STR             R3, [SP,#0x30C+var_2C4]
CMP             R3, #5  ; switch 6 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_259BC ; jumptable 000259BC default case, case 2
jpt_259BC DCD loc_259DC ; jump table for switch statement
DCD loc_25A28
DCD def_259BC
DCD loc_25A28
DCD loc_25A28
DCD loc_25A28

loc_259DC               ; jumptable 000259BC case 0
LDRB            R3, [R0]
CMP             R3, #2
BNE             def_259BC ; jumptable 000259BC default case, case 2
MOV             R1, #0x36 ; '6'
ADD             R0, SP, #0x30C+var_278
BL              sub_26CBC
SUBS            R4, R0, #0
LDRNE           R3, [R4]
STRNE           R3, [SP,#0x30C+var_2D0]
BNE             loc_25A10
LDR             R0, =aNoServerIdUsin ; "no server ID, using 0.0.0.0"
BL              sub_16DDC
STR             R4, [SP,#0x30C+var_2D0]

loc_25A10
LDR             R4, [SP,#0x30C+var_2C4]
MOV             R3, #1
LDR             R8, [SP,#0x30C+in]
STR             R3, [R9]
MOV             R5, R4
B               loc_256B8

loc_25A28               ; jumptable 000259BC cases 1,3-5
LDRB            R3, [R0]
CMP             R3, #5
BNE             loc_25BA0
MOV             R1, #0x33 ; '3'
ADD             R0, SP, #0x30C+var_278
BL              sub_26CBC
CMP             R0, #0
BNE             loc_25AF4
MOV             R4, #0xE10
LDR             R0, =aNoLeaseTimeWit ; "no lease time with ACK, using 1 hour le"...
BL              sub_16DDC

loc_25A54
TST             R6, #0x400000
LDR             R0, [SP,#0x30C+in]
BEQ             loc_25B08
LDR             R3, [SP,#0x30C+var_2C0]
STR             R3, [SP,#0x30C+var_308]
LDR             R3, =buf
LDR             R2, [R3,#(dword_7D9BC - 0x7D790)]
ADD             R3, R3, #0x200
STR             R2, [SP,#0x30C+var_30C]
MOV             R2, #0
MOV             R1, R2
BL              sub_268C4
SUBS            R7, R0, #0
BNE             loc_25B08
LDR             R0, =aOfferedAddress ; "offered address is in use (got ARP repl"...
BL              sub_16DDC
LDR             R1, [SP,#0x30C+in]
LDR             R0, [SP,#0x30C+var_2D0]
BL              sub_24390
LDR             R3, =dword_7D630
LDR             R3, [R3]
CMP             R3, #1
BEQ             loc_25ABC
LDR             R1, =aDeconfig ; "deconfig"
MOV             R0, R7
BL              sub_24D00

loc_25ABC
MOV             R0, #2
MOV             R5, #0
BL              sub_24794
LDR             R3, =word_7D9DC
MOV             R7, R5
STR             R5, [R9]
MOV             R8, R5
STRB            R5, [R3]
STRB            R5, [R3,#(word_7D9DC+1 - 0x7D9DC)]
MOV             R3, R6
LDR             R10, [SP,#0x30C+var_294]

loc_25AE8
MOV             R6, R3
MOV             R4, R10
B               def_259BC ; jumptable 000259BC default case, case 2

loc_25AF4
LDR             R4, [R0]
REV             R4, R4
CMP             R4, #0x10
MOVCC           R4, #0x10
B               loc_25A54

loc_25B08
LDR             R9, =dword_7D630
LDR             R0, [SP,#0x30C+in] ; in
BL              inet_ntoa
MOV             R2, R4
MOV             R1, R0
LDR             R0, =aLeaseOfSObtain ; "lease of %s obtained, lease time %u"
MOV             R4, R4,LSR#1
BL              sub_16DDC
LDR             R8, [SP,#0x30C+in]
BL              sub_1882C
LDR             R1, [R9]
MOV             R7, R0
LDR             R2, =(aPerformingDhcp+0x10) ; "renew"
ADD             R0, SP, #0x30C+var_278
LDR             R3, =aBound ; "bound"
CMP             R1, #1
MOVNE           R1, R2
MOVEQ           R1, R3
BL              sub_24D00
BL              sub_1882C
SUB             R7, R0, R7
MOV             R3, #2
CMP             R4, R7
MOV             R0, #0
MOVCS           R10, R4
MOVCC           R7, #0
STR             R3, [R9]
BL              sub_24794
TST             R6, #0x100
BNE             loc_258A0
TST             R6, #0x80000
BIC             R3, R6, #0x40 ; '@'
BNE             loc_25AE8
BIC             R6, R6, #0x280000
BIC             R6, R6, #0x40 ; '@'
BL              sub_24728
ORR             R3, R6, #0x80000
B               loc_25AE8

loc_25BA0
CMP             R3, #6
BNE             def_259BC ; jumptable 000259BC default case, case 2
LDR             R3, [SP,#0x30C+var_2D0]
CMP             R3, #0
BNE             loc_25C0C

loc_25BB4
LDR             R1, =aDhcpNak ; "DHCP NAK"
LDR             R0, =aReceivedS ; "received %s"
BL              sub_16DDC
LDR             R1, =aNak ; "nak"
ADD             R0, SP, #0x30C+var_278
BL              sub_24D00
LDR             R3, [R9]
CMP             R3, #1
BNE             loc_25C4C

loc_25BD8
MOV             R0, #2
MOV             R4, #0
BL              sub_24794
MOV             R0, #3  ; seconds
MOV             R5, R4
BL              sleep
LDR             R3, =word_7D9DC
MOV             R7, R4
STR             R4, [R9]
MOV             R8, R4
STRB            R4, [R3]
STRB            R4, [R3,#(word_7D9DC+1 - 0x7D9DC)]
B               def_259BC ; jumptable 000259BC default case, case 2

loc_25C0C
MOV             R1, #0x36 ; '6'
ADD             R0, SP, #0x30C+var_278
BL              sub_26CBC
CMP             R0, #0
BNE             loc_25C38

loc_25C20
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BEQ             def_259BC ; jumptable 000259BC default case, case 2
LDR             R0, =aReceivedDhcpNa ; "received DHCP NAK with wrong server ID,"...
B               loc_2598C

loc_25C38
LDR             R3, [R0]
LDR             R2, [SP,#0x30C+var_2D0]
CMP             R3, R2
BNE             loc_25C20
B               loc_25BB4

loc_25C4C
LDR             R1, =aDeconfig ; "deconfig"
MOV             R0, #0
BL              sub_24D00
B               loc_25BD8

def_25528               ; jumptable 00025528 default case
MOV             R7, #0
B               loc_2588C

loc_25C64
MOV             R4, #0
B               loc_25758

loc_25C6C
MOV             R3, #1
STR             R3, [SP,#0x30C+s2]
B               loc_256F4

loc_25C78
CMP             R4, #0x3C ; '<'
BGT             loc_257A0
B               loc_257D8
; End of function sub_251CC

off_25C84 DCD a2000     ; "2000"
off_25C88 DCD buf
off_25C8C DCD aEth0     ; "eth0"
off_25C90 DCD aEtcUdhcpcDefau ; "/etc/udhcpc/default.script"
off_25C94 DCD aUdhcp1293 ; "udhcp 1.29.3"
off_25C98 DCD dword_7DBAC
off_25C9C DCD aCvHHFINpQrrSTT ; "^CV:H:h:F:i:np:qRr:s:T:+t:+SA:+O:*ox:*f"...
off_25CA0 DCD aClientidNone ; "clientid-none"
off_25CA4 DCD aOptionHNameIsD ; "option -h NAME is deprecated, use -x ho"...
off_25CA8 DCD dword_7DB94
off_25CAC DCD aSubnet   ; "subnet"
off_25CB0 DCD unk_67632
off_25CB4 DCD unk_67633
off_25CB8 DCD dword_7D9C8
off_25CBC DCD dword_7D990
off_25CC0 DCD dword_7DB90
off_25CC4 DCD dword_7D4BC
off_25CC8 DCD aStartedV1293 ; "started, v1.29.3"
off_25CCC DCD dword_7D630
off_25CD0 DCD aDeconfig ; "deconfig"
off_25CD4 DCD dword_7D4C8
off_25CD8 DCD asc_6B39D+1 ; ""
off_25CDC DCD aWaitingUSecond ; "waiting %u seconds"
dword_25CE0 DCD 0x20C49A
off_25CE4 DCD aPoll_0   ; "poll"
off_25CE8 DCD word_7D9DC
off_25CEC DCD aPerformingDhcp ; "performing DHCP renew"
off_25CF0 DCD aNoLeaseFailing ; "no lease, failing"
off_25CF4 DCD dword_7DBC8
off_25CF8 DCD aLeasefail ; "leasefail"
off_25CFC DCD aNoLeaseForking ; "no lease, forking to background"
off_25D00 DCD aEnteringRenewS ; "entering renew state"
off_25D04 DCD aEnteringRebind ; "entering rebinding state"
off_25D08 DCD aLeaseLostEnter ; "lease lost, entering init state"
off_25D0C DCD aSigterm  ; "SIGTERM"
off_25D10 DCD aReceivedS ; "received %s"
off_25D14 DCD dword_7D62C
off_25D18 DCD aReadErrorMReop ; "read error: %m, reopening socket"
off_25D1C DCD aXidXOurIsXIgno ; "xid %x (our is %x), ignoring packet"
off_25D20 DCD aChaddrDoesNotM ; "chaddr does not match, ignoring packet"
off_25D24 DCD aNoMessageTypeO ; "no message type option, ignoring packet"
off_25D28 DCD aNoServerIdUsin ; "no server ID, using 0.0.0.0"
off_25D2C DCD aNoLeaseTimeWit ; "no lease time with ACK, using 1 hour le"...
off_25D30 DCD aOfferedAddress ; "offered address is in use (got ARP repl"...
off_25D34 DCD aLeaseOfSObtain ; "lease of %s obtained, lease time %u"
off_25D38 DCD aPerformingDhcp+0x10 ; "renew"
off_25D3C DCD aBound    ; "bound"
off_25D40 DCD aDhcpNak  ; "DHCP NAK"
off_25D44 DCD aNak      ; "nak"
off_25D48 DCD aReceivedDhcpNa ; "received DHCP NAK with wrong server ID,"...



; void *__fastcall sub_25D4C(int, unsigned int, const char *)
sub_25D4C

var_C= -0xC
s= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R10, #0
MOV             R11, R1
MOV             R7, R10
STR             R0, [SP,#0xC+var_C]
STR             R2, [SP,#0xC+s]

loc_25D64
MOV             R5, #0
MOV             R9, R5
MOV             R6, R5
MOV             R4, R5

loc_25D74
CMP             R11, R4
BHI             loc_25DB0
CMP             R5, #0
BEQ             loc_25DD4
CMP             R7, #0
BNE             loc_25E90
LDR             R0, [SP,#0xC+s] ; s
BL              strlen
ADD             R0, R5, R0
BL              sub_1748C
LDR             R1, [SP,#0xC+s]
MOV             R10, R0
BL              stpcpy
MOV             R7, R0
B               loc_25D64

loc_25DB0
LDR             R3, [SP,#0xC+var_C]
LDRB            R8, [R3,R4]
ADD             R1, R3, R4
AND             R2, R8, #0xC0
CMP             R2, #0xC0
BNE             loc_25E14
ADD             R4, R4, #2
CMP             R4, R11
BLS             loc_25DE4

loc_25DD4
MOV             R10, #0

loc_25DD8
MOV             R0, R10
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_25DE4
CMP             R6, #0
LDRB            R2, [R1,#1]
MOVEQ           R6, R4
MOV             R4, R8,LSL#8
ADD             R9, R9, #1
AND             R4, R4, #0x3F00
ORR             R4, R4, R2

loc_25E00
MOVW            R3, #0x1806
CMP             R5, R3
CMPLS           R9, #6
BHI             loc_25DD4
B               loc_25D74

loc_25E14
CMP             R8, #0
BEQ             loc_25E58
ADD             R4, R4, #1
ADD             R4, R4, R8
CMP             R4, R11
BHI             loc_25DD4
CMP             R7, #0
BEQ             loc_25E4C
MOV             R2, R8  ; n
ADD             R1, R1, #1 ; src
ADD             R0, R7, R5 ; dest
BL              memcpy
MOV             R3, #0x2E ; '.'
STRB            R3, [R0,R8]

loc_25E4C
ADD             R5, R5, #1
ADD             R5, R8, R5
B               loc_25E00

loc_25E58
CMP             R6, #0
ADDEQ           R4, R4, #1
MOVNE           R4, R6
MOVNE           R9, R8
MOVS            R6, R5
MOVNE           R6, #1
CMP             R7, #0
MOVEQ           R6, #0
CMP             R6, #0
ADDNE           R2, R7, R5
MOVNE           R3, #0x20 ; ' '
STRBNE          R3, [R2,#-1]
MOVNE           R6, #0
B               loc_25E00

loc_25E90
ADD             R5, R7, R5
MOV             R3, #0
STRB            R3, [R5,#-1]
B               loc_25DD8
; End of function sub_25D4C




; char *__fastcall sub_25EA0(int, int, char *s, _DWORD *)
sub_25EA0

var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R11, R0
SUB             SP, SP, #0x14
MOV             R0, R2  ; s
MOV             R5, R2
STR             R1, [SP,#0x14+var_C]
STR             R3, [SP,#0x14+var_10]
BL              strlen
ADD             R0, R0, #2
BL              sub_1748C
MOV             R4, R0
ADD             R1, R0, #1
MOV             LR, R0

loc_25ED4
LDRB            R3, [R5],#1
MOV             R12, R1
CMP             R3, #0
CMPNE           R3, #0x2E ; '.'
BNE             loc_25F60
SUB             R2, R1, LR
SUB             R2, R2, #1
CLZ             R0, R2
MOV             R0, R0,LSR#5
CMP             R2, #0x3F ; '?'
ORRGT           R0, R0, #1
CMP             R0, #0
BNE             loc_25F1C
CMP             R3, #0x2E ; '.'
BNE             loc_25F3C
LDRB            R0, [R5]
CMP             R0, #0x2E ; '.'
BNE             loc_25F3C

loc_25F1C               ; ptr
MOV             R0, R4
BL              free

loc_25F24
LDR             R3, [SP,#0x14+var_10]
MOV             R4, #0
STR             R4, [R3]

loc_25F30
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_25F3C
CMP             R3, #0
STRB            R2, [LR]
BEQ             loc_25F7C
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_25F7C

loc_25F54
ADD             R1, R1, #1
MOV             LR, R12
B               loc_25ED4

loc_25F60
SUB             R2, R3, #0x41 ; 'A'
MOV             R12, LR
CMP             R2, #0x19
ADDLS           R3, R3, #0x20 ; ' '
UXTBLS          R3, R3
STRB            R3, [R1]
B               loc_25F54

loc_25F7C
SUB             R3, R1, R4
CMP             R3, #0xFE
BGT             loc_25F1C
MOV             R3, #0
CMP             R4, R3
STRB            R3, [R1]
BEQ             loc_25F24
MOV             R5, R4
B               loc_25FB0

loc_25FA0
CMP             R11, #0
BNE             loc_26058

loc_25FA8
ADD             R10, R10, #1
ADD             R5, R5, R10

loc_25FB0
LDRB            R10, [R5]
CMP             R10, #0
BNE             loc_25FA0
B               loc_2607C

loc_25FC0
ADD             R8, R8, #1
ADD             R6, R6, R8

loc_25FC8
LDR             R3, [SP,#0x14+var_C]
CMP             R3, R6
BLE             loc_25FA8
LDRB            R8, [R11,R6]
ADD             R7, R11, R6
AND             R3, R8, #0xC0
CMP             R3, #0xC0
ADDEQ           R6, R6, #2
BEQ             loc_25FC8
CMP             R8, #0
BEQ             loc_26050
MOV             R3, R5

loc_25FF8
LDRB            R9, [R7]
MOV             R1, R3  ; s2
MOV             R0, R7  ; s1
STR             R3, [SP,#0x14+var_8]
ADD             R9, R9, #1
MOV             R2, R9  ; n
BL              memcmp
CMP             R0, #0
LDR             R3, [SP,#0x14+var_8]
BNE             loc_25FC0
CMP             R9, #1
BEQ             loc_26060
LDRB            R2, [R7,R9]!
ADD             R3, R3, R9
AND             R1, R2, #0xC0
CMP             R1, #0xC0
MOVEQ           R2, R2,LSL#8
LDRBEQ          R7, [R7,#1]
ANDEQ           R2, R2, #0x3F00
ORREQ           R7, R2, R7
ADDEQ           R7, R11, R7
B               loc_25FF8

loc_26050
ADD             R6, R6, #1
B               loc_25FC8

loc_26058
MOV             R6, #0
B               loc_25FC8

loc_26060
CMP             R6, #0
BLT             loc_25FA8
MOV             R3, #0xFFFFFFC0
STRB            R6, [R5,#1]
ORR             R3, R3, R6,ASR#8
ADD             R5, R5, #1
STRB            R3, [R5,#-1]

loc_2607C
LDR             R3, [SP,#0x14+var_10]
SUB             R5, R5, R4
ADD             R5, R5, #1
STR             R5, [R3]
B               loc_25F30
; End of function sub_25EA0




; void __fastcall sub_26090(void *, unsigned int)
sub_26090
PUSH            {R4,LR}
MOV             R2, #0x274 ; n
MOV             R4, R1
MOV             R1, #0  ; c
BL              memset
CMP             R4, #6
MOV             R2, #1
MOV             R3, R0
STRB            R2, [R0]
BHI             loc_260C8
MOV             R2, R2,LSL R4
TST             R2, #0x64
MOVNE           R2, #2
STRBNE          R2, [R0]

loc_260C8
MOV             R2, #1
MOV             R1, #0xFFFFFF82
STRB            R2, [R3,#1]
MOV             R2, #6
STRB            R2, [R3,#2]
MOV             R2, #0x63 ; 'c'
STRB            R2, [R3,#0xEC]
MOV             R0, R3
STRB            R1, [R3,#0xED]
MOV             R1, #0x53 ; 'S'
STRB            R2, [R3,#0xEF]
MOV             R2, #0xFFFFFFFF
STRB            R2, [R3,#0xF0]
MOV             R2, R4
STRB            R1, [R3,#0xEE]
MOV             R1, #0x35 ; '5'
POP             {R4,LR}
B               sub_26D7C
; End of function sub_26090




; void __fastcall sub_26110(int)
sub_26110

var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_2C= -0x2C

LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #1
BXLS            LR
PUSH            {R4,LR}
MOV             R4, R0
LDR             R3, [R0,#0xC]
SUB             SP, SP, #0x38 ; '8'
LDR             R2, [R0,#4]
LDRB            R1, [R0,#2]
LDR             R0, [R0,#0x18]
STR             R0, [SP,#0x40+var_38]
LDR             R0, [R4,#0x14]
STR             R0, [SP,#0x40+var_3C]
LDR             R0, [R4,#0x10]
STR             R0, [SP,#0x40+var_40]
LDR             R0, =aHlenXXidXCiadd ; " hlen %x xid %x ciaddr %x yiaddr %x sia"...
BL              sub_16DDC
MOV             R2, #0x10
ADD             R1, R4, #0x1C
ADD             R0, SP, #0x40+var_2C
BL              sub_16FB4
MOV             R3, #0
ADD             R1, SP, #0x40+var_2C
STRB            R3, [R0]
LDR             R0, =aChaddrS ; " chaddr %s"
BL              sub_16DDC
ADD             SP, SP, #0x38 ; '8'
POP             {R4,PC}
; End of function sub_26110

off_26184 DCD dword_7DBAC
off_26188 DCD aHlenXXidXCiadd ; " hlen %x xid %x ciaddr %x yiaddr %x sia"...
off_2618C DCD aChaddrS  ; " chaddr %s"



; int __fastcall sub_26190(_DWORD *, int)
sub_26190
PUSH            {R4-R6,LR}
MOV             R2, #0x274 ; n
MOV             R4, R1
MOV             R5, R0
MOV             R1, #0  ; c
BL              memset
MOV             R0, R4  ; fd
MOV             R2, #0x274 ; nbytes
MOV             R1, R5  ; buf
BL              sub_1800C
SUBS            R4, R0, #0
BGE             loc_261E0
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_261D8
LDR             R0, =aPacketReadErro ; "packet read error, ignoring"
BL              sub_16DDC

loc_261D8
MOV             R0, R4
POP             {R4-R6,PC}

loc_261E0
CMP             R4, #0xEF
BLE             loc_261F8
LDR             R2, [R5,#0xEC]
LDR             R3, =0x63538263
CMP             R2, R3
BEQ             loc_26208

loc_261F8
LDR             R0, =aPacketWithBadM ; "packet with bad magic, ignoring"
MOV             R4, #0xFFFFFFFE
BL              sub_16DDC
B               loc_261D8

loc_26208
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_26224
LDR             R1, =aAPacket ; "a packet"
LDR             R0, =aReceivedS ; "received %s"
BL              sub_16DDC

loc_26224
MOV             R0, R5
BL              sub_26110
B               loc_261D8
; End of function sub_26190

off_26230 DCD dword_7DBAC
off_26234 DCD aPacketReadErro ; "packet read error, ignoring"
dword_26238 DCD 0x63538263
off_2623C DCD aPacketWithBadM ; "packet with bad magic, ignoring"
off_26240 DCD aAPacket  ; "a packet"
off_26244 DCD aReceivedS ; "received %s"



; ssize_t __fastcall sub_26248(const void *, int, unsigned int, int, unsigned int, int *, int)
sub_26248

addr= -0x2B4
addr_len= -0x2B0
var_2A8= -0x2A8
var_2A4= -0x2A4
var_2A0= -0x2A0
var_29C= -0x29C
var_298= -0x298
s= -0x294
var_292= -0x292
var_28C= -0x28C
var_28B= -0x28B
var_28A= -0x28A
var_288= -0x288
var_284= -0x284
var_280= -0x280
var_27E= -0x27E
var_27C= -0x27C
var_27A= -0x27A
dest= -0x278
var_188= -0x188
arg_0=  0x24
arg_4=  0x28
arg_8=  0x2C

PUSH            {R4-R11,LR}
MOV             R8, R0
SUB             SP, SP, #0x2B4
MOV             R11, R1
MOV             R4, R2
MOV             R1, #2  ; type
MOV             R2, #8  ; protocol
MOV             R0, #0x11 ; domain
MOV             R10, R3
LDR             R9, [SP,#0x2B4+arg_4]
BL              socket
SUBS            R6, R0, #0
BLT             loc_263E0
MOV             R5, #0
MOV             R2, #0x1C ; n
MOV             R1, R5  ; c
ADD             R0, SP, #0x2B4+s ; s
STR             R5, [SP,#0x2B4+var_2A0]
ADD             R7, SP, #0x2B4+var_2A8
STR             R5, [SP,#0x2B4+var_29C]
STR             R5, [SP,#0x2B4+var_298]
BL              memset
MOV             R2, #0x274 ; n
MOV             R1, R8  ; src
ADD             R0, SP, #0x2B4+dest ; dest
BL              memcpy
LDR             R3, =0x80011
MOV             R2, #0x14 ; len
LDR             R0, [R9]
MOV             R1, R7  ; addr
STR             R3, [SP,#0x2B4+var_2A8]
LDR             R3, [SP,#0x2B4+arg_8]
STR             R0, [SP,#0x2B4+var_29C]
MOV             R0, R6  ; fd
STR             R3, [SP,#0x2B4+var_2A4]
MOV             R3, #6
STRB            R3, [SP,#0x2B4+var_2A0+3]
LDRH            R3, [R9,#4]
STRH            R3, [SP,#0x2B4+var_298]
BL              bind
CMP             R0, R5
LDRLT           R5, =aBindS ; "bind(%s)"
MOVLT           R4, #0xFFFFFFFF
BLT             loc_263B8
ADD             R0, SP, #0x2B4+var_188
REV16           R4, R4
BL              sub_26CDC
RSB             R0, R0, #0x130
MOV             R3, #0x11
ADD             R0, R0, #3
STRB            R3, [SP,#0x2B4+var_28B]
CMP             R0, #0xF8
LDR             R3, [SP,#0x2B4+arg_0]
MOVCS           R0, #0xF8
STRH            R4, [SP,#0x2B4+var_280]
UXTH            R4, R0
RSB             R9, R0, #0x240
REV16           R3, R3
STR             R11, [SP,#0x2B4+var_288]
STRH            R3, [SP,#0x2B4+var_27E]
RSB             R3, R4, #0x22C
REV16           R3, R3
MOV             R1, R9
ADD             R0, SP, #0x2B4+s
STRH            R3, [SP,#0x2B4+var_27C]
STRH            R3, [SP,#0x2B4+var_292]
RSB             R4, R4, #0x240
STR             R10, [SP,#0x2B4+var_284]
REV16           R4, R4
BL              sub_5A500
MOV             R3, #0x45 ; 'E'
MOV             R1, #0x14
STRH            R0, [SP,#0x2B4+var_27A]
ADD             R0, SP, #0x2B4+s
STRB            R3, [SP,#0x2B4+s]
MOV             R3, #0x40 ; '@'
STRB            R3, [SP,#0x2B4+var_28C]
STRH            R4, [SP,#0x2B4+var_292]
BL              sub_5A500
STRH            R0, [SP,#0x2B4+var_28A]
MOV             R0, R8
BL              sub_26110
MOV             R3, #0x14
STR             R7, [SP,#0x2B4+addr] ; addr
STR             R3, [SP,#0x2B4+addr_len] ; addr_len
MOV             R3, R5  ; flags
LDR             R5, =aSendto_0 ; "sendto"
MOV             R2, R9  ; n
ADD             R1, SP, #0x2B4+s ; buf
MOV             R0, R6  ; fd
BL              sendto
MOV             R4, R0

loc_263B8               ; fd
MOV             R0, R6
BL              close
CMP             R4, #0
BGE             loc_263D4

loc_263C8
LDR             R1, =(aSeqpacket+3) ; "PACKET"
MOV             R0, R5
BL              sub_16AF4

loc_263D4
MOV             R0, R4
ADD             SP, SP, #0x2B4
POP             {R4-R11,PC}

loc_263E0
LDR             R5, =aSocketS ; "socket(%s)"
MOV             R4, #0xFFFFFFFF
B               loc_263C8
; End of function sub_26248

dword_263EC DCD 0x80011
off_263F0 DCD aBindS    ; "bind(%s)"
off_263F4 DCD aSendto_0 ; "sendto"
off_263F8 DCD aSeqpacket+3 ; "PACKET"
off_263FC DCD aSocketS  ; "socket(%s)"



; int __fastcall sub_26400(void *, int, unsigned int, int, unsigned int)
sub_26400

var_10= -0x10
var_E= -0xE
var_C= -0xC
var_8= -8
var_4= -4
arg_0=  0x20

PUSH            {R0-R10,LR}
MOV             R10, R1
MOV             R1, #2  ; type
MOV             R7, R0
MOV             R4, R2
MOV             R0, R1  ; domain
MOV             R2, #0x11 ; protocol
MOV             R8, R3
BL              socket
SUBS            R6, R0, #0
BLT             loc_26510
BL              sub_62414
MOV             R5, #0
REV16           R4, R4
MOV             R9, #2
MOV             R2, #0x10 ; len
MOV             R1, SP  ; addr
MOV             R0, R6  ; fd
STR             R5, [SP,#0x10+var_8]
STR             R5, [SP,#0x10+var_4]
STRH            R4, [SP,#0x10+var_E]
STRH            R9, [SP,#0x10+var_10]
STR             R10, [SP,#0x10+var_C]
BL              bind
CMN             R0, #1
MOV             R4, R0
LDREQ           R5, =aBindS ; "bind(%s)"
BEQ             loc_264E8
LDR             R3, [SP,#0x10+arg_0]
MOV             R2, #0x10 ; len
MOV             R1, SP  ; addr
MOV             R0, R6  ; fd
STR             R5, [SP,#0x10+var_8]
REV16           R3, R3
STR             R5, [SP,#0x10+var_4]
STRH            R9, [SP,#0x10+var_10]
STRH            R3, [SP,#0x10+var_E]
STR             R8, [SP,#0x10+var_C]
BL              connect
CMN             R0, #1
MOV             R4, R0
LDREQ           R5, =aConnect_0 ; "connect"
BEQ             loc_264E8
MOV             R0, R7
LDR             R5, =(aShortWrite+6) ; "write"
BL              sub_26110
ADD             R0, R7, #0xF0
BL              sub_26CDC
RSB             R0, R0, #0x130
MOV             R1, R7  ; buf
ADD             R0, R0, #3
CMP             R0, #0xF8
MOVCC           R2, R0
MOVCS           R2, #0xF8
RSB             R2, R2, #0x224 ; n
MOV             R0, R6  ; fd
BL              sub_180F4
MOV             R4, R0

loc_264E8               ; fd
MOV             R0, R6
BL              close
CMP             R4, #0
BGE             loc_26504

loc_264F8
LDR             R1, =aUdp ; "UDP"
MOV             R0, R5
BL              sub_16AF4

loc_26504
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R10,PC}

loc_26510
LDR             R5, =aSocketS ; "socket(%s)"
MOV             R4, #0xFFFFFFFF
B               loc_264F8
; End of function sub_26400

off_2651C DCD aBindS    ; "bind(%s)"
off_26520 DCD aConnect_0 ; "connect"
off_26524 DCD aShortWrite+6 ; "write"
off_26528 DCD aUdp      ; "UDP"
off_2652C DCD aSocketS  ; "socket(%s)"



; void __fastcall sub_26530(char, int, int)
sub_26530

var_5= -5
var_4= -4

LDR             R3, =dword_7DB94
PUSH            {R0-R2,R4,R5,LR}
ADD             R1, SP, #0xC+var_4
MOV             R2, #1  ; n
LDR             R4, [R3]
LDR             R3, =dword_7D634
LDR             R5, [R4]
STRB            R0, [R1,#-1]! ; buf
LDR             R0, [R3,#(dword_7D638 - 0x7D634)] ; fd
BL              write
CMP             R0, #1
BEQ             loc_26568
LDR             R0, =aCanTSendSignal ; "can't send signal"
BL              sub_16AF4

loc_26568
STR             R5, [R4]
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_26530

off_26574 DCD dword_7DB94
off_26578 DCD dword_7D634
off_2657C DCD aCanTSendSignal ; "can't send signal"



; __sighandler_t sub_26580()
sub_26580
PUSH            {R4,LR}
LDR             R4, =dword_7D634
MOV             R0, R4
BL              sub_1766C
LDR             R0, [R4]
BL              sub_16E9C
LDR             R0, [R4,#(dword_7D638 - 0x7D634)]
BL              sub_16E9C
LDR             R0, [R4]
BL              sub_16E34
LDR             R0, [R4,#(dword_7D638 - 0x7D634)]
BL              sub_16E34
LDR             R1, =sub_26530
MOV             R0, #0x9400
POP             {R4,LR}
B               sub_18184
; End of function sub_26580

off_265C0 DCD dword_7D634
off_265C4 DCD sub_26530



; int __fastcall sub_265C8(int result, int)
sub_265C8
LDR             R3, =dword_7D634
PUSH            {R4-R6,LR}
SUBS            R6, R1, #0
MOV             R5, #1
MOV             R4, R0
LDR             R3, [R3]
STRH            R5, [R0,#4]
STR             R3, [R0]
MOV             R3, #0xFFFFFFFF
STR             R3, [R0,#8]
BLT             loc_26604
MOV             R0, R6
BL              sub_16E9C
STR             R6, [R4,#8]
STRH            R5, [R4,#0xC]

loc_26604
MOV             R3, #0
STRH            R3, [R4,#0xE]
POP             {R4-R6,PC}
; End of function sub_265C8

off_26610 DCD dword_7D634



; int __fastcall sub_26614(int, int, int)
sub_26614

buf= -5
var_4= -4

LDR             R3, =dword_7D634
PUSH            {R0-R2,LR}
MOV             R2, #1  ; nbytes
ADD             R1, SP, #0xC+buf ; buf
LDR             R0, [R3] ; fd
BL              sub_1800C
CMP             R0, #1
LDRBEQ          R0, [SP,#0xC+buf]
MOVNE           R0, #0
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_26614

off_26640 DCD dword_7D634



; int __fastcall sub_26644(const char *, _DWORD *, _DWORD *, unsigned __int8 *)
sub_26644

var_30= -0x30
var_2C= -0x2C
var_28= -0x28
s= -0x20
var_10= -0x10
in= -0xC
var_s0=  0

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x30
MOV             R8, R0
MOV             R7, R2
MOV             R6, R1
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x30+s ; s
MOV             R4, R3
BL              memset
MOV             R2, #0xFF
MOV             R1, #3
MOV             R0, #2
BL              sub_179A4
MOV             R3, #2
MOV             R5, R0
MOV             R1, R8
ADD             R0, SP, #0x30+s
STRH            R3, [SP,#0x30+var_10]
BL              sub_16EA8
CMP             R7, #0
BEQ             loc_266F8
STR             R8, [SP,#0x30+var_30]
ADD             R2, SP, #0x30+s
LDR             R3, =aIsInterfaceSUp ; "is interface %s up and configured?"
MOVW            R1, #0x8915
MOV             R0, R5
BL              sub_17AA0
CMP             R0, #0
BEQ             loc_266D0

loc_266BC               ; fd
MOV             R0, R5
BL              close
MOV             R0, #0xFFFFFFFF

loc_266C8
ADD             SP, SP, #0x30 ; '0'
POP             {R4-R8,PC}

loc_266D0               ; in
LDR             R0, [SP,#0x30+in]
LDR             R3, =dword_7DBAC
STR             R0, [R7]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_266F8
BL              inet_ntoa
MOV             R1, R0
LDR             R0, =aIpS ; "IP %s"
BL              sub_16DDC

loc_266F8
CMP             R6, #0
BEQ             loc_26740
LDR             R3, =aSiocgifindex ; "SIOCGIFINDEX"
ADD             R2, SP, #0x30+s
MOVW            R1, #0x8933
MOV             R0, R5
BL              sub_17AF4
CMP             R0, #0
BNE             loc_266BC
LDR             R3, =dword_7DBAC
LDR             R1, [SP,#0x30+var_10]
LDR             R3, [R3]
CMP             R3, #1
BLS             loc_26738
LDR             R0, =(aOpeningRawSock+0x16) ; "ifindex %d"
BL              sub_16DDC

loc_26738
LDR             R3, [SP,#0x30+var_10]
STR             R3, [R6]

loc_26740
CMP             R4, #0
BEQ             loc_267B4
LDR             R3, =aSiocgifhwaddr ; "SIOCGIFHWADDR"
ADD             R2, SP, #0x30+s
MOVW            R1, #0x8927
MOV             R0, R5
BL              sub_17AF4
CMP             R0, #0
BNE             loc_266BC
ADD             R3, SP, #0x30+var_s0
LDR             R2, [R3,#-0xE]!
LDRH            R3, [R3,#4]
STR             R2, [R4]
STRH            R3, [R4,#4]
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #1
BLS             loc_267B4
LDRB            R0, [R4,#5]
LDRB            R3, [R4,#2]
LDRB            R2, [R4,#1]
STR             R0, [SP,#0x30+var_28]
LDRB            R0, [R4,#4]
LDRB            R1, [R4]
STR             R0, [SP,#0x30+var_2C]
LDRB            R0, [R4,#3]
STR             R0, [SP,#0x30+var_30]
LDR             R0, =aMac02x02x02x02 ; "MAC %02x:%02x:%02x:%02x:%02x:%02x"
BL              sub_16DDC

loc_267B4               ; fd
MOV             R0, R5
BL              close
MOV             R0, #0
B               loc_266C8
; End of function sub_26644

off_267C4 DCD aIsInterfaceSUp ; "is interface %s up and configured?"
off_267C8 DCD dword_7DBAC
off_267CC DCD aIpS      ; "IP %s"
off_267D0 DCD aSiocgifindex ; "SIOCGIFINDEX"
off_267D4 DCD aOpeningRawSock+0x16 ; "ifindex %d"
off_267D8 DCD aSiocgifhwaddr ; "SIOCGIFHWADDR"
off_267DC DCD aMac02x02x02x02 ; "MAC %02x:%02x:%02x:%02x:%02x:%02x"



; int __fastcall sub_267E0(unsigned int, const char *)
sub_267E0

var_14= -0x14
var_12= -0x12
var_10= -0x10
var_C= -0xC
var_8= -8

LDR             R3, =dword_7DBAC
PUSH            {R4-R7,LR}
MOV             R5, R0
SUB             SP, SP, #0x14
MOV             R7, R1
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_26810
MOV             R2, R1
MOV             R1, R0
LDR             R0, =aOpeningListenS ; "opening listen socket on *:%d %s"
BL              sub_16DDC

loc_26810
MOV             R1, #2
MOV             R2, #0x11
MOV             R0, R1
BL              sub_179A4
MOV             R4, R0
BL              sub_62414
MOV             R0, R4
BL              sub_6241C
CMN             R0, #1
BNE             loc_26840
LDR             R0, =aSoBroadcast ; "SO_BROADCAST"
BL              sub_16B40

loc_26840               ; c
MOV             R1, #0x3A ; ':'
MOV             R0, R7  ; s
BL              strrchr
SUBS            R6, R0, #0
MOV             R1, R7
MOVNE           R3, #0
MOV             R0, R4
STRBNE          R3, [R6]
BL              sub_62424
CMP             R0, #0
BEQ             loc_26870
BL              sub_16E08

loc_26870
CMP             R6, #0
MOV             R0, R4
MOVNE           R3, #0x3A ; ':'
REV16           R5, R5
STRBNE          R3, [R6]
MOV             R3, #0
STR             R3, [SP,#0x14+var_10]
MOV             R2, #0x10
STR             R3, [SP,#0x14+var_C]
MOV             R1, SP
STR             R3, [SP,#0x14+var_8]
MOV             R3, #2
STRH            R3, [SP,#0x14+var_14]
STRH            R5, [SP,#0x14+var_12]
BL              sub_179C0
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R7,PC}
; End of function sub_267E0

off_268B8 DCD dword_7DBAC
off_268BC DCD aOpeningListenS ; "opening listen socket on *:%d %s"
off_268C0 DCD aSoBroadcast ; "SO_BROADCAST"



; int __fastcall sub_268C4(int, const void *, int, int *, const char *, unsigned int)
sub_268C4

fd= -0x58
var_54= -0x54
var_50= -0x50
var_4E= -0x4E
buf= -0x40
var_3C= -0x3C
var_3A= -0x3A
var_36= -0x36
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
s2= -0x2A
var_26= -0x26
var_24= -0x24
s= -0x20
var_1A= -0x1A
arg_0=  0x1C
arg_4=  0x20

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x64
LDR             R8, [SP,#0x64+arg_4]
CMP             R8, #0
MOVEQ           R4, #1
BEQ             loc_26914
MOV             R9, R2
MOV             R5, R1
MOV             R7, R0
MOVW            R2, #0x608 ; protocol
MOV             R1, #0xA ; type
MOV             R0, #0x11 ; domain
MOV             R6, R3
BL              socket
CMN             R0, #1
MOV             R4, R0
STR             R0, [SP,#0x64+fd]
BNE             loc_26920
LDR             R0, =aCanTCreateRawS ; "can't create raw socket"
BL              sub_16AF4

loc_26914
MOV             R0, R4
ADD             SP, SP, #0x64 ; 'd'
POP             {R4-R9,PC} ; addr

loc_26920
BL              sub_6241C
CMN             R0, #1
BNE             loc_2696C
LDR             R0, =aCanTEnableBcas ; "can't enable bcast on raw socket"
BL              sub_16AF4

loc_26934
MOV             R4, #1

loc_26938               ; fd
LDR             R0, [SP,#0x64+fd]
BL              close
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_26914
LDR             R3, =(aUa+5) ; "A"
CMP             R4, #0
LDR             R1, =aNoA ; "no a"
LDR             R0, =aSrpReplyReceiv ; "%srp reply received for this address"
MOVEQ           R1, R3
BL              sub_16DDC
B               loc_26914

loc_2696C               ; n
MOV             R2, #0x1C
MOV             R1, #0  ; c
ADD             R0, SP, #0x64+s ; s
ADD             R4, SP, #0x64+var_50
BL              memset
LDR             R0, =0x1000608
MOV             R3, #0xFFFFFFFF
LDR             R1, =0x4060008
LDR             R2, [R6]
STR             R3, [SP,#0x64+buf]
STRH            R3, [SP,#0x64+var_3C]
LDRH            R3, [R6,#4]
MOV             R6, #0x10
STRD            R0, R1, [SP,#0x64+var_34]
MOV             R1, #0x100
STR             R2, [SP,#0x64+var_3A]
MOV             R0, R4  ; s
STRH            R1, [SP,#0x64+var_2C]
MOV             R1, #0  ; c
STR             R2, [SP,#0x64+s2]
MOV             R2, R6  ; n
STRH            R3, [SP,#0x64+var_36]
STRH            R3, [SP,#0x64+var_26]
STR             R9, [SP,#0x64+var_24]
STR             R7, [SP,#0x64+var_1A]
BL              memset
MOV             R2, #0xE
LDR             R1, [SP,#0x64+arg_0]
ADD             R0, SP, #0x64+var_4E
BL              sub_60B34
STMEA           SP, {R4,R6}
MOV             R3, #0  ; flags
MOV             R2, #0x3C ; '<' ; n
ADD             R1, SP, #0x64+buf ; buf
LDR             R0, [SP,#0x64+fd] ; fd
BL              sendto
CMP             R0, #0
BLT             loc_26934
MOV             R6, R8
MOV             R9, #1

loc_26A0C
BL              sub_187F0
MOV             R2, R6  ; timeout
MOV             R4, R0
MOV             R1, #1  ; nfds
ADD             R0, SP, #0x64+fd ; fds
STRH            R9, [SP,#0x64+var_54]
BL              sub_60AD4
CMP             R0, #0
BLT             loc_26934
BEQ             loc_26A94
MOV             R2, #0x3C ; '<' ; nbytes
ADD             R1, SP, #0x64+buf ; buf
LDR             R0, [SP,#0x64+fd] ; fd
BL              sub_1800C
CMP             R0, #0
BLT             loc_26934
CMP             R0, #0x29 ; ')'
BLE             loc_26A94
LDRH            R3, [SP,#0x64+var_2C]
CMP             R3, #0x200
BNE             loc_26A94
LDR             R3, [SP,#0x64+var_24]
CMP             R3, R7
BNE             loc_26A94
CMP             R5, #0
BEQ             loc_26A8C
MOV             R2, #6  ; n
ADD             R1, SP, #0x64+s2 ; s2
MOV             R0, R5  ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_26934

loc_26A8C
MOV             R4, #0
B               loc_26938

loc_26A94
ADD             R4, R6, R4
SUB             R4, R4, #1
BL              sub_187F0
SUB             R6, R4, R0
CMP             R6, R8
BLS             loc_26A0C
B               loc_26934
; End of function sub_268C4

off_26AB0 DCD aCanTCreateRawS ; "can't create raw socket"
off_26AB4 DCD aCanTEnableBcas ; "can't enable bcast on raw socket"
off_26AB8 DCD dword_7DBAC
off_26ABC DCD aUa+5     ; "A"
off_26AC0 DCD aNoA      ; "no a"
off_26AC4 DCD aSrpReplyReceiv ; "%srp reply received for this address"
dword_26AC8 DCD 0x1000608
dword_26ACC DCD 0x4060008



; void __fastcall sub_26AD0(const char *, unsigned __int8 *)
sub_26AD0

var_214= -0x214

LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #1
BXLS            LR
PUSH            {R4,R5,LR}
SUB             SP, SP, #0x20C
LDRB            R2, [R1,#1]
MOV             R4, R1
MOV             R5, R0
ADD             R1, R1, #2
ADD             R0, SP, #0x218+var_214
BL              sub_16FB4
MOV             R3, #0
MOV             R1, R5
STRB            R3, [R0]
ADD             R3, SP, #0x218+var_214
LDRB            R2, [R4]
LDR             R0, =aS0x02xS ; "%s: 0x%02x %s"
BL              sub_16DDC
ADD             SP, SP, #0x20C
POP             {R4,R5,PC}
; End of function sub_26AD0

off_26B24 DCD dword_7DBAC
off_26B28 DCD aS0x02xS  ; "%s: 0x%02x %s"



; int __fastcall sub_26B2C(char *s2, char *s1)
sub_26B2C
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R6, R0
MOV             R1, R0  ; s2
MOV             R0, R4  ; s1
BL              sub_16880
CMP             R0, #0
POPGE           {R4-R6,PC}
MOV             R5, R4
B               loc_26B64

loc_26B54               ; s
MOV             R0, R5
BL              strlen
ADD             R0, R0, #1
ADD             R5, R5, R0

loc_26B64
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_26B54
SUB             R0, R5, R4
BL              sub_174DC
MOV             R2, R0
MOV             R1, R0

loc_26B80
LDRB            R3, [R4]
LDRB            R0, [R4,#1]!
CMP             R3, #0
BNE             loc_26BA8
CMP             R0, #0
BNE             loc_26BA4
MOV             R1, R6
LDR             R0, =aUnknownOptionS ; "unknown option '%s', known options: %s"
BL              sub_16DBC

loc_26BA4
MOV             R3, #0x20 ; ' '

loc_26BA8
STRB            R3, [R1],#1
B               loc_26B80
; End of function sub_26B2C

off_26BB0 DCD aUnknownOptionS ; "unknown option '%s', known options: %s"



; unsigned __int8 *__fastcall sub_26BB4(unsigned __int8 *, int)
sub_26BB4
PUSH            {R4-R8,LR}
MOV             R2, #0
ADD             R4, R0, #0xF0
MOV             R3, #0x184
MOVW            R5, #0x101
MOVW            R6, #0x202

loc_26BCC
LDRB            LR, [R4]
CMP             LR, #0
SUBEQ           R3, R3, #1
ADDEQ           R4, R4, #1
BEQ             loc_26C78
CMP             LR, #0xFF
BNE             loc_26C1C
AND             R3, R2, R5
CMP             R3, #1
ORREQ           R2, R2, R5
ADDEQ           R4, R0, #0x6C ; 'l'
MOVEQ           R3, #0x80
BEQ             loc_26BCC
AND             R3, R2, R6
CMP             R3, #2
BNE             loc_26C90
ORR             R2, R2, R6
ADD             R4, R0, #0x2C ; ','
MOV             R3, #0x40 ; '@'
B               loc_26BCC

loc_26C1C
CMP             R3, #1
BEQ             loc_26C80
LDRB            R7, [R4,#1]
ADD             R12, R7, #2
SUBS            R3, R3, R12
BMI             loc_26C80
CMP             LR, R1
BNE             loc_26C58
CMP             R7, #0
BEQ             loc_26C80
MOV             R1, R4
LDR             R0, =aOptionFound ; "option found"
BL              sub_26AD0
ADD             R0, R4, #2
POP             {R4-R8,PC}

loc_26C58
SUBS            R7, R12, #2
MOVNE           R7, #1
CMP             LR, #0x34 ; '4'
MOVNE           R7, #0
CMP             R7, #0
LDRBNE          LR, [R4,#2]
ADD             R4, R4, R12
ORRNE           R2, R2, LR

loc_26C78
CMP             R3, #0
BNE             loc_26BCC

loc_26C80
LDR             R0, =aBadPacketMalfo ; "bad packet, malformed option field"
BL              sub_16DDC

loc_26C88
MOV             R0, #0
POP             {R4-R8,PC}

loc_26C90
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #2
BLS             loc_26C88
LDR             R0, =aOption0x02xNot ; "option 0x%02x not found"
BL              sub_16DDC
B               loc_26C88
; End of function sub_26BB4

off_26CAC DCD aOptionFound ; "option found"
off_26CB0 DCD aBadPacketMalfo ; "bad packet, malformed option field"
off_26CB4 DCD dword_7DBAC
off_26CB8 DCD aOption0x02xNot ; "option 0x%02x not found"



; unsigned __int8 *__fastcall sub_26CBC(unsigned __int8 *, int)
sub_26CBC
PUSH            {R4,LR}
BL              sub_26BB4
CMP             R0, #0
POPEQ           {R4,PC}
LDRB            R3, [R0,#-1]
CMP             R3, #4
MOVNE           R0, #0
POP             {R4,PC}
; End of function sub_26CBC




; int __fastcall sub_26CDC(int)
sub_26CDC
MOV             R3, #0

loc_26CE0
LDRB            R2, [R0,R3]
CMP             R2, #0xFF
BNE             loc_26CF4
MOV             R0, R3
BX              LR

loc_26CF4
CMP             R2, #0
ADDNE           R2, R0, R3
LDRBNE          R2, [R2,#1]
ADDNE           R2, R2, #1
ADDNE           R3, R3, R2
ADD             R3, R3, #1
B               loc_26CE0
; End of function sub_26CDC




; void __fastcall sub_26D10(int, const void *)
sub_26D10
PUSH            {R4-R8,LR}
ADD             R6, R0, #0xF0
MOV             R0, R6
MOV             R4, R1
BL              sub_26CDC
LDRB            R5, [R1,#1]
ADD             R5, R5, #2
ADD             R7, R0, R5
ADD             R3, R7, #1
CMP             R3, #0x134
BCC             loc_26D4C
LDRB            R1, [R1]
LDR             R0, =aOption0x02xDid ; "option 0x%02x did not fit into the pack"...
POP             {R4-R8,LR}
B               sub_16DDC

loc_26D4C
MOV             R8, R0
LDR             R0, =aAddingOption ; "adding option"
BL              sub_26AD0
MOV             R2, R5  ; n
MOV             R1, R4  ; src
ADD             R0, R6, R8 ; dest
BL              memcpy
MOV             R3, #0xFFFFFFFF
STRB            R3, [R6,R7]
POP             {R4-R8,PC}
; End of function sub_26D10

off_26D74 DCD aOption0x02xDid ; "option 0x%02x did not fit into the pack"...
off_26D78 DCD aAddingOption ; "adding option"



; void __fastcall sub_26D7C(__int64, int)
sub_26D7C

var_C= -0xC
var_4= -4

LDR             R3, =unk_67632
PUSH            {R0-R2,LR}

loc_26D84
LDRB            R12, [R3,#1]
CMP             R12, #0
BNE             loc_26D9C
LDR             R0, =aCanTAddOption0 ; "can't add option 0x%02x"
BL              sub_16DDC
B               loc_26DC8

loc_26D9C
CMP             R12, R1
BNE             loc_26DD0
LDRB            R3, [R3]
STRB            R1, [SP,#0xC+var_C]
LDR             R1, =byte_67678
AND             R3, R3, #0xF
STR             R2, [SP,#0xC+var_C+2]
LDRB            R3, [R1,R3]
MOV             R1, SP
STRB            R3, [SP,#0xC+var_C+1]
BL              sub_26D10

loc_26DC8
ADD             SP, SP, #0xC
POP             {PC}

loc_26DD0
ADD             R3, R3, #2
B               loc_26D84
; End of function sub_26D7C

off_26DD8 DCD unk_67632
off_26DDC DCD aCanTAddOption0 ; "can't add option 0x%02x"
off_26DE0 DCD byte_67678



; unsigned __int8 *__fastcall sub_26DE4(unsigned __int8 *result, unsigned int)
sub_26DE4
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
LDRB            R3, [R3]
CMP             R3, R1
BCC             loc_26E08
BXEQ            LR
MOV             R0, #0
BX              LR

loc_26E08
LDR             R0, [R0,#4]
B               sub_26DE4
; End of function sub_26DE4




; void __fastcall sub_26E10(unsigned __int8 **, _BYTE *, const char *, size_t)
sub_26E10

n= -4

PUSH            {R0,R1,R4-R8,LR}
MOV             R6, R0
STR             R3, [SP,#8+n]
MOV             R7, R1
MOV             R5, R2
LDRB            R3, [R1]
AND             R3, R3, #0xF
CMP             R3, #9
BNE             loc_26F44
MOV             R0, R2
BL              sub_174F8
MOV             R2, #0xFF
MOV             R1, R5
MOV             R4, R0
BL              sub_17000
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_26E6C
MOV             R1, R5
LDR             R0, =aMalformedHexSt ; "malformed hex string '%s'"
BL              sub_16DBC

loc_26E6C
SUB             R0, R0, R4
STR             R0, [SP,#8+n]

loc_26E74
LDRB            R3, [R7]
AND             R3, R3, #0xF
CMP             R3, #0xC
BNE             loc_26EA0
MOV             R1, #0  ; int
MOV             R2, R5  ; s
ADD             R3, SP, #8+n
MOV             R0, R1  ; int
BL              sub_25EA0
MOV             R5, R0
MOV             R4, R0

loc_26EA0
LDRB            R2, [R7,#1]
LDR             R0, [R6]
MOV             R1, R2
BL              sub_26DE4
SUBS            R8, R0, #0
BNE             loc_26F54
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #1
BLS             loc_26ED0
LDR             R0, =aAttachingOptio ; "attaching option %02x to list"
BL              sub_16DDC

loc_26ED0
MOV             R0, #8
BL              sub_1748C
MOV             R8, R0
LDR             R0, [SP,#8+n]
ADD             R0, R0, #2
BL              sub_1748C
LDRB            R7, [R7,#1]
CMP             R4, #0
LDR             R2, [SP,#8+n] ; n
MOVNE           R1, R4
STR             R0, [R8]
MOVEQ           R1, R5  ; src
STRB            R7, [R0]
ADD             R0, R0, #2 ; dest
STRB            R2, [R0,#-1]
BL              memcpy

loc_26F10
LDR             R3, [R6]
CMP             R3, #0
BEQ             loc_26F2C
LDR             R2, [R3]
LDRB            R2, [R2]
CMP             R2, R7
BCC             loc_26F4C

loc_26F2C
STR             R3, [R8,#4]
STR             R8, [R6]

loc_26F34               ; ptr
MOV             R0, R4
BL              free
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_26F44
MOV             R4, #0
B               loc_26E74

loc_26F4C
ADD             R6, R3, #4
B               loc_26F10

loc_26F54
LDRB            R3, [R7]
TST             R3, #0x20
BEQ             loc_26F34
LDR             R3, =dword_7DBAC
LDR             R3, [R3]
CMP             R3, #1
BLS             loc_26F78
LDR             R0, =aAttachingOptio_0 ; "attaching option %02x to existing membe"...
BL              sub_16DDC

loc_26F78
LDR             R0, [R8]
LDR             R1, [SP,#8+n]
LDRB            R6, [R0,#1]
ADD             R1, R6, R1
CMP             R1, #0xFE
BHI             loc_26F34
ADD             R1, R1, #3
BL              sub_174B4
STR             R0, [R8]
ADD             R2, R6, #2
LDRB            R3, [R7]
AND             R3, R3, #0xF
SUB             R3, R3, #3
CMP             R3, #1
MOVLS           R3, #0x20 ; ' '
ADDLS           R6, R6, #1
STRBLS          R3, [R0,R2]
ADD             R3, R6, #2
LDR             R0, [R8]
CMP             R4, #0
LDR             R2, [SP,#8+n] ; n
MOVNE           R1, R4
MOVEQ           R1, R5  ; src
ADD             R0, R0, R3 ; dest
BL              memcpy
LDR             R3, [SP,#8+n]
LDR             R2, [R8]
ADD             R6, R3, R6
STRB            R6, [R2,#1]
B               loc_26F34
; End of function sub_26E10

off_26FF0 DCD dword_7DB94
off_26FF4 DCD aMalformedHexSt ; "malformed hex string '%s'"
off_26FF8 DCD dword_7DBAC
off_26FFC DCD aAttachingOptio ; "attaching option %02x to list"
off_27000 DCD aAttachingOptio_0 ; "attaching option %02x to existing membe"...



; int __fastcall sub_27004(const char *, _DWORD *)
sub_27004
PUSH            {R4,LR}
MOV             R4, R1
MOV             R1, #0
BL              sub_6247C
SUBS            R3, R0, #0
BEQ             loc_27030
LDR             R3, [R3,#8]
STR             R3, [R4]
BL              free
MOV             R0, #1
POP             {R4,PC}

loc_27030
MOV             R0, R3
POP             {R4,PC}
; End of function sub_27004




; int __fastcall sub_27038(char *, unsigned __int8 **, int, char *)
sub_27038

var_14= -0x14
var_13= -0x13
var_10= -0x10
var_C= -0xC

PUSH            {R4-R11,LR}
MOV             R9, R1
SUB             SP, SP, #0x14
LDR             R1, =delim ; " \t=:"
MOV             R7, R2
MOV             R5, R3
BL              strtok
SUBS            R4, R0, #0
BEQ             def_270D8 ; jumptable 000270D8 default case, case 10
LDR             R6, =dword_7DB94
MOV             R2, #0
MOV             R1, R2
BL              sub_18990
LDR             R3, [R6]
LDR             R3, [R3]
CMP             R0, #0xFE
CMPLS           R3, #0
BNE             loc_27110
MOV             R7, SP
MOV             R3, #9
STRB            R3, [SP,#0x14+var_14]
STRB            R0, [SP,#0x14+var_13]

loc_27090
LDR             R10, =(asc_6B39D+1) ; ""
MOV             R4, #0
LDR             R11, =byte_67678

loc_2709C
LDRB            R3, [R7]
CMP             R3, #9
BNE             loc_27124
MOV             R1, R10 ; delim
MOV             R0, #0  ; s
BL              strtok
MOV             R5, R0
BL              sub_60F88

loc_270BC
CMP             R5, #0
BEQ             loc_271CC
LDRB            R3, [R7]
AND             R3, R3, #0xF
LDRB            R8, [R11,R3]
SUB             R3, R3, #1
CMP             R3, #0xB ; switch 12 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_270D8 ; jumptable 000270D8 default case, case 10
jpt_270D8 DCD loc_27138 ; jump table for switch statement
DCD loc_2714C
DCD loc_27304
DCD loc_27304
DCD loc_2717C
DCD loc_271D8
DCD loc_271F4
DCD loc_27210
DCD loc_272CC
DCD loc_27224
DCD def_270D8
DCD loc_27304

loc_27110               ; s1
MOV             R1, R5
MOV             R0, R4  ; s2
BL              sub_26B2C
ADD             R7, R7, R0,LSL#1
B               loc_27090

loc_27124
LDR             R1, =asc_67879 ; ", \t"
MOV             R0, #0  ; s
BL              strtok
MOV             R5, R0
B               loc_270BC

loc_27138               ; jumptable 000270D8 case 0
ADD             R1, SP, #0x14+var_10
MOV             R0, R5

loc_27140
BL              sub_27004
MOV             R4, R0
B               loc_271A0

loc_2714C               ; jumptable 000270D8 case 1
ADD             R1, SP, #0x14+var_10
MOV             R0, R5
BL              sub_27004
LDR             R1, =asc_6787D ; ", \t/-"
MOV             R4, R0
MOV             R0, #0  ; s
BL              strtok
CMP             R0, #0
CMPNE           R4, #0
BEQ             def_270D8 ; jumptable 000270D8 default case, case 10
ADD             R1, SP, #0x14+var_C
B               loc_27140

loc_2717C               ; jumptable 000270D8 case 4
MOV             R2, #0
MOV             R0, R5
MOV             R1, R2
BL              sub_18990
STRB            R0, [SP,#0x14+var_10]

loc_27190
LDR             R3, [R6]
LDR             R4, [R3]
CLZ             R4, R4
MOV             R4, R4,LSR#5

loc_271A0
CMP             R4, #0
BEQ             def_270D8 ; jumptable 000270D8 default case, case 10
ADD             R5, SP, #0x14+var_10

loc_271AC
MOV             R3, R8
MOV             R2, R5
MOV             R1, R7
MOV             R0, R9
BL              sub_26E10
LDRB            R3, [R7]
TST             R3, #0x20
BNE             loc_2709C

loc_271CC
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_271D8               ; jumptable 000270D8 case 5
MOV             R2, #0
MOV             R0, R5
MOV             R1, R2
BL              sub_18990
REV16           R0, R0
STRH            R0, [SP,#0x14+var_10]
B               loc_27190

loc_271F4               ; jumptable 000270D8 case 6
MOV             R2, #0
MOV             R0, R5
MOV             R1, R2
BL              sub_18990

loc_27204
REV             R0, R0
STR             R0, [SP,#0x14+var_10]
B               loc_27190

loc_27210               ; jumptable 000270D8 case 7
MOV             R2, #0
MOV             R0, R5
MOV             R1, R2
BL              sub_189FC
B               loc_27204

loc_27224               ; jumptable 000270D8 case 9
MOV             R1, #0x2F ; '/'
MOV             R0, R5  ; s
BL              strchr
SUBS            R4, R0, #0
BEQ             def_270D8 ; jumptable 000270D8 default case, case 10
MOV             R8, #0
ADD             R1, SP, #0x14+var_10+1
STRB            R8, [R4],#1
MOV             R0, R5
BL              sub_27004
MOV             R2, #0xA
MOV             R1, R8
MOV             R5, R0
MOV             R0, R4
BL              sub_18990
LDR             R1, =asc_6787D ; ", \t/-"
MOV             R4, R0
STRB            R0, [SP,#0x14+var_10]
MOV             R0, R8  ; s
BL              strtok
CMP             R4, #0x20 ; ' '
MOVLS           R3, #0
MOVHI           R3, #1
CMP             R0, R8
MOVEQ           R3, #1
CMP             R3, R8
BNE             def_270D8 ; jumptable 000270D8 default case, case 10
LDR             R3, [R6]
SUBS            R5, R5, R8
MOVNE           R5, #1
LDR             R3, [R3]
CMP             R3, R8
MOVNE           R5, R8
CMP             R5, R8
BEQ             def_270D8 ; jumptable 000270D8 default case, case 10
ADD             R1, R4, #7
ADD             R3, SP, #0x14+var_10
MOV             R1, R1,LSR#3
ADD             R8, R1, #5
ADD             R1, R1, #1
ADD             R1, R3, R1
B               loc_27140

loc_272CC               ; jumptable 000270D8 case 8
LDRB            R1, [R5]
CMP             R1, #0x27 ; '''
CMPNE           R1, #0x22 ; '"'
BNE             loc_27320
ADD             R4, R5, #1
MOV             R0, R4
BL              sub_16AA8
CMP             R0, #0
BEQ             loc_27320
MOV             R3, #0
MOV             R5, R4
STRB            R3, [R0]
MOV             R3, #3
STRB            R3, [SP,#0x14+var_14]

loc_27304               ; jumptable 000270D8 cases 2,3,11
MOV             R1, #0xFE
MOV             R0, R5
BL              strnlen
SUBS            R8, R0, #0
BGT             loc_27320

def_270D8               ; jumptable 000270D8 default case, case 10
MOV             R4, #0
B               loc_271CC

loc_27320
MOV             R4, #1
B               loc_271AC
; End of function sub_27038

off_27328 DCD delim     ; " \t=:"
off_2732C DCD dword_7DB94
off_27330 DCD asc_6B39D+1 ; ""
off_27334 DCD byte_67678
off_27338 DCD asc_67879 ; ", \t"
off_2733C DCD asc_6787D ; ", \t/-"



; int __fastcall sub_27340(char *, unsigned __int8 *)
sub_27340

var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #0x38
MOV             R4, R0
MOV             R2, #0x10
ADD             R0, SP, #0x38+var_20
BL              sub_16FB4
ADD             R3, SP, #0x38+var_4
ADD             R2, SP, #0x38+var_20
STR             R3, [SP,#0x38+var_24]
ADD             R3, SP, #0x38+var_8
STR             R3, [SP,#0x38+var_28]
ADD             R3, SP, #0x38+var_C
STR             R3, [SP,#0x38+var_2C]
ADD             R3, SP, #0x38+var_10
STR             R3, [SP,#0x38+var_30]
ADD             R3, SP, #0x38+var_14
STR             R3, [SP,#0x38+var_34]
ADD             R3, SP, #0x38+var_18
STR             R3, [SP,#0x38+var_38]
MOV             R0, R4  ; s
ADD             R3, SP, #0x38+var_1C
LDR             R1, =a4s4s4s4s4s4s4s ; "%.4s:%.4s:%.4s:%.4s:%.4s:%.4s:%.4s:%.4s"
BL              sprintf
ADD             SP, SP, #0x38 ; '8'
POP             {R4,PC}
; End of function sub_27340

off_273A4 DCD a4s4s4s4s4s4s4s ; "%.4s:%.4s:%.4s:%.4s:%.4s:%.4s:%.4s:%.4s"



; int __fastcall sub_273A8(int, int, int)
sub_273A8

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R5, R1
LDR             R6, [R5],#4
MOV             R4, R1
MOV             R0, R6  ; s
BL              strlen
LDR             R10, [R4,#4]
ADD             R0, R6, R0
LDRB            R8, [R0,#-3]
CMP             R10, #0
BEQ             loc_27578
LDRB            R2, [R10]
CMP             R2, #0x2D ; '-'
BNE             loc_27578
LDRB            R6, [R10,#1]
CMP             R6, #0x6C ; 'l'
BNE             loc_2749C
LDRB            R2, [R10,#2]
CMP             R2, #0
BNE             loc_2749C
ADD             R5, R4, #8
LDR             R4, [R4,#8]
CMP             R4, #0
BEQ             loc_27454
LDR             R6, =(aSLineDUartSPor+0x2A) ; "%d\n"
LDR             R7, =dword_7DB94

loc_27410
LDRB            R3, [R4]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
BHI             loc_27480
MOV             R2, #0xA
MOV             R1, #0
MOV             R0, R4
BL              sub_18990
LDR             R3, [R7]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_27464

loc_27440
LDR             R0, =aUnknownSignalS ; "unknown signal '%s'"
MOV             R1, R4

loc_27448
BL              sub_16DDC

loc_2744C
MOV             R4, #1
B               loc_27458

loc_27454
BL              sub_61174

loc_27458
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_27464
AND             R0, R0, #0x7F
BL              sub_61144
BL              puts

loc_27470
LDR             R4, [R5,#4]!
CMP             R4, #0
BNE             loc_27410
B               loc_27458

loc_27480
MOV             R0, R4
BL              sub_61000
SUBS            R1, R0, #0
BLT             loc_27440
MOV             R0, R6  ; format
BL              printf
B               loc_27470

loc_2749C
CMP             R8, #0x61 ; 'a'
CMPEQ           R6, #0x71 ; 'q'
MOVEQ           R6, #1
MOVNE           R6, #0
BNE             loc_274E0
LDRB            R2, [R10,#2]
CMP             R2, #0
BNE             loc_27548
LDR             R10, [R4,#8]
ADD             R5, R4, #8
CMP             R10, #0
BNE             loc_274D0
BL              sub_162F0

loc_274D0
LDRB            R2, [R10]
MOV             R6, #1
CMP             R2, #0x2D ; '-'
BNE             loc_2757C

loc_274E0
LDRB            R3, [R10,#1]
ADD             R4, R10, #1
CMP             R3, #0x2D ; '-'
BNE             loc_274FC
LDRB            R1, [R10,#2]
CMP             R1, #0
BEQ             loc_27550

loc_274FC
LDR             R1, [R5,#4]
SUB             R2, R3, #0x73 ; 's'
CLZ             R2, R2
MOV             R2, R2,LSR#5
CMP             R1, #0
MOVEQ           R2, #0
CMP             R2, #0
BEQ             loc_2752C
LDRB            R3, [R10,#2]
CMP             R3, #0
ADDEQ           R5, R5, #4
MOVEQ           R4, R1

loc_2752C
MOV             R0, R4
BL              sub_61000
SUBS            R7, R0, #0
BGE             loc_27554
MOV             R1, R4
LDR             R0, =aBadSignalNameS ; "bad signal name '%s'"
B               loc_27448

loc_27548
MOV             R6, #0
B               loc_274E0

loc_27550
MOV             R7, #0xF

loc_27554
LDR             R10, [R5,#4]
ADD             R5, R5, #4

loc_2755C
BL              getpid
CMP             R10, #0
MOV             R9, R0
BNE             loc_27584
LDR             R0, =aYouNeedToSpeci ; "you need to specify whom to kill"
BL              sub_16DDC
B               loc_2744C

loc_27578
MOV             R6, #0

loc_2757C
MOV             R7, #0xF
B               loc_2755C

loc_27584
CMP             R8, #0x61 ; 'a'
MOV             R4, #0
BNE             loc_276B8
LDR             R11, =aCanTKillPidD ; "can't kill pid %d"

loc_27594
MOV             R0, R10
BL              sub_58B44
LDR             R2, [R0]
MOV             R8, R0
CMP             R2, #0
SUBNE           R10, R0, #4
BNE             loc_27610
CMP             R6, #0
ADD             R4, R4, #1
BNE             loc_275C8
MOV             R1, R10
LDR             R0, =aSNoProcessKill ; "%s: no process killed"
BL              sub_16DDC

loc_275C8               ; ptr
MOV             R0, R8
BL              free
LDR             R10, [R5,#4]!
CMP             R10, #0
BNE             loc_27594
B               loc_27458

loc_275E0
CMP             R0, R9
BEQ             loc_27610
MOV             R1, R7  ; sig
BL              kill
CMP             R0, #0
BEQ             loc_27610
CMP             R6, #0
ADD             R4, R4, #1
BNE             loc_27610
LDR             R1, [R10]
MOV             R0, R11
BL              sub_16AF4

loc_27610               ; pid
LDR             R0, [R10,#4]!
CMP             R0, #0
BNE             loc_275E0
B               loc_275C8

loc_27620
LDR             R2, [SP,#0xC+var_8]
LDRB            R2, [R2]
CMP             R2, #0x20 ; ' '
BNE             loc_27698

loc_27630               ; sig
MOV             R1, R7
MOV             R0, R6  ; pid
BL              kill
CMP             R0, #0
BEQ             loc_27654
ADD             R4, R4, #1
MOV             R1, R6
MOV             R0, R9
BL              sub_16AF4

loc_27654
LDR             R10, [SP,#0xC+var_8]

loc_27658
LDRB            R2, [R10]
CMP             R2, #0
BEQ             loc_276A8
CMP             R2, #0x20 ; ' '
ADD             R1, SP, #0xC+var_8
ADDEQ           R10, R10, #1
MOV             R2, #0xA
MOV             R0, R10
BL              sub_189FC
LDR             R2, [R8]
MOV             R6, R0
LDR             R2, [R2]
CMP             R2, #0
BEQ             loc_27630
CMP             R2, #0x16
BEQ             loc_27620

loc_27698
ADD             R4, R4, #1
MOV             R1, R10
LDR             R0, =aInvalidNumberS ; "invalid number '%s'"
BL              sub_16DDC

loc_276A8
LDR             R10, [R5,#4]!
CMP             R10, #0
BEQ             loc_27458
B               loc_27658

loc_276B8
LDR             R8, =dword_7DB94
LDR             R9, =aCanTKillPidD ; "can't kill pid %d"
B               loc_27658
; End of function sub_273A8

off_276C4 DCD aSLineDUartSPor+0x2A ; "%d\n"
off_276C8 DCD dword_7DB94
off_276CC DCD aUnknownSignalS ; "unknown signal '%s'"
off_276D0 DCD aBadSignalNameS ; "bad signal name '%s'"
off_276D4 DCD aYouNeedToSpeci ; "you need to specify whom to kill"
off_276D8 DCD aCanTKillPidD ; "can't kill pid %d"
off_276DC DCD aSNoProcessKill ; "%s: no process killed"
off_276E0 DCD aInvalidNumberS ; "invalid number '%s'"


; Attributes: bp-based frame fpd=0xFFFFFFE4

; char *__fastcall sub_276E4(int, const char **)
sub_276E4

var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8
var_s0=  0

PUSH            {R4-R9,R11,LR}
ADD             R11, SP, #0x1C
MOV             R5, R1
SUB             SP, SP, #0x18
MOV             R3, #0
MOV             R0, R1
SUB             R4, R11, #-(-0x1C+var_s0)
STR             R3, [R4,#-0xC]!
BL              sub_59420
MOV             R2, R4
LDR             R1, =aW_0 ; "^w"
MOV             R0, R5
BL              sub_593CC
LDR             R0, [R11,#-0x1C+var_C]
CMP             R0, #0
BEQ             loc_27760
CMP             R0, #1
MOVEQ           R5, #0x84
MOVNE           R5, #0x800

loc_27730
LDR             R6, =aMgtpezy ; " mgtpezy"
MOV             R4, #0
LDR             R7, =a5u88sSS ; "%5u %-8.8s %s %s  "
LDR             R0, =aPidUserVszStat ; "  PID USER       VSZ STAT COMMAND"
BL              puts

loc_27744
MOV             R0, R4
MOVW            R1, #0x631
BL              sub_5E8EC
SUBS            R4, R0, #0
BNE             loc_27774
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}

loc_27760
BL              sub_17280
SUB             R5, R0, #1
CMP             R5, #0x800
MOVCS           R5, #0x800
B               loc_27730

loc_27774
MOV             R8, #0
MOV             R3, R6
SUB             R2, R11, #-(-0x1C+var_8)
MOV             R1, R8
LDR             R0, [R4,#0x10]
BL              sub_15A98
STRB            R8, [R0]
LDR             R0, [R4,#0x34]
BL              sub_5E890
ADD             R3, R4, #0x44 ; 'D'
MOV             R2, R0
STR             R3, [SP,#0x18+var_18]
MOV             R0, R7  ; format
LDR             R1, [R4,#0x24]
SUB             R3, R11, #-(-0x1C+var_8)
BL              printf
SUBS            R1, R5, R0
BMI             loc_27744
ADD             R3, R1, #8
MOV             R8, SP
BIC             R3, R3, #7
LDR             R2, [R4,#0x24]
SUB             SP, SP, R3
ADD             R3, R4, #0x48 ; 'H'
ADD             R9, SP, #0x18+var_10
MOV             R0, R9
BL              sub_5EBFC
MOV             R0, R9  ; s
BL              puts
MOV             SP, R8
B               loc_27744
; End of function sub_276E4

off_277F0 DCD aW_0      ; "^w"
off_277F4 DCD aMgtpezy  ; " mgtpezy"
off_277F8 DCD a5u88sSS  ; "%5u %-8.8s %s %s  "
off_277FC DCD aPidUserVszStat ; "  PID USER       VSZ STAT COMMAND"



; int __fastcall sub_27800(int, int)
sub_27800
LDR             R3, [R1,#0xC]
LDR             R0, [R0,#0xC]
SUB             R0, R3, R0
BX              LR
; End of function sub_27800




; int __fastcall sub_27810(_DWORD *, _DWORD *)
sub_27810
LDR             R2, [R1]
LDR             R3, [R0]
CMP             R2, R3
BCC             loc_2782C
MOVNE           R0, #1
MOVEQ           R0, #0
BX              LR

loc_2782C
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_27810




; int __fastcall sub_27834(int, int)
sub_27834
LDR             R3, [R1,#8]
LDR             R0, [R0,#8]
SUB             R0, R3, R0
BX              LR
; End of function sub_27834




; int __fastcall sub_27844(int, int)
sub_27844
LDR             R2, [R1,#4]
LDR             R3, [R0,#4]
CMP             R2, R3
BCC             loc_27860
MOVNE           R0, #1
MOVEQ           R0, #0
BX              LR

loc_27860
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_27844




; int sub_27868(const void *, const void *)
sub_27868
LDR             R3, =dword_7DB98
PUSH            {R4-R8,LR}
MOV             R6, R0
MOV             R7, R1
MOV             R4, #0
LDR             R5, [R3]

loc_27880
ADD             R3, R4, #0x14
MOV             R1, R7
LDR             R3, [R5,R3,LSL#2]
MOV             R0, R6
BLX             R3
CMP             R0, #0
BNE             loc_278A8
ADD             R4, R4, #1
CMP             R4, #3
BNE             loc_27880

loc_278A8
LDR             R3, [R5,#8]
CMP             R3, #0
RSBNE           R0, R0, #0
POP             {R4-R8,PC}
; End of function sub_27868

off_278B8 DCD dword_7DB98



; char *__fastcall sub_278BC(char *, unsigned int, unsigned int)
sub_278BC
CMP             R1, R2
PUSH            {R4,LR}
MOV             R4, R0
BCC             loc_278DC
LDR             R1, =src ; "  100% "
BL              strcpy

loc_278D4
MOV             R0, R4
POP             {R4,PC}

loc_278DC
MOV             R3, R1
MOV             R0, #0x3E8
MOV             R1, R2
MUL             R0, R0, R3
BLX             sub_15CA0
LDR             R2, =0x51EB851F
MOV             R1, #0xA
UMULL           R2, R3, R0, R2
MOV             R2, R3,LSR#5
MOV             R3, #0x64 ; 'd'
MLS             R0, R3, R2, R0
CMP             R2, #0
MOV             R3, #0x20 ; ' '
STRB            R3, [R4]
ADDNE           R3, R2, #0x30 ; '0'
LDR             R2, =0xCCCCCCCD
UXTBNE          R3, R3
STRB            R3, [R4,#1]
UMULL           R2, R3, R0, R2
MOV             R3, R3,LSR#3
ADD             R3, R3, #0x30 ; '0'
STRB            R3, [R4,#2]
MOV             R3, #0x2E ; '.'
STRB            R3, [R4,#3]
BLX             sub_161AC
MOV             R3, #0x25 ; '%'
ADD             R1, R1, #0x30 ; '0'
STRB            R3, [R4,#5]
MOV             R3, #0x20 ; ' '
STRB            R3, [R4,#6]
MOV             R3, #0
STRB            R1, [R4,#4]
STRB            R3, [R4,#7]
B               loc_278D4
; End of function sub_278BC

off_27964 DCD src       ; "  100% "
dword_27968 DCD 0x51EB851F
dword_2796C DCD 0xCCCCCCCD



; int __fastcall sub_27970(int, int)
sub_27970

var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

LDR             R3, =dword_7DB98
MOV             R2, R0
PUSH            {R4-R7,LR}
MOV             R4, R1
SUB             SP, SP, #0x1C
MOV             R1, #0x1C0
LDR             R6, [R3]
ADD             R5, R6, #0x11C
MOV             R0, R5
BL              fgets_unlocked
CMP             R0, #0
BEQ             loc_27A78
LDRB            R3, [R6,#0x11C]
CMP             R3, #0x63 ; 'c'
MOVNE           R0, #0
BNE             loc_27A78
ADD             R3, R4, #0x38 ; '8'
MOV             R2, R4
STR             R3, [SP,#0x1C+var_8]
ADD             R3, R4, #0x30 ; '0'
STR             R3, [SP,#0x1C+var_C]
ADD             R3, R4, #0x28 ; '('
STR             R3, [SP,#0x1C+var_10]
ADD             R3, R4, #0x20 ; ' '
STR             R3, [SP,#0x1C+var_14]
ADD             R3, R4, #0x18
STR             R3, [SP,#0x1C+var_18]
ADD             R3, R4, #0x10
STR             R3, [SP,#0x1C+var_1C]
MOV             R0, R5  ; s
ADD             R3, R4, #8
LDR             R1, =aCpuLluLluLluLl ; "cpu %llu %llu %llu %llu %llu %llu %llu "...
BL              sscanf
CMP             R0, #3
BLE             loc_27A78
LDM             R4, {R3,R5-R7}
LDR             LR, [R4,#0x18]
LDR             R12, [R4,#0x1C]
ADDS            R3, R3, R6
LDR             R2, [R4,#0x20]
ADC             R5, R5, R7
LDRD            R6, R7, [R4,#0x10]
LDR             R1, [R4,#0x24]
ADDS            R3, R3, R6
ADC             R5, R5, R7
LDRD            R6, R7, [R4,#0x28]
ADDS            R3, R3, LR
ADC             R5, R5, R12
ADDS            R3, R3, R2
ADC             R5, R5, R1
ADDS            R3, R3, R6
ADC             R5, R5, R7
LDRD            R6, R7, [R4,#0x30]
ADDS            R3, R3, R6
ADC             R5, R5, R7
LDRD            R6, R7, [R4,#0x38]
ADDS            R3, R3, R6
ADC             R5, R5, R7
STR             R3, [R4,#0x40]
SUBS            R3, R3, LR
STR             R5, [R4,#0x44]
SBC             R12, R5, R12
SUBS            R3, R3, R2
SBC             R1, R12, R1
STR             R3, [R4,#0x48]
STR             R1, [R4,#0x4C]

loc_27A78
ADD             SP, SP, #0x1C
POP             {R4-R7,PC}
; End of function sub_27970

off_27A80 DCD dword_7DB98
off_27A84 DCD aCpuLluLluLluLl ; "cpu %llu %llu %llu %llu %llu %llu %llu "...



; void sub_27A88()
sub_27A88

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4-R11,LR}
LDR             R0, =(aProcStat+6) ; "stat"
BL              sub_61CA8
LDR             R3, =dword_7DB98
MOV             R5, R0
MOV             R2, #0x50 ; 'P' ; n
LDR             R4, [R3]
ADD             R6, R4, #0x68 ; 'h'
ADD             R0, R4, #0xB8 ; dest
MOV             R1, R6  ; src
BL              memcpy
MOV             R1, R6
MOV             R0, R5
BL              sub_27970
CMP             R0, #3
BGT             loc_27AD4
LDR             R1, =aProcStat ; "/proc/stat"
LDR             R0, =aCanTReadS ; "can't read '%s'"
BL              sub_16DBC

loc_27AD4               ; stream
MOV             R0, R5
MOV             R5, #0
BL              fclose
LDR             R0, [R4,#4]
MOV             R6, R5
STR             R5, [R4,#0x108]
MOV             R0, R0,LSL#3
BL              sub_1748C
LDR             R9, [R4,#0x5C]
MOV             R8, R0
LDR             R3, [R4,#4]
MOV             R2, R5
STR             R3, [SP,#0xC+var_C]

loc_27B08
LDR             R3, [SP,#0xC+var_C]
CMP             R3, R6
BGT             loc_27B30
MOV             R0, R9  ; ptr
BL              free
LDR             R3, [R4,#4]
STR             R8, [R4,#0x5C]
STR             R3, [R4,#0x60]
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_27B30
LDR             R7, [R4]
MOV             R3, #0x2C ; ','
ADD             R1, R8, R6,LSL#3
MLA             R7, R3, R6, R7
LDR             R3, [R7,#0xC]
LDR             R11, [R7,#4]
STR             R11, [R8,R6,LSL#3]
STR             R3, [R1,#4]
LDR             R10, [R4,#0x60]
STR             R2, [R7,#8]
CMP             R10, #0
BEQ             loc_27B90
MOV             R0, R5

loc_27B64
ADD             R1, R9, R0,LSL#3
LDR             R12, [R1,#4]
CMP             R12, R3
BNE             loc_27B98
LDR             R3, [R1]
MOV             R5, R0
SUB             R11, R11, R3
LDR             R3, [R4,#0x108]
STR             R11, [R7,#8]
ADD             R11, R3, R11
STR             R11, [R4,#0x108]

loc_27B90
ADD             R6, R6, #1
B               loc_27B08

loc_27B98
MOV             R1, R10
ADD             R0, R0, #1
STR             R3, [SP,#0xC+var_8]
BLX             sub_15EFC
CMP             R5, R1
MOV             R0, R1
LDR             R3, [SP,#0xC+var_8]
MOV             R2, #0
BNE             loc_27B64
B               loc_27B90
; End of function sub_27A88

off_27BC0 DCD aProcStat+6 ; "stat"
off_27BC4 DCD dword_7DB98
off_27BC8 DCD aProcStat ; "/proc/stat"
off_27BCC DCD aCanTReadS ; "can't read '%s'"



; int __fastcall sub_27BD0(int, int)
sub_27BD0

var_10C= -0x10C
var_108= -0x108
var_104= -0x104
var_100= -0x100
var_FC= -0xFC
var_F8= -0xF8
var_F4= -0xF4
var_F0= -0xF0
maxlen= -0xEC
var_E8= -0xE8
var_E4= -0xE4
var_E0= -0xE0
var_DC= -0xDC
var_D8= -0xD8
var_D4= -0xD4
var_CC= -0xCC
var_C4= -0xC4
var_BC= -0xBC
var_B4= -0xB4
var_AC= -0xAC
var_A4= -0xA4
s= -0x9C
var_98= -0x98
var_94= -0x94
var_90= -0x90
var_8C= -0x8C
var_88= -0x88
var_68= -0x68
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x10C
MOV             R2, #0x34 ; '4' ; n
MOV             R11, R0
MOV             R7, R1
ADD             R0, SP, #0x10C+s ; s
MOV             R1, #0  ; c
LDR             R8, =aMemtotal ; "MemTotal"
BL              memset
LDR             R0, =(aProcMeminfo+6) ; "meminfo"
BL              sub_61CA8
MOV             R5, R0

loc_27C00
MOV             R2, R5
MOV             R1, #0x3C ; '<'
ADD             R0, SP, #0x10C+var_68
BL              fgets_unlocked
SUBS            R10, R0, #0
BNE             loc_27F20
MOV             R0, R5  ; stream
LDR             R9, =dword_7DBC0
BL              fclose
LDR             R2, [SP,#0x10C+var_88]
CMP             R7, #0x64 ; 'd'
LDR             R1, [SP,#0x10C+var_90]
MOVLT           R6, R7
LDR             R8, [SP,#0x10C+s]
MOVGE           R6, #0x64 ; 'd'
STR             R2, [SP,#0x10C+var_100]
ADD             R0, SP, #0x10C+var_68 ; s
LDR             R2, [SP,#0x10C+var_8C]
SUB             R11, R11, #4
LDR             R3, [SP,#0x10C+var_98]
STR             R2, [SP,#0x10C+var_104]
LDR             R2, [SP,#0x10C+var_94]
STR             R3, [SP,#0x10C+var_10C]
SUB             R3, R8, R3
ADD             R2, R2, R1
MOV             R1, R6  ; maxlen
STR             R2, [SP,#0x10C+var_108]
LDR             R2, =aMemLukUsedLukF ; "Mem: %luK used, %luK free, %luK shrd, %"...
BL              snprintf
LDR             R3, [R9]
ADD             R1, SP, #0x10C+var_68
LDR             R0, =(aSS_2+3) ; "%s\n"
TST             R3, #4
LDR             R3, =aHJS ; "\x1B[H\x1B[J%s\n"
MOVEQ           R0, R3  ; format
BL              printf
LDR             R3, =dword_7DB98
ADD             R0, SP, #0x10C+var_D4
LDR             R4, [R3]
LDR             R5, [R4,#0xA8]
LDR             R3, [R4,#0xF8]
LDR             R1, [R4,#0x68]
CMP             R5, R3
SUBNE           R5, R5, R3
LDR             R3, [R4,#0xB8]
MOVEQ           R5, #1
MOV             R2, R5
SUB             R1, R1, R3
BL              sub_278BC
LDR             R1, [R4,#0x78]
MOV             R2, R5
STR             R0, [SP,#0x10C+var_D8]
LDR             R0, [R4,#0xC8]
SUB             R1, R1, R0
ADD             R0, SP, #0x10C+var_CC
BL              sub_278BC
LDR             R1, [R4,#0x70]
MOV             R2, R5
STR             R0, [SP,#0x10C+maxlen]
LDR             R0, [R4,#0xC0]
SUB             R1, R1, R0
ADD             R0, SP, #0x10C+var_C4
BL              sub_278BC
LDR             R1, [R4,#0x80]
MOV             R2, R5
STR             R0, [SP,#0x10C+var_E8]
LDR             R0, [R4,#0xD0]
SUB             R1, R1, R0
ADD             R0, SP, #0x10C+var_BC
BL              sub_278BC
LDR             R1, [R4,#0x88]
MOV             R2, R5
STR             R0, [SP,#0x10C+var_E4]
LDR             R0, [R4,#0xD8]
SUB             R1, R1, R0
ADD             R0, SP, #0x10C+var_B4
BL              sub_278BC
LDR             R1, [R4,#0x90]
MOV             R2, R5
STR             R0, [SP,#0x10C+var_E0]
LDR             R0, [R4,#0xE0]
SUB             R1, R1, R0
ADD             R0, SP, #0x10C+var_AC
BL              sub_278BC
LDR             R1, [R4,#0xE8]
MOV             R2, R5
STR             R0, [SP,#0x10C+var_DC]
LDR             R0, [R4,#0x98]
SUB             R1, R0, R1
ADD             R0, SP, #0x10C+var_A4
BL              sub_278BC
LDR             R3, [SP,#0x10C+var_DC]
MOV             R1, R6  ; maxlen
LDR             R2, =aCpuSusrSsysSni ; "CPU:%susr%ssys%snic%sidle%sio%sirq%ssir"...
STR             R0, [SP,#0x10C+var_F8]
ADD             R0, SP, #0x10C+var_68 ; s
STR             R3, [SP,#0x10C+var_FC]
LDR             R3, [SP,#0x10C+var_E0]
STR             R3, [SP,#0x10C+var_100]
LDR             R3, [SP,#0x10C+var_E4]
STR             R3, [SP,#0x10C+var_104]
LDR             R3, [SP,#0x10C+var_E8]
STR             R3, [SP,#0x10C+var_108]
LDR             R3, [SP,#0x10C+maxlen]
STR             R3, [SP,#0x10C+var_10C]
LDR             R3, [SP,#0x10C+var_D8]
BL              snprintf
ADD             R0, SP, #0x10C+var_68 ; s
BL              puts
LDR             R1, =aLoadAverage ; "Load average: "
ADD             R0, SP, #0x10C+var_68
BL              stpcpy
MOV             R2, #0x55 ; 'U'
MOV             R1, R0
MOV             R5, R0
LDR             R0, =aLoadavg ; "loadavg"
BL              sub_180C8
ADD             R3, SP, #0x10C+var_4
MOV             R1, #0xA
ADD             R6, R3, R6
MOV             R0, R5
STRB            R10, [R6,#-0x65]
BL              strchrnul
STRB            R10, [R0]
ADD             R0, SP, #0x10C+var_68 ; s
BL              puts
LDR             R3, [R9]
MOV             R1, R7
LDR             R2, =aPidPpidUserSta ; "  PID  PPID USER     STAT   VSZ %VSZ %C"...
MOV             R9, #0x15
LDR             R0, =(aSS_5+3) ; "%.*s"
TST             R3, #4
LDR             R3, =(aSS7mSM+6) ; "\x1B[7m%.*s\x1B[m"
MOVEQ           R0, R3  ; format
BL              printf
MOV             R1, R8
MOV             R0, #0x7D000000
BLX             sub_15CA0
MOV             R10, R0

loc_27E2C
CMP             R10, #0x200
BCS             loc_27F70
LDR             R6, =0xCCCCCCCD
MOV             R2, #1
MOV             R2, R2,LSL R9
LDR             R5, [R4,#0xB0]
MOV             R8, #6
UMULL           R2, R3, R2, R6
MOV             R3, R3,LSR#4
STR             R3, [SP,#0x10C+var_E8]
LDR             R3, [R4,#0x100]
SUB             R5, R5, R3
LDR             R3, [R4,#0x108]
CMP             R3, R5
MOV             R3, #0xFA00
STRCC           R5, [R4,#0x108]
UXTH            R5, R5
MULS            R5, R3, R5
MOVEQ           R5, #1

loc_27E78
CMN             R5, #0xC0000001
BLS             loc_27F7C
LDRH            R3, [R4,#0xF8]
LDRH            R1, [R4,#0xA8]
SUB             R1, R1, R3
LDR             R3, [R4,#0x108]
UXTH            R1, R1
MULS            R1, R3, R1
BEQ             loc_27EA8
MOV             R0, R5
BLX             sub_15CA0
MOV             R5, R0

loc_27EA8
CMP             R5, #0x400
BCS             loc_27F88
MOV             R2, #1
MOV             R2, R2,LSL R8
UMULL           R2, R3, R2, R6
MOV             R6, #0x2C ; ','
LDR             R2, [R4,#4]
MOV             R3, R3,LSR#4
STR             R3, [SP,#0x10C+var_E4]
ADD             R3, R7, #2
STR             R3, [SP,#0x10C+maxlen]
LDR             R3, [R4,#0x4C]
SUB             R2, R2, R3
MUL             R6, R6, R3
CMP             R2, R11
MOVLT           R11, R2
ADD             R3, R6, #0x18
LDR             R6, [R4]
ADD             R6, R6, R3

loc_27EF4
SUBS            R11, R11, #1
BPL             loc_27F94
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #4
MOVNE           R0, #0xA
MOVEQ           R0, #0xD ; c
BL              j_putchar_unlocked
BL              sub_177D8
ADD             SP, SP, #0x10C
POP             {R4-R11,PC}

loc_27F20               ; c
MOV             R1, #0x3A ; ':'
ADD             R0, SP, #0x10C+var_68 ; s
BL              strchr
SUBS            R6, R0, #0
BEQ             loc_27C00
MOV             R9, #0
ADD             R1, SP, #0x10C+var_68 ; s2
STRB            R9, [R6]
MOV             R0, R8  ; s1
BL              sub_16880
SUBS            R4, R0, #0
BLT             loc_27C00
MOV             R2, #0xA ; base
MOV             R1, R9  ; endptr
ADD             R0, R6, #1 ; nptr
BL              strtoul
ADD             R3, SP, #0x10C+var_4
ADD             R4, R3, R4,LSL#2
STR             R0, [R4,#-0x98]
B               loc_27C00

loc_27F70
MOV             R10, R10,LSR#2
SUB             R9, R9, #2
B               loc_27E2C

loc_27F7C
MOV             R5, R5,LSL#2
ADD             R8, R8, #2
B               loc_27E78

loc_27F88
MOV             R5, R5,LSR#2
SUB             R8, R8, #2
B               loc_27EA8

loc_27F94
LDR             R7, [R6,#-0x18]
MOV             R2, #0xA ; denom
LDR             R3, [SP,#0x10C+var_E8]
ADD             R0, SP, #0x10C+s ; retstr
MLA             R1, R10, R7, R3
MOV             R1, R1,LSR R9 ; numer
BL              div
LDR             R3, [SP,#0x10C+var_E4]
MOV             R2, #0xA ; denom
LDR             R1, [R6,#-0x10]
ADD             R0, SP, #0x10C+var_68 ; retstr
MLA             R1, R1, R5, R3
MOV             R1, R1,LSR R8 ; numer
BL              div
ADD             R2, SP, #0x10C+var_A4
LDR             R3, =aMgtpezy ; " mgtpezy"
MOV             R0, R7
MOV             R1, #0
BL              sub_15A98
LDR             R3, [R6,#-0xC]
ADD             R7, R4, #0x11C
LDR             R1, [R6,#-8]
LDR             R0, [R6,#-4]
STR             R3, [SP,#0x10C+var_DC]
STR             R1, [SP,#0x10C+var_E0]
BL              sub_5E890
LDR             R2, [SP,#0x10C+var_68.rem]
ADD             R3, SP, #0x10C+var_A4
LDR             R1, [SP,#0x10C+var_E0]
STR             R3, [SP,#0x10C+var_100]
ADD             R2, R2, #0x30 ; '0'
STMFA           SP, {R0,R6}
STR             R2, [SP,#0x10C+var_F0]
MOV             R0, R7  ; s
LDR             R2, [SP,#0x10C+var_68]
STR             R1, [SP,#0x10C+var_10C]
LDR             R3, [SP,#0x10C+var_DC]
STR             R2, [SP,#0x10C+var_F4]
LDR             R2, [SP,#0x10C+var_98]
LDR             R1, [SP,#0x10C+maxlen] ; maxlen
ADD             R2, R2, #0x30 ; '0'
STR             R2, [SP,#0x10C+var_F8]
LDR             R2, [SP,#0x10C+s]
STR             R2, [SP,#0x10C+var_FC]
LDR             R2, =a5u6u88sS5s3uC3 ; "\n%5u%6u %-8.8s %s  %.5s%3u.%c%3u.%c "
BL              snprintf
LDR             R3, [SP,#0x10C+maxlen]
SUB             R1, R3, R0
CMP             R1, #1
BLE             loc_2806C
ADD             R3, R6, #4
LDR             R2, [R6,#-0xC]
ADD             R0, R7, R0
BL              sub_5EBFC

loc_2806C
LDR             R3, =stdout
MOV             R0, R7
ADD             R6, R6, #0x2C ; ','
LDR             R1, [R3]
BL              fputs_unlocked
B               loc_27EF4
; End of function sub_27BD0

off_28084 DCD aMemtotal ; "MemTotal"
off_28088 DCD aProcMeminfo+6 ; "meminfo"
off_2808C DCD dword_7DBC0
off_28090 DCD aMemLukUsedLukF ; "Mem: %luK used, %luK free, %luK shrd, %"...
off_28094 DCD aSS_2+3   ; "%s\n"
off_28098 DCD aHJS      ; "\x1B[H\x1B[J%s\n"
off_2809C DCD dword_7DB98
off_280A0 DCD aCpuSusrSsysSni ; "CPU:%susr%ssys%snic%sidle%sio%sirq%ssir"...
off_280A4 DCD aLoadAverage ; "Load average: "
off_280A8 DCD aLoadavg  ; "loadavg"
off_280AC DCD aPidPpidUserSta ; "  PID  PPID USER     STAT   VSZ %VSZ %C"...
off_280B0 DCD aSS_5+3   ; "%.*s"
off_280B4 DCD aSS7mSM+6 ; "\x1B[7m%.*s\x1B[m"
dword_280B8 DCD 0xCCCCCCCD
off_280BC DCD aMgtpezy  ; " mgtpezy"
off_280C0 DCD a5u6u88sS5s3uC3 ; "\n%5u%6u %-8.8s %s  %.5s%3u.%c%3u.%c "
off_280C4 DCD stdout



; int __fastcall sub_280C8(int, unsigned int seconds)
sub_280C8
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R6, =dword_7DBC0
LDR             R3, [R6]
TST             R3, #0x10
BNE             loc_2812C
LDR             R3, =dword_7DB98
LDR             R8, =dword_7DB94
LDR             R4, [R3]
ADD             R7, R4, #0x10C

loc_280F0
MOV             R2, #0x3E8
MOV             R0, #0  ; fd
MUL             R2, R2, R1
MOV             R1, R7
BL              sub_60068
CMN             R0, #1
BNE             loc_2813C
LDR             R3, [R8]
LDR             R3, [R3]
CMP             R3, #0xB
BEQ             loc_2813C
LDR             R3, [R6]
ORR             R3, R3, #0x10
STR             R3, [R6]
B               loc_28134

loc_2812C               ; seconds
MOV             R0, R1
BL              sleep

loc_28134
MOV             R0, R5
POP             {R4-R8,PC}

loc_2813C
LDRB            R3, [R4,#0x21]
CMP             R3, R0
BEQ             loc_2827C
LDRB            R3, [R4,#0x25]
CMP             R3, R0
BEQ             loc_2827C
CMN             R0, #2
BNE             loc_28194
LDR             R3, [R4,#0x4C]
SUB             R3, R3, #1

loc_28164
STR             R3, [R4,#0x4C]
MOV             R5, #0xFFFFFFFF
LDR             R3, [R4,#4]
LDR             R2, [R4,#0x4C]
CMP             R2, R3
SUBGE           R3, R3, #1
STRGE           R3, [R4,#0x4C]
LDR             R3, [R4,#0x4C]
CMP             R3, #0
MOVLT           R3, #0
STRLT           R3, [R4,#0x4C]
B               loc_28134

loc_28194
CMN             R0, #3
LDREQ           R3, [R4,#0x4C]
ADDEQ           R3, R3, #1
BEQ             loc_28164
CMN             R0, #6
MOVEQ           R3, #0
BEQ             loc_28164
CMN             R0, #7
BNE             loc_281C8
LDR             R2, [R4,#0xC]
LDR             R3, [R4,#4]

loc_281C0
SUB             R3, R3, R2,LSR#1
B               loc_28164

loc_281C8
CMN             R0, #0xA
LDREQ           R2, [R4,#0xC]
LDREQ           R3, [R4,#0x4C]
BEQ             loc_281C0
CMN             R0, #0xB
LDREQ           R2, [R4,#0xC]
LDREQ           R3, [R4,#0x4C]
ADDEQ           R3, R3, R2,LSR#1
BEQ             loc_28164
ORR             R0, R0, #0x20 ; ' '
CMP             R0, #0x71 ; 'q'
BEQ             loc_2827C
CMP             R0, #0x6E ; 'n'
LDREQ           R3, =sub_27800
STREQ           R3, [R4,#0x50]
BEQ             loc_28228
CMP             R0, #0x6D ; 'm'
BNE             loc_28230
LDR             R3, =sub_27810
STR             R3, [R4,#0x50]
LDR             R3, =sub_27834

loc_2821C
STR             R3, [R4,#0x54]
LDR             R3, =sub_27844

loc_28224
STR             R3, [R4,#0x58]

loc_28228
MOV             R1, #0
B               loc_280F0

loc_28230
CMP             R0, #0x70 ; 'p'
LDREQ           R3, =sub_27834
STREQ           R3, [R4,#0x50]
LDREQ           R3, =sub_27810
BEQ             loc_2821C
CMP             R0, #0x74 ; 't'
BNE             loc_28264
LDR             R3, =sub_27844
STR             R3, [R4,#0x50]
LDR             R3, =sub_27810
STR             R3, [R4,#0x54]
LDR             R3, =sub_27834
B               loc_28224

loc_28264
CMP             R0, #0x72 ; 'r'
BNE             loc_28134
LDR             R3, [R4,#8]
EOR             R3, R3, #1
STR             R3, [R4,#8]
B               loc_28228

loc_2827C
MOV             R5, #0
B               loc_28134
; End of function sub_280C8

off_28284 DCD dword_7DBC0
off_28288 DCD dword_7DB98
off_2828C DCD dword_7DB94
off_28290 DCD sub_27800
off_28294 DCD sub_27810
off_28298 DCD sub_27834
off_2829C DCD sub_27844



; void sub_282A0()
sub_282A0
PUSH            {R4,LR}
BL              sub_5E854
LDR             R3, =dword_7DB98
LDR             R4, [R3]
LDR             R0, [R4] ; ptr
BL              free
MOV             R3, #0
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_282A0

off_282C4 DCD dword_7DB98



; int sub_282C8()
sub_282C8
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #4
BXNE            LR
LDR             R3, =dword_7DB98
LDR             R0, [R3]
ADD             R0, R0, #0x10 ; termios_p
B               sub_1729C
; End of function sub_282C8

off_282E8 DCD dword_7DBC0
off_282EC DCD dword_7DB98


; Attributes: noreturn

; void __fastcall __noreturn sub_282F0(int)
sub_282F0
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_282C8
MOV             R0, R4
BL              sub_18260
; End of function sub_282F0




; int __fastcall sub_28304(int, const char **)
sub_28304

var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R0, #0x2E0
LDR             R7, =dword_7DB98
SUB             SP, SP, #0x1C
MOV             R4, R1
BL              sub_174DC
STR             R0, [R7]
MOV             R0, R4
BL              sub_59420
ADD             R3, SP, #0x1C+var_8
ADD             R2, SP, #0x1C+var_C
LDR             R1, =aDNB ; "d:n:b"
MOV             R0, R4
BL              sub_593CC
TST             R0, #1
STR             R0, [SP,#0x1C+var_10]
MOVEQ           R10, #5
BEQ             loc_2836C
LDR             R3, [SP,#0x1C+var_C]
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
ADDEQ           R3, R3, #1
STREQ           R3, [SP,#0x1C+var_C]
LDR             R0, [SP,#0x1C+var_C]
BL              sub_621A8
MOV             R10, R0

loc_2836C
LDR             R5, [SP,#0x1C+var_10]
ANDS            R5, R5, #2
BEQ             loc_28398
LDR             R3, [SP,#0x1C+var_8]
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
ADDEQ           R3, R3, #1
STREQ           R3, [SP,#0x1C+var_8]
LDR             R0, [SP,#0x1C+var_8]
BL              sub_620B0
MOV             R5, R0

loc_28398
LDR             R0, =(aNoProcessInfoI+0x13) ; "/proc"
BL              sub_178FC
LDR             R1, [R7]
LDR             R3, =sub_27834
LDR             R8, =dword_7DBC0
STR             R3, [R1,#0x50]
LDR             R3, =sub_27810
STR             R3, [R1,#0x54]
LDR             R3, =sub_27844
STR             R3, [R1,#0x58]
LDR             R3, [R8]
ANDS            R0, R3, #4 ; int
ORRNE           R3, R3, #0x10
STRNE           R3, [R8]
BNE             loc_283EC
MOV             R2, #1
ADD             R1, R1, #0x10 ; s
BL              sub_17364
LDR             R3, =off_7DB9C
LDR             R2, =sub_282C8
STR             R2, [R3]

loc_283EC
LDR             R1, =sub_282F0
LDR             R0, =0x700F44E
BL              sub_18184
MOV             R1, #0  ; seconds
MOVW            R0, #0x3633 ; int
BL              sub_280C8
MOV             R9, R0

loc_28408
CMP             R9, #0
BEQ             loc_284B8
LDR             R3, [R8]
LDR             R4, [R7]
TST             R3, #4
MOVNE           R3, #0x7FFFFFFF
STRNE           R3, [R4,#0xC]
MOVWNE          R3, #0x1BE
BNE             loc_2847C
MOV             R3, #0x18
MOV             R2, R4
ADD             R1, SP, R3
STR             R3, [R2,#0xC]!
MOV             R3, #0x4F ; 'O'
MOV             R0, #1  ; fd
STR             R3, [R1,#-0xC]!
BL              sub_1714C
LDR             R3, [R4,#0xC]
CMP             R3, #4
BLS             loc_28464
LDR             R2, [SP,#0x1C+var_10]
CMP             R2, #9
BHI             loc_28470

loc_28464               ; seconds
MOV             R0, R10
BL              sleep
B               loc_28408

loc_28470
MOVW            R3, #0x1BE
CMP             R2, R3
BLS             loc_28480

loc_2847C
STR             R3, [SP,#0x1C+var_10]

loc_28480
MOV             R3, #0
MOV             R11, #0x2C ; ','
MOV             R6, R3
STR             R3, [R4,#4]

loc_28490
MOV             R0, R6
MOV             R1, R9
BL              sub_5E8EC
SUBS            R6, R0, #0
LDR             R3, [R4,#4]
BNE             loc_284D0
CMP             R3, #0
BNE             loc_28554
LDR             R0, =aNoProcessInfoI ; "no process info in /proc"
BL              sub_16DDC

loc_284B8               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
BL              sub_282C8
MOV             R0, #0
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_284D0
ADD             R2, R3, #1
MOVW            R1, #0x2C06
STR             R2, [R4,#4]
MOV             R2, R3
LDR             R0, [R4]
STR             R3, [SP,#0x1C+var_18]
BL              sub_62544
LDR             R3, [SP,#0x1C+var_18]
LDR             R1, [R6,#0x24]
STR             R0, [R4]
MUL             R3, R11, R3
ADD             R2, R0, R3
STR             R3, [SP,#0x1C+var_18]
STR             R1, [R2,#0xC]
LDR             R1, [R6,#0x28]
STR             R1, [R2,#0x10]
LDR             R1, [R6,#0x10]
STR             R1, [R0,R3]
LDRD            R0, R1, [R6,#0x18]
ADD             R1, R1, R0
ADD             R0, R2, #0x18 ; dest
STR             R1, [R2,#4]
LDR             R1, [R6,#0x34]
STR             R1, [R2,#0x14]
ADD             R1, R6, #0x44 ; 'D' ; src
BL              strcpy
LDR             R0, [R4]
ADD             R1, R6, #0x48 ; 'H' ; src
LDR             R3, [SP,#0x1C+var_18]
ADD             R0, R0, R3
ADD             R0, R0, #0x1C ; dest
BL              strcpy
B               loc_28490

loc_28554
LDR             R3, [R4,#0x60]
CMP             R3, #0
BNE             loc_28574
BL              sub_27A88
LDR             R0, =0x186A0 ; useconds
BL              usleep
BL              sub_282A0
B               loc_28408

loc_28574
BL              sub_27A88
LDR             R3, =sub_27868 ; compar
MOV             R2, #0x2C ; ',' ; size
LDRD            R0, R1, [R4] ; nmemb
BL              qsort

loc_28588
LDR             R1, [SP,#0x1C+var_10]
LDR             R0, [R4,#0xC]
BL              sub_27BD0
CMP             R5, #0
BLT             loc_285A4
SUBS            R5, R5, #1
BEQ             loc_284B8

loc_285A4               ; seconds
MOV             R1, R10
MOV             R0, R9  ; int
BL              sub_280C8
CMN             R0, #1
MOV             R6, R0
BEQ             loc_28588
BL              sub_282A0
MOV             R9, R6
B               loc_28408
; End of function sub_28304

off_285C8 DCD dword_7DB98
off_285CC DCD aDNB      ; "d:n:b"
off_285D0 DCD aNoProcessInfoI+0x13 ; "/proc"
off_285D4 DCD sub_27834
off_285D8 DCD dword_7DBC0
off_285DC DCD sub_27810
off_285E0 DCD sub_27844
off_285E4 DCD off_7DB9C
off_285E8 DCD sub_282C8
off_285EC DCD sub_282F0
dword_285F0 DCD 0x700F44E
off_285F4 DCD aNoProcessInfoI ; "no process info in /proc"
; const __useconds_t dword_285F8
dword_285F8 DCD 0x186A0
off_285FC DCD sub_27868



; int __fastcall sub_28600(const char *, const char *)
sub_28600

var_C= -0xC

LDR             R3, =buf
PUSH            {R0-R2,LR}
LDR             R2, [R3,#termios.c_oflag]
LDR             R12, [R3,#termios.c_ispeed]
LDR             R3, =(aDevLog+4) ; "/log"
LDR             R2, [R2]
STR             R1, [SP,#0xC+var_C]
CMP             R12, #0
LDR             R1, =(asc_6B39D+1) ; ""
MOVEQ           R3, R1
MOV             R1, R0
LDR             R0, =aSSSS_0 ; "%s%s%s: %s"
BL              printf
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_28650
LDR             R0, =(aCanTOpenSM+0xF) ; format
BL              printf

loc_28650
MOV             R0, #0xA
ADD             SP, SP, #0xC
POP             {LR}
B               j_putchar_unlocked
; End of function sub_28600

off_28660 DCD buf
off_28664 DCD aDevLog+4 ; "/log"
off_28668 DCD asc_6B39D+1 ; ""
off_2866C DCD aSSSS_0   ; "%s%s%s: %s"
off_28670 DCD dword_7DB94
off_28674 DCD aCanTOpenSM+0xF ; ": %m"



; int __fastcall sub_28678(const char *)
sub_28678
LDR             R2, =buf
MOV             R1, R0
LDR             R0, =aWarning ; "warning: "
LDR             R3, [R2,#termios.c_cflag]
ADD             R3, R3, #1
STR             R3, [R2,#termios.c_cflag]
B               sub_28600
; End of function sub_28678

off_28694 DCD buf
off_28698 DCD aWarning  ; "warning: "



; int __fastcall sub_2869C(const char *)
sub_2869C
LDR             R2, =buf
MOV             R1, R0
LDR             R0, =aFail ; "fail: "
LDR             R3, [R2,#termios.c_cflag]
ADD             R3, R3, #1
STR             R3, [R2,#termios.c_cflag]
B               sub_28600
; End of function sub_2869C

off_286B8 DCD buf
off_286BC DCD aFail     ; "fail: "



; int __fastcall sub_286C0(const char *)
sub_286C0
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x68
MOV             R8, R0
MOV             R1, SP
LDR             R0, =(aWantDown+7) ; "down"
BLX             sub_62DFC
CMN             R0, #1
LDR             R4, =buf
BNE             loc_28714
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_287D8
LDR             R3, [R4,#(buf.c_oflag - 0x7D790)]
LDR             R0, =aWarningCanTSta ; "warning: can't stat %s/down"
LDR             R1, [R3]
BL              sub_16AF4
MOV             R0, #0

loc_2870C
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R8,PC}

loc_28714
MOV             R5, #0

loc_28718
LDR             R0, [R4,#(buf.c_cc+0xF - 0x7D790)]
LDR             R1, [R4,#(buf.c_cc+0x13 - 0x7D790)]
LDR             R6, [R4,#(buf.c_cc+0x1B - 0x7D790)]
BL              sub_57900
LDRB            R3, [R4,#(buf+0x33 - 0x7D790)]
MOV             R7, R0
CMP             R3, #1
BEQ             loc_287EC
BCC             loc_287E0
CMP             R3, #2
BEQ             loc_287F4

loc_28744
MOV             R1, R8
LDR             R0, =(aS_3+1) ; format
BL              printf
LDRB            R3, [R4,#(buf+0x33 - 0x7D790)]
CMP             R3, #0
BEQ             loc_28768
MOV             R1, R6
LDR             R0, =aPidD ; "(pid %d) "
BL              printf

loc_28768
LDR             R1, [R4,#(buf.c_cc+7 - 0x7D790)]
LDR             R0, =aUs ; "%us"
SUB             R1, R1, R7
BIC             R1, R1, R1,ASR#31
BL              printf
CMP             R6, #0
BEQ             loc_287FC
CMP             R5, #0
BNE             loc_28794
LDR             R0, =aNormallyDown ; ", normally down"
BL              printf

loc_28794
LDRB            R3, [R4,#(buf.c_cc+0x1F - 0x7D790)]
CMP             R3, #0
BEQ             loc_287A8
LDR             R0, =aPaused ; ", paused"
BL              printf

loc_287A8
LDRB            R3, [R4,#(buf+0x31 - 0x7D790)]
CMP             R3, #0x64 ; 'd'
BNE             loc_287BC
LDR             R0, =aWantDown ; ", want down"
BL              printf

loc_287BC
LDRB            R3, [R4,#(buf+0x32 - 0x7D790)]
CMP             R3, #0
BEQ             loc_287D0
LDR             R0, =aGotTerm ; ", got TERM"
BL              printf

loc_287D0
MOV             R0, #1
B               loc_2870C

loc_287D8
MOV             R5, #1
B               loc_28718

loc_287E0
LDR             R0, =aDown ; "down: "

loc_287E4
BL              printf
B               loc_28744

loc_287EC
LDR             R0, =aRun ; "run: "
B               loc_287E4

loc_287F4
LDR             R0, =aFinish ; "finish: "
B               loc_287E4

loc_287FC
CMP             R5, #0
BEQ             loc_2880C
LDR             R0, =aNormallyUp ; ", normally up"
BL              printf

loc_2880C
LDRB            R3, [R4,#(buf+0x31 - 0x7D790)]
CMP             R3, #0x75 ; 'u'
BNE             loc_28820
LDR             R0, =aWantUp ; ", want up"
BL              printf

loc_28820
MOV             R0, #2
B               loc_2870C
; End of function sub_286C0

off_28828 DCD aWantDown+7 ; "down"
off_2882C DCD buf
off_28830 DCD dword_7DB94
off_28834 DCD aWarningCanTSta ; "warning: can't stat %s/down"
off_28838 DCD aS_3+1    ; "%s: "
off_2883C DCD aPidD     ; "(pid %d) "
off_28840 DCD aUs       ; "%us"
off_28844 DCD aNormallyDown ; ", normally down"
off_28848 DCD aPaused   ; ", paused"
off_2884C DCD aWantDown ; ", want down"
off_28850 DCD aGotTerm  ; ", got TERM"
off_28854 DCD aDown     ; "down: "
off_28858 DCD aRun      ; "run: "
off_2885C DCD aFinish   ; "finish: "
off_28860 DCD aNormallyUp ; ", normally up"
off_28864 DCD aWantUp   ; ", want up"



; bool sub_28868()
sub_28868

stat_loc= -0x74
var_70= -0x70
var_6C= -0x6C
var_68= -0x68

PUSH            {R4,LR}
SUB             SP, SP, #0x78
ADD             R1, SP, #0x78+var_68
LDR             R0, =(aCheck+2) ; "check"
BLX             sub_62DFC
CMN             R0, #1
BNE             loc_288BC
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
MOVEQ           R0, #1
BEQ             loc_288B4
LDR             R3, =buf
LDR             R0, =aWarningCanTSta_0 ; "warning: can't stat %s/check"
LDR             R3, [R3,#(buf.c_oflag - 0x7D790)]
LDR             R1, [R3]
BL              sub_16AF4

loc_288B0
MOV             R0, #0

loc_288B4
ADD             SP, SP, #0x78 ; 'x'
POP             {R4,PC}

loc_288BC
LDR             R3, =aCheck ; "./check"
MOV             R4, #0
ADD             R0, SP, #0x78+var_70
STR             R4, [SP,#0x78+var_6C]
STR             R3, [SP,#0x78+var_70]
BL              sub_61AB4
CMP             R0, R4
BGT             loc_288F8
LDR             R3, =buf
LDR             R1, =aRun_0 ; "run"
LDR             R3, [R3,#(buf.c_oflag - 0x7D790)]
LDR             R2, [R3]

loc_288EC
LDR             R0, =aWarningCanTSCh ; "warning: can't %s child %s/check"
BL              sub_16AF4
B               loc_288B0

loc_288F8               ; options
MOV             R2, R4
ADD             R1, SP, #0x78+stat_loc ; stat_loc
BL              sub_17398
CMN             R0, #1
LDRBNE          R0, [SP,#0x78+stat_loc+1]
CLZNE           R0, R0
MOVNE           R0, R0,LSR#5
BNE             loc_288B4
LDR             R3, =buf
LDR             R1, =aWaitFor ; "wait for"
LDR             R3, [R3,#(buf.c_oflag - 0x7D790)]
LDR             R2, [R3]
B               loc_288EC
; End of function sub_28868

off_2892C DCD aCheck+2  ; "check"
off_28930 DCD dword_7DB94
off_28934 DCD buf
off_28938 DCD aWarningCanTSta_0 ; "warning: can't stat %s/check"
off_2893C DCD aCheck    ; "./check"
off_28940 DCD aRun_0    ; "run"
off_28944 DCD aWarningCanTSCh ; "warning: can't %s child %s/check"
off_28948 DCD aWaitFor  ; "wait for"


; Attributes: noreturn

; void __fastcall __noreturn sub_2894C(const char *)
sub_2894C
MOV             R1, R0
PUSH            {R4,LR}
LDR             R0, =aFatalCanTS ; "fatal: can't %s"
BL              sub_16AF4
MOV             R0, #0x97 ; status
BL              _exit
; End of function sub_2894C

off_28964 DCD aFatalCanTS ; "fatal: can't %s"



; int sub_28968()
sub_28968
PUSH            {R4-R6,LR}
MOVW            R1, #0x801
LDR             R0, =(aCanTOpenSuperv+0xB) ; "supervise/ok"
BL              open64
CMN             R0, #1
BNE             loc_289E0
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R2, [R3]
CMP             R2, #0x13
BNE             loc_289D0
LDR             R2, =buf
MOV             R4, #0
LDR             R2, [R2]
LDRB            R2, [R2]
STR             R4, [R3]
CMP             R2, #0x78 ; 'x'
BNE             loc_289C4
LDR             R1, =aRunsvNotRunnin ; "runsv not running"
LDR             R0, =aOk ; "ok: "
BL              sub_28600

loc_289BC
MOV             R0, R4
POP             {R4-R6,PC}

loc_289C4
LDR             R0, =aRunsvNotRunnin ; "runsv not running"
BL              sub_2869C
B               loc_289BC

loc_289D0
MOV             R4, R0
LDR             R0, =aCanTOpenSuperv ; "can't open supervise/ok"

loc_289D8
BL              sub_28678
B               loc_289BC

loc_289E0
BL              close
MOV             R1, #0x800
LDR             R0, =(aCanTReadSuperv_0+0xB) ; "supervise/status"
BL              open64
CMN             R0, #1
MOV             R4, R0
LDREQ           R0, =aCanTOpenSuperv_0 ; "can't open supervise/status"
BEQ             loc_289D8
MOV             R2, #0x14 ; nbytes
LDR             R1, =(buf.c_cc+0xF) ; buf
BL              read
MOV             R5, R0
MOV             R0, R4  ; fd
BL              close
CMN             R5, #1
BEQ             loc_28A44
CMP             R5, #0x14
MOVEQ           R4, #1
BEQ             loc_289BC
LDR             R3, =dword_7DB94
MOV             R2, #0
LDR             R0, =aCanTReadSuperv ; "can't read supervise/status: bad format"
LDR             R3, [R3]
STR             R2, [R3]
B               loc_28A48

loc_28A44
LDR             R0, =aCanTReadSuperv_0 ; "can't read supervise/status"

loc_28A48
BL              sub_28678
MOV             R4, #0xFFFFFFFF
B               loc_289BC
; End of function sub_28968

off_28A54 DCD aCanTOpenSuperv+0xB ; "supervise/ok"
off_28A58 DCD dword_7DB94
off_28A5C DCD buf
off_28A60 DCD aRunsvNotRunnin ; "runsv not running"
off_28A64 DCD aOk       ; "ok: "
off_28A68 DCD aCanTOpenSuperv ; "can't open supervise/ok"
off_28A6C DCD aCanTReadSuperv_0+0xB ; "supervise/status"
; const int fd
fd DCD aCanTOpenSuperv_0 ; "can't open supervise/status"
off_28A74 DCD buf.c_cc+0xF
off_28A78 DCD aCanTReadSuperv ; "can't read supervise/status: bad format"
off_28A7C DCD aCanTReadSuperv_0 ; "can't read supervise/status"



; int sub_28A80()
sub_28A80
PUSH            {R4-R6,LR}
BL              sub_28968
CMP             R0, #0
MOVLE           R5, #0
BLE             loc_28B08
LDR             R4, =buf
LDR             R3, [R4,#termios.c_oflag]
LDR             R0, [R3]
BL              sub_286C0
MOV             R3, #0
MOV             R2, #1
MOV             R5, R0
LDR             R0, =(aDevLog+5) ; path
STRB            R2, [R4,#termios.c_ispeed]
STRB            R3, [R4,#termios.c_ispeed+1]
STRB            R3, [R4,#termios.c_ispeed+2]
STRB            R3, [R4,#termios.c_ispeed+3]
BL              chdir
CMN             R0, #1
BNE             loc_28B10
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_28B30
LDR             R0, =(asc_67F15+1) ; format
BL              printf
LDR             R0, =aCanTChangeDire_0 ; "can't change directory"
BL              sub_28678

loc_28AF4
MOV             R3, #0
STRB            R3, [R4,#termios.c_ispeed]
STRB            R3, [R4,#termios.c_ispeed+1]
STRB            R3, [R4,#termios.c_ispeed+2]
STRB            R3, [R4,#termios.c_ispeed+3]

loc_28B08
MOV             R0, R5
POP             {R4-R6,PC}

loc_28B10               ; format
LDR             R0, =(asc_67F15+1) ; "; "
BL              printf
BL              sub_28968
CMP             R0, #0
BEQ             loc_28AF4
LDR             R0, =(aDevLog+5) ; "log"
BL              sub_286C0
MOV             R5, R0

loc_28B30               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
B               loc_28AF4
; End of function sub_28A80

off_28B3C DCD buf
off_28B40 DCD aDevLog+5 ; "log"
off_28B44 DCD dword_7DB94
off_28B48 DCD asc_67F15+1 ; "; "
off_28B4C DCD aCanTChangeDire_0 ; "can't change directory"



; int __fastcall sub_28B50(int)
sub_28B50
PUSH            {R4-R8,LR}
MOV             R6, R0
BL              sub_28968
CMN             R0, #1
BEQ             loc_28BB4
LDR             R4, =buf
MOV             R7, R0
SUB             R6, R6, #1

loc_28B70
LDRB            R3, [R6,#1]!
CMP             R3, #0
BNE             loc_28BA4
LDR             R0, =aOk ; "ok: "
BL              printf
LDR             R3, =buf
LDR             R3, [R3,#termios.c_oflag]
LDR             R0, [R3]
BL              sub_286C0
MOV             R0, #0xA ; c
BL              j_putchar_unlocked

loc_28B9C
MOV             R0, #1
POP             {R4-R8,PC}

loc_28BA4
CMP             R7, #0
BNE             loc_28BBC
CMP             R3, #0x78 ; 'x'
BEQ             loc_28B9C

loc_28BB4
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}

loc_28BBC
CMP             R3, #0x6F ; 'o'
LDR             R5, [R4,#termios.c_cc+0x1B]
BEQ             loc_28CCC
BHI             loc_28C5C
CMP             R3, #0x63 ; 'c'
BEQ             loc_28D08
BHI             loc_28BF4
CMP             R3, #0x43 ; 'C'
BNE             loc_28B70
CMP             R5, #0
BEQ             loc_28B70

loc_28BE8
BL              sub_28868
CMP             R0, #0
B               loc_28C90

loc_28BF4
CMP             R3, #0x64 ; 'd'
BEQ             loc_28CB8
CMP             R3, #0x6B ; 'k'
BNE             loc_28B70

loc_28C04
CMP             R5, #0
BNE             loc_28C18
LDRB            R3, [R4,#(buf+0x31 - 0x7D790)]
CMP             R3, #0x64 ; 'd'
BEQ             loc_28B70

loc_28C18
LDR             R0, [R4,#termios.c_cc+0xF]
LDR             R1, [R4,#termios.c_cc+0x13]
BL              sub_57900
LDR             R3, [R4,#termios.c_cc+3]
LDR             R2, [R4,#termios.c_line]
CMP             R3, R1
CMPEQ           R2, R0
MOVHI           R3, #1
MOVLS           R3, #0
CMP             R5, #0
MOVNE           R5, R3
MOVEQ           R5, #1
CMP             R5, #0
BNE             loc_28CA0
LDRB            R3, [R4,#(buf+0x32 - 0x7D790)]
CMP             R3, #0
B               loc_28CB0

loc_28C5C
CMP             R3, #0x74 ; 't'
BEQ             loc_28C04
BHI             loc_28C84
CMP             R3, #0x70 ; 'p'
BNE             loc_28B70
CMP             R5, #0
BEQ             loc_28B70
LDRB            R3, [R4,#termios.c_cc+0x1F]
CMP             R3, #0
B               loc_28C90

loc_28C84
CMP             R3, #0x75 ; 'u'
BEQ             loc_28C98
CMP             R3, #0x78 ; 'x'

loc_28C90
BEQ             loc_28CA0
B               loc_28B70

loc_28C98
CMP             R5, #0
BNE             loc_28CA8

loc_28CA0
MOV             R0, #0
POP             {R4-R8,PC}

loc_28CA8
LDRB            R3, [R4,#(buf+0x33 - 0x7D790)]
CMP             R3, #1

loc_28CB0
BNE             loc_28CA0
B               loc_28BE8

loc_28CB8
CMP             R5, #0
BNE             loc_28CA0
LDRB            R3, [R4,#(buf+0x33 - 0x7D790)]

loc_28CC4
CMP             R3, #0
B               loc_28D00

loc_28CCC
LDR             R0, [R4,#termios.c_cc+0xF]
LDR             R1, [R4,#termios.c_cc+0x13]
BL              sub_57900
CMP             R5, #0
BNE             loc_28CF8
LDR             R3, [R4,#termios.c_cc+3]
LDR             R2, [R4,#termios.c_line]
CMP             R3, R1
CMPEQ           R2, R0
BHI             loc_28CA0
B               loc_28B70

loc_28CF8
LDRB            R3, [R4,#(buf+0x31 - 0x7D790)]
CMP             R3, #0x64 ; 'd'

loc_28D00
BNE             loc_28CA0
B               loc_28B70

loc_28D08
CMP             R5, #0
BEQ             loc_28B70
LDRB            R3, [R4,#termios.c_cc+0x1F]
B               loc_28CC4
; End of function sub_28B50

off_28D18 DCD buf
off_28D1C DCD aOk       ; "ok: "



; int __fastcall sub_28D20(const char *)
sub_28D20
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_28968
CMP             R0, #0
BLE             loc_28E04
LDR             R3, =buf
LDRB            R2, [R5]
LDRB            R1, [R3,#(buf+0x31 - 0x7D790)]
CMP             R2, R1
BNE             loc_28D5C
CMP             R2, #0x64 ; 'd'
BNE             loc_28E0C
LDRB            R3, [R3,#(buf+0x32 - 0x7D790)]
CMP             R3, #1
BEQ             loc_28E0C

loc_28D5C
MOVW            R1, #0x801
LDR             R0, =(aCanTOpenSuperv_1+0xB) ; "supervise/control"
BL              open64
CMN             R0, #1
MOV             R4, R0
BNE             loc_28DC8
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R2, [R3]
CMP             R2, #0x13
BEQ             loc_28D98
LDR             R0, =aCanTOpenSuperv_1 ; "can't open supervise/control"
BL              sub_28678

loc_28D90
MOV             R0, R4
POP             {R4-R6,PC}

loc_28D98
LDRB            R2, [R5]
CMP             R2, #0x78 ; 'x'
MOV             R2, #0
STR             R2, [R3]
BNE             loc_28DBC
LDR             R1, =aRunsvNotRunnin ; "runsv not running"
LDR             R0, =aOk ; "ok: "
BL              sub_28600
B               loc_28D90

loc_28DBC
LDR             R0, =aRunsvNotRunnin ; "runsv not running"
BL              sub_2869C
B               loc_28D90

loc_28DC8               ; s
MOV             R0, R5
BL              strlen
MOV             R1, R5  ; buf
MOV             R2, R0  ; n
MOV             R6, R0
MOV             R0, R4  ; fd
BL              write
MOV             R5, R0
MOV             R0, R4  ; fd
BL              close
CMP             R6, R5
MOVEQ           R4, #1
BEQ             loc_28D90
LDR             R0, =aCanTWriteToSup ; "can't write to supervise/control"
BL              sub_28678

loc_28E04
MOV             R4, #0xFFFFFFFF
B               loc_28D90

loc_28E0C
MOV             R4, #0
B               loc_28D90
; End of function sub_28D20

off_28E14 DCD buf
off_28E18 DCD aCanTOpenSuperv_1+0xB ; "supervise/control"
off_28E1C DCD dword_7DB94
off_28E20 DCD aCanTOpenSuperv_1 ; "can't open supervise/control"
off_28E24 DCD aRunsvNotRunnin ; "runsv not running"
off_28E28 DCD aOk       ; "ok: "
off_28E2C DCD aCanTWriteToSup ; "can't write to supervise/control"



; int __fastcall sub_28E30(int, char **)
sub_28E30

var_30= -0x30
path= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
format= -0x1C
var_18= -0x18
var_10= -0x10
var_F= -0xF
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R4, R1
SUB             SP, SP, #0x34
LDR             R1, =aUdopchaitkx ; "udopchaitkx"
MOV             R0, R4
BL              sub_593CC
LDR             R1, =optind
LDR             R2, [R1]
STR             R1, [SP,#0x34+var_24]
LDR             R12, [R4,R2,LSL#2]
ADD             R3, R4, R2,LSL#2
CMP             R0, #0
CMPNE           R12, #0
BNE             loc_28E6C

loc_28E68
BL              sub_162F0

loc_28E6C
CMP             R2, #2
SUB             R9, R3, #8
LDRGT           R2, =asc_64E96 ; "--"
SUBGT           R9, R3, #0xC
LDR             R4, =buf
MOV             R7, R0
STRGT           R2, [R3,#-4]
LDR             R3, =aSv ; "sv"
STR             R3, [R9]
ADD             R3, SP, #0x34+var_10
STR             R3, [R9,#4]
MOV             R3, #0
STRB            R3, [SP,#0x34+var_F]
LDR             R3, =aUdopchaitkx ; "udopchaitkx"
STR             R3, [SP,#0x34+var_30]

loc_28EA8
TST             R7, #1
BNE             loc_28ED0

loc_28EB0
LDR             R3, [SP,#0x34+var_30]
MOVS            R7, R7,LSR#1
ADD             R3, R3, #1
STR             R3, [SP,#0x34+var_30]
BNE             loc_28EA8
MOV             R0, R7

loc_28EC8
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R11,PC}

loc_28ED0
LDR             R3, [SP,#0x34+var_30]
MOV             R1, #0  ; c
MOV             R2, #0x38 ; '8' ; n
MOV             R0, R4  ; s
STR             R1, [SP,#0x34+var_8]
LDRB            R3, [R3]
STRB            R3, [SP,#0x34+var_10]
LDR             R3, [SP,#0x34+var_24]
STR             R1, [R3]
MOV             R3, #7
STR             R3, [SP,#0x34+var_C]
BL              memset
LDR             R2, =byte_7D5F8
MOV             R3, #0x64 ; 'd'
LDR             R0, =aSvdir ; "SVDIR"
STRB            R3, [R2]
BL              getenv
LDR             R3, =(asc_6B39D+1) ; ""
CMP             R0, #0
MOVNE           R3, R0
LDR             R0, =aSvwait ; "SVWAIT"
STR             R3, [SP,#0x34+path]
BL              getenv
CMP             R0, #0
BEQ             loc_28F3C
BL              sub_620B0
STR             R0, [SP,#0x34+var_C]

loc_28F3C
ADD             R3, SP, #0x34+var_8
ADD             R2, SP, #0x34+var_C
LDR             R1, =aWV ; "^w:+v"
MOV             R0, R9
BL              sub_593CC
LDR             R3, [SP,#0x34+var_24]
LDR             R2, [R3]
LDR             R6, [R9,R2,LSL#2]
ADD             R3, R9, R2,LSL#2
CMP             R6, #0
ADD             R1, R3, #4
STR             R1, [SP,#0x34+var_28]
BEQ             loc_28E68
LDR             R3, [R3,#4]
CMP             R3, #0
BEQ             loc_28E68
MOV             R0, #0  ; timer
BL              time
MOV             R1, R0,ASR#31
ADDS            R2, R0, #0xA
STR             R2, [R4,#termios.c_cc+7]
ADC             R3, R1, #0x40000000
STR             R2, [R4,#termios.c_line]
STR             R3, [R4,#termios.c_cc+0xB]
MOV             R1, #0x800
STR             R3, [R4,#termios.c_cc+3]
LDR             R0, =(asc_67ED0+4) ; "."
BL              open64
CMN             R0, #1
MOV             R11, R0
BNE             loc_28FC0
LDR             R0, =aOpenCurrentDir ; "open current directory"

loc_28FBC
BL              sub_2894C

loc_28FC0
LDR             R3, =(aSS_8+4) ; "s"
STR             R3, [R4]
LDRB            R3, [R6]
CMP             R3, #0x66 ; 'f'
BEQ             loc_29230
BHI             loc_29078
CMP             R3, #0x54 ; 'T'
BEQ             loc_29244
BHI             loc_2901C
CMP             R3, #0x44 ; 'D'
BEQ             loc_2929C
BHI             loc_2900C
SUB             R3, R3, #0x31 ; '1'
CMP             R3, #1
BHI             loc_28E68

loc_28FFC
MOV             R3, #0
STRB            R3, [R6,#1]
STR             R6, [R4]
B               loc_29054

loc_2900C
CMP             R3, #0x45 ; 'E'
BNE             loc_28E68

loc_29014
LDR             R3, =(aUnrecognizedFi_0+0x22) ; "x"
B               loc_29248

loc_2901C
CMP             R3, #0x63 ; 'c'
BEQ             loc_2913C
BHI             loc_2903C
CMP             R3, #0x58 ; 'X'
BEQ             loc_29014
CMP             R3, #0x61 ; 'a'

loc_29034
BEQ             loc_28FFC
B               loc_28E68

loc_2903C
CMP             R3, #0x64 ; 'd'
BEQ             loc_28FFC
CMP             R3, #0x65 ; 'e'

loc_29048
BNE             loc_28E68
LDR             R3, =(aUnrecognizedFi_0+0x22) ; "x"
STR             R3, [R4]

loc_29054
LDR             R3, [SP,#0x34+var_8]
CMP             R3, #0
MOVEQ           R6, #0
LDREQ           R10, =sub_28D20
BEQ             loc_2910C
LDR             R6, =sub_28B50
MOV             R5, #0
LDR             R10, =sub_28D20
B               loc_29160

loc_29078
CMP             R3, #0x71 ; 'q'
BHI             loc_290A0
CMP             R3, #0x6F ; 'o'
BCS             loc_28FFC
CMP             R3, #0x68 ; 'h'
BCC             loc_28E68
CMP             R3, #0x69 ; 'i'
BLS             loc_28FFC
CMP             R3, #0x6B ; 'k'
B               loc_29034

loc_290A0
CMP             R3, #0x74 ; 't'
BEQ             loc_29124
BHI             loc_29114
CMP             R3, #0x72 ; 'r'
BEQ             loc_291F0
CMP             R3, #0x73 ; 's'
BNE             loc_28E68
LDR             R1, =(aForceShutdown+6) ; s2
MOV             R0, R6  ; s1
BL              strcmp
SUBS            R5, R0, #0
LDREQ           R3, =(aUnrecognizedFi_0+0x22) ; "x"
BEQ             loc_29220
LDR             R1, =(aForceRestart+8) ; s2
MOV             R0, R6  ; s1
BL              strcmp
SUBS            R5, R0, #0
LDREQ           R3, =(aUnknownUidU+0xD) ; "u"
BEQ             loc_29220
LDR             R1, =(aForceStop+6) ; s2
MOV             R0, R6  ; s1
BL              strcmp
SUBS            R5, R0, #0
LDREQ           R3, =(aSUartSPort0x4x+0x22) ; "d"
BEQ             loc_29220
LDR             R10, =sub_28A80
MOV             R6, #0

loc_2910C
MOV             R5, R6
B               loc_29160

loc_29114
CMP             R3, #0x75 ; 'u'
BEQ             loc_28FFC
CMP             R3, #0x78 ; 'x'
B               loc_29048

loc_29124
LDR             R1, =aTryRestart ; "try-restart"
MOV             R0, R6  ; s1
BL              strcmp
SUBS            R5, R0, #0
LDREQ           R3, =aTc ; "tc"
BEQ             loc_29220

loc_2913C               ; s2
LDR             R1, =(aCheck+2) ; "check"
MOV             R0, R6  ; s1
BL              strcmp
SUBS            R5, R0, #0
BNE             loc_28FFC
LDR             R6, =sub_28B50
MOV             R10, R5
LDR             R3, =(aUnspec_0+5) ; "C"
STR             R3, [R4]

loc_29160
LDR             R3, [SP,#0x34+var_28]
STR             R3, [R4,#termios.c_oflag]

loc_29168
LDR             R2, [R4,#termios.c_oflag]
LDR             R8, [R2]
CMP             R8, #0
BNE             loc_292A4
CMP             R6, #0
BEQ             loc_29430
LDR             R3, =aTimeout ; "timeout: "
CMP             R5, #0
LDR             R2, =aKill_0 ; "kill: "
MOVEQ           R2, R3
STR             R2, [SP,#0x34+format]

loc_29194
LDR             R2, [R4,#termios.c_cc+7]
MOV             R8, #1
LDR             R3, [R4,#termios.c_line]
SUB             R3, R2, R3
STR             R3, [SP,#0x34+var_20]
LDR             R3, [SP,#0x34+var_28]
STR             R3, [R4,#termios.c_oflag]

loc_291B0
LDR             R3, [R4,#termios.c_oflag]
LDR             R10, [R3]
CMP             R10, #0
BNE             loc_29340
CMP             R8, #0
BNE             loc_29430
LDR             R0, =(aIpRouteFlush+0xB) ; useconds
BL              usleep
MOV             R0, R8  ; timer
BL              time
MOV             R1, R0,ASR#31
ADDS            R2, R0, #0xA
STR             R2, [R4,#termios.c_cc+7]
ADC             R3, R1, #0x40000000
STR             R3, [R4,#termios.c_cc+0xB]
B               loc_29194

loc_291F0               ; s2
LDR             R1, =(aForceRestart+6) ; "restart"
MOV             R0, R6  ; s1
BL              strcmp
SUBS            R5, R0, #0
LDREQ           R3, =aTcu ; "tcu"
BEQ             loc_29220
LDR             R1, =(aForceReload+6) ; s2
MOV             R0, R6  ; s1
BL              strcmp
SUBS            R5, R0, #0
BNE             loc_28E68
LDR             R3, =(a1049h+7) ; "h"

loc_29220
STR             R3, [R4]
LDR             R6, =sub_28B50
LDR             R10, =sub_28D20
B               loc_29160

loc_29230
LDR             R1, =aForceReload ; "force-reload"
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_2925C

loc_29244
LDR             R3, =aTc ; "tc"

loc_29248
STR             R3, [R4]
MOV             R5, #1
LDR             R6, =sub_28B50
LDR             R10, =sub_28D20
B               loc_29160

loc_2925C
LDR             R1, =aForceRestart ; "force-restart"
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
LDREQ           R3, =aTcu ; "tcu"
BEQ             loc_29248
LDR             R1, =aForceShutdown ; "force-shutdown"
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_29014
LDR             R1, =aForceStop ; "force-stop"
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_28E68

loc_2929C
LDR             R3, =(aSUartSPort0x4x+0x22) ; "d"
B               loc_29248

loc_292A4
LDRB            R1, [R8]
SUB             R1, R1, #0x2E ; '.'
CMP             R1, #1
BHI             loc_292F4

loc_292B4               ; path
MOV             R0, R8
BL              chdir
CMN             R0, #1
BEQ             loc_29318
CMP             R10, #0
BEQ             loc_292DC
LDR             R0, [R4]
BLX             R10
CMN             R0, #1
BEQ             loc_29320

loc_292DC               ; fd
MOV             R0, R11
BL              fchdir
CMN             R0, #1
BNE             loc_29330

loc_292EC
LDR             R0, =aChangeToOrigin ; "change to original directory"
B               loc_28FBC

loc_292F4
MOV             R1, #0x2F ; '/'
MOV             R0, R8
BL              sub_16AA8
CMP             R0, #0
BNE             loc_292B4
LDR             R0, [SP,#0x34+path] ; path
BL              chdir
CMN             R0, #1
BNE             loc_292B4

loc_29318
LDR             R0, =aCanTChangeToSe ; "can't change to service directory"
BL              sub_2869C

loc_29320
LDR             R2, [R4,#termios.c_oflag]
MOV             R3, #0xFFFFFFFF
STR             R3, [R2]
B               loc_292DC

loc_29330
LDR             R2, [R4,#termios.c_oflag]
ADD             R2, R2, #4
STR             R2, [R4,#termios.c_oflag]
B               loc_29168

loc_29340
CMN             R10, #1
BEQ             loc_29428
LDRB            R3, [R10]
SUB             R3, R3, #0x2E ; '.'
CMP             R3, #1
BHI             loc_293D4

loc_29358               ; path
MOV             R0, R10
BL              chdir
CMN             R0, #1
BEQ             loc_293E4
LDR             R0, [R4]
BLX             R6 ; sub_28B50
SUBS            R3, R0, #0
BNE             loc_293EC
LDR             R2, [SP,#0x34+var_C]
LDR             R1, [SP,#0x34+var_20]
CMP             R1, R2
BCC             loc_293FC
LDR             R0, [SP,#0x34+format] ; format
BL              printf
BL              sub_28968
CMP             R0, #0
BLE             loc_293B0
MOV             R0, R10
BL              sub_286C0
LDR             R3, [R4,#termios.c_cflag]
ADD             R3, R3, #1
STR             R3, [R4,#termios.c_cflag]

loc_293B0               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
CMP             R5, #0
MOVEQ           R8, R5
BEQ             loc_293EC
LDR             R0, =(a3break+5) ; "k"
MOV             R8, #0
BL              sub_28D20
B               loc_293EC

loc_293D4               ; path
LDR             R0, [SP,#0x34+path]
BL              chdir
CMN             R0, #1
BNE             loc_29358

loc_293E4
LDR             R0, =aCanTChangeToSe ; "can't change to service directory"
BL              sub_2869C

loc_293EC
LDR             R3, [R4,#termios.c_oflag]
MOV             R2, #0xFFFFFFFF
STR             R2, [R3]
MOV             R3, R8

loc_293FC               ; fd
MOV             R0, R11
STR             R3, [SP,#0x34+var_18]
BL              fchdir
CMN             R0, #1
LDR             R3, [SP,#0x34+var_18]
BEQ             loc_292EC

loc_29414
LDR             R2, [R4,#termios.c_oflag]
MOV             R8, R3
ADD             R2, R2, #4
STR             R2, [R4,#termios.c_oflag]
B               loc_291B0

loc_29428
MOV             R3, R8
B               loc_29414

loc_29430
LDR             R3, [R4,#termios.c_cflag]
CMP             R3, #0
BEQ             loc_28EB0
MOV             R0, #1
B               loc_28EC8
; End of function sub_28E30

off_29444 DCD aUdopchaitkx ; "udopchaitkx"
off_29448 DCD optind
off_2944C DCD asc_64E96 ; "--"
off_29450 DCD buf
off_29454 DCD aSv       ; "sv"
off_29458 DCD byte_7D5F8
off_2945C DCD aSvdir    ; "SVDIR"
off_29460 DCD asc_6B39D+1 ; ""
off_29464 DCD aSvwait   ; "SVWAIT"
off_29468 DCD aWV       ; "^w:+v"
off_2946C DCD asc_67ED0+4 ; "."
off_29470 DCD aOpenCurrentDir ; "open current directory"
off_29474 DCD aSS_8+4   ; "s"
off_29478 DCD aUnrecognizedFi_0+0x22 ; "x"
off_2947C DCD sub_28D20
off_29480 DCD sub_28B50
off_29484 DCD aForceShutdown+6 ; "shutdown"
off_29488 DCD aForceRestart+8 ; "start"
off_2948C DCD aUnknownUidU+0xD ; "u"
off_29490 DCD aForceStop+6 ; "stop"
off_29494 DCD aSUartSPort0x4x+0x22 ; "d"
off_29498 DCD sub_28A80
off_2949C DCD aTryRestart ; "try-restart"
off_294A0 DCD aTc       ; "tc"
off_294A4 DCD aCheck+2  ; "check"
off_294A8 DCD aUnspec_0+5 ; "C"
off_294AC DCD aTimeout  ; "timeout: "
off_294B0 DCD aKill_0   ; "kill: "
; const __useconds_t off_294B4
off_294B4 DCD aIpRouteFlush+0xB ; "lush\""
off_294B8 DCD aForceRestart+6 ; "restart"
off_294BC DCD aTcu      ; "tcu"
off_294C0 DCD aForceReload+6 ; "reload"
off_294C4 DCD a1049h+7  ; "h"
off_294C8 DCD aForceReload ; "force-reload"
off_294CC DCD aForceRestart ; "force-restart"
off_294D0 DCD aForceShutdown ; "force-shutdown"
off_294D4 DCD aForceStop ; "force-stop"
off_294D8 DCD aChangeToOrigin ; "change to original directory"
off_294DC DCD aCanTChangeToSe ; "can't change to service directory"
off_294E0 DCD a3break+5 ; "k"



; int __fastcall sub_294E4(int, int)
sub_294E4
PUSH            {R4,LR}
LDR             R4, [R1,#4]
CMP             R4, #0
BNE             loc_294F8
BL              sub_162F0

loc_294F8
LDR             R3, =byte_7D5F8
MOV             R2, #0x6F ; 'o'
STRB            R2, [R3]
LDRB            R3, [R4]
SUB             R3, R3, #0x2E ; '.'
CMP             R3, #1
BLS             loc_29530
MOV             R1, #0x2F ; '/'
MOV             R0, R4
BL              sub_16AA8
CMP             R0, #0
BNE             loc_29530
LDR             R0, =(asc_6B39D+1) ; ""
BL              sub_178FC

loc_29530
MOV             R0, R4
BL              sub_178FC
MOV             R1, #1
LDR             R0, =(aCanTOpenSuperv+0xB) ; "supervise/ok"
BL              open64
CMP             R0, #0
BGE             loc_29570
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
BIC             R3, R3, #4
CMP             R3, #2
BEQ             loc_29578
LDR             R1, =(aCanTOpenSuperv+0xB) ; "supervise/ok"
LDR             R0, =aCanTOpenS ; "can't open '%s'"
BL              sub_16B40

loc_29570
MOV             R0, #0
POP             {R4,PC}

loc_29578
MOV             R0, #0x64 ; 'd'
POP             {R4,PC}
; End of function sub_294E4

off_29580 DCD byte_7D5F8
off_29584 DCD asc_6B39D+1 ; ""
off_29588 DCD aCanTOpenSuperv+0xB ; "supervise/ok"
off_2958C DCD dword_7DB94
off_29590 DCD aCanTOpenS ; "can't open '%s'"



; bool __fastcall sub_29594(int)
sub_29594
SUB             R3, R0, #1
ADD             R0, R0, #9

loc_2959C
LDRB            R2, [R3,#1]!
CMP             R3, R0
BEQ             loc_295B4
SUB             R1, R2, #0x30 ; '0'
CMP             R1, #9
BLS             loc_2959C

loc_295B4
CLZ             R0, R2
MOV             R0, R0,LSR#5
BX              LR
; End of function sub_29594




; int __fastcall sub_295C0(int result)
sub_295C0
LDR             R3, =dword_7DBB8
LDR             R3, [R3]
LDR             R2, [R3,#4]
STR             R0, [R3,#4]
SUB             R1, R2, R0
LDR             R2, [R3,#0xC]
ADD             R2, R2, R1
STR             R2, [R3,#0xC]
BX              LR
; End of function sub_295C0

off_295E4 DCD dword_7DBB8



; unsigned __int8 *__fastcall sub_295E8(unsigned __int8 *result, int)
sub_295E8
SUB             R1, R1, #1

loc_295EC
LDRB            R3, [R1,#1]!
CMP             R3, #0
BXEQ            LR
LDRB            R2, [R0],#1
CMP             R2, R3
BEQ             loc_295EC
MOV             R0, #0
BX              LR
; End of function sub_295E8




; int __fastcall sub_2960C(unsigned __int8 *)
sub_2960C
LDRB            R3, [R0]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
BHI             loc_29630
LDRB            R3, [R0,#1]!
CMP             R3, #0
BNE             sub_2960C
MOV             R0, #1
BX              LR

loc_29630
MOV             R0, #0
BX              LR
; End of function sub_2960C




; int __fastcall sub_29638(int, int)
sub_29638
SUB             R0, R0, #1
SUB             R1, R1, #1

loc_29640
LDRB            R3, [R0,#1]!
LDRB            R2, [R1,#1]!
CMP             R3, R2
BEQ             loc_29664
CMP             R3, #0x3D ; '='
MOVEQ           R3, #0
CMP             R2, #0x3D ; '='
MOVEQ           R2, #0
B               loc_29670

loc_29664
CMP             R3, #0x3D ; '='
CMPNE           R3, #0
BNE             loc_29640

loc_29670
SUB             R0, R3, R2
BX              LR
; End of function sub_29638




; int __fastcall sub_29678(unsigned __int8 *)
sub_29678
PUSH            {R4,LR}
LDRB            R3, [R0],#-1
MOV             R3, R3,LSL#4

loc_29684
LDRB            R2, [R0,#1]!
CMP             R2, #0
CMPNE           R2, #0x3D ; '='
BNE             loc_296B4
MOV             R0, R3
MOV             R1, #0x27 ; '''
BLX             sub_15EFC
LDR             R3, =dword_7DBB4
ADD             R1, R1, #7
LDR             R0, [R3]
ADD             R0, R0, R1,LSL#2
POP             {R4,PC}

loc_296B4
ADD             R3, R3, R2
B               loc_29684
; End of function sub_29678

off_296BC DCD dword_7DBB4



; int __fastcall sub_296C0(int *, int *)
sub_296C0
LDR             R1, [R1]
LDR             R0, [R0]
B               sub_29638
; End of function sub_296C0




; _DWORD *__fastcall sub_296CC(_DWORD *, int)
sub_296CC
PUSH            {R4-R6,LR}
MOV             R6, R1
MOV             R4, R0

loc_296D8
LDR             R5, [R4]
CMP             R5, #0
BNE             loc_296EC

loc_296E4
MOV             R0, R4
POP             {R4-R6,PC}

loc_296EC
MOV             R1, R6
LDR             R0, [R5,#8]
BL              sub_29638
CMP             R0, #0
BEQ             loc_296E4
MOV             R4, R5
B               loc_296D8
; End of function sub_296CC




; int __fastcall sub_29708(int result, int)
sub_29708
LDR             R2, =dword_7D6AC
PUSH            {LR}
MOV             LR, R2
LDR             R3, [R2]

loc_29718
CMP             R3, R0
LDR             R12, [R3,#0x1C]
ADDNE           R2, R3, #0x1C
MOVNE           R3, R12
BNE             loc_29718
CMP             R1, #0
STR             R12, [R2]
BEQ             loc_29768
CMP             R1, #1
POPNE           {PC}
LDR             R2, [LR]
LDR             R1, =dword_7D6AC

loc_29748
CMP             R2, #0
BEQ             loc_2976C
LDRB            R0, [R2,#0x18]
CMP             R0, #1
BNE             loc_2976C
ADD             R1, R2, #0x1C
LDR             R2, [R2,#0x1C]
B               loc_29748

loc_29768
LDR             R1, =dword_7D6AC

loc_2976C
LDR             R2, [R1]
STR             R2, [R3,#0x1C]
STR             R3, [R1]
POP             {PC}
; End of function sub_29708

off_2977C DCD dword_7D6AC



; int __fastcall sub_29780(int)
sub_29780
LDR             R12, =dword_7DBB0
MOV             R1, R0
LDR             R3, [R1,#0x14]
MOV             R2, #0xC
LDR             R0, [R0,#0xC]
LDR             R12, [R12]
MLA             R3, R2, R3, R0
LDRB            R12, [R12,#0x4B]
CMP             R12, #0
SUB             R3, R3, #0xC
LDR             R2, [R3,#4]
BNE             loc_297E8

loc_297B0
ANDS            R3, R2, #0x7F
UBFX            R0, R2, #8, #8
BXEQ            LR
UXTB            R2, R2
CMP             R2, #0x7F
MOVEQ           R3, R0
BEQ             loc_297DC
CMP             R3, #2
LDRBEQ          R2, [R1,#0x19]
ORREQ           R2, R2, #1
STRBEQ          R2, [R1,#0x19]

loc_297DC
ADD             R0, R3, #0x80
BX              LR

loc_297E4
LDR             R2, [R3,#4]

loc_297E8
CMP             R2, #0
BNE             loc_297B0
SUB             R3, R3, #0xC
CMP             R0, R3
BLS             loc_297E4
B               loc_297B0
; End of function sub_29780

off_29800 DCD dword_7DBB0



; int sub_29804()
sub_29804
LDR             R2, =dword_7D6B8
LDR             R0, [R2]
SUB             R3, R0, #1
CMP             R3, #1
BXHI            LR
LDR             R1, =dword_7D730
LDR             R3, [R1]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R1]
MOVLE           R3, #0

loc_29830
MOVGT           R0, #1
STRLE           R3, [R2]
BX              LR
; End of function sub_29804

off_2983C DCD dword_7D6B8
off_29840 DCD dword_7D730



; int sub_29844()
sub_29844
MOV             R0, #1
BX              LR
; End of function sub_29844




; int sub_2984C()
sub_2984C
MOV             R0, #0
BX              LR
; End of function sub_2984C




; int sub_29854()
sub_29854
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDRB            R0, [R3,#1]
BX              LR
; End of function sub_29854

off_29864 DCD dword_7DBB0



; void sub_29868()
sub_29868
LDR             R3, =off_7D4D0
LDR             R2, [R3] ; unk_7D64C
LDR             R3, [R2,#(dword_7D650 - 0x7D64C)]
ADD             R3, R3, #1
STR             R3, [R2,#(dword_7D650 - 0x7D64C)]
LDR             R3, =dword_7D6B4
LDR             R2, [R3]
LDR             R3, =dword_7D714
STR             R2, [R3]
BX              LR
; End of function sub_29868

off_29890 DCD off_7D4D0
off_29894 DCD dword_7D6B4
off_29898 DCD dword_7D714



; void sub_2989C()
sub_2989C
LDR             R3, =off_7D4D0
LDR             R2, [R3] ; unk_7D64C
LDR             R3, [R2,#(dword_7D694 - 0x7D64C)]
ADD             R3, R3, #1
STR             R3, [R2,#(dword_7D694 - 0x7D64C)]
BX              LR
; End of function sub_2989C

off_298B4 DCD off_7D4D0



; void *sub_298B8()
sub_298B8
PUSH            {R4,LR}
MOV             R0, #0x4C ; 'L'
BL              sub_174DC
LDR             R3, =off_7D4D0
LDR             R2, [R3] ; unk_7D64C
STR             R0, [R3] ; unk_7D64C
STR             R2, [R0]
MOV             R2, #0xFFFFFFFF
STR             R2, [R0,#8]
POP             {R4,PC}
; End of function sub_298B8

off_298E0 DCD off_7D4D0



; int __fastcall sub_298E4(int *)
sub_298E4
LDR             R3, =dword_7DBB4
CMP             R0, #0
PUSH            {R4-R6,LR}
LDR             R6, [R3]
BNE             loc_29900
LDR             R0, [R6,#0x14]
POP             {R4-R6,PC}

loc_29900
MOV             R5, #0

loc_29904
LDR             R2, [R0]
ADD             R3, R5, #1
LDR             R0, [R0,#4]
CMP             R2, #0x11
ADDEQ           R5, R5, #2
MOVNE           R5, R3
CMP             R0, #0
BNE             loc_29904
ADD             R4, R5, #1
MOV             R4, R4,LSL#3
MOV             R0, R4
BL              sub_174DC
SUB             R3, R4, #8
MOV             R2, R0
ADD             R3, R0, R3
MOV             R1, #0xFFFFFFFE
STR             R5, [R0,#4]

loc_29948
SUB             R5, R5, #1
SUB             R3, R3, #8
CMN             R5, #1
BNE             loc_29968
LDR             R0, [R6,#0x14]
STR             R0, [R2]
STR             R2, [R6,#0x14]
POP             {R4-R6,PC}

loc_29968
STR             R1, [R3,#0xC]
STR             R1, [R3,#8]
B               loc_29948
; End of function sub_298E4

off_29974 DCD dword_7DBB4



; void *__fastcall sub_29978(void *)
sub_29978
LDR             R3, [R0,#0xC]
PUSH            {R4-R6,LR}
TST             R3, #1
ORRNE           R3, R3, #2
MOVNE           R5, R0
STRNE           R3, [R0,#0xC]
BNE             loc_299B4
MOV             R4, R0
LDR             R5, [R0]
LDR             R0, [R0,#4] ; ptr
BL              free
LDR             R0, [R4,#8] ; ptr
BL              free
MOV             R0, R4  ; ptr
BL              free

loc_299B4
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_29978




; void __fastcall sub_299BC(int)
sub_299BC
LDRB            R3, [R0,#0xC]
CMP             R3, #0
BXEQ            LR
PUSH            {R4-R6,LR}
LDR             R4, [R0,#0x10]
SUB             R5, R4, #4

loc_299D4               ; ptr
LDR             R0, [R5,#4]!
CMP             R0, #0
BNE             loc_299EC
MOV             R0, R4  ; ptr
POP             {R4-R6,LR}
B               free

loc_299EC
BL              free
B               loc_299D4
; End of function sub_299BC




; void __fastcall sub_299F4(void *ptr)
sub_299F4
SUBS            R2, R0, #0
BXEQ            LR
LDR             R3, [R2]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R2]
BXGE            LR
B               free
; End of function sub_299F4




; int __fastcall sub_29A14(int, char)
sub_29A14
CMP             R0, #0x100
BEQ             loc_29A8C
MOVW            R3, #0x101
PUSH            {R4-R6,LR}
CMP             R0, R3
MOV             R4, R1
MOV             R1, R0
BEQ             loc_29A84
ADD             R3, R0, #0x7F
UXTB            R3, R3
CMP             R3, #7
BLS             loc_29A94
LDR             R5, =asc_6840F ; "\t\n !\"$&'()*-:;<=>?[\\]`|}~"
MOV             R0, R5
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_29A9C
LDR             R3, =byte_68671
SUB             R0, R0, R5
LDRB            R3, [R3,R0]

loc_29A68
LDR             R2, =word_6430E
MOV             R3, R3,LSL#1
MOV             R4, R4,LSL#2
LDRH            R0, [R2,R3]
MOV             R0, R0,ASR R4
AND             R0, R0, #0xF
POP             {R4-R6,PC}

loc_29A84
MOV             R3, #0
B               loc_29A68

loc_29A8C
MOV             R0, #0xB
BX              LR

loc_29A94
MOV             R0, #0xC
POP             {R4-R6,PC}

loc_29A9C
MOV             R0, R3
POP             {R4-R6,PC}
; End of function sub_29A14

off_29AA4 DCD asc_6840F ; "\t\n !\"$&'()*-:;<=>?[\\]`|}~"
off_29AA8 DCD byte_68671
off_29AAC DCD word_6430E



; char *__fastcall sub_29AB0(const char *)
sub_29AB0
PUSH            {R4-R6,LR}
MOV             R6, R0
LDR             R5, =dword_7D6D0
BL              strlen
LDR             R4, [R5]
ADD             R0, R0, #8
BIC             R0, R0, #7
MOV             R1, R6  ; src
SUB             R0, R4, R0 ; dest
STR             R0, [R5]
POP             {R4-R6,LR}
B               strcpy
; End of function sub_29AB0

off_29AE0 DCD dword_7D6D0



; int *__fastcall sub_29AE4(int *)
sub_29AE4
PUSH            {R4-R6,LR}
SUBS            R4, R0, #0
BEQ             loc_29BC8
LDR             R1, =dword_7D6C8
LDR             R3, [R4]
LDR             R2, =byte_681B5
LDR             R5, [R1]
LDRB            R2, [R2,R3]
ADD             R2, R5, R2
STR             R2, [R1]
CMP             R3, #0x1A ; switch 27 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_29B10 ; jumptable 00029B10 default case
jpt_29B10 DCD loc_29B84 ; jump table for switch statement
DCD loc_29BA8
DCD loc_29B90
DCD loc_29B90
DCD loc_29B90
DCD loc_29BDC
DCD loc_29BDC
DCD loc_29BDC
DCD loc_29BD0
DCD loc_29BDC
DCD loc_29BDC
DCD loc_29BF8
DCD loc_29B90
DCD loc_29BD0
DCD loc_29C04
DCD loc_29C1C
DCD loc_29C34
DCD loc_29C34
DCD loc_29C34
DCD loc_29C34
DCD loc_29C34
DCD loc_29C34
DCD loc_29C4C
DCD loc_29C4C
DCD loc_29C64
DCD loc_29C64
DCD loc_29BE8

loc_29B84               ; jumptable 00029B10 case 0
LDR             R0, [R4,#0x10]
BL              sub_29AE4

loc_29B8C
STR             R0, [R5,#0x10]

loc_29B90               ; jumptable 00029B10 cases 2-4,12
LDR             R0, [R4,#0xC]
BL              sub_29AE4
STR             R0, [R5,#0xC]
LDR             R0, [R4,#8]
BL              sub_29AE4
B               loc_29BB0

loc_29BA8               ; jumptable 00029B10 case 1
LDR             R0, [R4,#8]
BL              sub_29C7C

loc_29BB0
STR             R0, [R5,#8]
LDR             R3, [R4,#4]
STR             R3, [R5,#4]

def_29B10               ; jumptable 00029B10 default case
LDR             R3, [R4]
MOV             R4, R5
STR             R3, [R5]

loc_29BC8
MOV             R0, R4
POP             {R4-R6,PC}

loc_29BD0               ; jumptable 00029B10 cases 8,13
LDR             R0, [R4,#0xC]
BL              sub_29AE4
STR             R0, [R5,#0xC]

loc_29BDC               ; jumptable 00029B10 cases 5-7,9,10
LDR             R0, [R4,#8]
BL              sub_29AE4

loc_29BE4
STR             R0, [R5,#8]

loc_29BE8               ; jumptable 00029B10 case 26
LDR             R0, [R4,#4]
BL              sub_29AE4
STR             R0, [R5,#4]
B               def_29B10 ; jumptable 00029B10 default case

loc_29BF8               ; jumptable 00029B10 case 11
LDR             R0, [R4,#0x10]
BL              sub_29AB0
B               loc_29B8C

loc_29C04               ; jumptable 00029B10 case 14
LDR             R0, [R4,#0xC]
BL              sub_29AE4
STR             R0, [R5,#0xC]
LDR             R0, [R4,#8]
BL              sub_29AB0
B               loc_29BB0

loc_29C1C               ; jumptable 00029B10 case 15
LDR             R0, [R4,#0xC]
BL              sub_29C7C
STR             R0, [R5,#0xC]
LDR             R0, [R4,#8]
BL              sub_29AB0
B               loc_29BE4

loc_29C34               ; jumptable 00029B10 cases 16-21
LDR             R0, [R4,#0x10]
BL              sub_29AE4
STR             R0, [R5,#0x10]

loc_29C40
LDR             R3, [R4,#8]
STR             R3, [R5,#8]
B               loc_29BE8 ; jumptable 00029B10 case 26

loc_29C4C               ; jumptable 00029B10 cases 22,23
LDR             R0, [R4,#0x10]
BL              sub_29AE4
LDR             R3, [R4,#0xC]
STR             R0, [R5,#0x10]
STR             R3, [R5,#0xC]
B               loc_29C40

loc_29C64               ; jumptable 00029B10 cases 24,25
LDR             R0, [R4,#0xC]
BL              sub_29AE4
STR             R0, [R5,#0xC]
B               loc_29C40
; End of function sub_29AE4

off_29C74 DCD dword_7D6C8
off_29C78 DCD byte_681B5



; int __fastcall sub_29C7C(_DWORD *, int, int)
sub_29C7C

var_8= -8

PUSH            {R0-R2,R4-R7,LR}
MOV             R4, R0
LDR             R7, =dword_7D6C8
ADD             R5, SP, #0xC+var_8

loc_29C8C
CMP             R4, #0
BNE             loc_29CA4
STR             R4, [R5]
LDR             R0, [SP,#0xC+var_8]
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_29CA4
LDR             R6, [R7]
LDR             R0, [R4,#4]
STR             R6, [R5]
ADD             R3, R6, #8
STR             R3, [R7]
BL              sub_29AE4
LDR             R4, [R4]
STR             R0, [R6,#4]
LDR             R5, [R5]
B               loc_29C8C
; End of function sub_29C7C

off_29CCC DCD dword_7D6C8



; int *__fastcall sub_29CD0(const char *)
sub_29CD0
PUSH            {R4-R6,LR}
MOV             R6, R0
LDRB            R3, [R0]
MOV             R2, R6
MOV             R0, R3,LSL#4

loc_29CE4
CMP             R3, #0
BNE             loc_29D14
MOV             R1, #0x27 ; '''
BLX             sub_15EFC
LDR             R3, =dword_7D644
LDR             R4, [R3]
ADD             R4, R4, R1,LSL#2

loc_29D00
LDR             R5, [R4]
CMP             R5, #0
BNE             loc_29D20

loc_29D0C
MOV             R0, R4
POP             {R4-R6,PC}

loc_29D14
ADD             R0, R0, R3
LDRB            R3, [R2,#1]!
B               loc_29CE4

loc_29D20               ; s2
LDR             R1, [R5,#4]
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_29D0C
MOV             R4, R5
B               loc_29D00
; End of function sub_29CD0

off_29D3C DCD dword_7D644



; int __fastcall compar(const char *, const void *)
compar
LDR             R1, [R1]
ADD             R1, R1, #1 ; s2
B               strcmp
; End of function compar




; char *__fastcall sub_29D4C(const char *, char)
sub_29D4C
MOV             R3, R0
PUSH            {R4-R8,LR}
MOV             R5, R0
LDRB            R0, [R3],#-1
MOV             R7, R1
MOV             R0, R0,LSL#4

loc_29D64
LDRB            R2, [R3,#1]!
CMP             R2, #0
BNE             loc_29DE4
MOV             R1, #0x1F
UBFX            R0, R0, #0, #0xF
BLX             sub_15EFC
LDR             R3, =dword_7D6A4
LDR             R3, [R3]
LDR             R4, [R3,R1,LSL#2]
ADD             R6, R3, R1,LSL#2

loc_29D8C
CMP             R4, #0
BNE             loc_29DEC

loc_29D94
CMP             R4, #0
ANDEQ           R7, R7, #1
MOVNE           R7, #0
CMP             R7, #0
BEQ             loc_29DD4
MOV             R0, R5  ; s
BL              strlen
ADD             R0, R0, #0x10
BL              sub_174DC
MOV             R3, #0xFFFFFFFF
STR             R0, [R6]
MOV             R4, R0
STR             R3, [R0,#8]
MOV             R1, R5  ; src
ADD             R0, R0, #0xD ; dest
BL              strcpy

loc_29DD4
LDR             R3, =dword_7D700
MOV             R0, R4
STR             R6, [R3]
POP             {R4-R8,PC}

loc_29DE4
ADD             R0, R0, R2
B               loc_29D64

loc_29DEC               ; s2
MOV             R1, R5
ADD             R0, R4, #0xD ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_29D94
MOV             R6, R4
LDR             R4, [R4]
B               loc_29D8C
; End of function sub_29D4C

off_29E0C DCD dword_7D6A4
off_29E10 DCD dword_7D700



; int __fastcall sub_29E14(const char *, const char **)
sub_29E14
LDR             R1, [R1] ; s2
B               strcmp
; End of function sub_29E14




; _DWORD *__fastcall sub_29E1C(_DWORD *result, int, int)
sub_29E1C

var_8= -8

CMP             R1, #1
PUSH            {R0-R2,R4-R7,LR}
STR             R0, [SP,#0xC+var_8]
BLE             loc_29EA0
MOV             R6, R1,ASR#1
MOV             R7, R1
MOV             R5, R0
MOV             R3, R6
MOV             R2, #0

loc_29E40
SUBS            R3, R3, #1
BCS             loc_29EA8
MOV             R3, #0
MOV             R1, R6
STR             R3, [R2]
BL              sub_29E1C
SUB             R1, R7, R6
MOV             R4, R0
MOV             R0, R5
ADD             R6, SP, #0xC+var_8
BL              sub_29E1C
MOV             R5, R0

loc_29E70               ; s2
LDR             R1, [R4,#4]
LDR             R0, [R5,#4] ; s1
BL              strcmp
CMP             R0, #0
BGE             loc_29EC4
STR             R5, [R6]
MOV             R6, R5
LDR             R2, [R5]
CMP             R2, #0
BNE             loc_29EB4
STR             R4, [R5]

loc_29E9C
LDR             R0, [SP,#0xC+var_8]

loc_29EA0
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_29EA8
MOV             R2, R5
LDR             R5, [R5]
B               loc_29E40

loc_29EB4
MOV             R3, R4
MOV             R5, R2

loc_29EBC
MOV             R4, R3
B               loc_29E70

loc_29EC4
STR             R4, [R6]
MOV             R6, R4
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_29EBC
STR             R5, [R4]
B               loc_29E9C
; End of function sub_29E1C



; Attributes: noreturn

; void __fastcall __noreturn sub_29EE0(int)
sub_29EE0
LDR             R3, =dword_7DBB0
PUSH            {R4,LR}
LDR             R3, [R3]
LDR             R2, [R3,#0x28]
ADD             R2, R2, #1
STR             R2, [R3,#0x28]
MOV             R1, #1  ; val
STR             R0, [R3,#0x38]
LDR             R0, [R3,#0x24] ; env
BL              longjmp
; End of function sub_29EE0

off_29F08 DCD dword_7DBB0



; void __fastcall sub_29F0C(int)
sub_29F0C
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, #0

loc_29F18
ADD             R0, R5, #1
LDR             R3, [R4,R5,LSL#2]
CMP             R3, #0
BNE             loc_29F7C
MOV             R0, R0,LSL#2
SUB             R4, R4, #4
BL              sub_1748C
MOV             R7, R0
MOV             R6, R0

loc_29F3C
LDR             R0, [R4,#4]!
CMP             R0, #0
BNE             loc_29F84
LDR             R3, =dword_7DBB4
STR             R0, [R6]
LDR             R4, [R3]
MOV             R0, R4
BL              sub_299BC
MOV             R3, #1
STR             R5, [R4]
STRB            R3, [R4,#0xC]
STR             R3, [R4,#4]
MOV             R3, #0xFFFFFFFF
STR             R7, [R4,#0x10]
STR             R3, [R4,#8]
POP             {R4-R8,PC}

loc_29F7C
MOV             R5, R0
B               loc_29F18

loc_29F84
BL              sub_174F8
STR             R0, [R6],#4
B               loc_29F3C
; End of function sub_29F0C

off_29F90 DCD dword_7DBB4



; int __fastcall sub_29F94(int sig)
sub_29F94

oact= -0x8C

LDR             R3, =dword_7DBB0
PUSH            {R4-R8,LR}
MOV             R5, R0
SUB             SP, SP, #0x90
LDR             R6, [R3]
ADD             R3, R0, #0x34 ; '4'
LDR             R3, [R6,R3,LSL#2]
CMP             R3, #0
MOVEQ           R4, #1
BEQ             loc_29FCC
LDRB            R3, [R3]
CMP             R3, #0
MOVNE           R4, #2
MOVEQ           R4, #3

loc_29FCC
LDR             R3, [R6,#0xC]
CMP             R3, #0
CMPEQ           R4, #1
BNE             loc_2A020
CMP             R5, #0xF
BEQ             loc_2A054
BGT             loc_2A000
CMP             R5, #2
BEQ             loc_2A028
CMP             R5, #3
BEQ             loc_2A100

loc_29FF8
MOV             R4, #1
B               loc_2A020

loc_2A000
CMP             R5, #0x14
BEQ             loc_2A010
CMP             R5, #0x16
BNE             loc_29FF8

loc_2A010
LDRB            R3, [R6,#0x41]
CMP             R3, #0
MOVEQ           R4, #1
MOVNE           R4, #3

loc_2A020
CMP             R5, #0x11
B               loc_2A04C

loc_2A028
LDRB            R3, [R6,#0x40]
CMP             R3, #0
BNE             loc_2A100
LDR             R3, [R6,#0x14]
CMP             R3, #0
BNE             loc_2A100
LDRB            R3, [R6,#0x43]
CMP             R3, #0
MOVNE           R4, #1

loc_2A04C
MOVEQ           R4, #2
B               loc_2A064

loc_2A054
LDRB            R3, [R6,#0x40]
CMP             R3, #0
MOVEQ           R4, #1
MOVNE           R4, #3

loc_2A064
SUB             R8, R5, #1
ADD             R8, R6, R8
LDRB            R7, [R8,#0x4C]
CMP             R7, #0
BNE             loc_2A0BC
ADD             R2, SP, #0x90+oact ; oact
MOV             R1, R7  ; act
MOV             R0, R5  ; sig
BL              sigaction
CMP             R0, #0
BNE             loc_2A130
LDR             R3, [SP,#0x90+oact]
CMP             R3, #1
BNE             loc_2A11C
LDRB            R3, [R6,#0x41]
CMP             R3, #0
MOVEQ           R7, #4
BEQ             loc_2A0BC
SUB             R3, R5, #0x14
CMP             R3, #3
MOVCC           R7, #3
MOVCS           R7, #4

loc_2A0BC
CMP             R7, R4
CMPNE           R7, #4
BEQ             loc_2A130

loc_2A0C8
CMP             R4, #2
MOV             R3, #0
STRB            R4, [R8,#0x4C]
STR             R3, [SP,#0x90+oact]
BEQ             loc_2A108
CMP             R4, #3
BEQ             loc_2A114

loc_2A0E4               ; set
ADD             R0, SP, #0x90+oact.sa_mask
STR             R3, [SP,#0x90+oact.sa_flags]
BL              sigfillset
ADD             R1, SP, #0x90+oact
MOV             R0, R5
BL              sub_18150
B               loc_2A130

loc_2A100
MOV             R4, R5
B               loc_2A064

loc_2A108
LDR             R2, =sub_2A1D8

loc_2A10C
STR             R2, [SP,#0x90+oact]
B               loc_2A0E4

loc_2A114
MOV             R2, #1
B               loc_2A10C

loc_2A11C
CMP             R3, #0
BNE             loc_2A0C8
CMP             R4, #1
STRBEQ          R4, [R8,#0x4C]
BNE             loc_2A0BC

loc_2A130
ADD             SP, SP, #0x90
POP             {R4-R8,PC}
; End of function sub_29F94

off_2A138 DCD dword_7DBB0
off_2A13C DCD sub_2A1D8



; __sighandler_t __fastcall sub_2A140(__sighandler_t result)
sub_2A140
LDR             R2, =dword_7DBB0
SUB             R3, R0, #1
PUSH            {R4,LR}
LDR             R4, [R2]
ADD             R4, R4, R3
LDRB            R3, [R4,#0x4C]
SUB             R3, R3, #3
CMP             R3, #1
BLS             loc_2A16C
MOV             R1, #1  ; handler
BL              signal

loc_2A16C
MOV             R3, #4
STRB            R3, [R4,#0x4C]
POP             {R4,PC}
; End of function sub_2A140

off_2A178 DCD dword_7DBB0


; Attributes: noreturn

; void __noreturn sub_2A17C()
sub_2A17C
LDR             R3, =dword_7DBB0
MOV             R0, #1
PUSH            {R4,LR}
LDR             R4, [R3]
MOV             R3, #0
STR             R3, [R4,#0x2C]
BL              sub_18158
LDR             R3, [R4,#0xC]
CMP             R3, #0
BNE             loc_2A1B0
LDRB            R3, [R4,#0x40]
CMP             R3, #0
BNE             loc_2A1C4

loc_2A1B0               ; handler
MOV             R1, #0
MOV             R0, #2  ; sig
BL              signal
MOV             R0, #2  ; sig
BL              raise

loc_2A1C4
MOV             R3, #0xFFFFFF82
MOV             R0, #0
STRB            R3, [R4]
BL              sub_29EE0
; End of function sub_2A17C

off_2A1D4 DCD dword_7DBB0



; int __fastcall sub_2A1D8(int result)
sub_2A1D8
LDR             R3, =dword_7DBB0
CMP             R0, #0x11
LDR             R3, [R3]
BEQ             loc_2A224

loc_2A1E8
ADD             R1, R3, R0
MOV             R2, #1
CMP             R0, #2
STRB            R2, [R1,#0x8B]
STR             R0, [R3,#0x34]
BXNE            LR
LDR             R1, [R3,#0xD8]
CMP             R1, #0
BXNE            LR
LDR             R1, [R3,#0x28]
CMP             R1, #0
BNE             loc_2A23C
PUSH            {R4,LR}
STR             R1, [R3,#0x34]
BL              sub_2A17C

loc_2A224
MOV             R2, #1
STR             R2, [R3,#0x30]
LDR             R2, [R3,#0x114]
CMP             R2, #0
BXEQ            LR
B               loc_2A1E8

loc_2A23C
STR             R2, [R3,#0x2C]
BX              LR
; End of function sub_2A1D8

off_2A244 DCD dword_7DBB0



; void sub_2A248()
sub_2A248
LDR             R3, =dword_7DBB0
MOV             R2, #0
LDR             R3, [R3]
STR             R2, [R3,#0x28]
LDR             R3, [R3,#0x2C]
CMP             R3, R2
BXEQ            LR
PUSH            {R4,LR}
BL              sub_2A17C
; End of function sub_2A248

off_2A26C DCD dword_7DBB0
; START OF FUNCTION CHUNK FOR sub_2A2A4
;   ADDITIONAL PARENT FUNCTION sub_2A2CC
;   ADDITIONAL PARENT FUNCTION sub_2A514
;   ADDITIONAL PARENT FUNCTION sub_2A5FC
;   ADDITIONAL PARENT FUNCTION sub_2A67C
;   ADDITIONAL PARENT FUNCTION sub_2A6D4
;   ADDITIONAL PARENT FUNCTION sub_2A794
;   ADDITIONAL PARENT FUNCTION sub_2A9BC
;   ADDITIONAL PARENT FUNCTION sub_2AA40
;   ADDITIONAL PARENT FUNCTION sub_2AAFC
;   ADDITIONAL PARENT FUNCTION sub_2ADC0
;   ADDITIONAL PARENT FUNCTION sub_2B138
;   ADDITIONAL PARENT FUNCTION sub_2BBE4
;   ADDITIONAL PARENT FUNCTION sub_2D148
;   ADDITIONAL PARENT FUNCTION sub_2F134
;   ADDITIONAL PARENT FUNCTION sub_34C98

loc_2A270
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R2,#0x28]
BXNE            LR
LDR             R3, [R2,#0x2C]
CMP             R3, #0
BXEQ            LR
PUSH            {R4,LR}
BL              sub_2A17C
; END OF FUNCTION CHUNK FOR sub_2A2A4
off_2A2A0 DCD dword_7DBB0



; int sub_2A2A4()
sub_2A2A4

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =dword_7DBB0
PUSH            {R4,LR}
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
BL              sub_177D8
POP             {R4,LR}
B               loc_2A270
; End of function sub_2A2A4

off_2A2C8 DCD dword_7DBB0



; _DWORD *__fastcall sub_2A2CC(_DWORD *result)
sub_2A2CC

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =dword_7DBB0
PUSH            {R4-R8,LR}
MOV             R6, R0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R3, =dword_7D6A4
LDR             R8, =dword_7D4CC
LDR             R4, [R3]
ADD             R7, R4, #0x7C ; '|'

loc_2A2F8
CMP             R4, R7
BNE             loc_2A354
POP             {R4-R8,LR}
B               loc_2A270

loc_2A308
LDR             R3, [R0,#8]
CMP             R3, #0
LDREQ           R3, [R0,#4]
BEQ             loc_2A324
CMP             R3, #2
BNE             loc_2A34C
LDR             R3, [R8]

loc_2A324
CMP             R3, R6
BLT             loc_2A34C
LDR             R3, [R0]
STR             R3, [R5]
BL              free

loc_2A338               ; ptr
LDR             R0, [R5]
CMP             R0, #0
BNE             loc_2A308
ADD             R4, R4, #4
B               loc_2A2F8

loc_2A34C
MOV             R5, R0
B               loc_2A338

loc_2A354
MOV             R5, R4
B               loc_2A338
; End of function sub_2A2CC

off_2A35C DCD dword_7DBB0
off_2A360 DCD dword_7D6A4
off_2A364 DCD dword_7D4CC



; _DWORD *__fastcall sub_2A368(unsigned __int8 *)
sub_2A368
LDR             R3, =dword_7DBB4
PUSH            {R4-R10,LR}
MOV             R7, R0
LDR             R9, =(aIsASshellBuilt+0xE) ; "builtin"
MOV             R4, #0xFFFFFFFF
MOV             R5, #0
MOVW            R6, #0x270F
LDR             R3, [R3]
LDR             R2, [R3,#0xD0]
ADD             R2, R2, #5

loc_2A390
MOV             R8, R7
LDRB            R1, [R2]
LDRB            R3, [R7],#1
CMP             R1, R3
MOVEQ           R8, R2
BEQ             loc_2A3D0
CMP             R1, #0
BNE             loc_2A3C0
CMP             R3, #0x3A ; ':'
BEQ             loc_2A3CC

loc_2A3B8
MOV             R6, R5
B               loc_2A3D0

loc_2A3C0
CMP             R3, #0
CMPEQ           R1, #0x3A ; ':'
BNE             loc_2A3B8

loc_2A3CC
ADD             R6, R5, #1

loc_2A3D0
CMP             R3, #0
BEQ             loc_2A410
CMP             R3, #0x25 ; '%'
BNE             loc_2A404
CMN             R4, #1
BNE             loc_2A3FC
MOV             R1, R9
MOV             R0, R7
BL              sub_295E8
CMP             R0, #0
MOVNE           R4, R5

loc_2A3FC
ADD             R2, R8, #1
B               loc_2A390

loc_2A404
CMP             R3, #0x3A ; ':'
ADDEQ           R5, R5, #1
B               loc_2A3FC

loc_2A410
LDR             R5, =dword_7D4CC
ADDS            R3, R4, #1
MOVNE           R3, #1
LDR             R2, [R5]
ANDS            R3, R3, R2,LSR#31
STRNE           R4, [R5]
LDR             R3, [R5]
CMP             R3, #0
CMNGE           R4, #1
MOVNE           R0, R6
MOVEQ           R0, #0
BL              sub_2A2CC
STR             R4, [R5]
POP             {R4-R10,PC}
; End of function sub_2A368

off_2A448 DCD dword_7DBB4
off_2A44C DCD aIsASshellBuilt+0xE ; "builtin"
off_2A450 DCD dword_7D4CC



; _DWORD *sub_2A454()
sub_2A454
LDR             R3, =dword_7D6DC
LDR             R0, [R3] ; ptr
CMP             R0, #0
BEQ             loc_2A4A8
PUSH            {R4-R6,LR}
MOV             R4, R3
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]

loc_2A480
LDR             R5, [R0]
BL              free
SUBS            R0, R5, #0
BNE             loc_2A480
STR             R0, [R4]
BL              loc_2A270
LDR             R3, =dword_7D6EC
MOV             R2, #0
STR             R2, [R3]
POP             {R4-R6,PC}

loc_2A4A8
LDR             R3, =dword_7D6EC
MOV             R2, #0
STR             R2, [R3]
BX              LR
; End of function sub_2A454

off_2A4B8 DCD dword_7D6DC
off_2A4BC DCD dword_7DBB0
off_2A4C0 DCD dword_7D6EC



; int __fastcall sub_2A4C4(const char *)
sub_2A4C4
PUSH            {R4,LR}
BL              sub_29CD0
LDR             R3, [R0]
CMP             R3, #0
BEQ             loc_2A508
LDR             R3, =dword_7DBB0
MOV             R4, R0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R0, [R0]
BL              sub_29978
STR             R0, [R4]
BL              loc_2A270
MOV             R0, #0
POP             {R4,PC}

loc_2A508
MOV             R0, #1
POP             {R4,PC}
; End of function sub_2A4C4

off_2A510 DCD dword_7DBB0



; void sub_2A514()
sub_2A514

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

PUSH            {R4-R6,LR}
LDR             R5, =off_7D4D0
LDR             R3, [R5] ; unk_7D64C
LDR             R4, [R3,#0x1C]
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R2, [R4,#0xC]
CMP             R2, #0
BEQ             loc_2A59C
LDR             R3, [R5] ; unk_7D64C
LDR             R0, [R4,#0x10] ; ptr
LDR             R3, [R3,#0x14]
LDRB            R3, [R3,#-1]
CMP             R3, #9
CMPNE           R3, #0x20 ; ' '
LDREQ           R1, =dword_7D698
LDREQ           R3, [R1]
ORREQ           R3, R3, #1
STREQ           R3, [R1]
LDR             R3, [R2,#8]
CMP             R0, R3
BEQ             loc_2A57C
BL              free

loc_2A57C
LDR             R3, [R4,#0xC]
LDR             R2, [R3,#0xC]
TST             R2, #2
BIC             R1, R2, #1
STR             R1, [R3,#0xC]
BEQ             loc_2A59C
LDR             R0, [R3,#4]
BL              sub_2A4C4

loc_2A59C
LDR             R3, [R5] ; unk_7D64C
MOV             R1, R4
LDR             R2, [R4,#4]
ADD             R3, R3, #0x20 ; ' '
STR             R2, [R3,#-0xC]
LDR             R2, [R4,#8]
STR             R2, [R3,#-0x14]
LDR             R2, [R4,#0x1C]
STR             R2, [R3,#0x28]
LDR             R2, [R1,#0x14]!
STR             R2, [R3,#0x20]
LDR             R2, [R1,#4]
STR             R2, [R3,#0x24]
LDR             R2, [R4]
STR             R2, [R3,#-4]
CMP             R4, R3
BEQ             loc_2A5E8
MOV             R0, R4  ; ptr
BL              free

loc_2A5E8
POP             {R4-R6,LR}
B               loc_2A270
; End of function sub_2A514

off_2A5F0 DCD off_7D4D0
off_2A5F4 DCD dword_7DBB0
off_2A5F8 DCD dword_7D698



; void sub_2A5FC()
sub_2A5FC

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =off_7D4D0
PUSH            {R4-R6,LR}
LDR             R2, =unk_7D64C
LDR             R4, [R3] ; unk_7D64C
CMP             R4, R2
POPEQ           {R4-R6,PC}
MOV             R5, R3
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R0, [R4,#8] ; fd
CMP             R0, #0
BLT             loc_2A63C
BL              close

loc_2A63C               ; ptr
LDR             R0, [R4,#0x18]
BL              free

loc_2A644
LDR             R3, [R4,#0x1C]
CMP             R3, #0
BNE             loc_2A668
LDR             R3, [R4]
MOV             R0, R4  ; ptr
STR             R3, [R5] ; unk_7D64C
BL              free
POP             {R4-R6,LR}
B               loc_2A270

loc_2A668
BL              sub_2A514
B               loc_2A644
; End of function sub_2A5FC

off_2A670 DCD off_7D4D0
off_2A674 DCD unk_7D64C
off_2A678 DCD dword_7DBB0



; size_t __fastcall sub_2A67C(const char *)
sub_2A67C

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =dword_7DBB0
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
BL              sub_298B8
LDR             R3, =off_7D4D0
MOV             R0, R5  ; s
LDR             R4, [R3] ; unk_7D64C
STR             R5, [R4,#0x14]
BL              strlen
MOV             R3, #0
STR             R0, [R4,#0xC]
STR             R3, [R4,#0x18]
MOV             R3, #1
STR             R3, [R4,#4]
POP             {R4-R6,LR}
B               loc_2A270
; End of function sub_2A67C

off_2A6CC DCD dword_7DBB0
off_2A6D0 DCD off_7D4D0



; _DWORD *__fastcall sub_2A6D4(const char *, int)
sub_2A6D4

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

PUSH            {R4-R8,LR}
MOV             R6, R0
MOV             R5, R1
BL              strlen
LDR             R3, =dword_7DBB0
MOV             R7, R0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R4, =off_7D4D0
LDR             R0, [R4] ; unk_7D64C
LDR             R3, [R0,#0x1C]
CMP             R3, #0
ADDEQ           R0, R0, #0x20 ; ' '
BEQ             loc_2A728
MOV             R0, #0x20 ; ' '
BL              sub_174DC
LDR             R3, [R4] ; unk_7D64C
LDR             R3, [R3,#0x1C]
STR             R3, [R0]

loc_2A728
LDR             R3, [R4] ; unk_7D64C
CMP             R5, #0
LDR             R2, [R3,#0x14]
MOV             R1, R3
STR             R0, [R3,#0x1C]
STR             R2, [R0,#4]
LDR             R2, [R3,#0xC]
STR             R2, [R0,#8]
LDR             R2, [R3,#0x48]
STR             R2, [R0,#0x1C]
LDR             R2, [R1,#0x40]!
STR             R2, [R0,#0x14]
LDR             R2, [R1,#4]
STR             R5, [R0,#0xC]
STR             R2, [R0,#0x18]
LDRNE           R2, [R5,#0xC]
ORRNE           R2, R2, #1
STRNE           R2, [R5,#0xC]
MOV             R2, #0
STRNE           R6, [R0,#0x10]
STR             R6, [R3,#0x14]
STR             R7, [R3,#0xC]
STR             R2, [R3,#0x48]
POP             {R4-R8,LR}
B               loc_2A270
; End of function sub_2A6D4

off_2A78C DCD dword_7DBB0
off_2A790 DCD off_7D4D0



; void sub_2A794()
sub_2A794

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =dword_7DBB0
PUSH            {R4,LR}
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R3, =dword_7D700
LDR             R3, [R3]
LDR             R4, [R3]
LDR             R2, [R4]
STR             R2, [R3]
LDR             R3, [R4,#8]
CMP             R3, #1
BNE             loc_2A7D4
LDR             R0, [R4,#4]
BL              sub_299F4

loc_2A7D4               ; ptr
MOV             R0, R4
BL              free
POP             {R4,LR}
B               loc_2A270
; End of function sub_2A794

off_2A7E4 DCD dword_7DBB0
off_2A7E8 DCD dword_7D700



; int sub_2A7EC()
sub_2A7EC
LDR             R3, =dword_7DBB0
PUSH            {R4,LR}
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
MOV             R0, #8
BL              sub_174DC
LDR             R3, =dword_7D70C
MOV             R4, R0
LDR             R2, [R3]
STR             R0, [R3]
STR             R2, [R0]
BL              loc_2A270
LDR             R0, [R4]
POP             {R4,PC}
; End of function sub_2A7EC

off_2A82C DCD dword_7DBB0
off_2A830 DCD dword_7D70C



; int __fastcall sub_2A834(int result, int, int)
sub_2A834
PUSH            {R4-R8,LR}
MOV             R8, R0
LDR             R5, =dword_7D6EC
MOV             R7, R1
MOV             R6, R2
LDR             R3, [R5]
CMP             R3, #0
LDREQ           R4, =dword_7D6DC
BEQ             loc_2A884
LDR             R3, =dword_7DBB0
LDR             R0, [R3]
LDR             R3, [R0,#0x28]
ADD             R3, R3, #1
STR             R3, [R0,#0x28]
MOV             R0, #0x10
BL              sub_174DC
LDR             R3, [R5]
MOV             R4, R0
STR             R0, [R3]
BL              loc_2A270

loc_2A884
STR             R4, [R5]
STR             R8, [R4,#4]
STR             R7, [R4,#8]
STR             R6, [R4,#0xC]
POP             {R4-R8,PC}
; End of function sub_2A834

off_2A898 DCD dword_7D6EC
off_2A89C DCD dword_7D6DC
off_2A8A0 DCD dword_7DBB0



; int __fastcall sub_2A8A4(int result)
sub_2A8A4
PUSH            {R4-R8,LR}
LDR             R4, =dword_7D6EC
LDR             R3, [R4]
CMP             R3, #0
POPEQ           {R4-R8,PC}
LDR             R3, =dword_7D6DC
MOV             R5, R0
LDR             R2, [R3,#(dword_7D6E4 - 0x7D6DC)]
MOV             R6, R3
CMP             R2, R0
LDRGT           R7, =dword_7DBB0
BGT             loc_2A944
MOV             R2, #0
STR             R3, [R4]

loc_2A8DC
LDR             R1, [R3]
CMP             R1, #0
BEQ             loc_2A9A0
LDR             R0, [R1,#4]
CMP             R0, R5
BLT             loc_2A968
LDR             R7, =dword_7DBB0
CMP             R2, #0
STRNE           R3, [R4]

loc_2A900
LDR             R3, [R4]
LDR             R2, [R3]
CMP             R2, #0
BNE             loc_2A974

loc_2A910
LDR             R2, [R3,#8]
CMP             R2, R5
STRGT           R5, [R3,#8]
POP             {R4-R8,PC}

loc_2A920
LDR             R2, [R7]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R0, [R6] ; ptr
LDR             R8, [R0]
BL              free
STR             R8, [R6]
BL              loc_2A270

loc_2A944
LDR             R3, [R6]
CMP             R3, #0
BNE             loc_2A920
LDR             R2, [R6,#(dword_7D6E0 - 0x7D6DC)]
CMP             R2, R5
STRGT           R3, [R4]
STRLE           R6, [R4]
STRLE           R5, [R6,#(dword_7D6E4 - 0x7D6DC)]
POP             {R4-R8,PC}

loc_2A968
MOV             R2, #1
MOV             R3, R1
B               loc_2A8DC

loc_2A974
LDR             R2, [R7]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R6, [R4]
LDR             R0, [R6] ; ptr
LDR             R8, [R0]
BL              free
STR             R8, [R6]
BL              loc_2A270
B               loc_2A900

loc_2A9A0
CMP             R2, #0
STRNE           R3, [R4]
LDR             R3, [R4]
B               loc_2A910
; End of function sub_2A8A4

off_2A9B0 DCD dword_7D6EC
off_2A9B4 DCD dword_7D6DC
off_2A9B8 DCD dword_7DBB0



; int __fastcall sub_2A9BC(int)
sub_2A9BC

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =dword_7DBB0
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R1, [R3]
LDR             R2, [R1,#0x28]
ADD             R2, R2, #1
STR             R2, [R1,#0x28]
LDR             R6, [R0,#0x14]
MOV             R5, R3
LDR             R7, [R0,#0xC]

loc_2A9E4
SUBS            R6, R6, #1
BPL             loc_2AA1C
LDR             R0, [R4,#0xC] ; ptr
CMP             R0, R4
BEQ             loc_2A9FC
BL              free

loc_2A9FC
LDRB            R3, [R4,#0x19]
MOV             R0, R4
MOV             R1, #2
BFC             R3, #3, #1
STRB            R3, [R4,#0x19]
BL              sub_29708
POP             {R4-R8,LR}
B               loc_2A270

loc_2AA1C
LDR             R3, [R5]
LDR             R0, [R7,#8] ; ptr
ADD             R3, R3, #0x3C ; '<'
CMP             R0, R3
BEQ             loc_2AA34
BL              free

loc_2AA34
ADD             R7, R7, #0xC
B               loc_2A9E4
; End of function sub_2A9BC

off_2AA3C DCD dword_7DBB0



; _DWORD *__fastcall sub_2AA40(_DWORD *result)
sub_2AA40

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, [R0]
CMP             R3, #0
BXEQ            LR
LDR             R3, =dword_7DBB0
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R3, =dword_7DBB8
LDR             R5, [R3]

loc_2AA70               ; ptr
LDR             R0, [R5]
LDR             R3, [R4]
CMP             R0, R3
BNE             loc_2AAA0
LDR             R3, [R4,#4]
LDR             R2, [R4,#8]
STR             R3, [R5,#4]
ADD             R3, R3, R2
STR             R2, [R5,#0xC]
STR             R3, [R5,#8]
POP             {R4-R6,LR}
B               loc_2A270

loc_2AAA0
LDR             R3, [R0]
STR             R3, [R5]
BL              free
B               loc_2AA70
; End of function sub_2AA40

off_2AAB0 DCD dword_7DBB0
off_2AAB4 DCD dword_7DBB8



; int __fastcall sub_2AAB8(int fd, int)
sub_2AAB8
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, =dword_7DB94
ADD             R6, R1, #1

loc_2AAC8
MOV             R2, R6
MOVW            R1, #0x406 ; cmd
MOV             R0, R5  ; fd
BL              fcntl
CMP             R0, #0
POPGE           {R4-R6,PC}
LDR             R3, [R4]
LDR             R3, [R3]
CMP             R3, #0x10
CMPNE           R3, #4
POPNE           {R4-R6,PC}
B               loc_2AAC8
; End of function sub_2AAB8

off_2AAF8 DCD dword_7DB94



; int __fastcall sub_2AAFC(FILE *stream)
sub_2AAFC

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =dword_7DBB0
PUSH            {R4,LR}
MOV             R4, R0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
MOV             R1, R0  ; stream
MOV             R0, #0xA ; c
BL              putc_unlocked
MOV             R0, R4  ; stream
BL              fflush
POP             {R4,LR}
B               loc_2A270
; End of function sub_2AAFC

off_2AB34 DCD dword_7DBB0



; int __fastcall sub_2AB38(const char *, void *)
sub_2AB38
LDR             R3, =dword_7DBB0
PUSH            {R4-R8,LR}
MOV             R7, R0
LDR             R4, =stderr
MOV             R8, R1
LDR             R6, [R3]
LDR             R1, =(aS_3+1) ; format
LDR             R0, [R4] ; stream
LDR             R2, [R6,#0x20]
BL              fprintf
LDR             R3, =dword_7D6A8
LDR             R5, [R3]
CMP             R5, #0
BEQ             loc_2ABC8
MOV             R1, R5  ; s2
LDR             R0, [R6,#0x20] ; s1
BL              strcmp
CMP             R0, #0
LDR             R3, [R4]
BEQ             loc_2AB98
MOV             R2, R5
LDR             R1, =(aS_3+1) ; format
MOV             R0, R3  ; stream
BL              fprintf

loc_2AB98
LDRB            R3, [R6,#0x40]
CMP             R3, #0
BEQ             loc_2ABB8
LDR             R3, =off_7D4D0
LDR             R3, [R3] ; unk_7D64C
LDR             R3, [R3,#8]
CMP             R3, #0
BLE             loc_2ABC8

loc_2ABB8
LDR             R2, [R6,#0x10]
LDR             R1, =aLineD ; "line %d: "
LDR             R0, [R4] ; stream
BL              fprintf

loc_2ABC8               ; arg
MOV             R2, R8
MOV             R1, R7  ; format
LDR             R0, [R4] ; s
BL              vfprintf
LDR             R0, [R4] ; stream
POP             {R4-R8,LR}
B               sub_2AAFC
; End of function sub_2AB38

off_2ABE4 DCD dword_7DBB0
off_2ABE8 DCD stderr
off_2ABEC DCD aS_3+1    ; "%s: "
off_2ABF0 DCD dword_7D6A8
off_2ABF4 DCD off_7D4D0
off_2ABF8 DCD aLineD    ; "line %d: "


; Attributes: noreturn

; void __noreturn sub_2ABFC(const char *, ...)
sub_2ABFC

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
LDR             R3, =dword_7DBB0
PUSH            {R0-R2,LR}
MOV             R2, #2
LDR             R3, [R3]
ADD             R1, SP, #0xC+varg_r1
LDR             R0, [SP,#0xC+varg_r0]
STRB            R2, [R3]
STR             R1, [SP,#0xC+var_8]
BL              sub_2AB38
BL              sub_2A2A4
MOV             R0, #1
BL              sub_29EE0
; End of function sub_2ABFC

off_2AC30 DCD dword_7DBB0



; _DWORD *__fastcall sub_2AC34(unsigned __int8 *, int)
sub_2AC34
PUSH            {R4-R8,LR}
MOV             R5, R1
MOV             R6, R0
BL              sub_29678
LDR             R3, =dword_7DBB0
MOV             R1, R6
LDR             R8, [R3]
BL              sub_296CC
MOV             R7, R0
LDRB            R4, [R8,#0x47]
AND             R4, R4, #1
ORR             R4, R4, R5
LDR             R5, [R0]
AND             R2, R4, #0x80
CMP             R5, #0
BEQ             loc_2AD88
LDR             R3, [R5,#4]
BIC             R3, R3, #0x1FC
BIC             R3, R3, #1
MOV             R3, R3,LSL#22
MOV             R3, R3,LSR#22
CMP             R3, #2
BNE             loc_2ACC8
TST             R4, #0x100
BEQ             loc_2ACA0
MOV             R0, R6  ; ptr
BL              free

loc_2ACA0
LDR             R4, [R5,#8]
MOV             R3, #1
MOV             R1, #0x3D ; '='
STRB            R3, [R8]
MOV             R0, R4
BL              strchrnul
MOV             R2, R4
SUB             R1, R0, R4
LDR             R0, =aSIsReadOnly ; "%.*s: is read only"
BL              sub_2ABFC

loc_2ACC8
CMP             R2, #0
BNE             loc_2AD38
LDR             R2, [R5,#0xC]
CMP             R2, #0
BEQ             loc_2ACE8
TST             R4, #0x40
MOVEQ           R3, R6
BEQ             loc_2AD4C

loc_2ACE8
LDR             R3, [R5,#4]
TST             R3, #0x18
BNE             loc_2ACFC
LDR             R0, [R5,#8] ; ptr
BL              free

loc_2ACFC
LDR             R2, [R5,#4]
AND             R3, R4, #0x27 ; '''
AND             R1, R2, #4
ORR             R3, R3, R1
CMP             R3, #0x20 ; ' '
BNE             loc_2AD64
LDR             R3, [R5]
MOV             R0, R5  ; ptr
STR             R3, [R7]
BL              free

loc_2AD24
AND             R4, R4, #0x118
CMP             R4, #0x100
BNE             loc_2AD38
MOV             R0, R6  ; ptr
BL              free

loc_2AD38
MOV             R0, R5
POP             {R4-R8,PC}

loc_2AD40
CMP             R1, #0x3D ; '='
MOV             R0, R3
BEQ             loc_2AD5C

loc_2AD4C
MOV             R0, R3
LDRB            R1, [R3],#1
CMP             R1, #0
BNE             loc_2AD40

loc_2AD5C
BLX             R2
B               loc_2ACE8

loc_2AD64
BIC             R2, R2, #0x138
ORR             R4, R4, R2

loc_2AD6C
TST             R4, #0x118
BNE             loc_2AD80
MOV             R0, R6
BL              sub_174F8
MOV             R6, R0

loc_2AD80
STMIB           R5, {R4,R6}
B               loc_2AD38

loc_2AD88
CMP             R2, #0
BNE             loc_2AD38
AND             R3, R4, #0x27 ; '''
CMP             R3, #0x20 ; ' '
BEQ             loc_2AD24
MOV             R0, #0x10
BL              sub_174DC
LDR             R3, [R7]
MOV             R5, R0
STR             R3, [R0]
STR             R0, [R7]
B               loc_2AD6C
; End of function sub_2AC34

off_2ADB8 DCD dword_7DBB0
off_2ADBC DCD aSIsReadOnly ; "%.*s: is read only"



; _DWORD *__fastcall sub_2ADC0(_DWORD *result, int)
sub_2ADC0

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

PUSH            {R4-R6,LR}
SUBS            R4, R0, #0
POPEQ           {R4-R6,PC}
LDR             R3, =dword_7DBB0
MOV             R5, R1
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]

loc_2ADE4
LDR             R0, [R4,#4]
MOV             R1, R5
BL              sub_2AC34
LDR             R4, [R4]
CMP             R4, #0
BNE             loc_2ADE4
POP             {R4-R6,LR}
B               loc_2A270
; End of function sub_2ADC0

off_2AE04 DCD dword_7DBB0



; _DWORD *__fastcall sub_2AE08(unsigned __int8 *, const char *, int)
sub_2AE08
PUSH            {R4-R10,LR}
MOV             R7, R0
MOV             R4, R1
MOV             R8, R2
BL              sub_5871C
MOV             R1, #0x3D ; '='
MOV             R6, R0
BL              strchrnul
SUBS            R6, R6, R0
SUB             R5, R0, R7
MOVNE           R6, #1
CMP             R0, R7
MOVNE           R0, R6
ORREQ           R0, R6, #1
CMP             R0, #0
BEQ             loc_2AE58
MOV             R2, R7
MOV             R1, R5
LDR             R0, =aSBadVariableNa ; "%.*s: bad variable name"
BL              sub_2ABFC

loc_2AE58
CMP             R4, #0
ORREQ           R8, R8, #0x20 ; ' '
MOVEQ           R6, R4
BEQ             loc_2AE74
MOV             R0, R4  ; s
BL              strlen
MOV             R6, R0

loc_2AE74
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
ADD             R0, R5, #2
ADD             R0, R0, R6
BL              sub_1748C
MOV             R2, R5  ; n
MOV             R1, R7  ; src
MOV             R9, R0
BL              memcpy
CMP             R4, #0
ADD             R3, R0, R5
BEQ             loc_2AECC
MOV             R2, #0x3D ; '='
MOV             R1, R4  ; src
STRB            R2, [R0,R5]
ADD             R0, R3, #1 ; dest
MOV             R2, R6  ; n
BL              memcpy
ADD             R3, R0, R6

loc_2AECC
MOV             R2, #0
ORR             R1, R8, #0x100
STRB            R2, [R3]
MOV             R0, R9
BL              sub_2AC34
MOV             R4, R0
BL              loc_2A270
MOV             R0, R4
POP             {R4-R10,PC}
; End of function sub_2AE08

off_2AEF0 DCD aSBadVariableNa ; "%.*s: bad variable name"
off_2AEF4 DCD dword_7DBB0



; unsigned int __fastcall sub_2AEF8(const char *)
sub_2AEF8
LDR             R3, =dword_7DBB0
CMP             R0, #0
PUSH            {R4-R6,LR}
LDR             R4, [R3]
BNE             loc_2AF44
ADD             R0, R4, #0x1D8
BL              sub_36EAC
LDR             R3, =dword_7DBB4
LDR             R4, [R3]
LDR             R5, [R4,#0x130]
BL              sub_16F64
MOV             R2, #0x40 ; '@'
MOV             R1, R0
MOV             R0, R5
BL              sub_2AE08
LDR             R3, [R4,#0x12C]
BIC             R3, R3, #0x40 ; '@'
STR             R3, [R4,#0x12C]
POP             {R4-R6,PC}

loc_2AF44               ; base
MOV             R2, #0xA
MOV             R1, #0  ; endptr
BL              strtoul
CMP             R0, #0
STR             R0, [R4,#0x1E4]
MOVNE           R3, R0
MOVEQ           R3, #1
STR             R3, [R4,#0x1E0]
STR             R3, [R4,#0x1D8]
STR             R0, [R4,#0x1DC]
POP             {R4-R6,PC}
; End of function sub_2AEF8

off_2AF70 DCD dword_7DBB0
off_2AF74 DCD dword_7DBB4



; _DWORD *__fastcall sub_2AF78(unsigned __int8 *)
sub_2AF78
MOV             R2, #0
MOV             R1, R2
B               sub_2AE08
; End of function sub_2AF78




; _DWORD *__fastcall sub_2AF84(unsigned __int8 *, const char *)
sub_2AF84
MOV             R2, #0
B               sub_2AE08
; End of function sub_2AF84




; int __fastcall sub_2AF8C(unsigned __int8 *)
sub_2AF8C
PUSH            {R4,LR}
MOV             R1, R0
BL              sub_2960C
CMP             R0, #0
BNE             loc_2AFA8
LDR             R0, =aIllegalNumberS ; "Illegal number: %s"
BL              sub_2ABFC

loc_2AFA8
MOV             R0, R1
POP             {R4,LR}
B               atoi
; End of function sub_2AF8C

off_2AFB4 DCD aIllegalNumberS ; "Illegal number: %s"



; int __fastcall sub_2AFB8(unsigned __int8 *)
sub_2AFB8
LDR             R3, =dword_7DBB4
MOV             R2, R0
PUSH            {R4,LR}
LDR             R4, [R3]
MOV             R3, #1
STR             R3, [R4,#4]
BL              sub_2960C
CMP             R0, #0
BEQ             loc_2AFF0
MOV             R0, R2
BL              sub_2AF8C
CMP             R0, #0
MOVEQ           R0, #1
STR             R0, [R4,#4]

loc_2AFF0
MOV             R3, #0xFFFFFFFF
STR             R3, [R4,#8]
POP             {R4,PC}
; End of function sub_2AFB8

off_2AFFC DCD dword_7DBB4



; int __fastcall sub_2B000(int, int)
sub_2B000
LDR             R0, [R1,#4]
PUSH            {R4-R8,LR}
CMP             R0, #0
MOVEQ           R5, #1
BEQ             loc_2B01C
BL              sub_2AF8C
MOV             R5, R0

loc_2B01C
LDR             R3, =dword_7DBB4
LDR             R4, [R3]
LDR             R3, [R4]
CMP             R3, R5
BLT             loc_2B0B8
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R6, [R4,#0x10]
MOV             R7, R5
LDR             R3, [R4]
MOV             R8, R6
SUB             R3, R3, R5
STR             R3, [R4]

loc_2B05C
SUBS            R7, R7, #1
BPL             loc_2B09C
BIC             R5, R5, R5,ASR#31
LDR             R3, [R4,#0x10]
ADD             R5, R6, R5,LSL#2
SUB             R3, R3, #4

loc_2B074
LDR             R6, [R5],#4
CMP             R6, #0
STR             R6, [R3,#4]!
BNE             loc_2B074
MOV             R0, #1
MOV             R1, #0xFFFFFFFF
STRD            R0, R1, [R4,#4]
BL              loc_2A270
MOV             R0, R6
POP             {R4-R8,PC}

loc_2B09C
LDRB            R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_2B0B0
LDR             R0, [R8] ; ptr
BL              free

loc_2B0B0
ADD             R8, R8, #4
B               loc_2B05C

loc_2B0B8
MOV             R0, #1
POP             {R4-R8,PC}
; End of function sub_2B000

off_2B0C0 DCD dword_7DBB4
off_2B0C4 DCD dword_7DBB0



; int __fastcall sub_2B0C8(int, int)
sub_2B0C8
LDR             R0, [R1,#4]
MOV             R2, #4
LDR             R3, =dword_7D6B8
CMP             R0, #0
STR             R2, [R3]
BEQ             loc_2B0E4
B               sub_2AF8C

loc_2B0E4
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDRB            R0, [R3]
BX              LR
; End of function sub_2B0C8

off_2B0F4 DCD dword_7D6B8
off_2B0F8 DCD dword_7DBB0



; int __fastcall sub_2B0FC(int, int, int, int)
sub_2B0FC
CMP             R0, R1
PUSH            {R4,LR}
MOVEQ           R3, R1
MOV             R4, R0
BEQ             loc_2B118
BL              dup2
MOV             R3, R0

loc_2B118
CMP             R3, #0
BGE             loc_2B12C
MOV             R1, R4
LDR             R0, =aDM ; "%d: %m"
BL              sub_2ABFC

loc_2B12C
MOV             R0, R3
POP             {R4,PC}
; End of function sub_2B0FC

off_2B134 DCD aDM       ; "%d: %m"



; void __fastcall sub_2B138(int)
sub_2B138

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =dword_7DBB4
PUSH            {R4-R10,LR}
LDR             R8, [R3]
LDR             R3, [R8,#0x14]
CMP             R3, #0
POPEQ           {R4-R10,PC}
LDR             R3, =dword_7DBB0
MOV             R6, R0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R4, [R8,#0x14]
MOV             R9, #0
MOV             R5, R4

loc_2B174
LDR             R3, [R4,#4]
CMP             R3, R9
BGT             loc_2B198
LDR             R3, [R4]
MOV             R0, R4  ; ptr
STR             R3, [R8,#0x14]
BL              free
POP             {R4-R10,LR}
B               loc_2A270

loc_2B198
LDR             R7, [R5,#0xC]
LDR             R1, [R5,#8]
CMN             R7, #1
BNE             loc_2B1C0
CMP             R6, #0
MOVEQ           R0, R1
BEQ             loc_2B1DC

loc_2B1B4
ADD             R9, R9, #1
ADD             R5, R5, #8
B               loc_2B174

loc_2B1C0
CMN             R7, #2
BEQ             loc_2B1B4
CMP             R6, #0
BNE             loc_2B1D8
MOV             R0, R7
BL              sub_2B0FC

loc_2B1D8               ; fd
MOV             R0, R7

loc_2B1DC
BL              close
B               loc_2B1B4
; End of function sub_2B138

off_2B1E4 DCD dword_7DBB4
off_2B1E8 DCD dword_7DBB0



; int __fastcall sub_2B1EC(int, __pid_t)
sub_2B1EC
PUSH            {R4,LR}
BL              tcsetpgrp
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R0, =aCanTSetTtyProc ; "can't set tty process group: %m"
BL              sub_2ABFC
; End of function sub_2B1EC

off_2B204 DCD aCanTSetTtyProc ; "can't set tty process group: %m"



; int __fastcall sub_2B208(int)
sub_2B208
PUSH            {R4-R8,LR}
ADD             R0, R0, #7
LDR             R7, =dword_7DBB8
BIC             R4, R0, #7
LDR             R5, [R7]
LDR             R3, [R5,#0xC]
CMP             R3, R4
BCS             loc_2B27C
CMP             R4, #0x1F8
MOV             R0, #4
MOVCS           R6, R4
MOVCC           R6, #0x1F8
ADDS            R0, R6, R0
BCS             loc_2B29C
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
BL              sub_1748C
LDR             R2, [R5]
MOV             R3, R0
STR             R2, [R3],#4
STR             R3, [R5,#4]
ADD             R3, R3, R6
STR             R6, [R5,#0xC]
STR             R3, [R5,#8]
STR             R0, [R5]
BL              loc_2A270

loc_2B27C
LDR             R3, [R7]
LDR             R0, [R3,#4]
ADD             R2, R0, R4
STR             R2, [R3,#4]
LDR             R2, [R3,#0xC]
SUB             R4, R2, R4
STR             R4, [R3,#0xC]
POP             {R4-R8,PC}

loc_2B29C
LDR             R0, =aOutOfMemory ; "out of memory"
BL              sub_2ABFC
; End of function sub_2B208

off_2B2A4 DCD dword_7DBB8
off_2B2A8 DCD dword_7DBB0
off_2B2AC DCD aOutOfMemory ; "out of memory"



; int __fastcall sub_2B2B0(_DWORD *, int)
sub_2B2B0
LDR             R3, =dword_7DBB8
LDR             R3, [R3]
LDR             R2, [R3]
STR             R2, [R0]
LDR             R2, [R3,#4]
LDR             R3, [R3,#0xC]
STR             R2, [R0,#4]
STR             R3, [R0,#8]
MOV             R0, R1
B               sub_2B208
; End of function sub_2B2B0

off_2B2D8 DCD dword_7DBB8



; int __fastcall sub_2B2DC(_DWORD *)
sub_2B2DC
LDR             R3, =dword_7DBB8
LDR             R3, [R3]
LDR             R1, [R3]
LDR             R12, [R3,#4]
ADD             R2, R1, #4
CMP             R12, R2
MOVNE           R1, #0
BNE             loc_2B308
ADD             R3, R3, #0x10
SUBS            R1, R1, R3
MOVNE           R1, #1

loc_2B308
B               sub_2B2B0
; End of function sub_2B2DC

off_2B30C DCD dword_7DBB8



; void *__fastcall sub_2B310(const char *)
sub_2B310
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              strlen
ADD             R4, R0, #1
MOV             R0, R4
BL              sub_2B208
MOV             R2, R4  ; n
MOV             R1, R5  ; src
POP             {R4-R6,LR}
B               memcpy
; End of function sub_2B310




; int __fastcall sub_2B338(int, char)
sub_2B338
LDR             R3, =dword_7DBB0
PUSH            {R4-R8,LR}
MOV             R7, R0
MOV             R6, R1
LDR             R5, [R3]
LDR             R3, [R5,#0x28]
ADD             R3, R3, #1
STR             R3, [R5,#0x28]
MOV             R1, #0x80000
BL              open64
SUBS            R4, R0, #0
BGE             loc_2B384
TST             R6, #2
BNE             loc_2B424
LDR             R0, =aCanTOpenSM ; "can't open '%s': %m"
MOV             R1, R7
MOV             R3, #0x7F
STRB            R3, [R5]

loc_2B380
BL              sub_2ABFC

loc_2B384
CMP             R4, #9
BGT             loc_2B430
MOV             R2, #0xA
MOVW            R1, #0x406 ; cmd
BL              fcntl
SUBS            R5, R0, #0
BGE             loc_2B3C4
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #9
BEQ             loc_2B3CC
CMP             R3, #0
MOVNE           R1, R4
LDRNE           R0, =aDM ; "%d: %m"
BNE             loc_2B380

loc_2B3C4               ; fd
MOV             R0, R4
BL              close

loc_2B3CC
TST             R6, #1
LDR             R4, =off_7D4D0
BEQ             loc_2B3E8
BL              sub_298B8
LDR             R3, [R4] ; unk_7D64C
MOV             R2, #0
STR             R2, [R3,#0x18]

loc_2B3E8
LDR             R6, [R4] ; unk_7D64C
LDR             R3, [R6,#0x18]
STR             R5, [R6,#8]
CMP             R3, #0
BNE             loc_2B408
MOV             R0, #0x400
BL              sub_1748C
STR             R0, [R6,#0x18]

loc_2B408
LDR             R3, [R4] ; unk_7D64C
MOV             R2, #0
MOV             R4, R5
STR             R2, [R3,#0x10]
STR             R2, [R3,#0xC]
MOV             R2, #1
STR             R2, [R3,#4]

loc_2B424
BL              loc_2A270
MOV             R0, R4
POP             {R4-R8,PC}

loc_2B430
MOV             R5, R4
B               loc_2B3CC
; End of function sub_2B338

off_2B438 DCD dword_7DBB0
off_2B43C DCD aCanTOpenSM ; "can't open '%s': %m"
off_2B440 DCD dword_7DB94
off_2B444 DCD aDM       ; "%d: %m"
off_2B448 DCD off_7D4D0


; Attributes: noreturn

; void __fastcall __noreturn sub_2B44C(const char *)
sub_2B44C
LDR             R2, =off_7D4D0
MOV             R1, R0
LDR             R3, =dword_7DBB0
PUSH            {R4,LR}
LDR             R2, [R2] ; unk_7D64C
LDR             R3, [R3]
LDR             R2, [R2,#4]
LDR             R0, =aSyntaxErrorS ; "syntax error: %s"
STR             R2, [R3,#0x10]
BL              sub_2ABFC
; End of function sub_2B44C

off_2B474 DCD off_7D4D0
off_2B478 DCD dword_7DBB0
off_2B47C DCD aSyntaxErrorS ; "syntax error: %s"



; int __fastcall sub_2B480(unsigned __int8 *)
sub_2B480
LDR             R1, =dword_7D720
MOV             R3, R0
PUSH            {R4,LR}
MOV             R4, R1
LDR             R2, [R1]
CMP             R2, #0
BEQ             loc_2B4A8
LDRB            R1, [R2]
CMP             R1, #0
BNE             loc_2B4FC

loc_2B4A8
LDR             LR, =dword_7D640
LDR             R0, [LR]
LDR             R1, [R0]
CMP             R1, #0
BNE             loc_2B4C4

loc_2B4BC
MOV             R0, #0
POP             {R4,PC}

loc_2B4C4
LDRB            R2, [R1]
CMP             R2, #0x2D ; '-'
BNE             loc_2B4BC
LDRB            R12, [R1,#1]
ADD             R2, R1, #1
CMP             R12, #0
BEQ             loc_2B4BC
CMP             R12, #0x2D ; '-'
ADD             R0, R0, #4
STR             R0, [LR]
BNE             loc_2B4FC
LDRB            R1, [R1,#2]
CMP             R1, #0
BEQ             loc_2B4BC

loc_2B4FC
LDRB            R1, [R2]
ADD             R12, R2, #1

loc_2B504
LDRB            R0, [R3]
CMP             R0, R1
BNE             loc_2B550
LDRB            R3, [R3,#1]
MOV             R0, R1
CMP             R3, #0x3A ; ':'
BNE             loc_2B584
LDRB            R3, [R2,#1]
CMP             R3, #0
BNE             loc_2B578
LDR             R2, =dword_7D640
LDR             R3, [R2]
ADD             R12, R3, #4
STR             R12, [R2]
LDR             R12, [R3]
CMP             R12, #0
BNE             loc_2B578
LDR             R0, =aNoArgForCOptio ; "no arg for -%c option"
B               loc_2B55C

loc_2B550
CMP             R0, #0
BNE             loc_2B560
LDR             R0, =aIllegalOptionC ; "illegal option -%c"

loc_2B55C
BL              sub_2ABFC

loc_2B560
LDRB            LR, [R3,#1]
ADD             R0, R3, #1
CMP             LR, #0x3A ; ':'
ADDEQ           R3, R3, #2
MOVNE           R3, R0
B               loc_2B504

loc_2B578
LDR             R3, =dword_7D71C
STR             R12, [R3]
MOV             R12, #0

loc_2B584
STR             R12, [R4]
POP             {R4,PC}
; End of function sub_2B480

off_2B58C DCD dword_7D720
off_2B590 DCD dword_7D640
off_2B594 DCD aNoArgForCOptio ; "no arg for -%c option"
off_2B598 DCD aIllegalOptionC ; "illegal option -%c"
off_2B59C DCD dword_7D71C



; char *sub_2B5A0()
sub_2B5A0
PUSH            {R4-R6,LR}
MOV             R5, #0
LDR             R4, =aVf ; "vf"

loc_2B5AC
MOV             R0, R4
BL              sub_2B480
CMP             R0, #0
BNE             loc_2B5E4
LDR             R3, =dword_7D640
LDR             R4, [R3]
SUB             R4, R4, #4

loc_2B5C8
LDR             R0, [R4,#4]!
CMP             R0, #0
POPEQ           {R4-R6,PC}
CMP             R5, #0x66 ; 'f'
BEQ             loc_2B5EC
BL              sub_2AF78
B               loc_2B5C8

loc_2B5E4
MOV             R5, R0
B               loc_2B5AC

loc_2B5EC
MOV             R1, #0
BL              sub_29D4C
CMP             R0, #0
BEQ             loc_2B5C8
LDR             R3, [R0,#8]
CMP             R3, #1
BNE             loc_2B5C8
BL              sub_2A794
B               loc_2B5C8
; End of function sub_2B5A0

off_2B610 DCD aVf       ; "vf"
off_2B614 DCD dword_7D640



; int sub_2B618()
sub_2B618
PUSH            {R4-R8,LR}
LDR             R0, =(aNoA+3) ; "a"
BL              sub_2B480
SUBS            R4, R0, #0
BNE             loc_2B67C
LDR             R6, =dword_7D640
LDR             R8, =stderr
MOV             R7, R6

loc_2B638
LDR             R5, [R6]
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_2B6BC
BL              sub_2A4C4
CMP             R0, #0
BEQ             loc_2B66C
MOV             R4, #1
LDR             R3, [R5]
LDR             R2, =(a2unalias+1) ; "unalias"
LDR             R1, =aSSNotFound ; "%s: %s not found\n"
LDR             R0, [R8] ; stream
BL              fprintf

loc_2B66C
LDR             R3, [R7]
ADD             R3, R3, #4
STR             R3, [R7]
B               loc_2B638

loc_2B67C
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R7, =dword_7D644
MOV             R5, #0

loc_2B698
LDR             R3, [R7]
LDR             R4, [R3,R5]
ADD             R6, R3, R5

loc_2B6A4
CMP             R4, #0
BNE             loc_2B6C4
ADD             R5, R5, #4
CMP             R5, #0x9C
BNE             loc_2B698
BL              loc_2A270

loc_2B6BC
MOV             R0, R4
POP             {R4-R8,PC}

loc_2B6C4
LDR             R0, [R6]
BL              sub_29978
CMP             R0, R4
STR             R0, [R6]
MOVEQ           R6, R4
LDR             R4, [R6]
B               loc_2B6A4
; End of function sub_2B618

off_2B6E0 DCD aNoA+3    ; "a"
off_2B6E4 DCD dword_7D640
off_2B6E8 DCD stderr
off_2B6EC DCD a2unalias+1 ; "unalias"
off_2B6F0 DCD aSSNotFound ; "%s: %s not found\n"
off_2B6F4 DCD dword_7DBB0
off_2B6F8 DCD dword_7D644



; int sub_2B6FC()
sub_2B6FC
PUSH            {R4-R6,LR}
MOV             R5, #0x4C ; 'L'
LDR             R6, =(aHlp+2) ; "LP"
MOV             R4, #0

loc_2B70C
MOV             R0, R6
BL              sub_2B480
CMP             R0, #0
BNE             loc_2B724
MOV             R0, R4
POP             {R4-R6,PC}

loc_2B724
CMP             R5, R0
MOV             R5, R0
EORNE           R4, R4, #1
B               loc_2B70C
; End of function sub_2B6FC

off_2B734 DCD aHlp+2    ; "LP"



; int __fastcall sub_2B738(int, int)
sub_2B738
PUSH            {R3-R11,LR}
SUBS            R6, R0, #0
LDR             R3, =dword_7D6AC
MOV             R9, R1
LDR             R4, [R3]
BEQ             loc_2B7A4
LDRB            R3, [R6]
CMP             R3, #0x25 ; '%'
BNE             loc_2B818
LDRB            R5, [R6,#1]
ADD             R8, R6, #1
CMP             R5, #0
BEQ             loc_2B7A4
LDRB            R3, [R6,#2]
CMP             R3, #0
BNE             loc_2B7CC
CMP             R5, #0x25 ; '%'
CMPNE           R5, #0x2B ; '+'
BEQ             loc_2B7A4
CMP             R5, #0x2D ; '-'
BNE             loc_2B7CC
CMP             R4, #0
LDRNE           R4, [R4,#0x1C]
LDRNE           R5, =aNoPreviousJob ; "No previous job"
BNE             loc_2B7A8
LDR             R5, =aNoPreviousJob ; "No previous job"
B               loc_2B81C

loc_2B7A4
LDR             R5, =aNoCurrentJob ; "No current job"

loc_2B7A8
CMP             R4, #0
BEQ             loc_2B81C

loc_2B7B0
CMP             R9, #0
BEQ             loc_2B7C4
LDRB            R3, [R4,#0x19]
TST             R3, #2
BEQ             loc_2B880

loc_2B7C4
MOV             R0, R4
POP             {R3-R11,PC}

loc_2B7CC
MOV             R0, R8
BL              sub_2960C
CMP             R0, #0
BEQ             loc_2B828
MOV             R0, R8  ; nptr
BL              atoi
CMP             R0, #0
BEQ             loc_2B828
LDR             R3, =dword_7D718
LDR             R3, [R3]
CMP             R3, R0
BCC             loc_2B828
LDR             R3, =dword_7D6FC
SUB             R0, R0, #0xF8000001
LDR             R4, [R3]
ADD             R4, R4, R0,LSL#5
LDRB            R3, [R4,#0x19]
TST             R3, #8
BNE             loc_2B7B0

loc_2B818
LDR             R5, =aSNoSuchJob ; "%s: no such job"

loc_2B81C
MOV             R1, R6
MOV             R0, R5
BL              sub_2ABFC

loc_2B828
CMP             R5, #0x3F ; '?'
LDR             R11, =aSAmbiguous ; "%s: ambiguous"
LDREQ           R10, =strstr
MOV             R7, R4
LDRNE           R10, =sub_295E8
ADDEQ           R8, R6, #2
LDR             R5, =aSNoSuchJob ; "%s: no such job"
MOV             R4, #0

loc_2B848
CMP             R7, #0
BEQ             loc_2B7A8
LDR             R3, [R7,#0xC]
MOV             R1, R8
LDR             R0, [R3,#8]
BLX             R10
CMP             R0, #0
BEQ             loc_2B878
CMP             R4, #0
BNE             loc_2B81C
MOV             R4, R7
MOV             R5, R11

loc_2B878
LDR             R7, [R7,#0x1C]
B               loc_2B848

loc_2B880
LDR             R5, =aJobSNotCreated ; "job %s not created under job control"
B               loc_2B81C
; End of function sub_2B738

off_2B888 DCD dword_7D6AC
off_2B88C DCD aNoPreviousJob ; "No previous job"
off_2B890 DCD aNoCurrentJob ; "No current job"
off_2B894 DCD dword_7D718
off_2B898 DCD dword_7D6FC
off_2B89C DCD aSNoSuchJob ; "%s: no such job"
off_2B8A0 DCD aSAmbiguous ; "%s: ambiguous"
off_2B8A4 DCD strstr
off_2B8A8 DCD sub_295E8
off_2B8AC DCD aJobSNotCreated ; "job %s not created under job control"



; int __fastcall sub_2B8B0(int fd, int)
sub_2B8B0
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R6, =dword_7DB94
ADD             R7, R1, #1

loc_2B8C0
MOV             R2, R7
MOVW            R1, #0x406 ; cmd
MOV             R0, R4  ; fd
BL              fcntl
SUBS            R5, R0, #0
BGE             loc_2B900
LDR             R3, [R6]
LDR             R3, [R3]
CMP             R3, #0x10
CMPNE           R3, #4
BEQ             loc_2B8C0
CMP             R3, #9
BEQ             loc_2B90C
MOV             R1, R5
LDR             R0, =aDM ; "%d: %m"
BL              sub_2ABFC

loc_2B900               ; fd
MOV             R0, R4
MOV             R4, R5
BL              close

loc_2B90C
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_2B8B0

off_2B914 DCD dword_7DB94
off_2B918 DCD aDM       ; "%d: %m"



; int __fastcall sub_2B91C(int, _BYTE **)
sub_2B91C
PUSH            {R4-R6,LR}
MOV             R5, R1
LDR             R4, [R1,#4]
CMP             R4, #0
BEQ             loc_2B94C
MOV             R0, R4
BL              sub_2AF8C
CMP             R0, #0
BGT             loc_2B950
MOV             R1, R4
LDR             R0, =aIllegalNumberS ; "Illegal number: %s"
BL              sub_2ABFC

loc_2B94C
MOV             R0, #1

loc_2B950
LDR             R3, =dword_7D710
LDR             R3, [R3]
CMP             R0, R3
BLE             loc_2B994
CMP             R3, #0
BLE             loc_2B98C

loc_2B968
LDR             R2, [R5]
LDRB            R2, [R2]
CMP             R2, #0x63 ; 'c'
LDR             R2, =dword_7D6B8
MOVEQ           R1, #2
MOVNE           R1, #1
STR             R1, [R2]
LDR             R2, =dword_7D730
STR             R3, [R2]

loc_2B98C
MOV             R0, #0
POP             {R4-R6,PC}

loc_2B994
MOV             R3, R0
B               loc_2B968
; End of function sub_2B91C

off_2B99C DCD aIllegalNumberS ; "Illegal number: %s"
off_2B9A0 DCD dword_7D710
off_2B9A4 DCD dword_7D6B8
off_2B9A8 DCD dword_7D730



; int sub_2B9AC(const char *, ...)
sub_2B9AC

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {R0-R2,LR}
ADD             R1, SP, #0xC+varg_r1
LDR             R0, [SP,#0xC+varg_r0]
STR             R1, [SP,#0xC+var_8]
BL              sub_2AB38
ADD             SP, SP, #0xC
POP             {LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_2B9AC




; int __fastcall sub_2B9D4(int result)
sub_2B9D4
PUSH            {R4-R10,LR}
LDR             R6, =dword_7D6B0
LDR             R3, [R6]
CMP             R3, R0
POPEQ           {R4-R10,PC}
LDR             R3, =dword_7DBB0
LDR             R8, [R3]
LDR             R7, [R8,#0xC]
CMP             R7, #0
POPNE           {R4-R10,PC}
CMP             R0, #0
MOV             R5, R0
BEQ             loc_2BB10
MOV             R1, #2
LDR             R0, =aDevTty ; "/dev/tty"
BL              open64
SUBS            R9, R0, #0
MOVGE           R4, R9
BGE             loc_2BA40
MOV             R4, #2
B               loc_2BA30

loc_2BA28
SUBS            R4, R4, #1
BCC             loc_2BA7C

loc_2BA30               ; fd
MOV             R0, R4
BL              isatty
CMP             R0, #0
BEQ             loc_2BA28

loc_2BA40               ; fd
MOV             R0, R4
MOV             R2, #0xA
MOVW            R1, #0x406 ; cmd
BL              fcntl
CMP             R9, #0
MOV             R4, R0
BLT             loc_2BA64
MOV             R0, R9  ; fd
BL              close

loc_2BA64
CMP             R4, #0
BLT             loc_2BA7C

loc_2BA6C               ; fd
MOV             R0, R4
BL              tcgetpgrp
SUBS            R9, R0, #0
BGE             loc_2BAA4

loc_2BA7C
LDR             R0, =aCanTAccessTtyJ ; "can't access tty; job control turned of"...
BL              sub_2B9AC
MOV             R3, #0
STRB            R3, [R8,#0x41]

loc_2BA8C
CMP             R4, #0
BLT             loc_2BA9C
MOV             R0, R4  ; fd
BL              close

loc_2BA9C
MOV             R4, #0xFFFFFFFF
B               loc_2BB00

loc_2BAA4
BL              getpgrp
CMP             R0, R9
BEQ             loc_2BAC0
MOV             R1, #0x15 ; sig
MOV             R0, #0  ; pgrp
BL              killpg
B               loc_2BA6C

loc_2BAC0
LDR             R3, =dword_7D6F0
STR             R0, [R3]
MOV             R0, #0x14 ; sig
BL              sub_29F94
MOV             R0, #0x16 ; sig
BL              sub_29F94
MOV             R0, #0x15 ; sig
BL              sub_29F94
LDR             R7, [R8,#8]
MOV             R0, #0  ; pid
MOV             R1, R7  ; pgid
BL              setpgid
MOV             R1, R7
MOV             R7, R5
MOV             R0, R4
BL              sub_2B1EC

loc_2BB00
LDR             R3, =dword_7D4D4
STR             R7, [R6]
STR             R4, [R3]
POP             {R4-R10,PC}

loc_2BB10
LDR             R3, =dword_7D4D4
LDR             R4, [R3]
LDR             R3, =dword_7D6F0
MOV             R0, R4  ; fd
LDR             R5, [R3]
MOV             R1, R5  ; pgrp_id
BL              tcsetpgrp
MOV             R1, R5  ; pgid
MOV             R0, R7  ; pid
BL              setpgid
MOV             R0, #0x14 ; sig
BL              sub_29F94
MOV             R0, #0x16 ; sig
BL              sub_29F94
MOV             R0, #0x15 ; sig
BL              sub_29F94
B               loc_2BA8C
; End of function sub_2B9D4

off_2BB54 DCD dword_7D6B0
off_2BB58 DCD dword_7DBB0
off_2BB5C DCD aDevTty   ; "/dev/tty"
off_2BB60 DCD aCanTAccessTtyJ ; "can't access tty; job control turned of"...
off_2BB64 DCD dword_7D6F0
off_2BB68 DCD dword_7D4D4



; int sub_2BB6C()
sub_2BB6C
LDR             R3, =dword_7DBB0
PUSH            {R4,LR}
LDR             R2, =dword_7D6F4
LDR             R4, [R3]
LDR             R1, [R2]
LDRB            R3, [R4,#0x40]
ADD             R3, R3, #1
CMP             R3, R1
BEQ             loc_2BBAC
MOV             R0, #2  ; sig
STR             R3, [R2]
BL              sub_29F94
MOV             R0, #3  ; sig
BL              sub_29F94
MOV             R0, #0xF ; sig
BL              sub_29F94

loc_2BBAC
LDRB            R0, [R4,#0x41]
BL              sub_2B9D4
LDRB            R3, [R4,#0x4A]
CMP             R3, #0
LDR             R3, =dword_7D708
LDR             R2, [R3]
LDR             R3, [R2]
ORRNE           R3, R3, #8
BICEQ           R3, R3, #8
STR             R3, [R2]
POP             {R4,PC}
; End of function sub_2BB6C

off_2BBD8 DCD dword_7DBB0
off_2BBDC DCD dword_7D6F4
off_2BBE0 DCD dword_7D708



; const char *__fastcall sub_2BBE4(int)
sub_2BBE4

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

PUSH            {R4-R8,LR}
MOV             R1, #0x3D ; '=' ; c
LDR             R5, =dword_7DBB0
MOV             R4, R0
BL              strchr
LDR             R2, [R5]
MOV             R8, R0
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R7, =dword_7D70C
LDR             R3, [R7]
LDR             R6, [R3,#4]

loc_2BC18
CMP             R6, #0
BNE             loc_2BC9C
MOV             R0, #0x10
BL              sub_174DC
LDRB            R3, [R4]
MOV             R6, R0
CMP             R3, #0x2D ; '-'
BNE             loc_2BCDC
LDRB            R3, [R4,#1]
CMP             R3, #0
BNE             loc_2BCDC
MOV             R0, #0xF
BL              sub_1748C
LDR             R1, [R5]
MOV             R2, R0
ADD             R3, R1, #0x3D ; '='
ADD             R1, R1, #0x49 ; 'I'

loc_2BC5C
LDR             R12, [R3],#4
CMP             R3, R1
STR             R12, [R2],#4
BNE             loc_2BC5C
LDRH            R1, [R3]
MOV             R5, #0
STRH            R1, [R2]
LDRB            R3, [R3,#2]
STRB            R3, [R2,#2]
STR             R0, [R6,#0xC]

loc_2BC84
LDR             R3, [R7]
STR             R5, [R6,#4]
LDR             R2, [R3,#4]
STR             R2, [R6]
STR             R6, [R3,#4]
B               loc_2BCCC

loc_2BC9C
LDR             R3, [R6,#4]
CMP             R3, #0
BEQ             loc_2BCD4
MOV             R1, R4
LDR             R0, [R3,#8]
BL              sub_29638
SUBS            R1, R0, #0
BNE             loc_2BCD4
CMP             R8, #0
BEQ             loc_2BCCC
MOV             R0, R4
BL              sub_2AC34

loc_2BCCC
POP             {R4-R8,LR}
B               loc_2A270

loc_2BCD4
LDR             R6, [R6]
B               loc_2BC18

loc_2BCDC
MOV             R0, R4
BL              sub_29678
MOV             R1, R4
BL              sub_296CC
LDR             R5, [R0]
CMP             R5, #0
BNE             loc_2BD30
CMP             R8, #0
BEQ             loc_2BD1C
MOV             R1, #4
MOV             R0, R4
BL              sub_2AC34

loc_2BD0C
MOV             R3, #0x20 ; ' '
MOV             R5, R0
STR             R3, [R6,#8]
B               loc_2BC84

loc_2BD1C
MOV             R2, #4
MOV             R1, R5
MOV             R0, R4
BL              sub_2AE08
B               loc_2BD0C

loc_2BD30
LDR             R3, [R5,#8]
CMP             R8, #0
STR             R3, [R6,#0xC]
LDR             R3, [R5,#4]
STR             R3, [R6,#8]
ORR             R3, R3, #0xC
STR             R3, [R5,#4]
BEQ             loc_2BD60
MOV             R1, #0
MOV             R0, R4
BL              sub_2AC34
B               loc_2BC84

loc_2BD60
MOV             R1, R8
MOV             R0, R4
BL              sub_2AF84
B               loc_2BC84
; End of function sub_2BBE4

off_2BD70 DCD dword_7DBB0
off_2BD74 DCD dword_7D70C



; int sub_2BD78()
sub_2BD78
LDR             R3, =dword_7D70C
PUSH            {R4,LR}
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_2BD94
LDR             R0, =aNotInAFunction ; "not in a function"
BL              sub_2ABFC

loc_2BD94
LDR             R3, =dword_7D640
LDR             R4, [R3]

loc_2BD9C
LDR             R0, [R4],#4
CMP             R0, #0
POPEQ           {R4,PC}
BL              sub_2BBE4
B               loc_2BD9C
; End of function sub_2BD78

off_2BDB0 DCD dword_7D70C
off_2BDB4 DCD aNotInAFunction ; "not in a function"
off_2BDB8 DCD dword_7D640



; _DWORD *__fastcall sub_2BDBC(const char *, int)
sub_2BDBC
PUSH            {R4-R10,LR}
CMP             R1, #0
LDR             R5, =dword_7DBB0
MOV             R8, R0
LDR             R6, [R5]
LDR             R4, [R6,#0x18]
BEQ             loc_2BDE8
MOV             R2, #1
MOV             R1, R4
LDR             R0, =aOldpwd ; "OLDPWD"
BL              sub_2AE08

loc_2BDE8
LDR             R3, [R6,#0x28]
ADD             R3, R3, #1
STR             R3, [R6,#0x28]
LDR             R9, [R5]
LDR             R0, [R9,#0x1C] ; ptr
ADD             R7, R9, #0x3C ; '<'
CMP             R0, R7
BEQ             loc_2BE18
CMP             R0, R4
BEQ             loc_2BE14
BL              free

loc_2BE14
STR             R7, [R9,#0x1C]

loc_2BE18
CMP             R8, #0
CMPNE           R4, R8
BNE             loc_2BE68
MOV             R1, #0  ; size
MOV             R0, R1  ; buf
BL              getcwd
CMP             R0, #0
MOVNE           R6, R0
MOVEQ           R6, R7
CMP             R8, #0
STR             R6, [R9,#0x1C]
BEQ             loc_2BE74

loc_2BE48
LDR             R3, [R5]
STR             R4, [R3,#0x18]
BL              loc_2A270
MOV             R1, R4
MOV             R2, #1
LDR             R0, =(aOldpwd+3) ; "PWD"
POP             {R4-R10,LR}
B               sub_2AE08

loc_2BE68
MOV             R0, R8
BL              sub_174F8
MOV             R6, R0

loc_2BE74
CMP             R6, R4
BEQ             loc_2BE48
CMP             R7, R4
BEQ             loc_2BE8C
MOV             R0, R4  ; ptr
BL              free

loc_2BE8C
MOV             R4, R6
B               loc_2BE48
; End of function sub_2BDBC

off_2BE94 DCD dword_7DBB0
off_2BE98 DCD aOldpwd   ; "OLDPWD"
off_2BE9C DCD aOldpwd+3 ; "PWD"



; int sub_2BEA0(const char *, ...)
sub_2BEA0

var_4= -4
varg_r0=  8
varg_r1=  0xC
varg_r2=  0x10
varg_r3=  0x14

PUSH            {R0-R3}
LDR             R3, =dword_7DBB0
PUSH            {R0,R1,R4,LR}
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
ADD             R1, SP, #8+varg_r1 ; arg
LDR             R0, [SP,#8+varg_r0] ; format
STR             R1, [SP,#8+var_4]
BL              vprintf
MOV             R4, R0
BL              loc_2A270
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4,LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_2BEA0

off_2BEE8 DCD dword_7DBB0



; int __fastcall sub_2BEEC(int, _DWORD *)
sub_2BEEC

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
SUBS            R6, R0, #0
MOV             R7, R1
LDRNE           R3, =dword_7DBB0
MOVNE           R2, #0
LDRNE           R3, [R3]
STRNE           R2, [R3,#0x14]

loc_2BF08
LDR             R1, =dword_7D640
LDR             R2, [R1]
MOV             R9, R1
LDR             R3, [R2]
CMP             R3, #0
BEQ             loc_2BF34
LDRB            R12, [R3]
ADD             R8, R3, #1
SUB             R4, R12, #0x2B ; '+'
ANDS            R4, R4, #0xFD
BEQ             loc_2BF44

loc_2BF34
MOV             R6, #0

loc_2BF38
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2BF44
CMP             R12, #0x2D ; '-'
ADD             R0, R2, #4
STR             R0, [R1]
BNE             loc_2BF78
LDRB            R1, [R3,#1]
CMP             R1, #0
BEQ             loc_2C150
CMP             R1, #0x2D ; '-'
BNE             loc_2BF74
LDRB            R3, [R3,#2]
CMP             R3, #0
BEQ             loc_2C168

loc_2BF74
MOV             R4, #1

loc_2BF78
LDR             R10, =off_6371C ; "eerrexit"
B               loc_2BFA4

loc_2BF80
AND             R1, R6, #1
CMP             R2, #0x63 ; 'c'
MOVNE           R11, #0
ANDEQ           R11, R1, #1
CMP             R11, #0
BEQ             loc_2BFB4
LDR             R2, =dword_7DBB0
LDR             R2, [R2]
STR             R8, [R2,#0x14]

loc_2BFA4
LDRB            R2, [R8],#1
CMP             R2, #0
BNE             loc_2BF80
B               loc_2BF08

loc_2BFB4
CMP             R2, #0x6F ; 'o'
BNE             loc_2C0A8
LDR             R2, [R9]
LDR             R5, [R2]
CMP             R5, #0
BEQ             loc_2C038

loc_2BFCC
LDR             R1, [R10,R11,LSL#2]
MOV             R0, R5  ; s1
ADD             R1, R1, #1 ; s2
BL              strcmp
CMP             R0, #0
BNE             loc_2C00C
LDR             R2, =dword_7DBB0
LDR             R2, [R2]
ADD             R11, R2, R11
STRB            R4, [R11,#0x3D]

loc_2BFF4
LDR             R2, [R9]
LDR             R1, [R2]
CMP             R1, #0
ADDNE           R2, R2, #4
STRNE           R2, [R9]
B               loc_2BFA4

loc_2C00C
ADD             R11, R11, #1
CMP             R11, #0xF
BNE             loc_2BFCC
CMP             R4, #0
MOV             R2, R5
MOVEQ           R1, #0x2B ; '+'
MOVNE           R1, #0x2D ; '-'
LDR             R0, =aIllegalOptionC_0 ; "illegal option %co %s"
MOV             R6, #1
BL              sub_2B9AC
B               loc_2BF38

loc_2C038
LDR             R2, =dword_7DBB0
LDR             R11, =aSetCoS ; "set %co %s\n"
LDR             R3, [R2]
STR             R3, [SP,#0xC+var_8]

loc_2C048
LDR             R3, [SP,#0xC+var_8]
CMP             R4, #0
LDR             R1, [R10,R5,LSL#2]
ADD             R2, R3, R5
ADD             R1, R1, #1
LDRB            R2, [R2,#0x3D]
BEQ             loc_2C090
LDR             R0, =(aUnsupportedCap+0x1C) ; "on"
CMP             R2, #0
LDR             R3, =(aCanTAccessTtyJ+0x25) ; "off"
MOVNE           R3, R0
LDR             R0, =a16sS ; "%-16s%s\n"
MOV             R2, R3

loc_2C07C
ADD             R5, R5, #1
BL              sub_2BEA0
CMP             R5, #0xF
BNE             loc_2C048
B               loc_2BFF4

loc_2C090
CMP             R2, #0
MOV             R0, R11
MOV             R2, R1
MOVEQ           R1, #0x2B ; '+'
MOVNE           R1, #0x2D ; '-'
B               loc_2C07C

loc_2C0A8
CMP             R2, #0x6C ; 'l'
MOVNE           R1, #0
ANDEQ           R1, R1, #1
CMP             R1, #0
BEQ             loc_2C0CC
CMP             R7, #0
MOVNE           R2, #1
STRNE           R2, [R7]
B               loc_2BFA4

loc_2C0CC
AND             R1, R6, R4
CMP             R2, #0x2D ; '-'
MOVNE           R1, #0
ANDEQ           R1, R1, #1
CMP             R1, #0
BEQ             loc_2C110
LDR             R1, =(aBinLogin+5) ; s2
MOV             R0, R8  ; s1
BL              strcmp
CLZ             R0, R0
CMP             R7, #0
MOV             R0, R0,LSR#5
MOVEQ           R0, #0
CMP             R0, #0
MOVNE           R3, #1
STRNE           R3, [R7]
B               loc_2BF08

loc_2C110
LDR             R0, [R10,R1,LSL#2]
LDRB            R0, [R0]
CMP             R2, R0
LDREQ           R2, =dword_7DBB0
LDREQ           R2, [R2]
ADDEQ           R1, R2, R1
STRBEQ          R4, [R1,#0x3D]
BEQ             loc_2BFA4
ADD             R1, R1, #1
CMP             R1, #0xF
BNE             loc_2C110
CMP             R4, #0
LDR             R0, =aIllegalOptionC_1 ; "illegal option %c%c"
MOVEQ           R1, #0x2B ; '+'
MOVNE           R1, #0x2D ; '-'
BL              sub_2ABFC

loc_2C150
CMP             R6, #0
BNE             loc_2BF34
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
STRH            R6, [R3,#0x44]
B               loc_2BF38

loc_2C168
CMP             R6, #0
BNE             loc_2BF34
LDR             R3, [R2,#4]
CMP             R3, #0
BNE             loc_2BF34
BL              sub_29F0C
B               loc_2BF38
; End of function sub_2BEEC

off_2C184 DCD dword_7DBB0
off_2C188 DCD dword_7D640
off_2C18C DCD off_6371C ; "eerrexit"
off_2C190 DCD aIllegalOptionC_0 ; "illegal option %co %s"
off_2C194 DCD aSetCoS   ; "set %co %s\n"
off_2C198 DCD aUnsupportedCap+0x1C ; "on"
off_2C19C DCD aCanTAccessTtyJ+0x25 ; "off"
off_2C1A0 DCD a16sS     ; "%-16s%s\n"
off_2C1A4 DCD aBinLogin+5 ; "login"
off_2C1A8 DCD aIllegalOptionC_1 ; "illegal option %c%c"



; int sub_2C1AC()
sub_2C1AC
LDR             R3, =dword_7DBB0
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R5, [R4,#0x18]
BL              sub_2B6FC
CMP             R0, #0
BEQ             loc_2C1E8
LDR             R2, [R4,#0x1C]
ADD             R3, R4, #0x3C ; '<'
CMP             R2, R3
BNE             loc_2C1E4
MOV             R1, #0
MOV             R0, R5
BL              sub_2BDBC

loc_2C1E4
LDR             R5, [R4,#0x1C]

loc_2C1E8
MOV             R1, R5
LDR             R0, =(aSS_2+3) ; "%s\n"
BL              sub_2BEA0
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_2C1AC

off_2C1FC DCD dword_7DBB0
off_2C200 DCD aSS_2+3   ; "%s\n"



; int sub_2C204()
sub_2C204
PUSH            {R4-R8,LR}
MOV             R4, #0
LDR             R6, =off_635B4 ; "3."
MOV             R5, R4
LDR             R7, =(aCSCS+4) ; "%c%s"
LDR             R8, =(aShellReturnedI+0x13) ; "\n"
LDR             R0, =aBuiltInCommand ; "Built-in commands:\n------------------"...
BL              sub_2BEA0
MOV             R1, #9

loc_2C228
LDR             R2, [R6,R4,LSL#3]
MOV             R0, R7
ADD             R2, R2, #1
BL              sub_2BEA0
ADD             R5, R5, R0
CMP             R5, #0x3C ; '<'
BLS             loc_2C250
MOV             R5, #0
MOV             R0, R8
BL              sub_2BEA0

loc_2C250
ADD             R4, R4, #1
CMP             R4, #0x2C ; ','
BNE             loc_2C270
LDR             R3, =stdout
LDR             R0, [R3] ; stream
BL              sub_2AAFC
MOV             R0, #0
POP             {R4-R8,PC}

loc_2C270
CMP             R5, #0
MOVEQ           R1, #9
MOVNE           R1, #0x20 ; ' '
B               loc_2C228
; End of function sub_2C204

off_2C280 DCD off_635B4 ; "3."
off_2C284 DCD aCSCS+4   ; "%c%s"
off_2C288 DCD aShellReturnedI+0x13 ; "\n"
off_2C28C DCD aBuiltInCommand ; "Built-in commands:\n------------------"...
off_2C290 DCD stdout



; int __fastcall sub_2C294(int)
sub_2C294
LDR             R3, =stderr
PUSH            {R4,LR}
LDR             R1, [R3]
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
BL              fputs_unlocked
BL              loc_2A270
POP             {R4,LR}
B               sub_2A2A4
; End of function sub_2C294

off_2C2C4 DCD stderr
off_2C2C8 DCD dword_7DBB0



; int sub_2C2CC()
sub_2C2CC
LDR             R3, =dword_7DBB0
PUSH            {R4-R6,LR}
LDR             R5, [R3]
LDR             R0, [R5,#4]
CMP             R0, #0
BNE             loc_2C318
LDR             R3, =dword_7D6AC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_2C318
LDRB            R4, [R3,#0x18]
CMP             R4, #1
POPNE           {R4-R6,PC}
LDR             R0, =aYouHaveStopped ; "You have stopped jobs.\n"
BL              sub_2C294
MOV             R3, #2
MOV             R0, R4
STR             R3, [R5,#4]
POP             {R4-R6,PC}

loc_2C318
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_2C2CC

off_2C320 DCD dword_7DBB0
off_2C324 DCD dword_7D6AC
off_2C328 DCD aYouHaveStopped ; "You have stopped jobs.\n"



; int __fastcall sub_2C32C(int, int)
sub_2C32C
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_2C2CC
CMP             R0, #0
BNE             loc_2C364
LDR             R0, [R4,#4]
CMP             R0, #0
BEQ             loc_2C35C
BL              sub_2AF8C
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
STRB            R0, [R3]

loc_2C35C
MOV             R0, #4
BL              sub_29EE0

loc_2C364
MOV             R0, #0
POP             {R4,PC}
; End of function sub_2C32C

off_2C36C DCD dword_7DBB0



; void *__fastcall sub_2C370(size_t)
sub_2C370
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_2B208
MOV             R2, R4  ; n
MOV             R1, #0  ; c
POP             {R4,LR}
B               memset
; End of function sub_2C370




; _DWORD *sub_2C38C()
sub_2C38C
PUSH            {R4,LR}
MOV             R0, #0x10
BL              sub_2C370
MOV             R2, #0xF
STR             R2, [R0]
LDR             R2, =dword_7D738
LDR             R2, [R2]
STR             R2, [R0,#8]
LDR             R2, =dword_7D648
LDR             R2, [R2]
STR             R2, [R0,#0xC]
POP             {R4,PC}
; End of function sub_2C38C

off_2C3BC DCD dword_7D738
off_2C3C0 DCD dword_7D648



; void *__fastcall sub_2C3C4(const char *)
sub_2C3C4
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, #8
BL              sub_2C370
MOV             R4, R0
MOV             R0, R5
BL              sub_2B310
LDR             R3, =dword_7D6BC
STR             R0, [R4,#4]
LDR             R2, [R3,#(dword_7D6C0 - 0x7D6BC)]
STR             R4, [R2]
STR             R4, [R3,#(dword_7D6C0 - 0x7D6BC)]
POP             {R4-R6,PC}
; End of function sub_2C3C4

off_2C3F8 DCD dword_7D6BC



; void *__fastcall sub_2C3FC(const void *)
sub_2C3FC

compar= -0xC

LDR             R3, =compar
PUSH            {R0-R2,LR}
MOV             R2, #0x2C ; ',' ; nmemb
LDR             R1, =off_635B4 ; base
STR             R3, [SP,#0xC+compar] ; compar
MOV             R3, #8  ; size
BL              bsearch
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2C3FC

off_2C420 DCD compar
off_2C424 DCD off_635B4 ; "3."



; void *__fastcall sub_2C428(const void *)
sub_2C428

compar= -0xC

LDR             R3, =sub_29E14
PUSH            {R0-R2,LR}
MOV             R2, #0x11 ; nmemb
LDR             R1, =off_6378C ; base
STR             R3, [SP,#0xC+compar] ; compar
MOV             R3, #4  ; size
BL              bsearch
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2C428

off_2C44C DCD sub_29E14
off_2C450 DCD off_6378C ; "!"



; int sub_2C454(char *, size_t, const char *, ...)
sub_2C454

var_4= -4
varg_r2=  8
varg_r3=  0xC

PUSH            {R2,R3}
LDR             R3, =dword_7DBB0
PUSH            {R0,R1,R4,LR}
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
ADD             R3, SP, #8+varg_r3 ; arg
LDR             R2, [SP,#8+varg_r2] ; format
STR             R3, [SP,#8+var_4]
BL              vsnprintf
MOV             R4, R0
BL              loc_2A270
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4,LR}
ADD             SP, SP, #8
BX              LR
; End of function sub_2C454

off_2C49C DCD dword_7DBB0



; int __fastcall sub_2C4A0(char *, __int16, int)
sub_2C4A0
PUSH            {R4-R6,LR}
ANDS            R4, R1, #0x7F
BEQ             loc_2C524
UXTB            R3, R1
MOV             R6, R0
CMP             R3, #0x7F
BNE             loc_2C508
CMP             R2, #0
UBFX            R4, R1, #8, #8
BNE             loc_2C51C

loc_2C4C8
AND             R0, R4, #0x7F
MOV             R5, R1
BL              strsignal
MOV             R1, #0x20 ; ' '
MOV             R2, R0
MOV             R0, R6
BL              sub_2C454
TST             R5, #0x80
MOV             R4, R0
BEQ             loc_2C500
ADD             R4, R4, #0xE
LDR             R1, =aCoreDumped ; " (core dumped)"
ADD             R0, R6, R0 ; dest
BL              strcpy

loc_2C500
MOV             R0, R4
POP             {R4-R6,PC}

loc_2C508
CMP             R2, #0
BEQ             loc_2C4C8
CMP             R4, #0xD
CMPNE           R4, #2
BNE             loc_2C4C8

loc_2C51C
MOV             R4, #0
B               loc_2C500

loc_2C524
CMP             R2, #0
BNE             loc_2C500
UBFX            R3, R1, #8, #8
LDR             R1, =aDone ; "Done"
CMP             R3, #0
LDR             R2, =aDoneD ; "Done(%d)"
POP             {R4-R6,LR}
MOVEQ           R2, R1
MOV             R1, #0x10
B               sub_2C454
; End of function sub_2C4A0

off_2C54C DCD aCoreDumped ; " (core dumped)"
off_2C550 DCD aDone     ; "Done"
off_2C554 DCD aDoneD    ; "Done(%d)"



; __pid_t __fastcall sub_2C558(int, int)
sub_2C558

stat_loc= -0x88
set= -0x84
var_4= -4

LDR             R3, =dword_7DBB0
PUSH            {R4-R9,LR}
MOV             R6, R1
SUB             SP, SP, #0x8C
LDR             R5, [R3]
LDR             R3, [R5,#0x28]
ADD             R3, R3, #1
STR             R3, [R5,#0x28]
CMP             R0, #2
LDR             R8, =dword_7D6B0
BNE             loc_2C670
MOV             R9, #0

loc_2C588
LDR             R3, [R8]
ADD             R1, SP, #0x8C+stat_loc ; stat_loc
STR             R9, [R5,#0x30]
MOV             R0, #0xFFFFFFFF ; pid
CMP             R3, #0
MOVEQ           R2, #1
MOVNE           R2, #3  ; options
BL              waitpid
SUBS            R7, R0, #0
BNE             loc_2C690
ADD             R0, SP, #0x8C+set ; set
BL              sigfillset
ADD             R2, SP, #0x8C+set ; oset
MOV             R0, #2  ; how
MOV             R1, R2  ; set
BL              sigprocmask

loc_2C5C8
LDR             R3, [R5,#0x30]
CMP             R3, #0
BNE             loc_2C5E0
LDR             R3, [R5,#0x34]
CMP             R3, #0
BEQ             loc_2C664

loc_2C5E0               ; oset
MOV             R2, #0
ADD             R1, SP, #0x8C+set ; set
MOV             R0, #2  ; how
BL              sigprocmask
LDR             R4, [R5,#0x30]
CMP             R4, #0
BNE             loc_2C588

loc_2C5FC
SUB             R6, R4, R6
CLZ             R6, R6
MOV             R6, R6,LSR#5
BL              loc_2A270
CMP             R4, #0
MOVNE           R4, R6
MOVEQ           R4, #0
CMP             R4, #0
BEQ             loc_2C658
MOV             R2, #1
LDR             R1, [SP,#0x8C+stat_loc]
ADD             R0, SP, #0x8C+set
BL              sub_2C4A0
CMP             R0, #0
BEQ             loc_2C658
ADD             R3, SP, #0x8C+var_4
ADD             R0, R3, R0
MOV             R3, #0xA
STRB            R3, [R0,#-0x80]
MOV             R3, #0
STRB            R3, [R0,#-0x7F]
ADD             R0, SP, #0x8C+set
BL              sub_2C294

loc_2C658
MOV             R0, R7
ADD             SP, SP, #0x8C
POP             {R4-R9,PC}

loc_2C664               ; set
ADD             R0, SP, #0x8C+set
BL              sigsuspend
B               loc_2C5C8

loc_2C670
LDR             R3, [R8]
EOR             R2, R0, #1
ADD             R1, SP, #0x8C+stat_loc ; stat_loc
MOV             R0, #0xFFFFFFFF ; pid
CMP             R3, #0
ORRNE           R2, R2, #2 ; options
BL              waitpid
MOV             R7, R0

loc_2C690
CMP             R7, #0
MOVLE           R4, #0
BLE             loc_2C5FC
LDR             R3, =dword_7D6AC
MOV             R5, #0xC
LDR             R1, [SP,#0x8C+stat_loc]
LDR             R3, [R3]

loc_2C6AC
CMP             R3, #0
BNE             loc_2C6D4
UXTB            R1, R1
MOV             R4, R3
CMP             R1, #0x7F
LDRNE           R1, =dword_7D6F8
LDRNE           R2, [R1]
SUBNE           R2, R2, #1
STRNE           R2, [R1]
B               loc_2C5FC

loc_2C6D4
LDRB            R2, [R3,#0x18]
CMP             R2, #2
BEQ             loc_2C778
LDR             R2, [R3,#0xC]
MOV             LR, #2
LDR             R0, [R3,#0x14]
MOV             R4, #0
MLA             R0, R5, R0, R2

loc_2C6F4
LDR             R12, [R2]
CMP             R12, R7
STREQ           R1, [R2,#4]
MOVEQ           R4, R3
LDR             R12, [R2,#4]
CMN             R12, #1
CMPNE           LR, #0
MOVEQ           LR, #0
BEQ             loc_2C728
UXTB            R8, R12
CMP             R8, #0x7F
MOVEQ           LR, #1
STREQ           R12, [R3,#0x10]

loc_2C728
ADD             R2, R2, #0xC
CMP             R0, R2
BHI             loc_2C6F4
CMP             R4, #0
BEQ             loc_2C778
CMP             LR, #0
BEQ             loc_2C5FC
LDRB            R3, [R4,#0x19]
ORR             R3, R3, #0x10
STRB            R3, [R4,#0x19]
LDRB            R3, [R4,#0x18]
CMP             R3, LR
BEQ             loc_2C5FC
CMP             LR, #1
STRB            LR, [R4,#0x18]
BNE             loc_2C5FC
MOV             R1, #0
MOV             R0, R4
BL              sub_29708
B               loc_2C5FC

loc_2C778
LDR             R3, [R3,#0x1C]
B               loc_2C6AC
; End of function sub_2C558

off_2C780 DCD dword_7DBB0
off_2C784 DCD dword_7D6B0
off_2C788 DCD dword_7D6AC
off_2C78C DCD dword_7D6F8



; int sub_2C790()
sub_2C790
LDR             R3, =dword_7DBB0
PUSH            {R4-R10,LR}
LDR             R6, [R3]
ADD             R0, R6, #0x3C ; '<'
BL              sub_2B480
LDR             R3, =dword_7D640
LDR             R7, [R3]
LDR             R3, [R7]
CMP             R3, #0
BNE             loc_2C804
LDR             R4, =dword_7D6AC

loc_2C7BC
LDR             R0, [R4]

loc_2C7C0
CMP             R0, #0
BEQ             loc_2C8AC
LDRB            R1, [R0,#0x18]
CMP             R1, #0
LDRBNE          R3, [R0,#0x19]
ORRNE           R3, R3, #4
STRBNE          R3, [R0,#0x19]
LDRNE           R0, [R0,#0x1C]
BNE             loc_2C7C0
MOV             R0, #2
BL              sub_2C558
LDR             R3, [R6,#0x34]
CMP             R3, #0
BEQ             loc_2C7BC

loc_2C7F8
LDR             R0, [R6,#0x34]
ADD             R4, R0, #0x80
B               loc_2C88C

loc_2C804
LDR             R8, =dword_7D6AC
MOV             R4, #0x7F
MOV             R9, #0xC

loc_2C810
LDR             R0, [R7]
LDRB            R3, [R0]
CMP             R3, #0x25 ; '%'
BEQ             loc_2C850
BL              sub_2AF8C
LDR             R5, [R8]

loc_2C828
CMP             R5, #0
BEQ             loc_2C880
LDR             R3, [R5,#0x14]
LDR             R2, [R5,#0xC]
MLA             R3, R9, R3, R2
LDR             R3, [R3,#-0xC]
CMP             R3, R0
BEQ             loc_2C85C
LDR             R5, [R5,#0x1C]
B               loc_2C828

loc_2C850
MOV             R1, #0
BL              sub_2B738
MOV             R5, R0

loc_2C85C
LDRB            R1, [R5,#0x18]
CMP             R1, #0
BEQ             loc_2C894
LDRB            R3, [R5,#0x19]
MOV             R0, R5
ORR             R3, R3, #4
STRB            R3, [R5,#0x19]
BL              sub_29780
MOV             R4, R0

loc_2C880
LDR             R3, [R7,#4]!
CMP             R3, #0
BNE             loc_2C810

loc_2C88C
MOV             R0, R4
POP             {R4-R10,PC}

loc_2C894
MOV             R0, #2
BL              sub_2C558
LDR             R3, [R6,#0x34]
CMP             R3, #0
BNE             loc_2C7F8
B               loc_2C85C

loc_2C8AC
MOV             R4, R0
B               loc_2C88C
; End of function sub_2C790

off_2C8B4 DCD dword_7DBB0
off_2C8B8 DCD dword_7D640
off_2C8BC DCD dword_7D6AC



; int __fastcall sub_2C8C0(int)
sub_2C8C0
LDR             R3, =dword_7DBB0
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R1, [R3]
LDR             R2, [R1,#0x28]
ADD             R2, R2, #1
STR             R2, [R1,#0x28]
MOV             R5, R3

loc_2C8E0
LDRB            R3, [R4,#0x18]
CMP             R3, #0
BEQ             loc_2C94C
BL              loc_2A270
MOV             R0, R4
BL              sub_29780
LDRB            R3, [R4,#0x19]
MOV             R6, R0
TST             R3, #2
BEQ             loc_2C930
LDR             R3, [R5]
LDR             R1, [R3,#8]
LDR             R3, =dword_7D4D4
LDR             R0, [R3]
BL              sub_2B1EC
LDRB            R3, [R4,#0x19]
TST             R3, #1
BEQ             loc_2C930
MOV             R0, #2  ; sig
BL              raise

loc_2C930
LDRB            R3, [R4,#0x18]
CMP             R3, #2
BNE             loc_2C944
MOV             R0, R4
BL              sub_2A9BC

loc_2C944
MOV             R0, R6
POP             {R4-R6,PC}

loc_2C94C
MOV             R1, R4
MOV             R0, #1
BL              sub_2C558
B               loc_2C8E0
; End of function sub_2C8C0

off_2C95C DCD dword_7DBB0
off_2C960 DCD dword_7D4D4



; int __fastcall sub_2C964(int, char, int, int *)
sub_2C964

var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_54= -0x54
var_4= -4

TST             R1, #8
PUSH            {R4-R11,LR}
LDRNE           R3, =stderr
SUB             SP, SP, #0x64
MOV             R4, R0
MOV             R6, R1
LDREQ           R3, =stdout
TST             R1, #1
LDR             R5, [R0,#0xC]
LDR             R8, [R3]
BEQ             loc_2C9A8
LDR             R2, [R5]
MOV             R0, R8  ; stream
LDR             R1, =(aSLineDUartSPor+0x2A) ; "%d\n"
BL              fprintf

loc_2C9A0
ADD             SP, SP, #0x64 ; 'd'
POP             {R4-R11,PC}

loc_2C9A8
LDR             R3, =dword_7D6FC
MOV             R1, #0x10
LDR             R2, =aD_0 ; "[%d]   "
LDR             R3, [R3]
SUB             R3, R0, R3
ADD             R0, SP, R1
MOV             R3, R3,ASR#5
ADD             R3, R3, #1
BL              sub_2C454
LDR             R3, =dword_7D6AC
MOV             R7, R0
LDR             R3, [R3]
CMP             R3, R4
MOVEQ           R2, #0x2B ; '+'
BEQ             loc_2C9FC
CMP             R3, #0
BEQ             loc_2CA08
LDR             R3, [R3,#0x1C]
CMP             R3, R4
BNE             loc_2CA08
MOV             R2, #0x2D ; '-'

loc_2C9FC
ADD             R3, SP, #0x64+var_4
ADD             R3, R3, R7
STRB            R2, [R3,#-0x53]

loc_2CA08
ANDS            R6, R6, #2
ADD             R3, SP, #0x64+var_54
ADD             R0, R3, R7
MOVEQ           R10, R7
BEQ             loc_2CA30
LDR             R3, [R5]
MOV             R1, #0x10
LDR             R2, =(aMetricD+8) ; "%d "
BL              sub_2C454
ADD             R10, R7, R0

loc_2CA30
LDR             R9, [R4,#0x14]
MOV             R3, #0xC
ADD             R2, SP, #0x64+var_54
ADD             R0, R2, R10 ; dest
MLA             R9, R3, R9, R5
LDRB            R3, [R4,#0x18]
CMP             R3, #0
BNE             loc_2CAD8
LDR             R1, =aRunning ; "Running"
BL              strcpy
ADD             R0, R10, #7

loc_2CA5C
LDR             R11, =(asc_67EE7+1) ; "| "

loc_2CA60
LDR             R3, [R4,#0xC]
RSB             R0, R0, #0x21 ; '!'
LDR             R2, =(asc_6B39D+1) ; ""
MOV             R10, #0x20 ; ' '
LDR             R1, =aSCSS ; "%s%*c%s%s"
CMP             R3, R5
ADD             R5, R5, #0xC
MOVNE           R2, R11
MOV             R3, R2
LDR             R2, [R5,#-4]
STR             R3, [SP,#0x64+var_60]
BIC             R3, R0, R0,ASR#31
STR             R10, [SP,#0x64+var_64]
MOV             R0, R8  ; stream
STR             R2, [SP,#0x64+var_5C]
ADD             R2, SP, #0x64+var_54
BL              fprintf
CMP             R9, R5
BNE             loc_2CAF4
MOV             R0, R8  ; stream
BL              sub_2AAFC
LDRB            R3, [R4,#0x19]
BFC             R3, #4, #1
STRB            R3, [R4,#0x19]
LDRB            R3, [R4,#0x18]
CMP             R3, #2
BNE             loc_2C9A0
MOV             R0, R4
BL              sub_2A9BC
B               loc_2C9A0

loc_2CAD8
CMP             R3, #1
LDR             R1, [R9,#-8]
MOV             R2, #0
LDREQ           R1, [R4,#0x10]
BL              sub_2C4A0
ADD             R0, R10, R0
B               loc_2CA5C

loc_2CAF4
MOV             R3, #0
CMP             R6, R3
STRB            R3, [SP,#0x64+var_54]
MOVEQ           R0, #0x21 ; '!'
BEQ             loc_2CA60
LDR             R3, [R5]
MOV             R1, #0x30 ; '0'
STR             R10, [SP,#0x64+var_64]
ADD             R0, SP, #0x64+var_54
LDR             R2, =aCD ; "\n%*c%d "
STR             R3, [SP,#0x64+var_60]
MOV             R3, R7
BL              sub_2C454
SUB             R0, R0, #1
B               loc_2CA60
; End of function sub_2C964

off_2CB30 DCD stderr
off_2CB34 DCD stdout
off_2CB38 DCD aSLineDUartSPor+0x2A ; "%d\n"
off_2CB3C DCD dword_7D6FC
off_2CB40 DCD aD_0      ; "[%d]   "
off_2CB44 DCD dword_7D6AC
off_2CB48 DCD aMetricD+8 ; "%d "
off_2CB4C DCD aRunning  ; "Running"
off_2CB50 DCD asc_67EE7+1 ; "| "
off_2CB54 DCD asc_6B39D+1 ; ""
off_2CB58 DCD aSCSS     ; "%s%*c%s%s"
off_2CB5C DCD aCD       ; "\n%*c%d "



; __pid_t __fastcall sub_2CB60(char)
sub_2CB60
PUSH            {R4-R6,LR}
MOV             R5, R0

loc_2CB68
MOV             R1, #0
MOV             R0, R1
BL              sub_2C558
CMP             R0, #0
BGT             loc_2CB68
LDR             R3, =dword_7D6AC
AND             R6, R5, #4
LDR             R4, [R3]

loc_2CB88
CMP             R4, #0
POPEQ           {R4-R6,PC}
CMP             R6, #0
BEQ             loc_2CBA4
LDRB            R3, [R4,#0x19]
TST             R3, #0x10
BEQ             loc_2CBB0

loc_2CBA4
MOV             R1, R5
MOV             R0, R4
BL              sub_2C964

loc_2CBB0
LDR             R4, [R4,#0x1C]
B               loc_2CB88
; End of function sub_2CB60

off_2CBB8 DCD dword_7D6AC



; int sub_2CBBC()
sub_2CBBC
PUSH            {R4-R6,LR}
MOV             R4, #0
LDR             R5, =(aHelp+4) ; "lp"

loc_2CBC8
MOV             R0, R5
BL              sub_2B480
CMP             R0, #0
BNE             loc_2CC14
LDR             R3, =dword_7D640
LDR             R5, [R3]
LDR             R3, [R5]
CMP             R3, #0
BEQ             loc_2CC24

loc_2CBEC
MOV             R1, #0
LDR             R0, [R5]
BL              sub_2B738
MOV             R1, R4
BL              sub_2C964
LDR             R3, [R5,#4]!
CMP             R3, #0
BNE             loc_2CBEC

loc_2CC0C
MOV             R0, #0
POP             {R4-R6,PC}

loc_2CC14
CMP             R0, #0x6C ; 'l'
ORREQ           R4, R4, #2
ORRNE           R4, R4, #1
B               loc_2CBC8

loc_2CC24
MOV             R0, R4
BL              sub_2CB60
B               loc_2CC0C
; End of function sub_2CBBC

off_2CC30 DCD aHelp+4   ; "lp"
off_2CC34 DCD dword_7D640



; int sub_2CC38()
sub_2CC38

var_18= -0x18
s= -0x17

PUSH            {R4-R7,LR}
MOV             R6, #0
LDR             R4, =(aYMDHMS+0x10) ; "S"
SUB             SP, SP, #0x1C

loc_2CC48
MOV             R0, R4
BL              sub_2B480
CMP             R0, #0
BNE             loc_2CD1C
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
BL              umask
MOV             R4, R0
BL              umask
BL              loc_2A270
LDR             R3, =dword_7D640
LDR             R3, [R3]
LDR             R5, [R3]
CMP             R5, #0
BNE             loc_2CD34
CMP             R6, #0
BEQ             loc_2CD24
LDR             R12, =aOgutmout ; "oguTMOUT"
MOV             R2, #2
ADD             R3, SP, #0x1C+var_18
MOV             R0, #0x2C ; ','
MOV             LR, #0x3D ; '='
MOV             R5, #0x72 ; 'r'
MOV             R6, #0x77 ; 'w'
MOV             R7, #0x78 ; 'x'

loc_2CCB8
LDRB            R1, [R2,R12]
TST             R4, #0x100
STRBEQ          R5, [R3,#3]
STRB            R0, [R3]
STRB            R1, [R3,#1]
ADD             R1, R3, #3
ADDEQ           R1, R3, #4
TST             R4, #0x80
STRB            LR, [R3,#2]
ADDEQ           R3, R1, #1
STRBEQ          R6, [R1]
MOVNE           R3, R1
TST             R4, #0x40
MOV             R4, R4,LSL#3
STRBEQ          R7, [R3]
ADDEQ           R3, R3, #1
SUBS            R2, R2, #1
BCS             loc_2CCB8
MOV             R2, #0
ADD             R0, SP, #0x1C+s ; s
STRB            R2, [R3]
BL              puts

loc_2CD10
MOV             R0, #0
ADD             SP, SP, #0x1C
POP             {R4-R7,PC}

loc_2CD1C
MOV             R6, #1
B               loc_2CC48

loc_2CD24
MOV             R1, R4
LDR             R0, =a04o ; "%04o\n"
BL              sub_2BEA0
B               loc_2CD10

loc_2CD34
LDRB            R3, [R5]
MOV             R0, R5  ; int
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
EORHI           R4, R4, #0x1FC
EORHI           R4, R4, #3
MOV             R1, R4  ; nptr
BL              sub_5E0F4
CMP             R0, #0x200
BCC             loc_2CD68
MOV             R1, R5
LDR             R0, =aIllegalModeS ; "illegal mode: %s"
BL              sub_2ABFC

loc_2CD68
LDRB            R3, [R5]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
EORHI           R0, R0, #0x1FC
EORHI           R0, R0, #3 ; mask
BL              umask
B               loc_2CD10
; End of function sub_2CC38

off_2CD84 DCD aYMDHMS+0x10 ; "S"
off_2CD88 DCD dword_7DBB0
off_2CD8C DCD dword_7D640
off_2CD90 DCD aOgutmout ; "oguTMOUT"
off_2CD94 DCD a04o      ; "%04o\n"
off_2CD98 DCD aIllegalModeS ; "illegal mode: %s"

loc_2CD9C
MOV             R0, R1
B               loc_375A4



; unsigned __int8 *__fastcall sub_2CDA4(unsigned __int8 *, char *name, int, char *pattern, int, int)
sub_2CDA4

arg_0=  0x24
arg_4=  0x28

PUSH            {R3-R11,LR}
MOV             R7, R1
LDR             R9, [SP,#4+arg_0]
MOV             R8, R3
MOV             R5, R1
MOV             R4, R0
LDR             R10, [SP,#4+arg_4]
MOV             R11, #0

loc_2CDC4
MOV             R1, R5
LDRB            R6, [R5],#1
CMP             R10, #0
MOV             R2, #0  ; flags
MOVNE           R1, R7  ; name
MOV             R0, R8  ; pattern
STRBNE          R11, [R5,#-1]
BL              fnmatch
CMP             R0, #0
STRB            R6, [R5,#-1]
BEQ             loc_2CE18
CMP             R9, #0
ADD             R3, R4, #1
BEQ             loc_2CE08
LDRB            R2, [R4]
CMP             R2, #0x81
MOVEQ           R4, R3

loc_2CE08
CMP             R6, #0
ADD             R4, R4, #1
BNE             loc_2CDC4
MOV             R4, R6

loc_2CE18
MOV             R0, R4
POP             {R3-R11,PC}
; End of function sub_2CDA4




; char *__fastcall sub_2CE20(unsigned int, char *name, char *, char *pattern, int, int)
sub_2CE20

arg_0=  0x24
arg_4=  0x28

PUSH            {R3-R11,LR}
MOV             R4, #0
MOV             R7, R0
MOV             R9, R1
MOV             R8, R3
SUB             R5, R3, #1
MOV             R6, R2
MOV             R11, R4

loc_2CE40
CMP             R5, R7
BCS             loc_2CE54
MOV             R5, #0

loc_2CE4C
MOV             R0, R5
POP             {R3-R11,PC}

loc_2CE54
LDR             R3, [SP,#4+arg_4]
MOV             R2, #0  ; flags
LDRB            R10, [R6]
MOV             R0, R8  ; pattern
CMP             R3, #0
STRBNE          R11, [R6]
MOVEQ           R1, R6
MOVNE           R1, R9  ; name
BL              fnmatch
CMP             R0, #0
STRB            R10, [R6],#-1
BEQ             loc_2CE4C
LDR             R2, [SP,#4+arg_0]
SUB             R3, R5, #1
CMP             R2, #0
BEQ             loc_2CEC4
SUBS            R4, R4, #1
BPL             loc_2CEB8
MOV             R2, R3

loc_2CEA0
CMP             R7, R2
SUB             R4, R3, R2
BCS             loc_2CEB8
LDRB            R1, [R2,#-1]!
CMP             R1, #0x81
BEQ             loc_2CEA0

loc_2CEB8
TST             R4, #1
SUBNE           R4, R4, #1
SUBNE           R3, R5, #2

loc_2CEC4
MOV             R5, R3
B               loc_2CE40
; End of function sub_2CE20




; __int64 __fastcall sub_2CECC(unsigned __int8 *)
sub_2CECC

var_14= -0x14
var_10= -0x10
var_C= -0xC

LDR             R3, =sub_2F2F4
MOV             R1, R0
PUSH            {R4,R5,LR}
SUB             SP, SP, #0x14
STR             R3, [SP,#0x14+var_10]
LDR             R3, =sub_2AF84
STR             R3, [SP,#0x14+var_C]
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
MOV             R0, SP
BL              sub_36E9C
MOV             R4, R0
LDR             R0, [SP,#0x14+var_14]
CMP             R0, #0
BEQ             loc_2CF18
BL              sub_2ABFC

loc_2CF18
MOV             R5, R1
BL              loc_2A270
MOV             R0, R4
MOV             R1, R5
ADD             SP, SP, #0x14
POP             {R4,R5,PC}
; End of function sub_2CECC

off_2CF30 DCD sub_2F2F4
off_2CF34 DCD sub_2AF84
off_2CF38 DCD dword_7DBB0



; int __fastcall sub_2CF3C(unsigned __int8 *)
sub_2CF3C
PUSH            {R4,LR}
BL              sub_2CECC
MOV             R2, #0x80000000
MOV             R3, #0xFFFFFFFF
CMP             R0, R2
SBCS            R12, R1, R3
MOVLT           R0, R2
MOV             R2, #0x7FFFFFFF
MOVLT           R1, R3
CMP             R2, R0
MOV             R3, #0
SBCS            R12, R3, R1
MOVLT           R0, R2
POP             {R4,PC}
; End of function sub_2CF3C




; bool __fastcall sub_2CF74(int, int)
sub_2CF74
LDR             R3, [R1,#4]
PUSH            {R4,LR}
CMP             R3, #0
BNE             loc_2CF8C
LDR             R0, =aExpressionExpe ; "expression expected"
BL              sub_2ABFC

loc_2CF8C
ADD             R4, R1, #4

loc_2CF90
LDR             R0, [R4]
BL              sub_2CECC
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_2CF90
ORRS            R3, R0, R1
MOVEQ           R0, #1
MOVNE           R0, #0
POP             {R4,PC}
; End of function sub_2CF74

off_2CFB4 DCD aExpressionExpe ; "expression expected"



; int __fastcall sub_2CFB8(int)
sub_2CFB8
PUSH            {R4-R10,LR}
MOV             R8, R0
LDR             R6, =dword_7D718
MOVW            R12, #0x402
LDR             R9, =dword_7D6FC
LDR             R7, =dword_7D6B0
LDR             R3, [R6]
LDR             R5, [R9]
LDR             R0, [R7]
MOV             R1, R3
MOV             R4, R5

loc_2CFE4
SUBS            R1, R1, #1
BPL             loc_2D100
MOV             R10, R3,LSL#5
MOV             R0, R5
ADD             R1, R10, #0x80
BL              sub_174B4
SUBS            R12, R0, R5
ADD             R4, R0, R10
MOVNE           R2, R4
MOVNE           R3, R10
BNE             loc_2D0E0

loc_2D010
LDR             R3, [R6]
STR             R0, [R9]
ADD             R3, R3, #4
STR             R3, [R6]
LDRB            R3, [R4,#0x79]
BFC             R3, #3, #1
STRB            R3, [R4,#0x79]
LDRB            R3, [R4,#0x59]
BFC             R3, #3, #1
STRB            R3, [R4,#0x59]
LDRB            R3, [R4,#0x39]
BFC             R3, #3, #1
STRB            R3, [R4,#0x39]
LDRB            R3, [R4,#0x19]
BFC             R3, #3, #1
STRB            R3, [R4,#0x19]

loc_2D050               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
MOV             R0, R4  ; s
BL              memset
LDR             R3, [R7]
STR             R4, [R4,#0xC]
CMP             R3, #0
LDRBNE          R3, [R4,#0x19]
ORRNE           R3, R3, #2
STRBNE          R3, [R4,#0x19]
CMP             R8, #1
LDR             R3, =dword_7D6AC
LDR             R2, [R3]
STR             R4, [R3]
LDRB            R3, [R4,#0x19]
STR             R2, [R4,#0x1C]
ORR             R3, R3, #8
STRB            R3, [R4,#0x19]
BLE             loc_2D0AC
MOV             R0, #0xC
MUL             R0, R0, R8
BL              sub_1748C
STR             R0, [R4,#0xC]

loc_2D0AC
MOV             R0, R4
POP             {R4-R10,PC}

loc_2D0B4
LDR             R1, [R2,#-0x14]
SUB             R3, R3, #0x20 ; ' '
ADD             LR, R5, R3
SUB             R2, R2, #0x20 ; ' '
CMP             R1, LR
ADDEQ           R1, R1, R12
STREQ           R1, [R2,#0xC]
LDR             R1, [R2,#0x1C]
CMP             R1, #0
ADDNE           R1, R1, R12
STRNE           R1, [R2,#0x1C]

loc_2D0E0
CMP             R3, #0
BNE             loc_2D0B4
LDR             R2, =dword_7D6AC
LDR             R3, [R2]
CMP             R3, #0
ADDNE           R3, R3, R12
STRNE           R3, [R2]
B               loc_2D010

loc_2D100
LDRB            R2, [R4,#0x19]
TST             R2, #8
BEQ             loc_2D050
LDRH            R2, [R4,#0x18]
BIC             R2, R2, #0xFB00
CMP             R2, R12
BNE             loc_2D130
CMP             R0, #0
BNE             loc_2D130
MOV             R0, R4
BL              sub_2A9BC
B               loc_2D050

loc_2D130
ADD             R4, R4, #0x20 ; ' '
B               loc_2CFE4
; End of function sub_2CFB8

off_2D138 DCD dword_7D718
off_2D13C DCD dword_7D6FC
off_2D140 DCD dword_7D6B0
off_2D144 DCD dword_7D6AC



; char *sub_2D148()
sub_2D148

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =dword_7DBB8
PUSH            {R4-R8,LR}
LDR             R5, [R3]
LDR             R6, [R5,#0xC]
MOV             R4, R6,LSL#1
CMP             R6, R4
BLS             loc_2D16C
LDR             R0, =aOutOfMemory ; "out of memory"
BL              sub_2ABFC

loc_2D16C
LDM             R5, {R2,R7}
CMP             R4, #0x7F
ADDLS           R4, R4, #0x80
ADD             R1, R2, #4
CMP             R7, R1
BNE             loc_2D1DC
ADD             R1, R5, #0x10
CMP             R2, R1
BEQ             loc_2D1DC
LDR             R2, =dword_7DBB0
LDR             R1, [R2]
LDR             R2, [R1,#0x28]
ADD             R2, R2, #1
STR             R2, [R1,#0x28]
LDR             R5, [R3]
ADD             R1, R4, #4
LDR             R0, [R5]
LDR             R6, [R0]
BL              sub_174B4
STR             R6, [R0]
STR             R0, [R5]
ADD             R0, R0, #4
STR             R0, [R5,#4]
ADD             R0, R0, R4
STR             R4, [R5,#0xC]
STR             R0, [R5,#8]
POP             {R4-R8,LR}
B               loc_2A270

loc_2D1DC
MOV             R0, R4
BL              sub_2B208
MOV             R2, R6  ; n
MOV             R1, R7  ; src
BL              memcpy
LDR             R3, [R5,#0xC]
STR             R0, [R5,#4]
ADD             R4, R3, R4
STR             R4, [R5,#0xC]
POP             {R4-R8,PC}
; End of function sub_2D148

off_2D204 DCD dword_7DBB8
off_2D208 DCD aOutOfMemory ; "out of memory"
off_2D20C DCD dword_7DBB0



; int __fastcall sub_2D210(unsigned int, int)
sub_2D210
LDR             R3, =dword_7DBB8
PUSH            {R4-R6,LR}
MOV             R6, R0
LDR             R5, [R3]
LDR             R4, [R5,#4]
SUB             R4, R1, R4

loc_2D228
LDR             R3, [R5,#0xC]
SUB             R3, R3, R4
CMP             R3, R6
BCS             loc_2D240
BL              sub_2D148
B               loc_2D228

loc_2D240
LDR             R0, [R5,#4]
ADD             R0, R0, R4
POP             {R4-R6,PC}
; End of function sub_2D210

off_2D24C DCD dword_7DBB8



; int __fastcall sub_2D250(const char *)
sub_2D250
LDR             R3, =dword_7DBB8
PUSH            {R4-R10,LR}
MOV             R5, R0
MOV             R10, #0x27 ; '''
MOV             R9, #0x22 ; '"'
LDR             R8, [R3]
LDR             R4, [R8,#4]

loc_2D26C
MOV             R1, #0x27 ; '''
MOV             R0, R5
BL              strchrnul
SUB             R6, R0, R5
MOV             R1, R4
MOV             R7, R0
ADD             R0, R6, #3
BL              sub_2D210
MOV             R2, R6  ; n
STRB            R10, [R0],#1 ; dest
MOV             R1, R5  ; src
BL              memcpy
STRB            R10, [R0,R6]
ADD             R4, R0, R6
LDRB            R3, [R7]
ADD             R4, R4, #1
CMP             R3, #0x27 ; '''
BNE             loc_2D304
MOV             R5, R7
MOV             R6, #0

loc_2D2BC
LDRB            R3, [R5,#1]!
ADD             R7, R6, #1
CMP             R3, #0x27 ; '''
BEQ             loc_2D314
MOV             R1, R4
ADD             R0, R6, #4
BL              sub_2D210
MVN             R1, R6
STRB            R9, [R0],#1 ; dest
MOV             R2, R7  ; n
ADD             R1, R5, R1 ; src
BL              memcpy
STRB            R9, [R0,R7]
ADD             R4, R0, R7
LDRB            R3, [R5]
ADD             R4, R4, #1
CMP             R3, #0
BNE             loc_2D26C

loc_2D304
MOV             R3, #0
STRB            R3, [R4]
LDR             R0, [R8,#4]
POP             {R4-R10,PC}

loc_2D314
MOV             R6, R7
B               loc_2D2BC
; End of function sub_2D250

off_2D31C DCD dword_7DBB8



; int __fastcall sub_2D320(int)
sub_2D320
PUSH            {R4,LR}
LDR             R4, [R0,#4]
LDR             R0, [R0,#8]
BL              sub_2D250
MOV             R1, R4
MOV             R2, R0
POP             {R4,LR}
LDR             R0, =aSS_1 ; "%s=%s\n"
B               sub_2BEA0
; End of function sub_2D320

off_2D344 DCD aSS_1     ; "%s=%s\n"



; int __fastcall sub_2D348(int, int)
sub_2D348

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
LDR             R4, [R1,#4]
CMP             R4, #0
BNE             loc_2D488
LDR             R6, =dword_7D644

loc_2D35C
LDR             R3, [R6]
LDR             R5, [R3,R4]

loc_2D364
CMP             R5, #0
BNE             loc_2D388
ADD             R4, R4, #4
CMP             R4, #0x9C
BNE             loc_2D35C
MOV             R6, R5

loc_2D37C
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2D388
MOV             R0, R5
BL              sub_2D320
LDR             R5, [R5]
B               loc_2D364

loc_2D398               ; c
MOV             R1, #0x3D ; '='
ADD             R0, R4, #1 ; s
BL              strchr
CMP             R0, #0
BNE             loc_2D3F0
MOV             R0, R4
BL              sub_29CD0
LDR             R0, [R0]
CMP             R0, #0
BNE             loc_2D3E8
MOV             R6, #1
MOV             R3, R4
MOV             R2, R11
LDR             R1, =aSSNotFound ; "%s: %s not found\n"
LDR             R0, [R10] ; stream
BL              fprintf

loc_2D3D8
LDR             R4, [R7,#4]!
CMP             R4, #0
BNE             loc_2D398
B               loc_2D37C

loc_2D3E8
BL              sub_2D320
B               loc_2D3D8

loc_2D3F0
MOV             R3, #0
ADD             R8, R0, #1
STRB            R3, [R0]
MOV             R0, R4
BL              sub_29CD0
LDR             R1, [R9]
LDR             R5, [R0]
LDR             R3, [R1,#0x28]
ADD             R3, R3, #1
STR             R3, [R1,#0x28]
CMP             R5, #0
BEQ             loc_2D454
LDR             R3, [R5,#0xC]
TST             R3, #1
BNE             loc_2D434
LDR             R0, [R5,#8] ; ptr
BL              free

loc_2D434
MOV             R0, R8
BL              sub_174F8
LDR             R3, [R5,#0xC]
STR             R0, [R5,#8]
BIC             R3, R3, #2
STR             R3, [R5,#0xC]

loc_2D44C
BL              loc_2A270
B               loc_2D3D8

loc_2D454
STR             R0, [SP,#0xC+var_8]
MOV             R0, #0x10
BL              sub_174DC
MOV             R5, R0
MOV             R0, R4
BL              sub_174F8
STR             R0, [R5,#4]
MOV             R0, R8
BL              sub_174F8
LDR             R2, [SP,#0xC+var_8]
STR             R0, [R5,#8]
STR             R5, [R2]
B               loc_2D44C

loc_2D488
MOV             R7, R1
MOV             R6, #0
LDR             R9, =dword_7DBB0
LDR             R10, =stderr
LDR             R11, =(a6alias+1) ; "alias"
B               loc_2D3D8
; End of function sub_2D348

off_2D4A0 DCD dword_7D644
off_2D4A4 DCD aSSNotFound ; "%s: %s not found\n"
off_2D4A8 DCD dword_7DBB0
off_2D4AC DCD stderr
off_2D4B0 DCD a6alias+1 ; "alias"



; const char *__fastcall sub_2D4B4(const char *)
sub_2D4B4
SUB             R1, R0, #1

loc_2D4B8
LDRB            R3, [R1,#1]!
CMP             R3, #0
BXEQ            LR
SUB             R2, R3, #0x2B ; '+'
CMP             R2, #0x4F ; 'O'
BHI             loc_2D4FC
SUB             R2, R3, #0x3B ; ';'
CMP             R3, #0x60 ; '`'
CMPNE           R2, #4
SUB             R3, R3, #0x5B ; '['
MOVLS           R2, #1
MOVHI           R2, #0
CMP             R3, #1
MOVHI           R3, R2
ORRLS           R3, R2, #1
CMP             R3, #0
BEQ             loc_2D4B8

loc_2D4FC
B               sub_2D250
; End of function sub_2D4B4




; int __fastcall sub_2D500(int result, unsigned int, int, char)
sub_2D500

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
SUBS            R6, R1, #0
BEQ             loc_2D5BC
LDR             R7, =dword_7D6C4
ANDS            R11, R3, #0x11
MOV             R8, R0
MOV             R4, R3
MOVNE           R0, R6,LSL#1
MOVEQ           R0, R6
LDR             R1, [R7]
MOV             R10, R2
BL              sub_2D210
AND             R2, R4, #2
AND             R4, R4, #1
MOV             R5, R0
ADD             R6, R8, R6
ORR             R4, R4, R10

loc_2D544
LDRB            R9, [R8],#1
CMP             R9, #0
BEQ             loc_2D5A8
CMP             R11, #0
BEQ             loc_2D59C
MOV             R1, R10
MOV             R0, R9
STR             R2, [SP,#0xC+var_8]
BL              sub_29A14
CMP             R0, #0xC
LDR             R2, [SP,#0xC+var_8]
BEQ             loc_2D590
SUB             R0, R0, #2
CMP             R4, #0
CLZ             R0, R0
MOV             R0, R0,LSR#5
MOVEQ           R0, #0
CMP             R0, #0
BEQ             loc_2D59C

loc_2D590
MOV             R3, #0xFFFFFF81
ADD             R5, R5, #1
STRB            R3, [R5,#-1]

loc_2D59C
STRB            R9, [R5]
ADD             R5, R5, #1
B               loc_2D5B0

loc_2D5A8
CMP             R2, #0
BNE             loc_2D59C

loc_2D5B0
CMP             R8, R6
BNE             loc_2D544
STR             R5, [R7]

loc_2D5BC
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_2D500

off_2D5C4 DCD dword_7D6C4



; char *__fastcall sub_2D5C8(const char *, int)
sub_2D5C8
PUSH            {R4-R6,LR}
MOV             R6, R1
MOV             R5, R0
BL              strlen
MOV             R1, R6
MOV             R4, R0
BL              sub_2D210
MOV             R2, R4  ; n
MOV             R1, R5  ; src
BL              memcpy
ADD             R0, R0, R4
POP             {R4-R6,PC}
; End of function sub_2D5C8




; int __fastcall sub_2D5F8(__int64)
sub_2D5F8

var_8= -8

PUSH            {R0,R1,R4,R6,R7,LR}
MOV             R6, R0
LDR             R4, =dword_7D6C4
MOV             R7, R1
MOV             R0, #0x18
LDR             R1, [R4]
BL              sub_2D210
STRD            R6, R7, [SP,#8+var_8]
MOV             R1, #0x18
LDR             R2, =aLld ; "%lld"
STR             R0, [R4]
BL              sub_2C454
LDR             R3, [R4]
ADD             R3, R3, R0
STR             R3, [R4]
ADD             SP, SP, #8
POP             {R4,R6,R7,PC}
; End of function sub_2D5F8

off_2D63C DCD dword_7D6C4
off_2D640 DCD aLld      ; "%lld"



; char *__fastcall sub_2D644(const char *, char, _DWORD *)
sub_2D644
PUSH            {R4-R10,LR}
MOV             R9, R1
LDR             R1, =unk_6828A
MOV             R4, R0
MOV             R5, R2
CMP             R2, #0
ADDEQ           R1, R1, #1 ; accept
BL              strpbrk
SUBS            R8, R0, #0
BEQ             loc_2D714
TST             R9, #1
AND             R6, R9, #8
MOVEQ           R2, R8
MOVEQ           R7, R4
BEQ             loc_2D6E4
BL              strlen
SUB             R10, R8, R4
CMP             R6, #0
ADD             R3, R10, #1
ADD             R0, R3, R0
BEQ             loc_2D71C
LDR             R3, =dword_7DBB8
LDR             R8, [R3]
LDR             R3, =dword_7D6C4
LDR             R7, [R8,#4]
LDR             R1, [R3]
BL              sub_2D210
LDR             R3, [R8,#4]
SUB             R7, R4, R7
MOV             R4, R0
ADD             R7, R3, R7
ADD             R8, R7, R10

loc_2D6C4
CMP             R10, #0
MOVEQ           R2, R4
BEQ             loc_2D6E4
MOV             R2, R10 ; n
MOV             R1, R7  ; src
MOV             R0, R4  ; dest
BL              memcpy
ADD             R2, R4, R10

loc_2D6E4
AND             R1, R9, #2
LDR             R9, =0x40001201
MOV             R0, R1
MOV             LR, #0x5C ; '\'

loc_2D6F4
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_2D73C
CMP             R6, #0
STRB            R3, [R2]
LDRNE           R3, =dword_7D6C4
ADDNE           R2, R2, #1
STRNE           R2, [R3]

loc_2D714
MOV             R0, R4
POP             {R4-R10,PC}

loc_2D71C
TST             R9, #0x10
BEQ             loc_2D734
BL              sub_1748C

loc_2D728
MOV             R7, R4
MOV             R4, R0
B               loc_2D6C4

loc_2D734
BL              sub_2B208
B               loc_2D728

loc_2D73C
CMP             R3, #0x88
ADD             R12, R8, #1
MOVEQ           R8, R0
BEQ             loc_2D800
CMP             R3, #0x5C ; '\'
MOVEQ           R3, #0
BEQ             loc_2D7E8
CMP             R3, #0x81
BNE             loc_2D7BC
CMP             R1, #0
LDRB            R3, [R8,#1]
BEQ             loc_2D7B0
SUB             R1, R3, #0x5B ; '['
SUB             R3, R3, #0x21 ; '!'
UXTB            R3, R3
CMP             R1, #3
MOVHI           R1, #0
MOVLS           R1, #1
CMP             R3, #0x1E
MVNLS           R3, R9,LSR R3
MOVHI           R3, #1
ADD             R8, R2, #1
ANDLS           R3, R3, #1
EOR             R3, R3, #1
ORRS            R3, R1, R3
STRBNE          LR, [R2]
MOVNE           R3, R0
MOVNE           R2, R8
BNE             loc_2D7B4

loc_2D7B0
MOV             R3, R0

loc_2D7B4
MOV             R8, R12
B               loc_2D7E8

loc_2D7BC
CMP             R5, #0
BEQ             loc_2D810
LDR             R3, [R5]
ADD             R3, R7, R3
CMP             R8, R3
BNE             loc_2D810
SUB             R3, R2, R4
MOV             R0, #0
STR             R3, [R5]
MOV             R3, R0
MOV             R5, R0

loc_2D7E8
LDRB            R1, [R8]
ADD             R12, R8, #1
ADD             R2, R2, #1
MOV             R8, R0
MOV             R0, R3
STRB            R1, [R2,#-1]

loc_2D800
MOV             R1, R0
MOV             R0, R8
MOV             R8, R12
B               loc_2D6F4

loc_2D810
MOV             R3, R0
B               loc_2D7E8
; End of function sub_2D644

off_2D818 DCD unk_6828A
off_2D81C DCD dword_7DBB8
off_2D820 DCD dword_7D6C4
dword_2D824 DCD 0x40001201



; _BYTE *__fastcall sub_2D828(const char *, int)
sub_2D828

var_3= -3
var_s0=  0

PUSH            {R0,R1,R4-R10,LR}
MOV             R6, #0
LDR             R5, =dword_7D6A0
MOV             R4, R0
STRB            R6, [SP,#8+var_3]
BL              strlen
ADD             R0, R0, #1
LDR             R1, [R5]
MOV             R0, R0,LSL#3
LDR             R7, =asc_67E93 ; "${"
LDR             R9, =unk_68703
BL              sub_2D210
MOV             R12, R5
LDR             R5, =(asc_67E89+1) ; "}"
MOV             R2, R6
MOV             R1, R6
LDR             R6, =asc_67E96 ; "${#"
SUB             R8, R5, #1

loc_2D870
LDRB            R10, [R4]
ADD             LR, R4, #1
CMP             R10, #0
BNE             loc_2D8A4
TST             R2, #1
MOVNE           R3, #0x22 ; '"'
STRBNE          R3, [R0]
ADDNE           R0, R0, #1
MOV             R3, #0
STR             R0, [R12]
STRB            R3, [R0]
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_2D8A4
CMP             R10, #0x81
BEQ             loc_2D93C
BHI             loc_2D8E4
CMP             R10, #0x27 ; '''
BEQ             loc_2D9A4
BHI             loc_2D8D4
CMP             R10, #0x22 ; '"'
BEQ             loc_2D9A4
CMP             R10, #0x24 ; '$'

loc_2D8C8
BEQ             loc_2D9A4

loc_2D8CC
MOV             R3, #0
B               loc_2D9B0

loc_2D8D4
CMP             R10, #0x3D ; '='
BEQ             loc_2D978
CMP             R10, #0x5C ; '\'
B               loc_2D8C8

loc_2D8E4
CMP             R10, #0x84
BEQ             loc_2D9E4
BHI             loc_2D918
CMP             R10, #0x82
BEQ             loc_2D948
CMP             R10, #0x83
BNE             loc_2D8CC
TST             R2, #1
MOV             R1, #0
MOVEQ           R3, R5
MOVNE           R3, R8
MOV             R2, R2,ASR#1
B               loc_2D934

loc_2D918
CMP             R10, #0x87
BEQ             loc_2D964
CMP             R10, #0x88
BEQ             loc_2D96C
CMP             R10, #0x86
LDREQ           R3, =asc_67E9D ; "$(("
BNE             loc_2D8CC

loc_2D934
MOV             R4, R0
B               loc_2D9D4

loc_2D93C
ADD             LR, R4, #2
LDRB            R10, [R4,#1]
B               loc_2D8CC

loc_2D948
LDRB            R1, [R4,#1]
ADD             LR, R4, #2
AND             R3, R1, #0xF
CMP             R3, #0xA
MOVEQ           R3, R6
MOVNE           R3, R7
B               loc_2D934

loc_2D964
LDR             R3, =asc_67E9A ; "))"
B               loc_2D934

loc_2D96C
EOR             R2, R2, #1
MOV             R10, #0x22 ; '"'
B               loc_2D8CC

loc_2D978
CMP             R1, #0
BEQ             loc_2D8CC
AND             R3, R1, #0xF
CMP             R3, #1
ADD             R3, R3, R3,LSL#1
MOVNE           R2, R2,LSL#1
TST             R1, #0x10
ADD             R3, R9, R3
BEQ             loc_2D934
MOV             R10, #0x3A ; ':'
B               loc_2D9B0

loc_2D9A4
ADD             R3, SP, #8+var_s0
STRB            R10, [R3,#-4]!
MOV             R10, #0x5C ; '\'

loc_2D9B0
CMP             R3, #0
ADD             R4, R0, #1
STRB            R10, [R0]
MOVNE           R0, R4
BNE             loc_2D934

loc_2D9C4
MOV             R0, R4
MOV             R4, LR
B               loc_2D870

loc_2D9D0
STRB            R0, [R4],#1

loc_2D9D4
LDRB            R0, [R3],#1
CMP             R0, #0
BNE             loc_2D9D0
B               loc_2D9C4

loc_2D9E4
LDR             R3, =asc_67E8C ; "$(...)"
B               loc_2D934
; End of function sub_2D828

off_2D9EC DCD dword_7D6A0
off_2D9F0 DCD asc_67E93 ; "${"
off_2D9F4 DCD unk_68703
off_2D9F8 DCD asc_67E89+1 ; "}"
off_2D9FC DCD asc_67E96 ; "${#"
off_2DA00 DCD asc_67E9D ; "$(("
off_2DA04 DCD asc_67E9A ; "))"
off_2DA08 DCD asc_67E8C ; "$(...)"



; int sub_2DA0C()
sub_2DA0C
LDR             R3, =dword_7DBB8
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R5, [R4,#0xC]
BL              sub_2D148
LDR             R0, [R4,#4]
ADD             R0, R0, R5
POP             {R4-R6,PC}
; End of function sub_2DA0C

off_2DA2C DCD dword_7DBB8



; _BYTE *__fastcall sub_2DA30(char, _BYTE *)
sub_2DA30
LDR             R3, =dword_7DBB8
PUSH            {R4,LR}
MOV             R4, R0
LDR             R3, [R3]
LDR             R3, [R3,#8]
CMP             R3, R1
MOVNE           R0, R1
BNE             loc_2DA54
BL              sub_2DA0C

loc_2DA54
STRB            R4, [R0],#1
POP             {R4,PC}
; End of function sub_2DA30

off_2DA5C DCD dword_7DBB8



; int __fastcall sub_2DA60(int, int, _DWORD *)
sub_2DA60
LDR             R3, =dword_7DBB8
PUSH            {R4-R10,LR}
MOV             R7, R0
MOV             R6, R2
ORR             R9, R7, R1
LDR             R5, [R3]
LDR             R3, =dword_7DBB4
LDR             R0, [R5,#4]
LDR             R3, [R3]
ADD             R8, R3, #0x1C
ADD             R10, R3, #0xB8

loc_2DA8C
LDR             R4, [R8],#4

loc_2DA90
CMP             R4, #0
LDR             R2, [R5,#8]
BNE             loc_2DAD0
CMP             R10, R8
BHI             loc_2DA8C
CMP             R0, R2
BNE             loc_2DAB0
BL              sub_2DA0C

loc_2DAB0
CMP             R6, #0
MOV             R3, #0
STRNE           R0, [R6]
STR             R3, [R0],#4
LDR             R3, [R5,#4]
POP             {R4-R10,LR}
SUB             R0, R0, R3
B               sub_2B208

loc_2DAD0
LDR             R3, [R4,#4]
AND             R3, R3, R9
CMP             R3, R7
BNE             loc_2DAF8
CMP             R0, R2
BNE             loc_2DAEC
BL              sub_2DA0C

loc_2DAEC
LDR             R3, [R4,#8]
ADD             R0, R0, #4
STR             R3, [R0,#-4]

loc_2DAF8
LDR             R4, [R4]
B               loc_2DA90
; End of function sub_2DA60

off_2DB00 DCD dword_7DBB8
off_2DB04 DCD dword_7DBB4



; int __fastcall sub_2DB08(const void **, char *s)
sub_2DB08

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
LDR             R5, [R0]
CMP             R5, #0
MOVNE           R6, R5
BNE             loc_2DB2C
MOV             R0, R5
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2DB28
MOV             R6, R4

loc_2DB2C
MOV             R4, R6
MOV             R8, R6
LDRB            R2, [R4],#1
SUBS            R3, R2, #0x3A ; ':'
MOVNE           R3, #1
CMP             R2, #0
MOVEQ           R3, #0
CMP             R2, #0x25 ; '%'
MOVEQ           R3, #0
ANDNE           R3, R3, #1
CMP             R3, #0
BNE             loc_2DB28
MOV             R7, R0
MOV             R0, R1  ; s
MOV             R10, R1
SUB             R11, R6, R5
BL              strlen
LDR             R3, =dword_7DBB8
ADD             R0, R0, #2
ADD             R9, R0, R11
LDR             R3, [R3]

loc_2DB80
LDR             R2, [R3,#0xC]
CMP             R2, R9
BCC             loc_2DC18
CMP             R5, R6
LDR             R0, [R3,#4] ; dest
BEQ             loc_2DBB8
MOV             R2, R11 ; n
MOV             R1, R5  ; src
BL              memcpy
ADD             R3, R0, R11
MOV             R2, R0
ADD             R0, R3, #1 ; dest
MOV             R3, #0x2F ; '/'
STRB            R3, [R2,R11]

loc_2DBB8               ; src
MOV             R1, R10
BL              strcpy
LDR             R3, =dword_7D724
MOV             R2, #0
STR             R2, [R3]
LDRB            R2, [R6]
CMP             R2, #0x25 ; '%'
BNE             loc_2DBF0
STR             R4, [R3]

loc_2DBDC
MOV             R8, R4
LDRB            R3, [R4],#1
CMP             R3, #0
CMPNE           R3, #0x3A ; ':'
BNE             loc_2DBDC

loc_2DBF0
LDRB            R3, [R8]
MOV             R0, R9
CMP             R3, #0x3A ; ':'
ADDEQ           R8, R8, #1
MOVNE           R3, #0
STREQ           R8, [R7]
STRNE           R3, [R7]
ADD             SP, SP, #0xC
POP             {R4-R11,LR}
B               sub_2B208

loc_2DC18
STR             R3, [SP,#0xC+var_8]
BL              sub_2D148
LDR             R3, [SP,#0xC+var_8]
B               loc_2DB80
; End of function sub_2DB08

off_2DC28 DCD dword_7DBB8
off_2DC2C DCD dword_7D724



; __sighandler_t __fastcall sub_2DC30(int, _DWORD *, int)
sub_2DC30

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R8, R0
LDR             R5, =dword_7DBB0
MOV             R6, R1
MOV             R7, R2
LDR             R10, =off_7D4D0
LDR             R4, [R5]
LDR             R11, =unk_7D64C
LDR             R9, [R4,#0xC]
ADD             R3, R9, #1
STR             R3, [R4,#0xC]

loc_2DC5C
LDR             R3, [R10] ; unk_7D64C
CMP             R3, R11
BNE             loc_2DDBC
LDR             R0, [R11,#(dword_7D654 - 0x7D64C)] ; fd
CMP             R0, #0
BLE             loc_2DC84
BL              close
LDR             R3, [R10] ; unk_7D64C
MOV             R2, #0
STR             R2, [R3,#8]

loc_2DC84
SUB             R3, R7, #2
CMP             R6, #0
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVEQ           R3, #0
CMP             R3, #0
BEQ             loc_2DCE8
LDR             R3, [R6]
CMP             R3, #0
BNE             loc_2DCE8
LDR             R10, [R6,#0xC]
CMP             R10, #0
BEQ             loc_2DCE8
LDR             R1, =(a3trap+1) ; "trap"
LDR             R0, [R10,#8] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_2DCE8
LDR             R3, [R10,#4]
CMP             R3, #0
BNE             loc_2DCE8
MOV             R1, #0x104
ADD             R0, R4, #0xD0
BL              sub_1756C
STR             R0, [R4,#0x1D4]

loc_2DCE8
LDR             R3, [R4,#0x28]
ADD             R3, R3, #1
STR             R3, [R4,#0x28]
LDR             R10, [R5]
ADD             R11, R10, #0xD0
ADD             R3, R10, #0x1D4
MOV             R5, R11
STR             R3, [SP,#0xC+var_8]

loc_2DD08
LDR             R3, [SP,#0xC+var_8]
CMP             R5, R3
BCC             loc_2DDC4
MOV             R5, #0
STRB            R5, [R10,#0xCC]
BL              loc_2A270
LDR             R3, =dword_7D6B0
CMP             R7, #2
STR             R5, [R3]
BEQ             loc_2DE5C
LDRB            R3, [R8,#0x19]
TST             R3, #2
BEQ             loc_2DE10
CMP             R9, R5
BNE             loc_2DED4
LDR             R3, [R8,#0x14]
CMP             R3, R5
LDRNE           R3, [R8,#0xC]
LDRNE           R5, [R3]
BNE             loc_2DD60
BL              getpid
MOV             R5, R0

loc_2DD60               ; pgid
MOV             R1, R5
MOV             R0, #0  ; pid
BL              setpgid
CMP             R7, #0
BNE             loc_2DD84
LDR             R3, =dword_7D4D4
MOV             R1, R5
LDR             R0, [R3]
BL              sub_2B1EC

loc_2DD84               ; sig
MOV             R0, #0x14
BL              sub_29F94
MOV             R0, #0x16 ; sig
BL              sub_29F94

loc_2DD94
LDRB            R3, [R4,#0x40]
CMP             R3, #0
BEQ             loc_2DDB0
MOV             R0, #2  ; sig
BL              sub_29F94
MOV             R0, #0xF ; sig
BL              sub_29F94

loc_2DDB0               ; sig
MOV             R0, #3
BL              sub_29F94
B               loc_2DE64

loc_2DDBC
BL              sub_2A5FC
B               loc_2DC5C

loc_2DDC4               ; ptr
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_2DE08
LDRB            R1, [R0]
CMP             R1, #0
BEQ             loc_2DE08
LDR             R1, [R10,#0x1D4]
CMP             R11, R1
BNE             loc_2DDEC
BL              free

loc_2DDEC
CMP             R5, R11
MOV             R3, #0
STR             R3, [R5]
BEQ             loc_2DE08
SUB             R0, R5, R11
MOV             R0, R0,ASR#2 ; sig
BL              sub_29F94

loc_2DE08
ADD             R5, R5, #4
B               loc_2DD08

loc_2DE10
CMP             R7, #1
BNE             loc_2DE5C

loc_2DE18
MOV             R0, #2
BL              sub_2A140
MOV             R0, #3
BL              sub_2A140
LDR             R5, [R8,#0x14]
CMP             R5, #0
BNE             loc_2DE5C
MOV             R0, R5  ; fd
BL              close
MOV             R1, R5
LDR             R0, =aDevNull ; "/dev/null"
BL              open64
CMP             R0, #0
BEQ             loc_2DE5C
LDR             R1, =aDevNull ; "/dev/null"
LDR             R0, =aCanTOpenSM ; "can't open '%s': %m"
BL              sub_2ABFC

loc_2DE5C
CMP             R9, #0
BEQ             loc_2DD94

loc_2DE64
LDR             R3, =dword_7D6AC
CMP             R6, #0
LDR             R4, [R3]
BEQ             loc_2DEBC
LDR             R3, [R6]
CMP             R3, #0
BNE             loc_2DEBC
LDR             R3, [R6,#0xC]
CMP             R3, #0
BEQ             loc_2DEBC
LDR             R1, =(a2jobs+1) ; "jobs"
LDR             R0, [R3,#8] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_2DEBC
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R11,LR}
B               sub_2A9BC

loc_2DEB0
MOV             R0, R4
BL              sub_2A9BC
LDR             R4, [R4,#0x1C]

loc_2DEBC
CMP             R4, #0
BNE             loc_2DEB0
LDR             R3, =dword_7D6F8
STR             R4, [R3]
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2DED4
CMP             R7, #1
BEQ             loc_2DE18
B               loc_2DE64
; End of function sub_2DC30

off_2DEE0 DCD dword_7DBB0
off_2DEE4 DCD off_7D4D0
off_2DEE8 DCD unk_7D64C
off_2DEEC DCD a3trap+1  ; "trap"
off_2DEF0 DCD dword_7D6B0
off_2DEF4 DCD dword_7D4D4
off_2DEF8 DCD aDevNull  ; "/dev/null"
off_2DEFC DCD aCanTOpenSM ; "can't open '%s': %m"
off_2DF00 DCD dword_7D6AC
off_2DF04 DCD a2jobs+1  ; "jobs"
off_2DF08 DCD dword_7D6F8



; int __fastcall sub_2DF0C(char *path, char **argv, char **envp)
sub_2DF0C
PUSH            {R4-R10,LR}
MOV             R4, R0
LDR             R6, =aProcSelfExe ; "/proc/self/exe"
MOV             R5, R1
MOV             R8, R2
LDR             R9, =dword_7DB94
LDR             R7, =(a0hash+2) ; "ash"

loc_2DF28               ; envp
MOV             R2, R8
MOV             R1, R5  ; argv
MOV             R0, R4  ; path
BL              execve
CMP             R4, R6
POPEQ           {R4-R10,PC}
LDR             R3, [R9]
LDR             R3, [R3]
CMP             R3, #8
POPNE           {R4-R10,PC}
STR             R4, [R5]
MOV             R4, R6
STR             R7, [R5,#-4]!
B               loc_2DF28
; End of function sub_2DF0C

off_2DF60 DCD aProcSelfExe ; "/proc/self/exe"
off_2DF64 DCD dword_7DB94
off_2DF68 DCD a0hash+2  ; "ash"



; char *__fastcall sub_2DF6C(int, int)
sub_2DF6C
CMP             R0, #0x14
CMPNE           R0, #2
BEQ             loc_2DF7C
B               strerror

loc_2DF7C
MOV             R0, R1
BX              LR
; End of function sub_2DF6C




; int sub_2DF84()
sub_2DF84
PUSH            {R3-R11,LR}
LDR             R6, =dword_7DBB0
LDR             R5, [R6]
ADD             R0, R5, #0x3C ; '<'
BL              sub_2B480
LDR             R3, =dword_7D640
LDR             R1, [R3]
LDR             R2, [R1]
CMP             R2, #0
BNE             loc_2DFFC
LDR             R6, =aTrapSS ; "trap -- %s %s\n"
MOV             R4, R2

loc_2DFB4
LDR             R3, [R5,#0x1D4]
LDR             R0, [R3,R4,LSL#2]
CMP             R0, #0
BEQ             loc_2DFE4
BL              sub_2D250
MOV             R7, R0
MOV             R0, R4
BL              sub_61144
MOV             R1, R7
MOV             R2, R0
MOV             R0, R6
BL              sub_2BEA0

loc_2DFE4
ADD             R4, R4, #1
CMP             R4, #0x41 ; 'A'
BNE             loc_2DFB4
MOV             R8, #0

loc_2DFF4
MOV             R0, R8
POP             {R3-R11,PC}

loc_2DFFC
LDR             R4, [R1,#4]
CMP             R4, #0
BEQ             loc_2E020
MOV             R0, R2
BL              sub_2960C
CMP             R0, #0
ADDEQ           R1, R1, #4
MOVEQ           R4, R2
MOVNE           R4, #0

loc_2E020
LDR             R10, =aSInvalidSignal ; "%s: invalid signal specification"
SUB             R5, R1, #4
MOV             R8, #0
MOV             R9, #1

loc_2E030
LDR             R0, [R5,#4]!
CMP             R0, #0
BEQ             loc_2DFF4
BL              sub_61000
SUBS            R11, R0, #0
BGE             loc_2E05C
LDR             R1, [R5]
MOV             R0, R10
BL              sub_2B9AC
MOV             R8, #1
B               loc_2E030

loc_2E05C
LDR             R2, [R6]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
CMP             R4, #0
BEQ             loc_2E0B0
LDRB            R3, [R4]
CMP             R3, #0x2D ; '-'
BNE             loc_2E09C
LDRB            R3, [R4,#1]
CMP             R3, #0
MOVEQ           R4, R3
BEQ             loc_2E0B0

loc_2E090
LDR             R3, [R6]
STRB            R9, [R3,#0xCC]
B               loc_2E0A4

loc_2E09C
CMP             R3, #0
BNE             loc_2E090

loc_2E0A4
MOV             R0, R4
BL              sub_174F8
MOV             R4, R0

loc_2E0B0
LDR             R7, [R6]
ADD             R7, R7, R11,LSL#2
LDR             R0, [R7,#0xD0] ; ptr
BL              free
CMP             R11, #0
STR             R4, [R7,#0xD0]
BEQ             loc_2E0D4
MOV             R0, R11 ; sig
BL              sub_29F94

loc_2E0D4
BL              loc_2A270
B               loc_2E030
; End of function sub_2DF84

off_2E0DC DCD dword_7DBB0
off_2E0E0 DCD dword_7D640
off_2E0E4 DCD aTrapSS   ; "trap -- %s %s\n"
off_2E0E8 DCD aSInvalidSignal ; "%s: invalid signal specification"



; int sub_2E0EC()
sub_2E0EC

var_1C= -0x1C
buffer= -0x14
var_4= -4

PUSH            {R4-R11,LR}
MOV             R10, #0x3E8
LDR             R4, =unk_6869A
SUB             SP, SP, #0x1C
LDR             R9, =0x88888889
LDR             R8, =aUmU03usC ; "%um%u.%03us%c"
BL              sub_60F80
MOV             R5, R0
ADD             R0, SP, #0x1C+buffer ; buffer
BL              times

loc_2E114
LDRB            R3, [R4,#-1]
ADD             R2, SP, #0x1C+var_4
MOV             R1, R5
ADD             R3, R2, R3
LDR             R0, [R3,#-0x10]
BLX             sub_15EFC
MOV             R6, R0
MUL             R0, R10, R1
MOV             R1, R5
BLX             sub_15CA0
MOV             R11, R0
MOV             R0, R6
UMULL           R6, R7, R6, R9
MOV             R1, #0x3C ; '<'
BLX             sub_15EFC
LDRB            R3, [R4,#-2]
MOV             R2, R1
MOV             R0, R8
MOV             R1, R7,LSR#5
STR             R3, [SP,#0x1C+var_1C]
MOV             R3, R11
BL              sub_2BEA0
LDRB            R0, [R4],#2
CMP             R0, #0
BNE             loc_2E114
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}
; End of function sub_2E0EC

off_2E180 DCD unk_6869A
dword_2E184 DCD 0x88888889
off_2E188 DCD aUmU03usC ; "%um%u.%03us%c"



; int __fastcall sub_2E18C(const char *, int, int)
sub_2E18C

var_14= -0x14
var_10= -0x10
var_8= -8

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x14
MOV             R7, R0
MOV             R0, R1
MOV             R1, R2
ADD             R2, SP, #0x14+var_8
BL              sub_2DA60
LDR             R1, [SP,#0x14+var_8]
MOV             R2, #4  ; size
LDR             R3, =sub_296C0 ; compar
MOV             R4, R0
LDR             R8, =dword_7DBB0
SUB             R1, R1, R0
LDR             R9, =aSSSS ; "%s%s%.*s%s\n"
MOV             R1, R1,ASR#2 ; nmemb
LDR             R6, =(asc_6582A+9) ; " "
BL              qsort
LDRB            R3, [R7]
CMP             R3, #0
MOVEQ           R6, R7

loc_2E1DC
LDR             R3, [SP,#0x14+var_8]
CMP             R3, R4
BHI             loc_2E1F4
MOV             R0, #0
ADD             SP, SP, #0x14
POP             {R4-R9,PC}

loc_2E1F4
LDR             R0, [R4]
BL              sub_5871C
MOV             R5, R0
LDR             R0, [R8]
LDRB            R3, [R5]
ADD             R0, R0, #0x3C ; '<'
CMP             R3, #0x3D ; '='
BNE             loc_2E220
ADD             R5, R5, #1
MOV             R0, R5
BL              sub_2D250

loc_2E220
LDR             R3, [R4],#4
MOV             R2, R6
STR             R0, [SP,#0x14+var_10]
MOV             R1, R7
MOV             R0, R9
STR             R3, [SP,#0x14+var_14]
SUB             R3, R5, R3
BL              sub_2BEA0
B               loc_2E1DC
; End of function sub_2E18C

off_2E244 DCD sub_296C0
off_2E248 DCD dword_7DBB0
off_2E24C DCD aSSSS     ; "%s%s%.*s%s\n"
off_2E250 DCD asc_6582A+9 ; " "



; int __fastcall sub_2E254(int, int)
sub_2E254
LDR             R1, [R1,#4]
LDR             R3, =dword_7DBB0
CMP             R1, #0
LDR             R0, [R3]
BNE             loc_2E274
MOV             R2, #0x20 ; ' '
ADD             R0, R0, #0x3C ; '<'
B               sub_2E18C

loc_2E274
LDR             R3, [R0,#0x28]
PUSH            {R4,LR}
ADD             R3, R3, #1
STR             R3, [R0,#0x28]
MOV             R1, #0
MOV             R0, R1
BL              sub_2BEEC
SUBS            R4, R0, #0
BNE             loc_2E2B4
BL              sub_2BB6C
LDR             R3, =dword_7D640
LDR             R0, [R3]
LDR             R3, [R0]
CMP             R3, #0
BEQ             loc_2E2B4
BL              sub_29F0C

loc_2E2B4
BL              loc_2A270
MOV             R0, R4
POP             {R4,PC}
; End of function sub_2E254

off_2E2C0 DCD dword_7DBB0
off_2E2C4 DCD dword_7D640



; int __fastcall sub_2E2C8(int, const char **)
sub_2E2C8
PUSH            {R4-R10,LR}
MOV             R5, R1
LDR             R6, =aNp ; "np"
MOV             R4, #0

loc_2E2D8
MOV             R0, R6
BL              sub_2B480
UXTB            R0, R0
CMP             R0, #0
BNE             loc_2E378
LDR             R0, [R5]
LDRB            R3, [R0]
CMP             R3, #0x72 ; 'r'
LDR             R3, =dword_7D640
MOVEQ           R4, #0
MOVNE           R6, #1
MVN             R5, R4
MOVEQ           R6, #2
LDR             R7, [R3]
LDR             R4, [R7]
CMP             R4, #0
BEQ             loc_2E398
AND             R8, R6, R5

loc_2E320               ; c
MOV             R1, #0x3D ; '='
MOV             R0, R4  ; s
BL              strchr
SUBS            R9, R0, #0
ADDNE           R9, R9, #1
BNE             loc_2E384
MOV             R0, R4
BL              sub_29678
MOV             R1, R4
BL              sub_296CC
LDR             R2, [R0]
CMP             R2, #0
BEQ             loc_2E384
LDR             R3, [R2,#4]
ORR             R3, R6, R3
AND             R3, R3, R5
STR             R3, [R2,#4]

loc_2E364
LDR             R4, [R7,#4]!
CMP             R4, #0
BNE             loc_2E320

loc_2E370
MOV             R0, #0
POP             {R4-R10,PC}

loc_2E378
CMP             R0, #0x6E ; 'n'
MOVEQ           R4, #1
B               loc_2E2D8

loc_2E384
MOV             R2, R8
MOV             R1, R9
MOV             R0, R4
BL              sub_2AE08
B               loc_2E364

loc_2E398
MOV             R2, R4
MOV             R1, R6
BL              sub_2E18C
B               loc_2E370
; End of function sub_2E2C8

off_2E3A8 DCD aNp       ; "np"
off_2E3AC DCD dword_7D640


; Attributes: thunk

sub_2E3B0
B               sub_45558
; End of function sub_2E3B0



; Attributes: bp-based frame fpd=0xFFFFFFE0

; int __fastcall sub_2E3B4(int, int, int, int)
sub_2E3B4

var_4= -4

PUSH            {R3-R11,LR}
MOV             R10, R0
LDR             R0, [R1,#4] ; s1
ADD             R11, SP, #0x24
MOV             R9, R1
CMP             R0, #0
BEQ             loc_2E448
LDR             R1, =aL ; "-l"
BL              strcmp
CMP             R0, #0
BEQ             loc_2E448
ADD             R5, R9, #4

loc_2E3E4
LDR             R0, [R5]
LDRB            R3, [R0]
CMP             R3, #0x25 ; '%'
BNE             loc_2E43C
MOV             R1, #0
MOV             R7, #0
BL              sub_2B738
LDRB            R3, [R0,#0x19]
MOV             R8, R0
LDR             R6, [R0,#0x14]
TST             R3, #2
MOVNE           R6, #1
MOV             R3, R6,LSL#4
ADD             R3, R3, #8
SUB             SP, SP, R3
MOV             R3, #0xC
MOV             R4, SP
STR             R4, [R5]

loc_2E42C
CMP             R7, R6
BLT             loc_2E45C
MOV             R3, #0
STRB            R3, [R4]

loc_2E43C
LDR             R3, [R5,#4]!
CMP             R3, #0
BNE             loc_2E3E4

loc_2E448
MOV             R1, R9
MOV             R0, R10
BL              sub_273A8
SUB             SP, R11, #0x24 ; '$'
POP             {R3-R11,PC}

loc_2E45C
MUL             R1, R3, R7
LDR             R0, [R8,#0xC]
ADD             R2, R0, R1
LDR             R2, [R2,#4]
CMN             R2, #1
BEQ             loc_2E480
UXTB            R2, R2
CMP             R2, #0x7F
BNE             loc_2E4A8

loc_2E480
LDRB            R2, [R8,#0x19]
LDR             R3, =aU_0 ; " -%u"
TST             R2, #2
LDR             R2, [R0,R1]
LDR             R1, =(aUnknownUidU+0xB) ; " %u"
MOV             R0, R4  ; s
MOVNE           R1, R3  ; format
BL              sprintf
MOV             R3, #0xC
ADD             R4, R4, R0

loc_2E4A8
ADD             R7, R7, #1
B               loc_2E42C
; End of function sub_2E3B4

off_2E4B0 DCD aL        ; "-l"
off_2E4B4 DCD aU_0      ; " -%u"
off_2E4B8 DCD aUnknownUidU+0xB ; " %u"



; int sub_2E4BC()
sub_2E4BC
LDR             R3, =dword_7D708
PUSH            {R4,LR}
LDR             R0, [R3]
BL              sub_5C3DC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_2E4BC

off_2E4D4 DCD dword_7D708


; Attributes: thunk

sub_2E4D8
B               sub_41704
; End of function sub_2E4D8



; Attributes: thunk

sub_2E4DC
B               sub_48A14
; End of function sub_2E4DC




; DIR *__fastcall sub_2E4E0(int, const char *, int, int)
sub_2E4E0

var_7C= -0x7C
var_78= -0x78
var_74= -0x74
src= -0x70
var_6C= -0x6C

PUSH            {R4-R11,LR}
MOV             R7, R0
LDR             R6, [R0]
SUB             SP, SP, #0x7C
MOV             R10, R1
MOV             R8, R1
MOV             R5, R1
MOV             R0, #0
ADD             R6, R6, R3

loc_2E504
LDRB            R4, [R5]
CMP             R4, #0
BNE             loc_2E56C
CMP             R0, #0
BNE             loc_2E614
CMP             R3, #0
BEQ             loc_2E564

loc_2E520
LDRB            R3, [R10]
CMP             R3, #0x5C ; '\'
MOVNE           R3, R10
ADDEQ           R3, R10, #1
MOV             R10, R3
LDRB            R2, [R10],#1
STRB            R2, [R6],#1
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2E520
ADD             R1, SP, #0x7C+var_6C
LDR             R0, [R7]
BLX             sub_62E14
CMP             R0, #0
BNE             loc_2E564
LDR             R0, [R7]
BL              sub_2C3C4

loc_2E564
ADD             SP, SP, #0x7C ; '|'
POP             {R4-R11,PC}

loc_2E56C
CMP             R4, #0x3F ; '?'
CMPNE           R4, #0x2A ; '*'
BEQ             loc_2E604
CMP             R4, #0x5B ; '['
BNE             loc_2E5D0
LDRB            R12, [R5,#1]
ADD             R1, R5, #1
CMP             R12, #0x21 ; '!'
ADDEQ           R1, R5, #2

loc_2E590
LDRB            R12, [R1]
CMP             R12, #0x5C ; '\'
ADDEQ           R12, R1, #1
MOVNE           R12, R1
LDRB            R4, [R12]
CMP             R4, #0
CMPNE           R4, #0x2F ; '/'
MOVEQ           R4, #1
MOVNE           R4, #0
BEQ             loc_2E60C
ADD             R1, R12, #1
LDRB            R12, [R12,#1]
CMP             R12, #0x5D ; ']'
BNE             loc_2E590

loc_2E5C8
MOV             R0, #1
B               loc_2E5F8

loc_2E5D0
SUB             R4, R4, #0x5C ; '\'
CLZ             R4, R4
MOV             R4, R4,LSR#5
LDRB            R1, [R5,R4]
CMP             R1, #0x2F ; '/'
BNE             loc_2E5F8
CMP             R0, #0
BNE             loc_2E614
ADD             R8, R4, #1
ADD             R8, R5, R8

loc_2E5F8
ADD             R4, R4, #1
ADD             R5, R5, R4
B               loc_2E504

loc_2E604
MOV             R4, #0
B               loc_2E5C8

loc_2E60C
MOV             R4, #0
B               loc_2E5F8

loc_2E614
CMP             R8, R10
BLS             loc_2E644
MOV             R3, R10

loc_2E620
LDRB            R1, [R3]
CMP             R1, #0x5C ; '\'
MOVNE           R1, R3
ADDEQ           R1, R3, #1
ADD             R3, R1, #1
LDRB            R1, [R1]
CMP             R8, R3
STRB            R1, [R6],#1
BHI             loc_2E620

loc_2E644
MOV             R9, #0
STR             R2, [SP,#0x7C+var_7C]
STRB            R9, [R6]
LDR             R3, [R7]
LDR             R0, =(asc_67ED0+4) ; "."
SUBS            R2, R6, R3
MOVNE           R0, R3  ; name
STR             R2, [SP,#0x7C+var_74]
BL              opendir
SUBS            R11, R0, #0
LDR             R2, [SP,#0x7C+var_7C]
BEQ             loc_2E564
LDRB            R3, [R5]
CMP             R3, R9
ADDNE           R3, R4, #1
STRBNE          R9, [R5]
ADDNE           R5, R5, R3
LDRB            R3, [R8]
MOVEQ           R9, #1
SUB             R10, R5, R10
SUB             R10, R2, R10
CMP             R3, #0x5C ; '\'
ADDEQ           R3, R8, #1
MOVNE           R3, R8
LDRB            R3, [R3]
STR             R3, [SP,#0x7C+var_7C]
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
STR             R3, [SP,#0x7C+var_78]

loc_2E6B8
LDR             R3, [SP,#0x7C+var_78]
LDR             R3, [R3,#0x2C]
CMP             R3, #0
BEQ             loc_2E764

loc_2E6C8               ; dirp
MOV             R0, R11
BL              closedir
CMP             R9, #0
BNE             loc_2E564
CMP             R4, #0
MVN             R4, R4
MOVEQ           R3, #0x2F ; '/'
MOVNE           R3, #0x5C ; '\'
STRB            R3, [R5,R4]
B               loc_2E564

loc_2E6F0
BL              stpcpy
MOV             R3, #0x2F ; '/'
MOV             R6, R0
STRB            R3, [R0]
LDR             R0, [R7]
LDR             R1, [R7,#4]
SUB             R6, R6, R0
ADD             R6, R6, #1
ADD             R3, R10, R6
ADD             R2, R3, #0xFF
CMP             R1, R2
BCS             loc_2E740
ADD             R3, R3, #0x10C0
ADD             R3, R3, #0x3F ; '?'
MOV             R1, R3
STR             R3, [SP,#0x7C+src]
BL              sub_174B4
LDR             R3, [SP,#0x7C+src]
STR             R0, [R7]
STR             R3, [R7,#4]

loc_2E740
MOV             R3, R6
MOV             R2, R10
MOV             R1, R5
MOV             R0, R7
BL              sub_2E4E0
LDR             R6, [R7]
LDR             R3, [SP,#0x7C+var_74]
ADD             R6, R6, R3
B               loc_2E6B8

loc_2E764
MOV             R0, R11
BL              readdir64
CMP             R0, #0
BEQ             loc_2E6C8
LDRB            R2, [R0,#0x13]
LDR             R3, [SP,#0x7C+var_7C]
SUB             R1, R2, #0x2E ; '.'
CLZ             R1, R1
CMP             R3, #0x2E ; '.'
MOV             R1, R1,LSR#5
MOVEQ           R1, #0
CMP             R1, #0
BNE             loc_2E6B8
ADD             R3, R0, #0x13
MOV             R2, R1  ; flags
MOV             R0, R8  ; pattern
MOV             R1, R3  ; name
STR             R3, [SP,#0x7C+src]
BL              fnmatch
CMP             R0, #0
LDR             R3, [SP,#0x7C+src]
BNE             loc_2E6B8
CMP             R9, #0
MOV             R1, R3  ; src
MOV             R0, R6  ; dest
BEQ             loc_2E6F0
BL              strcpy
LDR             R0, [R7]
BL              sub_2C3C4
B               loc_2E6B8
; End of function sub_2E4E0

off_2E7DC DCD asc_67ED0+4 ; "."
off_2E7E0 DCD dword_7DBB0


; Attributes: noreturn

; void __fastcall __noreturn sub_2E7E4(int)
sub_2E7E4

s= -0x44

LDR             R3, =dword_7D704
MOV             R6, R0
PUSH            {LR}
SUB             SP, SP, #0x54
LDR             R1, [R3]
LDR             R3, =off_63758 ; "end of file"
CMP             R1, #3
LDR             R2, [R3,R1,LSL#2]
MOV             R4, R3
BLE             loc_2E81C
LDR             R1, =(aAnSSIsExpected+0x21) ; format
MOV             R0, SP  ; s
BL              sprintf
MOV             R2, SP

loc_2E81C
LDR             R1, =aUnexpectedS ; "unexpected %s"
ADD             R0, SP, #0x54+s ; s
BL              sprintf
CMN             R6, #1
BEQ             loc_2E860
CMP             R6, #3
ADD             R3, SP, #0x54+s
ADD             R5, R3, R0
LDR             R2, [R4,R6,LSL#2]
BLE             loc_2E854
LDR             R1, =(aAnSSIsExpected+0x21) ; format
MOV             R0, SP  ; s
BL              sprintf
MOV             R2, SP

loc_2E854
LDR             R1, =aExpectingS ; " (expecting %s)"
MOV             R0, R5  ; s
BL              sprintf

loc_2E860
ADD             R0, SP, #0x54+s
BL              sub_2B44C
; End of function sub_2E7E4

off_2E868 DCD dword_7D704
off_2E86C DCD off_63758 ; "end of file"
off_2E870 DCD aAnSSIsExpected+0x21 ; "\"%s\""
off_2E874 DCD aUnexpectedS ; "unexpected %s"
off_2E878 DCD aExpectingS ; " (expecting %s)"



; size_t __fastcall sub_2E87C(int, int)
sub_2E87C
PUSH            {R4-R8,LR}
MOV             R4, R1
LDR             R7, =byte_681B5
MOV             R5, R0

loc_2E88C
CMP             R4, #0
BEQ             def_2E8A4 ; jumptable 0002E8A4 default case
LDR             R3, [R4]
LDRB            R2, [R7,R3]
ADD             R5, R5, R2
CMP             R3, #0x1A ; switch 27 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_2E8A4 ; jumptable 0002E8A4 default case
jpt_2E8A4 DCD loc_2E918 ; jump table for switch statement
DCD loc_2E938
DCD loc_2E98C
DCD loc_2E98C
DCD loc_2E98C
DCD loc_2E964
DCD loc_2E964
DCD loc_2E964
DCD loc_2E998
DCD loc_2E964
DCD loc_2E964
DCD loc_2E970
DCD loc_2E98C
DCD loc_2E998
DCD loc_2E9B4
DCD loc_2E9DC
DCD loc_2EA1C
DCD loc_2EA1C
DCD loc_2EA1C
DCD loc_2EA1C
DCD loc_2EA1C
DCD loc_2EA1C
DCD loc_2EA1C
DCD loc_2EA1C
DCD loc_2EA24
DCD loc_2EA24
DCD loc_2E9FC

loc_2E918               ; jumptable 0002E8A4 case 0
LDR             R1, [R4,#0x10]
MOV             R0, R5
BL              sub_2E87C
LDR             R1, [R4,#0xC]

loc_2E928
BL              sub_2E87C
LDR             R4, [R4,#8]
MOV             R5, R0
B               loc_2E88C

loc_2E938               ; jumptable 0002E8A4 case 1
LDR             R4, [R4,#8]

loc_2E93C
CMP             R4, #0
BNE             loc_2E94C

def_2E8A4               ; jumptable 0002E8A4 default case
MOV             R0, R5
POP             {R4-R8,PC}

loc_2E94C
LDR             R1, [R4,#4]
ADD             R0, R5, #8
BL              sub_2E87C
LDR             R4, [R4]
MOV             R5, R0
B               loc_2E93C

loc_2E964               ; jumptable 0002E8A4 cases 5-7,9,10
LDR             R1, [R4,#8]

loc_2E968
MOV             R0, R5
B               loc_2E9A8

loc_2E970               ; jumptable 0002E8A4 case 11
LDR             R0, [R4,#0x10]
BL              strlen
ADD             R0, R0, #8
LDR             R1, [R4,#0xC]
BIC             R0, R0, #7
ADD             R0, R0, R5
B               loc_2E928

loc_2E98C               ; jumptable 0002E8A4 cases 2-4,12
LDR             R1, [R4,#0xC]
MOV             R0, R5
B               loc_2E928

loc_2E998               ; jumptable 0002E8A4 cases 8,13
LDR             R1, [R4,#0xC]
MOV             R0, R5
BL              sub_2E87C
LDR             R1, [R4,#8]

loc_2E9A8
BL              sub_2E87C
MOV             R5, R0
B               loc_2E9FC ; jumptable 0002E8A4 case 26

loc_2E9B4               ; jumptable 0002E8A4 case 14
LDR             R1, [R4,#0xC]
MOV             R0, R5
BL              sub_2E87C
MOV             R6, R0
LDR             R0, [R4,#8] ; s
BL              strlen
ADD             R5, R0, #8
BIC             R5, R5, #7
ADD             R5, R5, R6
B               def_2E8A4 ; jumptable 0002E8A4 default case

loc_2E9DC               ; jumptable 0002E8A4 case 15
LDR             R6, [R4,#0xC]

loc_2E9E0
CMP             R6, #0
BNE             loc_2EA04
LDR             R0, [R4,#8] ; s
BL              strlen
ADD             R0, R0, #8
BIC             R0, R0, #7
ADD             R5, R0, R5

loc_2E9FC               ; jumptable 0002E8A4 case 26
LDR             R4, [R4,#4]
B               loc_2E88C

loc_2EA04
LDR             R1, [R6,#4]
ADD             R0, R5, #8
BL              sub_2E87C
LDR             R6, [R6]
MOV             R5, R0
B               loc_2E9E0

loc_2EA1C               ; jumptable 0002E8A4 cases 16-23
LDR             R1, [R4,#0x10]
B               loc_2E968

loc_2EA24               ; jumptable 0002E8A4 cases 24,25
LDR             R1, [R4,#0xC]
B               loc_2E968
; End of function sub_2E87C

off_2EA2C DCD byte_681B5



; _BYTE *__fastcall sub_2EA30(_BYTE *result, int)
sub_2EA30
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R6, =(asc_6BC3F+0x17) ; ">"
LDR             R7, =(asc_6BC3F+0x16) ; "<>"
LDR             R8, =asc_67EE4 ; "<&"

loc_2EA44
CMP             R4, #0
POPEQ           {R4-R8,PC}
LDR             R3, [R4]
CMP             R3, #0x1A ; switch 27 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_2EA54 ; jumptable 0002EA54 default case, cases 1,13
jpt_2EA54 DCD loc_2EC60 ; jump table for switch statement
DCD def_2EA54
DCD loc_2EB40
DCD loc_2EB40
DCD loc_2EBE4
DCD loc_2EB2C
DCD loc_2EB70
DCD loc_2EB78
DCD loc_2EB90
DCD loc_2EB08
DCD loc_2EBF8
DCD loc_2EC00
DCD loc_2ECCC
DCD def_2EA54
DCD loc_2EC50
DCD loc_2ECBC
DCD loc_2ED50
DCD loc_2ED30
DCD loc_2EAC8
DCD loc_2ED38
DCD loc_2ED48
DCD loc_2ED28
DCD loc_2ED30
DCD loc_2ED40
DCD loc_2ECC4
DCD loc_2ECC4
DCD loc_2EB80

loc_2EAC8               ; jumptable 0002EA54 case 18
LDR             R5, =asc_67EDB ; ">|"

loc_2EACC
LDR             R0, [R4,#8]
BL              sub_16F64
BL              sub_2D828
MOV             R0, R5
BL              sub_2D828
LDR             R3, [R4]
SUB             R3, R3, #0x16
CMP             R3, #1
BHI             loc_2ED58
LDR             R0, [R4,#0xC]
CMP             R0, #0
LDRLT           R0, =(asc_6AE7B+3) ; "-"
BLT             loc_2EBDC
BL              sub_16F64
B               loc_2EBDC

loc_2EB08               ; jumptable 0002EA54 case 9
LDR             R0, =aWhile ; "while "

loc_2EB0C
BL              sub_2D828
LDR             R0, [R4,#4]
BL              sub_2EA30
LDR             R5, [R4,#8]

loc_2EB1C
LDR             R0, =aDo ; "; do "
BL              sub_2D828
LDR             R4, =aDone_0 ; "; done"
B               loc_2EBD0

loc_2EB2C               ; jumptable 0002EA54 case 5
LDR             R5, =asc_67EA1 ; " && "

loc_2EB30
LDR             R0, [R4,#4]
BL              sub_2EA30
MOV             R0, R5
BL              sub_2D828

loc_2EB40               ; jumptable 0002EA54 cases 2,3
LDR             R4, [R4,#8]
B               loc_2EA44

def_2EA54               ; jumptable 0002EA54 default case, cases 1,13
LDR             R4, [R4,#8]
LDR             R5, =asc_67EE7 ; " | "

loc_2EB50
LDR             R0, [R4,#4]
BL              sub_2EA30
LDR             R4, [R4]
CMP             R4, #0
POPEQ           {R4-R8,PC}
MOV             R0, R5
BL              sub_2D828
B               loc_2EB50

loc_2EB70               ; jumptable 0002EA54 case 6
LDR             R5, =asc_67EA6 ; " || "
B               loc_2EB30

loc_2EB78               ; jumptable 0002EA54 case 7
LDR             R5, =(asc_67F15+1) ; "; "
B               loc_2EB30

loc_2EB80               ; jumptable 0002EA54 case 26
LDR             R0, =(aTheSystemIsGoi+0x1C) ; "!"
BL              sub_2D828
LDR             R4, [R4,#4]
B               loc_2EA44

loc_2EB90               ; jumptable 0002EA54 case 8
LDR             R0, =aIf ; "if "
BL              sub_2D828
LDR             R0, [R4,#4]
BL              sub_2EA30
LDR             R0, =aThen ; "; then "
BL              sub_2D828
LDR             R3, [R4,#0xC]
CMP             R3, #0
LDREQ           R5, [R4,#8]
BEQ             loc_2EBCC
LDR             R0, [R4,#8]
BL              sub_2EA30
LDR             R0, =aElse ; "; else "
BL              sub_2D828
LDR             R5, [R4,#0xC]

loc_2EBCC
LDR             R4, =aFi ; "; fi"

loc_2EBD0
MOV             R0, R5
BL              sub_2EA30

loc_2EBD8
MOV             R0, R4

loc_2EBDC
POP             {R4-R8,LR}
B               sub_2D828

loc_2EBE4               ; jumptable 0002EA54 case 4
LDR             R0, =(asc_6549B+1) ; "("
BL              sub_2D828
LDR             R5, [R4,#8]
LDR             R4, =(aDup+6) ; ")"
B               loc_2EBD0

loc_2EBF8               ; jumptable 0002EA54 case 10
LDR             R0, =aUntil ; "until "
B               loc_2EB0C

loc_2EC00               ; jumptable 0002EA54 case 11
LDR             R0, =aFor ; "for "
BL              sub_2D828
LDR             R0, [R4,#0x10]
BL              sub_2D828
LDR             R0, =aIn ; " in "
BL              sub_2D828
LDR             R6, =(asc_6582A+9) ; " "
LDR             R5, [R4,#8]

loc_2EC20
CMP             R5, #0
LDREQ           R5, [R4,#0xC]
BEQ             loc_2EB1C
MOV             R0, R5
BL              sub_2EA30
LDR             R3, [R5,#4]
CMP             R3, #0
BEQ             loc_2EC48
MOV             R0, R6
BL              sub_2D828

loc_2EC48
LDR             R5, [R5,#4]
B               loc_2EC20

loc_2EC50               ; jumptable 0002EA54 case 14
LDR             R0, [R4,#8]
BL              sub_2D828
LDR             R4, =asc_67EC5 ; "() { ... }"
B               loc_2EBD8

loc_2EC60               ; jumptable 0002EA54 case 0
LDR             R5, [R4,#0xC]
LDR             R6, =(asc_6582A+9) ; " "

loc_2EC68
CMP             R5, #0
BNE             loc_2EC98
LDR             R4, [R4,#0x10]
LDR             R5, =(asc_6582A+9) ; " "

loc_2EC78
CMP             R4, #0
POPEQ           {R4-R8,PC}
MOV             R0, R5
BL              sub_2D828
MOV             R0, R4
BL              sub_2EA30
LDR             R4, [R4,#4]
B               loc_2EC78

loc_2EC98
MOV             R0, R5
BL              sub_2EA30
LDR             R3, [R5,#4]
CMP             R3, #0
BEQ             loc_2ECB4
MOV             R0, R6
BL              sub_2D828

loc_2ECB4
LDR             R5, [R5,#4]
B               loc_2EC68

loc_2ECBC               ; jumptable 0002EA54 case 15
LDR             R4, [R4,#8]
B               loc_2EBD8

loc_2ECC4               ; jumptable 0002EA54 cases 24,25
LDR             R4, =asc_67ED0 ; "<<..."
B               loc_2EBD8

loc_2ECCC               ; jumptable 0002EA54 case 12
LDR             R0, =aCase ; "case "
BL              sub_2D828
LDR             R3, [R4,#8]
LDR             R5, =(aPidD+7) ; ") "
LDR             R6, =asc_67F15 ; ";; "
LDR             R0, [R3,#8]
BL              sub_2D828
LDR             R0, =aIn ; " in "
BL              sub_2D828
LDR             R4, [R4,#0xC]

loc_2ECF4
CMP             R4, #0
LDREQ           R4, =aEsac ; "esac"
BEQ             loc_2EBD8
LDR             R0, [R4,#8]
BL              sub_2EA30
MOV             R0, R5
BL              sub_2D828
LDR             R0, [R4,#0xC]
BL              sub_2EA30
MOV             R0, R6
BL              sub_2D828
LDR             R4, [R4,#4]
B               loc_2ECF4

loc_2ED28               ; jumptable 0002EA54 case 21
LDR             R5, =asc_67EDE ; ">>"
B               loc_2EACC

loc_2ED30               ; jumptable 0002EA54 cases 17,22
LDR             R5, =asc_67EE1 ; ">&"
B               loc_2EACC

loc_2ED38               ; jumptable 0002EA54 case 19
LDR             R5, =(aCdy+4) ; "<"
B               loc_2EACC

loc_2ED40               ; jumptable 0002EA54 case 23
MOV             R5, R8
B               loc_2EACC

loc_2ED48               ; jumptable 0002EA54 case 20
MOV             R5, R7
B               loc_2EACC

loc_2ED50               ; jumptable 0002EA54 case 16
MOV             R5, R6
B               loc_2EACC

loc_2ED58
LDR             R4, [R4,#0x10]
B               loc_2EA44
; End of function sub_2EA30

off_2ED60 DCD asc_6BC3F+0x17 ; ">"
off_2ED64 DCD asc_6BC3F+0x16 ; "<>"
off_2ED68 DCD asc_67EE4 ; "<&"
off_2ED6C DCD asc_67EDB ; ">|"
off_2ED70 DCD asc_6AE7B+3 ; "-"
off_2ED74 DCD aWhile    ; "while "
off_2ED78 DCD aDo       ; "; do "
off_2ED7C DCD aDone_0   ; "; done"
off_2ED80 DCD asc_67EA1 ; " && "
off_2ED84 DCD asc_67EE7 ; " | "
off_2ED88 DCD asc_67EA6 ; " || "
off_2ED8C DCD asc_67F15+1 ; "; "
off_2ED90 DCD aTheSystemIsGoi+0x1C ; "!"
off_2ED94 DCD aIf       ; "if "
off_2ED98 DCD aThen     ; "; then "
off_2ED9C DCD aElse     ; "; else "
off_2EDA0 DCD aFi       ; "; fi"
off_2EDA4 DCD asc_6549B+1 ; "("
off_2EDA8 DCD aDup+6    ; ")"
off_2EDAC DCD aUntil    ; "until "
off_2EDB0 DCD aFor      ; "for "
off_2EDB4 DCD aIn       ; " in "
off_2EDB8 DCD asc_6582A+9 ; " "
off_2EDBC DCD asc_67EC5 ; "() { ... }"
off_2EDC0 DCD asc_67ED0 ; "<<..."
off_2EDC4 DCD aCase     ; "case "
off_2EDC8 DCD aPidD+7   ; ") "
off_2EDCC DCD asc_67F15 ; ";; "
off_2EDD0 DCD aEsac     ; "esac"
off_2EDD4 DCD asc_67EDE ; ">>"
off_2EDD8 DCD asc_67EE1 ; ">&"
off_2EDDC DCD aCdy+4    ; "<"



; int __fastcall sub_2EDE0(int, _BYTE *, int)
sub_2EDE0
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R7, R1
MOV             R6, R2
BL              fork
SUBS            R5, R0, #0
BGE             loc_2EE14
CMP             R4, #0
BEQ             loc_2EE0C
MOV             R0, R4
BL              sub_2A9BC

loc_2EE0C
LDR             R0, =aCanTForkM ; "can't fork: %m"
BL              sub_2ABFC

loc_2EE14
BNE             loc_2EE3C
LDR             R3, =dword_7DBB0
MOV             R2, R6
MOV             R1, R7
MOV             R0, R4
LDR             R3, [R3]
STR             R5, [R3,#0x1D8]
BL              sub_2DC30

loc_2EE34
MOV             R0, R5
POP             {R4-R8,PC}

loc_2EE3C
CMP             R4, #0
BNE             loc_2EE7C
LDR             R6, =dword_7D6F8
MOV             R4, R6

loc_2EE4C
LDR             R3, [R6]
CMP             R3, #0
BEQ             loc_2EE6C
MOV             R1, #0
MOV             R0, R1
BL              sub_2C558
CMP             R0, #0
BGT             loc_2EE4C

loc_2EE6C
LDR             R3, [R4]
ADD             R3, R3, #1
STR             R3, [R4]
B               loc_2EE34

loc_2EE7C
CMP             R6, #2
LDR             R8, =dword_7DBB0
BEQ             loc_2EECC
LDRB            R3, [R4,#0x19]
TST             R3, #2
BEQ             loc_2EEB0
LDR             R3, [R4,#0x14]
MOV             R0, R5  ; pid
CMP             R3, #0
LDRNE           R3, [R4,#0xC]
MOVEQ           R1, R5
LDRNE           R1, [R3] ; pgid
BL              setpgid

loc_2EEB0
CMP             R6, #1
LDR             R3, [R8]
BNE             loc_2EECC
STR             R5, [R3,#0x1E8]
MOV             R1, R6
MOV             R0, R4
BL              sub_29708

loc_2EECC
LDR             R1, [R4,#0x14]
LDR             R2, [R4,#0xC]
ADD             R3, R1, #1
STR             R3, [R4,#0x14]
MOV             R3, #0xC
MUL             R3, R3, R1
ADD             R4, R2, R3
STR             R5, [R2,R3]
MOV             R3, #0xFFFFFFFF
STR             R3, [R4,#4]
LDR             R3, [R8]
ADD             R3, R3, #0x3C ; '<'
STR             R3, [R4,#8]
LDR             R3, =dword_7D6B0
LDR             R3, [R3]
CMP             R3, #0
CMPNE           R7, #0
BEQ             loc_2EE34
LDR             R3, =dword_7DBB8
MOV             R0, R7
LDR             R6, [R3]
LDR             R3, =dword_7D6A0
LDR             R2, [R6,#4]
STR             R2, [R3]
BL              sub_2EA30
LDR             R0, [R6,#4]
BL              sub_174F8
STR             R0, [R4,#8]
B               loc_2EE34
; End of function sub_2EDE0

off_2EF40 DCD aCanTForkM ; "can't fork: %m"
off_2EF44 DCD dword_7DBB0
off_2EF48 DCD dword_7D6F8
off_2EF4C DCD dword_7D6B0
off_2EF50 DCD dword_7DBB8
off_2EF54 DCD dword_7D6A0


; Attributes: noreturn

; void __noreturn sub_2EF58(int, int, ...)
sub_2EF58

var_4= -4
varg_r1=  4
varg_r2=  8
varg_r3=  0xC

PUSH            {R1-R3}
PUSH            {R0,R1,LR}
ADD             R1, SP, #8+varg_r2
LDR             R0, =(aCanTCreateSS+0xD) ; "%s: %s"
STR             R1, [SP,#8+var_4]
BL              sub_2AB38
BL              sub_2A2A4
MOV             R0, #4
BL              sub_29EE0
; End of function sub_2EF58

off_2EF7C DCD aCanTCreateSS+0xD ; "%s: %s"


; Attributes: noreturn

; void __fastcall __noreturn sub_2EF80(char *, char **, const void *, int)
sub_2EF80

var_8= -8

PUSH            {R0-R2,R7,R11,LR}
MOV             R5, R0
STR             R2, [SP,#0xC+var_8]
MOV             R8, R1
MOV             R2, #0
MOV             R1, #0x20 ; ' '
MOV             R0, #1
MOV             R6, R3
BL              sub_2DA60
MOV             R1, #0x2F ; '/' ; c
MOV             R7, R0
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_2F070
MOV             R2, R7  ; envp
MOV             R1, R8  ; argv
MOV             R0, R5  ; path
BL              sub_2DF0C
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R4, [R3]

loc_2EFD8
CMP             R4, #2
MOVEQ           R3, #0x7F
BEQ             loc_2EFF0
CMP             R4, #0xD
MOVEQ           R3, #0x7E ; '~'
MOVNE           R3, #2

loc_2EFF0
LDR             R2, =dword_7DBB0
MOV             R0, R4
LDR             R1, =(aSNotFound+4) ; "not found"
LDR             R2, [R2]
STRB            R3, [R2]
BL              sub_2DF6C
MOV             R2, R5
MOV             R3, R0
LDR             R1, =(aCanTCreateSS+0xD) ; "%s: %s"
MOV             R0, #4
BL              sub_2EF58

loc_2F01C
SUBS            R6, R6, #1
BPL             loc_2F050
LDR             R3, [R9]
CMP             R3, #0
BNE             loc_2F050
MOV             R2, R7  ; envp
MOV             R1, R8  ; argv
BL              sub_2DF0C
LDR             R3, [R10]
LDR             R3, [R3]
CMP             R3, #2
CMPNE           R3, #0x14
MOVNE           R4, R3

loc_2F050
MOV             R0, R11
BL              sub_295C0

loc_2F058               ; s
MOV             R1, R5
ADD             R0, SP, #0xC+var_8 ; int
BL              sub_2DB08
SUBS            R11, R0, #0
BNE             loc_2F01C
B               loc_2EFD8

loc_2F070
MOV             R4, #2
LDR             R9, =dword_7D724
LDR             R10, =dword_7DB94
B               loc_2F058
; End of function sub_2EF80

off_2F080 DCD dword_7DB94
off_2F084 DCD dword_7DBB0
off_2F088 DCD aSNotFound+4 ; "not found"
off_2F08C DCD aCanTCreateSS+0xD ; "%s: %s"
off_2F090 DCD dword_7D724



; int sub_2F094()
sub_2F094
LDR             R3, =dword_7D71C
MOV             R2, #0
PUSH            {R4-R6,LR}
LDR             R4, =(aTrnSEEX0iIPA+0x16) ; "a:"
MOV             R6, R3
STR             R2, [R3]

loc_2F0AC
MOV             R0, R4
BL              sub_2B480
SUBS            R3, R0, #0
BNE             loc_2F0AC
LDR             R2, =dword_7D640
LDR             R4, [R2]
LDR             R2, [R4]
CMP             R2, #0
POPEQ           {R4-R6,PC}
LDR             R2, =dword_7DBB0
LDR             R5, [R2]
STRH            R3, [R5,#0x40]
BL              sub_2BB6C
LDR             R3, [R5,#0xC]
MOV             R0, #3  ; sig
ADD             R3, R3, #1
STR             R3, [R5,#0xC]
BL              sub_29F94
LDR             R3, [R6]
MOV             R1, R4
LDR             R0, [R4]
CMP             R3, #0
STRNE           R3, [R4]
LDR             R3, =dword_7DBB4
LDR             R3, [R3]
LDR             R2, [R3,#0xD0]
MOV             R3, #0
ADD             R2, R2, #5
BL              sub_2EF80
; End of function sub_2F094

off_2F120 DCD dword_7D71C
off_2F124 DCD aTrnSEEX0iIPA+0x16 ; "a:"
off_2F128 DCD dword_7D640
off_2F12C DCD dword_7DBB0
off_2F130 DCD dword_7DBB4



; int __fastcall sub_2F134(int)
sub_2F134

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

LDR             R3, =stdout
PUSH            {R4,LR}
LDR             R1, [R3]
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
BL              fputs_unlocked
POP             {R4,LR}
B               loc_2A270
; End of function sub_2F134

off_2F160 DCD stdout
off_2F164 DCD dword_7DBB0



; int __fastcall sub_2F168(int, unsigned __int8 **)
sub_2F168

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
LDR             R7, =dword_7DBB0
LDR             R3, [R1]
LDR             R0, [R7]
LDR             R10, =dword_7D6FC
LDRB            R8, [R3]
ADD             R0, R0, #0x3C ; '<'
LDR             R11, =aD_1 ; "[%d] "
BL              sub_2B480
LDR             R3, =dword_7D640
LDR             R9, =aS_10 ; " | %s"
LDR             R6, [R3]

loc_2F198
MOV             R1, #1
LDR             R0, [R6]
BL              sub_2B738
CMP             R8, #0x66 ; 'f'
MOV             R4, R0
BEQ             loc_2F1D0
MOV             R1, #1
BL              sub_29708
LDR             R1, [R10]
MOV             R0, R11 ; format
SUB             R1, R4, R1
MOV             R1, R1,ASR#5
ADD             R1, R1, #1
BL              printf

loc_2F1D0
LDR             R3, [R4,#0xC]
LDR             R0, [R3,#8]
BL              sub_2F134
LDR             R5, [R4,#0xC]
MOV             R2, #0xC
LDR             R3, [R4,#0x14]
MLA             R3, R2, R3, R5
ADD             R5, R5, R2

loc_2F1F0
CMP             R3, R5
BHI             loc_2F2BC
LDR             R3, =stdout
LDR             R0, [R3] ; stream
BL              sub_2AAFC
BL              sub_2A2A4
LDR             R2, [R7]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDRB            R3, [R4,#0x18]
CMP             R3, #2
BEQ             loc_2F27C
MOV             R3, #0
CMP             R8, #0x66 ; 'f'
STRB            R3, [R4,#0x18]
LDR             R3, [R4,#0xC]
LDR             R5, [R3]
BNE             loc_2F24C
LDR             R3, =dword_7D4D4
MOV             R1, R5
LDR             R0, [R3]
BL              sub_2B1EC

loc_2F24C               ; sig
MOV             R1, #0x12
MOV             R0, R5  ; pgrp
BL              killpg
LDR             R3, [R4,#0xC]
MOV             R1, #0xFFFFFFFF
LDR             R2, [R4,#0x14]

loc_2F264
LDRB            R0, [R3,#4]
ADD             R3, R3, #0xC
CMP             R0, #0x7F
STREQ           R1, [R3,#-8]
SUBS            R2, R2, #1
BNE             loc_2F264

loc_2F27C
CMP             R8, #0x66 ; 'f'
MOVNE           R4, #0
BNE             loc_2F294
MOV             R0, R4
BL              sub_2C8C0
MOV             R4, R0

loc_2F294
BL              loc_2A270
LDR             R3, [R6]
CMP             R3, #0
BEQ             loc_2F2B0
LDR             R3, [R6,#4]!
CMP             R3, #0
BNE             loc_2F198

loc_2F2B0
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2F2BC
LDR             R1, [R5,#8]
MOV             R0, R9  ; format
STR             R3, [SP,#0xC+var_8]
ADD             R5, R5, #0xC
BL              printf
LDR             R3, [SP,#0xC+var_8]
B               loc_2F1F0
; End of function sub_2F168

off_2F2D8 DCD dword_7DBB0
off_2F2DC DCD dword_7D6FC
off_2F2E0 DCD aD_1      ; "[%d] "
off_2F2E4 DCD dword_7D640
off_2F2E8 DCD aS_10     ; " | %s"
off_2F2EC DCD stdout
off_2F2F0 DCD dword_7D4D4



; unsigned __int8 *__fastcall sub_2F2F4(unsigned __int8 *)
sub_2F2F4
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_29678
MOV             R1, R4
BL              sub_296CC
LDR             R4, [R0]
CMP             R4, #0
BNE             loc_2F31C

loc_2F314
MOV             R0, #0
POP             {R4,PC}

loc_2F31C
LDR             R3, [R4,#4]
TST             R3, #0x200
BEQ             loc_2F334
LDR             R3, [R4,#0xC]
MOV             R0, #0
BLX             R3

loc_2F334
LDR             R3, [R4,#4]
TST             R3, #0x20
BNE             loc_2F314
LDR             R3, =dword_7DBB4
LDR             R0, [R3]
ADD             R3, R0, #0x118
CMP             R4, R3
BNE             loc_2F37C
LDR             R2, [R0,#0x120]
ADD             R3, R0, #0x14C
CMP             R2, R3
BNE             loc_2F37C
LDR             R3, [R0,#0x148]
ADD             R0, R0, #0x150
LDR             R2, =(aSUartSPort0x4x+0x21) ; "%d"
MOV             R1, #0xD
ADD             R0, R0, #3
BL              sub_2C454

loc_2F37C
LDR             R3, [R4,#8]

loc_2F380
MOV             R0, R3
LDRB            R2, [R3],#1
CMP             R2, #0
POPEQ           {R4,PC}
CMP             R2, #0x3D ; '='
MOV             R0, R3
POPEQ           {R4,PC}
B               loc_2F380
; End of function sub_2F2F4

off_2F3A0 DCD dword_7DBB4
off_2F3A4 DCD aSUartSPort0x4x+0x21 ; "%d"



; _DWORD *sub_2F3A8()
sub_2F3A8

var_1F4= -0x1F4
var_194= -0x194
name= -0x18C

PUSH            {R4,R5,LR}
MOV             R0, #0x400
SUB             SP, SP, #0x1F4
MOV             R4, #1
BL              sub_1748C
LDR             R3, =unk_7D64C
STR             R0, [R3,#(dword_7D664 - 0x7D64C)]
STR             R0, [R3,#(dword_7D660 - 0x7D64C)]
MOV             R0, #0x11 ; sig
STR             R4, [R3,#(dword_7D650 - 0x7D64C)]
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
STRB            R4, [R3,#0x5C]
BL              sub_29F94
MOV             R0, R4  ; sig
MOV             R1, #0  ; handler
BL              signal
LDR             R3, =dword_7DBB4
LDR             R2, =aPs1W ; "PS1=\\w \\$ "
LDR             R3, [R3]
ADD             R4, R3, #0xB8
ADD             R5, R3, #0x148
STR             R2, [R3,#0xE0]

loc_2F404
LDR             R0, [R4,#8]
BL              sub_29678
LDR             R3, [R0]
STR             R3, [R4]
STR             R4, [R0]
ADD             R4, R4, #0x10
CMP             R5, R4
BHI             loc_2F404
LDR             R3, =__environ
LDR             R5, [R3]

loc_2F42C
CMP             R5, #0
BEQ             loc_2F440
LDR             R4, [R5],#4
CMP             R4, #0
BNE             loc_2F534

loc_2F440
MOV             R1, #8
LDR             R0, =aOptind1 ; "OPTIND=1"
BL              sub_2AC34
BL              getppid
BL              sub_16F64
MOV             R1, R0
LDR             R0, =aPpid ; "PPID"
BL              sub_2AF84
LDR             R0, =aShlvl ; "SHLVL"
BL              sub_2F2F4
CMP             R0, #0
MOVEQ           R0, #1  ; nptr
BEQ             loc_2F47C
BL              atoi
ADD             R0, R0, #1

loc_2F47C
BL              sub_16F64
MOV             R2, #1
MOV             R1, R0
LDR             R0, =aShlvl ; "SHLVL"
BL              sub_2AE08
LDR             R0, =aHostname ; "HOSTNAME"
BL              sub_2F2F4
CMP             R0, #0
BNE             loc_2F4B4
ADD             R0, SP, #0x1F4+name ; name
BL              uname
ADD             R1, SP, #0x1F4+name.nodename
LDR             R0, =aHostname ; "HOSTNAME"
BL              sub_2AF84

loc_2F4B4
LDR             R0, =(aOldpwd+3) ; "PWD"
BL              sub_2F2F4
SUBS            R4, R0, #0
BEQ             loc_2F520
LDRB            R3, [R4]
CMP             R3, #0x2F ; '/'
BNE             loc_2F51C
MOV             R1, SP
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_2F51C
ADD             R1, SP, #0x1F4+name
LDR             R0, =(asc_67ED0+4) ; "."
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_2F51C
LDRD            R0, R1, [SP,#0x1F4+var_1F4]
LDRD            R2, R3, [SP,#0x1F4+name]
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_2F51C
LDRD            R0, R1, [SP,#0x1F4+var_194]
LDRD            R2, R3, [SP,#0x1F4+name.nodename+0x1F]
CMP             R1, R3
CMPEQ           R0, R2
BEQ             loc_2F520

loc_2F51C
MOV             R4, #0

loc_2F520
MOV             R1, #0
MOV             R0, R4
BL              sub_2BDBC
ADD             SP, SP, #0x1F4
POP             {R4,R5,PC}

loc_2F534               ; c
MOV             R1, #0x3D ; '='
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_2F42C
MOV             R1, #9
MOV             R0, R4
BL              sub_2AC34
B               loc_2F42C
; End of function sub_2F3A8

off_2F558 DCD unk_7D64C
off_2F55C DCD dword_7DBB0
off_2F560 DCD dword_7DBB4
off_2F564 DCD aPs1W     ; "PS1=\\w \\$ "
off_2F568 DCD __environ
off_2F56C DCD aOptind1  ; "OPTIND=1"
off_2F570 DCD aPpid     ; "PPID"
off_2F574 DCD aShlvl    ; "SHLVL"
off_2F578 DCD aHostname ; "HOSTNAME"
off_2F57C DCD aOldpwd+3 ; "PWD"
off_2F580 DCD asc_67ED0+4 ; "."



; int __fastcall sub_2F584(char *, int, int, int *)
sub_2F584

var_5= -5
var_4= -4

PUSH            {R0-R2,R4-R11,LR}
AND             R6, R1, #0xF
CMP             R6, #0xA
CMPNE           R6, #3
LDR             R12, [R3]
ANDNE           R7, R2, #0x11
MOV             R2, R2,LSL#8
MOVEQ           R6, #1
AND             R5, R2, #0x100
LDRB            R2, [R0]
MOVNE           R6, #0
ORRNE           R7, R7, #2
MOVEQ           R7, #2
MOVS            R8, R12
MOVNE           R8, #1
CMP             R2, #0x2D ; '-'
BEQ             loc_2F768
BHI             loc_2F628
CMP             R2, #0x23 ; '#'
BEQ             loc_2F734
BHI             loc_2F5EC
CMP             R2, #0x21 ; '!'
BEQ             loc_2F744

loc_2F5E0
BL              sub_2F2F4
MOV             R5, R0
B               loc_2F67C

loc_2F5EC
CMP             R2, #0x24 ; '$'
BEQ             loc_2F6F4
CMP             R2, #0x2A ; '*'
BNE             loc_2F5E0

loc_2F5FC
LDR             R2, =dword_7DBB4
CMP             R12, #0
MOVNE           R5, #0
LDR             R2, [R2]
LDR             R1, [R2,#0xBC]
TST             R1, #0x20
LDREQ           R2, [R2,#0xC0]
MOVNE           R2, #0x20 ; ' '
LDRBEQ          R2, [R2,#4]
ORR             R5, R5, R2
B               loc_2F6C4

loc_2F628
CMP             R2, #0x3F ; '?'
BEQ             loc_2F724
BHI             loc_2F6A8
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #9
BHI             loc_2F5E0
BL              atoi
CMP             R0, #0
BLT             loc_2F758
LDR             R3, =dword_7DBB4
LDR             R3, [R3]
LDR             R2, [R3]
CMP             R2, R0
BLT             loc_2F758
CMP             R0, #0
LDREQ           R3, =dword_7DBB0
SUBNE           R0, R0, #0xC0000001
LDRNE           R3, [R3,#0x10]
LDREQ           R3, [R3]
LDRNE           R5, [R3,R0,LSL#2]
LDREQ           R5, [R3,#0x20]

loc_2F67C
CMP             R5, #0
BEQ             loc_2F758
MOV             R0, R5  ; s
BL              strlen
MOV             R3, R7
MOV             R4, R0
MOV             R1, R0
MOV             R2, R8
MOV             R0, R5
BL              sub_2D500
B               loc_2F70C

loc_2F6A8
CMP             R2, #0x40 ; '@'
BNE             loc_2F5E0
CMP             R5, #0
MOVNE           R2, R8
MOVEQ           R2, #0
CMP             R2, #0
BEQ             loc_2F5FC

loc_2F6C4
UXTB            R2, R5
STRB            R2, [SP,#0xC+var_5]
CLZ             R2, R2
MOV             R2, R2,LSR#5
STR             R2, [R3]
LDR             R3, =dword_7DBB4
LDR             R3, [R3]
LDR             R9, [R3,#0x10]
CMP             R9, #0
BEQ             loc_2F758
MOV             R4, #0
B               loc_2F820

loc_2F6F4
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDR             R0, [R3,#8]

loc_2F700
MOV             R1, R0,ASR#31
BL              sub_2D5F8
MOV             R4, R0

loc_2F70C
CMP             R6, #0
LDRNE           R2, =dword_7D6C4
LDRNE           R3, [R2]
SUBNE           R3, R3, R4
STRNE           R3, [R2]
B               loc_2F75C

loc_2F724
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDRB            R0, [R3]
B               loc_2F700

loc_2F734
LDR             R3, =dword_7DBB4
LDR             R3, [R3]
LDR             R0, [R3]
B               loc_2F700

loc_2F744
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDR             R0, [R3,#0x1E8]
CMP             R0, #0
BNE             loc_2F700

loc_2F758
MOV             R4, #0xFFFFFFFF

loc_2F75C
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2F768
LDR             R5, =dword_7D6C4
MOV             R0, #0xF
LDR             R1, [R5]
BL              sub_2D210
LDR             R3, =dword_7DBB0
MOV             R1, #0
LDR             LR, =off_6371C ; "eerrexit"
MOV             R4, R1
STR             R0, [R5]
LDR             R2, [R3]
MOV             R3, #0xE
ADD             R2, R2, #0x4B ; 'K'

loc_2F798
LDRB            R12, [R2],#-1
CMP             R12, #0
BEQ             loc_2F7C0
LDR             R12, [LR,R3,LSL#2]
LDRB            R12, [R12]
CMP             R12, #0
STRBNE          R12, [R0]
ADDNE           R4, R4, #1
ADDNE           R0, R0, #1
MOVNE           R1, #1

loc_2F7C0
SUBS            R3, R3, #1
BCS             loc_2F798
CMP             R1, #0
STRNE           R0, [R5]
B               loc_2F70C

loc_2F7D4               ; s
MOV             R0, R10
BL              strlen
MOV             R3, R7
MOV             R11, R0
MOV             R1, R0
MOV             R2, R8
MOV             R0, R10
ADD             R4, R4, R11
BL              sub_2D500
LDR             R3, [R9]
CMP             R3, #0
CMPNE           R5, #0
BEQ             loc_2F820
MOV             R3, R7
MOV             R2, R8
MOV             R1, #1
ADD             R0, SP, #0xC+var_5
ADD             R4, R4, #1
BL              sub_2D500

loc_2F820
LDR             R10, [R9],#4
CMP             R10, #0
BNE             loc_2F7D4
B               loc_2F70C
; End of function sub_2F584

off_2F830 DCD dword_7DBB4
off_2F834 DCD dword_7DBB0
off_2F838 DCD dword_7D6C4
off_2F83C DCD off_6371C ; "eerrexit"



; const char *sub_2F840()
sub_2F840

var_24= -0x24
var_20= -0x20
var_18= -0x18
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R4, #0
LDR             R11, =aPURtNSd ; "p:u:rt:n:sd:"
SUB             SP, SP, #0x24
MOV             R9, R4
MOV             R8, R4
LDR             R10, =dword_7D71C
MOV             R7, R4
MOV             R6, R4
MOV             R5, R4

def_2F918               ; jumptable 0002F918 default case, cases 1-9,11,13
MOV             R0, R11
BL              sub_2B480
CMP             R0, #0
BNE             loc_2F910
LDR             R3, =dword_7DBB0
LDR             R10, =dword_7D640
LDR             R11, =aIfs ; "IFS"
LDR             R3, [R3]
STR             R3, [SP,#0x24+var_C]

loc_2F88C
LDR             R3, [SP,#0x24+var_C]
LDR             R2, [SP,#0x24+var_C]
LDR             R3, [R3,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R1, [R10]
MOV             R0, R11
STR             R1, [SP,#0x24+var_8]
BL              sub_2F2F4
MOV             R3, R4
MOV             R2, R0
LDR             R1, [SP,#0x24+var_8]
STRD            R8, R9, [SP,#0x24+var_18]
STRD            R6, R7, [SP,#0x24+var_20]
STR             R5, [SP,#0x24+var_24]
LDR             R0, =sub_2AF84
BL              sub_37024
STR             R0, [SP,#0x24+var_8]
BL              loc_2A270
LDR             R0, [SP,#0x24+var_8]
CMP             R0, #1
BNE             loc_2F9A0
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #4
BNE             loc_2F908
LDR             R3, [SP,#0x24+var_C]
LDR             R3, [R3,#0x34]
CMP             R3, #0
BEQ             loc_2F88C

loc_2F908
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_2F910
SUB             R0, R0, #0x64 ; 'd'
CMP             R0, #0x11 ; switch 18 cases
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_2F918 ; jumptable 0002F918 default case, cases 1-9,11,13
jpt_2F918 DCD loc_2F998 ; jump table for switch statement
DCD def_2F918
DCD def_2F918
DCD def_2F918
DCD def_2F918
DCD def_2F918
DCD def_2F918
DCD def_2F918
DCD def_2F918
DCD def_2F918
DCD loc_2F970
DCD def_2F918
DCD loc_2F968
DCD def_2F918
DCD loc_2F988
DCD loc_2F978
DCD loc_2F980
DCD loc_2F990

loc_2F968               ; jumptable 0002F918 case 12
LDR             R6, [R10]
B               def_2F918 ; jumptable 0002F918 default case, cases 1-9,11,13

loc_2F970               ; jumptable 0002F918 case 10
LDR             R5, [R10]
B               def_2F918 ; jumptable 0002F918 default case, cases 1-9,11,13

loc_2F978               ; jumptable 0002F918 case 15
ORR             R4, R4, #1
B               def_2F918 ; jumptable 0002F918 default case, cases 1-9,11,13

loc_2F980               ; jumptable 0002F918 case 16
LDR             R7, [R10]
B               def_2F918 ; jumptable 0002F918 default case, cases 1-9,11,13

loc_2F988               ; jumptable 0002F918 case 14
ORR             R4, R4, #2
B               def_2F918 ; jumptable 0002F918 default case, cases 1-9,11,13

loc_2F990               ; jumptable 0002F918 case 17
LDR             R8, [R10]
B               def_2F918 ; jumptable 0002F918 default case, cases 1-9,11,13

loc_2F998               ; jumptable 0002F918 case 0
LDR             R9, [R10]
B               def_2F918 ; jumptable 0002F918 default case, cases 1-9,11,13

loc_2F9A0
BLS             loc_2F908
BL              sub_2ABFC
; End of function sub_2F840

off_2F9A8 DCD aPURtNSd  ; "p:u:rt:n:sd:"
off_2F9AC DCD dword_7D71C
off_2F9B0 DCD dword_7DBB0
off_2F9B4 DCD dword_7D640
off_2F9B8 DCD aIfs      ; "IFS"
off_2F9BC DCD sub_2AF84
off_2F9C0 DCD dword_7DB94



; int __fastcall sub_2F9C4(int, int)
sub_2F9C4

var_3= -3
var_s0=  0

CMP             R0, #2
PUSH            {R0,R1,R4-R10,LR}
BGT             loc_2F9D8
LDR             R0, =aUsageGetoptsOp ; "usage: getopts optstring var [arg]"
BL              sub_2ABFC

loc_2F9D8
LDR             R3, =dword_7DBB4
CMP             R0, #3
LDR             R5, [R3]
LDR             R2, [R5,#4]
BNE             loc_2FAF8
LDR             R3, [R5]
LDR             R8, [R5,#0x10]
ADD             R3, R3, #1
CMP             R3, R2

loc_2F9FC
MOVCC           R6, #1
MOVCC           R7, #0xFFFFFFFF
STRDCC          R6, R7, [R5,#4]
LDMIB           R5, {R3,R4}
MOV             R2, #0
STRB            R2, [SP,#8+var_3]
MOV             R2, #0xFFFFFFFF
LDMIB           R1, {R9,R10}
CMP             R3, #1
SUB             R6, R3, #0xC0000001
MOVGT           R3, #0
MOVLE           R3, #1
ORRS            R3, R3, R4,LSR#31
STR             R2, [R5,#4]
ADD             R6, R8, R6,LSL#2
BNE             loc_2FA64
LDR             R7, [R6,#-4]
MOV             R0, R7  ; s
BL              strlen
CMP             R4, R0
BGT             loc_2FA64
ADDS            R2, R7, R4
BEQ             loc_2FA64
LDRB            R3, [R7,R4]
CMP             R3, #0
BNE             loc_2FB20

loc_2FA64
LDR             R3, [R6]
CMP             R3, #0
BEQ             loc_2FA8C
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BNE             loc_2FA8C
LDRB            R1, [R3,#1]
ADD             R2, R3, #1
CMP             R1, #0
BNE             loc_2FB08

loc_2FA8C
MOV             R9, #1
MOV             R7, #0x3F ; '?'
MOV             R4, #0
LDR             R0, =aOptarg_0 ; "OPTARG"
BL              sub_2AF78

loc_2FAA0
SUB             R8, R6, R8
MOV             R8, R8,ASR#2
ADD             R8, R8, #1
MOV             R0, R8
BL              sub_16F8C
MOV             R2, #0x40 ; '@'
MOV             R1, R0
LDR             R0, =aOptind_0 ; "OPTIND"
BL              sub_2AE08
ADD             R1, SP, #8+var_s0
MOV             R0, R10
STRB            R7, [R1,#-4]!
BL              sub_2AF84
CMP             R4, #0
MOV             R0, R9
LDRNE           R3, [R6,#-4]
MOVEQ           R4, #0xFFFFFFFF
STR             R8, [R5,#4]
SUBNE           R4, R4, R3
STR             R4, [R5,#8]
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_2FAF8
SUB             R0, R0, #2
ADD             R8, R1, #0xC
CMP             R0, R2
B               loc_2F9FC

loc_2FB08
CMP             R1, #0x2D ; '-'
ADD             R6, R6, #4
BNE             loc_2FB20
LDRB            R3, [R3,#2]
CMP             R3, #0
BEQ             loc_2FA8C

loc_2FB20
LDRB            R7, [R2]
ADD             R4, R2, #1
MOV             R3, R9

loc_2FB2C
LDRB            R1, [R3]
CMP             R7, R1
BNE             loc_2FBB0
LDRB            R3, [R3,#1]
CMP             R3, #0x3A ; ':'
BNE             loc_2FC88
LDRB            R2, [R2,#1]
LDR             R3, [R6]
CMP             R2, #0
BNE             loc_2FC64
CMP             R3, #0
BNE             loc_2FC80
LDR             R0, =aOpterr ; "OPTERR"
BL              sub_2F2F4
CMP             R0, #0
BEQ             loc_2FB84
LDRB            R3, [R0]
CMP             R3, #0x30 ; '0'
BNE             loc_2FB84
LDRB            R3, [R0,#1]
CMP             R3, #0
BEQ             loc_2FB90

loc_2FB84
LDRB            R3, [R9]
CMP             R3, #0x3A ; ':'
BNE             loc_2FC40

loc_2FB90
ADD             R1, SP, #8+var_s0
LDR             R0, =aOptarg_0 ; "OPTARG"
STRB            R7, [R1,#-4]!
MOV             R7, #0x3A ; ':'
BL              sub_2AF84

loc_2FBA4
MOV             R4, #0

loc_2FBA8
MOV             R9, #0
B               loc_2FAA0

loc_2FBB0
CMP             R1, #0
BNE             loc_2FC28
LDR             R0, =aOpterr ; "OPTERR"
BL              sub_2F2F4
CMP             R0, #0
BEQ             loc_2FBE0
LDRB            R3, [R0]
CMP             R3, #0x30 ; '0'
BNE             loc_2FBE0
LDRB            R3, [R0,#1]
CMP             R3, #0
BEQ             loc_2FBEC

loc_2FBE0
LDRB            R3, [R9]
CMP             R3, #0x3A ; ':'
BNE             loc_2FC08

loc_2FBEC
ADD             R1, SP, #8+var_s0
LDR             R0, =aOptarg_0 ; "OPTARG"
STRB            R7, [R1,#-4]!
BL              sub_2AF84

loc_2FBFC
MOV             R9, #0
MOV             R7, #0x3F ; '?'
B               loc_2FAA0

loc_2FC08
LDR             R3, =stderr
MOV             R2, R7
LDR             R1, =aIllegalOptionC_2 ; "Illegal option -%c\n"
LDR             R0, [R3] ; stream
BL              fprintf
LDR             R0, =aOptarg_0 ; "OPTARG"
BL              sub_2AF78
B               loc_2FBFC

loc_2FC28
LDRB            R0, [R3,#1]
ADD             R1, R3, #1
CMP             R0, #0x3A ; ':'
ADDEQ           R3, R3, #2
MOVNE           R3, R1
B               loc_2FB2C

loc_2FC40
LDR             R3, =stderr
MOV             R2, R7
LDR             R1, =aNoArgForCOptio_0 ; "No arg for -%c option\n"
MOV             R4, #0
LDR             R0, [R3] ; stream
BL              fprintf
LDR             R0, =aOptarg_0 ; "OPTARG"
BL              sub_2AF78
B               loc_2FBFC

loc_2FC64
CMP             R4, R3
BNE             loc_2FC70

loc_2FC6C
ADD             R6, R6, #4

loc_2FC70
MOV             R1, R4
LDR             R0, =aOptarg_0 ; "OPTARG"
BL              sub_2AF84
B               loc_2FBA4

loc_2FC80
MOV             R4, R3
B               loc_2FC6C

loc_2FC88
LDR             R3, =dword_7DBB0
LDR             R0, =aOptarg_0 ; "OPTARG"
LDR             R1, [R3]
ADD             R1, R1, #0x3C ; '<'
BL              sub_2AF84
B               loc_2FBA8
; End of function sub_2F9C4

off_2FCA0 DCD aUsageGetoptsOp ; "usage: getopts optstring var [arg]"
off_2FCA4 DCD dword_7DBB4
off_2FCA8 DCD aOptarg_0 ; "OPTARG"
off_2FCAC DCD aOptind_0 ; "OPTIND"
off_2FCB0 DCD aOpterr   ; "OPTERR"
off_2FCB4 DCD stderr
off_2FCB8 DCD aIllegalOptionC_2 ; "Illegal option -%c\n"
off_2FCBC DCD aNoArgForCOptio_0 ; "No arg for -%c option\n"
off_2FCC0 DCD dword_7DBB0



; int sub_2FCC4()
sub_2FCC4

var_78= -0x78
var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x7C
BL              sub_2B6FC
MOV             R6, R0
LDR             R3, =dword_7D640
LDR             R3, [R3]
LDR             R4, [R3]
CMP             R4, #0
BNE             loc_2FD3C
LDR             R0, =aHome ; "HOME"
BL              sub_2F2F4
MOV             R4, R0

loc_2FCF4
CMP             R4, #0
LDREQ           R3, =dword_7DBB0
LDREQ           R4, [R3]
ADDEQ           R4, R4, #0x3C ; '<'

loc_2FD04
LDRB            R3, [R4]
CMP             R3, #0x2F ; '/'
BEQ             loc_2FF08
CMP             R3, #0x2E ; '.'
BNE             loc_2FD78
LDRB            R3, [R4,#1]
CMP             R3, #0x2E ; '.'
BEQ             loc_2FD68

loc_2FD24
CMP             R3, #0x2F ; '/'
BEQ             loc_2FF08
CMP             R3, #0
BEQ             loc_2FF08

loc_2FD34
MOV             R7, R4
B               loc_2FD84

loc_2FD3C
LDRB            R3, [R4]
CMP             R3, #0x2D ; '-'
BNE             loc_2FD04
LDRB            R3, [R4,#1]
CMP             R3, #0
BNE             loc_2FD04
LDR             R0, =aOldpwd ; "OLDPWD"
ORR             R6, R6, #2
BL              sub_2F2F4
MOV             R4, R0
B               loc_2FCF4

loc_2FD68
LDRB            R3, [R4,#2]
CMP             R3, #0x2E ; '.'
BNE             loc_2FD24
B               loc_2FD34

loc_2FD78
CMP             R3, #0
LDREQ           R7, =(asc_67ED0+4) ; "."
BNE             loc_2FD34

loc_2FD84
LDR             R0, =aCdpath ; "CDPATH"
ADD             R5, SP, #0x7C+var_4
BL              sub_2F2F4
STR             R0, [R5,#-0x6C]!

loc_2FD94
LDR             R3, [SP,#0x7C+var_70]
CMP             R3, #0
MOVEQ           R4, R7
BEQ             loc_2FDE4
MOV             R1, R7  ; s
MOV             R0, R5  ; int
LDRB            R8, [R3]
BL              sub_2DB08
ADD             R1, SP, #0x7C+var_6C
MOV             R4, R0
BLX             sub_62DFC
CMP             R0, #0
BLT             loc_2FD94
LDR             R3, [SP,#0x7C+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BNE             loc_2FD94
CMP             R8, #0
CMPNE           R8, #0x3A ; ':'
ORRNE           R6, R6, #2

loc_2FDE4
LDR             R8, =dword_7DBB0
LDR             R11, [R8]
LDR             R3, [R11,#0x28]
ADD             R3, R3, #1
STR             R3, [R11,#0x28]
ANDS            R5, R6, #1
MOVNE           R5, #0
BNE             loc_2FEE0
MOV             R0, R4
BL              sub_2B310
LDR             R3, =dword_7DBB8
MOV             R10, R0
LDR             R3, [R3]
STR             R3, [SP,#0x7C+var_78]
LDR             R9, [R3,#4]
LDRB            R3, [R4]
CMP             R3, #0x2F ; '/'
BEQ             loc_2FE48
LDR             R0, [R11,#0x18]
ADD             R11, R11, #0x3C ; '<'
CMP             R0, R11
BEQ             loc_2FEE0
MOV             R1, R9
BL              sub_2D5C8
MOV             R9, R0

loc_2FE48               ; s
MOV             R0, R4
BL              strlen
MOV             R1, R9
ADD             R0, R0, #2
BL              sub_2D210
LDR             R3, [SP,#0x7C+var_78]
LDRB            R1, [R4]
LDR             R2, [R3,#4]
CMP             R1, #0x2F ; '/'
ADD             R9, R2, #1
BEQ             loc_2FF10
LDRB            R1, [R0,#-1]
CMP             R1, #0x2F ; '/'
MOVNE           R1, #0x2F ; '/'
ADDNE           R5, R0, #1
MOVEQ           R5, R0
STRBNE          R1, [R0]
CMP             R9, R5
BCS             loc_2FEA4
LDRB            R1, [R2,#1]
CMP             R1, #0x2F ; '/'
BNE             loc_2FEA4

loc_2FEA0
ADD             R9, R2, #2

loc_2FEA4
LDR             R11, =(asc_69510+3) ; "/"
MOV             R0, R10 ; s
MOV             R10, #0x2F ; '/'
LDR             R1, =(asc_69510+3) ; "/"
BL              strtok

loc_2FEB8
CMP             R0, #0
BNE             loc_2FF48
CMP             R9, R5
MOV             R3, #0
SUBCC           R5, R5, #1
STRB            R3, [R5]
LDR             R3, [SP,#0x7C+var_78]
LDR             R5, [R3,#4]
CMP             R5, #0
MOVNE           R4, R5

loc_2FEE0               ; path
MOV             R0, R4
BL              chdir
SUBS            R4, R0, #0
BEQ             loc_2FFB4

loc_2FEF0
BL              loc_2A270
CMP             R4, #0
BEQ             loc_3002C
MOV             R1, R7
LDR             R0, =aCanTCdToSM ; "can't cd to %s: %m"
BL              sub_2ABFC

loc_2FF08
MOV             R7, R4
B               loc_2FDE4

loc_2FF10
STRB            R1, [R0]
ADD             R5, R0, #1
LDRB            R12, [R4,#1]
ADD             R1, R10, #1
CMP             R12, #0x2F ; '/'
BNE             loc_2FF40
LDRB            LR, [R4,#2]
CMP             LR, #0x2F ; '/'
ADDNE           R5, R0, #2
STRBNE          R12, [R0,#1]
ADDNE           R10, R10, #2
BNE             loc_2FEA0

loc_2FF40
MOV             R10, R1
B               loc_2FEA4

loc_2FF48
LDRB            R2, [R0]
CMP             R2, #0x2E ; '.'
BNE             loc_2FF6C
LDRB            R2, [R0,#1]
CMP             R2, #0x2E ; '.'
BNE             loc_2FFA8
LDRB            R2, [R0,#2]
CMP             R2, #0
BEQ             loc_2FF90

loc_2FF6C
MOV             R1, R5
BL              sub_2D5C8
ADD             R5, R0, #1
STRB            R10, [R0]
B               loc_2FF98

loc_2FF80
SUB             R5, R5, #1
LDRB            R2, [R5,#-1]
CMP             R2, #0x2F ; '/'
BEQ             loc_2FF98

loc_2FF90
CMP             R5, R9
BHI             loc_2FF80

loc_2FF98               ; delim
MOV             R1, R11
MOV             R0, #0  ; s
BL              strtok
B               loc_2FEB8

loc_2FFA8
CMP             R2, #0
BEQ             loc_2FF98
B               loc_2FF6C

loc_2FFB4
MOV             R1, #1
MOV             R0, R5
BL              sub_2BDBC
LDR             R3, =dword_7D6A4
MOV             LR, #1
LDR             R2, =dword_7D4CC
LDR             R3, [R3]
LDR             R12, [R2]
SUB             R1, R3, #4
ADD             R2, R3, #0x78 ; 'x'

loc_2FFDC
CMP             R1, R2
BEQ             loc_2FEF0
LDR             R3, [R1,#4]!

loc_2FFE8
CMP             R3, #0
BEQ             loc_2FFDC
LDR             R0, [R3,#8]
CMP             R0, #0
BEQ             loc_30020
CMP             R0, #2
BNE             loc_30024
LDR             R0, [R3,#4]
LDR             R0, [R0]
LDRB            R0, [R0]
TST             R0, #2
BNE             loc_30024
CMP             R12, #0
BLE             loc_30024

loc_30020
STRB            LR, [R3,#0xC]

loc_30024
LDR             R3, [R3]
B               loc_2FFE8

loc_3002C
TST             R6, #2
BEQ             loc_30044
LDR             R3, [R8]
LDR             R0, =(aSS_2+3) ; "%s\n"
LDR             R1, [R3,#0x18]
BL              sub_2BEA0

loc_30044
MOV             R0, #0
ADD             SP, SP, #0x7C ; '|'
POP             {R4-R11,PC}
; End of function sub_2FCC4

off_30050 DCD dword_7D640
off_30054 DCD aHome     ; "HOME"
off_30058 DCD dword_7DBB0
off_3005C DCD aOldpwd   ; "OLDPWD"
off_30060 DCD asc_67ED0+4 ; "."
off_30064 DCD aCdpath   ; "CDPATH"
off_30068 DCD dword_7DBB8
off_3006C DCD asc_69510+3 ; "/"
off_30070 DCD aCanTCdToSM ; "can't cd to %s: %m"
off_30074 DCD dword_7D6A4
off_30078 DCD dword_7D4CC
off_3007C DCD aSS_2+3   ; "%s\n"



; int sub_30080()
sub_30080
PUSH            {R4-R10,LR}
LDR             R5, =off_7D4D0
LDR             R3, [R5] ; unk_7D64C
LDR             R2, [R3,#0x48]
CMP             R2, #0
BEQ             loc_300AC
SUB             R1, R2, #1
ADD             R2, R2, #0xF
STR             R1, [R3,#0x48]
LDR             R0, [R3,R2,LSL#2]
POP             {R4-R10,PC}

loc_300AC
LDR             R2, [R3,#0xC]
SUB             R2, R2, #1
CMP             R2, #0
STR             R2, [R3,#0xC]
BLT             loc_300E4
LDR             R2, [R3,#0x14]
ADD             R1, R2, #1
STR             R1, [R3,#0x14]
LDRB            R0, [R2]

loc_300D0
LDR             R3, [R5] ; unk_7D64C
LDR             R2, [R3,#0x40]
STR             R0, [R3,#0x40]
STR             R2, [R3,#0x44]
POP             {R4-R10,PC}

loc_300E4
LDR             R1, [R3,#0x1C]
CMP             R1, #0
BEQ             loc_30128
CMN             R2, #1
BNE             loc_3011C
LDR             R2, [R1,#0xC]
CMP             R2, #0
BEQ             loc_3011C
LDR             R3, [R3,#0x14]
LDRB            R3, [R3,#-1]
CMP             R3, #0x20 ; ' '
CMPNE           R3, #9
MOVWNE          R0, #0x101
BNE             loc_300D0

loc_3011C
BL              sub_2A514
BL              sub_30080
B               loc_300D0

loc_30128
CMN             R2, #0x5A ; 'Z'
BLT             loc_3013C
LDR             R2, [R3,#0x18]
CMP             R2, #0
BNE             loc_30150

loc_3013C
LDR             R2, [R3,#0x14]
MOV             R0, #0x100
ADD             R2, R2, #1
STR             R2, [R3,#0x14]
B               loc_300D0

loc_30150
LDR             R4, [R3,#0x10]
CMP             R4, #0
BGT             loc_301AC
BL              sub_2A2A4

loc_30160
LDR             R3, [R5] ; unk_7D64C
LDR             R9, =(aOgutmout+3) ; "TMOUT"
LDR             R10, =dword_7D708
LDR             R7, [R3,#0x18]
STR             R7, [R3,#0x14]
LDR             R3, =dword_7DBB0
LDR             R8, [R3]

loc_3017C
LDR             R3, [R5] ; unk_7D64C
LDR             R0, [R3,#8] ; fd
LDRB            R3, [R8,#0x40]
CMP             R3, #0
BEQ             loc_30198
CMP             R0, #0
BEQ             loc_301F8

loc_30198               ; nbytes
MOVW            R2, #0x3FF
MOV             R1, R7  ; buf
BL              sub_60320
SUBS            R4, R0, #0
BLE             loc_302DC

loc_301AC
LDR             R7, [R5] ; unk_7D64C
LDR             R6, [R7,#0x14]

loc_301B4
MOV             R1, R6
SUB             R4, R4, #1
LDRB            R3, [R1],#1 ; src
CMP             R3, #0
BNE             loc_302EC
MOV             R2, R4  ; n
MOV             R0, R6  ; dest
BL              memmove

loc_301D4
CMP             R4, #0
BNE             loc_301B4
LDR             R3, [R7,#0x14]
SUB             R3, R6, R3
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R7,#0xC]
BLT             loc_30160
B               loc_30308

loc_301F8
MOV             R0, R9
BL              sub_2F2F4
CMP             R0, #0
MOVEQ           R6, #0xFFFFFFFF
BEQ             loc_30220
MOV             R6, #0x3E8
BL              atoi
MUL             R6, R6, R0
CMP             R6, #0
MOVLE           R6, #0xFFFFFFFF

loc_30220
LDR             R3, =dword_7DBB4
MOV             R2, R7
LDR             R0, [R10]
LDR             R1, =dword_7D69C
LDR             R3, [R3]
STR             R6, [R0,#4]
LDR             R1, [R1]
LDR             R3, [R3,#0xD0]
ADD             R3, R3, #5
STR             R3, [R0,#8]
MOV             R3, #0x400
BL              sub_5C41C
SUBS            R4, R0, #0
BNE             loc_302A4
MOV             R2, #2  ; n
LDR             R1, =aC ; "^C"
MOV             R0, #1  ; fd
BL              write
LDR             R3, [R8,#0xD8]
CMP             R3, #0
BEQ             loc_30290
MOV             R3, #0xA
STRB            R4, [R7,#1]
STRB            R3, [R7]
MOV             R0, #2  ; sig
BL              raise
MOV             R4, #1
B               loc_301AC

loc_30290
MOV             R3, #0xFFFFFF82
MOV             R0, #0xA ; c
STRB            R3, [R8]
BL              j_putchar_unlocked
B               loc_3017C

loc_302A4
BGE             loc_301AC
LDR             R3, =dword_7DB94
CMP             R6, #0
LDR             R3, [R3]
LDR             R2, [R3]
SUB             R3, R2, #0xB
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVLE           R3, #0
CMP             R3, #0
BEQ             loc_302DC
LDR             R0, =aTimedOutWaitin ; "\atimed out waiting for input: auto-log"...
BL              puts
BL              sub_33FBC

loc_302DC
LDR             R3, [R5] ; unk_7D64C
MOV             R2, #0xFFFFFF9D
STR             R2, [R3,#0xC]
B               loc_3013C

loc_302EC
CMP             R3, #0xA
BNE             loc_30350
LDR             R3, [R7,#0x14]
MOV             R6, R1
SUB             R3, R1, R3
SUB             R3, R3, #1
STR             R3, [R7,#0xC]

loc_30308
LDR             R3, =dword_7DBB0
STR             R4, [R7,#0x10]
LDR             R3, [R3]
LDRB            R3, [R3,#0x45]
CMP             R3, #0
BEQ             loc_30338
LDRB            R4, [R6]
MOV             R3, #0
STRB            R3, [R6]
LDR             R0, [R7,#0x14]
BL              sub_2C294
STRB            R4, [R6]

loc_30338
LDR             R2, [R5] ; unk_7D64C
LDR             R3, [R2,#0x14]
ADD             R1, R3, #1
STR             R1, [R2,#0x14]
LDRB            R0, [R3]
B               loc_300D0

loc_30350
MOV             R6, R1
B               loc_301D4
; End of function sub_30080

off_30358 DCD off_7D4D0
off_3035C DCD aOgutmout+3 ; "TMOUT"
off_30360 DCD dword_7D708
off_30364 DCD dword_7DBB0
off_30368 DCD dword_7DBB4
off_3036C DCD dword_7D69C
off_30370 DCD aC        ; "^C"
off_30374 DCD dword_7DB94
off_30378 DCD aTimedOutWaitin ; "\atimed out waiting for input: auto-log"...



; int sub_3037C()
sub_3037C
PUSH            {R4,LR}
MOVW            R4, #0x101

loc_30384
BL              sub_30080
CMP             R0, R4
POPNE           {R4,PC}
B               loc_30384
; End of function sub_3037C




; int sub_30394()
sub_30394
LDR             R3, =dword_7D734
LDR             R2, [R3]
CMP             R2, #0
BEQ             loc_303B8
MOV             R2, #0
STR             R2, [R3]
LDR             R3, =dword_7D704
LDR             R0, [R3]
BX              LR

loc_303B8
LDR             R3, =dword_7D714
MOV             R1, #2
PUSH            {R4-R6,LR}
MOVW            R5, #0x101
LDR             R0, [R3]
BL              sub_318E0

loc_303D0
BL              sub_319C8
CMP             R0, #9
CMPNE           R0, #0x20 ; ' '
MOV             R4, R0
MOVEQ           R3, #1
MOVNE           R3, #0
CMP             R0, R5
ORREQ           R3, R3, #1
CMP             R3, #0
BNE             loc_303D0
CMP             R0, #0x23 ; '#'
BNE             loc_30418

loc_30400
BL              sub_30080
CMP             R0, #0x100
CMPNE           R0, #0xA
BNE             loc_30400
BL              sub_2989C
B               loc_303D0

loc_30418
CMP             R0, #0x5C ; '\'
BEQ             loc_30498
CMP             R0, #0x100
LDR             R6, =asc_68753 ; "\n()&|;"
BEQ             loc_30490
CMP             R0, #0xA
BNE             loc_30438
BL              sub_29868

loc_30438               ; c
MOV             R1, R4
LDR             R0, =asc_68753 ; "\n()&|;"
BL              strchr
SUBS            R5, R0, #0
BEQ             loc_30498
SUB             R3, R5, R6
CMP             R3, #2
BLE             loc_30478
BL              sub_319C8
CMP             R4, R0
ADDEQ           R5, R5, #4
BEQ             loc_30478
BL              sub_2989C
CMP             R4, #0x26 ; '&'
CMPEQ           R0, #0x3E ; '>'
BEQ             loc_30498

loc_30478
LDR             R3, =byte_6875A
SUB             R5, R5, R6
LDRB            R0, [R3,R5]
LDR             R3, =dword_7D704
STR             R0, [R3]
POP             {R4-R6,PC}

loc_30490
ADD             R5, R6, #6
B               loc_30478

loc_30498
MOV             R3, #0
MOV             R0, R4
MOV             R2, R3
MOV             R1, R3
POP             {R4-R6,LR}
B               sub_308C0
; End of function sub_30394

off_304B0 DCD dword_7D734
off_304B4 DCD dword_7D704
off_304B8 DCD dword_7D714
off_304BC DCD asc_68753 ; "\n()&|;"
off_304C0 DCD byte_6875A



; int sub_304C4()
sub_304C4
PUSH            {R4-R10,LR}
LDR             R5, =dword_7D698
LDR             R9, =dword_7D728
LDR             R6, [R5]
LDR             R7, =dword_7D738

loc_304D8
AND             R8, R6, #4

loc_304DC
BL              sub_30394
CMP             R8, #0
MOV             R4, R0
BNE             loc_30548

loc_304EC
CMP             R4, #3
BNE             loc_3052C
LDR             R3, [R9]
CMP             R3, #0
BNE             loc_3052C
TST             R6, #2
BEQ             loc_30554
LDR             R0, [R7]
BL              sub_2C428
CMP             R0, #0
BEQ             loc_30554
LDR             R4, =off_63758 ; "end of file"
LDR             R3, =dword_7D704
SUB             R4, R0, R4
MOV             R4, R4,ASR#2
STR             R4, [R3]

loc_3052C
MOV             R3, #0
MOV             R0, R4
STR             R3, [R5]
POP             {R4-R10,PC}

loc_3053C
BL              sub_342E8
BL              sub_30394
MOV             R4, R0

loc_30548
CMP             R4, #1
BEQ             loc_3053C
B               loc_304EC

loc_30554
LDR             R3, [R5]
TST             R3, #1
BEQ             loc_3052C
LDR             R0, [R7]
BL              sub_29CD0
LDR             R1, [R0]
CMP             R1, #0
BEQ             loc_3052C
LDR             R3, [R1,#0xC]
TST             R3, #1
BNE             loc_3052C
LDR             R0, [R1,#8]
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_304DC
BL              sub_2A6D4
B               loc_304D8
; End of function sub_304C4

off_30598 DCD dword_7D698
off_3059C DCD dword_7D728
off_305A0 DCD dword_7D738
off_305A4 DCD off_63758 ; "end of file"
off_305A8 DCD dword_7D704



; void *sub_305AC()
sub_305AC
LDR             R3, =dword_7D72C
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R3, [R4]
CMP             R3, #0x18
LDREQ           R3, =dword_7D698
MOVEQ           R2, #8
STREQ           R2, [R3]
BL              sub_304C4
CMP             R0, #3
BEQ             loc_305E0
MOV             R0, #0xFFFFFFFF
BL              sub_2E7E4

loc_305E0
LDR             R3, [R4]
CMP             R3, #0x18
BNE             loc_3065C
LDR             R3, =dword_7D6D4
MOV             R2, #0
MOV             R1, R2
LDR             R5, [R3]
LDR             R3, =dword_7D728
LDR             R3, [R3]
CMP             R3, #0
MOVEQ           R3, #0x19
STREQ           R3, [R4]
LDR             R4, =dword_7D738
LDR             R0, [R4]
BL              sub_2D644
LDR             R3, [R4]
LDR             R2, =dword_7D6D8
STR             R3, [R5,#8]
MOV             R3, #0
STR             R3, [R5]
LDR             R3, [R2]
CMP             R3, #0
BNE             loc_30648
STR             R5, [R2]
POP             {R4-R6,PC}

loc_30644
MOV             R3, R2

loc_30648
LDR             R2, [R3]
CMP             R2, #0
BNE             loc_30644
STR             R5, [R3]
POP             {R4-R6,PC}

loc_3065C
SUB             R3, R3, #0x16
CMP             R3, #1
BHI             loc_306C8
LDR             R3, =dword_7D738
MOV             R1, #0
STR             R1, [R4,#0x10]
MOV             R2, #0xA
LDR             R5, [R3]
MOV             R0, R5
BL              sub_18990
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R0, #0
CMPGE           R3, #0
BNE             loc_306A4
STR             R0, [R4,#0xC]
POP             {R4-R6,PC}

loc_306A4
LDRB            R3, [R5]
CMP             R3, #0x2D ; '-'
BNE             loc_306C8
LDRB            R3, [R5,#1]
CMP             R3, #0
BNE             loc_306C8
MOV             R3, #0xFFFFFFFF
STR             R3, [R4,#0xC]
POP             {R4-R6,PC}

loc_306C8
BL              sub_2C38C
STR             R0, [R4,#0x10]
POP             {R4-R6,PC}
; End of function sub_305AC

off_306D4 DCD dword_7D72C
off_306D8 DCD dword_7D698
off_306DC DCD dword_7D6D4
off_306E0 DCD dword_7D728
off_306E4 DCD dword_7D738
off_306E8 DCD dword_7D6D8
off_306EC DCD dword_7DB94



; int __fastcall sub_306F0(int)
sub_306F0

var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R5, R0
LDR             R8, =dword_7D734
SUB             SP, SP, #0x14
MOV             R4, #0
LDR             R10, =0x221F9C01
MOV             R6, R8

loc_3070C
BL              sub_304C4
CMP             R0, #0
MOV             R3, #1
STR             R3, [R8]
BEQ             loc_30740
CMP             R0, R3
BNE             loc_30758
TST             R5, #1
BEQ             loc_30758

loc_30730
BL              sub_342E8

loc_30734
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_30740
CMP             R4, #0
BNE             loc_30730
TST             R5, #1
MOVNE           R4, #0xFFFFFFFF
MOVEQ           R4, #0
B               loc_30730

loc_30758
LDR             R7, =dword_7D698
CMP             R5, #2
MOV             R3, #7
STR             R3, [R7]
BEQ             loc_307EC

loc_3076C
ORR             R3, R5, #2
MOV             R11, #7
STR             R3, [SP,#0x14+var_10]
BL              sub_34BB8
MOV             R9, R0

loc_30780
BL              sub_304C4
CMP             R0, #6
BEQ             loc_30808
CMP             R0, #7
BEQ             loc_3083C
MOV             R2, #1
STR             R2, [R6]
BL              sub_304C4
CMP             R0, #5
MOV             R7, R0
BEQ             loc_30844
CMP             R4, #0
BEQ             loc_307C8

loc_307B4
MOV             R0, #0xC
BL              sub_2C370
MOV             R2, #7
STM             R0, {R2,R4,R9}
MOV             R9, R0

loc_307C8               ; switch 6 cases
CMP             R7, #5
LDRLS           PC, [PC,R7,LSL#2] ; switch jump
B               def_307CC ; jumptable 000307CC default case, cases 2,3
jpt_307CC DCD loc_30880 ; jump table for switch statement
DCD loc_30880
DCD def_307CC
DCD def_307CC
DCD loc_30888
DCD loc_30888

loc_307EC
BL              sub_304C4
MOV             R0, R10,ASR R0
MOV             R3, #1
STR             R3, [R6]
TST             R0, #1
BNE             loc_30734
B               loc_3076C

loc_30808
MOV             R2, #5

loc_3080C
STR             R2, [SP,#0x14+var_8]
STR             R11, [R7]
BL              sub_34BB8
STR             R0, [SP,#0x14+var_C]
MOV             R0, #0xC
BL              sub_2C370
LDR             R2, [SP,#0x14+var_8]
LDR             R1, [SP,#0x14+var_C]
STM             R0, {R2,R9}
MOV             R9, R0
STR             R1, [R0,#8]
B               loc_30780

loc_3083C
MOV             R2, #6
B               loc_3080C

loc_30844
LDR             R2, [R9]
CMP             R2, #1
STREQ           R2, [R9,#4]
BEQ             loc_30874
CMP             R2, #2
BEQ             loc_3086C
MOV             R0, #0x10
BL              sub_2C370
STR             R9, [R0,#8]
MOV             R9, R0

loc_3086C
MOV             R2, #3
STR             R2, [R9]

loc_30874
CMP             R4, #0
BEQ             loc_30888 ; jumptable 000307CC cases 4,5
B               loc_307B4

loc_30880               ; jumptable 000307CC cases 0,1
MOV             R2, #1
STR             R2, [R6]

loc_30888               ; jumptable 000307CC cases 4,5
MOV             R4, R9
LDR             R5, [SP,#0x14+var_10]
B               loc_3070C

def_307CC               ; jumptable 000307CC default case, cases 2,3
TST             R5, #1
BEQ             loc_308A4
MOV             R0, #0xFFFFFFFF
BL              sub_2E7E4

loc_308A4
MOV             R2, #1
MOV             R4, R9
STR             R2, [R6]
B               loc_30734
; End of function sub_306F0

off_308B4 DCD dword_7D734
dword_308B8 DCD 0x221F9C01
off_308BC DCD dword_7D698


; Attributes: bp-based frame fpd=0xFFFFFFE0

; int __fastcall sub_308C0(int, int, unsigned int, int)
sub_308C0

var_74= -0x74
var_70= -0x70
var_5C= -0x5C
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_23= -0x23
var_20= -0x20
s= -0x1C
var_4= -4

PUSH            {R4-R11,LR}
ADD             R11, SP, #0x20
MOV             R4, R1
SUB             SP, SP, #0x4C
MOV             R8, R0
MOV             R6, R2
MOV             R1, #0  ; c
MOV             R2, #0x18 ; n
SUB             R0, R11, #-(-0x20+s) ; s
STR             R3, [R11,#-0x20+var_44]
BL              memset
CMP             R4, #4
MOVEQ           R3, #1
MOVNE           R3, #0
STR             R3, [R11,#-0x20+var_3C]
MOVEQ           R3, #1
STREQ           R3, [R11,#-0x20+var_20]
BEQ             loc_30914
CMP             R4, #1
STR             R4, [R11,#-0x20+var_20]
BNE             loc_30920

loc_30914
LDRB            R3, [R11,#-0x20+s]
ORR             R3, R3, #4
STRB            R3, [R11,#-0x20+s]

loc_30920
LDR             R2, =dword_7DBB8
MOV             R1, #0
SUB             R5, R11, #-(-0x20+var_20)
STR             R1, [R11,#-0x20+var_2C]
STR             R1, [R11,#-0x20+var_30]
LDR             R3, [R2]
LDR             R10, [R3,#4]
MOV             R3, R1
STRD            R2, R3, [R11,#-0x20+var_38]

loc_30944
CMP             R6, #1
BLS             loc_309D8
MOVW            R2, #0x101
CMP             R8, R2
BNE             loc_30960
BL              sub_3037C
MOV             R8, R0

loc_30960
LDR             R3, [R11,#-0x20+var_44]
CMP             R3, #0
BNE             loc_30F68

loc_3096C
LDR             R3, [R11,#-0x20+var_38]
SUB             R4, R6, #1
LDR             R9, [R3]
LDR             R7, [R9,#4]
SUB             R7, R10, R7

loc_30980
MOV             R1, R10
MOV             R0, R8
BL              sub_2DA30
LDRB            R2, [R4,#1]!
MOV             R10, R0
CMP             R2, #0
BNE             loc_30F74
CMP             R8, #0x100
CMPNE           R8, #0xA
BNE             loc_30F88
LDR             R3, =off_7D4D0
MOV             R8, #0x100
LDR             R2, [R3] ; unk_7D64C
LDR             R3, [R2,#4]
ADD             R3, R3, #1
STR             R3, [R2,#4]
LDR             R3, =dword_7D6B4
LDR             R2, [R3]
LDR             R3, =dword_7D714
STR             R2, [R3]

loc_309D0
LDR             R3, [R9,#4]
ADD             R10, R3, R7

loc_309D8
LDR             R3, [R11,#-0x20+var_38]
MOV             R4, R10
LDR             R7, [R3]
LDR             R3, =asc_686D1 ; "}-+?="
RSB             R3, R3, #1
STR             R3, [R11,#-0x20+var_48]
B               loc_30BC0

loc_309F4               ; jumptable 00030BF4 case 1
CMP             R9, #0
BNE             loc_30A08
LDR             R3, [R5,#8]
CMP             R3, #0
BEQ             loc_30E8C ; jumptable 00030BF4 case 11

loc_30A08
STRB            R8, [R4]
ADD             R10, R4, #1
BL              sub_3199C
BL              sub_30080
MOV             R8, R0
B               loc_30944

loc_30A20               ; jumptable 00030BF4 case 12
LDR             R2, [R11,#-0x20+var_30]
SUB             R3, R8, #0x5C ; '\'
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVEQ           R3, #0
CMP             R3, #0
BEQ             loc_30AD0
BL              sub_30080
MOV             R1, R0  ; c
MOV             R8, R0
LDR             R0, =aNrbtfavx012345 ; "nrbtfavx\\01234567"
BL              strchr
CMP             R0, #0
STR             R0, [R11,#-0x20+var_28]
BEQ             loc_30BA4
UXTB            R3, R8
SUB             R9, R11, #-(-0x20+var_4)
STRB            R3, [R9,#-0x20]!
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #7
STR             R9, [R11,#-0x20+var_28]
BHI             loc_30B04
MOV             R8, #3

loc_30A80
BL              sub_30080
LDR             R3, [R11,#-0x20+var_28]
UXTB            R0, R0
ADD             R2, R3, #1
STR             R2, [R11,#-0x20+var_28]
STRB            R0, [R3,#1]
SUB             R0, R0, #0x30 ; '0'
CMP             R0, #7
BHI             loc_30AAC
SUBS            R8, R8, #1
BNE             loc_30A80

loc_30AAC
BL              sub_2989C

loc_30AB0
LDR             R3, [R11,#-0x20+var_28]
MOV             R2, #0
SUB             R0, R11, #-(-0x20+var_4)
STRB            R2, [R3]
STR             R9, [R0,#-0x24]!
BL              sub_5E668
SUBS            R8, R0, #0
BEQ             loc_30BB8 ; jumptable 00030BF4 case 14

loc_30AD0
CMP             R6, #0
BEQ             loc_30AF0
LDRB            R3, [R5,#4]
TST             R3, #4
BNE             loc_30AF0
LDR             R3, [R5,#8]
CMP             R3, #0
BEQ             loc_30AFC ; jumptable 00030BF4 case 0

loc_30AF0
MOV             R3, #0xFFFFFF81
ADD             R4, R4, #1
STRB            R3, [R4,#-1]

loc_30AFC               ; jumptable 00030BF4 case 0
STRB            R8, [R4]
B               loc_30D38

loc_30B04
CMP             R8, #0x78 ; 'x'
BNE             loc_30B98
MOV             R10, #3

loc_30B10
BL              sub_30080
LDR             R3, [R11,#-0x20+var_28]
UXTB            R0, R0
ADD             R2, R3, #1
STR             R2, [R11,#-0x20+var_28]
STRB            R0, [R3,#1]
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_30B44
ORR             R0, R0, #0x20 ; ' '
SUB             R0, R0, #0x61 ; 'a'
CMP             R0, #5
BHI             loc_30B4C

loc_30B44
SUBS            R10, R10, #1
BNE             loc_30B10

loc_30B4C
BL              sub_2989C
CMP             R10, #3
BNE             loc_30AB0

loc_30B58
ORR             R8, R8, #0x100

loc_30B5C
TST             R8, #0x100
BEQ             loc_30AD0
CMP             R6, #0
UXTB            R8, R8
BEQ             loc_30B7C
LDRB            R3, [R5,#4]
TST             R3, #4
BEQ             loc_30B88

loc_30B7C
MOV             R3, #0xFFFFFF81
ADD             R4, R4, #1
STRB            R3, [R4,#-1]

loc_30B88
MOV             R3, #0x5C ; '\'
ADD             R4, R4, #1
STRB            R3, [R4,#-1]
B               loc_30AD0

loc_30B98
SUB             R3, R11, #-(-0x20+var_23)
STR             R3, [R11,#-0x20+var_28]
B               loc_30AB0

loc_30BA4
CMP             R8, #0x27 ; '''
CMPNE           R8, #0x22 ; '"'
BNE             loc_30B58
CMP             R8, #0
BNE             loc_30B5C

loc_30BB8               ; jumptable 00030BF4 case 14
BL              sub_30080
MOV             R8, R0

loc_30BC0
LDR             R3, [R7,#8]
SUB             R3, R3, R4
CMP             R3, #3
BHI             loc_30BE0
MOV             R1, R4
MOV             R0, #4
BL              sub_2D210
MOV             R4, R0

loc_30BE0
LDR             R9, [R5]
MOV             R0, R8
MOV             R1, R9
BL              sub_29A14
CMP             R0, #0xE ; switch 15 cases
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_30BF4 ; jumptable 00030BF4 default case, case 13
jpt_30BF4 DCD loc_30AFC ; jump table for switch statement
DCD loc_309F4
DCD loc_30C38
DCD loc_30D20
DCD loc_30D40
DCD loc_30D74
DCD loc_30E44
DCD loc_310FC
DCD loc_30DBC
DCD loc_30E08
DCD loc_30E18
DCD loc_30E8C
DCD loc_30A20
DCD def_30BF4
DCD loc_30BB8

loc_30C38               ; jumptable 00030BF4 case 2
BL              sub_3037C
CMP             R0, #0x100
BNE             loc_30C64
MOV             R1, R4
MOV             R3, #0xFFFFFF81
STRB            R3, [R1],#2
MOV             R3, #0x5C ; '\'
STRB            R3, [R4,#1]
BL              sub_2989C
MOV             R4, R1
B               loc_30BB8 ; jumptable 00030BF4 case 14

loc_30C64
CMP             R0, #0xA
BNE             loc_30C74
BL              sub_3199C
B               loc_30BB8 ; jumptable 00030BF4 case 14

loc_30C74
LDR             R2, [R11,#-0x20+var_3C]
ADD             R3, R4, #2
CMP             R0, #0x24 ; '$'
MOVNE           R2, #0
ANDEQ           R2, R2, #1
CMP             R2, #0
MOVNE           R2, #0xFFFFFF81
STRBNE          R2, [R4]
MOVNE           R2, #0x5C ; '\'
STRBNE          R2, [R4,#1]
MOVNE           R4, R3
LDRB            R3, [R5,#4]
TST             R3, #4
BEQ             loc_30CDC
SUB             R3, R0, #0x5C ; '\'
BIC             R3, R3, #4
CMP             R0, #0x24 ; '$'
CMPNE           R3, #0
BEQ             loc_30CDC
CMP             R0, #0x22 ; '"'
BNE             loc_30CFC
CMP             R6, #0
BEQ             loc_30CDC

loc_30CD0
LDR             R3, [R5,#8]
CMP             R3, #0
BEQ             loc_30D04

loc_30CDC
MOV             R3, R4
MOV             R2, #0xFFFFFF81
STRB            R2, [R3],#2
STRB            R0, [R4,#1]
MOV             R4, R3

loc_30CF0
MOV             R3, #1
STR             R3, [R11,#-0x20+var_34]
B               loc_30BB8 ; jumptable 00030BF4 case 14

loc_30CFC
CMP             R0, #0x7D ; '}'
BEQ             loc_30CD0

loc_30D04
MOV             R3, R4
MOV             R2, #0xFFFFFF81
STRB            R2, [R3],#2
MOV             R2, #0x5C ; '\'
STRB            R2, [R4,#1]
MOV             R4, R3
B               loc_30CDC

loc_30D20               ; jumptable 00030BF4 case 3
MOV             R3, #2
STR             R3, [R5]

loc_30D28
CMP             R6, #0
MOVEQ           R3, #0xFFFFFF88
STRBEQ          R3, [R4]
BNE             loc_30BB8 ; jumptable 00030BF4 case 14

loc_30D38
ADD             R4, R4, #1
B               loc_30BB8 ; jumptable 00030BF4 case 14

loc_30D40               ; jumptable 00030BF4 case 4
MOV             R3, #1
STR             R3, [R5]
LDRB            R3, [R5,#4]
ORR             R3, R3, #4
STRB            R3, [R5,#4]

loc_30D54
LDR             R3, [R5,#8]
CMP             R3, #0
LDRBNE          R3, [R5,#4]
UBFXNE          R2, R3, #0, #1
EORNE           R2, R2, #1
BFINE           R3, R2, #0, #1
STRBNE          R3, [R5,#4]
B               loc_30D28

loc_30D74               ; jumptable 00030BF4 case 5
CMP             R6, #0
BEQ             loc_30D8C
LDR             R3, [R5,#8]
CMP             R3, #0
STR             R3, [R11,#-0x20+var_30]
BEQ             loc_30AFC ; jumptable 00030BF4 case 0

loc_30D8C
LDR             R3, [R5,#0xC]
MOV             R0, #1
MOV             R1, #0
STRD            R0, R1, [R11,#-0x20+var_34]
CMP             R3, #0
LDRBEQ          R2, [R5,#4]
STREQ           R3, [R5]
BFIEQ           R2, R3, #2, #1
STRBEQ          R2, [R5,#4]
CMP             R8, #0x22 ; '"'
BEQ             loc_30D54
B               loc_30D28

loc_30DBC               ; jumptable 00030BF4 case 8
LDRB            R2, [R5,#4]
TST             R2, #1
BNE             loc_30AFC ; jumptable 00030BF4 case 0
LDR             R3, [R5,#8]
CMP             R3, #0
BLE             loc_30AFC ; jumptable 00030BF4 case 0
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R5,#8]
BNE             loc_30DF0
TST             R2, #2
LDRNE           R5, [R5,#0x18]
BNE             loc_30E00

loc_30DF0
LDR             R3, [R5,#0xC]
CMP             R3, #0
SUBGT           R3, R3, #1
STRGT           R3, [R5,#0xC]

loc_30E00
MOV             R8, #0x83
B               loc_30AFC ; jumptable 00030BF4 case 0

loc_30E08               ; jumptable 00030BF4 case 9
LDR             R3, [R5,#0x10]
ADD             R3, R3, #1

loc_30E10
STR             R3, [R5,#0x10]
B               loc_30AFC ; jumptable 00030BF4 case 0

loc_30E18               ; jumptable 00030BF4 case 10
LDR             R3, [R5,#0x10]
CMP             R3, #0
SUBGT           R3, R3, #1
BGT             loc_30E10
BL              sub_319C8
CMP             R0, #0x29 ; ')'
LDREQ           R5, [R5,#0x18]
MOVEQ           R8, #0x87
BEQ             loc_30AFC ; jumptable 00030BF4 case 0
BL              sub_2989C
B               loc_30AFC ; jumptable 00030BF4 case 0

loc_30E44               ; jumptable 00030BF4 case 6
LDR             R3, =dword_7D698
LDR             R3, [R3]
TST             R3, #8
BEQ             loc_3159C
MOV             R3, #0x60 ; '`'
ADD             R4, R4, #1
STRB            R3, [R4,#-1]
B               loc_30CF0

def_30BF4               ; jumptable 00030BF4 default case, case 13
LDR             R3, [R5,#8]
CMP             R3, #0
BNE             loc_30EBC
CMP             R8, #0x26 ; '&'
BNE             loc_30E8C ; jumptable 00030BF4 case 11
BL              sub_30080
MOVW            R3, #0x13E
CMP             R0, #0x3E ; '>'
MOVEQ           R8, R3
BL              sub_2989C

loc_30E8C               ; jumptable 00030BF4 case 11
LDR             R2, [R5]
CMP             R2, #3
LDREQ           R0, =aMissing ; "missing '))'"
BEQ             loc_30EB8
CLZ             R3, R6
CMP             R2, #0
MOV             R3, R3,LSR#5
MOVEQ           R3, #0
CMP             R3, #0
BEQ             loc_30ECC
LDR             R0, =aUnterminatedQu ; "unterminated quoted string"

loc_30EB8
BL              sub_2B44C

loc_30EBC
MOVW            R3, #0x101
CMP             R8, R3
BEQ             loc_30BB8 ; jumptable 00030BF4 case 14
B               loc_30AFC ; jumptable 00030BF4 case 0

loc_30ECC
LDR             R3, [R5,#8]
CMP             R3, #0
LDRNE           R0, =aMissing_0 ; "missing '}'"
BNE             loc_30EB8
STRB            R3, [R4],#1
CMP             R6, #0
LDR             R5, [R7,#4]
LDR             R6, =dword_7D704
SUB             R4, R4, R5
BNE             loc_30F28
BIC             R3, R8, #2
MOVW            R2, #0x13E
CMP             R8, R2
CMPNE           R3, #0x3C ; '<'
BNE             loc_30F24
LDR             R3, [R11,#-0x20+var_34]
CMP             R3, #0
BNE             loc_30F24
MOV             R0, R5
BL              sub_29594
CMP             R0, #0
BNE             loc_30FDC

loc_30F24
BL              sub_2989C

loc_30F28
LDR             R2, [R11,#-0x20+var_34]
MOV             R0, R4
LDR             R3, =dword_7D728
STR             R2, [R3]
LDR             R3, =dword_7D648
LDR             R2, [R11,#-0x20+var_2C]
STR             R2, [R3]
BL              sub_2B208
LDR             R3, =dword_7D738
MOV             R0, #3
STR             R5, [R3]

loc_30F54
STR             R0, [R6]
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_30F60
BL              sub_3037C
MOV             R8, R0

loc_30F68
CMP             R8, #9
BEQ             loc_30F60
B               loc_3096C

loc_30F74
CMP             R2, R8
BNE             loc_30F88
BL              sub_3037C
MOV             R8, R0
B               loc_30980

loc_30F88
LDR             R2, [R9,#4]
ADD             R1, R7, #1
ADD             R1, R2, R1 ; src
SUBS            R4, R10, R1
BEQ             loc_309D0
CMP             R8, #0xFF
SUBGT           R4, R4, #1
LDRB            R8, [R1,#-1]
CMP             R4, #0
BEQ             loc_309D0
ADD             R3, R4, #0xF
MOV             R2, R4  ; n
BIC             R3, R3, #7
SUB             SP, SP, R3
MOV             R3, SP
MOV             R0, R3  ; dest
BL              memcpy
MOV             R1, #0
STRB            R1, [R0,R4]
BL              sub_2A6D4
B               loc_309D0

loc_30FDC
LDRB            R3, [R5]
CMP             R3, #0
MOVEQ           R5, #0xFFFFFFFF
BEQ             loc_30FF8
MOV             R0, R5  ; nptr
BL              atoi
MOV             R5, R0

loc_30FF8
MOV             R0, #0x18
BL              sub_2C370
CMP             R8, #0x3E ; '>'
MOV             R4, R0
BNE             loc_3105C
MOV             R3, #1
STR             R3, [R0,#8]
BL              sub_319C8
CMP             R0, #0x3E ; '>'
MOVEQ           R3, #0x15
BEQ             loc_31040
CMP             R0, #0x7C ; '|'
MOVEQ           R3, #0x12
BEQ             loc_31040
CMP             R0, #0x26 ; '&'
MOVEQ           R3, #0x16
MOVNE           R3, #0x10
BNE             loc_3109C

loc_31040
STR             R3, [R4]

loc_31044
LDR             R3, =dword_7D72C
CMP             R5, #0
STRGE           R5, [R4,#8]
MOV             R0, #2
STR             R4, [R3]
B               loc_30F54

loc_3105C
MOVW            R3, #0x13E
CMP             R8, R3
BNE             loc_3107C
MOV             R3, #1
STR             R3, [R0,#8]
BL              sub_30080
MOV             R3, #0x11
B               loc_31040

loc_3107C
BL              sub_319C8
CMP             R0, #0x3C ; '<'
BEQ             loc_310A4
CMP             R0, #0x3E ; '>'
BEQ             loc_310F4
CMP             R0, #0x26 ; '&'
BEQ             loc_310EC
MOV             R3, #0x13

loc_3109C
STR             R3, [R4]
B               loc_310E4

loc_310A4
MOV             R0, #0x10
LDR             R7, =dword_7D6D4
BL              sub_2C370
MOV             R3, #0x18
MOV             R4, R0
STR             R3, [R0]
MOV             R0, #0x10
BL              sub_2C370
STR             R4, [R0,#4]
STR             R0, [R7]
BL              sub_319C8
CMP             R0, #0x2D ; '-'
LDREQ           R3, [R7]
MOVEQ           R2, #1
STREQ           R2, [R3,#0xC]
BEQ             loc_31044

loc_310E4
BL              sub_2989C
B               loc_31044

loc_310EC
MOV             R3, #0x17
B               loc_31040

loc_310F4
MOV             R3, #0x14
B               loc_31040

loc_310FC               ; jumptable 00030BF4 case 7
BL              sub_319C8
LDR             R2, =dword_7D698
MOV             R3, R0
LDR             R2, [R2]
UBFX            R2, R2, #3, #1
CMP             R0, #0xFF
ORRGT           R2, R2, #1
CMP             R2, #0
BNE             loc_31174
CMP             R0, #0x28 ; '('
CMPNE           R0, #0x7B ; '{'
MOVNE           R2, #1
MOVEQ           R2, #0
CMP             R0, #0x5F ; '_'
MOVEQ           R2, #0
ANDNE           R2, R2, #1
CMP             R2, #0
BEQ             loc_311A8
ORR             R2, R0, #0x20 ; ' '
SUB             R2, R2, #0x61 ; 'a'
UXTB            R2, R2
CMP             R2, #0x19
BLS             loc_311A8
SUB             R2, R0, #0x21 ; '!'
CMP             R2, #0x1F
BHI             loc_31174
LDR             R1, =0xC1FF920D
MOV             R2, R1,LSR R2
TST             R2, #1
BNE             loc_311A8

loc_31174
LDR             R1, [R5]
SUBS            R2, R1, #1
MOVNE           R2, #1
CMP             R3, #0x27 ; '''
MOVNE           R2, #0
CMP             R2, #0
MOVEQ           R3, #0x24 ; '$'
MOVNE           R3, #1
STRBEQ          R3, [R4]
ADDEQ           R4, R4, #1
STRNE           R3, [R11,#-0x20+var_30]
BL              sub_2989C
B               loc_30BB8 ; jumptable 00030BF4 case 14

loc_311A8
CMP             R3, #0x28 ; '('
BNE             loc_31244
BL              sub_319C8
CMP             R0, #0x28 ; '('
BEQ             loc_31734
MOV             R8, #0
BL              sub_2989C

loc_311C4
LDR             R10, [R7,#4]
SUBS            R4, R4, R10
MOVEQ           R9, R4
BEQ             loc_311F4
ADD             R2, R4, #0xE
MOV             R1, R10 ; src
BIC             R2, R2, #7
SUB             SP, SP, R2
MOV             R2, R4  ; n
MOV             R9, SP
MOV             R0, R9  ; dest
BL              memcpy

loc_311F4
CMP             R8, #0
BEQ             loc_3164C

loc_311FC
LDR             R3, =dword_7D714
MOV             R1, #2
LDR             R0, [R3]
BL              sub_318E0
BL              sub_319C8
CMP             R0, #0x60 ; '`'
MOV             R2, R0
BEQ             loc_31624
BGT             loc_315A4
CMP             R0, #0xA
BEQ             loc_31614
CMP             R0, #0x5C ; '\'
BEQ             loc_315B8

loc_31230
MOV             R1, R10
MOV             R0, R2
BL              sub_2DA30
MOV             R10, R0
B               loc_311FC

loc_31244
MOV             R2, R4
MOV             R1, #0xFFFFFF82
LDR             R8, [R5]
CMP             R3, #0x7B ; '{'
STRB            R1, [R2],#1
ADD             R9, R4, #2
LDR             R1, [R7,#4]
MOVNE           R10, #1
SUB             R2, R2, R1
STR             R2, [R11,#-0x20+var_40]
BNE             loc_3127C
BL              sub_319C8
MOV             R10, #0
MOV             R3, R0

loc_3127C
CMP             R3, #0x5F ; '_'
BNE             loc_31334

loc_31284
MOV             R1, R9
MOV             R0, R3
BL              sub_2DA30
MOV             R9, R0
BL              sub_319C8
CMP             R0, #0x5F ; '_'
MOV             R3, R0
BEQ             loc_31284
UXTB            R2, R0
SUB             R1, R2, #0x30 ; '0'
CMP             R1, #9
BLS             loc_31284
ORR             R2, R2, #0x20 ; ' '
SUB             R2, R2, #0x61 ; 'a'
CMP             R2, #0x19
BLS             loc_31284

loc_312C4
SUBS            R4, R3, #0x7D ; '}'
MOVNE           R4, #1
CMP             R10, #0xA
MOVNE           R4, #0
CMP             R4, #0
BNE             loc_31594
CMP             R10, #0
BNE             loc_31428
CMP             R3, #0x25 ; '%'
BEQ             loc_3148C
BGT             loc_31440
CMP             R3, #0x23 ; '#'
BEQ             loc_3156C

loc_312F8               ; c
MOV             R1, R3
LDR             R0, =asc_686D1 ; "}-+?="
BL              strchr
CMP             R0, #0
LDRNE           R3, [R11,#-0x20+var_48]
ADDNE           R0, R0, R3
ORRNE           R10, R0, R10
UXTBNE          R10, R10
B               loc_31478

loc_3131C
MOV             R10, #0xA
MOV             R3, R2
B               loc_3127C

loc_31328
MOV             R3, R2
MOV             R10, #0xA
B               loc_31284

loc_31334
UXTB            R2, R3
ORR             R1, R2, #0x20 ; ' '
SUB             R1, R1, #0x61 ; 'a'
CMP             R1, #0x19
BLS             loc_31284
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #9
BHI             loc_31380

loc_31354
MOV             R1, R9
MOV             R0, R3
BL              sub_2DA30
MOV             R9, R0
BL              sub_319C8
SUB             R2, R0, #0x30 ; '0'
MOV             R3, R0
UXTB            R2, R2
CMP             R2, #9
BLS             loc_31354
B               loc_312C4

loc_31380
STR             R3, [R11,#-0x20+var_4C]
BL              sub_319C8
LDR             R3, [R11,#-0x20+var_4C]
MOV             R2, R0
CMP             R10, #0
CMPEQ           R3, #0x23 ; '#'
BNE             loc_31404
CMP             R0, #0x5F ; '_'
BEQ             loc_31328
UXTB            R3, R0
SUB             R1, R3, #0x30 ; '0'
CMP             R1, #9
BLS             loc_3131C
ORR             R3, R3, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R3, #0x19
BLS             loc_3131C
STR             R0, [R11,#-0x20+var_4C]
BL              sub_319C8
LDR             R2, [R11,#-0x20+var_4C]
SUBS            R0, R0, #0x7D ; '}'
MOVNE           R0, #1
CMP             R2, #0x7D ; '}'
ORREQ           R0, R0, #1
CMP             R0, #0
MOVEQ           R3, R2
MOVEQ           R10, #0xA
MOVEQ           R2, #0x7D ; '}'
BEQ             loc_31404
BL              sub_2989C
LDR             R2, [R11,#-0x20+var_4C]
MOV             R3, #0x23 ; '#'
MOV             R10, #0

loc_31404
SUB             R1, R3, #0x21 ; '!'
CMP             R1, #0x1F
BHI             loc_31420
LDR             R0, =0xC1FF920D
MOV             R1, R0,LSR R1
TST             R1, #1
BNE             loc_31430

loc_31420
CMP             R10, #0xA
MOVEQ           R10, #0

loc_31428
BL              sub_2989C
B               loc_31478

loc_31430
STRB            R3, [R4,#2]
ADD             R9, R4, #3
MOV             R3, R2
B               loc_312C4

loc_31440
CMP             R3, #0x2F ; '/'
BEQ             loc_31574
CMP             R3, #0x3A ; ':'
BNE             loc_312F8
BL              sub_319C8
MOV             R1, R0  ; c
STR             R0, [R11,#-0x20+var_4C]
LDR             R0, =asc_686D1 ; "}-+?="
BL              strchr
CMP             R0, #0
LDR             R3, [R11,#-0x20+var_4C]
BNE             loc_31484
MOV             R10, #0xC
BL              sub_2989C

loc_31478
CMP             R8, #3
MOVEQ           R8, #1
B               loc_314B4

loc_31484
MOV             R10, #0x10
B               loc_312F8

loc_3148C
MOV             R10, #6

loc_31490
STR             R3, [R11,#-0x20+var_4C]
BL              sub_319C8
LDR             R3, [R11,#-0x20+var_4C]
CMP             R3, R0
ADDEQ           R10, R10, #1
UXTBEQ          R10, R10
BEQ             loc_314B0
BL              sub_2989C

loc_314B0
MOV             R8, #0

loc_314B4
LDR             R3, [R5]
CMP             R3, R8
BNE             loc_314CC
LDRB            R3, [R5,#4]
TST             R3, #1
BEQ             loc_3151C

loc_314CC
CMP             R10, #1
BEQ             loc_3151C
LDR             R4, [R5,#0x14]
MOV             R2, #0x14 ; n
MOV             R1, #0  ; c
CMP             R4, #0
SUBEQ           SP, SP, #0x28 ; '('
MOVEQ           R4, SP
ADD             R0, R4, #4 ; s
BL              memset
STR             R8, [R4,#0x74+var_74]
MOVS            R8, R8
STR             R5, [R4,#0x74+var_5C]
MOVNE           R8, #1
STR             R4, [R5,#0x14]
MOV             R5, R4
LDRB            R3, [R4,#0x74+var_70]
ORR             R3, R3, #2
BFI             R3, R8, #2, #1
STRB            R3, [R4,#0x74+var_70]

loc_3151C
LDR             R3, [R11,#-0x20+var_38]
CMP             R10, #1
LDR             R2, [R11,#-0x20+var_40]
LDR             R3, [R3]
LDR             R3, [R3,#4]
STRB            R10, [R3,R2]
BEQ             loc_31558
LDR             R3, [R5,#8]
ADD             R3, R3, #1
STR             R3, [R5,#8]
LDRB            R3, [R5,#4]
TST             R3, #4
LDRNE           R3, [R5,#0xC]
ADDNE           R3, R3, #1
STRNE           R3, [R5,#0xC]

loc_31558
MOV             R1, R9
MOV             R0, #0x3D ; '='
BL              sub_2DA30
MOV             R4, R0
B               loc_30BB8 ; jumptable 00030BF4 case 14

loc_3156C
MOV             R10, #8
B               loc_31490

loc_31574
BL              sub_319C8
CMP             R0, #0x2F ; '/'
MOVNE           R8, R10
MOVNE           R10, #0xD
BNE             loc_31428
MOV             R10, #0xE
MOV             R8, R4
B               loc_314B4

loc_31594
MOV             R10, #0xA
B               loc_31428

loc_3159C
MOV             R8, #1
B               loc_311C4

loc_315A4
SUB             R1, R0, #0x100
CMP             R1, #1
BHI             loc_31230

loc_315B0
LDR             R0, =aEofInBackquote ; "EOF in backquote substitution"
B               loc_30EB8

loc_315B8
BL              sub_30080
SUB             R1, R0, #0x5C ; '\'
MOV             R2, R0
BIC             R1, R1, #4
CMP             R0, #0x24 ; '$'
CMPNE           R1, #0
BEQ             loc_31608
LDRB            R1, [R5,#4]
EOR             R1, R1, #4
UBFX            R1, R1, #2, #1
CMP             R0, #0x22 ; '"'
ORRNE           R1, R1, #1
CMP             R1, #0
BEQ             loc_31608
STR             R0, [R11,#-0x20+var_40]
MOV             R1, R10
MOV             R0, #0x5C ; '\'
BL              sub_2DA30
LDR             R2, [R11,#-0x20+var_40]
MOV             R10, R0

loc_31608
CMP             R2, #0xFF
BLE             loc_31230
B               loc_315B0

loc_31614
STR             R0, [R11,#-0x20+var_40]
BL              sub_29868
LDR             R2, [R11,#-0x20+var_40]
B               loc_31230

loc_31624
MOV             R1, R10
MOV             R0, #0
BL              sub_2DA30
LDR             R3, [R7,#4]
MOV             R2, R0
CMP             R2, R3
SUB             R0, R0, R3
BEQ             loc_3164C

loc_31644
BL              sub_2B208
BL              sub_2A67C

loc_3164C
SUB             R10, R11, #-(-0x20+var_4)
LDR             R3, [R10,#-0x28]!

loc_31654
CMP             R3, #0
BNE             loc_316C4
MOV             R0, #8
STR             R3, [R11,#-0x20+var_40]
BL              sub_2C370
CMP             R8, #0
LDR             R3, [R11,#-0x20+var_40]
LDRNE           R1, =dword_7D6B4
MOVEQ           R2, R8
STR             R0, [R10]
MOV             R0, #2
LDRNE           R2, [R1]
STRNE           R3, [R1]
STR             R2, [R11,#-0x20+var_40]
BL              sub_306F0
CMP             R8, #0
LDR             R2, [R11,#-0x20+var_40]
LDRNE           R1, =dword_7D6B4
MOV             R3, R0
STRNE           R2, [R1]
BNE             loc_316D0
STR             R0, [R11,#-0x20+var_40]
BL              sub_304C4
CMP             R0, #0xA
LDR             R3, [R11,#-0x20+var_40]
BEQ             loc_316D0
MOV             R0, #0xA
BL              sub_2E7E4

loc_316C4
MOV             R10, R3
LDR             R3, [R3]
B               loc_31654

loc_316D0
LDR             R2, [R10]
CMP             R8, #0
STR             R3, [R2,#4]
BEQ             loc_316F0
BL              sub_2A5FC
LDR             R3, =dword_7D734
MOV             R2, #0
STR             R2, [R3]

loc_316F0
LDR             R3, [R7,#0xC]
CMP             R3, R4
BLS             loc_3172C
CMP             R9, #0
LDR             R3, [R7,#4]
BEQ             loc_3171C
MOV             R0, R3  ; dest
MOV             R2, R4  ; n
MOV             R1, R9  ; src
BL              memcpy
ADD             R3, R0, R4

loc_3171C
MOV             R2, #0xFFFFFF84
ADD             R4, R3, #1
STRB            R2, [R3]
B               loc_30BB8 ; jumptable 00030BF4 case 14

loc_3172C
BL              sub_2D148
B               loc_316F0

loc_31734
LDR             R8, [R5,#0x14]
MOV             R2, #0x14 ; n
MOV             R1, #0  ; c
CMP             R8, #0
SUBEQ           SP, SP, #0x28 ; '('
MOVEQ           R8, SP
ADD             R0, R8, #4 ; s
BL              memset
MOV             R3, #3
STR             R5, [R8,#0x74+var_5C]
STR             R3, [R8,#0x74+var_74]
STR             R8, [R5,#0x14]
MOV             R5, R8
LDRB            R3, [R8,#0x74+var_70]
ORR             R3, R3, #4
STRB            R3, [R8,#0x74+var_70]
MOV             R3, #0xFFFFFF86
STRB            R3, [R4]
B               loc_30D38
; End of function sub_308C0

off_31780 DCD dword_7DBB8
off_31784 DCD off_7D4D0
off_31788 DCD dword_7D6B4
off_3178C DCD dword_7D714
off_31790 DCD asc_686D1 ; "}-+?="
off_31794 DCD aNrbtfavx012345 ; "nrbtfavx\\01234567"
off_31798 DCD dword_7D698
off_3179C DCD aMissing  ; "missing '))'"
off_317A0 DCD aUnterminatedQu ; "unterminated quoted string"
off_317A4 DCD aMissing_0 ; "missing '}'"
off_317A8 DCD dword_7D704
off_317AC DCD dword_7D728
off_317B0 DCD dword_7D648
off_317B4 DCD dword_7D738
off_317B8 DCD dword_7D72C
off_317BC DCD dword_7D6D4
dword_317C0 DCD 0xC1FF920D
off_317C4 DCD aEofInBackquote ; "EOF in backquote substitution"
off_317C8 DCD dword_7D734



; int __fastcall sub_317CC(const char *, int)
sub_317CC

var_1B4= -0x1B4
var_1B0= -0x1B0
var_1AC= -0x1AC
var_1A8= -0x1A8
var_1A4= -0x1A4
var_1A0= -0x1A0
var_19C= -0x19C
var_198= -0x198
env= -0x18C

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x1B4
STR             R1, [SP,#0x1B4+var_1B0]
BL              sub_2A67C
LDR             R3, =dword_7D6B4
ADD             R0, SP, #0x1B4+env ; env
LDR             R2, [R3]
STR             R2, [SP,#0x1B4+var_1B4]
MOV             R2, #0
STR             R2, [R3]
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDR             R2, [R3,#0x24]
STR             R2, [SP,#0x1B4+var_1A8]
LDR             R3, [R3,#0x28]
STR             R3, [SP,#0x1B4+var_1AC]
BL              _setjmp
LDR             R3, =dword_7DBB0
SUBS            R5, R0, #0
LDR             R4, [R3]
BEQ             loc_3189C

loc_31820
LDR             R3, [SP,#0x1B4+var_1A8]
STR             R3, [R4,#0x24]
LDR             R3, =dword_7DBB0
LDR             R2, [SP,#0x1B4+var_1AC]
LDR             R3, [R3]
STR             R2, [R3,#0x28]
LDR             R2, [R3,#0x28]
CMP             R2, #0
BEQ             loc_318BC

loc_31844
LDR             R2, [SP,#0x1B4+var_1B4]
LDR             R3, =dword_7D6B4
STR             R2, [R3]
BL              sub_2A5FC
MOV             R3, #0xF
MOV             R1, #0
STR             R3, [SP,#0x1B4+var_1A4]
ADD             R0, SP, #0x1B4+var_1A4
LDR             R3, =dword_7D738
MOV             R2, #0x80
STR             R1, [SP,#0x1B4+var_1A0]
LDR             R3, [R3]
STR             R3, [SP,#0x1B4+var_19C]
LDR             R3, =dword_7D648
LDR             R3, [R3]
STR             R3, [SP,#0x1B4+var_198]
BL              sub_32FC4
LDR             R3, =dword_7DBB8
LDR             R3, [R3]
LDR             R0, [R3,#4]
ADD             SP, SP, #0x1B4
POP             {R4,R5,PC}

loc_3189C
ADD             R3, SP, #0x1B4+env
STR             R3, [R4,#0x24]
BL              sub_30080
MOV             R3, R5
MOV             R2, #1
LDR             R1, [SP,#0x1B4+var_1B0]
BL              sub_308C0
B               loc_31820

loc_318BC
LDR             R3, [R3,#0x2C]
CMP             R3, #0
BEQ             loc_31844
BL              sub_2A17C
; End of function sub_317CC

off_318CC DCD dword_7D6B4
off_318D0 DCD dword_7DBB0
off_318D4 DCD dword_7D738
off_318D8 DCD dword_7D648
off_318DC DCD dword_7DBB8



; _DWORD *__fastcall sub_318E0(_DWORD *result, int)
sub_318E0

var_1C= -0x1C

CMP             R0, #0
BXEQ            LR
LDR             R3, =dword_7D714
CMP             R1, #1
MOV             R2, #0
PUSH            {R4,R5,LR}
SUB             SP, SP, #0x14
STR             R2, [R3]
BEQ             loc_3191C
CMP             R1, #2
BEQ             loc_31978
LDR             R3, =dword_7DBB0
LDR             R4, [R3]
ADD             R4, R4, #0x3C ; '<'
B               loc_3192C

loc_3191C
LDR             R3, =dword_7DBB4
LDR             R3, [R3]
LDR             R4, [R3,#0xE0]

loc_31928
ADD             R4, R4, #4

loc_3192C
LDR             R3, =dword_7DBB8
ADD             R0, SP, #0x20+var_1C
LDR             R3, [R3]
LDR             R1, [R3,#0xC]
BL              sub_2B2B0
MOV             R0, R4
LDR             R4, =dword_7D69C
MOV             R1, #4
BL              sub_317CC
MOV             R5, R0
LDR             R0, [R4] ; ptr
BL              free
MOV             R0, R5
BL              sub_174F8
STR             R0, [R4]
ADD             R0, SP, #0x20+var_1C
BL              sub_2AA40
ADD             SP, SP, #0x14
POP             {R4,R5,PC}

loc_31978
LDR             R3, =dword_7DBB4
LDR             R3, [R3]
LDR             R4, [R3,#0xF0]
B               loc_31928
; End of function sub_318E0

off_31988 DCD dword_7D714
off_3198C DCD dword_7DBB0
off_31990 DCD dword_7DBB4
off_31994 DCD dword_7DBB8
off_31998 DCD dword_7D69C



; _DWORD *sub_3199C()
sub_3199C
LDR             R3, =off_7D4D0
MOV             R1, #2
LDR             R2, [R3] ; unk_7D64C
LDR             R3, [R2,#4]
ADD             R3, R3, #1
STR             R3, [R2,#4]
LDR             R3, =dword_7D6B4
LDR             R0, [R3]
B               sub_318E0
; End of function sub_3199C

off_319C0 DCD off_7D4D0
off_319C4 DCD dword_7D6B4



; int sub_319C8()
sub_319C8
PUSH            {R4,LR}

loc_319CC
BL              sub_30080
CMP             R0, #0x5C ; '\'
MOV             R4, R0
BNE             loc_319EC
BL              sub_30080
CMP             R0, #0xA
BEQ             loc_319F4
BL              sub_2989C

loc_319EC
MOV             R0, R4
POP             {R4,PC}

loc_319F4
BL              sub_3199C
B               loc_319CC
; End of function sub_319C8




; int __fastcall sub_319FC(_DWORD *)
sub_319FC
LDR             R3, =dword_7D734
MOV             R1, R0
PUSH            {R4,LR}
MOV             R4, #0
STR             R4, [R3]
LDR             R3, =dword_7D698
STR             R4, [R3]
LDR             R3, =dword_7D6D8
STR             R4, [R3]
LDR             R3, =dword_7D6B4
STR             R0, [R3]
BL              sub_318E0
LDR             R3, =dword_7D714
MOV             R0, #1
STR             R4, [R3]
POP             {R4,LR}
B               sub_306F0
; End of function sub_319FC

off_31A40 DCD dword_7D734
off_31A44 DCD dword_7D698
off_31A48 DCD dword_7D6D8
off_31A4C DCD dword_7D6B4
off_31A50 DCD dword_7D714



; int __fastcall sub_31A54(const char *, int)
sub_31A54

var_1A4= -0x1A4
var_1A0= -0x1A0
var_19C= -0x19C
var_198= -0x198
var_194= -0x194
env= -0x188

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x1A8
STR             R1, [SP,#0x1A8+var_19C]
BL              sub_2B310
STR             R0, [SP,#0x1A8+var_1A0]
BL              sub_2A67C
ADD             R0, SP, #0x1A8+var_194
BL              sub_2B2DC
LDR             R3, =dword_7DBB0
ADD             R0, SP, #0x1A8+env ; env
LDR             R3, [R3]
LDR             R3, [R3,#0x24]
STR             R3, [SP,#0x1A8+var_198]
MOV             R3, #0
STR             R3, [SP,#0x1A8+var_1A4]
BL              _setjmp
SUBS            R4, R0, #0
BNE             loc_31B20
LDR             R3, =dword_7DBB0
ADD             R2, SP, #0x1A8+env
LDR             R6, =dword_7D734
LDR             R7, =dword_7D704
LDR             R8, =dword_7D6B8
LDR             R3, [R3]
STR             R2, [R3,#0x24]

loc_31AB8
MOV             R0, #0
BL              sub_319FC
CMN             R0, #1
MOV             R5, R0
BEQ             loc_31B20
LDR             R3, [R6]
MOV             R0, R5
CMP             R3, #0
LDR             R3, [SP,#0x1A8+var_19C]
LDRNE           R1, [R7]
MOVEQ           R1, R4
CLZNE           R1, R1
MOVNE           R1, R1,LSR#5
EOR             R1, R1, #1
MVN             R1, R1
AND             R1, R1, R3
BL              sub_31D94
LDR             R3, [SP,#0x1A8+var_1A4]
CMP             R5, #0
MOVNE           R3, R0
ADD             R0, SP, #0x1A8+var_194
STR             R3, [SP,#0x1A8+var_1A4]
BL              sub_2AA40
LDR             R3, [R8]
CMP             R3, #0
BEQ             loc_31AB8

loc_31B20
ADD             R0, SP, #0x1A8+var_194
BL              sub_2AA40
BL              sub_2A5FC
LDR             R0, [SP,#0x1A8+var_1A0]
BL              sub_295C0
LDR             R3, =dword_7DBB0
CMP             R4, #0
LDR             R0, [SP,#0x1A8+var_198] ; env
LDR             R3, [R3]
STR             R0, [R3,#0x24]
BEQ             loc_31B54
MOV             R1, R4  ; val
BL              longjmp

loc_31B54
LDR             R0, [SP,#0x1A8+var_1A4]
ADD             SP, SP, #0x1A8
POP             {R4-R8,PC}
; End of function sub_31A54

off_31B60 DCD dword_7DBB0
off_31B64 DCD dword_7D734
off_31B68 DCD dword_7D704
off_31B6C DCD dword_7D6B8



; int __fastcall sub_31B70(int, int, int *, char)
sub_31B70

var_1A4= -0x1A4
var_1A0= -0x1A0
var_19C= -0x19C
var_198= -0x198
var_194= -0x194
var_190= -0x190
var_18C= -0x18C
env= -0x188

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x1A8
STR             R3, [SP,#0x1A8+var_194]
LDR             R3, =dword_7D6A8
STRD            R0, R1, [SP,#0x1A8+var_19C]
ADD             R0, SP, #0x1A8+env ; env
STR             R2, [SP,#0x1A8+var_1A4]
LDR             R3, [R3]
STR             R3, [SP,#0x1A8+var_190]
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
STR             R3, [SP,#0x1A8+var_1A0]
LDR             R3, [R3,#0x24]
STR             R3, [SP,#0x1A8+var_18C]
BL              _setjmp
SUBS            R5, R0, #0
BNE             loc_31C94
LDR             R2, [SP,#0x1A8+var_1A0]
ADD             R3, SP, #0x1A8+env
STR             R3, [R2,#0x24]
LDR             R3, [SP,#0x1A8+var_1A4]
LDR             R2, =dword_7D6A8
LDR             R1, [R3],#4
STR             R1, [R2]
LDR             R2, =dword_7D640
STR             R3, [R2]
LDR             R3, =dword_7D720
LDR             R2, [SP,#0x1A8+var_19C]
STR             R5, [R3]
LDR             R3, =off_63614 ; "3eval"
CMP             R2, R3
BNE             loc_31CC4
LDR             R3, [SP,#0x1A8+var_1A4]
LDR             R4, [R3,#4]
CMP             R4, #0
MOVEQ           R4, R5
BEQ             loc_31C78
ADD             R7, R3, #8
LDR             R3, [R3,#8]
CMP             R3, #0
BEQ             loc_31C64
LDR             R3, =dword_7DBB8
MOV             R8, #0x20 ; ' '
LDR             R6, [R3]
LDR             R1, [R6,#4]

loc_31C24
MOV             R0, R4
BL              sub_2D5C8
LDR             R4, [R7],#4
MOV             R1, R0
CMP             R4, #0
BEQ             loc_31C4C
MOV             R0, R8
BL              sub_2DA30
MOV             R1, R0
B               loc_31C24

loc_31C4C
MOV             R0, R4
BL              sub_2DA30
LDR             R3, [R6,#4]
SUB             R0, R0, R3
BL              sub_2B208
MOV             R4, R0

loc_31C64
LDR             R3, [SP,#0x1A8+var_194]
MOV             R0, R4
AND             R1, R3, #2
BL              sub_31A54

loc_31C74
MOV             R4, R0

loc_31C78
BL              sub_2A2A4
LDR             R3, =stdout
LDR             R0, [R3] ; stream
BL              ferror_unlocked
LDR             R3, [SP,#0x1A8+var_1A0]
ORR             R0, R4, R0
STRB            R0, [R3]

loc_31C94
LDR             R3, =stdout
LDR             R0, [R3] ; stream
BL              clearerr
LDR             R2, [SP,#0x1A8+var_190]
MOV             R0, R5
LDR             R3, =dword_7D6A8
STR             R2, [R3]
LDR             R3, [SP,#0x1A8+var_18C]
LDR             R2, [SP,#0x1A8+var_1A0]
STR             R3, [R2,#0x24]
ADD             SP, SP, #0x1A8
POP             {R4-R8,PC}

loc_31CC4
LDR             R3, [SP,#0x1A8+var_19C]
LDR             R1, [SP,#0x1A8+var_1A4]
LDR             R0, [SP,#0x1A8+var_198]
LDR             R3, [R3,#4]
BLX             R3
B               loc_31C74
; End of function sub_31B70

off_31CDC DCD dword_7D6A8
off_31CE0 DCD dword_7DBB0
off_31CE4 DCD dword_7D640
off_31CE8 DCD dword_7D720
off_31CEC DCD off_63614 ; "3eval"
off_31CF0 DCD dword_7DBB8
off_31CF4 DCD stdout



; void sub_31CF8()
sub_31CF8
LDR             R3, =dword_7DBB0
PUSH            {R4-R10,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0x34]
CMP             R3, #0
POPEQ           {R4-R10,PC}
MOV             R3, #0
LDRB            R8, [R4]
STR             R3, [R4,#0x34]
LDR             R9, =dword_7D6B8
ADD             R7, R4, #0x8B
ADD             R6, R4, #0xD4
MOV             R5, #1

loc_31D2C
LDRB            R3, [R7,#1]!
CMP             R3, #0
BEQ             loc_31D78
LDR             R3, [R9]
CMP             R3, #0
BEQ             loc_31D50
STR             R5, [R4,#0x34]

loc_31D48
STRB            R8, [R4]
POP             {R4-R10,PC}

loc_31D50
LDR             R0, [R6]
CMP             R5, #2
CMPEQ           R0, #0
MOVEQ           R1, #1
MOVNE           R1, #0
BEQ             loc_31D78
CMP             R0, #0
STRB            R1, [R7]
BEQ             loc_31D78
BL              sub_31A54

loc_31D78
ADD             R5, R5, #1
ADD             R6, R6, #4
CMP             R5, #0x41 ; 'A'
BNE             loc_31D2C
B               loc_31D48
; End of function sub_31CF8

off_31D8C DCD dword_7DBB0
off_31D90 DCD dword_7D6B8



; int __fastcall sub_31D94(int, int)
sub_31D94
PUSH            {R4-R8,LR}
SUBS            R5, R0, #0
MOV             R7, R1
LDR             R6, =dword_7DBB0
BEQ             loc_32030
BL              sub_31CF8
LDR             R3, [R5]
CMP             R3, #0xE ; switch 15 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_31DB4 ; jumptable 00031DB4 default case, case 13
jpt_31DB4 DCD loc_31EE8 ; jump table for switch statement
DCD loc_31EF0
DCD loc_31E70
DCD loc_31E04
DCD loc_31E04
DCD loc_31F00
DCD loc_31F00
DCD loc_31F00
DCD loc_31F54
DCD loc_31DF8
DCD loc_31DF8
DCD loc_31F4C
DCD loc_31EF8
DCD def_31DB4
DCD loc_31FA0

loc_31DF8               ; jumptable 00031DB4 cases 9,10
LDR             R3, =sub_33E14

loc_31DFC
MOV             R4, #0
B               loc_31E24

loc_31E04               ; jumptable 00031DB4 cases 3,4
LDR             R3, =sub_33B88

loc_31E08
LDR             R2, [R6]
LDRB            R4, [R2,#0x3D]
CMP             R4, #0
BEQ             loc_31E24
TST             R7, #2
MOVEQ           R4, #0xFFFFFFFF
MOVNE           R4, #0

loc_31E24
MOV             R0, R5
MOV             R1, R7
BLX             R3 ; sub_31D94 sub_33B88 sub_33C88 sub_33E14 sub_33EB0 sub_35620 sub_35964
MOV             R5, R4
MOV             R4, R0
B               loc_31E54

def_31DB4               ; jumptable 00031DB4 default case, case 13
MOV             R1, #2
LDR             R0, [R5,#4]
BL              sub_31D94
CLZ             R4, R0
MOV             R4, R4,LSR#5

loc_31E50
MOV             R5, #0

loc_31E54
LDR             R3, [R6]
STRB            R4, [R3]

loc_31E5C
BL              sub_31CF8
TST             R5, R4
BEQ             loc_32038

loc_31E68
MOV             R0, #4
BL              sub_29EE0

loc_31E70               ; jumptable 00031DB4 case 2
LDR             R3, =dword_7DBB4
LDR             R2, [R6]
LDR             R0, [R5,#0xC]
LDR             R1, [R3]
LDR             R3, [R5,#4]
STR             R3, [R1,#0x148]
STR             R3, [R2,#0x10]
LDR             R2, =dword_7D6CC
LDR             R2, [R2]
CMP             R2, #0
SUBNE           R2, R2, #1
SUBNE           R3, R3, R2
STRNE           R3, [R1,#0x148]
BL              sub_33A58
LDR             R0, [R5,#0xC]
BL              sub_298E4
LDR             R0, [R5,#0xC]
BL              sub_339A4
SUBS            R4, R0, #0
BNE             loc_31ED0
AND             R1, R7, #2
LDR             R0, [R5,#8]
BL              sub_31D94
MOV             R4, R0

loc_31ED0
LDR             R5, [R5,#0xC]
CMP             R5, #0
BEQ             loc_31E54
MOV             R0, #0
BL              sub_2B138
B               loc_31E50

loc_31EE8               ; jumptable 00031DB4 case 0
LDR             R3, =sub_35964
B               loc_31E08

loc_31EF0               ; jumptable 00031DB4 case 1
LDR             R3, =sub_35620
B               loc_31E08

loc_31EF8               ; jumptable 00031DB4 case 12
LDR             R3, =sub_33C88
B               loc_31DFC

loc_31F00               ; jumptable 00031DB4 cases 5-7
SUB             R8, R3, #5
LDR             R0, [R5,#4]
MOV             R1, R8,LSR#1
SUB             R1, R1, #1
ORR             R1, R1, R7
AND             R1, R1, #2
BL              sub_31D94
MOV             R4, R0
CLZ             R0, R0
MOV             R0, R0,LSR#5
CMP             R0, R8
BEQ             loc_31F44
LDR             R3, =dword_7D6B8
LDR             R2, [R3]
CMP             R2, #0
LDREQ           R5, [R5,#8]
BEQ             loc_31F94

loc_31F44
MOV             R5, #0
B               loc_31E5C

loc_31F4C               ; jumptable 00031DB4 case 11
LDR             R3, =sub_33EB0
B               loc_31DFC

loc_31F54               ; jumptable 00031DB4 case 8
MOV             R1, #2
LDR             R0, [R5,#4]
BL              sub_31D94
LDR             R3, =dword_7D6B8
MOV             R4, R0
LDR             R2, [R3]
CMP             R2, #0
BNE             loc_31F44
CMP             R0, #0
LDREQ           R5, [R5,#8]
LDREQ           R3, =sub_31D94
BEQ             loc_31E24
LDR             R5, [R5,#0xC]
CMP             R5, #0
MOVEQ           R4, R5
BEQ             loc_31E54

loc_31F94
LDR             R3, =sub_31D94
MOV             R4, R2
B               loc_31E24

loc_31FA0               ; jumptable 00031DB4 case 14
LDR             R2, [R6]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
MOV             R0, #0
MOV             R1, R5
BL              sub_2E87C
ADD             R4, R0, #4
MOV             R0, R4
BL              sub_174DC
LDR             R3, =dword_7D6C8
ADD             R2, R0, #4
ADD             R4, R0, R4
MOV             R8, R0
MOV             R0, R5
STR             R2, [R3]
LDR             R3, =dword_7D6D0
STR             R4, [R3]
BL              sub_29AE4
LDR             R0, [R5,#8]
MOV             R1, #1
BL              sub_29D4C
LDR             R3, [R0,#8]
MOV             R5, R0
CMP             R3, #1
BNE             loc_32010
LDR             R0, [R0,#4]
BL              sub_299F4

loc_32010
MOV             R3, #1
MOV             R4, #0
STR             R3, [R5,#8]
STR             R8, [R5,#4]
STRB            R4, [R5,#0xC]
MOV             R5, R4
BL              loc_2A270
B               loc_31E54

loc_32030
MOV             R4, R5
B               loc_31F44

loc_32038
TST             R7, #1
BNE             loc_31E68
LDR             R3, [R6]
LDRB            R0, [R3]
POP             {R4-R8,PC}
; End of function sub_31D94

off_3204C DCD dword_7DBB0
off_32050 DCD sub_33E14
off_32054 DCD sub_33B88
off_32058 DCD dword_7DBB4
off_3205C DCD dword_7D6CC
off_32060 DCD sub_35964
off_32064 DCD sub_35620
off_32068 DCD sub_33C88
off_3206C DCD dword_7D6B8
off_32070 DCD sub_33EB0
off_32074 DCD sub_31D94
off_32078 DCD dword_7D6C8
off_3207C DCD dword_7D6D0



; int __fastcall sub_32080(char *, unsigned int)
sub_32080

reject= -0xA8
var_A4= -0xA4
var_A0= -0xA0
var_9C= -0x9C
var_98= -0x98
var_90= -0x90
pipedes= -0x84

AND             R3, R1, #0xC0
TST             R1, #4
SUB             R3, R3, #0x40 ; '@'
PUSH            {R4-R11,LR}
CLZ             R3, R3
SUB             SP, SP, #0xAC
MOV             R3, R3,LSR#5
MOV             R5, R0
MOV             R4, R1
STR             R3, [SP,#0xAC+var_9C]
LDREQ           R3, =unk_68408
BEQ             loc_320C0
LDR             R3, =unk_68407
TST             R1, #0x20
SUB             R2, R3, #1
MOVEQ           R3, R2

loc_320C0
ANDS            R11, R4, #2
STR             R3, [SP,#0xAC+reject]
BEQ             loc_32134
BIC             R4, R4, #2
MOV             R11, #0

loc_320D4
LDRB            R3, [R5]
CMP             R3, #0x7E ; '~'
BNE             loc_32134
AND             R8, R4, #0x11
ADD             R0, R5, #1 ; name
MOV             R10, R5
AND             R3, R4, #4

loc_320F0
LDRB            R9, [R10,#1]
ADD             R7, R10, #1
CMP             R9, #0
BEQ             loc_3225C
CMP             R9, #0x81
BEQ             loc_32134
BHI             loc_32124
CMP             R9, #0x2F ; '/'
BEQ             loc_3225C
CMP             R9, #0x3A ; ':'
BEQ             loc_32254

loc_3211C
MOV             R10, R7
B               loc_320F0

loc_32124
CMP             R9, #0x83
BEQ             loc_3225C
CMP             R9, #0x88
BNE             loc_3211C

loc_32134
LDR             R10, =dword_7D6C4

loc_32138
LDR             R3, =dword_7DBB8
MOV             R9, #0
LDR             R2, [R10]
LDR             R3, [R3]
STR             R3, [SP,#0xAC+var_A4]
LDR             R3, [R3,#4]
SUB             R3, R2, R3

loc_32154               ; reject
LDR             R1, [SP,#0xAC+reject]
ADD             R0, R5, R9 ; s
STR             R3, [SP,#0xAC+var_A0]
BL              strcspn
ADD             R7, R0, R9
LDR             R3, [SP,#0xAC+var_A0]
LDRB            R9, [R5,R7]
ADD             R1, R7, #1
CMP             R9, #0
BEQ             loc_32194
MVN             R2, R9
UBFX            R2, R2, #7, #1
CMP             R9, #0x87
ORREQ           R2, R2, #1
CMP             R2, #0
MOVNE           R7, R1

loc_32194
CMP             R7, #0
MOVEQ           R8, R3
BEQ             loc_32204
LDR             R1, [R10]
MOV             R0, R7
STR             R3, [SP,#0xAC+var_A0]
BL              sub_2D210
MOV             R2, R7  ; n
MOV             R1, R5  ; src
BL              memcpy
LDR             R3, [SP,#0xAC+var_A4]
CMP             R11, #0
LDR             R2, [SP,#0xAC+var_9C]
ADD             R0, R0, R7
MOVNE           R2, #0
STR             R0, [R10]
LDR             R8, [R3,#4]
LDR             R3, [SP,#0xAC+var_A0]
SUB             R8, R0, R8
CMP             R3, R8
MOVGE           R2, #0
ANDLT           R2, R2, #1
CMP             R2, #0
BEQ             loc_32204
MOV             R2, #0
MOV             R1, R8
MOV             R0, R3
BL              sub_2A834

loc_32204
CMP             R9, #0x3A ; ':'
ADD             R6, R7, #1
ADD             R6, R5, R6
BEQ             loc_32300
CMP             R9, #0x3D ; '='
BEQ             loc_322E4
CMP             R9, #0
BEQ             loc_325EC ; jumptable 0003222C case 2
SUB             R9, R9, #0x81
CMP             R9, #7  ; switch 8 cases
LDRLS           PC, [PC,R9,LSL#2] ; switch jump
B               def_3222C ; jumptable 0003222C default case, cases 4,5
jpt_3222C DCD loc_3236C ; jump table for switch statement
DCD loc_32378
DCD loc_325EC
DCD loc_3238C
DCD def_3222C
DCD def_3222C
DCD loc_324C8
DCD loc_32318

loc_32254
CMP             R3, #0
BEQ             loc_3211C

loc_3225C
MOV             R3, #0
STRB            R3, [R10,#1]
LDRB            R3, [R5,#1]
CMP             R3, #0
BNE             loc_322B8
LDR             R0, =aHome ; "HOME"
BL              sub_2F2F4
MOV             R6, R0

loc_3227C
CMP             R6, #0
BEQ             loc_322C8
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_322C8
STRB            R9, [R10,#1]
MOV             R0, R6  ; s
BL              strlen
MOV             R3, R8
MOV             R1, R0
MOV             R2, #2
MOV             R0, R6
BL              sub_2D500
MOV             R5, R7
B               loc_32134

loc_322B8
BL              getpwnam
CMP             R0, #0
LDRNE           R6, [R0,#0x14]
BNE             loc_3227C

loc_322C8
STRB            R9, [R10,#1]
B               loc_32134

loc_322D0
MOV             R6, R3

def_3222C               ; jumptable 0003222C default case, cases 4,5
MOV             R9, #0

loc_322D8
MOV             R3, R8
MOV             R5, R6
B               loc_32154

loc_322E4
TST             R4, #0x20
ADD             R3, R5, R7
BNE             loc_322D0
LDR             R3, [SP,#0xAC+reject]
ORR             R4, R4, #0x20 ; ' '
ADD             R3, R3, #1
STR             R3, [SP,#0xAC+reject]

loc_32300
LDRB            R3, [R6,#-1]
ADD             R5, R5, R7
CMP             R3, #0x7E ; '~'
BEQ             loc_320D4
MOV             R6, R5
B               def_3222C ; jumptable 0003222C default case, cases 4,5

loc_32318               ; jumptable 0003222C case 7
CMP             R11, #0
BNE             loc_32350
MOV             R2, #5  ; n
LDR             R1, =unk_67F9A ; s2
MOV             R0, R6  ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_32350
ADD             R0, R6, #1
ORR             R1, R4, #0x80
BL              sub_32CE0
ADD             R6, R0, #1

loc_32348
MOV             R5, R6
B               loc_32138

loc_32350
EOR             R11, R11, #0x80
MOV             R9, #0

loc_32358
TST             R4, #0x11
ADDNE           R6, R5, R7
ADDNE           R9, R9, #1
ADDNE           R8, R8, #1
B               loc_322D8

loc_3236C               ; jumptable 0003222C case 0
ADD             R8, R8, #1
MOV             R9, #1
B               loc_32358

loc_32378               ; jumptable 0003222C case 1
MOV             R0, R6
ORR             R1, R4, R11
BL              sub_32CE0
MOV             R6, R0
B               loc_32348

loc_3238C               ; jumptable 0003222C case 3
LDR             R3, =dword_7D63C
ORR             R5, R4, R11
LDR             R9, =dword_7DBB0
LDR             R3, [R3]
LDR             R2, [R9]
LDR             R7, [R3,#4]
UBFX            R3, R5, #7, #1
STR             R3, [SP,#0xAC+var_98]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R3, =dword_7DBB8
ADD             R0, SP, #0xAC+var_90
LDR             R3, [R3]
STR             R3, [SP,#0xAC+var_A4]
LDR             R2, [SP,#0xAC+var_A4]
LDR             R3, [R10]
LDR             R2, [R2,#4]
SUB             R3, R3, R2
MOV             R1, R3
STR             R3, [SP,#0xAC+var_A0]
BL              sub_2B2B0
CMP             R7, #0
BEQ             loc_324B4
ADD             R0, SP, #0xAC+pipedes ; pipedes
BL              pipe
CMP             R0, #0
BGE             loc_32404
LDR             R0, =aCanTCreatePipe_0 ; "can't create pipe: %m"
BL              sub_2ABFC

loc_32404
MOV             R0, #1
BL              sub_2CFB8
MOV             R2, #2
MOV             R1, R7
MOV             R8, R0
BL              sub_2EDE0
CMP             R0, #0
BNE             loc_32468
BL              sub_2A248
LDR             R0, [SP,#0xAC+pipedes] ; fd
BL              close
LDR             R0, [SP,#0xAC+pipedes+4]
CMP             R0, #1
BEQ             loc_3244C
MOV             R1, #1
BL              sub_2B0FC
LDR             R0, [SP,#0xAC+pipedes+4] ; fd
BL              close

loc_3244C
LDR             R3, [R9]
MOV             R2, #0
STRB            R2, [R3,#0x3D]
BL              sub_2A454
MOV             R1, #1
MOV             R0, R7
BL              sub_31D94

loc_32468               ; fd
LDR             R0, [SP,#0xAC+pipedes+4]
BL              close
LDR             R7, [SP,#0xAC+pipedes]

loc_32474
AND             R9, R5, #0x11
ADD             R0, SP, #0xAC+var_90
BL              sub_2AA40

loc_32480
CMP             R7, #0
BLT             loc_32598
ADD             R1, SP, #0xAC+pipedes ; buf
MOV             R2, #0x80 ; nbytes
MOV             R0, R7  ; fd
BL              sub_60320
SUBS            R1, R0, #0
BLE             loc_3257C
MOV             R3, R9
LDR             R2, [SP,#0xAC+var_98]
ADD             R0, SP, #0xAC+pipedes
BL              sub_2D500
B               loc_32480

loc_324B4
MOV             R8, R7
MOV             R7, #0xFFFFFFFF
B               loc_32474

loc_324C0
MOV             R1, R0
B               loc_325A8

loc_324C8               ; jumptable 0003222C case 6
LDR             R3, [SP,#0xAC+var_A4]
ADD             R6, R5, R7
LDR             R8, [R10]
ORR             R5, R4, R11
LDR             R7, [R3,#4]
MOV             R3, #0
STRB            R3, [R8,#-1]
SUB             R8, R8, #2

loc_324E8
LDRB            R3, [R8]
CMP             R3, #0x86
BNE             loc_32524
MOV             R2, R8

loc_324F8
CMP             R7, R2
SUB             R3, R8, R2
BCS             loc_32510
LDRB            R1, [R2,#-1]!
CMP             R1, #0x81
BEQ             loc_324F8

loc_32510
ANDS            R9, R3, #1
BEQ             loc_3252C
MVN             R3, R3
ADD             R8, R8, R3
B               loc_324E8

loc_32524
SUB             R8, R8, #1
B               loc_324E8

loc_3252C
SUB             R7, R8, R7
MOV             R0, R7
BL              sub_2A8A4
TST             R5, #0x11
STR             R8, [R10]
ADD             R8, R8, #1
BEQ             loc_32558
MOV             R2, R9
MOV             R1, R9
MOV             R0, R8
BL              sub_2D644

loc_32558
MOV             R0, R8
BL              sub_2CECC
BL              sub_2D5F8
ANDS            R2, R5, #0x80
BNE             loc_32348
ADD             R1, R7, R0
MOV             R0, R7
BL              sub_2A834
B               loc_32348

loc_3257C               ; fd
MOV             R0, R7
BL              close
MOV             R0, R8
BL              sub_2C8C0
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
STRB            R0, [R3,#1]

loc_32598
BL              loc_2A270
LDR             R3, [SP,#0xAC+var_A4]
LDR             R1, [R10]
LDR             R3, [R3,#4]

loc_325A8
CMP             R1, R3
BLS             loc_325C0
LDRB            R2, [R1,#-1]
SUB             R0, R1, #1
CMP             R2, #0xA
BEQ             loc_324C0

loc_325C0
ANDS            R2, R5, #0x80
STR             R1, [R10]
SUB             R1, R1, R3
BNE             loc_325D8
LDR             R0, [SP,#0xAC+var_A0]
BL              sub_2A834

loc_325D8
LDR             R3, =dword_7D63C
LDR             R2, [R3]
LDR             R2, [R2]
STR             R2, [R3]
B               loc_32348

loc_325EC               ; jumptable 0003222C case 2
ADD             SP, SP, #0xAC
POP             {R4-R11,PC}
; End of function sub_32080

off_325F4 DCD unk_68408
off_325F8 DCD unk_68407
off_325FC DCD dword_7D6C4
off_32600 DCD dword_7DBB8
off_32604 DCD aHome     ; "HOME"
off_32608 DCD unk_67F9A
off_3260C DCD dword_7D63C
off_32610 DCD dword_7DBB0
off_32614 DCD aCanTCreatePipe_0 ; "can't create pipe: %m"



; char *__fastcall sub_32618(unsigned __int8 *, unsigned __int8 *, int, unsigned int, int, char, char)
sub_32618

var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_8= -8
arg_0=  0x24
arg_4=  0x28
arg_8=  0x2C

PUSH            {R4-R11,LR}
MOV             R6, R3
LDR             R3, =dword_7D63C
SUB             SP, SP, #0x3C
MOV             R4, R0
MOV             R9, R1
LDR             R8, [SP,#0x3C+arg_8]
LDR             R10, [R3]
SUB             R3, R6, #0xD
CMP             R3, #1
STR             R2, [SP,#0x3C+var_34]
AND             R8, R8, #0x11
STR             R3, [SP,#0x3C+var_24]
MOVHI           R11, #0
BHI             loc_32674
MOV             R11, R0

loc_32658
LDRB            R3, [R11]
CMP             R3, #0
BEQ             loc_32854
CMP             R3, #0x2F ; '/'
BNE             loc_32834
MOV             R3, #0
STRB            R3, [R11]

loc_32674
SUB             R3, R6, #4
MOV             R0, R4
CMP             R6, #0xC
CMPNE           R3, #1
LDR             R5, =dword_7D6C4
MOVHI           R1, #0x12
MOVLS           R1, #2
BL              sub_32080
MOV             R3, #0xFFFFFFFF
CMP             R11, #0
STR             R3, [SP,#0x3C+var_8]
LDR             R3, =dword_7DBB8
LDR             R7, [R3]
BEQ             loc_326E4
LDR             R2, [SP,#0x3C+var_34]
MOV             R0, #0x2F ; '/'
LDR             R3, [R7,#4]
LDR             R1, [R5]
ADD             R3, R3, R2
SUB             R3, R1, R3
STR             R3, [SP,#0x3C+var_8]
BL              sub_2DA30
MOV             R1, #2
STR             R0, [R5]
ADD             R0, R11, #1
BL              sub_32080
MOV             R3, #0x2F ; '/'
STRB            R3, [R11]

loc_326E4
LDR             R1, [R5]
MOV             R0, #0
BL              sub_2DA30
LDR             R3, =dword_7D63C
CMP             R6, #5
LDR             R11, [R7,#4]
STR             R0, [R5]
STR             R10, [R3]
LDR             R3, [SP,#0x3C+arg_0]
ADD             R10, R11, R3
BEQ             loc_3285C
CMP             R6, #0xC
BEQ             loc_328CC
CMP             R6, #4
BEQ             loc_32878
LDR             R9, =dword_7D6C4
SUB             R3, R0, R11
STR             R3, [SP,#0x3C+var_18]
MOV             R3, #0
STR             R3, [SP,#0x3C+var_30]

loc_32734
LDR             R3, [R7,#4]
CMP             R8, #0
LDR             R2, [SP,#0x3C+var_18]
ADD             R2, R3, R2
STR             R2, [R9]
LDR             R2, [SP,#0x3C+arg_0]
ADD             R4, R3, R2
LDR             R2, [SP,#0x3C+var_34]
MOVEQ           R10, R4
ADD             R5, R3, R2
BEQ             loc_32788
MOV             R0, R4
MOV             R2, #0
MOV             R1, #9
BL              sub_2D644
CMP             R4, R0
MOV             R10, R0
LDRNE           R4, [R7,#4]
LDRNE           R3, [SP,#0x3C+arg_0]
LDRNE           R5, [R9]
ADDNE           R4, R4, R3

loc_32788
SUB             R3, R5, #1
LDR             R5, [R7,#4]
STR             R3, [SP,#0x3C+var_2C]
LDR             R3, [SP,#0x3C+var_34]
ADD             R11, R5, R3
LDR             R3, [SP,#0x3C+var_30]
CMP             R3, #0
MOVNE           R2, #0
BNE             loc_327BC
LDR             R3, [SP,#0x3C+var_8]
CMP             R3, #0
LDRLT           R2, [SP,#0x3C+var_30]
ADDGE           R2, SP, #0x3C+var_8

loc_327BC
MOV             R1, #2
MOV             R0, R11
BL              sub_2D644
LDR             R3, [R9]
STR             R3, [SP,#0x3C+var_20]
LDR             R3, [R7,#4]
STR             R3, [SP,#0x3C+var_1C]
LDR             R3, [SP,#0x3C+var_24]
CMP             R3, #1
BHI             loc_32C48
LDR             R3, [SP,#0x3C+var_30]
CMP             R3, #0
BNE             loc_3281C
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
ADD             R3, R3, #0x3C ; '<'
STR             R3, [SP,#0x3C+var_30]
LDR             R3, [SP,#0x3C+var_8]
CMP             R3, #0
ADDGE           R2, R11, R3
ADDGE           R2, R2, #1
STRGE           R2, [SP,#0x3C+var_30]
MOVGE           R2, #0
STRBGE          R2, [R11,R3]

loc_3281C
LDR             R3, [SP,#0x3C+var_34]
LDRB            R3, [R5,R3]
CMP             R3, #0
BNE             loc_32A3C

loc_3282C
MOV             R10, #0
B               loc_3286C

loc_32834
CMP             R3, #0x81
MOV             R2, R11
LDRB            R1, [R2,#1]!
BNE             loc_3284C
CMP             R1, #0
MOVNE           R11, R2

loc_3284C
ADD             R11, R11, #1
B               loc_32658

loc_32854
MOV             R11, R3
B               loc_32674

loc_3285C
MOV             R1, R10
MOV             R0, R9
BL              sub_2AF84
STR             R10, [R5]

loc_3286C
MOV             R0, R10
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}

loc_32878
LDR             R3, =dword_7DBB0
CMP             R10, #0
LDREQ           R10, =aParameterNotSe ; "parameter not set"
LDR             R3, [R3]
ADD             R3, R3, #0x3C ; '<'
BEQ             loc_328B0
LDRB            R2, [R4]
CMP             R2, #0x83
BNE             loc_328B0
LDR             R2, [SP,#0x3C+arg_4]
LDR             R10, =aParameterNotSe ; "parameter not set"
TST             R2, #0x10
LDR             R2, =aOrNull ; " or null"
MOVNE           R3, R2

loc_328B0
SUB             R1, R4, R9
STR             R3, [SP,#0x3C+var_3C]
MOV             R2, R9
MOV             R3, R10
SUB             R1, R1, #1
LDR             R0, =aSSS_0 ; "%.*s: %s%s"
BL              sub_2ABFC

loc_328CC
LDR             R3, [SP,#0x3C+var_34]
MOV             R1, #0x3A ; ':' ; c
ADD             R6, R11, R3
MOV             R0, R6  ; s
BL              strchr
SUBS            R4, R0, #0
MOV             R0, R6
MOVNE           R3, #0
STRBNE          R3, [R4]
BL              sub_2CF3C
CMP             R4, #0
LDR             R2, [SP,#0x3C+arg_0]
MOVNE           R3, #0x3A ; ':'
MOV             R5, R0
STRBNE          R3, [R4]
CMP             R8, #0
LDR             R3, [SP,#0x3C+var_34]
SUB             R4, R3, R2
SUB             R4, R4, #1
BNE             loc_3295C

loc_3291C
LDR             R3, [SP,#0x3C+var_34]
ADD             R0, R6, #1
LDRB            R3, [R11,R3]
CMP             R3, #0x3A ; ':'
BNE             loc_32968

loc_32930
BL              sub_2CF3C
B               loc_32984

loc_32938
LDRB            R0, [R3]
ADD             R1, R3, #1
CMP             R0, #0x81
MOVEQ           R3, R1
SUBEQ           R4, R4, #1
ADD             R3, R3, #1

loc_32950
CMP             R3, R2
BCC             loc_32938
B               loc_3291C

loc_3295C
MOV             R3, R10
SUB             R2, R6, #1
B               loc_32950

loc_32968
LDRB            R3, [R0],#1
CMP             R3, #0
CMPNE           R3, #0x3A ; ':'
BNE             loc_32968
CMP             R3, #0x3A ; ':'
MOVNE           R0, R4
BEQ             loc_32930

loc_32984
CMP             R5, #0
ADDLT           R5, R5, R4
CMP             R5, R4
MOVCS           R5, #0
MOVCS           R0, R5
BCS             loc_329A8
SUB             R3, R4, R5
CMP             R0, #0
ADDLT           R0, R0, R3

loc_329A8
SUB             R4, R4, R5
MOV             R3, R10
CMP             R4, R0
MOVCS           R4, R0

loc_329B8
CMP             R5, #0
BNE             loc_329DC
MOV             R1, #0xFFFFFF81

loc_329C4
CMP             R4, #0
BNE             loc_32A00
STRB            R4, [R10]

loc_329D0
LDR             R3, =dword_7D6C4
STR             R10, [R3]
B               loc_3286C

loc_329DC
CMP             R8, #0
ADD             R2, R3, #1
BEQ             loc_329F4
LDRB            R1, [R3]
CMP             R1, #0x81
MOVEQ           R3, R2

loc_329F4
ADD             R3, R3, #1
SUB             R5, R5, #1
B               loc_329B8

loc_32A00
CMP             R8, #0
MOV             R2, R3
LDRB            R12, [R2],#1
ADD             R0, R10, #1
BEQ             loc_32A24
CMP             R12, #0x81
STRBEQ          R1, [R10]
MOVEQ           R3, R2
MOVEQ           R10, R0

loc_32A24
LDRB            R2, [R3]
SUB             R4, R4, #1
ADD             R3, R3, #1
ADD             R10, R10, #1
STRB            R2, [R10,#-1]
B               loc_329C4

loc_32A3C
MOV             R5, #0
SUB             R3, R11, #1
STR             R3, [SP,#0x3C+var_28]

loc_32A48
LDR             R3, [SP,#0x3C+var_28]
CMP             R4, R3
BCS             loc_32B4C

loc_32A54
MOV             R3, #1
STR             R8, [SP,#0x3C+var_3C] ; int
STR             R3, [SP,#0x3C+var_38] ; int
MOV             R1, R10 ; name
MOV             R3, R11 ; pattern
LDR             R2, [SP,#0x3C+var_2C] ; int
MOV             R0, R4  ; int
BL              sub_2CE20
CMP             R0, #0
BNE             loc_32B04
LDR             R3, [R7,#4]
STR             R3, [SP,#0x3C+var_14]

loc_32A84
LDR             R1, [R9]
LDRB            R0, [R4]
BL              sub_2DA30
CMP             R8, #0
MOV             R1, R0
STR             R0, [R9]
BEQ             loc_32ACC
LDRB            R3, [R4]
CMP             R3, #0x81
BNE             loc_32ACC
ADD             R3, R4, #1
LDRB            R0, [R4,#1]
STR             R3, [SP,#0x3C+var_10]
ADD             R5, R5, #1
BL              sub_2DA30
LDR             R3, [SP,#0x3C+var_10]
STR             R0, [R9]
MOV             R4, R3

loc_32ACC
LDR             R3, [R7,#4]
LDR             R2, [SP,#0x3C+var_14]
CMP             R3, R2
BNE             loc_32734
LDR             R3, [SP,#0x3C+var_28]
ADD             R4, R4, #1
ADD             R5, R5, #1
ADD             R10, R10, #1
CMP             R3, R4
BLS             loc_32B4C
LDRB            R3, [R11]
CMP             R3, #0x2A ; '*'
BEQ             loc_32A84
B               loc_32A54

loc_32B04
CMP             R6, #0xE
MOVNE           R4, R0
BNE             loc_32B18

loc_32B10
CMP             R4, R0
BCC             loc_32B90

loc_32B18
LDR             R3, [SP,#0x3C+var_30]
SUB             R2, R3, #1

loc_32B20
LDRB            R3, [R2,#1]!
CMP             R3, #0
BNE             loc_32BB4
CMP             R6, #0xD
BNE             loc_32A48
SUB             R10, R5, R4

loc_32B38
ADD             R5, R10, R4
LDRB            R0, [R4],#1
LDR             R1, [R9]
CMP             R0, #0
BNE             loc_32C2C

loc_32B4C
LDR             R4, =dword_7D6C4
MOV             R0, #0
LDR             R1, [R4]
BL              sub_2DA30
LDR             R3, [R7,#4]
LDR             R2, [SP,#0x3C+arg_0]
LDR             R1, [SP,#0x3C+var_1C]
ADD             R10, R3, R2
LDR             R2, [SP,#0x3C+var_20]
MOV             R0, R10 ; dest
SUB             R1, R2, R1
ADD             R2, R5, #1 ; n
ADD             R1, R3, R1 ; src
ADD             R5, R10, R5
BL              memmove
STR             R5, [R4]
B               loc_3286C

loc_32B90
CMP             R8, #0
ADD             R3, R4, #1
BEQ             loc_32BA8
LDRB            R2, [R4]
CMP             R2, #0x81
MOVEQ           R4, R3

loc_32BA8
ADD             R4, R4, #1
ADD             R10, R10, #1
B               loc_32B10

loc_32BB4
SUB             R3, R3, #0x5C ; '\'
CMP             R8, #0
CLZ             R3, R3
LDR             R1, [R7,#4]
MOV             R3, R3,LSR#5
MOVEQ           R3, #0
CMP             R3, #0
STR             R1, [SP,#0x3C+var_14]
LDR             R1, [R9]
BEQ             loc_32BF4
MOV             R0, #0x81
STR             R2, [SP,#0x3C+var_10]
BL              sub_2DA30
LDR             R2, [SP,#0x3C+var_10]
ADD             R5, R5, #1
STR             R0, [R9]

loc_32BF4
LDR             R3, =dword_7D6C4
LDRB            R0, [R2]
STR             R2, [SP,#0x3C+var_10]
LDR             R1, [R3]
BL              sub_2DA30
LDR             R3, =dword_7D6C4
LDR             R2, [SP,#0x3C+var_14]
STR             R0, [R3]
LDR             R3, [R7,#4]
CMP             R3, R2
LDR             R2, [SP,#0x3C+var_10]
BNE             loc_32734
ADD             R5, R5, #1
B               loc_32B20

loc_32C2C
LDR             R5, [R7,#4]
BL              sub_2DA30
LDR             R3, [R7,#4]
STR             R0, [R9]
CMP             R3, R5
BNE             loc_32734
B               loc_32B38

loc_32C48
SUB             R6, R6, #6
LDR             R3, =sub_2CE20
MOV             R5, R6,ASR#1
LDR             R2, =sub_2CDA4
AND             R6, R6, #1
STR             R8, [SP,#0x3C+var_3C]
CMP             R6, R5
MOV             R1, R10
MOVEQ           R6, R3
MOVNE           R6, R2
STR             R5, [SP,#0x3C+var_38]
MOV             R3, R11
LDR             R2, [SP,#0x3C+var_2C]
MOV             R0, R4
BLX             R6
SUBS            R10, R0, #0
BEQ             loc_3282C
CMP             R5, #0
BEQ             loc_32CB0
SUB             R5, R11, R10
MOV             R1, R10 ; src
SUB             R10, R5, #1
MOV             R2, R5  ; n
ADD             R10, R4, R10
MOV             R0, R4  ; dest
BL              memmove

loc_32CB0
MOV             R3, #0
STRB            R3, [R10]
B               loc_329D0
; End of function sub_32618

off_32CBC DCD dword_7D63C
off_32CC0 DCD dword_7D6C4
off_32CC4 DCD dword_7DBB8
off_32CC8 DCD dword_7DBB0
off_32CCC DCD aParameterNotSe ; "parameter not set"
off_32CD0 DCD aOrNull   ; " or null"
off_32CD4 DCD aSSS_0    ; "%.*s: %s%s"
off_32CD8 DCD sub_2CE20
off_32CDC DCD sub_2CDA4



; unsigned __int8 *__fastcall sub_32CE0(unsigned __int8 *, int)
sub_32CE0

var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x2C
LDRB            R7, [R0]
ANDS            R6, R7, #0xF
BNE             loc_32CFC
LDR             R0, =aBadSubstitutio ; "bad substitution"
BL              sub_2B44C

loc_32CFC
AND             R3, R1, #0x80
MOV             R11, R1
CMP             R3, #0
ADD             R10, R0, #1
STR             R3, [SP,#0x2C+var_8]
MOVEQ           R9, #1
BEQ             loc_32D3C
LDRB            R3, [R0,#1]
CMP             R3, #0x40 ; '@'
MOVNE           R9, #0
BNE             loc_32D3C
LDR             R3, =dword_7DBB4
LDR             R3, [R3]
LDR             R9, [R3]
MOVS            R9, R9
MOVNE           R9, #1

loc_32D3C
LDR             R3, =dword_7DBB8
MOV             R1, #0x3D ; '=' ; c
LDR             R5, =dword_7D6C4
MOV             R0, R10 ; s
LDR             R3, [R3]
LDR             R8, [R5]
STR             R3, [SP,#0x2C+var_18]
LDR             R3, [R3,#4]
SUB             R8, R8, R3
BL              strchr
SUB             R3, R6, #4
ADD             R4, R0, #1
UXTB            R3, R3
STR             R5, [SP,#0x2C+var_14]
STR             R3, [SP,#0x2C+var_10]

loc_32D78
ADD             R3, SP, #0x2C+var_8
MOV             R2, R11
MOV             R1, R7
MOV             R0, R10
BL              sub_2F584
TST             R7, #0x10
MOV             R5, R0
SUBNE           R5, R0, #1
CMP             R6, #3
BNE             loc_32DCC
MVN             R5, R5

loc_32DA4
CMP             R5, #0
BGE             loc_32F04
ORR             R1, R11, #0x42 ; 'B'
MOV             R0, R4
BL              sub_32080

loc_32DB8
CMP             R6, #1
BNE             loc_32E74

loc_32DC0
MOV             R0, R4
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_32DCC
CMP             R6, #2
BEQ             loc_32DA4
LDR             R3, [SP,#0x2C+var_10]
CMP             R3, #1
BHI             loc_32E1C
CMP             R5, #0
BGE             loc_32F04
BIC             R3, R11, #0x11
STR             R7, [SP,#0x2C+var_28]
STR             R3, [SP,#0x2C+var_24]
MOV             R2, #0
STR             R8, [SP,#0x2C+var_2C]
MOV             R3, R6
MOV             R1, R10
MOV             R0, R4
BL              sub_32618
MOV             R0, R8
AND             R7, R7, #0xEF
BL              sub_2A8A4
B               loc_32D78

loc_32E1C
CMP             R5, #0
BGE             loc_32E58
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDRB            R2, [R3,#0x49]
CMP             R2, #0
BEQ             loc_32E58
ADD             R3, R3, #0x3C ; '<'
SUB             R1, R4, R10
STR             R3, [SP,#0x2C+var_2C]
MOV             R2, R10
LDR             R3, =aParameterNotSe ; "parameter not set"
SUB             R1, R1, #1
LDR             R0, =aSSS_0 ; "%.*s: %s%s"
BL              sub_2ABFC

loc_32E58
CMP             R6, #0xA
BNE             loc_32E8C
BIC             R0, R5, R5,ASR#31
MOV             R1, R0,ASR#31
BL              sub_2D5F8

loc_32E6C
CMP             R9, #0
BNE             loc_32F0C

loc_32E74
LDR             R1, =dword_7D63C
MOV             R2, R4
MOV             LR, #0
MOV             R3, #1
LDR             R12, [R1]
B               loc_32F50

loc_32E8C
CMP             R6, #1
BEQ             loc_32F98
CMP             R5, #0
BLT             loc_32E74
LDR             R3, [SP,#0x2C+var_14]
MOV             R0, #0
LDR             R1, [R3]
BL              sub_2DA30
LDR             R3, [SP,#0x2C+var_14]
MOV             R1, #0
STR             R0, [R3]
LDR             R3, [SP,#0x2C+var_18]
LDR             R10, [R3,#4]
MOV             R3, R6
STMFA           SP, {R7,R11}
STR             R8, [SP,#0x2C+var_2C]
SUB             R10, R0, R10
MOV             R0, R4
MOV             R2, R10
BL              sub_32618
CMP             R0, #0
LDREQ           R3, [SP,#0x2C+var_18]
SUBEQ           R10, R10, #1
LDREQ           R0, [R3,#4]
LDREQ           R3, [SP,#0x2C+var_14]
ADDEQ           R10, R0, R10
MOV             R0, R8
STREQ           R10, [R3]
BL              sub_2A8A4
B               loc_32E6C

loc_32F04
CMP             R9, #0
BEQ             loc_32DB8

loc_32F0C
LDR             R3, [SP,#0x2C+var_14]
MOV             R0, R8
LDR             R2, [SP,#0x2C+var_8]
LDR             R1, [R3]
LDR             R3, [SP,#0x2C+var_18]
LDR             R3, [R3,#4]
SUB             R1, R1, R3
BL              sub_2A834
B               loc_32DB8

loc_32F30
CMP             R0, #0x82
BNE             loc_32F7C
ADD             R4, R2, #2
LDRB            R2, [R2,#1]
AND             R2, R2, #0xF
CMP             R2, #1
ADDNE           R3, R3, #1

loc_32F4C
MOV             R2, R4

loc_32F50
LDRB            R0, [R2]
ADD             R4, R4, #1
CMP             R0, #0x81
ADDEQ           R4, R2, #2
BEQ             loc_32F4C
CMP             R0, #0x84
BNE             loc_32F30
CMP             R5, #0
LDRGE           R12, [R12]
MOVGE           LR, #1
B               loc_32F4C

loc_32F7C
CMP             R0, #0x83
BNE             loc_32F4C
SUBS            R3, R3, #1
BNE             loc_32F4C
CMP             LR, #0
STRNE           R12, [R1]
B               loc_32DC0

loc_32F98
CMP             R9, #0
BEQ             loc_32DC0
B               loc_32F0C
; End of function sub_32CE0

off_32FA4 DCD aBadSubstitutio ; "bad substitution"
off_32FA8 DCD dword_7DBB4
off_32FAC DCD dword_7DBB8
off_32FB0 DCD dword_7D6C4
off_32FB4 DCD dword_7DBB0
off_32FB8 DCD aParameterNotSe ; "parameter not set"
off_32FBC DCD aSSS_0    ; "%.*s: %s%s"
off_32FC0 DCD dword_7D63C



; _DWORD *__fastcall sub_32FC4(int, int, unsigned int)
sub_32FC4

s= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
c= -0x10
ptr= -0xC
var_8= -8
var_4= -4

PUSH            {R4-R11,LR}
MOV             R5, R2
LDR             R3, =dword_7D63C
SUB             SP, SP, #0x24
MOV             R11, R1
MOV             R1, R5
LDR             R2, [R0,#0xC]
LDR             R4, =dword_7D6C4
LDR             R0, [R0,#8]
STR             R2, [R3]
LDR             R3, =dword_7DBB8
LDR             R6, [R3]
LDR             R3, [R6,#4]
STR             R3, [R4]
BL              sub_32080
LDR             R1, [R4]
MOV             R0, #0
BL              sub_2DA30
CMP             R11, #0
SUB             R3, R0, #1
STR             R3, [R4]
BEQ             loc_33148
LDR             R3, [R6,#4]
LDR             R4, =dword_7D6BC
SUB             R0, R0, R3
BL              sub_2B208
ANDS            R3, R5, #1
MOV             R7, R0
STR             R4, [R4,#(dword_7D6C0 - 0x7D6BC)]
STR             R3, [SP,#0x24+var_18]
BEQ             loc_33410
LDR             R3, =dword_7D6EC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_3326C
LDR             R3, =dword_7DBB4
MOV             R4, R0
LDR             R9, =dword_7D6DC
LDR             R3, [R3]
LDR             R2, [R3,#0xBC]
TST             R2, #0x20
MOV             R2, #0
LDREQ           R3, [R3,#0xC0]
LDRNE           R3, =asc_6886A ; " \t\n"
ADDEQ           R3, R3, #4
STR             R3, [SP,#0x24+var_1C]

loc_3307C
LDR             R8, [R9,#0xC]
MOV             R10, #0
LDR             R6, [R9,#4]
CMP             R8, #0
LDRNE           R3, =dword_7DBB0
ADD             R6, R7, R6
LDREQ           R3, [SP,#0x24+var_1C]
LDRNE           R3, [R3]
ADDNE           R3, R3, #0x3C ; '<'
STR             R3, [SP,#0x24+s]
ORR             R3, R8, R2
STR             R3, [SP,#0x24+var_14]

loc_330AC
LDR             R2, [R9,#8]
ADD             R2, R7, R2
CMP             R6, R2
BCC             loc_33154
LDR             R9, [R9]
MOV             R2, R8
CMP             R9, #0
BNE             loc_3307C
CMP             R8, #0
BNE             loc_330E0

loc_330D4
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_330FC

loc_330E0
MOV             R0, #8
BL              sub_2C370
LDR             R3, =dword_7D6BC
STR             R4, [R0,#4]
LDR             R2, [R3,#(dword_7D6C0 - 0x7D6BC)]
STR             R0, [R2]
STR             R0, [R3,#(dword_7D6C0 - 0x7D6BC)]

loc_330FC
LDR             R4, =dword_7D6BC
MOV             R6, #0
LDR             R9, =dword_7DBB0
LDR             R10, =accept ; "*?[\\"
LDR             R3, [R4,#(dword_7D6C0 - 0x7D6BC)]
STR             R6, [R3]
LDR             R5, [R4]
STR             R4, [R4,#(dword_7D6C0 - 0x7D6BC)]

loc_3311C
CMP             R5, #0
BNE             loc_33274

loc_33124
LDR             R2, =dword_7D6BC
MOV             R1, #0
LDR             R3, [R2,#(dword_7D6C0 - 0x7D6BC)]
STR             R1, [R3]
LDR             R2, [R2]
CMP             R2, R1
LDRNE           R1, [R11,#4]
STRNE           R2, [R1]
STRNE           R3, [R11,#4]

loc_33148
BL              sub_2A454
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_33154
LDRB            R5, [R6]
LDR             R0, [SP,#0x24+s] ; s
CMP             R5, #0x81
MOVNE           R5, R6
ADDEQ           R5, R6, #1
LDRB            R2, [R5],#1
MOV             R1, R2  ; c
STR             R2, [SP,#0x24+c]
BL              strchr
CMP             R0, #0
LDR             R2, [SP,#0x24+c]
BEQ             loc_3325C
LDR             R3, [SP,#0x24+var_14]
CMP             R3, #0
BNE             loc_331A4
MOV             R1, R2  ; c
LDR             R0, =asc_6886A ; " \t\n"
BL              strchr
MOVS            R10, R0
MOVNE           R10, #1

loc_331A4
CMP             R6, R4
MOVNE           R2, #0
ANDEQ           R2, R10, #1
CMP             R2, #0
BNE             loc_33254
STRB            R2, [R6]
MOV             R0, #8
BL              sub_2C370
LDR             R3, =dword_7D6BC
CMP             R8, #0
STR             R4, [R0,#4]
LDR             R2, [R3,#(dword_7D6C0 - 0x7D6BC)]
STR             R0, [R2]
STR             R0, [R3,#(dword_7D6C0 - 0x7D6BC)]
BNE             loc_33258
LDR             R6, [R9,#8]
MOV             R4, R5
ADD             R6, R7, R6

loc_331EC
CMP             R6, R4
BLS             loc_33264
LDRB            R2, [R4]
LDR             R0, [SP,#0x24+s] ; s
CMP             R2, #0x81
ADDEQ           R5, R4, #1
MOVNE           R5, R4
LDRB            R2, [R5]
MOV             R1, R2  ; c
STR             R2, [SP,#0x24+c]
BL              strchr
CMP             R0, #0
LDR             R2, [SP,#0x24+c]
BEQ             loc_33264
MOV             R1, R2  ; c
LDR             R0, =asc_6886A ; " \t\n"
BL              strchr
CMP             R0, #0
BNE             loc_3324C
CMP             R10, #0
BEQ             loc_33264
ADD             R4, R5, #1
MOV             R10, R0
B               loc_331EC

loc_3324C
ADD             R4, R5, #1
B               loc_331EC

loc_33254
LDR             R10, [SP,#0x24+var_18]

loc_33258
MOV             R4, R5

loc_3325C
MOV             R6, R5
B               loc_330AC

loc_33264
MOV             R5, R4
B               loc_3325C

loc_3326C
MOV             R4, R0
B               loc_330D4

loc_33274
LDR             R8, [R9]
LDR             R0, [R5,#4]
LDRB            R3, [R8,#0x3E]
CMP             R3, #0
BEQ             loc_332FC

loc_33288
LDR             R3, [R4,#(dword_7D6C0 - 0x7D6BC)]
MOV             R2, #0
MOV             R1, R2
LDR             R0, [R5,#4]
STR             R5, [R3]
BL              sub_2D644
STR             R5, [R4,#(dword_7D6C0 - 0x7D6BC)]

loc_332A4
LDR             R5, [R5]
B               loc_3311C

loc_332AC
CMP             R3, #0x81
BEQ             loc_332E8
CMP             R3, #0x88
BNE             loc_33324

loc_332BC
LDRB            R3, [R7,#1]
ADD             R0, R7, #1
CMP             R3, #0x88
BEQ             loc_332F8
CMP             R3, #0x81
ADDEQ           R7, R7, #2
MOVNE           R7, R0
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_33288
B               loc_332BC

loc_332E8
LDRB            R3, [R7,#1]
ADD             R0, R7, #1
CMP             R3, #0
BEQ             loc_33288

loc_332F8               ; s
ADD             R0, R0, #1

loc_332FC               ; accept
MOV             R1, R10
BL              strpbrk
SUBS            R7, R0, #0
BEQ             loc_33288
LDRB            R3, [R7]
CMP             R3, #0x5C ; '\'
BEQ             loc_332E8
BHI             loc_332AC
CMP             R3, #0x5B ; '['
BEQ             loc_333E0

loc_33324
LDR             R3, =dword_7D6BC
LDR             R7, [R3,#(dword_7D6C0 - 0x7D6BC)]
LDR             R3, [R8,#0x28]
ADD             R3, R3, #1
STR             R3, [R8,#0x28]
MOV             R1, #0x13
MOV             R2, #0
LDR             R0, [R5,#4]
BL              sub_2D644
MOV             R8, R0
BL              strlen
MOV             R2, R0
ADD             R0, R0, #0x1000
STR             R2, [SP,#0x24+s]
STR             R0, [SP,#0x24+var_8]
BL              sub_1748C
ADD             R12, SP, #0x24+var_4
MOV             R3, #0
STR             R0, [R12,#-8]!
MOV             R1, R8
MOV             R0, R12
LDR             R2, [SP,#0x24+s]
BL              sub_2E4E0
LDR             R0, [SP,#0x24+ptr] ; ptr
BL              free
LDR             R3, [R5,#4]
CMP             R3, R8
BEQ             loc_3339C
MOV             R0, R8  ; ptr
BL              free

loc_3339C
BL              loc_2A270
LDR             R3, [R4,#(dword_7D6C0 - 0x7D6BC)]
CMP             R7, R3
BEQ             loc_33288
STR             R6, [R3]
MOV             R1, #0
LDR             R0, [R7]
MOV             R3, R0

loc_333BC
CMP             R3, #0
BNE             loc_333FC
BL              sub_29E1C
STR             R0, [R7]

loc_333CC
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_33408
STR             R0, [R4,#(dword_7D6C0 - 0x7D6BC)]
B               loc_332A4

loc_333E0               ; c
MOV             R1, #0x5D ; ']'
ADD             R0, R7, #1 ; s
BL              strchr
CMP             R0, #0
BNE             loc_33324
MOV             R0, R7
B               loc_332F8

loc_333FC
ADD             R1, R1, #1
LDR             R3, [R3]
B               loc_333BC

loc_33408
MOV             R0, R3
B               loc_333CC

loc_33410
MOV             R0, #8
BL              sub_2C370
LDR             R3, [R4,#(dword_7D6C0 - 0x7D6BC)]
STR             R7, [R0,#4]
STR             R0, [R3]
STR             R0, [R4,#(dword_7D6C0 - 0x7D6BC)]
B               loc_33124
; End of function sub_32FC4

off_3342C DCD dword_7D63C
off_33430 DCD dword_7D6C4
off_33434 DCD dword_7DBB8
off_33438 DCD dword_7D6BC
off_3343C DCD dword_7D6EC
off_33440 DCD dword_7DBB4
off_33444 DCD dword_7D6DC
off_33448 DCD asc_6886A ; " \t\n"
off_3344C DCD dword_7DBB0
off_33450 DCD accept    ; "*?[\\"



; int __fastcall sub_33454(int result, int)
sub_33454

var_6C= -0x6C
fd= -0x68
var_5C= -0x5C

PUSH            {R4-R11,LR}
SUBS            R7, R0, #0
SUB             SP, SP, #0x6C
BEQ             loc_334C4
LDR             R8, =dword_7DBB0
LDR             R2, [R8]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
CMP             R1, #0
LDR             R10, =dword_7D4D4
LDRNE           R3, =dword_7DBB4
MOVEQ           R6, R1
LDRNE           R3, [R3]
LDRNE           R6, [R3,#0x14]

loc_33490
LDR             R3, [R7]
LDR             R5, [R7,#8]
SUB             R2, R3, #0x16
CMP             R2, #1
BHI             loc_334CC
LDR             R4, [R7,#0xC]
CMP             R5, R4
MOVNE           R9, #0xFFFFFFFF
BNE             loc_33774

loc_334B4
LDR             R7, [R7,#4]
CMP             R7, #0
BNE             loc_33490
BL              loc_2A270

loc_334C4
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R11,PC}

loc_334CC
SUB             R2, R3, #0x18
CMP             R2, #1
BHI             loc_33618
MOV             R0, SP  ; pipedes
BL              pipe
CMP             R0, #0
BGE             loc_334F0
LDR             R0, =aCanTCreatePipe_0 ; "can't create pipe: %m"
BL              sub_2ABFC

loc_334F0
LDR             R3, [R7]
CMP             R3, #0x18
BNE             loc_3356C
LDR             R3, [R7,#0xC]
LDR             R9, [R3,#8]
MOV             R0, R9  ; s
BL              strlen
CMP             R0, #0x1000
MOV             R4, R0
BHI             loc_33570
MOV             R2, R0  ; n
MOV             R1, R9  ; buf
LDR             R0, [SP,#0x6C+fd] ; fd
BL              sub_17FB8

loc_33528               ; fd
LDR             R0, [SP,#0x6C+fd]
BL              close
LDR             R4, [SP,#0x6C+var_6C]

loc_33534
CMP             R5, R4
BNE             loc_33770
CMP             R6, #0
MOVNE           R2, #1
BEQ             loc_334B4

loc_33548
LDR             R1, [R6,R2,LSL#3]
SUB             R3, R2, #1
CMN             R1, #2
BNE             loc_33760
ADD             R3, R6, R3,LSL#3
MOV             R2, #0xFFFFFFFF
STR             R5, [R3,#8]
STR             R2, [R3,#0xC]
B               loc_334B4

loc_3356C
MOV             R4, #0

loc_33570
MOV             R1, #0
MOV             R2, #2
MOV             R0, R1
BL              sub_2EDE0
SUBS            R9, R0, #0
BNE             loc_33528
LDR             R0, [SP,#0x6C+var_6C] ; fd
BL              close
MOV             R0, #2
BL              sub_2A140
MOV             R0, #3
BL              sub_2A140
MOV             R0, #1
BL              sub_2A140
MOV             R0, #0x14
BL              sub_2A140
MOV             R1, R9  ; handler
MOV             R0, #0xD ; sig
BL              signal
LDR             R3, [R7]
CMP             R3, #0x18
BNE             loc_335E4
LDR             R3, [R7,#0xC]
MOV             R2, R4  ; n
LDR             R0, [SP,#0x6C+fd] ; fd
LDR             R1, [R3,#8] ; buf

loc_335D8
BL              sub_17FB8
MOV             R0, #0  ; status
BL              _exit

loc_335E4
MOV             R2, #0x80
MOV             R1, R9
LDR             R0, [R7,#0xC]
LDR             R4, [SP,#0x6C+fd]
BL              sub_32FC4
LDR             R3, =dword_7DBB8
MOV             R0, R4
LDR             R3, [R3]
LDR             R1, [R3,#4]
LDR             R3, =dword_7D6C4
LDR             R2, [R3]
SUB             R2, R2, R1
B               loc_335D8

loc_33618
SUB             R3, R3, #0x10
LDR             R9, [R7,#0x14]
CMP             R3, #5  ; switch 6 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_33624 ; jumptable 00033624 default case, case 3
jpt_33624 DCD loc_33698 ; jump table for switch statement
DCD loc_33698
DCD loc_33748
DCD def_33624
DCD loc_3367C
DCD loc_33754

def_33624               ; jumptable 00033624 default case, case 3
MOV             R1, #0
MOV             R0, R9
BL              open64
SUBS            R4, R0, #0
BGE             loc_33534
LDR             R3, =dword_7DB94
LDR             R1, =aNoSuchFile ; "no such file"
LDR             R3, [R3]
LDR             R0, [R3]
BL              sub_2DF6C
MOV             R1, R9
MOV             R2, R0
LDR             R0, =aCanTOpenSS ; "can't open %s: %s"
B               loc_33744

loc_3367C               ; jumptable 00033624 case 4
MOVW            R2, #0x1B6
MOV             R1, #0x42 ; 'B'

loc_33684
MOV             R0, R9
BL              open64
SUBS            R4, R0, #0
BGE             loc_33534
B               loc_33724

loc_33698               ; jumptable 00033624 cases 0,1
LDR             R3, [R8]
LDRB            R3, [R3,#0x46]
CMP             R3, #0
BEQ             loc_33748 ; jumptable 00033624 case 2
MOV             R1, SP
MOV             R0, R9
BLX             sub_62DFC
CMP             R0, #0
MOVWLT          R2, #0x1B6
MOVLT           R1, #0xC1
BLT             loc_33684
LDR             R3, [SP,#0x6C+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BEQ             loc_33714
MOVW            R2, #0x1B6
MOV             R1, #1
MOV             R0, R9
BL              open64
SUBS            R4, R0, #0
BLT             loc_33724
MOV             R1, SP
BLX             sub_62E08
CMP             R0, #0
BNE             loc_33534
LDR             R3, [SP,#0x6C+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BNE             loc_33534
MOV             R0, R4  ; fd
BL              close

loc_33714
LDR             R3, =dword_7DB94
MOV             R2, #0x11
LDR             R3, [R3]
STR             R2, [R3]

loc_33724
LDR             R3, =dword_7DB94
LDR             R1, =aNonexistentDir ; "nonexistent directory"
LDR             R3, [R3]
LDR             R0, [R3]
BL              sub_2DF6C
MOV             R2, R0
LDR             R0, =aCanTCreateSS ; "can't create %s: %s"
MOV             R1, R9

loc_33744
BL              sub_2ABFC

loc_33748               ; jumptable 00033624 case 2
MOVW            R2, #0x1B6
MOVW            R1, #0x241
B               loc_33684

loc_33754               ; jumptable 00033624 case 5
MOVW            R2, #0x1B6
MOVW            R1, #0x441
B               loc_33684

loc_33760
CMP             R5, R1
ADD             R2, R2, #1
BEQ             loc_334B4
B               loc_33548

loc_33770
MOV             R9, R4

loc_33774
LDR             R3, [R10]
CMP             R4, #9
MOVGE           R1, R4
MOVLT           R1, #9
CMP             R5, R3
BNE             loc_337B8
MOV             R0, R5  ; fd
BL              sub_2B8B0
STR             R0, [R10]

loc_33798
MOV             R3, #1

loc_3379C
CMN             R4, #1
BNE             loc_33898
CMP             R3, #0
BNE             loc_334B4
MOV             R0, R5  ; fd
BL              close
B               loc_334B4

loc_337B8
CMP             R6, #0
BNE             loc_337C8

loc_337C0
MOV             R3, #0
B               loc_3379C

loc_337C8
CMP             R5, #0
LDRNE           R3, =off_7D4D0
LDRNE           R11, [R3] ; unk_7D64C
BNE             loc_33838

loc_337D8
MOV             R2, R6
MOV             R11, #0

loc_337E0
LDR             R0, [R2,#8]
CMN             R0, #2
BNE             loc_3385C
MOV             R0, R5  ; fd
BL              sub_2AAB8
CMP             R0, #0
BGE             loc_33810
LDR             R2, =dword_7DB94
LDR             R2, [R2]
LDR             R2, [R2]
CMP             R2, #9
BNE             loc_33880

loc_33810
ADD             R3, R6, R11,LSL#3
STR             R0, [R3,#0xC]
STR             R5, [R3,#8]
LDR             R3, =dword_7DBB4
LDR             R3, [R3]
LDR             R2, [R3,#0x18]
CMP             R5, R2
STREQ           R0, [R3,#0x18]
B               loc_337C0

loc_33834
LDR             R11, [R11]

loc_33838
CMP             R11, #0
BEQ             loc_337D8
LDR             R2, [R11,#8]
CMP             R5, R2
BNE             loc_33834
MOV             R0, R5  ; fd
BL              sub_2B8B0
STR             R0, [R11,#8]
B               loc_33798

loc_3385C
LDR             R12, [R2,#0xC]
CMP             R5, R12
BNE             loc_33884
MOV             R0, R5  ; fd
BL              sub_2AAB8
ADD             R3, R6, R11,LSL#3
CMP             R0, #0
STR             R0, [R3,#0xC]
BGE             loc_337C0

loc_33880
BL              sub_16E08

loc_33884
CMP             R5, R0
ADD             R2, R2, #8
BEQ             loc_337C0
ADD             R11, R11, #1
B               loc_337E0

loc_33898
LDR             R3, [R10]
CMP             R4, R3
BEQ             loc_33954
CMP             R4, #0
LDRNE           R3, =off_7D4D0
BNE             loc_33918

loc_338B0
CMP             R6, #0
LDRNE           R0, [R6,#4]
MOVNE           R3, R6
MOVNE           R2, #0
BNE             loc_3393C

loc_338C4
MOV             R1, R5
MOV             R0, R4
BL              sub_2B0FC
CMP             R9, #0
BLT             loc_338E0
MOV             R0, R9  ; fd
BL              close

loc_338E0
LDR             R3, [R7]
MOV             R4, #1
MOV             R9, #0xFFFFFFFF
CMP             R3, #0x11
CMPEQ           R5, #1
MOV             R5, #2
MOVEQ           R3, #1
MOVNE           R3, #0
CMP             R3, #0
BNE             loc_33774
B               loc_334B4

loc_3390C
LDR             R2, [R3,#8]
CMP             R4, R2
BEQ             loc_33954

loc_33918
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_3390C
B               loc_338B0

loc_33928
ADD             R3, R3, #8
LDR             R1, [R3,#4]
CMP             R4, R1
BEQ             loc_33954
ADD             R2, R2, #1

loc_3393C
CMP             R2, R0
BGE             loc_338C4
LDR             R1, [R3,#8]
CMN             R1, #2
BNE             loc_33928
B               loc_338C4

loc_33954
LDR             R3, =dword_7DB94
MOV             R2, #9
MOV             R1, R4
LDR             R0, =aDM ; "%d: %m"
LDR             R3, [R3]
STR             R2, [R3]
BL              sub_2ABFC
; End of function sub_33454

off_33970 DCD dword_7DBB0
off_33974 DCD dword_7D4D4
off_33978 DCD dword_7DBB4
off_3397C DCD aCanTCreatePipe_0 ; "can't create pipe: %m"
off_33980 DCD dword_7DBB8
off_33984 DCD dword_7D6C4
off_33988 DCD dword_7DB94
off_3398C DCD aNoSuchFile ; "no such file"
off_33990 DCD aCanTOpenSS ; "can't open %s: %s"
off_33994 DCD aNonexistentDir ; "nonexistent directory"
off_33998 DCD aCanTCreateSS ; "can't create %s: %s"
off_3399C DCD off_7D4D0
off_339A0 DCD aDM       ; "%d: %m"



; int __fastcall sub_339A4(int)
sub_339A4

var_198= -0x198
var_194= -0x194
var_190= -0x190
env= -0x18C

LDR             R3, =dword_7DBB0
PUSH            {R4,R5,LR}
SUB             SP, SP, #0x19C
STR             R0, [SP,#0x19C+var_198]
ADD             R0, SP, #0x19C+env ; env
LDR             R3, [R3]
LDR             R2, [R3,#0x24]
STR             R2, [SP,#0x19C+var_190]
LDR             R3, [R3,#0x28]
STR             R3, [SP,#0x19C+var_194]
BL              _setjmp
LDR             R3, =dword_7DBB0
SUBS            R5, R0, #0
LDR             R4, [R3]
BEQ             loc_33A1C

loc_339E0               ; env
LDR             R0, [SP,#0x19C+var_190]
CMP             R5, #0
STR             R0, [R4,#0x24]
BNE             loc_33A34

loc_339F0
LDR             R3, =dword_7DBB0
LDR             R2, [SP,#0x19C+var_194]
LDR             R3, [R3]
STR             R2, [R3,#0x28]
LDR             R2, [R3,#0x28]
CMP             R2, #0
BNE             loc_33A48
LDR             R3, [R3,#0x2C]
CMP             R3, #0
BEQ             loc_33A48
BL              sub_2A17C

loc_33A1C
ADD             R3, SP, #0x19C+env
MOV             R1, #1
STR             R3, [R4,#0x24]
LDR             R0, [SP,#0x19C+var_198]
BL              sub_33454
B               loc_339E0

loc_33A34
LDR             R3, [R4,#0x38]
CMP             R3, #1
BEQ             loc_339F0
MOV             R1, #1  ; val
BL              longjmp

loc_33A48
MOV             R0, R5
ADD             SP, SP, #0x19C
POP             {R4,R5,PC}
; End of function sub_339A4

off_33A54 DCD dword_7DBB0



; int __fastcall sub_33A58(int result, int *, int)
sub_33A58

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R0-R2,R4-R7,LR}
MOV             R4, R0
LDR             R7, =dword_7DB94
MOV             R6, #0

loc_33A68
CMP             R4, #0
BNE             loc_33A78
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_33A78
LDR             R3, [R4]
STMEA           SP, {R6,SP}
SUB             R3, R3, #0x10
CMP             R3, #7  ; switch 8 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_33A88 ; jumptable 00033A88 default case
jpt_33A88 DCD loc_33AB0 ; jump table for switch statement
DCD loc_33AB0
DCD loc_33AB0
DCD loc_33AB0
DCD loc_33AB0
DCD loc_33AB0
DCD loc_33AD4
DCD loc_33AD4

loc_33AB0               ; jumptable 00033A88 cases 0-5
MOV             R2, #0xA
MOV             R1, SP
LDR             R0, [R4,#0x10]
BL              sub_32FC4

loc_33AC0
LDR             R3, [SP,#0xC+var_C]
LDR             R3, [R3,#4]
STR             R3, [R4,#0x14]

def_33A88               ; jumptable 00033A88 default case
LDR             R4, [R4,#4]
B               loc_33A68

loc_33AD4               ; jumptable 00033A88 cases 6,7
LDR             R0, [R4,#0x10]
CMP             R0, #0
BEQ             def_33A88 ; jumptable 00033A88 default case
MOV             R2, #3
MOV             R1, SP
BL              sub_32FC4
LDR             R3, [SP,#0xC+var_C]
CMP             R3, #0
BNE             loc_33B00

loc_33AF8
LDR             R0, =aRedirError ; "redir error"
BL              sub_2ABFC

loc_33B00
LDR             R5, [R3,#4]
MOV             R0, R5
BL              sub_29594
CMP             R0, #0
BNE             loc_33B2C
LDR             R3, [R4,#8]
CMP             R3, #1
BNE             loc_33AF8
MOV             R3, #0x11
STR             R3, [R4]
B               loc_33AC0

loc_33B2C
MOV             R2, #0xA
MOV             R1, #0
MOV             R0, R5
BL              sub_18990
LDR             R3, [R7]
LDR             R3, [R3]
CMP             R0, #0
CMPGE           R3, #0
STREQ           R0, [R4,#0xC]
BEQ             def_33A88 ; jumptable 00033A88 default case
LDRB            R3, [R5]
CMP             R3, #0x2D ; '-'
BNE             loc_33B74
LDRB            R3, [R5,#1]
CMP             R3, #0
MOVEQ           R3, #0xFFFFFFFF
STREQ           R3, [R4,#0xC]
BEQ             def_33A88 ; jumptable 00033A88 default case

loc_33B74
LDR             R0, =aBadFdNumber ; "bad fd number"
BL              sub_2B44C
; End of function sub_33A58

off_33B7C DCD dword_7DB94
off_33B80 DCD aRedirError ; "redir error"
off_33B84 DCD aBadFdNumber ; "bad fd number"



; int __fastcall sub_33B88(int *, int)
sub_33B88
LDR             R2, =dword_7DBB0
PUSH            {R4-R8,LR}
MOV             R4, R1
LDR             R3, =dword_7DBB4
MOV             R5, R0
LDR             R7, [R2]
LDR             R2, =dword_7D6CC
LDR             R1, [R3]
LDR             R3, [R0,#4]
LDR             R2, [R2]
LDR             R6, [R0]
STR             R3, [R1,#0x148]
CMP             R2, #0
STR             R3, [R7,#0x10]
SUBNE           R2, R2, #1
LDR             R0, [R0,#0xC]
SUBNE           R3, R3, R2
SUB             R8, R6, #3
STRNE           R3, [R1,#0x148]
CLZ             R8, R8
BL              sub_33A58
CMP             R6, #3
MOV             R8, R8,LSR#5
BEQ             loc_33BFC
TST             R4, #1
BEQ             loc_33BFC
LDRB            R3, [R7,#0xCC]
CMP             R3, #0
BEQ             loc_33C40

loc_33BFC
LDR             R3, [R7,#0x28]
ADD             R3, R3, #1
STR             R3, [R7,#0x28]
MOV             R0, #1
BL              sub_2CFB8
MOV             R2, R8
MOV             R1, R5
MOV             R7, R0
BL              sub_2EDE0
CMP             R0, #0
BNE             loc_33C58
BL              loc_2A270
CMP             R6, #3
ORR             R3, R4, #1
BICEQ           R4, R4, #2
MOVNE           R4, R3
ORREQ           R4, R4, #1

loc_33C40
MOV             R1, #0
LDR             R0, [R5,#0xC]
BL              sub_33454
MOV             R1, R4
LDR             R0, [R5,#8]
BL              sub_31D94

loc_33C58
CMP             R6, #3
MOVEQ           R4, #0
BEQ             loc_33C70
MOV             R0, R7
BL              sub_2C8C0
MOV             R4, R0

loc_33C70
BL              loc_2A270
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_33B88

off_33C7C DCD dword_7DBB0
off_33C80 DCD dword_7DBB4
off_33C84 DCD dword_7D6CC



; int __fastcall sub_33C88(_DWORD *, int)
sub_33C88

var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_10= -0x10
var_4= -4

LDR             R3, =dword_7DBB4
LDR             R2, =dword_7DBB0
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x2C
STR             R1, [SP,#0x2C+var_28]
MOV             R4, R0
LDR             R1, [R3]
LDR             R2, [R2]
LDR             R3, [R0,#4]
ADD             R0, SP, #0x2C+var_1C
LDR             R7, =dword_7D6C4
STR             R3, [R1,#0x148]
STR             R3, [R2,#0x10]
LDR             R2, =dword_7D6CC
LDR             R2, [R2]
CMP             R2, #0
SUBNE           R2, R2, #1
SUBNE           R3, R3, R2
STRNE           R3, [R1,#0x148]
BL              sub_2B2DC
ADD             R1, SP, #0x2C+var_4
MOV             R3, #0
STR             R3, [R1,#-0x20]!
MOV             R2, #2
LDR             R0, [R4,#8]
STR             R1, [SP,#0x2C+var_20]
BL              sub_32FC4
LDR             R4, [R4,#0xC]

loc_33CF8
CMP             R4, #0
BEQ             loc_33DBC
LDR             R6, =dword_7D6B8
LDR             R3, [R6]
CMP             R3, #0
BNE             loc_33DBC
LDR             R5, [R4,#8]
LDR             R10, =dword_7D63C

loc_33D18
CMP             R5, #0
LDREQ           R4, [R4,#4]
BEQ             loc_33CF8
LDR             R3, [SP,#0x2C+var_24]
ADD             R0, SP, #0x2C+var_10
LDR             R11, [R3,#4]
BL              sub_2B2DC
LDR             R3, [R5,#0xC]
MOV             R1, #0x12
LDR             R0, [R5,#8]
STR             R3, [R10]
LDR             R3, =dword_7DBB8
LDR             R9, [R3]
LDR             R3, [R9,#4]
STR             R3, [R7]
BL              sub_32080
LDR             R2, [R9,#8]
LDR             R3, [R7]
CMP             R2, R3
BNE             loc_33D70
BL              sub_2DA0C
STR             R0, [R7]

loc_33D70
LDR             R2, [R7]
MOV             R8, #0
STRB            R8, [R2]
BL              sub_2A454
MOV             R2, R8
MOV             R1, #2
LDR             R0, [R9,#4]
BL              sub_2D644
MOV             R2, R8  ; flags
MOV             R1, R11 ; name
BL              fnmatch
MOV             R9, R0
ADD             R0, SP, #0x2C+var_10
BL              sub_2AA40
CMP             R9, R8
BNE             loc_33DF0
LDR             R3, [R6]
CMP             R3, R8
BEQ             loc_33DD4

loc_33DBC
MOV             R4, #0

loc_33DC0
ADD             R0, SP, #0x2C+var_1C
BL              sub_2AA40
MOV             R0, R4
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_33DD4
LDR             R0, [R4,#0xC]
CMP             R0, #0
BEQ             loc_33DBC
LDR             R1, [SP,#0x2C+var_28]
BL              sub_31D94
MOV             R4, R0
B               loc_33DC0

loc_33DF0
LDR             R5, [R5,#4]
B               loc_33D18
; End of function sub_33C88

off_33DF8 DCD dword_7DBB4
off_33DFC DCD dword_7DBB0
off_33E00 DCD dword_7D6C4
off_33E04 DCD dword_7D6CC
off_33E08 DCD dword_7D6B8
off_33E0C DCD dword_7D63C
off_33E10 DCD dword_7DBB8



; int __fastcall sub_33E14(_DWORD *, char)
sub_33E14
LDR             R3, =dword_7D710
PUSH            {R4-R8,LR}
MOV             R7, R0
AND             R8, R1, #2
MOV             R6, #0
MOV             R4, R3
LDR             R2, [R3]
ADD             R2, R2, #1
STR             R2, [R3]

loc_33E38
MOV             R1, #2
LDR             R0, [R7,#4]
BL              sub_31D94
MOV             R5, R0
BL              sub_29804
CMP             R0, #4
BEQ             loc_33EA4
CMP             R0, #0
BNE             loc_33E88
LDR             R3, [R7]
CMP             R3, #9
CLZNE           R5, R5
MOVNE           R5, R5,LSR#5
CMP             R5, #0
BNE             loc_33E90
MOV             R1, R8
LDR             R0, [R7,#8]
BL              sub_31D94
MOV             R6, R0
BL              sub_29804

loc_33E88
BICS            R3, R0, #2
BEQ             loc_33E38

loc_33E90
LDR             R3, [R4]
MOV             R0, R6
SUB             R3, R3, #1
STR             R3, [R4]
POP             {R4-R8,PC}

loc_33EA4
MOV             R6, R5
B               loc_33E88
; End of function sub_33E14

off_33EAC DCD dword_7D710



; int __fastcall sub_33EB0(int, char)
sub_33EB0

var_14= -0x14
var_10= -0x10
var_C= -0xC
var_s0=  0

LDR             R3, =dword_7DBB4
LDR             R2, =dword_7DBB0
PUSH            {R4-R8,LR}
MOV             R8, R1
LDR             R1, [R3]
SUB             SP, SP, #0x18
MOV             R7, R0
ADD             R5, SP, #0x18+var_s0
LDR             R3, [R0,#4]
ADD             R0, SP, #0x18+var_C
LDR             R2, [R2]
STR             R3, [R1,#0x148]
STR             R3, [R2,#0x10]
LDR             R2, =dword_7D6CC
LDR             R2, [R2]
CMP             R2, #0
SUBNE           R2, R2, #1
SUBNE           R3, R3, R2
STRNE           R3, [R1,#0x148]
BL              sub_2B2DC
LDR             R4, [R7,#8]
MOV             R3, #0
STR             R3, [R5,#-0x14]!
STR             R5, [SP,#0x18+var_10]

loc_33F10
CMP             R4, #0
BNE             loc_33F64
LDR             R3, [SP,#0x18+var_10]
AND             R8, R8, #2
STR             R4, [R3]
LDR             R3, =dword_7D710
LDR             R6, [SP,#0x18+var_14]
LDR             R2, [R3]
MOV             R5, R3
ADD             R2, R2, #1
STR             R2, [R3]

loc_33F3C
CMP             R6, #0
BNE             loc_33F7C

loc_33F44
LDR             R3, [R5]
ADD             R0, SP, #0x18+var_C
SUB             R3, R3, #1
STR             R3, [R5]
BL              sub_2AA40
MOV             R0, R4
ADD             SP, SP, #0x18
POP             {R4-R8,PC}

loc_33F64
MOV             R0, R4
MOV             R2, #3
MOV             R1, R5
BL              sub_32FC4
LDR             R4, [R4,#4]
B               loc_33F10

loc_33F7C
LDR             R1, [R6,#4]
LDR             R0, [R7,#0x10]
BL              sub_2AF84
MOV             R1, R8
LDR             R0, [R7,#0xC]
BL              sub_31D94
MOV             R4, R0
BL              sub_29804
BICS            R3, R0, #2
BNE             loc_33F44
LDR             R6, [R6]
B               loc_33F3C
; End of function sub_33EB0

off_33FAC DCD dword_7DBB4
off_33FB0 DCD dword_7DBB0
off_33FB4 DCD dword_7D6CC
off_33FB8 DCD dword_7D710


; Attributes: noreturn

; void __noreturn sub_33FBC()
sub_33FBC

var_194= -0x194
status= -0x190
env= -0x18C

LDR             R3, =dword_7DBB0
PUSH            {LR}
SUB             SP, SP, #0x194
ADD             R0, SP, #0x194+env ; env
LDR             R3, [R3]
STR             R3, [SP,#0x194+var_194]
LDRB            R3, [R3]
STR             R3, [SP,#0x194+status]
BL              _setjmp
SUBS            R1, R0, #0
LDR             R3, [SP,#0x194+var_194]
BEQ             loc_34014
LDR             R3, [R3,#0x38]
CMP             R3, #4
LDREQ           R3, [SP,#0x194+var_194]
LDRBEQ          R3, [R3]
STREQ           R3, [SP,#0x194+status]

loc_34000
MOV             R0, #0
BL              sub_2B9D4
BL              sub_2A2A4
LDR             R0, [SP,#0x194+status] ; status
BL              _exit

loc_34014
LDR             R0, [R3,#0xD0]
ADD             R2, SP, #0x194+env
STR             R2, [R3,#0x24]
CMP             R0, #0
BEQ             loc_34000
STR             R1, [R3,#0xD0]
LDR             R3, =dword_7D6B8
STR             R1, [R3]
BL              sub_31A54
B               loc_34000
; End of function sub_33FBC

off_3403C DCD dword_7DBB0
off_34040 DCD dword_7D6B8



; int __fastcall sub_34044(char)
sub_34044

var_18= -0x18
var_10= -0x10

PUSH            {R4-R11,LR}
MOV             R4, #0
LDR             R8, =dword_7D6B0
SUB             SP, SP, #0x1C
MOV             R7, R0
MOV             R6, R4
LDR             R9, =dword_7DBB0
LDR             R10, =aUseExitToLeave ; "\nUse \"exit\" to leave shell.\n"

loc_34064
ADD             R0, SP, #0x1C+var_10
BL              sub_2B2DC
LDR             R3, [R8]
CMP             R3, #0
BEQ             loc_34080
MOV             R0, #0xC
BL              sub_2CB60

loc_34080
LDR             R5, [R9]
LDRB            R0, [R5,#0x40]
CMP             R0, #0
ANDNE           R0, R7, #1
MOVEQ           R0, #0
BL              sub_319FC
CMN             R0, #1
BNE             loc_34104
EOR             R3, R7, #1
CMP             R4, #0x31 ; '1'
ORRGT           R3, R3, #1
TST             R3, #1
BNE             loc_340F8
BL              sub_2C2CC
CMP             R0, #0
BNE             loc_340D4
LDRB            R3, [R5,#0x3F]
CMP             R3, #0
BEQ             loc_340F8
MOV             R0, R10
BL              sub_2C294

loc_340D4
ADD             R4, R4, #1

loc_340D8
ADD             R0, SP, #0x1C+var_10
BL              sub_2AA40
LDR             R2, =dword_7D6B8
LDR             R3, [R2]
CMP             R3, #0
BEQ             loc_34064
BIC             R3, R3, #4
STR             R3, [R2]

loc_340F8
MOV             R0, R6
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_34104
LDRB            R11, [R5,#0x42]
CMP             R11, #0
BNE             loc_340D8
LDR             R3, [R5,#4]
MOV             R1, R11
STR             R0, [SP,#0x1C+var_18]
MOV             R4, R11
MOV             R3, R3,ASR#1
STR             R3, [R5,#4]
BL              sub_31D94
LDR             R2, [SP,#0x1C+var_18]
CMP             R2, #0
MOVNE           R6, R0
B               loc_340D8
; End of function sub_34044

off_3413C DCD dword_7D6B0
off_34140 DCD dword_7DBB0
off_34144 DCD aUseExitToLeave ; "\nUse \"exit\" to leave shell.\n"
off_34148 DCD dword_7D6B8



; int sub_3414C()
sub_3414C

var_70= -0x70
var_6C= -0x6C
var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C

LDR             R3, =dword_7DBB0
PUSH            {R4-R7,LR}
SUB             SP, SP, #0x74
LDR             R0, [R3]
ADD             R0, R0, #0x3C ; '<'
BL              sub_2B480
LDR             R3, =dword_7D640
LDR             R6, [R3]
LDR             R5, [R6]
CMP             R5, #0
BEQ             loc_342A0
LDR             R3, =dword_7DBB4
MOV             R1, #0x2F ; '/' ; c
MOV             R0, R5  ; s
LDR             R4, [R3]
LDR             R3, [R4,#0xD0]
ADD             R3, R3, #5
STR             R3, [SP,#0x74+var_70]
BL              strchr
CMP             R0, #0
BNE             loc_341F8

loc_341A0               ; s
MOV             R1, R5
ADD             R0, SP, #0x74+var_70 ; int
BL              sub_2DB08
SUBS            R7, R0, #0
BNE             loc_341C0
MOV             R1, R5
LDR             R0, =aSNotFound ; "%s: not found"
BL              sub_2ABFC

loc_341C0
ADD             R1, SP, #0x74+var_6C
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_341E0
LDR             R3, [SP,#0x74+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BEQ             loc_341F4

loc_341E0
CMP             R5, R7
BEQ             loc_341A0
MOV             R0, R7
BL              sub_295C0
B               loc_341A0

loc_341F4
MOV             R5, R7

loc_341F8
ADD             R7, R6, #4
LDR             R6, [R6,#4]
CMP             R6, #0
BEQ             loc_34244
MOV             LR, R4
ADD             R12, SP, #0x74+var_6C
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
MOV             R2, R7
LDR             R3, [LR]
STR             R3, [R12]
MOV             R3, #0
STRB            R3, [R4,#0xC]
MOV             R3, #1

loc_34230
LDR             R1, [R2,#4]!
CMP             R1, #0
BNE             loc_34298
STR             R3, [R4]
STR             R7, [R4,#0x10]

loc_34244
MOV             R1, #1
MOV             R0, R5
BL              sub_2B338
LDR             R3, =dword_7D6A8
MOV             R0, #0
STR             R5, [R3]
BL              sub_34044
MOV             R5, R0
BL              sub_2A5FC
CMP             R6, #0
BEQ             loc_3428C
MOV             R0, R4
BL              sub_299BC
ADD             R12, SP, #0x74+var_6C
LDM             R12!, {R0-R3}
STM             R4!, {R0-R3}
LDR             R3, [R12]
STR             R3, [R4]

loc_3428C
MOV             R0, R5
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R7,PC}

loc_34298
ADD             R3, R3, #1
B               loc_34230

loc_342A0
MOV             R5, #2
B               loc_3428C
; End of function sub_3414C

off_342A8 DCD dword_7DBB0
off_342AC DCD dword_7D640
off_342B0 DCD dword_7DBB4
off_342B4 DCD aSNotFound ; "%s: not found"
off_342B8 DCD dword_7D6A8



; void __fastcall sub_342BC(const char *)
sub_342BC
PUSH            {R4,LR}
MOV             R1, #1
BL              sub_317CC
MOV             R1, #3
BL              sub_2B338
CMP             R0, #0
POPLT           {R4,PC}
MOV             R0, #0
BL              sub_34044
POP             {R4,LR}
B               sub_2A5FC
; End of function sub_342BC




; void sub_342E8()
sub_342E8
PUSH            {R4-R8,LR}
MOV             R2, #0
LDR             R5, =dword_7D714
LDR             R6, =dword_7D738
LDR             R7, =dword_7D648
LDR             R3, =dword_7D6D8
LDR             R4, [R3]
STR             R2, [R3]

loc_34308
CMP             R4, #0
POPEQ           {R4-R8,PC}
MOV             R1, #2
LDR             R0, [R5]
BL              sub_318E0
BL              sub_30080
LDR             R3, [R4,#4]
LDR             R3, [R3]
CMP             R3, #0x18
LDRD            R2, R3, [R4,#8]
MOVEQ           R1, #2
MOVNE           R1, #1
BL              sub_308C0
MOV             R0, #0x10
BL              sub_2C370
MOV             R3, #0xF
STR             R3, [R0]
LDR             R3, [R6]
STR             R3, [R0,#8]
LDR             R3, [R7]
STR             R3, [R0,#0xC]
LDR             R3, [R4,#4]
LDR             R4, [R4]
STR             R0, [R3,#0xC]
B               loc_34308
; End of function sub_342E8

off_3436C DCD dword_7D714
off_34370 DCD dword_7D738
off_34374 DCD dword_7D648
off_34378 DCD dword_7D6D8



; _DWORD *sub_3437C()
sub_3437C

var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4-R11,LR}
MOV             R4, #0
LDR             R8, =off_7D4D0
SUB             SP, SP, #0x2C
STR             R4, [SP,#0x2C+var_14]
LDR             R3, [R8] ; unk_7D64C
LDR             R5, [R3,#4]
BL              sub_304C4
SUB             R0, R0, #2
CMP             R0, #0x1A ; switch 27 cases
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_343A4 ; jumptable 000343A4 default case, cases 2-6,8-11,13-18,22,23
jpt_343A4 DCD loc_34878 ; jump table for switch statement
DCD loc_34878
DCD def_343A4
DCD def_343A4
DCD def_343A4
DCD def_343A4
DCD def_343A4
DCD loc_3483C
DCD def_343A4
DCD def_343A4
DCD def_343A4
DCD def_343A4
DCD loc_34684
DCD def_343A4
DCD def_343A4
DCD def_343A4
DCD def_343A4
DCD def_343A4
DCD def_343A4
DCD loc_3454C
DCD loc_34878
DCD loc_34418
DCD def_343A4
DCD def_343A4
DCD loc_344F4
DCD loc_344F4
DCD loc_34864

loc_34418               ; jumptable 000343A4 case 21
MOV             R0, #0x10
MOV             R7, #8
BL              sub_2C370
MOV             R10, R0
STR             R7, [R0]
MOV             R0, #0
BL              sub_306F0
STR             R0, [R10,#4]
BL              sub_304C4
CMP             R0, #0x19
BEQ             loc_3444C

loc_34444
MOV             R0, #0x19

loc_34448
BL              sub_2E7E4

loc_3444C
MOV             R6, R10
MOV             R0, #0
BL              sub_306F0
STR             R0, [R10,#8]

loc_3445C
BL              sub_304C4
CMP             R0, #0x11
BEQ             loc_3449C
LDR             R3, =dword_7D704
LDR             R3, [R3]
CMP             R3, #0x12
BNE             loc_344DC
MOV             R0, #0
BL              sub_306F0
STR             R0, [R6,#0xC]

loc_34484
MOV             R4, #0x14

loc_34488
BL              sub_304C4
CMP             R0, R4
MOVNE           R0, R4
BNE             loc_34448
B               loc_347D4

loc_3449C
MOV             R0, #0x10
BL              sub_2C370
STR             R0, [R6,#0xC]
MOV             R4, R0
STR             R7, [R0]
MOV             R0, #0
BL              sub_306F0
STR             R0, [R4,#4]
BL              sub_304C4
CMP             R0, #0x19
BNE             loc_34444
MOV             R0, #0
MOV             R6, R4
BL              sub_306F0
STR             R0, [R4,#8]
B               loc_3445C

loc_344DC
MOV             R3, #0
MOV             R2, #1
STR             R3, [R6,#0xC]
LDR             R3, =dword_7D734
STR             R2, [R3]
B               loc_34484

loc_344F4               ; jumptable 000343A4 cases 24,25
MOV             R0, #0xC
BL              sub_2C370
LDR             R3, =dword_7D704
MOV             R10, R0
LDR             R3, [R3]
CMP             R3, #0x1B
MOVNE           R3, #0xA
MOVEQ           R3, #9
STR             R3, [R0]
MOV             R0, #0
BL              sub_306F0
STR             R0, [R10,#4]
BL              sub_304C4
CMP             R0, #0xF
BEQ             loc_34538

loc_34530
MOV             R0, #0xF
B               loc_34448

loc_34538
MOV             R0, #0
BL              sub_306F0
STR             R0, [R10,#8]

loc_34544
MOV             R4, #0x10
B               loc_34488

loc_3454C               ; jumptable 000343A4 case 19
BL              sub_304C4
CMP             R0, #3
BEQ             loc_34560

loc_34558
LDR             R0, =aBadForLoopVari ; "bad for loop variable"

loc_3455C
BL              sub_2B44C

loc_34560
LDR             R3, =dword_7D728
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_34558
LDR             R4, =dword_7D738
LDR             R0, [R4]
MOV             R7, R4
BL              sub_5871C
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_34558
MOV             R0, #0x14
LDR             R6, =dword_7D698
BL              sub_2C370
MOV             R3, #0xB
MOV             R10, R0
STM             R0, {R3,R5}
LDR             R3, [R4]
STR             R3, [R0,#0x10]
MOV             R3, #7
STR             R3, [R6]
BL              sub_304C4
CMP             R0, #0x18
BEQ             loc_34674
MOV             R0, #0x10
BL              sub_2C370
MOV             R3, #0xF
STR             R3, [R0]
LDR             R3, =unk_67F99
STR             R3, [R0,#8]
LDR             R3, =dword_7D704
STR             R0, [R10,#8]
LDR             R3, [R3]
CMP             R3, #4
LDRNE           R3, =dword_7D734
MOVNE           R2, #1
STRNE           R2, [R3]

loc_345F4
MOV             R3, #7
STR             R3, [R6]
BL              sub_304C4
CMP             R0, #0xF
BNE             loc_34530
MOV             R0, #0
BL              sub_306F0
STR             R0, [R10,#0xC]
B               loc_34544

loc_34618
MOV             R0, #0x10
BL              sub_2C370
LDR             R3, [R7]
STR             R8, [R0]
STR             R3, [R0,#8]
LDR             R3, [R9]
STR             R3, [R0,#0xC]
STR             R0, [R4]
ADD             R4, R0, #4

loc_3463C
BL              sub_304C4
CMP             R0, #3
BEQ             loc_34618
MOV             R3, #0
STR             R3, [R4]
LDR             R3, [SP,#0x2C+var_18]
STR             R3, [R10,#8]
LDR             R3, =dword_7D704
LDR             R3, [R3]
CMP             R3, #1
CMPNE           R3, #4
BEQ             loc_345F4

def_343A4               ; jumptable 000343A4 default case, cases 2-6,8-11,13-18,22,23
MOV             R0, #0xFFFFFFFF
B               loc_34448

loc_34674
ADD             R4, SP, #0x2C+var_18
MOV             R8, #0xF
LDR             R9, =dword_7D648
B               loc_3463C

loc_34684               ; jumptable 000343A4 case 12
MOV             R0, #0x10
BL              sub_2C370
MOV             R3, #0xC
MOV             R10, R0
STM             R0, {R3,R5}
BL              sub_304C4
CMP             R0, #3
BEQ             loc_346AC

loc_346A4
MOV             R0, #3
B               loc_34448

loc_346AC
LDR             R6, =dword_7D738
MOV             R0, #0x10
BL              sub_2C370
MOV             R3, #0xF
STR             R0, [R10,#8]
LDR             R7, =dword_7D648
STR             R3, [R0]
LDR             R3, [R6]
LDR             R4, =dword_7D698
STR             R3, [R0,#8]
LDR             R3, [R7]
STR             R3, [R0,#0xC]
MOV             R3, #7
STR             R3, [R4]
BL              sub_304C4
CMP             R0, #0x18
MOVNE           R0, #0x18
BNE             loc_34448
LDR             R11, =dword_7D704
ADD             R9, R10, #0xC

loc_346FC
MOV             R3, #6
STR             R3, [R4]
BL              sub_304C4
CMP             R0, #0x13
BEQ             loc_347CC
LDR             R3, [R11]
CMP             R3, #9
BNE             loc_34720
BL              sub_304C4

loc_34720
MOV             R0, #0x10
BL              sub_2C370
MOV             R8, R0
STR             R0, [R9]
MOV             R3, #0xD
MOV             R9, R0
STR             R3, [R9],#8

loc_3473C
MOV             R0, #0x10
BL              sub_2C370
MOV             R2, #0xF
STR             R0, [R9]
STR             R2, [R0]
LDR             R2, [R6]
STR             R0, [SP,#0x2C+var_18]
STR             R0, [SP,#0x2C+var_2C]
STR             R2, [R0,#8]
LDR             R2, [R7]
STR             R2, [R0,#0xC]
BL              sub_304C4
CMP             R0, #8
LDR             R3, [SP,#0x2C+var_2C]
BNE             loc_34784
ADD             R9, R3, #4
BL              sub_304C4
B               loc_3473C

loc_34784
LDR             R3, [R11]
CMP             R3, #0xA
BEQ             loc_34798

loc_34790
MOV             R0, #0xA
B               loc_34448

loc_34798
MOV             R0, #2
ADD             R9, R8, #4
BL              sub_306F0
MOV             R3, #6
STR             R0, [R8,#0xC]
STR             R3, [R4]
BL              sub_304C4
CMP             R0, #0x13
BEQ             loc_347CC
CMP             R0, #0xB
BEQ             loc_346FC
MOV             R0, #0xB
B               loc_34448

loc_347CC
MOV             R3, #0
STR             R3, [R9]

loc_347D4
LDR             R6, =dword_7D72C
ADD             R4, SP, #0x2C+var_14
LDR             R3, =dword_7D698
MOV             R2, #3
STR             R2, [R3]

loc_347E8
BL              sub_304C4
CMP             R0, #2
BEQ             loc_34B64
LDR             R3, =dword_7D734
MOV             R2, #1
STR             R2, [R3]
MOV             R3, #0
STR             R3, [R4]
LDR             R4, [SP,#0x2C+var_14]
CMP             R4, R3
BEQ             loc_34B58
LDR             R3, [R10]
CMP             R3, #4
BEQ             loc_34834
MOV             R0, #0x10
BL              sub_2C370
MOV             R3, #2
STM             R0, {R3,R5,R10}
MOV             R10, R0

loc_34834
STR             R4, [R10,#0xC]
B               loc_34B58

loc_3483C               ; jumptable 000343A4 case 7
MOV             R0, #0x10
MOV             R4, #0xA
BL              sub_2C370
MOV             R3, #4
MOV             R10, R0
STM             R0, {R3,R5}
MOV             R0, #0
BL              sub_306F0
STR             R0, [R10,#8]
B               loc_34488

loc_34864               ; jumptable 000343A4 case 26
MOV             R0, #0
MOV             R4, #0x1D
BL              sub_306F0
MOV             R10, R0
B               loc_34488

loc_34878               ; jumptable 000343A4 cases 0,1,20
LDR             R3, [R8]
ADD             R7, SP, #0x2C+var_4
LDR             R5, =dword_7D734
ADD             R9, SP, #0x2C+var_10
STR             R4, [SP,#0x2C+var_10]
MOV             R6, #1
LDR             R3, [R3,#4]
STR             R4, [SP,#0x2C+var_C]
STR             R4, [R7,#-4]!
MOV             R4, #0
MOV             R11, R4
MOV             R10, R4
STR             R3, [SP,#0x2C+var_24]
ADD             R3, SP, #0x2C+var_C
STR             R6, [R5]
STR             R6, [SP,#0x2C+var_28]
STR             R3, [SP,#0x2C+var_2C]

loc_348BC
LDR             R3, =dword_7D698
LDR             R2, [SP,#0x2C+var_28]
STR             R2, [R3]
BL              sub_304C4
CMP             R0, #7
BGT             loc_34940
CMP             R0, #6
BGE             loc_34968
CMP             R0, #2
BEQ             loc_34AF8
CMP             R0, #3
BEQ             loc_3498C

loc_348EC
LDR             R2, [SP,#0x2C+var_2C]
MOV             R3, #1
STR             R3, [R5]
MOV             R3, #0
STR             R3, [R9]
MOV             R0, #0x14
STR             R3, [R2]
STR             R3, [R7]
BL              sub_2C370
LDR             R3, [SP,#0x2C+var_24]
MOV             R10, R0
STR             R3, [R0,#4]
LDR             R3, [SP,#0x2C+var_10]
STR             R3, [R0,#0xC]
LDR             R3, [SP,#0x2C+var_C]
STR             R3, [R0,#8]
LDR             R3, [SP,#0x2C+var_8]
STR             R3, [R0,#0x10]
B               loc_34B58

loc_34938
MOV             R4, R3
B               loc_348BC

loc_34940
CMP             R0, #9
BEQ             loc_34A94
CMP             R0, #0x16
BNE             loc_348EC
BL              sub_304C4
CMP             R0, #3
MOV             R4, #1
STR             R4, [R5]
BNE             loc_346A4
B               loc_348BC

loc_34968
CMP             R11, #0
BEQ             loc_348EC
LDR             R3, =aO ; "-o"
CMP             R0, #6
LDR             R2, =(aSwapoffA+8) ; "-a"
MOVNE           R0, R3
LDR             R3, =dword_7D738
MOVEQ           R0, R2
STR             R0, [R3]

loc_3498C
MOV             R0, #0x10
BL              sub_2C370
MOV             R3, #0xF
MOV             R10, R0
STR             R3, [R0]
LDR             R3, =dword_7D738
LDR             R6, [R3]
STR             R6, [R0,#8]
MOV             R1, R6  ; s2
LDR             R0, =(a2_1+1) ; "[["
BL              strcmp
CMP             R0, #0
MOVEQ           R11, #1
BEQ             loc_349D8
MOV             R1, R6  ; s2
LDR             R0, =(aMissing_2+8) ; "]]"
BL              strcmp
CMP             R0, #0
MOVEQ           R11, #0

loc_349D8
LDR             R2, =dword_7D648
LDR             R3, [SP,#0x2C+var_28]
LDR             R2, [R2]
CMP             R3, #0
STR             R2, [R10,#0xC]
ADD             R2, R10, #4
BEQ             loc_34A24
MOV             R0, R6
STR             R2, [SP,#0x2C+var_20]
BL              sub_5871C
CMP             R6, R0
LDR             R2, [SP,#0x2C+var_20]
BEQ             loc_34A24
LDRB            R3, [R0]
CMP             R3, #0x3D ; '='
LDREQ           R3, [SP,#0x2C+var_2C]
STREQ           R2, [SP,#0x2C+var_2C]
STREQ           R10, [R3]
BEQ             loc_34A34

loc_34A24
STR             R10, [R9]
MOV             R9, R2
MOV             R3, #0
STR             R3, [SP,#0x2C+var_28]

loc_34A34
CMP             R4, #0
BEQ             loc_348BC
LDR             R2, =dword_7D698
MOV             R3, #6
STR             R3, [R2]
BL              sub_304C4
CMP             R0, #0x1C
MOV             R3, #1
STR             R3, [R5]
BHI             def_343A4 ; jumptable 000343A4 default case, cases 2-6,8-11,13-18,22,23
MOV             R0, R3,LSL R0
LDR             R3, =0x1CA04000
ANDS            R3, R0, R3
BNE             loc_34A94
TST             R0, #0x200
BNE             loc_34938
TST             R0, #8
BEQ             def_343A4 ; jumptable 000343A4 default case, cases 2-6,8-11,13-18,22,23
LDR             R3, =dword_7D738
LDR             R0, =(a2_1+1) ; "[["
LDR             R1, [R3] ; s2
BL              strcmp
CMP             R0, #0
BNE             def_343A4 ; jumptable 000343A4 default case, cases 2-6,8-11,13-18,22,23

loc_34A94
LDR             R3, [SP,#0x2C+var_10]
CMP             R3, #0
BEQ             loc_348EC
ADD             R3, R3, #4
CMP             R9, R3
BNE             loc_348EC
LDR             R3, [SP,#0x2C+var_C]
CMP             R3, #0
BNE             loc_348EC
LDR             R3, [SP,#0x2C+var_8]
CMP             R3, #0
BNE             loc_348EC
CMP             R4, #0
BNE             loc_34AD8
BL              sub_304C4
CMP             R0, #0xA
BNE             loc_34790

loc_34AD8
LDR             R4, [R10,#8]
MOV             R0, R4
BL              sub_5871C
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_34B10

loc_34AF0
LDR             R0, =aBadFunctionNam ; "bad function name"
B               loc_3455C

loc_34AF8
LDR             R3, =dword_7D72C
LDR             R10, [R3]
STR             R10, [R7]
ADD             R7, R10, #4
BL              sub_305AC
B               loc_348BC

loc_34B10
MOV             R0, R4
BL              sub_2C3FC
CMP             R0, #0
BEQ             loc_34B30
LDR             R3, [R0]
LDRB            R3, [R3]
TST             R3, #1
BNE             loc_34AF0

loc_34B30
LDR             R2, =dword_7D698
MOV             R3, #0xE
STR             R3, [R10]
MOV             R3, #7
STR             R3, [R2]
LDR             R3, [R8] ; unk_7D64C
LDR             R3, [R3,#4]
STR             R3, [R10,#4]
BL              sub_3437C
STR             R0, [R10,#0xC]

loc_34B58
MOV             R0, R10
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_34B64
LDR             R3, [R6]
STR             R3, [R4]
ADD             R4, R3, #4
BL              sub_305AC
B               loc_347E8
; End of function sub_3437C

off_34B78 DCD off_7D4D0
off_34B7C DCD dword_7D704
off_34B80 DCD dword_7D734
off_34B84 DCD aBadForLoopVari ; "bad for loop variable"
off_34B88 DCD dword_7D728
off_34B8C DCD dword_7D738
off_34B90 DCD dword_7D698
off_34B94 DCD unk_67F99
off_34B98 DCD dword_7D648
off_34B9C DCD dword_7D72C
off_34BA0 DCD aO        ; "-o"
off_34BA4 DCD aSwapoffA+8 ; "-a"
off_34BA8 DCD a2_1+1    ; "[["
off_34BAC DCD aMissing_2+8 ; "]]"
dword_34BB0 DCD 0x1CA04000
off_34BB4 DCD aBadFunctionNam ; "bad function name"



; _DWORD *sub_34BB8()
sub_34BB8
PUSH            {R4-R10,LR}
MOV             R5, #1
BL              sub_304C4
CMP             R0, #0xD
LDREQ           R3, =dword_7D698
MOVEQ           R2, #3
LDRNE           R3, =dword_7D734
STREQ           R2, [R3]
STRNE           R5, [R3]
MOVNE           R5, #0
BL              sub_3437C
MOV             R4, R0
BL              sub_304C4
CMP             R0, #8
MOV             R6, R0
BNE             loc_34C60
MOV             R0, #0xC
LDR             R8, =dword_7D698
BL              sub_2C370
MOV             R3, #1
MOV             R7, R0
STR             R3, [R0]
MOV             R0, R6
BL              sub_2C370
MOV             R9, #7
MOV             R6, R0
STR             R0, [R7,#8]
STR             R4, [R0,#4]

loc_34C28
MOV             R0, #8
BL              sub_2C370
MOV             R4, R0
STR             R9, [R8]
BL              sub_3437C
STR             R0, [R4,#4]
STR             R4, [R6]
MOV             R6, R4
BL              sub_304C4
CMP             R0, #8
BEQ             loc_34C28
MOV             R3, #0
STR             R3, [R4]
MOV             R4, R7

loc_34C60
LDR             R3, =dword_7D734
CMP             R5, #0
MOV             R2, #1
STR             R2, [R3]
BEQ             loc_34C88
MOV             R0, #8
BL              sub_2C370
MOV             R3, #0x1A
STM             R0, {R3,R4}
MOV             R4, R0

loc_34C88
MOV             R0, R4
POP             {R4-R10,PC}
; End of function sub_34BB8

off_34C90 DCD dword_7D698
off_34C94 DCD dword_7D734



; void __fastcall sub_34C98(int)
sub_34C98

; FUNCTION CHUNK AT 0002A270 SIZE 00000030 BYTES

PUSH            {R4-R8,LR}
MOV             R7, R0
LDR             R6, =dword_7DBB0
LDR             R2, [R6]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
LDR             R3, =dword_7D70C
LDR             R0, [R3] ; ptr
LDR             R2, [R0]
LDR             R4, [R0,#4]
STR             R2, [R3]
BL              free

loc_34CCC
CMP             R4, #0
BNE             loc_34CDC
POP             {R4-R8,LR}
B               loc_2A270

loc_34CDC
CMP             R7, #0
LDR             R8, [R4]
LDR             R5, [R4,#4]
BEQ             loc_34D4C
LDR             R3, [R4,#8]
CMP             R3, #0x20 ; ' '
BEQ             loc_34D18
LDR             R2, [R5,#8]
LDR             R0, [R4,#0xC] ; ptr
CMP             R2, R0
MOVEQ           R2, #0xC
BEQ             loc_34D1C
TST             R3, #0x18
BNE             loc_34D18
BL              free

loc_34D18
MOV             R2, #4

loc_34D1C
LDR             R1, [R5,#4]
LDR             R3, [R4,#8]
EOR             R3, R3, R1
AND             R3, R3, R2
EOR             R3, R3, R1
STR             R3, [R5,#4]
AND             R3, R3, #0x27 ; '''
CMP             R3, #0x20 ; ' '
BNE             loc_34D90

loc_34D40
LDR             R0, [R5,#8]
BL              sub_2AF78
B               loc_34D90

loc_34D4C
CMP             R5, #0
BNE             loc_34DA0
LDR             R3, [R6]
LDR             R2, [R4,#0xC]
ADD             R3, R3, #0x3D ; '='
ADD             R1, R2, #0xC

loc_34D64
LDR             R0, [R2],#4
CMP             R2, R1
STR             R0, [R3],#4
BNE             loc_34D64
LDRH            R1, [R2]
STRH            R1, [R3]
LDRB            R2, [R2,#2]
STRB            R2, [R3,#2]
LDR             R0, [R4,#0xC] ; ptr
BL              free
BL              sub_2BB6C

loc_34D90               ; ptr
MOV             R0, R4
MOV             R4, R8
BL              free
B               loc_34CCC

loc_34DA0
LDR             R3, [R4,#8]
CMP             R3, #0x20 ; ' '
LDREQ           R3, [R5,#4]
BICEQ           R3, R3, #6
STREQ           R3, [R5,#4]
BEQ             loc_34D40
LDR             R2, [R5,#0xC]
CMP             R2, #0
LDRNE           R3, [R4,#0xC]
BNE             loc_34DFC

loc_34DC8
LDR             R3, [R5,#4]
TST             R3, #0x18
BNE             loc_34DDC
LDR             R0, [R5,#8] ; ptr
BL              free

loc_34DDC
LDR             R3, [R4,#8]
STR             R3, [R5,#4]
LDR             R3, [R4,#0xC]
STR             R3, [R5,#8]
B               loc_34D90

loc_34DF0
CMP             R1, #0x3D ; '='
MOV             R0, R3
BEQ             loc_34E0C

loc_34DFC
MOV             R0, R3
LDRB            R1, [R3],#1
CMP             R1, #0
BNE             loc_34DF0

loc_34E0C
BLX             R2
B               loc_34DC8
; End of function sub_34C98

off_34E14 DCD dword_7DBB0
off_34E18 DCD dword_7D70C



; int __fastcall sub_34E1C(_DWORD *, int, int, char)
sub_34E1C

var_1B4= -0x1B4
var_1B0= -0x1B0
var_1AC= -0x1AC
var_1A8= -0x1A8
var_1A4= -0x1A4
var_1A0= -0x1A0
var_19C= -0x19C
env= -0x188

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x1B8
STRD            R2, R3, [SP,#0x1B8+var_1A8]
ADD             R12, SP, #0x1B8+var_19C
LDR             R3, =dword_7DBB4
STR             R0, [SP,#0x1B8+var_1B4]
STR             R1, [SP,#0x1B8+var_1AC]
LDR             LR, [R3]
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
ADD             R0, SP, #0x1B8+env ; env
LDR             R3, [LR]
STR             R3, [R12]
LDR             R3, =dword_7D6CC
LDR             R3, [R3]
STR             R3, [SP,#0x1B8+var_1B0]
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDR             R3, [R3,#0x24]
STR             R3, [SP,#0x1B8+var_1A0]
BL              _setjmp
LDR             R3, =dword_7DBB0
SUBS            R5, R0, #0
LDR             R3, [R3]
BNE             loc_34F08
LDR             R2, [R3,#0x28]
ADD             R2, R2, #1
STR             R2, [R3,#0x28]
ADD             R2, SP, #0x1B8+env
STR             R2, [R3,#0x24]
LDR             R3, =dword_7DBB4
LDR             R2, [SP,#0x1B8+var_1B4]
LDR             R4, [R3]
LDR             R3, [SP,#0x1B8+var_1B4]
STRB            R5, [R4,#0xC]
LDR             R3, [R3]
ADD             R3, R3, #1
STR             R3, [R2]
LDR             R2, [R2,#8]
LDR             R3, =dword_7D6CC
STR             R2, [R3]
BL              loc_2A270
LDR             R3, [SP,#0x1B8+var_1AC]
MOV             R1, #0xFFFFFFFF
MOV             R0, #1
STRD            R0, R1, [R4,#4]
SUB             R3, R3, #1
STR             R3, [R4]
LDR             R3, [SP,#0x1B8+var_1A8]
ADD             R3, R3, #4
STR             R3, [R4,#0x10]
BL              sub_2A7EC
LDR             R3, [SP,#0x1B8+var_1A4]
AND             R1, R3, #2
LDR             R3, [SP,#0x1B8+var_1B4]
LDR             R0, [R3,#0x10]
BL              sub_31D94
MOV             R0, R5
BL              sub_34C98

loc_34F08
LDR             R3, =dword_7DBB0
LDR             R6, [R3]
LDR             R3, [R6,#0x28]
ADD             R3, R3, #1
STR             R3, [R6,#0x28]
LDR             R3, =dword_7D6CC
LDR             R2, [SP,#0x1B8+var_1B0]
LDR             R0, [SP,#0x1B8+var_1B4]
STR             R2, [R3]
BL              sub_299F4
LDR             R3, =dword_7DBB4
LDR             R4, [R3]
MOV             R0, R4
BL              sub_299BC
ADD             LR, SP, #0x1B8+var_19C
MOV             R12, R4
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDR             R3, [LR]
STR             R3, [R12]
LDR             R3, [SP,#0x1B8+var_1A0]
STR             R3, [R6,#0x24]
BL              loc_2A270
LDR             R2, =dword_7D6B8
MOV             R0, R5
LDR             R3, [R2]
BIC             R3, R3, #4
STR             R3, [R2]
ADD             SP, SP, #0x1B8
POP             {R4-R6,PC}
; End of function sub_34E1C

off_34F80 DCD dword_7DBB4
off_34F84 DCD dword_7D6CC
off_34F88 DCD dword_7DBB0
off_34F8C DCD dword_7D6B8



; void __fastcall sub_34F90(char *, int *, int, char *)
sub_34F90

var_90= -0x90
var_8C= -0x8C
var_88= -0x88
var_84= -0x84
haystack= -0x80
var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C

PUSH            {R4-R11,LR}
MOV             R4, R1
SUB             SP, SP, #0x94
MOV             R1, #0x2F ; '/' ; c
MOV             R5, R0
MOV             R6, R2
STR             R3, [SP,#0x94+haystack]
BL              strchr
CMP             R0, #0
BEQ             loc_34FF4
TST             R6, #2
MOV             R3, #0xFFFFFFFF
STR             R3, [R4,#4]
BNE             loc_34FD8

loc_34FC8
MOV             R3, #0

loc_34FCC
STR             R3, [R4]

loc_34FD0
ADD             SP, SP, #0x94
POP             {R4-R11,PC}

loc_34FD8
ADD             R1, SP, #0x94+var_6C
MOV             R0, R5
BLX             sub_62DFC
CMP             R0, #0
BGE             loc_34FC8

loc_34FEC
MOV             R3, #0xFFFFFFFF
B               loc_34FCC

loc_34FF4
LDR             R3, =dword_7DBB4
LDR             R0, [SP,#0x94+haystack] ; haystack
LDR             R3, [R3]
LDR             R3, [R3,#0xD0]
ADD             R3, R3, #5
CMP             R3, R0
MOVEQ           R8, #1
MOVNE           R8, #0
BEQ             loc_35030
LDR             R1, =needle ; "%builtin"
ORR             R7, R6, #8
BL              strstr
CMP             R0, #0
ORRNE           R6, R6, #0x28 ; '('
MOVEQ           R6, R7

loc_35030
MOV             R1, #0
MOV             R0, R5
BL              sub_29D4C
SUBS            R11, R0, #0
BEQ             loc_35074
LDR             R2, [R11,#8]
CMP             R2, #1
MOVEQ           R2, #4
BEQ             loc_35060
CMP             R2, #2
MOVEQ           R2, #0x20 ; ' '
MOVNE           R2, #8

loc_35060
TST             R6, R2
BNE             loc_35158
LDRB            R2, [R11,#0xC]
CMP             R2, #0
BEQ             loc_35248

loc_35074
MOV             R0, R5
BL              sub_2C3FC
SUBS            R3, R0, #0
STR             R3, [SP,#0x94+var_88]
BEQ             loc_350A8
LDR             R2, [R3]
LDRB            R2, [R2]
TST             R2, #2
BNE             loc_35174
TST             R6, #8
BEQ             loc_35164
TST             R6, #0x20
BEQ             loc_35174

loc_350A8
CMP             R11, #0
BEQ             loc_351C0
LDRB            R2, [R11,#0xC]
CMP             R2, #0
BEQ             loc_351C0
LDR             R2, [R11,#8]
CMP             R2, #2
LDREQ           R2, =dword_7D4CC
LDRNE           R3, [R11,#4]
LDREQ           R3, [R2]

loc_350D0
MOV             R7, #0xFFFFFFFF
STR             R3, [SP,#0x94+var_90]
MOV             R3, #2
STR             R3, [SP,#0x94+var_8C]

loc_350E0               ; s
MOV             R1, R5
ADD             R0, SP, #0x94+haystack ; int
BL              sub_2DB08
SUBS            R9, R0, #0
BNE             loc_351C8
CMP             R11, #0
MOVEQ           R8, #0
CMP             R8, #0
BEQ             loc_35108
BL              sub_2A794

loc_35108
TST             R6, #1
BEQ             loc_34FEC
LDR             R6, =aCommandNotFoun ; "command_not_found_handle"
MOV             R1, #0
MOV             R0, R6
BL              sub_29D4C
CMP             R0, #0
BEQ             loc_35360
LDR             R3, [R0,#8]
CMP             R3, #1
BNE             loc_35360
MOV             R3, #0
ADD             R2, SP, #0x94+var_78
MOV             R1, #2
LDR             R0, [R0,#4]
STR             R6, [SP,#0x94+var_78]
STR             R5, [SP,#0x94+var_74]
STR             R3, [SP,#0x94+var_70]
BL              sub_34E1C
B               loc_34FEC

loc_35158
MOV             R8, #0
MOV             R11, R8
B               loc_35074

loc_35164
LDR             R2, =dword_7D4CC
LDR             R2, [R2]
CMP             R2, #0
BGT             loc_350A8

loc_35174
CMP             R8, #0
MOVEQ           R3, #2
STREQ           R3, [R4]
LDREQ           R3, [SP,#0x94+var_88]
BEQ             loc_3525C
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
MOV             R1, #1
MOV             R0, R5
BL              sub_29D4C
LDR             R3, [SP,#0x94+var_88]
MOV             R2, #2
MOV             R11, R0
STR             R2, [R0,#8]
STR             R3, [R0,#4]
B               loc_35350

loc_351C0
MOV             R3, #0xFFFFFFFF
B               loc_350D0

loc_351C8
BL              sub_295C0
LDR             R3, =dword_7D724
ADD             R7, R7, #1
LDR             R10, [R3]
CMP             R10, #0
BEQ             loc_35220
LDR             R1, =(aIsASshellBuilt+0xE) ; "builtin"
MOV             R0, R10
BL              sub_295E8
CMP             R0, #0
BEQ             loc_35204
LDR             R3, [SP,#0x94+var_88]
CMP             R3, #0
BNE             loc_35174
B               loc_350E0

loc_35204
TST             R6, #4
BNE             loc_350E0
LDR             R1, =aFunc ; "func"
MOV             R0, R10
BL              sub_295E8
CMP             R0, #0
BEQ             loc_350E0

loc_35220
LDRB            R3, [R9]
LDR             R2, [SP,#0x94+var_90]
CMP             R2, R7
CMPGE           R3, #0x2F ; '/'
MOVEQ           R3, #1
MOVNE           R3, #0
STR             R3, [SP,#0x94+var_84]
BNE             loc_35288
CMP             R2, R7
BGT             loc_350E0

loc_35248
MOV             R2, #0
LDR             R3, [R11,#4]
STRB            R2, [R11,#0xC]
LDR             R2, [R11,#8]
STR             R2, [R4]

loc_3525C
STR             R3, [R4,#4]
B               loc_34FD0

loc_35264
LDR             R3, =dword_7DB94
LDR             R2, [R3]
LDR             R3, [SP,#0x94+var_8C]
LDR             R2, [R2]
CMP             R2, #2
CMPNE           R2, #0x14
MOVNE           R3, R2

loc_35280
STR             R3, [SP,#0x94+var_8C]
B               loc_350E0

loc_35288
ADD             R1, SP, #0x94+var_6C
MOV             R0, R9
BLX             sub_62DFC
CMP             R0, #0
BLT             loc_35264
LDR             R2, [SP,#0x94+var_5C]
AND             R2, R2, #0xF000
CMP             R2, #0x8000
BNE             loc_35358
CMP             R10, #0
BEQ             loc_35318
MOV             R0, R9  ; s
BL              strlen
ADD             R0, R0, #1
BL              sub_2B208
MOV             R1, #1
MOV             R0, R9
BL              sub_2B338
LDR             R0, [SP,#0x94+var_84]
BL              sub_34044
BL              sub_2A5FC
LDR             R1, [SP,#0x94+var_84]
MOV             R0, R5
BL              sub_29D4C
SUBS            R11, R0, #0
BEQ             loc_352FC
LDR             R2, [R11,#8]
CMP             R2, #1
BEQ             loc_3530C

loc_352FC
MOV             R2, R9
MOV             R1, R5
LDR             R0, =aSNotDefinedInS ; "%s not defined in %s"
BL              sub_2ABFC

loc_3530C
MOV             R0, R9
BL              sub_295C0
B               loc_35248

loc_35318
CMP             R8, #0
STREQ           R8, [R4]
STREQ           R7, [R4,#4]
BEQ             loc_34FD0
LDR             R3, =dword_7DBB0
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
MOV             R1, #1
MOV             R0, R5
BL              sub_29D4C
MOV             R11, R0
STMIB           R0, {R7,R10}

loc_35350
BL              loc_2A270
B               loc_35248

loc_35358
MOV             R3, #0xD
B               loc_35280

loc_35360
LDR             R1, =(aSNotFound+4) ; "not found"
LDR             R0, [SP,#0x94+var_8C]
BL              sub_2DF6C
MOV             R1, R5
MOV             R2, R0
LDR             R0, =(aCanTCreateSS+0xD) ; "%s: %s"
BL              sub_2B9AC
B               loc_34FEC
; End of function sub_34F90

off_35380 DCD dword_7DBB4
off_35384 DCD needle    ; "%builtin"
off_35388 DCD dword_7D4CC
off_3538C DCD aCommandNotFoun ; "command_not_found_handle"
off_35390 DCD dword_7DBB0
off_35394 DCD dword_7D724
off_35398 DCD aIsASshellBuilt+0xE ; "builtin"
off_3539C DCD aFunc     ; "func"
off_353A0 DCD dword_7DB94
off_353A4 DCD aSNotDefinedInS ; "%s not defined in %s"
off_353A8 DCD aSNotFound+4 ; "not found"
off_353AC DCD aCanTCreateSS+0xD ; "%s: %s"



; int __fastcall sub_353B0(int, char *, int)
sub_353B0

var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x14
STR             R1, [SP,#0x14+var_10]
CMP             R1, #0
MOV             R5, R0
MOV             R4, R2
LDREQ           R3, =dword_7DBB4
LDREQ           R3, [R3]
LDREQ           R1, [R3,#0xD0]
ADDEQ           R1, R1, #5
CMP             R2, #0
STR             R1, [SP,#0x14+var_10]
BEQ             loc_353E8
BL              sub_2F134

loc_353E8
MOV             R0, R5
BL              sub_2C428
CMP             R0, #0
BEQ             loc_35418
CMP             R4, #0
LDR             R0, =aIsAShellKeywor ; " is a shell keyword"
MOVEQ           R0, R5

loc_35404
BL              sub_2F134

loc_35408
LDR             R0, =(aShellReturnedI+0x13) ; "\n"
MOV             R4, #0
BL              sub_2F134
B               loc_35444

loc_35418
MOV             R0, R5
BL              sub_29CD0
LDR             R6, [R0]
CMP             R6, #0
BEQ             loc_35460
CMP             R4, #0
BNE             loc_35450
LDR             R0, =aAlias ; "alias "
BL              sub_2F134
MOV             R0, R6
BL              sub_2D320

loc_35444
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_35450
LDR             R1, [R6,#8]
LDR             R0, =aIsAnAliasForS ; " is an alias for %s"

loc_35458
BL              sub_2BEA0
B               loc_35408

loc_35460
LDR             R3, [SP,#0x14+var_10]
MOV             R2, #2
ADD             R1, SP, #0x14+var_C
MOV             R0, R5
BL              sub_34F90
LDR             R3, [SP,#0x14+var_C]
CMP             R3, #1
BEQ             loc_354D0
CMP             R3, #2
BEQ             loc_354E0
CMP             R3, #0
BNE             loc_35510
LDR             R6, [SP,#0x14+var_8]
CMP             R6, #0
BLT             loc_354B8

loc_3549C               ; s
MOV             R1, R5
ADD             R0, SP, #0x14+var_10 ; int
BL              sub_2DB08
BL              sub_295C0
SUBS            R6, R6, #1
BCS             loc_3549C
MOV             R5, R0

loc_354B8
CMP             R4, #0
MOVNE           R1, R5
LDRNE           R0, =aIsS ; " is %s"
BNE             loc_35458

loc_354C8
MOV             R0, R5
B               loc_35404

loc_354D0
CMP             R4, #0
BEQ             loc_354C8
LDR             R0, =aIsAShellFuncti ; " is a shell function"
B               loc_35404

loc_354E0
CMP             R4, #0
BEQ             loc_354C8
LDR             R3, [SP,#0x14+var_8]
LDR             R0, =aIsASshellBuilt ; " is a %sshell builtin"
LDR             R3, [R3]
LDRB            R3, [R3]
TST             R3, #1
LDREQ           R3, =dword_7DBB0
LDRNE           R1, =aSpecial ; "special "
LDREQ           R1, [R3]
ADDEQ           R1, R1, #0x3C ; '<'
B               loc_35458

loc_35510
CMP             R4, #0
BEQ             loc_35520
LDR             R0, =aNotFound ; ": not found\n"
BL              sub_2F134

loc_35520
MOV             R4, #0x7F
B               loc_35444
; End of function sub_353B0

off_35528 DCD dword_7DBB4
off_3552C DCD aIsAShellKeywor ; " is a shell keyword"
off_35530 DCD aShellReturnedI+0x13 ; "\n"
off_35534 DCD aAlias    ; "alias "
off_35538 DCD aIsAnAliasForS ; " is an alias for %s"
off_3553C DCD aIsS      ; " is %s"
off_35540 DCD aIsAShellFuncti ; " is a shell function"
off_35544 DCD aIsASshellBuilt ; " is a %sshell builtin"
off_35548 DCD dword_7DBB0
off_3554C DCD aSpecial  ; "special "
off_35550 DCD aNotFound ; ": not found\n"



; int __fastcall sub_35554(int, int)
sub_35554
LDR             R3, [R1,#4]
PUSH            {R4-R6,LR}
CMP             R3, #0
BEQ             loc_35578
LDRB            R3, [R3]
CMP             R3, #0x2D ; '-'
MOVEQ           R5, #0
MOVEQ           R4, #2
BEQ             loc_35580

loc_35578
MOV             R5, #1
MOV             R4, R5

loc_35580
ADD             R4, R1, R4,LSL#2
MOV             R6, #0
B               loc_3559C

loc_3558C
MOV             R2, R5
MOV             R1, #0
BL              sub_353B0
ORR             R6, R6, R0

loc_3559C
LDR             R0, [R4],#4
CMP             R0, #0
BNE             loc_3558C
MOV             R0, R6
POP             {R4-R6,PC}
; End of function sub_35554




; int sub_355B0()
sub_355B0
PUSH            {R4-R8,LR}
MOV             R4, #0
LDR             R6, =aPvv ; "pvV"
MOV             R5, R4
LDR             R7, =(string+0x15) ; "/bin:/usr/bin"

loc_355C4
MOV             R0, R6
BL              sub_2B480
SUBS            R3, R0, #0
BNE             loc_355FC
LDR             R3, =dword_7D640
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
POPEQ           {R4-R8,PC}
MOV             R2, R5
MOV             R1, R4
MOV             R0, R3
POP             {R4-R8,LR}
B               sub_353B0

loc_355FC
CMP             R3, #0x56 ; 'V'
MOVEQ           R5, #2
BEQ             loc_355C4
CMP             R3, #0x76 ; 'v'
MOVNE           R4, R7
B               loc_355C4
; End of function sub_355B0

off_35614 DCD aPvv      ; "pvV"
off_35618 DCD string+0x15 ; "/bin:/usr/bin"
off_3561C DCD dword_7D640



; _DWORD *__fastcall sub_35620(int, int, int, int)
sub_35620

fd= -0x10
var_C= -0xC
var_8= -8

PUSH            {R0-R10,LR}
MOV             R6, R0
LDR             R3, [R0,#8]
MOV             R0, #0

loc_35630
CMP             R3, #0
BNE             loc_35694
LDR             R3, =dword_7DBB0
ORR             R7, R1, #1
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
BL              sub_2CFB8
LDR             R10, =dword_7DBB4
MOV             R9, R0
LDR             R4, [R6,#8]
MOV             R5, #0xFFFFFFFF

loc_35664
CMP             R4, #0
BNE             loc_356A0
LDR             R3, [R6,#4]
CMP             R3, #0
BNE             loc_35684
MOV             R0, R9
BL              sub_2C8C0
MOV             R4, R0

loc_35684
BL              loc_2A270
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R10,PC}

loc_35694
ADD             R0, R0, #1
LDR             R3, [R3]
B               loc_35630

loc_356A0
LDR             R8, [R4,#4]
LDR             R3, [R8]
CMP             R3, #0
BNE             loc_356EC
LDR             R3, [R8,#0xC]
CMP             R3, #0
BEQ             loc_356EC
LDR             R0, [R3,#8]
BL              sub_5871C
LDRB            R2, [R0]
CMP             R2, #0
BNE             loc_356EC
LDR             R3, [R10]
ADD             R1, SP, #0x10+var_8
LDR             R0, [R8,#0xC]
LDR             R3, [R3,#0xD0]
LDR             R0, [R0,#8]
ADD             R3, R3, #5
BL              sub_34F90

loc_356EC
MOV             R3, #0xFFFFFFFF
STR             R3, [SP,#0x10+var_C]
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_35720
MOV             R0, SP  ; pipedes
BL              pipe
CMP             R0, #0
BGE             loc_35720
MOV             R0, R5  ; fd
BL              close
LDR             R0, =aCanTCreatePipe_0 ; "can't create pipe: %m"
BL              sub_2ABFC

loc_35720
LDR             R2, [R6,#4]
MOV             R0, R9
LDR             R1, [R4,#4]
BL              sub_2EDE0
CMP             R0, #0
BNE             loc_35794
BL              loc_2A270
LDR             R3, [SP,#0x10+var_C]
CMP             R3, #0
BLT             loc_35750
LDR             R0, [SP,#0x10+fd] ; fd
BL              close

loc_35750
CMP             R5, #0
BLE             loc_3576C
MOV             R1, #0  ; fd2
MOV             R0, R5  ; fd
BL              dup2
MOV             R0, R5  ; fd
BL              close

loc_3576C               ; fd
LDR             R0, [SP,#0x10+var_C]
CMP             R0, #1
BLE             loc_35788
MOV             R1, #1  ; fd2
BL              dup2
LDR             R0, [SP,#0x10+var_C] ; fd
BL              close

loc_35788
MOV             R1, R7
LDR             R0, [R4,#4]
BL              sub_31D94

loc_35794
CMP             R5, #0
BLT             loc_357A4
MOV             R0, R5  ; fd
BL              close

loc_357A4               ; fd
LDR             R0, [SP,#0x10+var_C]
LDR             R5, [SP,#0x10+fd]
CMN             R0, #1
BEQ             loc_357B8
BL              close

loc_357B8
LDR             R4, [R4]
B               loc_35664
; End of function sub_35620

off_357C0 DCD dword_7DBB0
off_357C4 DCD dword_7DBB4
off_357C8 DCD aCanTCreatePipe_0 ; "can't create pipe: %m"



; int sub_357CC()
sub_357CC

var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1C
LDR             R0, =(aNTR+5) ; "r"
BL              sub_2B480
SUBS            R5, R0, #0
BEQ             loc_357FC
MOV             R5, #0
MOV             R0, #0
BL              sub_2A2CC

loc_357F0
MOV             R0, R5
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_357FC
LDR             R4, =dword_7D640
LDR             R3, [R4]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_35898
LDR             R7, =dword_7D4CC
LDR             R8, =dword_7DBB4

loc_35818
LDR             R3, [R4]
LDR             R6, [R3]
CMP             R6, #0
BEQ             loc_357F0
MOV             R1, #0
MOV             R0, R6
BL              sub_29D4C
CMP             R0, #0
BEQ             loc_35860
LDR             R3, [R0,#8]
CMP             R3, #0
BEQ             loc_3585C
CMP             R3, #2
BNE             loc_35860
LDR             R3, [R7]
CMP             R3, #0
BLT             loc_35860

loc_3585C
BL              sub_2A794

loc_35860
LDR             R3, [R8]
MOV             R2, #1
ADD             R1, SP, #0x1C+var_C
MOV             R0, R6
LDR             R3, [R3,#0xD0]
ADD             R3, R3, #5
BL              sub_34F90
LDR             R3, [SP,#0x1C+var_C]
CMN             R3, #1
LDR             R3, [R4]
MOVEQ           R5, #1
ADD             R3, R3, #4
STR             R3, [R4]
B               loc_35818

loc_35898
LDR             R6, =dword_7D6A4
LDR             R9, =dword_7DBB4
LDR             R10, =(aSSS_2+2) ; "%s%s\n"
LDR             R7, [R6]

loc_358A8
LDR             R3, [R6]
ADD             R3, R3, #0x7C ; '|'
CMP             R7, R3
BCS             loc_357F0
LDR             R4, [R7],#4
LDR             R11, =(asc_69C62+1) ; "*"

loc_358C0
CMP             R4, #0
BEQ             loc_358A8
LDR             R3, [R4,#8]
CMP             R3, #0
BNE             loc_3593C
LDR             R3, [R9]
LDR             R8, [R4,#4]
LDR             R2, [R3,#0xD0]
ADD             R3, SP, #0x1C+var_4
ADD             R2, R2, #5
STR             R2, [R3,#-8]!
ADD             R2, R4, #0xD

loc_358F0               ; s
MOV             R1, R2
MOV             R0, R3  ; int
STR             R2, [SP,#0x1C+var_10]
STR             R3, [SP,#0x1C+var_14]
BL              sub_2DB08
STR             R0, [SP,#0x1C+var_18]
BL              sub_295C0
SUBS            R8, R8, #1
LDMED           SP, {R1,R3}
LDR             R2, [SP,#0x1C+var_10]
BPL             loc_358F0
LDRB            R3, [R4,#0xC]
MOV             R0, R10
CMP             R3, #0
LDREQ           R3, =dword_7DBB0
MOVNE           R2, R11
LDREQ           R2, [R3]
ADDEQ           R2, R2, #0x3C ; '<'
BL              sub_2BEA0

loc_3593C
LDR             R4, [R4]
B               loc_358C0
; End of function sub_357CC

off_35944 DCD aNTR+5    ; "r"
off_35948 DCD dword_7D640
off_3594C DCD dword_7D4CC
off_35950 DCD dword_7DBB4
off_35954 DCD dword_7D6A4
off_35958 DCD aSSS_2+2  ; "%s%s\n"
off_3595C DCD asc_69C62+1 ; "*"
off_35960 DCD dword_7DBB0



; int __fastcall sub_35964(int, char)
sub_35964

var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x54
LDR             R8, =dword_7D6CC
MOV             R7, R0
ADD             R10, SP, #0x54+var_28
LDR             R6, =dword_7DBB4
LDR             R9, =dword_7DBB0
LDR             R2, [R8]
LDR             R3, [R0,#4]
ADD             R0, SP, #0x54+var_10
LDR             R4, [R9]
STR             R1, [SP,#0x54+var_44]
CMP             R2, #0
LDR             R1, [R6]
SUBNE           R2, R2, #1
STR             R3, [R1,#0x148]
STR             R3, [R4,#0x10]
SUBNE           R3, R3, R2
STRNE           R3, [R1,#0x148]
BL              sub_2B2DC
BL              sub_2A7EC
MOV             R3, #0
MOV             R2, #2
STRB            R3, [R4,#1]
LDR             R4, [R7,#0xC]
STR             R2, [SP,#0x54+var_18]
LDR             R2, =off_63714
CMP             R4, R3
STR             R0, [SP,#0x54+var_3C]
STR             R3, [SP,#0x54+var_20]
STR             R2, [SP,#0x54+var_14]
ADD             R2, SP, #0x54+var_20
STR             R2, [SP,#0x54+var_1C]
STR             R10, [SP,#0x54+var_24]
STR             R3, [SP,#0x54+var_28]
BEQ             loc_35A1C
LDR             R0, [R4,#8]
MOV             R4, #0
BL              sub_2C3FC
SUBS            R5, R0, #0
LDR             R11, [R7,#0xC]
LDRNE           R3, [R5]
LDRBNE          R5, [R3]
UBFXNE          R5, R5, #2, #1

loc_35A14
CMP             R11, #0
BNE             loc_35BB0

loc_35A1C
ADD             R0, R4, #2
MOV             R0, R0,LSL#2
BL              sub_2B208
LDR             R3, [SP,#0x54+var_28]
ADD             R11, R0, #4
MOV             R2, R11

loc_35A34
CMP             R3, #0
BNE             loc_35C1C
LDR             R1, [R9]
STR             R3, [R2]
STR             R1, [SP,#0x54+var_4C]
LDRB            R1, [R1,#0x40]
CMP             R1, #0
BEQ             loc_35A70
LDR             R0, [R8]
MOVS            R1, R4
MOVNE           R1, #1
CMP             R0, #0
MOVNE           R1, #0
CMP             R1, #0
LDRNE           R3, [R2,#-4]

loc_35A70
LDR             R0, [R7,#0x10]
STR             R3, [SP,#0x54+var_48]
BL              sub_33A58
LDR             R0, [R7,#0x10]
BL              sub_298E4
LDR             R8, [R6]
MOV             R3, #2
STR             R0, [SP,#0x54+var_38]
STR             R3, [R8,#0x18]
LDR             R3, [SP,#0x54+var_4C]
LDRB            R3, [R3,#0x44]
CMP             R3, #0
BEQ             loc_35ACC
LDR             R0, =aBashXtracefd ; "BASH_XTRACEFD"
BL              sub_2F2F4
SUBS            R2, R0, #0
BEQ             loc_35ACC
BL              sub_2960C
CMP             R0, #0
BEQ             loc_35ACC
MOV             R0, R2  ; nptr
BL              atoi
STR             R0, [R8,#0x18]

loc_35ACC
LDR             R0, [R7,#0x10]
BL              sub_339A4
LDR             R5, [R8,#0xD0]
MOV             R6, R0
LDR             R9, [R7,#8]

loc_35AE0
CMP             R9, #0
BNE             loc_35C2C
LDR             R3, [SP,#0x54+var_4C]
LDRB            R3, [R3,#0x44]
CMP             R3, #0
BEQ             loc_35B50
LDR             R0, [R8,#0x100]
MOV             R1, #1
LDR             R9, [R8,#0x18]
LDR             R10, =(asc_6B39D+1) ; ""
ADD             R0, R0, #4
BL              sub_317CC
LDR             R1, =(aSS_8+3) ; "%s"
MOV             R2, R0
MOV             R0, R9
BL              dprintf
LDR             R9, [SP,#0x54+var_20]

loc_35B24
CMP             R9, #0
BNE             loc_35C70
LDR             R9, [SP,#0x54+var_28]

loc_35B30
LDR             R3, [R8,#0x18]
CMP             R9, #0
STR             R3, [SP,#0x54+var_40]
BNE             loc_35CD8
MOV             R2, #1  ; n
LDR             R1, =(aShellReturnedI+0x13) ; buf
MOV             R0, R3  ; fd
BL              sub_180F4

loc_35B50
CMP             R4, #0
BEQ             loc_36000
LDR             R9, =off_6361C ; "3exec"
MOV             R2, #1
MOV             R8, #0xFFFFFFFF
ADD             R5, R5, #5
STR             R5, [SP,#0x54+var_40]
SUB             R10, R9, #0x20 ; ' '

loc_35B70
MOV             R3, R5
ADD             R1, SP, #0x54+var_18
LDR             R0, [R11]
BL              sub_34F90
LDR             R3, [SP,#0x54+var_18]
CMN             R3, #1
BNE             loc_35D18
MOV             R5, #0
MOV             R6, #0x7F
BL              sub_2A2A4

loc_35B98
LDR             R3, [SP,#0x54+var_4C]
CMP             R8, #1
STRB            R6, [R3]
BNE             loc_35E5C
MOV             R0, R8
BL              sub_29EE0

loc_35BB0
LDR             R3, [SP,#0x54+var_24]
CMP             R5, #0
STR             R3, [SP,#0x54+var_4C]
BEQ             loc_35BEC
LDR             R2, [R11,#8]
MOV             R0, R2
STR             R2, [SP,#0x54+var_48]
BL              sub_5871C
LDR             R2, [SP,#0x54+var_48]
CMP             R2, R0
BEQ             loc_35BEC
LDRB            R2, [R0]
CMP             R2, #0x3D ; '='
MOVEQ           R2, #4
BEQ             loc_35BF0

loc_35BEC
MOV             R2, #3

loc_35BF0
MOV             R1, R10
MOV             R0, R11
BL              sub_32FC4
LDR             R3, [SP,#0x54+var_4C]
LDR             R2, [R3]

loc_35C04
CMP             R2, #0
LDREQ           R11, [R11,#4]
BEQ             loc_35A14
ADD             R4, R4, #1
LDR             R2, [R2]
B               loc_35C04

loc_35C1C
LDR             R1, [R3,#4]
LDR             R3, [R3]
STR             R1, [R2],#4
B               loc_35A34

loc_35C2C
LDR             R10, [SP,#0x54+var_1C]
MOV             R2, #4
ADD             R1, SP, #0x54+var_20
MOV             R0, R9
BL              sub_32FC4
LDR             R3, [R10]
LDR             R0, [R3,#4]
BL              sub_2BBE4
LDR             R3, [R10]
MOV             R1, R5
LDR             R10, [R3,#4]
MOV             R0, R10
BL              sub_29638
CMP             R0, #0
LDR             R9, [R9,#4]
MOVEQ           R5, R10
B               loc_35AE0

loc_35C70
LDR             R2, [R9,#4]
MOV             R1, #0x3D ; '='
MOV             R0, R2
STR             R2, [SP,#0x54+var_40]
BL              strchrnul
LDRB            R3, [R0]
LDR             R2, [SP,#0x54+var_40]
CMP             R3, #0
LDR             R3, [R8,#0x18]
ADDNE           R0, R0, #1
STR             R2, [SP,#0x54+var_30]
STR             R3, [SP,#0x54+var_40]
SUB             R3, R0, R2
STR             R3, [SP,#0x54+var_34]
BL              sub_2D4B4
LDR             R2, [SP,#0x54+var_30]
STR             R0, [SP,#0x54+var_50]
LDR             R3, [SP,#0x54+var_34]
STR             R2, [SP,#0x54+var_54]
MOV             R2, R10
LDR             R1, =aSSS_1 ; "%s%.*s%s"
LDR             R0, [SP,#0x54+var_40]
BL              dprintf
LDR             R10, =(asc_6582A+9) ; " "
LDR             R9, [R9]
B               loc_35B24

loc_35CD8
LDR             R0, [R9,#4]
BL              sub_2C428
CMP             R0, #0
LDR             R0, [R9,#4]
BEQ             loc_35D10
BL              sub_2D250

loc_35CF0
MOV             R3, R0
MOV             R2, R10
LDR             R1, =(aSSS_0+6) ; "%s%s"
LDR             R0, [SP,#0x54+var_40]
BL              dprintf
LDR             R10, =(asc_6582A+9) ; " "
LDR             R9, [R9]
B               loc_35B30

loc_35D10
BL              sub_2D4B4
B               loc_35CF0

loc_35D18
CMP             R3, #2
BNE             loc_35DD8
LDR             R3, [SP,#0x54+var_14]
CMN             R8, #1
LDREQ           R2, [R3] ; byte_67DC2
LDRBEQ          R8, [R2]
ANDEQ           R8, R8, #1
CMP             R3, R9
BEQ             loc_35FE8
CMP             R3, R10
BNE             loc_35FF8
LDR             R5, [SP,#0x54+var_40]
MOV             R3, R11

loc_35D4C
LDR             R2, [R3,#4]
ADD             R1, R3, #4
CMP             R2, #0
BEQ             loc_35FF8
LDRB            R0, [R2]
CMP             R0, #0x2D ; '-'
BNE             loc_35DA4
LDRB            R0, [R2,#1]
ADD             R12, R2, #2
CMP             R0, #0
BEQ             loc_35DA4
CMP             R0, #0x2D ; '-'
BNE             loc_35DB8
LDRB            R2, [R2,#2]
CMP             R2, #0
BNE             loc_35DB8
LDR             R2, [R1,#4]
ADD             R3, R3, #8
CMP             R2, #0
BEQ             loc_35FF8
SUBS            R1, R3, #0
BEQ             loc_35FF8

loc_35DA4
SUB             R3, R1, R11
MOV             R2, #5
SUB             R4, R4, R3,ASR#2
MOV             R11, R1
B               loc_35B70

loc_35DB8
CMP             R0, #0x70 ; 'p'
BNE             loc_35FF8
LDRB            R0, [R12],#1
MOV             R3, R1
LDR             R5, =(string+0x15) ; "/bin:/usr/bin"
CMP             R0, #0
BNE             loc_35DB8
B               loc_35D4C

loc_35DD8
CMP             R6, #0
MOVNE           R5, #0
BNE             loc_35B98

loc_35DE4
LDR             R0, [SP,#0x54+var_18]
CMP             R0, #1
BEQ             loc_35F90
CMP             R0, #2
BEQ             loc_35EEC
LDR             R3, [SP,#0x54+var_44]
TST             R3, #1
BEQ             loc_35E14
LDR             R3, [SP,#0x54+var_4C]
LDRB            R3, [R3,#0xCC]
CMP             R3, #0
BEQ             loc_35ECC

loc_35E14
LDR             R3, [SP,#0x54+var_4C]
LDR             R2, [SP,#0x54+var_4C]
LDR             R3, [R3,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
MOV             R0, #1
BL              sub_2CFB8
MOV             R2, #0
MOV             R1, R7
MOV             R4, R0
BL              sub_2EDE0
CMP             R0, #0
BEQ             loc_35EC8
MOV             R0, R4
BL              sub_2C8C0
MOV             R6, R0
BL              loc_2A270

loc_35E58
MOV             R5, #0

loc_35E5C
LDR             R3, [R7,#0x10]
CMP             R3, #0
BEQ             loc_35E70
MOV             R0, R5
BL              sub_2B138

loc_35E70
LDR             R3, =dword_7DBB4
LDR             R4, [R3]

loc_35E78
LDR             R3, [R4,#0x14]
LDR             R2, [SP,#0x54+var_38]
CMP             R2, R3
BNE             loc_35FD0
LDR             R4, =dword_7D70C

loc_35E8C
LDR             R3, [R4]
LDR             R2, [SP,#0x54+var_3C]
CMP             R2, R3
BNE             loc_35FDC
LDR             R3, [SP,#0x54+var_48]
CMP             R3, #0
BEQ             loc_35EB4
MOV             R1, R3
LDR             R0, =asc_67FCC ; "_"
BL              sub_2AF84

loc_35EB4
ADD             R0, SP, #0x54+var_10
BL              sub_2AA40
MOV             R0, R6
ADD             SP, SP, #0x54 ; 'T'
POP             {R4-R11,PC}

loc_35EC8
BL              sub_2A248

loc_35ECC
MOV             R1, #0x11
LDR             R0, [SP,#0x54+var_20]
BL              sub_2ADC0
LDR             R3, [SP,#0x54+var_14]
MOV             R2, R5
MOV             R1, R11
LDR             R0, [R11]
BL              sub_2EF80

loc_35EEC
MOV             R5, #0

loc_35EF0
CLZ             R3, R4
MOV             R3, R3,LSR#5
CMP             R8, #0
ORRGT           R3, R3, #1
CMP             R3, #0
BEQ             loc_35F30
MOV             R0, #1
BL              sub_34C98
CMP             R4, #1
MOVLE           R3, #0
ANDGT           R3, R5, #1
CMP             R3, #0
BEQ             loc_35F30
MOV             R1, #1
LDR             R0, [SP,#0x54+var_20]
BL              sub_2ADC0

loc_35F30
MOV             R1, #0
MOV             R0, R1
BL              sub_2C558
LDR             R3, [SP,#0x54+var_44]
MOV             R2, R11
MOV             R1, R4
LDR             R0, [SP,#0x54+var_14]
BL              sub_31B70
CMP             R0, #0
BEQ             loc_35F80
LDR             R3, [SP,#0x54+var_4C]
CMP             R8, #1
LDR             R2, [R3,#0x38]
SUB             R3, R2, #1
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVEQ           R3, #0
CMP             R3, #0
BEQ             loc_35FBC
BL              sub_2A248

loc_35F80
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDRB            R6, [R3]
B               loc_35E5C

loc_35F90
BL              sub_34C98
MOV             R1, #0
MOV             R0, R1
BL              sub_2C558
LDR             R3, [SP,#0x54+var_44]
MOV             R2, R11
MOV             R1, R4
LDR             R0, [SP,#0x54+var_14]
BL              sub_34E1C
SUBS            R5, R0, #0
BEQ             loc_35F80

loc_35FBC
LDR             R3, =dword_7DBB0
MOV             R1, #1  ; val
LDR             R3, [R3]
LDR             R0, [R3,#0x24] ; env
BL              longjmp

loc_35FD0
MOV             R0, #0
BL              sub_2B138
B               loc_35E78

loc_35FDC
MOV             R0, #0
BL              sub_34C98
B               loc_35E8C

loc_35FE8
MOV             R5, #1

loc_35FEC
CMP             R6, #0
BNE             loc_35B98
B               loc_35EF0

loc_35FF8
MOV             R5, #0
B               loc_35FEC

loc_36000
CMP             R6, #0
MOVEQ           R8, #0xFFFFFFFF
BEQ             loc_35DE4
LDR             R3, [SP,#0x54+var_4C]
STRB            R6, [R3]
B               loc_35E58
; End of function sub_35964

off_36018 DCD dword_7D6CC
off_3601C DCD dword_7DBB4
off_36020 DCD dword_7DBB0
off_36024 DCD off_63714
off_36028 DCD aBashXtracefd ; "BASH_XTRACEFD"
off_3602C DCD asc_6B39D+1 ; ""
off_36030 DCD aSS_8+3   ; "%s"
off_36034 DCD aShellReturnedI+0x13 ; "\n"
off_36038 DCD off_6361C ; "3exec"
off_3603C DCD aSSS_1    ; "%s%.*s%s"
off_36040 DCD asc_6582A+9 ; " "
off_36044 DCD aSSS_0+6  ; "%s%s"
off_36048 DCD string+0x15 ; "/bin:/usr/bin"
off_3604C DCD dword_7D70C
off_36050 DCD asc_67FCC ; "_"


; Attributes: noreturn

; void __fastcall __noreturn sub_36054(int, unsigned __int8 **)
sub_36054

var_1A4= -0x1A4
var_19C= -0x19C
var_198= -0x198
var_194= -0x194
env= -0x188

PUSH            {R4-R8,LR}
MOV             R0, #0x1EC
SUB             SP, SP, #0x1A8
STR             R1, [SP,#0x1A8+var_1A4]
BL              sub_174DC
LDR             R3, =dword_7DBB0
STR             R0, [R3]
ADD             R3, R0, #0x3C ; '<'
STR             R3, [R0,#0x18]
STR             R3, [R0,#0x1C]
ADD             R3, R0, #0xD0
STR             R3, [R0,#0x1D4]
MOV             R0, #0x20C
BL              sub_174DC
LDR             R3, =dword_7DBB8
STR             R0, [R3]
ADD             R2, R0, #0x10
MOV             R3, R0
STR             R2, [R3],#0x14
STR             R3, [R0,#4]
MOV             R3, #0x1F8
STR             R3, [R0,#0xC]
ADD             R3, R0, #0x20C
STR             R3, [R0,#8]
MOV             R0, #0x160
BL              sub_174DC
LDR             R3, =dword_7DBB4
MOV             R4, R0
STR             R0, [R3]
LDR             R2, =unk_637D0
MOV             R3, R0
ADD             R1, R0, #0x90

loc_360D4
LDR             R0, [R2]
ADD             R3, R3, #0x10
ADD             R2, R2, #0xC
STR             R0, [R3,#0xAC]
LDR             R0, [R2,#-8]
STR             R0, [R3,#0xB0]
LDR             R0, [R2,#-4]
STR             R0, [R3,#0xB4]
CMP             R1, R3
BNE             loc_360D4
ADD             R3, R4, #0x14C
LDR             R1, =aLineno ; "LINENO="
MOV             R0, R3  ; dest
BL              strcpy
STR             R0, [R4,#0x120]
MOV             R0, #0x9C
BL              sub_174DC
LDR             R3, =dword_7D644
STR             R0, [R3]
MOV             R0, #0x7C ; '|'
BL              sub_174DC
LDR             R3, =dword_7D6A4
STR             R0, [R3]
MOV             R0, #0x13
BL              sub_5C3B4
LDR             R3, =dword_7D708
STR             R0, [R3]
MOV             R3, #0
ADD             R0, SP, #0x1A8+env ; env
STR             R3, [SP,#0x1A8+var_19C]
BL              _setjmp
SUBS            R5, R0, #0
BEQ             loc_36360
LDR             R3, =dword_7D6B8
MOV             R4, #0
LDR             R5, =unk_7D64C
STR             R4, [R3]
LDR             R3, =dword_7D710
STR             R4, [R3]
BL              sub_2A454
LDR             R3, =off_7D4D0
LDR             R2, [R3] ; unk_7D64C
STR             R4, [R2,#0x10]
STR             R4, [R2,#0xC]
MOV             R4, R3

loc_36188
LDR             R3, [R4] ; unk_7D64C
CMP             R3, R5
BNE             loc_361F8
LDR             R3, =dword_7DBB4
MOV             R5, #0
LDR             R4, [R3]

loc_361A0
LDR             R0, [R4,#0x14]
CMP             R0, #0
BNE             loc_36200
LDR             R5, =dword_7D70C
MOV             R4, R0

loc_361B4
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_3620C
LDR             R3, =dword_7DBB0
LDR             R4, [SP,#0x1A8+var_19C]
LDR             R3, [R3]
LDR             R2, [R3,#0x38]
CMP             R4, #0
CMPNE           R2, #4
BEQ             loc_361F4
LDRB            R1, [R3,#0x40]
CMP             R1, #0
BEQ             loc_361F4
LDR             R3, [R3,#0xC]
CMP             R3, #0
BEQ             loc_36218

loc_361F4
BL              sub_33FBC

loc_361F8
BL              sub_2A5FC
B               loc_36188

loc_36200
MOV             R0, R5
BL              sub_2B138
B               loc_361A0

loc_3620C
MOV             R0, R4
BL              sub_34C98
B               loc_361B4

loc_36218
CMP             R2, #0
BEQ             loc_36258

loc_36220
ADD             R0, SP, #0x1A8+var_194
BL              sub_2AA40
BL              sub_2A248
CMP             R4, #1
BNE             loc_36268

loc_36234
MOV             R3, #2
LDR             R0, =aHome ; "HOME"
STR             R3, [SP,#0x1A8+var_19C]
BL              sub_2F2F4
CMP             R0, #0
BEQ             loc_36270
LDR             R0, =aHomeProfile ; "$HOME/.profile"
BL              sub_342BC
B               loc_36270

loc_36258
LDR             R3, =stderr
LDR             R0, [R3] ; stream
BL              sub_2AAFC
B               loc_36220

loc_36268
CMP             R4, #2
BNE             loc_36298

loc_36270
MOV             R3, #3
STR             R3, [SP,#0x1A8+var_19C]
LDR             R3, =dword_7DBB0
LDR             R3, [R3]
LDRB            R3, [R3,#0x40]
CMP             R3, #0
BNE             loc_36534

loc_3628C
ADD             R0, SP, #0x1A8+var_194
BL              sub_2AA40
B               loc_362A0

loc_36298
CMP             R4, #3
BNE             loc_36354

loc_362A0
MOV             R3, #4
STR             R3, [SP,#0x1A8+var_19C]
LDR             R3, =dword_7DBB0
LDR             R4, [R3]
LDR             R0, [R4,#0x14]
LDRB            R1, [R4,#0x43]
CMP             R0, #0
BNE             loc_36558

loc_362C0
LDRB            R3, [R4,#0x43]
CMP             R3, #0
BNE             loc_362D8
LDR             R3, [R4,#0x14]
CMP             R3, #0
BNE             loc_361F4

loc_362D8
LDRB            R3, [R4,#0x40]
CMP             R3, #0
BEQ             loc_36354
LDR             R5, =aHistfile ; "HISTFILE"
MOV             R0, R5
BL              sub_2F2F4
CMP             R0, #0
BNE             loc_36348
LDR             R0, =aHome ; "HOME"
BL              sub_2F2F4
CMP             R0, #0
BEQ             loc_36354
LDR             R3, [R4,#0x28]
ADD             R3, R3, #1
STR             R3, [R4,#0x28]
LDR             R1, =aAshHistory ; ".ash_history"
BL              sub_16998
MOV             R1, R0
MOV             R4, R0
MOV             R0, R5
BL              sub_2AF84
MOV             R0, R4  ; ptr
BL              free
BL              loc_2A270
MOV             R0, R5
BL              sub_2F2F4
CMP             R0, #0
BEQ             loc_36354

loc_36348
LDR             R3, =dword_7D708
LDR             R3, [R3]
STR             R0, [R3,#0x1C]

loc_36354
MOV             R0, #1
BL              sub_34044
B               loc_361F4

loc_36360
LDR             R3, =dword_7DBB0
LDR             R4, [R3]
ADD             R3, SP, #0x1A8+env
STR             R3, [R4,#0x24]
ADD             R6, R4, #0x3D ; '='
BL              getpid
STR             R0, [R4,#8]
MOV             R7, R6
BL              sub_2F3A8
ADD             R0, SP, #0x1A8+var_194
BL              sub_2B2DC
LDR             R3, [SP,#0x1A8+var_1A4]
ADD             R2, R4, #0x4C ; 'L'
MOV             R1, #2
LDR             R3, [R3]
CMP             R3, #0
LDRBNE          R5, [R3]
STR             R3, [R4,#0x20]
LDR             R3, [SP,#0x1A8+var_1A4]
SUBNE           R5, R5, #0x2D ; '-'
CLZNE           R5, R5
MOVNE           R5, R5,LSR#5
ADD             R3, R3, #4
STR             R5, [SP,#0x1A8+var_198]

loc_363C0
STRB            R1, [R7],#1
CMP             R2, R7
BNE             loc_363C0
LDR             R5, =dword_7D640
ADD             R1, SP, #0x1A8+var_198
MOV             R0, #1
STR             R3, [R5]
BL              sub_2BEEC
CMP             R0, #0
BEQ             loc_363F0
MOV             R0, #1
BL              sub_29EE0

loc_363F0
LDR             R5, [R5]
LDR             R8, [R4,#0x14]
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_36420
CMP             R8, #0
BEQ             loc_36418
LDR             R1, =aC_1 ; "-c"
LDR             R0, =aSRequiresAnArg ; "%s requires an argument"
BL              sub_2ABFC

loc_36418
MOV             R3, #1
STRB            R3, [R4,#0x43]

loc_36420
LDR             R3, [R4,#0x40]
LDR             R2, =0x1000002
BIC             R3, R3, #0xFF0000
BIC             R3, R3, #0xFF00
CMP             R3, R2
BNE             loc_3645C
MOV             R0, #0  ; fd
BL              isatty
CMP             R0, #0
BEQ             loc_3645C
MOV             R0, #1  ; fd
BL              isatty
CMP             R0, #0
MOVNE           R3, #1
STRBNE          R3, [R4,#0x40]

loc_3645C
LDRB            R3, [R4,#0x41]
CMP             R3, #2
LDRBEQ          R3, [R4,#0x40]
STRBEQ          R3, [R4,#0x41]
MOV             R3, #0

loc_36470
LDRB            R2, [R6],#1
CMP             R2, #2
STRBEQ          R3, [R6,#-1]
CMP             R6, R7
BNE             loc_36470
CMP             R8, #0
LDR             R0, [R5]
BEQ             loc_364F0
STR             R0, [R4,#0x14]
ADD             R3, R5, #4
LDR             R2, [R5,#4]
CMP             R2, #0
BNE             loc_3650C

loc_364A4
LDR             R2, =dword_7DBB4
MOV             R4, #1
MOV             R5, #0xFFFFFFFF
LDR             R2, [R2]
STR             R3, [R2,#0x10]
SUB             R3, R3, #4
STRD            R4, R5, [R2,#4]

loc_364C0
LDR             R1, [R3,#4]!
CMP             R1, #0
BNE             loc_36524
BL              sub_2BB6C
LDR             R3, [SP,#0x1A8+var_198]
CMP             R3, #0
BEQ             loc_36270
MOV             R3, #1
LDR             R0, =aEtcProfile ; "/etc/profile"
STR             R3, [SP,#0x1A8+var_19C]
BL              sub_342BC
B               loc_36234

loc_364F0
LDRB            R3, [R4,#0x43]
CMP             R3, #0
MOVNE           R3, R5
BNE             loc_364A4
MOV             R1, R8
BL              sub_2B338
MOV             R3, R5

loc_3650C
LDR             R2, [R3]
ADD             R3, R3, #4
LDR             R1, =dword_7D6A8
STR             R2, [R4,#0x20]
STR             R2, [R1]
B               loc_364A4

loc_36524
LDR             R1, [R2]
ADD             R1, R1, #1
STR             R1, [R2]
B               loc_364C0

loc_36534
LDR             R0, =aEnv_0 ; "ENV"
BL              sub_2F2F4
SUBS            R3, R0, #0
BEQ             loc_3628C
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3628C
BL              sub_342BC
B               loc_3628C

loc_36558
CLZ             R1, R1
MOV             R1, R1,LSR#5
BL              sub_31A54
B               loc_362C0
; End of function sub_36054

off_36568 DCD dword_7DBB0
off_3656C DCD dword_7DBB8
off_36570 DCD dword_7DBB4
off_36574 DCD unk_637D0
off_36578 DCD aLineno   ; "LINENO="
off_3657C DCD dword_7D644
off_36580 DCD dword_7D6A4
off_36584 DCD dword_7D708
off_36588 DCD dword_7D6B8
off_3658C DCD unk_7D64C
off_36590 DCD dword_7D710
off_36594 DCD off_7D4D0
off_36598 DCD dword_7D70C
off_3659C DCD aHome     ; "HOME"
off_365A0 DCD aHomeProfile ; "$HOME/.profile"
off_365A4 DCD stderr
off_365A8 DCD aHistfile ; "HISTFILE"
off_365AC DCD aAshHistory ; ".ash_history"
off_365B0 DCD dword_7D640
off_365B4 DCD aC_1      ; "-c"
off_365B8 DCD aSRequiresAnArg ; "%s requires an argument"
dword_365BC DCD 0x1000002
off_365C0 DCD aEtcProfile ; "/etc/profile"
off_365C4 DCD dword_7D6A8
off_365C8 DCD aEnv_0    ; "ENV"



; const char *__fastcall sub_365CC(int, int, int, int *)
sub_365CC

var_34= -0x34
var_28= -0x28
s= -0x20

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x34
LDR             R8, [R3]
CMP             R8, R2
BNE             loc_365E8

loc_365E0
LDR             R10, =aArithmeticSynt ; "arithmetic syntax error"
B               loc_3671C

loc_365E8
SUB             R7, R8, #0x18
MOV             R6, R1
MOV             R1, R7
MOV             R9, R3
MOV             R11, R2
STR             R0, [SP,#0x34+var_28]
BL              sub_36DF4
SUBS            R10, R0, #0
BNE             loc_3671C
CMP             R6, #0x11
LDRD            R4, R5, [R8,#-0x18]
BNE             loc_36690
RSBS            R4, R4, #0
RSC             R5, R5, #0

loc_36620
AND             R3, R6, #0x1F
CMP             R3, #3
MOVEQ           R3, #2
SUB             R2, R3, #0x12
CMP             R3, #2
CMPNE           R2, #1
BHI             loc_36680
LDR             R3, [R7,#0x14]
CMP             R3, #0
BEQ             loc_365E0
MOV             R2, R4
MOV             R3, R5
LDR             R1, =aLld ; "%lld"
ADD             R0, SP, #0x34+s ; s
BL              sprintf
LDR             R3, [SP,#0x34+var_28]
ADD             R1, SP, #0x34+s
LDR             R0, [R7,#0x14]
LDR             R3, [R3,#8]
BLX             R3
CMP             R6, #0x13
BNE             loc_369FC
SUBS            R4, R4, #1
SBC             R5, R5, #0

loc_36680
MOV             R3, #0
STRD            R4, R5, [R7]
STR             R3, [R7,#0x14]
B               loc_3671C

loc_36690
CMP             R6, #0x30 ; '0'
BNE             loc_366B0
ORRS            R3, R4, R5
MOVEQ           R4, #1
MOVNE           R4, #0

loc_366A4
UXTB            R4, R4
MOV             R5, #0
B               loc_36620

loc_366B0
CMP             R6, #0x10
MVNEQ           R2, R4
MVNEQ           R3, R5
BEQ             loc_3698C
SUB             R2, R6, #0x12
CMP             R2, #1
BHI             loc_366D8
ADDS            R4, R4, #1
ADC             R5, R5, #0
B               loc_36620

loc_366D8
SUB             R2, R6, #0x32 ; '2'
CMP             R2, #1
BHI             loc_366F0
SUBS            R4, R4, #1
SBC             R5, R5, #0
B               loc_36620

loc_366F0
CMP             R6, #0x31 ; '1'
BEQ             loc_36620
CMP             R11, R7
BEQ             loc_365E0
CMP             R6, #4
STR             R7, [R9]
LDRB            R2, [R8,#-8]
BNE             loc_36728
CMP             R2, #0
BNE             loc_36A10

loc_36718
LDR             R10, =aMalformedOpera ; "malformed ?: operator"

loc_3671C
MOV             R0, R10
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R11,PC}

loc_36728
CMP             R2, #0
BNE             loc_36718
CMP             R6, #2
SUB             R7, R8, #0x30 ; '0'
BEQ             loc_36754

loc_3673C
MOV             R1, R7
LDR             R0, [SP,#0x34+var_28]
BL              sub_36DF4
CMP             R0, #0
MOVNE           R10, R0
BNE             loc_3671C

loc_36754
CMP             R6, #4
LDRD            R0, R1, [R8,#-0x30]
BNE             loc_3676C
ORRS            R3, R0, R1
LDRDEQ          R4, R5, [R8,#-0x10]
B               loc_36620

loc_3676C
CMP             R6, #0x24 ; '$'
BNE             loc_36790
CMP             R11, R7
BEQ             loc_36718
STRB            R6, [R8,#-0x20]
STRD            R4, R5, [R8,#-0x28]

loc_36784
MOV             R4, R0
MOV             R5, R1
B               loc_36620

loc_36790
CMP             R6, #0x42 ; 'B'
CMPNE           R6, #7
ORREQ           R2, R4, R0
ORREQ           R3, R5, R1
BEQ             loc_3698C
CMP             R6, #5
BNE             loc_367C4
ORR             R2, R4, R0
ORR             R3, R5, R1
ORRS            R3, R2, R3
MOVNE           R4, #1

loc_367BC
MOVEQ           R4, #0
B               loc_366A4

loc_367C4
CMP             R6, #0x22 ; '"'
CMPNE           R6, #9
ANDEQ           R2, R4, R0
ANDEQ           R3, R5, R1
BEQ             loc_3698C
CMP             R6, #0x62 ; 'b'
CMPNE           R6, #8
EOREQ           R2, R4, R0
EOREQ           R3, R5, R1
BEQ             loc_3698C
CMP             R6, #6
BNE             loc_3680C
ORRS            R3, R0, R1
MOVNE           R3, #1
MOVEQ           R3, #0
ORRS            R2, R4, R5
MOVNE           R4, R3
B               loc_367BC

loc_3680C
CMP             R6, #0xA
BNE             loc_36828
CMP             R5, R1
CMPEQ           R4, R0
MOVEQ           R4, #1
MOVNE           R4, #0
B               loc_366A4

loc_36828
CMP             R6, #0x2A ; '*'
BNE             loc_36844
CMP             R5, R1
CMPEQ           R4, R0
MOVNE           R4, #1
MOVEQ           R4, #0
B               loc_366A4

loc_36844
CMP             R6, #0x4B ; 'K'
BNE             loc_36860
CMP             R0, R4
SBCS            R3, R1, R5

loc_36854
MOVGE           R4, #1
MOVLT           R4, #0
B               loc_366A4

loc_36860
CMP             R6, #0xE2
CMPNE           R6, #0x2C ; ','
BNE             loc_3688C
MOV             R3, R4
RSB             R12, R4, #0x20 ; ' '
SUBS            R2, R4, #0x20 ; ' '
MOV             R4, R0,LSR R4
MOV             R5, R1,ASR R3
ORR             R4, R4, R1,LSL R12
ORRPL           R4, R4, R1,ASR R2
B               loc_36620

loc_3688C
CMP             R6, #0xC2
CMPNE           R6, #0xC
BNE             loc_368B4
MOV             R5, R1,LSL R4
SUB             R12, R4, #0x20 ; ' '
RSB             R2, R4, #0x20 ; ' '
MOV             R4, R0,LSL R4
ORR             R5, R5, R0,LSL R12
ORR             R5, R5, R0,LSR R2
B               loc_36620

loc_368B4
CMP             R6, #0x2B ; '+'
BNE             loc_368D0
CMP             R4, R0
SBCS            R3, R5, R1

loc_368C4
MOVLT           R4, #1
MOVGE           R4, #0
B               loc_366A4

loc_368D0
CMP             R6, #0xB
BNE             loc_368E4
CMP             R0, R4
SBCS            R3, R1, R5
B               loc_368C4

loc_368E4
CMP             R6, #0x6B ; 'k'
BNE             loc_368F8
CMP             R4, R0
SBCS            R3, R5, R1
B               loc_36854

loc_368F8
CMP             R6, #3
CMPNE           R6, #0xE
MULEQ           R3, R4, R1
MLAEQ           R3, R0, R5, R3
UMULLEQ         R4, R5, R4, R0
ADDEQ           R5, R3, R5
BEQ             loc_36620
CMP             R6, #0x82
CMPNE           R6, #0xD
BNE             loc_3692C
ADDS            R4, R4, R0
ADC             R5, R5, R1
B               loc_36620

loc_3692C
CMP             R6, #0xA2
CMPNE           R6, #0x2D ; '-'
BNE             loc_36944
SUBS            R4, R0, R4
SBC             R5, R1, R5
B               loc_36620

loc_36944
SUB             R3, R6, #1
CMP             R3, #1
BLS             loc_36620
CMP             R6, #0x2F ; '/'
BNE             loc_369AC
CMP             R4, #0
SBCS            R3, R5, #0
LDRLT           R10, =aExponentLessTh ; "exponent less than 0"
BLT             loc_3671C
MOV             R2, #1
MOV             R3, #0
MOV             R8, #0xFFFFFFFF
MOV             R9, #0xFFFFFFFF

loc_36978
SUBS            R4, R4, #1
SBC             R5, R5, #0
CMP             R5, R9
CMPEQ           R4, R8
BNE             loc_36998

loc_3698C
MOV             R4, R2
MOV             R5, R3
B               loc_36620

loc_36998
MUL             R12, R2, R1
MLA             R12, R0, R3, R12
UMULL           R2, R3, R2, R0
ADD             R3, R12, R3
B               loc_36978

loc_369AC
ORRS            R3, R4, R5
LDREQ           R10, =aDivideByZero ; "divide by zero"
BEQ             loc_3671C
CMP             R6, #0x23 ; '#'
CMPNE           R6, #0x2E ; '.'
MOVEQ           R12, #1
MOVNE           R12, #0
BEQ             loc_36A18
CMP             R6, #0x43 ; 'C'
CMPNE           R6, #0x4E ; 'N'
BNE             loc_36784
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R5, R3
CMPEQ           R4, R2
BEQ             loc_36A2C

loc_369EC
MOV             R2, R4
MOV             R3, R5
BLX             sub_62BA4
B               loc_3698C

loc_369FC
CMP             R6, #0x33 ; '3'
BNE             loc_36680
ADDS            R4, R4, #1
ADC             R5, R5, #0
B               loc_36680

loc_36A10
SUB             R7, R8, #0x30 ; '0'
B               loc_3673C

loc_36A18
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R5, R3
CMPEQ           R4, R2
BNE             loc_36A5C

loc_36A2C
ADDS            R3, R0, R0
STR             R3, [SP,#0x34+var_34]
ADC             R3, R1, R1
STR             R3, [SP,#0x34+var_34+4]
LDRD            R2, R3, [SP,#0x34+var_34]
ORRS            R3, R2, R3
MOVEQ           R4, #1
MOVEQ           R5, #0
MOVNE           R4, #0xFFFFFFFF
MOVNE           R5, #0xFFFFFFFF
CMP             R12, #0
BEQ             loc_369EC

loc_36A5C
MOV             R2, R4
MOV             R3, R5
BLX             sub_62BA4
B               loc_36784
; End of function sub_365CC

off_36A6C DCD aArithmeticSynt ; "arithmetic syntax error"
off_36A70 DCD aLld      ; "%lld"
off_36A74 DCD aMalformedOpera ; "malformed ?: operator"
off_36A78 DCD aExponentLessTh ; "exponent less than 0"
off_36A7C DCD aDivideByZero ; "divide by zero"


; Attributes: bp-based frame fpd=0xFFFFFFE0

; unsigned __int64 __fastcall sub_36A80(int *, unsigned __int8 *)
sub_36A80

var_1C= -0x1C
var_18= -0x18
var_14= -0x14
endptr= -0x10
var_8= -8
var_4= -4

PUSH            {R4-R11,LR}
MOV             R10, R0
ADD             R11, SP, #0x20
MOV             R0, R1
SUB             SP, SP, #0x1C
STR             R1, [R11,#-0x20+endptr]
MOV             R5, #0
BL              sub_60E74
STR             R0, [R11,#-0x20+var_1C]
STR             R0, [R11,#-0x20+endptr]
BL              strlen
ADD             R3, R0, #2
ADD             R0, R0, #0x10
MOV             R2, R3,LSR#1
MOV             R3, #0x18
BIC             R0, R0, #7
LDR             R9, =asc_687D9 ; "<<="
MUL             R3, R3, R2
ADD             R3, R3, #8
SUB             SP, SP, R3
SUB             R3, R11, #-(-0x20+var_4)
MOV             R7, SP
SUB             SP, SP, R0
STR             R7, [R3,#-4]!
STR             R3, [R11,#-0x20+var_18]
MOV             R3, SP
ADD             R8, R3, #1
STR             SP, [R11,#-0x20+var_14]
STRB            R5, [R3,#0x1C+var_1C]

loc_36AF4
LDR             R0, [R11,#-0x20+endptr]
BL              sub_60E74
STR             R0, [R11,#-0x20+endptr]
LDRB            R6, [R0]
CMP             R6, #0
BNE             loc_36B78
LDR             R3, [R11,#-0x20+var_1C]
CMP             R3, R0
BNE             loc_36B38
MOV             R0, R6
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R7]

loc_36B28
STR             R0, [R10]
LDRD            R0, R1, [R7]
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_36B38
LDR             R3, =unk_68860
CMP             R0, R3
SUBNE           R3, R3, #1
STRNE           R3, [R11,#-0x20+endptr]
BNE             loc_36AF4
LDR             R2, [R11,#-0x20+var_8]
ADD             R3, R7, #0x18
CMP             R2, R3
BNE             loc_36D2C
LDR             R0, [R7,#0x14]
CMP             R0, #0
BEQ             loc_36B28
MOV             R1, R7
MOV             R0, R10
BL              sub_36DF4
B               loc_36B28

loc_36B78
BL              sub_5871C
LDR             R1, [R11,#-0x20+endptr]
MOV             R4, R0
CMP             R1, R0
BEQ             loc_36BD0
SUB             R2, R0, R1
ADD             R3, R2, #0xF
ADD             R2, R2, #1
BIC             R3, R3, #7
SUB             SP, SP, R3
LDR             R3, [R11,#-0x20+var_8]
MOV             R0, SP
STR             R0, [R3,#0x14]
BL              sub_60B34
STR             R4, [R11,#-0x20+endptr]

loc_36BB4
LDR             R3, [R11,#-0x20+var_8]
MOV             R2, #0
MOV             R5, #0x14
STRB            R2, [R3,#0x10]
ADD             R3, R3, #0x18
STR             R3, [R11,#-0x20+var_8]
B               loc_36AF4

loc_36BD0
SUB             R6, R6, #0x30 ; '0'
CMP             R6, #9
BHI             loc_36C1C
LDR             R3, [R11,#-0x20+var_8]
MOV             R2, #0  ; base
SUB             R1, R11, #-(-0x20+endptr) ; endptr
STR             R2, [R3,#0x14]
LDR             R3, =dword_7DB94
LDR             R4, [R3]
STR             R2, [R4]
BL              strtoull
LDR             R2, [R4]
LDR             R3, [R11,#-0x20+var_8]
CMP             R2, #0
STRD            R0, R1, [R3]
MOVNE           R0, #0
MOVNE           R1, #0
STRDNE          R0, R1, [R3]
B               loc_36BB4

loc_36C1C
CMP             R5, #0x14
BNE             loc_36CC8
LDR             R3, [R11,#-0x20+var_8]
LDR             R3, [R3,#-4]
CMP             R3, #0
BNE             loc_36CC8
LDRB            R2, [R1]
SUB             R3, R2, #0x2B ; '+'
TST             R3, #0xFD
BNE             loc_36CC8
LDRB            R3, [R1,#1]
CMP             R3, R2
BNE             loc_36CC8
CMP             R3, #0x2B ; '+'
ADD             R1, R1, #1
MOVNE           R4, #0x2D ; '-'
MOVEQ           R4, #0xD
STR             R1, [R11,#-0x20+endptr]

loc_36C64
AND             R3, R5, #0xDF
CMP             R3, #0x13
CMPNE           R5, #0x14
MOVEQ           R5, #0x14
BEQ             loc_36C90
CMP             R4, #0x13
MOVEQ           R4, #0x12
BEQ             loc_36C90
BHI             loc_36D34
CMP             R4, #0xD
MOVEQ           R4, #0x31 ; '1'

loc_36C90
AND             R6, R4, #0x1F
SUB             R3, R6, #1
CMP             R6, #0x14
CMPNE           R3, #0xE
BHI             loc_36DCC
CMP             R5, #0x14
BNE             loc_36D2C

loc_36CAC
LDR             R3, [R11,#-0x20+var_14]
MOV             R2, R8
CMP             R8, R3
BNE             loc_36D4C
CMP             R4, #0x34 ; '4'
BEQ             loc_36D2C
B               loc_36DBC

loc_36CC8
MOV             R3, R9

loc_36CCC
MOV             R2, R1

loc_36CD0
MOV             R0, R3
MOV             LR, R2
LDRB            R12, [R0],#1
CMP             R12, #0
BNE             loc_36CF8
STR             R2, [R11,#-0x20+endptr]
LDRB            R4, [R3,#1]
B               loc_36C64

loc_36CF0
MOV             R3, R0
B               loc_36CD0

loc_36CF8
LDRB            LR, [LR]
ADD             R2, R2, #1
CMP             LR, R12
BEQ             loc_36CF0

loc_36D08
MOV             R2, R3
ADD             R3, R3, #1
LDRB            R0, [R2]
CMP             R0, #0
BNE             loc_36D08
ADD             R3, R2, #2
LDRB            R2, [R2,#2]
CMP             R2, #0
BNE             loc_36CCC

loc_36D2C
LDR             R0, =aArithmeticSynt ; "arithmetic syntax error"
B               loc_36D78

loc_36D34
CMP             R4, #0x2D ; '-'
MOVEQ           R4, #0x11
BEQ             loc_36C90
CMP             R4, #0x33 ; '3'
MOVEQ           R4, #0x32 ; '2'
B               loc_36C90

loc_36D4C
CMP             R4, #0x34 ; '4'
LDRB            R1, [R8,#-1]!
BNE             loc_36D88
CMP             R1, #0
BEQ             loc_36AF4

loc_36D60
LDR             R3, [R11,#-0x20+var_18]
MOV             R2, R7
MOV             R0, R10
BL              sub_365CC
CMP             R0, #0
BEQ             loc_36CAC

loc_36D78
MOV             R2, #0xFFFFFFFF
MOV             R3, #0xFFFFFFFF
STRD            R2, R3, [R7]
B               loc_36B28

loc_36D88
CMP             R6, #3
AND             R3, R1, #0x1F
BEQ             loc_36DD4
CMP             R3, #3
MOVEQ           R3, #2

loc_36D9C
CMP             R3, R6
BCC             loc_36DBC
BNE             loc_36D60

loc_36DA8
SUB             R3, R6, #2
AND             R3, R3, #0xFD
CMP             R3, #0
CMPNE           R6, #0xF
BNE             loc_36D60

loc_36DBC
ADD             R8, R2, #1
STRB            R4, [R2]
MOV             R5, R4
B               loc_36AF4

loc_36DCC
MOV             R2, R8
B               loc_36DBC

loc_36DD4
CMP             R3, #3
MOV             R6, #2
BEQ             loc_36DA8
B               loc_36D9C
; End of function sub_36A80

off_36DE4 DCD asc_687D9 ; "<<="
off_36DE8 DCD unk_68860
off_36DEC DCD dword_7DB94
off_36DF0 DCD aArithmeticSynt ; "arithmetic syntax error"



; const char *__fastcall sub_36DF4(int *, int, int)
sub_36DF4

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R0-R2,R4-R9,LR}
LDR             R4, [R1,#0x14]
CMP             R4, #0
BEQ             loc_36E84
MOV             R5, R0
LDR             R3, [R0,#4]
MOV             R0, R4
MOV             R6, R1
BLX             R3
SUBS            R4, R0, #0
LDRNE           R8, [R5,#0xC]
LDRNE           R9, [R6,#0x14]
MOVNE           R7, R8
BNE             loc_36E54
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R6]
B               loc_36E84

loc_36E3C               ; s2
MOV             R1, R9
LDR             R0, [R7,#4] ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_36E90
LDR             R7, [R7]

loc_36E54
CMP             R7, #0
BNE             loc_36E3C
ADD             R3, SP, #0xC+var_4
MOV             R1, R4
STR             R8, [R3,#-8]!
MOV             R0, R5
STR             R3, [R5,#0xC]
STR             R9, [SP,#0xC+var_8]
BL              sub_36A80
LDR             R4, [R5]
STRD            R0, R1, [R6]
STR             R8, [R5,#0xC]

loc_36E84
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_36E90
LDR             R4, =aExpressionRecu ; "expression recursion loop detected"
B               loc_36E84
; End of function sub_36DF4

off_36E98 DCD aExpressionRecu ; "expression recursion loop detected"



; unsigned __int64 __fastcall sub_36E9C(int *, unsigned __int8 *)
sub_36E9C
MOV             R2, #0
STR             R2, [R0]
STR             R2, [R0,#0xC]
B               sub_36A80
; End of function sub_36E9C




; int __fastcall sub_36EAC(__pid_t *)
sub_36EAC
LDR             R3, [R0]
PUSH            {R4,LR}
MOV             R4, R0
CMP             R3, #0
BNE             loc_36ED8
BL              getpid
STR             R0, [R4,#8]
STR             R0, [R4]
BL              sub_187B0
STR             R0, [R4,#0xC]
STR             R0, [R4,#4]

loc_36ED8
LDR             R3, [R4]
LDR             R1, [R4,#4]
LDR             R0, =0x19660D
LDR             R12, =0x3C6EF35F
CMP             R3, #0
LDR             R2, [R4,#0xC]
MLA             R12, R0, R1, R12
MOV             R1, R3,LSL#1
LDR             R3, [R4,#8]
EORLT           R1, R1, #0x8000000B
STR             R12, [R4,#4]
STR             R1, [R4]

loc_36F08
EOR             R3, R3, R3,LSL#2
EOR             LR, R2, R2,LSR#3
EOR             LR, LR, R3
MOV             R3, R3,LSR#7
CMP             LR, R3
EOR             R0, LR, R3
BEQ             loc_36F44
STR             R2, [R4,#8]
STR             R0, [R4,#0xC]

loc_36F2C
SUB             R1, R1, R12
ADD             R0, R0, R1
UBFX            R0, R0, #0, #0xF
POP             {R4,PC}

loc_36F3C
MOV             R2, R0
B               loc_36F08

loc_36F44
CMP             R2, #2
MOV             R3, R2
BLS             loc_36F3C
STR             R0, [R4,#0xC]
MOV             R0, #0
STR             R2, [R4,#8]
B               loc_36F2C
; End of function sub_36EAC

dword_36F60 DCD 0x19660D
dword_36F64 DCD 0x3C6EF35F



; int __fastcall sub_36F68(char, unsigned __int64 *, _BYTE *)
sub_36F68
TST             R0, #1
PUSH            {R4,R5}
LDRD            R4, R5, [R1,#8]
LDRDEQ          R4, R5, [R1]
MOV             R1, #0xFFFFFFFF
MOV             R0, #0xFFFFFFFF
CMP             R5, R1
CMPEQ           R4, R0
BNE             loc_36F98
LDR             R0, =aUnlimited ; "unlimited"
POP             {R4,R5}
B               puts

loc_36F98
LDRB            R3, [R2]
RSB             R0, R3, #0x20 ; ' '
SUB             R1, R3, #0x20 ; ' '
MOV             R2, R4,LSR R3
MOV             R3, R5,LSR R3
ORR             R2, R2, R5,LSL R0
LDR             R0, =(aULlu+3) ; "%llu\n"
ORR             R2, R2, R5,LSR R1
POP             {R4,R5}
B               printf
; End of function sub_36F68

off_36FC0 DCD aUnlimited ; "unlimited"
off_36FC4 DCD aULlu+3   ; "%llu\n"



; unsigned __int8 *__fastcall sub_36FC8(unsigned __int8 *result, int)
sub_36FC8
CMP             R0, #0
BXEQ            LR
LDRB            R2, [R0]
ORR             R3, R2, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R2, #0x5F ; '_'
CMPNE           R3, #0x19
BHI             loc_3701C

loc_36FE8
LDRB            R3, [R0,#1]!
SUB             R2, R3, #0x30 ; '0'
CMP             R2, #9
BLS             loc_36FE8
ORR             R2, R3, #0x20 ; ' '
SUB             R2, R2, #0x61 ; 'a'
CMP             R3, #0x5F ; '_'
CMPNE           R2, #0x19
BLS             loc_36FE8
SUB             R0, R3, R1
CLZ             R0, R0
MOV             R0, R0,LSR#5
BX              LR

loc_3701C
MOV             R0, #0
BX              LR
; End of function sub_36FC8




; const char *__fastcall sub_37024(__int64, const char *, char, const char *, int, const char *, const char *, unsigned __int8 *)
sub_37024

var_9C= -0x9C
var_98= -0x98
var_94= -0x94
var_90= -0x90
var_8C= -0x8C
var_88= -0x88
fd= -0x84
var_80= -0x80
termios_p= -0x7C
var_40= -0x40
arg_0=  0x24
arg_4=  0x28
arg_8=  0x2C
arg_C=  0x30
arg_10=  0x34

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x9C
STR             R3, [SP,#0x9C+var_94]
MOV             R6, R1
MOV             R8, R2
SUB             R11, R1, #4
LDR             R3, =dword_7DB94
LDR             R10, [SP,#0x9C+arg_0]
LDR             R5, [SP,#0x9C+arg_4]
LDR             R9, [SP,#0x9C+arg_C]
LDR             R7, [R3]
MOV             R3, #0
STR             R0, [SP,#0x9C+var_90]
STR             R3, [R7]

loc_3705C
LDR             R4, [R11,#4]!
CMP             R4, #0
BNE             loc_372A8
CMP             R10, #0
BEQ             loc_372D8
MOV             R2, #0xA
MOV             R1, R4
MOV             R0, R10
BL              sub_18990
SUBS            R3, R0, #0
STR             R3, [SP,#0x9C+var_9C]
BLT             loc_37574
LDR             R3, [R7]
CMP             R3, #0
BNE             loc_37574

loc_37098
LDR             R3, [SP,#0x9C+arg_8]
CMP             R3, #0
BEQ             loc_372E0
MOV             R0, R3
MOV             R2, #0xA
MOV             R1, #0
BL              sub_18990
LDR             R3, [R7]
CMP             R3, #0
LDRNE           R5, =aInvalidTimeout ; "invalid timeout"
BNE             loc_372CC
LDR             R3, =0x1FFFFF
CMP             R0, R3
MOVCS           R0, R3
MOV             R3, #0x3E8
MUL             R3, R3, R0

loc_370D8
MOV             R1, #0
STR             R3, [SP,#0x9C+var_98]
CMP             R9, R1
STR             R1, [SP,#0x9C+fd]
BNE             loc_372E8

loc_370EC
LDR             R3, [SP,#0x9C+var_98]
LDR             R2, [SP,#0x9C+arg_8]
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVEQ           R3, #0
CMP             R3, #0
BNE             loc_37314
CMP             R5, #0
BEQ             loc_37138
LDR             R0, [SP,#0x9C+fd] ; fd
BL              isatty
CMP             R0, #0
BEQ             loc_37138
LDR             R3, =stderr
MOV             R0, R5
LDR             R1, [R3]
BL              fputs_unlocked
BL              sub_177D8

loc_37138
LDR             R3, =asc_6886A ; " \t\n"
CMP             R8, #0
MOVEQ           R8, R3
LDR             R3, [SP,#0x9C+var_94]
AND             R5, R3, #1
LDR             R3, [SP,#0x9C+var_9C]
CMP             R3, #0
BNE             loc_37160
CMP             R5, #0
BEQ             loc_371DC

loc_37160               ; termios_p
ADD             R1, SP, #0x9C+termios_p
LDR             R0, [SP,#0x9C+fd] ; fd
BL              tcgetattr
ADD             LR, SP, #0x9C+termios_p
ADD             R12, SP, #0x9C+var_40
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDR             R3, [SP,#0x9C+var_9C]
LDM             LR, {R0-R2}
CMP             R3, #0
LDRNE           R3, [SP,#0x9C+termios_p.c_lflag]
STM             R12, {R0-R2}
ADD             R2, SP, #0x9C+termios_p ; termios_p
BICNE           R3, R3, #2
MOV             R1, #0  ; optional_actions
STRNE           R3, [SP,#0x9C+termios_p.c_lflag]
MOVNE           R3, #0x100
STRHNE          R3, [SP,#0x9C+termios_p.c_cc+5]
CMP             R5, #0
LDRNE           R3, [SP,#0x9C+termios_p.c_lflag]
LDR             R0, [SP,#0x9C+fd] ; fd
BICNE           R3, R3, #0x68 ; 'h'
STRNE           R3, [SP,#0x9C+termios_p.c_lflag]
LDR             R3, [SP,#0x9C+var_94]
ORR             R3, R3, #1
STR             R3, [SP,#0x9C+var_94]
BL              tcsetattr

loc_371DC
LDR             R3, [SP,#0x9C+arg_8]
CMP             R3, #0
BEQ             loc_371F8
BL              sub_187F0
LDR             R3, [SP,#0x9C+var_98]
ADD             R3, R3, R0
STR             R3, [SP,#0x9C+var_98]

loc_371F8
LDR             R3, [SP,#0x9C+arg_10]
MOV             R9, #0
MOV             R10, #1
MOV             R11, R9
CMP             R3, #0
LDRBNE          R3, [R3]
MOVEQ           R3, #0xA
STR             R3, [SP,#0x9C+var_8C]

loc_37218
TST             R11, #0xFF
BNE             loc_37234
ADD             R1, R11, #0x100
MOV             R0, R4
ADD             R1, R1, #1
BL              sub_174B4
MOV             R4, R0

loc_37234
LDR             R3, [SP,#0x9C+arg_8]
CMP             R3, #0
BEQ             loc_37338
BL              sub_187F0
LDR             R3, [SP,#0x9C+var_98]
SUB             R2, R3, R0 ; timeout
CMP             R2, #0
BLE             loc_37568

loc_37254
MOV             R3, #0
MOV             R5, #1
STR             R3, [R7]
MOV             R1, R5  ; nfds
ADD             R0, SP, #0x9C+fd ; fds
STRH            R5, [SP,#0x9C+var_80]
BL              poll
CMP             R0, #0
BGT             loc_37340
LDR             R9, [R7]

loc_3727C               ; ptr
MOV             R0, R4
BL              free
LDR             R3, [SP,#0x9C+var_94]
TST             R3, #1
BEQ             loc_372A0
ADD             R2, SP, #0x9C+var_40 ; termios_p
MOV             R1, #0  ; optional_actions
LDR             R0, [SP,#0x9C+fd] ; fd
BL              tcsetattr

loc_372A0
STR             R9, [R7]
B               loc_372CC

loc_372A8
MOV             R1, #0
MOV             R0, R4
BL              sub_36FC8
CMP             R0, #0
BNE             loc_3705C
MOV             R5, #1
MOV             R1, R4
LDR             R0, =aReadSNotAValid ; "read: '%s': not a valid identifier"
BL              sub_16DDC

loc_372CC
MOV             R0, R5
ADD             SP, SP, #0x9C
POP             {R4-R11,PC}

loc_372D8
STR             R4, [SP,#0x9C+var_9C]
B               loc_37098

loc_372E0
LDR             R3, [SP,#0x9C+arg_8]
B               loc_370D8

loc_372E8
MOV             R2, #0xA
MOV             R0, R9
BL              sub_18990
CMP             R0, #0
STR             R0, [SP,#0x9C+fd]
BLT             loc_3730C
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_370EC

loc_3730C
LDR             R5, =aInvalidFileDes ; "invalid file descriptor"
B               loc_372CC

loc_37314               ; nfds
MOV             R1, #1
MOV             R2, #0  ; timeout
ADD             R0, SP, #0x9C+fd ; fds
STRH            R1, [SP,#0x9C+var_80]
BL              poll
CMP             R0, #0
MOVGT           R5, #0
MOVLE           R5, #1
B               loc_372CC

loc_37338
MOV             R2, #0xFFFFFFFF
B               loc_37254

loc_37340
ADD             R3, R4, R11
MOV             R2, R5  ; nbytes
MOV             R1, R3  ; buf
LDR             R0, [SP,#0x9C+fd] ; fd
STR             R3, [SP,#0x9C+var_88]
BL              read
CMP             R0, #1
BEQ             loc_37440
LDR             R9, [R7]

loc_37364
LDR             R2, [R6]
CMP             R2, #0
BEQ             loc_37550

loc_37370
SUBS            R11, R11, #1
BCC             loc_3739C
LDRB            R1, [R4,R11] ; c
SUB             R2, R1, #9
CMP             R1, #0x20 ; ' '
CMPNE           R2, #4
BHI             loc_3739C
MOV             R0, R8  ; s
BL              strchr
CMP             R0, #0
BNE             loc_37370

loc_3739C
CMN             R11, #1
ADD             R10, R4, R11
MOV             R2, #0
STRB            R2, [R10,#1]
BEQ             loc_37410
LDRB            R1, [R4,R11] ; c
MOV             R0, R8  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_37410
MOV             R11, R10

loc_373C8
CMP             R11, R4
SUB             R10, R11, R4
BEQ             loc_373F8

loc_373D4               ; c
LDRB            R1, [R11,#-1]!
SUB             R3, R1, #9
CMP             R1, #0x20 ; ' '
CMPNE           R3, #4
BHI             loc_373F8
MOV             R0, R8  ; s
BL              strchr
CMP             R0, #0
BNE             loc_373C8

loc_373F8               ; reject
MOV             R1, R8
MOV             R0, R4  ; s
BL              strcspn
CMP             R0, R10
MOVCS           R3, #0
STRBCS          R3, [R4,R10]

loc_37410
LDR             R8, =(asc_6B39D+1) ; ""
MOV             R1, R4
LDR             R0, [R6]
LDR             R3, [SP,#0x9C+var_90]
BLX             R3

loc_37424
LDR             R0, [R6,#4]!
CMP             R0, #0
BEQ             loc_3727C
MOV             R1, R8
LDR             R3, [SP,#0x9C+var_90]
BLX             R3
B               loc_37424

loc_37440
LDRB            R5, [R4,R11]
CMP             R5, #0
BEQ             loc_3746C
LDR             R3, [SP,#0x9C+var_94]
ANDS            R2, R3, #2
BNE             loc_37490
CMP             R9, #0
BEQ             loc_37488
CMP             R5, #0xA
MOV             R9, R2
BNE             loc_37540

loc_3746C
LDR             R3, [SP,#0x9C+var_9C]
SUBS            R3, R3, #1
STR             R3, [SP,#0x9C+var_9C]
BNE             loc_37218

loc_3747C
MOV             R5, #0
MOV             R9, R5
B               loc_37364

loc_37488
CMP             R5, #0x5C ; '\'
BEQ             loc_37548

loc_37490
LDR             R3, [SP,#0x9C+var_8C]
CMP             R3, R5
BEQ             loc_3747C
LDR             R3, [SP,#0x9C+arg_10]
CMP             R3, #0
BNE             loc_37540
LDR             R2, [R6]
CMP             R2, #0
BEQ             loc_37540
MOV             R1, R5  ; c
MOV             R0, R8  ; s
BL              strchr
MOVS            R2, R0
MOVNE           R2, #1
CMP             R10, #0
CMPNE           R0, #0
BEQ             loc_374F0
SUB             R1, R5, #9
CMP             R5, #0x20 ; ' '
CMPNE           R1, #4
BLS             loc_3746C
CMP             R10, #2
MOVEQ           R10, #1
BEQ             loc_3746C

loc_374F0
LDR             R10, [R6,#4]
CMP             R10, #0
MOVNE           R10, R2
MOVEQ           R10, #0
CMP             R10, #0
BEQ             loc_37540
LDR             R3, [SP,#0x9C+var_88]
MOV             R2, #0
MOV             R1, R4
MOV             R11, #0
STRB            R2, [R3]
LDR             R3, [SP,#0x9C+var_90]
LDR             R0, [R6],#4
BLX             R3
SUB             R3, R5, #9
CMP             R5, #0x20 ; ' '
CMPNE           R3, #4
MOVHI           R10, #1
MOVLS           R10, #2
B               loc_3746C

loc_37540
ADD             R11, R11, #1
B               loc_3746C

loc_37548
MOV             R9, R0
B               loc_3746C

loc_37550
STRB            R2, [R4,R11]
MOV             R1, R4
LDR             R0, =aReply ; "REPLY"
LDR             R3, [SP,#0x9C+var_90]
BLX             R3
B               loc_3727C

loc_37568
MOV             R5, #1
MOV             R9, #0
B               loc_3727C

loc_37574
LDR             R5, =aInvalidCount ; "invalid count"
B               loc_372CC
; End of function sub_37024

off_3757C DCD dword_7DB94
off_37580 DCD aInvalidTimeout ; "invalid timeout"
dword_37584 DCD 0x1FFFFF
off_37588 DCD stderr
off_3758C DCD asc_6886A ; " \t\n"
off_37590 DCD aReadSNotAValid ; "read: '%s': not a valid identifier"
off_37594 DCD aInvalidFileDes ; "invalid file descriptor"
off_37598 DCD asc_6B39D+1 ; ""
off_3759C DCD aReply    ; "REPLY"
off_375A0 DCD aInvalidCount ; "invalid count"

loc_375A4
PUSH            {R4-R11,LR}
MOV             R4, #0
LDR             R6, =optind
SUB             SP, SP, #0x14
MOV             R7, R0
LDR             R9, =unk_6383C
LDR             R10, =optarg
STR             R4, [R6]
BL              sub_162C8
MOV             R8, R0

loc_375CC
LDR             R2, =aHsafTDSCMLPNVW ; "-HSaf::t::d::s::c::m::l::p::n::v::w::e:"...
MOV             R1, R7
MOV             R0, R8
BL              getopt
CMN             R0, #1
BEQ             loc_37724
CMP             R0, #0x48 ; 'H'
ORREQ           R4, R4, #1
BEQ             loc_375CC
CMP             R0, #0x53 ; 'S'
ORREQ           R4, R4, #2
BEQ             loc_375CC
CMP             R0, #0x61 ; 'a'
BNE             loc_3764C
LDR             R5, =unk_6383D
LDR             R11, =aC30s ; "-%c: %-30s "

loc_3760C
LDRB            R0, [R5,#-1]
MOV             R1, SP
BL              getrlimit64
LDR             R2, [R5,#3]
MOV             R0, R11
LDRB            R1, [R5,#1]
BL              printf
MOV             R2, R5
MOV             R1, SP
MOV             R0, R4
ADD             R5, R5, #8
BL              sub_36F68
LDR             R3, =(off_638A4+1) ; "/var/log/messages"
CMP             R3, R5
BNE             loc_3760C
B               loc_375CC

loc_3764C
CMP             R0, #1
MOV             R3, #0
MOVEQ           R0, #0x66 ; 'f'

loc_37658
ADD             R5, R9, R3
LDRB            R2, [R5,#2]
CMP             R2, R0
BNE             loc_37718
MOV             R1, SP
LDRB            R0, [R5]
BL              getrlimit64
LDR             R11, [R10]
CMP             R11, #0
BNE             loc_37730
LDR             R3, [R6]
LDR             R11, [R7,R3,LSL#2]
CMP             R11, #0
BEQ             loc_376A4
LDRB            R2, [R11]
CMP             R2, #0x2D ; '-'
ADDNE           R3, R3, #1
STRNE           R3, [R6]
BNE             loc_37730

loc_376A4
ADD             R2, R5, #1
MOV             R1, SP
MOV             R0, R4
BL              sub_36F68
B               loc_375CC

loc_376B8
LDRB            R3, [R5,#1]
SUB             R12, R3, #0x20 ; ' '
RSB             R2, R3, #0x20 ; ' '
MOV             R1, R1,LSL R3
ORR             R1, R1, R0,LSL R12
ORR             R1, R1, R0,LSR R2
MOV             R0, R0,LSL R3

loc_376D4
CMP             R4, #0
MOVEQ           R4, #3
TST             R4, #1
STRDNE          R0, R1, [SP,#8]
TST             R4, #2
STRDNE          R0, R1, [SP]
MOV             R1, SP
LDRB            R0, [R5]
BL              setrlimit64
CMP             R0, #0
BGE             loc_375CC
LDR             R0, =aErrorSettingLi ; "error setting limit"
BL              sub_16AF4
B               loc_37774

loc_3770C
MOV             R0, #0xFFFFFFFF
MOV             R1, R0
B               loc_376D4

loc_37718
ADD             R3, R3, #8
CMP             R3, #0x68 ; 'h'
BNE             loc_37658

loc_37724
MOV             R0, #0

loc_37728
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_37730
LDR             R1, =aUnlimited ; "unlimited"
MOV             R0, R11
BL              strcmp
CMP             R0, #0
BEQ             loc_3770C
MOV             R2, #0xA
MOV             R1, #0
MOV             R0, R11
BL              sub_188A4
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_376B8
MOV             R1, R11
LDR             R0, =aInvalidNumberS ; "invalid number '%s'"
BL              sub_16DDC

loc_37774
MOV             R0, #1
B               loc_37728
off_3777C DCD optind
off_37780 DCD unk_6383C
off_37784 DCD optarg
off_37788 DCD aHsafTDSCMLPNVW ; "-HSaf::t::d::s::c::m::l::p::n::v::w::e:"...
off_3778C DCD unk_6383D
off_37790 DCD aC30s     ; "-%c: %-30s "
off_37794 DCD off_638A4+1 ; "/var/log/messages"
off_37798 DCD aErrorSettingLi ; "error setting limit"
off_3779C DCD aUnlimited ; "unlimited"
off_377A0 DCD dword_7DB94
off_377A4 DCD aInvalidNumberS ; "invalid number '%s'"



; int sub_377A8()
sub_377A8

var_70= -0x70
s= -0x6E

PUSH            {R4,LR}
SUB             SP, SP, #0x70
MOV             R2, #0x6C ; 'l' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x70+s ; s
BL              memset
MOV             R3, #1
LDR             R1, =aDevLog ; "/dev/log"
ADD             R0, SP, #0x70+s ; dest
STRH            R3, [SP,#0x70+var_70]
BL              strcpy
LDR             R0, =aDevLog ; "/dev/log"
BL              sub_17BE4
SUBS            R4, R0, #0
BEQ             loc_377FC
MOV             R2, #0x6C ; 'l'
MOV             R1, R4
ADD             R0, SP, #0x70+s
BL              sub_60B34
MOV             R0, R4  ; ptr
BL              free

loc_377FC               ; name
ADD             R0, SP, #0x70+s
BL              unlink
MOV             R2, #0
MOV             R1, #2
MOV             R0, #1
BL              sub_179A4
MOV             R2, #0x6E ; 'n'
MOV             R1, SP
MOV             R4, R0
BL              sub_179C0
MOVW            R1, #0x1B6 ; mode
LDR             R0, =aDevLog ; "/dev/log"
BL              chmod
MOV             R0, R4
ADD             SP, SP, #0x70 ; 'p'
POP             {R4,PC}
; End of function sub_377A8

off_3783C DCD aDevLog   ; "/dev/log"


; Attributes: bp-based frame fpd=0xFFFFFFE0

; ssize_t __fastcall sub_37840(int, char *, int)
sub_37840

var_84= -0x84
var_80= -0x80
var_7C= -0x7C
var_78= -0x78
timer= -0x70
s= -0x6C
var_5C= -0x5C
var_3C= -0x3C

CMP             R2, #0xF
PUSH            {R4-R11,LR}
MOV             R7, R0
ADD             R11, SP, #0x20
MOV             R6, R1
SUB             SP, SP, #0x84
BLE             loc_37898
LDRB            R3, [R1,#3]
CMP             R3, #0x20 ; ' '
BNE             loc_37898
LDRB            R3, [R1,#6]
CMP             R3, #0x20 ; ' '
BNE             loc_37898
LDRB            R3, [R1,#9]
CMP             R3, #0x3A ; ':'
BNE             loc_37898
LDRB            R3, [R1,#0xC]
CMP             R3, #0x3A ; ':'
BNE             loc_37898
LDRB            R3, [R1,#0xF]
CMP             R3, #0x20 ; ' '
BEQ             loc_37908

loc_37898               ; timer
SUB             R0, R11, #-(-0x20+timer)
BL              time
SUB             R0, R11, #-(-0x20+timer) ; timer
BL              ctime
ADD             R8, R0, #4

loc_378AC
LDR             R9, =dword_7DBC0
MOV             R3, #0
LDR             R2, =dword_7DB98
STRB            R3, [R8,#0xF]
LDR             R3, [R9]
LDR             R4, [R2]
TST             R3, #0x200
ADD             R5, R4, #0x450
ADD             R5, R5, #4
BEQ             loc_3791C
LDR             R2, [R4,#0x48]
MOV             R3, R6
LDR             R8, [R4,#0x44]
MOV             R0, R5  ; s
LDR             R1, =aDS_0 ; "<%d>%s\n"
AND             R2, R2, R7
BL              sprintf
MOV             R1, R5  ; buf
MOV             R2, R0  ; n
MOV             R0, R8  ; fd
BL              sub_17FB8

loc_37900
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_37908
MOV             R3, #0
MOV             R8, R1
STR             R3, [R11,#-0x20+timer]
ADD             R6, R1, #0x10
B               loc_378AC

loc_3791C
TST             R3, #0x10
BEQ             loc_379DC
MOV             R3, R6
MOV             R2, R8
LDR             R1, =(aTrapSS+8) ; format
MOV             R0, R5  ; s
BL              sprintf

loc_37938
LDR             R3, [R4,#0x14]
AND             R7, R7, #7
CMP             R7, R3
BGE             loc_37900
LDR             R3, [R9]
TST             R3, #0x80
BEQ             loc_37A88
LDR             R3, [R4,#0x4C]
CMP             R3, #0
BEQ             loc_37A88
MOV             R2, #3  ; nsops
ADD             R1, R4, #0x32 ; '2' ; sops
LDR             R0, [R4,#0x24] ; semid
BL              semop
CMN             R0, #1
LDREQ           R0, =aSmwdn ; "SMwdn"
BEQ             loc_379D8
MOV             R0, R5  ; s
MOV             R8, #0
BL              strlen
ADD             R7, R0, #1

loc_3798C
LDR             R0, [R4,#0x4C]
LDR             R3, [R0,#4]
LDR             R6, [R0],#8
ADD             R9, R3, R7
CMP             R9, R6
ADD             R0, R0, R3 ; dest
BGE             loc_37A64
MOV             R2, R7  ; n
MOV             R1, R5  ; src
BL              memcpy
LDR             R3, [R4,#0x4C]
MOV             R2, #1  ; nsops
ADD             R1, R4, #0x2C ; ',' ; sops
LDR             R0, [R4,#0x24] ; semid
STR             R9, [R3,#4]
BL              semop
CMN             R0, #1
BNE             loc_37900
LDR             R0, =aSmwup ; "SMwup"

loc_379D8
BL              sub_16B40

loc_379DC
LDR             R2, =off_7D4E0 ; "authpriv"
AND             R1, R7, #0x3F8

loc_379E4
LDR             R3, [R2,#-8]
CMP             R3, #0
BNE             loc_37A28

loc_379F0
MOV             R3, R7
LDR             R2, =aD_2 ; "<%d>"
MOV             R1, #0x14 ; maxlen
SUB             R0, R11, #-(-0x20+s) ; s
BL              snprintf

loc_37A04
SUB             R3, R11, #-(-0x20+s)
STR             R6, [SP,#0x84+var_80]
STR             R3, [SP,#0x84+var_84]
MOV             R2, R8
LDR             R3, [R4,#0x50]
MOV             R0, R5  ; s
LDR             R1, =aS64sSS ; "%s %.64s %s %s\n"
BL              sprintf
B               loc_37938

loc_37A28
ADD             R2, R2, #8
LDR             R0, [R2,#-0xC]
CMP             R1, R0
BNE             loc_379E4
AND             R0, R7, #7
LDR             R2, =off_7D598 ; "crit"
B               loc_37A54

loc_37A44
ADD             R2, R2, #8
LDR             R12, [R2,#-0xC]
CMP             R0, R12
BEQ             loc_37C64

loc_37A54
LDR             R1, [R2,#-8]
CMP             R1, #0
BNE             loc_37A44
B               loc_379F0

loc_37A64
SUB             R6, R6, R3
MOV             R1, R5  ; src
MOV             R2, R6  ; n
ADD             R5, R5, R6
BL              memcpy
LDR             R3, [R4,#0x4C]
SUB             R7, R7, R6
STR             R8, [R3,#4]
B               loc_3798C

loc_37A88               ; s
MOV             R0, R5
LDR             R6, [R11,#-0x20+timer]
BL              strlen
LDR             R3, [R4,#4]
MOV             R8, R0
CMP             R3, #1
BLE             loc_37B68
CMP             R6, #0
BNE             loc_37AB8
MOV             R0, R6  ; timer
BL              time
MOV             R6, R0

loc_37AB8
LDR             R3, [R4,#8]
CMP             R3, R6
STRNE           R6, [R4,#8]
BNE             loc_37C34

loc_37AC8
LDR             R3, [R4,#0x18]
CMP             R3, #0
BEQ             loc_37C40
LDRB            R2, [R4,#0x10]
CMP             R2, #0
BEQ             loc_37C40
LDR             R2, [R4,#0xC]
CMP             R3, R2
BCS             loc_37C40
LDR             R6, [R4,#0x1C]
LDR             R0, [R4] ; s
CMP             R6, #0
BEQ             loc_37C2C
STR             SP, [R11,#-0x20+var_78]
SUB             R6, R6, #1
BL              strlen
ADD             R0, R0, #0xB
LDR             R10, =aSD ; "%s.%d"
BIC             R0, R0, #7
SUB             SP, SP, R0
ADD             R9, SP, #0x84+var_7C
SUB             SP, SP, R0
ADD             R7, SP, #0x84+var_7C

loc_37B24
MOV             R3, R6
LDR             R2, [R4]
MOV             R1, R10 ; format
MOV             R0, R7  ; s
BL              sprintf
CMP             R6, #0
BEQ             loc_37C1C
SUB             R6, R6, #1
MOV             R1, R10 ; format
MOV             R3, R6
LDR             R2, [R4]
MOV             R0, R9  ; s
BL              sprintf
MOV             R1, R7  ; new
MOV             R0, R9  ; old
BL              rename
B               loc_37B24

loc_37B68
BEQ             loc_37AC8
LDR             R3, [R4]
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BNE             loc_37B90
LDRB            R3, [R3,#1]
CMP             R3, #0
MOVEQ           R3, #1
STREQ           R3, [R4,#4]
BEQ             loc_37AC8

loc_37B90
MOVW            R2, #0x1B6
MOVW            R1, #0xD41
LDR             R0, [R4]
BL              open64
CMP             R0, #0
STR             R0, [R4,#4]
BGE             loc_37BE8
MOVW            R1, #0x901
LDR             R0, =aDevConsole ; "/dev/console"
BL              sub_586C8
CMP             R0, #0
MOV             R2, R8  ; n
MOVGE           R4, R0
MOVLT           R4, #2
MOV             R1, R5  ; buf
MOV             R0, R4  ; fd
BL              sub_17FB8
CMP             R4, #2
BEQ             loc_37900
MOV             R0, R4  ; fd
BL              close
B               loc_37900

loc_37BE8
SUB             R1, R11, #-(-0x20+s)
BLX             sub_62E08
CMP             R0, #0
LDREQ           R3, [R11,#-0x20+var_5C]
MOVNE           R3, #0
ANDEQ           R3, R3, #0xF000
SUBEQ           R3, R3, #0x8000
CLZEQ           R3, R3
MOVEQ           R3, R3,LSR#5
STRB            R3, [R4,#0x10]
LDR             R3, [R11,#-0x20+var_3C]
STR             R3, [R4,#0xC]
B               loc_37AC8

loc_37C1C               ; new
MOV             R1, R7
LDR             R0, [R4] ; old
BL              rename
LDR             SP, [R11,#-0x20+var_78]

loc_37C2C               ; name
LDR             R0, [R4]
BL              unlink

loc_37C34               ; fd
LDR             R0, [R4,#4]
BL              close
B               loc_37B90

loc_37C40               ; n
MOV             R2, R8
MOV             R1, R5  ; buf
LDR             R0, [R4,#4] ; fd
BL              sub_17FB8
CMP             R0, #0
LDRGT           R3, [R4,#0xC]
ADDGT           R0, R3, R0
STRGT           R0, [R4,#0xC]
B               loc_37900

loc_37C64
STR             R1, [SP,#0x84+var_84]
SUB             R0, R11, #-(-0x20+s) ; s
LDR             R2, =aSS ; "%s.%s"
MOV             R1, #0x14 ; maxlen
BL              snprintf
B               loc_37A04
; End of function sub_37840

off_37C7C DCD dword_7DBC0
off_37C80 DCD dword_7DB98
off_37C84 DCD aDS_0     ; "<%d>%s\n"
off_37C88 DCD aTrapSS+8 ; "%s %s\n"
off_37C8C DCD aSmwdn    ; "SMwdn"
off_37C90 DCD aSmwup    ; "SMwup"
off_37C94 DCD off_7D4E0 ; "authpriv"
off_37C98 DCD aD_2      ; "<%d>"
off_37C9C DCD aS64sSS   ; "%s %.64s %s %s\n"
off_37CA0 DCD off_7D598 ; "crit"
off_37CA4 DCD aSD       ; "%s.%d"
off_37CA8 DCD aDevConsole ; "/dev/console"
off_37CAC DCD aSS       ; "%s.%s"


; Attributes: noreturn

; void __fastcall __noreturn sub_37CB0(int, char **)
sub_37CB0

var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
s1= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R3, #0
SUB             SP, SP, #0x34
MOVW            R0, #0x6D4
MOV             R5, R1
STR             R3, [SP,#0x34+var_C]
BL              sub_174DC
MOV             R2, #0x4C ; 'L' ; n
LDR             R1, =off_638A4 ; src
BL              memcpy
LDR             R3, =dword_7DB98
MOV             R4, R0
STR             R0, [R3]
ADD             R3, SP, #0x34+var_C
ADD             R2, SP, #0x34+var_1C
STR             R3, [SP,#0x34+var_28]
ADD             R3, SP, #0x34+var_10
STR             R3, [SP,#0x34+var_2C]
ADD             R3, SP, #0x34+var_14
STR             R3, [SP,#0x34+var_30]
ADD             R3, SP, #0x34+var_18
STR             R3, [SP,#0x34+var_34]
MOV             R3, R0
LDR             R1, =aMNoLSsBCDk ; "^m:nO:l:Ss:b:C::DK"
MOV             R0, R5
BL              sub_593CC
TST             R0, #8
MOV             R5, R0
BEQ             loc_37D38
MOV             R2, #8  ; int
MOV             R1, #1  ; int
LDR             R0, [SP,#0x34+var_18] ; int
BL              sub_6206C
STR             R0, [R4,#0x14]

loc_37D38
TST             R5, #0x20
BEQ             loc_37D58
LDR             R2, =0x1FFFFF ; int
MOV             R1, #0  ; int
LDR             R0, [SP,#0x34+var_14] ; int
BL              sub_6206C
MOV             R0, R0,LSL#10
STR             R0, [R4,#0x18]

loc_37D58
TST             R5, #0x40
BEQ             loc_37D74
MOV             R2, #0x63 ; 'c' ; int
MOV             R1, #0  ; int
LDR             R0, [SP,#0x34+var_10] ; int
BL              sub_6206C
STR             R0, [R4,#0x1C]

loc_37D74               ; int
LDR             R0, [SP,#0x34+var_C]
CMP             R0, #0
BEQ             loc_37D94
LDR             R2, =0x1FFFFF ; int
MOV             R1, #4  ; int
BL              sub_6206C
MOV             R0, R0,LSL#10
STR             R0, [R4,#0x28]

loc_37D94
BL              sub_60AA0
MOV             R1, #0x2E ; '.'
STR             R0, [R4,#0x50]
BL              strchrnul
TST             R5, #2
MOV             R3, #0
STRB            R3, [R0]
BNE             loc_37DBC
MOV             R0, #1
BL              sub_61B48

loc_37DBC
LDR             R1, =sub_18140
MOV             R0, #0xF
BL              sub_18288
LDR             R1, =sub_18140
MOV             R0, #2
BL              sub_18288
LDR             R7, =dword_7DBC0
MOV             R1, #1  ; handler
MOV             R0, R1  ; sig
ADD             R8, R4, #0x54 ; 'T'
BL              signal
BL              sub_377A8
MOV             R1, #0
BL              sub_176A8
LDR             R3, [R7]
TST             R3, #0x80
BEQ             loc_37EB0
MOV             R2, #0x3A4
LDR             R1, [R4,#0x28]
LDR             R0, =0x414E4547
BL              shmget
CMN             R0, #1
STR             R0, [R4,#0x20]
LDREQ           R0, =aShmget_0 ; "shmget"
BEQ             loc_37E3C
MOV             R2, #0
MOV             R1, R2
BL              shmat
CMN             R0, #1
STR             R0, [R4,#0x4C]
BNE             loc_37E40
LDR             R0, =aShmat_0 ; "shmat"

loc_37E3C
BL              sub_16B40

loc_37E40               ; n
LDR             R2, [R4,#0x28]
MOV             R1, #0  ; c
BL              memset
LDR             R3, [R4,#0x28]
MOV             R1, #2  ; nsems
LDR             R2, [R4,#0x4C]
LDR             R0, =0x414E4547 ; key
SUB             R3, R3, #9
STR             R3, [R2]
MOVW            R2, #0x7FF ; semflg
BL              semget
CMN             R0, #1
STR             R0, [R4,#0x24]
BNE             loc_37EB0
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x11
BEQ             loc_37E94

loc_37E8C
LDR             R0, =aSemget_0 ; "semget"
B               loc_37E3C

loc_37E94               ; semflg
MOV             R2, #0
MOV             R1, #2  ; nsems
LDR             R0, =0x414E4547 ; key
BL              semget
CMN             R0, #1
STR             R0, [R4,#0x24]
BEQ             loc_37E8C

loc_37EB0
LDR             R3, [R7]
TST             R3, #0x200
BEQ             loc_37EE4
MOV             R1, #1
LDR             R0, =aDevKmsg ; "/dev/kmsg"
BL              sub_175D8
STR             R0, [R4,#0x44]
BL              sub_5A8E8
LDR             R3, =0x304FF
CMP             R0, R3
MOVLE           R3, #7
MOVGT           R3, #0xFFFFFFFF
STR             R3, [R4,#0x48]

loc_37EE4
LDR             R10, =dword_7DBA0
MOV             R2, #0
LDR             R1, =aSyslogdStarted ; "syslogd started: BusyBox v1.29.3"
MOV             R0, #0x2E ; '.'
BL              sub_37840
MOV             R11, #0xFFFFFFFF
MOV             R3, R8
MOV             R9, R10

loc_37F04
LDR             R2, [R10]
CMP             R2, #0
BNE             loc_37F78
CMP             R8, R3
ADDEQ           R6, R4, #0x154
MOVNE           R6, R8

loc_37F1C               ; nbytes
MOV             R2, #0xFF
MOV             R1, R6  ; buf
MOV             R0, #0  ; fd
STR             R3, [SP,#0x34+s1]
BL              read
SUBS            R5, R0, #0
LDR             R3, [SP,#0x34+s1]
BLT             loc_37F60
ADD             R2, R6, R5

loc_37F40
CMP             R5, #0
BEQ             loc_37F1C
LDRB            R1, [R2,#-1]!
CMP             R1, #0
CMPNE           R1, #0xA
BNE             loc_37FD8
SUB             R5, R5, #1
B               loc_37F40

loc_37F60
LDR             R3, [R9]
CMP             R3, #0
BNE             loc_37F78
LDR             R1, =aDevLog ; "/dev/log"
LDR             R0, =aReadFromS ; "read from %s"
BL              sub_16AF4

loc_37F78
MOV             R2, #0
LDR             R1, =aSyslogdExiting ; "syslogd exiting"
MOV             R0, #0x2E ; '.'
BL              sub_37840
LDR             R3, [R4,#0x20]
CMN             R3, #1
BEQ             loc_37F9C
LDR             R0, [R4,#0x4C]
BL              shmdt

loc_37F9C
LDR             R0, [R4,#0x20]
CMN             R0, #1
BEQ             loc_37FB4
MOV             R2, #0
MOV             R1, R2
BL              shmctl

loc_37FB4               ; semid
LDR             R0, [R4,#0x24]
CMN             R0, #1
BEQ             loc_37FD0
MOV             R3, #0
MOV             R2, R3  ; cmd
MOV             R1, R3  ; semnum
BL              semctl

loc_37FD0
LDR             R0, [R9]
BL              sub_18260

loc_37FD8
LDR             R1, [R7]
SUB             R2, R5, R11
CLZ             R2, R2
MOV             R2, R2,LSR#5
ANDS            R2, R2, R1,LSR#8
BEQ             loc_38008
MOV             R2, R5  ; n
MOV             R1, R6  ; s2
MOV             R0, R3  ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_38034

loc_38008
ADD             R3, R6, R5
ADD             R11, R4, #0x254
STR             R3, [SP,#0x34+s1]
MOV             R3, #0
STRB            R3, [R6,R5]
STR             R6, [SP,#0x34+var_8]

loc_38020
LDR             R2, [SP,#0x34+var_8]
LDR             R3, [SP,#0x34+s1]
CMP             R3, R2
BHI             loc_3803C
MOV             R11, R5

loc_38034
MOV             R3, R6
B               loc_37F04

loc_3803C
ADD             R0, R2, #1
LDRB            R2, [R2]
CMP             R2, #0x3C ; '<'
BEQ             loc_3805C

loc_3804C
MOV             R0, #0xD

loc_38050
MOV             R2, R11
MOV             R12, #0x5E ; '^'
B               loc_380BC

loc_3805C
MOV             R2, #0xA
ADD             R1, SP, #0x34+var_8
BL              sub_18990
LDR             R2, [SP,#0x34+var_8]
LDR             R3, =0xFFFFFC00
LDRB            R1, [R2]
CMP             R1, #0x3E ; '>'
ADDEQ           R2, R2, #1
STREQ           R2, [SP,#0x34+var_8]
TST             R0, R3
BNE             loc_3804C
B               loc_38050

loc_3808C
CMP             R1, #0xA
ADD             LR, R2, #1
MOVEQ           R1, #0x20 ; ' '
BICS            R3, R1, #0x1F
BNE             loc_380B4
CMP             R1, #9
ADDNE           R1, R1, #0x40 ; '@'
STRBNE          R12, [R2]
UXTBNE          R1, R1
MOVNE           R2, LR

loc_380B4
STRB            R1, [R2]
ADD             R2, R2, #1

loc_380BC
LDR             R1, [SP,#0x34+var_8]
ADD             LR, R1, #1
STR             LR, [SP,#0x34+var_8]
LDRB            R1, [R1]
CMP             R1, #0
BNE             loc_3808C
STRB            R1, [R2]
SUB             R2, R2, R11
MOV             R1, R11
BL              sub_37840
B               loc_38020
; End of function sub_37CB0

off_380E8 DCD off_638A4 ; "/var/log/messages"
off_380EC DCD dword_7DB98
off_380F0 DCD aMNoLSsBCDk ; "^m:nO:l:Ss:b:C::DK"
; const int dword_380F4
dword_380F4 DCD 0x1FFFFF
off_380F8 DCD sub_18140
off_380FC DCD dword_7DBC0
; const key_t key
key DCD 0x414E4547
off_38104 DCD aShmget_0 ; "shmget"
off_38108 DCD aShmat_0  ; "shmat"
off_3810C DCD dword_7DB94
off_38110 DCD aSemget_0 ; "semget"
off_38114 DCD aDevKmsg  ; "/dev/kmsg"
dword_38118 DCD 0x304FF
off_3811C DCD dword_7DBA0
off_38120 DCD aSyslogdStarted ; "syslogd started: BusyBox v1.29.3"
off_38124 DCD aDevLog   ; "/dev/log"
off_38128 DCD aReadFromS ; "read from %s"
off_3812C DCD aSyslogdExiting ; "syslogd exiting"
dword_38130 DCD 0xFFFFFC00



; int __fastcall sub_38134(int, char **)
sub_38134

var_8= -8
len= -4

PUSH            {R0,R1,R4-R6,LR}
MOV             R0, R1
ADD             R3, SP, #8+len
MOV             R2, SP
LDR             R1, =aCsNR ; "cs:+n:+r"
BL              sub_593CC
TST             R0, #4
BEQ             loc_38174
LDR             R2, [SP,#8+len] ; len
MOV             R1, #0  ; bufp
MOV             R0, #8  ; type
BL              klogctl
CMP             R0, #0
BEQ             loc_38240

loc_3816C
LDR             R0, =aKlogctl_0 ; "klogctl"
BL              sub_16B40

loc_38174               ; len
ANDS            R2, R0, #2
MOV             R4, R0
BNE             loc_38190
MOV             R1, R2  ; bufp
MOV             R0, #0xA ; type
BL              klogctl
STR             R0, [SP,#8+var_8]

loc_38190
LDR             R3, [SP,#8+var_8]
CMP             R3, #0x4000
MOVLT           R3, #0x4000
STRLT           R3, [SP,#8+var_8]
LDR             R3, [SP,#8+var_8]
CMP             R3, #0x1000000
MOVGT           R3, #0x1000000
STRGT           R3, [SP,#8+var_8]
LDR             R0, [SP,#8+var_8]
BL              sub_1748C
MOV             R5, R0
AND             R0, R4, #1
LDR             R2, [SP,#8+var_8] ; len
MOV             R1, R5  ; bufp
ADD             R0, R0, #3 ; type
BL              klogctl
CMP             R0, #0
MOV             R2, R0  ; n
STR             R0, [SP,#8+var_8]
BLT             loc_3816C
BEQ             loc_38240
ANDS            R4, R4, #8
BNE             loc_38260
MOV             R6, #0xA

loc_381F0
CMP             R6, #0xA
ADD             R3, R5, R4
LDRB            R2, [R5,R4]
BNE             loc_3824C
CMP             R2, #0x3C ; '<'
BNE             loc_3824C
LDR             R2, [SP,#8+var_8]

loc_3820C
LDRB            R1, [R3],#1
ADD             R4, R4, #1
CMP             R1, #0x3E ; '>'
BEQ             loc_38224
CMP             R2, R4
BGT             loc_3820C

loc_38224
LDR             R3, [SP,#8+var_8]
CMP             R3, R4
BGT             loc_381F0
CMP             R6, #0xA

loc_38234
BEQ             loc_38240
MOV             R0, #0xA ; c
BL              j_putchar_unlocked

loc_38240
MOV             R0, #0
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_3824C               ; c
MOV             R0, R2
ADD             R4, R4, #1
MOV             R6, R2
BL              putchar_unlocked
B               loc_38224

loc_38260               ; buf
MOV             R1, R5
MOV             R0, #1  ; fd
BL              sub_17FB8
LDR             R3, [SP,#8+var_8]
ADD             R5, R5, R3
LDRB            R3, [R5,#-1]
CMP             R3, #0xA
B               loc_38234
; End of function sub_38134

off_38280 DCD aCsNR     ; "cs:+n:+r"
off_38284 DCD aKlogctl_0 ; "klogctl"



; int __fastcall sub_38288(int, char **)
sub_38288

var_14= -0x14
var_C= -0xC
var_8= -8
var_4= -4

LDR             R2, =(aExponentLessTh+0x13) ; "0"
PUSH            {R4-R9,LR}
SUB             SP, SP, #0x14
MOV             R4, R1
ADD             R3, SP, #0x14+var_4
MOV             R0, R4
STR             R2, [R3,#-4]!
ADD             R2, SP, #0x14+var_C
LDR             R1, =aLO ; "^l:o:"
BL              sub_593CC
TST             R0, #1
BNE             loc_382BC
BL              sub_162F0

loc_382BC               ; int
LDR             R1, =unk_64214
LDR             R0, [SP,#0x14+var_8] ; int
BL              sub_61EE8
MOV             R6, R0
MOV             R7, R1
LDR             R0, [SP,#0x14+var_C] ; int
LDR             R1, =unk_64214 ; int
BL              sub_61EE8
LDR             R3, =optind
MOV             R8, R0
MOV             R9, R1
MOVW            R2, #0x1B6
MOV             R1, #0x42 ; 'B'
LDR             R5, [R3]
LDR             R0, [R4,R5,LSL#2]
BL              sub_175B4
MOV             R2, R6
STRD            R8, R9, [SP,#0x14+var_14]
MOV             R3, R7
BL              posix_fallocate64
LDR             R2, =dword_7DB94
CMP             R0, #0
LDR             R2, [R2]
STR             R0, [R2]
BEQ             loc_3832C
LDR             R1, [R4,R5,LSL#2]
LDR             R0, =aFallocateS ; "fallocate '%s'"
BL              sub_16B40

loc_3832C
ADD             SP, SP, #0x14
POP             {R4-R9,PC}
; End of function sub_38288

off_38334 DCD aExponentLessTh+0x13 ; "0"
off_38338 DCD aLO       ; "^l:o:"
; const int off_3833C
off_3833C DCD unk_64214
off_38340 DCD optind
off_38344 DCD dword_7DB94
off_38348 DCD aFallocateS ; "fallocate '%s'"



; int __fastcall sub_3834C(int, int)
sub_3834C

var_8= -8

PUSH            {R0,R1,R4,LR}
MOV             R0, R1
MOV             R4, R1
BL              sub_60E30
MOV             R1, #2
BL              sub_175D8
LDR             R3, [R4,#4]
MOV             R2, #0
MOVW            R1, #0x1261
STR             R3, [SP,#8+var_8]
LDR             R3, =(aSS_8+3) ; "%s"
BL              sub_17A4C
MOV             R0, #0
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_3834C

off_38388 DCD aSS_8+3   ; "%s"



; int __fastcall sub_3838C(int, char **)
sub_3838C
LDR             R2, =aFreeze ; "freeze"
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R0, R4
ADD             R1, R2, #0x15
BL              sub_593F8
LDR             R3, =optind
MOV             R5, R0
MOV             R1, #0
LDR             R3, [R3]
LDR             R0, [R4,R3,LSL#2]
BL              sub_175D8
LDR             R12, =0xC0045877
TST             R5, #1
LDR             R1, =0xC0045878
MOV             R2, #0
LDR             R3, =aOpts1FifreezeF ; "(opts & 1) ? FIFREEZE : FITHAW"
MOVNE           R1, R12
BL              sub_17B18
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_3838C

off_383E0 DCD aFreeze   ; "freeze"
off_383E4 DCD optind
dword_383E8 DCD 0xC0045877
dword_383EC DCD 0xC0045878
off_383F0 DCD aOpts1FifreezeF ; "(opts & 1) ? FIFREEZE : FITHAW"



; int __fastcall sub_383F4(int, int)
sub_383F4

var_58= -0x58

PUSH            {R4,LR}
SUB             SP, SP, #0x68
LDR             R4, [R1,#4]
CMP             R4, #0
BEQ             loc_3842C
LDR             R3, [R1,#8]
CMP             R3, #0
BNE             loc_38428
LDRB            R4, [R4]
CMP             R4, #0x79 ; 'y'
BEQ             loc_3842C
CMP             R4, #0x6E ; 'n'
BEQ             loc_3842C

loc_38428
BL              sub_162F0

loc_3842C               ; fd
MOV             R0, #0
BL              isatty
CMP             R0, #0
BNE             loc_38444
LDR             R0, =aNotATty ; "not a tty"
BL              sub_16DBC

loc_38444
MOV             R1, SP
LDR             R2, =(aDevStdin+5) ; "stdin"
MOV             R0, #0
BL              sub_17A30
CMP             R4, #0
LDR             R1, [SP,#0x68+var_58]
BNE             loc_38480
LDR             R3, =aIsY ; "is y"
TST             R1, #0x12
LDR             R0, =aIsN ; "is n"
MOVNE           R0, R3  ; s
BL              puts

loc_38474
MOV             R0, #0
ADD             SP, SP, #0x68 ; 'h'
POP             {R4,PC}

loc_38480
CMP             R4, #0x79 ; 'y'
MOV             R0, #0  ; fd
ORREQ           R1, R1, #0x10
BICNE           R1, R1, #0x12 ; mode
BL              fchmod
CMP             R0, #0
BEQ             loc_38474
BL              sub_5E304
; End of function sub_383F4

off_384A0 DCD aNotATty  ; "not a tty"
off_384A4 DCD aDevStdin+5 ; "stdin"
off_384A8 DCD aIsY      ; "is y"
off_384AC DCD aIsN      ; "is n"



; int sub_384B0()
sub_384B0
PUSH            {R4,LR}
LDR             R4, =buf.c_cflag
MOV             R2, R4
SUB             R1, R4, #4
LDR             R0, [R4,#(buf - 0x7D798)]! ; fd
BL              sub_1714C
LDR             R3, [R4,#termios.c_cflag]
SUB             R3, R3, #1
STR             R3, [R4,#termios.c_cflag]
POP             {R4,PC}
; End of function sub_384B0

off_384D8 DCD buf.c_cflag


; Attributes: noreturn

; void __fastcall __noreturn sub_384DC(int, int, int)
sub_384DC
PUSH            {R4,LR}
MOV             R0, #0xA
BL              sub_170EC
MOV             R1, #0  ; optional_actions
LDR             R2, =buf.c_lflag ; termios_p
LDR             R0, [R2,#(buf - 0x7D79C)] ; fd
BL              tcsetattr
MOV             R0, #1  ; status
BL              _exit
; End of function sub_384DC

off_38500 DCD buf.c_lflag



; int __fastcall sub_38504(int, char **)
sub_38504

stream= -0x74
var_70= -0x70
var_6C= -0x6C
var_3C= -0x3C

PUSH            {R4-R11,LR}
MOV             R4, R1
SUB             SP, SP, #0x74
LDR             R1, =aDflsu ; "dflsu"
MOV             R0, R4
BL              sub_593CC
LDR             R3, =optind
MOV             R0, #1  ; fd
LDR             R3, [R3]
ADD             R4, R4, R3,LSL#2
BL              isatty
CMP             R0, #0
BNE             loc_38548

loc_38538
MOV             R0, R4
BL              sub_57910

loc_38540
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R11,PC}

loc_38548
LDR             R0, =aDevTty ; "/dev/tty"
BL              sub_61C9C
SUBS            R3, R0, #0
STR             R3, [SP,#0x74+stream]
BEQ             loc_38538
LDR             R6, =buf
MOV             R10, #0
BL              fileno_unlocked
MOV             R2, #0
MOV             R1, R6
STR             R0, [R1],#0xC ; s
BL              sub_17364
LDR             R1, =sub_384DC
LDR             R0, =0x700F44E
BL              sub_18184

loc_38584
LDR             R0, [R4]
LDR             R3, =stdin
CMP             R0, #0
LDR             R8, [R3]
BEQ             loc_385A8
LDR             R1, =(aNTR+5) ; "r"
BL              sub_61C78
SUBS            R8, R0, #0
BEQ             loc_3877C

loc_385A8
MOV             R3, #0
MOV             R2, #0
MOV             R0, R8  ; stream
STRD            R2, R3, [SP,#0x74+var_3C]
MOV             R9, #0
MOV             R5, #0xFFFFFFFF
BL              fileno_unlocked
ADD             R1, SP, #0x74+var_6C
MOV             R11, R9
BLX             sub_62E08
MOV             R7, R9
BL              sub_384B0
MOV             R3, R9

loc_385DC
CMP             R7, #0
SUBNE           R7, R7, #1
BNE             loc_38604
MOV             R0, R8  ; stream
STR             R3, [SP,#0x74+var_70]
BL              getc_unlocked
CMN             R0, #1
MOV             R5, R0
LDR             R3, [SP,#0x74+var_70]
BEQ             loc_38770

loc_38604
CMP             R10, #0x72 ; 'r'
MOVEQ           R2, #0
ANDNE           R2, R3, #1
CMP             R2, #0
BEQ             loc_386F4
LDR             R0, =aMore ; "--More-- "
BL              printf
MOV             R9, R0
LDRD            R0, R1, [SP,#0x74+var_3C]
ORRS            R3, R0, R1
BEQ             loc_38678
MOV             R3, #0
MOV             R2, #0x64 ; 'd'
BLX             sub_62C44
MOV             R10, R0
MOV             R11, R1
ORRS            R3, R10, R11
MOV             R0, R8
MOVEQ           R10, #1
MOVEQ           R11, #0
BL              ftello64
MOV             R2, R10
MOV             R3, R11
BLX             sub_62C44
LDRD            R2, R3, [SP,#0x74+var_3C]
MOV             R1, R0
LDR             R0, =aUOfLluBytes ; "(%u%% of %llu bytes)"
BL              printf
ADD             R9, R9, R0

loc_38678
LDR             R11, =aEnterNextLineS ; "(Enter:next line Space:next page Q:quit"...

loc_3867C
BL              sub_177D8
LDR             R0, [SP,#0x74+stream] ; stream
BL              getc_unlocked
UXTB            R3, R0
MOV             R1, R9
LDR             R0, =aS_11 ; "\r%*s\r"
SUB             R2, R3, #0x41 ; 'A'
CMP             R2, #0x19
LDR             R2, =(asc_6B39D+1) ; ""
ADDLS           R3, R3, #0x20 ; ' '
UXTBLS          R3, R3
MOV             R10, R3
STR             R3, [SP,#0x74+var_70]
BL              printf
LDR             R3, [SP,#0x74+var_70]
CMP             R3, #0x71 ; 'q'
BEQ             loc_38794
CMP             R3, #0xA
CMPNE           R3, #0x20 ; ' '
BEQ             loc_386E4
CMP             R3, #0x72 ; 'r'
BEQ             loc_386E4
MOV             R0, R11 ; format
BL              printf
MOV             R9, R0
B               loc_3867C

loc_386E4
MOV             R9, #0
BL              sub_384B0
MOV             R11, R9
MOV             R3, R9

loc_386F4
LDR             R2, [R6,#termios.c_oflag]
CMP             R5, #9
MVNEQ           R7, R11
ADD             R11, R11, #1
MOVEQ           R5, #0x20 ; ' '
ANDEQ           R7, R7, #7
CMP             R11, R2
MOVLS           R2, #0
MOVHI           R2, #1
CMP             R5, #0xA
MOVNE           R1, R2
ORREQ           R1, R2, #1
CMP             R1, #0
BEQ             loc_38744
LDR             R1, [R6,#termios.c_cflag]
ADD             R9, R9, #1
MOV             R11, #0
CMP             R10, #0xA
CMPNE           R9, R1
MOVCS           R3, #1

loc_38744
CMP             R5, #0xA
MOVEQ           R2, #0
ANDNE           R2, R2, #1
CMP             R2, #0
BNE             loc_38604
MOV             R0, R5  ; c
STR             R3, [SP,#0x74+var_70]
BL              putchar_unlocked
BL              sub_177C0
LDR             R3, [SP,#0x74+var_70]
B               loc_385DC

loc_38770               ; stream
MOV             R0, R8
BL              fclose
BL              sub_177D8

loc_3877C
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_38794
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_38584

loc_38794               ; termios_p
LDR             R2, =buf.c_lflag
MOV             R1, #0  ; optional_actions
LDR             R0, [R6] ; fd
BL              tcsetattr
MOV             R0, #0
B               loc_38540
; End of function sub_38504

off_387AC DCD aDflsu    ; "dflsu"
off_387B0 DCD optind
off_387B4 DCD aDevTty   ; "/dev/tty"
off_387B8 DCD buf
off_387BC DCD sub_384DC
dword_387C0 DCD 0x700F44E
off_387C4 DCD stdin
off_387C8 DCD aNTR+5    ; "r"
off_387CC DCD aMore     ; "--More-- "
off_387D0 DCD aUOfLluBytes ; "(%u%% of %llu bytes)"
off_387D4 DCD aEnterNextLineS ; "(Enter:next line Space:next page Q:quit"...
off_387D8 DCD aS_11     ; "\r%*s\r"
off_387DC DCD asc_6B39D+1 ; ""
off_387E0 DCD buf.c_lflag



; int __fastcall sub_387E4(char *s, const char **)
sub_387E4
PUSH            {R3-R11,LR}
MOV             R4, R0
MOV             R9, R1
MOV             R5, #0x8000
MOV             R10, #0x2C ; ','

loc_387F8
LDR             R11, =aLoop ; "loop"
MOV             R1, #0x2C ; ',' ; c
MOV             R0, R4  ; s
MOV             R7, #0
BL              strchr
SUBS            R8, R0, #0
MOVNE           R3, #0
STRBNE          R3, [R8]

loc_38818               ; s
MOV             R0, R11
BL              strlen
MOV             R1, R4  ; s2
MOV             R2, R0  ; n
MOV             R6, R0
MOV             R0, R11 ; s1
BL              strncasecmp
CMP             R0, #0
BNE             loc_38870
LDRB            R2, [R4,R6]
CMP             R2, #0
BNE             loc_38870
LDR             R3, =dword_638F0
LDR             R3, [R3,R7,LSL#2]
CMP             R3, #0
ANDLT           R5, R5, R3
ORRGE           R5, R5, R3

loc_3885C
CMP             R8, #0
BEQ             loc_388E8
MOV             R4, R8
STRB            R10, [R4],#1
B               loc_387F8

loc_38870
ADD             R7, R7, #1
ADD             R6, R6, #1
CMP             R7, #0x28 ; '('
ADD             R11, R11, R6
BNE             loc_38818
LDRB            R3, [R4]
CMP             R3, #0
CMPNE           R9, #0
BEQ             loc_3885C
LDR             R7, [R9]
CMP             R7, #0
MOVEQ           R6, R7
BEQ             loc_388B0
MOV             R0, R7  ; s
BL              strlen
MOV             R6, R0

loc_388B0               ; s
MOV             R0, R4
BL              strlen
ADD             R1, R0, R6
MOV             R0, R7
ADD             R1, R1, #2
BL              sub_174B4
CMP             R6, #0
STR             R0, [R9]
STRBNE          R10, [R0,R6]
ADDNE           R6, R6, #1
MOV             R1, R4  ; src
ADD             R0, R0, R6 ; dest
BL              strcpy
B               loc_3885C

loc_388E8
MOV             R0, R5
POP             {R3-R11,PC}
; End of function sub_387E4

off_388F0 DCD aLoop     ; "loop"
off_388F4 DCD dword_638F0



; void __fastcall sub_388F8(void **, const char *)
sub_388F8
LDR             R3, [R0]
PUSH            {R4-R10,LR}
MOV             R7, R0
MOV             R4, R1
CMP             R3, #0
BEQ             loc_38920
LDRB            R3, [R3]
CMP             R3, #0
LDRNE           R9, =aSS_5 ; "%s,%.*s"
BNE             loc_3896C

loc_38920
MOV             R0, R4
BL              sub_174F8
STR             R0, [R7]
POP             {R4-R10,PC}

loc_38930
MOV             R3, R4
MOV             R2, R5
MOV             R1, R8
MOV             R0, R9
BL              sub_177E4
MOV             R6, R0
LDR             R0, [R7] ; ptr
BL              free
STR             R6, [R7]

loc_38954
ADD             R5, R4, R5

loc_38958
MOV             R4, R5
ADD             R5, R5, #1
LDRB            R3, [R4]
CMP             R3, #0x2C ; ','
BEQ             loc_38958

loc_3896C
LDRB            R3, [R4]
CMP             R3, #0
POPEQ           {R4-R10,PC}
MOV             R0, R4  ; s
BL              strlen
MOV             R1, #0x2C ; ',' ; c
MOV             R5, R0
MOV             R0, R4  ; s
BL              strchr
LDR             R8, [R7]
CMP             R0, #0
SUBNE           R5, R0, R4
MOV             R6, R8

loc_389A0               ; n
MOV             R2, R5
MOV             R1, R4  ; s2
MOV             R0, R6  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_389C8
LDRB            R3, [R6,R5]
CMP             R3, #0
CMPNE           R3, #0x2C ; ','
BEQ             loc_38954

loc_389C8               ; c
MOV             R1, #0x2C ; ','
MOV             R0, R6  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_38930
ADD             R6, R0, #1
B               loc_389A0
; End of function sub_388F8

off_389E4 DCD aSS_5     ; "%s,%.*s"



; int __fastcall sub_389E8(const char **, int, void *data)
sub_389E8

data= -0xC

LDR             R3, =dword_7DB94
PUSH            {R0-R2,R4-R9,LR}
MOV             R5, R0
LDR             R9, =aSIsWriteProtec ; "%s is write-protected, mounting read-on"...
MOV             R7, R2
BIC             R4, R1, #0x60000000
MOV             R8, #0
LDR             R6, [R3]

loc_38A08
STR             R8, [R6]
MOV             R3, R4  ; rwflag
STR             R7, [SP,#0xC+data] ; data
LDM             R5, {R0-R2} ; fstype
BL              mount
CMP             R0, #0
BEQ             loc_38A68
TST             R4, #1
LDR             R3, [R6]
BNE             loc_38A60
CMP             R3, #0xD
CMPNE           R3, #0x1E
BNE             loc_38A60
TST             R4, #0x8000
LDR             R1, [R5]
BNE             loc_38A50
MOV             R0, R9
BL              sub_16DDC

loc_38A50
ORR             R4, R4, #1
B               loc_38A08

loc_38A58
LDR             R0, =aPermissionDeni ; "permission denied (are you root?)"
BL              sub_16DBC

loc_38A60
CMP             R3, #1
BEQ             loc_38A58

loc_38A68
ADD             SP, SP, #0xC
POP             {R4-R9,PC}
; End of function sub_389E8

off_38A70 DCD dword_7DB94
off_38A74 DCD aSIsWriteProtec ; "%s is write-protected, mounting read-on"...
off_38A78 DCD aPermissionDeni ; "permission denied (are you root?)"



; int __fastcall sub_38A7C(const char **, char)
sub_38A7C

var_84= -0x84
var_7C= -0x7C
var_78= -0x78
haystack= -0x74
var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x84
LDR             R9, =dword_7DB94
MOV             R3, #0
ADD             R8, SP, #0x84+var_4
MOV             R4, R0
STR             R3, [R8,#-0x70]!
LDR             R2, [R9]
STR             R1, [SP,#0x84+var_78]
MOV             R1, R8
LDR             R0, [R0,#0xC] ; s
STR             R3, [R2]
BL              sub_387E4
MOV             R6, R0
LDR             R0, [R4,#8] ; s1
CMP             R0, #0
BEQ             loc_38AD0
LDR             R1, =aAuto ; "auto"
BL              strcmp
CMP             R0, #0
STREQ           R0, [R4,#8]

loc_38AD0
LDR             R7, [R4,#8]
CMP             R7, #0
BEQ             loc_38AF0
LDR             R1, =aCifs ; "cifs"
MOV             R0, R7  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_38D04

loc_38AF0
LDR             R5, [R4]
LDRB            R3, [R5]
CMP             R3, #0x5C ; '\'
CMPNE           R3, #0x2F ; '/'
BNE             loc_38C50
LDRB            R2, [R5,#1]
CMP             R2, R3
BNE             loc_38C50
ADD             R5, R5, #2
LDR             R1, =asc_68E8E ; "/\\"
MOV             R0, R5  ; s
BL              strcspn
CMP             R0, #0
ADD             R3, R0, #1
ADD             R7, R5, R3
BNE             loc_38B70

loc_38B30
MOV             R8, #0xFFFFFFFF

loc_38B34
LDR             R3, [R9]
LDR             R2, [SP,#0x84+var_78]
LDR             R3, [R3]
CMP             R3, #0x10
MOVNE           R2, #0
ANDEQ           R2, R2, #1
CMP             R2, #0
MOVNE           R8, #0
BNE             loc_38CF8
CMP             R8, #0
BEQ             loc_38CF8
LDM             R4, {R1,R2}
LDR             R0, =aMountingSOnSFa ; "mounting %s on %s failed"
BL              sub_16AF4
B               loc_38CF8

loc_38B70
LDRB            R10, [R7,#-1]
CMP             R10, #0
BEQ             loc_38B30
LDRB            R3, [R5,R3]
CMP             R3, #0
BEQ             loc_38B30
MOV             R11, #0
LDR             R1, =asc_68E8E ; "/\\"
STRB            R11, [R7,#-1]
MOV             R0, R7  ; s
BL              strcspn
LDRB            R12, [R7,R0]
ADD             R3, R0, #1
LDR             LR, =aUncSS ; "unc=\\\\%s\\%.*s"
ADD             R3, R7, R3
MOV             R2, R0
MOV             R1, R5
CMP             R12, R11
STR             R3, [SP,#0x84+var_84]
LDR             R0, =aUncSSPrefixpat ; "unc=\\\\%s\\%.*s,prefixpath=%s"
MOV             R3, R7
MOVEQ           R0, LR
BL              sub_177E4
MOV             R1, R8
BL              sub_387E4
MOV             R0, R5
MOV             R1, R11
BL              sub_6247C
SUBS            R5, R0, #0
STRB            R10, [R7,#-1]
BEQ             loc_38B30
LDR             R1, =(aIp+1) ; "ip="
LDR             R0, [SP,#0x84+haystack]
BL              sub_1684C
CMP             R0, R11
BNE             loc_38C30
LDR             R1, =aIp ; ",ip="
LDR             R0, [SP,#0x84+haystack] ; haystack
BL              strstr
CMP             R0, R11
BNE             loc_38C30
ADD             R0, R5, #4
BL              sub_6249C
MOV             R1, R0
LDR             R0, =aIpS_0 ; "ip=%s"
BL              sub_177E4
MOV             R1, R8
BL              sub_387E4

loc_38C30               ; data
LDR             R2, [SP,#0x84+haystack]
LDR             R3, =aCifs ; "cifs"
STR             R3, [R4,#8]

loc_38C3C               ; int
MOV             R1, R6
MOV             R0, R4  ; int
BL              sub_389E8
MOV             R8, R0
B               loc_38B34

loc_38C50
CMP             R7, #0
BNE             loc_38D04

loc_38C58
LDR             R7, [R4]
MOV             R1, #0x3A ; ':' ; c
MOV             R0, R7  ; s
BL              strchr
CMP             R0, #0
BNE             loc_38D1C

loc_38C70
ADD             R1, SP, #0x84+var_6C
LDR             R0, [R4]
BLX             sub_62DFC
SUBS            R5, R0, #0
BNE             loc_38DB4
MOVW            R7, #0x3020
ANDS            R7, R6, R7
BNE             loc_38DB8
LDR             R3, [SP,#0x84+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BNE             loc_38D94
LDR             R0, [R4]
BL              sub_60DE0
AND             R3, R6, #1
STR             R7, [R4]
ORR             R3, R3, #4
MOV             R1, R0
STR             R3, [SP,#0x84+var_84]
MOV             R5, R0
MOV             R2, #0
MOV             R3, #0
MOV             R0, R4
BL              sub_5D594
SUBS            R7, R0, #0
BGE             loc_38DBC
LDR             R4, [R9]
LDR             R3, [R4]
CMP             R3, #0xD
CMPNE           R3, #1
BNE             loc_38D88
LDR             R0, =aPermissionDeni ; "permission denied (are you root?)"
BL              sub_16DDC

loc_38CF4
LDR             R8, [R4]

loc_38CF8
MOV             R0, R8
ADD             SP, SP, #0x84
POP             {R4-R11,PC}

loc_38D04
LDR             R1, =aNfs ; "nfs"
MOV             R0, R7
BL              sub_1684C
CMP             R0, #0
BNE             loc_38C58
B               loc_38C70

loc_38D1C
LDR             R3, [R4,#8]
MOV             R1, #0x3A ; ':' ; c
MOV             R0, R7  ; s
LDR             R5, [SP,#0x84+haystack]
CMP             R3, #0
LDREQ           R3, =aNfs ; "nfs"
STREQ           R3, [R4,#8]
BL              strchr
MOV             R1, #0
MOV             R7, R0
STRB            R1, [R0]
LDR             R0, [R4]
BL              sub_62484
MOV             R3, #0x3A ; ':'
ADD             R0, R0, #4
STRB            R3, [R7]
BL              sub_6249C
CMP             R5, #0
MOV             R3, R0
LDREQ           R5, =(asc_6B39D+1) ; ""
LDRNE           R2, =(aNoCarrier+0xA) ; ","
LDR             R0, =aSSaddrS ; "%s%saddr=%s"
MOVEQ           R2, R5
MOV             R1, R5
BL              sub_177E4
MOV             R2, R0
B               loc_38C3C

loc_38D88
LDR             R0, =aCanTSetupLoopD ; "can't setup loop device"
BL              sub_16AF4
B               loc_38CF4

loc_38D94
CMP             R3, #0x4000
LDR             R5, [R4,#8]
BNE             loc_38DAC
CMP             R5, #0
ORREQ           R6, R6, #0x1000
BEQ             loc_38DB8

loc_38DAC
MOV             R5, R7
B               loc_38DB8

loc_38DB4
MOV             R5, #0

loc_38DB8
MOV             R7, #0xFFFFFFFF

loc_38DBC
LDR             R3, [R4,#8]
CMP             R3, #0
BNE             loc_38DD4
MOVW            R3, #0x3020
TST             R6, R3
BEQ             loc_38E24

loc_38DD4
MOV             R10, #0

loc_38DD8
LDR             R11, [R4,#8]
CMP             R11, #0
BEQ             loc_38DF8
MOV             R0, R11 ; s
MOV             R1, #0x2C ; ',' ; c
BL              strchr
SUBS            R11, R0, #0
STRBNE          R10, [R11]

loc_38DF8               ; data
LDR             R2, [SP,#0x84+haystack]
MOV             R1, R6  ; int
MOV             R0, R4  ; int
BL              sub_389E8
CMP             R11, #0
CMPNE           R0, #0
MOV             R8, R0
BEQ             loc_38E48
ADD             R11, R11, #1
STR             R11, [R4,#8]
B               loc_38DD8

loc_38E24
LDR             R10, =buf
LDR             R8, [R10]
CMP             R8, #0
STREQ           R8, [SP,#0x84+var_70]
BEQ             loc_38E74

loc_38E38
LDR             R10, [R10]
MOV             R8, #0xFFFFFFFF

loc_38E40
CMP             R10, #0
BNE             loc_38F20

loc_38E48
CMP             R8, #0
CMPNE           R5, #0
BEQ             loc_38E5C
LDR             R0, [R4]
BL              sub_5D55C

loc_38E5C
CMN             R7, #1
BEQ             loc_38B34
MOV             R0, R7  ; fd
BL              close
B               loc_38B34

loc_38E70
MOV             R8, #1

loc_38E74
LDR             R2, =aEtcFilesystems ; "/etc/filesystems"
MOV             R3, #0x12
MLA             R0, R3, R8, R2
BL              sub_61C9C
SUBS            R3, R0, #0
STR             R3, [SP,#0x84+var_7C]
BNE             loc_38F0C

loc_38E90
CMP             R8, #1
BNE             loc_38E70
LDR             R3, [SP,#0x84+var_70]
STR             R3, [R10]
B               loc_38E38

loc_38EA4
LDR             R1, =aNodev ; "nodev"
BL              sub_1684C
CMP             R0, #0
BEQ             loc_38EC8
LDRB            R3, [R11,#5]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BLS             loc_38F04

loc_38EC8
MOV             R0, R11
BL              sub_60E74
LDRB            R2, [R0]
CMP             R2, #0x2A ; '*'
CMPNE           R2, #0x23 ; '#'
MOVEQ           R3, #1
MOVNE           R3, #0
CMP             R2, #0
MOVEQ           R3, #1
CMP             R3, #0
BNE             loc_38F04
BL              sub_174F8
MOV             R1, R0
ADD             R0, SP, #0x84+var_70
BL              sub_5D2C8

loc_38F04               ; ptr
MOV             R0, R11
BL              free

loc_38F0C
LDR             R0, [SP,#0x84+var_7C]
BL              sub_58D24
SUBS            R11, R0, #0
BNE             loc_38EA4
B               loc_38E90

loc_38F20
LDR             R3, [R10,#4]
MOV             R1, R6  ; int
LDR             R2, [SP,#0x84+haystack] ; data
MOV             R0, R4  ; int
STR             R3, [R4,#8]
BL              sub_389E8
SUBS            R8, R0, #0
BEQ             loc_38E48
LDR             R10, [R10]
B               loc_38E40
; End of function sub_38A7C

off_38F48 DCD dword_7DB94
off_38F4C DCD aAuto     ; "auto"
off_38F50 DCD aCifs     ; "cifs"
off_38F54 DCD asc_68E8E ; "/\\"
off_38F58 DCD aMountingSOnSFa ; "mounting %s on %s failed"
off_38F5C DCD aUncSS    ; "unc=\\\\%s\\%.*s"
off_38F60 DCD aUncSSPrefixpat ; "unc=\\\\%s\\%.*s,prefixpath=%s"
off_38F64 DCD aIp+1     ; "ip="
off_38F68 DCD aIp       ; ",ip="
off_38F6C DCD aIpS_0    ; "ip=%s"
off_38F70 DCD aPermissionDeni ; "permission denied (are you root?)"
off_38F74 DCD aNfs      ; "nfs"
off_38F78 DCD asc_6B39D+1 ; ""
off_38F7C DCD aNoCarrier+0xA ; ","
off_38F80 DCD aSSaddrS  ; "%s%saddr=%s"
off_38F84 DCD aCanTSetupLoopD ; "can't setup loop device"
off_38F88 DCD buf
off_38F8C DCD aEtcFilesystems ; "/etc/filesystems"
off_38F90 DCD aNodev    ; "nodev"



; int __fastcall sub_38F94(int, char **)
sub_38F94

data= -0x6C
var_68= -0x68
s1= -0x60
var_5C= -0x5C
var_58= -0x58
stream= -0x54
var_50= -0x50
s= -0x48
s2= -0x44
var_40= -0x40
var_3C= -0x3C
file= -0x38
result= -0x34
var_1C= -0x1C

PUSH            {R4-R11,LR}
MOV             R0, #1
SUB             SP, SP, #0x6C
MOV             R6, R1
MOV             R5, R6
MOV             R4, #1
BL              sub_174DC
MOV             R3, #0
STR             R0, [SP,#0x6C+s]
STR             R3, [SP,#0x6C+s2]
STR             R3, [SP,#0x6C+var_40]
STR             R3, [SP,#0x6C+var_3C]
LDR             R3, =aEtcFstab ; "/etc/fstab"
STR             R3, [SP,#0x6C+file]
BL              sub_5D500

loc_38FD0
LDR             R1, [R5,#4]!
CMP             R1, #0
BNE             loc_390A8
ADD             R3, SP, #0x6C+file
STR             R1, [R6,R4,LSL#2]
STR             R3, [SP,#0x6C+var_68]
ADD             R3, SP, #0x6C+var_40
STR             R3, [SP,#0x6C+data]
ADD             R2, SP, #0x6C+var_3C
ADD             R3, SP, #0x6C+s2
LDR             R1, =aOTRwanfvsioT ; "^o:*t:rwanfvsiO:T:"
MOV             R0, R6
BL              sub_593CC
MOV             R4, R0

loc_39008
LDR             R3, [SP,#0x6C+var_3C]
CMP             R3, #0
BNE             loc_390DC
TST             R4, #4
BEQ             loc_39028
LDR             R1, =(aDivideByZero+0xC) ; "ro"
ADD             R0, SP, #0x6C+s
BL              sub_388F8

loc_39028
TST             R4, #8
BEQ             loc_3903C
LDR             R1, =aRw ; "rw"
ADD             R0, SP, #0x6C+s
BL              sub_388F8

loc_3903C
LDR             R3, =optind
LDR             R10, [R3]
LDR             R8, [R6,R10,LSL#2]
ADD             R3, R6, R10,LSL#2
CMP             R8, #0
STR             R3, [SP,#0x6C+var_58]
BNE             loc_39140
TST             R4, #0x10
BNE             loc_39188
LDR             R1, =(aNTR+5) ; "r"
LDR             R0, =file ; "/proc/mounts"
BL              setmntent
SUBS            R5, R0, #0
BEQ             loc_390F4
LDR             R6, =buf.c_oflag
LDR             R7, =aSOnSTypeSS ; "%s on %s type %s (%s)\n"

loc_3907C               ; bufsize
MOV             R3, #0x3FC
MOV             R2, R6  ; buffer
ADD             R1, SP, #0x6C+result ; result
MOV             R0, R5  ; stream
BL              getmntent_r
CMP             R0, #0
BNE             loc_39100

loc_39098
MOV             R7, #0

loc_3909C
MOV             R0, R7
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R11,PC}

loc_390A8
LDRB            R3, [R1]
CMP             R3, #0x2D ; '-'
BNE             loc_390D0
LDRB            R3, [R1,#1]
CMP             R3, #0x2D ; '-'
BNE             loc_390D0
ADD             R1, R1, #2
ADD             R0, SP, #0x6C+s
BL              sub_388F8
B               loc_38FD0

loc_390D0
STR             R1, [R6,R4,LSL#2]
ADD             R4, R4, #1
B               loc_38FD0

loc_390DC
ADD             R0, SP, #0x6C+var_3C
BL              sub_5D2FC
MOV             R1, R0
ADD             R0, SP, #0x6C+s
BL              sub_388F8
B               loc_39008

loc_390F4
LDR             R1, =file ; "/proc/mounts"
LDR             R0, =aNoS ; "no %s"
BL              sub_16DBC

loc_39100               ; s2
LDR             R1, [SP,#0x6C+s2]
LDR             R4, [SP,#0x6C+result.mnt_type]
CMP             R1, #0
BEQ             loc_39120
MOV             R0, R4  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_3907C

loc_39120
LDR             R3, [SP,#0x6C+result.mnt_opts]
MOV             R0, R7  ; format
LDR             R2, [SP,#0x6C+result.mnt_dir]
LDR             R1, [SP,#0x6C+result]
STR             R3, [SP,#0x6C+data]
MOV             R3, R4
BL              printf
B               loc_3907C

loc_39140
ADD             R3, R6, R10,LSL#2
LDR             R3, [R3,#4]
CMP             R3, #0
BEQ             loc_3917C
STR             R3, [SP,#0x6C+result.mnt_dir]
MOV             R1, #0
LDR             R3, [SP,#0x6C+s2]
ADD             R0, SP, #0x6C+result
STR             R8, [SP,#0x6C+result]
STR             R3, [SP,#0x6C+result.mnt_type]
LDR             R3, [SP,#0x6C+s]
STR             R3, [SP,#0x6C+result.mnt_opts]

loc_39170
BL              sub_38A7C
MOV             R7, R0
B               loc_3909C

loc_3917C
MOV             R0, R8
BL              sub_60DE0
MOV             R8, R0

loc_39188
MOV             R1, #0
LDR             R0, [SP,#0x6C+s] ; s
BL              sub_387E4
TST             R0, #0x1E0000
MOV             R3, R0  ; rwflag
BEQ             loc_391C4
LDR             R2, =(asc_6B39D+1) ; fstype
STR             R2, [SP,#0x6C+data] ; data
MOV             R0, R2  ; special_file
LDR             R1, [R6,R10,LSL#2] ; dir
BL              mount
CMP             R0, #0
BEQ             loc_39098
LDR             R0, [R6,R10,LSL#2]
BL              sub_16B90

loc_391C4
TST             R0, #0x20
LDR             R1, =(aNTR+5) ; "r"
LDRNE           R3, =file ; "/proc/mounts"
STRNE           R3, [SP,#0x6C+file]
LDR             R0, [SP,#0x6C+file] ; file
BL              setmntent
SUBS            R3, R0, #0
STR             R3, [SP,#0x6C+stream]
BNE             loc_391F4
LDR             R1, [SP,#0x6C+file]
LDR             R0, =aCanTReadS ; "can't read '%s'"
BL              sub_16B40

loc_391F4
ADD             R4, SP, #0x6C+result
MOV             R7, #0
MOV             R2, #0x30 ; '0' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x6C+result ; s
BL              memset

loc_3920C
ADD             R5, SP, #0x6C+var_1C
LDR             R2, =0x7D992
B               loc_3922C

loc_39218
MOV             R4, R5

loc_3921C
ADD             R5, SP, #0x6C+result
CMP             R4, R5
BEQ             loc_3920C
LDR             R2, =buf.c_oflag ; buffer

loc_3922C               ; bufsize
MOVW            R3, #0x1FE
MOV             R1, R4  ; result
LDR             R0, [SP,#0x6C+stream] ; stream
BL              getmntent_r
SUBS            R9, R0, #0
BNE             loc_39268
LDR             R1, [R6,R10,LSL#2]
CMP             R1, #0
BEQ             loc_3909C
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_39428
LDR             R2, [SP,#0x6C+file]
LDR             R0, =aCanTFindSInS ; "can't find %s in %s"
BL              sub_16DBC

loc_39268
LDR             R3, [SP,#0x6C+var_58]
LDR             R9, [R3]
CMP             R9, #0
BEQ             loc_392D4
LDR             R11, [R4]
MOV             R0, R9  ; s1
MOV             R1, R11 ; s2
BL              strcmp
CMP             R0, #0
BEQ             loc_39218
MOV             R1, R11 ; s2
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_39218
LDR             R11, [R4,#4]
MOV             R0, R9  ; s1
MOV             R1, R11 ; s2
BL              strcmp
CMP             R0, #0
BEQ             loc_39218
MOV             R1, R11 ; s2
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
MOVEQ           R4, R5
B               loc_3921C

loc_392D4
LDR             R1, [SP,#0x6C+s2]
LDR             R0, [R4,#8]
BL              sub_5D9F8
CMP             R0, #0
BEQ             loc_3921C
MOV             R1, R9
LDR             R0, [R4,#0xC] ; s
BL              sub_387E4
TST             R0, #0x60000000
BNE             loc_3921C
LDR             R1, =aSwap ; "swap"
LDR             R0, [R4,#8] ; s1
BL              strcasecmp
CMP             R0, #0
BEQ             loc_3921C
LDR             R5, [SP,#0x6C+var_40]
LDR             R3, [R4,#0xC]
CMP             R5, #0
STR             R3, [SP,#0x6C+s1]
BEQ             loc_39330

loc_39324
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_39370

loc_39330
LDR             R0, [SP,#0x6C+s1]
BL              sub_174F8
MOV             R1, #0
STR             R0, [R4,#0xC]
LDR             R0, [R4,#4]
BL              sub_58A20
CMP             R0, #0
BNE             loc_39364
MOV             R1, #1
MOV             R0, R4
BL              sub_38A7C
CMP             R0, #0
ADDNE           R7, R7, #1

loc_39364               ; ptr
LDR             R0, [R4,#0xC]
BL              free
B               loc_3921C

loc_39370
CMP             R3, #0x6E ; 'n'
BNE             loc_3938C
LDRB            R3, [R5,#1]
CMP             R3, #0x6F ; 'o'
ADDEQ           R5, R5, #2
MOVEQ           R11, #1
BEQ             loc_39390

loc_3938C
MOV             R11, #0

loc_39390
MOV             R1, #0x2C ; ','
MOV             R0, R5
BL              strchrnul
LDR             R9, [SP,#0x6C+s1]
SUB             R3, R0, R5
STR             R0, [SP,#0x6C+var_5C]

loc_393A8               ; n
MOV             R2, R3
MOV             R1, R5  ; s2
MOV             R0, R9  ; s1
STR             R3, [SP,#0x6C+var_50]
BL              strncmp
CMP             R0, #0
LDR             R3, [SP,#0x6C+var_50]
BNE             loc_393FC
LDRB            R2, [R9,R3]
CMP             R2, #0x2C ; ','
CMPNE           R2, #0
BNE             loc_393FC
CMP             R11, #0
BNE             loc_3921C

loc_393E0
LDR             R2, [SP,#0x6C+var_5C]
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_39330
ADD             R3, R3, #1
ADD             R5, R5, R3
B               loc_39324

loc_393FC               ; c
MOV             R1, #0x2C ; ','
MOV             R0, R9  ; s
STR             R3, [SP,#0x6C+var_50]
BL              strchr
CMP             R0, #0
LDR             R3, [SP,#0x6C+var_50]
ADDNE           R9, R0, #1
BNE             loc_393A8
CMP             R11, #0
BEQ             loc_3921C
B               loc_393E0

loc_39428
LDR             R0, [R5,#0xC]
BL              sub_174F8
MOV             R3, R5
LDR             R1, [SP,#0x6C+s]
STR             R0, [R3,#0xC]!
MOV             R0, R3
BL              sub_388F8
MOV             R1, R9
MOV             R0, R5
B               loc_39170
; End of function sub_38F94

off_39450 DCD aEtcFstab ; "/etc/fstab"
off_39454 DCD aOTRwanfvsioT ; "^o:*t:rwanfvsiO:T:"
off_39458 DCD aDivideByZero+0xC ; "ro"
off_3945C DCD aRw       ; "rw"
off_39460 DCD optind
off_39464 DCD aNTR+5    ; "r"
off_39468 DCD file      ; "/proc/mounts"
off_3946C DCD buf.c_oflag
off_39470 DCD aSOnSTypeSS ; "%s on %s type %s (%s)\n"
off_39474 DCD aNoS      ; "no %s"
off_39478 DCD asc_6B39D+1 ; ""
off_3947C DCD aCanTReadS ; "can't read '%s'"
dword_39480 DCD 0x7D992
off_39484 DCD aCanTFindSInS ; "can't find %s in %s"
off_39488 DCD aSwap     ; "swap"


; Attributes: noreturn

; void __fastcall __noreturn sub_3948C(int, char **)
sub_3948C
LDR             R3, =dword_7DB90
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R0, R5
LDR             R1, =aR_0 ; "+R"
LDR             R3, [R3]
LDRB            R3, [R3,#5]
CMP             R3, #0x36 ; '6'
MOVNE           R4, #8
MOVEQ           R4, #0
BL              sub_593CC
CMP             R0, #0
ORRNE           R4, R4, #0x40000
MOV             R0, R4  ; persona
BL              personality
CMP             R0, #0
BGE             loc_394DC
MOV             R1, R4
LDR             R0, =aPersonality0xL ; "personality(0x%lx)"
BL              sub_16B40

loc_394DC
LDR             R3, =optind
LDR             R3, [R3]
ADD             R0, R5, R3,LSL#2
LDR             R3, [R5,R3,LSL#2]
CMP             R3, #0
LDREQ           R3, =(aBinSh_0+1) ; "/bin/sh"
STREQ           R3, [R0,#-4]
SUBEQ           R0, R0, #4 ; argv
BL              sub_58840
; End of function sub_3948C

off_39500 DCD dword_7DB90
off_39504 DCD aR_0      ; "+R"
off_39508 DCD aPersonality0xL ; "personality(0x%lx)"
off_3950C DCD optind
off_39510 DCD aBinSh_0+1 ; "/bin/sh"



; unsigned int __fastcall sub_39514(const char *, unsigned int)
sub_39514
LDRB            R3, [R0]
CMP             R3, #0x2B ; '+'
BEQ             loc_39538
CMP             R3, #0x2D ; '-'
BEQ             loc_39538
MOV             R1, R0
PUSH            {R4,LR}
LDR             R0, =aInvalidCapabil ; "invalid capability '%s'"
BL              sub_16DBC

loc_39538
ADD             R0, R0, #1
B               sub_57BB4
; End of function sub_39514

off_39540 DCD aInvalidCapabil ; "invalid capability '%s'"


; Attributes: noreturn

; void __fastcall __noreturn sub_39544(int, char **)
sub_39544

var_3C= -0x3C
var_30= -0x30
s= -0x2C
var_28= -0x28
var_20= -0x20
var_1C= -0x1C
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x3C
MOV             R4, R1
ADD             R3, SP, #0x3C+s
MOV             R0, R4
STR             R3, [SP,#0x3C+var_3C]
ADD             R3, SP, #0x3C+var_30
LDR             R2, =aNnp ; "nnp"
LDR             R1, =asc_68F41 ; "+"
BL              sub_593F8
LDR             R3, =optind
TST             R0, #4
MOV             R5, R0
LDR             R6, [R3]
ADD             R7, R4, R6,LSL#2
BEQ             loc_395B0
MOV             R3, #0
MOV             R1, #1
STR             R3, [SP,#0x3C+var_3C]
MOV             R2, R3
MOV             R0, #0x26 ; '&' ; option
BL              prctl
CMP             R0, #0
BEQ             loc_395B0
LDR             R1, =aSetNoNewPrivs ; "SET_NO_NEW_PRIVS"
LDR             R0, =aPrctlS ; "prctl: %s"
BL              sub_16B40

loc_395B0
TST             R5, #1
BEQ             loc_39664
LDR             R8, [SP,#0x3C+var_30]
ADD             R0, SP, #0x3C+var_28
LDR             R10, =(aNoCarrier+0xA) ; ","
MOV             R9, #1
BL              sub_57C28
MOV             R0, R8  ; s
LDR             R1, =(aNoCarrier+0xA) ; delim
BL              strtok
MOV             R8, #0xC
MOV             R11, R0

loc_395E0
CMP             R11, #0
BNE             loc_39604
ADD             R1, SP, #0x3C+var_1C
ADD             R0, SP, #0x3C+var_28
BL              capset
CMP             R0, #0
BEQ             loc_39664
LDR             R0, =aCapset_0 ; "capset"
BL              sub_16B40

loc_39604
MOV             R0, R11
BL              sub_39514
LDR             R2, [SP,#0x3C+var_20]
MOV             R3, R0,LSR#5
CMP             R3, R2
BCC             loc_39628
MOV             R1, R11
LDR             R0, =aInvalidCapabil ; "invalid capability '%s'"
BL              sub_16DBC

loc_39628
ADD             R2, SP, #0x3C+var_4
LDRB            R1, [R11]
MLA             R3, R8, R3, R2
AND             R0, R0, #0x1F
MOV             R0, R9,LSL R0
CMP             R1, #0x2B ; '+'
LDR             R2, [R3,#-0x10]
MOV             R1, R10 ; delim
ORREQ           R0, R0, R2
BICNE           R0, R2, R0
STR             R0, [R3,#-0x10]
MOV             R0, #0  ; s
BL              strtok
MOV             R11, R0
B               loc_395E0

loc_39664
TST             R5, #2
BNE             loc_39680

loc_3966C
LDR             R3, [R4,R6,LSL#2]
CMP             R3, #0
BEQ             loc_39710
MOV             R0, R7  ; argv
BL              sub_58840

loc_39680
LDR             R8, =aCapAmbientLowe ; "cap_ambient_lower"
LDR             R9, =aCapAmbientRais ; "cap_ambient_raise"
LDR             R10, =(aNoCarrier+0xA) ; ","
LDR             R1, =(aNoCarrier+0xA) ; delim
LDR             R0, [SP,#0x3C+s] ; s
BL              strtok
MOV             R5, R0

loc_3969C
CMP             R5, #0
BEQ             loc_3966C
MOV             R0, R5
BL              sub_39514
LDRB            R3, [R5]
MOV             R2, R0
CMP             R3, #0x2B ; '+'
MOV             R3, #0
STR             R3, [SP,#0x3C+var_3C]
BNE             loc_396F0
MOV             R1, #2
MOV             R0, #0x2F ; '/' ; option
BL              prctl
CMP             R0, #0
MOVLT           R0, R9
BLT             loc_39708

loc_396DC               ; delim
MOV             R1, R10
MOV             R0, #0  ; s
BL              strtok
MOV             R5, R0
B               loc_3969C

loc_396F0
MOV             R1, #3
MOV             R0, #0x2F ; '/' ; option
BL              prctl
CMP             R0, #0
BGE             loc_396DC
MOV             R0, R8

loc_39708
BL              sub_16AF4
B               loc_396DC

loc_39710
BL              sub_162F0
; End of function sub_39544

off_39714 DCD aNnp      ; "nnp"
off_39718 DCD asc_68F41 ; "+"
off_3971C DCD optind
off_39720 DCD aSetNoNewPrivs ; "SET_NO_NEW_PRIVS"
off_39724 DCD aPrctlS   ; "prctl: %s"
off_39728 DCD aNoCarrier+0xA ; ","
off_3972C DCD aCapset_0 ; "capset"
off_39730 DCD aInvalidCapabil ; "invalid capability '%s'"
off_39734 DCD aCapAmbientLowe ; "cap_ambient_lower"
off_39738 DCD aCapAmbientRais ; "cap_ambient_raise"



; int __fastcall sub_3973C(int, char **)
sub_3973C

data= -0x34
flags= -0x28
var_20= -0x20
result= -0x1C
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x34
MOV             R4, R1
ADD             R2, SP, #0x34+var_4
MOV             R5, #0
MOV             R0, R4
STR             R5, [R2,#-0x1C]!
LDR             R1, =aFldnratCvi ; "fldnrat:cvi"
BL              sub_593CC
LDR             R3, =optind
MOV             R6, R0
LDR             R1, =(aNTR+5) ; mode
LDR             R7, [R3]
AND             R3, R0, #3
LDR             R0, =file ; "/proc/mounts"
STR             R3, [SP,#0x34+flags]
BL              setmntent
SUBS            R8, R0, #0
ADD             R11, R4, R7,LSL#2
BNE             loc_39820
ANDS            R5, R6, #0x20 ; ' '
BEQ             loc_39804
LDR             R1, =file ; "/proc/mounts"
LDR             R0, =aCanTOpenS ; "can't open '%s'"
BL              sub_16DBC

loc_397A0
LDR             R1, [SP,#0x34+var_20]
LDR             R0, [SP,#0x34+result.mnt_type]
BL              sub_5D9F8
CMP             R0, #0
BEQ             loc_397E0
MOV             R0, #0xC
BL              sub_174DC
MOV             R10, R0
STR             R5, [R0,#8]
LDR             R0, [SP,#0x34+result]
MOV             R5, R10
BL              sub_174F8
STR             R0, [R10,#4]
LDR             R0, [SP,#0x34+result.mnt_dir]
BL              sub_174F8
STR             R0, [R10]

loc_397E0               ; bufsize
MOV             R3, #0x400
MOV             R2, R9  ; buffer
ADD             R1, SP, #0x34+result ; result
MOV             R0, R8  ; stream
BL              getmntent_r
CMP             R0, #0
BNE             loc_397A0
MOV             R0, R8  ; stream
BL              endmntent

loc_39804
ANDS            R10, R6, #0x20 ; ' '
LDR             R3, [R4,R7,LSL#2]
BNE             loc_39828
CMP             R3, #0
MOVNE           R4, R10
BNE             loc_3982C
BL              sub_162F0

loc_39820
LDR             R9, =buf
B               loc_397E0

loc_39828
MOV             R4, R5

loc_3982C
MOV             R9, #0

loc_39830
MOVS            R3, R10
LDR             R7, [R11]
MOVNE           R3, #1
CMP             R4, #0
BEQ             loc_39858
LDR             R0, [R4]
BL              sub_174F8
MOV             R8, R0

loc_39850
LDR             R7, [R4]
B               loc_3987C

loc_39858
CMP             R7, #0
MOVEQ           R3, #1
CMP             R3, #0
BNE             loc_3999C
MOV             R0, R7
ADD             R11, R11, #4
BL              sub_17CF0
SUBS            R8, R0, #0
BNE             loc_39954

loc_3987C               ; flags
LDR             R1, [SP,#0x34+flags]
MOV             R0, R7  ; special_file
BL              umount2
CMP             R0, #0
BEQ             loc_39980
TST             R6, #0x10
BEQ             loc_3995C
LDR             R3, =dword_7DB94
CMP             R4, #0
LDR             R3, [R3]
LDR             R2, [R3]
SUB             R3, R2, #0x10
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVEQ           R3, #0
CMP             R3, #0
BEQ             loc_3995C
MOV             R2, #0  ; fstype
MOV             R3, #0x21 ; '!' ; rwflag
STR             R2, [SP,#0x34+data] ; data
MOV             R1, R7  ; dir
LDR             R0, [R4,#4] ; special_file
BL              mount
LDR             R3, =aCanTRemountSRe ; "can't remount %s read-only"
CMP             R0, #0
LDR             R1, [R4,#4]
MOVNE           R9, #1
LDR             R0, =aSBusyRemounted ; "%s busy - remounted read-only"
MOVNE           R0, R3
BL              sub_16DDC

loc_398F4
LDR             R4, [R4,#8]
CMP             R4, #0
BEQ             loc_39974
CMP             R10, #0
BNE             loc_39974
LDR             R1, [R4,#4] ; s2
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
B               loc_39970

loc_3991C               ; s2
LDR             R1, [R4]
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_39850
LDR             R1, [R4,#4] ; s2
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_39850
LDR             R4, [R4,#8]

loc_39948
CMP             R4, #0
BNE             loc_3991C
B               loc_3987C

loc_39954
MOV             R4, R5
B               loc_39948

loc_3995C
MOV             R9, #1
MOV             R1, R7
LDR             R0, =aCanTUnmountS ; "can't unmount %s"
BL              sub_16AF4

loc_3996C
CMP             R4, #0

loc_39970
BNE             loc_398F4

loc_39974               ; ptr
MOV             R0, R8
BL              free
B               loc_39830

loc_39980
TST             R6, #4
BEQ             loc_3996C
CMP             R4, #0
BEQ             loc_39974
LDR             R0, [R4,#4]
BL              sub_5D55C
B               loc_398F4

loc_3999C
MOV             R0, R9
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R11,PC}
; End of function sub_3973C

off_399A8 DCD aFldnratCvi ; "fldnrat:cvi"
off_399AC DCD optind
off_399B0 DCD aNTR+5    ; "r"
off_399B4 DCD file      ; "/proc/mounts"
off_399B8 DCD aCanTOpenS ; "can't open '%s'"
off_399BC DCD buf
off_399C0 DCD dword_7DB94
off_399C4 DCD aCanTRemountSRe ; "can't remount %s read-only"
off_399C8 DCD aSBusyRemounted ; "%s busy - remounted read-only"
off_399CC DCD aCanTUnmountS ; "can't unmount %s"



; int __fastcall sub_399D0(int result, int, int, int)
sub_399D0
ADD             R1, R0, R1,LSL#2
ADD             R2, R0, R2,LSL#2

loc_399D8
CMP             R3, #0
BXLE            LR
LDR             R0, [R1]
SUB             R3, R3, #1
LDR             R12, [R2]
STR             R12, [R1],#4
STR             R0, [R2],#4
B               loc_399D8
; End of function sub_399D0




; int __fastcall sub_399F8(_DWORD *)
sub_399F8

var_B58= -0xB58
var_B54= -0xB54
var_B50= -0xB50
var_B4C= -0xB4C
var_B48= -0xB48
var_B44= -0xB44
var_B40= -0xB40
var_B3C= -0xB3C
var_B38= -0xB38
var_B34= -0xB34
var_B30= -0xB30
var_B28= -0xB28
var_998= -0x998
var_808= -0x808
var_40C= -0x40C
var_408= -0x408
var_C= -0xC

LDR             R3, [R0,#0x34]
MOVW            R1, #0x101
PUSH            {R4-R11,LR}
SUB             SP, SP, #0xB50
SUB             SP, SP, #0xC
LDR             R5, [R0,#8]
ADD             R2, SP, #0xB5C+var_40C
STR             R3, [SP,#0xB5C+var_B58]
MOV             R3, #0
LDR             R8, [R0,#0xC]
ADD             R2, R2, #4
LDR             R6, [R0,#0x10]
MOV             R0, R3

loc_39A2C
STR             R0, [R2,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, R1
BNE             loc_39A2C
MOV             R1, R8

loc_39A40
LDR             R0, [SP,#0xB5C+var_B58]
SUB             R3, R1, R8
CMP             R0, R3
BGT             loc_39D20
MOV             R3, #0

loc_39A54
LDR             R1, [R2,R3,LSL#2]
ADD             R0, SP, #0xB5C+var_808
STR             R1, [R0,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x100
BNE             loc_39A54
LDR             R1, [SP,#0xB5C+var_408]
MOV             R3, #1
MOVW            R0, #0x101

loc_39A78
LDR             R12, [R2,R3,LSL#2]
ADD             R1, R1, R12
STR             R1, [R2,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, R0
BNE             loc_39A78
MOV             R3, #0

loc_39A94
LDR             R1, [SP,#0xB5C+var_B58]
CMP             R3, R1
BLT             loc_39D40
MOV             R0, R1,LSR#5
MOV             R3, R1
MOV             R1, #0
ADD             R0, R0, #2
MOV             R12, R1

loc_39AB4
STR             R12, [R6,R1,LSL#2]
ADD             R1, R1, #1
CMP             R0, R1
BGT             loc_39AB4
MOV             R1, #0
MOV             R4, #1

loc_39ACC
LDR             R0, [R2,R1,LSL#2]
ADD             R1, R1, #1
CMP             R1, #0x100
MOV             LR, R0,ASR#5
AND             R0, R0, #0x1F
LDR             R12, [R6,LR,LSL#2]
ORR             R0, R12, R4,LSL R0
STR             R0, [R6,LR,LSL#2]
BNE             loc_39ACC
LDR             R2, [SP,#0xB5C+var_B58]
MOV             R0, #1
ADD             R12, R2, #0x40 ; '@'

loc_39AFC
MOV             R1, R3,ASR#5
AND             LR, R3, #0x1F
LDR             R2, [R6,R1,LSL#2]
ORR             R2, R2, R0,LSL LR
STR             R2, [R6,R1,LSL#2]
ADD             R2, R3, #1
MOV             LR, R2,ASR#5
ADD             R3, R3, #2
AND             R2, R2, #0x1F
LDR             R1, [R6,LR,LSL#2]
CMP             R12, R3
BIC             R2, R1, R0,LSL R2
STR             R2, [R6,LR,LSL#2]
BNE             loc_39AFC
MOV             R3, #1
STR             R3, [SP,#0xB5C+var_B40]

loc_39B3C
MOV             R1, #0
MOV             R3, R1

loc_39B44
LDR             R2, [SP,#0xB5C+var_B58]
CMP             R3, R2
BLT             loc_39D68
MOV             R3, #0
STR             R3, [SP,#0xB5C+var_B38]
MOV             R3, #0xFFFFFFFF
STR             R3, [SP,#0xB5C+var_B4C]

loc_39B60
LDR             R3, [SP,#0xB5C+var_B4C]
ADD             R4, R3, #1

loc_39B68
MOV             R2, R4,ASR#5
AND             R3, R4, #0x1F
MOV             R1, #1
LDR             R2, [R6,R2,LSL#2]
ANDS            R2, R2, R1,LSL R3
BEQ             loc_39BB0
CMP             R3, #0
BNE             loc_39DA0

loc_39B88
MOV             R3, R4,ASR#5
LDR             R3, [R6,R3,LSL#2]
CMN             R3, #1
BEQ             loc_39DA8

loc_39B98
MOV             R2, R4,ASR#5
AND             R3, R4, #0x1F
MOV             R1, #1
LDR             R2, [R6,R2,LSL#2]
ANDS            R3, R2, R1,LSL R3
BNE             loc_39DB0

loc_39BB0
SUB             R3, R4, #1
SUB             R2, R4, #1
STR             R3, [SP,#0xB5C+var_B54]
LDR             R3, [SP,#0xB5C+var_B58]
CMP             R3, R2
BLE             loc_3A044

loc_39BC8
MOV             R2, R4,ASR#5
AND             R3, R4, #0x1F
MOV             R1, #1
LDR             R2, [R6,R2,LSL#2]
ANDS            R2, R2, R1,LSL R3
BNE             loc_39C10
CMP             R3, #0
BNE             loc_39DB8

loc_39BE8
MOV             R3, R4,ASR#5
LDR             R3, [R6,R3,LSL#2]
CMP             R3, #0
BEQ             loc_39DC0

loc_39BF8
MOV             R2, R4,ASR#5
AND             R3, R4, #0x1F
MOV             R1, #1
LDR             R2, [R6,R2,LSL#2]
ANDS            R3, R2, R1,LSL R3
BEQ             loc_39DC8

loc_39C10
SUB             R3, R4, #1
SUB             R2, R4, #1
STR             R3, [SP,#0xB5C+var_B4C]
LDR             R3, [SP,#0xB5C+var_B58]
CMP             R3, R2
BLE             loc_3A044
LDR             R3, [SP,#0xB5C+var_B54]
CMP             R3, R2
BGE             loc_39B60
MOV             R3, R2
LDR             R2, [SP,#0xB5C+var_B54]
SUB             R3, R3, R2
LDR             R2, [SP,#0xB5C+var_B38]
ADD             R3, R3, #1
ADD             R3, R2, R3
STR             R3, [SP,#0xB5C+var_B38]
LDR             R3, [SP,#0xB5C+var_B54]
STR             R3, [SP,#0xB5C+var_B28]
LDR             R3, [SP,#0xB5C+var_B4C]
STR             R3, [SP,#0xB5C+var_998]
MOV             R3, #0
STR             R3, [SP,#0xB5C+var_B34]
MOV             R3, #1

loc_39C6C
STR             R3, [SP,#0xB5C+var_B3C]
LDR             R3, [SP,#0xB5C+var_B3C]
SUB             R3, R3, #1
STR             R3, [SP,#0xB5C+var_B48]
ADD             R3, SP, #0xB5C+var_C
LDR             R2, [SP,#0xB5C+var_B48]
ADD             R3, R3, #8
ADD             R3, R3, R2,LSL#2
LDR             R9, [R3,#-0xB24]
LDR             R10, [R3,#-0x994]
SUB             R3, R10, R9
CMP             R3, #9
BGT             loc_39E6C
CMP             R9, R10
BEQ             loc_39CC0
CMP             R3, #3
BGT             loc_39DD0

loc_39CB0
ADD             R1, R5, R10,LSL#2
SUB             R3, R10, #1

loc_39CB8
CMP             R9, R3
BLE             loc_39E2C

loc_39CC0
LDR             R3, [SP,#0xB5C+var_B48]
CMP             R3, #0
BNE             loc_3A024
MOV             R3, #0xFFFFFFFF

loc_39CD0
LDR             R2, [SP,#0xB5C+var_B54]
LDR             R2, [R5,R2,LSL#2]
LDR             R1, [R8,R2,LSL#2]
CMP             R3, R1
BEQ             loc_39D00
LDR             R3, [SP,#0xB5C+var_B54]
MOV             R12, #1
MOV             R0, R3,ASR#5
AND             R3, R3, #0x1F
LDR             R2, [R6,R0,LSL#2]
ORR             R3, R2, R12,LSL R3
STR             R3, [R6,R0,LSL#2]

loc_39D00
LDR             R3, [SP,#0xB5C+var_B54]
ADD             R3, R3, #1
STR             R3, [SP,#0xB5C+var_B54]
MOV             R3, R1
LDR             R2, [SP,#0xB5C+var_B54]
CMP             R4, R2
BNE             loc_39CD0
B               loc_39B60

loc_39D20
LDRB            R3, [R1],#1
ADD             R0, SP, #0xB5C+var_C
ADD             R0, R0, #8
ADD             R3, R0, R3,LSL#2
LDR             R0, [R3,#-0x404]
ADD             R0, R0, #1
STR             R0, [R3,#-0x404]
B               loc_39A40

loc_39D40
LDRB            R0, [R8,R3]
ADD             R1, SP, #0xB5C+var_C
ADD             R1, R1, #8
ADD             R0, R1, R0,LSL#2
LDR             R1, [R0,#-0x404]
SUB             R1, R1, #1
STR             R3, [R5,R1,LSL#2]
ADD             R3, R3, #1
STR             R1, [R0,#-0x404]
B               loc_39A94

loc_39D68
MOV             R0, R3,ASR#5
AND             R2, R3, #0x1F
MOV             R12, #1
LDR             R0, [R6,R0,LSL#2]
ANDS            R2, R0, R12,LSL R2
LDR             R2, [R5,R3,LSL#2]
LDR             R0, [SP,#0xB5C+var_B40]
MOVNE           R1, R3
ADD             R3, R3, #1
SUBS            R2, R2, R0
LDRMI           R0, [SP,#0xB5C+var_B58]
ADDMI           R2, R2, R0
STR             R1, [R8,R2,LSL#2]
B               loc_39B44

loc_39DA0
ADD             R4, R4, #1
B               loc_39B68

loc_39DA8
ADD             R4, R4, #0x20 ; ' '
B               loc_39B88

loc_39DB0
ADD             R4, R4, #1
B               loc_39B98

loc_39DB8
ADD             R4, R4, #1
B               loc_39BC8

loc_39DC0
ADD             R4, R4, #0x20 ; ' '
B               loc_39BE8

loc_39DC8
ADD             R4, R4, #1
B               loc_39BF8

loc_39DD0
SUB             R3, R10, #4
ADD             R2, R5, R3,LSL#2

loc_39DD8
CMP             R9, R3
BGT             loc_39CB0
LDR             R12, [R2]
ADD             R0, R3, #4
MOV             R1, R2
LDR             R11, [R8,R12,LSL#2]

loc_39DF0
CMP             R10, R0
STR             R1, [SP,#0xB5C+var_B50]
BLT             loc_39E0C
LDR             LR, [R1,#0x10]!
LDR             R7, [R8,LR,LSL#2]
CMP             R11, R7
BHI             loc_39E20

loc_39E0C
LDR             R1, [SP,#0xB5C+var_B50]
SUB             R3, R3, #1
SUB             R2, R2, #4
STR             R12, [R1]
B               loc_39DD8

loc_39E20
STR             LR, [R1,#-0x10]
ADD             R0, R0, #4
B               loc_39DF0

loc_39E2C
LDR             R12, [R1,#-4]!
ADD             R0, R3, #1
LDR             R7, [R8,R12,LSL#2]
MOV             R2, R1

loc_39E3C
CMP             R10, R0
BLT             loc_39E54
LDR             LR, [R2,#4]
LDR             R11, [R8,LR,LSL#2]
CMP             R7, R11
BHI             loc_39E60

loc_39E54
STR             R12, [R2]
SUB             R3, R3, #1
B               loc_39CB8

loc_39E60
STR             LR, [R2],#4
ADD             R0, R0, #1
B               loc_39E3C

loc_39E6C
LDR             R2, [SP,#0xB5C+var_B34]
MOVW            R3, #0x1DC5
MOV             R1, #3
MUL             R3, R3, R2
ADD             R3, R3, #1
UBFX            R3, R3, #0, #0xF
MOV             R0, R3
STR             R3, [SP,#0xB5C+var_B34]
BLX             sub_15EFC
CMP             R1, #0
LDREQ           R3, [R5,R9,LSL#2]
BEQ             loc_39EB0
CMP             R1, #1
ADDEQ           R3, R9, R10
LDRNE           R3, [R5,R10,LSL#2]
MOVEQ           R3, R3,ASR#1
LDREQ           R3, [R5,R3,LSL#2]

loc_39EB0
LDR             R2, [R8,R3,LSL#2]
ADD             R3, R5, R9,LSL#2
ADD             LR, R9, #1
STR             R10, [SP,#0xB5C+var_B50]
MOV             R11, R9
MOV             R7, R10

loc_39EC8
SUB             R1, LR, #1
CMP             R7, R1
STR             R1, [SP,#0xB5C+var_B44]
BLT             loc_39F54
LDR             R0, [R3]
LDR             R1, [R8,R0,LSL#2]
SUB             R1, R1, R2
CMP             R1, #0
BNE             loc_39F08
LDR             R1, [R5,R11,LSL#2]
STR             R1, [R3]
STR             R0, [R5,R11,LSL#2]
ADD             R11, R11, #1

loc_39EFC
ADD             LR, LR, #1
ADD             R3, R3, #4
B               loc_39EC8

loc_39F08
ADDGT           R1, R5, R7,LSL#2
BLE             loc_39EFC

loc_39F10
STR             R1, [SP,#0xB5C+var_B30]
SUB             R7, R7, #1
LDR             R0, [R1],#-4
LDR             R12, [R8,R0,LSL#2]
SUB             R12, R12, R2
CMP             R12, #0
BNE             loc_3A02C
LDR             R12, [SP,#0xB5C+var_B50]
LDR             R12, [R5,R12,LSL#2]
STR             R12, [R1,#4]
LDR             R12, [SP,#0xB5C+var_B50]
STR             R0, [R5,R12,LSL#2]
SUB             R0, R12, #1
STR             R0, [SP,#0xB5C+var_B50]

loc_39F48
LDR             R0, [SP,#0xB5C+var_B44]
CMP             R0, R7
BLE             loc_39F10

loc_39F54
LDR             R3, [SP,#0xB5C+var_B50]
CMP             R11, R3
BGT             loc_39CC0
LDR             R2, [SP,#0xB5C+var_B44]
SUB             R3, R11, R9
MOV             R1, R9
MOV             R0, R5
SUB             R2, R2, R11
CMP             R3, R2
MOVGE           R3, R2
LDR             R2, [SP,#0xB5C+var_B44]
SUB             R2, R2, R3
BL              sub_399D0
LDR             R3, [SP,#0xB5C+var_B50]
MOV             R0, R5
LDR             R1, [SP,#0xB5C+var_B44]
SUB             R7, R3, R7
SUB             R3, R10, R3
CMP             R3, R7
MOVGE           R3, R7
SUB             R7, R10, R7
SUB             R2, R10, R3
ADD             R7, R7, #1
ADD             R2, R2, #1
BL              sub_399D0
LDR             R3, [SP,#0xB5C+var_B44]
ADD             R0, SP, #0xB5C+var_C
ADD             R0, R0, #8
ADD             R3, R9, R3
SUB             R11, R3, R11
LDR             R3, [SP,#0xB5C+var_B3C]
SUB             R11, R11, #1
SUB             R2, R11, R9
ADD             R1, R3, #1
SUB             R3, R10, R7
CMP             R2, R3
LDR             R3, [SP,#0xB5C+var_B48]
STR             R1, [SP,#0xB5C+var_B48]
MOV             R2, R3,LSL#2
LDR             R3, [SP,#0xB5C+var_B3C]
ADD             R2, R0, R2
STRGT           R11, [R2,#-0x994]
MOVGT           R2, R0
MOV             R3, R3,LSL#2
STRLE           R7, [R2,#-0xB24]
MOVLE           R2, R0
ADDGT           R3, R2, R3
ADDLE           R3, R2, R3
STRGT           R7, [R3,#-0xB24]
STRGT           R10, [R3,#-0x994]
STRLE           R9, [R3,#-0xB24]
STRLE           R11, [R3,#-0x994]

loc_3A024
LDR             R3, [SP,#0xB5C+var_B48]
B               loc_39C6C

loc_3A02C
BGE             loc_39F48
LDR             R1, [R3]
STR             R0, [R3]
LDR             R0, [SP,#0xB5C+var_B30]
STR             R1, [R0]
B               loc_39EFC

loc_3A044
LDR             R3, [SP,#0xB5C+var_B40]
LDR             R2, [SP,#0xB5C+var_B58]
MOV             R3, R3,LSL#1
STR             R3, [SP,#0xB5C+var_B40]
LDR             R3, [SP,#0xB5C+var_B38]
LDR             R1, [SP,#0xB5C+var_B40]
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R2, R1
ORRLT           R3, R3, #1
CMP             R3, #0
BEQ             loc_39B3C
MOV             R3, #0
MOV             R2, R3
B               loc_3A0B4

loc_3A080
ADD             R3, R3, #1

loc_3A084
ADD             R1, SP, #0xB5C+var_808
LDR             R1, [R1,R3,LSL#2]
CMP             R1, #0
BEQ             loc_3A080
ADD             R0, SP, #0xB5C+var_C
SUB             R1, R1, #1
ADD             R0, R0, #8
ADD             R0, R0, R3,LSL#2
STR             R1, [R0,#-0x804]
LDR             R1, [R5,R2,LSL#2]
ADD             R2, R2, #1
STRB            R3, [R8,R1]

loc_3A0B4
LDR             R1, [SP,#0xB5C+var_B58]
CMP             R2, R1
BLT             loc_3A084
ADD             SP, SP, #0xB50
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_399F8




; bool __fastcall sub_3A0CC(_DWORD *, int, int)
sub_3A0CC
PUSH            {R4-R10,LR}
LDR             R4, [R0,#0x20]
LDR             R6, [R0,#0x14]
LDRB            R12, [R4,R1]
LDRB            R3, [R4,R2]
LDR             R5, [R0,#0x34]
CMP             R12, R3
BEQ             loc_3A0F8

loc_3A0EC
MOVHI           R0, #1
MOVLS           R0, #0
POP             {R4-R10,PC}

loc_3A0F8
ADD             LR, R4, R1
ADD             R12, R4, R2
LDRB            R7, [LR,#1]
LDRB            R3, [R12,#1]
CMP             R7, R3
BNE             loc_3A0EC
LDRB            R7, [LR,#2]
LDRB            R3, [R12,#2]
CMP             R7, R3
BNE             loc_3A0EC
LDRB            R7, [LR,#3]
LDRB            R3, [R12,#3]
CMP             R7, R3
BNE             loc_3A0EC
LDRB            R7, [LR,#4]
LDRB            R3, [R12,#4]
CMP             R7, R3
BNE             loc_3A0EC
LDRB            R7, [LR,#5]
LDRB            R3, [R12,#5]
CMP             R7, R3
BNE             loc_3A0EC
LDRB            R7, [LR,#6]
LDRB            R3, [R12,#6]
CMP             R7, R3
BNE             loc_3A0EC
LDRB            R7, [LR,#7]
LDRB            R3, [R12,#7]
CMP             R7, R3
BNE             loc_3A0EC
LDRB            R7, [LR,#8]
LDRB            R3, [R12,#8]
CMP             R7, R3
BNE             loc_3A0EC
LDRB            R3, [LR,#9]
LDRB            R7, [R12,#9]
CMP             R3, R7
BEQ             loc_3A1A0

loc_3A190
CMP             R3, R7
MOVLS           R0, #0
MOVHI           R0, #1
POP             {R4-R10,PC}

loc_3A1A0
LDRB            R7, [LR,#0xA]
LDRB            R3, [R12,#0xA]
CMP             R7, R3
BNE             loc_3A0EC
LDRB            LR, [LR,#0xB]
LDRB            R3, [R12,#0xB]
CMP             LR, R3
BNE             loc_3A0EC
ADD             R1, R1, #0xC
ADD             R2, R2, #0xC
ADD             R8, R5, #8

loc_3A1CC
LDRB            R12, [R4,R1]
LDRB            R3, [R4,R2]
CMP             R12, R3
BNE             loc_3A0EC
MOV             LR, R1,LSL#1
MOV             R12, R2,LSL#1
LDRH            R7, [R6,LR]
LDRH            R3, [R6,R12]
CMP             R7, R3
BNE             loc_3A0EC
ADD             R7, R4, R1
ADD             R3, R4, R2
LDRB            R10, [R7,#1]
LDRB            R9, [R3,#1]
CMP             R10, R9
BNE             loc_3A0EC
ADD             LR, R6, LR
ADD             R12, R6, R12
LDRH            R10, [LR,#2]
LDRH            R9, [R12,#2]
CMP             R10, R9
BNE             loc_3A0EC
LDRB            R10, [R7,#2]
LDRB            R9, [R3,#2]
CMP             R10, R9
BNE             loc_3A0EC
LDRH            R10, [LR,#4]
LDRH            R9, [R12,#4]
CMP             R10, R9
BNE             loc_3A0EC
LDRB            R10, [R7,#3]
LDRB            R9, [R3,#3]
CMP             R10, R9
BNE             loc_3A0EC
LDRH            R10, [LR,#6]
LDRH            R9, [R12,#6]
CMP             R10, R9
BNE             loc_3A0EC
LDRB            R7, [R7,#4]
LDRB            R3, [R3,#4]
CMP             R7, R3
BNE             loc_3A0EC
LDRH            R3, [LR,#8]
LDRH            R7, [R12,#8]
CMP             R3, R7
BNE             loc_3A190
ADD             R7, R4, R1
ADD             R3, R4, R2
LDRB            R10, [R7,#5]
LDRB            R9, [R3,#5]
CMP             R10, R9
BNE             loc_3A0EC
LDRH            R10, [LR,#0xA]
LDRH            R9, [R12,#0xA]
CMP             R10, R9
BNE             loc_3A0EC
LDRB            R10, [R7,#6]
LDRB            R9, [R3,#6]
CMP             R10, R9
BNE             loc_3A0EC
LDRH            R10, [LR,#0xC]
LDRH            R9, [R12,#0xC]
CMP             R10, R9
BNE             loc_3A0EC
LDRB            R7, [R7,#7]
LDRB            R3, [R3,#7]
CMP             R7, R3
BNE             loc_3A0EC
LDRH            LR, [LR,#0xE]
LDRH            R3, [R12,#0xE]
CMP             LR, R3
BNE             loc_3A0EC
ADD             R1, R1, #8
ADD             R2, R2, #8
CMP             R5, R1
LDR             R3, [R0,#0x18]
SUBLS           R1, R1, R5
CMP             R5, R2
SUBLS           R2, R2, R5
SUBS            R8, R8, #8
SUB             R3, R3, #1
STR             R3, [R0,#0x18]
BPL             loc_3A1CC
MOV             R0, #0
POP             {R4-R10,PC}
; End of function sub_3A0CC




; _DWORD *__fastcall sub_3A320(_DWORD *result, int, int)
sub_3A320

var_4E0= -0x4E0
var_4DC= -0x4DC
var_4D8= -0x4D8
var_4D4= -0x4D4
var_4D0= -0x4D0
var_4CC= -0x4CC
var_4C8= -0x4C8
var_4C4= -0x4C4
var_4C0= -0x4C0
var_4BC= -0x4BC
var_4B8= -0x4B8
var_4B4= -0x4B4
var_324= -0x324
var_194= -0x194
var_4= -4

LDR             R3, [R0,#0x20]
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x4E0
SUB             SP, SP, #4
LDR             R11, [R0,#0x1C]
STR             R3, [SP,#0x4E4+var_4CC]
MOV             R3, #2
STR             R3, [SP,#0x4E4+var_194]
MOV             R3, #1
STR             R0, [SP,#0x4E4+var_4D4]
STR             R1, [SP,#0x4E4+var_4B4]
STR             R2, [SP,#0x4E4+var_324]

loc_3A350
STR             R3, [SP,#0x4E4+var_4DC]
LDR             R3, [SP,#0x4E4+var_4DC]
SUB             R3, R3, #1
STR             R3, [SP,#0x4E4+var_4D8]
ADD             R3, SP, #0x4E4+var_4
LDR             R2, [SP,#0x4E4+var_4D8]
ADD             R3, R3, R2,LSL#2
LDR             R4, [R3,#-0x4B0]
LDR             R10, [R3,#-0x320]
LDR             R3, [R3,#-0x190]
STR             R3, [SP,#0x4E4+var_4E0]
SUB             R3, R10, R4
LDR             R1, [SP,#0x4E4+var_4E0]
CMP             R3, #0x13
MOVGT           R2, #0
MOVLE           R2, #1
CMP             R1, #0xE
ORRGT           R2, R2, #1
CMP             R2, #0
BEQ             loc_3A4D0
LDR             R2, [SP,#0x4E4+var_4D4]
CMP             R3, #0
LDR             R2, [R2,#0x1C]
STR             R2, [SP,#0x4E4+var_4C8]
BGT             loc_3A484

loc_3A3B4
LDR             R3, [SP,#0x4E4+var_4D4]
LDR             R3, [R3,#0x18]
CMP             R3, #0
BLT             loc_3A3D0
LDR             R3, [SP,#0x4E4+var_4D8]
CMP             R3, #0
BNE             loc_3A730

loc_3A3D0
ADD             SP, SP, #0x4E0
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_3A3DC
ADD             R5, R5, #1

loc_3A3E0
LDR             R2, =dword_63990
LDR             R2, [R2,R5,LSL#2]
CMP             R2, R3
BLS             loc_3A3DC

loc_3A3F0
SUBS            R5, R5, #1
BCC             loc_3A3B4
LDR             R3, =dword_63990
LDR             R3, [R3,R5,LSL#2]
ADD             R6, R4, R3
STR             R3, [SP,#0x4E4+var_4DC]
LDR             R3, [SP,#0x4E4+var_4C8]
LDR             R2, [SP,#0x4E4+var_4DC]
ADD             R7, R3, R6,LSL#2
MOV             R3, #0xFFFFFFFC
MUL             R3, R3, R2
SUB             R2, R6, #1
STR             R2, [SP,#0x4E4+var_4BC]

loc_3A424
CMP             R10, R6
BLT             loc_3A3F0
LDR             R2, [R7]
MOV             R8, R6
LDR             R1, [SP,#0x4E4+var_4E0]
MOV             R9, R7
STR             R2, [SP,#0x4E4+var_4C4]
ADD             R2, R2, R1
STR             R2, [SP,#0x4E4+var_4C0]

loc_3A448
LDR             R2, [SP,#0x4E4+var_4DC]
LDR             R1, [R9,R3]
STR             R3, [SP,#0x4E4+var_4B8]
LDR             R3, [SP,#0x4E4+var_4E0]
SUB             R2, R8, R2
STR             R2, [SP,#0x4E4+var_4D0]
LDR             R0, [SP,#0x4E4+var_4D4]
ADD             R1, R3, R1
LDR             R2, [SP,#0x4E4+var_4C0]
BL              sub_3A0CC
CMP             R0, #0
LDR             R3, [SP,#0x4E4+var_4B8]
BNE             loc_3A48C
STR             R8, [SP,#0x4E4+var_4D0]
B               loc_3A4A4

loc_3A484
MOV             R5, #0
B               loc_3A3E0

loc_3A48C
LDR             R2, [R9,R3]
LDR             R8, [SP,#0x4E4+var_4D0]
STR             R2, [R9],R3
LDR             R2, [SP,#0x4E4+var_4BC]
CMP             R2, R8
BCC             loc_3A448

loc_3A4A4
LDR             R2, [SP,#0x4E4+var_4C8]
ADD             R6, R6, #1
LDR             R1, [SP,#0x4E4+var_4D0]
ADD             R7, R7, #4
LDR             R0, [SP,#0x4E4+var_4C4]
STR             R0, [R2,R1,LSL#2]
LDR             R2, [SP,#0x4E4+var_4D4]
LDR             R2, [R2,#0x18]
CMP             R2, #0
BLT             loc_3A3B4
B               loc_3A424

loc_3A4D0
LDR             R1, [SP,#0x4E4+var_4CC]
ADD             R12, R4, R10
LDR             R0, [SP,#0x4E4+var_4E0]
MOV             R12, R12,ASR#1
LDR             R2, [R11,R4,LSL#2]
ADD             R3, R11, R4,LSL#2
LDR             R12, [R11,R12,LSL#2]
ADD             R0, R1, R0
LDR             R1, [R11,R10,LSL#2]
LDRB            R2, [R0,R2]
LDRB            R1, [R0,R1]
LDRB            R0, [R0,R12]
CMP             R2, R1
MOVLS           R12, R1
MOVLS           R1, R2
MOVLS           R2, R12
CMP             R0, R2
BCS             loc_3A524
CMP             R0, R1
MOVCS           R2, R0
MOVCC           R2, R1

loc_3A524
LDR             R1, [SP,#0x4E4+var_4CC]
ADD             R12, R4, #1
LDR             R0, [SP,#0x4E4+var_4E0]
MOV             R7, R10
MOV             R8, R4
MOV             R5, R10
ADD             R9, R1, R0

loc_3A540
SUB             R6, R12, #1
CMP             R6, R5
BGT             loc_3A5B8
LDR             R0, [R3]
LDRB            R1, [R9,R0]
SUB             R1, R1, R2
CMP             R1, #0
BNE             loc_3A57C
LDR             R1, [R11,R8,LSL#2]
STR             R1, [R3]
STR             R0, [R11,R8,LSL#2]
ADD             R8, R8, #1

loc_3A570
ADD             R12, R12, #1
ADD             R3, R3, #4
B               loc_3A540

loc_3A57C
ADDGT           R1, R11, R5,LSL#2
BLE             loc_3A570

loc_3A584
STR             R1, [SP,#0x4E4+var_4D0]
SUB             R5, R5, #1
LDR             R0, [R1],#-4
LDRB            LR, [R9,R0]
SUB             LR, LR, R2
CMP             LR, #0
BNE             loc_3A700
LDR             LR, [R11,R7,LSL#2]
STR             LR, [R1,#4]
STR             R0, [R11,R7,LSL#2]
SUB             R7, R7, #1

loc_3A5B0
CMP             R6, R5
BLE             loc_3A584

loc_3A5B8
LDR             R3, [SP,#0x4E4+var_4E0]
CMP             R8, R7
ADD             R9, R3, #1
BGT             loc_3A718
SUB             R3, R8, R4
SUB             R2, R6, R8
CMP             R3, R2
MOV             R1, R4
MOVGE           R3, R2
MOV             R0, R11
SUB             R2, R6, R3
SUB             R5, R7, R5
BL              sub_399D0
SUB             R3, R10, R7
MOV             R1, R6
CMP             R3, R5
ADD             R6, R6, R4
MOVGE           R3, R5
SUB             R8, R6, R8
SUB             R2, R10, R3
SUB             R5, R10, R5
ADD             R2, R2, #1
MOV             R0, R11
BL              sub_399D0
SUB             R3, R8, #1
ADD             R2, R5, #1
SUB             R1, R10, R2
SUB             R0, R3, R4
CMP             R0, R1
SUB             R0, R5, R8
MOVGE           R1, R10
MOVGE           R10, R3
MOVGE           R3, R1
MOVGE           R1, R2
MOVGE           R2, R4
MOVGE           R4, R1
SUB             R1, R3, R4
CMP             R1, R0
MOVGE           R1, R5
MOVGE           R5, R3
MOVGE           R3, R1
MOVGE           R1, R8
MOVGE           R8, R4
MOVGE           R4, R1
SUB             R12, R5, R8
SUB             R1, R10, R2
MOVGE           R0, R9
LDRLT           R0, [SP,#0x4E4+var_4E0]
LDRGE           R9, [SP,#0x4E4+var_4E0]
CMP             R1, R12
BLT             loc_3A6A8
MOV             R1, R9
LDR             R9, [SP,#0x4E4+var_4E0]
STR             R1, [SP,#0x4E4+var_4E0]
MOV             R1, R5
MOV             R5, R10
MOV             R10, R1
MOV             R1, R8
MOV             R8, R2
MOV             R2, R1

loc_3A6A8
LDR             R12, [SP,#0x4E4+var_4D8]
ADD             R1, SP, #0x4E4+var_4
ADD             R1, R1, R12,LSL#2
LDR             R12, [SP,#0x4E4+var_4DC]
STR             R8, [R1,#-0x4B0]
STR             R5, [R1,#-0x320]
STR             R9, [R1,#-0x190]
ADD             R1, SP, #0x4E4+var_4
ADD             R1, R1, R12,LSL#2
STR             R2, [R1,#-0x4B0]
LDR             R2, [SP,#0x4E4+var_4E0]
STR             R10, [R1,#-0x320]
STR             R2, [R1,#-0x190]
ADD             R2, R12, #1
ADD             R1, SP, #0x4E4+var_4
ADD             R2, R1, R2,LSL#2
STR             R3, [R2,#-0x320]
ADD             R3, R12, #2
STR             R4, [R2,#-0x4B0]
STR             R0, [R2,#-0x190]
STR             R3, [SP,#0x4E4+var_4DC]
B               loc_3A728

loc_3A700
BGE             loc_3A5B0
LDR             R1, [R3]
STR             R0, [R3]
LDR             R0, [SP,#0x4E4+var_4D0]
STR             R1, [R0]
B               loc_3A570

loc_3A718
LDR             R2, [SP,#0x4E4+var_4D8]
ADD             R3, SP, #0x4E4+var_4
ADD             R3, R3, R2,LSL#2
STR             R9, [R3,#-0x190]

loc_3A728
LDR             R3, [SP,#0x4E4+var_4DC]
STR             R3, [SP,#0x4E4+var_4D8]

loc_3A730
LDR             R3, [SP,#0x4E4+var_4D8]
B               loc_3A350
; End of function sub_3A320

off_3A738 DCD dword_63990



; _DWORD *__fastcall sub_3A73C(_DWORD *result)
sub_3A73C
LDR             R1, [R0,#0x2C]
MOV             R12, #0
LDR             R2, [R0,#0x30]
PUSH            {R4,R5,LR}
UXTB            R3, R1

loc_3A750
CMP             R2, R12
BGT             loc_3A7EC
CMP             R2, #2
ADD             R1, R0, R1
MOV             LR, #1
STRB            LR, [R1,#0x64]
LDR             R12, [R0,#0x20]
LDR             R1, [R0,#0x34]
BEQ             loc_3A81C
CMP             R2, #3
BEQ             loc_3A80C
CMP             R2, LR
BEQ             loc_3A834
ADD             R2, R0, R2
STRB            LR, [R2,#0x60]
STRB            R3, [R12,R1]
LDR             R2, [R0,#0x34]
LDR             R1, [R0,#0x20]
ADD             R2, R2, #1
STR             R2, [R0,#0x34]
STRB            R3, [R1,R2]
LDR             R2, [R0,#0x34]
LDR             R1, [R0,#0x20]
ADD             R2, R2, #1
STR             R2, [R0,#0x34]
STRB            R3, [R1,R2]
LDR             R2, [R0,#0x34]
LDR             R1, [R0,#0x20]
ADD             R2, R2, #1
STR             R2, [R0,#0x34]
STRB            R3, [R1,R2]
LDR             R3, [R0,#0x34]
LDR             R2, [R0,#0x30]
LDR             R1, [R0,#0x20]
ADD             R3, R3, #1
SUB             R2, R2, #4
STR             R3, [R0,#0x34]
STRB            R2, [R1,R3]
B               loc_3A840

loc_3A7EC
LDR             R4, [R0,#0x50]
ADD             R12, R12, #1
LDR             LR, [R0,#0x4C]
EOR             R5, R3, R4,LSR#24
LDR             LR, [LR,R5,LSL#2]
EOR             LR, LR, R4,LSL#8
STR             LR, [R0,#0x50]
B               loc_3A750

loc_3A80C
STRB            R3, [R12,R1]
LDR             R2, [R0,#0x34]
ADD             R2, R2, #1
STR             R2, [R0,#0x34]

loc_3A81C
LDR             R2, [R0,#0x34]
LDR             R1, [R0,#0x20]
STRB            R3, [R1,R2]
LDR             R2, [R0,#0x34]
ADD             R2, R2, #1
STR             R2, [R0,#0x34]

loc_3A834
LDR             R1, [R0,#0x20]
LDR             R2, [R0,#0x34]
STRB            R3, [R1,R2]

loc_3A840
LDR             R3, [R0,#0x34]
ADD             R3, R3, #1
STR             R3, [R0,#0x34]
POP             {R4,R5,PC}
; End of function sub_3A73C




; int __fastcall sub_3A850(int result)
sub_3A850
LDR             R3, [R0,#0x48]
CMP             R3, #0
BXLE            LR
LDR             R3, [R0,#0x3C]
LDRB            R2, [R0,#0x47]
ADD             R1, R3, #1
STR             R1, [R0,#0x3C]
STRB            R2, [R3]
LDR             R3, [R0,#0x44]
MOV             R3, R3,LSL#8
STR             R3, [R0,#0x44]
LDR             R3, [R0,#0x48]
SUB             R3, R3, #8
STR             R3, [R0,#0x48]
B               sub_3A850
; End of function sub_3A850




; _DWORD *__fastcall sub_3A88C(_DWORD *result, int, int)
sub_3A88C
PUSH            {LR}

loc_3A890
LDR             R12, [R0,#0x48]
LDR             R3, [R0,#0x44]
CMP             R12, #7
BGT             loc_3A8BC
RSB             LR, R12, #0x20 ; ' '
ADD             R12, R12, R1
SUB             LR, LR, R1
STR             R12, [R0,#0x48]
ORR             R3, R3, R2,LSL LR
STR             R3, [R0,#0x44]
POP             {PC}

loc_3A8BC
LDR             R12, [R0,#0x3C]
MOV             R3, R3,LSR#24
ADD             LR, R12, #1
STR             LR, [R0,#0x3C]
STRB            R3, [R12]
LDR             LR, [R0,#0x44]
MOV             LR, LR,LSL#8
STR             LR, [R0,#0x44]
LDR             LR, [R0,#0x48]
SUB             LR, LR, #8
STR             LR, [R0,#0x48]
B               loc_3A890
; End of function sub_3A88C




; _DWORD *__fastcall sub_3A8EC(_DWORD *result, int)
sub_3A8EC
LDR             R2, [R0,#0x48]
LDR             R3, [R0,#0x44]
CMP             R2, #7
BGT             loc_3A914
RSB             R12, R2, #0x10
ADD             R2, R2, #0x10
ORR             R3, R3, R1,LSL R12
STR             R2, [R0,#0x48]
STR             R3, [R0,#0x44]
BX              LR

loc_3A914
LDR             R2, [R0,#0x3C]
MOV             R3, R3,LSR#24
ADD             R12, R2, #1
STR             R12, [R0,#0x3C]
STRB            R3, [R2]
LDR             R2, [R0,#0x44]
MOV             R2, R2,LSL#8
STR             R2, [R0,#0x44]
LDR             R2, [R0,#0x48]
SUB             R2, R2, #8
STR             R2, [R0,#0x48]
B               sub_3A8EC
; End of function sub_3A8EC




; int __fastcall sub_3A944(int result)
sub_3A944
LDR             R3, [R0,#0x48]
CMP             R3, #7
BLE             loc_3A97C
LDR             R3, [R0,#0x3C]
LDRB            R2, [R0,#0x47]
ADD             R1, R3, #1
STR             R1, [R0,#0x3C]
STRB            R2, [R3]
LDR             R3, [R0,#0x44]
MOV             R3, R3,LSL#8
STR             R3, [R0,#0x44]
LDR             R3, [R0,#0x48]
SUB             R3, R3, #8
STR             R3, [R0,#0x48]

loc_3A97C
LDR             R3, [R0,#0x48]
ADD             R3, R3, #1
STR             R3, [R0,#0x48]
BX              LR
; End of function sub_3A944




; _DWORD *__fastcall sub_3A98C(_DWORD *, unsigned int)
sub_3A98C
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R1, R1,LSR#16
BL              sub_3A8EC
UXTH            R1, R4
POP             {R4-R6,LR}
B               sub_3A8EC
; End of function sub_3A98C




; _DWORD *__fastcall sub_3A9A8(_DWORD *result)
sub_3A9A8

var_100= -0x100
var_FF= -0xFF
var_s0=  0

PUSH            {R4-R10,LR}
ADD             R3, R0, #0x64 ; 'd'
LDR             R7, [R0,#0x1C]
SUB             SP, SP, #0x100
ADD             R2, R0, #0x164
MOV             R12, #0

loc_3A9C0
LDRB            R1, [R3],#1
CMP             R1, #0
STRBNE          R12, [R3,#0xFF]
ADDNE           R12, R12, #1
CMP             R2, R3
BNE             loc_3A9C0
MOV             R3, #0
ADD             R2, R0, #0x264
ADD             R5, R12, #1
MOV             R1, R3
STR             R12, [R0,#0x60]

loc_3A9EC
CMP             R5, R3
BGE             loc_3AA50
MOV             R3, #0

loc_3A9F8
CMP             R3, R12
BLT             loc_3AA5C
LDR             R6, [R0,#0x34]
MOV             R3, #0
MOV             R1, R3
MOV             LR, R3
MOV             R8, SP

loc_3AA14
CMP             R6, LR
BGT             loc_3AA68
CMP             R1, #0
BNE             loc_3AAD4

loc_3AA24
LDR             R1, [R0,#0x24]
MOV             R2, R3,LSL#1
ADD             R3, R3, #1
STRH            R5, [R1,R2]
ADD             R2, R0, R12,LSL#2
LDR             R1, [R2,#0x268]
ADD             R1, R1, #1
STR             R1, [R2,#0x268]
STR             R3, [R0,#0x5C]
ADD             SP, SP, #0x100
POP             {R4-R10,PC}

loc_3AA50
STR             R1, [R2],#4
ADD             R3, R3, #1
B               loc_3A9EC

loc_3AA5C
STRB            R3, [SP,R3]
ADD             R3, R3, #1
B               loc_3A9F8

loc_3AA68
LDR             R2, [R7,LR,LSL#2]
LDR             R4, [R0,#0x20]
SUBS            R2, R2, #1
ADDMI           R2, R2, R6
LDRB            R2, [R4,R2]
ADD             R2, R0, R2
LDRB            R4, [R2,#0x164]
LDRB            R2, [SP,#0x100+var_100]
CMP             R2, R4
ADDEQ           R1, R1, #1
BEQ             loc_3AB2C
CMP             R1, #0
BEQ             loc_3AAE4

loc_3AA9C
LDR             R9, [R0,#0x24]
SUB             R1, R1, #1
ADD             R9, R9, R3,LSL#1

loc_3AAA8
AND             R2, R1, #1
SUBS            R1, R1, #2
STRH            R2, [R9],#2
ADD             R2, R0, R2,LSL#2
ADD             R3, R3, #1
LDR             R10, [R2,#0x264]
ADD             R10, R10, #1
STR             R10, [R2,#0x264]
BMI             loc_3AADC
MOV             R1, R1,LSR#1
B               loc_3AAA8

loc_3AAD4
MOV             LR, #0xFFFFFFFF
B               loc_3AA9C

loc_3AADC
CMN             LR, #1
BEQ             loc_3AA24

loc_3AAE4
LDRB            R9, [SP,#0x100+var_100]
ADD             R2, SP, #0x100+var_s0
LDRB            R1, [SP,#0x100+var_FF]
STRB            R9, [R2,#-0xFF]!

loc_3AAF4
CMP             R4, R1
BNE             loc_3AB34
SUB             R2, R2, R8
LDR             R9, [R0,#0x24]
MOV             R1, R3,LSL#1
ADD             R10, R2, #1
ADD             R2, R0, R2,LSL#2
STRB            R4, [SP,#0x100+var_100]
STRH            R10, [R9,R1]
ADD             R3, R3, #1
LDR             R1, [R2,#0x268]
ADD             R1, R1, #1
STR             R1, [R2,#0x268]
MOV             R1, #0

loc_3AB2C
ADD             LR, LR, #1
B               loc_3AA14

loc_3AB34
LDRB            R9, [R2,#1]!
STRB            R1, [R2]
MOV             R1, R9
B               loc_3AAF4
; End of function sub_3A9A8




; int __fastcall sub_3AB44(_DWORD *)
sub_3AB44

var_210= -0x210
var_20C= -0x20C
var_208= -0x208
var_204= -0x204
var_104= -0x104
var_4= -4

LDR             R3, [R0,#0x34]
MOV             R1, #0  ; c
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x214
LDR             R4, [R0,#0x10]
MOV             R5, R0
MOV             R6, #0
STR             R3, [SP,#0x214+var_210]
LDR             R3, [R0,#0x14]
LDR             R10, [R0,#0x20]
LDR             R11, [R0,#0x1C]
MOV             R0, R4  ; s
LDR             R2, =0x40004 ; n
STR             R3, [SP,#0x214+var_20C]
BL              memset
LDRD            R0, R1, [SP,#0x214+var_210]
LDRB            R3, [R10]
LDR             R2, [SP,#0x214+var_210]
ADD             R0, R1, R0,LSL#1
SUB             R2, R2, #1
MOV             R3, R3,LSL#8
MOV             LR, R0
MOV             R1, R2

loc_3ABA0
CMP             R1, #0
BGE             loc_3ADEC
SUB             R3, R10, #1
ADD             R1, R10, #0x21 ; '!'
MOV             R12, #0

loc_3ABB4
LDRB            LR, [R3,#1]!
LDR             R6, [SP,#0x214+var_210]
CMP             R1, R3
STRB            LR, [R3,R6]
STRH            R12, [R0],#2
BNE             loc_3ABB4
LDR             R1, [R4]
MOV             R3, R4
ADD             R0, R4, #0x40000

loc_3ABD8
LDR             R12, [R3,#4]!
CMP             R0, R3
ADD             R1, R1, R12
STR             R1, [R3]
BNE             loc_3ABD8
LDRB            R3, [R10]
MOV             R3, R3,LSL#8

loc_3ABF4
CMP             R2, #0
BGE             loc_3AE10
MOV             R3, #0
ADD             R2, SP, #0x214+var_104
MOV             R1, R3

loc_3AC08
ADD             R0, SP, #0x214+var_204
STRB            R3, [R3,R2]
STRB            R1, [R0,R3]
ADD             R3, R3, #1
CMP             R3, #0x100
BNE             loc_3AC08
MOV             R0, #5
MOV             R3, #0x16C
ADD             R12, SP, #0x214+var_104

loc_3AC2C
MOV             R2, #0xAB
MUL             R3, R2, R3
MOV             R3, R3,LSR#9
MOV             R1, R3
SUB             R2, R12, R3
STR             R2, [SP,#0x214+var_208]

loc_3AC44
LDRB            R8, [R1,R12]
ADD             R2, R8, #1
ADD             R6, R4, R2,LSL#10
LDR             LR, [R4,R2,LSL#10]
LDR             R2, [R6,#-0x400]
SUB             LR, LR, R2
MOV             R2, R1

loc_3AC60
LDR             R6, [SP,#0x214+var_208]
LDRB            R7, [R6,R2]
ADD             R6, R7, #1
LDR             R9, [R4,R7,LSL#10]
LDR             R6, [R4,R6,LSL#10]
SUB             R6, R6, R9
CMP             R6, LR
BLS             loc_3AC90
STRB            R7, [R2,R12]
SUB             R2, R2, R3
CMP             R3, R2
BLS             loc_3AC60

loc_3AC90
ADD             R1, R1, #1
ADD             LR, SP, #0x214+var_4
CMP             R1, #0x100
ADD             R2, LR, R2
STRB            R8, [R2,#-0x100]
BNE             loc_3AC44
SUBS            R0, R0, #1
BNE             loc_3AC2C
MOV             R9, R0

loc_3ACB4
ADD             R3, SP, #0x214+var_104
MOV             R8, #0
LDRB            R6, [R3,R9]
MOV             R3, R6,LSL#10
ADD             R7, R4, R3
STR             R3, [SP,#0x214+var_208]

loc_3ACCC
CMP             R6, R8
BEQ             loc_3ACEC
LDR             R1, [R7]
TST             R1, #0x200000
BEQ             loc_3AE34

loc_3ACE0
LDR             R3, [R7]
ORR             R3, R3, #0x200000
STR             R3, [R7]

loc_3ACEC
ADD             R8, R8, #1
ADD             R7, R7, #4
CMP             R8, #0x100
BNE             loc_3ACCC
MOV             R2, R6,LSL#2
ADD             R1, R5, #0xDD00
ADD             R1, R1, #0xAC
ADD             R12, R4, R2
MOV             R3, #0

loc_3AD10
MOV             R0, R12
LDR             LR, [R0,R3]!
ADD             R3, R3, #0x400
CMP             R3, #0x40000
BIC             LR, LR, #0x200000
STR             LR, [R1],#4
LDR             R0, [R0,#4]
BIC             R0, R0, #0x200000
SUB             R0, R0, #1
STR             R0, [R1,#0x3FC]
BNE             loc_3AD10
LDR             R0, [R4,R6,LSL#10]
ADD             R2, R5, R2
ADD             R7, R2, #0xD000
BIC             R0, R0, #0x200000

loc_3AD4C
LDR             R3, [R7,#0xDAC]
CMP             R3, R0
BGT             loc_3AE64
LDR             R3, [SP,#0x214+var_208]
ADD             R2, R2, #0xE000
ADD             LR, R3, #0x400
LDR             R3, [R4,LR]
BIC             R3, R3, #0x200000
SUB             R3, R3, #1

loc_3AD70
LDR             R1, [R2,#0x1AC]
CMP             R1, R3
BLT             loc_3AEA8
MOV             R3, #0

loc_3AD80
LDR             R2, [R12,R3,LSL#10]
ORR             R2, R2, #0x200000
STR             R2, [R12,R3,LSL#10]
ADD             R3, R3, #1
CMP             R3, #0x100
BNE             loc_3AD80
CMP             R9, #0xFF
BEQ             loc_3AE5C
ADD             R3, SP, #0x214+var_4
MOV             R2, #1
ADD             R3, R3, R6
LDR             R1, [R4,R6,LSL#10]
STRB            R2, [R3,#-0x200]
MOV             R0, #0
LDR             R3, [R4,LR]
MOVW            R2, #0xFFFE
BIC             R1, R1, #0x200000
BIC             R3, R3, #0x200000
SUB             R3, R3, R1

loc_3ADCC
CMP             R2, R3,LSR R0
BCC             loc_3AEEC
ADD             R1, R11, R1,LSL#2
SUB             R3, R3, #1

loc_3ADDC
CMP             R3, #0
BGE             loc_3AEF4
ADD             R9, R9, #1
B               loc_3ACB4

loc_3ADEC
STRH            R6, [LR,#-2]!
MOV             R3, R3,ASR#8
LDRB            R12, [R10,R1]
SUB             R1, R1, #1
ORR             R3, R3, R12,LSL#8
LDR             R12, [R4,R3,LSL#2]
ADD             R12, R12, #1
STR             R12, [R4,R3,LSL#2]
B               loc_3ABA0

loc_3AE10
LDRB            R1, [R10,R2]
MOV             R1, R1,LSL#8
ORR             R3, R1, R3,LSR#8
LDR             R1, [R4,R3,LSL#2]
SUB             R1, R1, #1
STR             R1, [R4,R3,LSL#2]
STR             R2, [R11,R1,LSL#2]
SUB             R2, R2, #1
B               loc_3ABF4

loc_3AE34
LDR             R2, [R7,#4]
BIC             R2, R2, #0x200000
SUB             R2, R2, #1
CMP             R1, R2
BGE             loc_3ACE0
MOV             R0, R5
BL              sub_3A320
LDR             R3, [R5,#0x18]
CMP             R3, #0
BGE             loc_3ACE0

loc_3AE5C
ADD             SP, SP, #0x214
POP             {R4-R11,PC}

loc_3AE64
LDR             R3, [R11,R0,LSL#2]
ADD             LR, SP, #0x214+var_4
ADD             R0, R0, #1
SUBS            R3, R3, #1
LDRMI           R1, [SP,#0x214+var_210]
ADDMI           R3, R3, R1
LDRB            R1, [R10,R3]
ADD             LR, LR, R1
LDRB            LR, [LR,#-0x200]
CMP             LR, #0
ADDEQ           R1, R5, R1,LSL#2
ADDEQ           R1, R1, #0xD000
LDREQ           LR, [R1,#0xDAC]
ADDEQ           R8, LR, #1
STREQ           R8, [R1,#0xDAC]
STREQ           R3, [R11,LR,LSL#2]
B               loc_3AD4C

loc_3AEA8
LDR             R1, [R11,R3,LSL#2]
ADD             R7, SP, #0x214+var_4
SUB             R3, R3, #1
SUBS            R1, R1, #1
LDRMI           R0, [SP,#0x214+var_210]
ADDMI           R1, R1, R0
LDRB            R0, [R10,R1]
ADD             R7, R7, R0
LDRB            R7, [R7,#-0x200]
CMP             R7, #0
ADDEQ           R0, R5, R0,LSL#2
ADDEQ           R0, R0, #0xE000
LDREQ           R7, [R0,#0x1AC]
SUBEQ           R8, R7, #1
STREQ           R8, [R0,#0x1AC]
STREQ           R1, [R11,R7,LSL#2]
B               loc_3AD70

loc_3AEEC
ADD             R0, R0, #1
B               loc_3ADCC

loc_3AEF4
LDR             R2, [R1,R3,LSL#2]
MOV             R12, R3,ASR R0
LDR             R6, [SP,#0x214+var_20C]
SUB             R3, R3, #1
UXTH            R12, R12
CMP             R2, #0x21 ; '!'
MOV             LR, R2,LSL#1
STRH            R12, [R6,LR]
LDRLS           LR, [SP,#0x214+var_210]
ADDLS           R2, R2, LR
MOVLS           LR, R6
MOVLS           R2, R2,LSL#1
STRHLS          R12, [LR,R2]
B               loc_3ADDC
; End of function sub_3AB44

; const size_t n
n DCD 0x40004



; int __fastcall sub_3AF30(_DWORD *)
sub_3AF30
LDR             R3, [R0,#0x34]
MOVW            R2, #0x270F
PUSH            {R4-R6,LR}
MOV             R4, R0
CMP             R3, R2
BGT             loc_3AF7C

loc_3AF48
MOV             R0, R4
BL              sub_399F8

loc_3AF50
LDR             R2, [R4,#0x34]
MOV             R3, #0

loc_3AF58
CMP             R2, R3
BEQ             loc_3AF74
LDR             R1, [R4,#0x1C]
LDR             R1, [R1,R3,LSL#2]
CMP             R1, #0
BNE             loc_3AFB0
MOV             R5, R3

loc_3AF74
MOV             R0, R5
POP             {R4-R6,PC}

loc_3AF7C
ADD             R1, R3, #0x22 ; '"'
LDR             R2, [R0,#0x20]
TST             R1, #1
ADDNE           R1, R3, #0x23 ; '#'
ADD             R3, R3, R3,LSL#3
ADD             R2, R2, R1
STR             R3, [R0,#0x18]
STR             R2, [R0,#0x14]
BL              sub_3AB44
LDR             R3, [R4,#0x18]
CMP             R3, #0
BLT             loc_3AF48
B               loc_3AF50

loc_3AFB0
ADD             R3, R3, #1
B               loc_3AF58
; End of function sub_3AF30




; _DWORD *__fastcall sub_3AFB8(_DWORD *)
sub_3AFB8

var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_1C= -0x1C

PUSH            {R4-R11,LR}
ADD             R1, R0, #0x600
LDR             R10, [R0,#0x60]
SUB             SP, SP, #0x6C
MOV             R4, R0
MOV             R2, R0
LDR             R3, [R0,#0x24]
ADD             R1, R1, #0xC
STR             R0, [SP,#0x6C+var_54]
ADD             R11, R10, #2
MOVW            R0, #0x9310
MOV             R12, #0xF
MOVW            R9, #0x102
STR             R3, [SP,#0x6C+var_40]

loc_3AFF0
MOV             R3, #0
B               loc_3B004

loc_3AFF8
ADD             LR, R3, R0
ADD             R3, R3, #1
STRB            R12, [R2,LR]

loc_3B004
CMP             R11, R3
BHI             loc_3AFF8
ADD             R2, R2, R9
CMP             R2, R1
BNE             loc_3AFF0
LDR             R6, [R4,#0x5C]
MOV             R8, #0
CMP             R6, #0xC7
MOVLE           R2, #0
MOVGT           R2, #1
ADD             R2, R2, #2
CMP             R6, #0x258
ADDGE           R2, R2, #1
CMP             R6, #0x4B0
ADDGE           R2, R2, #1
CMP             R6, #0x960
ADDGE           R2, R2, #1
MUL             R9, R9, R2
MOV             R7, R2
STR             R2, [SP,#0x6C+var_64]
ADD             R5, R9, #0x9200
ADD             R5, R5, #0xE
ADD             R5, R4, R5

loc_3B060
MOV             R1, R7
MOV             R0, R6
BLX             sub_15CA0
ADD             R12, R4, R8,LSL#2
MOV             R3, #0
MOV             R1, R8
ADD             R12, R12, #0x260
MOV             R2, R3

loc_3B080
CMP             R3, R0
MOVCS           LR, #0
MOVCC           LR, #1
CMP             R11, R1
MOVLS           LR, #0
CMP             LR, #0
BNE             loc_3B150
LDR             R12, [SP,#0x6C+var_64]
SUB             R0, R1, #1
CMP             R12, R7
CMPNE           R0, R8
MOVHI           R12, #1
MOVLS           R12, #0
CMP             R7, #1
MOVEQ           R12, #0
ANDNE           R12, R12, #1
CMP             R12, #0
BEQ             loc_3B0E4
LDR             R12, [SP,#0x6C+var_64]
SUB             R12, R12, R7
TST             R12, #1
ADDNE           R0, R4, R1,LSL#2
LDRNE           R0, [R0,#0x260]
SUBNE           R3, R3, R0
SUBNE           R0, R1, #2

loc_3B0E4
MOV             R12, R5
MOV             R1, #0

loc_3B0EC
CMP             R11, R1
BHI             loc_3B160
SUBS            R7, R7, #1
SUB             R5, R5, #0x100
ADD             R8, R0, #1
SUB             R6, R6, R3
SUB             R5, R5, #2
BNE             loc_3B060
ADD             R3, R4, #0x9300
ADD             R10, R4, R10,LSL#2
ADD             R3, R3, #0xF
STR             R3, [SP,#0x6C+var_38]
ADD             R3, R3, R9
STR             R3, [SP,#0x6C+var_28]
ADD             R3, R10, #0xCD00
ADD             R3, R3, #0x94
MOVW            R10, #0x325E
STR             R3, [SP,#0x6C+var_4C]
MOV             R3, #4
STR             R3, [SP,#0x6C+var_68]

loc_3B13C
MOV             R8, #0
MOVW            R0, #0x408
MOVW            R1, #0xB14C
MOV             R2, R8
B               loc_3B1B4

loc_3B150
LDR             LR, [R12,#4]!
ADD             R1, R1, #1
ADD             R3, R3, LR
B               loc_3B080

loc_3B160
CMP             R1, R8
ADD             R12, R12, #1
MOVCC           LR, #0
MOVCS           LR, #1
CMP             R1, R0
ADD             R1, R1, #1
MOVHI           LR, #0
CMP             LR, #0
MOVEQ           LR, #0xF
STRBNE          R2, [R12,#-1]
STRBEQ          LR, [R12,#-1]
B               loc_3B0EC

loc_3B190
ADD             LR, R1, R3,LSL#2
ADD             R3, R3, #1
STR             R2, [R12,LR]

loc_3B19C
CMP             R11, R3
BHI             loc_3B190
LDR             R3, [SP,#0x6C+var_64]
ADD             R8, R8, #1
CMP             R3, R8
BEQ             loc_3B1C0

loc_3B1B4
MLA             R12, R0, R8, R4
MOV             R3, #0
B               loc_3B19C

loc_3B1C0
LDR             R12, [R4,#0x5C]
ADD             R0, SP, #0x6C+var_1C
LDR             R2, =0xFFFFF994
SUB             R3, R12, #1
STR             R3, [SP,#0x6C+var_58]
ADD             R3, R4, #0x660
ADD             R3, R3, #0xC
SUB             R2, R2, R4
STR             R3, [SP,#0x6C+var_50]
MOV             LR, R3
MOV             R3, #0
STR             R2, [SP,#0x6C+var_48]

loc_3B1F0
LDR             R2, [SP,#0x6C+var_48]
CMP             R12, R3
ADD             R2, R2, LR
STR             R2, [SP,#0x6C+var_44]
BLS             loc_3B2F0
LDR             R2, [SP,#0x6C+var_58]
ADD             R1, R3, #0x31 ; '1'
CMP             R12, R1
MOVLS           R1, R2
MOV             R2, #0

loc_3B218
MOV             R5, #0
STR             R5, [R0,R2,LSL#2]
ADD             R2, R2, #1
CMP             R2, R8
BNE             loc_3B218
LDR             R2, [SP,#0x6C+var_40]
MOV             R6, R3
ADD             R5, R2, R3,LSL#1
STR             R5, [SP,#0x6C+var_60]

loc_3B23C
CMP             R1, R6
BCS             loc_3B2A4
LDR             R7, [SP,#0x6C+var_1C]
MOV             R2, #0
MOV             R6, #1

loc_3B250
LDR             R9, [R0,R6,LSL#2]
CMP             R9, R7
MOVCC           R2, R6
ADD             R6, R6, #1
MOVCC           R7, R9
CMP             R6, R8
BNE             loc_3B250
MOVW            R6, #0x102
STRB            R2, [LR],#1
MUL             R2, R6, R2

loc_3B278
CMP             R3, R1
BHI             loc_3B1F0
LDRH            R6, [R5],#2
ADD             R3, R3, #1
ADD             R6, R2, R6
ADD             R6, R4, R6,LSL#2
ADD             R6, R6, #0xB000
LDR             R7, [R6,#0x14C]
ADD             R7, R7, #1
STR             R7, [R6,#0x14C]
B               loc_3B278

loc_3B2A4
LDR             R7, [SP,#0x6C+var_60]
LDRH            R2, [R7],#2
STR             R2, [SP,#0x6C+var_5C]
MOV             R2, #0
STR             R7, [SP,#0x6C+var_60]

loc_3B2B8
LDR             R9, [SP,#0x6C+var_5C]
MOVW            R7, #0x102
MLA             R7, R7, R2, R9
LDR             R9, [R0,R2,LSL#2]
ADD             R7, R7, #0x9300
ADD             R7, R7, #0x10
LDRB            R7, [R4,R7]
ADD             R7, R7, R9
STR             R7, [R0,R2,LSL#2]
ADD             R2, R2, #1
CMP             R2, R8
BNE             loc_3B2B8
ADD             R6, R6, #1
B               loc_3B23C

loc_3B2F0
LDR             R3, [SP,#0x6C+var_38]
STR             R3, [SP,#0x6C+var_60]
ADD             R3, R4, #0xB100
ADD             R3, R3, #0x4C ; 'L'
STR             R3, [SP,#0x6C+var_58]
ADD             R3, R4, #0xCD00
ADD             R3, R3, #0x90
STR             R3, [SP,#0x6C+var_3C]

loc_3B310
LDR             R1, [SP,#0x6C+var_3C]
MOV             R2, #0

loc_3B318
CMP             R11, R2
BGT             loc_3B3D0
ADD             R3, R4, #0xC000
STR             R3, [SP,#0x6C+var_5C]

loc_3B328
LDR             R2, [SP,#0x6C+var_5C]
MOV             R3, #0
ADD             R0, R4, #0xC900
MOV             R5, #0xFFFFFFFF
ADD             R0, R0, #0x80
STR             R3, [R2,#0x97C]
STR             R3, [R2,#0xD8C]
ADD             R3, R4, #0xD000
MOV             R2, #0xFFFFFFFE
STR             R2, [R3,#0x59C]
MOV             R3, #1

loc_3B354
CMP             R11, R3
SUB             R1, R3, #1
BGE             loc_3B3F0
ADD             R3, R3, R10
LDR             R2, [SP,#0x6C+var_4C]
ADD             R3, R4, R3,LSL#2
MOV             R0, R11
STR             R2, [SP,#0x6C+var_48]

loc_3B374
CMP             R1, #1
BGT             loc_3B444
LDR             R12, [SP,#0x6C+var_60]
MOV             R0, #0
MOV             R2, #1
MOVW            LR, #0x3566

loc_3B38C
CMP             R11, R2
BGE             loc_3B69C
CMP             R0, #0
BEQ             loc_3B6A8
LDR             R1, [SP,#0x6C+var_3C]
MOV             R2, #1

loc_3B3A4
CMP             R11, R2
BLT             loc_3B328
LDR             R3, [R1]
ADD             R2, R2, #1
MOV             R3, R3,ASR#8
ADD             R3, R3, R3,LSR#31
MOV             R3, R3,ASR#1
ADD             R3, R3, #1
MOV             R3, R3,LSL#8
STR             R3, [R1],#4
B               loc_3B3A4

loc_3B3D0
LDR             R3, [SP,#0x6C+var_58]
LDR             R3, [R3,R2,LSL#2]
ADD             R2, R2, #1
CMP             R3, #0
MOVNE           R3, R3,LSL#8
MOVEQ           R3, #0x100
STR             R3, [R1],#4
B               loc_3B318

loc_3B3F0
STR             R5, [R0,#0xC20]
MOV             R2, R3
STR             R3, [R0],#4
LDR             R6, [R0,#0x40C]

loc_3B400
MOV             LR, R2,ASR#1
ADD             R2, R2, R10
ADD             R2, R4, R2,LSL#2
ADD             R1, LR, R10
ADD             R1, R4, R1,LSL#2
LDR             R12, [R1,#4]
ADD             R1, R12, #0x3340
ADD             R1, R1, #0x22 ; '"'
ADD             R1, R4, R1,LSL#2
LDR             R1, [R1,#4]
CMP             R6, R1
STRGE           R3, [R2,#4]
ADDGE           R3, R3, #1
BGE             loc_3B354
STR             R12, [R2,#4]
MOV             R2, LR
B               loc_3B400

loc_3B444
LDR             R2, [SP,#0x6C+var_5C]
SUB             R1, R1, #1
LDR             R5, [R3],#-4
LDR             R2, [R2,#0x980]
ADD             R6, R5, #0x3340
ADD             R6, R6, #0x22 ; '"'
STR             R2, [SP,#0x6C+var_30]
ADD             R6, R4, R6,LSL#2
LDR             R2, [SP,#0x6C+var_5C]
STR             R5, [R2,#0x980]
MOV             R2, #1

loc_3B470
MOV             R12, R2,LSL#1
CMP             R1, R12
BLT             loc_3B4F0
ADD             LR, R4, R2,LSL#3
ADD             LR, LR, #0xC000
LDR             R7, [LR,#0x97C]
ADD             R7, R7, #0x3340
ADD             R7, R7, #0x22 ; '"'
ADD             R7, R4, R7,LSL#2
LDR             R7, [R7,#4]
BLE             loc_3B4B8
LDR             LR, [LR,#0x980]
ADD             LR, LR, #0x3340
ADD             LR, LR, #0x22 ; '"'
ADD             LR, R4, LR,LSL#2
LDR             LR, [LR,#4]
CMP             LR, R7
ADDLT           R12, R12, #1

loc_3B4B8
ADD             LR, R12, R10
LDR             R9, [R6,#4]
ADD             LR, R4, LR,LSL#2
LDR             R7, [LR,#4]
ADD             LR, R7, #0x3340
ADD             LR, LR, #0x22 ; '"'
ADD             LR, R4, LR,LSL#2
LDR             LR, [LR,#4]
CMP             R9, LR
ADDGE           R2, R2, R10
ADDGE           R2, R4, R2,LSL#2
STRGE           R7, [R2,#4]
MOVGE           R2, R12
BGE             loc_3B470

loc_3B4F0
ADD             R2, R2, R10
ADD             R2, R4, R2,LSL#2
STR             R5, [R2,#4]
LDR             R2, [SP,#0x6C+var_5C]
LDR             R6, [R3]
LDR             R2, [R2,#0x980]
ADD             R7, R6, #0x3340
ADD             R7, R7, #0x22 ; '"'
STR             R2, [SP,#0x6C+var_2C]
ADD             R7, R4, R7,LSL#2
LDR             R2, [SP,#0x6C+var_5C]
STR             R6, [R2,#0x980]
SUB             R2, R1, #1
STR             R2, [SP,#0x6C+var_34]
MOV             R2, #1

loc_3B52C
LDR             R5, [SP,#0x6C+var_34]
MOV             LR, R2,LSL#1
CMP             R5, LR
BLT             loc_3B5B0
ADD             R5, R4, R2,LSL#3
ADD             R5, R5, #0xC000
LDR             R9, [R5,#0x97C]
ADD             R9, R9, #0x3340
ADD             R9, R9, #0x22 ; '"'
ADD             R9, R4, R9,LSL#2
LDR             R9, [R9,#4]
BLE             loc_3B578
LDR             R5, [R5,#0x980]
ADD             R5, R5, #0x3340
ADD             R5, R5, #0x22 ; '"'
ADD             R5, R4, R5,LSL#2
LDR             R5, [R5,#4]
CMP             R5, R9
ADDLT           LR, LR, #1

loc_3B578
ADD             R5, LR, R10
LDR             R12, [R7,#4]
ADD             R5, R4, R5,LSL#2
LDR             R9, [R5,#4]
ADD             R5, R9, #0x3340
ADD             R5, R5, #0x22 ; '"'
ADD             R5, R4, R5,LSL#2
LDR             R5, [R5,#4]
CMP             R12, R5
ADDGE           R2, R2, R10
ADDGE           R2, R4, R2,LSL#2
STRGE           R9, [R2,#4]
MOVGE           R2, LR
BGE             loc_3B52C

loc_3B5B0
ADD             R2, R2, R10
ADD             R0, R0, #1
ADD             R2, R4, R2,LSL#2
STR             R6, [R2,#4]
LDR             R2, [SP,#0x6C+var_2C]
ADD             R12, R4, R2,LSL#2
ADD             R2, R12, #0xD000
ADD             R12, R12, #0xC000
STR             R0, [R2,#0x59C]
LDR             R2, [SP,#0x6C+var_30]
ADD             R2, R4, R2,LSL#2
ADD             LR, R2, #0xD000
ADD             R2, R2, #0xC000
STR             R0, [LR,#0x59C]
LDR             R5, [R12,#0xD8C]
LDR             R2, [R2,#0xD8C]
UXTB            LR, R5
BIC             R5, R5, #0xFF
UXTB            R12, R2
BIC             R2, R2, #0xFF
ADD             R2, R2, R5
CMP             LR, R12
MOVGE           R12, LR
MOV             LR, #0xFFFFFFFF
ADD             R12, R12, #1
ORR             R12, R12, R2
LDR             R2, [SP,#0x6C+var_48]
STR             R12, [R2,#4]!
STR             LR, [R2,#0x810]
STR             R2, [SP,#0x6C+var_48]
MOV             R2, R1
STR             R0, [R3]

loc_3B630
MOV             R6, R2,ASR#1
ADD             R2, R2, R10
ADD             R2, R4, R2,LSL#2
ADD             LR, R6, R10
ADD             LR, R4, LR,LSL#2
LDR             R5, [LR,#4]
ADD             LR, R5, #0x3340
ADD             LR, LR, #0x22 ; '"'
ADD             LR, R4, LR,LSL#2
LDR             LR, [LR,#4]
CMP             R12, LR
STRGE           R0, [R2,#4]
BGE             loc_3B374
STR             R5, [R2,#4]
MOV             R2, R6
B               loc_3B630

loc_3B670
ADD             R1, R1, #1

loc_3B674
ADD             R3, R3, LR
ADD             R3, R4, R3,LSL#2
LDR             R3, [R3,#4]
CMP             R3, #0
BGE             loc_3B670
CMP             R1, #0x12
STRB            R1, [R12,#1]!
MOVGE           R0, #1
ADD             R2, R2, #1
B               loc_3B38C

loc_3B69C
MOV             R3, R2
MOV             R1, #0
B               loc_3B674

loc_3B6A8
LDR             R3, [SP,#0x6C+var_60]
LDR             R2, [SP,#0x6C+var_28]
ADD             R3, R3, #0x100
ADD             R3, R3, #2
STR             R3, [SP,#0x6C+var_60]
LDR             R3, [SP,#0x6C+var_58]
ADD             R3, R3, #0x400
ADD             R3, R3, #8
STR             R3, [SP,#0x6C+var_58]
LDR             R3, [SP,#0x6C+var_60]
CMP             R3, R2
BNE             loc_3B310
LDR             R3, [SP,#0x6C+var_68]
SUBS            R3, R3, #1
STR             R3, [SP,#0x6C+var_68]
BNE             loc_3B13C

loc_3B6E8
LDR             R3, [SP,#0x6C+var_68]

loc_3B6EC
ADD             R2, SP, #0x6C+var_24
STRB            R3, [R2,R3]
ADD             R3, R3, #1
CMP             R3, R8
BNE             loc_3B6EC
LDR             R2, [SP,#0x6C+var_44]
ADD             R3, R4, #0x4C00
LDR             R0, [SP,#0x6C+var_50]
ADD             R3, R3, #0xBE
ADD             R12, SP, #0x6C+var_24
ADD             LR, R3, R2

loc_3B718
CMP             LR, R3
BNE             loc_3B758
MOVW            LR, #0x9310
MOVW            R7, #0x102
ADD             R5, R4, LR
ADD             R1, R4, #0x9900
MLA             R8, R7, R8, R5
ADD             R1, R1, #0x1C
MOV             R6, R5
MOVW            R9, #0x408

loc_3B740
MOV             R2, #0
SUB             R10, R6, #0x9300
MOV             R3, #0x20 ; ' '
MOV             R0, R2
SUB             R10, R10, #0x10
B               loc_3B7A4

loc_3B758
LDRB            R6, [R0],#1
MOV             R1, R12
LDRB            R2, [SP,#0x6C+var_24]

loc_3B764
CMP             R2, R6
SUB             R5, R1, R12
STRBEQ          R2, [SP,#0x6C+var_24]
STRBEQ          R5, [R3],#1
BEQ             loc_3B718
LDRB            R5, [R1,#1]!
STRB            R2, [R1]
MOV             R2, R5
B               loc_3B764

loc_3B788
ADD             R12, R0, LR
ADD             R0, R0, #1
LDRB            R12, [R10,R12]
CMP             R2, R12
MOVCC           R2, R12
CMP             R3, R12
MOVCS           R3, R12

loc_3B7A4
CMP             R0, R11
BLT             loc_3B788
MOV             R0, #0

loc_3B7B0
CMP             R2, R3
BGE             loc_3B978
ADD             R6, R6, R7
ADD             R1, R1, R9
CMP             R8, R6
BNE             loc_3B740
ADD             R2, R4, #0x100
MOV             R7, R4
MOV             R8, #0

loc_3B7D4
LDR             R1, [R7,#0x68]
ADD             R7, R7, #0x10
LDR             R3, [R7,#0x54]
ORR             R3, R3, R1
LDR             R1, [R7,#0x5C]
ORR             R3, R3, R1
LDR             R1, [R7,#0x60]
ORRS            R3, R3, R1
MOVNE           R3, #1
MOVEQ           R3, #0
CMP             R2, R7
ADD             R8, R3, R8,LSL#1
BNE             loc_3B7D4
MOV             R1, R8
MOV             R8, R8,LSL#16
MOV             R0, R4
BL              sub_3A8EC

loc_3B818
CMP             R8, #0
BGE             loc_3B84C
MOV             R3, #0
MOV             R1, R3

loc_3B828
LDR             R2, [SP,#0x6C+var_54]
ADD             R2, R2, R3
ADD             R3, R3, #1
LDRB            R2, [R2,#0x64]
CMP             R3, #0x10
ADD             R1, R2, R1,LSL#1
BNE             loc_3B828
MOV             R0, R4
BL              sub_3A8EC

loc_3B84C
LDR             R3, [SP,#0x6C+var_54]
MOV             R8, R8,LSL#1
ADD             R3, R3, #0x10
CMP             R7, R3
STR             R3, [SP,#0x6C+var_54]
BNE             loc_3B818
LDR             R2, [SP,#0x6C+var_64]
MOV             R1, #3
MOV             R0, R4
MOV             R7, #0
MOVW            R8, #0x4CBE
MOV             R9, #1
BL              sub_3A88C
LDR             R2, [SP,#0x6C+var_44]
MOV             R1, #0xF
BL              sub_3A88C

loc_3B88C
LDR             R3, [SP,#0x6C+var_44]
CMP             R7, R3
BNE             loc_3B9F8

loc_3B898
LDRB            R9, [R5]
MOV             R7, R5
MOV             R8, #0
MOV             R1, #5
MOV             R0, R4
MOV             R2, R9
BL              sub_3A88C

loc_3B8B4
CMP             R8, R11
BLT             loc_3BA1C
MOVW            R3, #0x102
ADD             R5, R5, R3
CMP             R6, R5
BNE             loc_3B898
MOV             R5, R3
MOVW            R9, #0x9310
MOVW            R10, #0x408

loc_3B8D8
LDR             R3, [R4,#0x5C]
LDR             R2, [SP,#0x6C+var_68]
CMP             R3, R2
BLS             loc_3BA60
ADD             R7, R2, #0x31 ; '1'
LDR             R2, [SP,#0x6C+var_68]
CMP             R3, R7
SUBLS           R7, R3, #1
LDR             R3, [SP,#0x6C+var_50]
LDRB            R6, [R3],#1
STR             R3, [SP,#0x6C+var_50]
MOVW            R3, #0x991C
MLA             R11, R5, R6, R9
MLA             R6, R10, R6, R3
LDR             R3, [SP,#0x6C+var_40]
ADD             R8, R3, R2,LSL#1

loc_3B918
LDR             R3, [SP,#0x6C+var_68]
CMP             R3, R7
BHI             loc_3B8D8
LDRH            R3, [R8],#2
MOV             R0, R4
ADD             R2, R4, R3,LSL#2
ADD             R3, R4, R3
LDRB            R1, [R3,R11]
LDR             R2, [R2,R6]
BL              sub_3A88C
LDR             R3, [SP,#0x6C+var_68]
ADD             R3, R3, #1
STR             R3, [SP,#0x6C+var_68]
B               loc_3B918

loc_3B950
LDRB            R10, [R6,R12]
CMP             R10, R3
STREQ           R0, [R1,R12,LSL#2]
ADDEQ           R0, R0, #1
ADD             R12, R12, #1

loc_3B964
CMP             R11, R12
BGT             loc_3B950
MOV             R0, R0,LSL#1
ADD             R3, R3, #1
B               loc_3B7B0

loc_3B978
MOV             R12, #0
B               loc_3B964

loc_3B980
LDR             R0, [R4,#0x48]
LDR             R3, [R4,#0x44]
CMP             R0, #7
BLE             loc_3B9BC
LDR             R0, [R4,#0x3C]
MOV             R3, R3,LSR#24
ADD             R12, R0, #1
STR             R12, [R4,#0x3C]
STRB            R3, [R0]
LDR             R3, [R4,#0x44]
MOV             R3, R3,LSL#8
STR             R3, [R4,#0x44]
LDR             R3, [R4,#0x48]
SUB             R3, R3, #8
STR             R3, [R4,#0x48]

loc_3B9BC
LDR             R3, [R4,#0x48]
ADD             R2, R2, #1
LDR             R0, [R4,#0x44]
RSB             R12, R3, #0x1F
ADD             R3, R3, #1
STR             R3, [R4,#0x48]
ORR             R0, R0, R9,LSL R12
STR             R0, [R4,#0x44]

loc_3B9DC
LDRB            R3, [R1]
CMP             R3, R2
BHI             loc_3B980
MOV             R0, R4
ADD             R7, R7, #1
BL              sub_3A944
B               loc_3B88C

loc_3B9F8
ADD             R1, R7, R8
MOV             R2, #0
ADD             R1, R4, R1
B               loc_3B9DC

loc_3BA08
MOV             R2, #2
ADD             R9, R9, #1
MOV             R1, R2
MOV             R0, R4
BL              sub_3A88C

loc_3BA1C
LDRB            R3, [R7]
CMP             R3, R9
BHI             loc_3BA08

loc_3BA28
LDRB            R3, [R7]
CMP             R3, R9
BCC             loc_3BA48
MOV             R0, R4
ADD             R8, R8, #1
BL              sub_3A944
ADD             R7, R7, #1
B               loc_3B8B4

loc_3BA48
MOV             R2, #3
MOV             R1, #2
MOV             R0, R4
SUB             R9, R9, #1
BL              sub_3A88C
B               loc_3BA28

loc_3BA60
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R11,PC}
; End of function sub_3AFB8

dword_3BA68 DCD 0xFFFFF994



; _DWORD *__fastcall sub_3BA6C(_DWORD *result, int)
sub_3BA6C
LDR             R3, [R0,#0x34]
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
LDR             R2, [R0,#0x58]
CMP             R3, #0
BLE             loc_3BAB4
LDR             R3, [R0,#0x50]
CMP             R2, #1
LDR             R1, [R0,#0x54]
MVN             R3, R3
STR             R3, [R0,#0x50]
EOR             R3, R3, R1,ROR#31
STR             R3, [R0,#0x54]
LDRGT           R3, [R0,#0x28]
STRGT           R3, [R0,#0x3C]
BL              sub_3AF30
MOV             R6, R0

loc_3BAB4
LDR             R3, [R4,#0xC]
LDR             R2, [R4,#0x34]
ADD             R3, R3, R2
STR             R3, [R4,#0x28]
STR             R3, [R4,#0x3C]
STR             R3, [R4,#0x40]
LDR             R3, [R4,#0x58]
CMP             R3, #1
BNE             loc_3BAF8
MOV             R3, #0
LDR             R1, =0x425A6830
STR             R3, [R4,#0x48]
MOV             R0, R4
STR             R3, [R4,#0x44]
LDRB            R3, [R4,#6]
ADD             R1, R3, R1
BL              sub_3A98C

loc_3BAF8
LDR             R3, [R4,#0x34]
CMP             R3, #0
BLE             loc_3BB38
MOV             R0, R4
LDR             R1, =0x31415926
BL              sub_3A98C
MOVW            R1, #0x5359
BL              sub_3A8EC
LDR             R1, [R4,#0x50]
BL              sub_3A98C
BL              sub_3A944
MOV             R2, R6
MOV             R1, #0x18
BL              sub_3A88C
BL              sub_3A9A8
BL              sub_3AFB8

loc_3BB38
CMP             R5, #0
POPEQ           {R4-R6,PC}
MOV             R0, R4
LDR             R1, =0x17724538
BL              sub_3A98C
MOVW            R1, #0x5090
BL              sub_3A8EC
LDR             R1, [R4,#0x54]
BL              sub_3A98C
POP             {R4-R6,LR}
B               sub_3A850
; End of function sub_3BA6C

dword_3BB64 DCD 0x425A6830
dword_3BB68 DCD 0x31415926
dword_3BB6C DCD 0x17724538



; _BYTE *__fastcall sub_3BB70(_DWORD *)
sub_3BB70
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, #0
MOV             R6, #0xFFFFFFFF

loc_3BB80
ADD             R0, R4, #0x164
MOV             R12, #2

loc_3BB88
LDRB            R3, [R4,#5]
CMP             R3, #1
BNE             loc_3BC60

loc_3BB94
LDR             R2, [R4]
LDR             R3, [R4,#0x40]
LDR             R1, [R4,#0x3C]
LDR             LR, [R2,#0x10]
CMP             LR, #0
BEQ             loc_3BC00
CMP             R1, R3
BLS             loc_3BC08
ADD             R1, R3, #1
LDR             R2, [R2,#8]
STR             R1, [R4,#0x40]
LDRB            R3, [R3]
STRB            R3, [R2]
LDR             R3, [R4]
LDR             R2, [R3,#0x10]
LDR             R1, [R3,#0x1C]
SUB             R2, R2, #1
STR             R2, [R3,#0x10]
LDR             R2, [R3,#8]
ADD             R2, R2, #1
STR             R2, [R3,#8]
LDR             R2, [R3,#0x18]
ADDS            R2, R2, #1
ADC             R1, R1, #0
STR             R2, [R3,#0x18]
STR             R1, [R3,#0x1C]
B               loc_3BB94

loc_3BC00
CMP             R1, R3
POPHI           {R4-R8,PC}

loc_3BC08
LDRB            R3, [R4,#4]
CMP             R3, #4
BNE             loc_3BC38
LDR             R3, [R2,#0xC]
CMP             R3, #0
BNE             loc_3BC38
LDR             R3, [R4,#0x2C]
CMP             R3, #0xFF
POPHI           {R4-R8,PC}
LDR             R3, [R4,#0x30]
CMP             R3, #0
POPLE           {R4-R8,PC}

loc_3BC38
ADD             R3, R4, #0x64 ; 'd'
STR             R5, [R4,#0x34]
STR             R6, [R4,#0x50]

loc_3BC44
STRB            R5, [R3],#1
CMP             R0, R3
BNE             loc_3BC44
LDR             R3, [R4,#0x58]
STRB            R12, [R4,#5]
ADD             R3, R3, #1
STR             R3, [R4,#0x58]

loc_3BC60
LDRB            R3, [R4,#5]
CMP             R3, #2
BNE             loc_3BB88
MOV             R7, #1

loc_3BC70
LDR             R2, [R4]
LDR             R3, [R2,#0xC]
CMP             R3, #0
BEQ             loc_3BD38
LDR             R12, [R4,#0x34]
LDR             R1, [R4,#0x38]
CMP             R12, R1
BGE             loc_3BD38
LDR             R3, [R2,#4]
LDRB            R8, [R3]
LDRD            R2, R3, [R4,#0x2C]
CMP             R8, R2
BEQ             loc_3BD08
CMP             R3, #1
BNE             loc_3BD1C
LDR             LR, [R4,#0x50]
UXTB            R0, R2
LDR             R1, [R4,#0x4C]
EOR             R0, R0, LR,LSR#24
LDR             R1, [R1,R0,LSL#2]
EOR             R1, R1, LR,LSL#8
STR             R1, [R4,#0x50]
ADD             R1, R4, R2
STRB            R3, [R1,#0x64]
LDR             R3, [R4,#0x20]
STRB            R2, [R3,R12]
LDR             R3, [R4,#0x34]
STR             R8, [R4,#0x2C]
ADD             R3, R3, #1
STR             R3, [R4,#0x34]

loc_3BCE8
LDR             R3, [R4]
LDR             R2, [R3,#4]
ADD             R2, R2, #1
STR             R2, [R3,#4]
LDR             R2, [R3,#0xC]
SUB             R2, R2, #1
STR             R2, [R3,#0xC]
B               loc_3BC70

loc_3BD08
CMP             R3, #0xFF
BEQ             loc_3BD24
ADD             R3, R3, #1
STR             R3, [R4,#0x30]
B               loc_3BCE8

loc_3BD1C
CMP             R2, #0xFF
BHI             loc_3BD2C

loc_3BD24
MOV             R0, R4
BL              sub_3A73C

loc_3BD2C
STR             R8, [R4,#0x2C]
STR             R7, [R4,#0x30]
B               loc_3BCE8

loc_3BD38
LDRB            R1, [R4,#4]
SUBS            R12, R1, #2
MOVNE           R12, #1
CMP             R3, #0
MOVNE           R12, #0
CMP             R12, #0
BEQ             loc_3BD98
LDR             R3, [R4,#0x2C]
CMP             R3, #0xFF
BHI             loc_3BD68
MOV             R0, R4
BL              sub_3A73C

loc_3BD68
LDRB            R1, [R4,#4]
MOV             R3, #0x100
STR             R3, [R4,#0x2C]
STR             R5, [R4,#0x30]
SUB             R1, R1, #4
CLZ             R1, R1
MOV             R1, R1,LSR#5

loc_3BD84
MOV             R0, R4
BL              sub_3BA6C
MOV             R3, #1
STRB            R3, [R4,#5]
B               loc_3BB80

loc_3BD98
LDR             R0, [R4,#0x34]
LDR             R2, [R4,#0x38]
CMP             R0, R2
MOVGE           R1, R12
BGE             loc_3BD84
CMP             R3, #0
POPEQ           {R4-R8,PC}
B               loc_3BB80
; End of function sub_3BB70




; unsigned int sub_3BDB8()
sub_3BDB8

var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R0, #0x4000
SUB             SP, SP, #0x24
MOV             R7, #0
BL              sub_1748C
LDR             R3, =dword_7DBC0
MOV             R6, R0
LDR             R3, [R3]
MOV             R3, R3,LSR#9
ORR             R3, R3, #0x100

loc_3BDE0
TST             R3, #1
ADD             R7, R7, #1
MOVEQ           R3, R3,LSR#1
BEQ             loc_3BDE0
LDR             R5, =0x186A0
MOVW            R0, #0xE5AC
BL              sub_174DC
MOV             R4, R0
STR             SP, [R0]
MUL             R5, R5, R7
MOV             R0, R5,LSL#2
BL              sub_1748C
STR             R0, [R4,#8]
STR             R0, [R4,#0x24]
STR             R0, [R4,#0x1C]
ADD             R0, R5, #0x22 ; '"'
MOV             R0, R0,LSL#2
SUB             R5, R5, #0x13
BL              sub_1748C
STR             R0, [R4,#0xC]
STR             R0, [R4,#0x20]
LDR             R0, =0x40004
BL              sub_1748C
MOV             R1, #1
STR             R0, [R4,#0x10]
MOV             R0, #0
BL              sub_585EC
MOVW            R3, #0x202
MOV             R2, #0
STRH            R3, [R4,#4]
MOV             R3, #0
STRD            R2, R3, [SP,#0x24+var_C]
MOV             R2, #0x100
MOV             R3, #0
ADD             R1, R4, #0x164
STRD            R2, R3, [R4,#0x2C]
MOV             R2, #0xFFFFFFFF
STR             R2, [R4,#0x50]
ADD             R2, R4, #0x64 ; 'd'
STR             R0, [R4,#0x4C]
STRB            R7, [R4,#6]
STR             R5, [R4,#0x38]
STR             R4, [SP,#0x24+var_24]
STR             R3, [R4,#0x34]

loc_3BE90
STRB            R3, [R2],#1
CMP             R2, R1
BNE             loc_3BE90
LDR             R3, [R4,#0x58]
MOV             R7, #4
LDR             R8, =aWriteError ; "write error"
ADD             R3, R3, #1
STR             R3, [R4,#0x58]

loc_3BEB0               ; nbytes
MOV             R2, #0x2000
MOV             R1, R6  ; buf
MOV             R0, #0  ; fd
BL              sub_18050
SUBS            R5, R0, #0
BGE             loc_3BF14
MOV             R4, #0xFFFFFFFF
LDR             R0, =aReadError ; "read error"
BL              sub_16AF4

loc_3BED4
LDR             R5, [SP,#0x24+var_24]
LDR             R0, [R5,#8] ; ptr
BL              free
LDR             R0, [R5,#0xC] ; ptr
BL              free
LDR             R0, [R5,#0x10] ; ptr
BL              free
LDR             R0, [R5,#0x4C] ; ptr
BL              free
MOV             R0, R5  ; ptr
BL              free
MOV             R0, R6  ; ptr
BL              free
MOV             R0, R4
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_3BF14
ADD             R9, R6, #0x2000
MOV             R10, #0x2000
STR             R5, [SP,#0x24+var_18]
STR             R6, [SP,#0x24+var_20]

loc_3BF24
LDR             R4, [SP,#0x24+var_24]
STR             R10, [SP,#0x24+var_14]
STR             R9, [SP,#0x24+var_1C]
LDRB            R3, [R4,#4]
CMP             R3, #2
BNE             loc_3BFB4
CMP             R5, #0
BEQ             loc_3BFB0
MOV             R0, R4
MOV             R4, #1
BL              sub_3BB70

loc_3BF50
LDR             R11, [SP,#0x24+var_14]
RSBS            R11, R11, #0x2000
BEQ             loc_3C004
MOV             R2, R11 ; n
MOV             R1, R9  ; buf
MOV             R0, #1  ; fd
BL              sub_17FB8
CMP             R11, R0
BEQ             loc_3C004
CMP             R0, #0
MOV             R4, #0xFFFFFFFF
LDRGE           R3, =dword_7DB94
MOVGE           R2, #0
LDRGE           R0, =aShortWrite ; "short write"
MOVLT           R0, R8
LDRGE           R3, [R3]
STRGE           R2, [R3]
BL              sub_16AF4

loc_3BF98
CMP             R5, #0
MOVNE           R5, R4,LSR#31
MOVEQ           R5, #1
CMP             R5, #0
BEQ             loc_3BEB0
B               loc_3BED4

loc_3BFB0
STRB            R7, [R4,#4]

loc_3BFB4
MOV             R0, R4
BL              sub_3BB70
LDR             R3, [R4]
LDR             R3, [R3,#0xC]
CMP             R3, #0
BNE             loc_3BFFC
LDR             R3, [R4,#0x2C]
CMP             R3, #0xFF
BHI             loc_3BFE4
LDR             R3, [R4,#0x30]
CMP             R3, #0
BGT             loc_3BFFC

loc_3BFE4
LDR             R2, [R4,#0x40]
LDR             R3, [R4,#0x3C]
CMP             R2, R3
MOVCC           R4, #3
MOVCS           R4, #4
B               loc_3BF50

loc_3BFFC
MOV             R4, #3
B               loc_3BF50

loc_3C004
CMP             R4, #4
BEQ             loc_3C024
CMP             R5, #0
BEQ             loc_3BF24
LDR             R4, [SP,#0x24+var_18]
CMP             R4, #0
BNE             loc_3BF24
B               loc_3BF98

loc_3C024
MOV             R4, #0
B               loc_3BF98
; End of function sub_3BDB8

off_3C02C DCD dword_7DBC0
dword_3C030 DCD 0x186A0
dword_3C034 DCD 0x40004
off_3C038 DCD aWriteError ; "write error"
off_3C03C DCD aReadError ; "read error"
off_3C040 DCD dword_7DB94
off_3C044 DCD aShortWrite ; "short write"



; int __fastcall sub_3C048(int, char **)
sub_3C048
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R5, R0
LDR             R1, =aCfkvqdtzs12345 ; "^cfkvqdtzs123456789"
MOV             R0, R4
BL              sub_593CC
TST             R0, #0x60
BEQ             loc_3C078
MOV             R1, R4
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_3D008

loc_3C078
LDR             R3, =optind
LDR             R2, =sub_3CD78
LDR             R1, =sub_3BDB8
LDR             R0, [R3]
LDR             R3, =aBz2 ; "bz2"
ADD             R0, R4, R0,LSL#2
POP             {R4-R6,LR}
B               sub_3CD8C
; End of function sub_3C048

off_3C098 DCD aCfkvqdtzs12345 ; "^cfkvqdtzs123456789"
off_3C09C DCD optind
off_3C0A0 DCD sub_3CD78
off_3C0A4 DCD sub_3BDB8
off_3C0A8 DCD aBz2      ; "bz2"



; int __fastcall sub_3C0AC(_DWORD *, int, _DWORD *)
sub_3C0AC

var_C= -0xC
var_4= -4

PUSH            {R0-R6,LR}
MOV             R3, #0
STR             R0, [SP,#0x10+var_C]
STR             R3, [SP,#0x10+var_4]

loc_3C0BC
LDR             R3, [SP,#0x10+var_C]
CMP             R3, #0
BNE             loc_3C0D4
LDR             R0, [SP,#0x10+var_4]
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_3C0D4
ADD             R0, SP, #0x10+var_C
MOV             R6, #0
BL              sub_5D2FC
BL              sub_61D20
MOV             R4, R0

loc_3C0E8
MOV             R0, R4
BL              sub_58D24
SUBS            R5, R0, #0
BNE             loc_3C104
MOV             R0, R4  ; stream
BL              fclose
B               loc_3C0BC

loc_3C104
MOV             R1, #0x2F ; '/'
BL              sub_16AA8
CMP             R5, R0
MOV             R1, R5
STRBCC          R6, [R0]
ADD             R0, SP, #0x10+var_4
BL              sub_5D2C8
B               loc_3C0E8
; End of function sub_3C0AC




; void *__fastcall sub_3C124(void *, size_t, __int64)
sub_3C124

var_28= -0x28
s= -0x1C

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x28
ADD             R5, SP, #0x28+s
MOV             R4, R1
MOV             R6, R0
MOV             R0, R5  ; s
STRD            R2, R3, [SP,#0x28+var_28]
MOV             R2, R1
LDR             R1, =a0Llo ; "%0*llo"
BL              sprintf
SUB             R0, R0, R4
MOV             R2, R4  ; n
LDRB            R3, [R5,R0]
ADD             R1, R5, R0
MOV             R0, R6  ; dest
CMP             R3, #0x30 ; '0'
ADDEQ           R1, R1, #1 ; src
BL              memcpy
ADD             SP, SP, #0x28 ; '('
POP             {R4-R6,PC}
; End of function sub_3C124

off_3C174 DCD a0Llo     ; "%0*llo"



; int __fastcall sub_3C178(ssize_t *, const char *, const char *, int)
sub_3C178

var_19D= -0x19D
var_19C= -0x19C
var_194= -0x194
var_18C= -0x18C
s= -0x184
var_178= -0x178
var_16C= -0x16C
var_168= -0x168
var_164= -0x164
dest= -0x163
var_100= -0x100
var_F8= -0xF8
var_D8= -0xD8
var_B8= -0xB8
var_B0= -0xB0
var_s0=  0

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x200
MOV             R7, R0
MOV             R8, R1
MOV             R5, R2
MOV             R1, #0  ; c
MOV             R2, #0x200 ; n
MOV             R0, SP  ; s
MOV             R4, R3
BL              memset
MOV             R2, #0x64 ; 'd' ; n
MOV             R1, R8  ; src
MOV             R0, SP  ; dest
BL              strncpy
LDR             R2, [R4,#0x10]
MOV             R3, #0
MOV             R1, #8
ADD             R0, SP, #0x200+var_19C
UBFX            R2, R2, #0, #0xC
BL              sub_3C124
LDR             R2, [R4,#0x18]
MOV             R3, #0
MOV             R1, #8
ADD             R0, SP, #0x200+var_194
BL              sub_3C124
MOV             R3, #0
LDR             R2, [R4,#0x1C]
MOV             R1, #8
ADD             R0, SP, #0x200+var_18C
BL              sub_3C124
MOV             R2, #0xB ; n
MOV             R1, #0x30 ; '0' ; c
ADD             R0, SP, #0x200+s ; s
BL              memset
LDR             R2, [R4,#0x50]
MOV             R1, #0xC
ADD             R0, SP, #0x200+var_178
BIC             R2, R2, R2,ASR#31
MOV             R3, R2,ASR#31
BL              sub_3C124
LDR             R0, [R4,#0x18]
BL              sub_5E890
MOV             R1, R0
ADD             R0, SP, #0x200+var_F8
MOV             R2, #0x20 ; ' '
ADD             R0, R0, #1
BL              sub_60B34
LDR             R0, [R4,#0x1C]
BL              sub_5E8A8
MOV             R1, R0
ADD             R0, SP, #0x200+var_D8
MOV             R2, #0x20 ; ' '
ADD             R0, R0, #1
BL              sub_60B34
LDR             R6, [R7,#0x10]
CMP             R6, #0
BEQ             loc_3C320
MOV             R3, #0x31 ; '1'
MOV             R2, #0x64 ; 'd' ; n
ADD             R1, R6, #0x18 ; src
ADD             R0, SP, #0x200+dest ; dest
STRB            R3, [SP,#0x200+var_164]
BL              strncpy

loc_3C274
ADD             R0, SP, #0x200+var_100
LDR             R1, =aUstar ; "ustar  "
ADD             R0, R0, #1 ; dest
LDR             R6, [R7]
MOV             R5, #0
BL              strcpy
LDR             R3, =0x20202020
MOV             R2, R5
STR             R3, [SP,#0x200+var_16C]
STR             R3, [SP,#0x200+var_168]

loc_3C29C
LDRB            R3, [SP,R5]
ADD             R5, R5, #1
CMP             R5, #0x200
ADD             R2, R2, R3
BNE             loc_3C29C
MOV             R3, R2,ASR#31
MOV             R1, #7
ADD             R0, SP, #0x200+var_16C
BL              sub_3C124
MOV             R2, R5
MOV             R1, SP
MOV             R0, R6
BL              sub_176C8
LDR             R3, [R7,#4]
CMP             R3, #0
BEQ             loc_3C318
LDR             R3, =stdout
LDR             R2, [R4,#0x10]
LDR             R1, =(asc_69510+3) ; "/"
LDR             R0, [R3]
LDR             R3, [R7]
AND             R2, R2, #0xF000
CMP             R3, #1
LDREQ           R3, =stderr
LDREQ           R0, [R3] ; stream
CMP             R2, #0x4000
LDR             R3, =(asc_6B39D+1) ; ""
MOV             R2, R8
MOVEQ           R3, R1
LDR             R1, =(aSSS_2+2) ; format
BL              fprintf

loc_3C318
MOV             R0, #1
B               loc_3C37C

loc_3C320
LDR             R3, [R4,#0x10]
AND             R3, R3, #0xF000
CMP             R3, #0xA000
BNE             loc_3C38C
MOV             R0, R5
BL              sub_17C9C
SUBS            R5, R0, #0
MOVEQ           R0, R5
BEQ             loc_3C37C
MOV             R3, #0x32 ; '2'
MOV             R2, #0x64 ; 'd' ; n
MOV             R1, R5  ; src
ADD             R0, SP, #0x200+dest ; dest
STRB            R3, [SP,#0x200+var_164]
BL              strncpy
LDRB            R3, [SP,#0x200+var_100]
MOV             R0, R5  ; ptr
CMP             R3, #0
BEQ             loc_3C384
BL              free
LDR             R0, =aNamesLongerTha ; "names longer than 100 chars not support"...
BL              sub_16DDC

loc_3C378
MOV             R0, R6

loc_3C37C
ADD             SP, SP, #0x200
POP             {R4-R8,PC}

loc_3C384
BL              free
B               loc_3C274

loc_3C38C
CMP             R3, #0x4000
BNE             loc_3C3C4
MOV             R3, #0x35 ; '5'
STRB            R3, [SP,#0x200+var_164]
LDRB            R3, [SP,#0x200+var_19D]
CMP             R3, #0
BNE             loc_3C274
MOV             R0, SP  ; s
BL              strlen
ADD             R3, SP, #0x200+var_s0
ADD             R0, R3, R0
MOV             R3, #0x2F ; '/'
STRB            R3, [R0,#-0x200]
B               loc_3C274

loc_3C3C4
CMP             R3, #0x2000
MOVEQ           R3, #0x33 ; '3'
BEQ             loc_3C3DC
CMP             R3, #0x6000
BNE             loc_3C424
MOV             R3, #0x34 ; '4'

loc_3C3DC               ; dev
LDRD            R0, R1, [R4,#0x20]
STRB            R3, [SP,#0x200+var_164]
BL              gnu_dev_major
MOV             R2, R0
ADD             R0, SP, #0x200+var_B8
MOV             R3, R6
MOV             R1, #8
ADD             R0, R0, #1
BL              sub_3C124
LDRD            R0, R1, [R4,#0x20] ; dev
BL              gnu_dev_minor
MOV             R2, R0
ADD             R0, SP, #0x200+var_B0
MOV             R3, R6
MOV             R1, #8
ADD             R0, R0, #1
BL              sub_3C124
B               loc_3C274

loc_3C424
CMP             R3, #0x1000
MOVEQ           R3, #0x36 ; '6'
BEQ             loc_3C460
CMP             R3, #0x8000
BNE             loc_3C474
LDRD            R2, R3, [R4,#0x30]
MOV             R1, #0xF
MOV             R0, #0xFFFFFFFF
CMP             R3, R1
CMPEQ           R2, R0
BHI             loc_3C468
MOV             R1, #0xC
ADD             R0, SP, #0x200+s
BL              sub_3C124
MOV             R3, #0x30 ; '0'

loc_3C460
STRB            R3, [SP,#0x200+var_164]
B               loc_3C274

loc_3C468
MOV             R1, R5
LDR             R0, =aCanTStoreFileS ; "can't store file '%s' of size %llu, abo"...
BL              sub_16DBC

loc_3C474
MOV             R1, R5
LDR             R0, =aSUnknownFileTy ; "%s: unknown file type"
BL              sub_16DDC
B               loc_3C378
; End of function sub_3C178

off_3C484 DCD aUstar    ; "ustar  "
dword_3C488 DCD 0x20202020
off_3C48C DCD stdout
off_3C490 DCD asc_69510+3 ; "/"
off_3C494 DCD stderr
off_3C498 DCD asc_6B39D+1 ; ""
off_3C49C DCD aSSS_2+2  ; "%s%s\n"
off_3C4A0 DCD aNamesLongerTha ; "names longer than 100 chars not support"...
off_3C4A4 DCD aCanTStoreFileS ; "can't store file '%s' of size %llu, abo"...
off_3C4A8 DCD aSUnknownFileTy ; "%s: unknown file type"



; int __fastcall sub_3C4AC(const char *, int, int)
sub_3C4AC
PUSH            {R4-R10,LR}
MOV             R7, R0
MOV             R4, R1
MOV             R5, R2
BL              sub_40108
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_3C4D4

loc_3C4CC
MOV             R0, #1
POP             {R4-R10,PC}

loc_3C4D4
LDR             R3, [R4,#0x10]
AND             R3, R3, #0xF000
CMP             R3, #0xC000
MOVEQ           R1, R7
LDREQ           R0, =aSSocketIgnored ; "%s: socket ignored"
BEQ             loc_3C540
CMP             R3, #0x4000
MOV             R2, #0
MOV             R6, R0
STR             R2, [R5,#0x10]
BEQ             loc_3C510
LDR             R3, [R4,#0x14]
CMP             R3, #1
LDRHI           R12, [R5,#0xC]
BHI             loc_3C574

loc_3C510
LDRD            R0, R1, [R5,#0x18]
LDRD            R2, R3, [R4]
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_3C5C4
LDRD            R0, R1, [R5,#0x78]
LDRD            R2, R3, [R4,#0x60]
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_3C5C4
LDR             R0, =aSFileIsTheArch ; "%s: file is the archive; skipping"
MOV             R1, R7

loc_3C540
BL              sub_16DDC
B               loc_3C4CC

loc_3C548
LDRD            R0, R1, [R4,#0x60]
LDRD            R2, R3, [R12,#0x10]
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_3C570
LDRD            R0, R1, [R4]
LDRD            R2, R3, [R12,#8]
CMP             R1, R3
CMPEQ           R0, R2
BEQ             loc_3C57C

loc_3C570
LDR             R12, [R12]

loc_3C574
CMP             R12, #0
BNE             loc_3C548

loc_3C57C
CMP             R12, #0
STR             R12, [R5,#0x10]
BNE             loc_3C510
MOV             R0, R6  ; s
BL              strlen
ADD             R0, R0, #0x20 ; ' '
BL              sub_1748C
LDR             R3, [R5,#0xC]
MOV             R1, R6  ; src
STR             R0, [R5,#0xC]
ADD             R0, R0, #0x18 ; dest
STR             R3, [R0,#-0x18]
LDRD            R2, R3, [R4]
STRD            R2, R3, [R0,#-0x10]
LDRD            R2, R3, [R4,#0x60]
STRD            R2, R3, [R0,#-8]
BL              strcpy
B               loc_3C510

loc_3C5C4
LDR             R8, [R5,#8]

loc_3C5C8
CMP             R8, #0
BNE             loc_3C618
MOV             R0, R6  ; s
BL              strlen
CMP             R0, #0x63 ; 'c'
BHI             loc_3C694
LDR             R3, [R5,#0x10]
CMP             R3, #0
BNE             loc_3C6A0
LDR             R3, [R4,#0x10]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BNE             loc_3C6A0
MOV             R1, R8
MOV             R0, R7
BL              sub_1760C
SUBS            R8, R0, #0
BGE             loc_3C6A4

loc_3C610
MOV             R0, #0
POP             {R4-R10,PC}

loc_3C618               ; pattern
LDR             R0, [R8,#4]
LDRB            R3, [R0]
CMP             R3, #0x2F ; '/'
SUBNE           R9, R6, #1
BNE             loc_3C684
MOV             R2, #9  ; flags
MOV             R1, R6  ; name
BL              fnmatch
CMP             R0, #0
BEQ             loc_3C648

loc_3C640
LDR             R8, [R8]
B               loc_3C5C8

loc_3C648
MOV             R0, #2
POP             {R4-R10,PC}

loc_3C650
CMP             R6, R9
BEQ             loc_3C664
LDRB            R2, [R9,#-1]
CMP             R2, #0x2F ; '/'
BNE             loc_3C684

loc_3C664
CMP             R3, #0x2F ; '/'
BEQ             loc_3C684
MOV             R2, #9  ; flags
MOV             R1, R9  ; name
LDR             R0, [R8,#4] ; pattern
BL              fnmatch
CMP             R0, #0
BEQ             loc_3C648

loc_3C684
LDRB            R3, [R9,#1]!
CMP             R3, #0
BNE             loc_3C650
B               loc_3C640

loc_3C694
LDR             R0, =aNamesLongerTha ; "names longer than 100 chars not support"...
BL              sub_16DDC
B               loc_3C4CC

loc_3C6A0
MOV             R8, #0xFFFFFFFF

loc_3C6A4
MOV             R3, R4
MOV             R2, R7
MOV             R1, R6
MOV             R0, R5
BL              sub_3C178
CMP             R0, #0
BEQ             loc_3C610
CMN             R8, #1
BEQ             loc_3C4CC
LDRD            R2, R3, [R4,#0x30]
MOV             R0, R8
LDR             R1, [R5]
BL              sub_17F58
MOV             R0, R8  ; fd
BL              close
LDR             R4, [R4,#0x30]
MOV             R1, #0  ; c
LDR             R0, =buf ; s
RSB             R4, R4, #0
UBFX            R4, R4, #0, #9
MOV             R2, R4  ; n
BL              memset
MOV             R2, R4
LDR             R1, =buf
LDR             R0, [R5]
BL              sub_176C8
B               loc_3C4CC
; End of function sub_3C4AC

off_3C710 DCD aSSocketIgnored ; "%s: socket ignored"
off_3C714 DCD aSFileIsTheArch ; "%s: file is the archive; skipping"
off_3C718 DCD aNamesLongerTha ; "names longer than 100 chars not support"...
off_3C71C DCD buf



; int __fastcall sub_3C720(int, const char *)
sub_3C720

var_18= -0x18
file= -0x14
var_C= -0xC
var_8= -8
fd= -4

PUSH            {R4,LR}
SUB             SP, SP, #0x18
STRD            R0, R1, [SP,#0x18+var_18]
MOV             R3, #0
ADD             R0, SP, #0x18+var_8
STR             R3, [SP,#0x18+var_C]
BL              sub_1766C
MOV             R1, #1  ; handler
MOV             R0, #0xD ; sig
BL              signal
BL              vfork
SUBS            R4, R0, #0
BGE             loc_3C75C
LDR             R0, =aVfork_0 ; "vfork"
BL              sub_16B40

loc_3C75C               ; fd
LDR             R0, [SP,#0x18+fd]
BNE             loc_3C7AC
BL              close
MOV             R1, R4
LDR             R0, [SP,#0x18+var_8]
BL              sub_176A8
MOV             R1, #1
LDR             R0, [SP,#0x18+var_18]
BL              sub_176A8
LDR             R1, [SP,#0x18+file] ; arg
MOV             R3, R4
LDR             R2, =aF_1 ; "-f"
MOV             R0, R1  ; file
BL              execlp
LDR             R3, =dword_7DB94
MOV             R0, #1  ; status
LDR             R3, [R3]
LDR             R3, [R3]
STR             R3, [SP,#0x18+var_C]
BL              _exit

loc_3C7AC
LDR             R1, [SP,#0x18+var_18]
BL              sub_176A8
LDR             R0, [SP,#0x18+var_8] ; fd
BL              close
LDR             R3, [SP,#0x18+var_C]
CMP             R3, #0
BEQ             loc_3C7E4
LDR             R3, =dword_7DB94
LDR             R2, [SP,#0x18+var_C]
LDR             R1, [SP,#0x18+file]
LDR             R3, [R3]
LDR             R0, =aCanTExecuteS ; "can't execute '%s'"
STR             R2, [R3]
BL              sub_16B40

loc_3C7E4
ADD             SP, SP, #0x18
POP             {R4,PC}
; End of function sub_3C720

off_3C7EC DCD aVfork_0  ; "vfork"
off_3C7F0 DCD aF_1      ; "-f"
off_3C7F4 DCD dword_7DB94
off_3C7F8 DCD aCanTExecuteS ; "can't execute '%s'"



; int __fastcall sub_3C7FC(int *, int, int **, const char *)
sub_3C7FC

stat_loc= -4

PUSH            {R0-R10,LR}
MOV             R7, R3
MOV             R5, R0
MOV             R8, R1
MOV             R6, R2
ADD             R1, R0, #0x18
LDR             R2, =aCanTStatTarFil ; "can't stat tar file"
LDR             R0, [R0]
BL              sub_17A30
CMP             R7, #0
BEQ             loc_3C834
MOV             R1, R7
LDR             R0, [R5]
BL              sub_3C720

loc_3C834
LDR             R10, =sub_3C4AC
MOV             R4, #0
MOV             R9, R4

loc_3C840
CMP             R6, #0
BNE             loc_3C8B4
MOV             R2, #0x400 ; n
MOV             R1, R6  ; c
LDR             R0, =buf ; s
BL              memset
MOV             R2, #0x400
LDR             R1, =buf
LDR             R0, [R5]
BL              sub_176C8
LDR             R0, [R5] ; fd
BL              close
CMP             R4, #0
BEQ             loc_3C880
LDR             R0, =aErrorExitDelay ; "error exit delayed from previous errors"
BL              sub_16DDC

loc_3C880
CMP             R7, #0
BEQ             loc_3C8A8
MOV             R2, #0  ; options
ADD             R1, SP, #0x10+stat_loc ; stat_loc
MOV             R0, #0xFFFFFFFF ; pid
BL              sub_17398
CMN             R0, #1
BNE             loc_3C8DC
LDR             R0, =aWaitpid_0 ; "waitpid"
BL              sub_16AF4

loc_3C8A8
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R10,PC}

loc_3C8B4
STMEA           SP, {R5,R9}
MOV             R3, R10
LDR             R0, [R6,#4]
MOV             R1, R8
LDR             R2, =sub_3C4AC
BL              sub_60474
CMP             R0, #0
LDR             R6, [R6]
MOVEQ           R4, #1
B               loc_3C840

loc_3C8DC
LDR             R3, [SP,#0x10+stat_loc]
TST             R3, #0x7F
MOVNE           R4, #1
BNE             loc_3C8A8
TST             R3, #0xFF00
MOVNE           R4, #1
B               loc_3C8A8
; End of function sub_3C7FC

off_3C8F8 DCD aCanTStatTarFil ; "can't stat tar file"
off_3C8FC DCD sub_3C4AC
off_3C900 DCD buf
off_3C904 DCD aErrorExitDelay ; "error exit delayed from previous errors"
off_3C908 DCD aWaitpid_0 ; "waitpid"



; int __fastcall sub_3C90C(int, int)
sub_3C90C

var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

LDR             R2, =(asc_6AE7B+3) ; "-"
MOV             R3, #0
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x30
MOV             R6, R1
STR             R3, [SP,#0x30+var_10]
STRD            R2, R3, [SP,#0x30+var_C]
STR             R3, [SP,#0x30+var_4]
BL              sub_3FD30
MOV             R3, #7
MOV             R4, R0
STR             R3, [R0]
BL              getuid
CMP             R0, #0
LDR             R0, [R6,#4] ; s
LDRNE           R3, [R4]
ORRNE           R3, R3, #0x20 ; ' '
STRNE           R3, [R4]
CMP             R0, #0
BEQ             loc_3C98C
LDRB            R3, [R0]
CMP             R3, #0
CMPNE           R3, #0x2D ; '-'
BEQ             loc_3C98C
MOV             R1, #0x66 ; 'f' ; c
BL              strchr
CMP             R0, #0
BNE             loc_3CB04

loc_3C97C
LDR             R1, [R6,#4]
LDR             R0, =aS_9 ; "-%s"
BL              sub_177E4
STR             R0, [R6,#4]

loc_3C98C
ADD             R3, SP, #0x30+var_8
ADD             R8, R4, #0xC
STR             R3, [SP,#0x30+var_18]
MOV             R0, R6
STR             R3, [SP,#0x30+var_1C]
ADD             R3, SP, #0x30+var_4
STR             R3, [SP,#0x30+var_20]
ADD             R3, R4, #0x38 ; '8'
STR             R3, [SP,#0x30+var_24]
ADD             R3, R4, #0x10
STR             R3, [SP,#0x30+var_28]
ADD             R3, SP, #0x30+var_C
STR             R3, [SP,#0x30+var_30]
ADD             R3, SP, #0x30+var_10
STR             R8, [SP,#0x30+var_2C]
LDR             R2, =aList_0 ; "list"
LDR             R1, =aTxcFOopvkchtXZ ; "^txC:f:OopvkchT:*X:*zm"
BL              sub_593F8
LDR             R3, =optind
MOV             R5, R0
LDR             R7, [R3]
LDR             R3, [SP,#0x30+var_8]
CMP             R3, #0
MOV             R7, R7,LSL#2
BEQ             loc_3CA04
CMP             R3, #1
LDR             R2, =sub_3FC48
LDREQ           R3, =sub_3FC40
STR             R2, [R4,#0x20]
STREQ           R3, [R4,#0x20]

loc_3CA04
TST             R5, #2
LDR             R0, [R4,#0x10]
LDRNE           R3, =sub_3D050
STRNE           R3, [R4,#0x24]
TST             R5, #0x10
LDRNE           R3, =sub_3D420
STRNE           R3, [R4,#0x24]
TST             R5, #0x100
LDRNE           R3, [R4]
BICNE           R3, R3, #4
STRNE           R3, [R4]
TST             R5, #0x20000
LDRNE           R3, [R4]
ORRNE           R3, R3, #0x40 ; '@'
STRNE           R3, [R4]
TST             R5, #0x20
LDRNE           R3, [R4]
ORRNE           R3, R3, #0x10
STRNE           R3, [R4]
TST             R5, #0x40000
LDRNE           R3, [R4]
ORRNE           R3, R3, #0x20 ; ' '
STRNE           R3, [R4]
TST             R5, #0x80000
LDRNE           R3, [R4]
BICNE           R3, R3, #4
ORRNE           R3, R3, #0x80
STRNE           R3, [R4]
TST             R5, #0x4000
LDRNE           R3, [R4]
BICNE           R3, R3, #1
STRNE           R3, [R4]
BL              sub_3C0AC
LDR             R3, [SP,#0x30+var_4]
MOV             R2, #0
STR             R0, [R4,#0x10]

loc_3CA94
CMP             R3, #0
BNE             loc_3CB1C
SUB             R7, R7, #4
CMP             R2, #0
ADD             R6, R6, R7
MOV             R7, #0
LDR             R0, [R4,#0xC]
STRNE           R3, [SP,#0x30+var_4]
BL              sub_3C0AC
STR             R0, [R4,#0xC]

loc_3CABC
LDR             R0, [R6,#4]!
CMP             R0, #0
BNE             loc_3CB38
LDR             R3, [R4,#0xC]
CMP             R3, #0
BNE             loc_3CAE0
LDR             R2, [R4,#0x10]
CMP             R2, #0
BEQ             loc_3CAE8

loc_3CAE0
LDR             R2, =sub_3F500
STR             R2, [R4,#8]

loc_3CAE8
ANDS            R6, R5, #0x200
BEQ             loc_3CB5C
CMP             R3, #0
BNE             loc_3CBFC
LDR             R0, =aEmptyArchive ; "empty archive"
BL              sub_16DBC

loc_3CB00
STRB            R3, [R0],#1

loc_3CB04
LDRB            R3, [R0,#1]
CMP             R3, #0
BNE             loc_3CB00
MOV             R3, #0x66 ; 'f'
STRB            R3, [R0]
B               loc_3C97C

loc_3CB1C
LDR             R1, [R3]
LDR             R2, [R4,#0x10]
STR             R2, [R3]
MOV             R2, #1
STR             R3, [R4,#0x10]
MOV             R3, R1
B               loc_3CA94

loc_3CB38
MOV             R1, #0x2F ; '/'
BL              sub_16AA8
LDR             R3, [R6]
CMP             R3, R0
STRBCC          R7, [R0]
MOV             R0, R8
LDR             R1, [R6]
BL              sub_5D2C8
B               loc_3CABC

loc_3CB5C
MOV             R1, R6
MOV             R3, R6

loc_3CB64
LDR             R0, [SP,#0x30+var_C]
AND             R7, R5, #0x2000
LDRB            R2, [R0]
CMP             R2, #0x2D ; '-'
BNE             loc_3CC08
LDRB            R2, [R0,#1]
CMP             R2, #0
BNE             loc_3CC08
STR             R3, [R4,#4]
LDR             R3, =sub_400F8
STR             R3, [R4,#0x28]

loc_3CB90
LDR             R0, [SP,#0x30+var_10]
CMP             R0, #0
BEQ             loc_3CBA0
BL              sub_178FC

loc_3CBA0
CMP             R6, #0
BEQ             loc_3CC44
CMP             R7, #0
MOV             R0, #0x80
LDR             R6, =aGzip ; "gzip"
MOVEQ           R6, #0
BL              sub_174DC
LDR             R2, [R4,#4]
MOV             R1, R5,LSR#9
EOR             R5, R5, #0x10000
AND             R1, R1, #2
UBFX            R5, R5, #0x10, #1
STR             R2, [R0]
MOV             R3, R6
LDR             R2, [SP,#0x30+var_8]
ORR             R1, R1, R5
STR             R2, [R0,#4]
LDR             R2, [R4,#0x10]
STR             R2, [R0,#8]
LDR             R2, [R4,#0xC]
BL              sub_3C7FC

loc_3CBF4
ADD             SP, SP, #0x30 ; '0'
POP             {R4-R8,PC}

loc_3CBFC
MOVW            R1, #0x241
MOV             R3, #1
B               loc_3CB64

loc_3CC08
CMP             R1, #0
BNE             loc_3CC38
CMP             R7, #0
BNE             loc_3CC38
MOV             R1, R7
BL              sub_40000
CMP             R0, #0
STR             R0, [R4,#4]
BGE             loc_3CB90
LDR             R1, [SP,#0x30+var_C]
LDR             R0, =aCanTOpenS ; "can't open '%s'"
BL              sub_16B40

loc_3CC38
BL              sub_175D8
STR             R0, [R4,#4]
B               loc_3CB90

loc_3CC44
CMP             R7, #0
BEQ             loc_3CC64
LDR             R2, =sub_3F2A0
MOV             R1, R6
LDR             R0, [R4,#4]
BL              sub_3FF4C
LDR             R3, =sub_400F8
STR             R3, [R4,#0x28]

loc_3CC64
LDR             R5, =dword_7DBA0
MOV             R3, #1
STR             R3, [R5]

loc_3CC70
MOV             R0, R4
BL              sub_3F6D0
CMP             R0, #0
BEQ             loc_3CCA0
LDR             R0, [R4,#0x1C]
BL              sub_40244

loc_3CC88
LDR             R0, [R4,#0xC]
CMP             R0, #0
BNE             loc_3CCA8
BL              sub_3FF04
LDR             R0, [R5]
B               loc_3CBF4

loc_3CCA0
STR             R0, [R5]
B               loc_3CC70

loc_3CCA8               ; name
LDR             R1, [R0,#4]
LDR             R0, [R4,#0x10] ; int
BL              sub_3F54C
CMP             R0, #0
BNE             loc_3CCE4
LDR             R3, [R4,#0xC]
LDR             R0, [R4,#0x14] ; int
LDR             R1, [R3,#4] ; name
BL              sub_3F54C
CMP             R0, #0
BNE             loc_3CCE4
LDR             R3, [R4,#0xC]
LDR             R0, =aSNotFoundInArc ; "%s: not found in archive"
LDR             R1, [R3,#4]
BL              sub_16DBC

loc_3CCE4
LDR             R3, [R4,#0xC]
LDR             R3, [R3]
STR             R3, [R4,#0xC]
B               loc_3CC88
; End of function sub_3C90C

off_3CCF4 DCD asc_6AE7B+3 ; "-"
off_3CCF8 DCD aS_9      ; "-%s"
off_3CCFC DCD aList_0   ; "list"
off_3CD00 DCD aTxcFOopvkchtXZ ; "^txC:f:OopvkchT:*X:*zm"
off_3CD04 DCD optind
off_3CD08 DCD sub_3FC48
off_3CD0C DCD sub_3FC40
off_3CD10 DCD sub_3D050
off_3CD14 DCD sub_3D420
off_3CD18 DCD sub_3F500
off_3CD1C DCD aEmptyArchive ; "empty archive"
off_3CD20 DCD sub_400F8
off_3CD24 DCD aGzip     ; "gzip"
off_3CD28 DCD aCanTOpenS ; "can't open '%s'"
off_3CD2C DCD sub_3F2A0
off_3CD30 DCD dword_7DBA0
off_3CD34 DCD aSNotFoundInArc ; "%s: not found in archive"



; const char *__fastcall sub_3CD38(const char *, const char *)
sub_3CD38
PUSH            {R4-R6,LR}
MOV             R6, R1
MOV             R1, #0x2E ; '.' ; c
MOV             R5, R0
BL              strrchr
SUBS            R4, R0, #0
BEQ             loc_3CD70
ADD             R0, R4, #1 ; s1
MOV             R1, R6  ; s2
BL              strcmp
CMP             R0, #0
STRBEQ          R0, [R4]
MOVNE           R4, #0
MOVEQ           R4, R5

loc_3CD70
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_3CD38




; char *__fastcall sub_3CD78(const char *, const char *)
sub_3CD78
MOV             R2, R1
MOV             R1, R0
LDR             R0, =aSS ; "%s.%s"
B               sub_177E4
; End of function sub_3CD78

off_3CD88 DCD aSS       ; "%s.%s"



; int __fastcall sub_3CD8C(int *, int (__fastcall *)(_BYTE *), int (__fastcall *)(int, int), int)
sub_3CD8C

var_BC= -0xBC
var_B8= -0xB8
tvp= -0xB4
var_AC= -0xAC
var_A8= -0xA8
var_A4= -0xA4
var_98= -0x98
var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C

PUSH            {R4-R11,LR}
MOV             R8, R0
LDR             R7, =dword_7DBC0
MOV             R9, R1
MOV             R10, R2
MOV             R6, #0
LDR             R11, =aSUnknownSuffix ; "%s: unknown suffix - ignored"
SUB             SP, SP, #0xBC
STR             R3, [SP,#0xBC+var_BC]

loc_3CDB0
LDR             R5, [R8]
CMP             R5, #0
BEQ             loc_3CE24
LDRB            R3, [R5]
CMP             R3, #0x2D ; '-'
BNE             loc_3CDD4
LDRB            R3, [R5,#1]
CMP             R3, #0
BEQ             loc_3CE64

loc_3CDD4
ADD             R1, SP, #0xBC+var_6C
MOV             R0, R5
BLX             sub_62DFC
SUBS            R4, R0, #0
BEQ             loc_3CE04
MOV             R6, #1
MOV             R4, #0
MOV             R0, R5
BL              sub_16B80

loc_3CDF8               ; ptr
MOV             R0, R4
BL              free
B               loc_3CFA0

loc_3CE04
MOV             R2, R4
MOV             R1, R4
MOV             R0, R5
BL              sub_175E0
CMP             R0, #0
BLT             loc_3CE98
MOV             R1, R4
BL              sub_176A8

loc_3CE24
LDR             R3, [R7]
TST             R3, #0x41
BEQ             loc_3CE70
ANDS            R5, R3, #0x40 ; '@'
BEQ             loc_3CE5C
MOV             R2, #0
MOV             R1, #1
LDR             R0, =aDevNull ; "/dev/null"
BL              sub_175E0
CMP             R0, #0
BLT             loc_3CE6C
MOV             R5, #0
MOV             R1, #1
BL              sub_176A8

loc_3CE5C
MOV             R4, R5
B               loc_3CED0

loc_3CE64
MOV             R5, R3
B               loc_3CE24

loc_3CE6C
BL              sub_16E08

loc_3CE70
CMP             R5, #0
BEQ             loc_3CE5C
LDR             R1, [SP,#0xBC+var_BC]
MOV             R0, R5
BLX             R10
SUBS            R4, R0, #0
BNE             loc_3CEA0
MOV             R1, R5
MOV             R0, R11
BL              sub_16DDC

loc_3CE98
MOV             R6, #1
B               loc_3CDF8

loc_3CEA0
LDR             R3, [R7]
TST             R3, #2
BEQ             loc_3CEB0
BL              unlink

loc_3CEB0
LDR             R2, [SP,#0xBC+var_5C]
MOV             R1, #0xC1
MOV             R0, R4
BL              sub_175E0
CMP             R0, #0
BLT             loc_3CFF0
MOV             R1, #1
BL              sub_176A8

loc_3CED0
LDR             R0, [R7]
ANDS            R0, R0, #2 ; fd
BNE             loc_3CEF0
BL              isatty
CMP             R0, #0
BEQ             loc_3CEF0
LDR             R0, =aCompressedData ; "compressed data not read from terminal,"...
BL              sub_16DBC

loc_3CEF0
ADD             R0, SP, #0xBC+var_A4
BL              sub_3FDF0
MOV             R2, #1
ADD             R0, SP, #0xBC+var_A4
STR             R2, [SP,#0xBC+var_98]
BLX             R9
LDR             R1, [R7]
CMP             R0, #0
MOVLT           R6, #1
MOV             R3, R0
MOV             R2, #1
TST             R1, #1
BNE             loc_3CF34
STR             R0, [SP,#0xBC+var_B8]
MOV             R0, R2
BL              sub_17700
LDR             R3, [SP,#0xBC+var_B8]

loc_3CF34
CMP             R5, #0
BEQ             loc_3CFA0
CMP             R3, #0
BLT             loc_3CFDC
LDR             R3, [SP,#0xBC+var_70]
CMP             R3, #0
BEQ             loc_3CF70
STR             R3, [SP,#0xBC+tvp]
ADD             R1, SP, #0xBC+tvp ; tvp
STR             R3, [SP,#0xBC+var_AC]
MOV             R0, R4  ; file
MOV             R3, #0
STR             R3, [SP,#0xBC+tvp.tv_usec]
STR             R3, [SP,#0xBC+var_A8]
BL              utimes

loc_3CF70
CMP             R4, R5
BNE             loc_3CF88
MOV             R0, R4  ; s
BL              strlen
MOV             R3, #0x2E ; '.'
STRB            R3, [R4,R0]

loc_3CF88
LDR             R3, [R7]
TST             R3, #4
MOVEQ           R0, R5
BEQ             loc_3CFE8

loc_3CF98
CMP             R4, R5
BNE             loc_3CDF8

loc_3CFA0
LDR             R3, [R8]
CMP             R3, #0
BEQ             loc_3CFB8
LDR             R3, [R8,#4]!
CMP             R3, #0
BNE             loc_3CDB0

loc_3CFB8
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #1
BEQ             loc_3CFD0
MOV             R0, #1
BL              sub_17700

loc_3CFD0
MOV             R0, R6
ADD             SP, SP, #0xBC
POP             {R4-R11,PC}

loc_3CFDC
CMP             R4, #0
BEQ             loc_3CDF8
MOV             R0, R4

loc_3CFE8
BL              sub_1761C
B               loc_3CF98

loc_3CFF0
MOV             R6, #1
B               loc_3CF98
; End of function sub_3CD8C

off_3CFF8 DCD dword_7DBC0
off_3CFFC DCD aSUnknownSuffix ; "%s: unknown suffix - ignored"
off_3D000 DCD aDevNull  ; "/dev/null"
off_3D004 DCD aCompressedData ; "compressed data not read from terminal,"...



; int __fastcall sub_3D008(int, char **)
sub_3D008
PUSH            {R4,LR}
MOV             R4, R1
MOV             R0, R4
LDR             R1, =aCfkvqdt ; "cfkvqdt"
BL              sub_593CC
LDR             R3, =optind
LDR             R2, =sub_3CD38
LDR             R1, =sub_3DE30
LDR             R0, [R3]
LDR             R3, =aBz2 ; "bz2"
ADD             R0, R4, R0,LSL#2
POP             {R4,LR}
B               sub_3CD8C
; End of function sub_3D008

off_3D03C DCD aCfkvqdt  ; "cfkvqdt"
off_3D040 DCD optind
off_3D044 DCD sub_3CD38
off_3D048 DCD sub_3DE30
off_3D04C DCD aBz2      ; "bz2"



; void __fastcall sub_3D050(_DWORD *)
sub_3D050

var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_18= -0x18

PUSH            {R4-R8,LR}
MOV             R7, R0
LDR             R5, [R0,#0x18]
SUB             SP, SP, #0x68
LDR             R3, [R5,#0x20]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BNE             loc_3D080
LDRD            R2, R3, [R5,#0x10]
ORRS            R3, R2, R3
LDREQ           R6, [R5,#4]
BEQ             loc_3D084

loc_3D080
MOV             R6, #0

loc_3D084
LDR             R8, [R7,#0x38]
LDR             R4, [R5]
CMP             R8, #0
BEQ             loc_3D0FC

loc_3D094               ; c
MOV             R1, #0x2F ; '/'
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_3D0B4
LDRB            R3, [R0,#1]
CMP             R3, #0
BNE             loc_3D0C4

loc_3D0B4
MOV             R0, R7
BL              sub_3D434

loc_3D0BC
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R8,PC}

loc_3D0C4
CMP             R6, #0
ADD             R4, R0, #1
BEQ             loc_3D0F4
MOV             R1, #0x2F ; '/' ; c
MOV             R0, R6  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_3D0B4
LDRB            R3, [R0,#1]
CMP             R3, #0
BEQ             loc_3D0B4
ADD             R6, R0, #1

loc_3D0F4
SUBS            R8, R8, #1
BNE             loc_3D094

loc_3D0FC
LDR             R3, [R7]
TST             R3, #2
BEQ             loc_3D13C
MOV             R1, #0x2F ; '/' ; c
MOV             R0, R4  ; s
BL              strrchr
SUBS            R8, R0, #0
BEQ             loc_3D13C
MOV             R3, #0
MOV             R2, #4
STRB            R3, [R8]
MOV             R1, #0xFFFFFFFF
MOV             R0, R4  ; path
BL              sub_5D824
MOV             R3, #0x2F ; '/'
STRB            R3, [R8]

loc_3D13C
LDR             R3, [R7]
TST             R3, #4
BEQ             loc_3D1A4
LDR             R1, [R5,#0x20] ; mode
AND             R3, R1, #0xF000
CMP             R3, #0x4000
BEQ             loc_3D3C4
CMP             R6, #0
BEQ             loc_3D174
MOV             R1, R4  ; s2
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_3D0BC

loc_3D174               ; name
MOV             R0, R4
BL              unlink
CMN             R0, #1
BNE             loc_3D230
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2

loc_3D194
BEQ             loc_3D230
MOV             R1, R4
LDR             R0, =aCanTRemoveOldF ; "can't remove old file %s"
BL              sub_16B40

loc_3D1A4
TST             R3, #8
BEQ             loc_3D230
MOV             R1, SP
MOV             R0, R4
BLX             sub_62E14
CMN             R0, #1
BNE             loc_3D1DC
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_3D230
LDR             R0, =aCanTStatOldFil ; "can't stat old file"
BL              sub_16B40

loc_3D1DC
LDR             R3, [R5,#0x24]
LDR             R2, [SP,#0x68+var_18]
CMP             R2, R3
BLT             loc_3D20C
LDR             R3, [R5,#0x20]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BEQ             loc_3D0B4
MOV             R1, R4
LDR             R0, =aSNotCreatedNew ; "%s not created: newer or same age file "...
BL              sub_16DDC
B               loc_3D0B4

loc_3D20C               ; name
MOV             R0, R4
BL              unlink
CMN             R0, #1
BNE             loc_3D230
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x15
B               loc_3D194

loc_3D230
CMP             R6, #0
BEQ             loc_3D250

loc_3D238
MOV             R3, #1
MOV             R2, R4
MOV             R1, R6  ; haystack
ADD             R0, R7, #0x1C ; int
BL              sub_401A0
B               loc_3D0BC

loc_3D250               ; mode
LDR             R1, [R5,#0x20]
AND             R3, R1, #0xF000
CMP             R3, #0x6000
BEQ             loc_3D3A4
BHI             loc_3D284
CMP             R3, #0x2000
BEQ             loc_3D3A4
CMP             R3, #0x4000
BEQ             loc_3D3CC
CMP             R3, #0x1000
BEQ             loc_3D3A4

loc_3D27C
LDR             R0, =aUnrecognizedFi ; "unrecognized file type"
BL              sub_16DBC

loc_3D284
CMP             R3, #0xA000
BEQ             loc_3D38C
CMP             R3, #0xC000
BEQ             loc_3D3A4
CMP             R3, #0x8000
BNE             loc_3D27C
LDR             R3, [R7]
MOV             R2, R1
MOV             R0, R4
MOVW            R1, #0x241
TST             R3, #0x80
MOVEQ           R1, #0xC1
BL              sub_175B4
LDRD            R2, R3, [R5,#0x10]
MOV             R6, R0
MOV             R1, R0
LDR             R0, [R7,#4]
BL              sub_17F58
MOV             R0, R6  ; fd
BL              close

loc_3D2D4
LDR             R3, [R5,#0x20]
AND             R3, R3, #0xF000
CMP             R3, #0xA000
BEQ             loc_3D0BC
LDR             R3, [R7]
TST             R3, #0x10
BNE             loc_3D340
TST             R3, #0x40
LDR             R6, [R5,#0x18]
LDR             R8, [R5,#0x1C]
BNE             loc_3D330
LDR             R0, [R5,#8] ; name
CMP             R0, #0
BEQ             loc_3D318
BL              getpwnam
CMP             R0, #0
LDRNE           R6, [R0,#8]

loc_3D318               ; name
LDR             R0, [R5,#0xC]
CMP             R0, #0
BEQ             loc_3D330
BL              getgrnam
CMP             R0, #0
LDRNE           R8, [R0,#8]

loc_3D330               ; group
MOV             R2, R8
MOV             R1, R6  ; owner
MOV             R0, R4  ; file
BL              chown

loc_3D340
LDR             R3, [R7]
TST             R3, #0x20
BNE             loc_3D358
LDR             R1, [R5,#0x20] ; mode
MOV             R0, R4  ; file
BL              chmod

loc_3D358
LDR             R3, [R7]
TST             R3, #1
BEQ             loc_3D0BC
LDR             R3, [R5,#0x24]
MOV             R1, SP  ; tvp
MOV             R0, R4  ; file
STR             R3, [SP,#0x68+var_68]
STR             R3, [SP,#0x68+var_60]
MOV             R3, #0
STR             R3, [SP,#0x68+var_64]
STR             R3, [SP,#0x68+var_5C]
BL              utimes
B               loc_3D0BC

loc_3D38C
MOV             R3, R6
MOV             R2, R4
LDR             R1, [R5,#4] ; haystack
ADD             R0, R7, #0x1C ; int
BL              sub_401A0
B               loc_3D2D4

loc_3D3A4
LDRD            R2, R3, [R5,#0x28]
MOV             R0, R4  ; path
BLX             sub_62E20
CMP             R0, #0
BEQ             loc_3D2D4
MOV             R1, R4
LDR             R0, =aCanTCreateNode ; "can't create node %s"
B               loc_3D3FC

loc_3D3C4
CMP             R6, #0
BNE             loc_3D238

loc_3D3CC               ; path
MOV             R0, R4
BL              mkdir
CMP             R0, #0
BEQ             loc_3D2D4
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
BIC             R3, R3, #4
CMP             R3, #0x11
MOVNE           R1, R4
LDRNE           R0, =aCanTMakeDirS ; "can't make dir %s"
BEQ             loc_3D2D4

loc_3D3FC
BL              sub_16AF4
B               loc_3D2D4
; End of function sub_3D050

off_3D404 DCD dword_7DB94
off_3D408 DCD aCanTRemoveOldF ; "can't remove old file %s"
off_3D40C DCD aCanTStatOldFil ; "can't stat old file"
off_3D410 DCD aSNotCreatedNew ; "%s not created: newer or same age file "...
off_3D414 DCD aUnrecognizedFi ; "unrecognized file type"
off_3D418 DCD aCanTCreateNode ; "can't create node %s"
off_3D41C DCD aCanTMakeDirS ; "can't make dir %s"



; __int64 __fastcall sub_3D420(int)
sub_3D420
LDR             R3, [R0,#0x18]
MOV             R1, #1
LDR             R0, [R0,#4]
LDRD            R2, R3, [R3,#0x10]
B               sub_17F58
; End of function sub_3D420




; int __fastcall sub_3D434(int)
sub_3D434
LDR             R3, [R0,#0x18]
LDR             R1, [R0,#0x28]
LDR             R0, [R0,#4]
LDRD            R2, R3, [R3,#0x10]
BX              R1
; End of function sub_3D434




; int __fastcall sub_3D448(int, int)
sub_3D448
PUSH            {R4-R10,LR}
MOV             R7, #0
LDR             R5, [R0]
MOV             R4, R0
MOV             R6, R1
MOV             R8, R7
MOV             R9, #0xFFFFFFFF

loc_3D464
CMP             R6, R5
BGT             loc_3D48C
LDR             R3, [R4,#4]
MOV             R0, #0xFFFFFFFF
SUB             R5, R5, R6
MVN             R6, R0,LSL R6
STR             R5, [R4]
AND             R5, R6, R3,LSR R5
ORR             R0, R5, R7
POP             {R4-R10,PC}

loc_3D48C
LDR             R2, [R4,#0x14]
LDR             R3, [R4,#0x10]
LDR             R1, [R4,#0x18] ; buf
CMP             R2, R3
BNE             loc_3D4C8
MOV             R2, #0x1000 ; nbytes
LDR             R0, [R4,#8] ; fd
BL              read
CMP             R0, #0
STR             R0, [R4,#0x10]
BGT             loc_3D4C4
MOV             R1, #0xFFFFFFFD ; val
LDR             R0, [R4,#0x44] ; env
BL              longjmp

loc_3D4C4
STR             R8, [R4,#0x14]

loc_3D4C8
LDR             R3, [R4,#0x14]
CMP             R5, #0x17
LDR             R1, [R4,#0x18]
SUBGT           R6, R6, R5
LDR             R2, [R4,#4]
ADD             R0, R3, #1
STR             R0, [R4,#0x14]
LDRB            R3, [R1,R3]
BICGT           R7, R2, R9,LSL R5
MOVGT           R5, #0
ADD             R5, R5, #8
MOVGT           R7, R7,LSL R6
ORR             R3, R3, R2,LSL#8
STR             R3, [R4,#4]
B               loc_3D464
; End of function sub_3D448




; int __fastcall sub_3D504(_DWORD *)
sub_3D504

var_680= -0x680
var_67C= -0x67C
var_678= -0x678
var_674= -0x674
var_670= -0x670
var_66C= -0x66C
var_668= -0x668
var_664= -0x664
var_660= -0x660
var_658= -0x658
var_504= -0x504
var_404= -0x404
var_4= -4

PUSH            {R4-R11,LR}
ADD             R3, R0, #0x440
SUB             SP, SP, #0x680
ADD             R3, R3, #8
SUB             SP, SP, #4
MOV             R4, R0
MOV             R1, #0x18
STR             R3, [SP,#0x684+var_674]
LDR             R11, [R0,#0x3C]
BL              sub_3D448
MOV             R1, #0x18
MOV             R6, R0
MOV             R0, R4
BL              sub_3D448
MOV             R1, #0x20 ; ' '
MOV             R5, R0
MOV             R0, R4
BL              sub_3D448
LDR             R2, =0x177245
LDR             R3, =0x385090
STR             R0, [R4,#0x30]
CMP             R6, R2
CMPEQ           R5, R3
MOVEQ           R0, #0xFFFFFFFF
BEQ             loc_3D5B8
LDR             R2, =0x314159
LDR             R3, =0x265359
CMP             R5, R3
CMPEQ           R6, R2
MOVNE           R0, #0xFFFFFFFE
BNE             loc_3D5B8
MOV             R1, #1
MOV             R0, R4
BL              sub_3D448
SUBS            R5, R0, #0
MOVNE           R0, #0xFFFFFFF9
BNE             loc_3D5B8
MOV             R1, #0x18
MOV             R0, R4
BL              sub_3D448
LDR             R3, [R4,#0x40]
STR             R0, [SP,#0x684+var_670]
CMP             R3, R0
BCS             loc_3D5C4

loc_3D5B4
MOV             R0, #0xFFFFFFFB

loc_3D5B8
ADD             SP, SP, #0x680
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_3D5C4
MOV             R1, #0x10
MOV             R0, R4
BL              sub_3D448
MOV             R6, R0
STR             R5, [SP,#0x684+var_680]

loc_3D5D8
TST             R6, #0x8000
BEQ             loc_3D620
MOV             R1, #0x10
MOV             R0, R4
BL              sub_3D448

loc_3D5EC
TST             R0, #0x8000
BEQ             loc_3D60C
LDR             R2, [SP,#0x684+var_680]
ADD             R3, SP, #0x684+var_4
ADD             R3, R3, R2
STRB            R5, [R3,#-0x600]
ADD             R3, R2, #1
STR             R3, [SP,#0x684+var_680]

loc_3D60C
ADD             R3, R5, #1
MOV             R0, R0,LSL#1
TST             R3, #0xF
BNE             loc_3D760
SUB             R5, R5, #0xF

loc_3D620
ADD             R5, R5, #0x10
MOV             R6, R6,LSL#1
CMP             R5, #0xFF
BLE             loc_3D5D8
MOV             R1, #3
MOV             R0, R4
BL              sub_3D448
SUB             R3, R0, #2
MOV             R6, R0
CMP             R3, #4
MOVLS           R3, #0
ADDLS           R2, SP, #0x684+var_504
BHI             loc_3D5B4

loc_3D654
CMP             R3, R6
BNE             loc_3D768
MOV             R1, #0xF
MOV             R0, R4
BL              sub_3D448
SUBS            R3, R0, #0
STR             R3, [SP,#0x684+var_668]
ADDNE           R8, SP, #0x684+var_504
LDRNE           R7, [SP,#0x684+var_674]
BEQ             loc_3D5B4

loc_3D67C
LDR             R3, [SP,#0x684+var_674]
LDR             R2, [SP,#0x684+var_668]
SUB             R3, R7, R3
CMP             R2, R3
BGT             loc_3D7C0
LDR             R3, [SP,#0x684+var_680]
ADD             R5, R4, #0x8400
ADD             R5, R5, #0x44 ; 'D'
ADD             R7, R3, #2
MOV             R3, #0
STR             R3, [SP,#0x684+var_678]

loc_3D6A8
LDR             R3, [SP,#0x684+var_678]
CMP             R3, R6
BNE             loc_3D7D4
MOV             R3, #0
ADD             R1, SP, #0x684+var_404
MOV             R0, R3
ADD             R2, SP, #0x684+var_504

loc_3D6C4
STR             R0, [R1,R3,LSL#2]
STRB            R3, [R3,R2]
ADD             R3, R3, #1
CMP             R3, #0x100
BNE             loc_3D6C4
LDR             R8, [SP,#0x684+var_674]
MOV             R5, #0
ADD             R9, R4, #0x8400
MOV             R6, R5
ADD             R9, R9, #0x48 ; 'H'

loc_3D6EC
LDR             R3, [SP,#0x684+var_674]
LDR             R2, [SP,#0x684+var_668]
SUB             R3, R8, R3
CMP             R2, R3
BLE             loc_3D5B4
LDRB            R7, [R8],#1
LDR             R3, [SP,#0x684+var_678]
CMP             R7, R3
BGE             loc_3D5B4
MOVW            R3, #0x4B4
MOV             R10, R5
MLA             R7, R3, R7, R9
ADD             R3, R7, #0x50 ; 'P'
STR             R3, [SP,#0x684+var_660]
SUB             R3, R7, #4
STR             R3, [SP,#0x684+var_664]
MOV             R3, #0x31 ; '1'
STR             R3, [SP,#0x684+var_66C]

loc_3D734
LDR             R3, [R4]
LDR             R1, [R7,#0x4B0]
SUBS            R2, R3, R1
BMI             loc_3D98C
LDR             R3, [R4,#4]
MOV             R0, #1
MOV             R0, R0,LSL R1
STR             R2, [R4]
SUB             R0, R0, #1
AND             R0, R0, R3,LSR R2
B               loc_3D9A4

loc_3D760
MOV             R5, R3
B               loc_3D5EC

loc_3D768
STRB            R3, [R3,R2]
ADD             R3, R3, #1
B               loc_3D654

loc_3D774
CMP             R5, R6
BEQ             loc_3D5B4
ADD             R5, R5, #1

loc_3D780
MOV             R1, #1
MOV             R0, R4
BL              sub_3D448
CMP             R0, #0
BNE             loc_3D774
ADD             R3, SP, #0x684+var_4
ADD             R3, R3, R5
SUB             R5, R5, #1
LDRB            R3, [R3,#-0x500]
ADD             R5, R8, R5

loc_3D7A8
SUB             R2, R5, R8
CMN             R2, #1
BNE             loc_3D7C8
STRB            R3, [R7],#1
STRB            R3, [SP,#0x684+var_504]
B               loc_3D67C

loc_3D7C0
MOV             R5, #0
B               loc_3D780

loc_3D7C8
LDRB            R2, [R5],#-1
STRB            R2, [R5,#2]
B               loc_3D7A8

loc_3D7D4
MOV             R1, #5
MOV             R0, R4
BL              sub_3D448
MOV             R9, #0
SUB             R8, R0, #1
ADD             R10, SP, #0x684+var_404

loc_3D7EC
CMP             R8, #0x13
BHI             loc_3D5B4
MOV             R1, #2
MOV             R0, R4
BL              sub_3D448
CMP             R0, #1
BGT             loc_3D908
LDR             R3, [R4]
ADD             R3, R3, #1
STR             R3, [R4]
ADD             R3, R8, #1
STRB            R3, [R9,R10]
ADD             R9, R9, #1
CMP             R7, R9
BGT             loc_3D7EC
ADD             R12, SP, #0x684+var_4
MOV             R1, #1
LDRB            R3, [R12,#-0x400]!
MOV             R2, R3

loc_3D838
LDRB            R0, [R1,R12]
CMP             R0, R2
MOVGT           R2, R0
BGT             loc_3D850
CMP             R3, R0
MOVGE           R3, R0

loc_3D850
ADD             R1, R1, #1
CMP             R7, R1
BGT             loc_3D838
ADD             R9, R5, #4
ADD             LR, R5, #0x54 ; 'T'
MOV             R1, R3
MOV             R12, #0
ADD             R10, SP, #0x684+var_404
STR             R3, [R5,#0x4B0]
STR             R2, [R5,#0x4B4]

loc_3D878
CMP             R1, R2
BLE             loc_3D91C
MOV             R1, #0
ADD             R8, SP, #0x684+var_404

loc_3D888
LDRB            R0, [R1,R8]
ADD             R12, SP, #0x684+var_4
ADD             R1, R1, #1
CMP             R7, R1
ADD             R0, R12, R0,LSL#2
LDR             R12, [R0,#-0x654]
ADD             R12, R12, #1
STR             R12, [R0,#-0x654]
BGT             loc_3D888
MOV             R8, #0
MOV             R0, R3
MOV             R1, R8

loc_3D8B8
CMP             R0, R2
BLT             loc_3D958
MOV             R12, R2,LSL#2
ADD             R0, SP, #0x684+var_4
ADD             R0, R0, R12
ADD             R12, R5, R12
LDR             R0, [R0,#-0x654]
SUB             R0, R0, #1
ADD             R1, R0, R1
STR             R1, [R5,R2,LSL#2]
MOV             R2, #0x7FFFFFFF
STR             R2, [R12,#4]
MOV             R2, #0
STR             R2, [LR,R3,LSL#2]
ADD             R5, R5, #0x4B0
LDR             R3, [SP,#0x684+var_678]
ADD             R5, R5, #4
ADD             R3, R3, #1
STR             R3, [SP,#0x684+var_678]
B               loc_3D6A8

loc_3D908
ADD             R0, R0, #1
AND             R0, R0, #2
SUB             R0, R0, #1
ADD             R8, R8, R0
B               loc_3D7EC

loc_3D91C
MOV             R8, #0
ADD             R0, SP, #0x684+var_658
STR             R8, [R0,R1,LSL#2]
MOV             R0, R8
STR             R8, [R5,R1,LSL#2]

loc_3D930
LDRB            R8, [R0,R10]
CMP             R8, R1
ADDEQ           R8, R9, R12,LSL#2
ADDEQ           R12, R12, #1
STREQ           R0, [R8,#0xA4]
ADD             R0, R0, #1
CMP             R7, R0
BGT             loc_3D930
ADD             R1, R1, #1
B               loc_3D878

loc_3D958
ADD             R12, SP, #0x684+var_658
LDR             R9, [R12,R0,LSL#2]
SUB             R12, R2, R0
ADD             R1, R9, R1
ADD             R8, R8, R9
MOV             R12, R1,LSL R12
MOV             R1, R1,LSL#1
SUB             R12, R12, #1
STR             R12, [R5,R0,LSL#2]
ADD             R0, R0, #1
SUB             R12, R1, R8
STR             R12, [LR,R0,LSL#2]
B               loc_3D8B8

loc_3D98C
LDR             R2, [R4,#0x14]
LDR             R0, [R4,#0x10]
CMP             R2, R0
BNE             loc_3DA38
MOV             R0, R4
BL              sub_3D448

loc_3D9A4
LDR             R3, [R7,#0x4AC]
LDR             R2, [SP,#0x684+var_664]
ADD             R2, R2, R3,LSL#2

loc_3D9B0
LDR             R1, [SP,#0x684+var_664]
SUB             R1, R2, R1
LDR             R12, [R2],#4
CMP             R12, R0
BLT             loc_3DA64
LDR             R2, [R7,#0x4B0]
SUBS            R2, R2, R3
BMI             loc_3D5B4
LDR             R3, [R4]
ADD             R3, R3, R2
STR             R3, [R4]
LDR             R3, [SP,#0x684+var_660]
LDR             R3, [R3,R1]
RSB             R0, R3, R0,ASR R2
MOVW            R3, #0x101
CMP             R0, R3
BHI             loc_3D5B4
ADD             R0, R7, R0,LSL#2
LDR             R3, [R0,#0xA4]
CMP             R3, #1
BHI             loc_3DA6C
CMP             R5, #0
LDRNE           R10, [SP,#0x684+var_67C]
MOVEQ           R5, #1
ADD             R3, R10, R5,LSL R3
STR             R3, [SP,#0x684+var_67C]
LDR             R3, [R4,#0x40]
CMP             R3, R5
MOVHI           R5, R5,LSL#1

loc_3DA24
LDR             R3, [SP,#0x684+var_66C]
SUBS            R3, R3, #1
STR             R3, [SP,#0x684+var_66C]
BPL             loc_3DA5C

loc_3DA34
B               loc_3D6EC

loc_3DA38
LDR             R1, [R4,#0x18]
ADD             R0, R2, #1
LDR             R12, [R4,#4]
ADD             R3, R3, #8
STR             R0, [R4,#0x14]
LDRB            R2, [R1,R2]
STR             R3, [R4]
ORR             R12, R2, R12,LSL#8
STR             R12, [R4,#4]

loc_3DA5C
MOV             R10, R5
B               loc_3D734

loc_3DA64
ADD             R3, R3, #1
B               loc_3D9B0

loc_3DA6C
CMP             R5, #0
BEQ             loc_3DAC0
LDR             R2, [SP,#0x684+var_67C]
LDR             R1, [R4,#0x40]
ADD             R2, R6, R2
CMP             R2, R1
BHI             loc_3D5B4
LDRB            R2, [SP,#0x684+var_504]
ADD             R1, SP, #0x684+var_4
LDR             R12, [SP,#0x684+var_67C]
ADD             R2, R1, R2
LDRB            R1, [R2,#-0x600]
ADD             R2, SP, #0x684+var_4
ADD             R0, R2, R1,LSL#2
LDR             R2, [R0,#-0x400]
ADD             R2, R2, R12
STR             R2, [R0,#-0x400]

loc_3DAB0
LDR             R2, [SP,#0x684+var_67C]
SUBS            R2, R2, #1
STR             R2, [SP,#0x684+var_67C]
BPL             loc_3DB34

loc_3DAC0
LDR             R2, [SP,#0x684+var_680]
CMP             R2, R3
BLT             loc_3DB40
LDR             R2, [R4,#0x40]
CMP             R2, R6
BLS             loc_3D5B4
ADD             R2, SP, #0x684+var_4
ADD             R1, SP, #0x684+var_504
ADD             R2, R2, R3
SUB             R3, R3, #1
LDRB            R2, [R2,#-0x501]
ADD             R3, R1, R3

loc_3DAF0
LDRB            R1, [R3,#-1]!
STRB            R1, [R3,#1]
ADD             R1, SP, #0x684+var_504
CMP             R1, R3
BNE             loc_3DAF0
ADD             R3, SP, #0x684+var_4
STRB            R2, [SP,#0x684+var_504]
ADD             R2, R3, R2
MOV             R5, #0
LDRB            R2, [R2,#-0x600]
STR             R2, [R11,R6,LSL#2]
ADD             R6, R6, #1
ADD             R1, R3, R2,LSL#2
LDR             R3, [R1,#-0x400]
ADD             R3, R3, #1
STR             R3, [R1,#-0x400]
B               loc_3DA24

loc_3DB34
STR             R1, [R11,R6,LSL#2]
ADD             R6, R6, #1
B               loc_3DAB0

loc_3DB40
MOV             R2, #0
ADD             R1, SP, #0x684+var_404
MOV             R3, R2

loc_3DB4C
LDR             R0, [R1,R3,LSL#2]
STR             R2, [R1,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x100
ADD             R2, R2, R0
BNE             loc_3DB4C
MOV             R3, #0

loc_3DB68
CMP             R3, R6
BNE             loc_3DBAC
CMP             R3, #0
BEQ             loc_3DBA0
LDR             R2, [SP,#0x684+var_670]
CMP             R3, R2
BLS             loc_3D5B4
LDR             R2, [R11,R2,LSL#2]
UXTB            R1, R2
MOV             R2, R2,LSR#8
STR             R2, [R4,#0x20]
MOV             R2, #5
STR             R1, [R4,#0x2C]
STR             R2, [R4,#0x24]

loc_3DBA0
STR             R3, [R4,#0x28]
MOV             R0, #0
B               loc_3D5B8

loc_3DBAC
LDRB            R1, [R11,R3,LSL#2]
ADD             R2, SP, #0x684+var_4
ADD             R1, R2, R1,LSL#2
LDR             R2, [R1,#-0x400]
LDR             R0, [R11,R2,LSL#2]
ORR             R0, R0, R3,LSL#8
ADD             R3, R3, #1
STR             R0, [R11,R2,LSL#2]
ADD             R2, R2, #1
STR             R2, [R1,#-0x400]
B               loc_3DB68
; End of function sub_3D504

dword_3DBD8 DCD 0x177245
dword_3DBDC DCD 0x385090
dword_3DBE0 DCD 0x314159
dword_3DBE4 DCD 0x265359



; int __fastcall sub_3DBE8(_DWORD *, _BYTE *, int)
sub_3DBE8
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R0, [R0,#0x28]
CMP             R0, #0
POPLT           {R4-R8,PC}
MOV             R6, R2
LDR             R2, [R4,#0x1C]
MOV             R5, R1
LDR             R7, [R4,#0x3C]
LDR             R1, [R4,#0x20]
CMP             R2, #0
LDR             R12, [R4,#0x2C]
LDR             R3, [R4,#0x38]
BEQ             loc_3DCF4

loc_3DC20
LDR             R2, [R4,#0x1C]
SUB             R2, R2, #1
STR             R2, [R4,#0x1C]

loc_3DC2C
SUBS            R6, R6, #1
BMI             loc_3DD24
EOR             R2, R12, R3,LSR#24
STRB            R12, [R5]
ADD             R0, R5, #1
ADD             R2, R2, #0x12
MOV             R5, R0
LDR             R2, [R4,R2,LSL#2]
EOR             R3, R2, R3,LSL#8
LDR             R2, [R4,#0x1C]
CMP             R2, #0
BNE             loc_3DC20

loc_3DC5C
MOV             LR, #5

loc_3DC60
LDR             R2, [R4,#0x28]
SUB             R2, R2, #1
CMP             R2, #0
STR             R2, [R4,#0x28]
BLT             loc_3DCC4
LDR             R2, [R4,#0x24]
LDR             R1, [R7,R1,LSL#2]
SUB             R2, R2, #1
CMP             R2, #0
STR             R2, [R4,#0x24]
UXTB            R0, R1
MOV             R1, R1,ASR#8
BEQ             loc_3DCA8
CMP             R0, R12
MOVNE           R2, #4
MOVNE           R12, R0
STRNE           R2, [R4,#0x24]
B               loc_3DC2C

loc_3DCA8
CMP             R0, #0
STR             R0, [R4,#0x1C]
STR             LR, [R4,#0x24]
BEQ             loc_3DC60
SUB             R0, R0, #1
STR             R0, [R4,#0x1C]
B               loc_3DC2C

loc_3DCC4
LDR             R2, [R4,#0x34]
MVN             R3, R3
STR             R3, [R4,#0x38]
EOR             R2, R3, R2,ROR#31
STR             R2, [R4,#0x34]
LDR             R2, [R4,#0x30]
CMP             R2, R3
BEQ             loc_3DCF4
ADD             R2, R2, #1
MOV             R0, #0xFFFFFFFF
STR             R2, [R4,#0x34]
POP             {R4-R8,PC}

loc_3DCF4
MOV             R0, R4
BL              sub_3D504
CMP             R0, #0
BEQ             loc_3DD14
CMN             R0, #1
STR             R0, [R4,#0x28]
MOVEQ           R0, R6
POP             {R4-R8,PC}

loc_3DD14
LDR             R1, [R4,#0x20]
MOV             R3, #0xFFFFFFFF
LDR             R12, [R4,#0x2C]
B               loc_3DC5C

loc_3DD24
STR             R3, [R4,#0x38]
MOV             R0, #0
LDR             R3, [R4,#0x1C]
STR             R1, [R4,#0x20]
STR             R12, [R4,#0x2C]
ADD             R3, R3, #1
STR             R3, [R4,#0x1C]
POP             {R4-R8,PC}
; End of function sub_3DBE8




; int __fastcall sub_3DD44(int, _DWORD *, int, const void *, size_t)
sub_3DD44

arg_0=  0x20

PUSH            {R4-R10,LR}
CMN             R2, #1
MOVW            R5, #0xA080
MOV             R6, R2
MOV             R9, R0
MOVW            R0, #0xB080
MOVEQ           R0, R5
MOV             R10, R1
MOV             R8, R3
LDR             R7, [SP,#arg_0]
BL              sub_174DC
CMN             R6, #1
MOV             R4, R0
STR             R0, [R10]
STR             R9, [R0,#0x44]
STR             R6, [R0,#8]
STREQ           R8, [R0,#0x18]
BEQ             loc_3DDA0
ADD             R0, R0, R5 ; dest
MOV             R2, R7  ; n
MOV             R1, R8  ; src
STR             R0, [R4,#0x18]
BL              memcpy

loc_3DDA0
MOV             R1, #1
ADD             R0, R4, #0x48 ; 'H'
STR             R7, [R4,#0x10]
BL              sub_585EC
MOV             R1, #0x10
MOV             R0, R4
BL              sub_3D448
SUB             R3, R0, #0x6800
SUB             R3, R3, #0x31 ; '1'
CMP             R3, #8
BHI             loc_3DDFC
LDR             R2, =0x186A0
LDR             R3, =0x6105C200
MLA             R0, R2, R0, R3
STR             R0, [R4,#0x40]
MOV             R0, R0,LSL#2
BL              sub_17450
CMP             R0, #0
STR             R0, [R4,#0x3C]
BNE             loc_3DE04
MOV             R0, R4  ; ptr
BL              free
BL              sub_16E08

loc_3DDFC
MOV             R0, #0xFFFFFFFE
POP             {R4-R10,PC}

loc_3DE04
MOV             R0, #0
POP             {R4-R10,PC}
; End of function sub_3DD44

dword_3DE0C DCD 0x186A0
dword_3DE10 DCD 0x6105C200



; void __fastcall sub_3DE14(void **)
sub_3DE14
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0,#0x3C] ; ptr
BL              free
MOV             R0, R4
POP             {R4,LR}
B               free
; End of function sub_3DE14




; int __fastcall sub_3DE30(int *)
sub_3DE30

var_1AC= -0x1AC
var_1A4= -0x1A4
ptr= -0x1A0
var_19C= -0x19C
var_198= -0x198
var_190= -0x190
env= -0x18C

PUSH            {R4,R5,LR}
MOVW            R1, #0x5A42
SUB             SP, SP, #0x1AC
STR             R0, [SP,#0x1AC+var_19C]
BL              sub_3FDFC
SUBS            R4, R0, #0
MOVNE           R4, #0xFFFFFFFF
BNE             loc_3DEEC
MOV             R0, #0x1000
BL              sub_1748C
ADD             R3, R0, #2
STR             R0, [SP,#0x1AC+ptr]
STR             R4, [SP,#0x1AC+var_1A4]
STR             R3, [SP,#0x1AC+var_198]

loc_3DE68               ; env
ADD             R0, SP, #0x1AC+env
BL              _setjmp
SUBS            R4, R0, #0
BNE             loc_3DF98
LDR             R3, [SP,#0x1AC+var_1A4]
ADD             R1, SP, #0x1AC+var_190
ADD             R0, SP, #0x1AC+env
STR             R3, [SP,#0x1AC+var_1AC]
LDRD            R2, R3, [SP,#0x1AC+var_19C]
LDR             R2, [R2,#8]
BL              sub_3DD44
SUBS            R4, R0, #0
BNE             loc_3DF98
MOV             R5, #0x1000

loc_3DEA0
MOV             R2, R5
LDR             R1, [SP,#0x1AC+ptr]
LDR             R0, [SP,#0x1AC+var_190]
BL              sub_3DBE8
SUBS            R4, R0, #0
BLT             loc_3DF98
RSBS            R4, R4, #0x1000
BEQ             loc_3DFA0
MOV             R2, R4
LDR             R1, [SP,#0x1AC+ptr]
LDR             R0, [SP,#0x1AC+var_19C]
BL              sub_3FE5C
CMP             R4, R0
BEQ             loc_3DEA0
MOV             R4, #0xFFFFFFFC

loc_3DEDC
LDR             R0, [SP,#0x1AC+var_190]
BL              sub_3DE14
LDR             R0, [SP,#0x1AC+ptr] ; ptr
BL              free

loc_3DEEC
MOV             R0, R4
ADD             SP, SP, #0x1AC
POP             {R4,R5,PC}

loc_3DEF8
MOV             R1, R4
LDR             R0, =aBunzipErrorD ; "bunzip error %d"
BL              sub_16DDC
B               loc_3DEDC

loc_3DF08
LDR             R1, [R3,#0x14]
LDR             R2, [R3,#0x10]
LDR             R3, [R3,#0x18]
LDR             R0, [SP,#0x1AC+ptr] ; dest
SUB             R2, R2, R1 ; n
ADD             R1, R3, R1 ; src
STR             R2, [SP,#0x1AC+var_1A4]
BL              memcpy
LDR             R3, [SP,#0x1AC+var_1A4]
CMP             R3, #1
BHI             loc_3DF64
RSB             R4, R3, #2
LDR             R1, [SP,#0x1AC+var_1A4]
LDR             R3, [SP,#0x1AC+ptr]
MOV             R2, R4  ; nbytes
ADD             R1, R3, R1 ; buf
LDR             R3, [SP,#0x1AC+var_19C]
LDR             R0, [R3,#8] ; fd
BL              sub_1800C
CMP             R4, R0
BNE             loc_3DF90
MOV             R3, #2
STR             R3, [SP,#0x1AC+var_1A4]

loc_3DF64
LDR             R3, [SP,#0x1AC+ptr]
LDR             R0, [SP,#0x1AC+var_190]
LDRH            R2, [R3]
MOVW            R3, #0x5A42
CMP             R2, R3
BNE             loc_3DF90
BL              sub_3DE14
LDR             R3, [SP,#0x1AC+var_1A4]
SUB             R3, R3, #2
STR             R3, [SP,#0x1AC+var_1A4]
B               loc_3DE68

loc_3DF90
MOV             R4, #0
B               loc_3DEDC

loc_3DF98
CMN             R4, #1
BNE             loc_3DEF8

loc_3DFA0
LDR             R3, [SP,#0x1AC+var_190]
LDR             R1, [R3,#0x30]
LDR             R2, [R3,#0x34]
CMP             R1, R2
BEQ             loc_3DF08
LDR             R0, =aCrcError_0 ; "CRC error"
BL              sub_16DDC
B               loc_3DEDC
; End of function sub_3DE30

off_3DFC0 DCD aBunzipErrorD ; "bunzip error %d"
off_3DFC4 DCD aCrcError_0 ; "CRC error"



; void __fastcall sub_3DFC8(int)
sub_3DFC8
PUSH            {R4,LR}
MOV             R4, R0

loc_3DFD0
CMP             R4, #0
POPEQ           {R4,PC}
SUB             R0, R4, #8 ; ptr
LDR             R4, [R4,#-4]
BL              free
B               loc_3DFD0
; End of function sub_3DFC8




; int __fastcall sub_3DFE8(int *, unsigned int, unsigned int, int, int, _DWORD *, unsigned int *)
sub_3DFE8

var_5C8= -0x5C8
var_5C4= -0x5C4
var_5C0= -0x5C0
var_5BC= -0x5BC
var_5B8= -0x5B8
var_5B4= -0x5B4
var_5B0= -0x5B0
var_5AC= -0x5AC
var_5A8= -0x5A8
var_5A4= -0x5A4
var_5A0= -0x5A0
var_59C= -0x59C
var_59B= -0x59B
var_598= -0x598
var_594= -0x594
s= -0x554
var_510= -0x510
var_50C= -0x50C
var_4CC= -0x4CC
var_4C8= -0x4C8
var_4C4= -0x4C4
var_488= -0x488
var_C= -0xC
arg_0=  0x24
arg_4=  0x28
arg_8=  0x2C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x5C0
SUB             SP, SP, #0xC
CMP             R1, #0x100
MOV             R6, R1
MOV             R1, #0  ; c
STR             R3, [SP,#0x5CC+var_5A8]
MOVLS           R3, #0x10
LDRHI           R3, [R0,#0x400]
MOV             R8, R0
STR             R2, [SP,#0x5CC+var_5BC]
MOV             R2, #0x44 ; 'D' ; n
MOV             R4, R6
STR             R3, [SP,#0x5CC+var_5C4]
LDR             R3, [SP,#0x5CC+arg_4]
STR             R1, [R3]
ADD             R3, SP, #0x5CC+s
MOV             R0, R3  ; s
BL              memset
MOV             R3, R0
MOV             R0, R8

loc_3E03C
LDR             R2, [R0],#4
ADD             R1, SP, #0x5CC+var_C
ADD             R1, R1, #8
SUBS            R4, R4, #1
ADD             R2, R1, R2,LSL#2
LDR             R1, [R2,#-0x550]
ADD             R1, R1, #1
STR             R1, [R2,#-0x550]
BNE             loc_3E03C
LDR             R2, [SP,#0x5CC+s]
CMP             R2, R6
BNE             loc_3E1FC
MOV             R0, #0x18
BL              sub_174DC
MOVW            R3, #0x163
ADD             R0, R0, #8
STRH            R3, [R0]
STRH            R3, [R0,#8]
LDR             R3, [SP,#0x5CC+arg_4]
LDR             R2, [SP,#0x5CC+arg_8]
STR             R0, [R3]
MOV             R0, R4
MOV             R3, #1
STR             R3, [R2]

loc_3E09C
ADD             SP, SP, #0x5C0
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_3E0A8
ADD             R2, R2, #1
CMP             R2, #0x11
BEQ             loc_3E0C0

loc_3E0B4
LDR             R1, [R3,R2,LSL#2]
CMP             R1, #0
BEQ             loc_3E0A8

loc_3E0C0
MOV             R7, R2
MOV             R5, #0x10

loc_3E0C8
LDR             R0, [R3,R5,LSL#2]
CMP             R0, #0
BNE             loc_3E0E0
CMP             R5, #0
BNE             loc_3E204
MOV             R0, R5

loc_3E0E0
LDR             R3, [SP,#0x5CC+arg_8]
LDR             R3, [R3]
CMP             R3, R2
MOVCC           R3, R2
BCC             loc_3E0FC
CMP             R3, R5
MOVCS           R3, R5

loc_3E0FC
LDR             R1, [SP,#0x5CC+arg_8]
ADD             R12, SP, #0x5CC+s
STR             R3, [R1]
MOV             R3, #1
MOV             R3, R3,LSL R2

loc_3E110
CMP             R5, R2
BHI             loc_3E20C
SUBS            R2, R3, R0
STR             R2, [SP,#0x5CC+var_5B4]
BMI             loc_3E4A8
ADD             R2, SP, #0x5CC+var_C
ADD             R1, SP, #0x5CC+var_4C4
ADD             R2, R2, #8
ADD             R0, SP, #0x5CC+s
ADD             R2, R2, R5,LSL#2
STR             R3, [R2,#-0x550]
MOV             R3, #0
MOV             R2, R3
STR             R3, [SP,#0x5CC+var_4C8]

loc_3E148
ADD             R2, R2, #1
CMP             R5, R2
BNE             loc_3E224
MOVW            R2, #0x484 ; n
MOV             R1, #0xFF ; c
ADD             R0, SP, #0x5CC+var_488 ; s
BL              memset
MOV             R3, #0

loc_3E168
LDR             R2, [R8,R3,LSL#2]
CMP             R2, #0
BEQ             loc_3E19C
ADD             R1, SP, #0x5CC+var_C
ADD             R1, R1, #8
ADD             R2, R1, R2,LSL#2
LDR             R1, [R2,#-0x4C8]
ADD             R0, R1, #1
STR             R0, [R2,#-0x4C8]
ADD             R2, SP, #0x5CC+var_C
ADD             R2, R2, #8
ADD             R1, R2, R1,LSL#2
STR             R3, [R1,#-0x484]

loc_3E19C
ADD             R3, R3, #1
CMP             R6, R3
BNE             loc_3E168
MOV             R3, #0
STR             R3, [SP,#0x5CC+var_4CC]
MOV             R2, R3
STR             R3, [SP,#0x5CC+var_510]
MOV             R12, R3
STR             R3, [SP,#0x5CC+var_594]
STR             R3, [SP,#0x5CC+var_5C8]
ADD             R3, SP, #0x5CC+var_488
STR             R3, [SP,#0x5CC+var_5C0]
MOV             R3, #0xFFFFFFFF

loc_3E1D0
CMP             R7, R5
BLE             loc_3E234
LDR             R3, [SP,#0x5CC+var_50C]
SUBS            R0, R5, #1
LDR             R2, [SP,#0x5CC+arg_8]
MOVNE           R0, #1
STR             R3, [R2]
LDR             R3, [SP,#0x5CC+var_5B4]
CMP             R3, #0
MOVEQ           R0, #0
B               loc_3E09C

loc_3E1FC
MOV             R2, #1
B               loc_3E0B4

loc_3E204
SUB             R5, R5, #1
B               loc_3E0C8

loc_3E20C
LDR             R1, [R12,R2,LSL#2]
SUBS            R3, R3, R1
BMI             loc_3E4A8
ADD             R2, R2, #1
MOV             R3, R3,LSL#1
B               loc_3E110

loc_3E224
LDR             R12, [R0,R2,LSL#2]
ADD             R3, R3, R12
STR             R3, [R1],#4
B               loc_3E148

loc_3E234
ADD             R1, SP, #0x5CC+s
SUB             R0, R7, #1
MOV             LR, #1
LDR             R10, [R1,R7,LSL#2]
MOV             R0, LR,LSL R0
ADD             R1, R1, R7,LSL#2
STR             R0, [SP,#0x5CC+var_5AC]
STR             R1, [SP,#0x5CC+var_5B8]

loc_3E254
SUB             R1, R10, #1
CMN             R1, #1
STR             R1, [SP,#0x5CC+var_5B0]
BEQ             loc_3E4A0
MOV             R11, #1
B               loc_3E384

loc_3E26C
LDR             R3, [SP,#0x5CC+arg_8]
SUB             R6, R7, R8
SUB             R2, R5, R8
MOV             R0, R11,LSL R6
LDR             R3, [R3]
CMP             R2, R3
MOVCS           R2, R3
CMP             R10, R0
BCS             loc_3E2AC
LDR             R3, [SP,#0x5CC+var_5B8]
MOV             R1, #0xFFFFFFFC
SUB             R0, R0, R10
MLA             R1, R1, R6, R3

loc_3E2A0
ADD             R6, R6, #1
CMP             R2, R6
BHI             loc_3E444

loc_3E2AC
LDR             R2, [SP,#0x5CC+var_5C4]
ADD             R3, R8, R6
MOV             R1, R2
CMP             R3, R2
MOVLS           R2, #0
MOVHI           R2, #1
CMP             R8, R1
MOVCS           R2, #0
CMP             R2, #0
MOV             R3, R2
MOVNE           R3, R1
ADD             R2, SP, #0x5CC+var_510
SUBNE           R6, R3, R8
MOV             R3, R11,LSL R6
ADD             R1, R8, R6
STR             R3, [SP,#0x5CC+var_5C8]
MOV             R3, R9,LSL#2
ADD             R2, R2, R3
STR             R3, [SP,#0x5CC+var_5A0]
MOV             R3, R11,LSL R6
STR             R1, [R2,#4]
STR             R2, [SP,#0x5CC+var_5A4]
ADD             R0, R3, #1
MOV             R0, R0,LSL#3
BL              sub_174DC
LDR             R3, [SP,#0x5CC+arg_4]
ADD             R12, R0, #8
CMP             R9, #0
ADD             R1, SP, #0x5CC+var_594
STR             R12, [R3]
ADD             R3, R0, #4
STR             R3, [SP,#0x5CC+arg_4]
STR             R12, [R1,R9,LSL#2]
LDRD            R2, R3, [SP,#0x5CC+var_5A4]
BEQ             loc_3E37C
LDR             R2, [R2,#-4]
ADD             LR, R1, R3
MOV             R3, R11,LSL R8
ADD             R0, SP, #0x5CC+var_4CC
STR             R4, [R0,R9,LSL#2]
ADD             R6, R6, #0x10
SUB             R3, R3, #1
STR             R12, [SP,#0x5CC+var_598]
AND             R3, R3, R4
STRB            R6, [SP,#0x5CC+var_59C]
MOV             R0, R3,LSR R2
LDR             R3, [LR,#-4]
SUB             R2, R8, R2
STRB            R2, [SP,#0x5CC+var_59B]
ADD             R3, R3, R0,LSL#3
LDMDB           R1, {R0,R1}
STM             R3, {R0,R1}

loc_3E37C
MOV             R2, R8
MOV             R3, R9

loc_3E384
ADD             R9, R3, #1
ADD             R1, SP, #0x5CC+var_510
LDR             R8, [R1,R9,LSL#2]
CMP             R8, R7
BLT             loc_3E26C
LDR             R1, [SP,#0x5CC+var_5C0]
SUB             R8, R7, R2
UXTB            R8, R8
LDR             R1, [R1]
CMN             R1, #1
MOVEQ           R6, #0x63 ; 'c'
BEQ             loc_3E3DC
LDR             R0, [SP,#0x5CC+var_5C0]
ADD             R0, R0, #4
STR             R0, [SP,#0x5CC+var_5C0]
LDR             R0, [SP,#0x5CC+var_5BC]
CMP             R1, R0
BCS             loc_3E45C
CMP             R1, #0x100
MOVEQ           R6, #0xF
MOVNE           R6, #0x10

loc_3E3D8
STRH            R1, [SP,#0x5CC+var_598]

loc_3E3DC
SUB             R1, R7, R2
MOV             R9, #1
MOV             R9, R9,LSL R1
MOV             LR, R4,LSR R2
ADD             R10, SP, #0x5CC+var_59C

loc_3E3F0
LDR             R1, [SP,#0x5CC+var_5C8]
CMP             LR, R1
BCC             loc_3E47C
LDR             R1, [SP,#0x5CC+var_5AC]

loc_3E400
AND             R0, R4, R1
EOR             R4, R4, R1
CMP             R0, #0
BNE             loc_3E498
LDR             R10, [SP,#0x5CC+var_5B0]
MOV             R6, #1
ADD             LR, SP, #0x5CC+var_4CC

loc_3E41C
MOV             R1, R6,LSL R2
LDR             R0, [LR,R3,LSL#2]
SUB             R1, R1, #1
AND             R1, R1, R4
CMP             R1, R0
BEQ             loc_3E254
SUB             R3, R3, #1
ADD             R2, SP, #0x5CC+var_510
LDR             R2, [R2,R3,LSL#2]
B               loc_3E41C

loc_3E444
LDR             R3, [R1,R6,LSL#2]
MOV             R0, R0,LSL#1
CMP             R3, R0
BCS             loc_3E2AC
SUB             R0, R0, R3
B               loc_3E2A0

loc_3E45C
LDR             R0, [SP,#0x5CC+var_5BC]
SUB             R1, R1, R0
LDR             R0, [SP,#0x5CC+arg_0]
LDRB            R6, [R0,R1]
MOV             R1, R1,LSL#1
LDR             R0, [SP,#0x5CC+var_5A8]
LDRH            R1, [R0,R1]
B               loc_3E3D8

loc_3E47C
STRB            R6, [SP,#0x5CC+var_59C]
ADD             R11, R12, LR,LSL#3
STRB            R8, [SP,#0x5CC+var_59B]
ADD             LR, LR, R9
LDM             R10, {R0,R1}
STM             R11, {R0,R1}
B               loc_3E3F0

loc_3E498
MOV             R1, R1,LSR#1
B               loc_3E400

loc_3E4A0
ADD             R7, R7, #1
B               loc_3E1D0

loc_3E4A8
MOV             R0, #2
B               loc_3E09C
; End of function sub_3DFE8



; Attributes: noreturn

; void __fastcall __noreturn sub_3E4B0(int)
sub_3E4B0
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0,#0x4C]
BL              sub_3DFC8
LDR             R0, [R4,#0x50]
BL              sub_3DFC8
MOV             R3, #0
MOV             R1, #1  ; val
STR             R3, [R4,#0x4C]
ADD             R0, R4, #0x88 ; env
STR             R3, [R4,#0x50]
BL              longjmp
; End of function sub_3E4B0




; int __fastcall sub_3E4E0(int, int, unsigned int *, unsigned int)
sub_3E4E0

var_8= -8

PUSH            {R0,R1,R4-R10,LR}
MOV             R4, R0
MOV             R5, R2
MOV             R9, R3
MOV             R8, R1
MOVW            R6, #0x3FFB
MOV             R7, #0
MOV             R10, #4

loc_3E500
LDR             R3, [R5]
CMP             R3, R9
BCC             loc_3E518
MOV             R0, R8
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_3E518
LDRD            R2, R3, [R4,#0x30]
CMP             R2, R3
BCC             loc_3E590
LDRD            R2, R3, [R4,#0x28]
LDR             R1, [R4,#0x24]
LDR             R0, [R4,#0xC] ; fd
CMP             R3, R7
CMPEQ           R2, R6
ADD             R1, R1, #4 ; buf
MOVWHI          R2, #0x3FFC ; nbytes
BL              sub_1800C
CMP             R0, #0
STR             R0, [R4,#0x34]
BGT             loc_3E560
LDR             R3, =aUnexpectedEndO ; "unexpected end of file"
MOV             R0, R4
STR             R3, [R4,#0x84]
BL              sub_3E4B0

loc_3E560
LDRD            R2, R3, [R4,#0x28]
CMP             R2, #0
STRD            R2, R3, [SP,#8+var_8]
SBCS            R3, R3, #0
BLT             loc_3E584
LDRD            R2, R3, [SP,#8+var_8]
SUBS            R2, R2, R0
SBC             R3, R3, #0
STRD            R2, R3, [R4,#0x28]

loc_3E584
ADD             R0, R0, #4
STR             R10, [R4,#0x30]
STR             R0, [R4,#0x34]

loc_3E590
LDR             R3, [R4,#0x30]
LDR             R2, [R4,#0x24]
LDRB            R1, [R2,R3]
ADD             R3, R3, #1
LDR             R2, [R5]
STR             R3, [R4,#0x30]
LDR             R3, [R5]
ORR             R8, R8, R1,LSL R2
ADD             R3, R3, #8
STR             R3, [R5]
B               loc_3E500
; End of function sub_3E4E0

off_3E5BC DCD aUnexpectedEndO ; "unexpected end of file"



; bool __fastcall sub_3E5C0(int, signed int)
sub_3E5C0
PUSH            {R4-R8,LR}
LDR             R3, [R0,#0x30]
LDR             R4, [R0,#0x34]
SUB             R4, R4, R3
CMP             R1, R4
BLE             loc_3E640
MOV             R5, R0
LDR             R0, [R0,#0x24] ; dest
MOV             R2, R4  ; n
MOV             R7, R1
MOV             R6, #0
ADD             R1, R0, R3 ; src
BL              memmove
LDR             R1, [R5,#0x24]
RSB             R2, R4, #0x4000 ; nbytes
STR             R6, [R5,#0x30]
LDR             R0, [R5,#0xC] ; fd
ADD             R1, R1, R4 ; buf
BL              sub_18050
CMP             R0, R6
STR             R0, [R5,#0x34]
BGE             loc_3E628
LDR             R0, =aReadError ; "read error"
BL              sub_16DDC
MOV             R0, R6
POP             {R4-R8,PC}

loc_3E628
ADD             R4, R4, R0
CMP             R4, R7
STR             R4, [R5,#0x34]
MOVCC           R0, #0
MOVCS           R0, #1
POP             {R4-R8,PC}

loc_3E640
MOV             R0, #1
POP             {R4-R8,PC}
; End of function sub_3E5C0

off_3E648 DCD aReadError ; "read error"



; int __fastcall sub_3E64C(int, unsigned int *)
sub_3E64C

var_52C= -0x52C
var_528= -0x528
var_524= -0x524
var_518= -0x518
var_514= -0x514
var_510= -0x510
var_508= -0x508
var_504= -0x504
var_500= -0x500
var_4FC= -0x4FC
var_4F8= -0x4F8
var_4F4= -0x4F4
var_94= -0x94
var_90= -0x90
var_8C= -0x8C
var_88= -0x88
var_84= -0x84
var_80= -0x80
var_7C= -0x7C
var_78= -0x78
var_C= -0xC

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x520
LDRB            R3, [R0,#0x20]
SUB             SP, SP, #0xC
MOV             R5, R1
ADD             R2, SP, #0x52C+var_508
LDR             R1, [R0,#0x1C]
MOV             R4, R0
STR             R3, [SP,#0x52C+var_508]
MOV             R3, #1
BL              sub_3E4E0
AND             R3, R0, #1
MOV             R1, R0,LSR#1
STR             R3, [R5]
ADD             R2, SP, #0x52C+var_508
LDR             R3, [SP,#0x52C+var_508]
MOV             R0, R4
SUB             R3, R3, #1
STR             R3, [SP,#0x52C+var_508]
MOV             R3, #2
BL              sub_3E4E0
LDR             R3, [SP,#0x52C+var_508]
MOV             R1, R0,LSR#2
AND             R0, R0, #3
CMP             R0, #1
STR             R1, [R4,#0x1C]
SUB             R3, R3, #2
STR             R3, [SP,#0x52C+var_508]
STRB            R3, [R4,#0x20]
BEQ             loc_3E764
UXTB            R2, R3
BCC             loc_3E6DC
CMP             R0, #2
BEQ             loc_3E884

loc_3E6D4
MOV             R0, R4
BL              sub_3E4B0

loc_3E6DC
AND             R0, R3, #7
MOV             R3, #0x10
SUB             R2, R2, R0
MOV             R1, R1,LSR R0
STR             R2, [SP,#0x52C+var_504]
MOV             R0, R4
ADD             R2, SP, #0x52C+var_504
BL              sub_3E4E0
LDR             R3, [SP,#0x52C+var_504]
MOV             R5, R0
ADD             R2, SP, #0x52C+var_504
UXTH            R5, R5
SUB             R3, R3, #0x10
STR             R3, [SP,#0x52C+var_504]
MOV             R3, #0x10
MOV             R1, R0,LSR R3
MOV             R0, R4
BL              sub_3E4E0
MVN             R3, R0
UXTH            R3, R3
CMP             R3, R5
BNE             loc_3E6D4
MOV             R0, R0,LSR#16
LDR             R2, [SP,#0x52C+var_504]
STR             R3, [R4,#0x74]
LDR             R3, [R4,#0x10]
STR             R0, [R4,#0x78]
MOV             R0, #0xFFFFFFFF
SUB             R2, R2, #0x10
STR             R2, [R4,#0x7C]
STR             R3, [R4,#0x80]

loc_3E758
ADD             SP, SP, #0x520
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_3E764
MOV             R3, #0
ADD             R5, SP, #0x52C+var_4F4
MOV             R2, #8

loc_3E770
STR             R2, [R5,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x90
BNE             loc_3E770
MOV             R2, #9

loc_3E784
STR             R2, [R5,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x100
BNE             loc_3E784
MOV             R2, #7

loc_3E798
STR             R2, [R5,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x118
BNE             loc_3E798
MOV             R3, #8
STR             R2, [SP,#0x52C+var_4FC]
STR             R3, [SP,#0x52C+var_94]
MOV             R1, #0x120
STR             R3, [SP,#0x52C+var_90]
MOVW            R2, #0x101
STR             R3, [SP,#0x52C+var_8C]
MOV             R0, R5
STR             R3, [SP,#0x52C+var_88]
STR             R3, [SP,#0x52C+var_84]
STR             R3, [SP,#0x52C+var_80]
STR             R3, [SP,#0x52C+var_7C]
STR             R3, [SP,#0x52C+var_78]
SUB             R3, R5, #8
STR             R3, [SP,#0x52C+var_524]
ADD             R3, R4, #0x4C ; 'L'
STR             R3, [SP,#0x52C+var_528]
LDR             R3, =unk_693B0
STR             R3, [SP,#0x52C+var_52C]
LDR             R3, =unk_64362
BL              sub_3DFE8
MOV             R1, #0
MOV             R3, #5

loc_3E804
STR             R3, [R5,R1,LSL#2]
ADD             R1, R1, #1
CMP             R1, #0x1E
BNE             loc_3E804
STR             R3, [SP,#0x52C+var_4F8]
SUB             R3, R5, #4
STR             R3, [SP,#0x52C+var_524]
ADD             R3, R4, #0x50 ; 'P'
STR             R3, [SP,#0x52C+var_528]
MOV             R2, #0
LDR             R3, =unk_69392
MOV             R0, R5
STR             R3, [SP,#0x52C+var_52C]
LDR             R3, =unk_64326
BL              sub_3DFE8
LDRD            R2, R3, [SP,#0x52C+var_4FC]

loc_3E844
LDR             R1, [R4,#0x1C]
MOV             R0, #0xFFFFFFFE
STRD            R2, R3, [R4,#0x54]
MOV             R2, R2,LSL#1
MOV             R3, R3,LSL#1
STR             R1, [R4,#0x40]
LDRB            R1, [R4,#0x20]
STR             R1, [R4,#0x44]
LDR             R1, [R4,#0x10]
STR             R1, [R4,#0x48]
LDR             R1, =word_643A0
LDRH            R2, [R1,R2]
LDRH            R3, [R1,R3]
STR             R2, [R4,#0x38]
STR             R3, [R4,#0x3C]
B               loc_3E758

loc_3E884
STR             R2, [SP,#0x52C+var_4F8]
MOV             R3, #5
ADD             R2, SP, #0x52C+var_4F8
MOV             R0, R4
BL              sub_3E4E0
LDR             R3, [SP,#0x52C+var_4F8]
AND             R9, R0, #0x1F
ADD             R2, SP, #0x52C+var_4F8
ADD             R9, R9, #0x100
MOVW            R6, #0x11E
ADD             R9, R9, #1
SUB             R3, R3, #5
ADD             R8, SP, #0x52C+var_4F4
STR             R3, [SP,#0x52C+var_4F8]
MOV             R3, #5
MOV             R1, R0,LSR R3
MOV             R0, R4
BL              sub_3E4E0
AND             R3, R0, #0x1F
MOV             R1, R0,LSR#5
ADD             R3, R3, #1
STR             R3, [SP,#0x52C+var_518]
ADD             R2, SP, #0x52C+var_4F8
LDR             R3, [SP,#0x52C+var_4F8]
MOV             R0, R4
SUB             R3, R3, #5
STR             R3, [SP,#0x52C+var_4F8]
MOV             R3, #4
BL              sub_3E4E0
LDR             R3, [SP,#0x52C+var_4F8]
AND             R7, R0, #0xF
ADD             R7, R7, #4
MOV             R5, R0,LSR#4
SUB             R3, R3, #4
STR             R3, [SP,#0x52C+var_4F8]
LDR             R3, [SP,#0x52C+var_518]
CMP             R3, #0x1E
CMPLS           R9, R6
MOVHI           R6, #1
MOVLS           R6, #0
BHI             loc_3E6D4
LDR             R10, =byte_6937F
MOV             R11, R10

loc_3E930
MOV             R3, #3
ADD             R2, SP, #0x52C+var_4F8
MOV             R1, R5
MOV             R0, R4
BL              sub_3E4E0
LDRB            R3, [R6,R10]
ADD             R2, SP, #0x52C+var_C
ADD             R2, R2, #8
ADD             R6, R6, #1
CMP             R7, R6
MOV             R5, R0,LSR#3
ADD             R3, R2, R3,LSL#2
AND             R2, R0, #7
STR             R2, [R3,#-0x4F0]
LDR             R3, [SP,#0x52C+var_4F8]
SUB             R3, R3, #3
STR             R3, [SP,#0x52C+var_4F8]
BHI             loc_3E930
MOV             R2, #0

loc_3E97C
CMP             R7, #0x13
BNE             loc_3EADC
MOV             R3, #7
MOV             R2, R7
STR             R3, [SP,#0x52C+var_500]
ADD             R3, R4, #0x4C ; 'L'
STR             R3, [SP,#0x52C+var_514]
ADD             R3, SP, #0x52C+var_500
STR             R3, [SP,#0x52C+var_524]
ADD             R3, R4, #0x4C ; 'L'
STR             R3, [SP,#0x52C+var_528]
MOV             R3, #0
STR             R3, [SP,#0x52C+var_52C]
MOV             R1, R7
MOV             R0, R8
BL              sub_3DFE8
SUBS            R10, R0, #0
BNE             loc_3E6D4
LDR             R3, [SP,#0x52C+var_518]
MOV             R7, R10
LDR             R2, =word_643A0
ADD             R11, R9, R3
LDR             R3, [SP,#0x52C+var_500]
MOV             R3, R3,LSL#1
LDRH            R3, [R2,R3]
STR             R3, [SP,#0x52C+var_510]

loc_3E9E4
MOV             R1, R5
LDR             R3, [SP,#0x52C+var_500]
ADD             R2, SP, #0x52C+var_4F8
MOV             R0, R4
BL              sub_3E4E0
LDR             R3, [SP,#0x52C+var_510]
MOV             R6, R7,LSL#2
AND             R2, R3, R0
LDR             R3, [R4,#0x4C]
ADD             R3, R3, R2,LSL#3
LDR             R2, [SP,#0x52C+var_4F8]
LDRB            R1, [R3,#1]
LDRH            R3, [R3,#4]
SUB             R2, R2, R1
CMP             R3, #0xF
MOV             R5, R0,LSR R1
STR             R2, [SP,#0x52C+var_4F8]
BHI             loc_3EAF8
ADD             R2, SP, #0x52C+var_C
MOV             R10, R3
ADD             R2, R2, #8
ADD             R7, R7, #1
ADD             R6, R2, R6
STR             R3, [R6,#-0x4F0]

loc_3EA44
CMP             R7, R11
BCC             loc_3E9E4
LDR             R0, [R4,#0x4C]
BL              sub_3DFC8
LDR             R3, [SP,#0x52C+var_4F8]
MOVW            R2, #0x101
STR             R5, [R4,#0x1C]
MOV             R1, R9
MOV             R0, R8
STRB            R3, [R4,#0x20]
MOV             R3, #9
STR             R3, [SP,#0x52C+var_500]
ADD             R3, SP, #0x52C+var_500
STR             R3, [SP,#0x52C+var_524]
LDR             R3, [SP,#0x52C+var_514]
STR             R3, [SP,#0x52C+var_528]
LDR             R3, =unk_693B0
STR             R3, [SP,#0x52C+var_52C]
LDR             R3, =unk_64362
BL              sub_3DFE8
SUBS            R2, R0, #0
BNE             loc_3E6D4
MOV             R3, #6
LDR             R1, [SP,#0x52C+var_518]
STR             R3, [SP,#0x52C+var_4FC]
SUB             R3, R8, #8
STR             R3, [SP,#0x52C+var_524]
ADD             R3, R4, #0x50 ; 'P'
STR             R3, [SP,#0x52C+var_528]
ADD             R0, R8, R9,LSL#2
LDR             R3, =unk_69392
STR             R3, [SP,#0x52C+var_52C]
LDR             R3, =unk_64326
BL              sub_3DFE8
CMP             R0, #0
BNE             loc_3E6D4
LDRD            R2, R3, [SP,#0x52C+var_500]
B               loc_3E844

loc_3EADC
LDRB            R3, [R11,R7]
ADD             R1, SP, #0x52C+var_C
ADD             R1, R1, #8
ADD             R7, R7, #1
ADD             R3, R1, R3,LSL#2
STR             R2, [R3,#-0x4F0]
B               loc_3E97C

loc_3EAF8
CMP             R3, #0x10
BNE             loc_3EB58
MOV             R1, R5
MOV             R3, #2
ADD             R2, SP, #0x52C+var_4F8
MOV             R0, R4
BL              sub_3E4E0
LDR             R2, [SP,#0x52C+var_4F8]
AND             R1, R0, #3
ADD             R3, R1, #3
MOV             R5, R0,LSR#2
SUB             R2, R2, #2
STR             R2, [SP,#0x52C+var_4F8]
ADD             R2, R3, R7
CMP             R2, R11
BHI             loc_3E6D4
SUB             R6, R6, #4
ADD             R6, R8, R6

loc_3EB40
SUBS            R3, R3, #1
ADDCC           R7, R7, #3
ADDCC           R7, R1, R7
BCC             loc_3EA44
STR             R10, [R6,#4]!
B               loc_3EB40

loc_3EB58
CMP             R3, #0x11
BNE             loc_3EBC4
MOV             R1, R5
MOV             R3, #3
ADD             R2, SP, #0x52C+var_4F8
MOV             R0, R4
BL              sub_3E4E0
LDR             R2, [SP,#0x52C+var_4F8]
AND             R1, R0, #7
ADD             R3, R1, #3
MOV             R5, R0,LSR#3
SUB             R2, R2, #3
STR             R2, [SP,#0x52C+var_4F8]
ADD             R2, R3, R7
CMP             R2, R11
BHI             loc_3E6D4
SUB             R6, R6, #4
MOV             R2, #0
ADD             R6, R8, R6

loc_3EBA4
SUBS            R3, R3, #1
BCS             loc_3EBBC
ADD             R7, R7, #3

loc_3EBB0
ADD             R7, R1, R7
MOV             R10, #0
B               loc_3EA44

loc_3EBBC
STR             R2, [R6,#4]!
B               loc_3EBA4

loc_3EBC4
MOV             R1, R5
MOV             R3, #7
ADD             R2, SP, #0x52C+var_4F8
MOV             R0, R4
BL              sub_3E4E0
LDR             R2, [SP,#0x52C+var_4F8]
AND             R1, R0, #0x7F
ADD             R3, R1, #0xB
MOV             R5, R0,LSR#7
SUB             R2, R2, #7
STR             R2, [SP,#0x52C+var_4F8]
ADD             R2, R3, R7
CMP             R2, R11
BHI             loc_3E6D4
SUB             R6, R6, #4
MOV             R2, #0
ADD             R6, R8, R6

loc_3EC08
SUBS            R3, R3, #1
ADDCC           R7, R7, #0xB
BCC             loc_3EBB0
STR             R2, [R6,#4]!
B               loc_3EC08
; End of function sub_3E64C

off_3EC1C DCD unk_693B0
off_3EC20 DCD unk_64362
off_3EC24 DCD unk_69392
off_3EC28 DCD unk_64326
off_3EC2C DCD word_643A0
off_3EC30 DCD byte_6937F



; int __fastcall sub_3EC34(int)
sub_3EC34
LDR             R3, [R0,#0x64]
PUSH            {R4-R8,LR}
MOV             R4, R0
CMP             R3, #0
BNE             loc_3EE70

loc_3EC48
LDR             R8, =word_643A0
ADD             R6, R4, #0x44 ; 'D'

loc_3EC50
LDR             R3, [R4,#0x54]
MOV             R2, R6
LDR             R1, [R4,#0x40]
MOV             R0, R4
BL              sub_3E4E0
LDR             R3, [R4,#0x38]
STR             R0, [R4,#0x40]
AND             R0, R0, R3
LDR             R3, [R4,#0x4C]
LDRB            R5, [R3,R0,LSL#3]
ADD             R7, R3, R0,LSL#3

loc_3EC7C
CMP             R5, #0x10
BLS             loc_3ECE4
CMP             R5, #0x63 ; 'c'
BNE             loc_3EC94

loc_3EC8C
MOV             R0, R4
BL              sub_3E4B0

loc_3EC94
LDRB            R2, [R7,#1]
SUB             R5, R5, #0x10
LDR             R1, [R4,#0x40]
MOV             R0, R4
LDR             R3, [R4,#0x44]
MOV             R1, R1,LSR R2
SUB             R3, R3, R2
STR             R3, [R4,#0x44]
MOV             R3, R5
MOV             R5, R5,LSL#1
MOV             R2, R6
STR             R1, [R4,#0x40]
BL              sub_3E4E0
LDR             R2, [R7,#4]
LDRH            R3, [R8,R5]
STR             R0, [R4,#0x40]
AND             R0, R0, R3
ADD             R7, R2, R0,LSL#3
LDRB            R5, [R2,R0,LSL#3]
B               loc_3EC7C

loc_3ECE4
LDRB            R2, [R7,#1]
CMP             R5, #0x10
LDR             R1, [R4,#0x40]
LDR             R3, [R4,#0x44]
MOV             R1, R1,LSR R2
SUB             R3, R3, R2
STR             R3, [R4,#0x44]
STR             R1, [R4,#0x40]
BNE             loc_3ED40
LDR             R3, [R4,#0x48]
LDRH            R1, [R7,#4]
LDR             R2, [R4,#0x14]
ADD             R0, R3, #1
STR             R0, [R4,#0x48]
STRB            R1, [R2,R3]
LDR             R3, [R4,#0x48]
CMP             R3, #0x8000
BNE             loc_3EC50
STR             R3, [R4,#0x10]

loc_3ED30
MOV             R3, #0
MOV             R0, #1
STR             R3, [R4,#0x48]
POP             {R4-R8,PC}

loc_3ED40
CMP             R5, #0xF
BEQ             loc_3EF44
MOV             R3, R5
MOV             R2, R6
MOV             R0, R4
LDR             R8, =word_643A0
BL              sub_3E4E0
MOV             R3, R5,LSL#1
LDRH            R2, [R7,#4]
MOV             R1, R0,LSR R5
LDRH            R3, [R8,R3]
STR             R1, [R4,#0x40]
AND             R3, R3, R0
MOV             R0, R4
ADD             R3, R3, R2
MOV             R2, R6
STR             R3, [R4,#0x5C]
LDR             R3, [R4,#0x44]
SUB             R5, R3, R5
LDR             R3, [R4,#0x58]
STR             R5, [R4,#0x44]
BL              sub_3E4E0
LDR             R3, [R4,#0x3C]
STR             R0, [R4,#0x40]
AND             R0, R0, R3
LDR             R3, [R4,#0x50]
LDRB            R5, [R3,R0,LSL#3]
ADD             R7, R3, R0,LSL#3

loc_3EDB0
CMP             R5, #0x10
BLS             loc_3EE10
CMP             R5, #0x63 ; 'c'
BEQ             loc_3EC8C
LDRB            R2, [R7,#1]
SUB             R5, R5, #0x10
LDR             R1, [R4,#0x40]
MOV             R0, R4
LDR             R3, [R4,#0x44]
MOV             R1, R1,LSR R2
SUB             R3, R3, R2
STR             R3, [R4,#0x44]
MOV             R3, R5
MOV             R5, R5,LSL#1
MOV             R2, R6
STR             R1, [R4,#0x40]
BL              sub_3E4E0
LDR             R2, [R7,#4]
LDRH            R3, [R8,R5]
STR             R0, [R4,#0x40]
AND             R0, R0, R3
ADD             R7, R2, R0,LSL#3
LDRB            R5, [R2,R0,LSL#3]
B               loc_3EDB0

loc_3EE10
LDRB            R2, [R7,#1]
MOV             R0, R4
LDR             R1, [R4,#0x40]
LDR             R3, [R4,#0x44]
MOV             R1, R1,LSR R2
SUB             R3, R3, R2
STR             R3, [R4,#0x44]
MOV             R2, R6
MOV             R3, R5
STR             R1, [R4,#0x40]
BL              sub_3E4E0
LDRH            R2, [R7,#4]
LDR             R3, [R4,#0x48]
SUB             R3, R3, R2
MOV             R2, R5,LSL#1
LDRH            R2, [R8,R2]
AND             R2, R2, R0
MOV             R0, R0,LSR R5
SUB             R3, R3, R2
STR             R3, [R4,#0x60]
LDR             R3, [R4,#0x44]
STR             R0, [R4,#0x40]
SUB             R5, R3, R5
STR             R5, [R4,#0x44]

loc_3EE70
LDR             R1, [R4,#0x60]
LDR             R0, [R4,#0x48]
LDR             R3, [R4,#0x5C]
UBFX            R1, R1, #0, #0xF
CMP             R1, R0
STR             R1, [R4,#0x60]
MOVCS           R5, R1
MOVCC           R5, R0
RSB             R5, R5, #0x8000
SUBCC           R2, R0, R1
SUBCS           R2, R1, R0
CMP             R3, R5
MOVCC           R5, R3
SUB             R3, R3, R5
CMP             R2, R5
STR             R3, [R4,#0x5C]
LDR             R3, [R4,#0x14]
ADD             R0, R3, R0 ; dest
ADD             R1, R3, R1 ; src
BCC             loc_3EF04
MOV             R2, R5  ; n
BL              memcpy
LDR             R3, [R4,#0x48]
ADD             R3, R3, R5
STR             R3, [R4,#0x48]
LDR             R3, [R4,#0x60]
ADD             R5, R3, R5
STR             R5, [R4,#0x60]

loc_3EEE0
LDR             R2, [R4,#0x48]
LDR             R3, [R4,#0x5C]
CMP             R2, #0x8000
BNE             loc_3EF34
MOVS            R3, R3
STR             R2, [R4,#0x10]
MOVNE           R3, #1
STR             R3, [R4,#0x64]
B               loc_3ED30

loc_3EF04
LDR             R1, [R4,#0x60]
SUBS            R5, R5, #1
LDR             R2, [R4,#0x14]
ADD             R3, R1, #1
STR             R3, [R4,#0x60]
LDR             R3, [R4,#0x48]
ADD             R0, R3, #1
STR             R0, [R4,#0x48]
LDRB            R1, [R2,R1]
STRB            R1, [R2,R3]
BNE             loc_3EF04
B               loc_3EEE0

loc_3EF34
CMP             R3, #0
BNE             loc_3EE70
STR             R3, [R4,#0x64]
B               loc_3EC48

loc_3EF44
LDR             R2, [R4,#0x48]
STR             R1, [R4,#0x1C]
STRB            R3, [R4,#0x20]
STR             R2, [R4,#0x10]
LDR             R0, [R4,#0x4C]
BL              sub_3DFC8
LDR             R0, [R4,#0x50]
BL              sub_3DFC8
MOV             R0, #0
STR             R0, [R4,#0x4C]
STR             R0, [R4,#0x50]
POP             {R4-R8,PC}
; End of function sub_3EC34

off_3EF74 DCD word_643A0



; int __fastcall sub_3EF78(int, int *)
sub_3EF78

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4-R9,LR}
MOV             R4, #0xFFFFFFFF
STRD            R0, R1, [SP,#0xC+var_C]
MOV             R0, #0x8000
BL              sub_1748C
LDR             R3, [SP,#0xC+var_C]
MOV             R1, #0
LDR             R2, [SP,#0xC+var_C]
STR             R0, [R3,#0x14]
MOV             R3, #0
MOV             R0, #0
STR             R3, [R2,#0x10]
STRD            R0, R1, [R2]
LDR             R2, [SP,#0xC+var_8]
LDR             R1, [SP,#0xC+var_C]
LDR             R2, [R2,#8]
STR             R3, [R1,#0x64]
STRB            R3, [R1,#0x20]
STR             R2, [R1,#0xC]
MOV             R2, #1
STR             R2, [R1,#0x6C]
STR             R3, [R1,#0x1C]
STR             R4, [R1,#0x68]
BL              sub_58678
LDR             R3, [SP,#0xC+var_C]
LDR             R2, [SP,#0xC+var_C]
STR             R0, [R3,#0x18]
STR             R4, [R3,#8]
ADD             R0, R2, #0x88 ; env
LDR             R3, =aCorruptedData ; "corrupted data"
STR             R3, [R2,#0x84]
BL              _setjmp
LDR             R3, [SP,#0xC+var_C]
SUBS            R5, R0, #0
ADDEQ           R6, R3, #0x7C ; '|'
BEQ             loc_3F038
LDR             R0, [R3,#0x84]
BL              sub_16DDC

loc_3F010
MOV             R4, #0xFFFFFFFF

loc_3F014
LDR             R3, [SP,#0xC+var_C]
LDR             R0, [R3,#0x14] ; ptr
BL              free
LDR             R3, [SP,#0xC+var_C]
LDR             R0, [R3,#0x18] ; ptr
BL              free
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_3F038
LDR             R2, [SP,#0xC+var_C]
MOV             R3, #0
ADD             R4, R2, #0x70 ; 'p'
STR             R3, [R2,#0x10]

loc_3F048
LDR             R3, [SP,#0xC+var_C]
LDR             R3, [R3,#0x6C]
CMP             R3, #0
BEQ             loc_3F14C
LDR             R3, [SP,#0xC+var_C]
LDR             R7, [R3,#0x70]
CMP             R7, #0
BEQ             loc_3F134
LDR             R2, [SP,#0xC+var_C]
MOV             R4, R5
LDR             R1, [SP,#0xC+var_C]
LDR             R0, [SP,#0xC+var_C]
LDR             R3, [R3,#0x18]
LDR             R2, [R2,#0x10]
LDR             R1, [R1,#0x14]
LDR             R0, [R0,#8]
BL              sub_586A4
LDR             R3, [SP,#0xC+var_C]
LDR             R1, [R3,#0x10]
STR             R0, [R3,#8]
LDRD            R2, R3, [R3]
ADDS            R8, R2, R1
LDR             R2, [SP,#0xC+var_C]
ADC             R9, R3, #0
LDR             R3, [SP,#0xC+var_C]
STRD            R8, R9, [R3]
MOV             R3, #0
STR             R3, [R2,#0x70]

loc_3F0B8
LDR             R3, [SP,#0xC+var_C]
LDR             R0, [SP,#0xC+var_8]
LDR             R2, [R3,#0x10]
LDR             R1, [R3,#0x14]
BL              sub_3FE5C
CMN             R0, #1
BEQ             loc_3F010
CMP             R4, #0
BNE             loc_3F038
LDR             R3, [SP,#0xC+var_C]
LDRB            R3, [R3,#0x20]
CMP             R3, #7
BLS             loc_3F014
LDR             R3, [SP,#0xC+var_C]
LDR             R2, [SP,#0xC+var_C]
LDR             R1, [SP,#0xC+var_C]
LDR             R3, [R3,#0x30]
LDR             R1, [R1,#0x1C]
SUB             R3, R3, #1
STR             R3, [R2,#0x30]
LDR             R2, [R2,#0x24]
STRB            R1, [R2,R3]
LDR             R3, [SP,#0xC+var_C]
LDR             R2, [SP,#0xC+var_C]
LDR             R3, [R3,#0x1C]
MOV             R3, R3,LSR#8
STR             R3, [R2,#0x1C]
LDRB            R3, [R2,#0x20]
SUB             R3, R3, #8
STRB            R3, [R2,#0x20]
B               loc_3F014

loc_3F134
MOV             R1, R4
LDR             R0, [SP,#0xC+var_C]
BL              sub_3E64C
LDR             R3, [SP,#0xC+var_C]
STR             R0, [R3,#0x68]
STR             R7, [R3,#0x6C]

loc_3F14C
LDR             R3, [SP,#0xC+var_C]
LDR             R3, [R3,#0x68]
CMN             R3, #2
BEQ             loc_3F280
CMN             R3, #1
BNE             loc_3F294
MOV             R7, #8

loc_3F168
LDR             R3, [SP,#0xC+var_C]
LDR             R1, [SP,#0xC+var_C]
LDR             R3, [R3,#0x74]
CMP             R3, #0
SUB             R2, R3, #1
STR             R2, [R1,#0x74]
MOV             R2, R1
LDR             R1, [R1,#0x78]
BNE             loc_3F1B0
LDR             R3, [R2,#0x80]
STR             R1, [R2,#0x1C]
STR             R3, [R2,#0x10]
LDR             R3, [R2,#0x7C]
STRB            R3, [R2,#0x20]

loc_3F1A0
LDR             R2, [SP,#0xC+var_C]
MOV             R3, #1
STR             R3, [R2,#0x6C]
B               loc_3F048

loc_3F1B0
MOV             R3, R7
MOV             R2, R6
LDR             R0, [SP,#0xC+var_C]
BL              sub_3E4E0
LDR             R3, [SP,#0xC+var_C]
LDR             R12, [SP,#0xC+var_C]
STR             R0, [R3,#0x78]
LDR             R2, [R3,#0x14]
LDR             R3, [R3,#0x80]
ADD             R1, R3, #1
STR             R1, [R12,#0x80]
STRB            R0, [R2,R3]
LDR             R3, [R12,#0x80]
CMP             R3, #0x8000
BNE             loc_3F25C
STR             R3, [R12,#0x10]
MOV             R3, #0
STR             R3, [R12,#0x80]
LDR             R3, [R12,#0x78]
MOV             R3, R3,LSR#8
STR             R3, [R12,#0x78]
LDR             R3, [R12,#0x7C]
SUB             R3, R3, #8
STR             R3, [R12,#0x7C]

loc_3F210
LDR             R3, [SP,#0xC+var_C]
MOV             R4, #1
LDR             R2, [SP,#0xC+var_C]
LDR             R1, [SP,#0xC+var_C]
LDR             R0, [SP,#0xC+var_C]
LDR             R3, [R3,#0x18]
LDR             R2, [R2,#0x10]
LDR             R1, [R1,#0x14]
LDR             R0, [R0,#8]
BL              sub_586A4
LDR             R3, [SP,#0xC+var_C]
LDR             R1, [R3,#0x10]
STR             R0, [R3,#8]
LDRD            R2, R3, [R3]
ADDS            R8, R2, R1
ADC             R9, R3, #0
LDR             R3, [SP,#0xC+var_C]
STRD            R8, R9, [R3]
B               loc_3F0B8

loc_3F25C
LDR             R3, [SP,#0xC+var_C]
LDR             R2, [SP,#0xC+var_C]
LDR             R3, [R3,#0x78]
MOV             R3, R3,LSR#8
STR             R3, [R2,#0x78]
LDR             R3, [R2,#0x7C]
SUB             R3, R3, #8
STR             R3, [R2,#0x7C]
B               loc_3F168

loc_3F280
LDR             R0, [SP,#0xC+var_C]
BL              sub_3EC34
CMP             R0, #1
BNE             loc_3F1A0
B               loc_3F210

loc_3F294
LDR             R0, [SP,#0xC+var_C]
BL              sub_3E4B0
; End of function sub_3EF78

off_3F29C DCD aCorruptedData ; "corrupted data"



; int __fastcall sub_3F2A0(int *)
sub_3F2A0
PUSH            {R3-R11,LR}
MOVW            R1, #0x8B1F
MOV             R7, R0
BL              sub_3FDFC
SUBS            R5, R0, #0
MOVNE           R5, #0xFFFFFFFF
BNE             loc_3F484
MOV             R0, #0x210
LDR             R9, =aIncorrectLengt ; "incorrect length"
BL              sub_174DC
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
MOV             R4, R0
STRD            R2, R3, [R0,#0x28]
MOV             R0, #0x4000
MOV             R8, R5
BL              sub_1748C
LDR             R3, [R7,#8]
STR             R0, [R4,#0x24]
STR             R3, [R4,#0xC]

loc_3F2F0
LDR             R1, [R4,#0x30]
LDR             R2, [R4,#0x34]
LDR             R0, [R4,#0x24] ; dest
SUB             R2, R2, R1 ; n
ADD             R1, R0, R1 ; src
STR             R2, [R4,#0x34]
BL              memmove
MOV             R1, #8
MOV             R0, R4
STR             R8, [R4,#0x30]
BL              sub_3E5C0
CMP             R0, #0
BEQ             loc_3F468
LDR             R3, [R4,#0x30]
LDR             R1, [R4,#0x24]
ADD             R2, R1, R3
LDRB            R1, [R1,R3]
ADD             R3, R3, #8
LDRB            R6, [R2,#1]
LDR             R10, [R2,#2]
CMP             R1, #8
STR             R3, [R4,#0x30]
BNE             loc_3F468
TST             R6, #4
BEQ             loc_3F39C
MOV             R1, #2
MOV             R0, R4
BL              sub_3E5C0
CMP             R0, #0
BEQ             loc_3F468
LDR             R3, [R4,#0x30]
MOV             R0, R4
LDR             R2, [R4,#0x24]
LDRH            R11, [R2,R3]
ADD             R3, R3, #2
STR             R3, [R4,#0x30]
MOV             R1, R11
BL              sub_3E5C0
CMP             R0, #0
BEQ             loc_3F468
LDR             R1, [R4,#0x30]
ADD             R1, R1, R11
STR             R1, [R4,#0x30]

loc_3F39C
TST             R6, #0x18
BEQ             loc_3F3E4

loc_3F3A4
MOV             R1, #1
MOV             R0, R4
BL              sub_3E5C0
CMP             R0, #0
BEQ             loc_3F468
LDR             R3, [R4,#0x30]
LDR             R2, [R4,#0x24]
ADD             R1, R3, #1
STR             R1, [R4,#0x30]
LDRB            R3, [R2,R3]
CMP             R3, #0
BNE             loc_3F3A4
AND             R3, R6, #0x18
CMP             R3, #0x18
ANDEQ           R6, R6, #0xE7
BEQ             loc_3F3A4

loc_3F3E4
TST             R6, #2
STR             R10, [R7,#0x34]
BEQ             loc_3F410
MOV             R1, #2
MOV             R0, R4
BL              sub_3E5C0
CMP             R0, #0
BEQ             loc_3F468
LDR             R3, [R4,#0x30]
ADD             R3, R3, #2
STR             R3, [R4,#0x30]

loc_3F410
MOV             R1, R7
MOV             R0, R4
BL              sub_3EF78
CMP             R0, #0
BLT             loc_3F470
ADD             R5, R5, R0
MOV             R1, #8
MOV             R0, R4
BL              sub_3E5C0
CMP             R0, #0
BEQ             loc_3F468
LDR             R3, [R4,#0x30]
LDR             R0, [R4,#0x24]
LDR             R2, [R4,#8]
ADD             R1, R3, #4
LDR             R12, [R0,R3]
MVN             R2, R2
STR             R1, [R4,#0x30]
CMP             R2, R12
BEQ             loc_3F48C
LDR             R0, =aCrcError ; "crc error"
B               loc_3F46C

loc_3F468
LDR             R0, =aCorruptedData ; "corrupted data"

loc_3F46C
BL              sub_16DDC

loc_3F470
MOV             R5, #0xFFFFFFFF

loc_3F474               ; ptr
LDR             R0, [R4,#0x24]
BL              free
MOV             R0, R4  ; ptr
BL              free

loc_3F484
MOV             R0, R5
POP             {R3-R11,PC}

loc_3F48C
ADD             R3, R3, #8
LDR             R2, [R0,R1]
STR             R3, [R4,#0x30]
LDR             R3, [R4]
CMP             R3, R2
BEQ             loc_3F4B0
MOV             R5, #0xFFFFFFFF
MOV             R0, R9
BL              sub_16DDC

loc_3F4B0
MOV             R1, #2
MOV             R0, R4
BL              sub_3E5C0
CMP             R0, #0
BEQ             loc_3F474
LDR             R2, [R4,#0x24]
LDR             R3, [R4,#0x30]
LDRB            R1, [R2,R3]
CMP             R1, #0x1F
BNE             loc_3F474
ADD             R2, R2, R3
LDRB            R2, [R2,#1]
CMP             R2, #0x8B
BNE             loc_3F474
ADD             R3, R3, #2
STR             R3, [R4,#0x30]
B               loc_3F2F0
; End of function sub_3F2A0

off_3F4F4 DCD aIncorrectLengt ; "incorrect length"
off_3F4F8 DCD aCrcError ; "crc error"
off_3F4FC DCD aCorruptedData ; "corrupted data"



; int **__fastcall sub_3F500(int)
sub_3F500
LDR             R3, [R0,#0x18]
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R0, [R0,#0x10]
LDR             R5, [R3]
MOV             R1, R5
BL              sub_3F588
CMP             R0, #0
BNE             loc_3F544
LDR             R0, [R4,#0xC]
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R1, R5
BL              sub_3F588
CLZ             R0, R0
MOV             R0, R0,LSR#5
POP             {R4-R6,PC}

loc_3F544
MOV             R0, #1
POP             {R4-R6,PC}
; End of function sub_3F500




; int __fastcall sub_3F54C(int, char *name)
sub_3F54C
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R0

loc_3F558
CMP             R4, #0
BNE             loc_3F568

loc_3F560
MOV             R0, R4
POP             {R4-R6,PC}

loc_3F568               ; flags
MOV             R2, #0
MOV             R1, R5  ; name
LDR             R0, [R4,#4] ; pattern
BL              fnmatch
CMP             R0, #0
BEQ             loc_3F560
LDR             R4, [R4]
B               loc_3F558
; End of function sub_3F54C




; int **__fastcall sub_3F588(int **, int)
sub_3F588

var_14= -0x14

PUSH            {R4-R7,LR}
ADD             R5, R1, #0xFF0
SUB             SP, SP, #0x1000
MOV             R6, R1
SUB             SP, SP, #4
MOV             R4, R0
ADD             R5, R5, #0xF
MOV             R7, #0

loc_3F5A8
CMP             R4, #0
BNE             loc_3F5C0

loc_3F5B0
MOV             R0, R4
ADD             SP, SP, #0x1000
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_3F5C0
LDR             R3, [R4,#4]
MOV             R2, #0
SUB             R3, R3, #1

loc_3F5CC
LDRB            R1, [R3,#1]!
CMP             R1, #0
BNE             loc_3F620
MOV             R3, SP
SUB             R0, R6, #1
MOV             R1, R3  ; name

loc_3F5E4
LDRB            R12, [R0,#1]!
CMP             R12, #0
BEQ             loc_3F600
CMP             R0, R5
BNE             loc_3F62C
ADD             R3, SP, #0x1004+var_14
ADD             R3, R3, #0xF

loc_3F600
STRB            R7, [R3]
MOV             R2, #0  ; flags
LDR             R0, [R4,#4] ; pattern
BL              fnmatch
CMP             R0, #0
BEQ             loc_3F5B0
LDR             R4, [R4]
B               loc_3F5A8

loc_3F620
CMP             R1, #0x2F ; '/'
ADDEQ           R2, R2, #1
B               loc_3F5CC

loc_3F62C
CMP             R12, #0x2F ; '/'
BNE             loc_3F63C
SUBS            R2, R2, #1
BCC             loc_3F600

loc_3F63C
STRB            R12, [R3],#1
B               loc_3F5E4
; End of function sub_3F588




; unsigned __int64 __fastcall sub_3F644(const char *, char *, char *)
sub_3F644

endptr= -8

MOV             R3, #0
PUSH            {R0-R2,R4-R7,LR}
STRB            R3, [R0,R1]
MOV             R5, R1
MOV             R2, #8  ; base
ADD             R1, SP, #0xC+endptr ; endptr
MOV             R4, R0
BL              strtoull
LDR             R3, [SP,#0xC+endptr]
LDRB            R3, [R3]
TST             R3, #0xDF
BEQ             loc_3F6A4
LDRSB           R0, [R4]
CMP             R0, #0
BLT             loc_3F688
LDR             R0, =aCorruptedOctal ; "corrupted octal value in tar header"
BL              sub_16DBC

loc_3F688
SBFX            R0, R0, #0, #7
ADD             R2, R4, #1
SXTB            R0, R0
ADD             R4, R4, R5
MOV             R1, R0,ASR#31

loc_3F69C
CMP             R2, R4
BNE             loc_3F6AC

loc_3F6A4
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_3F6AC
MOV             R3, R1,LSL#8
LDRB            R6, [R2],#1
MOV             R12, R0,LSL#8
MOV             R7, #0
ORR             R3, R3, R0,LSR#24
ADDS            R0, R6, R12
ADC             R1, R7, R3
B               loc_3F69C
; End of function sub_3F644

off_3F6CC DCD aCorruptedOctal ; "corrupted octal value in tar header"



; int __fastcall sub_3F6D0(int)
sub_3F6D0

var_20C= -0x20C
var_204= -0x204
var_1A0= -0x1A0
var_198= -0x198
var_190= -0x190
var_188= -0x188
var_17C= -0x17C
var_170= -0x170
var_168= -0x168
var_167= -0x167
var_104= -0x104
var_103= -0x103
var_FC= -0xFC
var_FB= -0xFB
var_DC= -0xDC
var_DB= -0xDB
var_BC= -0xBC
var_BB= -0xBB
var_B4= -0xB4
var_B3= -0xB3
var_AC= -0xAC
var_AB= -0xAB
var_10= -0x10
var_4= -4

PUSH            {R4-R11,LR}
MOV             R1, #0x200
LDR             R11, =0xFFFFFE00
SUB             SP, SP, #0x20C
MOV             R5, R0
LDR             R4, [R0,#0x18]
BL              sub_402D8

loc_3F6EC
ADD             R10, SP, #0x20C+var_4
MOV             R3, #0
STR             R3, [R10,#-0x200]!
MOV             R2, #0x200 ; nbytes
MOV             R1, R10 ; buf
LDR             R0, [R5,#4] ; fd
BL              sub_18050
SUBS            R6, R0, #0
BNE             loc_3F734
LDRD            R2, R3, [R5,#0x30]
ORRS            R3, R2, R3
BEQ             loc_3F728

loc_3F71C
MOV             R0, #1

loc_3F720
ADD             SP, SP, #0x20C
POP             {R4-R11,PC}

loc_3F728
LDR             R0, =aShortRead ; "short read"
BL              sub_16DDC
B               loc_3F71C

loc_3F734
CMP             R6, #0x200
BEQ             loc_3F780

loc_3F73C
RSB             R2, R6, #0
MOV             R3, #1
STR             R3, [SP,#0x20C+var_20C]
MOV             R3, R2,ASR#31
LDR             R0, [R5,#4]
BL              lseek64
MOV             R6, R0
MOV             R7, R1
ORRS            R3, R6, R7
BNE             loc_3F864
MOV             R1, #0
LDR             R0, [R5,#4]
BL              sub_3FFC0
CMP             R0, #0
BNE             loc_3F864
STRD            R6, R7, [R5,#0x30]
B               loc_3F6EC

loc_3F780
LDR             R3, [R5,#0x30]
LDR             R2, [R5,#0x34]
ADDS            R3, R3, #0x200
STR             R3, [R5,#0x30]
ADC             R2, R2, #0
LDRB            R3, [SP,#0x20C+var_204]
STR             R2, [R5,#0x34]
CMP             R3, #0
BNE             loc_3F7E0
LDRB            R0, [SP,#0x20C+var_AB]
CMP             R0, #0
BNE             loc_3F7E0
LDR             R3, [R5,#0x3C]
CMP             R3, #0
MOVEQ           R3, #1
STREQ           R3, [R5,#0x3C]
BEQ             loc_3F720

loc_3F7C4               ; nbytes
MOV             R2, #0x200
MOV             R1, R10 ; buf
LDR             R0, [R5,#4] ; fd
BL              sub_18050
CMP             R0, #0x200
BEQ             loc_3F7C4
B               loc_3F71C

loc_3F7E0
MOV             R7, #0
ADD             R0, SP, #0x20C+var_104
STR             R7, [R5,#0x3C]
ADD             R0, R0, #1
LDR             R1, =aUstar_0 ; "ustar"
BL              sub_1684C
CMP             R0, R7
MOVNE           R6, #0x100
MOVNE           R3, R7
MOVNE           R8, R6
BEQ             loc_3F73C

loc_3F80C
LDRB            R2, [R10,R3]
ADD             R3, R3, #1
CMP             R3, #0x94
ADD             R8, R8, R2
SXTAB           R6, R6, R2
BNE             loc_3F80C
MOV             R3, #0x9C

loc_3F828
LDRB            R2, [R10,R3]
ADD             R3, R3, #1
CMP             R3, #0x200
ADD             R8, R8, R2
SXTAB           R6, R6, R2
BNE             loc_3F828
MOV             R1, #8
ADD             R0, SP, #0x20C+var_170
LDRB            R7, [SP,#0x20C+var_168]
BL              sub_3F644
CMP             R0, R8
CMPNE           R0, R6
BEQ             loc_3F86C
LDR             R0, =aInvalidTarHead ; "invalid tar header checksum"
B               loc_3F868

loc_3F864
LDR             R0, =aInvalidTarMagi ; "invalid tar magic"

loc_3F868
BL              sub_16DBC

loc_3F86C
LDRB            R3, [SP,#0x20C+var_BB]
CMP             R3, #0
BEQ             loc_3F8B0
ADD             R0, SP, #0x20C+var_B4
MOV             R1, #8
ADD             R0, R0, #1
LDRB            R6, [SP,#0x20C+var_AB]
BL              sub_3F644
MOV             R8, R0
ADD             R0, SP, #0x20C+var_BC
MOV             R1, #8
ADD             R0, R0, #1
BL              sub_3F644
MOV             R1, R8  ; minor
BL              j_gnu_dev_makedev
STRD            R0, R1, [R4,#0x28]
STRB            R6, [SP,#0x20C+var_AB]

loc_3F8B0
CMP             R7, #0
MOV             R3, #0
MOVEQ           R7, #0x30 ; '0'
STR             R3, [R4,#4]
SUB             R6, R7, #0x30 ; '0'
CMP             R6, #7
BHI             loc_3F8E8
LDRB            R3, [SP,#0x20C+var_167]
CMP             R3, #0
BEQ             loc_3F8E8
MOV             R1, #0x64 ; 'd'
ADD             R0, R10, #0x9D
BL              sub_1751C
STR             R0, [R4,#4]

loc_3F8E8
LDRB            R0, [SP,#0x20C+var_FB]
CMP             R0, #0
BEQ             loc_3F904
ADD             R0, SP, #0x20C+var_FC
MOV             R1, #0x20 ; ' '
ADD             R0, R0, #1
BL              sub_1751C

loc_3F904
STR             R0, [R4,#8]
LDRB            R0, [SP,#0x20C+var_DB]
CMP             R0, #0
BEQ             loc_3F924
ADD             R0, SP, #0x20C+var_DC
MOV             R1, #0x20 ; ' '
ADD             R0, R0, #1
BL              sub_1751C

loc_3F924
STR             R0, [R4,#0xC]
MOV             R1, #0xC
ADD             R0, SP, #0x20C+var_17C
BL              sub_3F644
MOV             R1, #0xC
STR             R0, [R4,#0x24]
ADD             R0, SP, #0x20C+var_188
BL              sub_3F644
STRD            R0, R1, [R4,#0x10]
MOV             R1, #8
ADD             R0, SP, #0x20C+var_190
BL              sub_3F644
MOV             R1, #8
STR             R0, [R4,#0x1C]
ADD             R0, SP, #0x20C+var_198
BL              sub_3F644
MOV             R1, #8
STR             R0, [R4,#0x18]
ADD             R0, SP, #0x20C+var_1A0
BL              sub_3F644
CMP             R6, #7
UBFX            R0, R0, #0, #0xC
MOV             R3, #0
STR             R0, [R4,#0x20]
STR             R3, [R4]
BHI             loc_3F9B4
LDRB            R2, [SP,#0x20C+var_AB]
STRB            R3, [SP,#0x20C+var_1A0]
CMP             R2, R3
BEQ             loc_3F9E0
ADD             R0, SP, #0x20C+var_AC
MOV             R1, R10
ADD             R0, R0, #1
STRB            R3, [SP,#0x20C+var_10]
BL              sub_16998

loc_3F9B0
STR             R0, [R4]

loc_3F9B4
CMP             R7, #0x34 ; '4'
BEQ             loc_3FB78
BGT             loc_3FA08
CMP             R7, #0x31 ; '1'
BEQ             loc_3FA74
BGT             loc_3F9EC
CMP             R7, #0x30 ; '0'
BEQ             loc_3FA90

loc_3F9D4
MOV             R1, R7
LDR             R0, =aUnknownTypefla ; "unknown typeflag: 0x%x"
BL              sub_16DBC

loc_3F9E0
MOV             R0, R10
BL              sub_174F8
B               loc_3F9B0

loc_3F9EC
CMP             R7, #0x32 ; '2'
BEQ             loc_3FB6C
CMP             R7, #0x33 ; '3'
BNE             loc_3F9D4
LDR             R3, [R4,#0x20]
ORR             R3, R3, #0x2000
B               loc_3FA7C

loc_3FA08
CMP             R7, #0x37 ; '7'
BEQ             loc_3FA90
BGT             loc_3FA30
CMP             R7, #0x35 ; '5'
BEQ             loc_3FB84
CMP             R7, #0x36 ; '6'
BNE             loc_3F9D4
LDR             R3, [R4,#0x20]
ORR             R3, R3, #0x1000
B               loc_3FA7C

loc_3FA30
CMP             R7, #0x67 ; 'g'
BEQ             loc_3FA40
CMP             R7, #0x78 ; 'x'
BNE             loc_3F9D4

loc_3FA40
LDRD            R2, R3, [R4,#0x10]
MOV             R1, #0
LDR             R0, =0xFFFFF
CMP             R3, R1
CMPEQ           R2, R0
BHI             loc_3FB90
ADD             R2, R2, #0x1FC
MOV             R3, #0
ADD             R2, R2, #3
LDR             R0, [R5,#4]
AND             R2, R2, R11
BL              sub_400F8
B               loc_3F6EC

loc_3FA74
LDR             R3, [R4,#0x20]
ORR             R3, R3, #0x8000

loc_3FA7C
STR             R3, [R4,#0x20]
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R4,#0x10]
B               loc_3FA9C

loc_3FA90
LDR             R3, [R4,#0x20]
ORR             R3, R3, #0x8000
STR             R3, [R4,#0x20]

loc_3FA9C
LDR             R6, [R4]
MOV             R0, R6
BL              sub_40108
MOV             R1, R0
MOV             R0, R6
BL              sub_60B4C
MOV             R1, #0x2F ; '/'
LDR             R0, [R4]
BL              sub_16AA8
LDR             R3, [R5,#8]
MOV             R6, R0
MOV             R0, R5
BLX             R3
SUBS            R7, R0, #0
BNE             loc_3FC0C
LDR             R3, [R5,#0x20]
MOV             R0, R4
BLX             R3
CMP             R6, #0
MOV             R0, R5
STRBNE          R7, [R6]
LDR             R3, [R5,#0x24]
BLX             R3
LDR             R3, [R5,#0xC]
CMP             R3, #0
BNE             loc_3FB20
LDR             R3, [R5,#0x10]
LDR             R0, [R4]
CMP             R3, #0
BNE             loc_3FB20
LDR             R3, [R5]
TST             R3, #0x100
BEQ             loc_3FC18

loc_3FB20
LDR             R1, [R4]
ADD             R0, R5, #0x14
BL              sub_5D2A0

loc_3FB2C
LDR             R1, [R4,#0x10]
LDR             R3, [R5,#0x30]
LDR             R0, [R4,#0x14]
LDR             R2, [R5,#0x34]
ADDS            R3, R3, R1
STR             R3, [R5,#0x30]
ADC             R2, R2, R0
LDR             R0, [R4,#4] ; ptr
STR             R2, [R5,#0x34]
BL              free
LDR             R0, [R4,#8] ; ptr
BL              free
LDR             R0, [R4,#0xC] ; ptr
BL              free
MOV             R0, #0
B               loc_3F720

loc_3FB6C
LDR             R3, [R4,#0x20]
ORR             R3, R3, #0xA000
B               loc_3FA7C

loc_3FB78
LDR             R3, [R4,#0x20]
ORR             R3, R3, #0x6000
B               loc_3FA7C

loc_3FB84
LDR             R3, [R4,#0x20]
ORR             R3, R3, #0x4000
B               loc_3FA7C

loc_3FB90
MOV             R1, R7
LDR             R0, =aWarningSkippin ; "warning: skipping header '%c'"
BL              sub_16DDC
LDR             R1, [R4,#0x10]
MOVW            R3, #0x1FF
LDR             R0, [R4,#0x14]
MOV             R2, #0
MOV             R6, #0xFFFFFFFF
MOV             R7, #0xFFFFFFFF
ADDS            R3, R3, R1
LDR             R1, [R5,#0x30]
AND             R3, R3, R11
ADC             R2, R2, R0
MOV             R8, R3,LSR#9
LDR             R0, [R5,#0x34]
MOV             R9, R2,ASR#9
ADDS            R1, R1, R3
ORR             R8, R8, R2,LSL#23
STR             R1, [R5,#0x30]
ADC             R0, R0, R2
STR             R0, [R5,#0x34]

loc_3FBE4
SUBS            R8, R8, #1
LDR             R0, [R5,#4]
SBC             R9, R9, #0
CMP             R9, R7
CMPEQ           R8, R6
BEQ             loc_3F6EC
MOV             R2, #0x200
MOV             R1, R10
BL              sub_60448
B               loc_3FBE4

loc_3FC0C
MOV             R0, R5
BL              sub_3D434
LDR             R0, [R4] ; ptr

loc_3FC18
BL              free
B               loc_3FB2C
; End of function sub_3F6D0

dword_3FC20 DCD 0xFFFFFE00
off_3FC24 DCD aShortRead ; "short read"
off_3FC28 DCD aUstar_0  ; "ustar"
off_3FC2C DCD aInvalidTarHead ; "invalid tar header checksum"
off_3FC30 DCD aInvalidTarMagi ; "invalid tar magic"
off_3FC34 DCD aUnknownTypefla ; "unknown typeflag: 0x%x"
dword_3FC38 DCD 0xFFFFF
off_3FC3C DCD aWarningSkippin ; "warning: skipping header '%c'"



; int __fastcall sub_3FC40(const char **)
sub_3FC40
LDR             R0, [R0] ; s
B               puts
; End of function sub_3FC40




; int __fastcall sub_3FC48(int)
sub_3FC48

var_68= -0x68
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
s= -0x3C
tp= -0x2C

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x68
MOV             R4, R0
ADD             R1, SP, #0x68+tp ; tp
ADD             R0, R0, #0x24 ; '$' ; timer
BL              localtime_r
LDR             R5, [R4,#8]
CMP             R5, #0
BNE             loc_3FC80
ADD             R5, SP, #0x68+s
LDR             R2, [R4,#0x18]
LDR             R1, =(aUnknownUidU+0xC) ; format
ADD             R0, SP, #0x68+s ; s
BL              sprintf

loc_3FC80
LDR             R6, [R4,#0xC]
CMP             R6, #0
BNE             loc_3FC98
LDR             R0, [R4,#0x1C]
BL              sub_16F64
MOV             R6, R0

loc_3FC98
LDR             R0, [R4,#0x20]
BL              sub_5DA78
LDR             R3, [R4]
MOV             R1, R0
LDR             R2, [SP,#0x68+tp.tm_year]
LDR             R0, =aSSS9llu4u02u02 ; "%s %s/%s %9llu %4u-%02u-%02u %02u:%02u:"...
STR             R3, [SP,#0x68+var_48]
LDR             R3, [SP,#0x68+tp]
ADD             R2, R2, #0x760
ADD             R2, R2, #0xC
STR             R2, [SP,#0x68+var_60]
STR             R3, [SP,#0x68+var_4C]
LDR             R3, [SP,#0x68+tp.tm_min]
STR             R3, [SP,#0x68+var_50]
LDR             R3, [SP,#0x68+tp.tm_hour]
STR             R3, [SP,#0x68+var_54]
LDR             R3, [SP,#0x68+tp.tm_mday]
STR             R3, [SP,#0x68+var_58]
LDR             R3, [SP,#0x68+tp.tm_mon]
ADD             R3, R3, #1
STR             R3, [SP,#0x68+var_5C]
LDRD            R2, R3, [R4,#0x10]
STRD            R2, R3, [SP,#0x68+var_68]
MOV             R3, R6
MOV             R2, R5
BL              printf
LDR             R1, [R4,#4]
CMP             R1, #0
BEQ             loc_3FD14
LDR             R0, =aS_4 ; " -> %s"
BL              printf

loc_3FD14               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R6,PC}
; End of function sub_3FC48

off_3FD24 DCD aUnknownUidU+0xC ; "%u"
off_3FD28 DCD aSSS9llu4u02u02 ; "%s %s/%s %9llu %4u-%02u-%02u %02u:%02u:"...
off_3FD2C DCD aS_4      ; " -> %s"



; _DWORD *sub_3FD30()
sub_3FD30
PUSH            {R4,LR}
MOV             R0, #0x40 ; '@'
BL              sub_174DC
MOV             R4, R0
MOV             R0, #0x30 ; '0'
BL              sub_174DC
LDR             R3, =nullsub_2
STR             R0, [R4,#0x18]
MOV             R0, R4
STR             R3, [R4,#0x20]
LDR             R3, =sub_3D434
STR             R3, [R4,#0x24]
LDR             R3, =sub_4033C
STR             R3, [R4,#8]
LDR             R3, =sub_4007C
STR             R3, [R4,#0x28]
POP             {R4,PC}
; End of function sub_3FD30

off_3FD74 DCD nullsub_2
off_3FD78 DCD sub_3D434
off_3FD7C DCD sub_4033C
off_3FD80 DCD sub_4007C



; _DWORD *__fastcall sub_3FD84(ssize_t, int)
sub_3FD84

var_4= -4

PUSH            {R0,R1,R4-R6,LR}
MOV             R5, R0
MOV             R0, #0x38 ; '8'
MOV             R6, R1
BL              sub_174DC
MOV             R2, #2
MOV             R4, R0
STR             R2, [R0]
ADD             R1, SP, #8+var_4
STR             R5, [R0,#8]
MOV             R0, R5
BL              sub_60448
LDRH            R2, [SP,#8+var_4]
MOVW            R3, #0x8B1F
CMP             R2, R3
LDREQ           R3, =sub_3F2A0
STREQ           R3, [R4,#4]
BEQ             loc_3FDDC
CMP             R6, #0
BEQ             loc_3FDDC
LDR             R0, =aNoGzipMagic ; "no gzip magic"
BL              sub_16DBC

loc_3FDDC
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_3FD84

off_3FDE8 DCD sub_3F2A0
off_3FDEC DCD aNoGzipMagic ; "no gzip magic"



; void *__fastcall sub_3FDF0(void *)
sub_3FDF0
MOV             R2, #0x38 ; '8' ; n
MOV             R1, #0  ; c
B               memset
; End of function sub_3FDF0




; int __fastcall sub_3FDFC(_DWORD *, int)
sub_3FDFC

buf= -2

PUSH            {R0,R1,R4-R6,LR}
LDR             R4, [R0]
CMP             R4, #0
BNE             loc_3FE50
MOV             R6, R1
MOV             R5, R0
MOV             R2, #2  ; nbytes
ADD             R1, SP, #8+buf ; buf
LDR             R0, [R0,#8] ; fd
BL              sub_18050
CMP             R0, #2
BNE             loc_3FE38
LDRH            R3, [SP,#8+buf]
CMP             R3, R6
BEQ             loc_3FE4C

loc_3FE38
LDR             R0, =aInvalidMagic ; "invalid magic"
BL              sub_16DDC
MOV             R0, #0xFFFFFFFF

loc_3FE44
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_3FE4C
STR             R0, [R5]

loc_3FE50
MOV             R0, #0
B               loc_3FE44
; End of function sub_3FDFC

off_3FE58 DCD aInvalidMagic ; "invalid magic"



; ssize_t __fastcall sub_3FE5C(int *, void *, size_t)
sub_3FE5C
LDR             R3, [R0,#0x10]
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, R2
CMP             R3, #0
BEQ             loc_3FEE0
LDR             R7, [R0,#0x14]
ADD             R6, R2, R7
CMP             R3, R6
STR             R6, [R0,#0x14]
LDR             R0, [R0,#0x18] ; ptr
BCS             loc_3FEAC
BL              free
MOV             R3, #0
LDR             R1, [R4,#0x10]
STR             R3, [R4,#0x18]
LDR             R0, =aBufferUTooSmal ; "buffer %u too small"
BL              sub_16AF4

loc_3FEA4
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}

loc_3FEAC
MOV             R8, R1
ADD             R1, R6, #1
BL              sub_174B4
MOV             R2, R5  ; n
STR             R0, [R4,#0x18]
MOV             R1, R8  ; src
ADD             R0, R0, R7 ; dest
BL              memcpy
LDR             R3, [R4,#0x18]
MOV             R2, #0  ; n
MOV             R0, R5
STRB            R2, [R3,R6]
POP             {R4-R8,PC}

loc_3FEE0               ; fd
LDR             R0, [R0,#0xC]
BL              sub_17FB8
CMP             R5, R0
POPEQ           {R4-R8,PC}
LDR             R0, =(aShortWrite+6) ; "write"
BL              sub_16AF4
B               loc_3FEA4
; End of function sub_3FE5C

off_3FEFC DCD aBufferUTooSmal ; "buffer %u too small"
off_3FF00 DCD aShortWrite+6 ; "write"



; __pid_t __fastcall sub_3FF04(int, int, int)
sub_3FF04

stat_loc= -8

CMP             R0, #0
PUSH            {R0-R2,LR}
BNE             loc_3FF34
ADD             R0, SP, #0xC+stat_loc ; stat_loc
BL              wait

loc_3FF18
CMP             R0, #0
BLT             loc_3FF40
LDR             R3, [SP,#0xC+stat_loc]
CMP             R3, #0
LDRNE           R3, =dword_7DBA0
MOVNE           R2, #1
STRNE           R2, [R3]

loc_3FF34               ; stat_loc
ADD             R0, SP, #0xC+stat_loc
BL              sub_173DC
B               loc_3FF18

loc_3FF40
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_3FF04

off_3FF48 DCD dword_7DBA0



; int __fastcall sub_3FF4C(int, int, int (__fastcall *)(_DWORD *))
sub_3FF4C

fd= -0x40
var_3C= -0x3C
var_38= -0x38
var_30= -0x30
var_2C= -0x2C

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x40
MOV             R4, R0
MOV             R0, SP
MOV             R6, R1
MOV             R5, R2
BL              sub_1766C
BL              sub_17B64
CMP             R0, #0
BNE             loc_3FFA4
LDR             R0, [SP,#0x40+fd] ; fd
BL              close
ADD             R0, SP, #0x40+var_38
BL              sub_3FDF0
LDR             R3, [SP,#0x40+var_3C]
ADD             R0, SP, #0x40+var_38
STR             R6, [SP,#0x40+var_38]
STR             R4, [SP,#0x40+var_30]
STR             R3, [SP,#0x40+var_2C]
BLX             R5
MOV             R0, R0,LSR#31 ; status
BL              _exit

loc_3FFA4               ; fd
LDR             R0, [SP,#0x40+var_3C]
BL              close
MOV             R1, R4
LDR             R0, [SP,#0x40+fd]
BL              sub_176A8
ADD             SP, SP, #0x40 ; '@'
POP             {R4-R6,PC}
; End of function sub_3FF4C




; int __fastcall sub_3FFC0(ssize_t, int)
sub_3FFC0
PUSH            {R4,LR}
BL              sub_3FD84
LDR             R2, [R0,#4]
CMP             R2, #0
BNE             loc_3FFE0
BL              free
MOV             R0, #1
POP             {R4,PC}

loc_3FFE0
MOV             R4, R0
MOV             R1, #1
LDR             R0, [R0,#8]
BL              sub_3FF4C
MOV             R0, R4  ; ptr
BL              free
MOV             R0, #0
POP             {R4,PC}
; End of function sub_3FFC0




; int __fastcall sub_40000(int, int)
sub_40000

var_C= -0xC

PUSH            {R0-R2,R4,R5,LR}
MOV             R4, R1
MOV             R1, #0
BL              open64
CMP             R0, #0
BGE             loc_40028

loc_40018
MOV             R4, #0xFFFFFFFF

loc_4001C
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_40028
MOV             R1, R4
BL              sub_3FD84
SUBS            R5, R0, #0
BEQ             loc_40018
LDMIB           R5, {R2,R4}
CMP             R2, #0
BEQ             loc_4005C
MOV             R1, #1
MOV             R0, R4
BL              sub_3FF4C

loc_40050               ; ptr
MOV             R0, R5
BL              free
B               loc_4001C

loc_4005C
LDR             R2, [R5]
MOV             R3, #1
STR             R3, [SP,#0xC+var_C]
MOV             R0, R4
RSB             R2, R2, #0
MOV             R3, R2,ASR#31
BL              sub_1771C
B               loc_40050
; End of function sub_40000




; int __fastcall sub_4007C(__int64, __int64)
sub_4007C

var_8= -8

PUSH            {R0,R1,R4,R6,R7,LR}
MOV             R6, R2
MOV             R7, R3
ORRS            R1, R6, R7
BEQ             loc_400E8
MOV             R1, #1
MOV             R4, R0
STR             R1, [SP,#8+var_8]
BL              lseek64
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_400E8
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x1D
BNE             loc_400E0
MOV             R2, R6
MOV             R3, R7
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4,R6,R7,LR}
B               sub_400F8

loc_400E0
LDR             R0, =aSeekFailure ; "seek failure"
BL              sub_16B40

loc_400E8
ADD             SP, SP, #8
POP             {R4,R6,R7,PC}
; End of function sub_4007C

off_400F0 DCD dword_7DB94
off_400F4 DCD aSeekFailure ; "seek failure"



; int __fastcall sub_400F8(int result, __int64)
sub_400F8
ORRS            R1, R2, R3
BXEQ            LR
MOV             R1, #0xFFFFFFFF
B               sub_17F58
; End of function sub_400F8




; unsigned __int8 *__fastcall sub_40108(const char *)
sub_40108
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R6, =(asc_69510+1) ; "../"
MOV             R4, R0
SUB             R7, R6, #1

loc_4011C
LDRB            R3, [R4]
CMP             R3, #0x2F ; '/'
ADDEQ           R4, R4, #1
BEQ             loc_4011C
MOV             R0, R4
MOV             R1, R6
BL              sub_1684C
CMP             R0, #0
ADDNE           R4, R4, #3
BNE             loc_4011C
MOV             R1, R7  ; needle
MOV             R0, R4  ; haystack
BL              strstr
CMP             R0, #0
ADDNE           R4, R0, #4
BNE             loc_4011C
CMP             R4, R5
BEQ             loc_4018C
LDR             R3, =dword_7D73C
LDR             R2, [R3]
CMP             R2, #0
BNE             loc_4018C
MOV             R2, #1
SUB             R1, R4, R5
STR             R2, [R3]
MOV             R2, R5
LDR             R0, =aRemovingLeadin ; "removing leading '%.*s' from member nam"...
BL              sub_16DDC

loc_4018C
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_40108

off_40194 DCD asc_69510+1 ; "../"
off_40198 DCD dword_7D73C
off_4019C DCD aRemovingLeadin ; "removing leading '%.*s' from member nam"...



; _DWORD *__fastcall sub_401A0(_DWORD *, char *haystack, const char *, int)
sub_401A0

var_C= -0xC

PUSH            {R0-R2,R4-R7,LR}
SUBS            R7, R3, #0
MOV             R6, R0
MOV             R4, R1
MOV             R5, R2
BNE             loc_401D8
LDRB            R3, [R1]
CMP             R3, #0x2F ; '/'
BEQ             loc_401D8
LDR             R1, =(asc_67ED0+3) ; needle
MOV             R0, R4  ; haystack
BL              strstr
CMP             R0, #0
BEQ             loc_40204

loc_401D8
MOV             R1, R7
STR             R4, [SP,#0xC+var_C]
MOV             R3, #0
MOV             R2, R5
LDR             R0, =aCSCS ; "%c%s%c%s"
BL              sub_177E4
MOV             R1, R0
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
B               sub_5D2C8

loc_40204               ; to
MOV             R1, R5
MOV             R0, R4  ; from
BL              symlink
CMP             R0, #0
BEQ             loc_4022C
MOV             R3, R4
MOV             R2, R5
LDR             R1, =aSym ; "sym"
LDR             R0, =aCanTCreateSlin ; "can't create %slink '%s' to '%s'"
BL              sub_16B40

loc_4022C
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_401A0

off_40234 DCD asc_67ED0+3 ; ".."
off_40238 DCD aCSCS     ; "%c%s%c%s"
off_4023C DCD aSym      ; "sym"
off_40240 DCD aCanTCreateSlin ; "can't create %slink '%s' to '%s'"



; int __fastcall sub_40244(int result)
sub_40244
PUSH            {R4-R10,LR}
MOV             R4, R0
LDR             R7, =link
LDR             R8, =symlink

loc_40254
CMP             R4, #0
POPEQ           {R4-R10,PC}
LDR             R6, [R4,#4]
ADD             R9, R6, #1
MOV             R0, R9  ; s
BL              strlen
LDRB            R3, [R6]
ADD             R0, R0, #2
ADD             R5, R6, R0
MOV             R1, R9
MOV             R0, R5
CMP             R3, #0
MOVNE           R3, R7
MOVEQ           R3, R8
BLX             R3
CMP             R0, #0
BEQ             loc_402BC
LDR             R2, [R4,#4]
MOV             R3, R5
LDR             R0, =aSym ; "sym"
LDR             R1, =aHard ; "hard"
LDRB            R12, [R2],#1
CMP             R12, #0
MOVEQ           R1, R0
LDR             R0, =aCanTCreateSlin ; "can't create %slink '%s' to '%s'"
BL              sub_16DBC

loc_402BC
LDR             R4, [R4]
B               loc_40254
; End of function sub_40244

off_402C4 DCD link
off_402C8 DCD symlink
off_402CC DCD aSym      ; "sym"
off_402D0 DCD aHard     ; "hard"
off_402D4 DCD aCanTCreateSlin ; "can't create %slink '%s' to '%s'"



; int __fastcall sub_402D8(int, unsigned int)
sub_402D8
PUSH            {R4-R8,LR}
MOV             R7, #0
MOV             R4, R0
MOV             R6, R1
MOV             R2, R1
MOV             R3, R7
LDRD            R0, R1, [R0,#0x30]
BLX             sub_62BA4
SUBS            R0, R6, R2
MOV             R2, R6
SBC             R1, R7, R3
MOV             R3, R7
BLX             sub_62BA4
MOV             R6, #0
MOV             R5, R2
MOV             R2, R5
MOV             R3, R6
LDR             R1, [R4,#0x28]
LDR             R0, [R4,#4]
BLX             R1
LDRD            R2, R3, [R4,#0x30]
ADDS            R2, R2, R5
ADC             R3, R3, R6
STRD            R2, R3, [R4,#0x30]
POP             {R4-R8,PC}
; End of function sub_402D8




; bool __fastcall sub_4033C(int)
sub_4033C
LDR             R3, [R0,#0x18]
LDR             R0, [R3]
CLZ             R0, R0
MOV             R0, R0,LSR#5
BX              LR
; End of function sub_4033C

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_2]



; bool __fastcall sub_40354(int, int)
sub_40354
LDR             R0, [R1,#4] ; s1
PUSH            {R4-R8,LR}
MOV             R5, R1
CMP             R0, #0
BEQ             loc_40378
LDR             R1, =asc_64E96 ; "--"
BL              strcmp
CMP             R0, #0
ADDEQ           R5, R5, #4

loc_40378
LDR             R0, [R5,#4]
CMP             R0, #0
BNE             loc_40388

loc_40384
BL              sub_162F0

loc_40388
BL              sub_16A54
MOV             R6, R0
BL              strlen
LDR             R7, [R5,#8]
MOV             R4, R0
CMP             R7, #0
BEQ             loc_403D8
LDR             R3, [R5,#0xC]
CMP             R3, #0
BNE             loc_40384
MOV             R0, R7  ; s
BL              strlen
CMP             R4, R0
BLS             loc_403D8
SUB             R5, R4, R0
MOV             R1, R7  ; s2
ADD             R0, R6, R5 ; s1
BL              strcmp
CMP             R0, #0
MOVEQ           R4, R5

loc_403D8
ADD             R5, R4, #1
MOV             R3, #0xA
STRB            R3, [R6,R4]
MOV             R2, R5  ; n
MOV             R1, R6  ; buf
MOV             R0, #1  ; fd
BL              sub_17FB8
SUBS            R0, R5, R0
MOVNE           R0, #1
POP             {R4-R8,PC}
; End of function sub_40354

off_40400 DCD asc_64E96 ; "--"



; int __fastcall sub_40404(int, char **)
sub_40404

var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R6, R1
SUB             SP, SP, #0x34
LDR             R1, =aEtvanbu ; "^etvAnbu"
MOV             R0, R6
BL              sub_593CC
LDR             R3, =optind
MOV             R5, R0
LDR             R3, [R3]
ADD             R4, R6, R3,LSL#2
LDR             R3, [R6,R3,LSL#2]
CMP             R3, #0
LDREQ           R3, =(asc_6AE7B+3) ; "-"
STREQ           R3, [R4,#-4]
SUBEQ           R4, R4, #4
TST             R0, #7
BEQ             loc_40540
AND             R3, R0, #0x30 ; '0'
LDR             R10, =buf
CMP             R3, #0
MOV             R6, #0
MOVEQ           R3, #0x100
MOVNE           R3, #0xA
MOVNE           R9, #1
MOVEQ           R9, #0
MOV             R8, R6
TST             R0, #0x20
STR             R3, [SP,#0x34+var_2C]
MOVEQ           R3, #0x100
MOVNE           R3, #0xA
STR             R3, [SP,#0x34+var_30]

loc_40480
LDR             R0, [R4]
BL              sub_61D34
SUBS            R11, R0, #0
BLT             loc_40528

loc_40490               ; nbytes
MOV             R2, #0x400
MOV             R1, R10 ; buf
MOV             R0, R11 ; fd
BL              read
SUBS            R3, R0, #0
STR             R3, [SP,#0x34+var_34]
BLT             loc_40528
BEQ             loc_4052C
MOV             R7, #0

loc_404B4
CMP             R9, #0
LDRB            R3, [R7,R10]
BEQ             loc_404E4
LDR             R2, [SP,#0x34+var_30]
CMP             R2, R3
BEQ             loc_404E4
ADD             R6, R6, #1
LDR             R0, =a6u ; "%6u  "
MOV             R1, R6
STR             R3, [SP,#0x34+var_28]
BL              printf
LDR             R3, [SP,#0x34+var_28]

loc_404E4
LDR             R2, [SP,#0x34+var_2C]
MOV             R0, R3
ADD             R1, SP, #0x34+var_20
ADD             R7, R7, #1
SUB             R9, R2, R3
MOV             R2, R5
BL              sub_5E550
LDR             R3, =stdout
ADD             R0, SP, #0x34+var_20
CLZ             R9, R9
MOV             R9, R9,LSR#5
LDR             R1, [R3]
BL              fputs_unlocked
LDR             R3, [SP,#0x34+var_34]
CMP             R3, R7
BNE             loc_404B4
B               loc_40490

loc_40528
MOV             R8, #1

loc_4052C
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_40480
MOV             R0, R8

loc_4053C
BL              sub_588D8

loc_40540
MOV             R3, R0,LSR#4
TST             R3, #3
BEQ             loc_405A0
MOV             R2, #6
EOR             R5, R0, #0x20 ; ' '
STR             R2, [SP,#0x34+var_20]
MOV             R2, #1
STR             R2, [SP,#0x34+var_1C]
UBFX            R5, R5, #5, #1
STR             R2, [SP,#0x34+var_18]
AND             R3, R3, #2
LDR             R2, =asc_65659 ; "\t"
STR             R5, [SP,#0x34+var_C]
STR             R3, [SP,#0x34+var_8]
STR             R2, [SP,#0x34+var_14]
LDR             R2, =(aShellReturnedI+0x13) ; "\n"
STR             R2, [SP,#0x34+var_10]

loc_40584
LDR             R1, [R4]
ADD             R0, SP, #0x34+var_20
BL              sub_5E42C
LDR             R0, [R4,#4]!
CMP             R0, #0
BNE             loc_40584
B               loc_4053C

loc_405A0
MOV             R0, R4
BL              sub_57910
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R11,PC}
; End of function sub_40404

off_405B0 DCD aEtvanbu  ; "^etvAnbu"
off_405B4 DCD optind
off_405B8 DCD asc_6AE7B+3 ; "-"
off_405BC DCD buf
off_405C0 DCD a6u       ; "%6u  "
off_405C4 DCD stdout
off_405C8 DCD asc_65659 ; "\t"
off_405CC DCD aShellReturnedI+0x13 ; "\n"



; int __fastcall sub_405D0(const char *, int, const char *, int)
sub_405D0
CMP             R3, #0
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R6, R1
MOV             R5, R2
BNE             loc_4062C
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_4061C

loc_405F4               ; nptr
LDR             R1, [R6,#0x10]
MOV             R0, R5  ; int
BL              sub_5E0F4
CMN             R0, #1
MOV             R1, R0  ; mode
BEQ             loc_40644
MOV             R0, R4  ; file
BL              chmod
CMP             R0, #0
BEQ             loc_4063C

loc_4061C
MOV             R0, R4
BL              sub_16B80
MOV             R0, #0
POP             {R4-R6,PC}

loc_4062C
LDR             R3, [R1,#0x10]
AND             R3, R3, #0xF000
CMP             R3, #0xA000
BNE             loc_405F4

loc_4063C
MOV             R0, #1
POP             {R4-R6,PC}

loc_40644
MOV             R1, R5
LDR             R0, =aInvalidModeS ; "invalid mode '%s'"
BL              sub_16DBC
; End of function sub_405D0

off_40650 DCD aInvalidModeS ; "invalid mode '%s'"



; int __fastcall sub_40654(int, char **)
sub_40654
PUSH            {R0-R2,R4-R9,LR}
MOV             R5, R1
LDR             R7, =aR_2 ; "-R"
MOV             R6, R1

loc_40664
LDR             R4, [R6,#4]!
CMP             R4, #0
BEQ             loc_406A0
LDRB            R3, [R4]
CMP             R3, #0x2D ; '-'
BNE             loc_40718
LDRB            R1, [R4,#1] ; c
CMP             R1, #0
BEQ             loc_40664
MOV             R0, R7  ; s
BL              strchr
CMP             R0, #0
BNE             loc_40664
MOV             R3, #0x61 ; 'a'
STRB            R3, [R4]

loc_406A0
LDR             R1, =aR_1 ; "^R"
MOV             R0, R5
BL              sub_593CC
LDR             R3, =optind
CMP             R4, #0
MOVNE           R1, #0x2D ; '-'
LDR             R9, =dword_7DBC0
LDR             R6, =sub_405D0
LDR             R3, [R3]
STRBNE          R1, [R4]
LDR             R7, [R5,R3,LSL#2]
ADD             R2, R5, R3,LSL#2
MOV             R5, #0
MOV             R8, R5
ADD             R4, R2, #4

loc_406DC
LDR             R1, [R9]
MOV             R3, R6
STMEA           SP, {R7,R8}
LDR             R2, =sub_405D0
LDR             R0, [R4]
AND             R1, R1, #1
BL              sub_60474
LDR             R3, [R4,#4]!
CMP             R0, #0
MOVEQ           R5, #1
CMP             R3, #0
BNE             loc_406DC
MOV             R0, R5
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_40718
MOV             R4, #0
B               loc_406A0
; End of function sub_40654

off_40720 DCD aR_2      ; "-R"
off_40724 DCD aR_1      ; "^R"
off_40728 DCD optind
off_4072C DCD dword_7DBC0
off_40730 DCD sub_405D0



; int __fastcall sub_40734(const char *, int, int *)
sub_40734
LDR             R3, [R2]
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, R2
LDR             R2, [R2,#4]
CMN             R3, #1
LDREQ           R3, [R1,#0x18]
CMN             R2, #1
LDR             R5, [R0,#8]
LDREQ           R2, [R1,#0x1C]
MOV             R0, R4
MOV             R1, R3
BLX             R5
CMP             R0, #0
BEQ             loc_40780
MOV             R0, R4
BL              sub_16B80
MOV             R0, #0
POP             {R4-R6,PC}

loc_40780
MOV             R0, #1
POP             {R4-R6,PC}
; End of function sub_40734




; int __fastcall sub_40788(int, char **)
sub_40788

var_10= -0x10
var_8= -8

PUSH            {R4-R9,LR}
MOV             R4, R1
SUB             SP, SP, #0x1C
LDR             R1, =aRh ; "^Rh"
MOV             R0, R4
ADD             R6, SP, #0x1C+var_10
BL              sub_593CC
LDR             R3, =optind
TST             R0, #2
LDR             R2, =chown
LDR             R9, =sub_40734
LDR             R3, [R3]
STR             R2, [SP,#0x1C+var_8]
LDRNE           R2, =lchown
LDR             R1, [R4,R3,LSL#2] ; s
ADD             R5, R4, R3,LSL#2
MOV             R4, #0
MOV             R8, R4
STRNE           R2, [SP,#0x1C+var_8]
TST             R0, #1
MOV             R0, R6  ; int
MOVEQ           R7, #8
MOVNE           R7, #9
BL              sub_6278C

loc_407E8
LDR             R0, [R5,#4]!
CMP             R0, #0
BNE             loc_40800
MOV             R0, R4
ADD             SP, SP, #0x1C
POP             {R4-R9,PC}

loc_40800
STMEA           SP, {R6,R8}
MOV             R3, R9
LDR             R2, =sub_40734
MOV             R1, R7
BL              sub_60474
CMP             R0, #0
MOVEQ           R4, #1
B               loc_407E8
; End of function sub_40788

off_40820 DCD aRh       ; "^Rh"
off_40824 DCD optind
off_40828 DCD chown
off_4082C DCD sub_40734
off_40830 DCD lchown


; Attributes: noreturn

; void __fastcall __noreturn sub_40834(int, const char **)
sub_40834
LDR             R0, [R1,#4]
PUSH            {R4,LR}
CMP             R0, #0
BNE             loc_40848
BL              sub_162F0

loc_40848
MOV             R4, R1
BL              sub_17920
LDR             R3, [R4,#8]
ADD             R0, R4, #8
CMP             R3, #0
BNE             loc_40874
BL              sub_58D5C
LDR             R3, =aI_1 ; "-i"
STR             R0, [R4]
MOV             R0, R4  ; argv
STR             R3, [R4,#4]

loc_40874
BL              sub_58840
; End of function sub_40834

off_40878 DCD aI_1      ; "-i"


; Attributes: noreturn

; void __fastcall __noreturn sub_4087C(int, int, int)
sub_4087C

var_C= -0xC

PUSH            {R0-R2,R4-R11,LR}
MOV             R4, R1
LDR             R5, =buf
MOV             R1, #1
MOV             R0, #0
ADD             R4, R4, #4
BL              sub_585EC
MOV             R9, #0
MOV             R10, R0

loc_408A0
LDR             R0, [R4]
LDR             R3, =aStandardInput ; "standard input"
CMP             R0, #0
MOVEQ           R0, R3
BL              sub_61D34
SUBS            R11, R0, #0
MOVLT           R9, #1
BLT             loc_40930
MOV             R6, #0
MOV             R7, #0
MOV             R8, #0

loc_408CC               ; nbytes
MOV             R2, #0x400
MOV             R1, R5  ; buf
MOV             R0, R11 ; fd
BL              sub_1800C
SUBS            R2, R0, #0
BLE             loc_40950
ADDS            R6, R6, R2
ADC             R7, R7, R2,ASR#31

loc_408EC
MOV             R0, R8
MOV             R3, R10
MOV             R1, R5
BL              sub_58684
CMN             R11, #1
MOV             R8, R0
BNE             loc_408CC
LDR             R12, [R4]
MVN             R1, R0
LDR             LR, =aULluS ; "%u %llu %s\n"
MOV             R2, R6
LDR             R0, =aULlu ; "%u %llu\n"
MOV             R3, R7
CMP             R12, #0
STR             R12, [SP,#0xC+var_C]
MOVNE           R0, LR  ; format

loc_4092C
BL              printf

loc_40930
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_40948
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_408A0

loc_40948
MOV             R0, R9
BL              sub_588D8

loc_40950               ; fd
MOV             R0, R11
BL              close
MOV             R0, R6
MOV             R1, R7
MOV             R3, #0

loc_40964
ORRS            R12, R0, R1
MOV             R2, R3
MOVEQ           R11, #0xFFFFFFFF
BEQ             loc_408EC
MOV             R2, R0,LSR#8
MOV             R12, R1,LSR#8
STRB            R0, [R3,R5]
ORR             R2, R2, R1,LSL#24
ADD             R3, R3, #1
MOV             R1, R12
MOV             R0, R2
B               loc_40964
; End of function sub_4087C

off_40994 DCD buf
off_40998 DCD aStandardInput ; "standard input"
off_4099C DCD aULluS    ; "%u %llu %s\n"
off_409A0 DCD aULlu     ; "%u %llu\n"



; int __fastcall sub_409A4(int, char **)
sub_409A4

var_68= -0x68

PUSH            {R4-R10,LR}
MOV             R8, R1
MOV             R4, R0
SUB             SP, SP, #0xD0
MOV             R0, R8
LDR             R1, =aPdrfilslharpvu ; "^pdRfilsLHarPvuT"
BL              sub_593CC
LDR             R3, =optind
EOR             R5, R0, #2
TST             R5, #0x80
ORRNE           R5, R0, #2
LDR             R12, [R3]
SUB             R3, R4, R12
ADD             R7, R8, R12,LSL#2
CMP             R3, #2
SUB             R2, R3, #0xC0000001
LDR             R6, [R7,R2,LSL#2]
BNE             loc_40AD0
LDR             R3, =(sub_62E14+1)
TST             R5, #2
LDR             R2, =(sub_62DFC+1)
MOV             R1, SP
LDR             R0, [R8,R12,LSL#2]
MOVEQ           R2, R3
BL              sub_49B28
SUBS            R8, R0, #0
BLT             loc_40AEC
ADD             R1, SP, #0xD0+var_68
MOV             R0, R6
BL              sub_49B90
CMP             R0, #0
BLT             loc_40AEC
ANDS            R9, R5, #0x4000
BEQ             loc_40A48
TST             R8, #2
BNE             loc_40A48
TST             R0, #2
BEQ             loc_40A48
MOV             R1, R6
LDR             R0, =aSIsADirectory ; "'%s' is a directory"
BL              sub_16DBC

loc_40A48
ORR             R4, R8, R0
ANDS            R4, R4, #2
MOVEQ           R8, R6
BEQ             loc_40A94
TST             R5, #4
BEQ             loc_40A70
CLZ             R0, R0
MOV             R0, R0,LSR#5
ANDS            R3, R0, R8,LSR#1
BNE             loc_40AE0

loc_40A70
CMP             R9, #0
BNE             loc_40AE0

loc_40A78
LDR             R0, [R7]
MOV             R4, R9
BL              sub_16A54
MOV             R1, R0
MOV             R0, R6
BL              sub_16998
MOV             R8, R0

loc_40A94
MOV             R10, R7
MOV             R2, R5
MOV             R1, R8
LDR             R0, [R10],#4
BL              sub_57E30
LDR             R3, [R7,#4]
CMP             R0, #0
MOVLT           R4, #1
CMP             R3, R6
BEQ             loc_40AF0
MOV             R0, R8  ; ptr
MOV             R9, R4
BL              free
MOV             R7, R10
B               loc_40A78

loc_40AD0
ANDS            R9, R5, #0x4000
BEQ             loc_40A78
LDR             R0, =aTooManyArgumen ; "too many arguments"
BL              sub_16DBC

loc_40AE0
MOV             R8, R6
MOV             R4, #0
B               loc_40A94

loc_40AEC
MOV             R4, #1

loc_40AF0
MOV             R0, R4
ADD             SP, SP, #0xD0
POP             {R4-R10,PC}
; End of function sub_409A4

off_40AFC DCD aPdrfilslharpvu ; "^pdRfilsLHarPvuT"
off_40B00 DCD optind
off_40B04 DCD sub_62E14+1
off_40B08 DCD sub_62DFC+1
off_40B0C DCD aSIsADirectory ; "'%s' is a directory"
off_40B10 DCD aTooManyArgumen ; "too many arguments"



; int __fastcall sub_40B14(_DWORD *, _DWORD *)
sub_40B14
LDR             R0, [R0]
LDR             R3, [R1]
SUB             R0, R0, R3
BX              LR
; End of function sub_40B14



; Attributes: noreturn

; void __fastcall __noreturn sub_40B24(int, char **)
sub_40B24

c= -0x34
var_30= -0x30
ptr= -0x2C
s= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
delim= -0x14
var_13= -0x13
var_10= -0x10
var_C= -0xC
stringp= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x3C
MOV             R7, R1
ADD             R6, SP, #0x3C+var_10
ADD             R9, SP, #0x3C+var_C
MOV             R3, R6
STMEA           SP, {R6,R9}
MOV             R2, R6
LDR             R1, =aBCFDSn ; "^b:c:f:d:sn"
MOV             R0, R7
BL              sub_593CC
LDR             R3, =optind
TST             R0, #7
LDREQ           R0, =aExpectedAListO ; "expected a list of bytes, characters, o"...
LDR             R10, [R3]
ADD             R3, R7, R10,LSL#2
STR             R3, [SP,#0x3C+var_30]
BEQ             loc_40B98
TST             R0, #8
BEQ             loc_40B9C
LDR             R3, [SP,#0x3C+var_C]
LDRB            R2, [R3]
CMP             R2, #0
STR             R2, [SP,#0x3C+c]
BEQ             loc_40BA4
LDRB            R3, [R3,#1]
CMP             R3, #0
BEQ             loc_40BA4
LDR             R0, =aTheDelimiterMu ; "the delimiter must be a single characte"...

loc_40B98
BL              sub_16DBC

loc_40B9C
MOV             R3, #9
STR             R3, [SP,#0x3C+c]

loc_40BA4
TST             R0, #4
BNE             loc_40CFC
ANDS            R8, R0, #0x10
BEQ             loc_40BC0
LDR             R1, =aOnlyWhenOperat ; " only when operating on fields"
LDR             R0, =aSuppressingNon ; "suppressing non-delimited lines makes s"...

loc_40BBC
BL              sub_16DBC

loc_40BC0
LDR             R3, [SP,#0x3C+c]
CMP             R3, #9
BEQ             loc_40D00
LDR             R1, =aOnlyWhenOperat ; " only when operating on fields"
LDR             R0, =aADelimiterMayB ; "a delimiter may be specified%s"
B               loc_40BBC

loc_40BD8
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_40C34
LDR             R1, =(asc_6AE7B+3) ; delim
MOV             R0, R9  ; stringp
BL              strsep
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_40CBC

loc_40BFC
MOV             R11, #0

loc_40C00
LDR             R0, [SP,#0x3C+var_C]
CMP             R0, #0
BNE             loc_40CD0

loc_40C0C
MOV             R5, #0xFFFFFFFF

loc_40C10
MOV             R2, R8
MOV             R0, R4
MOVW            R1, #0x804
BL              sub_62544
ADD             R2, R0, R8,LSL#3
STR             R11, [R0,R8,LSL#3]
MOV             R4, R0
ADD             R8, R8, #1
STR             R5, [R2,#4]

loc_40C34               ; delim
LDR             R1, =(aNoCarrier+0xA) ; ","
MOV             R0, R6  ; stringp
BL              strsep
CMP             R0, #0
STR             R0, [SP,#0x3C+var_C]
BNE             loc_40BD8
CMP             R8, #0
LDREQ           R0, =aMissingListOfP ; "missing list of positions"
BEQ             loc_40B98
MOV             R2, #8  ; size
LDR             R3, =sub_40B14 ; compar
MOV             R1, R8  ; nmemb
MOV             R0, R4  ; base
BL              qsort
LDR             R3, [R7,R10,LSL#2]
CMP             R3, #0
LDREQ           R3, =(asc_6AE7B+3) ; "-"
LDREQ           R2, [SP,#0x3C+var_30]
STREQ           R3, [R2,#-4]
MOVEQ           R3, R2
SUBEQ           R3, R3, #4
STREQ           R3, [SP,#0x3C+var_30]
MOV             R3, #0
STR             R3, [SP,#0x3C+var_24]

loc_40C94
LDR             R3, [SP,#0x3C+var_30]
LDR             R0, [R3]
BL              sub_61CD8
SUBS            R3, R0, #0
STR             R3, [SP,#0x3C+var_20]
MOVNE           R7, #0
BNE             loc_40DCC
MOV             R3, #1
STR             R3, [SP,#0x3C+var_24]
B               loc_40DE8

loc_40CBC
BL              sub_6219C
CMP             R0, #0
BEQ             loc_40BFC
SUB             R11, R0, #1
B               loc_40C00

loc_40CD0
LDRB            R2, [R0]
CMP             R2, #0
MOVEQ           R5, #0x7FFFFFFF
BEQ             loc_40C10
BL              sub_6219C
CMP             R0, #0
MOVEQ           R0, #0x7FFFFFFF
SUB             R5, R0, #1
CMP             R11, R5
BEQ             loc_40C0C
B               loc_40C10

loc_40CFC
MOV             R8, #0

loc_40D00
MOV             R4, R8
B               loc_40C34

loc_40D08
BL              strlen
MOV             R10, R0
ADD             R0, R0, #1
BL              sub_174DC
LDR             R3, [SP,#0x3C+stringp]
STR             R0, [SP,#0x3C+ptr]
STR             R3, [SP,#0x3C+s]
LDR             R3, =dword_7DBC0
LDR             R6, [R3]
ANDS            R5, R6, #3
BEQ             loc_40D9C
MOV             R6, #0
MOV             R2, #0x58 ; 'X'

loc_40D3C
LDR             R5, [R4,R6,LSL#3]
ADD             R11, R4, R6,LSL#3
LDR             R3, [SP,#0x3C+ptr]
ADD             R9, R3, R5

loc_40D4C
CMP             R10, R5
BLE             loc_40D84
LDRB            R3, [R9],#1
CMP             R3, #0
BNE             loc_40D74
LDR             R3, [SP,#0x3C+stringp]
STRB            R2, [R9,#-1]
LDRB            R0, [R3,R5] ; c
BL              putchar_unlocked
MOV             R2, #0x58 ; 'X'

loc_40D74
LDR             R3, [R11,#4]
ADD             R5, R5, #1
CMP             R5, R3
BLE             loc_40D4C

loc_40D84
ADD             R6, R6, #1
CMP             R6, R8
BNE             loc_40D3C

loc_40D90               ; c
MOV             R0, #0xA
BL              putchar_unlocked
B               loc_40DB8

loc_40D9C
LDR             R3, [SP,#0x3C+c]
CMP             R3, #0xA
BNE             loc_40E54
LDR             R3, [R4]
CMP             R3, R7
MOVLE           R2, R4
BLE             loc_40E40

loc_40DB8               ; ptr
LDR             R0, [SP,#0x3C+ptr]
ADD             R7, R7, #1
BL              free
LDR             R0, [SP,#0x3C+s] ; ptr
BL              free

loc_40DCC
LDR             R0, [SP,#0x3C+var_20]
BL              sub_58D24
CMP             R0, #0
STR             R0, [SP,#0x3C+stringp]
BNE             loc_40D08
LDR             R0, [SP,#0x3C+var_20]
BL              sub_5888C

loc_40DE8
LDR             R2, [SP,#0x3C+var_30]
LDR             R3, [R2,#4]!
CMP             R3, #0
STR             R2, [SP,#0x3C+var_30]
BNE             loc_40C94
LDR             R0, [SP,#0x3C+var_24]
BL              sub_588D8

loc_40E04
LDR             R0, [R2,#4]
ADD             R3, R3, #1
CMN             R0, #1
MOVNE           R1, #0
MOVEQ           R1, #1
CMP             R3, R0
ORRGT           R1, R1, #1
CMP             R1, #0
BEQ             loc_40E40
ADD             R5, R5, #1
CMP             R5, R8
BEQ             loc_40DB8
LDR             R3, [R2,#8]!
CMP             R7, R3
BLT             loc_40DB8

loc_40E40
CMP             R7, R3
BGT             loc_40E04

loc_40E48               ; s
LDR             R0, [SP,#0x3C+s]
BL              puts
B               loc_40DB8

loc_40E54
LDRB            R3, [SP,#0x3C+c]
LDR             R1, [SP,#0x3C+c] ; c
LDR             R0, [SP,#0x3C+s] ; s
STRB            R3, [SP,#0x3C+delim]
STRB            R5, [SP,#0x3C+var_13]
BL              strchr
CMP             R0, #0
BNE             loc_40F64
TST             R6, #0x10
BNE             loc_40DB8
B               loc_40E48

loc_40E80
LDR             R10, [R4,R9,LSL#3]
ADD             R3, R4, R9,LSL#3
STR             R3, [SP,#0x3C+var_1C]

loc_40E8C
LDR             R3, [SP,#0x3C+stringp]
CMP             R3, #0
CMPNE           R6, R10
BLT             loc_40F4C
SUB             R3, R6, R10
CMP             R5, #0
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVEQ           R3, #0
CMP             R3, #0
BEQ             loc_40F04
LDR             R3, [SP,#0x3C+ptr]
ADD             R3, R3, R6
STR             R3, [SP,#0x3C+var_18]
LDR             R3, [SP,#0x3C+ptr]
LDRB            R3, [R3,R6]
CMP             R3, #0
BNE             loc_40F04
CMP             R11, #0
BEQ             loc_40EE4
LDR             R0, [SP,#0x3C+c] ; c
BL              putchar_unlocked

loc_40EE4
LDR             R3, =stdout
MOV             R0, R5
ADD             R11, R11, #1
LDR             R1, [R3]
BL              fputs_unlocked
LDR             R3, [SP,#0x3C+var_18]
MOV             R2, #0x58 ; 'X'
STRB            R2, [R3]

loc_40F04
LDR             R3, [SP,#0x3C+var_1C]
ADD             R10, R10, #1
LDR             R2, [SP,#0x3C+stringp]
LDR             R3, [R3,#4]
MOVS            R2, R2
MOVNE           R2, #1
CMP             R10, R3
BGT             loc_40F34
ADDS            R3, R3, #1
MOVNE           R3, #1
TST             R2, R3
BNE             loc_40E8C

loc_40F34
ADD             R9, R9, #1

loc_40F38
LDR             R3, [SP,#0x3C+stringp]
CMP             R3, #0
CMPNE           R9, R8
BCC             loc_40E80
B               loc_40D90

loc_40F4C               ; delim
ADD             R1, SP, #0x3C+delim
ADD             R0, SP, #0x3C+stringp ; stringp
BL              strsep
ADD             R6, R6, #1
MOV             R5, R0
B               loc_40E8C

loc_40F64
MOV             R11, R5
MOV             R6, #0xFFFFFFFF
MOV             R9, R5
B               loc_40F38
; End of function sub_40B24

off_40F74 DCD aBCFDSn   ; "^b:c:f:d:sn"
off_40F78 DCD optind
off_40F7C DCD aExpectedAListO ; "expected a list of bytes, characters, o"...
off_40F80 DCD aTheDelimiterMu ; "the delimiter must be a single characte"...
off_40F84 DCD aOnlyWhenOperat ; " only when operating on fields"
off_40F88 DCD aSuppressingNon ; "suppressing non-delimited lines makes s"...
off_40F8C DCD aADelimiterMayB ; "a delimiter may be specified%s"
off_40F90 DCD asc_6AE7B+3 ; "-"
off_40F94 DCD aNoCarrier+0xA ; ","
off_40F98 DCD aMissingListOfP ; "missing list of positions"
off_40F9C DCD sub_40B14
off_40FA0 DCD dword_7DBC0
off_40FA4 DCD stdout



; int __fastcall sub_40FA8(int, char **)
sub_40FA8

var_C4= -0xC4
var_C0= -0xC0
var_BC= -0xBC
var_B8= -0xB8
var_B0= -0xB0
var_AC= -0xAC
var_A8= -0xA8
s= -0xA4
timer= -0xA0
tp= -0x98
dest= -0x6C
var_1C= -0x1C
var_4= -4

PUSH            {R4-R9,LR}
SUB             SP, SP, #0xC4
ADD             R2, SP, #0xC4+var_AC
MOV             R3, #0
MOV             R4, R1
STR             R2, [SP,#0xC4+var_B8]
ADD             R2, SP, #0xC4+s
STR             R3, [SP,#0xC4+s]
ADD             R3, SP, #0xC4+var_B0
STR             R2, [SP,#0xC4+var_BC]
ADD             R2, SP, #0xC4+var_A8
STR             R2, [SP,#0xC4+var_C0]
MOV             R0, R4
STR             R3, [SP,#0xC4+var_C4]
LDR             R2, =aRfc822 ; "rfc-822"
LDR             R1, =aRsUdRID ; "^Rs:ud:r:I::D:"
BL              sub_593F8
LDR             R3, =optind
TST             R0, #4
MOV             R5, R0
LDR             R7, [R3]
ADD             R9, R4, R7,LSL#2
BEQ             loc_4100C
LDR             R0, =aTzUtc0 ; "TZ=UTC0"
BL              putenv

loc_4100C
TST             R5, #0x20
BEQ             loc_41034
LDR             R1, [SP,#0xC4+s] ; s
CMP             R1, #0
BEQ             loc_410E4
LDR             R0, =aDate ; "date"
BL              sub_168D4
SUBS            R6, R0, #0
BGE             loc_41038

loc_41030
BL              sub_162F0

loc_41034
MOV             R6, #0xFFFFFFFF

loc_41038
LDR             R4, [R4,R7,LSL#2]
CMP             R4, #0
BEQ             loc_41058
LDRB            R3, [R4]
CMP             R3, #0x2B ; '+'
ADDEQ           R4, R4, #1
ADDEQ           R9, R9, #4
MOVNE           R4, #0

loc_41058
TST             R5, #0xA
LDR             R8, [R9]
BNE             loc_41128
CMP             R8, #0
ORR             R5, R5, #2
STR             R8, [SP,#0xC4+var_B0]
BEQ             loc_41128
LDR             R1, =a0123456789 ; "0123456789"
MOV             R0, R8  ; s
BL              strspn
LDRB            R3, [R8,R0]
CMP             R3, #0
BEQ             loc_410C4
CMP             R3, #0x2E ; '.'
BNE             loc_41124
ADD             R3, R8, R0
LDRB            R2, [R3,#1]
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #9
BHI             loc_41124
LDRB            R2, [R3,#2]
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #9
BHI             loc_41124
LDRB            R3, [R3,#3]
CMP             R3, #0
BNE             loc_41124

loc_410C4
SUB             R7, R0, #8
CMP             R7, #4
BHI             loc_410D8
TST             R7, #1
BEQ             loc_410EC

loc_410D8
MOV             R1, R8

loc_410DC
LDR             R0, =aInvalidDateS ; "invalid date '%s'"
BL              sub_16DBC

loc_410E4
MOV             R6, R1
B               loc_41038

loc_410EC
CMP             R7, #0
BEQ             loc_41124
MOV             R2, R7  ; n
ADD             R1, R8, #8 ; src
ADD             R0, SP, #0xC4+dest ; dest
BL              memcpy
MOV             R2, #8  ; n
MOV             R1, R8  ; src
ADD             R0, R8, R7 ; dest
BL              memmove
MOV             R2, R7  ; n
ADD             R1, SP, #0xC4+dest ; src
LDR             R0, [SP,#0xC4+var_B0] ; dest
BL              memcpy

loc_41124
ADD             R9, R9, #4

loc_41128
LDR             R3, [R9]
CMP             R3, #0
BNE             loc_41030
TST             R5, #0x10
BEQ             loc_4119C
ADD             R1, SP, #0xC4+dest
LDR             R0, [SP,#0xC4+var_A8]
BL              sub_17A0C
LDR             R3, [SP,#0xC4+var_1C]
STR             R3, [SP,#0xC4+timer]

loc_41150               ; tp
ADD             R1, SP, #0xC4+tp
ADD             R0, SP, #0xC4+timer ; timer
BL              localtime_r
LDR             R0, [SP,#0xC4+var_B0]
CMP             R0, #0
BEQ             loc_411F0
TST             R5, #0x40
MOV             R3, #0
STR             R3, [SP,#0xC4+tp]
STR             R3, [SP,#0xC4+tp.tm_min]
STR             R3, [SP,#0xC4+tp.tm_hour]
BEQ             loc_411A8
ADD             R2, SP, #0xC4+tp
LDR             R1, [SP,#0xC4+var_AC]
BL              strptime
CMP             R0, #0
BNE             loc_411B0
LDR             R1, [SP,#0xC4+var_B0]
B               loc_410DC

loc_4119C               ; timer
ADD             R0, SP, #0xC4+timer
BL              time
B               loc_41150

loc_411A8
ADD             R1, SP, #0xC4+tp
BL              sub_182E8

loc_411B0               ; int
LDR             R0, [SP,#0xC4+var_B0]
ADD             R1, SP, #0xC4+tp ; tp
LDRB            R3, [R0]
CMP             R3, #0x40 ; '@'
MOVNE           R3, #0xFFFFFFFF
STRNE           R3, [SP,#0xC4+tp.tm_isdst]
BL              sub_18740
TST             R5, #2
STR             R0, [SP,#0xC4+timer]
BEQ             loc_411F0
ADD             R0, SP, #0xC4+timer ; when
BL              stime
CMP             R0, #0
BGE             loc_411F0
LDR             R0, =aCanTSetDate ; "can't set date"
BL              sub_16AF4

loc_411F0
CMP             R4, #0
BNE             loc_41260
CMN             R6, #1
BEQ             loc_412B0
LDR             R1, =aYMDtHMS ; "%Y-%m-%dT%H:%M:%S"
ADD             R0, SP, #0xC4+dest ; dest
BL              strcpy
ADD             R3, R6, R6,LSL#1
CMP             R6, #0
ADD             R3, R3, #8
BEQ             loc_4124C

loc_4121C
ADD             R1, SP, #0xC4+var_4
MOV             R0, #0x25 ; '%'
ADD             R1, R1, R3
ADD             R2, R3, #1
STRB            R0, [R1,#-0x68]
TST             R5, #4
ADD             R0, SP, #0xC4+var_4
ADD             R3, R3, #2
MOVEQ           R1, #0x7A ; 'z'
MOVNE           R1, #0x5A ; 'Z'
ADD             R2, R0, R2
STRB            R1, [R2,#-0x68]

loc_4124C
ADD             R2, SP, #0xC4+var_4
ADD             R4, SP, #0xC4+dest
ADD             R3, R2, R3
MOV             R2, #0
STRB            R2, [R3,#-0x68]

loc_41260
LDRB            R3, [R4]
CMP             R3, #0
LDREQ           R2, =buf
STRBEQ          R3, [R2]
BEQ             loc_4129C
LDR             R1, =aF_0 ; "%f"
MOV             R0, R4
BL              sub_1684C
CMP             R0, #0
LDR             R2, =aYMDHMS ; "%Y.%m.%d-%H:%M:%S"
ADD             R3, SP, #0xC4+tp ; tp
MOVEQ           R2, R4  ; format
MOV             R1, #0x400 ; maxsize
LDR             R0, =buf ; s
BL              strftime

loc_4129C               ; s
LDR             R0, =buf
BL              puts
MOV             R0, #0
ADD             SP, SP, #0xC4
POP             {R4-R9,PC}

loc_412B0
TST             R5, #1
LDREQ           R4, =aABEHMSZY ; "%a %b %e %H:%M:%S %Z %Y"
BEQ             loc_41260
LDR             R1, =aADBYHMS ; "%a, %d %b %Y %H:%M:%S "
ADD             R0, SP, #0xC4+dest ; dest
BL              strcpy
MOV             R3, #0x16
B               loc_4121C
; End of function sub_40FA8

off_412D0 DCD aRfc822   ; "rfc-822"
off_412D4 DCD aRsUdRID  ; "^Rs:ud:r:I::D:"
off_412D8 DCD optind
off_412DC DCD aTzUtc0   ; "TZ=UTC0"
; const int off_412E0
off_412E0 DCD aDate     ; "date"
off_412E4 DCD a0123456789 ; "0123456789"
off_412E8 DCD aInvalidDateS ; "invalid date '%s'"
off_412EC DCD aCanTSetDate ; "can't set date"
off_412F0 DCD aYMDtHMS  ; "%Y-%m-%dT%H:%M:%S"
off_412F4 DCD buf
off_412F8 DCD aF_0      ; "%f"
off_412FC DCD aYMDHMS   ; "%Y.%m.%d-%H:%M:%S"
off_41300 DCD aABEHMSZY ; "%a %b %e %H:%M:%S %Z %Y"
off_41304 DCD aADBYHMS  ; "%a, %d %b %Y %H:%M:%S "



; int __fastcall sub_41308(int, int)
sub_41308
PUSH            {R4,LR}
MOV             R0, R1
BL              sub_60E30
BL              dirname
BL              puts
POP             {R4,LR}
B               sub_177D8
; End of function sub_41308




; unsigned __int64 __fastcall sub_41324(const char *)
sub_41324

var_6C= -0x6C
var_5C= -0x5C
var_58= -0x58
var_2C= -0x2C

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x6C
MOV             R1, SP
MOV             R7, R0
BLX             sub_62E14
CMP             R0, #0
BEQ             loc_4136C

loc_41340
MOV             R0, R7
BL              sub_16B80
LDR             R3, =buf
MOV             R2, #1
STRB            R2, [R3,#(buf.c_cflag - 0x7D790)]

loc_41354
MOV             R4, #0
MOV             R5, R4

loc_4135C
MOV             R0, R4
MOV             R1, R5
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R9,PC}

loc_4136C
LDR             R8, =dword_7DBC0
LDR             R3, [R8]
TST             R3, #0x20
BEQ             loc_413AC
LDR             R3, =buf
LDRD            R0, R1, [SP,#0x6C+var_6C]
LDR             R2, [R3,#(buf.c_line - 0x7D790)]
CMP             R2, #0
STREQ           R0, [R3,#(buf.c_cc+7 - 0x7D790)]
STREQ           R1, [R3,#(buf.c_cc+0xB - 0x7D790)]
BEQ             loc_413AC
LDR             R5, [R3,#(buf.c_cc+0xB - 0x7D790)]
LDR             R4, [R3,#(buf.c_cc+7 - 0x7D790)]
CMP             R5, R1
CMPEQ           R4, R0
BNE             loc_41354

loc_413AC
LDR             R3, [SP,#0x6C+var_5C]
LDRD            R4, R5, [SP,#0x6C+var_2C]
AND             R3, R3, #0xF000
CMP             R3, #0xA000
BNE             loc_4140C
LDR             R6, =buf
LDR             R2, [R6,#(buf.c_lflag - 0x7D790)]
LDR             R3, [R6,#(buf.c_line - 0x7D790)]
CMP             R2, R3
BLE             loc_4140C
MOV             R1, SP
MOV             R0, R7
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_41340
LDR             R3, [R6,#(buf.c_lflag - 0x7D790)]
LDRD            R4, R5, [SP,#0x6C+var_2C]
CMP             R3, #1
MOVEQ           R3, #0xFFFFFFFF
STRBEQ          R3, [R6,#(buf.c_lflag - 0x7D790)]
STRBEQ          R3, [R6,#(buf.c_lflag+1 - 0x7D790)]
STRBEQ          R3, [R6,#(buf.c_lflag+2 - 0x7D790)]
MOVEQ           R3, #0x7F
STRBEQ          R3, [R6,#(buf.c_lflag+3 - 0x7D790)]

loc_4140C
LDR             R3, [R8]
TST             R3, #0x80
BNE             loc_4143C
LDR             R3, [SP,#0x6C+var_58]
CMP             R3, #1
BLS             loc_4143C
MOV             R0, SP
BL              sub_5A6C0
SUBS            R1, R0, #0 ; s
BNE             loc_41354
MOV             R0, SP  ; int
BL              sub_5A754

loc_4143C
LDR             R3, [SP,#0x6C+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BNE             loc_41504
MOV             R0, R7
BL              sub_17954
SUBS            R8, R0, #0
LDRNE           R6, =buf
BNE             loc_414B0
LDR             R3, =buf
MOV             R2, #1
STRB            R2, [R3,#(buf.c_cflag - 0x7D790)]
B               loc_4135C

loc_41470
ADD             R1, R1, #0x13
MOV             R0, R7
BL              sub_57D64
SUBS            R9, R0, #0
BEQ             loc_414B0
LDR             R3, [R6,#(buf.c_line - 0x7D790)]
ADD             R3, R3, #1
STR             R3, [R6,#(buf.c_line - 0x7D790)]
BL              sub_41324
LDR             R3, [R6,#(buf.c_line - 0x7D790)]
ADDS            R4, R4, R0
MOV             R0, R9  ; ptr
ADC             R5, R5, R1
SUB             R3, R3, #1
STR             R3, [R6,#(buf.c_line - 0x7D790)]
BL              free

loc_414B0
MOV             R0, R8
BL              readdir64
SUBS            R1, R0, #0
BNE             loc_41470
MOV             R0, R8  ; dirp
BL              closedir

loc_414C8
LDR             R3, =buf
LDR             R1, [R3,#(buf.c_line - 0x7D790)]
LDR             R2, [R3,#(buf.c_oflag - 0x7D790)]
CMP             R1, R2
BGT             loc_4135C
MOV             R1, R5
LDR             R3, [R3]
MOV             R2, #0x200
MOV             R0, R4
BL              sub_5A318
MOV             R2, R7
MOV             R1, R0
LDR             R0, =aSS_2 ; "%s\t%s\n"
BL              printf
B               loc_4135C

loc_41504
LDR             R2, [R8]
LDR             R3, =buf
TST             R2, #1
LDR             R3, [R3,#(buf.c_line - 0x7D790)]
BNE             loc_414C8
CMP             R3, #0
BNE             loc_4135C
B               loc_414C8
; End of function sub_41324

off_41524 DCD buf
off_41528 DCD dword_7DBC0
off_4152C DCD aSS_2     ; "%s\t%s\n"


; Attributes: noreturn

; void __fastcall __noreturn sub_41530(int, char **)
sub_41530
PUSH            {R4-R10,LR}
MOV             R3, #4
LDR             R4, =buf
MOV             R5, #0
MOV             R7, R1
MOV             R6, #0
LDR             R0, =aPosixlyCorrect ; "POSIXLY_CORRECT"
STRB            R3, [R4,#termios.c_iflag+1]
STRB            R5, [R4]
STRB            R5, [R4,#termios.c_iflag+2]
STRB            R5, [R4,#termios.c_iflag+3]
BL              getenv
CMP             R0, R5
LDR             R2, =buf.c_oflag
MOVNE           R3, #2
LDR             R1, =aAhklsxdLchm ; "^aHkLsxd:+lchm"
STRBNE          R3, [R4,#termios.c_iflag+1]
MOV             R3, #0xFFFFFFFF
STRB            R3, [R4,#termios.c_oflag]
MOV             R0, R7
STRB            R3, [R4,#termios.c_oflag+1]
STRB            R3, [R4,#termios.c_oflag+2]
MOV             R3, #0x7F
STRBNE          R5, [R4]
STRBNE          R5, [R4,#termios.c_iflag+2]
STRBNE          R5, [R4,#termios.c_iflag+3]
STRB            R3, [R4,#termios.c_oflag+3]
BL              sub_593CC
LDR             R3, =optind
TST             R0, #0x200
MOV             R5, R0
LDR             R1, [R3]
STRBNE          R6, [R4]
STRBNE          R6, [R4,#termios.c_iflag+1]
STRBNE          R6, [R4,#termios.c_iflag+2]
STRBNE          R6, [R4,#termios.c_iflag+3]
TST             R0, #0x400
MOVNE           R3, #0
MOVNE           R0, #0x10
STRBNE          R3, [R4]
ADD             R2, R7, R1,LSL#2
STRBNE          R3, [R4,#termios.c_iflag+1]
STRBNE          R3, [R4,#termios.c_iflag+3]
STRBNE          R0, [R4,#termios.c_iflag+2]
TST             R5, #4
MOVNE           R3, #0
MOVNE           R0, #4
STRBNE          R3, [R4]
STRBNE          R3, [R4,#termios.c_iflag+2]
STRBNE          R3, [R4,#termios.c_iflag+3]
STRBNE          R0, [R4,#termios.c_iflag+1]
TST             R5, #2
MOVNE           R3, #0
MOVNE           R0, #1
STRBNE          R3, [R4,#termios.c_lflag+1]
STRBNE          R3, [R4,#termios.c_lflag+2]
STRBNE          R3, [R4,#termios.c_lflag+3]
STRBNE          R0, [R4,#termios.c_lflag]
TST             R5, #8
MOVNE           R3, #0xFFFFFFFF
STRBNE          R3, [R4,#termios.c_lflag]
STRBNE          R3, [R4,#termios.c_lflag+1]
STRBNE          R3, [R4,#termios.c_lflag+2]
MOVNE           R3, #0x7F
STRBNE          R3, [R4,#termios.c_lflag+3]
TST             R5, #0x10
MOVNE           R3, #0
STRBNE          R3, [R4,#termios.c_oflag]
STRBNE          R3, [R4,#termios.c_oflag+1]
STRBNE          R3, [R4,#termios.c_oflag+2]
STRBNE          R3, [R4,#termios.c_oflag+3]
LDR             R3, [R7,R1,LSL#2]
CMP             R3, #0
MOVNE           R7, R2
BNE             loc_41680
LDR             R1, =(asc_67ED0+4) ; "."
SUB             R7, R2, #4
STR             R1, [R2,#-4]
LDR             R2, [R4,#termios.c_lflag]
CMP             R2, #1
STRBEQ          R3, [R4,#termios.c_lflag]
STRBEQ          R3, [R4,#termios.c_lflag+1]
STRBEQ          R3, [R4,#termios.c_lflag+2]
STRBEQ          R3, [R4,#termios.c_lflag+3]

loc_41680
LDR             R9, [R4,#termios.c_lflag]
MOV             R6, #0
MOV             R8, R6

loc_4168C
LDR             R0, [R7]
BL              sub_41324
ADDS            R6, R6, R0
ADC             R8, R8, R1
BL              sub_5A7F4
STR             R9, [R4,#termios.c_lflag]
LDR             R3, [R7,#4]!
CMP             R3, #0
BNE             loc_4168C
TST             R5, #0x100
BEQ             loc_416DC
MOV             R2, #0x200
MOV             R1, R8
LDR             R3, [R4]
MOV             R0, R6
BL              sub_5A318
LDR             R2, =aTotal ; "total"
MOV             R1, R0
LDR             R0, =aSS_2 ; "%s\t%s\n"
BL              printf

loc_416DC
LDRB            R0, [R4,#termios.c_cflag]
BL              sub_588D8
; End of function sub_41530

off_416E4 DCD buf
off_416E8 DCD aPosixlyCorrect ; "POSIXLY_CORRECT"
off_416EC DCD buf.c_oflag
off_416F0 DCD aAhklsxdLchm ; "^aHkLsxd:+lchm"
off_416F4 DCD optind
off_416F8 DCD asc_67ED0+4 ; "."
off_416FC DCD aTotal    ; "total"
off_41700 DCD aSS_2     ; "%s\t%s\n"



; int __fastcall sub_41704(int, int, unsigned __int8 *)
sub_41704

var_8= -8

PUSH            {R0-R2,R4-R9,LR}
MOV             R6, #0
MOV             R7, #1

loc_41710
ADD             R5, R1, #4
LDR             R3, [R1,#4]
CMP             R3, #0
BEQ             loc_41754
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BNE             loc_41754
ADD             R3, R3, #1
MOV             R12, R6
MOV             R0, R7

loc_41738
LDRB            R2, [R3]
CMP             R2, #0x6E ; 'n'
BEQ             loc_417E0
CMP             R2, #0x65 ; 'e'
BEQ             loc_41800
CMP             R2, #0x45 ; 'E'
BEQ             loc_417E4

loc_41754
MOV             R4, R1
MOV             R8, #0

loc_4175C               ; s
LDR             R0, [R4,#4]!
CMP             R0, #0
BNE             loc_41808
ADD             R0, R8, #1
MOV             R9, #0x20 ; ' '
BL              sub_1748C
MOV             R8, R0
MOV             R4, R0

loc_4177C
LDR             R1, [R5]
CMP             R1, #0
BNE             loc_41818

loc_41788
CMP             R7, #0
MOVNE           R3, #0xA
STRBNE          R3, [R4]
ADDNE           R4, R4, #1

loc_41798
LDR             R3, =dword_7DB94
SUB             R2, R4, R8 ; n
MOV             R1, R8  ; buf
MOV             R0, #1  ; fd
LDR             R5, [R3]
MOV             R3, #0
STR             R3, [R5]
BL              sub_17FB8
MOV             R0, R8  ; ptr
BL              free
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_417D8
LDR             R0, =aWriteError ; "write error"
BL              sub_16AF4
MOV             R0, #1

loc_417D8
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_417E0
MOV             R0, #0

loc_417E4
LDRB            R2, [R3,#1]!
CMP             R2, #0
BNE             loc_41738
MOV             R6, R12
MOV             R7, R0
MOV             R1, R5
B               loc_41710

loc_41800
MOV             R12, #0x5C ; '\'
B               loc_417E4

loc_41808
BL              strlen
ADD             R0, R0, #1
ADD             R8, R8, R0
B               loc_4175C

loc_41818
CMP             R6, #0
BNE             loc_41888
MOV             R0, R4
BL              stpcpy
MOV             R4, R0

loc_4182C
LDR             R3, [R5,#4]!
CMP             R3, #0
BEQ             loc_41788
STRB            R9, [R4]
ADD             R4, R4, #1
B               loc_4177C

loc_41844
CMP             R2, R6
BNE             loc_41880
LDRB            R2, [R1,#1]
CMP             R2, #0x63 ; 'c'
BEQ             loc_41798
CMP             R2, #0x30 ; '0'
BNE             loc_41870
LDRB            R2, [R1,#2]
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #7
ADDLS           R3, R1, #2

loc_41870
ADD             R0, SP, #0xC+var_8
STR             R3, [SP,#0xC+var_8]
BL              sub_5E668
LDR             R3, [SP,#0xC+var_8]

loc_41880
MOV             R1, R3
STRB            R0, [R4],#1

loc_41888
LDRB            R2, [R1]
ADD             R3, R1, #1
SUBS            R0, R2, #0
BNE             loc_41844
B               loc_4182C
; End of function sub_41704

off_4189C DCD dword_7DB94
off_418A0 DCD aWriteError ; "write error"


; Attributes: noreturn

; void __fastcall __noreturn sub_418A4(int, char **)
sub_418A4

var_4= -4
var_s0=  0

PUSH            {R0,R1,R4-R6,LR}
MOV             R3, #0
MOV             R6, R1
ADD             R5, SP, #8+var_s0
MOV             R0, R6
STR             R3, [R5,#-4]!
MOV             R3, R5
LDR             R2, =aIgnoreEnvironm ; "ignore-environment"
LDR             R1, =aIu ; "+iu:*"
BL              sub_593F8
LDR             R3, =optind
LDR             R3, [R3]
ADD             R4, R6, R3,LSL#2
LDR             R3, [R6,R3,LSL#2]
CMP             R3, #0
BEQ             loc_41900
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BNE             loc_41900
LDRB            R3, [R3,#1]
CMP             R3, #0
ORREQ           R0, R0, #1
ADDEQ           R4, R4, #4

loc_41900
TST             R0, #1
BEQ             loc_4190C
BL              clearenv

loc_4190C
LDR             R3, [SP,#8+var_4]
CMP             R3, #0
BNE             loc_41944

loc_41918
MOV             R6, R4
LDR             R5, [R4],#4
CMP             R5, #0
BEQ             loc_41984
MOV             R1, #0x3D ; '=' ; c
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
BNE             loc_41954
MOV             R0, R6  ; argv
BL              sub_58840

loc_41944
MOV             R0, R5
BL              sub_5D2FC
BL              putenv
B               loc_4190C

loc_41954               ; string
MOV             R0, R5
BL              putenv
CMP             R0, #0
BGE             loc_41918
LDR             R0, =aPutenv_0 ; "putenv"
BL              sub_16B40

loc_4196C
BL              puts

loc_41970               ; s
LDR             R0, [R4,#4]!
CMP             R0, #0
BNE             loc_4196C

loc_4197C
MOV             R0, #0
BL              sub_588D8

loc_41984
LDR             R3, =__environ
LDR             R4, [R3]
CMP             R4, #0
SUBNE           R4, R4, #4
BNE             loc_41970
B               loc_4197C
; End of function sub_418A4

off_4199C DCD aIgnoreEnvironm ; "ignore-environment"
off_419A0 DCD aIu       ; "+iu:*"
off_419A4 DCD optind
off_419A8 DCD aPutenv_0 ; "putenv"
off_419AC DCD __environ



; int __fastcall sub_419B0(int)
sub_419B0
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_419D0
LDRD            R2, R3, [R0,#8]
ORRS            R3, R2, R3
MOVEQ           R0, #1
MOVNE           R0, #0
BX              LR

loc_419D0
LDR             R3, [R0,#8]
LDRB            R2, [R3]
CMP             R2, #0
BEQ             loc_419F8
CMP             R2, #0x30 ; '0'
BNE             loc_41A00
LDRB            R0, [R3,#1]
CLZ             R0, R0
MOV             R0, R0,LSR#5
BX              LR

loc_419F8
MOV             R0, #1
BX              LR

loc_41A00
MOV             R0, #0
BX              LR
; End of function sub_419B0




; char *__fastcall sub_41A08(char *result)
sub_41A08
LDR             R3, [R0]
CMP             R3, #0
BXNE            LR
LDRD            R2, R3, [R0,#8]
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, =aLld ; "%lld"
BL              sub_177E4
MOV             R3, #1
STR             R0, [R4,#8]
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_41A08

off_41A38 DCD aLld      ; "%lld"



; _DWORD *__fastcall sub_41A3C(const char *)
sub_41A3C
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, #0x10
BL              sub_174DC
MOV             R3, #1
MOV             R4, R0
STR             R3, [R0]
MOV             R0, R5
BL              sub_174F8
STR             R0, [R4,#8]
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_41A3C




; int __fastcall sub_41A6C(_DWORD *, char *)
sub_41A6C

endptr= -4

PUSH            {R0,R1,R4-R6,R8,R9,LR}
LDR             R5, [R0]
CMP             R5, #1
BNE             loc_41ACC
MOV             R4, R0
MOV             R2, #0xA ; base
ADD             R1, SP, #8+endptr ; endptr
LDR             R0, [R0,#8] ; nptr
BL              strtoll
LDR             R3, [SP,#8+endptr]
MOV             R8, R0
LDR             R0, [R4,#8] ; ptr
MOV             R9, R1
CMP             R0, R3
BEQ             loc_41AB4
LDRB            R6, [R3]
CMP             R6, #0
BEQ             loc_41AC0

loc_41AB4
MOV             R0, #0

loc_41AB8
ADD             SP, SP, #8
POP             {R4-R6,R8,R9,PC}

loc_41AC0
BL              free
STRD            R8, R9, [R4,#8]
STR             R6, [R4]

loc_41ACC
MOV             R0, #1
B               loc_41AB8
; End of function sub_41A6C




; signed __int64 __fastcall sub_41AD4(int, int, int)
sub_41AD4
PUSH            {R4-R10,LR}
MOV             R8, R0
MOV             R7, R1
MOV             R6, R2
BL              sub_41A6C
CMP             R0, #0
BNE             loc_41AF8

loc_41AF0
LDR             R0, =aNonNumericArgu ; "non-numeric argument"

loc_41AF4
BL              sub_16DBC

loc_41AF8
MOV             R0, R7
BL              sub_41A6C
CMP             R0, #0
BEQ             loc_41AF0
CMP             R6, #0x2B ; '+'
LDRD            R0, R1, [R8,#8]
LDRD            R8, R9, [R7,#8]
BNE             loc_41B2C
ADDS            R4, R0, R8
ADC             R5, R1, R9

loc_41B20
MOV             R0, R4
MOV             R1, R5
POP             {R4-R10,PC}

loc_41B2C
CMP             R6, #0x2D ; '-'
BNE             loc_41B40
SUBS            R4, R0, R8
SBC             R5, R1, R9
B               loc_41B20

loc_41B40
CMP             R6, #0x2A ; '*'
MULEQ           R3, R0, R9
UMULLEQ         R4, R5, R0, R8
MLAEQ           R1, R8, R1, R3
ADDEQ           R5, R1, R5
BEQ             loc_41B20
ORRS            R3, R8, R9
LDREQ           R0, =aDivisionByZero_0 ; "division by zero"
BEQ             loc_41AF4
CMP             R6, #0x2F ; '/'
MOV             R2, R8
MOV             R3, R9
BNE             loc_41B84
BLX             sub_62BA4
MOV             R4, R0
MOV             R5, R1
B               loc_41B20

loc_41B84
BLX             sub_62BA4
MOV             R4, R2
MOV             R5, R3
B               loc_41B20
; End of function sub_41AD4

off_41B94 DCD aNonNumericArgu ; "non-numeric argument"
off_41B98 DCD aDivisionByZero_0 ; "division by zero"



; void __fastcall sub_41B9C(void **)
sub_41B9C
LDR             R3, [R0]
PUSH            {R4,LR}
MOV             R4, R0
CMP             R3, #1
BNE             loc_41BB8
LDR             R0, [R0,#8] ; ptr
BL              free

loc_41BB8
MOV             R0, R4
POP             {R4,LR}
B               free
; End of function sub_41B9C




; const char *__fastcall sub_41BC4(const char *)
sub_41BC4
LDR             R3, =buf
PUSH            {R4,LR}
MOV             R4, R0
LDR             R3, [R3]
LDR             R0, [R3] ; s1
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R1, R4  ; s2
BL              strcmp
CMP             R0, #0
LDRBEQ          R0, [R4]
LDRBEQ          R3, [R4,#1]
ADDEQ           R0, R0, R3
MOVNE           R0, #0
POP             {R4,PC}
; End of function sub_41BC4

off_41C00 DCD buf



; _QWORD *__fastcall sub_41C04(int, int)
sub_41C04

eflags= -0x3C
pmatch= -0x34
var_2C= -0x2C
var_28= -0x28
s= -0x24
var_C= -0xC

PUSH            {R4-R7,LR}
MOV             R5, R1
SUB             SP, SP, #0x3C
MOV             R4, R0
BL              sub_41A08
MOV             R0, R5
BL              sub_41A08
LDR             R1, [R5,#8]
LDRB            R3, [R1]
CMP             R3, #0x5E ; '^'
BNE             loc_41C38
LDR             R0, =aWarningSUsingA ; "warning: '%s': using '^' as the first c"...
BL              sub_16DDC

loc_41C38               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x3C+s ; s
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x3C+pmatch ; s
BL              memset
MOV             R2, #0
LDR             R1, [R5,#8]
ADD             R0, SP, #0x3C+s
BL              sub_625E4
MOV             R3, #0
MOV             R2, #2  ; nmatch
STR             R3, [SP,#0x3C+eflags] ; eflags
ADD             R0, SP, #0x3C+s ; preg
ADD             R3, SP, #0x3C+pmatch ; pmatch
LDR             R1, [R4,#8] ; string
BL              regexec
CMP             R0, #1
LDR             R3, [SP,#0x3C+var_C]
BEQ             loc_41D00
LDR             R2, [SP,#0x3C+pmatch]
CMP             R2, #0
BNE             loc_41D00
CMP             R3, #0
BEQ             loc_41CD4
LDR             R3, [SP,#0x3C+var_2C]
CMP             R3, #0
BLT             loc_41CD4
LDR             R3, [SP,#0x3C+var_28]
LDR             R1, [R4,#8]
STRB            R2, [R1,R3]
LDR             R3, [SP,#0x3C+var_2C]
LDR             R0, [R4,#8]
ADD             R0, R0, R3

loc_41CC8
BL              sub_41A3C
MOV             R4, R0
B               loc_41CEC

loc_41CD4
LDR             R6, [SP,#0x3C+pmatch.rm_eo]
MOV             R0, #0x10
BL              sub_174DC
MOV             R4, R0
MOV             R7, R6,ASR#31
STRD            R6, R7, [R0,#8]

loc_41CEC               ; preg
ADD             R0, SP, #0x3C+s
BL              regfree
MOV             R0, R4
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R7,PC}

loc_41D00
CMP             R3, #0
LDRNE           R0, =(asc_6B39D+1) ; ""
BNE             loc_41CC8
MOV             R0, #0x10
BL              sub_174DC
MOV             R2, #0
MOV             R3, #0
MOV             R4, R0
STRD            R2, R3, [R0,#8]
B               loc_41CEC
; End of function sub_41C04

off_41D28 DCD aWarningSUsingA ; "warning: '%s': using '^' as the first c"...
off_41D2C DCD asc_6B39D+1 ; ""



; void **sub_41D30()
sub_41D30
PUSH            {R4-R8,LR}
LDR             R7, =(aTheseFeaturesA+0x5C) ; ":"
LDR             R5, =buf
BL              sub_421E4
MOV             R4, R0

loc_41D44
MOV             R0, R7
BL              sub_41BC4
CMP             R0, #0
BNE             loc_41D5C
MOV             R0, R4
POP             {R4-R8,PC}

loc_41D5C
LDR             R3, [R5]
ADD             R3, R3, #4
STR             R3, [R5]
BL              sub_421E4
MOV             R1, R0
MOV             R6, R0
MOV             R0, R4
BL              sub_41C04
MOV             R8, R0
MOV             R0, R4
BL              sub_41B9C
MOV             R0, R6
MOV             R4, R8
BL              sub_41B9C
B               loc_41D44
; End of function sub_41D30

off_41D98 DCD aTheseFeaturesA+0x5C ; ":"
off_41D9C DCD buf



; void **sub_41DA0()
sub_41DA0
PUSH            {R3-R11,LR}
LDR             R8, =(asc_69C62+1) ; "*"
LDR             R9, =(asc_69510+3) ; "/"
LDR             R10, =(aCSSDDD+0x11) ; "%"
BL              sub_41D30
MOV             R4, R0

loc_41DB8
MOV             R0, R8
BL              sub_41BC4
SUBS            R5, R0, #0
BNE             loc_41DE8
MOV             R0, R9
BL              sub_41BC4
SUBS            R5, R0, #0
BNE             loc_41DE8
MOV             R0, R10
BL              sub_41BC4
SUBS            R5, R0, #0
BEQ             loc_41E3C

loc_41DE8
LDR             R2, =buf
LDR             R3, [R2]
ADD             R3, R3, #4
STR             R3, [R2]
BL              sub_41D30
MOV             R2, R5
MOV             R11, R0
MOV             R1, R0
MOV             R0, R4
BL              sub_41AD4
MOV             R6, R0
MOV             R0, R4
MOV             R7, R1
BL              sub_41B9C
MOV             R0, R11
BL              sub_41B9C
MOV             R0, #0x10
BL              sub_174DC
MOV             R4, R0
STRD            R6, R7, [R0,#8]
B               loc_41DB8

loc_41E3C
MOV             R0, R4
POP             {R3-R11,PC}
; End of function sub_41DA0

off_41E44 DCD asc_69C62+1 ; "*"
off_41E48 DCD asc_69510+3 ; "/"
off_41E4C DCD aCSSDDD+0x11 ; "%"
off_41E50 DCD buf



; void **sub_41E54()
sub_41E54
PUSH            {R4-R10,LR}
LDR             R8, =(aOnlyOneAllowed+0x20) ; "+"
LDR             R9, =(asc_6AE7B+3) ; "-"
LDR             R5, =buf
BL              sub_41DA0
MOV             R4, R0

loc_41E6C
MOV             R0, R8
BL              sub_41BC4
SUBS            R6, R0, #0
BNE             loc_41E8C
MOV             R0, R9
BL              sub_41BC4
SUBS            R6, R0, #0
BEQ             loc_41EDC

loc_41E8C
LDR             R3, [R5]
ADD             R3, R3, #4
STR             R3, [R5]
BL              sub_41DA0
MOV             R2, R6
MOV             R10, R0
MOV             R1, R0
MOV             R0, R4
BL              sub_41AD4
MOV             R6, R0
MOV             R0, R4
MOV             R7, R1
BL              sub_41B9C
MOV             R0, R10
BL              sub_41B9C
MOV             R0, #0x10
BL              sub_174DC
MOV             R4, R0
STRD            R6, R7, [R0,#8]
B               loc_41E6C

loc_41EDC
MOV             R0, R4
POP             {R4-R10,PC}
; End of function sub_41E54

off_41EE4 DCD aOnlyOneAllowed+0x20 ; "+"
off_41EE8 DCD asc_6AE7B+3 ; "-"
off_41EEC DCD buf



; _DWORD *sub_41EF0()
sub_41EF0
PUSH            {R4-R10,LR}
LDR             R6, =(aCdy+4) ; "<"
LDR             R7, =asc_699CB ; "<="
LDR             R8, =(asc_699CE+1) ; "="
BL              sub_41E54
MOV             R4, R0

loc_41F08
MOV             R0, R6
BL              sub_41BC4
SUBS            R9, R0, #0
BNE             loc_41F78
MOV             R0, R7
BL              sub_41BC4
SUBS            R9, R0, #0
BNE             loc_41F78
MOV             R0, R8
BL              sub_41BC4
SUBS            R9, R0, #0
BNE             loc_41F78
LDR             R0, =(asc_6C3A3+2) ; "=="
BL              sub_41BC4
SUBS            R9, R0, #0
BNE             loc_41F78
LDR             R0, =asc_699CE ; "!="
BL              sub_41BC4
SUBS            R9, R0, #0
BNE             loc_41F78
LDR             R0, =asc_699D1 ; ">="
BL              sub_41BC4
SUBS            R9, R0, #0
BNE             loc_41F78
LDR             R0, =(asc_6BC3F+0x17) ; ">"
BL              sub_41BC4
SUBS            R9, R0, #0
BEQ             loc_420A4

loc_41F78
LDR             R2, =buf
LDR             R3, [R2]
ADD             R3, R3, #4
STR             R3, [R2]
BL              sub_41E54
MOV             R5, R0
MOV             R0, R4
BL              sub_41A6C
MOV             R0, R5
BL              sub_41A6C
LDR             R12, [R4]
LDRD            R0, R1, [R4,#8]
LDRD            R2, R3, [R5,#8]
CMP             R12, #1
BEQ             loc_41FC0
LDR             R12, [R5]
CMP             R12, #1
BNE             loc_41FE8

loc_41FC0
MOV             R0, R4
BL              sub_41A08
MOV             R0, R5
BL              sub_41A08
LDR             R1, [R5,#8] ; s2
LDR             R0, [R4,#8] ; s1
BL              strcmp
MOV             R1, R0,ASR#31
MOV             R2, #0
MOV             R3, #0

loc_41FE8
CMP             R9, #0x3C ; '<'
BNE             loc_42004
CMP             R0, R2
SBCS            R3, R1, R3

loc_41FF8
MOVLT           R9, #1
MOVGE           R9, #0
B               loc_4203C

loc_42004
CMP             R9, #0x79 ; 'y'
BNE             loc_42020
CMP             R2, R0
SBCS            R3, R3, R1

loc_42014
MOVGE           R9, #1
MOVLT           R9, #0
B               loc_4203C

loc_42020
CMP             R9, #0x7A ; 'z'
CMPNE           R9, #0x3D ; '='
BNE             loc_42068
CMP             R1, R3
CMPEQ           R0, R2
MOVEQ           R9, #1
MOVNE           R9, #0

loc_4203C
MOV             R0, R4
BL              sub_41B9C
MOV             R0, R5
BL              sub_41B9C
MOV             R0, #0x10
BL              sub_174DC
MOV             R3, R9,ASR#31
MOV             R2, R9
MOV             R4, R0
STRD            R2, R3, [R0,#8]
B               loc_41F08

loc_42068
CMP             R9, #0x5E ; '^'
BNE             loc_42084
CMP             R1, R3
CMPEQ           R0, R2
MOVNE           R9, #1
MOVEQ           R9, #0
B               loc_4203C

loc_42084
CMP             R9, #0x3E ; '>'
BNE             loc_42098
CMP             R2, R0
SBCS            R3, R3, R1
B               loc_41FF8

loc_42098
CMP             R0, R2
SBCS            R3, R1, R3
B               loc_42014

loc_420A4
MOV             R0, R4
POP             {R4-R10,PC}
; End of function sub_41EF0

off_420AC DCD aCdy+4    ; "<"
off_420B0 DCD asc_699CB ; "<="
off_420B4 DCD asc_699CE+1 ; "="
off_420B8 DCD asc_6C3A3+2 ; "=="
off_420BC DCD asc_699CE ; "!="
off_420C0 DCD asc_699D1 ; ">="
off_420C4 DCD asc_6BC3F+0x17 ; ">"
off_420C8 DCD buf



; void **sub_420CC()
sub_420CC
PUSH            {R4-R10,LR}
MOV             R6, #0
LDR             R9, =(asc_68588+1) ; "&"
MOV             R7, #0
LDR             R8, =buf
BL              sub_41EF0
MOV             R4, R0

loc_420E8
MOV             R0, R9
BL              sub_41BC4
CMP             R0, #0
BNE             loc_42100
MOV             R0, R4
POP             {R4-R10,PC}

loc_42100
LDR             R3, [R8]
ADD             R3, R3, #4
STR             R3, [R8]
BL              sub_41EF0
MOV             R5, R0
MOV             R0, R4
BL              sub_419B0
CMP             R0, #0
BNE             loc_42134
MOV             R0, R5
BL              sub_419B0
CMP             R0, #0
BEQ             loc_42158

loc_42134
MOV             R0, R4
BL              sub_41B9C
MOV             R0, R5
BL              sub_41B9C
MOV             R0, #0x10
BL              sub_174DC
MOV             R4, R0
STRD            R6, R7, [R0,#8]
B               loc_420E8

loc_42158
MOV             R0, R5
BL              sub_41B9C
B               loc_420E8
; End of function sub_420CC

off_42164 DCD asc_68588+1 ; "&"
off_42168 DCD buf



; void **sub_4216C()
sub_4216C
PUSH            {R4-R8,LR}
LDR             R7, =(asc_67EDB+1) ; "|"
LDR             R6, =buf
BL              sub_420CC
MOV             R4, R0

loc_42180
MOV             R0, R7
BL              sub_41BC4
CMP             R0, #0
BNE             loc_42198
MOV             R0, R4
POP             {R4-R8,PC}

loc_42198
LDR             R3, [R6]
ADD             R3, R3, #4
STR             R3, [R6]
BL              sub_420CC
MOV             R5, R0
MOV             R0, R4
BL              sub_419B0
CMP             R0, #0
BEQ             loc_421CC
MOV             R0, R4
BL              sub_41B9C

loc_421C4
MOV             R4, R5
B               loc_42180

loc_421CC
MOV             R0, R5
MOV             R5, R4
BL              sub_41B9C
B               loc_421C4
; End of function sub_4216C

off_421DC DCD asc_67EDB+1 ; "|"
off_421E0 DCD buf



; _DWORD *sub_421E4()
sub_421E4
PUSH            {R4-R10,LR}
LDR             R5, =buf
LDR             R3, [R5]
MOV             R7, R5
LDR             R1, [R3] ; s2
CMP             R1, #0
BNE             loc_42254

loc_42200
LDR             R4, [R7]
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_4224C
LDR             R0, =(asc_6549B+1) ; "("
ADD             R5, R4, #4
BL              sub_41BC4
CMP             R0, #0
BEQ             loc_42290
STR             R5, [R7]
BL              sub_4216C
MOV             R4, R0
LDR             R0, =(aDup+6) ; ")"
BL              sub_41BC4
CMP             R0, #0
LDRNE           R3, [R7]
ADDNE           R3, R3, #4
STRNE           R3, [R7]
BNE             loc_422F0

loc_4224C
LDR             R0, =(aArithmeticSynt+0xB) ; "syntax error"
BL              sub_16DBC

loc_42254
LDR             R0, =aQuote ; "quote"
BL              sub_16880
ADDS            R6, R0, #1
BEQ             loc_42200
LDR             R3, [R5]
CMP             R6, #1
ADD             R2, R3, #4
STR             R2, [R5]
BNE             loc_422B0
LDR             R0, [R3,#4]
CMP             R0, #0
BEQ             loc_4224C
ADD             R3, R3, #8
STR             R3, [R5]
B               loc_422A8

loc_42290
LDR             R0, =(aDup+6) ; ")"
BL              sub_41BC4
CMP             R0, #0
STREQ           R5, [R7]
LDREQ           R0, [R4]
BNE             loc_4224C

loc_422A8
POP             {R4-R10,LR}
B               sub_41A3C

loc_422B0
CMP             R6, #2
BNE             loc_422F8
BL              sub_421E4
MOV             R5, R0
BL              sub_41A08
LDR             R0, [R5,#8] ; s
BL              strlen
MOV             R6, R0
MOV             R0, #0x10
BL              sub_174DC
MOV             R3, #0
MOV             R4, R0
STR             R6, [R0,#8]
STR             R3, [R0,#0xC]
MOV             R0, R5

loc_422EC
BL              sub_41B9C

loc_422F0
MOV             R0, R4
POP             {R4-R10,PC}

loc_422F8
BL              sub_421E4
CMP             R6, #3
MOV             R5, R0
BNE             loc_42330
BL              sub_421E4
MOV             R1, R0
MOV             R6, R0
MOV             R0, R5
BL              sub_41C04
MOV             R4, R0
MOV             R0, R5

loc_42324
BL              sub_41B9C
MOV             R0, R6
B               loc_422EC

loc_42330
CMP             R6, #4
BNE             loc_423B0
BL              sub_421E4
MOV             R10, R0
MOV             R0, R5
BL              sub_41A08
MOV             R0, R10
MOV             R7, #0
BL              sub_41A08
LDR             R1, [R10,#8] ; reject
LDR             R0, [R5,#8] ; s
BL              strcspn
ADD             R0, R0, #1
MOV             R6, R0
MOV             R0, #0x10
BL              sub_174DC
STRD            R6, R7, [R0,#8]
MOV             R4, R0
LDR             R0, [R5,#8] ; s
BL              strlen
MOV             R1, #0
ADDS            R8, R0, #1
ADC             R9, R1, #0
CMP             R7, R9
CMPEQ           R6, R8
MOVEQ           R2, #0
MOVEQ           R3, #0
STRDEQ          R2, R3, [R4,#8]
MOV             R0, R5
BL              sub_41B9C
MOV             R0, R10
B               loc_422EC

loc_423B0
CMP             R6, #5
BNE             loc_422F0
BL              sub_421E4
MOV             R7, R0
BL              sub_421E4
MOV             R6, R0
MOV             R0, R5
BL              sub_41A08
MOV             R0, R7
BL              sub_41A6C
CMP             R0, #0
BNE             loc_423FC

loc_423E0
LDR             R0, =(asc_6B39D+1) ; ""
BL              sub_41A3C
MOV             R4, R0

loc_423EC
MOV             R0, R5
BL              sub_41B9C
MOV             R0, R7
B               loc_42324

loc_423FC
MOV             R0, R6
BL              sub_41A6C
CMP             R0, #0
BEQ             loc_423E0
LDRD            R8, R9, [R7,#8]
LDR             R0, [R5,#8] ; s
BL              strlen
MOV             R1, #0
CMP             R0, R8
SBCS            R3, R1, R9
MOVLT           R3, #1
MOVGE           R3, #0
CMP             R8, #1
SBCS            R2, R9, #0
ORRLT           R3, R3, #1
CMP             R3, #0
BNE             loc_423E0
LDRD            R2, R3, [R6,#8]
CMP             R2, #1
SBCS            R3, R3, #0
BLT             loc_423E0
MOV             R0, #0x10
BL              sub_1748C
MOV             R3, #1
MOV             R4, R0
STR             R3, [R0]
LDR             R3, [R7,#8]
LDR             R0, [R5,#8]
LDR             R1, [R6,#8]
SUB             R3, R3, #1
ADD             R0, R0, R3
BL              sub_1751C
STR             R0, [R4,#8]
B               loc_423EC
; End of function sub_421E4

off_42484 DCD buf
off_42488 DCD asc_6549B+1 ; "("
off_4248C DCD aDup+6    ; ")"
off_42490 DCD aArithmeticSynt+0xB ; "syntax error"
off_42494 DCD aQuote    ; "quote"
off_42498 DCD asc_6B39D+1 ; ""


; Attributes: noreturn

; void __fastcall __noreturn sub_4249C(int, int)
sub_4249C
LDR             R3, =byte_7D5F8
MOV             R2, #2
PUSH            {R4-R6,LR}
LDR             R5, =buf
STRB            R2, [R3]
ADD             R3, R1, #4
STR             R3, [R5]
LDR             R3, [R1,#4]
CMP             R3, #0
LDREQ           R0, =aTooFewArgument_0 ; "too few arguments"
BEQ             loc_424E4
BL              sub_4216C
LDR             R3, [R5]
MOV             R4, R0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_424E8
LDR             R0, =(aArithmeticSynt+0xB) ; "syntax error"

loc_424E4
BL              sub_16DBC

loc_424E8
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_4250C
LDRD            R2, R3, [R0,#8]
LDR             R0, =aLld_0 ; "%lld\n"
BL              printf

loc_42500
MOV             R0, R4
BL              sub_419B0
BL              sub_588D8

loc_4250C               ; s
LDR             R0, [R0,#8]
BL              puts
B               loc_42500
; End of function sub_4249C

off_42518 DCD byte_7D5F8
off_4251C DCD buf
off_42520 DCD aTooFewArgument_0 ; "too few arguments"
off_42524 DCD aArithmeticSynt+0xB ; "syntax error"
off_42528 DCD aLld_0    ; "%lld\n"



; int __fastcall sub_4252C(unsigned __int64)
sub_4252C
PUSH            {R4-R10,LR}
SUBS            R5, R1, #0
CMPEQ           R0, #3
MOV             R4, R0
MOVHI           R8, #0
LDRHI           R9, =a2 ; " 2"
BHI             loc_42580

loc_42548
CMP             R5, #0
CMPEQ           R4, #1
BLS             loc_42564
MOV             R2, R4
MOV             R3, R5
LDR             R0, =aLlu ; " %llu"
BL              printf

loc_42564
MOV             R0, #0xA
POP             {R4-R10,LR}
B               j_putchar_unlocked

loc_42570
MOVS            R5, R5,LSR#1
MOV             R4, R4,RRX
MOV             R0, R9  ; format
BL              printf

loc_42580
AND             R6, R4, #1
MOV             R7, R8
ORRS            R3, R6, R7
BEQ             loc_42570
MOV             R0, R4
MOV             R1, R5
LDR             R10, =(aUnknownUidU+0xB) ; " %u"
MOVW            R8, #0x391
BL              sub_5A898
SUB             R0, R0, #1
MOV             R7, #3
ORR             R6, R0, #1
MOVW            R9, #0x844

loc_425B4
MOV             R2, R7
MOV             R3, #0
MOV             R0, R4
MOV             R1, R5
BLX             sub_62C44
ORRS            R3, R2, R3
BEQ             loc_42608

loc_425D0
CMP             R7, R6
BCS             loc_42548
ADD             R3, R8, #0x89
ADD             R7, R7, #2
TST             R3, R9
BEQ             loc_42634
TST             R3, #4
ADDNE           R3, R8, #0x86
TST             R3, #0x40
SUBNE           R3, R3, #0x28 ; '('
TST             R3, #0x800
SUBNE           R3, R3, #0x380
MOV             R8, R3
B               loc_425D0

loc_42608
MOV             R4, R0
MOV             R5, R1
MOV             R0, R10 ; format
MOV             R1, R7
BL              printf
MOV             R0, R4
MOV             R1, R5
BL              sub_5A898
SUB             R0, R0, #1
MOV             R3, R8
ORR             R6, R0, #1

loc_42634
MOV             R8, R3
B               loc_425B4
; End of function sub_4252C

off_4263C DCD a2        ; " 2"
off_42640 DCD aLlu      ; " %llu"
off_42644 DCD aUnknownUidU+0xB ; " %u"



; int __fastcall sub_42648(const char *)
sub_42648
PUSH            {R4-R6,LR}
MOV             R2, #0xA
LDRB            R3, [R0]
MOV             R1, #0
CMP             R3, #0x2B ; '+'
ADDEQ           R0, R0, #1
BL              sub_188A4
LDR             R3, =dword_7DB94
MOV             R4, R0
MOV             R5, R1
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_42684
BL              sub_162F0

loc_42684
MOV             R2, R0
MOV             R3, R1
LDR             R0, =aLlu_0 ; "%llu:"
BL              printf
MOV             R0, R4
MOV             R1, R5
POP             {R4-R6,LR}
B               sub_4252C
; End of function sub_42648

off_426A4 DCD dword_7DB94
off_426A8 DCD aLlu_0    ; "%llu:"



; int __fastcall sub_426AC(int, int, int)
sub_426AC
LDR             R3, [R1,#4]
PUSH            {R4-R8,LR}
CMP             R3, #0
BNE             loc_42720
LDR             R8, =stdin
MOV             R5, R3

loc_426C4
LDR             R0, [R8]
BL              sub_58D24
SUBS            R6, R0, #0
BEQ             loc_4273C
MOV             R4, R6

loc_426D8
MOV             R0, R4
BL              sub_60E74
LDRB            R3, [R0]
MOV             R7, R0
CMP             R3, #0
BEQ             loc_42714
BL              sub_60E94
LDRB            R3, [R0]
MOV             R4, R0
CMP             R3, #0
STRBNE          R5, [R0]
ADDNE           R4, R0, #1
MOV             R0, R7
BL              sub_42648
B               loc_426D8

loc_42714               ; ptr
MOV             R0, R6
BL              free
B               loc_426C4

loc_42720
ADD             R4, R1, #4

loc_42724
LDR             R0, [R4]
BL              sub_60E74
BL              sub_42648
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_42724

loc_4273C
MOV             R0, #0
POP             {R4-R8,PC}
; End of function sub_426AC

off_42744 DCD stdin



; int sub_42748()
sub_42748
MOV             R0, #1
BX              LR
; End of function sub_42748




; unsigned int __fastcall sub_42750(int, int)
sub_42750
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
ANDS            R3, R3, #1
BEQ             loc_42768
ADD             R0, R0, #1
BX              LR

loc_42768
CMP             R1, #9
BNE             loc_4277C
BIC             R0, R0, #7
ADD             R0, R0, #8
BX              LR

loc_4277C
CMP             R1, #8
BNE             loc_42794
SUBS            R0, R0, #1
MOVPL           R3, R0

loc_4278C
MOV             R0, R3
BX              LR

loc_42794
CMP             R1, #0xD
ADDNE           R3, R0, #1
B               loc_4278C
; End of function sub_42750

off_427A0 DCD dword_7DBC0



; size_t __fastcall sub_427A4(const void *, size_t)
sub_427A4
LDR             R3, =stdout
MOV             R2, R1
MOV             R1, #1
LDR             R3, [R3]
B               fwrite
; End of function sub_427A4

off_427B8 DCD stdout


; Attributes: noreturn

; void __fastcall __noreturn sub_427BC(int, char **)
sub_427BC

var_14= -0x14
var_10= -0x10
var_8= -8

PUSH            {R4-R11,LR}
MOV             R4, R1
LDR             R6, =aWS ; "-w%s"
MOV             R5, R1
SUB             SP, SP, #0x14
LDR             R3, =a80 ; "80"
STR             R3, [SP,#0x14+var_8]

loc_427D8
LDR             R3, [R5,#4]!
CMP             R3, #0
BNE             loc_428A0

loc_427E4
ADD             R2, SP, #0x14+var_8
LDR             R1, =aBsw ; "bsw:"
MOV             R0, R4
MOV             R8, #0
BL              sub_593CC
MOVW            R2, #0x2710 ; int
MOV             R1, #1  ; int
LDR             R0, [SP,#0x14+var_8] ; int
MOV             R5, R8
BL              sub_6206C
LDR             R3, =optind
STR             R0, [SP,#0x14+var_14]
LDR             R3, [R3]
ADD             R7, R4, R3,LSL#2
LDR             R3, [R4,R3,LSL#2]
CMP             R3, #0
LDREQ           R3, =(asc_6AE7B+3) ; "-"
STREQ           R3, [R7,#-4]
SUBEQ           R7, R7, #4

loc_42830
LDR             R0, [R7]
BL              sub_61CD8
SUBS            R10, R0, #0
BEQ             loc_42888

loc_42840
MOV             R4, #0
MOV             R6, R4

loc_42848               ; stream
MOV             R0, R10
BL              getc_unlocked
CMN             R0, #1
MOV             R9, R0
BNE             loc_428E4
CMP             R4, #0
BEQ             loc_42870
MOV             R1, R4
MOV             R0, R5
BL              sub_427A4

loc_42870
MOV             R0, R10
BL              sub_5888C
CMP             R0, #0
BEQ             loc_4288C
LDR             R0, [R7]
BL              sub_16B80

loc_42888
MOV             R8, #1

loc_4288C
LDR             R3, [R7,#4]!
CMP             R3, #0
BNE             loc_42830
MOV             R0, R8
BL              sub_588D8

loc_428A0
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BNE             loc_427D8
LDRB            R2, [R3,#1]
ADD             R1, R3, #1
CMP             R2, #0x2D ; '-'
BNE             loc_428C8
LDRB            R3, [R3,#2]
CMP             R3, #0
BEQ             loc_427E4

loc_428C8
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #9
BHI             loc_427D8
MOV             R0, R6
BL              sub_177E4
STR             R0, [R5]
B               loc_427D8

loc_428E4
UBFX            R3, R4, #0, #0xC
CMP             R3, #0
BNE             loc_42900
MOV             R0, R5
ADD             R1, R4, #0x1000
BL              sub_174B4
MOV             R5, R0

loc_42900
UXTB            R11, R9

loc_42904
CMP             R9, #0xA
STRB            R11, [R5,R4]
ADD             R2, R5, R4
BNE             loc_42924
ADD             R1, R4, #1
MOV             R0, R5
BL              sub_427A4
B               loc_42840

loc_42924
MOV             R0, R6
MOV             R1, R11
BL              sub_42750
LDR             R3, [SP,#0x14+var_14]
MOV             R6, R0
CMP             R4, #0
CMPNE           R0, R3
ADDLS           R4, R4, #1
BLS             loc_42848
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #2
SUBNE           R6, R4, #1
BNE             loc_42990

loc_4295C
MOV             R3, #0xA
ADD             R1, R4, #1
STRB            R3, [R2]
MOV             R0, R5
MOV             R4, #0
BL              sub_427A4
MOV             R6, R4
B               loc_42904

loc_4297C
LDRB            R3, [R5,R6]
CMP             R3, #9
CMPNE           R3, #0x20 ; ' '
BEQ             loc_4299C
SUB             R6, R6, #1

loc_42990
CMP             R6, #0
BGE             loc_4297C
B               loc_4295C

loc_4299C
ADD             R6, R6, #1
MOV             R0, R5
MOV             R1, R6
SUB             R4, R4, R6
BL              sub_427A4
MOV             R0, #0xA ; c
BL              putchar_unlocked
MOV             R2, R4  ; n
ADD             R1, R5, R6 ; src
MOV             R0, R5  ; dest
MOV             R6, #0
BL              memmove
MOV             R2, R5
ADD             R3, R4, R5

loc_429D4
CMP             R2, R3
BEQ             loc_42904
MOV             R0, R6
LDRB            R1, [R2],#1
STR             R3, [SP,#0x14+var_10]
BL              sub_42750
LDR             R3, [SP,#0x14+var_10]
MOV             R6, R0
B               loc_429D4
; End of function sub_427BC

off_429F8 DCD aWS       ; "-w%s"
off_429FC DCD a80       ; "80"
off_42A00 DCD aBsw      ; "bsw:"
off_42A04 DCD optind
off_42A08 DCD asc_6AE7B+3 ; "-"
off_42A0C DCD dword_7DBC0


; Attributes: noreturn

; void __fastcall __noreturn sub_42A10(int, int)
sub_42A10

var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
ptr= -8

PUSH            {R4-R11,LR}
MOV             R5, R0
LDR             R4, [R1,#4]
SUB             SP, SP, #0x24
MOV             R8, R1
CMP             R4, #0
BEQ             loc_42C04
LDRB            R3, [R4]
CMP             R3, #0x2D ; '-'
BNE             loc_42C00
LDRB            R3, [R4,#1]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
BHI             loc_42C00
ADD             R8, R1, #4
MOV             R6, #1
SUB             R5, R0, #1
ADD             R0, R4, #1
MOV             R4, #0
STR             R4, [SP,#0x24+var_20]

loc_42A60
LDRB            R3, [R0]
LDR             R1, =unk_64174 ; int
CMP             R3, #0x2D ; '-'
ADDEQ           R0, R0, #1 ; int
MOVEQ           R4, #1
BL              sub_62090
MOV             R7, R0

loc_42A7C
LDR             R9, =shortopts ; "n:c:qv"

loc_42A80               ; shortopts
MOV             R2, R9
MOV             R1, R8  ; argv
MOV             R0, R5  ; argc
BL              getopt
CMP             R0, #0
BGT             loc_42BBC
LDR             R3, =optind
LDR             R2, [R3]
SUB             R3, R5, R2
ADD             R5, R8, R2,LSL#2
LDR             R2, [R8,R2,LSL#2]
CMP             R2, #0
LDREQ           R2, =(asc_6AE7B+3) ; "-"
STREQ           R2, [R5,#-4]
SUBEQ           R5, R5, #4
CMP             R6, R3
MOVGE           R6, #0
CMN             R7, #0xE0000002
MOVLS           R3, #0
MOVHI           R3, #1
TST             R4, R3
BEQ             loc_42AE4
MOV             R1, R7
LDR             R0, =aCountIsTooBigL ; "count is too big: %lu"
BL              sub_16DDC

loc_42AE4
ADD             R3, R7, #1
LDR             R9, =(aS_1+1) ; "==> %s <==\n"
STR             R3, [SP,#0x24+var_1C]
MOV             R3, R3,LSL#2
STR             R3, [SP,#0x24+var_14]
SUB             R3, R3, #4
STR             R3, [SP,#0x24+var_10]
MOV             R3, #0
STR             R3, [SP,#0x24+var_18]

loc_42B08
LDR             R0, [R5]
BL              sub_61CD8
SUBS            R8, R0, #0
BEQ             loc_42C40
LDR             R3, =stdin
LDR             R3, [R3]
CMP             R3, R8
LDREQ           R3, =aStandardInput ; "standard input"
STREQ           R3, [R5]
CMP             R6, #0
BEQ             loc_42B40
LDR             R1, [R5]
MOV             R0, R9  ; format
BL              printf

loc_42B40
CMP             R4, #0
BEQ             loc_42D5C
LDR             R3, [SP,#0x24+var_20]
CMP             R3, #0
BEQ             loc_42C60
LDR             R0, [SP,#0x24+var_1C]
MOV             R11, #0
BL              sub_1748C
MOV             R10, R0
SUB             R9, R0, #1

loc_42B68               ; stream
MOV             R0, R8
BL              getc_unlocked
CMN             R0, #1
BEQ             loc_42C1C
LDR             R3, [SP,#0x24+var_1C]
ADD             R11, R11, #1
STRB            R0, [R9,#1]!
CMP             R11, R3
BNE             loc_42B68
MOV             R9, #0

loc_42B90               ; c
LDRB            R0, [R10,R9]
BL              putchar_unlocked
MOV             R0, R8  ; stream
BL              getc_unlocked
CMN             R0, #1
BEQ             loc_42C1C
STRB            R0, [R10,R9]
ADD             R9, R9, #1
CMP             R11, R9
MOVEQ           R9, #0
B               loc_42B90

loc_42BBC
CMP             R0, #0x6E ; 'n'
BEQ             loc_42BF4
BGT             loc_42BD4
CMP             R0, #0x63 ; 'c'
BEQ             loc_42BEC

loc_42BD0
BL              sub_162F0

loc_42BD4
CMP             R0, #0x71 ; 'q'
BEQ             loc_42C14
CMP             R0, #0x76 ; 'v'
BNE             loc_42BD0
MOV             R6, #0xFFFFFFFF
B               loc_42A80

loc_42BEC
MOV             R3, #1
STR             R3, [SP,#0x24+var_20]

loc_42BF4
LDR             R3, =optarg
LDR             R0, [R3]
B               loc_42A60

loc_42C00
MOV             R4, #0

loc_42C04
STR             R4, [SP,#0x24+var_20]
MOV             R6, #1
MOV             R7, #0xA
B               loc_42A7C

loc_42C14
MOV             R6, #0x7FFFFFFF
B               loc_42A80

loc_42C1C               ; ptr
MOV             R0, R10

loc_42C20
BL              free

loc_42C24
BL              sub_177C0
MOV             R0, R8
BL              sub_5888C
CMP             R0, #0
BEQ             loc_42C48
LDR             R0, [R5]
BL              sub_16B80

loc_42C40
MOV             R3, #1
STR             R3, [SP,#0x24+var_18]

loc_42C48
LDR             R3, [R5,#4]!
LDR             R9, =aS_1 ; "\n==> %s <==\n"
CMP             R3, #0
BNE             loc_42B08
LDR             R0, [SP,#0x24+var_18]
BL              sub_588D8

loc_42C60
LDR             R0, [SP,#0x24+var_14]
BL              sub_174DC
LDR             R11, [SP,#0x24+var_20]
SUB             R10, R0, #4
MOV             R9, R0
MOV             R3, R10

loc_42C78
MOV             R0, R8
STR             R3, [SP,#0x24+var_C]
BL              sub_58D10
CMP             R0, #0
LDR             R3, [SP,#0x24+var_C]
BEQ             loc_42D08
LDR             R2, [SP,#0x24+var_1C]
ADD             R11, R11, #1
STR             R0, [R3,#4]!
CMP             R2, R11
BNE             loc_42C78
MOV             R11, #0

loc_42CA8
MOV             R3, R11,LSL#2
LDR             R2, [R9,R11,LSL#2]
STR             R3, [SP,#0x24+var_C]
LDR             R3, =stdout
MOV             R0, R2
STR             R2, [SP,#0x24+ptr]
LDR             R1, [R3]
BL              fputs_unlocked
MOV             R0, R8
BL              sub_58D10
SUBS            R1, R0, #0
LDR             R2, [SP,#0x24+ptr]
BEQ             loc_42D08
MOV             R0, R2  ; ptr
STR             R1, [SP,#0x24+ptr]
BL              free
LDR             R3, [SP,#0x24+var_C]
ADD             R11, R11, #1
LDR             R1, [SP,#0x24+ptr]
STR             R1, [R9,R3]
LDR             R3, [SP,#0x24+var_1C]
CMP             R3, R11
MOVEQ           R11, #0
B               loc_42CA8

loc_42D08
LDR             R3, [SP,#0x24+var_10]
ADD             R11, R9, R3

loc_42D10               ; ptr
LDR             R0, [R10,#4]!
BL              free
CMP             R10, R11
BNE             loc_42D10
MOV             R0, R9
B               loc_42C20

loc_42D28               ; stream
MOV             R0, R8
BL              getc_unlocked
CMN             R0, #1
BEQ             loc_42C24
LDR             R3, [SP,#0x24+var_20]
CMP             R0, #0xA
ORREQ           R3, R3, #1
CMP             R3, #0
SUBNE           R9, R9, #1
BL              putchar_unlocked

loc_42D50
CMP             R9, #0
BNE             loc_42D28
B               loc_42C24

loc_42D5C
MOV             R9, R7
B               loc_42D50
; End of function sub_42A10

; const int off_42D64
off_42D64 DCD unk_64174
off_42D68 DCD shortopts ; "n:c:qv"
off_42D6C DCD optind
off_42D70 DCD asc_6AE7B+3 ; "-"
off_42D74 DCD aCountIsTooBigL ; "count is too big: %lu"
off_42D78 DCD aS_1+1    ; "==> %s <==\n"
off_42D7C DCD stdin
off_42D80 DCD aStandardInput ; "standard input"
off_42D84 DCD optarg
off_42D88 DCD aS_1      ; "\n==> %s <==\n"
off_42D8C DCD stdout



; int __fastcall sub_42D90(int, int)
sub_42D90
LDR             R3, [R1,#4]
PUSH            {R4,LR}
CMP             R3, #0
BEQ             loc_42DA4
BL              sub_162F0

loc_42DA4
BL              gethostid
MOV             R1, R0
LDR             R0, =(aNotARoute08x08+0x17) ; format
BL              printf
POP             {R4,LR}
B               sub_177D8
; End of function sub_42D90

off_42DBC DCD aNotARoute08x08+0x17 ; "%08x\n"



; int __fastcall sub_42DC0(const char *, __gid_t, __gid_t *__attribute__((__org_arrdim(0,0))) list, int *)
sub_42DC0
PUSH            {R4-R6,LR}
SUBS            R6, R0, #0
MOV             R4, R3
BEQ             loc_42DE4
BL              getgrouplist
LDR             R3, [R4]
CMP             R3, #0
MOVLT           R0, #0
POP             {R4-R6,PC}

loc_42DE4               ; list
MOV             R1, R2
LDR             R0, [R3] ; size
MOV             R5, R2
BL              getgroups
CMP             R0, #0
STR             R0, [R4]
POPGE           {R4-R6,PC}
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x16
BNE             loc_42E24
MOV             R1, R5  ; list
MOV             R0, R6  ; size
BL              getgroups
STR             R0, [R4]

loc_42E24
LDR             R0, [R4]
MVN             R0, R0
MOV             R0, R0,LSR#31
RSB             R0, R0, #0
POP             {R4-R6,PC}
; End of function sub_42DC0

off_42E38 DCD dword_7DB94



; int __fastcall sub_42E3C(int, int, const char *)
sub_42E3C
PUSH            {R4-R6,LR}
MOV             R4, R1
SUBS            R1, R2, #0
MOV             R6, R0
BEQ             loc_42E58
LDR             R0, =(aSS_8+3) ; "%s"
BL              printf

loc_42E58
LDR             R2, =dword_7DBC0
CMP             R4, #0
LDR             R3, [R2]
MOV             R5, R2
EOR             R3, R3, #2
UBFX            R3, R3, #1, #1
MOVEQ           R3, #1
CMP             R3, #0
BEQ             loc_42E88
MOV             R1, R6
LDR             R0, =(aUnknownUidU+0xC) ; format
BL              printf

loc_42E88
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_42EB4
ANDS            R0, R0, #2
POPEQ           {R4-R6,PC}
CMP             R4, #0
BNE             loc_42EAC
MOV             R0, #1
POP             {R4-R6,PC}

loc_42EAC
LDR             R0, =(aSS_8+3) ; "%s"
B               loc_42EC0

loc_42EB4
CMP             R4, #0
BEQ             loc_42EC8
LDR             R0, =(aDevSMustMatchL+0x1E) ; format

loc_42EC0
MOV             R1, R4
BL              printf

loc_42EC8
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_42E3C

off_42ED0 DCD aSS_8+3   ; "%s"
off_42ED4 DCD dword_7DBC0
off_42ED8 DCD aUnknownUidU+0xC ; "%u"
off_42EDC DCD aDevSMustMatchL+0x1E ; "(%s)"



; int __fastcall sub_42EE0(__uid_t, const char *)
sub_42EE0
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R0
BL              sub_57AEC
MOV             R2, R5
MOV             R1, R0
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_42E3C
; End of function sub_42EE0




; int __fastcall sub_42F04(__gid_t, const char *)
sub_42F04
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R0
BL              sub_57B00
MOV             R2, R5
MOV             R1, R0
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_42E3C
; End of function sub_42F04




; int __fastcall sub_42F28(int, char **, int)
sub_42F28

var_8= -8
var_4= -4

PUSH            {R0-R2,R4-R11,LR}
MOV             R4, R1
MOV             R0, R4
LDR             R1, =aRnugg ; "^rnugG"
BL              sub_593CC
LDR             R3, =optind
MOV             R8, R0
LDR             R3, [R3]
LDR             R10, [R4,R3,LSL#2]
CMP             R10, #0
BEQ             loc_42FA0
MOV             R0, R10
BL              sub_57A70
LDR             R6, [R0,#8]
CMP             R8, #0
LDR             R5, [R0,#0xC]
MOVNE           R9, R6
MOVNE           R7, R5
BNE             loc_42FC8
LDR             R1, =(aEuid+2) ; "uid="
MOV             R0, R6
BL              sub_42EE0
LDR             R1, =aGid ; " gid="
MOV             R4, R0
MOV             R0, R5
MOV             R7, R5
BL              sub_42F04
MOV             R9, R6
ORR             R4, R4, R0
B               loc_43024

loc_42FA0
BL              getegid
MOV             R7, R0
BL              getgid
MOV             R5, R0
BL              geteuid
MOV             R9, R0
BL              getuid
CMP             R8, #0
MOV             R6, R0
BEQ             loc_42FE4

loc_42FC8
ANDS            R4, R8, #0x10
BNE             loc_4309C
AND             R3, R8, #1
CMP             R3, #0
MOVEQ           R5, R7
MOVEQ           R6, R9
B               loc_4310C

loc_42FE4
LDR             R1, =(aEuid+2) ; "uid="
BL              sub_42EE0
LDR             R1, =aGid ; " gid="
MOV             R4, R0
MOV             R0, R5
BL              sub_42F04
CMP             R9, R6
ORR             R4, R4, R0
BEQ             loc_43018
LDR             R1, =aEuid ; " euid="
MOV             R0, R9
BL              sub_42EE0
ORR             R4, R4, R0

loc_43018
CMP             R7, R5
LDRNE           R1, =aEgid ; " egid="
BNE             loc_430B8

loc_43024
MOV             R0, #0x100
ADD             R11, SP, #0xC+var_4
BL              sub_1748C
MOV             R3, #0x40 ; '@'
MOV             R2, R0  ; list
STR             R3, [R11,#-4]!
MOV             R6, R0
MOV             R3, R11
MOV             R1, R5  ; int
MOV             R0, R10 ; int
BL              sub_42DC0
CMP             R0, #0
BGE             loc_43080
LDR             R1, [SP,#0xC+var_8]
MOV             R0, R6
MOV             R1, R1,LSL#2
BL              sub_174B4
MOV             R3, R11
MOV             R6, R0
MOV             R2, R0  ; list
MOV             R1, R5  ; int
MOV             R0, R10 ; int
BL              sub_42DC0

loc_43080
LDR             R3, [SP,#0xC+var_8]
CMP             R3, #0
BGT             loc_43134
BEQ             loc_43104
MOV             R0, #1
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_4309C
MOV             R1, #0
MOV             R0, R5
BL              sub_42F04
CMP             R7, R5
MOV             R4, R0
BEQ             loc_43024
LDR             R1, =(asc_6582A+9) ; " "

loc_430B8
MOV             R0, R7
BL              sub_42F04
ORR             R4, R4, R0
B               loc_43024

loc_430C8
CMP             R8, #0
LDR             R0, [R6,R10,LSL#2]
BEQ             loc_430E4
CMP             R0, R7
CMPNE           R0, R5
BEQ             loc_430F4
MOV             R1, R3

loc_430E4
BL              sub_42F04
LDR             R3, =(asc_6582A+9) ; " "
ORR             R4, R4, R0
MOV             R1, R11

loc_430F4
ADD             R10, R10, #1

loc_430F8
LDR             R2, [SP,#0xC+var_8]
CMP             R2, R10
BGT             loc_430C8

loc_43104
MOV             R5, R7
MOV             R6, R9

loc_4310C
ANDS            R1, R8, #4
BEQ             loc_43148
MOV             R1, #0
MOV             R0, R6
BL              sub_42EE0

loc_43120
ORR             R4, R4, R0

loc_43124               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
MOV             R0, R4
BL              sub_588D8

loc_43134
LDR             R1, =aGroups ; " groups="
MOV             R10, #0
LDR             R11, =(aNoCarrier+0xA) ; ","
LDR             R3, =(asc_6582A+9) ; " "
B               loc_430F8

loc_43148
TST             R8, #8
BEQ             loc_43124
MOV             R0, R5
BL              sub_42F04
B               loc_43120
; End of function sub_42F28

off_4315C DCD aRnugg    ; "^rnugG"
off_43160 DCD optind
off_43164 DCD aEuid+2   ; "uid="
off_43168 DCD aGid      ; " gid="
off_4316C DCD aEuid     ; " euid="
off_43170 DCD aEgid     ; " egid="
off_43174 DCD asc_6582A+9 ; " "
off_43178 DCD aGroups   ; " groups="
off_4317C DCD aNoCarrier+0xA ; ","



; int __fastcall sub_43180(int, char **)
sub_43180
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R0, R4
LDR             R1, =asc_69AA4 ; "^"
BL              sub_593CC
LDR             R3, =optind
LDR             R5, [R3]
LDR             R0, [R4,R5,LSL#2] ; from
ADD             R6, R4, R5,LSL#2
LDR             R1, [R6,#4] ; to
BL              link
CMP             R0, #0
POPEQ           {R4-R6,PC}
LDR             R3, [R4,R5,LSL#2]
LDR             R2, [R6,#4]
LDR             R1, =aHard ; "hard"
LDR             R0, =aCanTCreateSlin ; "can't create %slink '%s' to '%s'"
BL              sub_16B40
; End of function sub_43180

off_431C8 DCD asc_69AA4 ; "^"
off_431CC DCD optind
off_431D0 DCD aHard     ; "hard"
off_431D4 DCD aCanTCreateSlin ; "can't create %slink '%s' to '%s'"



; int __fastcall sub_431D8(int, char **)
sub_431D8

var_84= -0x84
var_80= -0x80
var_7C= -0x7C
var_78= -0x78
var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C
var_4= -4

LDR             R3, =(asc_6B3FB+0x1F) ; "~"
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x84
MOV             R4, R1
ADD             R2, SP, #0x84+var_4
MOV             R5, R0
MOV             R0, R4
STR             R3, [R2,#-0x6C]!
LDR             R1, =aSfnbsVt ; "^sfnbS:vT"
BL              sub_593CC
SUB             R3, R5, #0xC0000001
LDR             R7, [R4,R3,LSL#2]
LDR             R3, =optind
LDR             R3, [R3]
SUB             R5, R5, R3
ADD             R4, R4, R3,LSL#2
AND             R3, R0, #0x40 ; '@'
STR             R3, [SP,#0x84+var_84]
UBFX            R3, R0, #6, #1
CMP             R5, #2
MOVLE           R5, #0
ANDGT           R5, R3, #1
CMP             R5, #0
BEQ             loc_43240
LDR             R0, =aTAccepts2ArgsM ; "-T accepts 2 args max"
BL              sub_16DBC

loc_43240
LDR             R3, [R4,#4]
MOV             R6, R0
CMP             R3, #0
BNE             loc_4326C
STR             R7, [R4,#-4]
MOV             R0, R7
SUB             R5, R4, #4
BL              sub_174F8
BL              sub_16A54
MOV             R4, R5
MOV             R7, R0

loc_4326C
ANDS            R3, R6, #1
LDR             R2, =symlink
STR             R3, [SP,#0x84+var_80]
MOV             R9, #0
LDR             R3, =link
LDR             R11, =(aSSS_0+6) ; "%s%s"
MOVNE           R3, R2
STR             R3, [SP,#0x84+var_7C]
MVN             R3, R6
AND             R3, R3, #4
STR             R3, [SP,#0x84+var_78]

loc_43298
LDR             R1, [SP,#0x84+var_78]
MOV             R0, R7
BL              sub_5A854
SUBS            R8, R0, #0
BEQ             loc_43364
LDR             R3, [SP,#0x84+var_84]
CMP             R3, #0
BEQ             loc_432C4
MOV             R1, R7
LDR             R0, =aSIsADirectory ; "'%s' is a directory"
BL              sub_16DBC

loc_432C4
LDR             R0, [R4]
BL              sub_174F8
MOV             R5, R0
BL              sub_16A54
MOV             R1, R0
MOV             R0, R7
BL              sub_16998
MOV             R8, R0
MOV             R0, R5  ; ptr
MOV             R5, R8
BL              free

loc_432F0
LDR             R3, [SP,#0x84+var_80]
CMP             R3, #0
BNE             loc_4336C
ADD             R1, SP, #0x84+var_6C
LDR             R0, [R4]
BLX             sub_62DFC
CMP             R0, #0
BEQ             loc_4336C
ADD             R1, SP, #0x84+var_6C
LDR             R0, [R4]
BLX             sub_62E14
CMP             R0, #0
BNE             loc_43334
LDR             R3, [SP,#0x84+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0xA000
BEQ             loc_4336C

loc_43334
LDR             R0, [R4]
BL              sub_16B80
MOV             R0, R8  ; ptr

loc_43340
MOV             R9, #1
BL              free

loc_43348
ADD             R4, R4, #4
LDR             R3, [R4,#4]
CMP             R3, #0
BNE             loc_43298
MOV             R0, R9
ADD             SP, SP, #0x84
POP             {R4-R11,PC}

loc_43364
MOV             R5, R7
B               loc_432F0

loc_4336C
TST             R6, #8
BEQ             loc_433D4
LDR             R2, [SP,#0x84+var_70]
MOV             R1, R5
MOV             R0, R11
BL              sub_177E4
MOV             R1, R0  ; new
MOV             R10, R0
MOV             R0, R5  ; old
BL              rename
CMP             R0, #0
BGE             loc_433C0
LDR             R2, =dword_7DB94
LDR             R2, [R2]
LDR             R2, [R2]
CMP             R2, #2
BEQ             loc_433C0
MOV             R0, R5
BL              sub_16B80
MOV             R0, R10
B               loc_43340

loc_433C0               ; ptr
MOV             R0, R10
BL              free

loc_433C8               ; name
MOV             R0, R5
BL              unlink
B               loc_433DC

loc_433D4
TST             R6, #2
BNE             loc_433C8

loc_433DC
TST             R6, #0x20
LDR             R2, [R4]
BEQ             loc_433F4
MOV             R1, R5
LDR             R0, =aSS_3 ; "'%s' -> '%s'\n"
BL              printf

loc_433F4               ; to
MOV             R1, R5
LDR             R0, [R4] ; from
LDR             R3, [SP,#0x84+var_7C]
BLX             R3 ; link symlink
CMP             R0, #0
BEQ             loc_43418
MOV             R9, #1
MOV             R0, R5
BL              sub_16B80

loc_43418               ; ptr
MOV             R0, R8
BL              free
B               loc_43348
; End of function sub_431D8

off_43424 DCD asc_6B3FB+0x1F ; "~"
off_43428 DCD aSfnbsVt  ; "^sfnbS:vT"
off_4342C DCD optind
off_43430 DCD aTAccepts2ArgsM ; "-T accepts 2 args max"
off_43434 DCD symlink
off_43438 DCD link
off_4343C DCD aSSS_0+6  ; "%s%s"
off_43440 DCD aSIsADirectory ; "'%s' is a directory"
off_43444 DCD dword_7DB94
off_43448 DCD aSS_3     ; "'%s' -> '%s'\n"



; int __fastcall sub_4344C(int, int)
sub_4344C
LDR             R3, [R1,#4]
PUSH            {LR}
SUB             SP, SP, #0x44
CMP             R3, #0
BEQ             loc_43464
BL              sub_162F0

loc_43464               ; name_len
MOV             R1, #0x40 ; '@'
MOV             R0, SP  ; name
BL              getlogin_r
CMP             R0, #0
BNE             loc_4348C
MOV             R0, SP  ; s
BL              puts
BL              sub_177D8
ADD             SP, SP, #0x44 ; 'D'
POP             {PC}

loc_4348C
LDR             R0, =aGetlogin ; "getlogin"
BL              sub_16B40
; End of function sub_4344C

off_43494 DCD aGetlogin ; "getlogin"



; int __fastcall sub_43498(unsigned __int16)
sub_43498
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
ANDS            R2, R3, #0x3000
BEQ             loc_434DC
AND             R2, R0, #0xF000
CMP             R2, #0x4000
BEQ             loc_434E4
ANDS            R3, R3, #0x1000
BEQ             loc_434EC
CMP             R2, #0x8000
BNE             loc_434CC
TST             R0, #0x49
BNE             loc_434F4

loc_434CC
LDR             R3, =byte_69AE3
UBFX            R0, R0, #0xC, #4
LDRB            R0, [R3,R0]
BX              LR

loc_434DC
MOV             R0, R2
BX              LR

loc_434E4
MOV             R0, #0x2F ; '/'
BX              LR

loc_434EC
MOV             R0, R3
BX              LR

loc_434F4
MOV             R0, #0x2A ; '*'
BX              LR
; End of function sub_43498

off_434FC DCD dword_7DBC0
off_43500 DCD byte_69AE3



; int __fastcall sub_43504(int, int)
sub_43504
PUSH            {LR}
SUBS            LR, R0, #0
MOVNE           R3, #0
MOVNE           R0, R3
BNE             loc_43570
MOV             R0, LR
POP             {PC}

loc_43520
LDR             R12, [R2,#0x18]
ADD             R3, R3, #1
AND             R12, R12, #0xF000
CMP             R12, #0x4000
BNE             loc_43570
CMP             R1, #2
LDR             R2, [R2]
BNE             loc_4356C
LDRB            R12, [R2]
CMP             R12, #0x2E ; '.'
BNE             loc_4356C
LDRB            R12, [R2,#1]
CMP             R12, #0
BEQ             loc_43570
CMP             R12, #0x2E ; '.'
BNE             loc_4356C
LDRB            R2, [R2,#2]
CMP             R2, #0
BEQ             loc_43570

loc_4356C
ADD             R0, R0, #1

loc_43570
LDR             R2, [LR,R3,LSL#2]
CMP             R2, #0
BNE             loc_43520
CMP             R1, #0
SUBEQ           R0, R3, R0
POP             {PC}
; End of function sub_43504




; void *__fastcall sub_43588(void *result)
sub_43588
SUBS            R3, R0, #0
BXEQ            LR
ADD             R0, R3, #1
MOV             R0, R0,LSL#2
B               sub_174DC
; End of function sub_43588




; _DWORD *__fastcall sub_4359C(int, int)
sub_4359C
SUBS            R3, R0, #0
BEQ             loc_43634
PUSH            {R4-R6,LR}
MOV             R5, R3
MOV             R4, R1
BL              sub_43504
BL              sub_43588
SUB             R3, R5, #4
MOV             R2, #0

loc_435C0
LDR             R12, [R3,#4]!
CMP             R12, #0
POPEQ           {R4-R6,PC}
LDR             R1, [R12,#0x18]
AND             R1, R1, #0xF000
CMP             R1, #0x4000
BNE             loc_43628
CMP             R4, #0
BEQ             loc_435C0
CMP             R4, #1
LDR             R1, [R12]
BEQ             loc_4361C
LDRB            LR, [R1]
CMP             LR, #0x2E ; '.'
BNE             loc_4361C
LDRB            LR, [R1,#1]
CMP             LR, #0
BEQ             loc_435C0
CMP             LR, #0x2E ; '.'
BNE             loc_4361C
LDRB            R1, [R1,#2]
CMP             R1, #0
BEQ             loc_435C0

loc_4361C
STR             R12, [R0,R2,LSL#2]
ADD             R2, R2, #1
B               loc_435C0

loc_43628
CMP             R4, #0
BNE             loc_435C0
B               loc_4361C

loc_43634
MOV             R0, R3
BX              LR
; End of function sub_4359C




; _DWORD *__fastcall sub_4363C(const char *, int, int)
sub_4363C

var_5C= -0x5C
var_58= -0x58
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_3C= -0x3C
var_2C= -0x2C
var_24= -0x24
var_1C= -0x1C
var_14= -0x14
var_C= -0xC

PUSH            {R4-R7,LR}
MOV             R6, R0
SUB             SP, SP, #0x6C
MOV             R0, #0x58 ; 'X'
MOV             R5, R1
MOV             R7, R2
BL              sub_174DC
LDR             R3, =dword_7DBC0
MOV             R4, R0
STM             R0, {R5,R6}
MOV             R1, SP
MOV             R0, R6
LDR             R5, [R3]
AND             R5, R5, #0x800000
ORRS            R5, R5, R7
MOV             R7, R3
BEQ             loc_43754
BLX             sub_62DFC
CMP             R0, #0
BEQ             loc_436C8
MOV             R0, R6
MOV             R5, #0
BL              sub_16B80
LDR             R3, =buf

loc_4369C
MOV             R2, #1
MOV             R0, R4  ; ptr
MOV             R4, R5
STRB            R2, [R3,#termios.c_oflag]
STRB            R5, [R3,#termios.c_oflag+1]
STRB            R5, [R3,#termios.c_oflag+2]
STRB            R5, [R3,#termios.c_oflag+3]
BL              free

loc_436BC
MOV             R0, R4
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R7,PC}

loc_436C8
LDR             R3, [SP,#0x6C+var_5C]
STR             R3, [R4,#0x14]

loc_436D0
LDR             R3, [SP,#0x6C+var_5C]
STR             R3, [R4,#0x18]
LDRD            R2, R3, [SP,#0x6C+var_3C]
STRD            R2, R3, [R4,#0x20]
LDR             R3, [SP,#0x6C+var_1C]
STR             R3, [R4,#0x28]
LDR             R3, [R7]
LDRD            R6, R7, [SP,#0x6C+var_4C]
TST             R3, #0x40000
LDRNE           R2, [SP,#0x6C+var_24]
MOV             R1, R7  ; dev
MOV             R0, R6  ; dev
STRNE           R2, [R4,#0x28]
TST             R3, #0x10000
LDRNE           R3, [SP,#0x6C+var_14]
STRNE           R3, [R4,#0x28]
LDRD            R2, R3, [SP,#0x6C+var_C]
STRD            R2, R3, [R4,#0x30]
LDRD            R2, R3, [SP,#0x6C+var_2C]
STRD            R2, R3, [R4,#0x38]
LDR             R3, [SP,#0x6C+var_58]
STR             R3, [R4,#0x40]
LDR             R3, [SP,#0x6C+var_54]
STR             R3, [R4,#0x44]
LDR             R3, [SP,#0x6C+var_50]
STR             R3, [R4,#0x48]
BL              gnu_dev_major
MOV             R1, R7  ; dev
STR             R0, [R4,#0x4C]
MOV             R0, R6  ; dev
BL              gnu_dev_minor
STR             R0, [R4,#0x50]
B               loc_436BC

loc_43754
BLX             sub_62E14
CMP             R0, #0
BEQ             loc_43770
MOV             R0, R6
BL              sub_16B80
LDR             R3, =buf
B               loc_4369C

loc_43770
LDR             R3, [SP,#0x6C+var_5C]
STR             R3, [R4,#0x10]
B               loc_436D0
; End of function sub_4363C

off_4377C DCD dword_7DBC0
off_43780 DCD buf



; int __fastcall sub_43784(_BYTE *)
sub_43784

var_10= -0x10
var_8= -8

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x14
MOV             R1, R0
ADD             R0, SP, #0x14+var_10
BL              sub_5E5D0
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #0x8000
BNE             loc_437C4
LDR             R3, =stdout
LDR             R1, [R3]
BL              fputs_unlocked
LDR             R4, [SP,#0x14+var_8]

loc_437B8
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4,R5,PC}

loc_437C4
LDR             R4, [SP,#0x14+var_8]
MOV             R5, R0
SUB             R5, R5, #1
MOV             R0, #0x22 ; '"' ; c
BL              putchar_unlocked
ADD             R4, R4, #2

loc_437DC
LDRB            R3, [R5,#1]!
CMP             R3, #0
BNE             loc_437F4
MOV             R0, #0x22 ; '"' ; c
BL              putchar_unlocked
B               loc_437B8

loc_437F4
CMP             R3, #0x5C ; '\'
CMPNE           R3, #0x22 ; '"'
BNE             loc_4380C
ADD             R4, R4, #1
MOV             R0, #0x5C ; '\' ; c
BL              putchar_unlocked

loc_4380C               ; c
LDRB            R0, [R5]
BL              putchar_unlocked
B               loc_437DC
; End of function sub_43784

off_43818 DCD dword_7DBC0
off_4381C DCD stdout



; void __fastcall sub_43820(void *, size_t)
sub_43820
LDR             R3, =sub_43830
MOV             R2, #4
B               qsort
; End of function sub_43820

off_4382C DCD sub_43830



; int __fastcall sub_43830(int *, int **)
sub_43830
PUSH            {R4-R10,LR}
LDR             R6, [R1]
LDR             R1, =dword_7DBC0
LDR             R5, [R0]
LDR             R4, [R1]
TST             R4, #0x8000000
BEQ             loc_43884
LDR             R1, [R6,#0x18]
AND             R0, R1, #0xF000
LDR             R1, [R5,#0x18]
AND             R1, R1, #0xF000
SUB             R1, R1, #0x4000
CLZ             R1, R1
MOV             R1, R1,LSR#5
CMP             R0, #0x4000
RSBNE           R1, R1, #0
RSBEQ           R1, R1, #1
CMP             R1, #0
MOV             R8, R1
MOV             R9, R1,ASR#31
BNE             loc_438C4

loc_43884
TST             R4, #0x80000
BEQ             loc_438D4
LDR             R0, [R6,#0x20]
LDR             R1, [R5,#0x20]
LDR             LR, [R6,#0x24]
LDR             R12, [R5,#0x24]
SUBS            R2, R0, R1
SBC             R3, LR, R12

loc_438A4
ORRS            R1, R2, R3
ORRNE           R8, R3, #1
BNE             loc_438C0

loc_438B0               ; s2
LDR             R1, [R6]
LDR             R0, [R5] ; s1
BL              strcmp
MOV             R8, R0

loc_438C0
MOV             R9, R8,ASR#31

loc_438C4
TST             R4, #0x200000
MOV             R0, R8
RSBNE           R0, R8, #0
POP             {R4-R10,PC}

loc_438D4
TST             R4, #0x20000
LDRNE           R2, [R6,#0x28]
LDRNE           R3, [R5,#0x28]
SUBNE           R2, R2, R3
BNE             loc_43904
TST             R4, #0x400000
LDR             R0, [R5]
LDR             R7, [R6]
BEQ             loc_4390C
MOV             R1, R7
BL              strverscmp

loc_43900
MOV             R2, R0

loc_43904
MOV             R3, R2,ASR#31
B               loc_438A4

loc_4390C
TST             R4, #0x100000
BEQ             loc_438B0
MOV             R1, #0x2E ; '.'
BL              strchrnul
MOV             R1, #0x2E ; '.'
MOV             R8, R0
MOV             R0, R7
BL              strchrnul
MOV             R1, R0  ; s2
MOV             R0, R8  ; s1
BL              strcmp
B               loc_43900
; End of function sub_43830

off_4393C DCD dword_7DBC0



; int __fastcall sub_43940(int)
sub_43940

var_5C= -0x5C

LDR             R1, [R0,#0x18]
PUSH            {R4-R11,LR}
MOV             R4, R0
SUB             SP, SP, #0x6C
MOV             R0, R1
BL              sub_43498
LDR             R3, =dword_7DBC0
MOV             R9, R0
LDR             R6, [R3]
ANDS            R7, R6, #0x20 ; ' '
BEQ             loc_43C18
AND             R1, R1, #0xF000
CMP             R1, #0xA000
BNE             loc_43C18
LDR             R0, [R4,#4]
BL              sub_17C9C
MOV             R8, R0

loc_43984
ANDS            R5, R6, #8
BEQ             loc_4399C
LDRD            R2, R3, [R4,#0x30]
LDR             R0, =a7llu ; "%7llu "
BL              printf
MOV             R5, R0

loc_4399C
TST             R6, #0x100
BEQ             loc_439BC
LDRD            R2, R3, [R4,#0x38]
LDR             R0, =a6llu ; "%6llu "
MOVS            R3, R3,ASR#1
MOV             R2, R2,RRX
BL              printf
ADD             R5, R5, R0

loc_439BC
CMP             R7, #0
LDR             R7, =buf
BEQ             loc_43A7C
LDR             R0, [R4,#0x18]
BL              sub_5DA78
MOV             R1, R0
LDR             R0, =a10s ; "%-10s "
BL              printf
LDR             R1, [R4,#0x40]
MOV             R10, R0
LDR             R0, =a4lu ; "%4lu "
BL              printf
TST             R6, #0x80
ADD             R0, R10, R0
ADD             R5, R0, R5
AND             R3, R6, #0x40 ; '@'
BEQ             loc_43C20
LDR             R2, [R4,#0x48]
CMP             R3, #0
LDRNE           R0, =(a8u8u+5) ; "%-8u "
LDREQ           R1, [R4,#0x44]
MOVNE           R1, R2
LDREQ           R0, =a8u8u ; "%-8u %-8u "
BEQ             loc_43C5C

loc_43A1C
BL              printf

loc_43A20
LDR             R3, [R4,#0x18]
ADD             R5, R0, R5
AND             R3, R3, #0xB000
CMP             R3, #0x2000
BNE             loc_43C64
LDR             R2, [R4,#0x50]
LDR             R1, [R4,#0x4C]
LDR             R0, =a4u3u ; "%4u, %3u "
BL              printf

loc_43A44
TST             R6, #0x4000000
ADD             R5, R0, R5
ADD             R0, R4, #0x28 ; '(' ; timer
BEQ             loc_43CA0
BL              localtime
LDR             R2, =aYMDHMSZ ; "%Y-%m-%d %H:%M:%S %z"
MOV             R3, R0  ; tp
MOV             R1, #0x1D ; maxsize
MOV             R0, SP  ; s
BL              strftime
MOV             R1, SP
LDR             R0, =(aViaS+4) ; format
BL              printf
ADD             R5, R0, R5

loc_43A7C
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_43AF8
LDR             R10, [R4,#0x10]
CMP             R10, #0
BNE             loc_43AA8
MOV             R1, SP
LDR             R0, [R4,#4]
BLX             sub_62E14
CMP             R0, #0
LDREQ           R10, [SP,#0x6C+var_5C]

loc_43AA8
AND             R3, R10, #0xF000
CMP             R3, #0x8000
BNE             loc_43ABC
TST             R10, #0x49
BNE             loc_43D08

loc_43ABC
LDR             R2, =byte_69AE3
UBFX            R1, R10, #0xC, #4
CMP             R3, #0x8000
ADD             R2, R2, R1
LDRB            R1, [R2,#0x11]
BNE             loc_43AE0

loc_43AD4
TST             R10, #0x49
MOVNE           R2, #0x20 ; ' '
BNE             loc_43AF0

loc_43AE0
LDR             R2, =byte_69AE3
UBFX            R3, R10, #0xC, #4
ADD             R3, R2, R3
LDRB            R2, [R3,#0x22]

loc_43AF0
LDR             R0, =aUUm ; "\x1B[%u;%um"
BL              printf

loc_43AF8
LDR             R0, [R4]
BL              sub_43784
LDR             R3, [R7]
ADD             R5, R5, R0
CMP             R3, #0
BEQ             loc_43B18
LDR             R0, =(a7mSFileIOfIM+0x16) ; format
BL              printf

loc_43B18
CMP             R8, #0
AND             R6, R6, #0x3000
BEQ             loc_43BF4
LDR             R0, =asc_69C10 ; " -> "
BL              printf
CMP             R6, #0
BNE             loc_43B40
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_43BC8

loc_43B40
LDR             R10, [R4,#0x14]
CMP             R10, #0
BNE             loc_43B60
MOV             R1, SP
LDR             R0, [R4,#4]
BLX             sub_62DFC
CMP             R0, #0
LDREQ           R10, [SP,#0x6C+var_5C]

loc_43B60
MOV             R0, R10
BL              sub_43498
LDR             R3, [R7]
MOV             R9, R0
CMP             R3, #0
BEQ             loc_43BC8
AND             R3, R10, #0xF000
CMP             R3, #0x8000
BNE             loc_43B8C
TST             R10, #0x49
BNE             loc_43D10

loc_43B8C
LDR             R2, =byte_69AE3
UBFX            R1, R10, #0xC, #4
CMP             R3, #0x8000
ADD             R2, R2, R1
LDRB            R1, [R2,#0x11]
BNE             loc_43BB0

loc_43BA4
TST             R10, #0x49
MOVNE           R2, #0x20 ; ' '
BNE             loc_43BC0

loc_43BB0
LDR             R2, =byte_69AE3
UBFX            R3, R10, #0xC, #4
ADD             R3, R2, R3
LDRB            R2, [R3,#0x22]

loc_43BC0
LDR             R0, =aUUm ; "\x1B[%u;%um"
BL              printf

loc_43BC8
MOV             R0, R8
ADD             R5, R5, #4
BL              sub_43784
ADD             R5, R0, R5
MOV             R0, R8  ; ptr
BL              free
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_43BF4
LDR             R0, =(a7mSFileIOfIM+0x16) ; format
BL              printf

loc_43BF4
CMP             R9, #0
CMPNE           R6, #0
BEQ             loc_43C0C
ADD             R5, R5, #1
MOV             R0, R9  ; c
BL              putchar_unlocked

loc_43C0C
MOV             R0, R5
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R11,PC}

loc_43C18
MOV             R8, #0
B               loc_43984

loc_43C20
CMP             R3, #0
BEQ             loc_43C3C
LDR             R0, [R4,#0x48]
BL              sub_5E8A8
MOV             R1, R0
LDR             R0, =(a88s88s+7) ; "%-8.8s "
B               loc_43A1C

loc_43C3C
LDR             R0, [R4,#0x44]
BL              sub_5E890
MOV             R10, R0
LDR             R0, [R4,#0x48]
BL              sub_5E8A8
MOV             R2, R0
LDR             R0, =a88s88s ; "%-8.8s %-8.8s "
MOV             R1, R10

loc_43C5C
BL              printf
B               loc_43A20

loc_43C64
TST             R6, #0x2000000
LDRD            R0, R1, [R4,#0x20]
BEQ             loc_43C8C
MOV             R3, #0
MOV             R2, #1
BL              sub_5A318
MOV             R1, R0
LDR             R0, =a7s ; "%7s "
BL              printf
B               loc_43A44

loc_43C8C
MOV             R2, R0
MOV             R3, R1
LDR             R0, =a9llu ; "%9llu "
BL              printf
B               loc_43A44

loc_43CA0
BL              ctime
LDR             R2, [R4,#0x28]
ADD             R11, R0, #4
LDR             R3, [R7,#(buf.c_lflag - 0x7D790)]
SUB             R3, R3, R2
LDR             R2, =0xF09D42
ADD             R3, R3, #0x380
ADD             R3, R3, #3
CMP             R3, R2
BHI             loc_43CDC
MOV             R1, R11
LDR             R0, =a12s ; "%.12s "
BL              printf

loc_43CD4
ADD             R5, R5, #0xD
B               loc_43A7C

loc_43CDC
ADD             R10, R0, #0x14
MOV             R1, #0xA ; c
MOV             R0, R10 ; s
BL              strchr
MOV             R3, #0x20 ; ' '
MOV             R2, R10
STRB            R3, [R0]
MOV             R1, R11
LDR             R0, =a7s6s ; "%.7s%6s"
BL              printf
B               loc_43CD4

loc_43D08
MOV             R1, #1
B               loc_43AD4

loc_43D10
MOV             R1, #1
B               loc_43BA4
; End of function sub_43940

off_43D18 DCD dword_7DBC0
off_43D1C DCD a7llu     ; "%7llu "
off_43D20 DCD a6llu     ; "%6llu "
off_43D24 DCD buf
off_43D28 DCD a10s      ; "%-10s "
off_43D2C DCD a4lu      ; "%4lu "
off_43D30 DCD a8u8u+5   ; "%-8u "
off_43D34 DCD a8u8u     ; "%-8u %-8u "
off_43D38 DCD a4u3u     ; "%4u, %3u "
off_43D3C DCD aYMDHMSZ  ; "%Y-%m-%d %H:%M:%S %z"
off_43D40 DCD aViaS+4   ; "%s "
off_43D44 DCD byte_69AE3
off_43D48 DCD aUUm      ; "\x1B[%u;%um"
off_43D4C DCD a7mSFileIOfIM+0x16 ; "\x1B[m"
off_43D50 DCD asc_69C10 ; " -> "
off_43D54 DCD a88s88s+7 ; "%-8.8s "
off_43D58 DCD a88s88s   ; "%-8.8s %-8.8s "
off_43D5C DCD a7s       ; "%7s "
off_43D60 DCD a9llu     ; "%9llu "
dword_43D64 DCD 0xF09D42
off_43D68 DCD a12s      ; "%.12s "
off_43D6C DCD a7s6s     ; "%.7s%6s"



; unsigned int __fastcall sub_43D70(unsigned int result, unsigned int)
sub_43D70

var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x24
LDR             R6, =dword_7DBC0
MOV             R7, R1
STR             R0, [SP,#0x24+var_1C]
LDR             R4, [R6]
ANDS            R4, R4, #0x30 ; '0'
MOVEQ           R3, R0
SUBEQ           R5, R3, #4
BEQ             loc_43DD8
MOV             R5, R1
MOV             R3, #0
STR             R3, [SP,#0x24+var_24]

loc_43DA4
MOV             R4, #1
B               loc_43E3C

loc_43DAC
LDR             R1, [R3]
ADD             R0, SP, #0x24+var_10
BL              sub_5E5D0
LDR             R3, [R6]
TST             R3, #0x8000
LDR             R3, [SP,#0x24+var_8]
SUBNE           R0, R0, #1
ADDNE           R3, R3, #2
BNE             loc_43E64

loc_43DD0
CMP             R4, R3
MOVCC           R4, R3

loc_43DD8
LDR             R3, [R5,#4]!
CMP             R3, #0
BNE             loc_43DAC
LDR             R2, [R6]
MOV             R0, #0x50 ; 'P'
AND             R3, R2, #8
TST             R2, #0x100
MOVNE           R2, #5
MOVEQ           R2, #0
ADD             R3, R3, #2
ADD             R3, R3, R2
ADD             R3, R3, R4
MOV             R1, R3
STR             R3, [SP,#0x24+var_24]
BLX             sub_15CA0
CMP             R0, #1
MOV             R4, R0
BLS             loc_43E74
MOV             R1, R0
MOV             R0, R7
BLX             sub_15CA0
MUL             R3, R0, R4
MOV             R5, R0
CMP             R3, R7
ADDCC           R5, R0, #1

loc_43E3C
MOV             R9, #0
MOV             R10, R4
MOV             R8, R9

loc_43E48
CMP             R5, R8
BNE             loc_43E7C
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_43E58
CMP             R2, #0x5C ; '\'
CMPNE           R2, #0x22 ; '"'
ADDEQ           R3, R3, #1

loc_43E64
LDRB            R2, [R0,#1]!
CMP             R2, #0
BNE             loc_43E58
B               loc_43DD0

loc_43E74
MOV             R5, R7
B               loc_43DA4

loc_43E7C
SUB             R11, R10, R4
MOV             R1, #0
STR             R8, [SP,#0x24+var_20]

loc_43E88
LDR             R3, [R6]
TST             R3, #0x200
LDR             R3, [SP,#0x24+var_20]
MOVNE           R3, R11
CMP             R3, R7
BCS             loc_43EE4
CMP             R1, #0
BEQ             loc_43EC4
SUB             R1, R9, R1
LDR             R2, =(asc_6B39D+1) ; ""
LDR             R0, =aS_13 ; "%*s"
STR             R3, [SP,#0x24+var_18]
BL              printf
LDR             R3, [SP,#0x24+var_18]
MOV             R1, R9

loc_43EC4
LDR             R2, [SP,#0x24+var_24]
STR             R1, [SP,#0x24+var_18]
ADD             R9, R1, R2
LDR             R2, [SP,#0x24+var_1C]
LDR             R0, [R2,R3,LSL#2]
BL              sub_43940
LDR             R1, [SP,#0x24+var_18]
ADD             R1, R1, R0

loc_43EE4
LDR             R3, [SP,#0x24+var_20]
ADD             R11, R11, #1
CMP             R10, R11
ADD             R3, R3, R5
STR             R3, [SP,#0x24+var_20]
BNE             loc_43E88
MOV             R0, #0xA ; c
ADD             R8, R8, #1
BL              putchar_unlocked
ADD             R10, R10, R4
B               loc_43E48
; End of function sub_43D70

off_43F10 DCD dword_7DBC0
off_43F14 DCD asc_6B39D+1 ; ""
off_43F18 DCD aS_13     ; "%*s"



; void __fastcall sub_43F1C(int, int)
sub_43F1C
PUSH            {R3-R11,LR}
MOV             R8, R1
LDR             R6, =buf
SUB             R7, R0, #4

loc_43F2C
LDR             R3, [R7,#4]!
CMP             R3, #0
POPEQ           {R3-R11,PC}
LDR             R3, [R6,#termios.c_cflag]
CMP             R3, #0
BNE             loc_43F54
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #0x4000
BEQ             loc_43F78

loc_43F54
CMP             R8, #0
BNE             loc_43F64
MOV             R0, #0xA ; c
BL              j_putchar_unlocked

loc_43F64
LDR             R3, [R7]
MOV             R8, #0
LDR             R0, =aS_12 ; "%s:\n"
LDR             R1, [R3,#4]
BL              printf

loc_43F78
LDR             R3, [R7]
LDR             R9, [R3,#4]
MOV             R0, R9
BL              sub_17954
SUBS            R11, R0, #0
BNE             loc_44108
MOV             R2, #1
STRB            R11, [R6,#termios.c_oflag+1]
STRB            R2, [R6,#termios.c_oflag]
STRB            R11, [R6,#termios.c_oflag+2]
STRB            R11, [R6,#termios.c_oflag+3]
B               loc_43F2C

loc_43FA8
LDRB            R2, [R1,#0x13]
CMP             R2, #0x2E ; '.'
BNE             loc_43FE8
LDR             R3, =dword_7DBC0
MOVW            R0, #0x402
LDR             R2, [R3]
TST             R2, R0
BEQ             loc_4401C
TST             R2, #2
BNE             loc_43FE8
LDRB            R2, [R1,#0x14]
CMP             R2, #0
BEQ             loc_4401C
LDRH            R2, [R1,#0x14]
CMP             R2, #0x2E ; '.'
BEQ             loc_4401C

loc_43FE8
ADD             R1, R1, #0x13
MOV             R0, R9
BL              sub_16998
MOV             R10, R0
BL              sub_169FC
MOV             R2, #0
MOV             R1, R0
MOV             R0, R10
BL              sub_4363C
CMP             R0, #0
BNE             loc_440F0
MOV             R0, R10 ; ptr
BL              free

loc_4401C
MOV             R0, R11
BL              readdir64
SUBS            R1, R0, #0
BNE             loc_43FA8
MOV             R0, R11 ; dirp
BL              closedir
CMP             R4, #0
BEQ             loc_43F2C
MOV             R0, R5
BL              sub_43588
SUB             R10, R0, #4
MOV             R9, R0
MOV             R3, R10

loc_44050
STR             R4, [R3,#4]!
LDR             R4, [R4,#8]
CMP             R4, #0
BNE             loc_44050
CMP             R5, #0
BEQ             loc_43F2C
MOV             R1, R5
MOV             R0, R9
BL              sub_43820
MOV             R1, R5
MOV             R0, R9
BL              sub_43D70
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #0x4000
BEQ             loc_440D0
MOV             R1, #2
MOV             R0, R9
BL              sub_4359C
MOV             R1, #2
MOV             R5, R0
MOV             R0, R9
BL              sub_43504
SUBS            R1, R0, #0
BEQ             loc_440D0
MOV             R0, R5
BL              sub_43820
MOV             R0, R5
MOV             R1, R4
BL              sub_43F1C
MOV             R0, R5  ; ptr
BL              free

loc_440D0
CMP             R9, #0
BEQ             loc_43F2C

loc_440D8
LDR             R4, [R10,#4]!
CMP             R4, #0
BNE             loc_44114
MOV             R0, R9  ; ptr
BL              free
B               loc_43F2C

loc_440F0
MOV             R3, #1
STR             R4, [R0,#8]
STR             R3, [R0,#0xC]
ADD             R5, R5, R3
MOV             R4, R0
B               loc_4401C

loc_44108
MOV             R5, #0
MOV             R4, R5
B               loc_4401C

loc_44114
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_44128
LDR             R0, [R4,#4] ; ptr
BL              free

loc_44128               ; ptr
MOV             R0, R4
BL              free
B               loc_440D8
; End of function sub_43F1C

off_44134 DCD buf
off_44138 DCD dword_7DBC0
off_4413C DCD aS_12     ; "%s:\n"



; tcflag_t __fastcall sub_44140(int, char **)
sub_44140

s= -4
var_s0=  0

LDR             R3, =aAlways ; "always"
MOV             R2, #0x10 ; n
PUSH            {R0,R1,R4-R8,LR}
MOV             R6, R1
ADD             R4, SP, #8+var_s0
MOV             R1, #0  ; c
LDR             R0, =buf ; s
STR             R3, [R4,#-4]!
BL              memset
LDR             R0, =buf.c_lflag ; timer
BL              time
MOV             R3, R4
LDR             R2, =aFullTime ; "full-time"
LDR             R1, =aCadi1lgnsxakfp ; "^Cadi1lgnsxAkFpRQctuSXrvLHh"
MOV             R0, R6
BL              sub_593F8
MOV             R4, R0
MOV             R0, #1  ; fd
BL              isatty
CMP             R0, #0
BEQ             loc_441DC
LDR             R0, =aLsColors ; "LS_COLORS"
BL              getenv
SUBS            R3, R0, #0
BEQ             loc_441C0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_441DC
LDR             R1, =aNone_0 ; "none"
BL              strcmp
CMP             R0, #0
BEQ             loc_441DC

loc_441C0
LDR             R3, =buf
MOV             R2, #0
MOV             R1, #1
STRB            R1, [R3]
STRB            R2, [R3,#termios.c_iflag+1]
STRB            R2, [R3,#termios.c_iflag+2]
STRB            R2, [R3,#termios.c_iflag+3]

loc_441DC
TST             R4, #0x10000000
BEQ             def_4431C ; jumptable 0004431C default case
LDR             R1, [SP,#8+s] ; s
LDRB            R3, [R1]
CMP             R3, #0x6E ; 'n'
BNE             loc_44310
LDR             R3, =buf
MOV             R2, #0
STRB            R2, [R3]

loc_44200
STRB            R2, [R3,#termios.c_iflag+1]
STRB            R2, [R3,#termios.c_iflag+2]
STRB            R2, [R3,#termios.c_iflag+3]

def_4431C               ; jumptable 0004431C default case
LDR             R5, =dword_7DBC0
TST             R4, #4
LDR             R3, [R5]
BICNE           R3, R3, #0x4000
STRNE           R3, [R5]
TST             R4, #0x20
LDR             R3, [R5]
BNE             loc_44238
TST             R4, #0x50000
ORRNE           R3, R3, #0x20000
STRNE           R3, [R5]

loc_44238
LDR             R3, [R5]
MOVW            R2, #0x231
TST             R2, R3
BNE             loc_44268
MOV             R0, #1  ; fd
BL              isatty
LDR             R3, [R5]
CMP             R0, #0
MOVEQ           R2, #0x10
MOVNE           R2, #1
ORR             R3, R3, R2
STR             R3, [R5]

loc_44268
LDR             R3, =optind
LDR             R2, [R3]
ADD             R3, R6, R2,LSL#2
LDR             R2, [R6,R2,LSL#2]
CMP             R2, #0
LDREQ           R2, =(asc_67ED0+4) ; "."
STREQ           R2, [R3,#-4]
SUBEQ           R3, R3, #4
LDR             R2, [R3,#4]
CMP             R2, #0
BEQ             loc_442B0
LDR             R2, =buf
MOV             R1, #0
MOV             R0, #1
STRB            R0, [R2,#termios.c_cflag]
STRB            R1, [R2,#termios.c_cflag+1]
STRB            R1, [R2,#termios.c_cflag+2]
STRB            R1, [R2,#termios.c_cflag+3]

loc_442B0
MOV             R4, #0
MOV             R6, R3
MOV             R7, R4
MOVW            R8, #0x1120

loc_442C0
LDR             R2, [R5]
LDR             R1, [R6],#4
TST             R2, R8
UBFXNE          R2, R2, #0x18, #1
MOVEQ           R2, #1
MOV             R0, R1
BL              sub_4363C
LDR             R3, [R6]
CMP             R0, #0
STRNE           R7, [R0,#8]
ADDNE           R4, R4, #1
MOVNE           R7, R0
CMP             R3, #0
BNE             loc_442C0
CMP             R4, #0
BNE             loc_44360

loc_44300
LDR             R3, =buf
LDR             R0, [R3,#termios.c_oflag]
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_44310
LDR             R0, =aAlways ; "always"
BL              sub_168D4
CMP             R0, #5  ; switch 6 cases
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_4431C ; jumptable 0004431C default case
jpt_4431C DCD loc_4434C ; jump table for switch statement
DCD loc_4434C
DCD loc_4434C
DCD loc_4433C
DCD loc_4433C
DCD loc_4433C

loc_4433C               ; jumptable 0004431C cases 3-5
MOV             R0, #1
BL              isatty
CMP             R0, #0
BEQ             def_4431C ; jumptable 0004431C default case

loc_4434C               ; jumptable 0004431C cases 0-2
LDR             R3, =buf
MOV             R1, #1
MOV             R2, #0
STRB            R1, [R3]
B               loc_44200

loc_44360
MOV             R0, R4
BL              sub_43588
MOV             R6, R0
SUB             R3, R0, #4

loc_44370
STR             R7, [R3,#4]!
LDR             R7, [R7,#8]
CMP             R7, #0
BNE             loc_44370
LDR             R3, [R5]
TST             R3, #4
BEQ             loc_443A8
MOV             R1, R4
MOV             R0, R6
BL              sub_43820
MOV             R1, R4
MOV             R0, R6
BL              sub_43D70
B               loc_44300

loc_443A8
MOV             R1, #1
MOV             R0, R6
BL              sub_4359C
MOV             R1, R7
MOV             R8, R0
MOV             R0, R6
BL              sub_4359C
MOV             R1, #1
MOV             R7, R0
MOV             R0, R6
BL              sub_43504
SUBS            R4, R4, R0
MOV             R5, R0
BEQ             loc_443F8
MOV             R1, R4
MOV             R0, R7
BL              sub_43820
MOV             R1, R4
MOV             R0, R7
BL              sub_43D70

loc_443F8
CMP             R5, #0
BEQ             loc_44300
MOV             R1, R5
MOV             R0, R8
BL              sub_43820
CLZ             R1, R4
MOV             R0, R8
MOV             R1, R1,LSR#5
BL              sub_43F1C
B               loc_44300
; End of function sub_44140

; const int off_44420
off_44420 DCD aAlways   ; "always"
off_44424 DCD buf
off_44428 DCD buf.c_lflag
off_4442C DCD aFullTime ; "full-time"
off_44430 DCD aCadi1lgnsxakfp ; "^Cadi1lgnsxAkFpRQctuSXrvLHh"
off_44434 DCD aLsColors ; "LS_COLORS"
off_44438 DCD aNone_0   ; "none"
off_4443C DCD dword_7DBC0
off_44440 DCD optind
off_44444 DCD asc_67ED0+4 ; "."



; void *__fastcall sub_44448(const char *)
sub_44448
PUSH            {R4-R8,LR}
SUB             SP, SP, #0xD0
MOV             R8, R0
BL              sub_61D34
SUBS            R6, R0, #0
BLT             loc_4453C
LDR             R3, =dword_7DB90
LDR             R3, [R3]
LDRB            R3, [R3,#3]
CMP             R3, #0x73 ; 's'
BNE             loc_444E0
LDR             R5, =sub_5A08C
MOV             R7, #0x10
MOV             R0, SP
BL              sub_59FE0

loc_44484
MOV             R0, #0x1000
BL              sub_1748C
MOV             R4, R0

loc_44490               ; nbytes
MOV             R2, #0x1000
MOV             R1, R4  ; buf
MOV             R0, R6  ; fd
BL              sub_1800C
SUBS            R2, R0, #0 ; n
BGT             loc_44500
BEQ             loc_44510
MOV             R5, #0
MOV             R1, R8
LDR             R0, =aCanTReadS ; "can't read '%s'"
BL              sub_16AF4

loc_444BC               ; ptr
MOV             R0, R4
BL              free
CMP             R6, #0
BEQ             loc_444D4
MOV             R0, R6  ; fd
BL              close

loc_444D4
MOV             R0, R5
ADD             SP, SP, #0xD0
POP             {R4-R8,PC}

loc_444E0
CMP             R3, #0x32 ; '2'
BNE             loc_444FC
MOV             R0, SP
LDR             R5, =sub_5A1E8
BL              sub_5A0C4
MOV             R7, #0x20 ; ' '
B               loc_44484

loc_444FC
BL              sub_16E08

loc_44500               ; src
MOV             R1, R4
MOV             R0, SP  ; int
BL              sub_5A024
B               loc_44490

loc_44510
MOV             R1, R4
MOV             R0, SP
BLX             R5 ; sub_5A08C sub_5A1E8
MOV             R0, R7,LSL#1
ADD             R0, R0, #1
BL              sub_174DC
MOV             R2, R7
MOV             R1, R4
MOV             R5, R0
BL              sub_16FB4
B               loc_444BC

loc_4453C
MOV             R5, #0
B               loc_444D4
; End of function sub_44448

off_44544 DCD dword_7DB90
off_44548 DCD sub_5A08C
off_4454C DCD aCanTReadS ; "can't read '%s'"
off_44550 DCD sub_5A1E8



; int __fastcall sub_44554(int, char **)
sub_44554

ptr= -0xC
var_8= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R5, R1
MOV             R0, R5
LDR             R1, =aScwbt ; "^scwbt"
MOV             R6, #0
BL              sub_593CC
LDR             R3, =optind
MOV             R7, R0
LDR             R3, [R3]
ADD             R4, R5, R3,LSL#2
LDR             R3, [R5,R3,LSL#2]
CMP             R3, #0
LDREQ           R3, =(asc_6AE7B+3) ; "-"
STREQ           R3, [R4,#-4]
SUBEQ           R4, R4, #4

loc_44590
TST             R7, #2
LDR             R0, [R4]
BEQ             loc_446E0
MOV             R5, #0
BL              sub_61D20
MOV             R8, R5
MOV             R10, R0

loc_445AC
MOV             R0, R10
BL              sub_58D24
SUBS            R9, R0, #0
BNE             loc_44614
CMP             R5, #0
BEQ             loc_445DC
TST             R7, #1
BNE             loc_445DC
MOV             R2, R8
MOV             R1, R5
LDR             R0, =aWarningDOfDCom ; "WARNING: %d of %d computed checksums di"...
BL              sub_16DDC

loc_445DC
CMP             R8, #0
BNE             loc_445F4
MOV             R6, #1
LDR             R1, [R4]
LDR             R0, =aSNoChecksumLin ; "%s: no checksum lines found"
BL              sub_16DDC

loc_445F4
MOV             R0, R10
BL              sub_5888C

loc_445FC
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_44590
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_44614               ; needle
LDR             R1, =(asc_6582A+8) ; "  "
ADD             R8, R8, #1
BL              strstr
SUBS            R11, R0, #0
BNE             loc_44660
LDR             R1, =asc_69C62 ; " *"
MOV             R0, R9  ; haystack
BL              strstr
SUBS            R11, R0, #0
BNE             loc_44660
TST             R7, #4
BEQ             loc_4464C
LDR             R0, =(aSInvalidFormat+4) ; "invalid format"
BL              sub_16DDC

loc_4464C               ; ptr
MOV             R0, R9
ADD             R5, R5, #1
BL              free
MOV             R6, #1
B               loc_445AC

loc_44660
MOV             R2, #0
STRB            R2, [R11],#2
MOV             R0, R11
BL              sub_44448
SUBS            R3, R0, #0
AND             R2, R7, #1
STR             R3, [SP,#0xC+ptr]
BEQ             loc_446C0
MOV             R1, R9  ; s2
STR             R2, [SP,#0xC+var_8]
BL              strcmp
CMP             R0, #0
LDR             R2, [SP,#0xC+var_8]
BNE             loc_446C0
CMP             R2, #0
BNE             loc_446AC
MOV             R1, R11
LDR             R0, =aSOk ; "%s: OK\n"
BL              printf

loc_446AC               ; ptr
LDR             R0, [SP,#0xC+ptr]
BL              free
MOV             R0, R9  ; ptr
BL              free
B               loc_445AC

loc_446C0
CMP             R2, #0
BNE             loc_446D4
MOV             R1, R11
LDR             R0, =aSFailed ; "%s: FAILED\n"
BL              printf

loc_446D4
ADD             R5, R5, #1
MOV             R6, #1
B               loc_446AC

loc_446E0
BL              sub_44448
SUBS            R5, R0, #0
MOVEQ           R6, #1
BEQ             loc_445FC
LDR             R2, [R4]
MOV             R1, R5
LDR             R0, =aSS_6 ; "%s  %s\n"
BL              printf
MOV             R0, R5  ; ptr
BL              free
B               loc_445FC
; End of function sub_44554

off_4470C DCD aScwbt    ; "^scwbt"
off_44710 DCD optind
off_44714 DCD asc_6AE7B+3 ; "-"
off_44718 DCD aWarningDOfDCom ; "WARNING: %d of %d computed checksums di"...
off_4471C DCD aSNoChecksumLin ; "%s: no checksum lines found"
off_44720 DCD asc_6582A+8 ; "  "
off_44724 DCD asc_69C62 ; " *"
off_44728 DCD aSInvalidFormat+4 ; "invalid format"
off_4472C DCD aSOk      ; "%s: OK\n"
off_44730 DCD aSFailed  ; "%s: FAILED\n"
off_44734 DCD aSS_6     ; "%s  %s\n"



; int __fastcall sub_44738(int, char **, int)
sub_44738

var_8= -8

PUSH            {R0-R2,R4-R7,LR}
MOV             R4, R1
ADD             R3, SP, #0xC+var_8
LDR             R2, =aMode ; "mode"
MOV             R0, R4
LDR             R1, =aMPv ; "m:pv"
BL              sub_593F8
TST             R0, #1
MOV             R5, R0
BEQ             loc_44784
MOVW            R1, #0x1FF ; nptr
LDR             R0, [SP,#0xC+var_8] ; int
BL              sub_5E0F4
CMN             R0, #1
MOV             R6, R0
BNE             loc_44788
LDR             R1, [SP,#0xC+var_8]
LDR             R0, =aInvalidModeS ; "invalid mode '%s'"
BL              sub_16DBC

loc_44784
MOV             R6, #0xFFFFFFFF

loc_44788
LDR             R3, =optind
TST             R5, #2
MOVNE           R7, #4
MOVEQ           R7, #0
TST             R5, #4
LDR             R3, [R3]
ORRNE           R7, R7, #0x1000
ADD             R5, R4, R3,LSL#2
LDR             R3, [R4,R3,LSL#2]
CMP             R3, #0
BNE             loc_447B8
BL              sub_162F0

loc_447B8
MOV             R4, #0

loc_447BC               ; path
LDR             R0, [R5]
MOV             R2, R7
MOV             R1, R6
BL              sub_5D824
LDR             R3, [R5,#4]!
CMP             R0, #0
MOVNE           R4, #1
CMP             R3, #0
BNE             loc_447BC
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_44738

off_447EC DCD aMode     ; "mode"
off_447F0 DCD aMPv      ; "m:pv"
off_447F4 DCD aInvalidModeS ; "invalid mode '%s'"
off_447F8 DCD optind



; int __fastcall sub_447FC(int, char **, int)
sub_447FC
PUSH            {R4-R6,LR}
MOV             R0, R1
MOV             R5, R1
BL              sub_49B9C
LDR             R3, =optind
LDR             R3, [R3]
ADD             R4, R5, R3,LSL#2
LDR             R3, [R5,R3,LSL#2]
CMP             R3, #0
BNE             loc_44828
BL              sub_162F0

loc_44828
MOV             R6, R0
MOV             R5, #0

loc_44830               ; mode
MOV             R1, R6
LDR             R0, [R4] ; path
BL              mkfifo
CMP             R0, #0
BGE             loc_44850
MOV             R5, #1
LDR             R0, [R4]
BL              sub_16B80

loc_44850
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_44830
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_447FC

off_44864 DCD optind



; int __fastcall sub_44868(int, char **, int)
sub_44868
PUSH            {R4-R8,LR}
MOV             R0, R1
MOV             R4, R1
BL              sub_49B9C
LDR             R3, =optind
LDR             R6, [R3]
LDR             R3, [R4,R6,LSL#2]
ADD             R5, R4, R6,LSL#2
CMP             R3, #0
BEQ             loc_4489C
LDR             R3, [R5,#4]
CMP             R3, #0
BNE             loc_448A0

loc_4489C
BL              sub_162F0

loc_448A0
MOV             R8, R0
LDRB            R1, [R3] ; c
LDR             R0, =aPcub ; "pcub"
BL              strchr
CMP             R0, #0
BEQ             loc_4489C
LDRB            R2, [R0,#4]
LDR             R3, =dword_639C8
LDR             R7, [R5,#8]
LDR             R3, [R3,R2,LSL#2]
ORR             R8, R8, R3
LDRB            R3, [R0]
CMP             R3, #0x70 ; 'p'
BEQ             loc_44964
CMP             R7, #0
BEQ             loc_4489C
LDR             R3, [R5,#0xC]
CMP             R3, #0
BEQ             loc_4489C
MOV             R1, #0  ; dev
MOV             R0, #0xFFFFFFFF ; dev
BL              gnu_dev_major
MOV             R1, #0  ; int
MOV             R2, R0  ; int
MOV             R0, R7  ; int
BL              sub_6206C
MOV             R1, #0  ; dev
MOV             R7, R0
MOV             R0, #0xFFFFFFFF ; dev
BL              gnu_dev_minor
MOV             R1, #0  ; int
MOV             R2, R0  ; int
LDR             R0, [R5,#0xC] ; int
BL              sub_6206C
MOV             R1, R0  ; minor
MOV             R0, R7  ; major
BL              j_gnu_dev_makedev
LDR             R7, [R5,#0x10]
MOV             R2, R0
MOV             R3, R1

loc_44940
CMP             R7, #0
BNE             loc_4489C
MOV             R1, R8  ; mode
LDR             R0, [R4,R6,LSL#2] ; path
BLX             sub_62E20
CMP             R0, #0
POPEQ           {R4-R8,PC}
LDR             R0, [R4,R6,LSL#2]
BL              sub_16B90

loc_44964
MOV             R2, #0
MOV             R3, #0
B               loc_44940
; End of function sub_44868

off_44970 DCD optind
off_44974 DCD aPcub     ; "pcub"
off_44978 DCD dword_639C8



; int __fastcall sub_4497C(int, char **, const char *)
sub_4497C

var_8= -8

PUSH            {R0-R2,R4,R5,LR}
MOV             R4, R1
LDR             R0, =aTmpdir ; "TMPDIR"
BL              getenv
CMP             R0, #0
STR             R0, [SP,#0xC+var_8]
BEQ             loc_449A4
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_449AC

loc_449A4
LDR             R3, =aTmp ; "/tmp"
STR             R3, [SP,#0xC+var_8]

loc_449AC
MOV             R0, R4
ADD             R2, SP, #0xC+var_8
LDR             R1, =aDqtpU ; "^dqtp:u"
BL              sub_593CC
LDR             R3, =optind
MOV             R5, R0
LDR             R3, [R3]
LDR             R4, [R4,R3,LSL#2]
CMP             R4, #0
BNE             loc_449E4
LDR             R0, =aTmpXxxxxx ; "tmp.XXXXXX"
ORR             R5, R5, #4
BL              sub_174F8
MOV             R4, R0

loc_449E4
TST             R5, #0xC
BEQ             loc_449FC
MOV             R1, R4
LDR             R0, [SP,#0xC+var_8]
BL              sub_16998
MOV             R4, R0

loc_449FC
TST             R5, #0x10
MOV             R0, R4  ; template
BEQ             loc_44A30
BL              mktemp
LDRB            R3, [R0]
MOV             R4, R0
CMP             R3, #0

loc_44A18
BEQ             loc_44A50

loc_44A1C               ; s
MOV             R0, R4
BL              puts
MOV             R0, #0

loc_44A28
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_44A30
TST             R5, #1
BEQ             loc_44A44
BL              mkdtemp
CMP             R0, #0
B               loc_44A18

loc_44A44
BL              mkstemp64
CMP             R0, #0
BGE             loc_44A1C

loc_44A50
TST             R5, #2
BNE             loc_44A5C
BL              sub_5E304

loc_44A5C
MOV             R0, #1
B               loc_44A28
; End of function sub_4497C

off_44A64 DCD aTmpdir   ; "TMPDIR"
off_44A68 DCD aTmp      ; "/tmp"
off_44A6C DCD aDqtpU    ; "^dqtp:u"
off_44A70 DCD optind
off_44A74 DCD aTmpXxxxxx ; "tmp.XXXXXX"



; int __fastcall sub_44A78(int, char **)
sub_44A78

var_68= -0x68

LDR             R2, =aInteractive ; "interactive"
PUSH            {R4-R10,LR}
MOV             R4, R1
MOV             R5, R0
SUB             SP, SP, #0xD0
MOV             R0, R4
ADD             R1, R2, #0x2E ; '.'
BL              sub_593F8
LDR             R3, =optind
MOV             R8, R0
LDR             R3, [R3]
SUB             R0, R5, R3
ADD             R4, R4, R3,LSL#2
CMP             R0, #2
SUB             R3, R0, #0xC0000001
LDR             R9, [R4,R3,LSL#2]
BNE             loc_44ADC
MOV             R1, SP
MOV             R0, R9
BL              sub_49B90
SUBS            R6, R0, #0
MOVLT           R7, #1
BLT             loc_44B5C
ANDS            R7, R6, #2
BEQ             loc_44B70

loc_44ADC
MOV             R7, #0

loc_44AE0
LDR             R0, [R4]
BL              sub_16A54
MOV             R1, R0
MOV             R0, R9
BL              sub_16998
MOV             R1, SP
MOV             R5, R0
BL              sub_49B90
SUBS            R6, R0, #0
BLT             loc_44C48

loc_44B08
CMP             R6, #0
BNE             loc_44B78

loc_44B10               ; new
MOV             R1, R5
LDR             R0, [R4] ; old
BL              rename
CMP             R0, #0
BLT             loc_44BE4

loc_44B24
TST             R8, #8
BEQ             loc_44B3C
MOV             R2, R5
LDR             R1, [R4]
LDR             R0, =aSS_3 ; "'%s' -> '%s'\n"
BL              printf

loc_44B3C
CMP             R5, R9
BEQ             loc_44B4C
MOV             R0, R5  ; ptr
BL              free

loc_44B4C
LDR             R3, [R4,#4]
ADD             R2, R4, #4
CMP             R3, R9
BNE             loc_44B68

loc_44B5C
MOV             R0, R7
ADD             SP, SP, #0xD0
POP             {R4-R10,PC}

loc_44B68
MOV             R4, R2
B               loc_44AE0

loc_44B70
MOV             R5, R9
B               loc_44B08

loc_44B78
TST             R8, #4
BNE             loc_44B24
ANDS            R10, R8, #1
BNE             loc_44B10
MOV             R1, #2  ; type
MOV             R0, R5  ; name
BL              access
CMP             R0, #0
BLT             loc_44BD0

loc_44B9C
TST             R8, #2
BEQ             loc_44B10

loc_44BA4
LDR             R3, =stderr
MOV             R2, R5
LDR             R1, =aMvOverwriteS ; "mv: overwrite '%s'? "
LDR             R0, [R3] ; stream
BL              fprintf
CMP             R0, #0
BLT             loc_44C48
BL              sub_57700
CMP             R0, #0
BEQ             loc_44B24
B               loc_44B10

loc_44BD0               ; fd
MOV             R0, R10
BL              isatty
CMP             R0, #0
BEQ             loc_44B9C
B               loc_44BA4

loc_44BE4
LDR             R3, =dword_7DB94
LDR             R0, [R4]
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x12
BEQ             loc_44C0C

loc_44BFC
LDR             R1, [R4]
LDR             R0, =aCanTRenameS ; "can't rename '%s'"

loc_44C04
BL              sub_16AF4
B               loc_44C48

loc_44C0C
LDR             R2, =(sub_62E14+1)
ADD             R1, SP, #0xD0+var_68
BL              sub_49B28
CMP             R0, #0
BLE             loc_44BFC
CMP             R6, #0
BEQ             loc_44C78
CMP             R6, #3
BNE             loc_44C50
CMP             R0, #3
BEQ             loc_44C60
LDR             R2, =aNon ; "non-"
LDR             R1, =(asc_6B39D+1) ; ""

loc_44C40
LDR             R0, =aCanTOverwriteS ; "can't overwrite %sdirectory with %sdire"...
BL              sub_16DDC

loc_44C48
MOV             R7, #1
B               loc_44B24

loc_44C50
CMP             R0, #3
LDREQ           R2, =(asc_6B39D+1) ; ""
LDREQ           R1, =aNon ; "non-"
BEQ             loc_44C40

loc_44C60               ; name
MOV             R0, R5
BL              unlink
CMP             R0, #0
MOVLT           R1, R5
LDRLT           R0, =aCanTRemoveS ; "can't remove '%s'"
BLT             loc_44C04

loc_44C78
MOV             R2, #5
MOV             R1, R5
LDR             R0, [R4]
BL              sub_57E30
CMP             R0, #0
BLT             loc_44C48
MOV             R1, #0xC
LDR             R0, [R4]
BL              sub_6065C
CMP             R0, #0
BGE             loc_44B24
B               loc_44C48
; End of function sub_44A78

off_44CA8 DCD aInteractive ; "interactive"
off_44CAC DCD optind
off_44CB0 DCD aSS_3     ; "'%s' -> '%s'\n"
off_44CB4 DCD stderr
off_44CB8 DCD aMvOverwriteS ; "mv: overwrite '%s'? "
off_44CBC DCD dword_7DB94
off_44CC0 DCD aCanTRenameS ; "can't rename '%s'"
off_44CC4 DCD sub_62E14+1
off_44CC8 DCD aNon      ; "non-"
off_44CCC DCD asc_6B39D+1 ; ""
off_44CD0 DCD aCanTOverwriteS ; "can't overwrite %sdirectory with %sdire"...
off_44CD4 DCD aCanTRemoveS ; "can't remove '%s'"


; Attributes: noreturn

; void __fastcall __noreturn sub_44CD8(int, int)
sub_44CD8
PUSH            {R4-R8,LR}
MOV             R6, R1
MOV             R1, #0  ; who
MOV             R0, R1  ; which
BL              getpriority
LDR             R4, [R6,#4]
MOV             R7, R0
CMP             R4, #0
BNE             loc_44D10
MOV             R1, R0
LDR             R0, =(aSLineDUartSPor+0x2A) ; format
BL              printf
MOV             R0, R4
BL              sub_588D8

loc_44D10
LDRB            R3, [R4]
ADD             R5, R6, #4
CMP             R3, #0x2D ; '-'
BNE             loc_44D98
LDRB            R3, [R4,#1]
ADD             R0, R4, #1
CMP             R3, #0x6E ; 'n'
BNE             loc_44D48
LDRB            R3, [R4,#2]
ADD             R0, R4, #2
CMP             R3, #0
BNE             loc_44D50
LDR             R0, [R6,#8]
ADD             R5, R6, #8

loc_44D48
CMP             R0, #0
BEQ             loc_44D5C

loc_44D50
LDR             R3, [R5,#4]
CMP             R3, #0
BNE             loc_44D60

loc_44D5C
BL              sub_162F0

loc_44D60
ADD             R5, R5, #4
MOV             R2, #0x3FFFFFFF
MOV             R1, #0xC0000000
BL              sub_62154

loc_44D70
ADD             R7, R0, R7
MOV             R1, #0  ; who
MOV             R2, R7  ; prio
MOV             R0, R1  ; which
BL              setpriority
CMP             R0, #0
BGE             loc_44DA0
MOV             R1, R7
LDR             R0, =aSetpriorityD ; "setpriority(%d)"
BL              sub_16B40

loc_44D98
MOV             R0, #0xA
B               loc_44D70

loc_44DA0               ; argv
MOV             R0, R5
BL              sub_58840
; End of function sub_44CD8

off_44DA8 DCD aSLineDUartSPor+0x2A ; "%d\n"
off_44DAC DCD aSetpriorityD ; "setpriority(%d)"


; Attributes: noreturn

; void __fastcall __noreturn sub_44DB0(int, int)
sub_44DB0
LDR             R3, =byte_7D5F8
MOV             R2, #0x7F
PUSH            {R4-R6,LR}
STRB            R2, [R3]
LDR             R3, [R1,#4]
CMP             R3, #0
BNE             loc_44DD0
BL              sub_162F0

loc_44DD0               ; fd
MOV             R0, #0
MOV             R5, R1
BL              isatty
CMP             R0, #0
BEQ             loc_44DF8
MOV             R0, #0  ; fd
BL              close
MOV             R1, #0
LDR             R0, =aDevNull ; "/dev/null"
BL              sub_175D8

loc_44DF8               ; fd
MOV             R0, #1
BL              isatty
CMP             R0, #0
BEQ             loc_44E5C
MOV             R0, #1  ; fd
BL              close
MOV             R2, #0x180
MOVW            R1, #0x441
LDR             R0, =aNohupOut ; "nohup.out"
BL              open64
CMP             R0, #0
BGE             loc_44E94
LDR             R0, =aHome ; "HOME"
BL              getenv
SUBS            R1, R0, #0
BEQ             loc_44E8C
LDR             R1, =aNohupOut ; "nohup.out"
BL              sub_16998
MOV             R2, #0x180
MOVW            R1, #0x441
MOV             R4, R0
BL              sub_175B4

loc_44E50
MOV             R1, R4
LDR             R0, =aAppendingOutpu ; "appending output to %s"
BL              sub_16DDC

loc_44E5C               ; fd
MOV             R0, #2
BL              isatty
CMP             R0, #0
BEQ             loc_44E78
MOV             R1, #2  ; fd2
MOV             R0, #1  ; fd
BL              dup2

loc_44E78               ; handler
MOV             R1, #1
MOV             R0, R1  ; sig
BL              signal
ADD             R0, R5, #4 ; argv
BL              sub_58840

loc_44E8C
LDR             R0, =aDevNull ; "/dev/null"
BL              sub_175D8

loc_44E94
LDR             R4, =aNohupOut ; "nohup.out"
B               loc_44E50
; End of function sub_44DB0

off_44E9C DCD byte_7D5F8
off_44EA0 DCD aDevNull  ; "/dev/null"
off_44EA4 DCD aNohupOut ; "nohup.out"
off_44EA8 DCD aHome     ; "HOME"
off_44EAC DCD aAppendingOutpu ; "appending output to %s"



; int sub_44EB0()
sub_44EB0
PUSH            {LR}
SUB             SP, SP, #0x1000
SUB             SP, SP, #4
MOV             R1, #0x1000
MOV             R2, SP
MOV             R0, #0
BL              sched_getaffinity
SUBS            R1, R0, #0
MOVNE           R1, #1
BNE             loc_44EFC
MOV             R3, R1

loc_44EDC
LDR             R2, [SP,R3,LSL#2]

loc_44EE0
CMP             R2, #0
BNE             loc_44F14
ADD             R3, R3, #1
CMP             R3, #0x400
BNE             loc_44EDC
CMP             R1, #0
MOVEQ           R1, #1

loc_44EFC
LDR             R0, =(aSIsAlreadyRunn+0x16) ; "%u\n"
BL              printf
MOV             R0, #0
ADD             SP, SP, #0x1000
ADD             SP, SP, #4
POP             {PC}

loc_44F14
TST             R2, #1
MOV             R2, R2,LSR#1
ADDNE           R1, R1, #1
B               loc_44EE0
; End of function sub_44EB0

off_44F24 DCD aSIsAlreadyRunn+0x16 ; "%u\n"


; Attributes: noreturn

; void __fastcall __noreturn sub_44F28(int, char **)
sub_44F28

var_14= -0x14
var_10= -0x10
var_8= -8
var_4= -4

LDR             R3, =asc_65659 ; "\t"
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
MOV             R6, R1
ADD             R2, SP, #0x14+var_4
MOV             R0, R6
STR             R3, [R2,#-4]!
LDR             R1, =aDS_1 ; "d:s"
BL              sub_593CC
LDR             R3, =optind
TST             R0, #1
MOV             R8, R0
LDR             R7, [R3]
ADD             R4, R6, R7,LSL#2
BEQ             loc_44FE4
LDR             R1, [SP,#0x14+var_8]
LDRB            R3, [R1]
CMP             R3, #0
BNE             loc_44F7C
LDR             R0, =aDIsNotSupporte ; "-d '' is not supported"
BL              sub_16DBC

loc_44F7C
MOV             R0, R1
BL              sub_5E730
LDR             R5, [SP,#0x14+var_8]
SUB             R5, R0, R5

loc_44F8C
LDR             R3, [R6,R7,LSL#2]
MOV             R6, #0
CMP             R3, #0
LDREQ           R3, =(asc_6AE7B+3) ; "-"
STREQ           R3, [R4,#-4]
SUBEQ           R4, R4, #4
SUB             R4, R4, #4
MOV             R7, R4

loc_44FAC
LDR             R0, [R7,#4]!
CMP             R0, #0
BNE             loc_44FEC
LDR             R3, [SP,#0x14+var_8]
TST             R8, #2
LDRNE           R8, =stdout
MOVEQ           R10, R6
STR             R3, [SP,#0x14+var_14]
BEQ             loc_450C8

loc_44FD0
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_45088

loc_44FDC
MOV             R0, #0
BL              sub_588D8

loc_44FE4
MOV             R5, #1
B               loc_44F8C

loc_44FEC
BL              sub_61CD8
CMP             R0, #0
STR             R0, [R7]
BNE             loc_45000
BL              sub_16E08

loc_45000
ADD             R6, R6, #1
B               loc_44FAC

loc_45008
CMP             R6, #0
BEQ             loc_4504C
LDR             R1, [R8]
MOV             R0, R6
BL              fputs_unlocked
MOV             R0, R6  ; ptr
BL              free
LDR             R2, [SP,#0x14+var_14]
ADD             R3, R7, #1
CMP             R5, R3
LDRB            R0, [R2,R7] ; c
MOVNE           R7, R3
MOVEQ           R7, #0
CMP             R0, #0
BEQ             loc_4504C
LDR             R1, [R8] ; stream
BL              putc_unlocked

loc_4504C
MOV             R6, R9

loc_45050
LDR             R0, [R4]
BL              sub_58D24
SUBS            R9, R0, #0
BNE             loc_45008
CMP             R6, #0
BEQ             loc_4507C
MOV             R1, R6
LDR             R0, =(aSS_2+3) ; format
BL              printf
MOV             R0, R6  ; ptr
BL              free

loc_4507C
LDR             R0, [R4]
BL              sub_5888C
B               loc_44FD0

loc_45088
MOV             R6, #0
MOV             R7, R6
B               loc_45050

loc_45094
LDR             R0, [R9,#4]!
CMP             R0, #0
BEQ             loc_450BC
BL              sub_58D24
SUBS            R11, R0, #0
BNE             loc_450E8
SUB             R10, R10, #1
LDR             R0, [R9]
BL              sub_5888C
STR             R11, [R9]

loc_450BC
ADD             R7, R7, #1

loc_450C0
CMP             R6, R7
BNE             loc_45094

loc_450C8
CMP             R10, #0
BLE             loc_44FDC
MOV             R8, #0
SUB             R3, R6, #1
MOV             R9, R4
MOV             R7, R8
STR             R3, [SP,#0x14+var_10]
B               loc_450C0

loc_450E8
LDR             R3, =stdout
LDR             R1, [R3]
BL              fputs_unlocked
MOV             R0, R11 ; ptr
BL              free
LDR             R3, [SP,#0x14+var_10]
CMP             R7, R3
BEQ             loc_45138
LDR             R2, [SP,#0x14+var_14]
ADD             R3, R8, #1
CMP             R5, R3
LDRB            R0, [R2,R8] ; c
MOVNE           R8, R3
MOVEQ           R8, #0
CMP             R0, #0
BEQ             loc_450BC

loc_45128
LDR             R3, =stdout
LDR             R1, [R3] ; stream
BL              putc_unlocked
B               loc_450BC

loc_45138
MOV             R0, #0xA
B               loc_45128
; End of function sub_44F28

off_45140 DCD asc_65659 ; "\t"
off_45144 DCD aDS_1     ; "d:s"
off_45148 DCD optind
off_4514C DCD aDIsNotSupporte ; "-d '' is not supported"
off_45150 DCD asc_6AE7B+3 ; "-"
off_45154 DCD stdout
off_45158 DCD aSS_2+3   ; "%s\n"


; Attributes: noreturn

; void __fastcall __noreturn sub_4515C(int, int)
sub_4515C
LDR             R3, [R1,#4]
PUSH            {R4-R6,LR}
CMP             R3, #0
BNE             loc_451C4
LDR             R3, =__environ
LDR             R4, [R3]
CMP             R4, #0
BNE             loc_45188

loc_4517C
MOV             R4, #0

loc_45180
MOV             R0, R4
BL              sub_588D8

loc_45188
SUB             R4, R4, #4

loc_4518C               ; s
LDR             R0, [R4,#4]!
CMP             R0, #0
BEQ             loc_4517C
BL              puts
B               loc_4518C

loc_451A0
BL              getenv
CMP             R0, #0
MOVEQ           R4, #1
BEQ             loc_451B4
BL              puts

loc_451B4               ; name
LDR             R0, [R5,#4]!
CMP             R0, #0
BNE             loc_451A0
B               loc_45180

loc_451C4
MOV             R5, R1
MOV             R4, #0
B               loc_451B4
; End of function sub_4515C

off_451D0 DCD __environ



; int __fastcall sub_451D4(char *)
sub_451D4
PUSH            {R4,LR}
MOV             R2, #0xA
MOV             R1, #0
MOV             R4, R0
BL              sub_189FC
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
POPEQ           {R4,PC}
MOV             R1, R4
LDR             R0, =aInvalidNumberS ; "invalid number '%s'"
BL              sub_16DDC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_451D4

off_45210 DCD dword_7DB94
off_45214 DCD aInvalidNumberS ; "invalid number '%s'"



; __int64 __fastcall sub_45218(char *, __int64 *)
sub_45218
MOV             R2, #0
PUSH            {R4,LR}
MOV             R4, R1
MOV             R1, R2
BL              sub_18914
STRD            R0, R1, [R4]
POP             {R4,PC}
; End of function sub_45218




; int __fastcall sub_45234(const char *, int, void (__fastcall *)(const char *, int))
sub_45234
PUSH            {R4-R8,LR}
MOV             R4, R0
LDRB            R3, [R0]
MOV             R7, R1
MOV             R6, R2
CMP             R3, #0x27 ; '''
CMPNE           R3, #0x22 ; '"'
BNE             loc_45260
LDRB            R0, [R0,#1]
BL              sub_16F64
MOV             R4, R0

loc_45260
LDR             R3, =dword_7DB94
MOV             R0, R4
MOV             R1, R7
LDR             R5, [R3]
MOV             R3, #0
STR             R3, [R5]
BLX             R6
LDR             R0, [R5]
CMP             R0, #0
POPEQ           {R4-R8,PC}
MOV             R1, R4
LDR             R0, =aInvalidNumberS ; "invalid number '%s'"
BL              sub_16DDC
MOV             R0, #1
POP             {R4-R8,PC}
; End of function sub_45234

off_4529C DCD dword_7DB94
off_452A0 DCD aInvalidNumberS ; "invalid number '%s'"



; char *__fastcall sub_452A4(const char *, int, const char *, const char *, const char *)
sub_452A4

var_14= -0x14
var_C= -0xC
var_8= -8
arg_0=  0x24

PUSH            {R4-R11,LR}
MOV             R7, R3
MOV             R3, #0
LDRB            R10, [R0,R1]
SUB             SP, SP, #0x14
MOV             R4, R0
STRB            R3, [R0,R1]
MOV             R9, R1
LDR             R1, =asc_69E26 ; ".*"
MOV             R6, R2
BL              strstr
MOV             R1, #0x2A ; '*' ; c
MOV             R11, R0
MOV             R0, R4  ; s
LDR             R5, [SP,#0x14+arg_0]
BL              strchr
LDR             R2, =dword_7DB94
MOV             R3, #0
SUB             R8, R0, #1
CMP             R8, R11
LDR             R2, [R2]
MOVNE           R8, R0
MOVEQ           R8, #0
STR             R3, [R2]
ADD             R3, R4, R9
LDRB            R2, [R3,#-1]
CMP             R2, #0x67 ; 'g'
BHI             loc_45394
CMP             R2, #0x65 ; 'e'
BCS             loc_45448
CMP             R2, #0x58 ; 'X'
BEQ             loc_453B0
BHI             loc_45344
CMP             R2, #0x45 ; 'E'
BEQ             loc_45448
CMP             R2, #0x47 ; 'G'
BEQ             loc_45448

loc_45338
STRB            R10, [R4,R9]
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_45344
CMP             R2, #0x63 ; 'c'
BEQ             loc_453C8
CMP             R2, #0x64 ; 'd'
BNE             loc_45338

loc_45354
LDR             R2, =sub_45218

loc_45358
ADD             R1, SP, #0x14+var_C
MOV             R0, R5
BL              sub_45234
CMP             R0, #0
MOVNE           R2, #0
MOVNE           R3, #0
STRDNE          R2, R3, [SP,#0x14+var_C]
CMP             R8, #0
LDRD            R2, R3, [SP,#0x14+var_C]
BNE             loc_453E8
CMP             R11, #0
BNE             loc_453D8
MOV             R0, R4  ; format
BL              printf
B               loc_45338

loc_45394
CMP             R2, #0x73 ; 's'
BEQ             loc_4540C
BHI             loc_453B8
CMP             R2, #0x69 ; 'i'
BEQ             loc_45354
CMP             R2, #0x6F ; 'o'

loc_453AC
BNE             loc_45338

loc_453B0
LDR             R2, =sub_454C0
B               loc_45358

loc_453B8
CMP             R2, #0x75 ; 'u'
BEQ             loc_453B0
CMP             R2, #0x78 ; 'x'
B               loc_453AC

loc_453C8
LDRB            R1, [R5]
MOV             R0, R4  ; format
BL              printf
B               loc_45338

loc_453D8
MOV             R1, R7

loc_453DC               ; format
MOV             R0, R4
BL              printf
B               loc_45338

loc_453E8
CMP             R11, #0
MOVEQ           R1, R6
BEQ             loc_453DC
STRD            R2, R3, [SP,#0x14+var_14]
MOV             R1, R6
MOV             R2, R7
MOV             R0, R4  ; format
BL              printf
B               loc_45338

loc_4540C
CMP             R8, #0
MOV             R3, R5
BNE             loc_45434
CMP             R11, #0
MOV             R2, R5
MOVEQ           R1, R5
MOVNE           R1, R7

loc_45428               ; format
MOV             R0, R4
BL              printf
B               loc_45338

loc_45434
CMP             R11, #0
MOV             R1, R6
MOVNE           R2, R7
MOVEQ           R2, R5
B               loc_45428

loc_45448
LDR             R2, =sub_4550C
ADD             R1, SP, #0x14+var_C
MOV             R0, R5
BL              sub_45234
CMP             R8, #0
LDRD            R2, R3, [SP,#0x14+var_C]
BNE             loc_45488
CMP             R11, #0
BNE             loc_45478
MOV             R0, R4  ; format
BL              printf
B               loc_45338

loc_45478
MOV             R1, R7

loc_4547C               ; format
MOV             R0, R4
BL              printf
B               loc_45338

loc_45488
CMP             R11, #0
MOVEQ           R1, R6
BEQ             loc_4547C
STRD            R2, R3, [SP,#0x14+var_14]
MOV             R1, R6
MOV             R2, R7
MOV             R0, R4  ; format
BL              printf
B               loc_45338
; End of function sub_452A4

off_454AC DCD asc_69E26 ; ".*"
off_454B0 DCD dword_7DB94
off_454B4 DCD sub_45218
off_454B8 DCD sub_454C0
off_454BC DCD sub_4550C



; __int64 __fastcall sub_454C0(char *, __int64 *)
sub_454C0
MOV             R2, #0
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R1, R2
MOV             R5, R0
BL              sub_188A4
LDR             R3, =dword_7DB94
STRD            R0, R1, [R4]
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
POPEQ           {R4-R6,PC}
MOV             R2, #0
MOV             R0, R5
MOV             R1, R2
BL              sub_18914
STRD            R0, R1, [R4]
POP             {R4-R6,PC}
; End of function sub_454C0

off_45508 DCD dword_7DB94



; double __fastcall sub_4550C(const char *, char *)
sub_4550C

endptr= -4

PUSH            {R0,R1,R4,LR}
MOV             R4, R1
ADD             R1, SP, #8+endptr ; endptr
BL              strtod
LDR             R3, [SP,#8+endptr]
VSTR            D0, [R4]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_4554C
LDR             R3, =dword_7DB94
MOV             R2, #0x22 ; '"'
LDR             R3, [R3]
STR             R2, [R3]
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R4]

loc_4554C
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_4550C

off_45554 DCD dword_7DB94



; int __fastcall sub_45558(int, int)
sub_45558

var_1C= -0x1C
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R0, #1  ; fd
SUB             SP, SP, #0x1C
MOV             R6, R1
MOV             R1, #3  ; cmd
BL              fcntl
CMN             R0, #1
BEQ             loc_45934
LDR             R3, [R6,#4]
CMP             R3, #0
BEQ             loc_455A8
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BNE             loc_455A8
LDRB            R2, [R3,#1]
CMP             R2, #0x2D ; '-'
BNE             loc_455A8
LDRB            R3, [R3,#2]
CMP             R3, #0
ADDEQ           R6, R6, #4

loc_455A8
LDR             R3, [R6,#4]
CMP             R3, #0
STR             R3, [SP,#0x1C+var_10]
BNE             loc_455E4
LDR             R3, =dword_7DB90
LDR             R3, [R3]
LDRB            R3, [R3]
CMP             R3, #0x70 ; 'p'
BEQ             loc_455E0
LDR             R0, =aUsagePrintfFor ; "usage: printf FORMAT [ARGUMENT...]"
BL              sub_16DDC
MOV             R0, #2

loc_455D8
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_455E0
BL              sub_162F0

loc_455E4
ADD             R6, R6, #8
MOV             R3, #0
STR             R3, [SP,#0x1C+var_14]

loc_455F0
LDR             R3, [SP,#0x1C+var_10]
MOV             R5, R6
STR             R3, [SP,#0x1C+var_C]

loc_455FC
LDR             R7, [SP,#0x1C+var_C]
LDRB            R0, [R7] ; c
CMP             R0, #0
BEQ             loc_45834
CMP             R0, #0x25 ; '%'
BEQ             loc_4562C
CMP             R0, #0x5C ; '\'
BEQ             loc_45904
BL              putchar_unlocked
B               loc_45648

loc_45624
MOV             R6, R5
B               loc_455F0

loc_4562C
ADD             R3, R7, #1
STR             R3, [SP,#0x1C+var_C]
LDRB            R1, [R7,#1] ; c
CMP             R1, #0x25 ; '%'
BNE             loc_45658
MOV             R0, R1  ; c
BL              j_putchar_unlocked

loc_45648
LDR             R3, [SP,#0x1C+var_C]
ADD             R3, R3, #1
STR             R3, [SP,#0x1C+var_C]
B               loc_455FC

loc_45658
CMP             R1, #0x62 ; 'b'
BNE             loc_456D0
LDR             R3, [R5]
CMP             R3, #0
BEQ             loc_45648

loc_4566C
LDRB            R0, [R3]
CMP             R0, #0
ADDEQ           R5, R5, #4
BEQ             loc_45648
CMP             R0, #0x5C ; '\'
ADD             R4, R3, #1
BNE             loc_456B4
LDRB            R2, [R3,#1]
CMP             R2, #0x30 ; '0'
BNE             loc_456C0
LDRB            R2, [R3,#2]
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #7
ADDLS           R4, R3, #2

loc_456A4
ADD             R0, SP, #0x1C+var_8
STR             R4, [SP,#0x1C+var_8]
BL              sub_5E668
LDR             R4, [SP,#0x1C+var_8]

loc_456B4
BL              putchar_unlocked
MOV             R3, R4
B               loc_4566C

loc_456C0
CMP             R2, #0x63 ; 'c'
BNE             loc_456A4

loc_456C8
MOV             R5, R6
B               loc_45848

loc_456D0
CMP             R1, #0
BEQ             loc_456F4
LDR             R0, =asc_69E4C ; "-+ #"
BL              strchr
CMP             R0, #0
ADDNE           R3, R7, #2
MOVNE           R4, #2
STRNE           R3, [SP,#0x1C+var_C]
BNE             loc_456F8

loc_456F4
MOV             R4, #1

loc_456F8
LDR             R3, [SP,#0x1C+var_C]
LDRB            R2, [R3]
CMP             R2, #0x2A ; '*'
BNE             loc_4573C
LDR             R0, [R5]
ADD             R3, R3, #1
STR             R3, [SP,#0x1C+var_C]
ADD             R4, R4, #1
CMP             R0, #0
BEQ             loc_45728
ADD             R5, R5, #4
BL              sub_451D4

loc_45728
MOV             R9, R0
B               loc_45754

loc_45730
ADD             R4, R4, #1
ADD             R3, R3, #1
STR             R3, [SP,#0x1C+var_C]

loc_4573C
LDR             R3, [SP,#0x1C+var_C]
LDRB            R2, [R3]
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #9
BLS             loc_45730
MOV             R9, #0

loc_45754
LDR             R3, [SP,#0x1C+var_C]
LDRB            R2, [R3]
CMP             R2, #0x2E ; '.'
BNE             loc_45860
ADD             R2, R3, #1
ADD             R8, R4, #1
STR             R2, [SP,#0x1C+var_C]
LDRB            R2, [R3,#1]
CMP             R2, #0x2A ; '*'
BNE             loc_457B0
LDR             R0, [R5]
ADD             R3, R3, #2
STR             R3, [SP,#0x1C+var_C]
ADD             R8, R4, #2
CMP             R0, #0
BEQ             loc_4579C
ADD             R5, R5, #4
BL              sub_451D4

loc_4579C
MOV             R11, R0
B               loc_457D4

loc_457A4
ADD             R8, R8, #1
ADD             R3, R3, #1
STR             R3, [SP,#0x1C+var_C]

loc_457B0
LDR             R3, [SP,#0x1C+var_C]
LDRB            R2, [R3]
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #9
BLS             loc_457A4

loc_457C4
MOV             R11, #0
B               loc_457D4

loc_457CC
ADD             R1, R0, #1
BL              sub_60B4C

loc_457D4
LDR             R0, [SP,#0x1C+var_C]
LDRB            R4, [R0]
CMP             R4, #0x68 ; 'h'
CMPNE           R4, #0x7A ; 'z'
ORR             R1, R4, #0x20 ; ' '
MOVEQ           R2, #1
MOVNE           R2, #0
CMP             R1, #0x6C ; 'l'
ORREQ           R2, R2, #1
CMP             R2, #0
BNE             loc_457CC
MOV             R1, R4  ; c
LDR             R0, =aDiouxxfeeggcs ; "diouxXfeEgGcs"
CLZ             R4, R4
MOV             R4, R4,LSR#5
BL              strchr
CMP             R0, #0
MOVEQ           R4, #1
CMP             R4, #0
BEQ             loc_45868
SUB             R5, R6, #4
MOV             R1, R7
LDR             R0, =aSInvalidFormat ; "%s: invalid format"
BL              sub_16DDC

loc_45834
CMP             R6, R5
BCS             loc_45848
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_45624

loc_45848
LDR             R3, [SP,#0x1C+var_14]
CMP             R6, R5
CMPLS           R3, #0
MOVNE           R0, #1
MOVEQ           R0, #0
B               loc_455D8

loc_45860
MOV             R8, R4
B               loc_457C4

loc_45868
LDR             R3, =aDiouxxfeeggcs ; "diouxXfeEgGcs"
ADD             R10, R8, #1
SUB             R0, R0, R3
CMP             R0, #5
BGT             loc_458B4
ADD             R0, R8, #4
BL              sub_1748C
MOV             R2, R10 ; n
MOV             R4, R0
MOV             R1, R7  ; src
MOV             R7, R4
BL              memcpy
LDRB            R1, [R4,R8]
ADD             R2, R4, R8
STRB            R1, [R2,#2]
MOV             R2, #0x6C ; 'l'
STRB            R2, [R4,R8]
STRB            R2, [R4,R10]
ADD             R10, R8, #3

loc_458B4
LDR             R2, [R5]
MOV             R0, R7
MOV             R1, R10
CMP             R2, #0
LDREQ           R3, =(asc_6B39D+1) ; ""
ADDNE           R5, R5, #4
STRNE           R2, [SP,#0x1C+var_1C]
MOV             R2, R9
STREQ           R3, [SP,#0x1C+var_1C]
MOV             R3, R11
BL              sub_452A4
LDR             R3, =dword_7DB94
MOV             R0, R4  ; ptr
LDR             R2, [SP,#0x1C+var_14]
LDR             R3, [R3]
LDR             R3, [R3]
ORR             R3, R2, R3
STR             R3, [SP,#0x1C+var_14]
BL              free
B               loc_45648

loc_45904
ADD             R3, R7, #1
STR             R3, [SP,#0x1C+var_C]
LDRB            R3, [R7,#1]
CMP             R3, #0x63 ; 'c'
BEQ             loc_456C8
ADD             R0, SP, #0x1C+var_C
BL              sub_5E668
BL              j_putchar_unlocked
LDR             R3, [SP,#0x1C+var_C]
SUB             R3, R3, #1
STR             R3, [SP,#0x1C+var_C]
B               loc_45648

loc_45934
MOV             R0, #1
B               loc_455D8
; End of function sub_45558

off_4593C DCD dword_7DB90
off_45940 DCD aUsagePrintfFor ; "usage: printf FORMAT [ARGUMENT...]"
off_45944 DCD asc_69E4C ; "-+ #"
off_45948 DCD aDiouxxfeeggcs ; "diouxXfeEgGcs"
off_4594C DCD aSInvalidFormat ; "%s: invalid format"
off_45950 DCD asc_6B39D+1 ; ""
off_45954 DCD dword_7DB94



; int sub_45958()
sub_45958
PUSH            {R4,LR}
MOV             R0, #0
BL              sub_624A4
SUBS            R4, R0, #0
BEQ             loc_45980
BL              puts
MOV             R0, R4  ; ptr
BL              free
POP             {R4,LR}
B               sub_177D8

loc_45980
MOV             R0, #1
POP             {R4,PC}
; End of function sub_45958




; int __fastcall sub_45988(int, char **)
sub_45988
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R0, R4
LDR             R1, =aFnvsq ; "^fnvsq"
BL              sub_593CC
LDR             R3, =optind
MOV             R5, R0
ANDS            R2, R5, #4
LDR             R3, [R3]
LDR             R0, [R4,R3,LSL#2]
LDREQ           R3, =dword_7D4BC
STREQ           R2, [R3]
TST             R5, #1
BEQ             loc_459F8
BL              sub_17CF8

loc_459C4
CMP             R0, #0
MOV             R4, R0
BEQ             loc_45A00
LDR             R3, =(aSS_2+3) ; "%s\n"
TST             R5, #2
MOV             R1, R0
LDR             R0, =(aSS_8+3) ; "%s"
MOVEQ           R0, R3  ; format
BL              printf
MOV             R0, R4  ; ptr
BL              free
MOV             R0, #0
BL              sub_588D8

loc_459F8
BL              sub_17C9C
B               loc_459C4

loc_45A00
MOV             R0, #1
POP             {R4-R6,PC}
; End of function sub_45988

off_45A08 DCD aFnvsq    ; "^fnvsq"
off_45A0C DCD optind
off_45A10 DCD dword_7D4BC
off_45A14 DCD aSS_2+3   ; "%s\n"
off_45A18 DCD aSS_8+3   ; "%s"


; Attributes: noreturn

; void __fastcall __noreturn sub_45A1C(int, int)
sub_45A1C
LDR             R3, [R1,#4]
PUSH            {R4-R6,LR}
CMP             R3, #0
BNE             loc_45A30
BL              sub_162F0

loc_45A30
ADD             R4, R1, #4
MOV             R5, #0

loc_45A38
LDR             R0, [R4]
BL              sub_17CF8
SUBS            R6, R0, #0
BEQ             loc_45A68
BL              puts
MOV             R0, R6  ; ptr
BL              free

loc_45A54
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_45A38
MOV             R0, R5
BL              sub_588D8

loc_45A68
LDR             R0, [R4]
MOV             R5, #1
BL              sub_16B80
B               loc_45A54
; End of function sub_45A1C




; int __fastcall sub_45A78(int, char **)
sub_45A78
PUSH            {R4-R8,LR}
MOV             R4, R1
MOV             R0, R4
LDR             R1, =aFirrv ; "^fiRrv"
BL              sub_593CC
LDR             R3, =optind
TST             R0, #1
MOVNE           R5, #8
MOVEQ           R5, #0
TST             R0, #2
LDR             R3, [R3]
ORRNE           R5, R5, #0x10
TST             R0, #0xC
ORRNE           R5, R5, #4
TST             R0, #0x10
ORRNE           R5, R5, #0x1000
ADD             R6, R4, R3,LSL#2
LDR             R4, [R4,R3,LSL#2]
CMP             R4, #0
BEQ             loc_45B3C
LDR             R7, =aCanTRemoveOr ; "can't remove '.' or '..'"
MOV             R4, #0

loc_45AD0
LDR             R0, [R6]
BL              sub_16A54
LDRB            R3, [R0]
CMP             R3, #0x2E ; '.'
BNE             loc_45B24
LDRB            R3, [R0,#1]
CMP             R3, #0
BEQ             loc_45B04
CMP             R3, #0x2E ; '.'
BNE             loc_45B24
LDRB            R3, [R0,#2]
CMP             R3, #0
BNE             loc_45B24

loc_45B04
MOV             R4, #1
MOV             R0, R7
BL              sub_16DDC

loc_45B10
LDR             R3, [R6,#4]!
CMP             R3, #0
BNE             loc_45AD0

loc_45B1C
MOV             R0, R4
POP             {R4-R8,PC}

loc_45B24
MOV             R1, R5
LDR             R0, [R6]
BL              sub_6065C
CMP             R0, #0
MOVLT           R4, #1
B               loc_45B10

loc_45B3C
TST             R5, #8
BNE             loc_45B1C
BL              sub_162F0
; End of function sub_45A78

off_45B48 DCD aFirrv    ; "^fiRrv"
off_45B4C DCD optind
off_45B50 DCD aCanTRemoveOr ; "can't remove '.' or '..'"



; int __fastcall sub_45B54(int, char **)
sub_45B54
PUSH            {R4-R10,LR}
MOV             R4, R1
LDR             R2, =aParents ; "parents"
MOV             R0, R4
LDR             R1, =(aMPv+2) ; "pv"
BL              sub_593F8
LDR             R3, =optind
LDR             R3, [R3]
ADD             R5, R4, R3,LSL#2
LDR             R3, [R4,R3,LSL#2]
CMP             R3, #0
BNE             loc_45B88
BL              sub_162F0

loc_45B88
LDR             R8, =aRmdirRemovingD ; "rmdir: removing directory, '%s'\n"
MOV             R6, R0
MOV             R7, #0
AND             R9, R0, #1

loc_45B98
LDR             R4, [R5]
AND             R10, R6, #2

loc_45BA0
CMP             R10, #0
BEQ             loc_45BB4
MOV             R1, R4
MOV             R0, R8  ; format
BL              printf

loc_45BB4               ; path
MOV             R0, R4
BL              rmdir
CMP             R0, #0
BGE             loc_45C04
TST             R6, #4
BEQ             loc_45BE0
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x27 ; '''
BEQ             loc_45BF0

loc_45BE0
MOV             R7, #1
MOV             R1, R4
LDR             R0, =(aStartingPidUTt+0x1B) ; "'%s'"
BL              sub_16AF4

loc_45BF0
LDR             R3, [R5,#4]!
CMP             R3, #0
BNE             loc_45B98
MOV             R0, R7
POP             {R4-R10,PC}

loc_45C04
CMP             R9, #0
BEQ             loc_45BF0
MOV             R0, R4  ; path
BL              dirname
LDRB            R3, [R0]
MOV             R4, R0
CMP             R3, #0x2E ; '.'
BNE             loc_45BA0
LDRB            R3, [R0,#1]
CMP             R3, #0
BNE             loc_45BA0
B               loc_45BF0
; End of function sub_45B54

off_45C34 DCD aParents  ; "parents"
off_45C38 DCD aMPv+2    ; "pv"
off_45C3C DCD optind
off_45C40 DCD aRmdirRemovingD ; "rmdir: removing directory, '%s'\n"
off_45C44 DCD dword_7DB94
off_45C48 DCD aStartingPidUTt+0x1B ; "'%s'"



; int __fastcall sub_45C4C(int, char **)
sub_45C4C

var_14= -0x14
var_C= -0xC
endptr= -8
var_4= -4

LDR             R3, =(aShellReturnedI+0x13) ; "\n"
PUSH            {R4-R9,LR}
MOV             R8, R1
VPUSH           {D8-D10}
SUB             SP, SP, #0x14
ADD             R2, SP, #0x14+var_4
MOV             R4, R0
STR             R3, [R2,#-8]!
MOV             R0, R8
LDR             R1, =aWs ; "+ws:"
BL              sub_593CC
LDR             R3, =optind
MOV             R7, R0
LDR             R9, [R3]
LDR             R3, =dword_7DB94
SUB             R4, R4, R9
LDR             R5, [R3]
CMP             R4, #2
MOV             R3, #0
ADD             R6, R8, R9,LSL#2
STR             R3, [R5]
BEQ             loc_45D6C
CMP             R4, #3
BEQ             loc_45CB8
CMP             R4, #1
BEQ             loc_45D74

loc_45CB4
BL              sub_162F0

loc_45CB8               ; endptr
ADD             R1, SP, #0x14+endptr
LDR             R0, [R6,#4] ; nptr
BL              strtod
LDR             R3, [SP,#0x14+endptr]
VMOV.F64        D8, D0
LDRB            R2, [R3]
LDR             R3, [R5]
ORR             R3, R3, R2
STR             R3, [R5]

loc_45CDC               ; endptr
ADD             R1, SP, #0x14+endptr
LDR             R0, [R8,R9,LSL#2] ; nptr
BL              strtod
LDR             R3, [SP,#0x14+endptr]
VMOV.F64        D9, D0
LDRB            R2, [R3]
LDR             R3, [R5]
ORR             R3, R3, R2
STR             R3, [R5]

loc_45D00
SUB             R4, R4, #0xC0000001
ADD             R1, SP, #0x14+endptr ; endptr
LDR             R0, [R6,R4,LSL#2] ; nptr
BL              strtod
LDR             R3, [R5]
VMOV.F64        D10, D0
CMP             R3, #0
BNE             loc_45CB4
LDR             R3, [SP,#0x14+endptr]
LDRB            R4, [R3]
CMP             R4, #0
BNE             loc_45CB4
MOV             R5, R4

loc_45D34
LDR             R8, [R6]
MOV             R1, #0x2E ; '.'
MOV             R0, R8
BL              strchrnul
SUB             R8, R0, R8
BL              strlen
LDR             R3, [R6,#4]!
CMP             R5, R8
MOVCC           R5, R8
CMP             R3, #0
BEQ             loc_45D80
CMP             R4, R0
MOVCC           R4, R0
B               loc_45D34

loc_45D6C
VMOV.F64        D8, #1.0
B               loc_45CDC

loc_45D74
VMOV.F64        D8, #1.0
VMOV.F64        D9, D8
B               loc_45D00

loc_45D80
CMP             R4, #0
MOVEQ           R6, R4
BEQ             loc_45D94
SUBS            R6, R4, #1
ADDNE           R5, R5, R4

loc_45D94
TST             R7, #1
LDR             R1, =(asc_6B39D+1) ; ""
LDR             R7, =aS0F ; "%s%0*.*f"
MOVEQ           R5, #0
VMOV.F64        D7, D9
MOV             R4, #0

loc_45DAC
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
VCMPE.F64       D7, D10
BLT             loc_45E24
VMRS            APSR_nzcv, FPSCR
MOVLS           R3, #1
MOVHI           R3, #0

loc_45DC8
CMP             R3, #0
BEQ             loc_45DEC
VSTR            D7, [SP,#0x14+var_14]
MOV             R3, R6
MOV             R2, R5
MOV             R0, R7  ; format
BL              printf
CMP             R0, #0
BGE             loc_45E04

loc_45DEC
CMP             R4, #0
BNE             loc_45E34

loc_45DF4
BL              sub_177D8
ADD             SP, SP, #0x14
VPOP            {D8-D10}
POP             {R4-R9,PC}

loc_45E04
ADD             R4, R4, #1
VMOV.F64        D6, D9
LDR             R1, [SP,#0x14+var_C]
VMOV            S15, R4
VCVT.F64.U32    D7, S15
VMLA.F64        D6, D7, D8
VMOV.F64        D7, D6
B               loc_45DAC

loc_45E24
VMRS            APSR_nzcv, FPSCR
MOVGE           R3, #1
MOVLT           R3, #0
B               loc_45DC8

loc_45E34               ; c
MOV             R0, #0xA
BL              j_putchar_unlocked
B               loc_45DF4
; End of function sub_45C4C

off_45E40 DCD aShellReturnedI+0x13 ; "\n"
off_45E44 DCD aWs       ; "+ws:"
off_45E48 DCD optind
off_45E4C DCD dword_7DB94
off_45E50 DCD asc_6B39D+1 ; ""
off_45E54 DCD aS0F      ; "%s%0*.*f"



; unsigned int __fastcall sub_45E58(const char **endptr)
sub_45E58
MOV             R1, R0  ; endptr
LDR             R0, [R0] ; nptr
PUSH            {R4,LR}
LDRB            R3, [R0]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
BLS             loc_45E7C

loc_45E74
LDR             R0, =aBadFieldSpecif ; "bad field specification"
BL              sub_16DBC

loc_45E7C               ; base
MOV             R2, #0xA
BL              strtoul
CMP             R0, #0
POPNE           {R4,PC}
B               loc_45E74
; End of function sub_45E58

off_45E90 DCD aBadFieldSpecif ; "bad field specification"



; char *__fastcall sub_45E94(char *s, _DWORD *, int)
sub_45E94

var_10= -0x10
var_C= -0xC
var_8= -8

LDR             R3, [R1,#4]
PUSH            {R4-R11,LR}
MOV             R4, R0
SUB             SP, SP, #0x14
MOV             R7, R1
CMP             R3, #1
MOV             R6, R2
LDR             R11, [R1,#8]
LDR             R8, [R1,#0x10]
BNE             loc_45EE4
CMP             R11, #0
BNE             loc_45EE4
LDR             R3, [R1,#0xC]
CMP             R3, #0
BNE             loc_45EE4
CMP             R8, #0
BNE             loc_45EE4
LDR             R3, =0x80000E80
TST             R2, R3
BEQ             loc_45FFC

loc_45EE4               ; s
MOV             R0, R4
BL              strlen
LDR             R3, =byte_7D782
MOV             LR, #0
MOV             R2, LR
LDRB            R3, [R3]
STR             R3, [SP,#0x14+var_10]

loc_45F00
ADD             R3, R7, R2,LSL#3
LDR             R1, [R3,#4]
CMP             R1, #0
MOVEQ           R3, R0
BEQ             loc_45F48
MOV             R12, #0
MOV             R9, #1
MOV             R3, R12
ADD             R1, R1, R2
STR             R1, [SP,#0x14+var_8]

loc_45F28
LDR             R1, [SP,#0x14+var_8]
CMP             R1, R9
BHI             loc_46010
CMP             R12, #0
MOVNE           R12, LR
MOVEQ           R12, #0
CMP             R12, #0
SUBNE           R3, R3, #1

loc_45F48
CMP             R2, #0
EOR             LR, LR, #1
MOVEQ           R5, R3
CMP             R2, #1
BNE             loc_46008
TST             R6, #0x80
BEQ             loc_45F80
ADD             R2, R4, R5

loc_45F68
SUB             R5, R2, R4
LDRB            R1, [R2],#1
SUB             R12, R1, #9
CMP             R1, #0x20 ; ' '
CMPNE           R12, #4
BLS             loc_45F68

loc_45F80
CMP             R6, #0
ADDLT           R1, R4, R3
BLT             loc_4608C

loc_45F8C
CMP             R8, #0
BEQ             loc_45FA0
CMP             R8, R0
MOVLT           R3, R8
MOVGE           R3, R0

loc_45FA0
CMP             R11, #0
BEQ             loc_45FB8
SUB             R2, R11, #1
ADD             R5, R2, R5
CMP             R5, R0
MOVGE           R5, R0

loc_45FB8
CMP             R5, R3
RSBGE           R1, R5, R5
RSBLT           R1, R5, R3
ADD             R0, R4, R5
BL              sub_1751C
TST             R6, #0x200
MOV             R4, R0
MOVNE           R2, #0
SUBNE           R0, R0, #1
BNE             loc_460E0

loc_45FE0
TST             R6, #0x800
SUBNE           R0, R4, #1
MOVNE           R2, #0
BNE             loc_46104

loc_45FF0
TST             R6, #0x400
SUBNE           R2, R4, #1
BNE             loc_46130

loc_45FFC
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_46008
MOV             R2, #1
B               loc_45F00

loc_46010
LDR             R1, [SP,#0x14+var_10]
CMP             R1, #0
ADDEQ           R3, R4, R3
BEQ             loc_46044

loc_46020
LDRB            R12, [R4,R3]
CMP             R12, #0
BEQ             loc_4603C
LDR             R1, [SP,#0x14+var_10]
ADD             R3, R3, #1
CMP             R1, R12
BNE             loc_46020

loc_4603C
ADD             R9, R9, #1
B               loc_45F28

loc_46044
SUB             R1, R3, R4
LDRB            R10, [R3],#1
STR             R1, [SP,#0x14+var_C]
SUB             R1, R10, #9
CMP             R10, #0x20 ; ' '
CMPNE           R1, #4
BLS             loc_46044
LDR             R3, [SP,#0x14+var_C]
ADD             R1, R4, R3

loc_46068
SUB             R3, R1, R4
LDRB            R10, [R1],#1
TST             R10, #0xDF
BEQ             loc_4603C
SUB             R10, R10, #9
CMP             R10, #4
BLS             loc_4603C
B               loc_46068

loc_46088
SUB             R3, R3, #1

loc_4608C
CMP             R5, R3
BGE             loc_45F8C
LDRB            R2, [R1,#-1]!
SUB             R12, R2, #9
CMP             R2, #0x20 ; ' '
CMPNE           R12, #4
BLS             loc_46088
B               loc_45F8C

loc_460AC
SUB             R1, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R1, #4
BLS             loc_460D8
SUB             R1, R3, #0x30 ; '0'
CMP             R1, #9
BLS             loc_460D8
ORR             R1, R3, #0x20 ; ' '
SUB             R1, R1, #0x61 ; 'a'
CMP             R1, #0x19
BHI             loc_460E0

loc_460D8
STRB            R3, [R4,R2]
ADD             R2, R2, #1

loc_460E0
LDRB            R3, [R0,#1]!
CMP             R3, #0
BNE             loc_460AC
STRB            R3, [R4,R2]
B               loc_45FE0

loc_460F4
SUB             R12, R3, #0x20 ; ' '
CMP             R12, #0x5E ; '^'
ADDLS           R2, R2, #1
STRBLS          R3, [R1]

loc_46104
LDRB            R3, [R0,#1]!
ADD             R1, R4, R2
CMP             R3, #0
BNE             loc_460F4
STRB            R3, [R1]
B               loc_45FF0

loc_4611C
SUB             R1, R3, #0x61 ; 'a'
CMP             R1, #0x19
SUBLS           R3, R3, #0x20 ; ' '
UXTBLS          R3, R3
STRB            R3, [R2]

loc_46130
LDRB            R3, [R2,#1]!
CMP             R3, #0
BNE             loc_4611C
B               loc_45FFC
; End of function sub_45E94

dword_46140 DCD 0x80000E80
off_46144 DCD byte_7D782



; int __fastcall sub_46148(char **, char **)
sub_46148

var_3C= -0x3C
var_38= -0x38
endptr= -0x34
var_30= -0x30
var_20= -0x20

LDR             R3, =dword_7DBC0
LDR             R2, =dword_7D740
PUSH            {R4-R11,LR}
MOV             R8, R0
LDR             R4, [R3]
MOV             R9, R1
MOV             R11, #0
LDR             R7, [R2]
LDR             R10, =aB ; "%b"
VPUSH           {D8}
SUB             SP, SP, #0x3C
STR             R3, [SP,#0x3C+var_3C]

loc_46178
MOVS            R3, R7
MOVNE           R3, #1
CMP             R11, #0
MOVNE           R3, #0
CMP             R3, #0
BNE             loc_46200
CMP             R11, #0
BNE             loc_461E8
LDR             R3, [SP,#0x3C+var_3C]
LDR             R3, [R3]
TST             R3, #0x20
BEQ             loc_46428
LDR             R7, [R8]
MOV             R0, R7  ; s
BL              strlen
LDR             R6, [R9]
MOV             R5, R0
ADD             R5, R5, #4
BIC             R5, R5, #3
MOV             R0, R6  ; s
BL              strlen
ADD             R0, R0, #4
LDR             R2, [R7,R5]
BIC             R0, R0, #3
LDR             R3, [R6,R0]
CMP             R2, R3
MOVLS           R11, #0xFFFFFFFF
MOVHI           R11, #1

loc_461E8
TST             R4, #0x100
RSBNE           R11, R11, #0
MOV             R0, R11
ADD             SP, SP, #0x3C ; '<'
VPOP            {D8}
POP             {R4-R11,PC}

loc_46200
LDR             R4, [R7,#0x14]
MOV             R1, R7
LDR             R0, [R8] ; s
CMP             R4, #0
LDREQ           R3, [SP,#0x3C+var_3C]
LDREQ           R4, [R3]
MOV             R2, R4
AND             R11, R4, #7
BL              sub_45E94
MOV             R2, R4
MOV             R6, R0
MOV             R1, R7
LDR             R0, [R9] ; s
BL              sub_45E94
MOV             R5, R0
CMP             R11, #4 ; switch 5 cases
LDRLS           PC, [PC,R11,LSL#2] ; switch jump
B               def_46240 ; jumptable 00046240 default case, case 3
jpt_46240 DCD loc_46264 ; jump table for switch statement
DCD loc_46404
DCD loc_462A4
DCD def_46240
DCD loc_463A8

def_46240               ; jumptable 00046240 default case, case 3
LDR             R0, =aUnknownSortTyp ; "unknown sort type"
BL              sub_16DBC

loc_46264               ; jumptable 00046240 case 0
MOV             R1, R0
MOV             R0, R6  ; s1
BL              strcmp
MOV             R11, R0

loc_46274
LDR             R3, [R8]
CMP             R3, R6
BEQ             loc_46288
MOV             R0, R6  ; ptr
BL              free

loc_46288
LDR             R3, [R9]
CMP             R3, R5
BEQ             loc_4629C
MOV             R0, R5  ; ptr
BL              free

loc_4629C
LDR             R7, [R7]
B               loc_46178

loc_462A4               ; jumptable 00046240 case 2
ADD             R1, SP, #0x3C+endptr
MOV             R0, R6  ; nptr
BL              strtod
ADD             R1, SP, #0x3C+var_30 ; endptr
MOV             R0, R5  ; nptr
VMOV.F64        D8, D0
BL              strtod
LDR             R3, [SP,#0x3C+endptr]
LDR             R11, [SP,#0x3C+var_30]
CMP             R3, R6
BNE             loc_462DC
SUBS            R11, R11, R5
MOVNE           R11, #0xFFFFFFFF
B               loc_46274

loc_462DC
CMP             R11, R5
BEQ             loc_463FC
VCMP.F64        D8, D8
VMRS            APSR_nzcv, FPSCR
VCMP.F64        D0, D0
BEQ             loc_46304
VMRS            APSR_nzcv, FPSCR
MOVEQ           R11, #0xFFFFFFFF
MOVNE           R11, #0
B               loc_46274

loc_46304
VMRS            APSR_nzcv, FPSCR
BNE             loc_463FC
VMOV.F64        D6, #1.0
VDIV.F64        D5, D6, D8
VDIV.F64        D7, D6, D0
VCMP.F64        D5, #0.0
VMRS            APSR_nzcv, FPSCR
BNE             loc_46370
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
VCMP.F64        D7, #0.0
BPL             loc_46354
VMRS            APSR_nzcv, FPSCR
MOVNE           R11, #0xFFFFFFFF
BNE             loc_46274
VCMPE.F64       D0, #0.0
VMRS            APSR_nzcv, FPSCR
MOVPL           R11, #0xFFFFFFFF
MOVMI           R11, #0
B               loc_46274

loc_46354
VMRS            APSR_nzcv, FPSCR
BNE             loc_463FC
VCMPE.F64       D0, #0.0
VMRS            APSR_nzcv, FPSCR
MOVLE           R11, #1
MOVGT           R11, #0
B               loc_46274

loc_46370
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
BNE             loc_46390
VCMPE.F64       D0, #0.0
VMRS            APSR_nzcv, FPSCR
MOVMI           R11, #1
MOVPL           R11, #0xFFFFFFFF
B               loc_46274

loc_46390
VCMPE.F64       D8, D0
VMRS            APSR_nzcv, FPSCR
BGT             loc_463FC

loc_4639C
MOVMI           R11, #0xFFFFFFFF
MOVPL           R11, #0
B               loc_46274

loc_463A8               ; jumptable 00046240 case 4
ADD             R2, SP, #0x3C+var_30
MOV             R1, R10
MOV             R0, R6
BL              strptime
ADD             R2, SP, #0x3C+var_30
STR             R0, [SP,#0x3C+var_38]
MOV             R1, R10
MOV             R0, R5
LDR             R11, [SP,#0x3C+var_20]
BL              strptime
LDR             R3, [SP,#0x3C+var_38]
CMP             R3, #0
BNE             loc_463EC
MOVS            R11, R0
MOVNE           R11, #1
RSB             R11, R11, #0
B               loc_46274

loc_463EC
CMP             R0, #0
LDRNE           R0, [SP,#0x3C+var_20]
SUBNE           R11, R11, R0
BNE             loc_46274

loc_463FC
MOV             R11, #1
B               loc_46274

loc_46404               ; jumptable 00046240 case 1
MOV             R0, R6
BL              atof
MOV             R0, R5  ; nptr
VMOV.F64        D8, D0
BL              atof
VCMPE.F64       D8, D0
VMRS            APSR_nzcv, FPSCR
BGT             loc_46274
B               loc_4639C

loc_46428
TST             R3, #0x40000000
BNE             loc_461E8
LDR             R1, [R9] ; s2
MOV             R4, R3
LDR             R0, [R8] ; s1
BL              strcmp
MOV             R11, R0
B               loc_461E8
; End of function sub_46148

off_46448 DCD dword_7DBC0
off_4644C DCD dword_7D740
off_46450 DCD aB        ; "%b"
off_46454 DCD aUnknownSortTyp ; "unknown sort type"


; Attributes: bp-based frame fpd=0xC

; int __fastcall sub_46458(int, char **)
sub_46458

var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
endptr= -8

PUSH            {R4-R11,LR}
MOV             R3, #0
SUB             SP, SP, #0x2C
MOV             R2, #2
MOV             R6, R1
ADD             R7, SP, #0x20
STR             R3, [SP,#0x2C+var_C]
MOV             R0, R6
LDR             R3, =byte_7D5F8
LDR             R1, =aNgmucszbrdfims ; "^ngMucszbrdfimS:T:o:k:*t:"
STRB            R2, [R3]
ADD             R3, SP, #0x2C+var_10
STR             R3, [SP,#0x2C+var_24]
ADD             R3, SP, #0x2C+var_14
STR             R3, [SP,#0x2C+var_2C]
ADD             R3, SP, #0x2C+var_18
MOV             R2, R3
STR             R7, [SP,#0x2C+var_28]
BL              sub_593CC
TST             R0, #0x80
LDRNE           R2, =dword_7DBC0
LDRNE           R3, [R2]
ORRNE           R3, R3, #0x80000000
STRNE           R3, [R2]
TST             R0, #0x20000
BEQ             loc_464EC
LDR             R2, [SP,#0x2C+var_10]
LDRB            R3, [R2]
CMP             R3, #0
BEQ             loc_464DC
LDRB            R2, [R2,#1]
CMP             R2, #0
BEQ             loc_464E4

loc_464DC
LDR             R0, =aBadTParameter ; "bad -t parameter"

loc_464E0
BL              sub_16DBC

loc_464E4
LDR             R2, =byte_7D782
STRB            R3, [R2]

loc_464EC
LDR             R8, =(aNgmucszbrdfims+1) ; "ngMucszbrdfimS:T:o:k:*t:"
B               loc_465FC

loc_464F4
MOV             R9, R4
LDR             R4, [R4]

loc_464FC
CMP             R4, #0
BNE             loc_464F4
MOV             R0, #0x18
BL              sub_174DC
STR             R0, [R9]
MOV             R5, R0
MOV             R0, R7
BL              sub_5D2FC
STR             R0, [SP,#0x2C+endptr]

loc_46520
LDR             R9, =0xFFFFF078
B               loc_465EC

loc_46528               ; endptr
ADD             R0, SP, #0x2C+endptr
ADD             R10, R5, R4,LSL#3
BL              sub_45E58
LDR             R3, [SP,#0x2C+endptr]
STR             R0, [R10,#4]
LDRB            R2, [R3]
CMP             R2, #0x2E ; '.'
BNE             loc_4655C
ADD             R3, R3, #1
ADD             R0, SP, #0x2C+endptr ; endptr
STR             R3, [SP,#0x2C+endptr]
BL              sub_45E58
STR             R0, [R10,#8]

loc_4655C
MOV             R11, #1
B               loc_465DC

loc_46564
CMP             R1, #0x2C ; ','
ADD             R10, R10, #1
BNE             loc_46588
CMP             R4, #0
ADD             R3, R4, #1
STREQ           R10, [SP,#0x2C+endptr]
MOVEQ           R4, #1
BEQ             loc_46520
MOV             R4, R3

loc_46588               ; s
MOV             R0, R8
BL              strchr
CMP             R0, #0
LDREQ           R0, =aUnknownKeyOpti ; "unknown key option"
BEQ             loc_464E0
SUB             R0, R0, R8
MOV             R3, R11,LSL R0
TST             R3, R9
LDRNE           R0, =aUnknownSortTyp ; "unknown sort type"
BNE             loc_464E0
SUB             R0, R0, #7
CMP             R4, #0
CLZ             R0, R0
LDR             R2, [R5,#0x14]
MOV             R0, R0,LSR#5
MOVEQ           R0, #0
STR             R10, [SP,#0x2C+endptr]
CMP             R0, #0
MOVNE           R3, #0x80000000
ORR             R3, R2, R3
STR             R3, [R5,#0x14]

loc_465DC
LDR             R10, [SP,#0x2C+endptr]
LDRB            R1, [R10] ; c
CMP             R1, #0
BNE             loc_46564

loc_465EC
LDR             R3, [SP,#0x2C+endptr]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_46528

loc_465FC
LDR             R3, [SP,#0x2C+var_C]
CMP             R3, #0
LDRNE           R9, =dword_7D740
LDRNE           R4, [R9]
BNE             loc_464FC
LDR             R3, =optind
MOV             R5, #0
LDR             R11, =dword_7DBC0
MOV             R4, R5
LDR             R3, [R3]
MOV             R8, R11
ADD             R7, R6, R3,LSL#2
LDR             R3, [R6,R3,LSL#2]
CMP             R3, #0
LDREQ           R3, =(asc_6AE7B+3) ; "-"
STREQ           R3, [R7,#0xC+var_10]
SUBEQ           R7, R7, #4

loc_46640
LDR             R0, [R7,#0xC+var_C]
MOV             R9, R5,LSL#2
BL              sub_61D20
MOV             R6, R0

loc_46650
LDR             R3, [R11]
TST             R3, #0x40
BEQ             loc_46698
MOV             R1, #0
MOV             R0, R6  ; stream
BL              sub_58C58

loc_46668
CMP             R0, #0
MOV             R10, R0
BEQ             loc_466A4
MOV             R2, R5
MOV             R0, R4
MOVW            R1, #0x406
ADD             R5, R5, #1
BL              sub_62544
STR             R10, [R0,R9]
MOV             R4, R0
ADD             R9, R9, #4
B               loc_46650

loc_46698
MOV             R0, R6
BL              sub_58D24
B               loc_46668

loc_466A4
MOV             R0, R6
BL              sub_5888C
LDR             R3, [R7,#0xC+endptr]!
CMP             R3, #0
BNE             loc_46640
LDR             R6, =dword_7D740
LDR             R3, [R6]
CMP             R3, #0
BNE             loc_466DC
MOV             R0, #0x18
BL              sub_174DC
MOV             R3, #1
STR             R0, [R6]
STR             R3, [R0,#4]

loc_466DC
LDR             R3, [R8]
ANDS            R6, R3, #0x10
SBFXNE          R6, R3, #3, #1
MOVNE           R7, #1
BNE             loc_467A0
TST             R3, #0x20
SUBNE           R9, R4, #4
BNE             loc_467DC

loc_466FC               ; compar
LDR             R3, =sub_46148
MOV             R2, #4  ; size
MOV             R1, R5  ; nmemb
MOV             R0, R4  ; base
BL              qsort
LDR             R3, [R8]
TST             R3, #8
BNE             loc_467E8

loc_4671C
LDR             R3, [R8]
TST             R3, #0x8000
BEQ             loc_4673C
MOVW            R1, #0x241
LDR             R0, [SP,#0x2C+var_14]
BL              sub_175D8
MOV             R1, #1
BL              sub_176A8

loc_4673C
LDR             R3, [R8]
ADD             R5, R4, R5,LSL#2
LDR             R7, =aSC ; "%s%c"
TST             R3, #0x40
MOVNE           R6, #0
MOVEQ           R6, #0xA

loc_46754
CMP             R5, R4
BNE             loc_46848
MOV             R0, #0
BL              sub_588D8

loc_46764               ; void *
MOV             R0, R4
ADD             R4, R4, #4
MOV             R1, R4  ; void *
BL              sub_46148
CMP             R0, R6
BLE             loc_4679C
LDR             R3, =stderr
MOV             R2, R7
LDR             R1, =aCheckLineU ; "Check line %u\n"
LDR             R0, [R3] ; stream
BL              fprintf
MOV             R0, #1

loc_46794
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_4679C
ADD             R7, R7, #1

loc_467A0
CMP             R7, R5
BLT             loc_46764
MOV             R0, #0
B               loc_46794

loc_467B0
LDR             R10, [R9,#4]!
MOV             R0, R10 ; s
BL              strlen
ADD             R0, R0, #4
BIC             R7, R0, #3
MOV             R0, R10
ADD             R1, R7, #0xC+endptr
BL              sub_174B4
STR             R0, [R9]
STR             R6, [R0,R7]
ADD             R6, R6, #1

loc_467DC
CMP             R6, R5
BNE             loc_467B0
B               loc_466FC

loc_467E8
ADD             R6, R4, #4
MOV             R7, #0
MOV             R9, #1
ORR             R3, R3, #0x40000000
STR             R3, [R8]

loc_467FC
CMP             R9, R5
BLT             loc_46810
CMP             R5, #0
ADDNE           R5, R7, #0xC+var_C+1
B               loc_4671C

loc_46810
ADD             R10, R4, R7,LSL#2
MOV             R1, R6  ; void *
MOV             R0, R10 ; void *
BL              sub_46148
CMP             R0, #0
LDRNE           R3, [R6]
ADDNE           R7, R7, #1
STRNE           R3, [R10,#4]
BNE             loc_4683C
LDR             R0, [R6] ; ptr
BL              free

loc_4683C
ADD             R9, R9, #1
ADD             R6, R6, #4
B               loc_467FC

loc_46848
MOV             R2, R6
LDR             R1, [R4],#4
MOV             R0, R7  ; format
BL              printf
B               loc_46754
; End of function sub_46458

off_4685C DCD byte_7D5F8
off_46860 DCD aNgmucszbrdfims ; "^ngMucszbrdfimS:T:o:k:*t:"
off_46864 DCD dword_7DBC0
off_46868 DCD aBadTParameter ; "bad -t parameter"
off_4686C DCD byte_7D782
off_46870 DCD aNgmucszbrdfims+1 ; "ngMucszbrdfimS:T:o:k:*t:"
dword_46874 DCD 0xFFFFF078
off_46878 DCD aUnknownKeyOpti ; "unknown key option"
off_4687C DCD aUnknownSortTyp ; "unknown sort type"
off_46880 DCD dword_7D740
off_46884 DCD optind
off_46888 DCD asc_6AE7B+3 ; "-"
off_4688C DCD sub_46148
off_46890 DCD aSC       ; "%s%c"
off_46894 DCD stderr
off_46898 DCD aCheckLineU ; "Check line %u\n"



; unsigned int __fastcall sub_4689C(unsigned int result, int, unsigned int *)
sub_4689C
PUSH            {R4,LR}
LDRB            R3, [R0]
CMP             R3, #3
BHI             loc_468E0
LDR             R12, =asc_6A3C6 ; "\b"
LDRB            R12, [R12,R3]
CMN             R2, R12
BEQ             loc_468E0
LDRH            LR, [R0,#2]
CMP             R1, #0
LDR             R3, [R2,R12]
LDR             R0, [R0,#4]
BIC             R3, R3, LR
BICNE           R3, R3, R0
ORREQ           R3, R3, R0
STR             R3, [R2,R12]
POP             {R4,PC}

loc_468E0
LDR             R3, =unk_639FC
ADD             R12, R3, #8
CMP             R0, R12
CMPNE           R0, R3
MOVEQ           R12, #1
MOVNE           R12, #0
BNE             loc_4691C
LDR             R3, [R2,#8]
CMP             R1, #0
BICEQ           R3, R3, #0x330
ORREQ           R3, R3, #0x120
BEQ             loc_4693C

loc_46910
BIC             R3, R3, #0x130
ORR             R3, R3, #0x30 ; '0'
B               loc_4693C

loc_4691C
ADD             LR, R3, #0x10
CMP             R0, LR
BNE             loc_46944
LDR             R3, [R2,#8]
CMP             R1, #0
BICEQ           R3, R3, #0x330
ORREQ           R3, R3, #0x320
BNE             loc_46910

loc_4693C
STR             R3, [R2,#8]
POP             {R4,PC}

loc_46944
ADD             LR, R3, #0x18
CMP             R0, LR
BNE             loc_46980
LDM             R2, {R0,R3}
CMP             R1, #0
BICNE           R3, R3, #0x2C ; ','
BICNE           R0, R0, #0x1C0
ORRNE           R3, R3, #4
BICEQ           R3, R3, #4
ORRNE           R0, R0, #0x100
BICEQ           R0, R0, #0x100
STRNE           R0, [R2]
STREQ           R0, [R2]

loc_46978
STR             R3, [R2,#4]
POP             {R4,PC}

loc_46980
ADD             LR, R3, #0x20 ; ' '
CMP             R0, LR
BNE             loc_469A0
MOV             R3, #0x7F
STRB            R3, [R2,#0x13]
MOV             R3, #0x15
STRB            R3, [R2,#0x14]
POP             {R4,PC}

loc_469A0
ADD             LR, R3, #0x28 ; '('
CMP             R0, LR
BNE             loc_46A3C
LDR             R0, =byte_643C2
MOV             R3, R12

loc_469B4
ADD             R1, R0, R3
LDRB            R12, [R3,R0]
LDRB            R1, [R1,#1]
ADD             R3, R3, #2
CMP             R3, #0x22 ; '"'
ADD             R1, R2, R1
STRB            R12, [R1,#0x11]
BNE             loc_469B4
LDR             R3, =unk_639FC
LDR             R4, =asc_6A3C6 ; "\b"
ADD             LR, R3, #0x2C8

loc_469E0
LDRB            R1, [R3]
CMP             R1, #3
BHI             loc_46A2C
LDRB            R0, [R4,R1]
CMN             R2, R0
BEQ             loc_46A2C
LDRH            R12, [R3,#2]
LDR             R1, [R2,R0]
BIC             R1, R1, R12
LDRB            R12, [R3,#1]
TST             R12, #1
LDRNE           R12, [R3,#4]
ORRNE           R1, R12, R1
BNE             loc_46A28
TST             R12, #2
BEQ             loc_46A2C
LDR             R12, [R3,#4]
BIC             R1, R1, R12

loc_46A28
STR             R1, [R2,R0]

loc_46A2C
ADD             R3, R3, #8
CMP             LR, R3
POPEQ           {R4,PC}
B               loc_469E0

loc_46A3C
ADD             R12, R3, #0x50 ; 'P'
CMP             R0, R12
BNE             loc_46A60
LDR             R3, [R2,#0xC]
CMP             R1, #0
ORRNE           R3, R3, #2
BICEQ           R3, R3, #2

loc_46A58
STR             R3, [R2,#0xC]
POP             {R4,PC}

loc_46A60
ADD             R12, R3, #0x40 ; '@'
CMP             R0, R12
BNE             loc_46A9C
LDR             R3, [R2,#8]
CMP             R1, #0
LDR             R0, [R2]
BIC             R3, R3, #0x130
ORRNE           R3, R3, #0x120
ORRNE           R0, R0, #0x20 ; ' '
ORREQ           R3, R3, #0x30 ; '0'
BICEQ           R0, R0, #0x20 ; ' '
STRNE           R3, [R2,#8]
STREQ           R3, [R2,#8]
STR             R0, [R2]
POP             {R4,PC}

loc_46A9C
ADD             R12, R3, #0x48 ; 'H'
CMP             R0, R12
BNE             loc_46AEC
LDR             R3, [R2,#8]
CMP             R1, #0
LDR             R12, [R2]
LDR             R0, [R2,#4]
BIC             R3, R3, #0x130
ORRNE           R3, R3, #0x120
ORRNE           R12, R12, #0x20 ; ' '
ORRNE           R0, R0, #1
ORREQ           R3, R3, #0x30 ; '0'
BICEQ           R12, R12, #0x20 ; ' '
BICEQ           R0, R0, #1
STRNE           R3, [R2,#8]
STRNE           R12, [R2]
STREQ           R3, [R2,#8]
STREQ           R12, [R2]
STR             R0, [R2,#4]
POP             {R4,PC}

loc_46AEC
ADD             R12, R3, #0x38 ; '8'
CMP             R0, R12
BEQ             loc_46B2C
ADD             R3, R3, #0x30 ; '0'
CMP             R0, R3
BEQ             loc_46B60
LDR             R3, =unk_63A64
CMP             R0, R3
BNE             loc_46B90
LDR             R3, [R2]
CMP             R1, #0
ORRNE           R3, R3, #0x800
BNE             loc_46B24

loc_46B20
BIC             R3, R3, #0x800

loc_46B24
STR             R3, [R2]
POP             {R4,PC}

loc_46B2C
CMP             R1, #0
BNE             loc_46B68

loc_46B34
MOV             R3, #0
STR             R3, [R2]
LDR             R3, [R2,#4]
BIC             R3, R3, #1
STR             R3, [R2,#4]
LDR             R3, [R2,#0xC]
BIC             R3, R3, #7
STR             R3, [R2,#0xC]
MOV             R3, #0x100
STRH            R3, [R2,#0x16]
POP             {R4,PC}

loc_46B60
CMP             R1, #0
BNE             loc_46B34

loc_46B68
LDR             R3, [R2]
ORR             R3, R3, #0x520
ORR             R3, R3, #6
STR             R3, [R2]
LDR             R3, [R2,#4]
ORR             R3, R3, #1
STR             R3, [R2,#4]
LDR             R3, [R2,#0xC]
ORR             R3, R3, #3
B               loc_46A58

loc_46B90
ADD             R12, R3, #8
CMP             R0, R12
BNE             loc_46BB0
LDR             R3, [R2,#4]
CMP             R1, #0
ORRNE           R3, R3, #0x1800
BICEQ           R3, R3, #0x1800
B               loc_46978

loc_46BB0
ADD             LR, R3, #0x10
ADD             R12, R3, #0x18
CMP             R0, R12
CMPNE           R0, LR
BNE             loc_46C00
LDR             R12, [R2,#0xC]
CMP             R1, #0
LDR             R0, [R2]
LDR             R3, [R2,#4]
BICNE           R12, R12, #4
ORREQ           R12, R12, #4
BICNE           R0, R0, #0x200
ORREQ           R0, R0, #0x200
STRNE           R12, [R2,#0xC]
BICNE           R3, R3, #2
STRNE           R0, [R2]
ORREQ           R3, R3, #2
STREQ           R12, [R2,#0xC]
STREQ           R0, [R2]
B               loc_46978

loc_46C00
SUB             R1, R3, #0x10
CMP             R0, R1
LDREQ           R3, [R2,#0xC]
ORREQ           R3, R3, #0xA10
BEQ             loc_46A58
SUB             R3, R3, #8
CMP             R0, R3
POPNE           {R4,PC}
MOV             R3, #3
STRB            R3, [R2,#0x11]
MOV             R3, #0x7F
STRB            R3, [R2,#0x13]
MOV             R3, #0x15
STRB            R3, [R2,#0x14]
LDR             R3, [R2,#0xC]
ORR             R3, R3, #0xA10
STR             R3, [R2,#0xC]
LDR             R3, [R2]
B               loc_46B20
; End of function sub_4689C

off_46C4C DCD asc_6A3C6 ; "\b"
off_46C50 DCD unk_639FC
off_46C54 DCD byte_643C2
off_46C58 DCD unk_63A64



; int __fastcall sub_46C5C(_DWORD *)
sub_46C5C

var_8= -8

PUSH            {R0,R1,R4-R6,LR}
MOV             R4, R0
LDR             R3, [R0,#0xC]
MOV             R5, R0
ADD             R4, R4, #0x31 ; '1'
LDR             R6, =aX_0 ; ":%x"
STR             R3, [SP,#8+var_8]
LDRD            R2, R3, [R0,#4]
LDR             R1, [R5],#0x11
LDR             R0, =aLxLxLxLx ; "%lx:%lx:%lx:%lx"
BL              printf

loc_46C88
LDRB            R1, [R5],#1
MOV             R0, R6  ; format
BL              printf
CMP             R5, R4
BNE             loc_46C88
MOV             R0, #0xA
ADD             SP, SP, #8
POP             {R4-R6,LR}
B               j_putchar_unlocked
; End of function sub_46C5C

off_46CAC DCD aX_0      ; ":%x"
off_46CB0 DCD aLxLxLxLx ; "%lx:%lx:%lx:%lx"



; int sub_46CB4(const char *, ...)
sub_46CB4

var_84= -0x84
s= -0x80
var_s0=  0
varg_r0=  0x10
varg_r1=  0x14
varg_r2=  0x18
varg_r3=  0x1C

PUSH            {R0-R3}
MOV             R1, #0x80 ; maxlen
PUSH            {R4-R6,LR}
SUB             SP, SP, #0x88
ADD             R3, SP, #0x88+varg_r1 ; arg
ADD             R0, SP, #0x88+s ; s
LDR             R2, [SP,#0x88+varg_r0] ; format
STR             R3, [SP,#0x88+var_84]
BL              vsnprintf
SUB             R5, R0, #1
CMP             R5, #0x7E ; '~'
BHI             loc_46D78
LDR             R4, =buf
MOV             R6, R0
LDR             R3, [R4,#(buf.c_cflag - 0x7D790)]
CMP             R3, #0
BEQ             loc_46D38
LDRB            R2, [SP,#0x88+s]
ADD             R3, R3, #1
STR             R3, [R4,#(buf.c_cflag - 0x7D790)]
CMP             R2, #0xA
BEQ             loc_46D38
LDR             R2, [R4,#(buf.c_oflag - 0x7D790)]
ADD             R3, R3, R0
CMP             R3, R2
MOVCS           R3, #0
MOVCS           R0, #0xA
MOVCC           R0, #0x20 ; ' ' ; c
STRBCS          R3, [R4,#(buf.c_cflag - 0x7D790)]
STRBCS          R3, [R4,#(buf.c_cflag+1 - 0x7D790)]
STRBCS          R3, [R4,#(buf.c_cflag+2 - 0x7D790)]
STRBCS          R3, [R4,#(buf.c_cflag+3 - 0x7D790)]
BL              j_putchar_unlocked

loc_46D38
LDR             R3, =stdout
ADD             R0, SP, #0x88+s
LDR             R1, [R3]
BL              fputs_unlocked
LDR             R0, [R4,#(buf.c_cflag - 0x7D790)]
ADD             R3, SP, #0x88+var_s0
ADD             R5, R3, R5
ADD             R0, R0, R6
STR             R0, [R4,#(buf.c_cflag - 0x7D790)]
LDRB            R3, [R5,#-0x80]
CMP             R3, #0xA
MOVEQ           R3, #0
STRBEQ          R3, [R4,#(buf.c_cflag - 0x7D790)]
STRBEQ          R3, [R4,#(buf.c_cflag+1 - 0x7D790)]
STRBEQ          R3, [R4,#(buf.c_cflag+2 - 0x7D790)]
STRBEQ          R3, [R4,#(buf.c_cflag+3 - 0x7D790)]

loc_46D78
ADD             SP, SP, #0x88
POP             {R4-R6,LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_46CB4

off_46D88 DCD buf
off_46D8C DCD stdout



; int sub_46D90()
sub_46D90
LDR             R3, =buf
LDR             R3, [R3,#termios.c_cflag]
CMP             R3, #0
BXEQ            LR
LDR             R0, =(aShellReturnedI+0x13) ; "\n"
B               sub_46CB4
; End of function sub_46D90

off_46DA8 DCD buf
off_46DAC DCD aShellReturnedI+0x13 ; "\n"



; int __fastcall sub_46DB0(char *s2)
sub_46DB0
MOV             R1, R0  ; s2
PUSH            {R4,LR}
LDR             R0, =aEvenp ; "evenp"
BL              sub_16880
SUBS            R3, R0, #0
LDRGE           R0, =unk_639FC
ADDGE           R0, R0, R3,LSL#3
MOVLT           R0, #0
POP             {R4,PC}
; End of function sub_46DB0

off_46DD4 DCD aEvenp    ; "evenp"
off_46DD8 DCD unk_639FC



; int __fastcall sub_46DDC(char *s2)
sub_46DDC
PUSH            {R4,LR}
MOV             R1, R0  ; s2
LDR             R0, =aLine ; "line"
BL              sub_16880
MOV             R3, R0
ADDS            R0, R0, #1
POPEQ           {R4,PC}
SUB             R3, R3, #4
CMP             R3, #1
ORRHI           R0, R0, #0x80
POP             {R4,PC}
; End of function sub_46DDC

off_46E08 DCD aLine     ; "line"



; unsigned __int8 *__fastcall sub_46E0C(unsigned __int8 *result, const char *, int)
sub_46E0C
LDR             R3, =unk_643E0
PUSH            {R4-R8,LR}
MOV             R6, R2
MOV             R7, R0
MOV             R5, R1
ADD             R2, R3, #2
CMP             R0, R2
CMPNE           R0, R3
BNE             loc_46E58

loc_46E30               ; int
LDR             R3, =unk_63CC4
MOV             R2, #0xFF ; int
MOV             R1, #0  ; int
MOV             R0, R5  ; int
BL              sub_6204C
UXTB            R4, R0

loc_46E48
LDRB            R3, [R7,#1]
ADD             R6, R6, R3
STRB            R4, [R6,#0x11]
POP             {R4-R8,PC}

loc_46E58
LDRB            R4, [R1]
CMP             R4, #0
BEQ             loc_46E48
LDRB            R8, [R1,#1]
CMP             R8, #0
BEQ             loc_46E48
LDR             R1, =asc_6A30B ; "^-"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_46EB0
LDR             R1, =aUndef ; "undef"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_46EB0
CMP             R4, #0x5E ; '^'
BNE             loc_46E30
CMP             R8, #0x3F ; '?'
ANDNE           R4, R8, #0x1F
MOVEQ           R4, #0x7F
B               loc_46E48

loc_46EB0
MOV             R4, R0
B               loc_46E48
; End of function sub_46E0C

off_46EB8 DCD unk_643E0
; const int off_46EBC
off_46EBC DCD unk_63CC4
off_46EC0 DCD asc_6A30B ; "^-"
off_46EC4 DCD aUndef    ; "undef"



; void __fastcall sub_46EC8(int, int)
sub_46EC8

var_8= -8
var_4= -4

PUSH            {R0,R1,R4,LR}
MOV             R4, R0
ADD             R2, SP, #8+var_4
MOV             R1, SP
MOV             R0, #0  ; fd
BL              sub_1714C
CMP             R0, #0
BEQ             loc_46F24
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x16
BNE             loc_46F10
CMP             R4, #0
LDREQ           R0, =(aS_14+2) ; ""
BEQ             loc_46F14

loc_46F08
ADD             SP, SP, #8
POP             {R4,PC}

loc_46F10
LDR             R0, =aS_14 ; "%s"

loc_46F14
LDR             R3, =buf
LDR             R1, [R3]
BL              sub_16AF4
B               loc_46F08

loc_46F24
LDR             R3, =aUU ; "%u %u\n"
CMP             R4, #0
LDR             R0, =aRowsUColumnsU ; "rows %u; columns %u;"
LDR             R2, [SP,#8+var_8]
LDR             R1, [SP,#8+var_4]
MOVEQ           R0, R3
BL              sub_46CB4
B               loc_46F08
; End of function sub_46EC8

off_46F44 DCD dword_7DB94
off_46F48 DCD aS_14+2   ; ""
off_46F4C DCD aS_14     ; "%s"
off_46F50 DCD buf
off_46F54 DCD aUU       ; "%u %u\n"
off_46F58 DCD aRowsUColumnsU ; "rows %u; columns %u;"



; int __fastcall sub_46F5C(const struct termios *, int)
sub_46F5C
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R7, R1
BL              cfgetispeed
MOV             R5, R0
MOV             R0, R4  ; termios_p
BL              cfgetospeed
SUB             R3, R5, R0
LDR             R4, =aLuLu ; "%lu %lu\n"
CLZ             R3, R3
CMP             R5, #0
MOV             R3, R3,LSR#5
MOVEQ           R3, #1
MOV             R6, R0
CMP             R3, #0
ADD             R3, R4, #0x2B ; '+'
MOVNE           R5, R0
MOVNE           R4, R3
MOV             R0, R5
CMP             R7, #0
ADDNE           R4, R4, #9
BL              sub_60ED8
MOV             R5, R0
MOV             R0, R6
BL              sub_60ED8
MOV             R1, R5
MOV             R2, R0
MOV             R0, R4
POP             {R4-R8,LR}
B               sub_46CB4
; End of function sub_46F5C

off_46FD4 DCD aLuLu     ; "%lu %lu\n"



; int __fastcall sub_46FD8(const struct termios *, int)
sub_46FD8

var_18= -0x18
dest= -0x10

PUSH            {R4-R11,LR}
MOV             R7, R1
SUB             SP, SP, #0x1C
MOV             R1, #1
MOV             R6, R0
BL              sub_46F5C
CMP             R7, #0
BEQ             loc_47000
MOV             R0, #1
BL              sub_46EC8

loc_47000
LDR             R8, =byte_643C2
MOV             R4, #0
LDR             R9, =aUndef_0 ; "<undef>"
LDR             R5, =aIntr ; "intr"
LDRB            R1, [R6,#0x10]
LDR             R0, =aLineU ; "line = %u;\n"
BL              sub_46CB4

loc_4701C
ADD             R3, R8, R4,LSL#1
LDRB            R3, [R3,#1]
ADD             R3, R6, R3
LDRB            R0, [R3,#0x11]
CMP             R0, #0
BNE             loc_4711C
MOV             R1, R9  ; src
ADD             R0, SP, #0x1C+dest ; dest
BL              strcpy

loc_47040
MOV             R1, R4
MOV             R0, R5  ; s
BL              sub_16964
ADD             R4, R4, #1
MOV             R1, R0
ADD             R2, SP, #0x1C+dest
LDR             R0, =aSS_7 ; "%s = %s;"
BL              sub_46CB4
CMP             R4, #0xF
BNE             loc_4701C
LDRB            R2, [R6,#0x16]
LDRB            R1, [R6,#0x17]
LDR             R0, =aMinUTimeU ; "min = %u; time = %u;"
LDR             R4, =unk_639FC
LDR             R9, =aEvenp ; "evenp"
LDR             R10, =aS_9 ; "-%s"
BL              sub_46CB4
BL              sub_46D90
MOV             R2, #0
MOV             R11, R2

loc_47090
LDRB            R5, [R4,#1]
TST             R5, #8
MOVNE           R8, R2
BNE             loc_47144
LDRB            R1, [R4]
CMP             R1, R2
MOV             R8, R1
BEQ             loc_470BC
STR             R1, [SP,#0x1C+var_18]
BL              sub_46D90
LDR             R1, [SP,#0x1C+var_18]

loc_470BC
CMP             R1, #3
LDR             R0, [R4,#4]
LDRLS           R2, =asc_6A3C6 ; "\b"
MOVHI           R1, #0
LDRBLS          R1, [R2,R1]
LDRH            R2, [R4,#2]
ADDLS           R1, R6, R1
LDR             R1, [R1]
CMP             R2, #0
MOVEQ           R2, R0
AND             R2, R2, R1
CMP             R2, R0
BNE             loc_47134
CMP             R7, #0
BNE             loc_47100
TST             R5, #2
BEQ             loc_47144

loc_47100
MOV             R1, R11
MOV             R0, R9  ; s
BL              sub_16964
MOV             R1, R0
LDR             R0, =(aS_9+1) ; "%s"

loc_47114
BL              sub_46CB4
B               loc_47144

loc_4711C
MOV             R2, #0
ADD             R1, SP, #0x1C+dest
BL              sub_5E550
B               loc_47040

loc_4712C
MOV             R2, R8
B               loc_47090

loc_47134
CMP             R7, #0
BEQ             loc_47160
TST             R5, #4
BNE             loc_4716C

loc_47144
ADD             R11, R11, #1
ADD             R4, R4, #8
CMP             R11, #0x59 ; 'Y'
BNE             loc_4712C
BL              sub_46D90
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_47160
AND             R5, R5, #5
CMP             R5, #5
BNE             loc_47144

loc_4716C
MOV             R1, R11
MOV             R0, R9  ; s
BL              sub_16964
MOV             R1, R0
MOV             R0, R10
B               loc_47114
; End of function sub_46FD8

off_47184 DCD byte_643C2
off_47188 DCD aUndef_0  ; "<undef>"
off_4718C DCD aIntr     ; "intr"
off_47190 DCD aLineU    ; "line = %u;\n"
off_47194 DCD aSS_7     ; "%s = %s;"
off_47198 DCD aMinUTimeU ; "min = %u; time = %u;"
off_4719C DCD unk_639FC
off_471A0 DCD aEvenp    ; "evenp"
off_471A4 DCD aS_9      ; "-%s"
off_471A8 DCD asc_6A3C6 ; "\b"
off_471AC DCD aS_9+1    ; "%s"


; Attributes: bp-based frame fpd=0x18

; bool __fastcall sub_471B0(const char *, int)
sub_471B0

var_28= -0x28
var_24= -0x24
var_20= -0x20
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x28
ADD             R3, SP, #0x28+var_4
ADD             R7, SP, #0x10
MOV             R4, R1
ADD             R2, SP, #0x28+var_10
STR             R3, [SP,#0x28+var_24]
ADD             R3, SP, #0x28+var_8
STR             R3, [SP,#0x28+var_28]
ADD             R3, SP, #0x28+var_C
STR             R7, [SP,#0x28+var_20]
MOV             R5, R0
LDR             R1, =aLxLxLxLxN ; "%lx:%lx:%lx:%lx%n"
BL              sscanf
CMP             R0, #4
BEQ             loc_471FC

loc_471F0
MOV             R0, #0

loc_471F4
ADD             SP, SP, #0x28 ; '('
POP             {R4-R8,PC}

loc_471FC
LDR             R3, [SP,#0x28+var_10]
ADD             R6, R4, #0x11
LDR             R8, =aXN ; ":%x%n"
ADD             R4, R4, #0x31 ; '1'
STR             R3, [R4,#-0x31]
LDR             R3, [SP,#0x28+var_C]
STR             R3, [R4,#-0x2D]
LDR             R3, [SP,#0x28+var_8]
STR             R3, [R4,#-0x29]
LDR             R3, [SP,#0x28+var_4]
STR             R3, [R4,#-0x25]
LDR             R3, [SP,#0x28+var_18]
ADD             R5, R5, R3

loc_47230
MOV             R3, R7
ADD             R2, SP, #0x28+var_14
MOV             R1, R8  ; format
MOV             R0, R5  ; s
BL              sscanf
CMP             R0, #1
BNE             loc_471F0
LDR             R3, [SP,#0x28+var_14]
STRB            R3, [R6],#1
CMP             R6, R4
LDR             R3, [SP,#0x28+var_18]
ADD             R5, R5, R3
BNE             loc_47230
LDRB            R0, [R5]
CLZ             R0, R0
MOV             R0, R0,LSR#5
B               loc_471F4
; End of function sub_471B0

off_47274 DCD aLxLxLxLxN ; "%lx:%lx:%lx:%lx%n"
off_47278 DCD aXN       ; ":%x%n"



; int __fastcall sub_4727C(int, const char *, struct termios *)
sub_4727C
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, R1
MOV             R5, R2
BL              sub_620B0
BL              sub_60F24
CMP             R4, #1
MOV             R6, R0
BNE             loc_472B0

loc_472A0
MOV             R1, R6
MOV             R0, R5
POP             {R4-R6,LR}
B               cfsetospeed

loc_472B0               ; speed
MOV             R1, R0
MOV             R0, R5  ; termios_p
BL              cfsetispeed
CMP             R4, #0
POPEQ           {R4-R6,PC}
B               loc_472A0
; End of function sub_4727C



; Attributes: noreturn

; void __fastcall __noreturn sub_472C8(const char *)
sub_472C8
LDR             R3, =buf
PUSH            {R4,LR}
LDR             R1, [R3]
BL              sub_16B40
; End of function sub_472C8

off_472D8 DCD buf



; void __fastcall sub_472DC(int, int, int, int)
sub_472DC

var_8= -8
var_4= -4

PUSH            {R0,R1,R4-R6,LR}
MOV             R4, #0
MOV             R6, R0
MOV             R5, R1
MOV             R2, SP
MOVW            R1, #0x5413 ; request
MOV             R0, R4  ; fd
STR             R4, [SP,#8+var_8]
STR             R4, [SP,#8+var_4]
BL              ioctl
CMP             R0, R4
BEQ             loc_47340
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x16
BEQ             loc_47338

loc_47320
LDR             R3, =buf
LDR             R0, =(aSS_8+3) ; "%s"
LDR             R1, [R3]
BL              sub_16AF4

loc_47330
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_47338
STR             R4, [SP,#8+var_8]
STR             R4, [SP,#8+var_4]

loc_47340
CMP             R6, #0
MOV             R2, SP
STRHGE          R6, [SP,#8+var_8]
MOVW            R1, #0x5414 ; request
CMP             R5, #0
MOV             R0, #0  ; fd
STRHGE          R5, [SP,#8+var_8+2]
BL              ioctl
CMP             R0, #0
BNE             loc_47320
B               loc_47330
; End of function sub_472DC

off_4736C DCD dword_7DB94
off_47370 DCD buf
off_47374 DCD aSS_8+3   ; "%s"



; int __fastcall sub_47378(int, int)
sub_47378

var_88= -0x88
var_84= -0x84
var_80= -0x80
s= -0x7C
var_6C= -0x6C
termios_p= -0x40

PUSH            {R4-R11,LR}
MOV             R5, #0
LDR             R3, =buf
MOV             R8, R1
MOV             R4, #0x10
MOV             R7, R5
LDR             R2, =aStandardInput ; "standard input"
SUB             SP, SP, #0x8C
LDR             R10, =sub_46FD8
STRB            R5, [R3,#termios.c_oflag+1]
STR             R2, [R3]
MOV             R2, #0x50 ; 'P'
STRB            R2, [R3,#termios.c_oflag]
STRB            R5, [R3,#termios.c_oflag+2]
STRB            R5, [R3,#termios.c_oflag+3]
STRB            R5, [R3,#termios.c_cflag]
STRB            R5, [R3,#termios.c_cflag+1]
STRB            R5, [R3,#termios.c_cflag+2]
STRB            R5, [R3,#termios.c_cflag+3]
STR             R5, [SP,#0x8C+var_88]
STR             R3, [SP,#0x8C+var_84]

loc_473CC
ADD             R9, R5, #1
LDR             R11, [R8,R9,LSL#2]
MOV             R1, R9,LSL#2
CMP             R11, #0
BNE             loc_473F4
AND             R3, R4, #0xC
CMP             R3, #0xC
BNE             loc_475F0
LDR             R0, =aAAndGAreMutual ; "-a and -g are mutually exclusive"
B               loc_474A4

loc_473F4
ADD             R1, R1, #4
ADD             R2, R8, R1
LDR             R6, [R8,R1]
LDRB            R1, [R11]
CMP             R1, #0x2D ; '-'
BNE             loc_474EC
ADD             R5, R11, #1
STR             R2, [SP,#0x8C+var_80]
MOV             R0, R5  ; s2
BL              sub_46DB0
CMP             R0, #0
LDR             R2, [SP,#0x8C+var_80]
MOVEQ           R0, R5
LDREQ           LR, =sub_46C5C
BEQ             loc_47458
LDRB            R2, [R0,#1]
TST             R2, #4
BEQ             loc_47480
BIC             R4, R4, #0x10

loc_47440
MOV             R5, R9
B               loc_473CC

loc_47448
LDR             R10, =sub_46FD8
ORR             R4, R4, #4
MOV             R3, #1
STR             R3, [SP,#0x8C+var_88]

loc_47458
SUB             R12, R0, R11
LDRB            R1, [R0],#1
CMP             R1, #0
BEQ             loc_47440
CMP             R1, #0x61 ; 'a'
BEQ             loc_47448
CMP             R1, #0x67 ; 'g'
BEQ             loc_4748C
CMP             R1, #0x46 ; 'F'
BEQ             loc_47498

loc_47480
MOV             R1, R11
LDR             R0, =aInvalidArgumen_0 ; "invalid argument '%s'"
B               loc_474CC

loc_4748C
ORR             R4, R4, #8
MOV             R10, LR
B               loc_47458

loc_47498
CMP             R7, #0
BEQ             loc_474A8
LDR             R0, =aOnlyOneDeviceM ; "only one device may be specified"

loc_474A4
BL              sub_16DBC

loc_474A8
ADD             R12, R12, #1
LDRB            R3, [R11,R12]
ADD             R7, R11, R12
CMP             R3, #0
BNE             loc_47440
CMP             R6, #0
BNE             loc_474D8
LDR             R1, =aF ; "-F"

loc_474C8
LDR             R0, =aSRequiresAnArg ; "%s requires an argument"

loc_474CC
BL              sub_16DBC

loc_474D0
LDR             R3, [R2]
STR             R3, [R2,#-4]

loc_474D8
LDR             R3, [R2],#4
CMP             R3, #0
BNE             loc_474D0
MOV             R7, R6
B               loc_47440

loc_474EC               ; s2
MOV             R0, R11
BIC             R4, R4, #0x10
BL              sub_46DB0
CMP             R0, #0
BNE             loc_47440
MOV             R1, R11 ; s2
LDR             R0, =aIntr ; "intr"
BL              sub_16880
SUBS            R2, R0, #0
BLT             loc_47540
LDR             R0, =byte_643C2
CMP             R6, #0
ADD             R0, R0, R2,LSL#1 ; int
BNE             loc_4752C

loc_47524
MOV             R1, R11
B               loc_474C8

loc_4752C
ADD             R2, SP, #0x8C+s
MOV             R1, R6  ; int
BL              sub_46E0C
ADD             R9, R5, #2
B               loc_47440

loc_47540               ; s2
MOV             R0, R11
BL              sub_46DDC
TST             R0, #0x80
BEQ             loc_4755C
CMP             R6, #0
BEQ             loc_47524
ADD             R9, R5, #2

loc_4755C
CMP             R0, #0x84
BGT             loc_475A4
CMP             R0, #0x81
BGE             loc_475C4
SUB             R0, R0, #5
CMP             R0, #1
BLS             loc_47440

loc_47578
ADD             R1, SP, #0x8C+s
MOV             R0, R11
BL              sub_471B0
CMP             R0, #1
BEQ             loc_47440
MOV             R0, R11
BL              sub_620B0
BL              sub_60F24
CMN             R0, #1
BNE             loc_47440
B               loc_47480

loc_475A4
CMP             R0, #0x87
BEQ             loc_475DC
CMP             R0, #0x88
BNE             loc_47578
ADD             R2, SP, #0x8C+s
MOV             R1, R6
MOV             R0, #1
B               loc_475E8

loc_475C4               ; int
LDR             R3, =unk_63CC4
MOV             R2, #0x7FFFFFFF ; int
MOV             R1, #1  ; int
MOV             R0, R6  ; int
BL              sub_6204C
B               loc_47440

loc_475DC
ADD             R2, SP, #0x8C+s
MOV             R1, R6
MOV             R0, #0

loc_475E8
BL              sub_4727C
B               loc_47440

loc_475F0
CMP             R3, #0
BEQ             loc_47604
TST             R4, #0x10
LDREQ           R0, =aModesMayNotBeS ; "modes may not be set when -a or -g is u"...
BEQ             loc_474A4

loc_47604
CMP             R7, #0
BEQ             loc_4762C
LDR             R3, [SP,#0x8C+var_84]
MOV             R0, R7
STR             R7, [R3]
BL              sub_17614
MOV             R1, #0
BL              sub_176A8
MOV             R0, #0
BL              sub_16E68

loc_4762C               ; n
MOV             R2, #0x3C ; '<'
MOV             R1, #0  ; c
ADD             R0, SP, #0x8C+s ; s
BL              memset
ADD             R1, SP, #0x8C+s ; termios_p
MOV             R0, #0  ; fd
BL              tcgetattr
CMP             R0, #0
BEQ             loc_47658

loc_47650
LDR             R0, =(aSS_8+3) ; "%s"

loc_47654
BL              sub_472C8

loc_47658
CMP             R4, #0
BEQ             loc_4787C
MOV             R0, #1
BL              sub_17280
LDR             R3, [SP,#0x8C+var_84]
STR             R0, [R3,#termios.c_oflag]
ADD             R0, SP, #0x8C+s
LDR             R1, [SP,#0x8C+var_88]
BLX             R10 ; sub_46C5C sub_46FD8

loc_4767C
MOV             R0, #0
ADD             SP, SP, #0x8C
POP             {R4-R11,PC}

loc_47688
LDRB            R2, [R6]
ADD             R3, R8, R3
LDR             R10, [R3,#4]
CMP             R2, #0x2D ; '-'
BNE             loc_47730
ADD             R0, R6, #1 ; s2
BL              sub_46DB0
CMP             R0, #0
ADDNE           R2, SP, #0x8C+s
MOVNE           R1, #1
BNE             loc_47748

loc_476B4
MOV             R4, R7

loc_476B8
ADD             R7, R4, #1
LDR             R6, [R8,R7,LSL#2]
MOV             R3, R7,LSL#2
CMP             R6, #0
BNE             loc_47688
TST             R5, #1
BEQ             loc_4767C
ADD             R2, SP, #0x8C+s ; termios_p
MOV             R1, #1  ; optional_actions
MOV             R0, R6  ; fd
BL              tcsetattr
SUBS            R4, R0, #0
BNE             loc_47650
MOV             R2, #0x3C ; '<' ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x8C+termios_p ; s
BL              memset
ADD             R1, SP, #0x8C+termios_p ; termios_p
MOV             R0, R4  ; fd
BL              tcgetattr
CMP             R0, #0
BNE             loc_47650
MOV             R2, #0x3C ; '<' ; n
ADD             R1, SP, #0x8C+termios_p ; s2
ADD             R0, SP, #0x8C+s ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_4767C
LDR             R0, =aSCannotPerform ; "%s: cannot perform all requested operat"...
B               loc_47654

loc_47730               ; s2
MOV             R0, R6
BL              sub_46DB0
CMP             R0, #0
BEQ             loc_47754
ADD             R2, SP, #0x8C+s
MOV             R1, #0

loc_47748
BL              sub_4689C

loc_4774C
ORR             R5, R5, #1
B               loc_476B4

loc_47754               ; s2
MOV             R1, R6
LDR             R0, =aIntr ; "intr"
BL              sub_16880
CMP             R0, #0
BLT             loc_47780
ADD             R2, SP, #0x8C+s
MOV             R1, R10 ; int
ADD             R0, R11, R0,LSL#1 ; int
ADD             R7, R4, #2
BL              sub_46E0C
B               loc_4774C

loc_47780               ; s2
MOV             R0, R6
BL              sub_46DDC
TST             R0, #0x80
ADDNE           R7, R4, #2
CMP             R0, #0x82
BEQ             loc_47840
BGT             loc_477D8
CMP             R0, #6
BEQ             loc_47854
CMP             R0, #0x81
BEQ             loc_47820
CMP             R0, #5
BEQ             loc_47834

loc_477B4
ADD             R1, SP, #0x8C+s
MOV             R0, R6
BL              sub_471B0
CMP             R0, #1
BEQ             loc_4774C
ADD             R2, SP, #0x8C+s
MOV             R1, R6
MOV             R0, #2
B               loc_47870

loc_477D8
CMP             R0, #0x87
BEQ             loc_47864
BGT             loc_47808
CMP             R0, #0x84
BGT             loc_477B4
MOV             R1, R9  ; int
MOV             R0, R10 ; int
BL              sub_62090
MOV             R1, R0
MOV             R0, #0xFFFFFFFF

loc_47800
BL              sub_472DC
B               loc_476B4

loc_47808
CMP             R0, #0x88
BNE             loc_477B4
ADD             R2, SP, #0x8C+s
MOV             R1, R10
MOV             R0, #1
B               loc_47870

loc_47820               ; int
MOV             R1, R9
MOV             R0, R10 ; int
BL              sub_62090
STRB            R0, [SP,#0x8C+var_6C]
B               loc_4774C

loc_47834
MOV             R0, #0
BL              sub_46EC8
B               loc_476B4

loc_47840               ; int
MOV             R1, R9
MOV             R0, R10 ; int
BL              sub_62090
MOV             R1, #0xFFFFFFFF
B               loc_47800

loc_47854
MOV             R1, #0
ADD             R0, SP, #0x8C+s
BL              sub_46F5C
B               loc_476B4

loc_47864
ADD             R2, SP, #0x8C+s
MOV             R1, R10
MOV             R0, #0

loc_47870
BL              sub_4727C
MOV             R5, #3
B               loc_476B4

loc_4787C
MOV             R5, R4
LDR             R9, =unk_63CC4
LDR             R11, =byte_643C2
B               loc_476B8
; End of function sub_47378

off_4788C DCD buf
off_47890 DCD aStandardInput ; "standard input"
off_47894 DCD sub_46FD8
off_47898 DCD aAAndGAreMutual ; "-a and -g are mutually exclusive"
off_4789C DCD sub_46C5C
off_478A0 DCD aInvalidArgumen_0 ; "invalid argument '%s'"
off_478A4 DCD aOnlyOneDeviceM ; "only one device may be specified"
off_478A8 DCD aF        ; "-F"
off_478AC DCD aSRequiresAnArg ; "%s requires an argument"
off_478B0 DCD aIntr     ; "intr"
off_478B4 DCD byte_643C2
; const int off_478B8
off_478B8 DCD unk_63CC4
off_478BC DCD aModesMayNotBeS ; "modes may not be set when -a or -g is u"...
off_478C0 DCD aSS_8+3   ; "%s"
off_478C4 DCD aSCannotPerform ; "%s: cannot perform all requested operat"...



; int sub_478C8()
sub_478C8
PUSH            {R4,LR}
BL              sync
MOV             R0, #0
POP             {R4,PC}
; End of function sub_478C8




; unsigned int __fastcall sub_478D8(const char *)
sub_478D8
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
ADDEQ           R0, R0, #1
BEQ             loc_478FC
CMP             R3, #0x2B ; '+'
LDREQ           R3, =buf
ADDEQ           R0, R0, #1 ; int
MOVEQ           R2, #1
STRBEQ          R2, [R3]

loc_478FC               ; int
LDR             R1, =unk_64174
B               sub_62090
; End of function sub_478D8

off_47904 DCD buf
; const int off_47908
off_47908 DCD unk_64174



; int __fastcall sub_4790C(int, char **)
sub_4790C

var_124= -0x124
var_118= -0x118
var_114= -0x114
var_110= -0x110
var_10C= -0x10C
var_108= -0x108
var_104= -0x104
var_100= -0x100
buf= -0xFC
var_F4= -0xF4
var_F0= -0xF0
var_EC= -0xEC
var_E8= -0xE8
seconds= -0xE0
var_DC= -0xDC
var_D8= -0xD8
var_D4= -0xD4
var_74= -0x74
var_6C= -0x6C
var_5C= -0x5C
var_3C= -0x3C
var_C= -0xC

PUSH            {R4-R11,LR}
MOV             R6, R0
LDR             R0, [R1,#4]
SUB             SP, SP, #0x124
MOV             R3, #1
MOV             R5, R1
STR             R3, [SP,#0x124+seconds]
CMP             R0, #0
BEQ             loc_47AA0
LDRB            R3, [R0]
SUB             R3, R3, #0x2B ; '+'
TST             R3, #0xFD
BNE             loc_47AA0
LDRB            R3, [R0,#1]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
BHI             loc_47AA0
BL              sub_478D8
ADD             R5, R5, #4
MOV             R4, R0
SUB             R6, R6, #1

loc_47960
ADD             R3, SP, #0x124+seconds
ADD             R2, SP, #0x124+var_DC
STR             R3, [SP,#0x124+var_124]
MOV             R0, R5
ADD             R3, SP, #0x124+var_D8
LDR             R1, =aFcNQsVf ; "^fc:n:qs:+vF"
BL              sub_593CC
TST             R0, #2
MOV             R8, R0
BEQ             loc_47994
LDR             R0, [SP,#0x124+var_DC]
BL              sub_478D8
MOV             R4, R0

loc_47994
TST             R8, #4
BEQ             loc_479A8
LDR             R0, [SP,#0x124+var_D8]
BL              sub_478D8
MOV             R4, R0

loc_479A8
TST             R8, #8
MOVNE           R3, #0xFFFFFFFF
MOVEQ           R3, #1
TST             R8, #0x20
MOVNE           R3, #0
STR             R3, [SP,#0x124+var_10C]
LDR             R3, =optind
LDR             R7, [R3]
SUB             R6, R6, R7
ADD             R3, R5, R7,LSL#2
ADD             R0, R6, #1
MOV             R0, R0,LSL#2
STR             R3, [SP,#0x124+var_110]
BL              sub_1748C
STR             R0, [SP,#0x124+var_108]
LDR             R0, [R5,R7,LSL#2]
CMP             R0, #0
BNE             loc_47A1C
ADD             R1, SP, #0x124+var_6C
BLX             sub_62E08
CMP             R0, #0
BNE             loc_47A10
LDR             R3, [SP,#0x124+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x1000
BICEQ           R8, R8, #1

loc_47A10
LDR             R3, =aStandardInput ; "standard input"
LDR             R2, [SP,#0x124+var_110]
STR             R3, [R2]

loc_47A1C
LDR             R9, =buf
AND             R7, R8, #0x40 ; '@'
MOV             R10, #1
MOV             R5, #0
STR             R5, [SP,#0x124+var_118]

loc_47A30
LDR             R3, [SP,#0x124+var_110]
LDR             R0, [R3,R5,LSL#2]
BL              sub_61D34
CMP             R0, #0
BGE             loc_47A50
CMP             R7, #0
STRBEQ          R10, [R9,#termios.c_iflag+1]
BEQ             loc_47A80

loc_47A50
LDR             R1, [SP,#0x124+var_118]
LDR             R2, [SP,#0x124+var_108]
LDR             R3, [SP,#0x124+var_118]
STR             R0, [R2,R1,LSL#2]
LDR             R2, [SP,#0x124+var_110]
LDR             R1, [SP,#0x124+var_110]
MOV             R3, R3,LSL#2
LDR             R2, [R2,R5,LSL#2]
STR             R2, [R1,R3]
LDR             R3, [SP,#0x124+var_118]
ADD             R3, R3, #1
STR             R3, [SP,#0x124+var_118]

loc_47A80
ADD             R5, R5, #1
CMP             R6, R5
BGT             loc_47A30
LDR             R3, [SP,#0x124+var_118]
CMP             R3, #0
BNE             loc_47AA8
LDR             R0, =aNoFiles ; "no files"
BL              sub_16DBC

loc_47AA0
MOV             R4, #0xA
B               loc_47960

loc_47AA8
LDR             R3, =buf
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_47B44
TST             R8, #2
BEQ             loc_47B44
ADD             R9, R4, #0x2000
CMP             R9, #0x2000
MOVCC           R9, #0x2000

loc_47ACC
ORR             R3, R4, #0xF
MOVW            R2, #0x7FFF
CMP             R3, R2
MOVCS           R3, R2
MOV             R3, R3,LSL#16
STR             R3, [SP,#0x124+var_EC]
LDR             R3, =(aS_1+1) ; "==> %s <==\n"
STR             R3, [SP,#0x124+var_F4]
MOV             R3, #0
STR             R3, [SP,#0x124+var_114]
MOV             R6, R3
AND             R3, R8, #2
STR             R3, [SP,#0x124+var_F0]

loc_47B00
LDR             R3, [SP,#0x124+var_108]
LDR             R2, [SP,#0x124+var_114]
LDR             R11, [R3,R2,LSL#2]
CMP             R11, #0
BLT             loc_47BF4
LDR             R3, [SP,#0x124+var_10C]
LDR             R2, [SP,#0x124+var_118]
CMP             R3, R2
BCS             loc_47B54
LDRD            R2, R3, [SP,#0x124+var_114]
MOV             R0, #1
LDR             R1, [SP,#0x124+var_F4]
LDR             R2, [R3,R2,LSL#2]
BL              dprintf
CMP             R0, #0
BGE             loc_47B4C

loc_47B40
BL              sub_5E304

loc_47B44
MOV             R9, #0x2000
B               loc_47ACC

loc_47B4C
LDR             R3, =aS_1 ; "\n==> %s <==\n"
STR             R3, [SP,#0x124+var_F4]

loc_47B54
LDR             R3, =buf
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_47DBC
MOV             R3, #2
MOV             R2, #0
STR             R3, [SP,#0x124+var_124]
MOV             R0, R11
MOV             R3, #0
BL              lseek64
CMP             R0, #1
SBCS            R3, R1, #0
BLT             loc_47DBC
LDR             R3, [SP,#0x124+var_F0]
CMP             R3, #0
BEQ             loc_47D78
CMP             R4, #0
BEQ             loc_47BF4
SUBS            R3, R0, R4
MOV             R7, #0
STR             R3, [SP,#0x124+var_104]
SBC             R3, R1, R7
STR             R3, [SP,#0x124+var_100]
MOV             R5, R4
LDRD            R2, R3, [SP,#0x124+var_104]
CMP             R2, #0
SBCS            R3, R3, #0
MOVLT           R2, #0
MOVLT           R3, #0
STRDLT          R2, R3, [SP,#0x124+var_104]
MOV             R3, #0
MOV             R0, R11
STR             R3, [SP,#0x124+var_124]
LDRD            R2, R3, [SP,#0x124+var_104]
BL              sub_1771C
MOV             R2, R5
MOV             R3, R7
MOV             R1, #1
MOV             R0, R11
BL              sub_17F2C

loc_47BF4
LDR             R3, [SP,#0x124+var_114]
LDR             R2, [SP,#0x124+var_118]
ADD             R3, R3, #1
CMP             R3, R2
STR             R3, [SP,#0x124+var_114]
BNE             loc_47B00

loc_47C0C
LDR             R2, [SP,#0x124+var_108]
SUB             R3, R3, #0xC0000001
MOV             R1, #0x2000
MOV             R0, R6
LDR             R3, [R2,R3,LSL#2]
STR             R3, [SP,#0x124+var_104]
BL              sub_174B4
TST             R8, #1
STR             R0, [SP,#0x124+buf]
BEQ             loc_48054
MOV             R5, #0

loc_47C38               ; seconds
LDR             R0, [SP,#0x124+seconds]
MOV             R7, #0
BL              sleep
LDR             R3, [SP,#0x124+var_108]
SUB             R9, R3, #4

loc_47C4C
LDR             R3, [SP,#0x124+var_110]
TST             R8, #0x40
LDR             R4, [R9,#4]!
LDR             R6, [R3,R7,LSL#2]
BEQ             loc_47CBC
CMP             R4, #0
BLT             loc_48018
ADD             R1, SP, #0x124+var_6C
MOV             R0, R4
BLX             sub_62E08
CMP             R0, #0
BLT             loc_48010
ADD             R1, SP, #0x124+var_D4
MOV             R0, R6
BLX             sub_62DFC
CMP             R0, #0
BLT             loc_48010
LDRD            R0, R1, [SP,#0x124+var_6C]
LDRD            R2, R3, [SP,#0x124+var_D4]
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_48010
ADD             R3, SP, #0x124+var_C
LDRD            R0, R1, [R3]
LDRD            R2, R3, [SP,#0x124+var_74]
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_48010

loc_47CBC
CMP             R4, #0
BLT             loc_47D64
LDR             R2, [SP,#0x124+var_10C]
MOV             R10, #1
LDR             R1, [SP,#0x124+var_118]
LDR             R3, =aS_1 ; "\n==> %s <==\n"
CMP             R2, R1
MOVCC           R5, R3

loc_47CDC
ADD             R1, SP, #0x124+var_6C
MOV             R0, R4
BLX             sub_62E08
SUBS            R11, R0, #0
BNE             loc_47D38
LDRD            R2, R3, [SP,#0x124+var_3C]
CMP             R2, #1
SBCS            R3, R3, #0
BLT             loc_47D38
MOV             R2, #0
MOV             R3, #0
STR             R10, [SP,#0x124+var_124]
MOV             R0, R4
BL              lseek64
LDRD            R2, R3, [SP,#0x124+var_3C]
CMP             R2, R0
SBCS            R3, R3, R1
BGE             loc_47D38
STR             R11, [SP,#0x124+var_124]
MOV             R2, #0
MOV             R3, #0
MOV             R0, R4
BL              sub_1771C

loc_47D38               ; nbytes
MOV             R2, #0x2000
LDR             R1, [SP,#0x124+buf] ; buf
MOV             R0, R4  ; fd
BL              sub_18050
SUBS            R11, R0, #0
BGE             loc_47FC8
LDR             R0, =aReadError ; "read error"
BL              sub_16AF4
LDR             R3, =buf
MOV             R2, #1
STRB            R2, [R3,#termios.c_iflag+1]

loc_47D64
LDR             R3, [SP,#0x124+var_114]
ADD             R7, R7, #1
CMP             R3, R7
BNE             loc_47C4C
B               loc_47C38

loc_47D78
LDR             R3, [SP,#0x124+var_EC]
SUBS            R3, R0, R3
STR             R3, [SP,#0x124+buf]
MOV             R3, #0
SBC             R3, R1, R3
STR             R3, [SP,#0x124+buf+4]
LDRD            R2, R3, [SP,#0x124+buf]
CMP             R2, #0
SBCS            R3, R3, #0
MOVLT           R2, #0
MOVLT           R3, #0
STRDLT          R2, R3, [SP,#0x124+buf]
MOV             R3, #0
MOV             R0, R11
STR             R3, [SP,#0x124+var_124]
LDRD            R2, R3, [SP,#0x124+buf]
BL              sub_1771C

loc_47DBC
CMP             R6, #0
BNE             loc_47DD0
MOV             R0, R9
BL              sub_1748C
MOV             R6, R0

loc_47DD0
MOV             R7, #0
MOV             R3, R6
MOV             R10, #1
MOV             R5, R7

loc_47DE0               ; buf
MOV             R1, R3
SUB             R2, R9, R5 ; nbytes
MOV             R0, R11 ; fd
STR             R3, [SP,#0x124+var_E8]
BL              sub_18050
CMP             R0, #0
LDR             R3, [SP,#0x124+var_E8]
BGE             loc_47F4C
LDR             R0, =aReadError ; "read error"
BL              sub_16AF4
LDR             R2, =buf
MOV             R3, #1
STRB            R3, [R2,#termios.c_iflag+1]

loc_47E14
LDR             R3, =buf
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_47BF4
MOV             R2, R5
MOV             R1, R6
MOV             R0, #1
BL              sub_176C8
B               loc_47BF4

loc_47E38
CMP             R2, #0
BLE             loc_47DE0

loc_47E40
SUB             R1, R0, R2
MOV             R0, #1
ADD             R1, R3, R1
STR             R3, [SP,#0x124+var_E8]
BL              sub_176C8
LDR             R3, [SP,#0x124+var_E8]
B               loc_47DE0

loc_47E5C
MOV             R2, R0
B               loc_47E40

loc_47E64
CMP             R4, #0
BEQ             loc_47DE0
ANDS            R1, R8, #2
BEQ             loc_47EA0
ADD             R5, R5, R0
CMP             R5, R4
BLE             loc_47E98
SUB             R1, R5, R4
MOV             R5, R4
MOV             R2, R4  ; n
ADD             R1, R6, R1 ; src
MOV             R0, R6  ; dest
BL              memmove

loc_47E98
ADD             R3, R6, R5
B               loc_47DE0

loc_47EA0
ADD             R2, R3, R0
MOV             R12, R2

loc_47EA8
LDRB            LR, [R2,#-1]!
CMP             LR, #0xA
ADDEQ           R1, R1, #1
CMP             R3, R2
BNE             loc_47EA8
ADD             R7, R7, R1
CMP             R7, R4
ADDLT           R5, R5, R0
BLT             loc_47F14
LDRB            R3, [R12,#-1]
MOV             R1, R6  ; src
SUBS            R3, R3, #0xA
MOVNE           R3, #1
ADD             R7, R3, R7
SUB             R7, R7, R4

loc_47EE4
CMP             R7, #0
MOV             R2, R1
BNE             loc_47F38
SUB             R2, R1, R6
STR             R3, [SP,#0x124+var_E8]
SUB             R0, R0, R2
ADD             R5, R5, R0
MOV             R0, R6  ; dest
MOV             R2, R5  ; n
BL              memmove
LDR             R3, [SP,#0x124+var_E8]
SUB             R7, R4, R3

loc_47F14
ADD             R3, R5, #0x2000
CMP             R3, R9
BLS             loc_47E98
MOV             R0, R6
MOV             R1, R3
MOV             R9, R3
BL              sub_174B4
MOV             R6, R0
B               loc_47E98

loc_47F38
LDRB            R2, [R2]
ADD             R1, R1, #1
CMP             R2, #0xA
SUBEQ           R7, R7, #1
B               loc_47EE4

loc_47F4C
LDR             R2, =buf
LDRB            R2, [R2]
BEQ             loc_47E14
CMP             R2, #0
BEQ             loc_47E64
CMP             R4, R10
BLS             loc_47E5C
LDR             R2, [SP,#0x124+var_F0]
CMP             R2, #0
SUBNE           R2, R10, R4
ADDNE           R10, R10, R0
ADDNE           R2, R2, R0
BNE             loc_47E38
MOV             R1, R3
MOV             R2, R0

loc_47F88
LDRB            R12, [R1],#1
SUB             R2, R2, #1
CMP             R12, #0xA
BNE             loc_47FA4
ADD             R10, R10, #1
CMP             R4, R10
BEQ             loc_47E38

loc_47FA4
CMP             R2, #0
BNE             loc_47F88
B               loc_47DE0

loc_47FB0
CMP             R4, #0
BLT             loc_48048
MOV             R1, R6
LDR             R0, =aSHasBecomeInac ; "%s has become inaccessible"
BL              sub_16AF4
B               loc_48048

loc_47FC8
BEQ             loc_47D64
LDR             R3, [SP,#0x124+var_104]
CMP             R5, #0
CMPNE           R3, R4
BEQ             loc_47FFC
MOV             R2, R6
MOV             R1, R5
MOV             R0, #1
BL              dprintf
CMP             R0, #0
BLT             loc_47B40
MOV             R5, #0
STR             R4, [SP,#0x124+var_104]

loc_47FFC
MOV             R2, R11
LDR             R1, [SP,#0x124+buf]
MOV             R0, #1
BL              sub_176C8
B               loc_47CDC

loc_48010               ; fd
MOV             R0, R4
BL              close

loc_48018
MOV             R1, #0
MOV             R0, R6
BL              open64
SUBS            R10, R0, #0
BLT             loc_47FB0
LDR             R3, =aAppeared ; "appeared"
CMP             R4, #0
LDR             R2, =aBeenReplaced ; "been replaced"
MOV             R1, R6
LDR             R0, =aSHasSFollowing ; "%s has %s; following end of new file"
MOVLT           R2, R3
BL              sub_16DDC

loc_48048
STR             R10, [R9]
MOV             R4, R10
B               loc_47CBC

loc_48054
LDR             R3, =buf
LDRB            R0, [R3,#termios.c_iflag+1]
ADD             SP, SP, #0x124
POP             {R4-R11,PC}
; End of function sub_4790C

off_48064 DCD aFcNQsVf  ; "^fc:n:qs:+vF"
off_48068 DCD optind
off_4806C DCD aStandardInput ; "standard input"
off_48070 DCD buf
off_48074 DCD aNoFiles  ; "no files"
off_48078 DCD aS_1+1    ; "==> %s <==\n"
off_4807C DCD aS_1      ; "\n==> %s <==\n"
off_48080 DCD aReadError ; "read error"
off_48084 DCD aSHasBecomeInac ; "%s has become inaccessible"
off_48088 DCD aAppeared ; "appeared"
off_4808C DCD aBeenReplaced ; "been replaced"
off_48090 DCD aSHasSFollowing ; "%s has %s; following end of new file"


; Attributes: noreturn

; void __fastcall __noreturn sub_48094(int, char **)
sub_48094

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R5, R1
MOV             R4, R0
LDR             R1, =aIa ; "ia"
MOV             R0, R5
BL              sub_593CC
LDR             R3, =optind
TST             R0, #1
LDR             R9, =aW_1 ; "w"
LDR             R3, [R3]
SUB             R4, R4, R3
ADD             R5, R5, R3,LSL#2
AND             R3, R0, #2
ADD             R3, R9, R3
STR             R3, [SP,#0xC+var_C]
BEQ             loc_480E0
MOV             R1, #1  ; handler
MOV             R0, #2  ; sig
BL              signal

loc_480E0               ; handler
MOV             R1, #1
MOV             R0, #0xD ; sig
LDR             R7, =stdout
SUB             R10, R5, #4
BL              signal
ADD             R0, R4, #2
MOV             R11, R10
MOV             R0, R0,LSL#2
MOV             R6, R5
MOV             R8, #0
BL              sub_174DC
LDR             R3, [R7]
MOV             R4, R0
MOV             R9, R0
STR             R3, [R0]

loc_4811C               ; buf
MOV             R1, #0
LDR             R0, [R9],#4 ; stream
BL              setbuf

loc_48128
MOV             R2, R6
LDR             R0, [R6],#4
CMP             R0, #0
BNE             loc_4818C
LDR             R7, =buf

loc_4813C               ; nbytes
MOV             R2, #0x400
MOV             R1, R7  ; buf
MOV             R0, #0  ; fd
BL              sub_1800C
SUBS            R9, R0, #0
BGT             loc_481E0
LDR             R3, =aStandardInput ; "standard input"
MOVNE           R8, #1
STR             R3, [R5,#-4]
LDR             R3, =stdin
LDR             R3, [R3]
STR             R3, [R4]

loc_4816C
LDR             R0, [R4],#4
LDR             R1, [R10],#4
BL              sub_1779C
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_4816C
MOV             R0, R8
BL              sub_588D8

loc_4818C
LDR             R1, [R7]
STR             R1, [R9]
LDRB            R1, [R0]
CMP             R1, #0x2D ; '-'
BNE             loc_481AC
LDRB            R1, [R0,#1]
CMP             R1, #0
BEQ             loc_481C8

loc_481AC
LDR             R1, [SP,#0xC+var_C]
STR             R2, [SP,#0xC+var_8]
BL              sub_61C78
CMP             R0, #0
STR             R0, [R9]
LDR             R2, [SP,#0xC+var_8]
BEQ             loc_481D8

loc_481C8
ADD             R6, R2, #4
LDR             R2, [R2]
STR             R2, [R11,#4]!
B               loc_4811C

loc_481D8
MOV             R8, #1
B               loc_48128

loc_481E0
MOV             R6, R4

loc_481E4               ; s
LDR             R3, [R6]
MOV             R2, R9  ; n
MOV             R1, #1  ; size
MOV             R0, R7  ; ptr
BL              fwrite
LDR             R3, [R6,#4]!
CMP             R3, #0
BNE             loc_481E4
B               loc_4813C
; End of function sub_48094

off_48208 DCD aIa       ; "ia"
off_4820C DCD optind
off_48210 DCD aW_1      ; "w"
off_48214 DCD stdout
off_48218 DCD buf
off_4821C DCD aStandardInput ; "standard input"
off_48220 DCD stdin


; Attributes: noreturn

; void __fastcall __noreturn sub_48224(const char *, const char *)
sub_48224
MOV             R2, R1
SUBS            R1, R0, #0
PUSH            {R4,LR}
BEQ             loc_4825C
LDRB            R3, [R1]
CMP             R3, #0
BEQ             loc_4825C
LDR             R0, =(aCanTCreateSS+0xD) ; "%s: %s"
BL              sub_16DDC

loc_48248
LDR             R3, =dword_7DBBC
MOV             R1, #2  ; val
LDR             R0, [R3]
ADD             R0, R0, #0x10 ; env
BL              longjmp

loc_4825C
MOV             R1, R2
LDR             R0, =(aCanTCreateSS+0x11) ; "%s"
BL              sub_16DDC
B               loc_48248
; End of function sub_48224

off_4826C DCD aCanTCreateSS+0xD ; "%s: %s"
off_48270 DCD dword_7DBBC
off_48274 DCD aCanTCreateSS+0x11 ; "%s"



; __int64 __fastcall sub_48278(const char *, char *, char *)
sub_48278

endptr= -8

LDR             R3, =dword_7DB94
PUSH            {R0-R2,R4-R7,LR}
MOV             R2, #0xA ; base
ADD             R1, SP, #0xC+endptr ; endptr
MOV             R4, R0
LDR             R5, [R3]
MOV             R3, #0
STR             R3, [R5]
BL              strtoll
LDR             R3, [R5]
CMP             R3, #0
LDRNE           R1, =aOutOfRange ; "out of range"
BNE             loc_482C0
MOV             R6, R0
LDR             R0, [SP,#0xC+endptr]
CMP             R0, R4
BNE             loc_482C8

loc_482BC
LDR             R1, =aBadNumber ; "bad number"

loc_482C0
MOV             R0, R4
BL              sub_48224

loc_482C8
MOV             R7, R1
BL              sub_60E74
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_482BC
MOV             R0, R6
MOV             R1, R7
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_48278

off_482EC DCD dword_7DB94
off_482F0 DCD aOutOfRange ; "out of range"
off_482F4 DCD aBadNumber ; "bad number"



; int __fastcall sub_482F8(int s2)
sub_482F8
LDR             R3, =dword_7DBBC
CMP             R0, #0
PUSH            {R4,LR}
LDR             R4, [R3]
LDR             R3, =unk_6A482
STR             R3, [R4,#4]
POPEQ           {R4,PC}
MOV             R1, R0  ; s2
LDR             R0, =aR_5 ; "-r"
BL              sub_16880
CMP             R0, #0
LDRGE           R3, =unk_6A484
ADDGE           R2, R3, R0,LSL#1
LDRBGE          R0, [R3,R0,LSL#1]
MOVLT           R0, #0x27 ; '''
STRGE           R2, [R4,#4]
POP             {R4,PC}
; End of function sub_482F8

off_4833C DCD dword_7DBBC
off_48340 DCD unk_6A482
off_48344 DCD aR_5      ; "-r"
off_48348 DCD unk_6A484



; bool sub_4834C()
sub_4834C

var_D4= -0xD4
var_84= -0x84
var_74= -0x74
var_6C= -0x6C
var_1C= -0x1C
var_C= -0xC

LDR             R3, =dword_7DBBC
PUSH            {R4-R7,LR}
SUB             SP, SP, #0xD4
LDR             R4, [R3]
LDR             R2, [R4]
MOV             R3, R2
LDR             R0, [R2,#4] ; s2
LDR             R5, [R3],#4
STR             R3, [R4]
BL              sub_482F8
LDM             R4, {R3,R7}
LDR             R6, [R3,#4]
ADD             R2, R3, #4
STR             R2, [R4]
CMP             R6, #0
BNE             loc_48398
LDR             R1, =aArgumentExpect ; "argument expected"
LDR             R0, [R3]
BL              sub_48224

loc_48398
LDRB            R4, [R7]
SUB             R3, R4, #0x1C
CMP             R3, #5
BHI             loc_48458
MOV             R0, R5
BL              sub_48278
MOV             R4, R0
MOV             R0, R6
MOV             R5, R1
BL              sub_48278
LDRB            R3, [R7]
CMP             R3, #0x1C
BNE             loc_483E4
CMP             R5, R1
CMPEQ           R4, R0
MOVEQ           R0, #1
MOVNE           R0, #0

loc_483DC
ADD             SP, SP, #0xD4
POP             {R4-R7,PC}

loc_483E4
CMP             R3, #0x1D
BNE             loc_48400
CMP             R5, R1
CMPEQ           R4, R0
MOVNE           R0, #1
MOVEQ           R0, #0
B               loc_483DC

loc_48400
CMP             R3, #0x1E
BNE             loc_4841C
CMP             R4, R0
SBCS            R3, R5, R1

loc_48410
MOVGE           R0, #1
MOVLT           R0, #0
B               loc_483DC

loc_4841C
CMP             R3, #0x1F
BNE             loc_48438
CMP             R0, R4
SBCS            R3, R1, R5

loc_4842C
MOVLT           R0, #1
MOVGE           R0, #0
B               loc_483DC

loc_48438
CMP             R3, #0x20 ; ' '
BNE             loc_4844C
CMP             R0, R4
SBCS            R3, R1, R5
B               loc_48410

loc_4844C
CMP             R4, R0
SBCS            R3, R5, R1
B               loc_4842C

loc_48458
SUB             R3, R4, #0x16
CMP             R3, #5
BHI             loc_484C0
MOV             R1, R6  ; s2
MOV             R0, R5  ; s1
BL              strcmp
CMP             R4, #0x18
MOV             R2, R0
MOV             R3, R0,ASR#31
BNE             loc_48490
ORRS            R3, R0, R3
MOVEQ           R0, #1
MOVNE           R0, #0
B               loc_483DC

loc_48490
CMP             R4, #0x19
BNE             loc_484A8
ORRS            R3, R0, R3
MOVNE           R0, #1
MOVEQ           R0, #0
B               loc_483DC

loc_484A8
CMP             R4, #0x1A
MOVEQ           R0, R3,LSR#31
BEQ             loc_483DC
CMP             R2, #1
SBCS            R3, R3, #0
B               loc_48410

loc_484C0
MOV             R1, SP
MOV             R0, R5
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_48558
ADD             R1, SP, #0xD4+var_6C
MOV             R0, R6
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_48558
LDRB            R3, [R7]
CMP             R3, #0x11
BNE             loc_4850C
LDR             R0, [SP,#0xD4+var_84]
LDR             R3, [SP,#0xD4+var_1C]
CMP             R0, R3
MOVLE           R0, #0
MOVGT           R0, #1
B               loc_483DC

loc_4850C
CMP             R3, #0x12
BNE             loc_4852C
LDR             R0, [SP,#0xD4+var_84]
LDR             R3, [SP,#0xD4+var_1C]
CMP             R0, R3
MOVGE           R0, #0
MOVLT           R0, #1
B               loc_483DC

loc_4852C
LDRD            R0, R1, [SP,#0xD4+var_D4]
LDRD            R2, R3, [SP,#0xD4+var_6C]
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_48558
LDRD            R0, R1, [SP,#0xD4+var_74]
LDRD            R2, R3, [SP,#0xD4+var_C]
CMP             R1, R3
CMPEQ           R0, R2
MOVEQ           R0, #1
BEQ             loc_483DC

loc_48558
MOV             R0, #0
B               loc_483DC
; End of function sub_4834C

off_48560 DCD dword_7DBBC
off_48564 DCD aArgumentExpect ; "argument expected"



; __int64 __fastcall sub_48568(int)
sub_48568

var_58= -0x58
var_50= -0x50
var_4C= -0x4C
var_38= -0x38

CMP             R0, #0x22 ; '"'
PUSH            {R4-R8,LR}
LDR             R3, =dword_7DBBC
SUB             SP, SP, #0x68
BNE             loc_485C8
LDR             R4, [R3]
LDR             R3, [R4]
ADD             R2, R3, #4
LDR             R0, [R3,#4] ; s2
STR             R2, [R4]
BL              sub_482F8
CMP             R0, #0
BNE             loc_485B4
LDR             R3, [R4]
SUB             R3, R3, #4
STR             R3, [R4]
MOV             R4, #1

loc_485AC
MOV             R5, #0
B               loc_486BC

loc_485B4
BL              sub_48568
ORRS            R3, R0, R1
MOVEQ           R4, #1
MOVNE           R4, #0
B               loc_485AC

loc_485C8
CMP             R0, #0
MOV             R5, R0
LDREQ           R1, =aArgumentExpect ; "argument expected"
BEQ             loc_48628
LDR             R6, [R3]
CMP             R5, #0x25 ; '%'
LDR             R3, [R6]
LDR             R0, [R3,#4] ; s2
BNE             loc_4862C
ADD             R3, R3, #4
STR             R3, [R6]
BL              sub_482F8
BL              sub_48994
LDR             R3, [R6]
MOV             R4, R0
MOV             R5, R1
ADD             R2, R3, #4
LDR             R0, [R3,#4] ; s2
STR             R2, [R6]
BL              sub_482F8
CMP             R0, #0x26 ; '&'
BEQ             loc_486BC
LDR             R1, =aClosingParenEx ; "closing paren expected"
MOV             R0, #0

loc_48628
BL              sub_48224

loc_4862C
LDR             R4, [R6,#4]
BL              sub_482F8
CMP             R0, #0
BEQ             loc_4866C
LDR             R3, [R6]
LDR             R3, [R3,#8]
CMP             R3, #0
BEQ             loc_4866C
LDR             R3, [R6,#4]
LDRB            R3, [R3,#1]
CMP             R3, #1
BNE             loc_4866C

loc_4865C
BL              sub_4834C

loc_48660
MOV             R4, R0

loc_48664
MOV             R5, R4,ASR#31
B               loc_486BC

loc_4866C
LDRB            R2, [R4,#1]
CMP             R2, #0
BNE             loc_488E0
LDR             R3, [R6]
LDR             R0, [R3,#4]
CMP             R0, #0
BEQ             loc_488F0
ADD             R3, R3, #4
CMP             R5, #0x16
STR             R3, [R6]
LDRBEQ          R3, [R0]
CLZEQ           R4, R3
MOVEQ           R4, R4,LSR#5
BEQ             loc_486B8
CMP             R5, #0x17
BNE             loc_486CC
LDRB            R3, [R0]
MOVS            R4, R3
MOVNE           R4, #1

loc_486B8
MOV             R5, R2

loc_486BC
MOV             R0, R4
MOV             R1, R5
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R8,PC}

loc_486CC
CMP             R5, #0xD
BNE             loc_486E0
BL              sub_48278
BL              isatty
B               loc_48660

loc_486E0
CMP             R5, #0xB
MOV             R1, SP
BNE             loc_48700
BLX             sub_62E14
CMP             R0, #0
BEQ             loc_4884C

loc_486F8
MOV             R4, #0
B               loc_48664

loc_48700
BLX             sub_62DFC
SUBS            R4, R0, #0
BNE             loc_486F8
CMP             R5, #4
BEQ             loc_488D8
UXTB            R3, R5
SUB             R2, R3, #1
CMP             R2, #2
BHI             loc_487EC
CMP             R5, #2
MOVEQ           R5, #2
BEQ             loc_4873C
CMP             R5, #3
MOVEQ           R5, #1
MOVNE           R5, #4

loc_4873C
BL              geteuid
CMP             R0, #0
MOV             R7, R5
BNE             loc_48760
CMP             R5, #1
BNE             loc_487D8
LDR             R3, [SP,#0x68+var_58]
TST             R3, #0x49
BNE             loc_487D8

loc_48760
LDR             R3, [SP,#0x68+var_50]
CMP             R0, R3
MOVEQ           R7, R5,LSL#6
BEQ             loc_487C8
LDR             R8, [SP,#0x68+var_4C]
BL              getgid
CMP             R8, R0
BEQ             loc_487E4
BL              getegid
CMP             R8, R0
BEQ             loc_487E4
LDR             R1, [R6,#0xC]
CMP             R1, #0
BNE             loc_487A4
ADD             R0, R6, #0xC
BL              sub_579BC
STR             R0, [R6,#8]

loc_487A4
LDR             R3, [R6,#0xC]
B               loc_487C0

loc_487AC
LDR             R2, [R6,#8]
LDR             R2, [R2,R4,LSL#2]
CMP             R8, R2
BEQ             loc_487E4
ADD             R4, R4, #1

loc_487C0
CMP             R4, R3
BLT             loc_487AC

loc_487C8
LDR             R3, [SP,#0x68+var_58]
TST             R7, R3
MOVEQ           R4, #0xFFFFFFFF
MOVNE           R4, #0

loc_487D8
CLZ             R4, R4
MOV             R4, R4,LSR#5
B               loc_48664

loc_487E4
MOV             R7, R5,LSL#3
B               loc_487C8

loc_487EC
SUB             R2, R3, #5
CMP             R2, #5
BHI             loc_48854
CMP             R5, #6
MOVEQ           R4, #0x4000
BEQ             loc_48834
CMP             R5, #7
MOVEQ           R4, #0x2000
BEQ             loc_48834
CMP             R5, #8
MOVEQ           R4, #0x6000
BEQ             loc_48834
CMP             R5, #9
MOVEQ           R4, #0x1000
BEQ             loc_48834
CMP             R5, #0xA
MOVEQ           R4, #0xC000
MOVNE           R4, #0x8000

loc_48834
LDR             R0, [SP,#0x68+var_58]
AND             R0, R0, #0xF000
CMP             R0, R4

loc_48840
MOVNE           R4, #0
MOVEQ           R4, #1
B               loc_48664

loc_4884C
MOV             R4, #0xA000
B               loc_48834

loc_48854
SUB             R3, R3, #0xE
CMP             R3, #2
BHI             loc_4888C
CMP             R5, #0xF
MOVEQ           R3, #0x400
BEQ             loc_48878
CMP             R5, #0x10
MOVEQ           R3, #0x200
MOVNE           R3, #0x800

loc_48878
LDR             R2, [SP,#0x68+var_58]
TST             R3, R2
MOVNE           R4, #1
MOVEQ           R4, #0
B               loc_48664

loc_4888C
CMP             R5, #0xC
BNE             loc_488AC
LDRD            R2, R3, [SP,#0x68+var_38]
CMP             R2, #1
SBCS            R3, R3, #0
MOVGE           R4, #1
MOVLT           R4, #0
B               loc_48664

loc_488AC
CMP             R5, #0x14
BNE             loc_488C4
LDR             R4, [SP,#0x68+var_50]
BL              geteuid

loc_488BC
CMP             R4, R0
B               loc_48840

loc_488C4
CMP             R5, #0x15
BNE             loc_488D8
LDR             R4, [SP,#0x68+var_4C]
BL              getegid
B               loc_488BC

loc_488D8
MOV             R4, #1
B               loc_48664

loc_488E0
LDR             R3, [R6,#4]
LDRB            R3, [R3,#1]
CMP             R3, #1
BEQ             loc_4865C

loc_488F0
LDR             R3, [R6]
LDR             R3, [R3]
LDRB            R3, [R3]
MOVS            R4, R3
MOVNE           R4, #1
B               loc_485AC
; End of function sub_48568

off_48908 DCD dword_7DBBC
off_4890C DCD aArgumentExpect ; "argument expected"
off_48910 DCD aClosingParenEx ; "closing paren expected"



; __int64 __fastcall sub_48914(int)
sub_48914
PUSH            {R4-R6,LR}
BL              sub_48568
MOV             R4, R0
MOV             R5, R1
LDR             R3, =dword_7DBBC
LDR             R6, [R3]
LDR             R3, [R6]
ADD             R2, R3, #4
LDR             R0, [R3,#4] ; s2
STR             R2, [R6]
BL              sub_482F8
LDR             R3, [R6]
CMP             R0, #0x23 ; '#'
SUBNE           R3, R3, #4
STRNE           R3, [R6]
BNE             loc_48984
ADD             R2, R3, #4
LDR             R0, [R3,#4] ; s2
STR             R2, [R6]
BL              sub_482F8
BL              sub_48914
ORRS            R3, R4, R5
MOV             R5, #0
MOVEQ           R4, #0
MOVNE           R4, #1
ORRS            R3, R0, R1
MOVEQ           R4, #0
UXTB            R4, R4

loc_48984
MOV             R0, R4
MOV             R1, R5
POP             {R4-R6,PC}
; End of function sub_48914

off_48990 DCD dword_7DBBC



; __int64 __fastcall sub_48994(int)
sub_48994
PUSH            {R4-R6,LR}
BL              sub_48914
MOV             R4, R0
MOV             R5, R1
LDR             R3, =dword_7DBBC
LDR             R6, [R3]
LDR             R3, [R6]
ADD             R2, R3, #4
LDR             R0, [R3,#4] ; s2
STR             R2, [R6]
BL              sub_482F8
LDR             R3, [R6]
CMP             R0, #0x24 ; '$'
SUBNE           R3, R3, #4
STRNE           R3, [R6]
BNE             loc_48A04
ADD             R2, R3, #4
LDR             R0, [R3,#4] ; s2
STR             R2, [R6]
BL              sub_482F8
BL              sub_48994
ORR             R0, R0, R4
ORR             R1, R1, R5
ORRS            R3, R0, R1
MOV             R5, #0
MOVNE           R4, #1
MOVEQ           R4, #0
UXTB            R4, R4

loc_48A04
MOV             R0, R4
MOV             R1, R5
POP             {R4-R6,PC}
; End of function sub_48994

off_48A10 DCD dword_7DBBC



; int __fastcall sub_48A14(int, const char **)
sub_48A14

var_8= -8

PUSH            {R0-R2,R4,R5,LR}
MOV             R4, R0
LDR             R0, [R1]
STR             R1, [SP,#0xC+var_8]
BL              sub_169FC
LDRB            R3, [R0]
CMP             R3, #0x5B ; '['
BNE             loc_48AA0
LDR             R2, [SP,#0xC+var_8]
SUB             R3, R4, #1
ADD             R4, R2, R3,LSL#2
LDR             R3, [R2,R3,LSL#2]
LDRB            R2, [R0,#1]
CMP             R2, #0
BNE             loc_48A80
LDRB            R2, [R3]
CMP             R2, #0x5D ; ']'
BNE             loc_48A68
LDRB            R3, [R3,#1]
CMP             R3, #0
BEQ             loc_48A98

loc_48A68
LDR             R0, =aMissing_1 ; "missing ]"

loc_48A6C
MOV             R4, #2
BL              sub_16DDC

loc_48A74
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_48A80               ; s2
LDR             R1, =(aMissing_2+8) ; "]]"
MOV             R0, R3  ; s1
BL              strcmp
CMP             R0, #0
LDRNE           R0, =aMissing_2 ; "missing ]]"
BNE             loc_48A6C

loc_48A98
MOV             R3, #0
STR             R3, [R4]

loc_48AA0
MOV             R0, #0x198
BL              sub_174DC
LDR             R3, =dword_7DBBC
STR             R0, [R3]
ADD             R0, R0, #0x10 ; env
BL              _setjmp
LDR             R3, =dword_7DBBC
SUBS            R4, R0, #0
LDR             R5, [R3]
BNE             loc_48B0C
LDR             R3, [SP,#0xC+var_8]
ADD             R3, R3, #4
STR             R3, [SP,#0xC+var_8]
STR             R3, [R5]

loc_48AD8
LDR             R3, [SP,#0xC+var_8]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_48B68
LDR             R2, [SP,#0xC+var_8]
LDR             R0, [R2,#4] ; s2
ADD             R1, R2, #4
CMP             R0, #0
BNE             loc_48B20
LDRB            R0, [R3]

loc_48B00
CLZ             R0, R0
MOV             R0, R0,LSR#5

loc_48B08
EOR             R4, R4, R0

loc_48B0C               ; ptr
LDR             R0, [R5,#8]
BL              free
MOV             R0, R5  ; ptr
BL              free
B               loc_48A74

loc_48B20
LDR             R2, [SP,#0xC+var_8]
LDR             R2, [R2,#8]
CMP             R2, #0
BEQ             loc_48BB4
LDR             R2, [SP,#0xC+var_8]
ADD             R12, R2, #0xC
LDR             R2, [R2,#0xC]
CMP             R2, #0
BNE             loc_48B70
BL              sub_482F8
LDR             R3, [R5,#4]
LDRB            R3, [R3,#1]
CMP             R3, #1
BNE             loc_48BB4
LDR             R3, [SP,#0xC+var_8]
STR             R3, [R5]
BL              sub_4834C
B               loc_48B00

loc_48B68
MOV             R0, #1
B               loc_48B08

loc_48B70
LDR             LR, [SP,#0xC+var_8]
LDRB            R0, [R3]
LDR             LR, [LR,#0x10]
CMP             LR, #0
BNE             loc_48BB4
CMP             R0, #0x28 ; '('
BNE             loc_48BB4
LDRB            R3, [R3,#1]
CMP             R3, #0
BNE             loc_48BB4
LDRB            R3, [R2]
CMP             R3, #0x29 ; ')'
BNE             loc_48BB4
LDRB            R3, [R2,#1]
CMP             R3, #0
STREQ           R3, [R12]
STREQ           R1, [SP,#0xC+var_8]

loc_48BB4
LDR             R3, [SP,#0xC+var_8]
LDR             R3, [R3]
LDRB            R2, [R3]
CMP             R2, #0x21 ; '!'
BNE             loc_48BE4
LDRB            R3, [R3,#1]
CMP             R3, #0
LDREQ           R3, [SP,#0xC+var_8]
EOREQ           R4, R4, #1
ADDEQ           R3, R3, #4
STREQ           R3, [SP,#0xC+var_8]
BEQ             loc_48AD8

loc_48BE4
LDR             R3, [R5]
LDR             R0, [R3] ; s2
BL              sub_482F8
BL              sub_48994
ORRS            R3, R0, R1
LDR             R3, [R5]
MOVEQ           R4, #1
MOVNE           R4, #0
LDR             R2, [R3]
CMP             R2, #0
BEQ             loc_48B0C
LDR             R1, [R3,#4]
ADD             R2, R3, #4
STR             R2, [R5]
CMP             R1, #0
BEQ             loc_48B0C
LDR             R0, =aSUnknownOperan ; "%s: unknown operand"
MOV             R4, #2
BL              sub_16DDC
B               loc_48B0C
; End of function sub_48A14

off_48C34 DCD aMissing_1 ; "missing ]"
off_48C38 DCD aMissing_2+8 ; "]]"
off_48C3C DCD aMissing_2 ; "missing ]]"
off_48C40 DCD dword_7DBBC
off_48C44 DCD aSUnknownOperan ; "%s: unknown operand"



; int __fastcall sub_48C48(int, char **)
sub_48C48
PUSH            {R4-R8,LR}
MOV             R5, R1
MOV             R0, R5
LDR             R1, =aCfma ; "cfma"
BL              sub_593CC
LDR             R3, =optind
LDR             R3, [R3]
ADD             R4, R5, R3,LSL#2
LDR             R3, [R5,R3,LSL#2]
CMP             R3, #0
BNE             loc_48C78
BL              sub_162F0

loc_48C78
LDR             R7, =dword_7DB94
MOV             R6, R0
MOV             R5, #0

loc_48C84               ; tvp
MOV             R1, #0
LDR             R0, [R4] ; file
BL              utimes
CMP             R0, #0
BEQ             loc_48CCC
LDR             R3, [R7]
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_48CE0
TST             R6, #1
BNE             loc_48CCC
MOVW            R2, #0x1B6
MOV             R1, #0x42 ; 'B'
LDR             R0, [R4]
BL              open64
CMP             R0, #0
BLT             loc_48CE0
BL              sub_17700

loc_48CCC
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_48C84
MOV             R0, R5
POP             {R4-R8,PC}

loc_48CE0
LDR             R0, [R4]
MOV             R5, #1
BL              sub_16B80
B               loc_48CCC
; End of function sub_48C48

off_48CF0 DCD aCfma     ; "cfma"
off_48CF4 DCD optind
off_48CF8 DCD dword_7DB94



; size_t __fastcall sub_48CFC(void *s, size_t n)
sub_48CFC

var_s0=  0

PUSH            {R4-R8,LR}
MOV             R4, #0
SUB             SP, SP, #0x100
MOV             R6, R0
MOV             R7, R1
MOV             R5, R4

loc_48D14               ; c
MOV             R1, R4
MOV             R2, R7  ; n
MOV             R0, R6  ; s
UXTB            R8, R4
ADD             R4, R4, #1
BL              memchr
CMP             R0, #0
ADDEQ           R3, SP, #0x100+var_s0
ADDEQ           R3, R3, R5
ADDEQ           R5, R5, #1
STRBEQ          R8, [R3,#-0x100]
CMP             R4, #0x100
BNE             loc_48D14
MOV             R2, R5  ; n
MOV             R1, SP  ; src
MOV             R0, R6  ; dest
BL              memcpy
MOV             R0, R5
ADD             SP, SP, #0x100
POP             {R4-R8,PC}
; End of function sub_48CFC




; int __fastcall sub_48D64(unsigned __int8 *, void **)
sub_48D64

var_18= -0x18
ptr= -0x14
var_10= -0x10
var_8= -8

PUSH            {R4-R11,LR}
MOV             R4, R0
LDR             R6, [R1]
SUB             SP, SP, #0x1C
MOV             R9, R1
MOV             R8, #0x2000
MOV             R5, #0
MOV             R11, #9

loc_48D84
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_48D9C
MOV             R0, R5
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_48D9C
ADD             R3, R5, #0x100
CMP             R3, R8
BLS             loc_48DC0
ADD             R8, R8, #0x100
MOV             R0, R6
MOV             R1, R8
BL              sub_174B4
MOV             R6, R0
STR             R0, [R9]

loc_48DC0
LDRB            R3, [R4]
CMP             R3, #0x5C ; '\'
BNE             loc_48DE8
ADD             R4, R4, #1
ADD             R0, SP, #0x1C+var_8
STR             R4, [SP,#0x1C+var_8]
BL              sub_5E668
LDR             R3, [SP,#0x1C+var_8]
SUB             R4, R3, #1
STRB            R0, [R3,#-1]

loc_48DE8
LDRB            R2, [R4,#1]
LDRB            R7, [R4]
CMP             R2, #0x2D ; '-'
BNE             loc_48E58
LDRB            R0, [R4,#2]
CMP             R0, #0
ADDEQ           R4, R4, #1
ADDEQ           R3, R5, #1
STRBEQ          R7, [R6,R5]
BEQ             loc_48E50
CMP             R0, #0x5C ; '\'
ADD             R4, R4, #3
BNE             loc_48E2C
ADD             R0, SP, #0x1C+var_8
STR             R4, [SP,#0x1C+var_8]
BL              sub_5E668
LDR             R4, [SP,#0x1C+var_8]

loc_48E2C
SUB             R5, R5, R7
MOV             R2, R7
ADD             R1, R6, R5
B               loc_48E44

loc_48E3C
STRB            R2, [R1,R2]
ADD             R2, R2, #1

loc_48E44
CMP             R0, R2
ADD             R3, R2, R5
BCS             loc_48E3C

loc_48E50
MOV             R5, R3
B               loc_48D84

loc_48E58
CMP             R7, #0x5B ; '['
BNE             loc_4909C
CMP             R2, #0x3A ; ':'
ADD             R3, R4, #2
BNE             loc_49058
LDRB            R2, [R4,#2]
MOV             R0, R3
STR             R3, [SP,#0x1C+var_10]
CMP             R2, #0x78 ; 'x'
MOVNE           R10, #7
MOVEQ           R10, #8
MOV             R1, R10
BL              sub_1751C
MOV             R1, R0  ; s2
STR             R0, [SP,#0x1C+ptr]
LDR             R0, =aAlpha ; "alpha:]"
BL              sub_16880
LDR             R2, [SP,#0x1C+ptr]
ADD             R7, R0, #1
STR             R0, [SP,#0x1C+var_18]
MOV             R0, R2  ; ptr
BL              free
CMP             R7, #0
LDR             R1, [SP,#0x1C+var_18]
LDR             R3, [SP,#0x1C+var_10]
BEQ             loc_4909C
SUB             R1, R1, #1
ADD             R4, R3, R10
CMP             R7, #0xA
CMPNE           R1, #1
MOVHI           R3, R5
BHI             loc_48EF4
ADD             R2, R6, R5
MOV             R3, #0x30 ; '0'

loc_48EE0
STRB            R3, [R2],#1
ADD             R3, R3, #1
CMP             R3, #0x3A ; ':'
BNE             loc_48EE0
ADD             R3, R5, #0xA

loc_48EF4
SUB             R2, R7, #1
CMP             R2, #1
MOVHI           R1, #0
MOVLS           R1, #1
CMP             R7, #5
CMPNE           R2, #1
BHI             loc_48F2C
ADD             R0, R6, R3
MOV             R2, #0x41 ; 'A'

loc_48F18
STRB            R2, [R0],#1
ADD             R2, R2, #1
CMP             R2, #0x5B ; '['
BNE             loc_48F18
ADD             R3, R3, #0x1A

loc_48F2C
CMP             R7, #4
MOVNE           R2, R1
ORREQ           R2, R1, #1
CMP             R2, #0
BEQ             loc_48F5C
ADD             R1, R6, R3
MOV             R2, #0x61 ; 'a'

loc_48F48
STRB            R2, [R1],#1
ADD             R2, R2, #1
CMP             R2, #0x7B ; '{'
BNE             loc_48F48
ADD             R3, R3, #0x1A

loc_48F5C
SUB             R2, R7, #6
CMP             R2, #1
BHI             loc_48FAC
CMP             R7, #6
ADD             R2, R3, #1
STRB            R11, [R6,R3]
BNE             loc_48FA0
MOV             R1, #0xA
STRB            R1, [R6,R2]
ADD             R1, R6, R3
MOV             R2, #0xB
STRB            R2, [R1,#2]
MOV             R2, #0xC
STRB            R2, [R1,#3]
ADD             R2, R3, #5
MOV             R3, #0xD
STRB            R3, [R1,#4]

loc_48FA0
ADD             R3, R2, #1
MOV             R1, #0x20 ; ' '
STRB            R1, [R6,R2]

loc_48FAC
SUB             R2, R7, #8
CMP             R2, #1
BHI             loc_49024
MOV             R2, #0

loc_48FBC
CMP             R7, #8
BNE             loc_49004
SUB             R1, R2, #0x20 ; ' '
CMP             R1, #0x5E ; '^'
BHI             loc_49014
UXTB            R1, R2
SUB             R0, R1, #0x30 ; '0'
CMP             R0, #9
BLS             loc_49014
ORR             R0, R1, #0x20 ; ' '
SUB             R0, R0, #0x61 ; 'a'
CMP             R0, #0x19
BLS             loc_49014
CMP             R1, #0x20 ; ' '
BEQ             loc_49014

loc_48FF8
STRB            R2, [R6,R3]
ADD             R3, R3, #1
B               loc_49014

loc_49004
UXTB            R1, R2
CMP             R1, #0x7F
CMPNE           R1, #0x1F
BLS             loc_48FF8

loc_49014
ADD             R2, R2, #1
CMP             R2, #0x100
BNE             loc_48FBC
B               loc_48E50

loc_49024
CMP             R7, #0xA
BNE             loc_48E50
ADD             R1, R6, R3
MOV             R2, #0x41 ; 'A'

loc_49034
UXTB            R0, R2
ADD             R2, R2, #1
CMP             R2, #0x47 ; 'G'
ORR             R12, R0, #0x20 ; ' '
STRB            R12, [R1,#6]
STRB            R0, [R1],#1
BNE             loc_49034
ADD             R3, R3, #0xC
B               loc_48E50

loc_49058
CMP             R2, #0x3D ; '='
ADD             R3, R5, #1
BNE             loc_4909C
LDRB            R2, [R4,#2]
STRB            R2, [R6,R5]
LDRB            R2, [R4,#2]
CMP             R2, #0
BEQ             loc_49090
LDRB            R2, [R4,#3]
CMP             R2, #0x3D ; '='
BNE             loc_49090
LDRB            R2, [R4,#4]
CMP             R2, #0x5D ; ']'
BEQ             loc_49094

loc_49090
BL              sub_162F0

loc_49094
ADD             R4, R4, #5
B               loc_48E50

loc_4909C
LDRB            R2, [R4]
ADD             R3, R5, #1
ADD             R4, R4, #1
STRB            R2, [R6,R5]
B               loc_48E50
; End of function sub_48D64

off_490B0 DCD aAlpha    ; "alpha:]"



; ssize_t __fastcall sub_490B4(int, char **)
sub_490B4

buf= -8
var_4= -4

PUSH            {R0,R1,R4-R10,LR}
MOV             R0, #0x2000
MOV             R8, R1
BL              sub_1748C
STR             R0, [SP,#8+buf]
MOV             R0, #0x2000
BL              sub_1748C
STR             R0, [SP,#8+var_4]
MOV             R0, #0x300
BL              sub_174DC
MOV             R3, #0
MOV             R4, R0
ADD             R5, R0, #0x100
ADD             R6, R0, #0x200

loc_490EC
STRB            R3, [R4,R3]
ADD             R3, R3, #1
CMP             R3, #0x100
BNE             loc_490EC
LDR             R1, =aCcds ; "^+Ccds"
MOV             R0, R8
BL              sub_593CC
LDR             R3, =optind
MOV             R7, R0
MOV             R1, SP
LDR             R3, [R3]
LDR             R0, [R8,R3,LSL#2]
ADD             R9, R8, R3,LSL#2
BL              sub_48D64
TST             R7, #3
MOV             R8, R0
BEQ             loc_49140
MOV             R1, R0  ; n
LDR             R0, [SP,#8+buf] ; s
BL              sub_48CFC
MOV             R8, R0

loc_49140
LDR             R0, [R9,#4]
CMP             R0, #0
BEQ             loc_491F8
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_49160
LDR             R0, =aString2CannotB ; "STRING2 cannot be empty"
BL              sub_16DBC

loc_49160
ADD             R1, SP, #8+var_4
BL              sub_48D64
LDMFD           SP, {R2,R10}
MOV             R3, R0
MOV             R1, #0
MOV             R12, #0x30 ; '0'
ADD             R9, R8, R2

loc_4917C
CMP             R2, R9
BNE             loc_491DC

loc_49184
LDR             R1, [SP,#8+buf]
MOV             R12, #1
MOV             R2, R1

loc_49190
SUB             R0, R2, R1
CMP             R0, R8
BLT             loc_49200
LDR             R1, [SP,#8+var_4]
MOV             R12, #1
MOV             R2, R1

loc_491A8
SUB             R0, R2, R1
CMP             R3, R0
BGT             loc_4920C
MOV             R8, #0x100

loc_491B8               ; nbytes
MOV             R2, #0x2000
LDR             R1, [SP,#8+buf] ; buf
MOV             R0, #0  ; fd
BL              sub_1800C
SUBS            R12, R0, #0
BGT             loc_49218
BEQ             loc_492A8
LDR             R0, =aReadError ; "read error"
BL              sub_16B40

loc_491DC
CMP             R0, R1
LDRB            LR, [R2],#1
LDRBHI          R12, [R10,R1]
ADDHI           R1, R1, #1
STRBLS          R12, [R4,LR]
STRBHI          R12, [R4,LR]
B               loc_4917C

loc_491F8
MOV             R3, R0
B               loc_49184

loc_49200
LDRB            R0, [R2],#1
STRB            R12, [R5,R0]
B               loc_49190

loc_4920C
LDRB            R0, [R2],#1
STRB            R12, [R6,R0]
B               loc_491A8

loc_49218
MOV             R2, #0
AND             LR, R7, #4
MOV             R3, R2
AND             R9, R7, #8

loc_49228
LDR             R1, [SP,#8+buf]
CMP             LR, #0
ADD             R0, R3, #1
LDRB            R1, [R1,R3]
BEQ             loc_49248
LDRB            R3, [R5,R1]
CMP             R3, #0
BNE             loc_49284

loc_49248
CMP             R9, #0
LDRB            R3, [R4,R1]
BEQ             loc_49274
CMP             R8, R3
BNE             loc_49274
LDRB            R1, [R5,R1]
CMP             R1, #0
BNE             loc_49284
LDRB            R1, [R6,R8]
CMP             R1, #0
BNE             loc_49284

loc_49274
LDR             R1, [SP,#8+var_4]
MOV             R8, R3
STRB            R3, [R1,R2]
ADD             R2, R2, #1

loc_49284
CMP             R12, R0
MOV             R3, R0
BNE             loc_49228
CMP             R2, #0
BEQ             loc_491B8
LDR             R1, [SP,#8+var_4]
MOV             R0, #1
BL              sub_176C8
B               loc_491B8

loc_492A8
ADD             SP, SP, #8
POP             {R4-R10,PC}
; End of function sub_490B4

off_492B0 DCD aCcds     ; "^+Ccds"
off_492B4 DCD optind
off_492B8 DCD aString2CannotB ; "STRING2 cannot be empty"
off_492BC DCD aReadError ; "read error"



; int sub_492C0()
sub_492C0
MOV             R0, #0
BX              LR
; End of function sub_492C0




; int __fastcall sub_492C8(int, char **)
sub_492C8

var_14= -0x14
var_8= -8

PUSH            {R4-R11,LR}
MOV             R4, R1
SUB             SP, SP, #0x14
LDR             R1, =aCs ; "^cs:"
ADD             R2, SP, #0x14+var_8
MOV             R0, R4
BL              sub_593CC
MOVW            R3, #0x841
TST             R0, #1
MOV             R7, R0
LDR             R1, =unk_641AC ; int
LDR             R0, [SP,#0x14+var_8] ; int
MOVW            R6, #0x801
MOVEQ           R6, R3
LDR             R8, =aSTruncate ; "%s: truncate"
BL              sub_61EE8
LDR             R3, =optind
MOV             R5, #0
LDR             R9, =dword_7DB94
LDR             R10, =aSOpen ; "%s: open"
LDR             R3, [R3]
STRD            R0, R1, [SP,#0x14+var_14]
ADD             R4, R4, R3,LSL#2
SUB             R4, R4, #4

loc_49328
LDR             R0, [R4,#4]!
CMP             R0, #0
BNE             loc_49340
MOV             R0, R5
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_49340
MOVW            R2, #0x1B6
MOV             R1, R6
BL              open64
SUBS            R11, R0, #0
BGE             loc_49384
LDR             R3, [R9]
LDR             R2, [R3]
MVN             R3, R7
CMP             R2, #2
ORRNE           R3, R3, #1
TST             R3, #1
BEQ             loc_49328
LDR             R1, [R4]
MOV             R0, R10
BL              sub_16AF4
MOV             R5, #1
B               loc_49328

loc_49384
LDRD            R2, R3, [SP,#0x14+var_14]
BL              ftruncate64
CMN             R0, #1
BNE             loc_493A4
MOV             R5, #1
LDR             R1, [R4]
MOV             R0, R8
BL              sub_16AF4

loc_493A4
MOV             R0, R11
BL              sub_17700
B               loc_49328
; End of function sub_492C8

off_493B0 DCD aCs       ; "^cs:"
; const int off_493B4
off_493B4 DCD unk_641AC
off_493B8 DCD aSTruncate ; "%s: truncate"
off_493BC DCD optind
off_493C0 DCD dword_7DB94
off_493C4 DCD aSOpen    ; "%s: open"


; Attributes: noreturn

; void __fastcall __noreturn sub_493C8(int, char **)
sub_493C8
LDR             R3, =byte_7D5F8
MOV             R2, #2
PUSH            {R4-R6,LR}
MOV             R0, R1
LDR             R1, =(aSS_8+4) ; "s"
STRB            R2, [R3]
BL              sub_593CC
MOV             R5, R0
MOV             R0, #0
BL              sub_17B34
LDR             R2, =aNotATty ; "not a tty"
SUBS            R3, R0, #0
MOVNE           R4, #0
MOVEQ           R4, #1
MOVEQ           R3, R2
CMP             R5, #0
BNE             loc_49414
MOV             R0, R3  ; s
BL              puts

loc_49414
MOV             R0, R4
BL              sub_588D8
; End of function sub_493C8

off_4941C DCD byte_7D5F8
off_49420 DCD aSS_8+4   ; "s"
off_49424 DCD aNotATty  ; "not a tty"


; Attributes: noreturn

; void __fastcall __noreturn sub_49428(int, char **)
sub_49428

name= -0x218
var_92= -0x92
var_54= -0x54
var_51= -0x51
dest= -0x10

LDR             R3, =dword_7DB90
PUSH            {R4-R7,LR}
SUB             SP, SP, #0x21C
MOV             R6, R3
LDR             R2, [R3]
LDRB            R2, [R2]
CMP             R2, #0x75 ; 'u'
BNE             loc_494C0
MOV             R5, R1
LDR             R2, =aAll ; "all"
LDR             R1, =aSnrvmpioa ; "snrvmpioa"
MOV             R0, R5
BL              sub_593F8
LDR             R3, =optind
MOV             R4, R0
LDR             R3, [R3]
LDR             R3, [R5,R3,LSL#2]
CMP             R3, #0
BEQ             loc_49478
BL              sub_162F0

loc_49478
TST             R0, #0x100
MOVNE           R4, #0xFF
LDRNE           R5, =(asc_6B39D+1) ; ""
BNE             loc_49494
CMP             R4, #0
MOVEQ           R4, #1

loc_49490
LDR             R5, =aUnknown_0 ; "unknown"

loc_49494
ADD             R7, SP, #0x21C+name
MOV             R0, R7  ; name
BL              uname
LDR             R3, [R6]
LDRB            R3, [R3]
CMP             R3, #0x61 ; 'a'
BNE             loc_494C8
ADD             R0, SP, #0x21C+name.machine ; s
BL              puts

loc_494B8
MOV             R0, #0
BL              sub_588D8

loc_494C0
MOV             R4, #0x10
B               loc_49490

loc_494C8
ADD             R0, SP, #0x21C+name.__domainname+0x3F
MOV             R1, R5  ; src
ADD             R0, R0, #2 ; dest
BL              strcpy
ADD             R0, SP, #0x21C+var_54
MOV             R1, R5  ; src
ADD             R0, R0, #3 ; dest
LDR             R5, =unk_643E4
BL              strcpy
LDR             R1, =aGnuLinux ; "GNU/Linux"
ADD             R0, SP, #0x21C+dest ; dest
BL              strcpy
LDR             R0, =(aS_2+7) ; format
SUB             R6, R0, #1

loc_49500
TST             R4, #1
BEQ             loc_49524
LDRH            R3, [R5]
ADD             R1, R7, R3
LDRB            R3, [R7,R3]
CMP             R3, #0
BEQ             loc_49524
BL              printf
MOV             R0, R6

loc_49524
MOVS            R4, R4,LSR#1
ADD             R5, R5, #2
BNE             loc_49500
MOV             R0, #0xA ; c
BL              j_putchar_unlocked
B               loc_494B8
; End of function sub_49428

off_4953C DCD dword_7DB90
off_49540 DCD aAll      ; "all"
off_49544 DCD aSnrvmpioa ; "snrvmpioa"
off_49548 DCD optind
off_4954C DCD asc_6B39D+1 ; ""
off_49550 DCD aUnknown_0 ; "unknown"
off_49554 DCD unk_643E4
off_49558 DCD aGnuLinux ; "GNU/Linux"
off_4955C DCD aS_2+7    ; "%s"



; int __fastcall sub_49560(int, char **)
sub_49560
PUSH            {R4,LR}
MOV             R4, R1
MOV             R0, R4
LDR             R1, =asc_6A6AF ; "^"
BL              sub_593CC
LDR             R3, =optind
LDR             R3, [R3]
LDR             R0, [R4,R3,LSL#2]
BL              sub_1761C
MOV             R0, #0
POP             {R4,PC}
; End of function sub_49560

off_4958C DCD asc_6A6AF ; "^"
off_49590 DCD optind



; int __fastcall sub_49594(int, int)
sub_49594
LDR             R0, [R1,#4]
PUSH            {R4,LR}
CMP             R0, #0
BNE             loc_495A8
BL              sub_162F0

loc_495A8
BL              sub_620B0
BL              usleep
MOV             R0, #0
POP             {R4,PC}
; End of function sub_49594



; Attributes: noreturn

; void __fastcall __noreturn sub_495B8(int, char **)
sub_495B8

buf= -0x8C
var_50= -0x50

PUSH            {R4-R8,LR}
MOV             R4, R1
SUB             SP, SP, #0x90
LDR             R1, =aD_4 ; "^d"
MOV             R0, R4
BL              sub_593CC
LDR             R3, =optind
MOV             R5, R0
LDR             R2, [R3]
ADD             R3, R4, R2,LSL#2
LDR             R2, [R4,R2,LSL#2]
CMP             R2, #0
LDREQ           R2, =(asc_6AE7B+3) ; "-"
STREQ           R2, [R3,#-4]
SUBEQ           R3, R3, #4
LDR             R0, [R3]
BL              sub_61D20
CMP             R5, #0
BEQ             loc_4961C
LDR             R3, =stdout
MOV             R2, #0xFF
LDR             R1, [R3]
BL              sub_61998

loc_49614
MOV             R0, #0
BL              sub_588D8

loc_4961C
LDR             R7, =aAbcdefghijklmn ; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...
LDR             R6, =0xAAAAAAAB
LDR             R5, =stdout
BL              fileno_unlocked
MOV             R8, R0

loc_49630               ; nbytes
MOV             R2, #0x39 ; '9'
ADD             R1, SP, #0x90+buf ; buf
MOV             R0, R8  ; fd
BL              sub_18050
SUBS            R4, R0, #0
BEQ             loc_49614
BGE             loc_49654
LDR             R0, =aReadError ; "read error"
BL              sub_16B40

loc_49654
MOV             R3, R7
MOV             R2, R4
ADD             R1, SP, #0x90+buf
ADD             R0, SP, #0x90+var_50
BL              sub_617E8
ADD             R2, R4, #2
ADD             R1, SP, #0x90+var_50
UMULL           R2, R3, R2, R6
MOV             R0, #1
MOV             R2, R3,LSR#1
MOV             R2, R2,LSL#2
BL              sub_176C8
MOV             R0, #0xA ; c
BL              j_putchar_unlocked
LDR             R0, [R5] ; stream
BL              fflush
B               loc_49630
; End of function sub_495B8

off_49698 DCD aD_4      ; "^d"
off_4969C DCD optind
off_496A0 DCD asc_6AE7B+3 ; "-"
off_496A4 DCD stdout
off_496A8 DCD aAbcdefghijklmn ; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...
dword_496AC DCD 0xAAAAAAAB
off_496B0 DCD aReadError ; "read error"


; Attributes: noreturn

; void __fastcall __noreturn sub_496B4(int, char **)
sub_496B4

var_40= -0x40
format= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
s= -0x18
var_8= -8

PUSH            {R4-R11,LR}
MOV             R4, R1
SUB             SP, SP, #0x44
LDR             R1, =aLwmcl ; "lwmcL"
MOV             R0, R4
BL              sub_593CC
SUBS            R3, R0, #0
MOVEQ           R3, #0xB
STR             R3, [SP,#0x44+var_40]
LDR             R3, =optind
LDR             R3, [R3]
ADD             R8, R4, R3,LSL#2
LDR             R3, [R4,R3,LSL#2]
CMP             R3, #0
LDREQ           R3, =aStandardInput ; "standard input"
LDRNE           R3, =(aProtoRecvQSend+0x2C) ; " %s\n"
STREQ           R3, [R8,#-4]
SUBEQ           R8, R8, #4
LDREQ           R3, =(aShellReturnedI+0x13) ; "\n"
STR             R3, [SP,#0x44+var_38]
LDR             R3, [R8,#4]
CMP             R3, #0
LDRNE           R3, =(a9u+1) ; "%9u"
BNE             loc_49730
LDR             R3, [SP,#0x44+var_40]
LDR             R2, [SP,#0x44+var_40]
SUB             R3, R3, #1
TST             R3, R2
LDR             R2, =(a9u+1) ; "%9u"
LDR             R3, =(aUnknownUidU+0xC) ; "%u"
MOVNE           R3, R2

loc_49730
ADD             R7, SP, #0x44+s
MOV             R5, #0
MOV             R2, #0x14 ; n
MOV             R1, #0  ; c
MOV             R0, R7  ; s
MOV             R6, R5
STR             R3, [SP,#0x44+format]
BL              memset
ADD             R3, SP, #0x44+var_2C
STR             R3, [SP,#0x44+var_34]

loc_49758
LDR             R4, [R8]
ADD             R10, R8, #4
CMP             R4, #0
BNE             loc_49778
CMP             R6, #1
BGT             loc_49914
MOV             R0, R5
BL              sub_588D8

loc_49778
MOV             R0, R4
ADD             R6, R6, #1
BL              sub_61CD8
SUBS            R11, R0, #0
MOVEQ           R5, #1
BEQ             loc_498E0
MOV             R8, #0
MOV             R2, #0x14 ; n
MOV             R9, R8
MOV             R1, #0  ; c
ADD             R0, SP, #0x44+var_2C ; s
BL              memset

loc_497A8               ; stream
MOV             R0, R11
BL              getc_unlocked
CMN             R0, #1
MOV             R2, R0
BNE             loc_4981C
STR             R0, [SP,#0x44+var_30]
MOV             R0, R11 ; stream
BL              ferror_unlocked
CMP             R0, #0
LDR             R2, [SP,#0x44+var_30]
BEQ             loc_497E4
MOV             R0, R4
MOV             R5, #1
BL              sub_16B80
LDR             R2, [SP,#0x44+var_30]

loc_497E4
LDR             R1, [SP,#0x44+var_1C]
CMP             R1, R9
STRCC           R9, [SP,#0x44+var_1C]
CMP             R2, #0xA
BNE             loc_49908
LDR             R3, [SP,#0x44+var_2C]
MOV             R9, #0
ADD             R3, R3, #1
STR             R3, [SP,#0x44+var_2C]
B               loc_4984C

loc_4980C
MOV             R8, #1
B               loc_497A8

loc_49814
MOV             R8, #0
B               loc_497A8

loc_4981C
LDR             R1, [SP,#0x44+var_20]
ADD             R1, R1, #1
STR             R1, [SP,#0x44+var_20]
LDR             R1, [SP,#0x44+var_24]
ADD             R1, R1, #1
STR             R1, [SP,#0x44+var_24]
SUB             R1, R0, #0x20 ; ' '
CMP             R1, #0x5E ; '^'
BHI             loc_498E8
CMP             R0, #0x20 ; ' '
ADD             R9, R9, #1
BNE             loc_4980C

loc_4984C
LDR             R1, [SP,#0x44+var_28]
CMN             R2, #1
ADD             R8, R1, R8
STR             R8, [SP,#0x44+var_28]
BNE             loc_49814
MOV             R0, R11
MOV             R8, R10
BL              sub_5888C
LDR             R3, [SP,#0x44+var_8]
LDR             R2, [SP,#0x44+var_1C]
CMP             R3, R2
STRCC           R2, [SP,#0x44+var_8]
LDR             R3, [SP,#0x44+var_8]
SUB             R3, R3, R2
STR             R3, [SP,#0x44+var_8]

loc_49888               ; format
LDR             R0, [SP,#0x44+format]
MOV             R10, #0
MOV             R3, #1

loc_49894
LDR             R2, [SP,#0x44+var_34]
LDR             R11, [R2,R10,LSL#2]
LDR             R2, [SP,#0x44+var_40]
ANDS            R2, R2, R3,LSL R10
BEQ             loc_498B8
MOV             R1, R11
BL              printf
LDR             R0, =a9u ; " %9u"
MOV             R3, #1

loc_498B8
LDR             R2, [R7,R10,LSL#2]
ADD             R11, R2, R11
STR             R11, [R7,R10,LSL#2]
ADD             R10, R10, #1
CMP             R10, #5
BNE             loc_49894
MOV             R10, R8
MOV             R1, R4
LDR             R0, [SP,#0x44+var_38] ; format
BL              printf

loc_498E0
MOV             R8, R10
B               loc_49758

loc_498E8
SUB             R1, R0, #9
CMP             R1, #4
BHI             loc_497A8
CMP             R0, #9
ORREQ           R3, R9, #7
ADDEQ           R9, R3, #1
BEQ             loc_4984C
B               loc_497E4

loc_49908
CMP             R2, #0xB
MOVNE           R9, #0
B               loc_4984C

loc_49914
MOV             R6, R4
STR             R7, [SP,#0x44+var_34]
LDR             R4, =aTotal ; "total"
B               loc_49888
; End of function sub_496B4

off_49924 DCD aLwmcl    ; "lwmcL"
off_49928 DCD optind
off_4992C DCD aStandardInput ; "standard input"
off_49930 DCD aProtoRecvQSend+0x2C ; " %s\n"
off_49934 DCD aShellReturnedI+0x13 ; "\n"
off_49938 DCD a9u+1     ; "%9u"
off_4993C DCD aUnknownUidU+0xC ; "%u"
off_49940 DCD a9u       ; " %9u"
off_49944 DCD aTotal    ; "total"



; struct utmpx *__fastcall sub_49948(int, char **)
sub_49948

var_C4= -0xC4
var_C0= -0xC0
var_BC= -0xBC
var_B8= -0xB8
var_B4= -0xB4
var_A8= -0xA8
var_A0= -0xA0
var_9C= -0x9C
dest= -0x94
var_8F= -0x8F
var_6C= -0x6C
var_24= -0x24
var_4= -4

PUSH            {R4-R11,LR}
MOV             R0, R1
SUB             SP, SP, #0xC4
LDR             R1, =aAh ; "^aH"
BL              sub_593CC
TST             R0, #2
MOV             R7, R0
BEQ             loc_49970
LDR             R0, =aUserTtyIdleTim ; "USER\t\tTTY\t\tIDLE\tTIME\t\t HOST"
BL              puts

loc_49970
LDR             R9, =aDev ; "/dev/"
LDR             R10, =a15S15S7s1616sS ; "%-15.*s %-15.*s %-7s %-16.16s %.*s\n"
LDR             R11, =0x1517F
BL              setutxent

loc_49980
BL              getutxent
SUBS            R4, R0, #0
BNE             loc_49994
ADD             SP, SP, #0xC4
POP             {R4-R11,PC}

loc_49994
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
BEQ             loc_49980
TST             R7, #1
BNE             loc_499B4
LDRSH           R3, [R4]
CMP             R3, #7
BNE             loc_49980

loc_499B4
MOV             R3, #0x3F ; '?'
MOV             R1, R9  ; src
ADD             R0, SP, #0xC4+dest ; dest
STRH            R3, [SP,#0xC4+var_9C]
BL              strcpy
LDRB            R3, [R4,#8]
ADD             R8, R4, #8
MOV             R2, #0x21 ; '!'
MOV             R1, R8
ADD             R6, SP, #0xC4+var_9C
CMP             R3, #0x2F ; '/'
ADDNE           R0, SP, #0xC4+var_8F
ADDEQ           R0, SP, #0xC4+dest
BL              sub_60B34
ADD             R1, SP, #0xC4+var_6C
ADD             R0, SP, #0xC4+dest
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_49A50
LDR             R5, [SP,#0xC4+var_24]
BL              time
SUB             R5, R0, R5
CMP             R5, R11
BHI             loc_49A98
MOV             R1, #0xE10
MOV             R0, R5
BLX             sub_161AC
MOV             R0, R1
MOV             R1, #0x3C ; '<'
BLX             sub_15F18
MOV             R1, #0xE10
STR             R0, [SP,#0xC4+var_A8]
MOV             R0, R5
BLX             sub_15F18
LDR             R3, [SP,#0xC4+var_A8]
MOV             R2, R0
LDR             R1, =a02d02d ; "%02d:%02d"
MOV             R0, R6  ; s
BL              sprintf

loc_49A50
LDR             R3, [R4,#0x154]
ADD             R0, SP, #0xC4+var_4
STR             R3, [R0,#-0x9C]! ; timer
BL              ctime
ADD             R3, R4, #0x4C ; 'L'
ADD             R0, R0, #4
STR             R3, [SP,#0xC4+var_B4]
MOV             R3, #0x100
STR             R3, [SP,#0xC4+var_B8]
MOV             R3, #0x20 ; ' '
STR             R0, [SP,#0xC4+var_BC]
ADD             R2, R4, #0x2C ; ','
STR             R6, [SP,#0xC4+var_C0]
MOV             R1, R3
STR             R8, [SP,#0xC4+var_C4]
MOV             R0, R10 ; format
BL              printf
B               loc_49980

loc_49A98
LDR             R1, =aOld ; "old"
MOV             R0, R6  ; dest
BL              strcpy
B               loc_49A50
; End of function sub_49948

off_49AA8 DCD aAh       ; "^aH"
off_49AAC DCD aUserTtyIdleTim ; "USER\t\tTTY\t\tIDLE\tTIME\t\t HOST"
off_49AB0 DCD aDev      ; "/dev/"
off_49AB4 DCD a15S15S7s1616sS ; "%-15.*s %-15.*s %-7s %-16.16s %.*s\n"
dword_49AB8 DCD 0x1517F
off_49ABC DCD a02d02d   ; "%02d:%02d"
off_49AC0 DCD aOld      ; "old"


; Attributes: noreturn

; void __fastcall __noreturn sub_49AC4(int, _DWORD *)
sub_49AC4
LDR             R3, =(aIsY+3) ; "y"
PUSH            {R4-R6,LR}
MOV             R4, R1
LDR             R6, =stdout
STR             R3, [R4],#4
LDR             R3, [R1,#4]
CMP             R3, #0
MOVEQ           R4, R1

loc_49AE4
MOV             R5, R4

loc_49AE8
LDR             R0, [R5]
LDR             R1, [R6]
BL              fputs_unlocked
LDR             R3, [R5,#4]!
CMP             R3, #0
BEQ             loc_49B0C
MOV             R0, #0x20 ; ' ' ; c
BL              putchar_unlocked
B               loc_49AE8

loc_49B0C               ; c
MOV             R0, #0xA
BL              putchar_unlocked
CMN             R0, #1
BNE             loc_49AE4
BL              sub_5E304
; End of function sub_49AC4

off_49B20 DCD aIsY+3    ; "y"
off_49B24 DCD stdout



; int __fastcall sub_49B28(const char *, int, int (*)(void))
sub_49B28
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
BLX             R2
CMP             R0, #0
BGE             loc_49B68
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_49B80
MOV             R1, R5
LDR             R0, =aCanTStatS ; "can't stat '%s'"
BL              sub_16AF4
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_49B68
LDR             R3, [R4,#0x10]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
MOVEQ           R0, #3
MOVNE           R0, #1
POP             {R4-R6,PC}

loc_49B80
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_49B28

off_49B88 DCD dword_7DB94
off_49B8C DCD aCanTStatS ; "can't stat '%s'"



; int __fastcall sub_49B90(const char *, int)
sub_49B90
LDR             R2, =(sub_62DFC+1)
B               sub_49B28
; End of function sub_49B90

off_49B98 DCD sub_62DFC+1



; int __fastcall sub_49B9C(char **, int, int)
sub_49B9C

var_8= -8
var_4= -4

PUSH            {R0-R2,R4,R5,LR}
MOV             R5, #0
ADD             R2, SP, #0xC+var_4
LDR             R1, =aM ; "m:"
STR             R5, [R2,#-4]!
BL              sub_593CC
TST             R0, #1
MOVWEQ          R4, #0x1B6
BEQ             loc_49BE0
MOVW            R1, #0x1B6 ; nptr
LDR             R0, [SP,#0xC+var_8] ; int
BL              sub_5E0F4
CMN             R0, #1
MOV             R4, R0
BEQ             loc_49BE0
MOV             R0, R5  ; mask
BL              umask

loc_49BE0
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_49B9C

off_49BEC DCD aM        ; "m:"



; char *__fastcall sub_49BF0(int)
sub_49BF0

var_7C= -0x7C
s= -0x68
var_50= -0x50
var_49= -0x49

PUSH            {R4-R8,LR}
MOV             R6, R0
LDR             R4, =buf
SUB             SP, SP, #0x80
LDR             R3, [R4,#termios.c_lflag]
CMP             R3, #0
BEQ             loc_49CA0
MOV             R2, R0
LDR             R1, =aProcUExe ; "/proc/%u/exe"
ADD             R0, SP, #0x80+s ; s
BL              sprintf
ADD             R3, SP, #0x80+s
SUB             R0, R0, #3
ADD             R7, R3, R0
MOV             R0, R3
BL              sub_17B80
SUBS            R8, R0, #0
MOVEQ           R5, R8
BEQ             loc_49C50
MOV             R1, R8  ; s2
LDR             R0, [R4,#termios.c_lflag] ; s1
BL              strcmp
CLZ             R5, R0
MOV             R5, R5,LSR#5

loc_49C50               ; ptr
MOV             R0, R8
BL              free
CMP             R5, #0
BNE             loc_49CA0
LDR             R1, =(aSCmdline+3) ; src
MOV             R0, R7  ; dest
BL              strcpy
LDR             R2, [R4,#termios.c_cc+7]
ADD             R0, SP, #0x80+s
LDR             R1, [R4,#termios.c_cc+3]
BL              sub_180C8
CMP             R0, #0
BLE             loc_49D54
LDR             R3, [R4,#termios.c_cc+3]
STRB            R5, [R3,R0]
LDR             R1, [R4,#termios.c_cc+3] ; s2
LDR             R0, [R4,#termios.c_lflag] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_49D54

loc_49CA0
LDR             R3, [R4,#termios.c_cflag]
CMP             R3, #0
BNE             loc_49CD0

loc_49CAC
LDR             R3, [R4,#termios.c_oflag]
CMP             R3, #0
BNE             loc_49D5C

loc_49CB8
MOV             R0, #8
BL              sub_1748C
LDR             R3, [R4]
STM             R0, {R3,R6}
STR             R0, [R4]
B               loc_49D54

loc_49CD0
MOV             R2, R6
LDR             R1, =aProcUStat ; "/proc/%u/stat"
ADD             R0, SP, #0x80+s ; s
BL              sprintf
ADD             R1, SP, #0x80+s
MOV             R2, #0x1F
MOV             R0, R1
BL              sub_180C8
CMP             R0, #0
BLT             loc_49D54
MOV             R7, #0
MOV             R1, #0x28 ; '(' ; c
ADD             R0, SP, #0x80+s ; s
STRB            R7, [SP,#0x80+var_49]
BL              strchr
CMP             R0, #0
BEQ             loc_49D54
ADD             R5, R0, #1
MOV             R1, #0x29 ; ')' ; c
MOV             R0, R5  ; s
BL              strrchr
CMP             R0, #0
BEQ             loc_49D54
STRB            R7, [R0]
MOV             R0, R5  ; s
BL              strlen
CMP             R0, #0xE
BHI             loc_49D54
LDR             R1, [R4,#termios.c_cflag] ; s2
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, R7
BEQ             loc_49CAC

loc_49D54
ADD             SP, SP, #0x80
POP             {R4-R8,PC}

loc_49D5C
MOV             R2, R6
LDR             R1, =aProcU_0 ; "/proc/%u"
ADD             R0, SP, #0x80+var_7C ; s
BL              sprintf
ADD             R1, SP, #0x80+s
ADD             R0, SP, #0x80+var_7C
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_49D54
LDR             R3, [R4,#termios.c_cc+0xB]
LDR             R2, [SP,#0x80+var_50]
CMP             R2, R3
BEQ             loc_49CB8
B               loc_49D54
; End of function sub_49BF0

off_49D94 DCD buf
off_49D98 DCD aProcUExe ; "/proc/%u/exe"
off_49D9C DCD aSCmdline+3 ; "cmdline"
off_49DA0 DCD aProcUStat ; "/proc/%u/stat"
off_49DA4 DCD aProcU_0  ; "/proc/%u"



; unsigned int __fastcall sub_49DA8(int, char **)
sub_49DA8

var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
file= -0x18
s= -0x14
var_10= -0x10
var_C= -0xC
groups= -8

PUSH            {R4-R11,LR}
MOV             R3, #0xFFFFFFFF
LDR             R6, =buf
SUB             SP, SP, #0x3C
MOV             R2, #0xF
MOV             R8, R1
MOV             R0, R8
LDR             R1, =aKsbqtmaNSUCXPO ; "^KSbqtma:n:s:u:c:x:p:ovN:R:"
STRB            R3, [R6,#termios.c_cc+0xB]
MOV             R4, R6
STRB            R3, [R6,#termios.c_cc+0xC]
STRB            R3, [R6,#termios.c_cc+0xD]
STRB            R3, [R6,#termios.c_cc+0xE]
MOV             R3, #0
STRB            R2, [R6,#termios.c_cc+0xF]
STRB            R3, [R6,#termios.c_cc+0x10]
STRB            R3, [R6,#termios.c_cc+0x11]
STRB            R3, [R6,#termios.c_cc+0x12]
STR             R3, [SP,#0x3C+var_20]
ADD             R3, SP, #0x3C+var_10
STR             R3, [SP,#0x3C+var_24]
ADD             R3, R6, #0x10
STR             R3, [SP,#0x3C+var_28]
ADD             R3, R6, #0xC
STR             R3, [SP,#0x3C+var_2C]
ADD             R3, SP, #0x3C+s
STR             R3, [SP,#0x3C+var_30]
ADD             R3, R6, #4
STR             R3, [SP,#0x3C+var_34]
ADD             R3, SP, #0x3C+var_1C
STR             R3, [SP,#0x3C+var_38]
ADD             R3, R6, #8
STR             R3, [SP,#0x3C+var_3C]
ADD             R3, SP, #0x3C+file
LDR             R2, =aStop ; "stop"
BL              sub_593F8
TST             R0, #0x100
MOV             R7, R0
BEQ             loc_49E5C
LDR             R0, [SP,#0x3C+var_1C]
BL              sub_61000
CMP             R0, #0
STR             R0, [R6,#termios.c_cc+0xF]
BGE             loc_49E5C
BL              sub_162F0

loc_49E5C
LDR             R3, [R4,#termios.c_lflag]
TST             R7, #0x40
STREQ           R3, [SP,#0x3C+file]
CMP             R3, #0
LDREQ           R3, [SP,#0x3C+file]
STREQ           R3, [R4,#termios.c_lflag]
LDR             R0, [R4,#termios.c_lflag] ; s
CMP             R0, #0
BEQ             loc_49E98
BL              strlen
ADD             R3, R0, #1
ADD             R0, R0, #2
STR             R3, [R4,#termios.c_cc+7]
BL              sub_1748C
STR             R0, [R4,#termios.c_cc+3]

loc_49E98
LDR             R3, =optind
LDR             R0, [R4,#termios.c_oflag]
LDR             R3, [R3]
CMP             R0, #0
ADD             R8, R8, R3,LSL#2
BEQ             loc_49EE0
MOV             R2, #0xA
MOV             R1, #0
BL              sub_18990
LDR             R3, =dword_7DB94
STR             R0, [R4,#termios.c_cc+0xB]
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_49EE0
LDR             R0, [R4,#termios.c_oflag]
BL              sub_57B54
STR             R0, [R4,#termios.c_cc+0xB]

loc_49EE0
LDR             R5, [R4,#termios.c_line]
CMP             R5, #0
BEQ             loc_49FC4
MOV             R0, R5
BL              sub_61C9C
SUBS            R5, R0, #0
BEQ             loc_49FA4
ADD             R2, SP, #0x3C+var_C
LDR             R1, =(aUnknownUidU+0xC) ; format
BL              fscanf
CMP             R0, #1
BNE             loc_49F18
LDR             R0, [SP,#0x3C+var_C]
BL              sub_49BF0

loc_49F18               ; stream
MOV             R0, R5
BL              fclose

loc_49F20
TST             R7, #1
LDR             R9, =dword_7DBC0
BEQ             loc_4A100
LDR             R6, [R4,#termios.c_cflag]
CMP             R6, #0
BNE             loc_49F6C
LDR             R6, [R4,#termios.c_lflag]
CMP             R6, #0
BNE             loc_49F6C
LDR             R1, [R4,#termios.c_line]
CMP             R1, #0
LDRNE           R0, =aProcessInPidfi ; "process in pidfile '%s'"
BNE             loc_49F64
LDR             R1, [R4,#termios.c_oflag]
CMP             R1, #0
BEQ             loc_4A038
LDR             R0, =aProcessEsOwned ; "process(es) owned by '%s'"

loc_49F64
BL              sub_177E4
MOV             R6, R0

loc_49F6C
LDR             R8, [R4]
LDR             R3, [R9]
CMP             R8, #0
BNE             loc_4A050
TST             R3, #8
BEQ             loc_4A040

loc_49F84
MOV             R5, #0xFFFFFFFF

loc_49F88
CMP             R5, #0
EOR             R0, R7, #0x2000
MOVGT           R5, #0
MOVLE           R5, #1
AND             R0, R5, R0,LSR#13

loc_49F9C
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}

loc_49FA4
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
LDRNE           R1, [R4,#termios.c_line]
LDRNE           R0, =aOpenPidfileS ; "open pidfile %s"
BEQ             loc_49F20

loc_49FC0
BL              sub_16B40

loc_49FC4
LDR             R0, =(aNoProcessInfoI+0x13) ; "/proc"
MOV             R10, R5
BL              sub_17980
LDR             R3, =dword_7DB94
MOV             R9, R0
LDR             R6, [R3]

loc_49FDC
STR             R10, [R6]
MOV             R0, R9
BL              readdir64
LDR             R1, [R6]
CMP             R1, #0
BNE             loc_49FDC
CMP             R0, #0
BEQ             loc_4A020
MOV             R2, #0xA
ADD             R0, R0, #0x13
BL              sub_18990
LDR             R3, [R6]
MOV             R5, R0
CMP             R3, #0
BNE             loc_49FDC
BL              sub_49BF0
B               loc_49FDC

loc_4A020               ; dirp
MOV             R0, R9
BL              closedir
CMP             R5, #0
LDREQ           R0, =aNothingInProcN ; "nothing in /proc - not mounted?"
BNE             loc_49F20

loc_4A034
BL              sub_16DBC

loc_4A038
LDR             R0, =aInternalErrorP ; "internal error, please report"
B               loc_4A034

loc_4A040
MOV             R1, R6
LDR             R0, =aNoSFoundNoneKi ; "no %s found; none killed\n"
BL              printf
B               loc_49F84

loc_4A050
LDR             R11, =aWarningKilling ; "warning: killing process %u"
MOV             R5, #0
MOV             R10, R5

loc_4A05C
LDR             R3, [R9]
LDR             R0, [R8,#4] ; pid
TST             R3, #0x10
LDREQ           R1, [R4,#termios.c_cc+0xF]
MOVNE           R1, #0  ; sig
BL              kill
CMP             R0, #0
ADDEQ           R5, R5, #1
BEQ             loc_4A09C
LDR             R1, [R8,#4]
MOV             R0, R11
BL              sub_16AF4
LDR             R3, [R9]
STR             R10, [R8,#4]
TST             R3, #0x10
BNE             loc_49F84

loc_4A09C
LDR             R8, [R8]
CMP             R8, #0
BNE             loc_4A05C
LDR             R3, [R9]
TST             R3, #8
BNE             loc_49F88
CMP             R5, #0
BEQ             loc_49F88
MOV             R1, R6
LDR             R0, =aStoppedSPid ; "stopped %s (pid"
BL              printf
LDR             R6, =(aUnknownUidU+0xB) ; " %u"
LDR             R4, [R4]

loc_4A0D0
CMP             R4, #0
BNE             loc_4A0E4
LDR             R0, =(aDup+6) ; s
BL              puts
B               loc_49F88

loc_4A0E4
LDR             R1, [R4,#4]
CMP             R1, #0
BEQ             loc_4A0F8
MOV             R0, R6  ; format
BL              printf

loc_4A0F8
LDR             R4, [R4]
B               loc_4A0D0

loc_4A100
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_4A134
LDR             R2, [R9]
TST             R2, #8
BNE             loc_4A128
LDR             R2, [R3,#4]
LDR             R1, [R4,#termios.c_lflag]
LDR             R0, =aSIsAlreadyRunn ; "%s is already running\n%u\n"
BL              printf

loc_4A128
EOR             R0, R7, #0x2000
UBFX            R0, R0, #0xD, #1
B               loc_49F9C

loc_4A134
LDR             R3, [SP,#0x3C+file]
TST             R7, #4
SUB             R5, R8, #4
STR             R3, [R8,#-4]
BEQ             loc_4A150
MOV             R0, #0x16
BL              sub_61B48

loc_4A150
TST             R7, #0x20
BEQ             loc_4A160
LDR             R0, [R4,#termios.c_line]
BL              sub_5E30C

loc_4A160
TST             R7, #0x400
BEQ             loc_4A194
ADD             R0, SP, #0x3C+var_C ; int
LDR             R1, [SP,#0x3C+s] ; s
BL              sub_6278C
LDR             R0, [SP,#0x3C+var_C]
CMN             R0, #1
BEQ             loc_4A1E4
BL              sub_57AB8
LDR             R3, [SP,#0x3C+groups]
CMN             R3, #1
STRNE           R3, [R0,#0xC]
BL              sub_57CD8

loc_4A194
TST             R7, #0x8000
BEQ             loc_4A204
MOV             R1, #0  ; who
MOV             R0, R1  ; which
BL              getpriority
MOV             R2, #0x3FFFFFFF
MOV             R4, R0
MOV             R1, #0xC0000000
LDR             R0, [SP,#0x3C+var_10]
BL              sub_62154
MOV             R1, #0  ; who
ADD             R4, R4, R0
MOV             R2, R4  ; prio
MOV             R0, R1  ; which
BL              setpriority
CMP             R0, #0
BGE             loc_4A204
MOV             R1, R4
LDR             R0, =aSetpriorityD ; "setpriority(%d)"
B               loc_49FC0

loc_4A1E4
LDR             R0, [SP,#0x3C+groups]
CMN             R0, #1
BEQ             loc_4A194
BL              sub_178C4
ADD             R1, SP, #0x3C+groups ; groups
MOV             R0, #1  ; n
BL              setgroups
B               loc_4A194

loc_4A204               ; argv
MOV             R1, R5
LDR             R0, [SP,#0x3C+file] ; file
BL              execvp
LDR             R1, [SP,#0x3C+file]
LDR             R0, =aCanTExecuteS ; "can't execute '%s'"
B               loc_49FC0
; End of function sub_49DA8

off_4A21C DCD buf
off_4A220 DCD aKsbqtmaNSUCXPO ; "^KSbqtma:n:s:u:c:x:p:ovN:R:"
off_4A224 DCD aStop     ; "stop"
off_4A228 DCD optind
off_4A22C DCD dword_7DB94
off_4A230 DCD aUnknownUidU+0xC ; "%u"
off_4A234 DCD dword_7DBC0
off_4A238 DCD aProcessInPidfi ; "process in pidfile '%s'"
off_4A23C DCD aProcessEsOwned ; "process(es) owned by '%s'"
off_4A240 DCD aOpenPidfileS ; "open pidfile %s"
off_4A244 DCD aNoProcessInfoI+0x13 ; "/proc"
off_4A248 DCD aNothingInProcN ; "nothing in /proc - not mounted?"
off_4A24C DCD aInternalErrorP ; "internal error, please report"
off_4A250 DCD aNoSFoundNoneKi ; "no %s found; none killed\n"
off_4A254 DCD aWarningKilling ; "warning: killing process %u"
off_4A258 DCD aStoppedSPid ; "stopped %s (pid"
off_4A25C DCD aUnknownUidU+0xB ; " %u"
off_4A260 DCD aDup+6    ; ")"
off_4A264 DCD aSIsAlreadyRunn ; "%s is already running\n%u\n"
off_4A268 DCD aSetpriorityD ; "setpriority(%d)"
off_4A26C DCD aCanTExecuteS ; "can't execute '%s'"



; int __fastcall sub_4A270(int, char **)
sub_4A270

var_28= -0x28
dest= -0x24
var_s0=  0

PUSH            {R4-R10,LR}
SUB             SP, SP, #0x28
LDR             R0, =(aCdpath+2) ; name
MOV             R4, R1
BL              getenv
SUBS            R8, R0, #0
BNE             loc_4A29C
LDR             R1, =(string+5) ; src
ADD             R0, SP, #0x28+dest ; dest
BL              strcpy
MOV             R8, R0

loc_4A29C
MOV             R0, R4
LDR             R1, =aA_0 ; "^a"
BL              sub_593CC
LDR             R3, =optind
MOV             R6, #0
LDR             R9, =dword_7DBC0
LDR             R3, [R3]
ADD             R4, R4, R3,LSL#2

loc_4A2BC
LDR             R5, [R4]
MOV             R1, #0x2F ; '/' ; c
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_4A310
MOV             R0, R5
BL              sub_58760
CMP             R0, #0
MOVEQ           R5, #1
BEQ             loc_4A2F4
MOV             R5, #0
LDR             R0, [R4] ; s
BL              puts

loc_4A2F4
LDR             R3, [R4,#4]!
ORR             R6, R6, R5
CMP             R3, #0
BNE             loc_4A2BC
MOV             R0, R6
ADD             SP, SP, #0x28 ; '('
POP             {R4-R10,PC}

loc_4A310
MOV             R5, #1
ADD             R7, SP, #0x28+var_s0
STR             R8, [R7,#-0x28]!

loc_4A31C
MOV             R1, R7
LDR             R0, [R4]
BL              sub_587B4
SUBS            R10, R0, #0
BEQ             loc_4A2F4
BL              puts
MOV             R0, R10 ; ptr
MOV             R5, #0
BL              free
LDR             R3, [R9]
CMP             R3, R5
BEQ             loc_4A2F4
B               loc_4A31C
; End of function sub_4A270

off_4A350 DCD aCdpath+2 ; "PATH"
off_4A354 DCD string+5  ; "/sbin:/usr/sbin:/bin:/usr/bin"
off_4A358 DCD aA_0      ; "^a"
off_4A35C DCD optind
off_4A360 DCD dword_7DBC0



; int __fastcall sub_4A364(int)
sub_4A364
SUB             R2, R0, #1
MOV             R0, #0

loc_4A36C
LDRB            R3, [R2,#1]!
CMP             R3, #0
BXEQ            LR
RSB             R0, R0, R0,LSL#6
ADD             R0, R3, R0
B               loc_4A36C
; End of function sub_4A364




; unsigned __int8 *__fastcall sub_4A384(unsigned __int8 *result)
sub_4A384
LDR             R3, =dword_7DB98
LDR             R2, [R3]

loc_4A38C
LDRB            R3, [R0]
CMP             R3, #0x5C ; '\'
BNE             loc_4A3BC
LDRB            R1, [R0,#1]
CMP             R1, #0xA
BNE             loc_4A3BC
LDR             R3, [R2,#0xC]
ADD             R0, R0, #1
ADD             R3, R3, #1
STR             R3, [R2,#0xC]

loc_4A3B4
ADD             R0, R0, #1
B               loc_4A38C

loc_4A3BC
CMP             R3, #0x20 ; ' '
CMPNE           R3, #9
BXNE            LR
B               loc_4A3B4
; End of function sub_4A384

off_4A3CC DCD dword_7DB98



; int __fastcall sub_4A3D0(int *)
sub_4A3D0
MOV             R3, R0
LDR             R0, [R0]

loc_4A3D8
LDR             R2, [R3]
ADD             R1, R2, #1
STR             R1, [R3]
LDRB            R2, [R2]
CMP             R2, #0
BXEQ            LR
B               loc_4A3D8
; End of function sub_4A3D0




; void sub_4A3F4()
sub_4A3F4
LDR             R3, =dword_7DB98
MOV             R2, #1
LDR             R3, [R3]
STR             R2, [R3,#-8]
BX              LR
; End of function sub_4A3F4

off_4A408 DCD dword_7DB98



; _DWORD *__fastcall sub_4A40C(_DWORD **)
sub_4A40C
LDR             R3, [R0]
CMP             R3, #0
BEQ             loc_4A434
LDR             R2, [R3]
AND             R2, R2, #0xFF00
CMP             R2, #0x1300
LDREQ           R2, [R3,#0xC]
STREQ           R2, [R0]
LDREQ           R3, [R3,#8]
BEQ             loc_4A43C

loc_4A434
MOV             R2, #0
STR             R2, [R0]

loc_4A43C
MOV             R0, R3
BX              LR
; End of function sub_4A40C




; _DWORD *sub_4A444()
sub_4A444
PUSH            {R4,LR}
MOV             R0, #0x14
BL              sub_174DC
MOV             R3, #0x3D ; '='
MOV             R4, R0
STR             R3, [R0,#4]
MOV             R0, #0xF4
BL              sub_174DC
STR             R0, [R4,#0x10]
MOV             R0, R4
POP             {R4,PC}
; End of function sub_4A444




; int __fastcall sub_4A470(int *)
sub_4A470
PUSH            {R4,LR}
MOV             R4, R0

loc_4A478
LDR             R3, [R4]
TST             R3, #0x2000
BNE             loc_4A4A4
TST             R3, #2
BNE             loc_4A49C
ORR             R3, R3, #2
STR             R3, [R4]
BL              sub_4A444
STR             R0, [R4,#0x14]

loc_4A49C
LDR             R0, [R4,#0x14]
POP             {R4,PC}

loc_4A4A4
LDR             R4, [R4,#0x14]
B               loc_4A478
; End of function sub_4A470




; _DWORD *__fastcall sub_4A4AC(int)
sub_4A4AC
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, #0x14
BL              sub_174DC
LDR             R2, =dword_7DB98
STR             R4, [R0]
LDR             R2, [R2]
LDR             R2, [R2,#-0x38]
STR             R2, [R0,#4]
POP             {R4,PC}
; End of function sub_4A4AC

off_4A4D4 DCD dword_7DB98



; _DWORD *__fastcall sub_4A4D8(int)
sub_4A4D8
LDR             R3, =dword_7DB98
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R0, =0xAAAAAAAB
MOV             R6, #0
LDR             R4, [R3]

loc_4A4F0
LDR             R1, [R4,#-0x28]
CMP             R1, #0
BNE             loc_4A564
CMP             R5, #0x40 ; '@'
MOV             R0, #0x18
MOVGE           R7, R5
MOVLT           R7, #0x40 ; '@'
MUL             R0, R0, R7
ADD             R0, R0, #0x10
BL              sub_174DC
CMP             R6, #0
MOV             R3, R0
STR             R0, [R4,#-0x28]
STR             R7, [R3],#0x10
STMIB           R0, {R3,R6}
STRNE           R0, [R6,#0xC]

loc_4A530
LDR             R2, [R4,#-0x28]
MOV             R3, #0x18
LDR             R0, [R2,#4]
MLA             R5, R3, R5, R0
MOV             R3, R0
STR             R5, [R2,#4]
MOV             R2, #0

loc_4A54C
CMP             R5, R3
POPLS           {R4-R8,PC}
STR             R2, [R3]
ADD             R3, R3, #0x18
STR             R2, [R3,#-8]
B               loc_4A54C

loc_4A564
LDR             R2, [R1,#4]
ADD             R3, R1, #0x10
SUB             R3, R2, R3
LDR             R2, [R1]
MOV             R3, R3,ASR#3
MLA             R3, R0, R3, R5
CMP             R3, R2
BLE             loc_4A530
LDR             R3, [R1,#0xC]
MOV             R6, R1
STR             R3, [R4,#-0x28]
B               loc_4A4F0
; End of function sub_4A4D8

off_4A594 DCD dword_7DB98
dword_4A598 DCD 0xAAAAAAAB



; void *__fastcall sub_4A59C(void *result, int, int *)
sub_4A59C
SUBS            R3, R0, #0
BEQ             loc_4A5B0
LDR             R12, [R2]
CMP             R12, R1
BXGT            LR

loc_4A5B0
ADD             R1, R1, R1,ASR#1
MOV             R0, R3
ADD             R1, R1, #0x50 ; 'P'
STR             R1, [R2]
B               sub_174B4
; End of function sub_4A59C




; int __fastcall sub_4A5C4(int)
sub_4A5C4
LDR             R3, [R0]
PUSH            {R4,LR}
MOV             R4, R0
TST             R3, #0x1000
BNE             loc_4A5E0
LDR             R0, [R0,#0x10] ; ptr
BL              free

loc_4A5E0
LDR             R3, [R4]
MOV             R0, R4
BIC             R3, R3, #0x13C0
BIC             R3, R3, #0x3D ; '='
MOV             R3, R3,LSL#17
MOV             R3, R3,LSR#17
ORR             R3, R3, #0x4000
STR             R3, [R4]
MOV             R3, #0
STR             R3, [R4,#0x10]
POP             {R4,PC}
; End of function sub_4A5C4




; int __fastcall sub_4A60C(int result)
sub_4A60C
LDR             R3, =dword_7DB98
PUSH            {R4-R8,LR}
MOV             R6, R0
LDR             R4, [R3]
LDR             R7, [R4,#-0x30]
CMP             R7, R0
BLE             loc_4A648

loc_4A628
MOV             R5, #0x18
MOV             R7, R6
MUL             R5, R5, R6

loc_4A634
LDR             R3, [R4,#-0x34]
CMP             R3, R7
BGT             loc_4A690
STR             R6, [R4,#-0x34]
POP             {R4-R8,PC}

loc_4A648
ADD             R1, R0, #0x10
MOV             R5, #0x18
STR             R1, [R4,#-0x30]
MUL             R1, R5, R1
LDR             R0, [R4,#-0x2C]
BL              sub_174B4
LDR             R3, [R4,#-0x30]
MOV             R2, #0x400
STR             R0, [R4,#-0x2C]
MLA             R0, R5, R7, R0
MOV             R1, #0

loc_4A674
CMP             R3, R7
ADD             R0, R0, #0x18
BLE             loc_4A628
STR             R2, [R0,#-0x18]
ADD             R7, R7, #1
STR             R1, [R0,#-8]
B               loc_4A674

loc_4A690
LDR             R0, [R4,#-0x2C]
ADD             R7, R7, #1
ADD             R0, R0, R5
ADD             R5, R5, #0x18
BL              sub_4A5C4
B               loc_4A634
; End of function sub_4A60C

off_4A6A8 DCD dword_7DB98



; void __fastcall sub_4A6AC(_DWORD *)
sub_4A6AC
PUSH            {R4-R8,LR}
MOV             R5, R0
MOV             R6, #0

loc_4A6B8
LDR             R3, [R5,#4]
CMP             R3, R6
BHI             loc_4A6D4
MOV             R3, #0
STR             R3, [R5]
STR             R3, [R5,#0xC]
POP             {R4-R8,PC}

loc_4A6D4
LDR             R3, [R5,#0x10]
MOV             R7, R6,LSL#2
LDR             R4, [R3,R6,LSL#2]

loc_4A6E0
CMP             R4, #0
LDREQ           R3, [R5,#0x10]
ADDEQ           R6, R6, #1
STREQ           R4, [R3,R7]
BEQ             loc_4A6B8
LDR             R8, [R4,#0x18]
LDR             R0, [R4,#0x10] ; ptr
BL              free
MOV             R0, R4  ; ptr
MOV             R4, R8
BL              free
B               loc_4A6E0
; End of function sub_4A6AC




; _DWORD *__fastcall sub_4A710(int)
sub_4A710
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
MOV             R6, R0
LDR             R4, [R3]
LDR             R5, [R4,#-0x5C]
LDR             R0, [R5]
CMP             R0, #0
BNE             loc_4A740
BL              sub_4A4AC
LDR             R3, [R4,#-0x5C]
STR             R0, [R5,#4]
STR             R0, [R3]

loc_4A740
LDR             R3, [R4,#-0x5C]
LDR             R2, [R4,#-0x3C]
LDR             R1, [R3,#8]
CMP             R1, R2
BEQ             loc_4A770
STR             R2, [R3,#8]
MOV             R0, #0x300
BL              sub_4A710
MOV             R5, R0
LDR             R0, [R4,#-0x3C]
BL              sub_174F8
STR             R0, [R5,#8]

loc_4A770
LDR             R3, [R4,#-0x5C]
MOV             R0, #0x2800
LDR             R5, [R3,#4]
STR             R6, [R5]
BL              sub_4A4AC
LDR             R3, [R4,#-0x5C]
STR             R0, [R5,#0x10]
STR             R0, [R3,#4]
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_4A710

off_4A798 DCD dword_7DB98



; int __fastcall sub_4A79C(const char *, int)
sub_4A79C
LDR             R3, [R1]
PUSH            {R4-R8,LR}
MOV             R5, R0
MOV             R4, R1
ADD             R7, R1, #0x14
AND             R3, R3, #0xFF00
ADD             R6, R1, #0x34 ; '4'
CMP             R3, #0x2100
BNE             loc_4A7D0
MOV             R0, R7  ; preg
BL              regfree
MOV             R0, R6  ; preg
BL              regfree

loc_4A7D0
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_4A820
LDRB            R2, [R5,#1]
CMP             R2, #0
BEQ             loc_4A820
MOV             R3, #0x2100
MOV             R2, #1
MOV             R1, R5
MOV             R0, R7
STR             R3, [R4]
STR             R7, [R4,#8]
STR             R6, [R4,#0xC]
BL              sub_625E4
MOV             R2, #3
MOV             R1, R5
MOV             R0, R6
BL              sub_625E4

loc_4A818
MOV             R0, R4
POP             {R4-R8,PC}

loc_4A820
STR             R3, [R4]
B               loc_4A818
; End of function sub_4A79C




; int __fastcall sub_4A828(double)
sub_4A828

endptr= -4

LDR             R3, [R0]
MOVW            R2, #0x101
PUSH            {R0,R1,R4,LR}
MOV             R4, R0
TST             R3, R2
BNE             loc_4A8B0
MOV             R0, #0
MOV             R1, #0
STRD            R0, R1, [R4,#8]
LDR             R0, [R4,#0x10] ; nptr
CMP             R0, #0
STR             R0, [SP,#8+endptr]
BEQ             loc_4A89C
LDRB            R2, [R0]
CMP             R2, #0
BEQ             loc_4A89C
ADD             R1, SP, #8+endptr ; endptr
BL              strtod
LDR             R3, [R4]
VSTR            D0, [R4,#8]
TST             R3, #0x200
BEQ             loc_4A8A4
LDR             R0, [SP,#8+endptr]
BL              sub_4A384
STR             R0, [SP,#8+endptr]
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_4A8A4
LDR             R3, [R4]

loc_4A89C
BIC             R3, R3, #0x200
STR             R3, [R4]

loc_4A8A4
LDR             R3, [R4]
ORR             R3, R3, #0x100
STR             R3, [R4]

loc_4A8B0
VLDR            D0, [R4,#8]
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_4A828




; int __fastcall sub_4A8BC(double)
sub_4A8BC
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_4A828
MOVW            R3, #0x4201
LDR             R0, [R4]
EOR             R0, R0, #0x4000
ANDS            R0, R0, R3
BEQ             loc_4A8F4
VLDR            D7, [R4,#8]
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
MOVNE           R0, #1
MOVEQ           R0, #0
POP             {R4,PC}

loc_4A8F4
LDR             R3, [R4,#0x10]
CMP             R3, #0
POPEQ           {R4,PC}
LDRB            R0, [R3]
MOVS            R0, R0
MOVNE           R0, #1
POP             {R4,PC}
; End of function sub_4A8BC




; int __fastcall sub_4A910(double)
sub_4A910
PUSH            {R4,LR}
BL              sub_4A828
VCMPE.F64       D0, #0.0
VMRS            APSR_nzcv, FPSCR
VNEGLT.F64      D0, D0
VCVTLT.U32.F64  S0, D0
VCVTGE.U32.F64  S15, D0
VMOVLT          R3, S0
VMOVGE          R0, S15
RSBLT           R0, R3, #0
POP             {R4,PC}
; End of function sub_4A910




; int __fastcall sub_4A93C(int, const char *)
sub_4A93C
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, R1
MOV             R5, R1
BL              sub_4A364
LDR             R1, [R4,#4]
BLX             sub_15EFC
LDR             R3, [R4,#0x10]
LDR             R4, [R3,R1,LSL#2]

loc_4A960
CMP             R4, #0
BNE             loc_4A970

loc_4A968
MOV             R0, R4
POP             {R4-R6,PC}

loc_4A970               ; s2
MOV             R1, R5
ADD             R0, R4, #0x1C ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_4A968
LDR             R4, [R4,#0x18]
B               loc_4A960
; End of function sub_4A93C




; char *__fastcall sub_4A98C(unsigned int *, const char *)
sub_4A98C

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R4, R0
MOV             R7, R1
BL              sub_4A93C
SUBS            R5, R0, #0
BNE             loc_4AA60
LDR             R0, [R4]
LDR             R1, [R4,#4]
ADD             R0, R0, #1
STR             R0, [R4]
BLX             sub_15CA0
CMP             R0, #0xA
BLS             loc_4AA0C
LDR             R3, [R4,#8]
CMP             R3, #5
BEQ             loc_4AA0C
ADD             R2, R3, #1
MOV             R3, R3,LSL#1
STR             R2, [R4,#8]
LDR             R2, =word_643F4
LDRH            R9, [R2,R3]
MOV             R0, R9,LSL#2
BL              sub_174DC
LDR             R11, [R4,#4]
MOV             R8, R0
LDR             R10, [R4,#0x10]

loc_4A9F4
CMP             R5, R11
BNE             loc_4AA6C
MOV             R0, R10 ; ptr
BL              free
STR             R9, [R4,#4]
STR             R8, [R4,#0x10]

loc_4AA0C               ; s
MOV             R0, R7
BL              strlen
MOV             R6, R0
ADD             R0, R0, #0x21 ; '!'
BL              sub_174DC
MOV             R1, R7  ; src
MOV             R5, R0
ADD             R0, R0, #0x1C ; dest
BL              strcpy
MOV             R0, R7
BL              sub_4A364
LDR             R1, [R4,#4]
BLX             sub_15EFC
LDR             R3, [R4,#0x10]
LDR             R0, [R4,#0xC]
LDR             R2, [R3,R1,LSL#2]
ADD             R0, R0, #1
ADD             R0, R0, R6
STR             R2, [R5,#0x18]
STR             R5, [R3,R1,LSL#2]
STR             R0, [R4,#0xC]

loc_4AA60
MOV             R0, R5
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_4AA6C
LDR             R6, [R10,R5,LSL#2]

loc_4AA70
CMP             R6, #0
ADDEQ           R5, R5, #1
BEQ             loc_4A9F4
LDR             R3, [R6,#0x18]
ADD             R0, R6, #0x1C
STR             R3, [SP,#0xC+var_8]
BL              sub_4A364
MOV             R1, R9
BLX             sub_15EFC
LDR             R3, [SP,#0xC+var_8]
LDR             R2, [R8,R1,LSL#2]
STR             R2, [R6,#0x18]
STR             R6, [R8,R1,LSL#2]
MOV             R6, R3
B               loc_4AA70
; End of function sub_4A98C

off_4AAAC DCD word_643F4



; void __fastcall sub_4AAB0(int *, const char *)
sub_4AAB0
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R0, R1
MOV             R7, R1
BL              sub_4A364
LDR             R1, [R4,#4]
BLX             sub_15EFC
LDR             R6, [R4,#0x10]
ADD             R6, R6, R1,LSL#2

loc_4AAD4
LDR             R5, [R6]
CMP             R5, #0
POPEQ           {R4-R8,PC}
MOV             R1, R7  ; s2
ADD             R0, R5, #0x1C ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_4AB2C
MOV             R0, R7  ; s
BL              strlen
LDR             R3, [R4,#0xC]
SUB             R3, R3, #1
SUB             R0, R3, R0
LDR             R3, [R4]
STR             R0, [R4,#0xC]
MOV             R0, R5  ; ptr
SUB             R3, R3, #1
STR             R3, [R4]
LDR             R3, [R5,#0x18]
STR             R3, [R6]
POP             {R4-R8,LR}
B               free

loc_4AB2C
ADD             R6, R5, #0x18
B               loc_4AAD4
; End of function sub_4AAB0




; int __fastcall sub_4AB34(unsigned __int8 **)
sub_4AB34
PUSH            {R4-R6,LR}
LDR             R5, [R0]
ADD             R6, R5, #1
STR             R6, [R0]
LDRB            R3, [R5]
CMP             R3, #0x5C ; '\'
BNE             loc_4AB80
MOV             R4, R0
BL              sub_5E668
CMP             R0, #0x5C ; '\'
MOV             R3, R0
BNE             loc_4AB80
LDR             R2, [R4]
CMP             R6, R2
BNE             loc_4AB80
LDRB            R3, [R5,#1]
CMP             R3, #0
ADDNE           R5, R5, #2
STRNE           R5, [R4]

loc_4AB80
MOV             R0, R3
POP             {R4-R6,PC}
; End of function sub_4AB34




; int __fastcall sub_4AB88(unsigned __int8 *, int, unsigned __int8 *)
sub_4AB88

var_4= -4

PUSH            {R0-R2,R4,R5,LR}
SUB             R4, R0, #1
ADD             R5, SP, #0xC+var_4
STR             R0, [R5,#-4]!

loc_4AB98
MOV             R0, R5
BL              sub_4AB34
CMP             R0, #0
STRB            R0, [R4,#1]!
BNE             loc_4AB98
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_4AB88




; time_t __fastcall sub_4ABB4(const char *)
sub_4ABB4

var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_10= -0x10

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x4C
ADD             R3, SP, #0x4C+var_10
ADD             R5, SP, #0x4C+var_30
MOV             R4, #0xFFFFFFFF
ADD             R2, SP, #0x4C+var_1C
STR             R3, [SP,#0x4C+var_3C]
ADD             R3, SP, #0x4C+var_2C
STR             R3, [SP,#0x4C+var_44]
ADD             R3, SP, #0x4C+var_28
STR             R3, [SP,#0x4C+var_48]
ADD             R3, SP, #0x4C+var_24
STR             R3, [SP,#0x4C+var_4C]
ADD             R3, SP, #0x4C+var_20
STR             R5, [SP,#0x4C+var_40]
LDR             R1, =aUUUUUUD ; "%u %u %u %u %u %u %d"
STR             R4, [SP,#0x4C+var_10]
BL              sscanf
CMP             R0, #5
BLE             loc_4AC44
LDR             R2, [SP,#0x4C+var_20]
CMP             R2, #0
BEQ             loc_4AC44
LDR             R3, [SP,#0x4C+var_1C]
MOVW            R1, #0x76B
CMP             R3, R1
BLS             loc_4AC44
SUB             R3, R3, #0x760
ADD             R2, R2, R4
SUB             R3, R3, #0xC
MOV             R0, R5  ; tp
STR             R2, [SP,#0x4C+var_20]
STR             R3, [SP,#0x4C+var_1C]
BL              mktime

loc_4AC3C
ADD             SP, SP, #0x4C ; 'L'
POP             {R4,R5,PC}

loc_4AC44
MOV             R0, R4
B               loc_4AC3C
; End of function sub_4ABB4

off_4AC4C DCD aUUUUUUD  ; "%u %u %u %u %u %u %d"


; Attributes: noreturn

; void __fastcall __noreturn sub_4AC50(const char *)
sub_4AC50
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
LDR             R1, [R3]
MOV             R3, R0
LDR             R0, =aSIS ; "%s:%i: %s"
LDR             R2, [R1,#-0x38]
LDR             R1, [R1,#-0x3C]
BL              sub_16DBC
; End of function sub_4AC50

off_4AC70 DCD dword_7DB98
off_4AC74 DCD aSIS      ; "%s:%i: %s"



; int __fastcall sub_4AC78(char *, size_t, const char *, int)
sub_4AC78

var_C= -0xC

CMP             R3, #0
PUSH            {R4-R9,LR}
MOV             R5, R0
VPUSH           {D8}
MOV             R6, R1
SUB             SP, SP, #0xC
MOV             R4, R2
VMOV.F64        D8, D0
BEQ             loc_4ACE0
VMOV            R0, R1, D0
BLX             sub_62C80
MOV             R8, R0
MOV             R9, R1
BLX             sub_62B48
VMOV            D7, R0, R1
VCMP.F64        D7, D8
VMRS            APSR_nzcv, FPSCR
BNE             loc_4ACE0
STRD            R8, R9, [SP,#0xC+var_C]
MOV             R1, R6  ; maxlen
LDR             R2, =aLld ; "%lld"
MOV             R0, R5  ; s
BL              snprintf

loc_4ACD4
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R9,PC}

loc_4ACE0
MOV             R3, R4

loc_4ACE4
LDRB            R7, [R3]
CMP             R7, #0
BEQ             loc_4ACFC
LDRB            R2, [R3,#1]!
CMP             R2, #0
BNE             loc_4ACE4

loc_4ACFC               ; c
MOV             R1, R7
LDR             R0, =aDiouxx ; "diouxX"
BL              strchr
CMP             R0, #0
BEQ             loc_4AD34
VCVT.S32.F64    S15, D8
MOV             R2, R4  ; format
MOV             R1, R6  ; maxlen
MOV             R0, R5  ; s
VMOV            R3, S15
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R9,LR}
B               snprintf

loc_4AD34               ; c
MOV             R1, R7
LDR             R0, =aEefgg ; "eEfgG"
BL              strchr
CMP             R0, #0
BEQ             loc_4AD60
VSTR            D8, [SP,#0xC+var_C]
MOV             R2, R4  ; format
MOV             R1, R6  ; maxlen
MOV             R0, R5  ; s
BL              snprintf
B               loc_4ACD4

loc_4AD60
LDR             R0, =aInvalidFormatS ; "Invalid format specifier"
BL              sub_4AC50
; End of function sub_4AC78

off_4AD68 DCD aLld      ; "%lld"
off_4AD6C DCD aDiouxx   ; "diouxX"
off_4AD70 DCD aEefgg    ; "eEfgG"
off_4AD74 DCD aInvalidFormatS ; "Invalid format specifier"



; char *__fastcall sub_4AD78(int *)
sub_4AD78
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R5, [R0]
BIC             R5, R5, #0xFE
MOV             R5, R5,LSL#23
MOV             R5, R5,LSR#23
CMP             R5, #1
BNE             loc_4ADDC
LDR             R3, =dword_7DB98
LDR             R6, [R3]
LDR             R7, [R6,#-0x20]
LDR             R0, [R6,#0x10]
BL              sub_4AD78
VLDR            D0, [R4,#8]
MOV             R3, R5
MOV             R2, R0
MOV             R1, #0xF0
MOV             R0, R7
BL              sub_4AC78
LDR             R0, [R6,#-0x20]
BL              sub_174F8
LDR             R3, [R4]
STR             R0, [R4,#0x10]
ORR             R3, R3, #0x100
STR             R3, [R4]

loc_4ADDC
LDR             R0, [R4,#0x10]
LDR             R3, =(asc_6B39D+1) ; ""
CMP             R0, #0
MOVEQ           R0, R3
POP             {R4-R8,PC}
; End of function sub_4AD78

off_4ADF0 DCD dword_7DB98
off_4ADF4 DCD asc_6B39D+1 ; ""



; int __fastcall sub_4ADF8(const char *, int, _DWORD *)
sub_4ADF8

eflags= -0x20
accept= -0x18
var_17= -0x17
reject= -0x16
dest= -0x14
pmatch= -0x10

PUSH            {R4-R10,LR}
SUB             SP, SP, #0x20
MOV             R4, R2
MOV             R8, R1
MOV             R5, R0
BL              strlen
MOV             R0, R0,LSL#1
ADD             R0, R0, #3
BL              sub_174DC
STR             R0, [R4]
MOV             R1, R5  ; src
LDR             R4, =dword_7DB98
STR             R0, [SP,#0x20+dest]
BL              strcpy
LDRB            R3, [R8]
LDR             R6, [R4]
STRB            R3, [SP,#0x20+var_17]
STRB            R3, [SP,#0x20+accept]
MOV             R3, #0
LDR             R0, [R6,#0x24]
STRH            R3, [SP,#0x20+reject]
BL              sub_4AD78
LDRB            R3, [R0]
CMP             R3, #0
MOV             R3, R4
MOVEQ           R2, #0xA
STRBEQ          R2, [SP,#0x20+reject]
LDR             R2, [R8]
AND             R2, R2, #0xFF00
CMP             R2, #0x2100
BNE             loc_4AF5C
LDRB            R4, [R5]
CMP             R4, #0
BEQ             loc_4AF38
LDR             R10, [R3]
MOV             R4, #1
MOV             R9, #0

loc_4AE8C               ; reject
ADD             R1, SP, #0x20+reject
MOV             R0, R5  ; s
BL              strcspn
LDR             R3, [R10,#-0x1C]
MOV             R7, R0
MOV             R6, R0
STR             R9, [SP,#0x20+eflags] ; eflags
MOV             R2, #1  ; nmatch
MOV             R1, R5  ; string
CMP             R3, #0
ADD             R3, SP, #0x20+pmatch ; pmatch
LDRNE           R0, [R8,#0xC]
LDREQ           R0, [R8,#8] ; preg
BL              regexec
CMP             R0, #0
BNE             loc_4AF44
LDR             R3, [SP,#0x20+pmatch]
CMP             R3, R7
BGT             loc_4AF44
LDR             R1, [SP,#0x20+pmatch.rm_eo]
ADD             R2, R3, #1
ADD             R4, R4, #1
CMP             R1, #0
MOVEQ           R3, #1
STREQ           R3, [SP,#0x20+pmatch.rm_eo]
MOVEQ           R3, R2
MOV             R6, R3

loc_4AEF8               ; n
MOV             R2, R6
MOV             R1, R5  ; src
LDR             R0, [SP,#0x20+dest] ; dest
BL              memcpy

loc_4AF08
LDR             R3, [SP,#0x20+dest]
STRB            R9, [R3,R6]
ADD             R6, R6, #1
LDR             R3, [SP,#0x20+pmatch.rm_eo]
CMP             R3, R6
BGT             loc_4AF08
ADD             R0, SP, #0x20+dest
BL              sub_4A3D0
LDR             R3, [SP,#0x20+pmatch.rm_eo]
LDRB            R3, [R5,R3]!
CMP             R3, #0
BNE             loc_4AE8C

loc_4AF38
MOV             R0, R4
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R10,PC}

loc_4AF44
LDRB            R2, [R5,R7]
ADD             R3, R7, #1
STR             R7, [SP,#0x20+pmatch.rm_eo]
CMP             R2, #0
STRNE           R3, [SP,#0x20+pmatch.rm_eo]
B               loc_4AEF8

loc_4AF5C
LDRB            R3, [SP,#0x20+accept]
CMP             R3, #0
MOVEQ           R2, R5
BEQ             loc_4B008
CMP             R3, #0x20 ; ' '
BEQ             loc_4B07C
LDR             R2, [R6,#-0x1C]
CMP             R2, #0
BEQ             loc_4AFAC
SUB             R2, R3, #0x61 ; 'a'
CMP             R2, #0x19
SUBLS           R3, R3, #0x20 ; ' '
UXTBLS          R3, R3
STRB            R3, [SP,#0x20+accept]
LDRB            R3, [SP,#0x20+var_17]
SUB             R2, R3, #0x41 ; 'A'
CMP             R2, #0x19
ADDLS           R3, R3, #0x20 ; ' '
UXTBLS          R3, R3
STRB            R3, [SP,#0x20+var_17]

loc_4AFAC
LDR             R3, [SP,#0x20+dest]
MOV             R5, #0
LDRB            R4, [R3]
MOVS            R4, R4
MOVNE           R4, #1

loc_4AFC0               ; accept
ADD             R1, SP, #0x20+accept
LDR             R0, [SP,#0x20+dest] ; s
BL              strpbrk
CMP             R0, #0
BEQ             loc_4AF38
ADD             R3, R0, #1
ADD             R4, R4, #1
STR             R3, [SP,#0x20+dest]
STRB            R5, [R0]
B               loc_4AFC0

loc_4AFE8
LDR             R0, [SP,#0x20+dest]
ADD             R12, R0, #1
STR             R12, [SP,#0x20+dest]
STRB            R1, [R0]
LDR             R1, [SP,#0x20+dest]
ADD             R0, R1, #1
STR             R0, [SP,#0x20+dest]
STRB            R3, [R1]

loc_4B008
SUB             R4, R2, R5
LDRB            R1, [R2],#1
CMP             R1, #0
BNE             loc_4AFE8
B               loc_4AF38

loc_4B01C
MOV             R0, R5
BL              sub_60E74
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_4AF38
ADD             R4, R4, #1

loc_4B034
MOV             R5, R0
LDRB            R3, [R0],#1
LDR             R2, [SP,#0x20+dest]
TST             R3, #0xDF
ADD             R1, R2, #1
STR             R1, [SP,#0x20+dest]
BEQ             loc_4B05C
SUB             R3, R3, #9
CMP             R3, #4
BHI             loc_4B070

loc_4B05C
STRB            R6, [R2]

loc_4B060
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_4B01C
B               loc_4AF38

loc_4B070
LDRB            R3, [R0,#-1]
STRB            R3, [R2]
B               loc_4B034

loc_4B07C
MOV             R4, #0
MOV             R6, R4
B               loc_4B060
; End of function sub_4ADF8

off_4B088 DCD dword_7DB98



; int __fastcall sub_4B08C(int, int)
sub_4B08C

var_4= -4
var_s0=  0

LDR             R3, =dword_7DB98
PUSH            {R0,R1,R4-R10,LR}
LDR             R4, [R3]
LDR             R5, [R4,#-0xC]
CMP             R5, #0
BNE             loc_4B110
MOV             R3, #1
LDR             R0, [R4,#0x5C] ; ptr
STR             R3, [R4,#-0xC]
MOV             R10, #0x18
BL              free
MOV             R0, R5
ADD             R6, SP, #8+var_s0
BL              sub_4A60C
LDR             R0, [R4,#0x34]
BL              sub_4AD78
ADD             R2, R4, #0x5C ; '\'
ADD             R1, R4, #0x124
BL              sub_4ADF8
MOV             R8, R0
BL              sub_4A60C
LDR             R3, [R4,#0x5C]
STR             R3, [R6,#-4]!

loc_4B0E8
CMP             R5, R8
BLT             loc_4B118
LDR             R0, [R4,#0x50]
BL              sub_4A5C4
VLDR            S14, [R4,#-0x34]
MOVW            R2, #0x401
LDR             R3, [R4,#0x50]
VCVT.F64.S32    D7, S14
STR             R2, [R3]
VSTR            D7, [R3,#8]

loc_4B110
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_4B118
MUL             R7, R10, R5
MOV             R0, R6
LDR             R9, [R4,#-0x2C]
ADD             R5, R5, #1
BL              sub_4A3D0
LDR             R2, [R4,#-0x2C]
ADD             R9, R9, R7
STR             R0, [R9,#0x10]
LDR             R3, [R2,R7]
ORR             R3, R3, #0x5200
STR             R3, [R2,R7]
B               loc_4B0E8
; End of function sub_4B08C

off_4B148 DCD dword_7DB98



; int __fastcall sub_4B14C(double)
sub_4B14C

src= -0x40
var_3C= -0x3C
var_34= -0x34
var_2C= -0x2C

LDR             R3, [R0]
TST             R3, #0x400
BXEQ            LR
LDR             R3, =dword_7DB98
PUSH            {R4-R11,LR}
MOV             R5, R0
VPUSH           {D8}
SUB             SP, SP, #0x14
LDR             R4, [R3]
LDR             R3, [R4,#0x50]
CMP             R3, R0
BNE             loc_4B258
BL              sub_4A828
VCVT.S32.F64    S16, D0
MOV             R7, #0
MOV             R6, R7
MOV             R5, R7
MOV             R10, #0x18
VMOV            R0, S16
BL              sub_4A60C
LDR             R0, [R4,#0x1C]
BL              sub_4AD78
STR             R0, [SP,#0x40+src]
BL              strlen
MOV             R8, R0

loc_4B1B0
VMOV            R3, S16
CMP             R7, R3
BLT             loc_4B1E8
CMP             R5, #0
MOV             R1, R5
MOVNE           R3, #0
STRBNE          R3, [R5,R6]
LDR             R0, [R4,#0x34]
BL              sub_4B308
MOV             R3, #1

loc_4B1D8
STR             R3, [R4,#-0xC]

loc_4B1DC
ADD             SP, SP, #0x14
VPOP            {D8}
POP             {R4-R11,PC}

loc_4B1E8
LDR             R0, [R4,#-0x2C]
MLA             R0, R10, R7, R0
BL              sub_4AD78
MOV             R11, R0
BL              strlen
CMP             R5, #0
MOV             R9, R0
BEQ             loc_4B21C
ADD             R0, R5, R6 ; dest
ADD             R6, R6, R8
MOV             R2, R8  ; n
LDR             R1, [SP,#0x40+src] ; src
BL              memcpy

loc_4B21C
ADD             R3, R6, R9
ADD             R2, SP, #0x40+var_34
ADD             R1, R3, R8
MOV             R0, R5
STR             R3, [SP,#0x40+var_3C]
ADD             R7, R7, #1
BL              sub_4A59C
MOV             R2, R9  ; n
MOV             R5, R0
MOV             R1, R11 ; src
ADD             R0, R0, R6 ; dest
BL              memcpy
LDR             R3, [SP,#0x40+var_3C]
MOV             R6, R3
B               loc_4B1B0

loc_4B258
LDR             R2, [R4,#0x34]
CMP             R2, R0
MOVEQ           R3, #0
BEQ             loc_4B1D8
LDR             R6, [R4,#0x18]
CMP             R6, R0
BNE             loc_4B28C
BL              sub_4B08C
MOV             R0, R6
BL              sub_4AD78
ADD             R1, R4, #0x124

loc_4B284
BL              sub_4A79C
B               loc_4B1DC

loc_4B28C
LDR             R2, [R4,#0x24]
CMP             R2, R0
BNE             loc_4B2A4
BL              sub_4AD78
ADD             R1, R4, #0x178
B               loc_4B284

loc_4B2A4
LDR             R2, [R4,#0x54]
CMP             R2, R0
BNE             loc_4B2BC
BL              sub_4A8BC
STR             R0, [R4,#-0x1C]
B               loc_4B1DC

loc_4B2BC
MOV             R0, R3
BL              sub_4A828
LDR             R3, [R4,#-0x2C]
VCVT.S32.F64    S0, D0
LDR             R0, [R4,#0x50]
SUB             R5, R5, R3
LDR             R3, =0xAAAAAAAB
MOV             R5, R5,ASR#3
MUL             R5, R3, R5
VMOV            R3, S0
CMP             R5, R3
ADDGE           R5, R5, #1
VCVTLT.F64.S32  D0, S0
VMOVGE          S15, R5
VCVTGE.F64.S32  D0, S15
BL              sub_4B458
B               loc_4B1DC
; End of function sub_4B14C

off_4B300 DCD dword_7DB98
dword_4B304 DCD 0xAAAAAAAB



; int __fastcall sub_4B308(int, int)
sub_4B308
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
BL              sub_4A5C4
MOV             R0, R4
STR             R5, [R4,#0x10]
BL              sub_4B14C
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_4B308




; int __fastcall sub_4B32C(int, const char *)
sub_4B32C
PUSH            {R4,LR}
MOV             R4, R0
SUBS            R0, R1, #0
BEQ             loc_4B350
LDRB            R1, [R0]
CMP             R1, #0
MOVEQ           R0, R1
BEQ             loc_4B350
BL              sub_174F8

loc_4B350
MOV             R1, R0
MOV             R0, R4
POP             {R4,LR}
B               sub_4B308
; End of function sub_4B32C




; _DWORD *__fastcall sub_4B360(int, const char *)
sub_4B360
PUSH            {R4,LR}
BL              sub_4B32C
LDR             R3, [R0]
ORR             R3, R3, #0x200
STR             R3, [R0]
POP             {R4,PC}
; End of function sub_4B360




; int __fastcall sub_4B378(const char *)
sub_4B378
LDRB            R2, [R0]
SUB             R3, R2, #0x30 ; '0'
CMP             R3, #9
BLS             loc_4B3A4
ORR             R3, R2, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R2, #0x5F ; '_'
CMPNE           R3, #0x19
MOVLS           R3, #1
MOVHI           R3, #0
BHI             loc_4B410

loc_4B3A4
PUSH            {R4-R6,LR}
MOV             R1, #0x3D ; '=' ; c
MOV             R5, R0
BL              strchr
SUBS            R4, R0, #0
BEQ             loc_4B418
MOV             R0, R5
BL              sub_174F8
MOV             R6, R0
SUB             R0, R4, R5
ADD             R4, R6, R0
MOV             R3, #0
ADD             R4, R4, #1
STRB            R3, [R6,R0]
MOV             R0, R4
BL              sub_4AB88
LDR             R3, =dword_7DB98
MOV             R1, R6
LDR             R3, [R3]
LDR             R0, [R3,#-0x4C]
BL              sub_4A98C
MOV             R1, R4
BL              sub_4B360
MOV             R0, R6  ; ptr
BL              free
MOV             R0, #1
POP             {R4-R6,PC}

loc_4B410
MOV             R0, R3
BX              LR

loc_4B418
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_4B378

off_4B420 DCD dword_7DB98



; _DWORD *__fastcall sub_4B424(int *, signed int, const char *)
sub_4B424
PUSH            {R4-R6,LR}
MOV             R6, R1
MOV             R4, R2
BL              sub_4A470
MOV             R5, R0
MOV             R0, R6
BL              sub_16F8C
MOV             R1, R0
MOV             R0, R5
BL              sub_4A98C
MOV             R1, R4
POP             {R4-R6,LR}
B               sub_4B360
; End of function sub_4B424




; int __fastcall sub_4B458(int)
sub_4B458
PUSH            {R4,LR}
MOV             R4, R0
VPUSH           {D8}
VMOV.F64        D8, D0
BL              sub_4A5C4
LDR             R3, [R4]
MOV             R0, R4
VSTR            D8, [R4,#8]
ORR             R3, R3, #1
STR             R3, [R4]
BL              sub_4B14C
VPOP            {D8}
MOV             R0, R4
POP             {R4,PC}
; End of function sub_4B458




; int __fastcall sub_4B490(double)
sub_4B490
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_4A828
MOV             R0, R4
VMOV.F64        D7, #1.0
VADD.F64        D0, D0, D7
POP             {R4,LR}
B               sub_4B458
; End of function sub_4B490




; int __fastcall sub_4B4B0(double)
sub_4B4B0
CMP             R0, R1
PUSH            {R4-R6,LR}
MOV             R4, R0
BEQ             loc_4B4FC
MOV             R5, R1
BL              sub_4A5C4
LDR             R3, [R5]
LDR             R2, [R4]
LDR             R0, [R5,#0x10]
BIC             R3, R3, #0x7C00
BIC             R3, R3, #2
ORR             R3, R2, R3
CMP             R0, #0
STR             R3, [R4]
LDRD            R2, R3, [R5,#8]
STRD            R2, R3, [R4,#8]
BEQ             loc_4B4FC
BL              sub_174F8
STR             R0, [R4,#0x10]

loc_4B4FC
MOV             R0, R4
BL              sub_4B14C
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_4B4B0




; int __fastcall sub_4B50C(double)
sub_4B50C
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
VPUSH           {D8-D9}
LDR             R4, [R3]
LDR             R0, [R4,#0x74] ; stream
CMP             R0, #0
BEQ             loc_4B52C
BL              fclose

loc_4B52C
VMOV.F64        D9, #1.0
MOV             R3, #0
STR             R3, [R4,#0x74]
STR             R3, [R4,#0x7C]
STR             R3, [R4,#0x84]

loc_4B540
LDR             R0, [R4,#0x38]
BL              sub_4A828
VMOV.F64        D8, D0
LDR             R0, [R4,#0x3C]
BL              sub_4A828
VADD.F64        D8, D8, D9
VCMPE.F64       D8, D0
VMRS            APSR_nzcv, FPSCR
BLT             loc_4B5A4
LDR             R3, [R4,#0x70]
CMP             R3, #0
MOVNE           R0, #0
BNE             loc_4B59C
LDR             R3, =stdin
LDR             R5, =(asc_6AE7B+3) ; "-"
LDR             R6, [R3]

loc_4B580
MOV             R3, #1
MOV             R1, R5
STR             R3, [R4,#0x70]
LDR             R0, [R4,#0x2C]
BL              sub_4B32C
MOV             R0, R4
STR             R6, [R0,#0x74]!

loc_4B59C
VPOP            {D8-D9}
POP             {R4-R6,PC}

loc_4B5A4
LDR             R0, [R4,#0x38]
BL              sub_4B490
BL              sub_4AD78
MOV             R5, R0
LDR             R0, [R4,#0x40]
BL              sub_4A470
MOV             R1, R5
BL              sub_4A98C
BL              sub_4AD78
SUBS            R5, R0, #0
BEQ             loc_4B540
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_4B540
BL              sub_4B378
CMP             R0, #0
BNE             loc_4B540
MOV             R0, R5
BL              sub_61D20
MOV             R6, R0
B               loc_4B580
; End of function sub_4B50C

off_4B5F8 DCD dword_7DB98
off_4B5FC DCD stdin
off_4B600 DCD asc_6AE7B+3 ; "-"



; unsigned int __fastcall sub_4B604(unsigned int result)
sub_4B604
LDR             R3, =dword_7DB98
PUSH            {R4-R10,LR}
LDR             R5, [R3]
LDR             R3, [R5,#-0x28]
ADD             R2, R3, #0x10
CMP             R0, R2
BCC             loc_4B63C
LDR             R3, [R3,#4]
MOV             R6, R0
CMP             R3, R0
ADDHI           R4, R0, #0x18
MOVWHI          R8, #0x2002
MOVHI           R9, #0
BHI             loc_4B68C

loc_4B63C
LDR             R0, =aInternalError ; "Internal error"
BL              sub_4AC50

loc_4B644
LDR             R3, [R4,#-0x18]
AND             R3, R3, R8
CMP             R3, #2
BNE             loc_4B674
MOV             R0, R7
BL              sub_4A470
BL              sub_4A6AC
LDR             R3, [R4,#-4]
LDR             R0, [R3,#0x10] ; ptr
BL              free
LDR             R0, [R4,#-4] ; ptr
BL              free

loc_4B674
LDR             R3, [R4,#-0x18]
TST             R3, #0x800
BNE             loc_4B6CC

loc_4B680
ADD             R4, R4, #0x18
MOV             R0, R7
BL              sub_4A5C4

loc_4B68C
LDR             R3, [R5,#-0x28]
SUB             R7, R4, #0x18
LDR             R2, [R3,#4]
CMP             R2, R7
BHI             loc_4B644
STR             R6, [R3,#4]

loc_4B6A4
LDR             R3, [R5,#-0x28]
LDR             R2, [R3,#8]
CMP             R2, #0
POPEQ           {R4-R10,PC}
ADD             R1, R3, #0x10
LDR             R3, [R3,#4]
CMP             R3, R1
POPNE           {R4-R10,PC}
STR             R2, [R5,#-0x28]
B               loc_4B6A4

loc_4B6CC               ; ptr
LDR             R0, [R4,#-4]
STR             R9, [R4,#-4]

loc_4B6D4
CMP             R0, #0
BEQ             loc_4B680
LDR             R10, [R0,#8]
BL              free
MOV             R0, R10
B               loc_4B6D4
; End of function sub_4B604

off_4B6EC DCD dword_7DB98
off_4B6F0 DCD aInternalError ; "Internal error"



; int __fastcall sub_4B6F4(int, _DWORD *)
sub_4B6F4

eflags= -0x44
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
fd= -0x28
var_24= -0x24
c= -0x20
var_18= -0x18
pmatch= -0x14

PUSH            {R4-R11,LR}
MOV             R8, R0
SUB             SP, SP, #0x44
LDR             R0, [R0] ; stream
STR             R1, [SP,#0x44+var_2C]
BL              fileno_unlocked
LDR             R3, [R8,#8]
LDR             R9, [R8,#4]
STR             R0, [SP,#0x44+fd]
STR             R3, [SP,#0x44+var_34]
LDR             R3, [R8,#0xC]
CMP             R9, #0
LDR             R5, [R8,#0x10]
STR             R3, [SP,#0x44+var_18]
LDR             R3, =dword_7DB98
LDR             R3, [R3]
LDR             R4, [R3,#0x178]
STR             R3, [SP,#0x44+var_38]
UXTB            R3, R4
STR             R3, [SP,#0x44+var_24]
BNE             loc_4B75C
MOV             R1, #0x1D0
MOV             R0, R9
STR             R1, [SP,#0x44+var_18]
BL              sub_174B4
MOV             R9, R0

loc_4B75C
MOV             R3, #0
STR             R3, [SP,#0x44+var_30]
MOV             R11, R3
UXTB            R3, R4
STR             R3, [SP,#0x44+c]

loc_4B770
LDR             R3, [SP,#0x44+var_34]
CMP             R5, #0
ADD             R4, R9, R3
BLE             loc_4B9C8
LDR             R3, [SP,#0x44+var_38]
LDR             R3, [R3,#0x178]
AND             R3, R3, #0xFF00
CMP             R3, #0x2100
BNE             loc_4B8A0
LDR             R3, [SP,#0x44+var_38]
MOV             R2, #1  ; nmatch
MOV             R1, R4  ; string
LDR             R3, [R3,#-0x1C]
CMP             R3, #0
LDR             R3, [SP,#0x44+var_38]
LDRNE           R0, [R3,#0x184]
LDREQ           R0, [R3,#0x180] ; preg
MOV             R3, #0
STR             R3, [SP,#0x44+eflags] ; eflags
ADD             R3, SP, #0x44+pmatch ; pmatch
BL              regexec
CMP             R0, #0
BNE             loc_4B9C8
LDRD            R6, R7, [SP,#0x44+pmatch]
LDRB            R3, [R4,R7]
CMP             R3, #0

loc_4B7D8
BNE             loc_4B8E8

loc_4B7DC
LDR             R3, [SP,#0x44+var_34]
CMP             R3, #0
BLE             loc_4B800
ADD             R2, R5, #1 ; n
MOV             R1, R4  ; src
MOV             R0, R9  ; dest
BL              memmove
MOV             R3, #0
STR             R3, [SP,#0x44+var_34]

loc_4B800
LDR             R3, [SP,#0x44+var_34]
ADD             R2, SP, #0x44+var_18
MOV             R0, R9
ADD             R1, R3, R5
ADD             R1, R1, #0x80
BL              sub_4A59C
LDR             R3, [SP,#0x44+var_34]
MOV             R9, R0
LDR             R2, [SP,#0x44+var_18]
ADD             R4, R0, R3
LDR             R0, [SP,#0x44+fd] ; fd
SUB             R2, R2, R5
ADD             R1, R4, R5 ; buf
SUB             R2, R2, #1 ; nbytes
BL              sub_1800C
ADD             R0, R5, R0
CMP             R5, R0
MOVLE           R10, #1
BLE             loc_4B870
LDR             R3, =dword_7DB94
MOV             R10, #0
LDR             R3, [R3]
VLDR            S0, [R3]
LDR             R3, [SP,#0x44+var_38]
VCVT.F64.S32    D0, S0
LDR             R0, [R3,#0x44]
BL              sub_4B458
MOV             R0, R10

loc_4B870
CMP             R5, R0
MOV             R3, #0
STRB            R3, [R4,R0]
MOV             R11, R5
BLT             loc_4B898
CMP             R0, R3
SUBEQ           R10, R10, #1
BEQ             loc_4B950
MOV             R5, R0
B               loc_4B8EC

loc_4B898
MOV             R5, R0
B               loc_4B770

loc_4B8A0
LDR             R3, [SP,#0x44+var_24]
CMP             R3, #0
LDREQ           R3, [SP,#0x44+var_30]
ADDEQ           R3, R4, R3
BEQ             loc_4B97C
ADD             R7, R4, R11
LDR             R1, [SP,#0x44+c] ; c
MOV             R0, R7  ; s
BL              strchr
SUBS            R1, R0, #0 ; c
BNE             loc_4B8E0
SUB             R2, R5, R11 ; n
MOV             R0, R7  ; s
BL              memchr
SUBS            R1, R0, #0
BEQ             loc_4B9C8

loc_4B8E0
SUB             R6, R1, R4
ADD             R7, R6, #1

loc_4B8E8
MOV             R10, #1

loc_4B8EC
ADD             R3, R4, R6
LDRB            R2, [R4,R6]
STR             R3, [SP,#0x44+var_24]
MOV             R11, #0
LDR             R3, [SP,#0x44+var_30]
STRB            R11, [R4,R6]
LDR             R0, [SP,#0x44+var_2C]
ADD             R1, R4, R3
STR             R2, [SP,#0x44+fd]
BL              sub_4B32C
LDR             R3, [SP,#0x44+var_2C]
LDR             R2, [SP,#0x44+fd]
LDR             R1, [R3]
ORR             R1, R1, #0x200
STR             R1, [R3]
LDR             R3, [SP,#0x44+var_24]
STRB            R2, [R4,R6]
LDRB            R6, [R4,R7]
MOV             R1, R3
LDR             R3, [SP,#0x44+var_38]
STRB            R11, [R4,R7]
LDR             R0, [R3,#0x28]
BL              sub_4B32C
MOV             R0, R5
STRB            R6, [R4,R7]

loc_4B950
LDR             R3, [SP,#0x44+var_34]
SUB             R0, R0, R7
STR             R0, [R8,#0x10]
MOV             R0, R10
STR             R9, [R8,#4]
ADD             R3, R3, R7
STR             R3, [R8,#8]
LDR             R3, [SP,#0x44+var_18]
STR             R3, [R8,#0xC]
ADD             SP, SP, #0x44 ; 'D'
POP             {R4-R11,PC}

loc_4B97C
SUB             R2, R3, R4
MOV             R0, R3  ; haystack
STR             R2, [SP,#0x44+var_30]
ADD             R3, R3, #1
LDRB            R2, [R0]
CMP             R2, #0xA
BEQ             loc_4B97C
LDR             R1, =(aShellReturnedI+0x12) ; needle
BL              strstr
CMP             R0, #0
BEQ             loc_4B9C8
SUB             R6, R0, R4
ADD             R3, R4, R6

loc_4B9B0
SUB             R7, R3, R4
LDRB            R2, [R3],#1
CMP             R2, #0xA
BEQ             loc_4B9B0
CMP             R2, #0
B               loc_4B7D8

loc_4B9C8
MOV             R7, R5
MOV             R6, R5
B               loc_4B7DC
; End of function sub_4B6F4

off_4B9D4 DCD dword_7DB98
off_4B9D8 DCD dword_7DB94
off_4B9DC DCD aShellReturnedI+0x12 ; "\n\n"


; Attributes: noreturn

; void __fastcall __noreturn sub_4B9E0(int)
sub_4B9E0
PUSH            {R0-R5,R7,LR}
MOV             R7, R0
MOV             R2, #0x18 ; n
MOV             R1, #0  ; c
MOV             R0, SP  ; s
BL              memset
LDR             R3, =dword_7DB98
LDR             R4, [R3]
LDR             R3, [R4,#-0x18]
CMP             R3, #0
BNE             loc_4BA20
MOV             R2, #1
MOV             R1, SP
STRD            R2, R3, [R4,#-0x18]
LDR             R0, [R4,#-0x68]
BL              sub_14790

loc_4BA20
MOV             R6, #0

loc_4BA24
LDR             R3, [R4,#-0x44]
LDR             R2, [R3,#4]
CMP             R2, R6
BHI             loc_4BA3C
MOV             R0, R7  ; status
BL              exit

loc_4BA3C
LDR             R3, [R3,#0x10]
LDR             R5, [R3,R6,LSL#2]

loc_4BA44
CMP             R5, #0
ADDEQ           R6, R6, #1
BEQ             loc_4BA24
LDR             R0, [R5] ; stream
CMP             R0, #0
BEQ             loc_4BA6C
LDR             R3, [R5,#0x14]
CMP             R3, #0
BEQ             loc_4BA6C
BL              pclose

loc_4BA6C
LDR             R5, [R5,#0x18]
B               loc_4BA44
; End of function sub_4B9E0

off_4BA74 DCD dword_7DB98



; regex_t *__fastcall sub_4BA78(_DWORD *, regex_t *)
sub_4BA78
LDR             R3, =dword_7DB98
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R7, [R3]
LDR             R3, [R0]
AND             R3, R3, #0xFF00
CMP             R3, #0x2100
BNE             loc_4BAB0
LDR             R3, [R7,#-0x1C]
CMP             R3, #0
LDRNE           R4, [R0,#0xC]
LDREQ           R4, [R0,#8]

loc_4BAA8
MOV             R0, R4
POP             {R4-R8,PC}

loc_4BAB0
MOV             R0, #1
MOV             R4, R1
BL              sub_4A4D8
MOV             R1, R0
MOV             R6, R0
MOV             R0, R5
BL              sub_14790
BL              sub_4AD78
LDR             R3, [R7,#-0x1C]
MOV             R1, R0  ; pattern
MOV             R5, R0
MOV             R0, R4  ; preg
CMP             R3, #0
MOVEQ           R7, #1
MOVNE           R7, #3
MOV             R2, R7  ; cflags
BL              regcomp
CMP             R0, #0
BEQ             loc_4BB0C
AND             R2, R7, #2
MOV             R1, R5
MOV             R0, R4
BL              sub_625E4

loc_4BB0C
MOV             R0, R6
BL              sub_4B604
B               loc_4BAA8
; End of function sub_4BA78

off_4BB18 DCD dword_7DB98



; int __fastcall sub_4BB1C(_DWORD *, const char *, int, int *, int, char)
sub_4BB1C

eflags= -0xA4
var_9C= -0x9C
var_98= -0x98
var_94= -0x94
s= -0x90
var_8C= -0x8C
var_88= -0x88
var_84= -0x84
var_80= -0x80
var_78= -0x78
var_74= -0x74
pmatch= -0x54
var_4= -4
arg_0=  0x24
arg_4=  0x28

PUSH            {R4-R11,LR}
SUB             SP, SP, #0xA4
MOV             R4, R3
STR             R1, [SP,#0xA4+s]
ADD             R1, SP, #0xA4+var_74
STR             R2, [SP,#0xA4+var_8C]
BL              sub_4BA78
CMP             R4, #0
MOV             R10, R0
LDREQ           R3, =dword_7DB98
LDREQ           R3, [R3]
LDREQ           R4, [R3,#0x34]
MOV             R0, R4
BL              sub_4AD78
MOV             R7, R0
LDR             R0, [SP,#0xA4+s] ; s
BL              strlen
MOV             R3, #0
STR             R0, [SP,#0xA4+var_98]
MOV             R4, R3
MOV             R9, R3
MOV             R6, R3

loc_4BB74               ; eflags
STR             R3, [SP,#0xA4+eflags]
MOV             R2, #0xA ; nmatch
ADD             R3, SP, #0xA4+pmatch ; pmatch
MOV             R1, R7  ; string
MOV             R0, R10 ; preg
BL              regexec
SUBS            R5, R0, #0
MOV             R3, R4
BEQ             loc_4BC04

loc_4BB98               ; s
MOV             R0, R7
BL              strlen
ADD             R2, SP, #0xA4+var_78
ADD             R1, R0, R4
MOV             R0, R6
BL              sub_4A59C
MOV             R1, R7  ; src
MOV             R6, R0
ADD             R0, R0, R4 ; dest
BL              strcpy

loc_4BBC0
LDR             R3, [SP,#0xA4+arg_0]
MOV             R1, R6
CMP             R3, #0
LDREQ           R3, =dword_7DB98
LDREQ           R3, [R3]
LDREQ           R3, [R3,#0x34]
STREQ           R3, [SP,#0xA4+arg_0]
LDR             R0, [SP,#0xA4+arg_0]
BL              sub_4B308
ADD             R3, SP, #0xA4+var_74
CMP             R10, R3
BNE             loc_4BBF8
MOV             R0, R10 ; preg
BL              regfree

loc_4BBF8
MOV             R0, R9
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_4BC04
STR             R3, [SP,#0xA4+var_9C]
ADD             R8, SP, #0xA4+var_78
LDR             R3, [SP,#0xA4+pmatch]
MOV             R2, R8
LDR             R11, [SP,#0xA4+pmatch.rm_eo]
MOV             R0, R6
ADD             R9, R9, #1
STR             R3, [SP,#0xA4+var_94]
LDR             R3, [SP,#0xA4+var_98]
ADD             R4, R4, R11
ADD             R1, R4, R3
BL              sub_4A59C
LDR             R3, [SP,#0xA4+var_9C]
MOV             R6, R0
MOV             R2, R11 ; n
MOV             R1, R7  ; src
ADD             R0, R0, R3 ; dest
BL              memcpy
LDR             R3, [SP,#0xA4+var_8C]
CMP             R9, R3
BLT             loc_4BC98
LDR             R3, [SP,#0xA4+var_94]
STR             R8, [SP,#0xA4+var_84]
SUB             R3, R11, R3
SUB             R4, R4, R3
LDR             R3, [SP,#0xA4+s]
SUB             R3, R3, #1
STR             R3, [SP,#0xA4+var_9C]
LDR             R3, [SP,#0xA4+arg_4]
AND             R3, R3, #1
STR             R3, [SP,#0xA4+var_80]

loc_4BC80
LDR             R2, [SP,#0xA4+var_9C]
LDRB            R3, [R2,#1]!
CMP             R3, #0
STR             R2, [SP,#0xA4+var_9C]
MOV             R2, R4
BNE             loc_4BCD8

loc_4BC98
LDR             R3, [SP,#0xA4+var_8C]
ADD             R7, R7, R11
CMP             R9, R3
BEQ             loc_4BB98
LDR             R3, [SP,#0xA4+var_94]
CMP             R3, R11
BNE             loc_4BCD0
LDRB            R3, [R7]
STRB            R3, [R6,R4]
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_4BBC0
ADD             R7, R7, #1
ADD             R4, R4, #1

loc_4BCD0
MOV             R3, #1
B               loc_4BB74

loc_4BCD8
CMP             R3, #0x5C ; '\'
ADD             R4, R4, #1
STRB            R3, [R6,R2]
ADDEQ           R5, R5, #1
BEQ             loc_4BC80
CMP             R3, #0x26 ; '&'
BEQ             loc_4BD14
LDR             R1, [SP,#0xA4+var_80]
SUB             R2, R3, #0x30 ; '0'
CMP             R2, #9
MOVHI           R1, #0
ANDLS           R1, R1, #1
CMP             R1, #0
MOVEQ           R5, R1
BEQ             loc_4BC80

loc_4BD14
CMP             R3, #0x26 ; '&'
ADD             R8, R5, #3
ADDNE           R5, R5, #1
SUB             R8, R4, R8,ASR#1
SUBNE           R4, R3, #0x30 ; '0'
MOVEQ           R4, #0
ANDS            R2, R5, #1
STR             R2, [SP,#0xA4+var_88]
BEQ             loc_4BD48
ADD             R4, R8, #1
STRB            R3, [R6,R8]

loc_4BD40
MOV             R5, #0
B               loc_4BC80

loc_4BD48
ADD             R3, SP, #0xA4+var_4
MOV             R0, R6
ADD             R4, R3, R4,LSL#3
LDR             R2, [R4,#-0x4C]
LDR             R3, [R4,#-0x50]
SUB             R5, R2, R3
LDR             R3, [SP,#0xA4+var_98]
LDR             R2, [SP,#0xA4+var_84]
ADD             R1, R3, R8
ADD             R1, R1, R5
BL              sub_4A59C
LDR             R1, [R4,#-0x50]
MOV             R6, R0
MOV             R2, R5  ; n
ADD             R0, R0, R8 ; dest
ADD             R4, R8, R5
ADD             R1, R7, R1 ; src
BL              memcpy
B               loc_4BD40
; End of function sub_4BB1C

off_4BD94 DCD dword_7DB98



; int __fastcall sub_4BD98(unsigned int *, int)
sub_4BD98

eflags= -0x78
var_74= -0x74
var_6C= -0x6C
timer= -0x64
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
s= -0x40
var_3C= -0x3C
pmatch= -0x30
var_20= -0x20

PUSH            {R4-R10,LR}
MOV             R4, R1
VPUSH           {D8}
SUB             SP, SP, #0x78
ADD             R9, SP, #0x78+var_60
MOV             R10, #0x18
STR             R0, [SP,#0x78+var_6C]
MOV             R0, #4
BL              sub_4A4D8
LDR             R3, [SP,#0x78+var_6C]
MOV             R7, R0
MOV             R5, #0
STR             R5, [SP,#0x78+var_44]
LDR             R6, [R3]
LDR             R3, [R3,#8]
STR             R5, [SP,#0x78+var_48]
MOV             R8, R6
STR             R3, [SP,#0x78+var_6C]

loc_4BDE0
LDR             R2, [SP,#0x78+var_6C]
CMP             R5, #3
MOVGT           R3, #0
MOVLE           R3, #1
CMP             R2, #0
MOVEQ           R3, #0
CMP             R3, #0
BNE             loc_4BE10
CMP             R5, R6,LSR#30
BCS             loc_4BE5C
LDR             R0, =aTooFewArgument ; "Too few arguments for builtin"
BL              sub_4AC50

loc_4BE10
ADD             R0, SP, #0x78+var_6C
BL              sub_4A40C
TST             R8, #0x9000000
STR             R0, [R9,R5,LSL#2]
BEQ             loc_4BE34
MLA             R1, R10, R5, R7
BL              sub_14790
ADD             R3, SP, #0x78+var_50
STR             R0, [R3,R5,LSL#2]

loc_4BE34
TST             R8, #0x8000000
BEQ             loc_4BE50
ADD             R3, SP, #0x78+var_50
LDR             R0, [R3,R5,LSL#2]
BL              sub_4AD78
ADD             R3, SP, #0x78+s
STR             R0, [R3,R5,LSL#2]

loc_4BE50
MOV             R8, R8,LSR#1
ADD             R5, R5, #1
B               loc_4BDE0

loc_4BE5C
AND             R6, R6, #0x7F
CMP             R6, #0x11 ; switch 18 cases
LDRLS           PC, [PC,R6,LSL#2] ; switch jump
B               def_4BE64 ; jumptable 0004BE64 default case
jpt_4BE64 DCD loc_4BEB4 ; jump table for switch statement
DCD loc_4C0F0
DCD loc_4C20C
DCD loc_4BEE0
DCD loc_4BF90
DCD loc_4C188
DCD loc_4C1FC
DCD loc_4C0B4
DCD loc_4C0B4
DCD loc_4C2C0
DCD loc_4C2F8
DCD loc_4C318
DCD loc_4C010
DCD loc_4C034
DCD loc_4C044
DCD loc_4C060
DCD loc_4C07C
DCD loc_4C098

loc_4BEB4               ; jumptable 0004BE64 case 0
LDR             R0, [SP,#0x78+var_50]
BL              sub_4A828
LDR             R0, [SP,#0x78+var_4C]
VMOV.F64        D8, D0
BL              sub_4A828
VMOV.F64        D1, D0
VMOV.F64        D0, D8
BL              atan2

loc_4BED4
MOV             R0, R4
BL              sub_4B458
B               def_4BE64 ; jumptable 0004BE64 default case

loc_4BEE0               ; jumptable 0004BE64 case 3
CMP             R5, #2
BLE             loc_4BF60
LDR             R0, [SP,#0x78+var_58]
LDR             R3, [R0]
AND             R3, R3, #0xFF00
CMP             R3, #0x2100
BEQ             loc_4BF18
ADD             R1, R7, #0x30 ; '0'
BL              sub_14790
BL              sub_4AD78
LDR             R3, =dword_7DB98
LDR             R1, [R3]
ADD             R1, R1, #0xD0
BL              sub_4A79C

loc_4BF18
MOV             R1, R0
ADD             R2, SP, #0x78+var_20
LDR             R0, [SP,#0x78+s]
MOV             R5, #1
BL              sub_4ADF8
LDR             R8, [SP,#0x78+var_4C]
MOV             R6, R0
LDR             R9, [SP,#0x78+var_20]
MOV             R0, R8
BL              sub_4A470
BL              sub_4A6AC

loc_4BF44
CMP             R5, R6
BLE             loc_4BF70
MOV             R0, R9  ; ptr
BL              free
VMOV            S15, R6

loc_4BF58
VCVT.F64.S32    D0, S15
B               loc_4BED4

loc_4BF60
LDR             R3, =dword_7DB98
LDR             R0, [R3]
ADD             R0, R0, #0x124
B               loc_4BF18

loc_4BF70
ADD             R0, SP, #0x78+var_20
BL              sub_4A3D0
MOV             R1, R5
MOV             R2, R0
MOV             R0, R8
ADD             R5, R5, #1
BL              sub_4B424
B               loc_4BF44

loc_4BF90               ; jumptable 0004BE64 case 4
LDR             R9, [SP,#0x78+s]
MOV             R0, R9  ; s
BL              strlen
MOV             R8, R0
LDR             R0, [SP,#0x78+var_4C]
BL              sub_4A828
VMOV.F64        D7, #1.0
VSUB.F64        D0, D0, D7
VCVT.S32.F64    S15, D0
VMOV            R6, S15
CMP             R8, R6
MOVLT           R6, R8
CMP             R5, #2
BIC             R6, R6, R6,ASR#31
SUBLE           R1, R8, R6
BLE             loc_4BFE0
LDR             R0, [SP,#0x78+var_48]
BL              sub_4A828
VCVT.S32.F64    S15, D0
VMOV            R1, S15

loc_4BFE0
BIC             R1, R1, R1,ASR#31
ADD             R0, R9, R6
BL              sub_1751C
MOV             R1, R0

loc_4BFF0
MOV             R0, R4
BL              sub_4B308

def_4BE64               ; jumptable 0004BE64 default case
MOV             R0, R7
BL              sub_4B604
MOV             R0, R4
ADD             SP, SP, #0x78 ; 'x'
VPOP            {D8}
POP             {R4-R10,PC}

loc_4C010               ; jumptable 0004BE64 case 12
LDR             R0, [SP,#0x78+var_50]
BL              sub_4A910
MOV             R5, R0
LDR             R0, [SP,#0x78+var_4C]
BL              sub_4A910
AND             R0, R0, R5

loc_4C028
VMOV            S15, R0
VCVT.F64.U32    D0, S15
B               loc_4BED4

loc_4C034               ; jumptable 0004BE64 case 13
LDR             R0, [SP,#0x78+var_50]
BL              sub_4A910
MVN             R0, R0
B               loc_4C028

loc_4C044               ; jumptable 0004BE64 case 14
LDR             R0, [SP,#0x78+var_50]
BL              sub_4A910
MOV             R5, R0
LDR             R0, [SP,#0x78+var_4C]
BL              sub_4A910
MOV             R0, R5,LSL R0
B               loc_4C028

loc_4C060               ; jumptable 0004BE64 case 15
LDR             R0, [SP,#0x78+var_50]
BL              sub_4A910
MOV             R5, R0
LDR             R0, [SP,#0x78+var_4C]
BL              sub_4A910
ORR             R0, R5, R0
B               loc_4C028

loc_4C07C               ; jumptable 0004BE64 case 16
LDR             R0, [SP,#0x78+var_50]
BL              sub_4A910
MOV             R5, R0
LDR             R0, [SP,#0x78+var_4C]
BL              sub_4A910
MOV             R0, R5,LSR R0
B               loc_4C028

loc_4C098               ; jumptable 0004BE64 case 17
LDR             R0, [SP,#0x78+var_50]
BL              sub_4A910
MOV             R5, R0
LDR             R0, [SP,#0x78+var_4C]
BL              sub_4A910
EOR             R0, R0, R5
B               loc_4C028

loc_4C0B4               ; jumptable 0004BE64 cases 7,8
LDR             R0, [SP,#0x78+s]
BL              sub_174F8
MOV             R1, R0
SUB             R2, R0, #1

loc_4C0C4
LDRB            R3, [R2,#1]!
CMP             R3, #0
BEQ             loc_4BFF0
ORR             R12, R3, #0x20 ; ' '
SUB             R0, R12, #0x61 ; 'a'
CMP             R0, #0x19
BHI             loc_4C0C4
CMP             R6, #8
ANDEQ           R12, R3, #0xDF
STRB            R12, [R2]
B               loc_4C0C4

loc_4C0F0               ; jumptable 0004BE64 case 1
LDR             R10, [SP,#0x78+var_3C]
MOV             R0, R10 ; s
BL              strlen
LDR             R8, [SP,#0x78+s]
MOV             R6, R0
MOV             R0, R8  ; s
BL              strlen
SUB             R9, R0, R6
CMP             R9, #0
CMPGE           R6, #0
MOVGT           R5, #1
MOVLE           R5, #0
BLE             loc_4C150
LDR             R3, =dword_7DB98
LDR             R3, [R3]
LDR             R3, [R3,#-0x1C]
CMP             R3, #0
BNE             loc_4C158
MOV             R1, R10 ; needle
MOV             R0, R8  ; haystack
BL              strstr
SUBS            R5, R0, #0
SUBNE           R5, R5, R8
ADDNE           R5, R5, #1

loc_4C150
VMOV            S15, R5
B               loc_4BF58

loc_4C158
MOV             R5, #0

loc_4C15C               ; s1
ADD             R0, R8, R5
MOV             R2, R6  ; n
MOV             R1, R10 ; s2
ADD             R5, R5, #1
BL              strncasecmp
CMP             R0, #0
BEQ             loc_4C150
CMP             R9, R5
BGE             loc_4C15C
MOV             R5, #0
B               loc_4C150

loc_4C188               ; jumptable 0004BE64 case 5
CMP             R5, #1
BLE             loc_4C1F0
LDR             R0, [SP,#0x78+var_4C]
BL              sub_4A828
VCVT.S32.F64    S0, D0
VSTR            S0, [SP,#0x78+timer]

loc_4C1A0
LDR             R3, =dword_7DB98
CMP             R5, #0
LDRNE           R5, [SP,#0x78+s]
ADD             R0, SP, #0x78+timer ; timer
LDREQ           R5, =aABDHMSZY ; "%a %b %d %H:%M:%S %Z %Y"
LDR             R6, [R3]
LDR             R8, [R6,#-0x20]
BL              localtime
MOV             R2, R5  ; format
MOV             R3, R0  ; tp
MOV             R1, #0xF0 ; maxsize
MOV             R0, R8  ; s
BL              strftime
LDR             R3, [R6,#-0x20]
MOV             R2, #0
STRB            R2, [R3,R0]
MOV             R0, R4
LDR             R1, [R6,#-0x20]
BL              sub_4B32C
B               def_4BE64 ; jumptable 0004BE64 default case

loc_4C1F0               ; timer
ADD             R0, SP, #0x78+timer
BL              time
B               loc_4C1A0

loc_4C1FC               ; jumptable 0004BE64 case 6
LDR             R0, [SP,#0x78+s]
BL              sub_4ABB4

loc_4C204
VMOV            S15, R0
B               loc_4BF58

loc_4C20C               ; jumptable 0004BE64 case 2
ADD             R6, SP, #0x78+var_20
MOV             R8, #0
MOV             R1, R6
LDR             R0, [SP,#0x78+var_5C]
BL              sub_4BA78
ADD             R3, SP, #0x78+pmatch ; pmatch
MOV             R2, #1  ; nmatch
STR             R8, [SP,#0x78+eflags] ; eflags
MOV             R5, R0
LDR             R1, [SP,#0x78+s] ; string
BL              regexec
CMP             R0, R8
LDR             R1, =aRstart ; "RSTART"
LDREQ           R3, [SP,#0x78+pmatch]
MOVNE           R3, #0xFFFFFFFF
STRNE           R8, [SP,#0x78+pmatch]
ADDEQ           R3, R3, #1
STREQ           R3, [SP,#0x78+pmatch]
LDREQ           R3, [SP,#0x78+pmatch.rm_eo]
ADDEQ           R3, R3, #1
STR             R3, [SP,#0x78+pmatch.rm_eo]
LDR             R3, =dword_7DB98
LDR             R8, [R3]
LDR             R0, [R8,#-0x4C]
BL              sub_4A98C
VLDR            S15, [SP,#0x78+pmatch]
VCVT.F64.S32    D0, S15
BL              sub_4B458
LDR             R1, =aRlength ; "RLENGTH"
LDR             R0, [R8,#-0x4C]
BL              sub_4A98C
LDRD            R2, R3, [SP,#0x78+pmatch]
SUB             R3, R3, R2
VMOV            S0, R3
VCVT.F64.S32    D0, S0
BL              sub_4B458
VLDR            S15, [SP,#0x78+pmatch]
MOV             R0, R4
VCVT.F64.S32    D0, S15
BL              sub_4B458
CMP             R5, R6
BNE             def_4BE64 ; jumptable 0004BE64 default case
MOV             R0, R5  ; preg
BL              regfree
B               def_4BE64 ; jumptable 0004BE64 default case

loc_4C2C0               ; jumptable 0004BE64 case 9
LDR             R0, [SP,#0x78+var_48]
LDR             R5, [SP,#0x78+var_60]
LDR             R6, [SP,#0x78+var_3C]
BL              sub_4A828
VCVT.S32.F64    S15, D0
MOV             R3, #1
STR             R3, [SP,#0x78+var_74]
MOV             R1, R6
STR             R4, [SP,#0x78+eflags]
MOV             R0, R5
LDR             R3, [SP,#0x78+var_44]
VMOV            R2, S15
BL              sub_4BB1C
B               def_4BE64 ; jumptable 0004BE64 default case

loc_4C2F8               ; jumptable 0004BE64 case 10
LDR             R3, [SP,#0x78+var_48]
MOV             R2, #0
STR             R2, [SP,#0x78+var_74]
STR             R3, [SP,#0x78+eflags]

loc_4C308
LDR             R1, [SP,#0x78+var_3C]
LDR             R0, [SP,#0x78+var_60]
BL              sub_4BB1C
B               loc_4C204

loc_4C318               ; jumptable 0004BE64 case 11
LDR             R3, [SP,#0x78+var_48]
MOV             R2, #0
STR             R2, [SP,#0x78+var_74]
MOV             R2, #1
STR             R3, [SP,#0x78+eflags]
B               loc_4C308
; End of function sub_4BD98

off_4C330 DCD aTooFewArgument ; "Too few arguments for builtin"
off_4C334 DCD dword_7DB98
off_4C338 DCD aABDHMSZY ; "%a %b %d %H:%M:%S %Z %Y"
off_4C33C DCD aRstart   ; "RSTART"
off_4C340 DCD aRlength  ; "RLENGTH"



; _BYTE *__fastcall sub_4C344(_DWORD *)
sub_4C344

var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_8= -8
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1C
ADD             R5, SP, #0x1C+var_4
MOV             R4, #0
MOV             R6, R4
STR             R0, [R5,#-0xC]!
MOV             R0, #1
BL              sub_4A4D8
MOV             R9, R0
MOV             R0, R5
BL              sub_4A40C
MOV             R1, R9
BL              sub_14790
BL              sub_4AD78
BL              sub_174F8
MOV             R11, R0
MOV             R7, R0
STR             R5, [SP,#0x1C+var_14]

loc_4C38C
LDRB            R5, [R7]
CMP             R5, #0
BNE             loc_4C4D4
MOV             R0, R11 ; ptr
BL              free
MOV             R0, R9
BL              sub_4B604
ADD             R1, R4, #1
MOV             R0, R6
BL              sub_174B4
STRB            R5, [R0,R4]
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_4C3C0
MOV             R5, R3

loc_4C3C4
ADD             R5, R5, #1

loc_4C3C8
LDRB            R2, [R5]
CMP             R2, #0
BEQ             loc_4C40C
CMP             R2, #0x25 ; '%'
MOV             R3, R5
LDRB            R1, [R3,#1]!
BNE             loc_4C3C4
CMP             R1, #0x25 ; '%'
BEQ             loc_4C3C0

loc_4C3EC
MOV             R5, R3
LDRB            R1, [R3],#1
CMP             R1, #0
BEQ             loc_4C40C
ORR             R2, R1, #0x20 ; ' '
SUB             R2, R2, #0x61 ; 'a'
CMP             R2, #0x19
BHI             loc_4C4DC

loc_4C40C
SUB             R8, R5, R7
ADD             R2, SP, #0x1C+var_8
ADD             R8, R8, #0xF0
MOV             R0, R6
ADD             R10, R4, R8
MOV             R1, R10
BL              sub_4A59C
LDRB            R2, [R5]
MOV             R6, R0
LDR             R0, [SP,#0x1C+var_14]
CMP             R2, #0
STR             R2, [SP,#0x1C+var_18]
ADDNE           R5, R5, #1
LDRB            R3, [R5]
STR             R3, [SP,#0x1C+var_1C]
MOV             R3, #0
STRB            R3, [R5]
BL              sub_4A40C
MOV             R1, R9
BL              sub_14790
LDR             R2, [SP,#0x1C+var_18]
CMP             R2, #0
CMPNE           R2, #0x63 ; 'c'
MOVEQ           R3, #1
MOVNE           R3, #0
BNE             loc_4C4F8
STR             R0, [SP,#0x1C+var_18]
ADD             R8, R6, R4
BL              sub_4A828
LDR             R1, [SP,#0x1C+var_18]
MOVW            R3, #0x4201
LDR             R2, [R1]
MOV             R0, R1
AND             R3, R3, R2
CMP             R3, #0x4000
BEQ             loc_4C4EC
BL              sub_4A828
VCVT.U32.F64    S15, D0
VSTR            S15, [SP,#0x1C+var_18]
LDRB            R2, [SP,#0x1C+var_18]

loc_4C4AC               ; format
MOV             R1, R7
MOV             R0, R8  ; s

loc_4C4B4
BL              sprintf

loc_4C4B8
LDRB            R3, [SP,#0x1C+var_1C]
ADD             R0, R4, R0
CMP             R4, R0
MOV             R7, R5
MOVLT           R4, R0
STRB            R3, [R5]
B               loc_4C38C

loc_4C4D4
MOV             R5, R7
B               loc_4C3C8

loc_4C4DC
CMP             R1, #0x2A ; '*'
BNE             loc_4C3EC
LDR             R0, =aXFormatsAreNot ; "%*x formats are not supported"
BL              sub_4AC50

loc_4C4EC
BL              sub_4AD78
LDRB            R2, [R0]
B               loc_4C4AC

loc_4C4F8
CMP             R2, #0x73 ; 's'
BNE             loc_4C530
BL              sub_4AD78
MOV             R8, R0
BL              strlen
ADD             R2, SP, #0x1C+var_8
ADD             R1, R10, R0
MOV             R0, R6
BL              sub_4A59C
MOV             R2, R8
MOV             R6, R0
MOV             R1, R7
ADD             R0, R0, R4
B               loc_4C4B4

loc_4C530
ADD             R10, R6, R4
STR             R3, [SP,#0x1C+var_18]
BL              sub_4A828
LDR             R3, [SP,#0x1C+var_18]
MOV             R2, R7
MOV             R1, R8
MOV             R0, R10
BL              sub_4AC78
B               loc_4C4B8
; End of function sub_4C344

off_4C554 DCD aXFormatsAreNot ; "%*x formats are not supported"



; int __fastcall sub_4C558(int)
sub_4C558
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
LDR             R1, [R3]
ADD             R1, R1, #0xB8
BL              sub_14790
POP             {R4,LR}
B               sub_4A8BC
; End of function sub_4C558

off_4C574 DCD dword_7DB98



; int __fastcall sub_4C578(unsigned int)
sub_4C578

var_10= -0x10
var_8= -8
var_4= -4

LDR             R3, =dword_7DB98
PUSH            {R4-R11,LR}
MOV             R10, R0
SUB             SP, SP, #0x14
LDR             R5, [R3]
LDR             R3, [R5,#-8]
CMP             R3, #0
MOVNE           R3, #0
STRNE           R3, [R5,#-8]
BNE             loc_4C5C0
LDR             R2, [R5,#0x6C]
CMP             R2, #0
BEQ             loc_4C5E8
STR             R3, [R5,#0x6C]
LDR             R3, [R5,#0x60]
STR             R3, [R5,#4]
LDR             R3, [R5,#0x64]
STR             R3, [R5]

loc_4C5C0
LDR             R0, [R5,#4]
TST             R0, R10
STR             R0, [R5,#0x68]
BNE             loc_4C92C
LDR             R3, =0x2008000
TST             R0, R3
LDR             R3, =aUnexpectedEndO_0 ; "Unexpected end of string"
LDR             R0, =aUnexpectedToke ; "Unexpected token"
MOVNE           R0, R3
B               loc_4C6C8

loc_4C5E8
LDR             R11, =0x1FF8080
LDR             R4, [R5,#-0x24]
ORR             R11, R0, R11

loc_4C5F4
MOV             R0, R4
BL              sub_4A384
LDR             R3, [R5,#0xC]
MOV             R4, R0
STR             R3, [R5,#-0x38]
LDRB            R2, [R0]
CMP             R2, #0x23 ; '#'
BNE             loc_4C62C
MOV             R2, R0

loc_4C618
MOV             R4, R2
LDRB            R1, [R2],#1
CMP             R1, #0xA
CMPNE           R1, #0
BNE             loc_4C618

loc_4C62C
LDRB            R2, [R4]
CMP             R2, #0xA
ADDEQ           R3, R3, #1
STREQ           R3, [R5,#0xC]
LDRB            R7, [R4]
CMP             R7, #0
BEQ             loc_4C924
CMP             R7, #0x22 ; '"'
ADDEQ           R4, R4, #1
STREQ           R4, [R5,#8]
MOVEQ           R6, R4
BEQ             loc_4C6E0
SUB             R3, R7, #0x2F ; '/'
CLZ             R3, R3
MOV             R3, R3,LSR#5
ANDS            R3, R3, R10,LSR#2
ADDNE           R3, R4, #1
STRNE           R3, [R5,#8]
MOVNE           R7, R3
BNE             loc_4C7BC
SUB             R3, R7, #0x30 ; '0'
CMP             R7, #0x2E ; '.'
CMPNE           R3, #9
BHI             loc_4C90C
ADD             R1, SP, #0x14+var_4
MOV             R0, R4  ; nptr
STR             R4, [R1,#-4]! ; endptr
BL              strtod
LDR             R4, [SP,#0x14+var_8]
VSTR            D0, [R5,#-0x88]
LDRB            R3, [R4]
CMP             R3, #0x2E ; '.'
BNE             loc_4C7EC

loc_4C6B0
LDR             R0, =aUnexpectedToke ; "Unexpected token"
B               loc_4C6C8

loc_4C6B8
CMP             R3, #0xA
CMPNE           R3, #0
BNE             loc_4C6CC

loc_4C6C4
LDR             R0, =aUnexpectedEndO_0 ; "Unexpected end of string"

loc_4C6C8
BL              sub_4AC50

loc_4C6CC
ADD             R0, SP, #0x14+var_8
STR             R4, [SP,#0x14+var_8]
BL              sub_4AB34
STRB            R0, [R6],#1
LDR             R4, [SP,#0x14+var_8]

loc_4C6E0
LDRB            R3, [R4]
CMP             R3, #0x22 ; '"'
BNE             loc_4C6B8
MOV             R3, #0
ADD             R4, R4, #1
STRB            R3, [R6]
MOV             R6, #0x20000000

loc_4C6FC
LDR             R3, [R5,#0x68]
MOVW            R2, #0xF3C0
STR             R4, [R5,#-0x24]
TST             R3, R2
BEQ             loc_4C718
TST             R6, #0x8000
BNE             loc_4C5F4

loc_4C718
LDR             R2, =0x64000812
TST             R3, R2
BEQ             loc_4C75C
LDR             R3, =0x7C380421
AND             R3, R3, R6
CMP             R3, #0
BEQ             loc_4C75C
TST             R10, #0x3C0
BEQ             loc_4C75C
MOV             R3, #1
STR             R6, [R5,#0x60]
STR             R3, [R5,#0x6C]
MOV             R6, #0x3C0
LDR             R3, [R5]
STR             R3, [R5,#0x64]
LDR             R3, =0x230F1500
STR             R3, [R5]

loc_4C75C
STR             R6, [R5,#4]
B               loc_4C5C0

loc_4C764
CMP             R3, #0xA
CMPNE           R3, #0
BEQ             loc_4C6C4
CMP             R3, #0x5C ; '\'
MOV             R6, R7
STRB            R3, [R6],#1
BNE             loc_4C7E4
ADD             R0, SP, #0x14+var_8
STR             R8, [SP,#0x14+var_8]
BL              sub_5E668
STRB            R0, [R7]
LDRB            R3, [R4,#1]
CMP             R3, #0x5C ; '\'
STRBEQ          R3, [R7,#1]
ADDEQ           R6, R7, #2
LDR             R3, [SP,#0x14+var_8]
CMP             R3, R8
LDRBEQ          R2, [R4,#1]
ADDEQ           R3, R4, #2
STRBEQ          R2, [R6]
ADDEQ           R6, R6, #1
MOV             R7, R6

loc_4C7BC
MOV             R8, R3

loc_4C7C0
MOV             R4, R8
LDRB            R3, [R8],#1
CMP             R3, #0x2F ; '/'
BNE             loc_4C764
MOV             R3, #0
MOV             R4, R8
STRB            R3, [R7]
MOV             R6, #4
B               loc_4C6FC

loc_4C7E4
MOV             R7, R6
B               loc_4C7C0

loc_4C7EC
MOV             R6, #0x40000000
B               loc_4C6FC

loc_4C7F4
CMP             R8, #0xFF
ADD             R9, R9, #1
MOVEQ           R6, R6,LSL#1
BEQ             loc_4C878
TST             R11, R6
BEQ             loc_4C870
MOV             R2, R8  ; n
MOV             R1, R9  ; s2
MOV             R0, R4  ; s1
STR             R3, [SP,#0x14+var_10]
BL              strncmp
CMP             R0, #0
LDR             R3, [SP,#0x14+var_10]
BNE             loc_4C870
LDR             R2, =0x1FF0080
ADD             R0, R4, R8
TST             R6, R2
BEQ             loc_4C860
LDRB            R2, [R4,R8]
SUB             R1, R2, #0x30 ; '0'
CMP             R1, #9
BLS             loc_4C870
ORR             R1, R2, #0x20 ; ' '
SUB             R1, R1, #0x61 ; 'a'
CMP             R2, #0x5F ; '_'
CMPNE           R1, #0x19
BLS             loc_4C870

loc_4C860
LDR             R3, [R3]
MOV             R4, R0
STR             R3, [R5]
B               loc_4C6FC

loc_4C870
ADD             R3, R3, #4
ADD             R9, R9, R8

loc_4C878
LDRB            R8, [R9]
CMP             R8, #0
BNE             loc_4C7F4
ORR             R3, R7, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R7, #0x5F ; '_'
CMPNE           R3, #0x19
BHI             loc_4C6B0
SUB             R4, R4, #1
STR             R4, [R5,#8]

loc_4C8A0
LDRB            R2, [R4,#1]!
SUB             R3, R2, #0x30 ; '0'
CMP             R3, #9
BLS             loc_4C91C
ORR             R3, R2, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R2, #0x5F ; '_'
CMPNE           R3, #0x19
MOVLS           R3, #1
MOVHI           R3, #0
BLS             loc_4C91C
STRB            R3, [R4,#-1]
AND             R3, R10, #0xC000000
CMP             R3, #0x4000000
BEQ             loc_4C8E8
MOV             R0, R4
BL              sub_4A384
MOV             R4, R0

loc_4C8E8
LDRB            R3, [R4]
CMP             R3, #0x28 ; '('
MOVEQ           R6, #0x10000000
BEQ             loc_4C6FC
CMP             R3, #0x5B ; '['
ADDEQ           R4, R4, #1
MOVEQ           R6, #0x8000000
MOVNE           R6, #0x4000000
B               loc_4C6FC

loc_4C90C
LDR             R3, =unk_63CE4
MOV             R6, #1
LDR             R9, =unk_6AAC2
B               loc_4C878

loc_4C91C
STRB            R2, [R4,#-1]
B               loc_4C8A0

loc_4C924
MOV             R6, #0x2000000
B               loc_4C6FC

loc_4C92C
ADD             SP, SP, #0x14
POP             {R4-R11,PC}
; End of function sub_4C578

off_4C934 DCD dword_7DB98
dword_4C938 DCD 0x2008000
off_4C93C DCD aUnexpectedEndO_0 ; "Unexpected end of string"
off_4C940 DCD aUnexpectedToke ; "Unexpected token"
dword_4C944 DCD 0x1FF8080
dword_4C948 DCD 0x64000812
dword_4C94C DCD 0x7C380421
dword_4C950 DCD 0x230F1500
dword_4C954 DCD 0x1FF0080
off_4C958 DCD unk_63CE4
off_4C95C DCD unk_6AAC2



; int sub_4C960()
sub_4C960
PUSH            {R4,LR}
MOV             R0, #1
BL              sub_4C578
MOV             R0, #2
POP             {R4,LR}
B               sub_4C978
; End of function sub_4C960



; Attributes: bp-based frame fpd=0x18

; int __fastcall sub_4C978(int)
sub_4C978

var_24= -0x24
var_20= -0x20
var_18= -0x18
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x24
LDR             R10, =0x7C380425
MOV             R9, R0
ADD             R11, SP, #0xC
MOV             R3, #0x7F000000
MOV             R8, #0
STR             R3, [SP,#0x24+var_18]
ORR             R6, R0, R10
STR             R10, [SP,#0x24+var_24]
ADD             R10, R10, #0x3CC
STR             R8, [SP,#0x24+var_C]
ORR             R10, R0, R10

loc_4C9AC
MOV             R0, R6
BL              sub_4C578
ANDS            R2, R9, R0
MOV             R5, R0
BEQ             loc_4C9CC
LDR             R0, [SP,#0x24+var_C]
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_4C9CC
LDR             R1, =dword_7DB98
CMP             R8, #0
LDR             R7, [R1]
LDR             R0, [R7]
BEQ             loc_4CA18
LDR             R1, =0x27031402
CMP             R0, R1
BNE             loc_4CA18
LDR             R0, =0x250F1500
STR             R2, [SP,#0x24+var_20]
BL              sub_4A4AC
LDR             R2, [SP,#0x24+var_20]
MOV             R4, R0
LDR             R6, =0x7C380421
STR             R0, [R8,#8]
STR             R8, [R0,#0x10]
MOV             R8, R2

loc_4CA10
MOV             R11, R4
B               loc_4C9AC

loc_4CA18
TST             R5, #0x3D0
ANDNE           R12, R0, #0x7F000000
ANDNE           R1, R0, #0xFF00
BNE             loc_4CA90
BL              sub_4A4AC
LDR             R2, =0x7C380005
MOV             R4, R0
STR             R0, [R11,#0x18+var_C]
STR             R11, [R0,#0x10]
AND             R2, R2, R5
CMP             R2, #0
BEQ             loc_4CC98
CMP             R5, #0x200000
MOV             R6, R10
BEQ             loc_4CC88
BHI             loc_4CB54
CMP             R5, #4
BEQ             loc_4CC1C
BHI             loc_4CB28
CMP             R5, #1
BNE             loc_4CA10
MOV             R0, #2
BL              sub_4C978
CMP             R0, #0
MOV             R4, R0
STR             R0, [R11,#0x18+var_C]
BNE             loc_4CC80
LDR             R0, =aEmptySequence ; "Empty sequence"
BL              sub_4AC50

loc_4CA8C
MOV             R11, R6

loc_4CA90
LDR             R6, [R11,#0x18+var_8]
LDR             R2, [R6]
AND             R2, R2, #0x7E000000
CMP             R12, R2
BHI             loc_4CA8C
LDR             R2, [R11,#0x18+var_18]
CMP             R2, R0
BNE             loc_4CAB8
CMP             R1, #0x1200
BEQ             loc_4CA8C

loc_4CAB8
CMP             R1, #0x2500
ADDEQ           R0, R0, #0x6000000
STREQ           R0, [R7]
LDR             R0, [R7]
BL              sub_4A4AC
LDR             R2, [R11,#0x18+var_8]
TST             R5, #0x3C0
STR             R0, [R6,#0xC]
MOV             R4, R0
STR             R2, [R0,#0x10]
BEQ             loc_4CB20
LDR             R2, [R7]
STR             R11, [R0,#8]
AND             R2, R2, #0xFF00
CMP             R2, #0x2000
LDRNE           R6, [SP,#0x24+var_24]
BNE             loc_4CB18
MOV             R0, #0x200000
BL              sub_4C578
LDR             R2, [R4]
BIC             R2, R2, #0x7F000000
STR             R2, [R4]

loc_4CB10
LDR             R6, =0x7C3807E1
ORR             R6, R9, R6

loc_4CB18
STR             R4, [R11,#0x18+var_8]
B               loc_4CA10

loc_4CB20
STR             R11, [R0,#0xC]
B               loc_4CB10

loc_4CB28
CMP             R5, #0x80000
BEQ             loc_4CC74
CMP             R5, #0x100000
BNE             loc_4CA10
MOVW            R0, #0xE001
BL              sub_4C578
BL              sub_4A3F4
LDR             R3, [R7,#4]
TST             R3, #1
BEQ             loc_4CA10
B               loc_4CC74

loc_4CB54
CMP             R5, #0x10000000
BEQ             loc_4CC5C
BHI             loc_4CBC4
CMP             R5, #0x4000000
BEQ             loc_4CB70
CMP             R5, #0x8000000
BNE             loc_4CA10

loc_4CB70
LDR             R11, [R7,#8]
MOV             R3, #0x2700
STR             R3, [R4]
LDR             R0, [R7,#-0x48]
MOV             R1, R11
BL              sub_4A93C
CMP             R0, #0
BEQ             loc_4CBFC
MOV             R3, #0x1800
STR             R3, [R4]
LDR             R3, [R0,#0x14]
STR             R3, [R4,#8]

loc_4CBA0
TST             R5, #0x8000000
BEQ             loc_4CA10
LDR             R3, [R4]
MOV             R0, #0x800
ORR             R3, R3, #0xA0000
STR             R3, [R4]
BL              sub_4C978
STR             R0, [R4,#0xC]
B               loc_4CA10

loc_4CBC4
CMP             R5, #0x20000000
BEQ             loc_4CBD4
CMP             R5, #0x40000000
BNE             loc_4CA10

loc_4CBD4
MOV             R3, #0x2700
MOV             R0, #0x18
STR             R3, [R4]
BL              sub_174DC
TST             R5, #0x40000000
STR             R0, [R4,#8]
BEQ             loc_4CC10
VLDR            D0, [R7,#-0x88]
BL              sub_4B458
B               loc_4CA10

loc_4CBFC
MOV             R1, R11
LDR             R0, [R7,#-0x4C]
BL              sub_4A98C
STR             R0, [R4,#8]
B               loc_4CBA0

loc_4CC10
LDR             R1, [R7,#8]
BL              sub_4B32C
B               loc_4CA10

loc_4CC1C
LDR             R7, [R7,#8]
MOV             R0, #0x40 ; '@'
BL              sub_174DC
MOV             R3, #0x2100
ADD             R5, R0, #0x20 ; ' '
STR             R0, [R4,#8]
MOV             R1, R7
STR             R3, [R4]
MOV             R2, #1
STR             R5, [R4,#0xC]
BL              sub_625E4
MOV             R2, #3
MOV             R1, R7
MOV             R0, R5
BL              sub_625E4
B               loc_4CA10

loc_4CC5C
MOV             R3, #0x1900
LDR             R1, [R7,#8]
STR             R3, [R0]
LDR             R0, [R7,#-0x40]
BL              sub_4A98C
STR             R0, [R4,#0xC]

loc_4CC74
BL              sub_4C960
STR             R0, [R4,#8]
B               loc_4CA10

loc_4CC80
STR             R11, [R0,#0x10]
B               loc_4CA10

loc_4CC88
LDR             R6, =0x7C3807E1
MOV             R8, R0
ORR             R6, R9, R6
B               loc_4CA10

loc_4CC98
LDR             R6, [SP,#0x24+var_24]
B               loc_4CA10
; End of function sub_4C978

dword_4CCA0 DCD 0x7C380425
off_4CCA4 DCD dword_7DB98
dword_4CCA8 DCD 0x27031402
dword_4CCAC DCD 0x250F1500
dword_4CCB0 DCD 0x7C380421
dword_4CCB4 DCD 0x7C380005
off_4CCB8 DCD aEmptySequence ; "Empty sequence"
dword_4CCBC DCD 0x7C3807E1



; void __fastcall sub_4CCC0(int)
sub_4CCC0
PUSH            {R4,LR}
BL              sub_4A710
MOV             R4, R0
MOV             R0, #0xE000
BL              sub_4C978
LDR             R3, =dword_7DB98
STR             R0, [R4,#8]
LDR             R3, [R3]
LDR             R3, [R3,#4]
TST             R3, #0x2000
POPEQ           {R4,PC}
POP             {R4,LR}
B               sub_4A3F4
; End of function sub_4CCC0

off_4CCF4 DCD dword_7DB98



; void sub_4CCF8()
sub_4CCF8
PUSH            {R4-R6,LR}
LDR             R4, =0x7C3BD425

loc_4CD00
MOV             R0, R4
BL              sub_4C578
TST             R0, #0x8000
BNE             loc_4CD00
TST             R0, #0x1000
BEQ             loc_4CD4C
LDR             R4, =0x7C3BF425
LDR             R5, =dword_7DB98

loc_4CD20
MOV             R0, R4
BL              sub_4C578
CMP             R0, #0x2000
POPEQ           {R4-R6,PC}
LDR             R3, [R5]
LDR             R3, [R3,#4]
TST             R3, #0x8000
BNE             loc_4CD20
BL              sub_4A3F4
BL              sub_4CCF8
B               loc_4CD20

loc_4CD4C
LDR             R5, =0x7C38C425
AND             R5, R5, R0
CMP             R5, #0
BEQ             loc_4CD6C
BL              sub_4A3F4
LDR             R0, =(elf_hash_bucket+0x44)

loc_4CD64
POP             {R4-R6,LR}
B               sub_4CCC0

loc_4CD6C
LDR             R3, =dword_7DB98
LDR             R4, [R3]
LDR             R0, [R4]
AND             R3, R0, #0xFF00
CMP             R3, #0x900
BEQ             loc_4CF78
BHI             loc_4CDF0
CMP             R3, #0x500
BEQ             loc_4CDA0
CMP             R3, #0x800
BEQ             loc_4CF60
CMP             R3, #0x400
BNE             loc_4CD64

loc_4CDA0
BL              sub_4A710
MOV             R5, R0
MOVW            R0, #0xE008
BL              sub_4C978
LDR             R3, [R4,#4]
STR             R0, [R5,#8]
TST             R3, #8
BEQ             loc_4CDDC
LDR             R3, [R5]
MOV             R0, #0xE000
LDR             R2, [R4]
ORR             R3, R3, R2
STR             R3, [R5]
BL              sub_4C978
STR             R0, [R5,#0xC]

loc_4CDDC
LDR             R3, [R4,#4]
TST             R3, #0x2000
POPEQ           {R4-R6,PC}

loc_4CDE8
POP             {R4-R6,LR}
B               sub_4A3F4

loc_4CDF0
CMP             R3, #0x3100
BEQ             loc_4CE80
BHI             loc_4CE58
CMP             R3, #0x3000
BNE             loc_4CD64
LDR             R0, =(elf_hash_chain+0x128)
BL              sub_4A710
MOV             R5, R0
BL              sub_4C960
STR             R0, [R5,#8]
BL              sub_4CCF8
MOV             R0, #0x200
BL              sub_4A710
LDR             R3, [R4,#-0x5C]
MOV             R6, R0
LDR             R0, =0x7C3FF425
LDR             R3, [R3,#4]
STR             R3, [R5,#0xC]
BL              sub_4C578
CMP             R0, #0x40000
BNE             loc_4CDE8
BL              sub_4CCF8
LDR             R3, [R4,#-0x5C]
LDR             R3, [R3,#4]
STR             R3, [R6,#0x10]
POP             {R4-R6,PC}

loc_4CE58
CMP             R3, #0x3200
BEQ             loc_4CEB4
CMP             R3, #0x3300
BNE             loc_4CD64
BL              sub_4C960
MOV             R4, R0
MOV             R0, R5
BL              sub_4CFB0
STR             R4, [R0,#8]
POP             {R4-R6,PC}

loc_4CE80
MOV             R0, #0x200
BL              sub_4A710
MOV             R6, R0
MOV             R0, R5
BL              sub_4CFB0
LDR             R3, [R0,#0x10]
MOV             R4, R0
MOV             R0, #0x20000
STR             R3, [R6,#0x10]
BL              sub_4C578
BL              sub_4C960
STR             R0, [R4,#8]
POP             {R4-R6,PC}

loc_4CEB4
MOV             R0, #1
BL              sub_4C578
MOVW            R0, #0x4002
BL              sub_4C978
LDR             R3, [R4,#4]
MOV             R5, R0
TST             R3, #2
BEQ             loc_4CF28
CMP             R0, #0
BEQ             loc_4CEEC
LDR             R3, [R0]
AND             R3, R3, #0xFF00
CMP             R3, #0x1B00
BEQ             loc_4CEF4

loc_4CEEC
LDR             R0, =aUnexpectedToke ; "Unexpected token"
BL              sub_4AC50

loc_4CEF4
LDR             R0, =0x30600
BL              sub_4A710
LDR             R3, [R5,#8]
STR             R3, [R0,#8]
LDR             R3, [R5,#0xC]
STR             R3, [R0,#0xC]
MOV             R0, #0
BL              sub_4CFB0
LDR             R3, =stru_10DFC.st_value
STR             R3, [R0]
LDR             R3, [R5,#8]
STR             R3, [R0,#8]
POP             {R4-R6,PC}

loc_4CF28
LDR             R0, =(elf_hash_bucket+0x44)
BL              sub_4A710
STR             R5, [R0,#8]
MOV             R0, #0x4000
BL              sub_4C978
MOV             R4, R0
MOV             R0, #2
BL              sub_4C978
BL              sub_4CFB0
CMP             R4, #0
STR             R4, [R0,#8]
MOVEQ           R3, #0x200
STREQ           R3, [R0]
POP             {R4-R6,PC}

loc_4CF60
MOV             R0, #0x200
BL              sub_4A710
LDR             R3, [R4,#-0x58]

loc_4CF6C
STR             R3, [R0,#0x10]
LDR             R0, [R4]
B               loc_4CD64

loc_4CF78
MOV             R0, #0x200
BL              sub_4A710
LDR             R3, [R4,#-0x54]
B               loc_4CF6C
; End of function sub_4CCF8

dword_4CF88 DCD 0x7C3BD425
dword_4CF8C DCD 0x7C3BF425
off_4CF90 DCD dword_7DB98
dword_4CF94 DCD 0x7C38C425
off_4CF98 DCD elf_hash_bucket+0x44
off_4CF9C DCD elf_hash_chain+0x128
dword_4CFA0 DCD 0x7C3FF425
off_4CFA4 DCD aUnexpectedToke ; "Unexpected token"
dword_4CFA8 DCD 0x30600
off_4CFAC DCD stru_10DFC.st_value



; _DWORD *__fastcall sub_4CFB0(int)
sub_4CFB0
LDR             R3, =dword_7DB98
PUSH            {R4-R8,LR}
MOV             R8, R0
LDR             R0, =(elf_hash_chain+0x128)
LDR             R4, [R3]
LDRD            R6, R7, [R4,#-0x58]
BL              sub_4A710
MOV             R5, R0
MOV             R0, #0x200
BL              sub_4A4AC
STR             R0, [R4,#-0x54]
MOV             R0, #0x200
BL              sub_4A4AC
STR             R0, [R4,#-0x58]
BL              sub_4CCF8
LDR             R0, =(elf_hash_bucket+0x44)
BL              sub_4A710
LDR             R3, [R4,#-0x54]
STR             R8, [R0,#8]
STR             R5, [R0,#0x10]
STR             R0, [R3,#0x10]
MOV             R0, R5
LDR             R3, [R4,#-0x5C]
LDR             R2, [R4,#-0x58]
LDR             R3, [R3,#4]
STR             R3, [R5,#0xC]
STR             R3, [R2,#0x10]
STRD            R6, R7, [R4,#-0x58]
POP             {R4-R8,PC}
; End of function sub_4CFB0

off_4D024 DCD dword_7DB98
off_4D028 DCD elf_hash_chain+0x128
off_4D02C DCD elf_hash_bucket+0x44



; int __fastcall sub_4D030(int)
sub_4D030
PUSH            {R4-R10,LR}
MOV             R2, #1
LDR             R6, =dword_7DB98
LDR             R7, =0x7FF8D425
LDR             R8, =0x7C380425
LDR             R9, =0x200D000
LDR             R3, [R6]
STR             R0, [R3,#-0x24]
STR             R2, [R3,#0xC]

loc_4D054
MOV             R0, R7
BL              sub_4C578
CMP             R0, #0x2000000
POPEQ           {R4-R10,PC}
TST             R0, #0xC000
BNE             loc_4D054
LDR             R4, [R6]
TST             R0, #0x800000
SUB             R3, R4, #0x74 ; 't'
STR             R3, [R4,#-0x5C]
SUBNE           R3, R4, #0x80
BNE             loc_4D090
ANDS            R10, R0, #0x1000000
BEQ             loc_4D09C
SUB             R3, R4, #0x68 ; 'h'

loc_4D090
STR             R3, [R4,#-0x5C]

loc_4D094
BL              sub_4CCF8
B               loc_4D054

loc_4D09C
TST             R0, #0x400000
BEQ             loc_4D124
MOV             R0, #0x10000000
BL              sub_4C578
LDR             R3, [R4,#-0x24]
LDR             R1, [R4,#8]
LDR             R0, [R4,#-0x40]
ADD             R3, R3, #1
STR             R3, [R4,#-0x24]
BL              sub_4A98C
MOV             R5, R0
STR             R10, [R0,#4]
STR             R10, [R0]

loc_4D0D0
MOV             R0, #0x4000002
BL              sub_4C578
TST             R0, #0x4000000
BEQ             loc_4D10C
LDR             R1, [R4,#8]
LDR             R0, [R4,#-0x48]
BL              sub_4A98C
LDR             R3, [R5]
ADD             R2, R3, #1
STR             R2, [R5]
STR             R3, [R0,#0x14]
MOVW            R0, #0x102
BL              sub_4C578
TST             R0, #2
BEQ             loc_4D0D0

loc_4D10C
ADD             R5, R5, #4
STR             R5, [R4,#-0x5C]
BL              sub_4CCF8
LDR             R0, [R4,#-0x48]
BL              sub_4A6AC
B               loc_4D054

loc_4D124
TST             R0, R8
BEQ             loc_4D174
BL              sub_4A3F4
MOV             R0, #0xD00
BL              sub_4A710
MOV             R5, R0
MOV             R0, R9
BL              sub_4C978
LDR             R3, [R4,#4]
STR             R0, [R5,#8]
TST             R3, #0x1000
BEQ             loc_4D168
BL              sub_4A3F4
BL              sub_4CCF8

loc_4D15C
LDR             R3, [R4,#-0x70]
STR             R3, [R5,#0xC]
B               loc_4D054

loc_4D168
MOV             R0, #0x400
BL              sub_4A710
B               loc_4D15C

loc_4D174
BL              sub_4A3F4
B               loc_4D094
; End of function sub_4D030

off_4D17C DCD dword_7DB98
dword_4D180 DCD 0x7FF8D425
dword_4D184 DCD 0x7C380425
dword_4D188 DCD 0x200D000



; int __fastcall sub_4D18C(_DWORD *, _DWORD *)
sub_4D18C
LDR             R3, [R0,#8]
LDR             R2, [R1,#8]
SUBS            R3, R3, R2
LDREQ           R3, [R0]
LDREQ           R0, [R1]
SUBEQ           R3, R3, R0
MOV             R0, R3
BX              LR
; End of function sub_4D18C




; int __fastcall sub_4D1AC(int result, __int64)
sub_4D1AC

var_C= -0xC

PUSH            {R0-R2,R4-R7,LR}
LDRD            R4, R5, [R0,#8]
CMP             R5, R3
CMPEQ           R4, R2
BEQ             loc_4D1DC
MOV             R6, R2
MOV             R7, R3
MOV             R1, #0
STRD            R6, R7, [R0,#8]
STR             R1, [SP,#0xC+var_C]
LDR             R0, [R0]
BL              fseeko64

loc_4D1DC
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_4D1AC




; unsigned int __fastcall sub_4D1E4(int, int)
sub_4D1E4
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R6, =dword_7DBC0
ORR             R4, R1, #0x200

loc_4D1F4
TST             R4, #0x800
BNE             loc_4D29C
LDR             R0, [R5] ; stream
BL              getc_unlocked
CMN             R0, #1
MOVEQ           R3, #1
BEQ             loc_4D240
LDR             R3, [R5,#8]
LDR             R2, [R5,#0xC]
ADDS            R3, R3, #1
STR             R3, [R5,#8]
SUB             R3, R0, #9
UXTB            R3, R3
ADC             R2, R2, #0
STR             R2, [R5,#0xC]
CMP             R3, #0x17
CMPNE           R3, #4
MOVLS           R3, #1
MOVHI           R3, #0

loc_4D240
AND             R2, R0, #0xC00
CMP             R0, #0xA
ORR             R4, R4, R2
LDR             R2, [R6]
ORREQ           R4, R4, #0x800
TST             R2, #8
BEQ             loc_4D268
SUB             R1, R0, #0x41 ; 'A'
CMP             R1, #0x19
ADDLS           R0, R0, #0x20 ; ' '

loc_4D268
ANDS            R1, R3, R2,LSR#13
BNE             loc_4D1F4
TST             R2, #2
UBFX            R0, R0, #0, #9
BEQ             loc_4D290
TST             R4, #0x1000
BEQ             loc_4D2A4
CMP             R3, #0
BNE             loc_4D1F4
BIC             R4, R4, #0x1000

loc_4D290
BIC             R4, R4, #0x3FC
BIC             R4, R4, #3
ORR             R4, R0, R4

loc_4D29C
MOV             R0, R4
POP             {R4-R6,PC}

loc_4D2A4
MOVW            R2, #0x1020
CMP             R3, #0
MOVNE           R0, R2
B               loc_4D290
; End of function sub_4D1E4

off_4D2B4 DCD dword_7DBC0


; Attributes: bp-based frame fpd=0x18

; _DWORD *__fastcall sub_4D2B8(int, int *, _DWORD *)
sub_4D2B8

var_6C= -0x6C
var_60= -0x60
var_5C= -0x5C
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
ptr= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x6C
SUB             R3, R2, #4
MOV             R11, R1
ADD             R7, SP, #0x54
MOV             R5, R0
SUB             R4, R1, #4
STR             R3, [SP,#0x6C+var_60]
ADD             R3, R0, #0x20 ; ' '
STR             R0, [SP,#0x6C+var_4C]
STR             R2, [SP,#0x6C+var_38]
STR             R3, [SP,#0x6C+var_54]

loc_4D2E8
MOV             R0, #0x670
BL              sub_1748C
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R5,#8]
MOV             R3, #0
MOV             R6, R0
STR             R0, [R7,#0x18+var_14]!
MOV             R8, R3
STR             R3, [SP,#0x6C+var_6C]
MOV             R2, #0
MOV             R3, #0
LDR             R0, [R5]
BL              fseeko64
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R6]
MOV             R6, #0x64 ; 'd'
STR             R8, [R4,#4]!

loc_4D334
MOV             R8, #0
MOV             R10, R8

loc_4D33C
MOV             R1, R8
MOV             R0, R5
BL              sub_4D1E4
TST             R0, #0x200
MOV             R8, R0
UBFXEQ          R3, R0, #0, #9
SUBEQ           R3, R10, R3
RSBEQ           R10, R3, R10,LSL#7
BEQ             loc_4D33C
LDR             R3, [R4]
LDR             R0, [R7,#0x18+var_18]
CMP             R3, R6
ADD             R2, R3, #1
STR             R2, [R4]
BNE             loc_4D390
ADD             R6, R6, R6,LSL#1
MOV             R6, R6,LSR#1
ADD             R1, R6, #3
MOV             R1, R1,LSL#4
BL              sub_174B4
STR             R0, [R7,#0x18+var_18]

loc_4D390
LDR             R2, [R4]
BIC             R10, R10, #0x80000000
LDR             R3, [R7,#0x18+var_18]
TST             R8, #0x400
LDRD            R0, R1, [R5,#8]
ADD             R2, R3, R2,LSL#4
STR             R10, [R2,#8]
LDR             R2, [R4]
MOV             R2, R2,LSL#4
STRD            R0, R1, [R3,R2]
BEQ             loc_4D334
LDR             R2, [R4]
STR             R3, [SP,#0x6C+var_50]
MOV             R2, R2,LSL#4
LDR             R1, [R3,R2]
ADD             R0, R3, R2
LDR             R0, [R0,#4]
ADDS            R1, R1, #1
STR             R1, [R3,R2]
ADC             R0, R0, #0
ADD             R2, R3, R2
STR             R0, [R2,#4]
LDR             R1, [R4]
MOV             R2, R1,LSL#4
ADD             R12, R3, R2
LDR             R0, [R3,R2]
LDR             R2, [R12,#-0x10]
LDR             LR, [R12,#4]
LDR             R12, [R12,#-0xC]
SUBS            R2, R0, R2
STR             R2, [SP,#0x6C+var_5C]
SBC             R2, LR, R12
STR             R2, [SP,#0x6C+var_5C+4]
LDRD            R8, R9, [SP,#0x6C+var_5C]
CMP             R9, #0
CMPEQ           R8, #1
SUBEQ           R2, R1, #1
STREQ           R2, [R4]
LDR             R0, [R4]
ADD             R0, R0, #2
MOV             R0, R0,LSL#3
BL              sub_1748C
LDR             R3, [SP,#0x6C+var_60]
MOV             R2, #0
LDR             R1, [R4]
STR             R0, [R3,#4]!
SUB             R0, R0, #8
STR             R3, [SP,#0x6C+var_60]
LDR             R3, [SP,#0x6C+var_50]

loc_4D454
CMP             R1, R2
BGE             loc_4D738
LDR             R3, [SP,#0x6C+var_54]
ADD             R5, R5, #0x10
CMP             R5, R3
BNE             loc_4D2E8
LDR             R2, [R11]
MOV             R3, #0x18
LDR             R7, [SP,#0x6C+var_14]
MOV             R1, #0
LDR             R6, [SP,#0x6C+var_10]

loc_4D480
STR             R1, [SP,#0x6C+var_60]
LDR             R1, [SP,#0x6C+var_60]
CMP             R2, R1
BLE             loc_4D4A0
LDR             R1, [R11,#4]
LDR             R0, [SP,#0x6C+var_60]
CMP             R1, R0
BGT             loc_4D74C

loc_4D4A0
LDR             R3, [SP,#0x6C+var_60]
MOV             R0, R2,LSL#4
MOV             R5, #0
MOV             R12, #0xFFFFFFF0
SUB             R2, R2, R3

loc_4D4B4
CMP             R2, R5
BLE             loc_4D4F0
LDR             R3, [R11,#4]
LDR             R1, [SP,#0x6C+var_60]
SUB             R1, R3, R1
CMP             R1, R5
BLE             loc_4D4F0
MLA             R1, R12, R5, R0
SUB             R3, R3, R5
ADD             R3, R6, R3,LSL#4
ADD             R1, R7, R1
LDR             R1, [R1,#8]
LDR             R3, [R3,#8]
CMP             R1, R3
BEQ             loc_4D770

loc_4D4F0
LDR             R3, [SP,#0x6C+var_60]
MOV             R4, #0
LDR             R8, =sub_4D18C
ADD             R10, SP, #0x6C+var_14
MOV             R9, R3,LSL#4

loc_4D504
LDR             R0, [R10,R4,LSL#2]
ADD             R3, SP, #0x6C+var_C
LDR             R1, [R11,R4,LSL#2]
ADD             R0, R0, R9
STR             R0, [R3,R4,LSL#2]
LDR             R3, [SP,#0x6C+var_60]
SUB             R1, R1, R3
ADD             R3, SP, #0x6C+var_1C
SUB             R1, R1, R5 ; nmemb
STR             R1, [R3,R4,LSL#2]
MOV             R3, #0

loc_4D530
CMP             R1, R3
BGE             loc_4D780
MOV             R2, #0x10 ; size
MOV             R3, R8  ; compar
ADD             R0, R0, R2 ; base
BL              qsort
CMP             R4, #1
BNE             loc_4D778
LDR             R3, [SP,#0x6C+var_1C]
MOV             R2, R4
LDR             R8, [SP,#0x6C+var_C]
MOV             LR, #0
LDR             R0, [SP,#0x6C+var_8]
LDR             R1, [SP,#0x6C+var_18]
STR             R3, [SP,#0x6C+var_5C]
MOV             R3, R4

loc_4D570
LDR             R12, [SP,#0x6C+var_5C]
CMP             R12, R3
CMPGE           R1, R2
MOVGE           R12, #1
MOVLT           R12, #0
BGE             loc_4D78C

loc_4D588
LDR             R2, [SP,#0x6C+var_5C]
CMP             R2, R3
BGE             loc_4D7BC
ADD             R3, R0, R1,LSL#4
STR             R12, [R3,#0x18]
MOV             R3, #0

loc_4D5A0
ADD             R3, R3, #1
CMP             R1, R3
ADD             R2, R6, R3,LSL#2
BGE             loc_4D7CC
MOV             R3, #0xFFFFFFFF
ADD             R1, R1, #2
STR             R3, [R2]
MOV             R1, R1,LSL#2
MOV             R0, R6
BL              sub_174B4
LDR             R3, [SP,#0x6C+var_5C]
ADD             R8, R8, #0x10
STR             R0, [SP,#0x6C+var_44]
ADD             R6, R3, #1
MOV             R6, R6,LSL#2
MOV             R0, R6
BL              sub_1748C
MOV             R3, #1

loc_4D5E8
LDR             R2, [SP,#0x6C+var_5C]
ADD             R8, R8, #0x10
CMP             R2, R3
BGE             loc_4D80C
MOV             R3, #1

loc_4D5FC
LDR             R2, [SP,#0x6C+var_5C]
CMP             R2, R3
BGE             loc_4D820
ADD             R8, R6, #4
BL              free
MOV             R1, R8
MOV             R0, R7
BL              sub_174B4
STR             R0, [SP,#0x6C+ptr]
LDR             R0, [R11]
ADD             R0, R0, #2
MOV             R0, R0,LSL#2
BL              sub_1748C
LDR             R2, [R11]
MOV             R7, R0
LDR             R1, [R11,#4]
MOV             R3, #0
SUB             R5, R2, R5
SUB             R1, R1, R2

loc_4D648
CMP             R2, R3
BGE             loc_4D830
LDR             R0, [SP,#0x6C+var_5C]
MOV             R1, R0,ASR#31
BL              sub_5A898
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #4
MOVNE           R3, #0xFFFFFFFF
BNE             loc_4D67C
CMP             R0, #0x100
MOVCS           R3, R0
MOVCC           R3, #0x100

loc_4D67C
MOV             R0, #0x4B0
STR             R3, [SP,#0x6C+var_2C]
BL              sub_174DC
MOV             R6, R0
MOV             R0, R8
BL              sub_174DC
MOV             R3, #0
MOV             R10, R0
MOV             R2, #0xC
MOV             R9, #1
STR             R3, [SP,#0x6C+var_54]
MOV             R3, #0x64 ; 'd'
STR             R9, [SP,#0x6C+var_50]
STR             R3, [SP,#0x6C+var_40]

loc_4D6B4
LDR             R3, [SP,#0x6C+var_54]
LDR             R1, [SP,#0x6C+var_50]
ADD             R3, R10, R3,LSL#2
STR             R3, [SP,#0x6C+var_24]
LDR             R3, [SP,#0x6C+var_5C]
CMP             R3, R1
BGE             loc_4D858
LDR             R3, [SP,#0x6C+var_24]
MOV             R2, #0xC
LDR             R3, [R3]

loc_4D6DC
MLA             R3, R2, R3, R6
LDR             R5, [R3,#4]
CMP             R5, #0
BNE             loc_4DA34
MOV             R0, R10 ; ptr
BL              free
MOV             R0, R6  ; ptr
BL              free
LDR             R3, [R11]
LDR             R2, [R11,#4]
LDR             R0, [SP,#0x6C+ptr] ; ptr
ADD             R3, R3, #1
ADD             R2, R2, #1
STR             R2, [R7,R3,LSL#2]
BL              free
LDR             R0, [SP,#0x6C+var_44] ; ptr
BL              free

loc_4D720
LDR             R3, [R11]
CMP             R3, R4
BGE             loc_4DA50
MOV             R0, R7
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R11,PC}

loc_4D738
MOV             R12, R2,LSL#4
ADD             R2, R2, #1
LDRD            R8, R9, [R3,R12]
STRD            R8, R9, [R0,#8]!
B               loc_4D454

loc_4D74C
LDR             R0, [R7,R3]
ADD             R3, R3, #0x10
ADD             R1, R6, R3
LDR             R1, [R1,#-0x10]
CMP             R0, R1
BNE             loc_4D4A0
LDR             R1, [SP,#0x6C+var_60]
ADD             R1, R1, #1
B               loc_4D480

loc_4D770
ADD             R5, R5, #1
B               loc_4D4B4

loc_4D778
MOV             R4, #1
B               loc_4D504

loc_4D780
STR             R3, [R0,R3,LSL#4]
ADD             R3, R3, #1
B               loc_4D530

loc_4D78C
ADD             R12, R8, R3,LSL#4
ADD             R9, R0, R2,LSL#4
LDR             R10, [R12,#8]
LDR             R9, [R9,#8]
CMP             R10, R9
ADDCC           R3, R3, #1
STRCC           LR, [R12,#8]
BCC             loc_4D570
ADDEQ           R3, R3, #1
STREQ           R2, [R12,#8]
ADDNE           R2, R2, #1
B               loc_4D570

loc_4D7BC
ADD             R3, R3, #1
ADD             R2, R8, R3,LSL#4
STR             R12, [R2,#-8]
B               loc_4D588

loc_4D7CC
LDR             R2, [R0,R3,LSL#4]
RSB             R2, R2, #0
STR             R2, [R6,R3,LSL#2]
ADD             R2, R0, R3,LSL#4
SUB             R2, R2, #0x10

loc_4D7E0
MOV             R12, R2
LDR             R9, [R2,#0x28]
LDR             R12, [R12,#0x18]
ADD             LR, R3, #1
ADD             R2, R2, #0x10
CMP             R9, R12
BNE             loc_4D5A0
LDR             R3, [R2,#0x10]
STR             R3, [R6,LR,LSL#2]
MOV             R3, LR
B               loc_4D7E0

loc_4D80C
LDR             R2, [R8,#-0x10]
ADD             R3, R3, #1
LDR             R1, [R8,#-8]
STR             R1, [R0,R2,LSL#2]
B               loc_4D5E8

loc_4D820
LDR             R2, [R0,R3,LSL#2]
STR             R2, [R7,R3,LSL#2]
ADD             R3, R3, #1
B               loc_4D5FC

loc_4D830
LDR             R0, [SP,#0x6C+var_60]
CMP             R0, R3
MOVGE           R0, R3
BGE             loc_4D84C
CMP             R5, R3
ADDLT           R0, R1, R3
MOVGE           R0, #0

loc_4D84C
STR             R0, [R7,R3,LSL#2]
ADD             R3, R3, #1
B               loc_4D648

loc_4D858
LDR             R3, [SP,#0x6C+ptr]
LDR             R1, [SP,#0x6C+var_50]
LDR             R3, [R3,R1,LSL#2]
CMP             R3, #0
BEQ             loc_4DA0C
LDR             R1, [SP,#0x6C+var_44]
LDR             R8, [R1,R3,LSL#2]
LDR             R1, [R10]
RSB             R8, R8, #0
STR             R1, [SP,#0x6C+var_48]
LDR             R1, [SP,#0x6C+var_44]
ADD             R3, R1, R3,LSL#2
STR             R3, [SP,#0x6C+var_28]
MOV             R3, #0
STR             R3, [SP,#0x6C+var_3C]
MOV             R0, R3
LDR             R3, [SP,#0x6C+var_54]
ADD             R3, R3, #1
STR             R3, [SP,#0x6C+var_34]

loc_4D8A4
LDR             R1, [SP,#0x6C+var_48]
LDR             R3, [SP,#0x6C+var_24]
MLA             R1, R2, R1, R6
LDR             R3, [R3]
LDR             R1, [R1,#4]
MLA             R3, R2, R3, R6
CMP             R1, R8
LDR             R3, [R3,#4]
BGE             loc_4D9DC
CMP             R8, R3
LDRLE           R12, [SP,#0x6C+var_34]
MOVLE           R3, #0
BLE             loc_4D8E4
LDR             R5, [SP,#0x6C+var_34]
B               loc_4D910

loc_4D8E0
MOV             R12, R5

loc_4D8E4
ADD             R5, R12, R3
MOV             R5, R5,ASR#1
CMP             R5, R3
BLE             loc_4DA1C
LDR             R1, [R10,R5,LSL#2]
MLA             R1, R2, R1, R6
LDR             R1, [R1,#4]
CMP             R8, R1
BLT             loc_4D8E0
MOV             R3, R5
BGT             loc_4D8E4

loc_4D910
ADD             R3, R0, #1
LDR             R1, [SP,#0x6C+var_54]
CMP             R3, R5
SUBNE           R3, R5, #0xC0000001
LDRNE           R3, [R10,R3,LSL#2]
STRNE           R3, [SP,#0x6C+var_48]
MOV             R3, R5,LSL#2
CMP             R1, R5
STR             R3, [SP,#0x6C+var_20]
LDR             R3, [R10,R5,LSL#2]
BLT             loc_4D94C
MLA             R1, R2, R3, R6
LDR             R1, [R1,#4]
CMP             R8, R1
BGE             loc_4D9DC

loc_4D94C
LDR             R1, [SP,#0x6C+var_40]
CMP             R9, R1
BNE             loc_4D990
MOV             R12, #0xB
STR             R3, [SP,#0x6C+var_20]
MUL             R12, R12, R9
LDR             R3, =0x66666667
SMULL           R0, R1, R12, R3
MOV             R12, R12,ASR#31
MOV             R0, R6
RSB             R3, R12, R1,ASR#2
MUL             R1, R2, R3
STR             R3, [SP,#0x6C+var_40]
BL              sub_174B4
LDR             R3, [SP,#0x6C+var_20]
MOV             R6, R0
MOV             R2, #0xC

loc_4D990
MUL             R0, R2, R9
LDR             R12, [SP,#0x6C+var_50]
ADD             R1, R6, R0
STR             R12, [R6,R0]
LDR             R0, [SP,#0x6C+var_48]
STR             R8, [R1,#4]
STR             R0, [R1,#8]
MOV             R0, R5,LSL#2
ADD             R1, R9, #1
STR             R9, [R10,R0]
LDR             R0, [SP,#0x6C+var_54]
CMP             R0, R5
BLT             loc_4DA24
LDR             R0, [SP,#0x6C+var_3C]
MOV             R9, R1
STR             R3, [SP,#0x6C+var_48]
ADD             R0, R0, #1
STR             R0, [SP,#0x6C+var_3C]
MOV             R0, R5

loc_4D9DC
LDR             R3, [SP,#0x6C+var_28]
LDR             R1, [SP,#0x6C+var_3C]
LDR             R8, [R3,#4]!
STR             R3, [SP,#0x6C+var_28]
LDR             R3, [SP,#0x6C+var_2C]
CMP             R1, R3
MOVCS           R3, #0
MOVCC           R3, #1
CMP             R8, #0
MOVLE           R3, #0
CMP             R3, #0
BNE             loc_4D8A4

loc_4DA0C
LDR             R3, [SP,#0x6C+var_50]
ADD             R3, R3, #1
STR             R3, [SP,#0x6C+var_50]
B               loc_4D6B4

loc_4DA1C
ADD             R5, R5, #1
B               loc_4D910

loc_4DA24
LDR             R3, [SP,#0x6C+var_34]
MOV             R9, R1
STR             R3, [SP,#0x6C+var_54]
B               loc_4DA0C

loc_4DA34
LDR             R1, [R3]
LDR             R0, [SP,#0x6C+var_60]
ADD             R1, R0, R1
ADD             R5, R0, R5
STR             R5, [R7,R1,LSL#2]
LDR             R3, [R3,#8]
B               loc_4D6DC

loc_4DA50
LDR             R3, [R7,R4,LSL#2]
CMP             R3, #0
BEQ             loc_4DABC
LDR             R3, [SP,#0x6C+var_38]
LDR             R0, [SP,#0x6C+var_4C]
LDR             R3, [R3]
ADD             R3, R3, R4,LSL#3
LDRD            R2, R3, [R3,#-8]
BL              sub_4D1AC
LDR             R3, [SP,#0x6C+var_4C]
LDR             R2, [R7,R4,LSL#2]
ADD             R8, R3, #0x10
LDR             R3, [SP,#0x6C+var_38]
MOV             R0, R8
LDR             R3, [R3,#4]
ADD             R3, R3, R2,LSL#3
LDRD            R2, R3, [R3,#-8]
BL              sub_4D1AC
LDR             R10, [R7,R4,LSL#2]
SUB             R10, R10, R4

loc_4DAA0
LDR             R2, [R11]
ADD             R3, R10, R4
CMP             R2, R4
BLT             loc_4DABC
LDR             R2, [R7,R4,LSL#2]
CMP             R2, R3
BEQ             loc_4DAC4

loc_4DABC
ADD             R4, R4, #1
B               loc_4D720

loc_4DAC4
MOV             R6, #0
MOV             R9, R6

loc_4DACC
MOV             R1, R9
LDR             R0, [SP,#0x6C+var_4C]
BL              sub_4D1E4
MOV             R1, R6
MOV             R9, R0
MOV             R0, R8
BL              sub_4D1E4
EOR             R3, R9, R0
MOV             R6, R0
TST             R3, #0x200
BNE             loc_4DB0C
TST             R9, #0x200
BNE             loc_4DB10
UBFX            R3, R3, #0, #9
CMP             R3, #0
BEQ             loc_4DB10

loc_4DB0C
STR             R5, [R7,R4,LSL#2]

loc_4DB10
AND             R3, R9, R6
TST             R3, #0x200
BEQ             loc_4DACC
ADD             R4, R4, #1
B               loc_4DAA0
; End of function sub_4D2B8

off_4DB24 DCD sub_4D18C
off_4DB28 DCD dword_7DBC0
dword_4DB2C DCD 0x66666667



; int __fastcall sub_4DB30(int result, int, int, int, int)
sub_4DB30

var_14= -0x14
var_8= -8
arg_0=  0x24

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
SUB             R4, R2, #0xE0000001
LDR             R11, [SP,#0x14+arg_0]
ADD             R4, R1, R4,LSL#3
MOV             R5, R0
LDR             R9, =dword_7DBC0
MOV             R8, R2
STR             R3, [SP,#0x14+var_8]

loc_4DB54
LDR             R3, [SP,#0x14+var_8]
CMP             R8, R3
BLE             loc_4DB68
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_4DB68
LDRD            R2, R3, [R4]
MOV             R0, R5
BL              sub_4D1AC
MOV             R0, R11 ; c
BL              putchar_unlocked
LDR             R3, [R9]
TST             R3, #0x800
BEQ             loc_4DB90
MOV             R0, #9  ; c
BL              putchar_unlocked

loc_4DB90
MOV             R6, #0
MOV             R7, #0
MOV             R10, #0

loc_4DB9C
LDR             R2, [R4]
LDR             R1, [R4,#8]
LDR             R12, [R4,#0xC]
LDR             R0, [R4,#4]
SUBS            R3, R1, R2
STR             R3, [SP,#0x14+var_14]
SBC             R3, R12, R0
STR             R3, [SP,#0x14+var_14+4]
LDRD            R2, R3, [SP,#0x14+var_14]
CMP             R6, R2
SBCS            R3, R7, R3
ADDGE           R8, R8, #1
ADDGE           R4, R4, #8
BGE             loc_4DB54
LDR             R0, [R5] ; stream
BL              getc_unlocked
CMN             R0, #1
BNE             loc_4DBF4
LDR             R0, =aNoNewlineAtEnd ; "\n\\ No newline at end of file"
ADD             SP, SP, #0x14
POP             {R4-R11,LR}
B               puts

loc_4DBF4
LDR             R2, [R5,#8]
LDR             R1, [R5,#0xC]
ADDS            R2, R2, #1
ADC             R1, R1, #0
CMP             R0, #9
STR             R2, [R5,#8]
STR             R1, [R5,#0xC]
BNE             loc_4DC40
LDR             R2, [R9]
TST             R2, #0x400
BEQ             loc_4DC40

loc_4DC20               ; c
MOV             R0, #0x20 ; ' '
ADD             R10, R10, #1
BL              putchar_unlocked
TST             R10, #7
BNE             loc_4DC20

loc_4DC34
ADDS            R6, R6, #1
ADC             R7, R7, #0
B               loc_4DB9C

loc_4DC40
BL              putchar_unlocked
ADD             R10, R10, #1
B               loc_4DC34
; End of function sub_4DB30

off_4DC4C DCD dword_7DBC0
off_4DC50 DCD aNoNewlineAtEnd ; "\n\\ No newline at end of file"



; int __fastcall sub_4DC54(int, char **)
sub_4DC54

var_8C= -0x8C
var_84= -0x84
var_80= -0x80
var_7C= -0x7C
var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_54= -0x54
var_50= -0x50
stream= -0x4C
var_48= -0x48
var_44= -0x44
ptr= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_14= -0x14
var_4= -4

PUSH            {R4-R11,LR}
MOV             R3, #0
LDR             R5, =dword_7DB98
SUB             SP, SP, #0x8C
MOV             R0, #0xE8
MOV             R7, R1
STR             R3, [SP,#0x8C+var_5C]
STR             R3, [SP,#0x8C+var_58]
BL              sub_174DC
MOV             R6, R0
STR             R0, [R5]
MOV             R2, #3
MOV             R3, R0
STR             R2, [R3,#4]!
MOV             R0, R7
STR             R3, [SP,#0x8C+var_8C]
ADD             R2, SP, #0x8C+var_58
ADD             R3, SP, #0x8C+var_5C
LDR             R1, =aAbdilNqrssTtuW ; "^abdiL:*NqrsS:tTU:+wupBE"
BL              sub_593CC
LDR             R3, =optind
LDR             R9, [R3]
MOV             R9, R9,LSL#2

loc_4DCB0
LDR             R4, [SP,#0x8C+var_58]
CMP             R4, #0
BNE             loc_4DD58
LDR             R5, [R5]
ADD             R7, R7, R9
LDR             R10, =dword_7DBC0
ADD             R6, SP, #0x8C+var_58
LDR             R11, =aDevNull ; "/dev/null"
MOV             R9, #0x18
LDR             R8, =byte_7D5F8
MOV             R3, #2
STRB            R3, [R8]

loc_4DCE0
LDR             R0, [R7],#4
ADD             R3, R5, R9
LDRB            R2, [R0]
STR             R0, [R6,#4]!
CMP             R2, #0x2D ; '-'
BNE             loc_4DD7C
LDRB            R2, [R0,#1]
CMP             R2, #0
BNE             loc_4DD7C
ADD             R4, R4, #1
MOV             R1, R3
MOV             R0, R2
BLX             sub_62E08

loc_4DD14
ADD             R9, R9, #0x68 ; 'h'
CMP             R9, #0xE8
BNE             loc_4DCE0
LDR             R2, [R5,#0x28]
CMP             R4, #0
MOV             R3, #1
STRB            R3, [R8]
AND             R2, R2, #0xF000
BEQ             loc_4DDB0
CMP             R2, #0x4000
BEQ             loc_4DD50
LDR             R3, [R5,#0x90]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BNE             loc_4DDB0

loc_4DD50
LDR             R0, =aCanTCompareStd ; "can't compare stdin to a directory"

loc_4DD54
BL              sub_16DBC

loc_4DD58
LDR             R4, [R6,#0xC]
ADD             R0, SP, #0x8C+var_58
MOVS            R4, R4
MOVNE           R4, #1
ADD             R4, R4, #2
ADD             R4, R6, R4,LSL#2
BL              sub_5D2FC
STR             R0, [R4,#4]
B               loc_4DCB0

loc_4DD7C
LDR             R2, [R10]
MOV             R1, R3
TST             R2, #0x20
BEQ             loc_4DDA8
STR             R3, [SP,#0x8C+var_84]
BLX             sub_62DFC
CMP             R0, #0
LDR             R3, [SP,#0x8C+var_84]
BEQ             loc_4DD14
MOV             R1, R3
MOV             R0, R11

loc_4DDA8
BL              sub_17A0C
B               loc_4DD14

loc_4DDB0
LDR             R3, [R5,#0x90]
CMP             R2, #0x4000
AND             R3, R3, #0xF000
BNE             loc_4DDD0
CMP             R3, #0x4000
BNE             loc_4DF30
LDR             R0, =aNoSupportForDi ; "no support for directory comparison"
B               loc_4DD54

loc_4DDD0
CMP             R3, #0x4000
MOVEQ           R2, #1
MOVNE           R2, #0
STR             R2, [SP,#0x8C+var_7C]
MOVNE           R3, #0
BNE             loc_4DE54

loc_4DDE8
SUBS            R3, R3, #0x4000
ADD             R2, SP, #0x8C+var_4
MOVNE           R3, #1
MOV             R1, #0x2F ; '/' ; c
ADD             R3, R2, R3,LSL#2
LDR             R7, [R3,#-0x50]
MOV             R0, R7  ; s
BL              strrchr
LDR             R3, [SP,#0x8C+var_7C]
CMP             R0, #0
ADDNE           R7, R0, #1
MOV             R1, R7
MOV             R6, R3,LSL#2
ADD             R3, SP, #0x8C+var_4
ADD             R3, R3, R6
LDR             R3, [R3,#-0x50]
MOV             R0, R3
BL              sub_16998
ADD             R3, SP, #0x8C+var_4
MOV             R1, #0x68 ; 'h'
ADD             R6, R3, R6
LDR             R3, [SP,#0x8C+var_7C]
STR             R0, [R6,#-0x50]
MLA             R1, R1, R3, R5
ADD             R1, R1, #0x18
BL              sub_17A0C
MOV             R3, #1

loc_4DE54
CMP             R4, #1
STR             R3, [SP,#0x8C+var_70]
BGT             loc_4E528
LDR             R3, =stdin
MOV             R11, #0
LDR             R8, =dword_7DBC0
LDR             R9, =aDevNull ; "/dev/null"
LDR             R3, [R3]
STR             R3, [SP,#0x8C+stream]
STR             R3, [SP,#0x8C+var_48]

loc_4DE7C
ADD             R3, SP, #0x8C+var_54
LDR             R0, [R3,R11,LSL#2]
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BNE             loc_4DE9C
LDRB            R4, [R0,#1]
CMP             R4, #0
BEQ             loc_4DF68

loc_4DE9C
LDR             R1, [R8]
ANDS            R1, R1, #0x20 ; ' '
BNE             loc_4DF44
BL              sub_1760C
CMN             R0, #1
MOV             R4, R0
BNE             loc_4DF68

loc_4DEB8
MOV             R11, #0

loc_4DEBC
LDR             R0, [SP,#0x8C+stream]
BL              sub_5888C
LDR             R0, [SP,#0x8C+var_48]
BL              sub_5888C
SUB             R3, R11, #1
CMP             R3, #1
BHI             loc_4E528
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
UBFX            R3, R3, #6, #1
CMP             R11, #2
ORREQ           R3, R3, #1
CMP             R3, #0
BEQ             loc_4DF04
LDR             R2, [SP,#0x8C+var_50]
LDR             R1, [SP,#0x8C+var_54]
LDR             R0, =aFilesSAndSDiff ; "Files %s and %s differ\n"

loc_4DF00
BL              printf

loc_4DF04
LDR             R3, [SP,#0x8C+var_70]
CMP             R3, #0
BEQ             loc_4DF24
LDR             R2, [SP,#0x8C+var_7C]
ADD             R3, SP, #0x8C+var_4
ADD             R3, R3, R2,LSL#2
LDR             R0, [R3,#-0x50] ; ptr
BL              free

loc_4DF24
LDR             R0, [R5]
ADD             SP, SP, #0x8C
POP             {R4-R11,PC}

loc_4DF30
MOV             R2, #0
STR             R2, [SP,#0x8C+var_7C]
B               loc_4DDE8

loc_4DF3C
MOV             R11, #1
B               loc_4DE7C

loc_4DF44
MOV             R1, #0
BL              open64
CMN             R0, #1
MOV             R4, R0
BNE             loc_4DF68
MOV             R1, #0
MOV             R0, R9
BL              sub_175D8
MOV             R4, R0

loc_4DF68
MOV             R3, #0
MOV             R2, #0
STR             R3, [SP,#0x8C+var_8C]
MOV             R0, R4
MOV             R3, #0
BL              lseek64
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_4E04C
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x1D
BNE             loc_4E04C
LDR             R3, =aTmpDifxxxxxx ; "/tmp/difXXXXXX"
ADD             R2, SP, #0x8C+var_24
MOV             R6, R2
ADD             LR, R3, #8

loc_4DFB8
LDR             R0, [R3]
ADD             R3, R3, #8
LDR             R1, [R3,#-4]
CMP             R3, LR
MOV             R12, R2
STM             R12!, {R0,R1}
MOV             R2, R12
BNE             loc_4DFB8
LDRH            R1, [R3,#4]
LDR             R0, [R3]
LDRB            R3, [R3,#6]
STRH            R1, [R12,#4]
STR             R0, [R12]
MOV             R0, R6
STRB            R3, [R12,#6]
BL              sub_17778
MOV             R10, R0
MOV             R0, R6  ; name
BL              unlink
MOV             R1, R10
MOV             R0, R4
BL              sub_17FAC
CMP             R0, #0
SBCS            R3, R1, #0
BGE             loc_4E020
BL              sub_16E08

loc_4E020
CMP             R4, #0
BEQ             loc_4E030
MOV             R0, R4  ; fd
BL              close

loc_4E030
MOV             R3, #0
MOV             R4, R10
STR             R3, [SP,#0x8C+var_8C]
MOV             R2, #0
MOV             R3, #0
MOV             R0, R10
BL              sub_1771C

loc_4E04C
LDR             R1, =(aNTR+5) ; "r"
MOV             R0, R4  ; fd
BL              fdopen
CMP             R11, #1
ADD             R3, SP, #0x8C+stream
STR             R0, [R3,R11,LSL#2]
BNE             loc_4DF3C
MOV             R3, #0
MOV             R4, R3
STR             R3, [SP,#0x8C+var_84]

loc_4E074
LDR             R8, [SP,#0x8C+stream]
MOV             R2, #0x200 ; n
MOV             R1, #1  ; size
LDR             R0, =buf ; ptr
MOV             R3, R8  ; stream
BL              fread
LDR             R7, [SP,#0x8C+var_48]
MOV             R6, R0
MOV             R2, #0x200 ; n
MOV             R1, #1  ; size
LDR             R0, =dword_7D990 ; ptr
MOV             R3, R7  ; stream
BL              fread
CMP             R6, R0
BEQ             loc_4E0C0
CMP             R0, R6
MOV             R3, #1
MOVGE           R0, R6
STR             R3, [SP,#0x8C+var_84]

loc_4E0C0
CMP             R0, #0
BEQ             loc_4E118
LDR             R2, =buf
MOV             R3, R2

loc_4E0D0
SUB             R1, R3, R2
CMP             R0, R1
BLE             loc_4E074
LDRB            R12, [R3],#1
CMP             R12, #0
LDRB            R1, [R3,#0x1FF]
BEQ             loc_4E110
CMP             R1, #0
MOVEQ           R4, #1
STREQ           R4, [SP,#0x8C+var_84]
BEQ             loc_4E0D0

loc_4E0FC
LDR             LR, [SP,#0x8C+var_84]
CMP             R12, R1
MOVNE           LR, #1
STR             LR, [SP,#0x8C+var_84]
B               loc_4E0D0

loc_4E110
MOV             R4, #1
B               loc_4E0FC

loc_4E118
LDR             R3, [SP,#0x8C+var_84]
CMP             R3, #0
BEQ             loc_4DEB8
CMP             R4, #0
BEQ             loc_4E13C
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #1
BEQ             loc_4E520

loc_4E13C
MOV             R10, #0
STR             R8, [SP,#0x8C+var_24]
ADD             R2, SP, #0x8C+ptr
ADD             R1, SP, #0x8C+var_44
ADD             R0, SP, #0x8C+var_24
MOV             R8, R10
STR             R7, [SP,#0x8C+var_14]
BL              sub_4D2B8
MOV             R3, #1
STR             R0, [SP,#0x8C+var_78]
STR             R3, [SP,#0x8C+var_80]

loc_4E168
MOV             R9, #0
MOV             R6, #0xFFFFFFFF

loc_4E170
LDR             R3, [SP,#0x8C+var_80]
MOV             R12, #0
LDR             R2, [SP,#0x8C+var_78]
LDR             R0, [SP,#0x8C+var_44]
STR             R3, [SP,#0x8C+var_34]
ADD             R1, R2, R3,LSL#2

loc_4E188
LDR             R2, [R1,#-4]
CMP             R0, R3
MOV             LR, R1
ADD             R2, R2, #1
BGE             loc_4E2C8

loc_4E19C
LDR             R1, [SP,#0x8C+var_78]
CMP             R12, #0
SUB             R4, R3, #1
STRNE           R3, [SP,#0x8C+var_34]
STR             R2, [SP,#0x8C+var_2C]
STR             R4, [SP,#0x8C+var_30]
ADD             R12, R1, R3,LSL#2
MOV             R1, #0

loc_4E1BC
CMP             R0, R4
LDR             R7, [R12],#4
BGT             loc_4E2E8

loc_4E1C8
CMP             R1, #0
SUB             R7, R7, #1
STRNE           R4, [SP,#0x8C+var_30]
CMP             R7, R2
CMPLT           R4, R3
STR             R7, [SP,#0x8C+var_28]
BLT             loc_4E2A4
LDR             R1, [R5,#4]
CMN             R6, #1
MOV             R1, R1,LSL#1
ADD             R1, R1, #1
BEQ             loc_4E21C
ADD             R12, R8, R6,LSL#4
LDR             R0, [R12,#4]
ADD             R0, R1, R0
CMP             R0, R3
BGE             loc_4E21C
LDR             R3, [R12,#0xC]
ADD             R1, R1, R3
CMP             R1, R2
BLT             loc_4E368

loc_4E21C
MOV             R3, #0
ADD             R12, SP, #0x8C+ptr

loc_4E224
ADD             R2, SP, #0x8C+var_34
LDR             R2, [R2,R3,LSL#3]
STR             R2, [SP,#0x8C+var_80]
ADD             R2, SP, #0x8C+var_34
ADD             R2, R2, R3,LSL#3
LDR             R2, [R2,#4]
STR             R2, [SP,#0x8C+var_74]
LDR             R2, [SP,#0x8C+var_80]
MOV             R2, R2,LSL#3

loc_4E248
LDR             R1, [SP,#0x8C+var_74]
LDR             R0, [SP,#0x8C+var_80]
CMP             R0, R1
BLE             loc_4E308
CMP             R3, #1
BNE             loc_4E300
ADD             R6, R6, #1
MOV             R0, R8
MOV             R2, R6
MOVW            R1, #0x1006
BL              sub_62544
ADD             R2, R0, R6,LSL#4
MOV             R8, R0
ADD             R12, SP, #0x8C+var_34
ADD             LR, SP, #0x8C+var_24

loc_4E284
MOV             R3, R12
ADD             R2, R2, #8
LDM             R3!, {R0,R1}
CMP             R3, LR
STR             R0, [R2,#-8]
STR             R1, [R2,#-4]
MOV             R12, R3
BNE             loc_4E284

loc_4E2A4
ADD             R3, R4, #1
ADD             R2, R4, #1
STR             R3, [SP,#0x8C+var_80]
LDR             R3, [SP,#0x8C+var_44]
CMP             R2, R3
BGT             loc_4E360
LDR             R3, [SP,#0x8C+var_78]
STR             R7, [R3,R4,LSL#2]
B               loc_4E170

loc_4E2C8
LDR             LR, [LR]
ADD             R1, R1, #4
ADD             R4, R3, #1
CMP             LR, R2
BNE             loc_4E19C
MOV             R3, R4
LDR             R12, [SP,#0x8C+var_84]
B               loc_4E188

loc_4E2E8
CMP             R7, #0
ADD             LR, R4, #1
BNE             loc_4E1C8
MOV             R4, LR
LDR             R1, [SP,#0x8C+var_84]
B               loc_4E1BC

loc_4E300
MOV             R3, #1
B               loc_4E224

loc_4E308
LDR             R0, [R12,R3,LSL#2]
LDR             R1, [R0,R2]
ADD             LR, R0, R2
ADD             R2, R2, #8
STR             R1, [SP,#0x8C+var_64]
LDR             R1, [LR,#4]
LDMDB           LR, {R0,LR}
STR             R1, [SP,#0x8C+var_60]
LDR             R1, [SP,#0x8C+var_64]
SUBS            R1, R1, R0
STR             R1, [SP,#0x8C+var_6C]
LDR             R1, [SP,#0x8C+var_60]
SBC             R1, R1, LR
STR             R1, [SP,#0x8C+var_6C+4]
LDRD            R0, R1, [SP,#0x8C+var_6C]
CMP             R1, #0
LDR             R1, [SP,#0x8C+var_80]
CMPEQ           R0, #1
ORRNE           R9, R9, #1
ADD             R1, R1, #1
STR             R1, [SP,#0x8C+var_80]
B               loc_4E248

loc_4E360
CMN             R6, #1
BEQ             loc_4E4D8

loc_4E368
LDR             R3, =dword_7DBC0
LDR             R2, [R3]
EOR             R3, R2, #0x10000
UBFX            R3, R3, #0x10, #1
ORRS            R3, R9, R3
STR             R3, [SP,#0x8C+var_74]
BEQ             loc_4E4D8
TST             R2, #0x40
BNE             loc_4E4D4
CMP             R10, #0
BNE             loc_4E3BC
LDR             R1, [R5,#0xC]
LDR             R0, =aS_15 ; "--- %s\n"
CMP             R1, #0
LDREQ           R1, [SP,#0x8C+var_54]
BL              printf
LDR             R1, [R5,#0x10]
LDR             R0, =aS_16 ; "+++ %s\n"
CMP             R1, #0
LDREQ           R1, [SP,#0x8C+var_50]
BL              printf

loc_4E3BC
ADD             R6, R8, R6,LSL#4
MOV             R9, #0
MOV             R10, #4
LDR             R0, =(asc_6AD83+1) ; format
BL              printf

loc_4E3D0
LDR             R4, [R5,#4]
ADD             R2, SP, #0x8C+var_44
LDR             R1, [R6,R10]
ADD             R3, SP, #0x8C+var_34
LDR             R7, [R8,R9,LSL#3]
LDR             R0, =aCD_0 ; " %c%d"
SUB             R7, R7, R4
ADD             R4, R4, R1
LDR             R1, [R2,R9,LSL#2]
CMP             R7, #1
MOVLT           R7, #1
STR             R7, [R3,R9,LSL#3]
CMP             R4, R1
MOVGE           R4, R1
CMP             R9, #0
MOVEQ           R1, #0x2D ; '-'
MOVNE           R1, #0x2B ; '+'
CMP             R7, R4
STR             R4, [R3,R10]
MOVLT           R2, R7
MOVGE           R2, R4
BL              printf
CMP             R7, R4
BEQ             loc_4E444
SUBLT           R4, R4, R7
MOVGE           R1, #0
ADDLT           R1, R4, #1
LDR             R0, =aD_3 ; ",%d"
BL              printf

loc_4E444
CMP             R9, #1
ADD             R10, R10, #8
BNE             loc_4E4CC
LDR             R0, =asc_6AD83 ; " @@"
MOV             R4, R8
BL              puts
LDR             R2, [SP,#0x8C+var_34]
MOV             R9, #0x20 ; ' '
MOV             R7, #0x2D ; '-'

loc_4E468
CMP             R6, R4
LDR             R1, [SP,#0x8C+ptr]
LDRCS           R3, [R4]
ADD             R0, SP, #0x8C+var_24
LDRCC           R3, [SP,#0x8C+var_30]
STR             R9, [SP,#0x8C+var_8C]
SUBCS           R3, R3, #1
BL              sub_4DB30
CMP             R6, R4
BCC             loc_4E4D4
STR             R7, [SP,#0x8C+var_8C]
ADD             R0, SP, #0x8C+var_24
LDRD            R2, R3, [R4]
ADD             R4, R4, #0x10
LDR             R1, [SP,#0x8C+ptr]
BL              sub_4DB30
MOV             R3, #0x2B ; '+'
LDR             R1, [SP,#0x8C+var_38]
STR             R3, [SP,#0x8C+var_8C]
ADD             R0, SP, #0x8C+var_14
LDRD            R2, R3, [R4,#-8]
BL              sub_4DB30
LDR             R2, [R4,#-0xC]
ADD             R2, R2, #1
B               loc_4E468

loc_4E4CC
MOV             R9, #1
B               loc_4E3D0

loc_4E4D4
LDR             R10, [SP,#0x8C+var_74]

loc_4E4D8
LDR             R3, [SP,#0x8C+var_44]
LDR             R2, [SP,#0x8C+var_80]
CMP             R3, R2
BGE             loc_4E168
MOV             R0, R8  ; ptr
BL              free
LDR             R0, [SP,#0x8C+ptr] ; ptr
BL              free
LDR             R0, [SP,#0x8C+var_38] ; ptr
BL              free
LDR             R0, [SP,#0x8C+var_78] ; ptr
BL              free
CMP             R10, #0
BEQ             loc_4DEB8

loc_4E510
LDR             R3, [R5]
ORR             R3, R3, #1
STR             R3, [R5]
B               loc_4DEBC

loc_4E520
MOV             R11, #2
B               loc_4E510

loc_4E528
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #0x100
BEQ             loc_4DF04
LDR             R2, [SP,#0x8C+var_50]
LDR             R1, [SP,#0x8C+var_54]
LDR             R0, =aFilesSAndSAreI ; "Files %s and %s are identical\n"
B               loc_4DF00
; End of function sub_4DC54

off_4E548 DCD dword_7DB98
off_4E54C DCD aAbdilNqrssTtuW ; "^abdiL:*NqrsS:tTU:+wupBE"
off_4E550 DCD optind
off_4E554 DCD dword_7DBC0
off_4E558 DCD aDevNull  ; "/dev/null"
off_4E55C DCD byte_7D5F8
off_4E560 DCD aCanTCompareStd ; "can't compare stdin to a directory"
off_4E564 DCD aNoSupportForDi ; "no support for directory comparison"
off_4E568 DCD stdin
off_4E56C DCD aFilesSAndSDiff ; "Files %s and %s differ\n"
off_4E570 DCD dword_7DB94
off_4E574 DCD aTmpDifxxxxxx ; "/tmp/difXXXXXX"
off_4E578 DCD aNTR+5    ; "r"
off_4E57C DCD buf
off_4E580 DCD dword_7D990
off_4E584 DCD aS_15     ; "--- %s\n"
off_4E588 DCD aS_16     ; "+++ %s\n"
off_4E58C DCD asc_6AD83+1 ; "@@"
off_4E590 DCD aCD_0     ; " %c%d"
off_4E594 DCD aD_3      ; ",%d"
off_4E598 DCD asc_6AD83 ; " @@"
off_4E59C DCD aFilesSAndSAreI ; "Files %s and %s are identical\n"



; _DWORD *__fastcall sub_4E5A0(int *, int)
sub_4E5A0
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, #0xC
MOV             R5, R1
BL              sub_1748C
LDR             R3, [R4]
STR             R5, [R0,#8]
CMP             R3, #0
LDRNE           R2, [R3,#4]
STRNE           R3, [R0]
STREQ           R0, [R0,#4]
STRNE           R2, [R0,#4]
STREQ           R0, [R0]
STRNE           R0, [R2]
STREQ           R0, [R4]
STRNE           R0, [R3,#4]
POP             {R4-R6,PC}
; End of function sub_4E5A0




; void __fastcall sub_4E5E4(void **)
sub_4E5E4
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
MOV             R4, R0
LDR             R2, [R0,#8]
LDR             R1, [R3]
LDR             R3, [R1,#0x24]
CMP             R3, #1
BLE             loc_4E62C
LDRB            R0, [R2]
CMP             R3, R0
BEQ             loc_4E62C
CMP             R3, #2
LDRNE           R0, [R1,#0x30]
MOVEQ           R0, R3
LDR             R1, =(aSS_2+3) ; "%s\n"
CMP             R3, #3
ADDGT           R2, R2, #1
BL              dprintf

loc_4E62C               ; ptr
LDR             R0, [R4,#8]
BL              free
MOV             R0, R4
POP             {R4,LR}
B               free
; End of function sub_4E5E4

off_4E640 DCD dword_7DB98
off_4E644 DCD aSS_2+3   ; "%s\n"



; void sub_4E648()
sub_4E648
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0x34]
CMP             R3, #0
BEQ             loc_4E6CC
LDRD            R0, R1, [R4,#0x2C]
CMN             R0, #1
BEQ             loc_4E678
BL              sub_17FAC
LDR             R0, [R4,#0x2C]
BL              sub_17700

loc_4E678
LDR             R0, [R4,#0x30]
BL              sub_17700
LDR             R0, [R4,#0x34]
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_4E6C4
BL              sub_174F8
MOV             R5, R0
BL              strlen
MOV             R3, #0
ADD             R0, R5, R0
STRB            R3, [R0,#-6]
MOV             R1, R5  ; new
LDR             R0, [R4,#0x34] ; old
BL              rename
MOV             R0, R5  ; ptr
BL              free
LDR             R0, [R4,#0x34] ; ptr
BL              free

loc_4E6C4
MOV             R3, #0
STR             R3, [R4,#0x34]

loc_4E6CC
MOV             R3, #0xFFFFFFFF
STR             R3, [R4,#0x2C]
STR             R3, [R4,#0x30]
POP             {R4-R6,PC}
; End of function sub_4E648

off_4E6DC DCD dword_7DB98



; void __fastcall sub_4E6E0(void **)
sub_4E6E0
PUSH            {R4-R6,LR}
MOV             R4, R0

loc_4E6E8
CMP             R4, #0
POPEQ           {R4-R6,PC}
LDR             R5, [R4]
MOV             R0, R4
BL              sub_4E5E4
CMP             R4, R5
POPEQ           {R4-R6,PC}
MOV             R4, R5
B               loc_4E6E8
; End of function sub_4E6E0




; void sub_4E70C()
sub_4E70C

var_C= -0xC

LDR             R3, =dword_7DB98
PUSH            {R0-R2,R4,R5,LR}
LDR             R4, [R3]
LDR             R3, [R4,#8]
CMP             R3, #0
BEQ             loc_4E7A0
LDR             R3, [R4,#0x14]
MOV             R0, #2
LDR             R1, =aHunkDFailedLdL ; "Hunk %d FAILED %ld/%ld.\n"
MOV             R5, #0
STR             R3, [SP,#0xC+var_C]
LDR             R2, [R4,#0x28]
LDR             R3, [R4,#0xC]
BL              dprintf
LDR             R0, [R4,#8]
MOV             R3, #1
STR             R3, [R4,#0x38]
MOV             R3, #2
STR             R3, [R4,#0x24]
LDR             R3, [R0,#4]
STR             R5, [R3]
BL              sub_4E6E0
STR             R5, [R4,#8]
LDR             R0, [R4,#0x2C] ; fd
BL              close
LDR             R0, [R4,#0x30] ; fd
BL              close
LDR             R0, [R4,#0x34] ; name
LDRB            R3, [R0]
CMP             R3, R5
BEQ             loc_4E794
BL              unlink
LDR             R0, [R4,#0x34] ; ptr
BL              free

loc_4E794
MOV             R3, #0
STR             R3, [R4,#0x34]
STR             R3, [R4,#0x24]

loc_4E7A0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_4E70C

off_4E7A8 DCD dword_7DB98
off_4E7AC DCD aHunkDFailedLdL ; "Hunk %d FAILED %ld/%ld.\n"



; int __fastcall sub_4E7B0(int, char **)
sub_4E7B0

var_A4= -0xA4
var_9C= -0x9C
var_98= -0x98
var_94= -0x94
var_90= -0x90
var_8C= -0x8C
var_88= -0x88
var_80= -0x80
s1= -0x7C
var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
mode= -0x5C
var_4= -4

PUSH            {R4-R11,LR}
MOV             R3, #0
LDR             R5, =dword_7DB98
SUB             SP, SP, #0xA4
MOV             R0, #0x3C ; '<'
MOV             R4, R1
STR             R3, [SP,#0xA4+var_80]
STR             R3, [SP,#0xA4+s1]
BL              sub_174DC
STR             R0, [R5]
ADD             R3, SP, #0xA4+var_74
LDR             R2, =aReverse ; "reverse"
STR             R3, [SP,#0xA4+var_A4]
MOV             R0, R4
ADD             R3, SP, #0xA4+var_78
LDR             R1, =aRupINefg ; "Rup:i:NEfg"
BL              sub_593F8
LDR             R3, =optind
AND             R8, R0, #1
STR             R0, [SP,#0xA4+var_9C]
ANDS            R0, R0, #4
LDR             R6, [R3]
ADD             R3, R4, R6,LSL#2
STR             R3, [SP,#0xA4+var_98]
BEQ             loc_4E81C
LDR             R0, [SP,#0xA4+var_78]
BL              sub_62178

loc_4E81C
LDR             R3, [R5]
MOV             R2, #0xFFFFFFFF
STR             R0, [R3,#4]
STR             R2, [R3,#0x30]
STR             R2, [R3,#0x2C]
LDR             R3, [SP,#0xA4+var_9C]
ANDS            R5, R3, #8
BEQ             loc_4EA3C
LDR             R0, [SP,#0xA4+var_74]
BL              sub_61D6C
MOV             R1, #0

loc_4E848
BL              sub_176A8

loc_4E84C
CMP             R8, #0
ADD             R3, SP, #0xA4+var_80
ADD             R2, SP, #0xA4+var_4
SUBNE           R3, R2, #0x78 ; 'x'
STR             R3, [SP,#0xA4+var_90]

loc_4E860
MOV             R6, #0

loc_4E864
LDR             R3, =stdin
LDR             R4, =dword_7DB98
LDR             R0, [R3]
BL              sub_58D24
SUBS            R5, R0, #0
BEQ             loc_4F068
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_4E898
BL              free
LDR             R0, =(asc_6582A+9) ; " "
BL              sub_174F8
MOV             R5, R0

loc_4E898
CMP             R6, #1
LDR             R4, [R4]
BLE             loc_4EBE0
LDRB            R3, [R5]
SUB             R10, R3, #0x2B ; '+'
AND             R10, R10, #0xFD
CMP             R10, #0
CMPNE           R3, #0x20 ; ' '
BNE             loc_4EBD8
MOV             R1, R5
ADD             R0, R4, #8
BL              sub_4E5A0
LDRB            R3, [R5]
CMP             R3, #0x2B ; '+'
BEQ             loc_4E8E0
CMP             R3, #0x2D ; '-'
SUB             R9, R9, #1
BEQ             loc_4EA64

loc_4E8E0
CMP             R3, #0x20 ; ' '
CMPEQ           R6, #2
SUB             R7, R7, #1
BNE             loc_4EA64
LDR             R3, [R4,#0x20]
MOV             R6, #2
ADD             R3, R3, #1
STR             R3, [R4,#0x20]

loc_4E900
ORRS            R3, R9, R7
BNE             loc_4E864
STR             R3, [SP,#0xA4+var_6C]
LDR             R2, =dword_7DBC0
LDR             R5, [R4,#8]
LDR             R7, [R2]
LDR             R2, [R5,#4]
AND             R7, R7, #1
STR             R3, [R2]
MOV             R2, R5

loc_4E928
LDR             R1, [R2,#8]
LDR             R2, [R2]
LDRB            R1, [R1]
CMP             R1, #0x20 ; ' '
ADDEQ           R3, R3, #1
MOVNE           R3, #0
CMP             R2, #0
BNE             loc_4E928
CMP             R3, #0
MOVEQ           R3, #1
BEQ             loc_4E964
LDR             R2, [R4,#0x20]
CMP             R2, R3
MOVLE           R3, #0
MOVGT           R3, #1

loc_4E964
CMP             R7, #0
STR             R3, [SP,#0xA4+var_94]
LDRNE           R6, [R4,#0x10]
LDREQ           R6, [R4,#0x18]
MOVS            R6, R6
MOVNE           R6, #1
CMP             R6, #0
BEQ             loc_4EBAC
LDR             R10, =dword_7DBC0
MOV             R6, #0
MOV             R9, R6

loc_4E990
MOV             R1, #0
LDR             R0, [R4,#0x2C]
BL              sub_60388
LDR             R3, [R10]
MOV             R2, R0
LDR             R11, [R4,#0x1C]
AND             R3, R3, #0x10
ADD             R11, R11, #1
STR             R11, [R4,#0x1C]

loc_4E9B4
CMP             R5, #0
BEQ             loc_4E9D4
LDR             R1, [R5,#8]
LDR             R0, =asc_6AED1 ; "+-"
LDRB            R12, [R1]
LDRB            R0, [R0,R7]
CMP             R12, R0
BEQ             loc_4EA6C

loc_4E9D4
CMP             R2, #0
BNE             loc_4EAB4
LDR             R3, [SP,#0xA4+var_94]
CMP             R5, #0
MOVNE           R3, #0
CMP             R3, #0
BNE             loc_4EBAC
CMP             R9, #0
BEQ             loc_4EA0C
MOV             R3, R11
LDR             R2, [R4,#0x28]
LDR             R1, =aPossiblyRevers ; "Possibly reversed hunk %d at %ld\n"
MOV             R0, #2
BL              dprintf

loc_4EA0C
BL              sub_4E70C

loc_4EA10
LDR             R0, [SP,#0xA4+var_6C]
CMP             R0, #0
BEQ             loc_4EA2C
LDR             R3, [R0,#4]
MOV             R2, #0
STR             R2, [R3]
BL              sub_4E6E0

loc_4EA2C
MOV             R7, #0
LDR             R6, [R4,#0x24]
MOV             R9, R7
B               loc_4E864

loc_4EA3C
LDR             R3, [R4,R6,LSL#2]
CMP             R3, #0
BEQ             loc_4E84C
LDR             R3, [SP,#0xA4+var_98]
LDR             R0, [R3,#4]
CMP             R0, #0
BEQ             loc_4E84C
BL              sub_61D6C
MOV             R1, R5
B               loc_4E848

loc_4EA64
MOV             R6, #3
B               loc_4E900

loc_4EA6C
CMP             R2, #0
BEQ             loc_4EAAC
MOV             R0, R2  ; s1
ADD             R1, R1, #1 ; s2
STR             R3, [SP,#0xA4+var_88]
STR             R2, [SP,#0xA4+var_8C]
BL              strcmp
ORRS            R3, R0, R9
LDRD            R2, R3, [SP,#0xA4+var_8C]
BNE             loc_4EAAC
CMP             R3, #0
EORNE           R7, R7, #1
MOVNE           R9, R11
MOVNE           R6, #1
BNE             loc_4E9B4
MOV             R9, R11

loc_4EAAC
LDR             R5, [R5]
B               loc_4E9B4

loc_4EAB4
MOV             R1, R2
ADD             R0, SP, #0xA4+var_6C
BL              sub_4E5A0
LDR             R2, [SP,#0xA4+var_94]
MOV             R3, R0
EOR             R11, R2, #1

loc_4EACC
CMP             R5, #0
BEQ             loc_4EB10
LDR             R2, [R5,#8]
LDR             R0, [R3,#8] ; s1
STR             R3, [SP,#0xA4+var_8C]
ADD             R1, R2, #1 ; s2
STR             R2, [SP,#0xA4+var_88]
BL              strcmp
LDR             R2, [SP,#0xA4+var_88]
LDR             R3, =asc_6AED1 ; "+-"
LDRB            R1, [R2]
LDRB            R2, [R3,R7]
LDR             R3, [SP,#0xA4+var_8C]
CMP             R1, R2
BEQ             loc_4EB5C
CMP             R0, #0
BEQ             loc_4EB80

loc_4EB10
LDR             R2, [SP,#0xA4+var_6C]
MOV             R3, #3
STR             R3, [R4,#0x24]
LDR             R3, [R2]
MOV             R0, R2
STR             R2, [SP,#0xA4+var_8C]
STR             R3, [SP,#0xA4+var_6C]
LDR             R1, [R2,#4]
STR             R3, [R1]
STR             R1, [R3,#4]
BL              sub_4E5E4
LDR             R3, [SP,#0xA4+var_6C]
LDR             R2, [SP,#0xA4+var_8C]
LDR             R5, [R4,#8]
CMP             R2, R3
BNE             loc_4EACC
MOV             R3, #0
STR             R3, [SP,#0xA4+var_6C]
B               loc_4E990

loc_4EB5C
ORRS            R2, R9, R0
BNE             loc_4EB78
LDR             R2, [R10]
LDR             R9, [R4,#0x1C]
TST             R2, #0x10
EORNE           R7, R7, #1
MOVNE           R6, #1

loc_4EB78
LDR             R5, [R5]
B               loc_4EACC

loc_4EB80
LDR             R5, [R5]
CMP             R5, #0
MOVEQ           R2, R11
MOVNE           R2, #0
CMP             R2, #0
BNE             loc_4EBAC
LDR             R3, [R3]
LDR             R2, [SP,#0xA4+var_6C]
CMP             R3, R2
BEQ             loc_4E990
B               loc_4EACC

loc_4EBAC
LDR             R3, =asc_6AED4 ; "-+"
EOR             R6, R6, R7
LDR             R0, [R4,#8]
LDRB            R3, [R3,R6]
STR             R3, [R4,#0x24]
BL              sub_4E6E0
MOV             R3, #0
STR             R3, [R4,#8]
MOV             R3, #1
STR             R3, [R4,#0x24]
B               loc_4EA10

loc_4EBD8
BL              sub_4E70C
B               loc_4E860

loc_4EBE0
LDR             R1, =asc_6AE71 ; "--- "
MOV             R0, R5
BL              sub_1684C
CMP             R0, #0
BEQ             loc_4EC94

loc_4EBF4
LDRB            R3, [R5]
CMP             R3, #0x2B ; '+'
LDRNE           R4, [SP,#0xA4+var_90]
BNE             loc_4EC18
CMP             R8, #0
MOVNE           R6, R8
ADDNE           R4, SP, #0xA4+var_80
ADDEQ           R4, SP, #0xA4+s1
MOVEQ           R6, #1

loc_4EC18
BL              sub_4E648
LDR             R3, [SP,#0xA4+var_98]
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_4EC88
LDR             R0, [R4] ; ptr
BL              free
ADD             R3, R5, #4
MOV             R10, R3

loc_4EC3C
LDRB            R2, [R10]
SUBS            R11, R2, #9
MOVNE           R11, #1
CMP             R2, #0
MOVEQ           R11, #0
CMP             R11, #0
BNE             loc_4ED78
MOV             R0, R10 ; nptr
STR             R3, [SP,#0xA4+var_94]
BL              atoi
LDR             R3, [SP,#0xA4+var_94]
SUB             R0, R0, #0x760
SUB             R0, R0, #0xD
CMP             R0, #0x45 ; 'E'
LDRLS           R0, =aDevNull ; "/dev/null"
MOVHI           R0, R3
STRBHI          R11, [R10]
BL              sub_174F8
STR             R0, [R4]

loc_4EC88               ; ptr
MOV             R0, R5
BL              free
B               loc_4E864

loc_4EC94
LDR             R1, =asc_6AE76 ; "+++ "
MOV             R0, R5
BL              sub_1684C
CMP             R0, #0
BNE             loc_4EBF4
CMP             R6, #1
BNE             loc_4EC88
LDR             R1, =asc_6AE7B ; "@@ -"
MOV             R0, R5
BL              sub_1684C
CMP             R0, #0
BEQ             loc_4EC88
ADD             R0, R5, #4 ; nptr
ADD             R7, SP, #0xA4+var_4
STR             R0, [R7,#-0x6C]!
MOV             R2, #0xA ; base
STR             R6, [R4,#0x18]
MOV             R1, R7  ; endptr
STR             R6, [R4,#0x10]
BL              strtol
STR             R0, [R4,#0xC]
LDR             R0, [SP,#0xA4+var_70]
LDRB            R3, [R0]
CMP             R3, #0x2C ; ','
MOVNE           R9, R6
BNE             loc_4ED14
MOV             R2, #0xA ; base
MOV             R1, R7  ; endptr
ADD             R0, R0, #1 ; nptr
BL              strtol
MOV             R9, R0
STR             R0, [R4,#0x10]

loc_4ED14
LDR             R0, [SP,#0xA4+var_70]
MOV             R1, R7  ; endptr
MOV             R2, #0xA ; base
ADD             R0, R0, #2 ; nptr
BL              strtol
STR             R0, [R4,#0x14]
LDR             R0, [SP,#0xA4+var_70]
LDRB            R3, [R0]
CMP             R3, #0x2C ; ','
MOVNE           R7, #1
BNE             loc_4ED58
MOV             R1, R7  ; endptr
MOV             R2, #0xA ; base
ADD             R0, R0, #1 ; nptr
BL              strtol
MOV             R7, R0
STR             R0, [R4,#0x18]

loc_4ED58
CMP             R9, #0
CMPLE           R7, #0
MOVLE           R3, #1
MOVGT           R3, #0
BGT             loc_4ED98
MOV             R1, R5
LDR             R0, =aReallyS ; "Really? %s"
BL              sub_16DBC

loc_4ED78
CMP             R2, #0x5C ; '\'
MOV             R1, R10
LDRB            R0, [R1,#1]!
BNE             loc_4ED90
CMP             R0, #0
MOVNE           R10, R1

loc_4ED90
ADD             R10, R10, #1
B               loc_4EC3C

loc_4ED98
STR             R3, [R4,#0x20]
LDR             R3, [SP,#0xA4+var_80]
CMP             R3, #0
BNE             loc_4EDB4
LDR             R0, =aMissingFilenam ; "MISSING_FILENAME"
BL              sub_174F8
STR             R0, [SP,#0xA4+var_80]

loc_4EDB4
LDR             R3, [SP,#0xA4+s1]
CMP             R3, #0
BNE             loc_4EDCC
LDR             R0, =aMissingFilenam ; "MISSING_FILENAME"
BL              sub_174F8
STR             R0, [SP,#0xA4+s1]

loc_4EDCC
LDR             R3, [R4,#0x2C]
CMN             R3, #1
BEQ             loc_4EDE0

loc_4EDD8
MOV             R6, #2
B               loc_4EE88

loc_4EDE0
CMP             R8, #0
LDR             R10, [R4,#0xC]
LDRNE           R11, [SP,#0xA4+var_80]
LDREQ           R11, [SP,#0xA4+s1]
LDR             R5, [R4,#0x14]
ADD             R10, R9, R10
LDR             R1, =aDevNull ; "/dev/null"
MOV             R0, R11 ; s1
BL              strcmp
CMP             R0, #0
ADD             R5, R7, R5
BEQ             loc_4EEB0
CMP             R8, #0
BEQ             loc_4EEA0
CMP             R10, #0
BEQ             loc_4EEB8

loc_4EE20
MOV             R6, #0

loc_4EE24
LDR             R3, =dword_7DBC0
STR             R11, [SP,#0xA4+var_70]
LDR             R0, [R3]
MOV             R3, #0
AND             R1, R0, #4

loc_4EE38
LDR             R2, [SP,#0xA4+var_70]
LDRB            R12, [R2]
CMP             R12, #0
BNE             loc_4EEC0

loc_4EE48
LDR             R2, [SP,#0xA4+var_98]
LDR             R5, [R2]
CMP             R5, #0
MOVEQ           R5, R11
CMP             R6, #0
BEQ             loc_4EF38
LDR             R3, [SP,#0xA4+var_9C]
TST             R0, #0x20
MOV             R1, R5
AND             R6, R3, #0x100
BEQ             loc_4EF14
LDR             R0, =aRemovingS ; "removing %s\n"
BL              printf
CMP             R6, #0
BEQ             loc_4EF08

loc_4EE84
MOV             R6, #0

loc_4EE88
LDR             R3, =dword_7DB98
LDR             R2, [R3]
LDR             R3, [R2,#0x28]
ADD             R3, R3, #1
STR             R3, [R2,#0x28]
B               loc_4E864

loc_4EEA0
CMP             R5, #0
BNE             loc_4EE20

loc_4EEA8
LDR             R11, [SP,#0xA4+var_80]
B               loc_4EE24

loc_4EEB0
CMP             R8, #0
BEQ             loc_4EEA8

loc_4EEB8
LDR             R11, [SP,#0xA4+s1]
B               loc_4EE24

loc_4EEC0
CMP             R1, #0
BEQ             loc_4EED4
LDR             R12, [R4,#4]
CMP             R12, R3
BEQ             loc_4EE48

loc_4EED4
ADD             R12, R2, #1
STR             R12, [SP,#0xA4+var_70]
LDRB            R2, [R2]
CMP             R2, #0x2F ; '/'
BNE             loc_4EE38

loc_4EEE8
LDR             R11, [SP,#0xA4+var_70]
LDRB            R2, [R11]
CMP             R2, #0x2F ; '/'
ADDNE           R3, R3, #1
BNE             loc_4EE38
ADD             R11, R11, #1
STR             R11, [SP,#0xA4+var_70]
B               loc_4EEE8

loc_4EF08
MOV             R0, R5
BL              sub_1761C
B               loc_4EE88

loc_4EF14
LDR             R0, =aPatchingFileS ; "patching file %s\n"
BL              printf
CMP             R6, #0
BNE             loc_4EE84
MOVW            R1, #0x201
MOV             R0, R5
BL              sub_175D8
BL              sub_17700
B               loc_4EE88

loc_4EF38
CMP             R1, #0
BEQ             loc_4EF4C
LDR             R2, [R4,#4]
CMP             R2, R3
BLT             loc_4EDD8

loc_4EF4C
LDR             R1, =aDevNull ; "/dev/null"
LDR             R0, [SP,#0xA4+var_80] ; s1
BL              strcmp
CLZ             R0, R0
CMP             R10, #0
MOV             R0, R0,LSR#5
LDR             R3, [SP,#0xA4+var_9C]
MOVEQ           R10, #1
MOVNE           R10, R0
MOV             R1, R5
CMP             R10, #0
AND             R6, R3, #0x100
BEQ             loc_4F044
LDR             R0, =aCreatingS ; "creating %s\n"
BL              printf
CMP             R6, #0
BNE             loc_4F018
MOV             R1, #0x2F ; '/' ; c
MOV             R0, R5  ; s
BL              strrchr
CMP             R0, #0
STR             R0, [SP,#0xA4+var_70]
BEQ             loc_4EFC8
STRB            R6, [R0]
MOV             R2, #4
MOV             R1, #0xFFFFFFFF
MOV             R0, R5  ; path
BL              sub_5D824
LDR             R3, [SP,#0xA4+var_70]
MOV             R2, #0x2F ; '/'
STRB            R2, [R3]

loc_4EFC8
MOV             R1, #0xC2
MOV             R0, R5
BL              sub_175D8
STR             R0, [R4,#0x2C]

loc_4EFD8
MOV             R1, R5
LDR             R0, =aSxxxxxx ; "%sXXXXXX"
BL              sub_177E4
STR             R0, [R4,#0x34]
BL              sub_17778
ADD             R1, SP, #0xA4+var_6C
STR             R0, [R4,#0x30]
LDR             R0, [R4,#0x2C]
BLX             sub_62E08
LDR             R1, [SP,#0xA4+mode] ; mode
LDR             R0, [R4,#0x30] ; fd
BL              fchmod

loc_4F008
MOV             R3, #0
STR             R3, [R4,#0x1C]
STR             R3, [R4,#0x28]
B               loc_4EDD8

loc_4F018
MOV             R1, #0
LDR             R0, =aDevNull ; "/dev/null"
BL              sub_175D8
STR             R0, [R4,#0x2C]

loc_4F028
LDR             R3, =(asc_6B39D+1) ; ""
MOV             R1, #1
LDR             R0, =aDevNull ; "/dev/null"
STR             R3, [R4,#0x34]
BL              sub_175D8
STR             R0, [R4,#0x30]
B               loc_4F008

loc_4F044
LDR             R0, =aPatchingFileS ; "patching file %s\n"
BL              printf
MOV             R1, R10
MOV             R0, R5
BL              sub_175D8
CMP             R6, #0
STR             R0, [R4,#0x2C]
BNE             loc_4F028
B               loc_4EFD8

loc_4F068
BL              sub_4E648
LDR             R3, [R4]
LDR             R0, [R3,#0x38]
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}
; End of function sub_4E7B0

off_4F07C DCD dword_7DB98
off_4F080 DCD aReverse  ; "reverse"
off_4F084 DCD aRupINefg ; "Rup:i:NEfg"
off_4F088 DCD optind
off_4F08C DCD stdin
off_4F090 DCD asc_6582A+9 ; " "
off_4F094 DCD dword_7DBC0
off_4F098 DCD asc_6AED1 ; "+-"
off_4F09C DCD aPossiblyRevers ; "Possibly reversed hunk %d at %ld\n"
off_4F0A0 DCD asc_6AED4 ; "-+"
off_4F0A4 DCD asc_6AE71 ; "--- "
off_4F0A8 DCD aDevNull  ; "/dev/null"
off_4F0AC DCD asc_6AE76 ; "+++ "
off_4F0B0 DCD asc_6AE7B ; "@@ -"
off_4F0B4 DCD aReallyS  ; "Really? %s"
off_4F0B8 DCD aMissingFilenam ; "MISSING_FILENAME"
off_4F0BC DCD aRemovingS ; "removing %s\n"
off_4F0C0 DCD aPatchingFileS ; "patching file %s\n"
off_4F0C4 DCD aCreatingS ; "creating %s\n"
off_4F0C8 DCD aSxxxxxx  ; "%sXXXXXX"
off_4F0CC DCD asc_6B39D+1 ; ""



; int __fastcall sub_4F0D0(int, int)
sub_4F0D0
MOV             R12, R1
SUBS            R1, R0, #0
PUSH            {R4,LR}
RSBLT           R1, R1, #0
MOVLT           R3, #0xFFFFFFFE
MOVGE           R3, #0xFFFFFFFF
MOV             R0, #0
SUB             R12, R12, #1
MOV             LR, R0
B               loc_4F134

loc_4F0F8
CMP             R3, #0
BLT             loc_4F148
CMP             R2, #0x5D ; ']'
BNE             loc_4F130
SUB             R2, R0, #1
CMP             R3, R2
BEQ             loc_4F130
SUB             R2, R0, #2
CMP             R3, R2
MOVNE           R3, #0xFFFFFFFF
BNE             loc_4F130
LDRB            R2, [R12,#-1]
CMP             R2, #0x5E ; '^'
MOVNE           R3, #0xFFFFFFFF

loc_4F130
ADD             R0, R0, #1

loc_4F134
LDRB            R2, [R12,#1]!
CMP             R2, #0
BNE             loc_4F0F8
LDR             R0, =aUnmatchedC ; "unmatched '%c'"
BL              sub_16DBC

loc_4F148
CMP             LR, #0
BNE             loc_4F170
CMP             R2, #0x5C ; '\'
BEQ             loc_4F178
CMP             R2, #0x5B ; '['
CMNEQ           R3, #1
BEQ             loc_4F180
CMP             R2, R1
POPEQ           {R4,PC}
B               loc_4F130

loc_4F170
MOV             LR, #0
B               loc_4F130

loc_4F178
MOV             LR, #1
B               loc_4F130

loc_4F180
MOV             R3, R0
B               loc_4F130
; End of function sub_4F0D0

off_4F188 DCD aUnmatchedC ; "unmatched '%c'"



; tcflag_t sub_4F18C()
sub_4F18C
LDR             R3, =buf
LDR             R0, [R3,#termios.c_lflag]
CMP             R0, #0
BXEQ            LR
B               unlink
; End of function sub_4F18C

off_4F1A0 DCD buf



; _BYTE *__fastcall sub_4F1A4(int, char *s, int, int, unsigned __int8)
sub_4F1A4

arg_0=  0x18

CMN             R2, #1
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, R1
MOV             R7, R3
LDRB            R6, [SP,#arg_0]
BNE             loc_4F1CC
MOV             R0, R1  ; s
BL              strlen
MOV             R2, R0

loc_4F1CC
MOV             R12, R4
MOV             LR, #0
B               loc_4F21C

loc_4F1D8
LDRB            R0, [R5,LR]
CMP             R0, #0x5C ; '\'
BNE             loc_4F23C
CMP             R6, #0
ADD             R3, R5, LR
LDRB            R1, [R3,#1]
BEQ             loc_4F200
CMP             R7, R1
BNE             loc_4F230
MOV             R1, R6

loc_4F200
CMP             R1, #0
STRB            R1, [R12]
BNE             loc_4F214

loc_4F20C
SUB             R0, R12, R4
POP             {R4-R8,PC}

loc_4F214
ADD             LR, LR, #2
ADD             R12, R12, #1

loc_4F21C
CMP             LR, R2
BLT             loc_4F1D8
MOV             R3, #0
STRB            R3, [R12]
B               loc_4F20C

loc_4F230
STRB            R0, [R12]
ADD             LR, LR, #1
ADD             R12, R12, #1

loc_4F23C
LDRB            R1, [R5,LR]
ADD             R3, LR, #1
CMP             R1, #0
STRB            R1, [R12]
BEQ             loc_4F20C
ADD             R12, R12, #1
MOV             LR, R3
B               loc_4F21C
; End of function sub_4F1A4




; char *__fastcall sub_4F25C(char *, _BYTE *)
sub_4F25C

var_C= -0xC

PUSH            {R0-R2,R4-R7,LR}
MOV             R7, R0
LDR             R4, =(aNTR+2) ; "\tt\rr"
ADD             R0, R1, #1
MOV             R6, R1
BL              sub_1748C
MOV             R5, R0

loc_4F278
ADD             R4, R4, #2
LDRB            R2, [R4,#-4]
CMP             R2, #0
BNE             loc_4F294
MOV             R0, R5
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_4F294               ; char
STR             R2, [SP,#0xC+var_C]
MOV             R1, R7  ; s
MOV             R2, R6  ; int
LDRB            R3, [R4,#-3] ; int
MOV             R0, R5  ; int
MOV             R7, R5
BL              sub_4F1A4
MOV             R6, R0
B               loc_4F278
; End of function sub_4F25C

off_4F2B8 DCD aNTR+2    ; "\tt\rr"



; char *__fastcall sub_4F2BC(int, char *, regex_t **)
sub_4F2BC

endptr= -4

PUSH            {R0,R1,R4-R8,LR}
MOV             R8, R2
LDRB            R3, [R0]
MOV             R4, R0
MOV             R5, R1
STR             R0, [SP,#8+endptr]
SUB             R2, R3, #0x30 ; '0'
CMP             R2, #9
BHI             loc_4F300
MOV             R2, #0xA ; base
ADD             R1, SP, #8+endptr ; endptr
BL              strtol
STR             R0, [R5]

loc_4F2F0
LDR             R0, [SP,#8+endptr]
SUB             R0, R0, R4
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_4F300
CMP             R3, #0x24 ; '$'
MOVEQ           R3, #0xFFFFFFFF
STREQ           R3, [R1]
ADDEQ           R3, R0, #1
STREQ           R3, [SP,#8+endptr]
BEQ             loc_4F2F0
CMP             R3, #0x5C ; '\'
CMPNE           R3, #0x2F ; '/'
BNE             loc_4F2F0
CMP             R3, #0x5C ; '\'
ADD             R2, R0, #1
STREQ           R2, [SP,#8+endptr]
MOVNE           R0, #0x2F ; '/'
LDR             R5, [SP,#8+endptr]
LDRBEQ          R0, [R0,#1]
LDR             R7, =buf
ADD             R5, R5, #1
MOV             R1, R5
STR             R5, [SP,#8+endptr]
BL              sub_4F0D0
SUBS            R6, R0, #0
BEQ             loc_4F3A4
MOV             R1, R6
MOV             R0, R5
BL              sub_4F25C
MOV             R5, R0
MOV             R0, #0x20 ; ' '
BL              sub_174DC
MOV             R1, R5
STR             R0, [R8]
STR             R0, [R7,#(dword_7D808 - 0x7D790)]
LDR             R2, [R7,#termios.c_oflag]
LDR             R0, [R8]
BL              sub_625E4
MOV             R0, R5  ; ptr
BL              free

loc_4F390
LDR             R3, [SP,#8+endptr]
ADD             R6, R6, #1
ADD             R6, R3, R6
STR             R6, [SP,#8+endptr]
B               loc_4F2F0

loc_4F3A4
LDR             R3, [R7,#(dword_7D808 - 0x7D790)]
STR             R3, [R8]
LDR             R3, [R7,#(dword_7D808 - 0x7D790)]
CMP             R3, #0
BNE             loc_4F390
LDR             R0, =aNoPreviousRege ; "no previous regexp"
BL              sub_16DBC
; End of function sub_4F2BC

off_4F3C0 DCD buf
off_4F3C4 DCD aNoPreviousRege ; "no previous regexp"



; _BYTE *__fastcall sub_4F3C8(_BYTE *, char **, char **)
sub_4F3C8
PUSH            {R4-R10,LR}
LDRB            R7, [R0]
CMP             R7, #0
BNE             loc_4F3E0
LDR             R0, =aBadFormatInSub ; "bad format in substitution expression"
BL              sub_16DBC

loc_4F3E0
ADD             R4, R0, #1
MOV             R6, R0
MOV             R9, R1
MOV             R0, R7
MOV             R1, R4
MOV             R8, R2
BL              sub_4F0D0
MOV             R5, R0
MOV             R1, R0
ADD             R5, R5, #1
MOV             R0, R4
ADD             R4, R4, R5
BL              sub_4F25C
MOV             R1, R4
STR             R0, [R9]
RSB             R0, R7, #0
BL              sub_4F0D0
MOV             R5, R0
MOV             R1, R0
MOV             R0, R4
BL              sub_4F25C
STR             R0, [R8]
SUB             R0, R4, R6
ADD             R0, R0, R5
POP             {R4-R10,PC}
; End of function sub_4F3C8

off_4F444 DCD aBadFormatInSub ; "bad format in substitution expression"



; unsigned __int8 *__fastcall sub_4F448(char *, void **)
sub_4F448
PUSH            {R4-R6,LR}
MOV             R12, R0
MOV             R5, R1
MOV             R2, R0

loc_4F458
MOV             R0, R2
SUB             R3, R2, R12
LDRB            R1, [R0]
ADD             R2, R2, #1
SUB             LR, R1, #9
CMP             R1, #0x20 ; ' '
CMPNE           LR, #4
BLS             loc_4F458
MOV             R4, R3

loc_4F47C
LDRB            R2, [R12,R4]
CMP             R2, #0
CMPNE           R2, #0xA
BNE             loc_4F4B0
CMP             R2, #0xA
SUB             R1, R4, R3
BEQ             loc_4F4C0
CMP             R4, R3
BEQ             loc_4F4B8
ADD             R1, R1, #1
BL              sub_1751C
STR             R0, [R5]
B               loc_4F4DC

loc_4F4B0
ADD             R4, R4, #1
B               loc_4F47C

loc_4F4B8
LDR             R0, =aEmptyFilename ; "empty filename"
BL              sub_16DBC

loc_4F4C0
CMP             R4, R3
BEQ             loc_4F4B8
ADD             R1, R1, #2
BL              sub_1751C
MOV             R3, #0x5C ; '\'
STR             R0, [R5]
STRB            R3, [R0,R4]

loc_4F4DC
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_4F448

off_4F4E4 DCD aEmptyFilename ; "empty filename"



; void __fastcall sub_4F4E8(char *s)
sub_4F4E8

var_14= -0x14
ptr= -0xC
endptr= -8

PUSH            {R4-R11,LR}
MOV             R4, R0
LDR             R6, =buf
SUB             SP, SP, #0x14
LDR             R1, [R6,#(dword_7D818 - 0x7D790)]
CMP             R1, #0
BEQ             loc_4F520
MOV             R2, R0
LDR             R0, =aSS_8 ; "%s\n%s"
BL              sub_177E4
MOV             R4, R0
LDR             R0, [R6,#(dword_7D818 - 0x7D790)] ; ptr
BL              free
STR             R4, [R6,#(dword_7D818 - 0x7D790)]

loc_4F520               ; s
MOV             R0, R4
BL              strlen
MOV             R5, R0
ADD             R2, R4, R0

loc_4F530
CMP             R4, R2
SUB             R3, R2, R4
BEQ             loc_4F5A4
LDRB            R1, [R2,#-1]!
CMP             R1, #0x5C ; '\'
BEQ             loc_4F530

loc_4F548
SUB             R3, R5, R3
TST             R3, #1
BNE             loc_4F5AC
LDR             R8, =asc_6B090 ; "; \n\r\t\v"
LDR             R10, =asc_6AEEE ; "\n\r"

loc_4F55C
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_4F584
MOV             R1, R8  ; accept
MOV             R0, R4  ; s
BL              strspn
LDRB            R3, [R4,R0]
ADD             R7, R4, R0
CMP             R3, #0
BNE             loc_4F5DC

loc_4F584               ; ptr
LDR             R0, [R6,#(dword_7D818 - 0x7D790)]
BL              free
MOV             R3, #0
STRB            R3, [R6,#(dword_7D818 - 0x7D790)]
STRB            R3, [R6,#(dword_7D818+1 - 0x7D790)]
STRB            R3, [R6,#(dword_7D818+2 - 0x7D790)]
STRB            R3, [R6,#(dword_7D818+3 - 0x7D790)]
B               loc_4F5D4

loc_4F5A4
MOV             R3, #0
B               loc_4F548

loc_4F5AC
LDR             R3, [R6,#(dword_7D818 - 0x7D790)]
CMP             R3, #0
BNE             loc_4F5C4
MOV             R0, R4
BL              sub_174F8
STR             R0, [R6,#(dword_7D818 - 0x7D790)]

loc_4F5C4
LDR             R3, [R6,#(dword_7D818 - 0x7D790)]
ADD             R5, R5, R3
MOV             R3, #0
STRB            R3, [R5,#-1]

loc_4F5D4
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_4F5DC
CMP             R3, #0x23 ; '#'
BNE             loc_4F610
LDRB            R3, [R7,#1]
MOV             R1, R10 ; accept
MOV             R0, R7  ; s
CMP             R3, #0x6E ; 'n'
LDREQ           R3, [R6]
ADDEQ           R3, R3, #1
STREQ           R3, [R6]
BL              strpbrk
SUBS            R4, R0, #0
BEQ             loc_4F584
B               loc_4F55C

loc_4F610
MOV             R0, #0x30 ; '0'
BL              sub_174DC
MOV             R5, R0
ADD             R2, R0, #4
ADD             R1, R0, #0x10
MOV             R0, R7
BL              sub_4F2BC
LDR             R2, [R5,#0x10]
ADD             R3, R7, R0
STR             R2, [R5,#0x14]
LDRB            R2, [R7,R0]
CMP             R2, #0x2C ; ','
BNE             loc_4F6B8
LDRB            R2, [R3,#1]
ADD             R4, R3, #1
CMP             R2, #0x2B ; '+'
BNE             loc_4F694
LDRB            R2, [R3,#2]
SUB             R2, R2, #0x30 ; '0'
CMP             R2, #9
BHI             loc_4F694
ADD             R0, R3, #2 ; nptr
MOV             R2, #0xA ; base
ADD             R1, SP, #0x14+endptr ; endptr
BL              strtol
MOV             R3, #0xFFFFFFFE
SUB             R3, R3, R0
STR             R3, [R5,#0x18]
LDR             R3, [SP,#0x14+endptr]

loc_4F684
CMP             R0, #0
BGE             loc_4F6B0
LDR             R0, =aNoAddressAfter ; "no address after comma"

loc_4F690
BL              sub_16DBC

loc_4F694
ADD             R2, R5, #8
ADD             R1, R5, #0x18
MOV             R0, R4
BL              sub_4F2BC
ADD             R3, R4, R0
SUB             R0, R0, #1
B               loc_4F684

loc_4F6B0
LDR             R2, [R5,#0x18]
STR             R2, [R5,#0x1C]

loc_4F6B8
MOV             R0, R3
BL              sub_60E74
LDRB            R3, [R0]
MOV             R11, R0
CMP             R3, #0x21 ; '!'
BNE             loc_4F6E8
LDRB            R3, [R5,#0x2C]
ADD             R0, R0, #1
ORR             R3, R3, #1
STRB            R3, [R5,#0x2C]
BL              sub_60E74
MOV             R11, R0

loc_4F6E8
LDRB            R7, [R11]
CMP             R7, #0
LDREQ           R0, =aMissingCommand ; "missing command"
BEQ             loc_4F690
STRB            R7, [R5,#0x2E]
MOV             R1, R7
LDR             R0, =aSaicrwBttyddgg ; "saicrw:btTydDgGhHlnNpPqx={}"
ADD             R4, R11, #1
BL              strchrnul
LDR             R3, =aSaicrwBttyddgg ; "saicrw:btTydDgGhHlnNpPqx={}"
SUBS            R0, R0, R3
BNE             loc_4F8A4
ADD             R2, R5, #0x24 ; '$'
ADD             R1, SP, #0x14+ptr
MOV             R0, R4
LDR             R7, [R6,#termios.c_oflag]
MOV             R11, #0xA
BL              sub_4F3C8
MOV             R9, R0
MOV             R2, #1
STR             R2, [R5,#0x28]

loc_4F73C
ADD             R9, R9, #1
LDRB            R2, [R4,R9]
ADD             R0, R4, R9 ; s
CMP             R2, #0
BEQ             loc_4F800
SUB             R1, R2, #0x30 ; '0'
CMP             R1, #9
BHI             loc_4F790
LDR             R2, [SP,#0x14+ptr]
LDRB            R2, [R2]
CMP             R2, #0x5E ; '^'
BEQ             loc_4F73C
MOV             R2, #0xA ; base
ADD             R1, SP, #0x14+endptr ; endptr
STR             R0, [SP,#0x14+endptr]
BL              strtol
LDR             R3, [SP,#0x14+endptr]
STR             R0, [R5,#0x28]
SUB             R3, R3, R4
SUB             R9, R3, #1
B               loc_4F73C

loc_4F790
SUB             R1, R2, #9
CMP             R2, #0x20 ; ' '
CMPNE           R1, #4
MOVLS           R1, #1
MOVHI           R1, #0
BLS             loc_4F73C
CMP             R2, #0x67 ; 'g'
BEQ             loc_4F844
BHI             loc_4F7D4
CMP             R2, #0x3B ; ';'
BEQ             loc_4F800
CMP             R2, #0x49 ; 'I'
BEQ             loc_4F7E8
CMP             R2, #0x23 ; '#'
BEQ             loc_4F898

loc_4F7CC
LDR             R0, =aBadOptionInSub ; "bad option in substitution expression"
B               loc_4F690

loc_4F7D4
CMP             R2, #0x70 ; 'p'
BEQ             loc_4F858
BHI             loc_4F7F0
CMP             R2, #0x69 ; 'i'
BNE             loc_4F7CC

loc_4F7E8
ORR             R7, R7, #2
B               loc_4F73C

loc_4F7F0
CMP             R2, #0x77 ; 'w'
BEQ             loc_4F868
CMP             R2, #0x7D ; '}'
BNE             loc_4F7CC

loc_4F800
LDR             R2, [SP,#0x14+ptr]
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_4F828
MOV             R0, #0x20 ; ' '
BL              sub_174DC
MOV             R2, R7
STR             R0, [R5,#0xC]
LDR             R1, [SP,#0x14+ptr]
BL              sub_625E4

loc_4F828
ADD             R4, R4, R9
LDR             R0, [SP,#0x14+ptr] ; ptr
BL              free

loc_4F834
LDR             R3, [R6,#(dword_7D810 - 0x7D790)]
STR             R5, [R3]
STR             R5, [R6,#(dword_7D810 - 0x7D790)]
B               loc_4F55C

loc_4F844
LDR             R2, [SP,#0x14+ptr]
LDRB            R2, [R2]
CMP             R2, #0x5E ; '^'
STRNE           R1, [R5,#0x28]
B               loc_4F73C

loc_4F858
LDRB            R2, [R5,#0x2C]
ORR             R2, R2, #4
STRB            R2, [R5,#0x2C]
B               loc_4F73C

loc_4F868
ADD             R0, R9, #1
ADD             R1, SP, #0x14+endptr
ADD             R0, R4, R0
BL              sub_4F448
ADD             R9, R9, R0
LDR             R0, [SP,#0x14+endptr]
BL              sub_61CC0
STRB            R11, [R5,#0x2D]
STR             R0, [R5,#0x20]
LDR             R0, [SP,#0x14+endptr] ; ptr
BL              free
B               loc_4F73C

loc_4F898
BL              strlen
ADD             R9, R9, R0
B               loc_4F800

loc_4F8A4
CMP             R0, #3
BHI             loc_4F938
BEQ             loc_4F8E4
LDR             R3, [R5,#0x18]
CMP             R3, #0
BNE             loc_4F8C8
LDR             R3, [R5,#8]
CMP             R3, #0
BEQ             loc_4F8E4

loc_4F8C8
LDR             R0, =aCommandCUsesOn ; "command '%c' uses only one address"
MOV             R1, R7

loc_4F8D0
BL              sub_16DBC

loc_4F8D4
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BHI             loc_4F900

loc_4F8E4
LDRB            R3, [R4]
MOV             R7, R4
ADD             R4, R4, #1
CMP             R3, #0x5C ; '\'
CMPNE           R3, #0xA
BNE             loc_4F8D4
MOV             R7, R4

loc_4F900               ; s
MOV             R0, R7
BL              strlen
MOV             R1, R0
MOV             R4, R0
MOV             R0, R7
ADD             R4, R7, R4
BL              sub_4F25C
MOV             R3, #0  ; int
STR             R0, [R5,#0x24]
MOV             R1, R0  ; s
STR             R3, [SP,#0x14+var_14] ; char
MOV             R2, #0xFFFFFFFF ; int
BL              sub_4F1A4
B               loc_4F834

loc_4F938
CMP             R0, #5
BHI             loc_4F994
CMP             R0, #4
BNE             loc_4F960
LDR             R3, [R5,#0x18]
CMP             R3, #0
BNE             loc_4F8C8
LDR             R3, [R5,#8]
CMP             R3, #0
BNE             loc_4F8C8

loc_4F960
MOV             R0, R4
ADD             R1, R5, #0x24 ; '$'
BL              sub_4F448
LDRB            R3, [R5,#0x2E]
ADD             R4, R4, R0
CMP             R3, #0x77 ; 'w'
BNE             loc_4F834
LDR             R0, [R5,#0x24]
BL              sub_61CC0
MOV             R3, #0xA
STR             R0, [R5,#0x20]
STRB            R3, [R5,#0x2D]
B               loc_4F834

loc_4F994
CMP             R0, #9
BHI             loc_4F9D0
MOV             R0, R4
BL              sub_60E74
MOV             R1, R8  ; reject
MOV             R4, R0
BL              strcspn
SUBS            R7, R0, #0
BEQ             loc_4F834
MOV             R0, R4
MOV             R1, R7
BL              sub_1751C
ADD             R4, R4, R7
STR             R0, [R5,#0x24]
B               loc_4F834

loc_4F9D0
CMP             R0, #0xA
BNE             loc_4FA94
ADD             R2, SP, #0x14+endptr
ADD             R1, SP, #0x14+ptr
MOV             R0, R4
LDRB            R7, [R11,#1]
BL              sub_4F3C8
LDR             R1, [SP,#0x14+ptr] ; s
ADD             R0, R0, #1
MOV             R3, R7  ; int
MOV             R2, #0xFFFFFFFF ; int
ADD             R4, R4, R0
STR             R7, [SP,#0x14+var_14] ; char
MOV             R0, R1  ; int
BL              sub_4F1A4
LDR             R1, [SP,#0x14+endptr] ; s
MOV             R3, R7  ; int
MOV             R2, #0xFFFFFFFF ; int
STR             R7, [SP,#0x14+var_14] ; char
MOV             R0, R1  ; int
BL              sub_4F1A4
LDR             R0, [SP,#0x14+ptr] ; s
BL              strlen
ADD             R0, R0, #1
MOV             R0, R0,LSL#1
BL              sub_174DC
MOV             R3, #0
STR             R0, [R5,#0x24]

loc_4FA40               ; ptr
LDR             R0, [SP,#0x14+ptr]
LDRB            R2, [R0,R3]
CMP             R2, #0
BEQ             loc_4FA60
LDR             R1, [SP,#0x14+endptr]
LDRB            R1, [R1,R3]
CMP             R1, #0
BNE             loc_4FA70

loc_4FA60
BL              free
LDR             R0, [SP,#0x14+endptr] ; ptr
BL              free
B               loc_4F834

loc_4FA70
LDR             R1, [R5,#0x24]
STRB            R2, [R1,R3,LSL#1]
LDR             R2, [SP,#0x14+endptr]
LDRB            R1, [R2,R3]
LDR             R2, [R5,#0x24]
ADD             R2, R2, R3,LSL#1
ADD             R3, R3, #1
STRB            R1, [R2,#1]
B               loc_4FA40

loc_4FA94
CMP             R0, #0x1A
BLS             loc_4F834
MOV             R1, R7
LDR             R0, =aUnsupportedCom ; "unsupported command %c"
B               loc_4F8D0
; End of function sub_4F4E8

off_4FAA8 DCD buf
off_4FAAC DCD aSS_8     ; "%s\n%s"
off_4FAB0 DCD asc_6B090 ; "; \n\r\t\v"
off_4FAB4 DCD asc_6AEEE ; "\n\r"
off_4FAB8 DCD aNoAddressAfter ; "no address after comma"
off_4FABC DCD aMissingCommand ; "missing command"
off_4FAC0 DCD aSaicrwBttyddgg ; "saicrw:btTydDgGhHlnNpPqx={}"
off_4FAC4 DCD aBadOptionInSub ; "bad option in substitution expression"
off_4FAC8 DCD aCommandCUsesOn ; "command '%c' uses only one address"
off_4FACC DCD aUnsupportedCom ; "unsupported command %c"



; void __fastcall sub_4FAD0(const char *)
sub_4FAD0
PUSH            {R4-R8,LR}
MOV             R7, #0
BL              sub_174F8
MOV             R6, R0
MOV             R5, R0

loc_4FAE4               ; c
MOV             R1, #0xA
MOV             R0, R5  ; s
BL              strchr
SUBS            R4, R0, #0
MOV             R0, R5  ; s
STRBNE          R7, [R4]
ADD             R5, R4, #1
BL              sub_4F4E8
CMP             R4, #0
BNE             loc_4FAE4
MOV             R0, R6
POP             {R4-R8,LR}
B               free
; End of function sub_4FAD0




; void *__fastcall sub_4FB18(char)
sub_4FB18
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, =buf
LDR             R1, [R4,#(dword_7D820 - 0x7D790)]
LDR             R3, [R4,#(dword_7D824 - 0x7D790)]
LDR             R0, [R4,#(dword_7D81C - 0x7D790)]
CMP             R1, R3
BNE             loc_4FB50
ADD             R1, R1, #0x40 ; '@'
BL              sub_174B4
LDR             R3, [R4,#(dword_7D824 - 0x7D790)]
STR             R0, [R4,#(dword_7D81C - 0x7D790)]
ADD             R3, R3, #0x40 ; '@'
STR             R3, [R4,#(dword_7D824 - 0x7D790)]

loc_4FB50
LDR             R3, [R4,#(dword_7D820 - 0x7D790)]
LDR             R2, [R4,#(dword_7D81C - 0x7D790)]
ADD             R1, R3, #1
STR             R1, [R4,#(dword_7D820 - 0x7D790)]
STRB            R5, [R2,R3]
POP             {R4-R6,PC}
; End of function sub_4FB18

off_4FB68 DCD buf



; int __fastcall sub_4FB6C(_BYTE *, FILE *, _BYTE *, int)
sub_4FB6C
PUSH            {R4-R8,LR}
MOV             R8, R0
LDRB            R4, [R2]
MOV             R5, R1
MOV             R7, R2
MOV             R6, R3
CMP             R4, #0xA
CMPNE           R4, #0
BEQ             loc_4FB9C
MOV             R4, #0xA
MOV             R0, #0xA ; c
BL              putc_unlocked

loc_4FB9C
MOV             R1, R5
MOV             R0, R8
BL              fputs_unlocked
LDRB            R3, [R8]
CMP             R3, #0
MOVNE           R4, #0x78 ; 'x'
CMP             R6, #2
BNE             loc_4FBF0
MOV             R4, #0x78 ; 'x'
MOV             R1, R5  ; stream
MOV             R0, #0  ; c
BL              putc_unlocked

loc_4FBCC               ; stream
MOV             R0, R5
BL              ferror_unlocked
CMP             R0, #0
BEQ             loc_4FC0C
LDR             R3, =byte_7D5F8
MOV             R2, #4
LDR             R0, =aWriteError ; "write error"
STRB            R2, [R3]
BL              sub_16DBC

loc_4FBF0
CMP             R6, #1
BEQ             loc_4FBCC
MOV             R1, R5  ; stream
MOV             R0, R6  ; c
BL              putc_unlocked
MOV             R4, R6
B               loc_4FBCC

loc_4FC0C
STRB            R4, [R7]
POP             {R4-R8,PC}
; End of function sub_4FB6C

off_4FC14 DCD byte_7D5F8
off_4FC18 DCD aWriteError ; "write error"



; _BYTE *__fastcall sub_4FC1C(_BYTE *)
sub_4FC1C
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R6, =buf

loc_4FC28
LDR             R0, =dword_7D814
BL              sub_5D2FC
SUBS            R4, R0, #0
POPEQ           {R4-R6,PC}
MOV             R3, #0xA
MOV             R2, R5
LDR             R1, [R6,#(buf.c_cflag - 0x7D790)]
BL              sub_4FB6C
MOV             R0, R4  ; ptr
BL              free
B               loc_4FC28
; End of function sub_4FC1C

off_4FC54 DCD buf
off_4FC58 DCD dword_7D814



; _BYTE *__fastcall sub_4FC5C(_BYTE *, _BYTE *, int)
sub_4FC5C

var_8= -8

PUSH            {R0-R2,R4-R9,LR}
MOV             R8, R0
LDR             R5, =buf
MOV             R0, R1
LDR             R9, =stdin
MOV             R7, R5
BL              sub_4FC1C

loc_4FC78
LDR             R3, [R5,#(buf.c_cc+7 - 0x7D790)]
LDR             R2, [R5,#(buf.c_cc+0xB - 0x7D790)]
CMP             R3, R2
MOVGT           R5, #1
MOVGT           R6, #0
BGT             loc_4FD48
LDR             R4, [R5,#(buf.c_cc+0x13 - 0x7D790)]
CMP             R4, #0
BNE             loc_4FCEC
LDR             R2, [R5,#(buf.c_cc+0xF - 0x7D790)]
LDR             R4, [R9]
LDR             R0, [R2,R3,LSL#2]
LDR             R3, =aStandardInput ; "standard input"
CMP             R0, R3
BEQ             loc_4FCE8
LDR             R1, =(aNTR+5) ; "r"
BL              sub_61C78
SUBS            R4, R0, #0
BNE             loc_4FCE8
MOV             R3, #1
STRB            R4, [R5,#(buf.c_cc+4 - 0x7D790)]
STRB            R3, [R5,#(buf.c_cc+3 - 0x7D790)]
STRB            R4, [R5,#(buf.c_cc+5 - 0x7D790)]
STRB            R4, [R5,#(buf.c_cc+6 - 0x7D790)]

loc_4FCD8
LDR             R3, [R7,#(buf.c_cc+7 - 0x7D790)]
ADD             R3, R3, #1
STR             R3, [R7,#(buf.c_cc+7 - 0x7D790)]
B               loc_4FC78

loc_4FCE8
STR             R4, [R7,#(buf.c_cc+0x13 - 0x7D790)]

loc_4FCEC
ADD             R1, SP, #0xC+var_8
MOV             R0, R4  ; stream
BL              sub_58C58
SUBS            R6, R0, #0
BEQ             loc_4FD58
LDR             R3, [SP,#0xC+var_8]
SUB             R3, R3, #1
LDRB            R5, [R6,R3]
CMP             R5, #0
CMPNE           R5, #0xA
MOVNE           R5, #1
BNE             loc_4FD48
MOV             R2, #0
CMP             R5, R2
STRB            R2, [R6,R3]
BNE             loc_4FD48
MOV             R0, R4  ; stream
BL              getc_unlocked
CMN             R0, #1
MOVEQ           R5, #2
BEQ             loc_4FD48
MOV             R1, R4  ; stream
BL              ungetc

loc_4FD48
MOV             R0, R6
STRB            R5, [R8]
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_4FD58
MOV             R0, R4
BL              sub_5888C
STRB            R6, [R7,#(buf.c_cc+0x13 - 0x7D790)]
STRB            R6, [R7,#(buf.c_cc+0x14 - 0x7D790)]
STRB            R6, [R7,#(buf.c_cc+0x15 - 0x7D790)]
STRB            R6, [R7,#(buf.c_cc+0x16 - 0x7D790)]
B               loc_4FCD8
; End of function sub_4FC5C

off_4FD74 DCD buf
off_4FD78 DCD stdin
off_4FD7C DCD aStandardInput ; "standard input"
off_4FD80 DCD aNTR+5    ; "r"



; void __fastcall sub_4FD84(int, int, int)
sub_4FD84

eflags= -0x3C
var_34= -0x34
preg= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_6= -6
var_5= -5
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x3C
ADD             R1, SP, #0x3C+var_4
MOV             R3, #0xA
ADD             R0, SP, #0x3C+var_5
MOV             R9, #0
LDR             R6, =buf
STRB            R3, [R1,#-2]!
BL              sub_4FC5C
MOV             R5, R0

loc_4FDAC
CMP             R5, #0
BEQ             loc_50830
ADD             R1, SP, #0x3C+var_6
ADD             R0, SP, #0x3C+var_5
LDRB            R10, [SP,#0x3C+var_5]
ADD             R9, R9, #1
BL              sub_4FC5C
MOV             R8, R0
MOV             R3, #0
STR             R3, [SP,#0x3C+var_34]

loc_4FDD4
LDR             R4, [R6,#(dword_7D80C - 0x7D790)]

loc_4FDD8
CMP             R4, #0
BEQ             loc_505D8
LDRB            R3, [R4,#0x2C]
LDR             R2, [R4,#0x10]
TST             R3, #2
UBFX            R7, R3, #1, #1
BNE             loc_4FE20
CMP             R2, #0
BNE             loc_4FE80
LDR             R1, [R4,#0x18]
LDR             R2, [R4,#4]
CMP             R1, #0
BNE             loc_4FEB4
CMP             R2, #0
BNE             loc_4FEB4
LDR             R2, [R4,#8]
CMP             R2, #0

loc_4FE1C
BNE             loc_4FEB4

loc_4FE20
ORR             R3, R3, #2
STRB            R3, [R4,#0x2C]
LDR             R3, [R4,#0x18]
CMN             R3, #1
SUBLT           R3, R9, R3
SUBLT           R3, R3, #2
STRLT           R3, [R4,#0x18]
LDR             R3, [R4,#0x10]
LDR             R0, [R4,#0x18]
CMP             R3, #0
MOVGT           R3, #0xFFFFFFFE
STRGT           R3, [R4,#0x10]
CMP             R0, #0
BEQ             loc_4FFA4
CMN             R0, #1
BNE             loc_4FF64
CMP             R8, #0
BNE             loc_4FF6C

loc_4FE68
MOV             R0, #0

loc_4FE6C
LDRB            R3, [R4,#0x2C]
BFI             R3, R0, #1, #1
STRB            R3, [R4,#0x2C]
MOV             R3, #1
B               loc_4FF08

loc_4FE80
BLE             loc_4FEB4
LDR             R1, [R4,#0x18]
CMP             R1, #0
BNE             loc_4FE9C
LDR             R1, [R4,#8]
CMP             R1, #0
BEQ             loc_4FEAC

loc_4FE9C
CMP             R9, R2
BLT             loc_4FEB4

loc_4FEA4
LDRB            R3, [R4,#0x2C]
B               loc_4FE20

loc_4FEAC
CMP             R9, R2
B               loc_4FE1C

loc_4FEB4               ; preg
LDR             R0, [R4,#4]
CMP             R0, #0
BEQ             loc_4FEE4
MOV             R3, #0  ; pmatch
MOV             R1, R5  ; string
STR             R3, [SP,#0x3C+eflags] ; eflags
MOV             R2, R3  ; nmatch
BL              regexec
CMP             R0, #0
LDREQ           R3, [R4,#4]
STREQ           R3, [R6,#(dword_7D808 - 0x7D790)]
BEQ             loc_4FEA4

loc_4FEE4
LDR             R3, [R4,#0x10]
CMN             R3, #1
LDRB            R3, [R4,#0x2C]
BNE             loc_4FEFC
CMP             R8, #0
BEQ             loc_4FE20

loc_4FEFC
BFC             R3, #1, #1
STRB            R3, [R4,#0x2C]
MOV             R3, #0

loc_4FF08
LDRB            R1, [R4,#0x2E]
LDRB            R2, [R4,#0x2C]
CMP             R1, #0x7B ; '{'
AND             R2, R2, #1
BNE             loc_4FFB4
CMP             R2, #0
EOREQ           R3, R3, #1
CMP             R3, #0
BEQ             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57
MOV             R3, #0

loc_4FF30
LDRB            R2, [R4,#0x2E]
CMP             R2, #0x7B ; '{'
ADDEQ           R3, R3, #1
BEQ             loc_4FF50
CMP             R2, #0x7D ; '}'
BNE             loc_4FF50
SUBS            R3, R3, #1
BEQ             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_4FF50
LDR             R4, [R4]
CMP             R4, #0
BNE             loc_4FF30
LDR             R0, =aUnterminated ; "unterminated {"

loc_4FF60
BL              sub_16DBC

loc_4FF64
CMP             R0, R9
BLE             loc_4FE68

loc_4FF6C
LDR             R0, [R4,#8]
CMP             R0, #0
MOVEQ           R7, #0
CMP             R7, #0
MOVEQ           R0, #1  ; preg
BEQ             loc_4FE6C
MOV             R3, #0  ; pmatch
MOV             R1, R5  ; string
STR             R3, [SP,#0x3C+eflags] ; eflags
MOV             R2, R3  ; nmatch
BL              regexec
MOVS            R0, R0
MOVNE           R0, #1
B               loc_4FE6C

loc_4FFA4
LDR             R3, [R4,#8]
CMP             R3, #0
BEQ             loc_4FE6C
B               loc_4FF6C

loc_4FFB4
CMP             R2, #0
EOREQ           R3, R3, #1
STR             R3, [SP,#0x3C+var_2C]
LDR             R3, [SP,#0x3C+var_2C]
CMP             R3, #0
BNE             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57
LDR             R3, [R4,#4]
CMP             R3, #0
STRNE           R3, [R6,#(dword_7D808 - 0x7D790)]
LDRB            R3, [R4,#0x2E]
SUB             R3, R3, #0x3D ; '='
CMP             R3, #0x3C ; switch 61 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57
jpt_4FFE4 DCD loc_500FC, def_4FFE4, def_4FFE4, def_4FFE4 ; jump table for switch statement
DCD def_4FFE4, def_4FFE4, def_4FFE4, loc_50164
DCD def_4FFE4, def_4FFE4, loc_50720, loc_507A0
DCD def_4FFE4, def_4FFE4, def_4FFE4, def_4FFE4
DCD def_4FFE4, loc_505F8, def_4FFE4, loc_50114
DCD def_4FFE4, def_4FFE4, def_4FFE4, loc_50694
DCD def_4FFE4, def_4FFE4, def_4FFE4, def_4FFE4
DCD def_4FFE4, def_4FFE4, def_4FFE4, def_4FFE4
DCD def_4FFE4, def_4FFE4, def_4FFE4, def_4FFE4
DCD loc_504C0, loc_50670, loc_504F0, loc_50510
DCD def_4FFE4, def_4FFE4, loc_506FC, loc_50788
DCD loc_504D8, def_4FFE4, def_4FFE4, def_4FFE4
DCD def_4FFE4, loc_50574, def_4FFE4, loc_50150
DCD loc_505CC, loc_50528, loc_50188, loc_5065C
DCD def_4FFE4, def_4FFE4, loc_50564, loc_50808
DCD loc_500E0

loc_500E0               ; jumptable 0004FFE4 case 60
SUB             R1, R5, #1

loc_500E4
LDRB            R0, [R1,#1]!
CMP             R0, #0
BEQ             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57
LDR             R2, [R4,#0x24]
MOV             R3, #0
B               loc_506D8

loc_500FC               ; jumptable 0004FFE4 case 0
MOV             R2, R9
LDR             R1, =(aSLineDUartSPor+0x2A) ; format
LDR             R0, [R6,#(buf.c_cflag - 0x7D790)] ; stream
BL              fprintf

def_4FFE4               ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57
LDR             R4, [R4]
B               loc_4FDD8

loc_50114               ; jumptable 0004FFE4 case 19
MOV             R1, #0xA
MOV             R0, R5  ; s
BL              strchr
SUBS            R7, R0, #0
BEQ             loc_50150 ; jumptable 0004FFE4 case 51
MOV             R3, #0
ADD             R2, SP, #0x3C+var_6
STRB            R3, [R7]
MOV             R0, R5
MOV             R3, #0xA
LDR             R1, [R6,#(buf.c_cflag - 0x7D790)]
BL              sub_4FB6C
MOV             R3, #0xA
STRB            R3, [R7]
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_50150               ; jumptable 0004FFE4 case 51
LDR             R1, [R6,#(buf.c_cflag - 0x7D790)]
MOV             R3, #0xA
ADD             R2, SP, #0x3C+var_6

loc_5015C
MOV             R0, R5
B               loc_504E8

loc_50164               ; jumptable 0004FFE4 case 7
MOV             R1, #0xA
MOV             R0, R5  ; s
BL              strchr
SUBS            R1, R0, #0
BEQ             loc_50510 ; jumptable 0004FFE4 case 39
ADD             R1, R1, #1
MOV             R0, R5
BL              sub_60B4C
B               loc_4FDD4

loc_50188               ; jumptable 0004FFE4 case 54
LDR             R3, [R4,#0xC]
CMP             R3, #0
STR             R3, [SP,#0x3C+preg]
BNE             loc_501AC
LDR             R3, [R6,#(dword_7D808 - 0x7D790)]
CMP             R3, #0
STR             R3, [SP,#0x3C+preg]
LDREQ           R0, =aNoPreviousRege ; "no previous regexp"
BEQ             loc_4FF60

loc_501AC
LDR             R3, [SP,#0x3C+preg]
MOV             R7, #0
STR             R7, [SP,#0x3C+eflags] ; eflags
MOV             R2, #0xA ; nmatch
MOV             R1, R5  ; string
LDR             R0, [SP,#0x3C+preg] ; preg
STR             R3, [R6,#(dword_7D808 - 0x7D790)]
LDR             R3, =(buf.c_cc+0x17) ; pmatch
BL              regexec
CMP             R0, #1
BEQ             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57
MOV             R0, #0x40 ; '@'
BL              sub_1748C
STRB            R7, [R6,#(dword_7D824+1 - 0x7D790)]
MOV             R3, #0x40 ; '@'
STRB            R7, [R6,#(dword_7D824+2 - 0x7D790)]
MOV             R1, #1
STRB            R7, [R6,#(dword_7D824+3 - 0x7D790)]
STRB            R7, [R6,#(dword_7D820 - 0x7D790)]
STRB            R7, [R6,#(dword_7D820+1 - 0x7D790)]
STRB            R7, [R6,#(dword_7D820+2 - 0x7D790)]
STRB            R7, [R6,#(dword_7D820+3 - 0x7D790)]
STR             R7, [SP,#0x3C+var_24]
MOV             R7, R5
STR             R0, [R6,#(dword_7D81C - 0x7D790)]
MOV             R0, #0
STRB            R3, [R6,#(dword_7D824 - 0x7D790)]
STRD            R0, R1, [SP,#0x3C+var_20]

loc_5021C
LDR             R3, [R6,#(buf.c_cc+0x17 - 0x7D790)]
LDR             R11, [R6,#(buf.c_cc+0x1B - 0x7D790)]
STR             R3, [SP,#0x3C+var_28]
LDR             R3, [SP,#0x3C+var_20]
ADD             R3, R3, #1
STR             R3, [SP,#0x3C+var_20]
LDR             R2, [SP,#0x3C+var_20]
LDR             R3, [R4,#0x28]
CMP             R3, #0
CMPNE           R2, R3
MOVEQ           R3, R7
SUBNE           R3, R7, #1
BNE             loc_50348

loc_50250
LDR             R1, [SP,#0x3C+var_28]
SUB             R2, R3, R7
CMP             R1, R2
BGT             loc_503C4
MOV             R3, R1
ORRS            R3, R3, R11
LDR             R3, [SP,#0x3C+var_1C]
MOVNE           R3, #1
CMP             R3, #0
STR             R3, [SP,#0x3C+var_1C]
LDRNE           R3, [R4,#0x24]
MOVNE           R2, #0
STRNE           R3, [SP,#0x3C+var_2C]
BNE             loc_50414

loc_50288
LDR             R3, [SP,#0x3C+var_28]
LDRB            R0, [R7,R11]
CMP             R3, R11
MOVEQ           R3, #1
MOVNE           R3, #0
STR             R3, [SP,#0x3C+var_1C]
BNE             loc_502BC
CMP             R0, #0
MOVEQ           R3, #1
STREQ           R3, [SP,#0x3C+var_24]
BEQ             loc_502BC
ADD             R11, R11, #1
BL              sub_4FB18

loc_502BC
LDR             R3, [R4,#0x28]
ADD             R7, R7, R11
CMP             R3, #0
BEQ             loc_5037C

loc_502CC
LDRB            R11, [R7],#1
MOV             R0, R11
BL              sub_4FB18
CMP             R11, #0
BNE             loc_502CC

loc_502E0               ; ptr
MOV             R0, R5
BL              free
LDR             R3, [SP,#0x3C+var_2C]
LDR             R5, [R6,#(dword_7D81C - 0x7D790)]
CMP             R3, #0
BEQ             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57
LDRB            R3, [R4,#0x2C]
TST             R3, #4
BEQ             loc_50318
MOV             R3, R10
ADD             R2, SP, #0x3C+var_6
LDR             R1, [R6,#(buf.c_cflag - 0x7D790)]
MOV             R0, R5
BL              sub_4FB6C

loc_50318
LDR             R1, [R4,#0x20]
CMP             R1, #0
BEQ             loc_50334
MOV             R3, R10
ADD             R2, R4, #0x2D ; '-'
MOV             R0, R5
BL              sub_4FB6C

loc_50334
MOV             R3, #1
B               loc_505C4

loc_5033C
STR             R3, [SP,#0x3C+var_18]
BL              sub_4FB18
LDR             R3, [SP,#0x3C+var_18]

loc_50348
LDRB            R0, [R3,#1]!
SUB             R2, R3, R7
CMP             R2, R11
BLT             loc_5033C
LDR             R3, [SP,#0x3C+var_28]
CMP             R11, #0
ADDGE           R7, R7, R11
CMP             R3, R11
BNE             loc_5037C
CMP             R0, #0
BEQ             loc_5037C
ADD             R7, R7, #1
BL              sub_4FB18

loc_5037C
LDRB            R0, [R7]
CMP             R0, #0
BNE             loc_5039C
LDR             R3, [SP,#0x3C+var_24]
CMP             R3, #0
BNE             loc_50828
MOV             R3, #1
STR             R3, [SP,#0x3C+var_24]

loc_5039C
MOV             R3, #1
MOV             R2, #0xA ; nmatch
STR             R3, [SP,#0x3C+eflags] ; eflags
MOV             R1, R7  ; string
LDR             R3, =(buf.c_cc+0x17) ; pmatch
LDR             R0, [SP,#0x3C+preg] ; preg
BL              regexec
CMP             R0, #1
BNE             loc_5021C
B               loc_502CC

loc_503C4
LDRB            R0, [R3],#1
STR             R3, [SP,#0x3C+var_18]
BL              sub_4FB18
LDR             R3, [SP,#0x3C+var_18]
B               loc_50250

loc_503D8
CMP             R0, #0x5C ; '\'
ADD             R3, R2, #1
BNE             loc_50470
LDR             R2, [SP,#0x3C+var_2C]
LDRB            R0, [R2,R3]
SUB             R2, R0, #0x30 ; '0'
CMP             R2, #9
BHI             loc_50460
SUB             R0, R0, #0x2B ; '+'
LDR             R2, [R6,R0,LSL#3]
CMN             R2, #1
ADDNE           R2, R7, R2
ADDNE           R1, R6, R0,LSL#3
BNE             loc_5044C

loc_50410
ADD             R2, R3, #1

loc_50414
LDR             R3, [SP,#0x3C+var_2C]
LDRB            R0, [R3,R2]
CMP             R0, #0
BNE             loc_503D8
LDR             R3, [SP,#0x3C+var_1C]
STR             R3, [SP,#0x3C+var_2C]
B               loc_50288

loc_50430
LDRB            R0, [R2],#1
STR             R1, [SP,#0x3C+var_10]
STR             R3, [SP,#0x3C+var_14]
STR             R2, [SP,#0x3C+var_18]
BL              sub_4FB18
LDR             R1, [SP,#0x3C+var_10]
LDRD            R2, R3, [SP,#0x3C+var_18]

loc_5044C
LDR             R12, [R1,#4]
SUB             R0, R2, R7
CMP             R0, R12
BLT             loc_50430
B               loc_50410

loc_50460
STR             R3, [SP,#0x3C+var_18]
BL              sub_4FB18
LDR             R3, [SP,#0x3C+var_18]
B               loc_50410

loc_50470
CMP             R0, #0x26 ; '&'
LDREQ           R3, [R6,#(buf.c_cc+0x17 - 0x7D790)]
ADDEQ           R3, R7, R3
BEQ             loc_504A8
STR             R2, [SP,#0x3C+var_18]
BL              sub_4FB18
LDR             R2, [SP,#0x3C+var_18]
B               loc_504B8

loc_50490
LDRB            R0, [R3],#1
STR             R2, [SP,#0x3C+var_14]
STR             R3, [SP,#0x3C+var_18]
BL              sub_4FB18
LDR             R2, [SP,#0x3C+var_14]
LDR             R3, [SP,#0x3C+var_18]

loc_504A8
LDR             R0, [R6,#(buf.c_cc+0x1B - 0x7D790)]
SUB             R1, R3, R7
CMP             R1, R0
BLT             loc_50490

loc_504B8
MOV             R3, R2
B               loc_50410

loc_504C0               ; jumptable 0004FFE4 case 36
LDR             R0, [R4,#0x24]
BL              sub_174F8
MOV             R1, R0
LDR             R0, =dword_7D814
BL              sub_5D2C8
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_504D8               ; jumptable 0004FFE4 case 44
LDR             R1, [R6,#(buf.c_cflag - 0x7D790)]
MOV             R3, #0xA
LDR             R0, [R4,#0x24]
ADD             R2, SP, #0x3C+var_6

loc_504E8
BL              sub_4FB6C
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_504F0               ; jumptable 0004FFE4 case 38
LDRB            R3, [R4,#0x2C]
TST             R3, #2
BNE             loc_50510 ; jumptable 0004FFE4 case 39
LDR             R1, [R6,#(buf.c_cflag - 0x7D790)]
MOV             R3, #0xA
LDR             R0, [R4,#0x24]
ADD             R2, SP, #0x3C+var_6

loc_5050C
BL              sub_4FB6C

loc_50510               ; jumptable 0004FFE4 case 39
ADD             R0, SP, #0x3C+var_6
BL              sub_4FC1C
MOV             R0, R5  ; ptr
MOV             R5, R8
BL              free
B               loc_4FDAC

loc_50528               ; jumptable 0004FFE4 case 53
LDR             R0, [R4,#0x24]
BL              sub_61C9C
SUBS            R7, R0, #0
LDRNE           R11, =dword_7D814
BEQ             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_5053C
MOV             R0, R7
BL              sub_58D24
SUBS            R1, R0, #0
BNE             loc_50558
MOV             R0, R7  ; stream
BL              fclose
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_50558
MOV             R0, R11
BL              sub_5D2C8
B               loc_5053C

loc_50564               ; jumptable 0004FFE4 case 58
MOV             R3, R10
ADD             R2, R4, #0x2D ; '-'
LDR             R1, [R4,#0x20]
B               loc_5015C

loc_50574               ; jumptable 0004FFE4 case 49
LDR             R3, [R6]
CMP             R3, #0
BNE             loc_50594
MOV             R3, R10
ADD             R2, SP, #0x3C+var_6
LDR             R1, [R6,#(buf.c_cflag - 0x7D790)]
MOV             R0, R5
BL              sub_4FB6C

loc_50594
CMP             R8, #0
BEQ             loc_50510 ; jumptable 0004FFE4 case 39
MOV             R0, R5  ; ptr
ADD             R9, R9, #1
BL              free
ADD             R0, SP, #0x3C+var_4
ADD             R1, SP, #0x3C+var_6
LDRB            R10, [R0,#-1]!
MOV             R5, R8
BL              sub_4FC5C
MOV             R3, #0
MOV             R8, R0

loc_505C4
STR             R3, [SP,#0x3C+var_34]
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_505CC               ; jumptable 0004FFE4 case 52
MOV             R0, R8
MOV             R8, #0
BL              free

loc_505D8
LDR             R3, [R6]
CMP             R3, #0
BNE             loc_50510 ; jumptable 0004FFE4 case 39
MOV             R3, R10
ADD             R2, SP, #0x3C+var_6
LDR             R1, [R6,#(buf.c_cflag - 0x7D790)]
MOV             R0, R5
B               loc_5050C

loc_505F8               ; jumptable 0004FFE4 case 17
CMP             R8, #0
BEQ             loc_505D8
MOV             R0, R5  ; s
ADD             R9, R9, #1
BL              strlen
MOV             R7, R0
MOV             R0, R8  ; s
BL              strlen
ADD             R1, R7, R0
MOV             R0, R5
ADD             R1, R1, #2
BL              sub_174B4
MOV             R3, #0xA
MOV             R5, R0
STRB            R3, [R0,R7]
ADD             R0, R7, #1
MOV             R1, R8  ; src
ADD             R0, R5, R0 ; dest
BL              strcpy
ADD             R1, SP, #0x3C+var_6
ADD             R0, SP, #0x3C+var_5
LDRB            R10, [SP,#0x3C+var_5]
BL              sub_4FC5C
MOV             R8, R0
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_5065C               ; jumptable 0004FFE4 case 55
LDR             R3, [SP,#0x3C+var_34]
CMP             R3, #0
MOVNE           R3, #0
STRNE           R3, [SP,#0x3C+var_34]
BEQ             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_50670               ; jumptable 0004FFE4 case 37
LDR             R7, [R4,#0x24]
CMP             R7, #0
BEQ             loc_505D8
LDR             R4, [R6,#(dword_7D80C - 0x7D790)]

loc_50680
CMP             R4, #0
BNE             loc_506A4
MOV             R1, R7
LDR             R0, =aCanTFindLabelF ; "can't find label for jump to '%s'"
BL              sub_16DBC

loc_50694               ; jumptable 0004FFE4 case 23
LDR             R3, [SP,#0x3C+var_34]
CMP             R3, #0
BNE             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57
B               loc_50670 ; jumptable 0004FFE4 case 37

loc_506A4
LDRB            R3, [R4,#0x2E]
CMP             R3, #0x3A ; ':'
BNE             loc_506CC
LDR             R0, [R4,#0x24] ; s1
CMP             R0, #0
BEQ             loc_506CC
MOV             R1, R7  ; s2
BL              strcmp
CMP             R0, #0
BEQ             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_506CC
LDR             R4, [R4]
B               loc_50680

loc_506D4
ADD             R3, R3, #2

loc_506D8
LDRB            R12, [R2,R3]
CMP             R12, #0
BEQ             loc_500E4
CMP             R12, R0
BNE             loc_506D4
ADD             R3, R2, R3
LDRB            R3, [R3,#1]
STRB            R3, [R1]
B               loc_500E4

loc_506FC               ; jumptable 0004FFE4 case 42
MOV             R0, R5
BL              free
LDR             R0, [R6,#(buf.c_line - 0x7D790)]
LDR             R3, =(asc_6B39D+1) ; ""
CMP             R0, #0
MOVEQ           R0, R3
BL              sub_174F8
MOV             R5, R0
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_50720               ; jumptable 0004FFE4 case 10
CMP             R5, #0
MOVEQ           R7, #2
BEQ             loc_50738
MOV             R0, R5  ; s
BL              strlen
ADD             R7, R0, #2

loc_50738               ; s
LDR             R0, [R6,#(buf.c_line - 0x7D790)]
CMP             R0, #0
BEQ             loc_50748
BL              strlen

loc_50748
ADD             R1, R7, R0
MOV             R0, R5
BL              sub_174B4
CMP             R7, #2
LDR             R1, =(aShellReturnedI+0x13) ; src
MOVEQ           R3, #0
MOV             R5, R0
STRBEQ          R3, [R0]
BL              strcat
LDR             R1, [R6,#(buf.c_line - 0x7D790)] ; src
CMP             R1, #0
BEQ             loc_50780
MOV             R0, R5  ; dest
BL              strcat

loc_50780
MOV             R10, #0xA
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_50788               ; jumptable 0004FFE4 case 43
LDR             R0, [R6,#(buf.c_line - 0x7D790)]
BL              free
MOV             R0, R5
BL              sub_174F8
STR             R0, [R6,#(buf.c_line - 0x7D790)]
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_507A0               ; jumptable 0004FFE4 case 11
LDR             R11, [R6,#(buf.c_line - 0x7D790)]
CMP             R11, #0
MOVEQ           R7, #2
BEQ             loc_507BC
MOV             R0, R11 ; s
BL              strlen
ADD             R7, R0, #2

loc_507BC               ; s
SUBS            R0, R5, #0
BEQ             loc_507C8
BL              strlen

loc_507C8
ADD             R1, R7, R0
MOV             R0, R11
BL              sub_174B4
CMP             R7, #2
STR             R0, [R6,#(buf.c_line - 0x7D790)]
MOVEQ           R3, #0
LDR             R1, =(aShellReturnedI+0x13) ; src
STRBEQ          R3, [R0]
LDR             R0, [R6,#(buf.c_line - 0x7D790)] ; dest
BL              strcat
CMP             R5, #0
BEQ             def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57
MOV             R1, R5  ; src
LDR             R0, [R6,#(buf.c_line - 0x7D790)] ; dest
BL              strcat
B               def_4FFE4 ; jumptable 0004FFE4 default case, cases 1-6,8,9,12-16,18,20-22,24-35,40,41,45-48,50,56,57

loc_50808               ; jumptable 0004FFE4 case 59
LDR             R0, [R6,#(buf.c_line - 0x7D790)]
CMP             R0, #0
BNE             loc_5081C
MOV             R0, #1
BL              sub_174DC

loc_5081C
STR             R5, [R6,#(buf.c_line - 0x7D790)]
MOV             R5, R0
B               loc_50780

loc_50828
BL              sub_4FB18
B               loc_502E0

loc_50830
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}
; End of function sub_4FD84

off_50838 DCD buf
off_5083C DCD aUnterminated ; "unterminated {"
off_50840 DCD aSLineDUartSPor+0x2A ; "%d\n"
off_50844 DCD aNoPreviousRege ; "no previous regexp"
off_50848 DCD buf.c_cc+0x17
off_5084C DCD dword_7D814
off_50850 DCD aCanTFindLabelF ; "can't find label for jump to '%s'"
off_50854 DCD asc_6B39D+1 ; ""
off_50858 DCD aShellReturnedI+0x13 ; "\n"



; int __fastcall sub_5085C(int, int)
sub_5085C

var_94= -0x94
var_90= -0x90
var_8C= -0x8C
ptr= -0x80
var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
mode= -0x5C
owner= -0x54
group= -0x50
var_4= -4

PUSH            {R4-R11,LR}
MOV             R6, R1
LDR             R4, =buf
SUB             SP, SP, #0x94
ADD             R3, R4, #0x7C ; '|'
STR             R3, [R4,#(dword_7D810 - 0x7D790)]
LDR             R0, [R1,#4] ; s1
CMP             R0, #0
BEQ             loc_508A4
LDR             R1, =aVersion ; "--version"
BL              strcmp
SUBS            R5, R0, #0
BNE             loc_508A4
LDR             R0, =aThisIsNotGnuSe ; "This is not GNU sed version 4.0"
BL              puts

loc_50898
MOV             R0, R5
ADD             SP, SP, #0x94
POP             {R4-R11,PC}

loc_508A4
MOV             R2, #0
ADD             R3, SP, #0x94+var_4
ADD             R10, SP, #0x94+var_74
ADD             R11, SP, #0x94+var_78
STR             R2, [R3,#-0x6C]!
MOV             R0, R6
STR             R2, [SP,#0x94+var_74]
STR             R2, [SP,#0x94+var_78]
STR             R4, [SP,#0x94+var_8C]
LDR             R2, =aInPlace ; "in-place"
STR             R10, [SP,#0x94+var_90]
STR             R11, [SP,#0x94+var_94]
LDR             R1, =aIReneF ; "^i::rEne:*f:*"
BL              sub_593F8
LDR             R3, =optind
ANDS            R7, R0, #1
LDRNE           R2, =sub_4F18C
MOV             R8, R0
LDR             R9, [R3]
LDRNE           R3, =off_7DB9C
STRNE           R2, [R3]
TST             R0, #6
LDRNE           R3, [R4,#termios.c_oflag]
ADD             R5, R6, R9,LSL#2
ORRNE           R3, R3, #1
STRNE           R3, [R4,#termios.c_oflag]

loc_5090C
LDR             R3, [SP,#0x94+var_78]
CMP             R3, #0
BNE             loc_5093C

loc_50918
LDR             R3, [SP,#0x94+var_74]
CMP             R3, #0
BNE             loc_5094C
TST             R8, #0x30
BNE             loc_50998
LDR             R0, [R6,R9,LSL#2]
CMP             R0, #0
BNE             loc_50990
BL              sub_162F0

loc_5093C
MOV             R0, R11
BL              sub_5D2FC
BL              sub_4FAD0
B               loc_5090C

loc_5094C
MOV             R0, R10
BL              sub_5D2FC
BL              sub_61D20
MOV             R11, R0

loc_5095C
MOV             R0, R11
BL              sub_58D24
SUBS            R3, R0, #0
BNE             loc_50978
MOV             R0, R11
BL              sub_5888C
B               loc_50918

loc_50978
STR             R3, [SP,#0x94+ptr]
BL              sub_4F4E8
LDR             R3, [SP,#0x94+ptr]
MOV             R0, R3  ; ptr
BL              free
B               loc_5095C

loc_50990
ADD             R5, R5, #4
BL              sub_4FAD0

loc_50998
LDR             R6, =stdout
LDR             R0, =(asc_6B39D+1) ; s
BL              sub_4F4E8
LDR             R3, [R6]
STR             R5, [R4,#termios.c_cc+0xF]
STR             R3, [R4,#termios.c_cflag]
LDR             R3, [R5]
CMP             R3, #0
BEQ             loc_50A10
LDR             R8, =aSxxxxxx ; "%sXXXXXX"
LDR             R9, =(aSSS_0+6) ; "%s%s"
LDR             R10, =aStandardInput ; "standard input"

loc_509C8
CMP             R7, #0
LDR             R0, [R5]
BNE             loc_50A38
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BNE             loc_509F4
LDRB            R3, [R0,#1]
CMP             R3, #0
BNE             loc_509F4
STR             R10, [R5]
BL              sub_4FD84

loc_509F4
LDR             R3, [R5,#4]!
CMP             R3, #0
BEQ             loc_50A2C
LDR             R3, [R4,#termios.c_cc+0xB]
ADD             R3, R3, #1
STR             R3, [R4,#termios.c_cc+0xB]
B               loc_509C8

loc_50A10
CMP             R7, #0
BEQ             loc_50A24
LDR             R1, =aI_1 ; "-i"
LDR             R0, =aSRequiresAnArg ; "%s requires an argument"
BL              sub_16DBC

loc_50A24
LDR             R3, =aStandardInput ; "standard input"
STR             R3, [R5]

loc_50A2C
BL              sub_4FD84
LDR             R5, [R4,#termios.c_cc+3]
B               loc_50898

loc_50A38
ADD             R1, SP, #0x94+var_6C
BLX             sub_62DFC
CMP             R0, #0
BEQ             loc_50A78
LDR             R0, [R5]
BL              sub_16B80
MOV             R3, #0
MOV             R2, #1
STRB            R3, [R4,#termios.c_cc+4]
STRB            R3, [R4,#termios.c_cc+5]
STRB            R3, [R4,#termios.c_cc+6]
LDR             R3, [R4,#termios.c_cc+7]
STRB            R2, [R4,#termios.c_cc+3]
ADD             R3, R3, R2
STR             R3, [R4,#termios.c_cc+7]
B               loc_509F4

loc_50A78
LDR             R1, [R5]
MOV             R0, R8
BL              sub_177E4
STR             R0, [R4,#termios.c_lflag]
BL              sub_17778
MOV             R11, R0
BL              sub_61CCC
LDR             R1, [SP,#0x94+mode] ; mode
STR             R0, [R4,#termios.c_cflag]
MOV             R0, R11 ; fd
BL              fchmod
LDR             R2, [SP,#0x94+group] ; group
MOV             R0, R11 ; fd
LDR             R1, [SP,#0x94+owner] ; owner
BL              fchown
BL              sub_4FD84
LDR             R0, [R4,#termios.c_cflag] ; stream
BL              fclose
LDR             R2, [SP,#0x94+var_70]
LDR             R3, [R6]
CMP             R2, #0
STR             R3, [R4,#termios.c_cflag]
BEQ             loc_50AF8
LDR             R1, [R5]
MOV             R0, R9
BL              sub_177E4
MOV             R11, R0
MOV             R1, R0
LDR             R0, [R5]
BL              sub_17640
MOV             R0, R11 ; ptr
BL              free

loc_50AF8
LDR             R1, [R5]
LDR             R0, [R4,#termios.c_lflag]
BL              sub_17640
LDR             R0, [R4,#termios.c_lflag] ; ptr
BL              free
MOV             R3, #0
STRB            R3, [R4,#termios.c_lflag]
STRB            R3, [R4,#termios.c_lflag+1]
STRB            R3, [R4,#termios.c_lflag+2]
STRB            R3, [R4,#termios.c_lflag+3]
LDR             R3, [R4,#(dword_7D80C - 0x7D790)]

loc_50B24
CMP             R3, #0
BEQ             loc_509F4
LDR             R2, [R3,#0x14]
STR             R2, [R3,#0x10]
LDR             R2, [R3,#0x1C]
STR             R2, [R3,#0x18]
LDR             R3, [R3]
B               loc_50B24
; End of function sub_5085C

off_50B44 DCD buf
off_50B48 DCD aVersion  ; "--version"
off_50B4C DCD aThisIsNotGnuSe ; "This is not GNU sed version 4.0"
off_50B50 DCD aInPlace  ; "in-place"
off_50B54 DCD aIReneF   ; "^i::rEne:*f:*"
off_50B58 DCD optind
off_50B5C DCD sub_4F18C
off_50B60 DCD off_7DB9C
off_50B64 DCD stdout
off_50B68 DCD asc_6B39D+1 ; ""
off_50B6C DCD aSxxxxxx  ; "%sXXXXXX"
off_50B70 DCD aSSS_0+6  ; "%s%s"
off_50B74 DCD aStandardInput ; "standard input"
off_50B78 DCD aI_1      ; "-i"
off_50B7C DCD aSRequiresAnArg ; "%s requires an argument"



; unsigned int sub_50B80()
sub_50B80
LDR             R3, =dword_7DB98
LDR             R1, [R3]

loc_50B88
LDR             R3, [R1,#8]
LDRB            R0, [R3]
SUB             R2, R0, #9
CMP             R0, #0x20 ; ' '
CMPNE           R2, #4
MOVLS           R2, #1
MOVHI           R2, #0
CMP             R0, #0xA
MOVEQ           R2, #0
ANDNE           R2, R2, #1
CMP             R2, #0
BXEQ            LR
LDR             R2, [R1,#4]
SUB             R2, R2, #1
CMP             R3, R2
BXCS            LR
ADD             R3, R3, #1
STR             R3, [R1,#8]
B               loc_50B88
; End of function sub_50B80

off_50BD4 DCD dword_7DB98



; int sub_50BD8()
sub_50BD8
LDR             R3, =dword_7DB98
MOV             R2, #6
PUSH            {R4,LR}
MOV             R0, #0  ; int
LDR             R4, [R3]
ADD             R1, R4, #0x74 ; 't' ; s
BL              sub_17364
LDRB            R3, [R4,#0x87]
STRB            R3, [R4,#0x64]
POP             {R4,PC}
; End of function sub_50BD8

off_50C00 DCD dword_7DB98



; void *sub_50C04()
sub_50C04
LDR             R3, =dword_7DB98
MOV             R1, #0x20 ; ' ' ; c
LDR             R3, [R3]
LDR             R2, [R3,#0x58] ; n
LDR             R0, [R3,#0x54] ; s
B               memset
; End of function sub_50C04

off_50C1C DCD dword_7DB98



; char *__fastcall sub_50C20(char *src, signed int)
sub_50C20
PUSH            {R4-R8,LR}
SUBS            R7, R1, #0
MOVLE           R5, #0
BLE             loc_50CD0
LDR             R3, =dword_7DB98
MOV             R6, R0
LDR             R4, [R3]
LDR             R3, [R4,#4]
LDR             R0, [R4]
LDR             R2, [R4,#0xC]
ADD             R3, R3, R7
STR             R3, [R4,#4]
ADD             R1, R0, R2
CMP             R3, R1
MOVCC           R5, #0
BCC             loc_50CA8
SUB             R1, R3, R1
ADD             R1, R1, #0x2800
ADD             R1, R1, R2
STR             R1, [R4,#0xC]
BL              sub_174B4
LDR             R5, [R4]
LDR             R3, [R4,#0x50]
STR             R0, [R4]
SUB             R5, R0, R5
ADD             R3, R3, R5
ADD             R6, R6, R5
STR             R3, [R4,#0x50]
LDR             R3, [R4,#8]
ADD             R3, R3, R5
STR             R3, [R4,#8]
LDR             R3, [R4,#4]
ADD             R3, R3, R5
STR             R3, [R4,#4]

loc_50CA8
LDR             R2, [R4,#4]
MOV             R1, R6  ; src
ADD             R0, R6, R7 ; dest
SUB             R2, R2, R7
SUB             R2, R2, R6 ; n
BL              memmove
MOV             R2, R7  ; n
MOV             R1, #0x20 ; ' ' ; c
MOV             R0, R6  ; s
BL              memset

loc_50CD0
MOV             R0, R5
POP             {R4-R8,PC}
; End of function sub_50C20

off_50CD8 DCD dword_7DB98



; int __fastcall sub_50CDC(int result, size_t, int)
sub_50CDC
CMP             R2, #5
PUSH            {R4-R8,LR}
MOV             R6, R0
MOV             R7, R1
MOV             R5, R2
BEQ             loc_50D84
CMP             R2, #0x40 ; '@'
POPEQ           {R4-R8,PC}
CMP             R2, #4
BEQ             loc_50DF4

loc_50D04
LDR             R3, =dword_7DB98
LDR             R8, [R3]
AND             R3, R5, #0xFD
CMP             R3, #1
BNE             loc_50E44
LDR             R2, [R8,#4]
ADD             R3, R6, R7
CMP             R2, R3
SUBEQ           R7, R7, #1
ADD             R0, R7, #0xD
BL              sub_174DC
MOV             R2, R7  ; n
MOV             R4, R0
MOV             R1, R6  ; src
ADD             R0, R0, #0xD ; dest
BL              memcpy

loc_50D44
ADD             R3, R8, #0x1000
TST             R5, #0x20
LDR             R2, [R8]
BIC             R5, R5, #0x20 ; ' '
LDRNE           R6, [R3,#0x25C]
STRB            R5, [R4,#0xC]
STR             R7, [R4,#8]
SUB             R6, R6, R2
LDR             R2, [R3,#0x360]
STR             R6, [R4,#4]
STR             R2, [R4]
STR             R4, [R3,#0x360]
LDR             R3, [R8,#0x1C]
ADD             R3, R3, #1
STR             R3, [R8,#0x1C]
POP             {R4-R8,PC}

loc_50D84
CMP             R1, #1
POPNE           {R4-R8,PC}
LDR             R3, =dword_7DB98
LDR             R8, [R3]
ADD             R4, R8, #0x1000

loc_50D98
LDRB            R3, [R4,#0x254]
CMP             R3, #1
BEQ             loc_50DB8
BCC             loc_50DEC
CMP             R3, #0x40 ; '@'
BNE             loc_50D04
MOV             R3, #1
STRB            R3, [R4,#0x254]

loc_50DB8
LDR             R3, [R4,#0x258]
MOVW            R1, #0x1260
STR             R6, [R4,#0x25C]
ADD             R3, R3, #1
STR             R3, [R4,#0x258]
RSB             R2, R3, #0x100
LDRB            R0, [R6]
ADD             R2, R8, R2
STRB            R0, [R2,R1]

loc_50DDC
CMP             R3, #0x100
POPNE           {R4-R8,PC}
POP             {R4-R8,LR}
B               sub_50F44

loc_50DEC
BL              sub_50F44
B               loc_50D98

loc_50DF4
CMP             R1, #1
POPNE           {R4-R8,PC}
LDR             R3, =dword_7DB98
LDR             R4, [R3]
ADD             R4, R4, #0x1000

loc_50E08
LDRB            R3, [R4,#0x254]
CMP             R3, #1
BEQ             loc_50E3C
BCC             loc_50E2C
CMP             R3, #0x40 ; '@'
BNE             loc_50D04
MOV             R3, #0
STR             R6, [R4,#0x25C]
STRB            R3, [R4,#0x254]

loc_50E2C
LDR             R3, [R4,#0x258]
ADD             R3, R3, #1
STR             R3, [R4,#0x258]
B               loc_50DDC

loc_50E3C
BL              sub_50F44
B               loc_50E08

loc_50E44
MOV             R0, #0x10
BL              sub_174DC
MOV             R4, R0
B               loc_50D44
; End of function sub_50CDC

off_50E54 DCD dword_7DB98



; void *__fastcall sub_50E58(char *dest, unsigned int, int)
sub_50E58
LDR             R3, =dword_7DB98
CMP             R1, R0
PUSH            {R4-R8,LR}
ADDCS           R7, R1, #1
ADDCC           R7, R0, #1
MOVCC           R6, R1
MOVCS           R6, R0
CMP             R2, #2
LDR             R5, [R3]
SUB             R1, R1, R0
ADD             R4, R1, #1
LDR             R8, [R5,#4]
SUB             R8, R8, R7
BEQ             loc_50F30
CMP             R2, #3
BEQ             loc_50F38
CMP             R2, #1
BNE             loc_50EA8

loc_50EA0
MOV             R1, R4
BL              sub_50CDC

loc_50EA8
LDR             R0, [R5]
LDR             R1, [R5,#0x1C]
CMP             R0, R7
SUB             R3, R1, #1
STR             R3, [R5,#0x1C]
BHI             loc_50F28
LDR             R2, [R5,#4]
CMP             R2, R7
MOVCS           R3, #0
MOVCC           R3, #1
CMP             R0, R6
ORRHI           R3, R3, #1
CMP             R2, R6
ORRLS           R3, R3, #1
CMP             R3, #0
BNE             loc_50F28
CMP             R2, R7
STR             R1, [R5,#0x1C]
BLS             loc_50F04
MOV             R2, R8  ; n
MOV             R1, R7  ; src
MOV             R0, R6  ; dest
BL              memmove

loc_50F04
LDR             R1, [R5,#4]
LDR             R3, [R5]
SUB             R4, R1, R4
CMP             R4, R6
STR             R4, [R5,#4]
SUBLS           R6, R4, #1
CMP             R4, R3
MOVLS           R6, R3
STRLS           R3, [R5,#4]

loc_50F28
MOV             R0, R6
POP             {R4-R8,PC}

loc_50F30
MOV             R2, #3
B               loc_50EA0

loc_50F38
MOV             R2, #5
B               loc_50EA0
; End of function sub_50E58

off_50F40 DCD dword_7DB98



; int sub_50F44()
sub_50F44
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
LDR             R0, [R3]
ADD             R4, R0, #0x1000
LDR             R1, [R4,#0x258]
CMP             R1, #0
POPLE           {R4,PC}
LDRB            R2, [R4,#0x254]
SUB             R0, R0, R1
ADD             R0, R0, #0x1340
ADD             R0, R0, #0x20 ; ' '
ORR             R2, R2, #0x20 ; ' '
BL              sub_50CDC
MOV             R3, #0x40 ; '@'
STRB            R3, [R4,#0x254]
MOV             R3, #0
STR             R3, [R4,#0x258]
POP             {R4,PC}
; End of function sub_50F44

off_50F8C DCD dword_7DB98



; int sub_50F90()
sub_50F90
PUSH            {R4,LR}
BL              sub_50F44
LDR             R3, =dword_7DB98
LDR             R2, [R3]
LDR             R3, [R2,#8]
LDR             R1, [R2]
CMP             R3, R1
POPLS           {R4,PC}
LDRB            R1, [R3,#-1]
CMP             R1, #0xA
SUBNE           R3, R3, #1
STRNE           R3, [R2,#8]
POP             {R4,PC}
; End of function sub_50F90

off_50FC4 DCD dword_7DB98



; int sub_50FC8()
sub_50FC8
PUSH            {R4,LR}
BL              sub_50F44
LDR             R3, =dword_7DB98
LDR             R2, [R3]
LDMIB           R2, {R1,R3}
SUB             R1, R1, #1
CMP             R3, R1
POPCS           {R4,PC}
LDRB            R1, [R3]
CMP             R1, #0xA
ADDNE           R3, R3, #1
STRNE           R3, [R2,#8]
POP             {R4,PC}
; End of function sub_50FC8

off_50FFC DCD dword_7DB98



; char *sub_51000(const char *, ...)
sub_51000

arg= -8
varg_r0=  0xC
varg_r1=  0x10
varg_r2=  0x14
varg_r3=  0x18

PUSH            {R0-R3}
PUSH            {R0-R2,R4,R5,LR}
ADD             R3, SP, #0xC+varg_r1
STR             R3, [SP,#0xC+arg]
LDR             R3, =dword_7DB98
LDR             R1, =a7m ; "\x1B[7m"
LDR             R4, [R3]
ADD             R5, R4, #0xCC
MOV             R0, R5  ; dest
BL              strcpy
LDR             R2, [SP,#0xC+arg] ; arg
ADD             R0, R4, #0xD0 ; s
LDR             R1, [SP,#0xC+varg_r0] ; format
BL              vsprintf
LDR             R1, =(a7mSFileIOfIM+0x16) ; src
MOV             R0, R5  ; dest
BL              strcat
MOV             R3, #8
STR             R3, [R4,#0x44]
ADD             SP, SP, #0xC
POP             {R4,R5,LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_51000

off_5105C DCD dword_7DB98
off_51060 DCD a7m       ; "\x1B[7m"
off_51064 DCD a7mSFileIOfIM+0x16 ; "\x1B[m"



; char *__fastcall sub_51068(const char *)
sub_51068

var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x84
ADD             R3, SP, #0x84+var_4
MOV             R2, #0
MOV             R8, #0x5E ; '^'
STRB            R2, [R3,#-0x80]!
MOV             R6, R3
LDRB            R2, [R0]
LDR             R5, =aNull ; "(NULL)"
LDR             R7, =(a7mSFileIOfIM+0x16) ; "\x1B[m"
CMP             R2, #0
LDR             R9, =a7m ; "\x1B[7m"
MOVNE           R5, R0
SUB             R5, R5, #1

loc_510A0
LDRB            R10, [R5,#1]!
CMP             R10, #0
BEQ             loc_5112C
SXTB            R11, R10
CMP             R11, #0
MOVGE           R2, R10
BGE             loc_510D0
MOV             R0, R3  ; dest
MOV             R1, R7  ; src
BL              strcpy
MOV             R2, #0x2E ; '.'
ADD             R3, R0, #3

loc_510D0
CMP             R2, #0x7F
CMPNE           R2, #0x1F
ADD             R4, R3, #1
MOVHI           R4, R3
BHI             loc_510F8
ORR             R2, R2, #0x40 ; '@'
STRB            R8, [R3]
UXTB            R2, R2
CMP             R2, #0x7F
MOVEQ           R2, #0x3F ; '?'

loc_510F8
STRB            R2, [R4]
MOV             R2, #0
CMP             R11, R2
ADD             R3, R4, #1
STRB            R2, [R4,#1]
BGE             loc_51140
MOV             R0, R3  ; dest
MOV             R1, R9  ; src
BL              strcpy
ADD             R3, R4, #5

loc_51120
SUB             R2, R3, R6
CMP             R2, #0x76 ; 'v'
BLE             loc_510A0

loc_5112C
MOV             R1, R6
LDR             R0, =aSIsNotImplemen ; "'%s' is not implemented"
BL              sub_51000
ADD             SP, SP, #0x84
POP             {R4-R11,PC}

loc_51140
CMP             R10, #0xA
MOVEQ           R1, #0x24 ; '$'
ADDEQ           R3, R4, #2
STRBEQ          R1, [R4,#1]
STRBEQ          R2, [R4,#2]
B               loc_51120
; End of function sub_51068

off_51158 DCD aNull     ; "(NULL)"
off_5115C DCD a7mSFileIOfIM+0x16 ; "\x1B[m"
off_51160 DCD a7m       ; "\x1B[7m"
off_51164 DCD aSIsNotImplemen ; "'%s' is not implemented"



; int sub_51168(const char *, ...)
sub_51168

var_4= -4
varg_r0=  8
varg_r1=  0xC
varg_r2=  0x10
varg_r3=  0x14

PUSH            {R0-R3}
LDR             R3, =dword_7DB98
PUSH            {R0,R1,R4,LR}
ADD             R2, SP, #8+varg_r1 ; arg
LDR             R4, [R3]
LDR             R1, [SP,#8+varg_r0] ; format
ADD             R0, R4, #0xCC ; s
STR             R2, [SP,#8+var_4]
BL              vsprintf
MOV             R3, #1
STR             R3, [R4,#0x44]
ADD             SP, SP, #8
POP             {R4,LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_51168

off_511A4 DCD dword_7DB98



; unsigned __int8 *__fastcall sub_511A8(unsigned __int8 *, int, int, int)
sub_511A8
PUSH            {R3-R11,LR}
MOV             R6, R3
LDR             R3, =dword_7DB98
MOV             R9, R1
MOV             R10, R2
MOV             R5, R0
LDR             R11, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
LDR             R8, [R3]

loc_511C8
CMP             R6, #1
MOV             R7, R5
LDRB            R1, [R7],R10
LDRB            R4, [R5,R10]
BNE             loc_51240
SUB             R3, R4, #9
CMP             R4, #0x20 ; ' '
CMPNE           R3, #4
BHI             loc_51200
SUB             R0, R4, #0xA
CLZ             R0, R0
MOV             R0, R0,LSR#5

loc_511F8
CMP             R0, #0
BEQ             loc_512D4

loc_51200
CMP             R4, #0xA
BNE             loc_51214
CMP             R9, #1
BEQ             loc_512D4
MOV             R9, #1

loc_51214
CMN             R10, #1
BEQ             loc_51234
LDR             R3, [R8,#4]
SUB             R3, R3, #1
CMP             R5, R3

loc_51228
BCS             loc_512D4
MOV             R5, R7
B               loc_511C8

loc_51234
LDR             R3, [R8]
CMP             R3, R5
B               loc_51228

loc_51240
CMP             R6, #2
BNE             loc_5126C
SUB             R3, R1, #9
CMP             R1, #0x20 ; ' '
CMPNE           R3, #4
BHI             loc_51214
SUB             R0, R1, #0xA
CLZ             R0, R0
MOV             R0, R0,LSR#5

loc_51264
MOV             R4, R1
B               loc_511F8

loc_5126C
CMP             R6, #3
BNE             loc_5128C
SUB             R0, R1, #9
CMP             R1, #0x20 ; ' '
CMPNE           R0, #4
MOVLS           R0, #1
MOVHI           R0, #0
B               loc_51264

loc_5128C
CMP             R6, #4
BNE             loc_512A8
MOV             R1, R4
MOV             R0, R11
BL              strchrnul
LDRB            R0, [R0]
B               loc_511F8

loc_512A8
CMP             R6, #5
BNE             loc_512D4
SUB             R3, R4, #0x30 ; '0'
CMP             R3, #9
BLS             loc_51214
ORR             R3, R4, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R3, #0x19
BLS             loc_51200
CMP             R4, #0x5F ; '_'
BEQ             loc_51214

loc_512D4
MOV             R0, R5
POP             {R3-R11,PC}
; End of function sub_511A8

off_512DC DCD dword_7DB98
off_512E0 DCD asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"



; int __fastcall sub_512E4(unsigned int)
sub_512E4
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
LDR             R3, [R3]
LDR             R4, [R3]
CMP             R4, R0
MOVCS           R4, R0
BCS             loc_51318
SUB             R2, R0, R4
MOV             R1, #0xA
MOV             R0, R4
BL              memrchr
CMP             R0, #0
ADDNE           R4, R0, #1

loc_51318
MOV             R0, R4
POP             {R4,PC}
; End of function sub_512E4

off_51320 DCD dword_7DB98



; int __fastcall sub_51324(unsigned int)
sub_51324
PUSH            {R4,LR}
BL              sub_512E4
LDR             R3, =dword_7DB98
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, R0
BCS             loc_5134C
LDRB            R3, [R0,#-1]
CMP             R3, #0xA
SUBEQ           R0, R0, #1

loc_5134C
POP             {R4,LR}
B               sub_512E4
; End of function sub_51324

off_51354 DCD dword_7DB98



; int sub_51358()
sub_51358
PUSH            {R4,LR}
BL              sub_50F44
LDR             R3, =dword_7DB98
LDR             R4, [R3]
LDR             R0, [R4,#8]
BL              sub_51324
STR             R0, [R4,#8]
POP             {R4,PC}
; End of function sub_51358

off_51378 DCD dword_7DB98



; unsigned __int8 *__fastcall sub_5137C(unsigned int, int)
sub_5137C
PUSH            {R4-R8,LR}
MOV             R8, R1
BL              sub_512E4
MOV             R5, #0
MOV             R6, R0
LDR             R3, =dword_7DB98
LDR             R7, [R3]

loc_51398
CMP             R5, R8
MOV             R0, R6
POPGE           {R4-R8,PC}
LDR             R3, [R7,#4]
CMP             R3, R6
POPLS           {R4-R8,PC}
LDRB            R3, [R6],#1
CMP             R3, #0xA
POPEQ           {R4-R8,PC}
CMP             R3, #9
BNE             loc_513E4
LDR             R1, [R7,#0x5C]
MOV             R0, R5
SUB             R4, R1, #1
BLX             sub_161AC
SUB             R1, R4, R1
ADD             R1, R1, R5

loc_513DC
ADD             R5, R1, #1
B               loc_51398

loc_513E4
CMP             R3, #0x7F
CMPNE           R3, #0x1F
ADD             R1, R5, #1
MOVHI           R1, R5
B               loc_513DC
; End of function sub_5137C

off_513F8 DCD dword_7DB98



; int sub_513FC()
sub_513FC
PUSH            {R4,LR}
BL              sub_50F44
LDR             R3, =dword_7DB98
LDR             R4, [R3]
LDR             R0, [R4,#8]
BL              sub_512E4
STR             R0, [R4,#8]
POP             {R4,PC}
; End of function sub_513FC

off_5141C DCD dword_7DB98



; void *__fastcall sub_51420(const void *)
sub_51420
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
LDR             R3, [R3]
LDR             R3, [R3,#4]
SUB             R4, R3, #1
CMP             R4, R0
MOVLS           R4, R0
BLS             loc_51458
SUB             R2, R3, R0
MOV             R1, #0xA ; c
SUB             R2, R2, #1 ; n
BL              memchr
CMP             R0, #0
MOVNE           R4, R0

loc_51458
MOV             R0, R4
POP             {R4,PC}
; End of function sub_51420

off_51460 DCD dword_7DB98



; _BYTE *__fastcall sub_51464(const void *)
sub_51464
PUSH            {R4,LR}
BL              sub_51420
LDR             R3, =dword_7DB98
LDR             R3, [R3]
LDR             R3, [R3,#4]
SUB             R3, R3, #1
CMP             R0, R3
POPCS           {R4,PC}
LDRB            R3, [R0]
CMP             R3, #0xA
ADDEQ           R0, R0, #1
POP             {R4,PC}
; End of function sub_51464

off_51494 DCD dword_7DB98



; _BYTE *__fastcall sub_51498(int)
sub_51498
LDR             R3, =dword_7DB98
PUSH            {R4,LR}
MOV             R4, R0
LDR             R3, [R3]
LDR             R0, [R3]

loc_514AC
CMP             R4, #1
POPLE           {R4,PC}
BL              sub_51464
SUB             R4, R4, #1
B               loc_514AC
; End of function sub_51498

off_514C0 DCD dword_7DB98



; char *__fastcall sub_514C4(char *, char *s, int, int)
sub_514C4
PUSH            {R4-R8,LR}
MOV             R5, R2
MOV             R4, R0
MOV             R0, R1  ; s
MOV             R7, R1
MOV             R8, R3
BL              strlen
CMP             R5, #1
MOV             R6, R0
BNE             loc_51544
LDR             R3, =dword_7DB98
CMP             R8, #0
LDR             R3, [R3]
LDR             R5, [R3,#4]
SUB             R5, R5, #1
BNE             loc_51510
MOV             R0, R4
BL              sub_51464
MOV             R5, R0

loc_51510
CMP             R4, R5
BCC             loc_51524

loc_51518
MOV             R4, #0

loc_5151C
MOV             R0, R4
POP             {R4-R8,PC}

loc_51524               ; n
MOV             R2, R6
MOV             R1, R7  ; s2
MOV             R0, R4  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_5151C
ADD             R4, R4, #1
B               loc_51510

loc_51544
CMN             R5, #1
BNE             loc_51518
LDR             R3, =dword_7DB98
CMP             R8, #0
LDR             R3, [R3]
LDR             R5, [R3]
BNE             loc_5156C
MOV             R0, R4
BL              sub_51324
MOV             R5, R0

loc_5156C
SUB             R4, R4, R6

loc_51570
CMP             R4, R5
BCC             loc_51518
MOV             R2, R6  ; n
MOV             R1, R7  ; s2
MOV             R0, R4  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_5151C
SUB             R4, R4, #1
B               loc_51570
; End of function sub_514C4

off_51598 DCD dword_7DB98



; _BYTE *sub_5159C()
sub_5159C
PUSH            {R4,LR}
BL              sub_50F44
LDR             R3, =dword_7DB98
LDR             R4, [R3]
LDR             R0, [R4,#8]
BL              sub_51464
STR             R0, [R4,#8]
POP             {R4,PC}
; End of function sub_5159C

off_515BC DCD dword_7DB98



; int __fastcall sub_515C0(const void *, const void *, int, const void *)
sub_515C0
CMP             R1, R0
PUSH            {R4-R8,LR}
MOVCC           R3, R0
MOV             R4, R0
MOVCC           R4, R1
MOVCC           R1, R3
MOV             R0, R1
MOV             R5, #0
BL              sub_51420
LDR             R3, =dword_7DB98
MOV             R7, R0
LDR             R6, [R3]

loc_515F0
CMP             R4, R7
BHI             loc_51608
LDR             R3, [R6,#4]
SUB             R3, R3, #1
CMP             R4, R3
BLS             loc_51610

loc_51608
MOV             R0, R5
POP             {R4-R8,PC}

loc_51610
MOV             R0, R4
BL              sub_51420
LDRB            R3, [R0]
ADD             R4, R0, #1
CMP             R3, #0xA
ADDEQ           R5, R5, #1
B               loc_515F0
; End of function sub_515C0

off_5162C DCD dword_7DB98



; const char *__fastcall sub_51630(const char *, int *, int)
sub_51630

var_8= -8
var_4= -4

MOV             R3, #0xFFFFFFFF
PUSH            {R0-R2,R4-R7,LR}
MOV             R5, R1
STR             R3, [R1]
MOV             R4, R0
LDRB            R1, [R0]
CMP             R1, #0x2E ; '.'
BNE             loc_51678
LDR             R3, =dword_7DB98
ADD             R4, R0, #1
LDR             R6, [R3]
LDR             R0, [R6,#8]

loc_51660
BL              sub_512E4
MOV             R1, R0
LDR             R0, [R6]
BL              sub_515C0
STR             R0, [R5]
B               loc_516E4

loc_51678
CMP             R1, #0x2F ; '/'
BNE             loc_516F0
ADD             R6, R0, #1
MOV             R0, R6
BL              strchrnul
SUB             R1, R0, R6
MOV             R4, R0
MOV             R0, R6
BL              sub_1751C
LDRB            R3, [R4]
MOV             R1, R0  ; s
MOV             R6, R0
CMP             R3, #0x2F ; '/'
LDR             R3, =dword_7DB98
ADDEQ           R4, R4, #1
LDR             R7, [R3]
MOV             R3, #1
MOV             R2, R3
LDR             R0, [R7,#8] ; int
BL              sub_514C4
SUBS            R1, R0, #0
BEQ             loc_516DC
LDR             R0, [R7]
BL              sub_515C0
STR             R0, [R5]

loc_516DC               ; ptr
MOV             R0, R6
BL              free

loc_516E4
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_516F0
CMP             R1, #0x24 ; '$'
BNE             loc_51710
LDR             R3, =dword_7DB98
ADD             R4, R0, #1
LDR             R6, [R3]
LDR             R0, [R6,#4]
SUB             R0, R0, #1 ; s
B               loc_51660

loc_51710
SUB             R1, R1, #0x30 ; '0'
CMP             R1, #9
BHI             loc_516E4
ADD             R3, SP, #0xC+var_8
MOV             R2, R5
LDR             R1, =aDN ; "%d%n"
BL              sscanf
LDR             R3, [SP,#0xC+var_8]
ADD             R4, R4, R3
B               loc_516E4
; End of function sub_51630

off_51738 DCD dword_7DB98
off_5173C DCD aDN       ; "%d%n"



; void *sub_51740()
sub_51740
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
MOV             R5, #0
LDR             R3, [R3]
LDR             R4, [R3,#0x2C]
LDR             R0, [R3,#0x50]
SUB             R4, R4, #2

loc_5175C
CMP             R5, R4
BCC             loc_5176C
POP             {R4-R6,LR}
B               sub_51420

loc_5176C
BL              sub_51464
ADD             R5, R5, #1
B               loc_5175C
; End of function sub_51740

off_51778 DCD dword_7DB98



; unsigned int __fastcall sub_5177C(int, int)
sub_5177C
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R6, R1
BL              sub_50F44
LDR             R3, =dword_7DB98
LDR             R4, [R3]

loc_51794
CMP             R5, #0
LDR             R0, [R4,#0x50]
BGT             loc_517CC
LDR             R3, [R4,#8]
CMP             R3, R0
STRCC           R0, [R4,#8]
BL              sub_51740
LDR             R3, [R4,#8]
CMP             R3, R0
BLS             loc_517C4
BL              sub_512E4
STR             R0, [R4,#8]

loc_517C4
POP             {R4-R6,LR}
B               sub_50B80

loc_517CC
CMN             R6, #1
BNE             loc_517E4
BL              sub_51324

loc_517D8
STR             R0, [R4,#0x50]
SUB             R5, R5, #1
B               loc_51794

loc_517E4
BL              sub_51464
B               loc_517D8
; End of function sub_5177C

off_517EC DCD dword_7DB98



; void *sub_517F0()
sub_517F0
PUSH            {R4,LR}
BL              sub_50F44
LDR             R3, =dword_7DB98
LDR             R4, [R3]
LDR             R0, [R4,#8]
BL              sub_51420
STR             R0, [R4,#8]
POP             {R4,PC}
; End of function sub_517F0

off_51810 DCD dword_7DB98



; int __fastcall sub_51814(int, char *, int)
sub_51814
CMP             R0, #0
PUSH            {R4-R6,LR}
BNE             loc_51834
MOV             R4, #0xFFFFFFFE
LDR             R0, =aNoCurrentFilen ; "No current filename"
BL              sub_51000

loc_5182C
MOV             R0, R4
POP             {R4-R6,PC}

loc_51834
MOV             R4, R1
MOV             R5, R2
MOV             R1, #0x41 ; 'A'
MOVW            R2, #0x1B6
BL              open64
SUBS            R6, R0, #0
MOVLT           R4, #0xFFFFFFFF
BLT             loc_5182C
SUB             R5, R5, R4
MOV             R1, R4  ; buf
ADD             R5, R5, #1
MOV             R2, R5  ; n
BL              sub_17FB8
MOV             R4, R0
MOV             R2, R0
MOV             R3, R0,ASR#31
MOV             R0, R6
BL              ftruncate64
CMP             R5, R4
MOV             R0, R6  ; fd
MOVNE           R4, #0
BL              close
B               loc_5182C
; End of function sub_51814

off_51890 DCD aNoCurrentFilen ; "No current filename"



; int sub_51894()
sub_51894
PUSH            {R4,LR}
BL              sub_177D8
LDR             R3, =dword_7DB98
POP             {R4,LR}
LDR             R0, [R3]
ADD             R0, R0, #0x74 ; 't' ; termios_p
B               sub_1729C
; End of function sub_51894

off_518B0 DCD dword_7DB98



; int __fastcall sub_518B4(int)
sub_518B4
LDR             R3, =stdout
LDR             R1, [R3]
B               fputs_unlocked
; End of function sub_518B4

off_518C0 DCD stdout



; int __fastcall sub_518C4(int, int)
sub_518C4

s= -0x28

LDR             R3, =dword_7DB98
BIC             R2, R0, R0,ASR#31
PUSH            {LR}
SUB             SP, SP, #0x2C
LDR             R0, [R3]
LDR             R3, [R0,#0x2C]
CMP             R3, R2
SUBLS           R2, R3, #1
BIC             R3, R1, R1,ASR#31
LDR             R1, [R0,#0x30]
ADD             R2, R2, #1
ADD             R0, SP, #0x2C+s ; s
CMP             R1, R3
SUBLS           R3, R1, #1
LDR             R1, =aUUh ; "\x1B[%u;%uH"
ADD             R3, R3, #1
BL              sprintf
ADD             R0, SP, #0x2C+s
BL              sub_518B4
ADD             SP, SP, #0x2C ; ','
POP             {PC}
; End of function sub_518C4

off_51918 DCD dword_7DB98
off_5191C DCD aUUh      ; "\x1B[%u;%uH"



; int sub_51920()
sub_51920
LDR             R3, =dword_7DB98
MOV             R1, #0
PUSH            {R4,LR}
LDR             R3, [R3]
LDR             R0, [R3,#0x2C]
SUB             R0, R0, #1
BL              sub_518C4
LDR             R0, =(aU0hK+7) ; "\x1B[K"
POP             {R4,LR}
B               sub_518B4
; End of function sub_51920

off_51948 DCD dword_7DB98
off_5194C DCD aU0hK+7   ; "\x1B[K"



; int sub_51950()
sub_51950
PUSH            {R4-R6,LR}
BL              sub_177D8
LDR             R3, =dword_7DB98
LDR             R5, =dword_7DB94
LDR             R4, [R3]
ADD             R4, R4, #0xBC

loc_51968
MOV             R2, #0xFFFFFFFF
MOV             R1, R4
MOV             R0, #0  ; fd
BL              sub_60068
CMN             R0, #1
POPNE           {R4-R6,PC}
LDR             R3, [R5]
LDR             R3, [R3]
CMP             R3, #0xB
BEQ             loc_51968
BL              sub_51920
BL              sub_51894
LDR             R0, =aCanTReadUserIn ; "can't read user input"
BL              sub_16DBC
; End of function sub_51950

off_519A0 DCD dword_7DB98
off_519A4 DCD dword_7DB94
off_519A8 DCD aCanTReadUserIn ; "can't read user input"



; char *__fastcall sub_519AC(char *result, char *dest, int)
sub_519AC
CMP             R0, R1
MOVHI           R3, R0
MOVHI           R0, R1  ; dest
MOVHI           R1, R3
CMP             R2, #0
BGT             loc_519E0
LDRB            R3, [R0]
CMP             R3, #0xA
MOVNE           R3, R0
BXEQ            LR

loc_519D4
ADD             R2, R3, #1
CMP             R2, R1
BLS             loc_519E8

loc_519E0
MOV             R2, #1
B               sub_50E58

loc_519E8
LDRB            R12, [R3,#1]
CMP             R12, #0xA
MOVNE           R3, R2
BNE             loc_519D4
MOV             R1, R3
B               loc_519E0
; End of function sub_519AC




; int __fastcall sub_51A00(const char *, char *, int)
sub_51A00

var_58= -0x58
var_38= -0x38

LDR             R3, =dword_7DB98
PUSH            {R4-R10,LR}
SUB             SP, SP, #0x68
MOV             R8, R0
MOV             R5, R2
LDR             R3, [R3]
LDR             R4, [R3]
CMP             R4, R1
MOVCC           R4, R1
LDR             R1, [R3,#4]
CMP             R4, R1
MOVCS           R4, R1
MOV             R1, #0
BL              open64
SUBS            R10, R0, #0
BGE             loc_51A5C
CMP             R5, #0
BNE             loc_51A54
MOV             R1, R8
LDR             R0, =aSM ; "'%s' %m"
BL              sub_51000

loc_51A54
MOV             R5, #0xFFFFFFFF
B               loc_51A9C

loc_51A5C
MOV             R1, SP
BLX             sub_62E08
CMP             R0, #0
MOVLT           R1, R8
LDRLT           R0, =aSM ; "'%s' %m"
BLT             loc_51A8C
LDR             R3, [SP,#0x68+var_58]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BEQ             loc_51AA8
LDR             R0, =aSIsNotARegular ; "'%s' is not a regular file"
MOV             R1, R8

loc_51A8C
MOV             R5, #0xFFFFFFFF
BL              sub_51000

loc_51A94               ; fd
MOV             R0, R10
BL              close

loc_51A9C
MOV             R0, R5
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R10,PC}

loc_51AA8
LDRD            R6, R7, [SP,#0x68+var_38]
MOV             R2, #0x7FFFFFFE
MOV             R3, #0
MOV             R0, R4  ; src
CMP             R2, R6
SBCS            R3, R3, R7
MOVLT           R6, #0x7FFFFFFF
MOV             R1, R6
BL              sub_50C20
ADD             R4, R4, R0
MOV             R2, R6  ; nbytes
MOV             R1, R4  ; buf
MOV             R0, R10 ; fd
BL              sub_18050
SUBS            R5, R0, #0
BGE             loc_51B0C
MOV             R1, R8
LDR             R0, =aSM ; "'%s' %m"
BL              sub_51000
SUB             R1, R6, #1
MOV             R2, #0
ADD             R1, R4, R1
MOV             R0, R4  ; dest
BL              sub_50E58
B               loc_51A94

loc_51B0C
CMP             R6, R5
BLE             loc_51A94
SUB             R1, R6, #1
MOV             R2, #0
ADD             R1, R4, R1
ADD             R0, R4, R5 ; dest
BL              sub_50E58
MOV             R1, R8
LDR             R0, =aCanTReadS ; "can't read '%s'"
BL              sub_51000
B               loc_51A94
; End of function sub_51A00

off_51B38 DCD dword_7DB98
off_51B3C DCD aSM       ; "'%s' %m"
off_51B40 DCD aSIsNotARegular ; "'%s' is not a regular file"
off_51B44 DCD aCanTReadS ; "can't read '%s'"



; unsigned __int8 *__fastcall sub_51B48(unsigned __int8 *, unsigned int *, _DWORD *)
sub_51B48

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R9, R1
MOV             R10, R0
MOV             R8, R2
BL              sub_512E4
LDR             R3, =dword_7DB98
MOV             R7, R0
LDR             R4, [R3]
LDR             R1, [R4,#0x50]
LDR             R5, [R4,#0x2C]
CMP             R1, R0
SUB             R5, R5, #1
BLS             loc_51C2C
BL              sub_515C0

loc_51B80
MOV             R11, R5,LSR#1
STR             R7, [R4,#0x50]
CMP             R11, R0
MOVCC           R6, #0
BCC             loc_51C1C

loc_51B94
LDR             R0, [R4,#0x50]
MOV             R11, #0

loc_51B9C
CMP             R0, R7
CMPNE           R5, R11
BHI             loc_51C6C
MOV             R6, R0
MOV             R5, #0

loc_51BB0
CMP             R10, R6
BHI             loc_51C78

loc_51BB8
LDR             R3, [R4,#0x40]
CMP             R3, R5
LDR             R3, [R4,#0x30]
STRGT           R5, [R4,#0x40]
LDR             R2, [R4,#0x40]
ADD             R2, R3, R2
CMP             R2, R5
RSBLS           R3, R3, #1
ADDLS           R3, R3, R5
STRLS           R3, [R4,#0x40]
CMP             R10, R7
BNE             loc_51BF8
LDRB            R3, [R10]
CMP             R3, #9
MOVEQ           R3, #0
STREQ           R3, [R4,#0x40]

loc_51BF8
LDR             R3, [R4,#0x40]
STR             R11, [R9]
SUB             R5, R5, R3
STR             R5, [R8]
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_51C10
ADD             R6, R6, #1
BL              sub_51324
STR             R0, [R4,#0x50]

loc_51C1C
CMP             R6, R11
LDR             R0, [R4,#0x50]
BNE             loc_51C10
B               loc_51B94

loc_51C2C
BL              sub_51740
CMP             R7, R0
BLS             loc_51B94
MOV             R1, R7
BL              sub_515C0
CMP             R0, R5,LSR#1
MOVLS           R11, #0
SUBLS           R6, R0, #1
BHI             loc_51B80

loc_51C50
CMP             R6, R11
LDR             R0, [R4,#0x50]
BLE             loc_51B94
BL              sub_51464
ADD             R11, R11, #1
STR             R0, [R4,#0x50]
B               loc_51C50

loc_51C6C
BL              sub_51464
ADD             R11, R11, #1
B               loc_51B9C

loc_51C78
LDRB            R3, [R6],#1
CMP             R3, #0xA
BEQ             loc_51BB8
CMP             R3, #9
BNE             loc_51CB4
LDR             R1, [R4,#0x5C]
MOV             R0, R5
SUB             R3, R1, #1
STR             R3, [SP,#0xC+var_8]
BLX             sub_161AC
LDR             R3, [SP,#0xC+var_8]
SUB             R1, R3, R1
ADD             R1, R1, R5

loc_51CAC
ADD             R5, R1, #1
B               loc_51BB0

loc_51CB4
CMP             R3, #0x7F
CMPNE           R3, #0x1F
ADD             R1, R5, #1
MOVHI           R1, R5
B               loc_51CAC
; End of function sub_51B48

off_51CC8 DCD dword_7DB98



; int __fastcall sub_51CCC(int)
sub_51CCC

var_10= -0x10
var_C= -0xC
var_8= -8

LDR             R3, =dword_7DB98
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
STR             R0, [SP,#0x14+var_10]
MOV             R9, #0
LDR             R4, [R3]
ADD             R2, R4, #0x3C ; '<'
ADD             R1, R4, #0x38 ; '8'
LDR             R0, [R4,#8]
BL              sub_51B48
LDR             R8, [R4,#0x50]

loc_51CF8
LDR             R3, [R4,#0x2C]
SUB             R3, R3, #1
CMP             R3, R9
BHI             loc_51D20
LDRD            R0, R1, [R4,#0x38]
BL              sub_518C4
LDR             R3, [R4,#0x40]
STR             R3, [R4,#0x6C]
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_51D20
LDR             R7, [R4,#0x40]
ADD             R6, R4, #0x214
MOV             R1, R8
MOV             R2, #0
MOV             R5, #0x7E ; '~'

loc_51D34
LDR             R3, [R4,#0x30]
LDR             R0, [R4,#0x5C]
ADD             R3, R3, R0
CMP             R2, R3
BCC             loc_51DD4

loc_51D48
CMP             R2, R7
LDR             R3, [R4,#0x30]
MOVLT           R0, R2
MOVGE           R0, R7
ADD             R6, R6, R0
SUB             R0, R2, R0
CMP             R3, R0
BLS             loc_51D78
SUB             R2, R3, R0 ; n
MOV             R1, #0x20 ; ' ' ; c
ADD             R0, R6, R0 ; s
BL              memset

loc_51D78
LDR             R5, [R4,#4]
CMP             R8, R5
BCS             loc_51DA0
SUB             R2, R5, R8 ; n
MOV             R0, R8  ; s
MOV             R1, #0xA ; c
BL              memchr
CMP             R0, #0
SUBEQ           R0, R5, #1
ADD             R8, R0, #1

loc_51DA0
LDR             R5, [R4,#0x30]
LDR             R3, [R4,#0x54]
SUB             R2, R5, #1
MOV             R7, R2
MLA             R5, R9, R5, R3
LDR             R3, [SP,#0x14+var_10]
CMP             R3, #0
MOVEQ           R10, R3
BEQ             loc_51EE8
MOV             R3, R2
LDR             R1, [SP,#0x14+var_10]
MOV             R10, #0
B               loc_51F08

loc_51DD4
LDR             R3, [R4,#4]
CMP             R3, R1
BLS             loc_51ECC
LDRB            R5, [R1]
ADD             R3, R1, #1
CMP             R5, #0xA
BEQ             loc_51D48
TST             R5, #0x80
ADD             R0, R2, #1
MOVNE           R5, #0x2E ; '.'
ADD             R1, R6, R2
CMP             R5, #0x7F
CMPNE           R5, #0x1F
BHI             loc_51E74
CMP             R5, #9
MOVEQ           R5, R1
BEQ             loc_51E44
CMP             R5, #0x7F
MOV             R2, #0x5E ; '^'
ADDNE           R5, R5, #0x40 ; '@'
STRB            R2, [R1]
UXTBNE          R5, R5
MOVNE           R2, R0
MOVEQ           R2, R0
MOVEQ           R5, #0x3F ; '?'
B               loc_51E74

loc_51E3C
MOV             R2, #0x20 ; ' '
STRB            R2, [R5],#1

loc_51E44
LDR             R10, [R4,#0x5C]
SUB             R2, R5, R6
MOV             R0, R2
STR             R3, [SP,#0x14+var_8]
STR             R2, [SP,#0x14+var_C]
MOV             R1, R10
SUB             R10, R10, #1
BLX             sub_161AC
CMP             R1, R10
LDRD            R2, R3, [SP,#0x14+var_C]
BNE             loc_51E3C
MOV             R5, #0x20 ; ' '

loc_51E74
ADD             R10, R2, #1
STRB            R5, [R6,R2]
LDR             R11, [R4,#0x5C]
CMP             R10, R7
MOVLT           R2, R10
MOVGE           R2, R7
CMP             R11, R2
MOVGT           R2, R10
BGT             loc_51EB8
MOV             R2, R10 ; n
ADD             R1, R6, R11 ; src
MOV             R0, R6  ; dest
STR             R3, [SP,#0x14+var_C]
BL              memmove
LDR             R3, [SP,#0x14+var_C]
SUB             R2, R10, R11
SUB             R7, R7, R11

loc_51EB8
LDR             R1, [R4,#4]
CMP             R1, R3
BLS             loc_51D48
MOV             R1, R3
B               loc_51D34

loc_51ECC
MOV             R3, R1
B               loc_51E74

loc_51ED4
LDRB            R1, [R6,R10]
LDRB            R3, [R5,R10]
CMP             R1, R3
BNE             loc_51F6C
ADD             R10, R10, #1

loc_51EE8
CMP             R10, R2
BLE             loc_51ED4
MOV             R3, R2
MOV             R1, #0

loc_51EF8
LDR             R12, [R4,#0x40]
LDR             R0, [R4,#0x6C]
CMP             R12, R0
MOVNE           R1, #1

loc_51F08
CMP             R3, R2
MOVCS           R3, R2
CMP             R10, R3
MOVLE           R7, R3
MOVGT           R10, #0
CMP             R1, #0
BEQ             loc_51F64
SUB             R7, R7, R10
ADD             R5, R5, R10
ADD             R7, R7, #1
ADD             R1, R6, R10 ; src
MOV             R2, R7  ; n
MOV             R0, R5  ; dest
BL              memcpy
MOV             R1, R10
MOV             R0, R9
BL              sub_518C4
LDR             R3, =stdout
MOV             R2, #1  ; n
MOV             R1, R7  ; size
MOV             R0, R5  ; ptr
LDR             R3, [R3] ; s
BL              fwrite

loc_51F64
ADD             R9, R9, #1
B               loc_51CF8

loc_51F6C
MOV             R3, R2

loc_51F70
LDRB            R0, [R6,R3]
LDRB            R1, [R5,R3]
CMP             R0, R1
BNE             loc_51F8C
SUB             R3, R3, #1
CMP             R10, R3
BLE             loc_51F70

loc_51F8C
MOV             R1, #1
B               loc_51EF8
; End of function sub_51CCC

off_51F94 DCD dword_7DB98
off_51F98 DCD stdout



; char *__fastcall sub_51F9C(char *src, int, int)
sub_51F9C
CMP             R1, #0x16
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, R2
BNE             loc_5201C
MOV             R1, #1
BL              sub_50C20
MOV             R3, #0x5E ; '^'
MOV             R7, R0
STRB            R3, [R4,R0]
ADD             R6, R4, R0
MOV             R0, #0
BL              sub_51CCC
BL              sub_51950
CMP             R5, #2
STRB            R0, [R4,R7]
BEQ             loc_52000
CMP             R5, #3
BEQ             loc_52014
CMP             R5, #1
MOVEQ           R2, #0
BEQ             loc_52004

loc_51FF4
ADD             R4, R6, #1

loc_51FF8
MOV             R0, R4
POP             {R4-R8,PC}

loc_52000
MOV             R2, R5

loc_52004
MOV             R1, #1
MOV             R0, R6
BL              sub_50CDC
B               loc_51FF4

loc_52014
MOV             R2, #4
B               loc_52004

loc_5201C
LDR             R3, =dword_7DB98
CMP             R1, #0x1B
MOV             R6, R1
LDR             R7, [R3]
BNE             loc_52064
MOV             R5, #0
STR             R5, [R7,#0x18]
BL              sub_50F44
STR             R5, [R7,#0x28]
STR             R5, [R7,#0x48]
LDRB            R3, [R4,#-1]
CMP             R3, #0xA
BEQ             loc_51FF8
LDR             R2, [R7,#8]
LDR             R3, [R7]
CMP             R2, R3
SUBHI           R4, R4, #1
B               loc_51FF8

loc_52064
LDRB            R3, [R7,#0x64]
CMP             R3, R1
BEQ             loc_5207C
CMP             R1, #0x7F
CMPNE           R1, #8
BNE             loc_5209C

loc_5207C
LDR             R3, [R7]
CMP             R3, R4
BCS             loc_51FF8
SUB             R1, R4, #1
MOV             R2, #3
MOV             R0, R1  ; dest
POP             {R4-R8,LR}
B               sub_50E58

loc_5209C
CMP             R1, #0xD
CMPNE           R1, #0xA
BNE             loc_520B0
MOV             R6, #0xA
BL              sub_50F44

loc_520B0
CMP             R5, #2
BEQ             loc_520E8
CMP             R5, #3
BEQ             loc_520FC
CMP             R5, #1
MOVEQ           R2, #0
BEQ             loc_520EC

loc_520CC               ; src
MOV             R0, R4
MOV             R1, #1
BL              sub_50C20
STRB            R6, [R4,R0]
ADD             R0, R0, #1
ADD             R4, R4, R0
B               loc_51FF8

loc_520E8
MOV             R2, R5

loc_520EC
MOV             R1, #1
MOV             R0, R4
BL              sub_50CDC
B               loc_520CC

loc_520FC
MOV             R2, #4
B               loc_520EC
; End of function sub_51F9C

off_52104 DCD dword_7DB98



; int __fastcall sub_52108(const char *)
sub_52108
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, [R3]
LDR             R0, [R4] ; ptr
BL              free
MOV             R0, #0x2800
STR             R0, [R4,#0xC]
BL              sub_174DC
STR             R0, [R4]
STR             R0, [R4,#4]
STR             R0, [R4,#8]
STR             R0, [R4,#0x50]
LDR             R0, [R4,#0x4C] ; ptr
CMP             R0, R5
BEQ             loc_52158
BL              free
MOV             R0, R5
BL              sub_174F8
STR             R0, [R4,#0x4C]

loc_52158
MOV             R2, #1
LDR             R1, [R4]
MOV             R0, R5
BL              sub_51A00
SUBS            R6, R0, #0
BGE             loc_52180
MOV             R2, #0
MOV             R1, #0xA
LDR             R0, [R4] ; src
BL              sub_51F9C

loc_52180
ADD             R5, R4, #0x1000

loc_52184               ; ptr
LDR             R0, [R5,#0x360]
CMP             R0, #0
BNE             loc_521A4
MOV             R3, #0xFFFFFFFF
STR             R0, [R4,#0x1C]
STR             R3, [R4,#0x20]
MOV             R0, R6
POP             {R4-R6,PC}

loc_521A4
LDR             R3, [R0]
STR             R3, [R5,#0x360]
BL              free
B               loc_52184
; End of function sub_52108

off_521B4 DCD dword_7DB98



; const char *__fastcall sub_521B8(char *src)
sub_521B8
LDR             R3, =dword_7DB98
MOV             R1, R0  ; src
PUSH            {R4-R10,LR}
MOV             R4, R0
MOV             R6, #0
LDR             R8, =0x8002400
LDR             R5, [R3]
LDR             R9, =asc_64E92 ; "\b \b"
ADD             R7, R5, #0x194
MOV             R0, R7  ; dest
BL              strcpy
STR             R6, [R5,#0x48]
BL              sub_51920
MOV             R0, R4
BL              sub_518B4
MOV             R0, R7  ; s
BL              strlen
MOV             R4, R0

loc_52200
CMP             R4, #0x7F
BGT             loc_5225C
BL              sub_51950
CMP             R0, #0x1B
BHI             loc_52220
MVN             R3, R8,LSR R0
TST             R3, #1
BEQ             loc_5225C

loc_52220
LDRB            R3, [R5,#0x64]
CMP             R3, R0
BEQ             loc_52240
CMP             R0, #0x7F
CMPNE           R0, #8
MOVEQ           R2, #1
MOVNE           R2, #0
BNE             loc_5226C

loc_52240
SUB             R4, R4, #1
MOV             R0, R9
ADD             R3, R5, R4
STRB            R6, [R3,#0x194]
BL              sub_518B4
CMP             R4, #0
BGT             loc_52200

loc_5225C
MOV             R0, #0
BL              sub_51CCC
MOV             R0, R7
POP             {R4-R10,PC}

loc_5226C
SUB             R3, R0, #1
CMP             R3, #0xFE
BHI             loc_52200
ADD             R3, R5, R4
ADD             R4, R4, #1
STRB            R0, [R3,#0x194]
ADD             R3, R5, R4
STRB            R2, [R3,#0x194]
BL              j_putchar_unlocked
B               loc_52200
; End of function sub_521B8

off_52294 DCD dword_7DB98
dword_52298 DCD 0x8002400
off_5229C DCD asc_64E92 ; "\b \b"



; int __fastcall sub_522A0(int)
sub_522A0
MOV             R1, #0
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, R1
BL              sub_518C4
LDR             R0, =(aHJ+3) ; "\x1B[J"
BL              sub_518B4
BL              sub_50C04
LDR             R3, =dword_7DB98
MOV             R2, #0
MOV             R0, R4
LDR             R3, [R3]
STR             R2, [R3,#0x48]
BL              sub_51CCC
POP             {R4,LR}
B               sub_5232C
; End of function sub_522A0

off_522E0 DCD aHJ+3     ; "\x1B[J"
off_522E4 DCD dword_7DB98



; int sub_522E8()
sub_522E8
PUSH            {R4,LR}
LDR             R0, =a7m ; "\x1B[7m"
BL              sub_518B4
LDR             R0, =aHitReturnToCon ; "[Hit return to continue]"
BL              sub_518B4
LDR             R0, =(a7mSFileIOfIM+0x16) ; "\x1B[m"
BL              sub_518B4

loc_52304
BL              sub_51950
CMP             R0, #0xD
CMPNE           R0, #0xA
BNE             loc_52304
MOV             R0, #1
POP             {R4,LR}
B               sub_522A0
; End of function sub_522E8

off_52320 DCD a7m       ; "\x1B[7m"
off_52324 DCD aHitReturnToCon ; "[Hit return to continue]"
off_52328 DCD a7mSFileIOfIM+0x16 ; "\x1B[m"



; int __fastcall sub_5232C(int, int, int)
sub_5232C

var_1C= -0x1C
var_10= -0x10
var_C= -0xC

LDR             R3, =dword_7DB98
PUSH            {R4-R9,LR}
SUB             SP, SP, #0x1C
LDR             R4, [R3]
LDR             R6, [R4,#0x44]
CMP             R6, #0
MOVNE           R6, #0
MOVNE           R0, R6
BNE             loc_5242C
LDR             R5, [R4,#8]
LDR             R0, [R4]
MOV             R1, R5
BL              sub_515C0
LDR             R9, [R4,#0x1C]
MOV             R7, R0
LDR             R3, [R4,#0x20]
CMP             R9, R3
BEQ             loc_52394
LDR             R1, [R4,#4]
MOV             R0, R5
SUB             R1, R1, #1
BL              sub_515C0
ADD             R0, R7, R0
STR             R9, [R4,#0x20]
SUB             R0, R0, #1
STR             R0, [R4,#0x70]

loc_52394
LDR             R1, [R4,#0x70]
MOV             R0, #0x64 ; 'd'
CMP             R1, #0
MOVLE           R7, #0
STRLE           R7, [R4,#0x70]
BLE             loc_523B4
MUL             R0, R0, R7
BLX             sub_15F18

loc_523B4
LDR             R3, [R4,#0x18]
ADD             R8, R4, #0xCC
LDR             R2, =aIr ; "-IR-"
LDR             R5, [R4,#0x30]
AND             R3, R3, #3
LDR             R1, =aNoFile ; "No file"
LDRB            R3, [R2,R3]
LDR             R2, [R4,#0x4C]
CMP             R5, #0xC7
MOVCS           R5, #0xC7
LDR             R12, =aModified ; " [Modified]"
STR             R0, [SP,#0x1C+var_C]
CMP             R2, #0
LDR             R0, [R4,#0x70]
MOVEQ           R2, R1
LDR             R1, =(asc_6B39D+1) ; ""
CMP             R9, #0
STR             R2, [SP,#0x1C+var_1C]
MOVNE           R1, R12
STR             R0, [SP,#0x1C+var_10]
STMFA           SP, {R1,R7}
MOV             R0, R8  ; s
LDR             R2, =aCSSDDD ; "%c %s%s %d/%d %d%%"
ADD             R1, R5, #1 ; maxlen
BL              snprintf
CMP             R0, R5
MOVCS           R0, R5
ADD             R3, R8, R0

loc_52424
CMP             R3, R8
BHI             loc_524B0

loc_5242C
LDR             R3, [R4,#0x44]
CMP             R3, #0
BNE             loc_5244C
CMP             R0, #0
BEQ             loc_524A4
LDR             R3, [R4,#0x48]
CMP             R3, R6
BEQ             loc_524A4

loc_5244C
STR             R6, [R4,#0x48]
ADD             R6, R4, #0xCC
BL              sub_51920
MOV             R0, R6
BL              sub_518B4
LDR             R5, [R4,#0x44]
CMP             R5, #0
BEQ             loc_5249C
MOV             R0, R6  ; s
RSB             R5, R5, #1
BL              strlen
LDR             R3, [R4,#0x30]
ADD             R5, R5, R0
SUB             R3, R3, #1
CMP             R5, R3
MOV             R5, #0
BLS             loc_52498
STR             R5, [R4,#0x44]
BL              sub_522E8

loc_52498
STR             R5, [R4,#0x44]

loc_5249C
LDRD            R0, R1, [R4,#0x38]
BL              sub_518C4

loc_524A4
ADD             SP, SP, #0x1C
POP             {R4-R9,LR}
B               sub_177D8

loc_524B0
LDRB            R2, [R8],#1
ADD             R6, R6, R2
B               loc_52424
; End of function sub_5232C

off_524BC DCD dword_7DB98
off_524C0 DCD aIr       ; "-IR-"
off_524C4 DCD aNoFile   ; "No file"
off_524C8 DCD aModified ; " [Modified]"
off_524CC DCD asc_6B39D+1 ; ""
off_524D0 DCD aCSSDDD   ; "%c %s%s %d/%d %d%%"



; int __fastcall sub_524D4(int, int)
sub_524D4

var_8= -8
var_4= -4

LDR             R3, =dword_7DB98
PUSH            {R0,R1,R4,LR}
LDR             R3, [R3]
LDR             R3, [R3,#0x10]
TST             R3, #8
BNE             loc_524FC
LDR             R0, =asc_6B39D ; "\a"
BL              sub_518B4

loc_524F4
ADD             SP, SP, #8
POP             {R4,PC}

loc_524FC
LDR             R0, =a7m ; "\x1B[7m"
MOV             R4, #1
BL              sub_518B4
MOV             R0, #1
BL              sub_522A0
BL              sub_177D8
MOV             R3, #0
MOV             R2, #0x64 ; 'd' ; timeout
MOV             R1, R4  ; nfds
MOV             R0, SP  ; fds
STR             R3, [SP,#8+var_8]
STRH            R4, [SP,#8+var_4]
BL              sub_60AD4
LDR             R0, =(a7mSFileIOfIM+0x16) ; "\x1B[m"
BL              sub_518B4
MOV             R0, R4
BL              sub_522A0
B               loc_524F4
; End of function sub_524D4

off_52544 DCD dword_7DB98
off_52548 DCD asc_6B39D ; "\a"
off_5254C DCD a7m       ; "\x1B[7m"
off_52550 DCD a7mSFileIOfIM+0x16 ; "\x1B[m"



; unsigned int __fastcall sub_52554(unsigned int, int)
sub_52554
LDR             R3, =dword_7DB98
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R5, [R3]
LDRD            R2, R3, [R5]
CMP             R3, R0
BHI             loc_52580
CMP             R3, R2
BLS             loc_52580
SUB             R4, R3, #1
BL              sub_524D4

loc_52580
LDR             R5, [R5]
CMP             R5, R4
BLS             loc_52594
MOV             R4, R5
BL              sub_524D4

loc_52594
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_52554

off_5259C DCD dword_7DB98



; unsigned int __fastcall sub_525A0(const char *, int, int)
sub_525A0

var_124= -0x124
src= -0x118
var_114= -0x114
var_110= -0x110
var_10C= -0x10C
var_108= -0x108
s1= -0x104
var_103= -0x103
dest= -0x84

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x124
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_527E8
CMP             R3, #0x3A ; ':'
MOV             R3, #0xFFFFFFFF
STR             R3, [SP,#0x124+var_108]
MOV             R6, R0
STR             R3, [SP,#0x124+var_10C]
ADDEQ           R6, R0, #1
LDR             R3, =dword_7DB98
LDR             R5, [R3]
LDM             R5, {R4,R7}
SUB             R7, R7, #1
MOV             R0, R4
MOV             R1, R7
BL              sub_515C0
LDR             R11, [R5,#0x4C]

loc_525EC
MOV             R0, R6
LDRB            R3, [R6],#1
CMP             R3, #9
CMPNE           R3, #0x20 ; ' '
BEQ             loc_525EC
CMP             R3, #0x25 ; '%'
BNE             loc_52648
MOV             R3, #1
MOV             R1, R7
MOV             R0, R4
STR             R3, [SP,#0x124+var_10C]
BL              sub_515C0
STR             R0, [SP,#0x124+var_108]

loc_52620
MOV             R0, R6

loc_52624
STR             R0, [SP,#0x124+src]
LDRB            R3, [R0],#1
CMP             R3, #9
CMPNE           R3, #0x20 ; ' '
BEQ             loc_52624

loc_52638
ADD             R2, SP, #0x124+s1
LDR             R3, [SP,#0x124+src]
MOV             R9, R2
B               loc_526A8

loc_52648
ADD             R1, SP, #0x124+var_10C
BL              sub_51630

loc_52650
STR             R0, [SP,#0x124+src]
LDRB            R3, [R0],#1
CMP             R3, #9
CMPNE           R3, #0x20 ; ' '
BEQ             loc_52650
CMP             R3, #0x2C ; ','
BNE             loc_52638
MOV             R3, R0

loc_52670
MOV             R0, R3
LDRB            R2, [R3],#1
CMP             R2, #9
CMPNE           R2, #0x20 ; ' '
BEQ             loc_52670
ADD             R1, SP, #0x124+var_108
BL              sub_51630
MOV             R6, R0
B               loc_52620

loc_52694
SUB             R12, R1, #9
CMP             R12, #4
BLS             loc_526B8
MOV             R3, R0
STRB            R1, [R2],#1

loc_526A8
MOV             R0, R3
LDRB            R1, [R0],#1
TST             R1, #0xDF
BNE             loc_52694

loc_526B8
MOV             R1, #0
STRB            R1, [R2]

loc_526C0               ; src
MOV             R1, R3
LDRB            R2, [R3],#1
CMP             R2, #9
CMPNE           R2, #0x20 ; ' '
MOVEQ           R6, #1
MOVNE           R6, #0
BEQ             loc_526C0
ADD             R0, SP, #0x124+dest ; dest
BL              strcpy
MOV             R1, #0x21 ; '!'
MOV             R0, R9
BL              sub_16AA8
CMP             R0, #0
STRBNE          R6, [R0]
MOVNE           R3, #1
LDR             R10, [SP,#0x124+var_10C]
STRNE           R3, [SP,#0x124+var_114]
STREQ           R0, [SP,#0x124+var_114]
CMP             R10, #0
BLT             loc_52724
MOV             R0, R10
BL              sub_51498
MOV             R4, R0
BL              sub_51420
MOV             R7, R0

loc_52724
LDR             R3, [SP,#0x124+var_108]
CMP             R3, #0
STR             R3, [SP,#0x124+var_110]
BLT             loc_52744
MOV             R0, R3
BL              sub_51498
BL              sub_51420
MOV             R7, R0

loc_52744               ; s
MOV             R0, R9
BL              strlen
SUBS            R8, R0, #0
BNE             loc_52770
CMP             R10, #0
BLT             loc_527E8
MOV             R0, R10
BL              sub_51498

loc_52764
STR             R0, [R5,#8]
BL              sub_50B80
B               loc_527E8

loc_52770
LDRB            R6, [SP,#0x124+s1]
CMP             R6, #0x21 ; '!'
BNE             loc_527AC
BL              sub_51920
BL              sub_51894
LDR             R3, [SP,#0x124+src]
ADD             R0, R3, #1 ; command
BL              system
SUBS            R1, R0, #0
BEQ             loc_527A0
LDR             R0, =aShellReturnedI ; "\nshell returned %i\n\n"
BL              printf

loc_527A0
BL              sub_50BD8

loc_527A4
BL              sub_522E8
B               loc_527E8

loc_527AC
CMP             R6, #0x3D ; '='
BNE             loc_52804
LDRB            R3, [SP,#0x124+var_103]
CMP             R3, #0
BNE             loc_52804
CMP             R10, #0
BGE             loc_527DC
LDR             R0, [R5]
LDR             R1, [R5,#8]
BL              sub_515C0
STR             R0, [SP,#0x124+var_108]
STR             R0, [SP,#0x124+var_10C]

loc_527DC
LDR             R1, [SP,#0x124+var_10C]
LDR             R0, =(aSUartSPort0x4x+0x21) ; "%d"
BL              sub_51168

loc_527E8
LDR             R3, =dword_7DB98
LDR             R4, [R3]
LDR             R0, [R4,#8]
BL              sub_52554
STR             R0, [R4,#8]

loc_527FC
ADD             SP, SP, #0x124
POP             {R4-R11,PC}

loc_52804               ; n
MOV             R2, R8
LDR             R1, =aDelete ; "delete"
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_52864
CMP             R10, #0
BGE             loc_52840
LDR             R6, [R5,#8]
MOV             R0, R6
BL              sub_512E4
MOV             R4, R0
MOV             R0, R6
BL              sub_51420
MOV             R7, R0

loc_52840
CMP             R4, R7
MOV             R2, #1
MOVLS           R3, R7
MOVLS           R7, R4
MOVLS           R4, R3
MOV             R0, R7  ; dest
MOV             R1, R4
BL              sub_50E58
B               loc_52764

loc_52864               ; n
MOV             R2, R8
LDR             R1, =(aDMoreFileSToEd+0x13) ; s2
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_52928
LDR             R0, [R5,#0x1C]
LDR             R3, [SP,#0x124+var_114]
CMP             R0, #0
EORNE           R0, R3, #1
MOVEQ           R0, #0
CMP             R0, #0
BEQ             loc_528A8

loc_52898
LDR             R0, =aNoWriteSinceLa ; "No write since last change (:%s! overri"...
ADD             R1, SP, #0x124+s1

loc_528A0
BL              sub_51000
B               loc_527E8

loc_528A8
LDRB            R3, [SP,#0x124+dest]
CMP             R3, #0
BNE             loc_528D8
LDR             R3, [R5,#0x4C]
CMP             R3, #0
BEQ             loc_528CC
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_528DC

loc_528CC
LDR             R0, =aNoCurrentFilen ; "No current filename"

loc_528D0
BL              sub_51000
B               loc_527E8

loc_528D8
ADD             R11, SP, #0x124+dest

loc_528DC
MOV             R0, R11
BL              sub_52108
LDR             R6, [R5]
MOV             R7, R0
LDR             R4, [R5,#4]
MOV             R0, R6
SUB             R1, R4, #1
SUB             R4, R4, R6
BL              sub_515C0
MOV             R3, R0
LDR             R0, =aNewFile ; " [New file]"
CMP             R7, #0
LDR             R1, [R5,#0x4C]
LDR             R2, =(asc_6B39D+1) ; ""
STR             R4, [SP,#0x124+var_124]
MOVLT           R2, R0
LDR             R0, =aSSDlDc ; "'%s'%s %dL, %dC"
BL              sub_51168
B               loc_527E8

loc_52928               ; n
MOV             R2, R8
LDR             R1, =(aCanTStatOldFil+0xF) ; s2
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_5297C
LDR             R3, [SP,#0x124+var_110]
CMN             R3, #1
CMNEQ           R10, #1
LDRNE           R0, =aNoAddressAllow ; "No address allowed on this command"
BNE             loc_528D0
LDRB            R3, [SP,#0x124+dest]
CMP             R3, #0
STREQ           R3, [R5,#0x48]
BEQ             loc_527E8
LDR             R0, [R5,#0x4C] ; ptr
BL              free
ADD             R0, SP, #0x124+dest
BL              sub_174F8
STR             R0, [R5,#0x4C]
B               loc_527E8

loc_5297C               ; n
MOV             R2, R8
LDR             R1, =aFeatures ; "features"
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_529A8
BL              sub_51920
BL              sub_51894
LDR             R0, =aTheseFeaturesA ; "These features are available:\n\tPatter"...
BL              puts
B               loc_527A0

loc_529A8               ; n
MOV             R2, R8
LDR             R1, =(aAttachingOptio_0+0x2C) ; s2
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_52A74
CMP             R10, #0
BGE             loc_529E4
LDR             R5, [R5,#8]
MOV             R0, R5
BL              sub_512E4
MOV             R4, R0
MOV             R0, R5
BL              sub_51420
MOV             R7, R0

loc_529E4
LDR             R8, =asc_6B1A3 ; "$\r"
LDR             R9, =a7m ; "\x1B[7m"
LDR             R10, =(a7mSFileIOfIM+0x16) ; "\x1B[m"
BL              sub_51920
LDR             R0, =(asc_6AEEE+1) ; s
BL              puts

loc_529FC
CMP             R7, R4
BCC             loc_527A4
LDRB            R5, [R4],#1
SXTB            R6, R5
CMP             R6, #0
BGE             loc_52A48
MOV             R5, #0x2E ; '.'
MOV             R0, R9
BL              sub_518B4

loc_52A20
CMP             R5, #0x7F
CMPNE           R5, #0x1F
BHI             loc_52A58
MOV             R0, #0x5E ; '^' ; c
BL              j_putchar_unlocked
CMP             R5, #0x7F
ADDNE           R5, R5, #0x40 ; '@'
MOVEQ           R5, #0x3F ; '?'
UXTBNE          R5, R5
B               loc_52A58

loc_52A48
CMP             R5, #0xA
BNE             loc_52A20
MOV             R0, R8
BL              sub_518B4

loc_52A58               ; c
MOV             R0, R5
BL              j_putchar_unlocked
CMP             R6, #0
BGE             loc_529FC
MOV             R0, R10
BL              sub_518B4
B               loc_529FC

loc_52A74               ; n
MOV             R2, R8
LDR             R1, =aQuit ; "quit"
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_52ABC
MOV             R2, R8  ; n
LDR             R1, =aNext ; "next"
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_52ABC
MOV             R2, R8  ; n
LDR             R1, =aPrev ; "prev"
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_52B54

loc_52ABC
LDR             R3, [SP,#0x124+var_114]
CMP             R3, #0
BEQ             loc_52AE4
CMP             R6, #0x71 ; 'q'
LDREQ           R2, [R5,#0x24]
LDREQ           R3, =optind
STREQ           R2, [R3]

loc_52AD8
MOV             R3, #0
STR             R3, [R5,#0x14]
B               loc_527E8

loc_52AE4
LDR             R3, [R5,#0x1C]
CMP             R3, #0
BNE             loc_52898
LDR             R2, =optind
CMP             R6, #0x71 ; 'q'
LDR             R1, [R5,#0x24]
LDR             R3, [R2]
SUB             R1, R1, R3
SUB             R1, R1, #1
BNE             loc_52B1C
CMP             R1, #0
LDRGT           R0, =aDMoreFileSToEd ; "%d more file(s) to edit"
BGT             loc_528A0
B               loc_52AD8

loc_52B1C
CMP             R6, #0x6E ; 'n'
BNE             loc_52B34
CMP             R1, #0
BGT             loc_52AD8
LDR             R0, =aNoMoreFilesToE ; "No more files to edit"
B               loc_528D0

loc_52B34
CMP             R6, #0x70 ; 'p'
BNE             loc_52AD8
CMP             R3, #0
LDRLE           R0, =aNoPreviousFile ; "No previous files to edit"
BLE             loc_528D0
SUB             R3, R3, #2
STR             R3, [R2]
B               loc_52AD8

loc_52B54               ; n
MOV             R2, R8
LDR             R1, =(aShortRead+6) ; s2
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_52C18
LDRB            R3, [SP,#0x124+dest]
CMP             R3, #0
LDREQ           R0, =aNoFilenameGive ; "No filename given"
BEQ             loc_528D0
CMP             R10, #0
BGE             loc_52BAC
LDR             R0, [R5,#8]
BL              sub_512E4
MOV             R4, R0

loc_52B90
MOV             R0, R4
BL              sub_51464
LDR             R4, [R5,#4]
SUB             R3, R4, #1
CMP             R3, R0
MOVNE           R4, R0
B               loc_52BB0

loc_52BAC
BNE             loc_52B90

loc_52BB0
LDR             R6, [R5]
MOV             R1, R4
MOV             R2, #0
ADD             R0, SP, #0x124+dest
BL              sub_51A00
SUB             R6, R4, R6
LDR             R4, [R5]
ADD             R4, R4, R6
SUBS            R6, R0, #0
BLT             loc_527E8
SUB             R1, R6, #1
MOV             R0, R4
ADD             R1, R4, R1
BL              sub_515C0
MOV             R3, R6
MOV             R2, R0
ADD             R1, SP, #0x124+dest
LDR             R0, =aSDlDc ; "'%s' %dL, %dC"
BL              sub_51168
CMP             R6, #0
BEQ             loc_527E8
LDR             R3, [R5,#8]
CMP             R3, R4
ADDCS           R3, R3, R6
STRCS           R3, [R5,#8]
B               loc_527E8

loc_52C18               ; n
MOV             R2, R8
LDR             R1, =aRewind ; "rewind"
MOV             R0, R9  ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_52C60
LDR             R0, [R5,#0x1C]
LDR             R3, [SP,#0x124+var_114]
CMP             R0, #0
EORNE           R0, R3, #1
MOVEQ           R0, #0
CMP             R0, #0
BNE             loc_52898
LDR             R3, =optind
MOV             R2, #0xFFFFFFFF
STR             R0, [R5,#0x14]
STR             R2, [R3]
B               loc_527E8

loc_52C60               ; n
MOV             R2, R8
LDR             R1, =(aParameterNotSe+0xE) ; s2
ADD             R0, SP, #0x124+s1 ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_527E8
CMP             R6, #0x73 ; 's'
BNE             loc_52DE4
LDR             R3, [SP,#0x124+src]
LDRB            R8, [R3,#1]
ADD             R9, R3, #2
MOV             R0, R9  ; s
MOV             R1, R8  ; c
BL              strchr
CMP             R0, #0
BEQ             loc_52F54
ADD             R6, R0, #1
MOV             R7, #0
STRB            R7, [R0]
SUB             R10, R0, R9
MOV             R1, R8  ; c
MOV             R0, R6  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_52F54
SUB             R3, R0, R6
STRB            R7, [R0]
STR             R3, [SP,#0x124+var_114]
LDRB            R3, [R0,#1]
MOV             R0, R4
STR             R3, [SP,#0x124+src]
BL              sub_512E4
LDR             R3, [SP,#0x124+var_10C]
MOV             R4, R0
CMP             R3, R7
BGE             loc_52D0C
LDR             R0, [R5,#8]
BL              sub_512E4
MOV             R1, R0
MOV             R4, R0
LDR             R0, [R5]
BL              sub_515C0
STR             R0, [SP,#0x124+var_10C]

loc_52D0C
LDR             R3, [SP,#0x124+var_108]
MOV             R8, #1
LDR             R5, [SP,#0x124+var_10C]
SUB             R10, R10, #1
CMP             R3, #0
STRLT           R5, [SP,#0x124+var_108]

loc_52D24
LDR             R3, [SP,#0x124+var_108]
CMP             R3, R5
BLT             loc_527E8
MOV             R7, R4

loc_52D34               ; int
MOV             R0, R4
MOV             R3, #0
MOV             R2, #1
MOV             R1, R9  ; s
BL              sub_514C4
SUBS            R4, R0, #0
BEQ             loc_52DC8
MOV             R2, R8
ADD             R1, R4, R10
BL              sub_50E58
MOV             R0, R6  ; s
BL              strlen
MOV             R2, #2
MOV             R11, R0
MOV             R1, R0
MOV             R0, R4
BL              sub_50CDC
MOV             R1, R11
MOV             R0, R4  ; src
BL              sub_50C20
MOV             R2, R11 ; n
MOV             R8, R0
MOV             R1, R6  ; src
ADD             R0, R4, R0 ; dest
BL              memcpy
LDR             R3, [SP,#0x124+src]
ADD             R7, R7, R8
CMP             R3, #0x67 ; 'g'
BNE             loc_52DDC
LDR             R3, [SP,#0x124+var_114]
MOV             R0, R7
ADD             R8, R3, R8
ADD             R4, R4, R8
MOV             R8, #2
BL              sub_51420
CMP             R4, R0
BCC             loc_52D34

loc_52DC8
MOV             R0, R7
ADD             R5, R5, #1
BL              sub_51464
MOV             R4, R0
B               loc_52D24

loc_52DDC
MOV             R8, #2
B               loc_52DC8

loc_52DE4               ; n
MOV             R2, R8
LDR             R1, =(aUnsupportedCap+0x17) ; s2
ADD             R0, SP, #0x124+s1 ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_52E08
LDR             R0, =(aUdhcp1293+6) ; "1.29.3"
BL              sub_51168
B               loc_527E8

loc_52E08               ; n
MOV             R2, R8
LDR             R1, =(aShortWrite+6) ; s2
ADD             R0, SP, #0x124+s1 ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_52E64
MOV             R2, R8  ; n
LDR             R1, =aWq ; "wq"
ADD             R0, SP, #0x124+s1 ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_52E64
MOV             R2, R8  ; n
LDR             R1, =(aWantDown+9) ; s2
ADD             R0, SP, #0x124+s1 ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_52E64
CMP             R6, #0x78 ; 'x'
BNE             loc_52F48
LDRB            R3, [SP,#0x124+var_103]
CMP             R3, #0
BNE             loc_52F48

loc_52E64
LDRB            R3, [SP,#0x124+dest]
CMP             R3, #0
LDR             R3, [R5,#0x1C]
ADDNE           R11, SP, #0x124+dest
SUBS            R6, R6, #0x78 ; 'x'
MOVNE           R6, #1
CMP             R3, #0
MOVNE           R6, #1
CMP             R6, #0
MOVEQ           R5, R6
BEQ             loc_52EC4
MOV             R2, R7
MOV             R1, R4
MOV             R0, R11
SUB             R6, R7, R4
BL              sub_51814
SUBS            R5, R0, #0
ADD             R6, R6, #1
BGE             loc_52EC4
CMN             R5, #1
BNE             loc_527E8
MOV             R1, R11
LDR             R0, =aSM ; "'%s' %m"
B               loc_528A0

loc_52EC4
SUB             R1, R5, #1
MOV             R0, R4
ADD             R1, R4, R1
BL              sub_515C0
MOV             R3, R5
MOV             R2, R0
MOV             R1, R11
LDR             R0, =aSDlDc ; "'%s' %dL, %dC"
BL              sub_51168
LDR             R3, =dword_7DB98
CMP             R5, R6
LDR             R3, [R3]
BNE             loc_527E8
LDR             R2, [R3]
CMP             R2, R4
BNE             loc_52F1C
LDR             R2, [R3,#4]
ADD             R4, R4, R5
CMP             R2, R4
MOVEQ           R0, #0
MOVEQ           R1, #0xFFFFFFFF
STRDEQ          R0, R1, [R3,#0x1C]

loc_52F1C
LDRB            R2, [SP,#0x124+s1]
CMP             R2, #0x78 ; 'x'
BEQ             loc_52F3C
LDRB            R2, [SP,#0x124+var_103]
AND             R2, R2, #0xDF
CMP             R2, #0x4E ; 'N'
CMPNE           R2, #0x51 ; 'Q'
BNE             loc_527E8

loc_52F3C
MOV             R2, #0
STR             R2, [R3,#0x14]
B               loc_527E8

loc_52F48
ADD             R0, SP, #0x124+s1
BL              sub_51068
B               loc_527E8

loc_52F54
LDR             R0, =aSExpressionMis ; ":s expression missing delimiters"
BL              sub_51168
B               loc_527FC
; End of function sub_525A0

off_52F60 DCD dword_7DB98
off_52F64 DCD aShellReturnedI ; "\nshell returned %i\n\n"
off_52F68 DCD aSUartSPort0x4x+0x21 ; "%d"
off_52F6C DCD aDelete   ; "delete"
off_52F70 DCD aDMoreFileSToEd+0x13 ; "edit"
off_52F74 DCD aNoWriteSinceLa ; "No write since last change (:%s! overri"...
off_52F78 DCD aNoCurrentFilen ; "No current filename"
off_52F7C DCD aNewFile  ; " [New file]"
off_52F80 DCD asc_6B39D+1 ; ""
off_52F84 DCD aSSDlDc   ; "'%s'%s %dL, %dC"
off_52F88 DCD aCanTStatOldFil+0xF ; "file"
off_52F8C DCD aNoAddressAllow ; "No address allowed on this command"
off_52F90 DCD aFeatures ; "features"
off_52F94 DCD aTheseFeaturesA ; "These features are available:\n\tPatter"...
off_52F98 DCD aAttachingOptio_0+0x2C ; "list"
off_52F9C DCD asc_6B1A3 ; "$\r"
off_52FA0 DCD a7m       ; "\x1B[7m"
off_52FA4 DCD a7mSFileIOfIM+0x16 ; "\x1B[m"
off_52FA8 DCD asc_6AEEE+1 ; "\r"
off_52FAC DCD aQuit     ; "quit"
off_52FB0 DCD aNext     ; "next"
off_52FB4 DCD aPrev     ; "prev"
off_52FB8 DCD optind
off_52FBC DCD aDMoreFileSToEd ; "%d more file(s) to edit"
off_52FC0 DCD aNoMoreFilesToE ; "No more files to edit"
off_52FC4 DCD aNoPreviousFile ; "No previous files to edit"
off_52FC8 DCD aShortRead+6 ; "read"
off_52FCC DCD aNoFilenameGive ; "No filename given"
off_52FD0 DCD aSDlDc    ; "'%s' %dL, %dC"
off_52FD4 DCD aRewind   ; "rewind"
off_52FD8 DCD aParameterNotSe+0xE ; "set"
off_52FDC DCD aUnsupportedCap+0x17 ; "version"
off_52FE0 DCD aUdhcp1293+6 ; "1.29.3"
off_52FE4 DCD aShortWrite+6 ; "write"
off_52FE8 DCD aWq       ; "wq"
off_52FEC DCD aWantDown+9 ; "wn"
off_52FF0 DCD aSM       ; "'%s' %m"
off_52FF4 DCD aSExpressionMis ; ":s expression missing delimiters"



; int __fastcall sub_52FF8(int, int, int)
sub_52FF8

var_2C= -0x2C
var_20= -0x20
src= -0x18
var_14= -0x14
dest= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R5, R0
SUB             SP, SP, #0x2C
MOV             R3, #0
ADD             R7, R5, #0xB
STR             R3, [SP,#0x2C+dest]
STR             R3, [SP,#0x2C+var_C]
STR             R3, [SP,#0x2C+var_8]
BL              sub_5232C
CMP             R7, #9
LDR             R6, =dword_7DB98
BHI             loc_53038
MOV             R2, #1
MOVW            R3, #0x3F7
ANDS            R3, R3, R2,LSL R7
BNE             loc_53180

loc_53038
LDR             R4, [R6]
LDR             R3, [R4,#0x18]
CMP             R3, #2
BNE             loc_5306C
CMN             R5, #8
BEQ             loc_53BD4 ; jumptable 00053188 cases 3,116
LDR             R1, [R4,#8] ; dest
LDRB            R3, [R1]
CMP             R3, #0xA
BNE             loc_530A0
MOV             R3, #1
STR             R3, [R4,#0x18]
BL              sub_50F44

loc_5306C
LDR             R3, [R4,#0x18]
CMP             R3, #1
BNE             loc_53180
CMN             R5, #8
UXTB            R1, R5
BEQ             loc_53E90 ; jumptable 00053188 case 93
CMP             R5, #0
BGT             loc_53098
SUB             R3, R1, #0x20 ; ' '
CMP             R3, #0x5E ; '^'
BHI             loc_530E4 ; jumptable 00053188 case 11

loc_53098
MOV             R2, #3
B               loc_530D8

loc_530A0
CMP             R5, #0
UXTB            R7, R5
BGT             loc_530B8
SUB             R3, R7, #0x20 ; ' '
CMP             R3, #0x5E ; '^'
BHI             loc_530E4 ; jumptable 00053188 case 11

loc_530B8
CMP             R5, #0x1B
BEQ             loc_530D0
MOV             R2, #0
MOV             R0, R1  ; int
BL              sub_519AC
STR             R0, [R4,#8]

loc_530D0
MOV             R2, #2
MOV             R1, R7

loc_530D8               ; src
LDR             R0, [R4,#8]
BL              sub_51F9C

loc_530E0
STR             R0, [R4,#8]

loc_530E4               ; jumptable 00053188 case 11
LDR             R4, [R6]
LDR             R0, [R4,#4] ; src
LDR             R3, [R4]
CMP             R0, R3
BNE             loc_5310C
MOV             R2, #0
MOV             R1, #0xA
BL              sub_51F9C
LDR             R3, [R4]
STR             R3, [R4,#8]

loc_5310C
LDR             R0, [R4,#8]
LDR             R3, [R4,#4]
CMP             R0, R3
BEQ             loc_53124
BL              sub_52554
STR             R0, [R4,#8]

loc_53124
SUB             R5, R5, #0x30 ; '0'
UXTB            R5, R5
CMP             R5, #9
LDR             R5, [R4,#8]
MOVHI           R3, #0
STRHI           R3, [R4,#0x28]
MOV             R0, R5
BL              sub_512E4
LDRB            R2, [R5]
SUB             R0, R5, R0
CMP             R0, #0
SUB             R3, R2, #0xA
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVLE           R3, #0
CMP             R3, #0
BEQ             loc_53178
LDR             R3, [R4,#0x18]
CMP             R3, #0
SUBEQ           R5, R5, #1
STREQ           R5, [R4,#8]

loc_53178
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_53180
LDR             R4, [R6]
CMP             R7, #0x8A ; switch 139 cases
LDRLS           PC, [PC,R7,LSL#2] ; switch jump
B               def_53188 ; jumptable 00053188 default case, cases 10,12,14,20,22,25-28,30,31,33-35,37,39-42,44-46,49-53,57,72,75,81,86,91,92,94-97,100,102-104,106,107,120,123,124,129,132
jpt_53188 DCD loc_534FC, loc_534C8, loc_53E9C, loc_53BD4 ; jump table for switch statement
DCD loc_53710, loc_53A94, loc_53514, loc_535F0
DCD loc_53530, loc_5425C, def_53188, loc_530E4
DCD def_53188, loc_534C8, def_53188, loc_534D8
DCD loc_534F0, loc_534FC, loc_53508, loc_53514
DCD def_53188, loc_53530, def_53188, loc_53564
DCD loc_53590, def_53188, def_53188, def_53188
DCD def_53188, loc_53564, def_53188, def_53188
DCD loc_535B0, def_53188, def_53188, def_53188
DCD loc_535C4, def_53188, loc_535CC, def_53188
DCD def_53188, def_53188, def_53188, loc_535F0
DCD def_53188, def_53188, def_53188, loc_53710
DCD loc_53738, def_53188, def_53188, def_53188
DCD def_53188, def_53188, loc_53590, loc_53870
DCD loc_538D4, def_53188, loc_538F4, loc_53A80
DCD loc_53A80, loc_53A80, loc_53A80, loc_53A80
DCD loc_53A80, loc_53A80, loc_53A80, loc_53A80
DCD loc_53A80, loc_53AB0, loc_53808, loc_53AC4
DCD def_53188, loc_53AC4, loc_538F4, def_53188
DCD loc_53BBC, loc_53BE8, loc_53C78, loc_53C78
DCD loc_53BE8, def_53188, loc_53D08, loc_53D28
DCD loc_53D64, loc_5347C, def_53188, loc_53DC4
DCD loc_53E04, loc_5397C, loc_53E38, def_53188
DCD def_53188, loc_53E90, def_53188, def_53188
DCD def_53188, def_53188, loc_53BE8, loc_53EC0
DCD def_53188, loc_53F1C, def_53188, def_53188
DCD def_53188, loc_53DFC, def_53188, def_53188
DCD loc_53BC0, loc_53FD8, loc_540C0, loc_540C0
DCD loc_53FD8, loc_53800, loc_53CCC, loc_53514
DCD loc_53BD4, loc_53530, loc_5425C, loc_535F0
DCD def_53188, loc_53938, loc_53E54, def_53188
DCD def_53188, loc_54290, loc_53EC0, loc_542D0
DCD loc_53458, def_53188, loc_533BC, loc_53EC0
DCD def_53188, loc_54320, loc_53A4C, loc_54360
DCD loc_53A74, loc_54374, loc_53514

loc_533BC               ; jumptable 00053188 case 130
LDR             R7, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"

loc_533C0
LDR             R8, [R4,#8]
LDRB            R1, [R8]
SUB             R3, R1, #0x30 ; '0'
CMP             R3, #9
BLS             loc_533E8
ORR             R3, R1, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R1, #0x5F ; '_'
CMPNE           R3, #0x19
BHI             loc_54304

loc_533E8
MOV             R3, #5

loc_533EC
MOV             R2, #1
MOV             R0, R8
MOV             R1, R2
BL              sub_511A8
STR             R0, [R4,#8]

loc_53400
LDRD            R2, R3, [R4,#4]
SUB             R2, R2, #1
CMP             R3, R2
ADDCC           R3, R3, #1
STRCC           R3, [R4,#8]
LDR             R0, [R4,#8]
LDRB            R3, [R0]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BHI             loc_53440
MOV             R3, #3
MOV             R2, #1
MOV             R1, #2
BL              sub_511A8
STR             R0, [R4,#8]

loc_53440
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_533C0
B               loc_530E4 ; jumptable 00053188 case 11

loc_53458               ; jumptable 00053188 case 128
LDR             R9, =aDeleted_0 ; "deleted"
ADD             R8, R4, #0x1000

loc_53460
BL              sub_50F44
LDR             R7, [R8,#0x360]
CMP             R7, #0
BNE             loc_5360C
LDR             R0, =aAlreadyAtOldes ; "Already at oldest change"
BL              sub_51168
B               loc_530E4 ; jumptable 00053188 case 11

loc_5347C               ; jumptable 00053188 case 85
MOV             R7, #0x20 ; ' '

loc_53480
BL              sub_517F0
LDR             R3, [R4,#4]
LDR             R0, [R4,#8]
SUB             R3, R3, #1
CMP             R0, R3
BCC             loc_53D70

loc_53498
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_53480
B               loc_530E4 ; jumptable 00053188 case 11

def_53188               ; jumptable 00053188 default case, cases 10,12,14,20,22,25-28,30,31,33-35,37,39-42,44-46,49-53,57,72,75,81,86,91,92,94-97,100,102-104,106,107,120,123,124,129,132
MOV             R3, #0
STRB            R5, [SP,#0x2C+dest]
STRB            R3, [SP,#0x2C+dest+1]

loc_534BC
ADD             R0, SP, #0x2C+dest
BL              sub_51068
B               loc_530E4 ; jumptable 00053188 case 11

loc_534C8               ; jumptable 00053188 cases 1,13
LDR             R0, [R4,#0x2C]
MOV             R1, #0xFFFFFFFF

loc_534D0
SUB             R0, R0, #2
B               loc_534E8

loc_534D8               ; jumptable 00053188 case 15
LDR             R0, [R4,#0x2C]
MOV             R1, #1
SUB             R0, R0, #2
MOV             R0, R0,LSR R1

loc_534E8
BL              sub_5177C
B               loc_530E4 ; jumptable 00053188 case 11

loc_534F0               ; jumptable 00053188 case 16
MOV             R1, #1

loc_534F4
MOV             R0, #1
B               loc_534E8

loc_534FC               ; jumptable 00053188 cases 0,17
LDR             R0, [R4,#0x2C]
MOV             R1, #1
B               loc_534D0

loc_53508               ; jumptable 00053188 case 18
MOV             R3, #0
STR             R3, [R4,#0x48]
B               loc_530E4 ; jumptable 00053188 case 11

loc_53514               ; jumptable 00053188 cases 6,19,115,138
BL              sub_50F90
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_53514 ; jumptable 00053188 cases 6,19,115,138
B               loc_530E4 ; jumptable 00053188 case 11

loc_53530               ; jumptable 00053188 cases 8,21,117
BL              sub_5159C
LDR             R3, [R4,#0x40]
LDR             R1, [R4,#0x3C]
LDR             R0, [R4,#8]
ADD             R1, R1, R3
BL              sub_5137C
LDR             R3, [R4,#0x28]
STR             R0, [R4,#8]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_53530 ; jumptable 00053188 cases 8,21,117
B               loc_530E4 ; jumptable 00053188 case 11

loc_53564               ; jumptable 00053188 cases 23,29
MOV             R1, #0
MOV             R0, R1
BL              sub_518C4
LDR             R0, =(aHJ+3) ; "\x1B[J"
BL              sub_518B4
BL              sub_50C04
MOV             R3, #0
MOV             R0, #1
STR             R3, [R4,#0x48]
BL              sub_51CCC
B               loc_530E4 ; jumptable 00053188 case 11

loc_53590               ; jumptable 00053188 cases 24,54
BL              sub_5159C
BL              sub_50B80
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_53590 ; jumptable 00053188 cases 24,54
B               loc_530E4 ; jumptable 00053188 case 11

loc_535B0               ; jumptable 00053188 case 32
LDR             R0, [R4,#0x2C]
MOV             R1, #0xFFFFFFFF
SUB             R0, R0, #2
MOV             R0, R0,LSR#1
B               loc_534E8

loc_535C4               ; jumptable 00053188 case 36
MOV             R1, #0xFFFFFFFF
B               loc_534F4

loc_535CC               ; jumptable 00053188 case 38
LDR             R3, [R4,#0x18]
CMP             R3, #0
BNE             loc_535DC
BL              sub_524D4

loc_535DC
MOV             R7, #0
STR             R7, [R4,#0x18]
BL              sub_50F44
STR             R7, [R4,#0x48]
B               loc_530E4 ; jumptable 00053188 case 11

loc_535F0               ; jumptable 00053188 cases 7,43,119
BL              sub_50FC8
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_535F0 ; jumptable 00053188 cases 7,43,119
B               loc_530E4 ; jumptable 00053188 case 11

loc_5360C
LDRB            R3, [R7,#0xC]
CMP             R3, #3  ; switch 4 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_53614 ; jumptable 00053614 default case
jpt_53614 DCD loc_53690 ; jump table for switch statement
DCD loc_5362C
DCD loc_53690
DCD loc_5362C

loc_5362C               ; jumptable 00053614 cases 1,3
LDR             R3, [R7,#4]
LDR             R10, [R4]
LDR             R1, [R7,#8]
ADD             R10, R10, R3
MOV             R0, R10 ; src
BL              sub_50C20
LDR             R2, [R7,#8] ; n
ADD             R1, R7, #0xD ; src
MOV             R0, R10 ; dest
BL              memcpy
LDR             R3, [R7,#4]
LDR             R2, =aRestored ; "restored"
STR             R3, [SP,#0x2C+var_2C]
LDR             R3, [R7,#8]

loc_53664
LDR             R1, [R4,#0x1C]
LDR             R0, =aUndoDSDCharsAt ; "Undo [%d] %s %d chars at position %d"
BL              sub_51168

def_53614               ; jumptable 00053614 default case
LDRB            R3, [R7,#0xC]
CMP             R3, #3  ; switch 4 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_53678 ; jumptable 00053678 default case
jpt_53678 DCD loc_536C4 ; jump table for switch statement
DCD loc_536C4
DCD loc_53708
DCD loc_53708

loc_53690               ; jumptable 00053614 cases 0,2
LDR             R3, [R7,#4]
MOV             R2, #0
LDR             R0, [R4]
LDR             R1, [R7,#8]
ADD             R0, R0, R3 ; dest
SUB             R1, R1, #1
ADD             R1, R0, R1
BL              sub_50E58
LDR             R3, [R7,#4]
MOV             R2, R9
STR             R3, [SP,#0x2C+var_2C]
LDR             R3, [R7,#8]
B               loc_53664

loc_536C4               ; jumptable 00053678 cases 0,1
LDR             R2, [R7,#4]
MOV             R0, #0
LDR             R3, [R4]
ADD             R3, R3, R2
STR             R3, [R4,#8]
BL              sub_51CCC

def_53678               ; jumptable 00053678 default case
MOV             R10, #0

loc_536E0
LDR             R3, [R7]
MOV             R0, R7  ; ptr
STR             R3, [R8,#0x360]
BL              free
LDR             R3, [R4,#0x1C]
CMP             R10, #0
SUB             R3, R3, #1
STR             R3, [R4,#0x1C]
BNE             loc_53460
B               loc_530E4 ; jumptable 00053188 case 11

loc_53708               ; jumptable 00053678 cases 2,3
MOV             R10, #1
B               loc_536E0

loc_53710               ; jumptable 00053188 cases 4,47
LDR             R0, [R4,#8]
BL              sub_51420
LDR             R3, [R4,#0x28]
STR             R0, [R4,#8]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BLE             loc_530E4 ; jumptable 00053188 case 11
BL              sub_5159C
B               loc_53710 ; jumptable 00053188 cases 4,47

loc_53738               ; jumptable 00053188 case 48
LDR             R9, [R4,#4]
LDR             R10, =asc_6B2F3 ; "()[]{}"
LDR             R3, [R4,#8]
STR             R3, [SP,#0x2C+var_14]

loc_53748
LDR             R7, [SP,#0x2C+var_14]
CMP             R9, R7
LDRB            R8, [R7]
BLS             loc_537D4
CMP             R8, #0xA
BEQ             loc_537D4
MOV             R1, R8  ; c
LDR             R0, =asc_6B2F3 ; "()[]{}"
BL              strchr
CMP             R0, #0
BEQ             loc_537F4
SUB             R0, R0, R10
LDR             R12, [R4]
EOR             R0, R0, #1
MOV             R3, #1
LDRB            R1, [R10,R0]
MOV             R0, R0,LSL#1
AND             R0, R0, #2
SUB             R0, R0, #1

loc_53794
ADD             R7, R7, R0
CMP             R7, R12
CMPCS           R9, R7
BLS             loc_537EC
LDRB            R2, [R7]
CMP             R2, R8
ADDEQ           R3, R3, #1
CMP             R1, R2
BNE             loc_53794
SUBS            R3, R3, #1
BNE             loc_53794

loc_537C0
CMP             R7, #0
STR             R7, [SP,#0x2C+src]
STRNE           R7, [R4,#8]
BNE             loc_537D4
BL              sub_524D4

loc_537D4
LDR             R3, [SP,#0x2C+var_14]
LDRB            R3, [R3]
CMP             R3, #0xA
BNE             loc_530E4 ; jumptable 00053188 case 11

loc_537E4
BL              sub_524D4
B               loc_530E4 ; jumptable 00053188 case 11

loc_537EC
MOV             R7, #0
B               loc_537C0

loc_537F4
ADD             R7, R7, #1
STR             R7, [SP,#0x2C+var_14]
B               loc_53748

loc_53800               ; jumptable 00053188 case 113
BL              sub_51950
STR             R0, [R4,#0x60]

loc_53808               ; jumptable 00053188 case 70
LDR             R1, [R4,#4]
LDR             R2, [R4,#0x60]
SUB             R1, R1, #1

loc_53814
CMP             R2, #0
BEQ             loc_530E4 ; jumptable 00053188 case 11
LDR             R3, [R4,#8]

loc_53820
ADD             R3, R3, #1
STR             R3, [SP,#0x2C+var_14]
LDR             R3, [SP,#0x2C+var_14]
CMP             R1, R3
LDRB            R0, [R3]
BLS             loc_53850
CMP             R0, #0xA
BEQ             loc_53850
CMP             R2, R0
BNE             loc_53820

loc_53848
STR             R3, [R4,#8]
B               loc_53858

loc_53850
CMP             R2, R0
BEQ             loc_53848

loc_53858
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_53814
B               loc_530E4 ; jumptable 00053188 case 11

loc_53870               ; jumptable 00053188 case 55
LDR             R2, [R4,#0x60]
CMP             R2, #0
BEQ             loc_530E4 ; jumptable 00053188 case 11
LDR             R0, [R4]

loc_53880
LDR             R3, [R4,#8]

loc_53884
SUB             R3, R3, #1
STR             R3, [SP,#0x2C+var_14]
LDR             R3, [SP,#0x2C+var_14]
CMP             R0, R3
BHI             loc_538AC
LDRB            R1, [R3]
CMP             R1, #0xA
BNE             loc_538C4
CMP             R2, #0xA
BEQ             loc_538CC

loc_538AC
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_53880
B               loc_530E4 ; jumptable 00053188 case 11

loc_538C4
CMP             R2, R1
BNE             loc_53884

loc_538CC
STR             R3, [R4,#8]
B               loc_538AC

loc_538D4               ; jumptable 00053188 case 56
BL              sub_51358
BL              sub_50B80
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_538D4 ; jumptable 00053188 case 56
B               loc_530E4 ; jumptable 00053188 case 11

loc_538F4               ; jumptable 00053188 cases 58,74
UXTB            R7, R5
MOV             R3, #0
ADD             R0, SP, #0x2C+dest ; src
STRB            R3, [SP,#0x2C+dest+1]
STRB            R7, [SP,#0x2C+dest]
BL              sub_521B8
STR             R0, [SP,#0x2C+var_14]
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_530E4 ; jumptable 00053188 case 11
LDRB            R2, [R0,#1]
LDR             R3, [R4,#0x68]
CMP             R2, #0
BNE             loc_53964
LDRB            R2, [R3]
CMP             R2, #0
STRBNE          R7, [R3]

loc_53938               ; jumptable 00053188 case 121
LDR             R2, [R6]
LDR             R3, [R2,#8]
LDR             R2, [R2,#0x68]
ADD             R1, R3, #1
STR             R1, [SP,#0x2C+src]
LDRB            R2, [R2]
CMP             R2, #0x3F ; '?'
BNE             loc_53A44
SUB             R3, R3, #1
STR             R3, [SP,#0x2C+src]
B               loc_539A0

loc_53964               ; ptr
MOV             R0, R3
BL              free
LDR             R0, [SP,#0x2C+var_14]
BL              sub_174F8
STR             R0, [R4,#0x68]
B               loc_53938 ; jumptable 00053188 case 121

loc_5397C               ; jumptable 00053188 case 89
LDR             R3, [R4,#8]
SUB             R2, R3, #1
STR             R2, [SP,#0x2C+src]
LDR             R2, [R4,#0x68]
LDRB            R2, [R2]
CMP             R2, #0x3F ; '?'
ADDEQ           R3, R3, #1
STREQ           R3, [SP,#0x2C+src]
BEQ             loc_53A44

loc_539A0
MOV             R7, #0xFFFFFFFF

loc_539A4
LDR             R4, [R6]
MOV             R3, #1
MOV             R2, R7
LDR             R0, [SP,#0x2C+src] ; int
LDR             R8, [R4,#0x68]
ADD             R8, R8, #1
MOV             R1, R8  ; s
BL              sub_514C4
CMP             R0, #0
STR             R0, [SP,#0x2C+var_14]
STRNE           R0, [R4,#8]
BNE             loc_53A2C
LDR             R3, [R4]
CMN             R7, #1
MOV             R1, R8  ; s
MOV             R2, R7
STR             R3, [SP,#0x2C+src]
LDREQ           R3, [R4,#4]
SUBEQ           R3, R3, #1
STREQ           R3, [SP,#0x2C+src]
MOV             R3, #1
LDR             R0, [SP,#0x2C+src] ; int
BL              sub_514C4
CMP             R0, #0
STR             R0, [SP,#0x2C+var_14]
LDREQ           R1, =aPatternNotFoun ; "Pattern not found"
BEQ             loc_53A24
LDR             R3, =aSearchHitBotto ; "search hit BOTTOM, continuing at TOP"
CMN             R7, #1
LDR             R1, =aSearchHitTopCo ; "search hit TOP, continuing at BOTTOM"
STR             R0, [R4,#8]
MOVNE           R1, R3

loc_53A24
LDR             R0, =(aSS_8+3) ; "%s"
BL              sub_51000

loc_53A2C
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_53938 ; jumptable 00053188 case 121
B               loc_530E4 ; jumptable 00053188 case 11

loc_53A44
MOV             R7, #1
B               loc_539A4

loc_53A4C               ; jumptable 00053188 case 134
MOV             R3, #1
MOV             R2, #0xFFFFFFFF

loc_53A54               ; s
LDR             R1, =(aShellReturnedI+0x12) ; "\n\n"
LDR             R0, [R4,#8] ; int
BL              sub_514C4
CMP             R0, #0
STR             R0, [SP,#0x2C+var_14]
BEQ             loc_530E4 ; jumptable 00053188 case 11
BL              sub_51464
B               loc_530E0

loc_53A74               ; jumptable 00053188 case 136
MOV             R3, #1
MOV             R2, R3
B               loc_53A54

loc_53A80               ; jumptable 00053188 cases 59-68
CMP             R5, #0x30 ; '0'
LDR             R3, [R4,#0x28]
BNE             loc_53A9C
CMP             R3, #0
BGT             loc_53A9C

loc_53A94               ; jumptable 00053188 case 5
BL              sub_513FC
B               loc_530E4 ; jumptable 00053188 case 11

loc_53A9C
SUB             R2, R5, #0x30 ; '0'
MOV             R1, #0xA
MLA             R3, R1, R3, R2
STR             R3, [R4,#0x28]
B               loc_530E4 ; jumptable 00053188 case 11

loc_53AB0               ; jumptable 00053188 case 69
LDR             R0, =(aTheseFeaturesA+0x5C) ; ":"
BL              sub_521B8
STR             R0, [SP,#0x2C+src]
BL              sub_525A0
B               loc_530E4 ; jumptable 00053188 case 11

loc_53AC4               ; jumptable 00053188 cases 71,73
LDR             R1, [R4,#8]
LDR             R0, [R4]
BL              sub_515C0
MOV             R9, R0
BL              sub_51950
ADD             R1, SP, #0x2C+var_14 ; int
UXTB            R2, R0  ; c
ADD             R0, SP, #0x2C+src ; int
BL              sub_54414
LDR             R0, [SP,#0x2C+src]
BL              sub_512E4
MOV             R7, R0
STR             R0, [SP,#0x2C+src]
LDR             R0, [SP,#0x2C+var_14]
BL              sub_51420
MOV             R1, R0
STR             R0, [SP,#0x2C+var_14]
MOV             R0, R7
BL              sub_515C0
MOV             R7, R0

loc_53B14
CMP             R7, #0
BGT             loc_53B2C
MOV             R0, R9

loc_53B20
BL              sub_51498
STR             R0, [R4,#8]
B               loc_53D20

loc_53B2C
CMP             R5, #0x3C ; '<'
LDR             R0, [SP,#0x2C+src] ; src
BNE             loc_53BA4
LDRB            R3, [R0]
CMP             R3, #9
BNE             loc_53B64
MOV             R2, #0
MOV             R1, R0
BL              sub_50E58

loc_53B50
LDR             R0, [SP,#0x2C+src]
SUB             R7, R7, #1
BL              sub_51464
STR             R0, [SP,#0x2C+src]
B               loc_53B14

loc_53B64
CMP             R3, #0x20 ; ' '
BNE             loc_53B50
MOV             R8, #0
B               loc_53B84

loc_53B74
ADD             R8, R8, #1
MOV             R2, #0
MOV             R0, R1  ; dest
BL              sub_50E58

loc_53B84
LDR             R1, [SP,#0x2C+src]
LDRB            R3, [R1]
CMP             R3, #0x20 ; ' '
BNE             loc_53B50
LDR             R3, [R4,#0x5C]
CMP             R3, R8
BGT             loc_53B74
B               loc_53B50

loc_53BA4
CMP             R5, #0x3E ; '>'
BNE             loc_53B50
MOV             R2, #1
MOV             R1, #9
BL              sub_51F9C
B               loc_53B50

loc_53BBC               ; jumptable 00053188 case 76
BL              sub_517F0

loc_53BC0               ; jumptable 00053188 case 108
LDR             R3, [R4,#8]
LDRB            R2, [R3]
CMP             R2, #0xA
ADDNE           R3, R3, #1
STRNE           R3, [R4,#8]

loc_53BD4               ; jumptable 00053188 cases 3,116
LDR             R3, [R6]
MOV             R2, #1

loc_53BDC
STR             R2, [R3,#0x18]
BL              sub_50F44
B               loc_530E4 ; jumptable 00053188 case 11

loc_53BE8               ; jumptable 00053188 cases 77,80,98
CMP             R5, #0x42 ; 'B'
MOVEQ           R7, #0xFFFFFFFF
MOVNE           R7, #1

loc_53BF4
CMP             R5, #0x57 ; 'W'
LDR             R0, [R4,#8]
BEQ             loc_53C44
LDRB            R3, [R0,R7]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BLS             loc_53C44

loc_53C14
MOV             R3, #1
LDR             R0, [R4,#8]
MOV             R2, R7
MOV             R1, R3
BL              sub_511A8
STR             R0, [R4,#8]

loc_53C2C
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_53BF4
B               loc_530E4 ; jumptable 00053188 case 11

loc_53C44
MOV             R3, #2
MOV             R2, R7
MOV             R1, #1
BL              sub_511A8
MOV             R3, #3
STR             R0, [R4,#8]
MOV             R2, R7
MOV             R1, #2
BL              sub_511A8
CMP             R5, #0x57 ; 'W'
STR             R0, [R4,#8]
BNE             loc_53C14
B               loc_53C2C

loc_53C78               ; jumptable 00053188 cases 78,79
LDR             R8, [R4,#8]
MOV             R0, R8
BL              sub_51420
LDRB            R3, [R0]
MOV             R7, R0
CMP             R3, #0xA
BNE             loc_53CA4
BL              sub_512E4
SUB             R0, R7, R0
CMP             R0, #0
SUBGT           R7, R7, #1

loc_53CA4
STR             R7, [R4,#8]
MOV             R2, #0
MOV             R1, R7  ; dest
MOV             R0, R8  ; int
BL              sub_519AC
CMP             R5, #0x43 ; 'C'
STR             R0, [R4,#8]
MOVNE           R5, #0x44 ; 'D'
BNE             loc_530E4 ; jumptable 00053188 case 11
B               loc_53BD4 ; jumptable 00053188 cases 3,116

loc_53CCC               ; jumptable 00053188 case 114
BL              sub_51950
CMP             R0, #0x67 ; 'g'
BEQ             loc_53CF8
MOV             R3, #0x67 ; 'g'
CMP             R0, #0
STRB            R3, [SP,#0x2C+dest]
MOVLT           R0, #0x2A ; '*'
MOV             R3, #0
STRB            R0, [SP,#0x2C+dest+1]
STRB            R3, [SP,#0x2C+dest+2]
B               loc_534BC

loc_53CF8
LDR             R3, [R4,#0x28]
CMP             R3, #0
MOVEQ           R3, #1
STREQ           R3, [R4,#0x28]

loc_53D08               ; jumptable 00053188 case 82
LDR             R0, [R4,#0x28]
LDR             R3, [R4,#4]
CMP             R0, #0
SUB             R3, R3, #1
STR             R3, [R4,#8]
BGT             loc_53B20

loc_53D20
BL              sub_50B80
B               loc_530E4 ; jumptable 00053188 case 11

loc_53D28               ; jumptable 00053188 case 83
LDR             R3, [R4,#0x50]
LDR             R2, [R4,#0x28]
STR             R3, [R4,#8]
LDR             R3, [R4,#0x2C]
SUB             R3, R3, #1
CMP             R2, R3
STRHI           R3, [R4,#0x28]
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BLE             loc_53D20
MOV             R0, #0x2B ; '+'
BL              sub_52FF8
B               loc_53D20

loc_53D64               ; jumptable 00053188 case 84
BL              sub_513FC
BL              sub_50B80
B               loc_53BD4 ; jumptable 00053188 cases 3,116

loc_53D70
MOV             R2, #1
MOV             R1, R2
BL              sub_50CDC
LDR             R3, [R4,#8]
MOV             R1, #1
ADD             R2, R3, #1
STR             R2, [R4,#8]
MOV             R2, #2
STRB            R7, [R3]
LDR             R0, [R4,#8]
SUB             R0, R0, #1
BL              sub_50CDC

loc_53DA0
LDR             R1, [R4,#8]
LDRB            R3, [R1]
CMP             R3, #9
CMPNE           R3, #0x20 ; ' '
BNE             loc_53498
MOV             R2, #2
MOV             R0, R1  ; dest
BL              sub_50E58
B               loc_53DA0

loc_53DC4               ; jumptable 00053188 case 87
BL              sub_51740
LDR             R3, [R4,#0x2C]
LDR             R2, [R4,#0x28]
STR             R0, [R4,#8]
SUB             R3, R3, #1
CMP             R2, R3
STRHI           R3, [R4,#0x28]
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BLE             loc_53DFC ; jumptable 00053188 case 105
MOV             R0, #0x2D ; '-'
BL              sub_52FF8

loc_53DFC               ; jumptable 00053188 case 105
BL              sub_513FC
B               loc_53D20

loc_53E04               ; jumptable 00053188 case 88
LDR             R7, [R4,#0x2C]
MOV             R8, #0
LDR             R3, [R4,#0x50]
SUB             R7, R7, #1
MOV             R7, R7,LSR#1
STR             R3, [R4,#8]

loc_53E1C
CMP             R8, R7
BEQ             loc_530E4 ; jumptable 00053188 case 11
LDR             R0, [R4,#8]
ADD             R8, R8, #1
BL              sub_51464
STR             R0, [R4,#8]
B               loc_53E1C

loc_53E38               ; jumptable 00053188 case 90
LDR             R0, [R4,#8]
BL              sub_512E4
STR             R0, [SP,#0x2C+src]
LDRB            R3, [R0,#-1]
CMP             R3, #0xA
BNE             loc_53E70
BL              sub_51358

loc_53E54               ; jumptable 00053188 case 122
BL              sub_517F0
MOV             R2, #1
MOV             R1, #0xA
LDR             R0, [R4,#8] ; src
BL              sub_51F9C
STR             R0, [R4,#8]
B               loc_53BD4 ; jumptable 00053188 cases 3,116

loc_53E70
BL              sub_513FC
MOV             R2, #1
MOV             R1, #0xA
LDR             R0, [R4,#8] ; src
BL              sub_51F9C
STR             R0, [R4,#8]
BL              sub_51358
B               loc_53BD4 ; jumptable 00053188 cases 3,116

loc_53E90               ; jumptable 00053188 case 93
LDR             R3, [R6]
MOV             R2, #2
B               loc_53BDC

loc_53E9C               ; jumptable 00053188 case 2
LDR             R3, [R4,#4]
LDR             R1, [R4,#8]
SUB             R3, R3, #1
CMP             R1, R3
BCS             loc_530E4 ; jumptable 00053188 case 11
MOV             R2, #1
MOV             R0, R1  ; dest
BL              sub_50E58
B               loc_530E0

loc_53EC0               ; jumptable 00053188 cases 99,126,131
CMP             R5, #0x58 ; 'X'
MOVNE           R7, #0
MOVEQ           R7, #0xFFFFFFFF

loc_53ECC
LDR             R3, [R4,#8]
LDRB            R2, [R3,R7]
CMP             R2, #0xA
BEQ             loc_53EFC
CMP             R5, #0x58 ; 'X'
MOV             R2, #0
SUBEQ           R3, R3, #1
STREQ           R3, [R4,#8]
LDR             R1, [R4,#8] ; dest
MOV             R0, R1  ; int
BL              sub_519AC
STR             R0, [R4,#8]

loc_53EFC
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_53ECC
CMP             R5, #0x73 ; 's'
BEQ             loc_53BD4 ; jumptable 00053188 cases 3,116
B               loc_530E4 ; jumptable 00053188 case 11

loc_53F1C               ; jumptable 00053188 case 101
BL              sub_51950
CMP             R0, #0x5A ; 'Z'
MOV             R7, R0
BNE             loc_537E4
LDR             R3, [R4,#0x1C]
CMP             R3, #0
BEQ             loc_53F80
LDR             R2, [R4,#4]
LDR             R1, [R4]
LDR             R0, [R4,#0x4C]
SUB             R2, R2, #1
BL              sub_51814
CMP             R0, #0
BGE             loc_53F6C
CMN             R0, #1
BNE             loc_53F64
LDR             R0, =aWriteErrorM ; "Write error: %m"
BL              sub_51000

loc_53F64
MOV             R5, R7
B               loc_530E4 ; jumptable 00053188 case 11

loc_53F6C
LDM             R4, {R2,R3}
SUB             R3, R3, R2
CMP             R3, R0
BNE             loc_53F64
MOV             R3, #0

loc_53F80
STR             R3, [R4,#0x14]
B               loc_53F64
off_53F88 DCD dword_7DB98
off_53F8C DCD aDeleted_0 ; "deleted"
off_53F90 DCD aAlreadyAtOldes ; "Already at oldest change"
off_53F94 DCD aHJ+3     ; "\x1B[J"
off_53F98 DCD aRestored ; "restored"
off_53F9C DCD aUndoDSDCharsAt ; "Undo [%d] %s %d chars at position %d"
off_53FA0 DCD asc_6B2F3 ; "()[]{}"
off_53FA4 DCD aPatternNotFoun ; "Pattern not found"
off_53FA8 DCD aSearchHitBotto ; "search hit BOTTOM, continuing at TOP"
off_53FAC DCD aSearchHitTopCo ; "search hit TOP, continuing at BOTTOM"
off_53FB0 DCD aSS_8+3   ; "%s"
off_53FB4 DCD aShellReturnedI+0x12 ; "\n\n"
off_53FB8 DCD aTheseFeaturesA+0x5C ; ":"
off_53FBC DCD aWriteErrorM ; "Write error: %m"
off_53FC0 DCD asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
off_53FC4 DCD aWw       ; "wW"
off_53FC8 DCD a0bbeeftLh ; "^0bBeEft%$ lh\b"
off_53FCC DCD aCdykjhl  ; "cdykjHL+-{}\r\n"
off_53FD0 DCD aChange   ; "Change"
off_53FD4 DCD aDelete_0 ; "Delete"

loc_53FD8               ; jumptable 00053188 cases 109,112
LDR             R8, [R4,#4]
CMP             R5, #0x62 ; 'b'
LDR             R11, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
MOVEQ           R7, #0xFFFFFFFF
MOVNE           R7, #1
LDR             R3, [R4]
CMP             R5, #0x65 ; 'e'
SUB             R8, R8, #1
MOVEQ           R10, #2
MOVNE           R10, #1
STR             R3, [SP,#0x2C+var_20]

loc_54004
LDR             R3, [R4,#8]
LDR             R2, [SP,#0x2C+var_20]
ADD             R0, R3, R7
CMP             R0, R2
BCC             loc_530E4 ; jumptable 00053188 case 11
CMP             R0, R8
BHI             loc_530E4 ; jumptable 00053188 case 11
STR             R0, [R4,#8]
LDRB            R3, [R3,R7]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BHI             loc_5404C
MOV             R3, #3
MOV             R2, R7
MOV             R1, R10
BL              sub_511A8
STR             R0, [R4,#8]

loc_5404C
LDR             R9, [R4,#8]
LDRB            R1, [R9]
SUB             R3, R1, #0x30 ; '0'
CMP             R3, #9
BLS             loc_54074
ORR             R3, R1, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R1, #0x5F ; '_'
CMPNE           R3, #0x19
BHI             loc_540A4

loc_54074
MOV             R3, #5

loc_54078
MOV             R2, R7
MOV             R1, #1
MOV             R0, R9
BL              sub_511A8
STR             R0, [R4,#8]

loc_5408C
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_54004
B               loc_530E4 ; jumptable 00053188 case 11

loc_540A4
MOV             R0, R11
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_5408C
MOV             R3, #4
B               loc_54078

loc_540C0               ; jumptable 00053188 cases 110,111
BL              sub_51950
ADD             R1, SP, #0x2C+var_14 ; int
UXTB            R2, R0  ; c
MOV             R8, R0
ADD             R0, SP, #0x2C+src ; int
BL              sub_54414
MOV             R1, #0
MOV             R9, R0
MOV             R0, R1
BL              sub_518C4
CMP             R8, #0x1B
BEQ             loc_5420C
MOV             R1, R8  ; c
LDR             R0, =aWw ; "wW"
BL              strchr
SUBS            R7, R0, #0
BEQ             loc_5415C
CMP             R5, #0x63 ; 'c'
BEQ             loc_54144

loc_5410C
MOV             R2, R9
LDRD            R0, R1, [SP,#0x2C+src] ; dest
BL              sub_519AC
STR             R0, [R4,#8]

loc_5411C
MOV             R0, #0
B               loc_54198

loc_54124
LDR             R2, [R4]
CMP             R2, R3
BCS             loc_5410C
LDRB            R2, [R3,#-1]
CMP             R2, #0xA
BEQ             loc_5410C
SUB             R3, R3, #1
STR             R3, [SP,#0x2C+var_14]

loc_54144
LDR             R3, [SP,#0x2C+var_14]
LDRB            R2, [R3]
CMP             R2, #9
CMPNE           R2, #0x20 ; ' '
BEQ             loc_54124
B               loc_5410C

loc_5415C               ; c
MOV             R1, R8
LDR             R0, =a0bbeeftLh ; "^0bBeEft%$ lh\b"
BL              strchr
CMP             R0, #0
BNE             loc_5410C
MOV             R1, R8  ; c
LDR             R0, =aCdykjhl ; "cdykjHL+-{}\r\n"
BL              strchr
SUBS            R7, R0, #0
BEQ             loc_541F4
MOV             R2, R9
LDRD            R0, R1, [SP,#0x2C+src] ; dest
BL              sub_519AC
STR             R0, [R4,#8]
MOV             R0, #1

loc_54198
CMP             R9, #0
MOVEQ           R0, #0
CMP             R0, #0
BEQ             loc_54240
CMP             R5, #0x63 ; 'c'
BNE             loc_54214
MOV             R2, #2
MOV             R1, #0xA
LDR             R0, [R4,#8] ; src
BL              sub_51F9C
LDR             R3, [R4,#4]
STR             R0, [R4,#8]
SUB             R3, R3, #1
CMP             R0, R3
BEQ             loc_541D8
BL              sub_51358

loc_541D8
CMP             R8, #0x1B
BEQ             loc_530E4 ; jumptable 00053188 case 11

loc_541E0
LDR             R1, =aChange ; "Change"
ADD             R0, SP, #0x2C+dest ; dest
BL              strcpy
MOV             R5, #0x63 ; 'c'
B               loc_53BD4 ; jumptable 00053188 cases 3,116

loc_541F4
MOV             R5, #0x1B
MOV             R9, R7
BL              sub_524D4
MOV             R8, R5
MOV             R0, R7
B               loc_54198

loc_5420C
MOV             R5, R8
B               loc_5411C

loc_54214
CMP             R5, #0x64 ; 'd'
BNE             loc_530E4 ; jumptable 00053188 case 11
BL              sub_513FC
BL              sub_50B80
CMP             R8, #0x1B
BEQ             loc_530E4 ; jumptable 00053188 case 11

loc_5422C
LDR             R1, =aDelete_0 ; "Delete"
ADD             R0, SP, #0x2C+dest ; dest
BL              strcpy
MOV             R5, #0x64 ; 'd'
B               loc_530E4 ; jumptable 00053188 case 11

loc_54240
CMP             R8, #0x1B
BEQ             loc_530E4 ; jumptable 00053188 case 11
CMP             R5, #0x63 ; 'c'
BEQ             loc_541E0
CMP             R5, #0x64 ; 'd'
BNE             loc_530E4 ; jumptable 00053188 case 11
B               loc_5422C

loc_5425C               ; jumptable 00053188 cases 9,118
BL              sub_51358
LDR             R3, [R4,#0x40]
LDR             R1, [R4,#0x3C]
LDR             R0, [R4,#8]
ADD             R1, R1, R3
BL              sub_5137C
LDR             R3, [R4,#0x28]
STR             R0, [R4,#8]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_5425C ; jumptable 00053188 cases 9,118
B               loc_530E4 ; jumptable 00053188 case 11

loc_54290               ; jumptable 00053188 case 125
BL              sub_51950
MOV             R7, R0
LDR             R0, [R4,#8]
LDRB            R3, [R0]
CMP             R3, #0xA
BEQ             loc_530E4 ; jumptable 00053188 case 11
MOV             R2, #1
MOV             R1, R2
BL              sub_50CDC
LDR             R3, [R4,#8]
MOV             R2, #2
MOV             R1, #1
STRB            R7, [R3]
LDR             R0, [R4,#8]
BL              sub_50CDC
B               loc_530E4 ; jumptable 00053188 case 11

loc_542D0               ; jumptable 00053188 case 127
BL              sub_51950
STR             R0, [R4,#0x60]
MOV             R0, #0x3B ; ';'
BL              sub_52FF8
LDR             R3, [R4,#8]
LDRB            R2, [R3]
LDR             R3, [R4,#0x60]
CMP             R2, R3
BNE             loc_542F8
BL              sub_50F90

loc_542F8
MOV             R3, #0
STR             R3, [R4,#0x60]
B               loc_530E4 ; jumptable 00053188 case 11

loc_54304
MOV             R0, R7
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_53400
MOV             R3, #4
B               loc_533EC

loc_54320               ; jumptable 00053188 case 133
BL              sub_51950
CMP             R0, #0x2E ; '.'
LDREQ           R7, [R4,#0x2C]
SUBEQ           R7, R7, #2
MOVEQ           R7, R7,LSR#1
BEQ             loc_54348
CMP             R0, #0x2D ; '-'
LDREQ           R7, [R4,#0x2C]
MOVNE           R7, #0
SUBEQ           R7, R7, #2

loc_54348
LDR             R0, [R4,#8]
BL              sub_512E4
MOV             R1, #0xFFFFFFFF
STR             R0, [R4,#0x50]
MOV             R0, R7
B               loc_534E8

loc_54360               ; jumptable 00053188 case 135
LDR             R1, [R4,#0x28]
LDR             R0, [R4,#8]
SUB             R1, R1, #1
BL              sub_5137C
B               loc_530E0

loc_54374               ; jumptable 00053188 case 137
LDR             R0, [R4,#8]
LDRB            R3, [R0]
SUB             R2, R3, #0x61 ; 'a'
CMP             R2, #0x19
BHI             loc_543DC
MOV             R2, #1
MOV             R1, R2
BL              sub_50CDC
LDR             R2, [R4,#8]
LDRB            R3, [R2]
SUB             R1, R3, #0x61 ; 'a'
CMP             R1, #0x19
SUBLS           R3, R3, #0x20 ; ' '
BLS             loc_5440C

loc_543AC
STRB            R3, [R2]
MOV             R1, #1
MOV             R2, #2
LDR             R0, [R4,#8]
BL              sub_50CDC

loc_543C0
BL              sub_50FC8
LDR             R3, [R4,#0x28]
SUB             R3, R3, #1
CMP             R3, #0
STR             R3, [R4,#0x28]
BGT             loc_54374 ; jumptable 00053188 case 137
B               loc_530E4 ; jumptable 00053188 case 11

loc_543DC
SUB             R3, R3, #0x41 ; 'A'
CMP             R3, #0x19
BHI             loc_543C0
MOV             R2, #1
MOV             R1, R2
BL              sub_50CDC
LDR             R2, [R4,#8]
LDRB            R3, [R2]
SUB             R1, R3, #0x41 ; 'A'
CMP             R1, #0x19
BHI             loc_543AC
ADD             R3, R3, #0x20 ; ' '

loc_5440C
UXTB            R3, R3
B               loc_543AC
; End of function sub_52FF8




; int __fastcall sub_54414(unsigned int *, char **, int c)
sub_54414
PUSH            {R3-R11,LR}
MOV             R10, R0
LDR             R3, =dword_7DB98
MOV             R9, R1
MOV             R1, R2  ; c
MOV             R7, R2
LDR             R0, =aCdy ; "cdy><"
LDR             R4, [R3]
BL              strchr
CMP             R0, #0
LDR             R8, [R4,#8]
BEQ             loc_544B8
MOV             R0, R8
MOV             R5, #1
BL              sub_512E4
LDR             R11, [R4,#0x28]
MOV             R6, R0

loc_54458
CMP             R11, R5
BGT             loc_544AC
BL              sub_51420
MOV             R5, R0

loc_54468
CMP             R6, R5
BHI             loc_54638
BCS             loc_54488

loc_54474               ; c
MOV             R1, R7
LDR             R0, =a0bbh ; "^0bBh\b"
BL              strchr
CMP             R0, #0
SUBNE           R5, R5, #1

loc_54488
MOV             R3, R6

loc_5448C
CMP             R5, R3
MOV             R2, R3
BCS             loc_54648
MOV             R0, #0

loc_5449C
STR             R6, [R10]
STR             R5, [R9]
STR             R8, [R4,#8]
POP             {R3-R11,PC}

loc_544AC
BL              sub_51464
ADD             R5, R5, #1
B               loc_54458

loc_544B8               ; c
MOV             R1, R7
LDR             R0, =a0bbeefth ; "^%$0bBeEfth\b"
BL              strchr
CMP             R0, #0
BEQ             loc_544E0
MOV             R0, R7
BL              sub_52FF8

loc_544D4
LDR             R5, [R4,#8]
MOV             R6, R8
B               loc_54468

loc_544E0               ; c
MOV             R1, R7
LDR             R0, =aWw ; "wW"
BL              strchr
CMP             R0, #0
BEQ             loc_545C8
MOV             R0, R7
BL              sub_52FF8
LDR             R11, [R4,#8]
LDR             R6, [R4]
CMP             R11, R6
BLS             loc_545A8
LDRB            R5, [R11,#-1]
SUB             R3, R5, #9
CMP             R5, #0x20 ; ' '
CMPNE           R3, #4
BHI             loc_54534
LDRB            R3, [R11]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BHI             loc_545A0

loc_54534
MOV             R1, R5
LDR             R0, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_54564
LDRB            R1, [R11]
LDR             R0, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_545A0

loc_54564
SUB             R3, R5, #0x30 ; '0'
CMP             R3, #9
BLS             loc_54580
ORR             R5, R5, #0x20 ; ' '
SUB             R5, R5, #0x61 ; 'a'
CMP             R5, #0x19
BHI             loc_545A8

loc_54580
LDRB            R3, [R11]
SUB             R2, R3, #0x30 ; '0'
CMP             R2, #9
BLS             loc_545A8
ORR             R3, R3, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R3, #0x19
BLS             loc_545A8

loc_545A0
SUB             R11, R11, #1
STR             R11, [R4,#8]

loc_545A8
LDR             R3, [R4,#8]
CMP             R6, R3
BCS             loc_544D4
LDRB            R2, [R3]
CMP             R2, #0xA
SUBEQ           R3, R3, #1
STREQ           R3, [R4,#8]
B               loc_544D4

loc_545C8               ; c
MOV             R1, R7
LDR             R0, =aHK ; "H-k{"
BL              strchr
CMP             R0, #0
BEQ             loc_545FC
MOV             R0, R8
BL              sub_51420
MOV             R5, R0
MOV             R0, R7
BL              sub_52FF8
BL              sub_513FC
LDR             R6, [R4,#8]
B               loc_54468

loc_545FC               ; c
MOV             R1, R7
LDR             R0, =aLJ ; "L+j}\r\n"
BL              strchr
CMP             R0, #0
MOVEQ           R6, R8
MOVEQ           R5, R8
BEQ             loc_54488
MOV             R0, R8
BL              sub_512E4
MOV             R6, R0
MOV             R0, R7
BL              sub_52FF8
BL              sub_517F0
LDR             R5, [R4,#8]
B               loc_54468

loc_54638
MOV             R3, R6
MOV             R6, R5
MOV             R5, R3
B               loc_54474

loc_54648
LDRB            R2, [R2]
ADD             R3, R3, #1
CMP             R2, #0xA
BNE             loc_5448C
MOV             R0, #1
B               loc_5449C
; End of function sub_54414

off_54660 DCD dword_7DB98
off_54664 DCD aCdy      ; "cdy><"
off_54668 DCD a0bbh     ; "^0bBh\b"
off_5466C DCD a0bbeefth ; "^%$0bBeEfth\b"
off_54670 DCD aWw       ; "wW"
off_54674 DCD asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
off_54678 DCD aHK       ; "H-k{"
off_5467C DCD aLJ       ; "L+j}\r\n"



; int __fastcall sub_54680(int, char *const *)
sub_54680

var_10= -0x10
fds= -0xC

PUSH            {R4-R11,LR}
MOV             R8, R0
SUB             SP, SP, #0x14
MOVW            R0, #0x1364
MOV             R9, R1
BL              sub_174DC
LDR             R3, =dword_7DB98
MOV             R4, R0
STR             R0, [R3]
MOV             R3, #0xFFFFFFFF
STR             R3, [R0,#0x20]
MOV             R0, #2
BL              sub_174DC
ADD             R3, R4, #0x1000
MOV             R2, #0x40 ; '@'
STR             R0, [R4,#0x68]
STRB            R2, [R3,#0x254]
MOV             R3, #6
LDR             R0, =aExinit ; "EXINIT"
STR             R3, [R4,#0x10]
BL              getenv
SUBS            R3, R0, #0
BEQ             loc_546F4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_546F4
MOV             R1, #0x80
BL              sub_1751C
STR             R0, [R4,#0xB0]

loc_546F4
LDR             R6, =aHcrhc ; "hCRHc:"
LDR             R7, =optarg

loc_546FC               ; shortopts
MOV             R2, R6
MOV             R1, R9  ; argv
MOV             R0, R8  ; argc
BL              getopt
CMN             R0, #1
BNE             loc_54828
LDR             R6, =optind
MOV             R5, #0
LDR             R0, =a1049h ; "\x1B[?1049h"
LDR             R3, [R6]
STR             R5, [R6]
SUB             R8, R8, R3
MOV             R2, R3,LSL#2
STR             R8, [R4,#0x24]
STR             R2, [SP,#0x14+var_10]
BL              sub_518B4

loc_5473C
LDR             R3, [R6]
MOV             R7, #0x50 ; 'P'
LDR             R2, [SP,#0x14+var_10]
ADD             R3, R9, R3,LSL#2
LDR             R11, [R3,R2]
MOV             R3, #1
STR             R3, [R4,#0x14]
BL              sub_50BD8
MOV             R3, #0x18
LDR             R0, [R4,#0x54] ; ptr
STR             R3, [R4,#0x2C]
STR             R7, [R4,#0x30]
STR             R5, [R4,#0x34]
BL              free
MOVW            R0, #0x788
STR             R0, [R4,#0x58]
BL              sub_1748C
STR             R0, [R4,#0x54]
BL              sub_50C04
MOV             R3, R7
MOV             R1, #0x7E ; '~'

loc_54790
LDR             R2, [R4,#0x54]
STRB            R1, [R2,R3]
ADD             R3, R3, #0x50 ; 'P'
CMP             R3, #0x730
BNE             loc_54790
MOV             R0, R11
ADD             R11, R4, #0xAC
BL              sub_52108
MOV             R3, #8
STRB            R5, [R4,#0x65]
STR             R5, [R4,#0x60]
STR             R5, [R4,#0x38]
STR             R5, [R4,#0x3C]
STR             R5, [R4,#0x18]
STR             R5, [R4,#0x28]
STR             R3, [R4,#0x5C]
STR             R5, [R4,#0x40]

loc_547D4
LDR             R7, [R11,#4]!
CMP             R7, #0
BNE             loc_54878
MOV             R11, #1
MOV             R0, R7
BL              sub_522A0

loc_547EC
LDR             R3, [R4,#0x14]
CMP             R3, #0
BGT             loc_548D8
BL              sub_51920
BL              sub_51894
LDR             R3, [R6]
ADD             R3, R3, #1
CMP             R3, R8
STR             R3, [R6]
BLT             loc_5473C
LDR             R0, =a1049l ; "\x1B[?1049l"
BL              sub_518B4
MOV             R0, #0
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_54828
CMP             R0, #0x48 ; 'H'
BEQ             loc_54868
CMP             R0, #0x63 ; 'c'
BNE             loc_54870
LDR             R0, [R7]
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_546FC
LDR             R5, [R4,#0xB0]
MOV             R1, #0x80
MOVS            R5, R5
MOVNE           R5, #1
ADD             R5, R5, #0x2C ; ','
BL              sub_1751C
STR             R0, [R4,R5,LSL#2]
B               loc_546FC

loc_54868
LDR             R0, =aTheseFeaturesA ; "These features are available:\n\tPatter"...
BL              puts

loc_54870
BL              sub_162F0

loc_54874
MOV             R7, R10

loc_54878               ; c
MOV             R1, #0xA
MOV             R0, R7  ; s
BL              strchr
SUBS            R10, R0, #0
MOVNE           R2, R10
BNE             loc_548C0

loc_54890
LDRB            R2, [R7]
CMP             R2, #0
BEQ             loc_548A4
MOV             R0, R7
BL              sub_525A0

loc_548A4
CMP             R10, #0
BNE             loc_54874
LDR             R0, [R11] ; ptr
BL              free
STR             R10, [R11]
B               loc_547D4

loc_548BC
STRB            R5, [R2,#-1]

loc_548C0
MOV             R10, R2
ADD             R2, R2, #1
LDRB            R1, [R10]
CMP             R1, #0xA
BEQ             loc_548BC
B               loc_54890

loc_548D8
BL              sub_51950
STRB            R0, [R4,#0x65]
BL              sub_52FF8
LDRB            R7, [R4,#0xBC]
CMP             R7, #0
BNE             loc_547EC
MOV             R2, R7  ; timeout
MOV             R1, #1  ; nfds
ADD             R0, SP, #0x14+fds ; fds
STR             R7, [SP,#0x14+fds]
STRH            R11, [SP,#0x14+fds.events]
BL              sub_60AD4
CMP             R0, #0
BGT             loc_547EC
MOV             R0, R7
BL              sub_51CCC
BL              sub_5232C
B               loc_547EC
; End of function sub_54680

off_54920 DCD dword_7DB98
off_54924 DCD aExinit   ; "EXINIT"
off_54928 DCD aHcrhc    ; "hCRHc:"
off_5492C DCD optarg
off_54930 DCD optind
off_54934 DCD a1049h    ; "\x1B[?1049h"
off_54938 DCD a1049l    ; "\x1B[?1049l"
off_5493C DCD aTheseFeaturesA ; "These features are available:\n\tPatter"...



; bool __fastcall sub_54940(int, int, int)
sub_54940
LDR             R3, [R1,#0x10]
LDR             R0, [R2,#8]
AND             R3, R3, #0xF000
SUB             R0, R3, R0
CLZ             R0, R0
MOV             R0, R0,LSR#5
BX              LR
; End of function sub_54940




; bool __fastcall sub_5495C(int, int, int)
sub_5495C
LDRD            R0, R1, [R1,#0x60]
LDRD            R2, R3, [R2,#8]
CMP             R1, R3
CMPEQ           R0, R2
MOVEQ           R0, #1
MOVNE           R0, #0
BX              LR
; End of function sub_5495C




; bool __fastcall sub_54978(int, int, int)
sub_54978
LDRB            R12, [R2,#8]
LDRD            R0, R1, [R1,#0x30]
LDRD            R2, R3, [R2,#0x10]
CMP             R12, #0x2B ; '+'
BNE             loc_549A0
CMP             R2, R0
SBCS            R3, R3, R1

loc_54994
MOVLT           R0, #1
MOVGE           R0, #0
BX              LR

loc_549A0
CMP             R12, #0x2D ; '-'
BNE             loc_549B4
CMP             R0, R2
SBCS            R3, R1, R3
B               loc_54994

loc_549B4
CMP             R1, R3
CMPEQ           R0, R2
MOVEQ           R0, #1
MOVNE           R0, #0
BX              LR
; End of function sub_54978




; int __fastcall sub_549C8(char *s, int)
sub_549C8
LDR             R3, =buf
PUSH            {R4-R10,LR}
MOV             R9, R0
MOV             R10, R1
MOV             R4, #0
MOV             R7, R3
LDR             R8, [R3]
SUB             R8, R8, #4

loc_549E8
LDR             R5, [R8,#4]!
CMP             R5, #0
BEQ             loc_54A08
BIC             R4, R4, #1
SUB             R5, R5, #4

loc_549FC
LDR             R6, [R5,#4]!
CMP             R6, #0
BNE             loc_54A38

loc_54A08
EOR             R4, R4, #1
TST             R4, #1
BEQ             loc_54A28
LDR             R3, [R7,#termios.c_oflag]
CMP             R3, #0
BEQ             loc_54A28
MOV             R0, R9  ; s
BL              puts

loc_54A28
TST             R4, #2
MOVNE           R0, #2
MOVEQ           R0, #1
POP             {R4-R10,PC}

loc_54A38
LDR             R3, [R6]
MOV             R2, R6
MOV             R1, R10
MOV             R0, R9
BLX             R3
LDRB            R3, [R6,#4]
EOR             R0, R0, #1
ORR             R4, R4, R0
CMP             R3, #0
EORNE           R4, R4, #1
TST             R4, #1
BEQ             loc_549FC
B               loc_549E8
; End of function sub_549C8

off_54A6C DCD buf



; int __fastcall sub_54A70(const char *)
sub_54A70
PUSH            {R4,LR}
BL              puts
MOV             R0, #1
POP             {R4,PC}
; End of function sub_54A70




; _BYTE *__fastcall sub_54A80(int *, size_t, int)
sub_54A80
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R0, R1
MOV             R7, R2
BL              sub_174DC
LDR             R1, [R4,#8]
MOV             R5, R0
LDM             R4, {R6,R8}
ADD             R1, R1, #2
MOV             R1, R1,LSL#2
LDR             R0, [R6,R8,LSL#2]
BL              sub_174B4
LDR             R3, [R4,#8]
STR             R0, [R6,R8,LSL#2]
ADD             R2, R3, #1
STR             R2, [R4,#8]
LDRB            R2, [R4,#0xC]
STR             R5, [R0,R3,LSL#2]
ADD             R0, R0, R3,LSL#2
MOV             R3, #0
STR             R3, [R0,#4]
MOV             R0, R5
STR             R7, [R5]
STRB            R2, [R5,#4]
STRB            R3, [R4,#0xC]
POP             {R4-R8,PC}
; End of function sub_54A80




; bool __fastcall sub_54AE8(char *name, int, int)
sub_54AE8
MOV             R3, R2
LDRB            R2, [R2,#0xC]
MOV             R1, R0  ; name
PUSH            {R4,LR}
LDR             R0, [R3,#8] ; pattern
CMP             R2, #0
MOVNE           R2, #0x10
MOVEQ           R2, #0  ; flags
BL              fnmatch
CLZ             R0, R0
MOV             R0, R0,LSR#5
POP             {R4,PC}
; End of function sub_54AE8




; unsigned int __fastcall sub_54B18(const char *, int, int)
sub_54B18
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R6, R2
BL              sub_169FC
LDRB            R3, [R0]
CMP             R3, #0
MOVNE           R5, R0
MOVNE           R4, #0
BNE             loc_54BA0

loc_54B3C
CMP             R5, R0
MOV             R4, R0
BEQ             loc_54B84
LDRB            R3, [R0,#-1]
SUB             R2, R0, #1
CMP             R3, #0x2F ; '/'
BEQ             loc_54B70

loc_54B58
MOV             R3, R0
LDRB            R2, [R0,#-1]!
CMP             R2, #0x2F ; '/'
BNE             loc_54B78
MOV             R5, R3
B               loc_54B94

loc_54B70
MOV             R0, R2
B               loc_54B3C

loc_54B78
CMP             R5, R0
BEQ             loc_54B94
B               loc_54B58

loc_54B84
LDRB            R4, [R5,#1]
CMP             R4, #0
BEQ             loc_54BA0
ADD             R4, R5, #1

loc_54B94
CMP             R4, #0
MOVNE           R3, #0
STRBNE          R3, [R4]

loc_54BA0
LDRB            R3, [R6,#0xC]
MOV             R1, R5  ; name
LDR             R0, [R6,#8] ; pattern
CMP             R3, #0
MOVNE           R2, #0x10
MOVEQ           R2, #0  ; flags
BL              fnmatch
CMP             R4, #0
CLZ             R0, R0
MOVNE           R3, #0x2F ; '/'
MOV             R0, R0,LSR#5
STRBNE          R3, [R4]
POP             {R4-R6,PC}
; End of function sub_54B18



; Attributes: bp-based frame fpd=0xFFFFFFE0

; bool __fastcall sub_54BD4(_DWORD *, const char *)
sub_54BD4

var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
ADD             R11, SP, #0x20
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R8, #0
LDR             R3, [R0,#0x10]
LDR             R2, [R0,#0x18]
STR             R1, [R11,#-0x20+var_8]
ADD             R3, R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, #0xE
BIC             R3, R3, #7
SUB             SP, SP, R3
MOV             R6, SP
MOV             R5, R6

loc_54C10
LDR             R3, [R4,#0x10]
LDR             R2, [R4,#0x14]
CMP             R8, R3
BLT             loc_54C70
MOV             R3, #0
MOV             R0, R6
CMP             R2, R3
STR             R3, [R5]
STRNE           R3, [R2]
STRNE           R3, [R4,#0x18]
STRNE           R3, [R4,#0x1C]
BL              sub_61B38
SUBS            R4, R0, #0
BGE             loc_54C50
LDR             R0, [R6]
BL              sub_16B80

loc_54C50
SUB             R6, R6, #4

loc_54C54               ; ptr
LDR             R0, [R6,#4]!
CMP             R0, #0
BNE             loc_54D04
CLZ             R0, R4
MOV             R0, R0,LSR#5
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_54C70
LDR             R3, [R4,#8]
CMP             R2, #0
LDR             R9, [R3,R8,LSL#2]
LDR             R3, [R4,#0xC]
LDR             R1, [R3,R8,LSL#2] ; int
BEQ             loc_54CEC
CMP             R1, #0
BNE             loc_54CE4
MOV             R0, R9
ADD             R7, R5, #4
BL              sub_174F8

loc_54C9C
STR             R0, [R5]
B               loc_54CD8

loc_54CA4               ; s
LDR             R2, =(asc_6B2F3+4) ; "{}"
MOV             R1, #1  ; int
MOV             R0, R9  ; int
BL              sub_60924
LDR             R3, [R4,#0x14]
STR             R0, [R7],#4
LDR             R0, [R3,R10] ; ptr
BL              free

loc_54CC4
LDR             R3, [R4,#0x14]
SUB             R10, R7, R5
LDR             R3, [R3,R10]
CMP             R3, #0
BNE             loc_54CA4

loc_54CD8
ADD             R8, R8, #1
MOV             R5, R7
B               loc_54C10

loc_54CE4
MOV             R7, R5
B               loc_54CC4

loc_54CEC
LDR             R3, [R11,#-0x20+var_8]
MOV             R0, R9  ; int
LDR             R2, =(asc_6B2F3+4) ; s
ADD             R7, R5, #4
BL              sub_60924
B               loc_54C9C

loc_54D04
BL              free
B               loc_54C54
; End of function sub_54BD4

off_54D0C DCD asc_6B2F3+4 ; "{}"



; int __fastcall sub_54D10(const char *, int, _DWORD *)
sub_54D10
MOV             R1, R0
LDR             R0, [R2,#0x14]
CMP             R0, #0
BEQ             loc_54D90
PUSH            {R4-R8,LR}
MOV             R4, R2
MOV             R5, R1
LDR             R2, [R2,#0x18]
MOVW            R1, #0x408
BL              sub_62544
LDR             R7, [R4,#0x18]
MOV             R6, R0
STR             R0, [R4,#0x14]
MOV             R0, R5
ADD             R3, R7, #1
STR             R3, [R4,#0x18]
BL              sub_174F8
STR             R0, [R6,R7,LSL#2]
MOV             R0, R5  ; s
BL              strlen
LDR             R3, [R4,#0x1C]
ADD             R3, R3, #5
ADD             R0, R3, R0
LDR             R3, =buf
STR             R0, [R4,#0x1C]
LDR             R3, [R3,#termios.c_line]
CMP             R0, R3
BCC             loc_54D98
MOV             R0, R4
POP             {R4-R8,LR}
MOV             R1, #0

loc_54D8C
B               sub_54BD4

loc_54D90
MOV             R0, R2
B               loc_54D8C

loc_54D98
MOV             R0, #1
POP             {R4-R8,PC}
; End of function sub_54D10

off_54DA0 DCD buf



; int __fastcall sub_54DA4(int, _DWORD *)
sub_54DA4

var_24= -0x24
var_20= -0x20
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R7, R1
LDR             R4, =buf
MOV             R2, #0x14 ; n
SUB             SP, SP, #0x24
MOV             R1, #0  ; c
LDR             R9, =(aHlp+1) ; "HLP"
MOV             R8, R7
MOV             R0, R4  ; s
BL              memset
BL              sub_60F68
MOV             R3, #0
MOV             R2, #1
SUB             R0, R0, #0x800
STRB            R2, [R4,#termios.c_oflag]
STR             R0, [R4,#termios.c_line]
STRB            R3, [R4,#termios.c_oflag+1]
STRB            R3, [R4,#termios.c_oflag+2]
STRB            R3, [R4,#termios.c_oflag+3]
STRB            R2, [R4,#termios.c_lflag]

loc_54DF4
LDR             R5, [R8,#4]
ADD             R6, R8, #4
CMP             R5, #0
BEQ             loc_54E38
LDRB            R3, [R5]
CMP             R3, #0x2D ; '-'
BNE             loc_54E38
LDRB            R3, [R5,#1]
CMP             R3, #0
BEQ             loc_54E38
MOV             R1, R9  ; accept
ADD             R0, R5, #1 ; s
BL              strspn
ADD             R0, R5, R0
LDRB            R3, [R0,#1]
CMP             R3, #0
BEQ             loc_54F08

loc_54E38
MOV             R3, #0
MOV             R0, R7
STR             R3, [R6]
MOV             R7, #0
LDR             R1, =aHlp ; "+HLP"
BL              sub_593CC
TST             R0, #1
LDRBNE          R3, [R4,#termios.c_lflag]
ORRNE           R3, R3, #0x44 ; 'D'
STRBNE          R3, [R4,#termios.c_lflag]
TST             R0, #2
LDRBNE          R3, [R4,#termios.c_lflag]
ORRNE           R3, R3, #0x42 ; 'B'
STRBNE          R3, [R4,#termios.c_lflag]
STR             R5, [R6]

loc_54E74
LDR             R3, [R6,R7,LSL#2]
CMP             R3, #0
BNE             loc_54F10

loc_54E80
CMP             R7, #0
MOV             R0, #8
LDREQ           R3, =(asc_67ED0+4) ; "."
MOVEQ           R6, R8
MOVEQ           R7, #1
ADD             R7, R6, R7,LSL#2
STREQ           R3, [R8]
MOV             R3, #0
MOV             R8, R7
STR             R3, [SP,#0x24+var_10]
STR             R3, [SP,#0x24+var_C]
STRB            R3, [SP,#0x24+var_8]
BL              sub_174DC
STR             R0, [SP,#0x24+var_14]

loc_54EB8
LDR             R9, [R8]
CMP             R9, #0
BNE             loc_54F38
LDR             R3, [SP,#0x24+var_14]
SUB             R6, R6, #4
MOV             R5, R9
STR             R3, [R4]
STR             R9, [R7]
LDR             R7, =sub_549C8

loc_54EDC
LDR             R0, [R6,#4]!
CMP             R0, #0
BNE             loc_552CC
LDR             R6, [R4]
LDR             R7, =sub_54D10

loc_54EF0
LDR             R4, [R6],#4
CMP             R4, #0
BNE             loc_5532C

loc_54EFC
ORR             R0, R9, R4
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_54F08
MOV             R8, R6
B               loc_54DF4

loc_54F10
LDRB            R2, [R3]
CMP             R2, #0x2D ; '-'
BEQ             loc_54E80
CMP             R2, #0x21 ; '!'
BNE             loc_54F30
LDRB            R3, [R3,#1]
CMP             R3, #0
BEQ             loc_54E80

loc_54F30
ADD             R7, R7, #1
B               loc_54E74

loc_54F38               ; s2
MOV             R1, R9
LDR             R0, =aFollow ; "-follow"
BL              sub_16880
CMP             R0, #6
MOV             R5, R0
LDR             R10, [R8,#4]
BLE             loc_54FB0
CMP             R10, #0
BNE             loc_54F64

loc_54F5C
MOV             R1, R9
B               loc_5506C

loc_54F64
ADD             R8, R8, #4

loc_54F68
CMP             R5, #2
BEQ             loc_54FD4
CMP             R5, #3
BNE             loc_54FDC
LDR             R1, [SP,#0x24+var_10]
LDR             R0, [SP,#0x24+var_14]
ADD             R3, R1, #1
ADD             R1, R1, #3
MOV             R1, R1,LSL#2
STR             R3, [SP,#0x24+var_10]
BL              sub_174B4
LDR             R3, [SP,#0x24+var_10]
MOV             R2, #0
STR             R0, [SP,#0x24+var_14]
ADD             R3, R3, #1
STR             R2, [R0,R3,LSL#2]
STR             R2, [SP,#0x24+var_C]
B               loc_54FD4

loc_54FB0
CMP             R0, #0
LDRBEQ          R3, [R4,#termios.c_lflag]
ORREQ           R3, R3, #0x42 ; 'B'
BEQ             loc_54FD0
CMP             R0, #1
BNE             loc_54F68
LDRB            R3, [R4,#termios.c_lflag]
ORR             R3, R3, #8

loc_54FD0
STRB            R3, [R4,#termios.c_lflag]

loc_54FD4
ADD             R8, R8, #4
B               loc_54EB8

loc_54FDC
CMP             R5, #4
LDRBEQ          R3, [SP,#0x24+var_8]
EOREQ           R3, R3, #1
STRBEQ          R3, [SP,#0x24+var_8]
BEQ             loc_54FD4
CMP             R5, #5
BNE             loc_55020
MOV             R3, #0
LDR             R2, =sub_54A70
STRB            R3, [R4,#termios.c_oflag]
MOV             R1, #8
STRB            R3, [R4,#termios.c_oflag+1]
ADD             R0, SP, #0x24+var_14
STRB            R3, [R4,#termios.c_oflag+2]
STRB            R3, [R4,#termios.c_oflag+3]
BL              sub_54A80
B               loc_54FD4

loc_55020
CMP             R5, #6
BNE             loc_55138
MOV             R3, #0
LDR             R2, =sub_54D10
STRB            R3, [R4,#termios.c_oflag]
MOV             R1, #0x20 ; ' '
STRB            R3, [R4,#termios.c_oflag+1]
ADD             R0, SP, #0x24+var_14
STRB            R3, [R4,#termios.c_oflag+2]
STRB            R3, [R4,#termios.c_oflag+3]
BL              sub_54A80
MOV             R5, R0
ADD             R3, R8, #4
STR             R3, [R0,#8]

loc_55058
MOV             R8, R3
LDR             R2, [R3],#4
CMP             R2, #0
BNE             loc_55074
LDR             R1, =aExec ; "-exec"

loc_5506C
LDR             R0, =aSRequiresAnArg ; "%s requires an argument"
BL              sub_16DBC

loc_55074
LDRB            R1, [R2]
AND             R0, R1, #0xEF
CMP             R0, #0x2B ; '+'
BNE             loc_550F8
LDRB            R2, [R2,#1]
CMP             R2, #0
BNE             loc_550F8
CMP             R1, #0x2B ; '+'
BNE             loc_550A4
MOV             R0, #4
BL              sub_174DC
STR             R0, [R5,#0x14]

loc_550A4
LDR             R0, [R5,#0x10]
CMP             R0, #0
BEQ             loc_54F5C
MOV             R0, R0,LSL#2
MOV             R11, #0
BL              sub_1748C
LDR             R10, [R5,#0x10]
STR             R0, [R5,#0xC]
MOV             R9, R10,LSL#2

loc_550C8
SUB             R10, R10, #1
LDR             R3, =(asc_6B2F3+4) ; "{}"
CMN             R10, #1
SUB             R9, R9, #4
BNE             loc_55108
CMP             R11, #1
BEQ             loc_54FD4
LDR             R3, [R5,#0x14]
CMP             R3, #0
BEQ             loc_54FD4
LDR             R0, =aOnlyOneAllowed ; "only one '{}' allowed for -exec +"
BL              sub_16DBC

loc_550F8
LDR             R2, [R5,#0x10]
ADD             R2, R2, #1
STR             R2, [R5,#0x10]
B               loc_55058

loc_55108
LDR             R0, [R5,#8]
MOV             R1, R3  ; s
LDR             R2, [R5,#0xC]
LDR             R0, [R0,R9] ; int
STR             R2, [SP,#0x24+var_18]
BL              sub_608E0
LDR             R2, [SP,#0x24+var_18]
STR             R0, [R2,R9]
LDR             R2, [R5,#0xC]
LDR             R2, [R2,R9]
ADD             R11, R11, R2
B               loc_550C8

loc_55138
SUB             R3, R5, #7
CMP             R3, #1
BHI             loc_5516C
MOV             R1, #0x10
LDR             R2, =sub_54B18
ADD             R0, SP, R1
BL              sub_54A80
CMP             R5, #8
STR             R10, [R0,#8]

loc_5515C
MOVNE           R5, #0
MOVEQ           R5, #1
STRB            R5, [R0,#0xC]
B               loc_54FD4

loc_5516C
SUB             R3, R5, #9
CMP             R3, #1
BHI             loc_55194
MOV             R1, #0x10
LDR             R2, =sub_54AE8
ADD             R0, SP, R1
BL              sub_54A80
CMP             R5, #0xA
STR             R10, [R0,#8]
B               loc_5515C

loc_55194
CMP             R5, #0xB
BNE             loc_55240
LDR             R2, =sub_54940
MOV             R1, #0xC
ADD             R0, SP, #0x24+var_14
BL              sub_54A80
LDRB            R3, [R10]
CMP             R3, #0x62 ; 'b'
BEQ             loc_55208
CMP             R3, #0x63 ; 'c'
BEQ             loc_55210
CMP             R3, #0x64 ; 'd'
BEQ             loc_55218
CMP             R3, #0x70 ; 'p'
BEQ             loc_55220
CMP             R3, #0x66 ; 'f'
BEQ             loc_55228
CMP             R3, #0x6C ; 'l'
BEQ             loc_55230
CMP             R3, #0x73 ; 's'
BNE             loc_551F8
MOV             R3, #0xC000

loc_551EC
LDRB            R2, [R10,#1]
CMP             R2, #0
BEQ             loc_55238

loc_551F8
LDR             R2, =aType_0 ; "-type"
MOV             R1, R10
LDR             R0, =aInvalidArgumen ; "invalid argument '%s' to '%s'"
BL              sub_16DBC

loc_55208
MOV             R3, #0x6000
B               loc_551EC

loc_55210
MOV             R3, #0x2000
B               loc_551EC

loc_55218
MOV             R3, #0x4000
B               loc_551EC

loc_55220
MOV             R3, #0x1000
B               loc_551EC

loc_55228
MOV             R3, #0x8000
B               loc_551EC

loc_55230
MOV             R3, #0xA000
B               loc_551EC

loc_55238
STR             R3, [R0,#8]
B               loc_54FD4

loc_55240
CMP             R5, #0xC
BNE             loc_55274
MOV             R1, #0x10
LDR             R2, =sub_5495C
ADD             R0, SP, R1
BL              sub_54A80
MOV             R5, R0
MOV             R0, R10
BL              sub_620B0
MOV             R3, #0
STR             R0, [R5,#8]
STR             R3, [R5,#0xC]
B               loc_54FD4

loc_55274
CMP             R5, #0xD
BNE             loc_552BC
LDR             R2, =sub_54978
MOV             R1, #0x18
ADD             R0, SP, #0x24+var_14
BL              sub_54A80
LDRB            R3, [R10]
MOV             R5, R0
LDR             R1, =unk_63E74 ; int
STRB            R3, [R0,#8]
LDRB            R3, [R10]
SUB             R3, R3, #0x2B ; '+'
TST             R3, #0xFD
ADDEQ           R10, R10, #1
MOV             R0, R10 ; int
BL              sub_61EE8
STRD            R0, R1, [R5,#0x10]
B               loc_54FD4

loc_552BC
MOV             R1, R9
LDR             R0, =aUnrecognizedS ; "unrecognized: %s"
BL              sub_16DDC
BL              sub_162F0

loc_552CC
LDRB            R1, [R4,#termios.c_lflag]
MOV             R3, R7
STR             R5, [SP,#0x24+var_20]
STR             R5, [SP,#0x24+var_24]
LDR             R2, =sub_549C8
BL              sub_60474
CMP             R0, #0
MOVEQ           R9, #1
B               loc_54EDC

loc_552F0
LDR             R3, [R5]
CMP             R3, R7
BNE             loc_5532C
LDR             R3, [R5,#0x18]
CMP             R3, #0
BEQ             loc_5532C
MOV             R1, #0
MOV             R0, R5
BL              sub_54BD4
LDRB            R3, [R5,#4]
CMP             R3, #0
CLZNE           R0, R0
MOVNE           R0, R0,LSR#5
CMP             R0, #0
BEQ             loc_5533C

loc_5532C
LDR             R5, [R4],#4
CMP             R5, #0
BNE             loc_552F0
B               loc_54EF0

loc_5533C
MOV             R4, #1
B               loc_54EFC
; End of function sub_54DA4

off_55344 DCD buf
off_55348 DCD aHlp+1    ; "HLP"
off_5534C DCD aHlp      ; "+HLP"
off_55350 DCD asc_67ED0+4 ; "."
off_55354 DCD sub_549C8
off_55358 DCD sub_54D10
off_5535C DCD aFollow   ; "-follow"
off_55360 DCD sub_54A70
off_55364 DCD aExec     ; "-exec"
off_55368 DCD aSRequiresAnArg ; "%s requires an argument"
off_5536C DCD asc_6B2F3+4 ; "{}"
off_55370 DCD aOnlyOneAllowed ; "only one '{}' allowed for -exec +"
off_55374 DCD sub_54B18
off_55378 DCD sub_54AE8
off_5537C DCD sub_54940
off_55380 DCD aType_0   ; "-type"
off_55384 DCD aInvalidArgumen ; "invalid argument '%s' to '%s'"
off_55388 DCD sub_5495C
off_5538C DCD sub_54978
; const int off_55390
off_55390 DCD unk_63E74
off_55394 DCD aUnrecognizedS ; "unrecognized: %s"



; int __fastcall sub_55398(int result, int, int)
sub_55398
PUSH            {R4-R8,LR}
SUBS            R5, R1, #0
POPLE           {R4-R8,PC}
LDR             R4, =buf
MOV             R6, R2
MOV             R7, R0
LDR             R3, [R4,#(buf.c_cc+7 - 0x7D790)]
CMP             R3, #0
BNE             loc_553C8
LDR             R3, [R4,#(buf.c_cc+0xB - 0x7D790)]
CMP             R3, #0
BEQ             loc_553EC

loc_553C8
LDR             R3, [R4,#(buf.c_cc+3 - 0x7D790)]
CMP             R3, #0
BEQ             loc_553EC
LDR             R2, [R4,#(buf.c_cc+0x13 - 0x7D790)]
SUB             R3, R5, #1
CMP             R2, R3
BEQ             loc_553EC
LDR             R0, =asc_64E96 ; "--"
BL              puts

loc_553EC
MOV             R3, #0
MOV             R2, #1
STRB            R3, [R4,#(buf.c_cc+4 - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+5 - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+6 - 0x7D790)]
LDR             R3, [R4,#(buf.c_lflag - 0x7D790)]
STRB            R2, [R4,#(buf.c_cc+3 - 0x7D790)]
STR             R5, [R4,#(buf.c_cc+0x13 - 0x7D790)]
CMP             R3, #0
BEQ             loc_55424
MOV             R2, R6
LDR             R1, [R4,#(buf.c_cc+0x1B - 0x7D790)]
LDR             R0, =aSC ; "%s%c"
BL              printf

loc_55424
LDR             R3, =dword_7DBC0
LDR             R2, [R3]
MOV             R4, R3
TST             R2, #2
BEQ             loc_55448
MOV             R2, R6
MOV             R1, R5
LDR             R0, =aIC ; "%i%c"
BL              printf

loc_55448
LDR             R2, [R4]
MOVW            R3, #0x2008
BICS            R3, R3, R2
POPEQ           {R4-R8,PC}
MOV             R0, R7  ; s
POP             {R4-R8,LR}
B               puts
; End of function sub_55398

off_55464 DCD buf
off_55468 DCD asc_64E96 ; "--"
off_5546C DCD aSC       ; "%s%c"
off_55470 DCD dword_7DBC0
off_55474 DCD aIC       ; "%i%c"



; int __fastcall sub_55478(FILE *, int, int)
sub_55478

eflags= -0x2C
var_24= -0x24
pmatch= -0x20
s= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R6, #0
MOV             R11, R6
MOV             R8, R6
SUB             SP, SP, #0x2C
STR             R0, [SP,#0x2C+var_14]
STR             R6, [SP,#0x2C+var_24]

loc_55494
LDR             R0, [SP,#0x2C+var_14]
BL              sub_58D24
SUBS            R5, R0, #0
BNE             loc_55504

loc_554A4
LDR             R3, =dword_7DBC0
LDR             R2, [R3]
MOV             R4, R3
TST             R2, #0x20
BEQ             loc_554E0
LDR             R3, =buf
LDR             R2, [R3,#(buf.c_lflag - 0x7D790)]
CMP             R2, #0
BEQ             loc_554D4
LDR             R1, [R3,#(buf.c_cc+0x1B - 0x7D790)]
LDR             R0, =aS_8 ; "%s:"
BL              printf

loc_554D4
MOV             R1, R8
LDR             R0, =(aSLineDUartSPor+0x2A) ; "%d\n"
BL              printf

loc_554E0
LDR             R3, [R4]
TST             R3, #0x1000
BEQ             loc_554F8
LDR             R3, =buf
LDR             R0, [R3,#(buf.c_cc+0x1B - 0x7D790)] ; s
BL              puts

loc_554F8
MOV             R0, R8
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_55504
LDR             R2, [SP,#0x2C+var_24]
LDR             R3, =buf
ADD             R2, R2, #1
LDR             R10, [R3,#(buf.c_cc+0x17 - 0x7D790)]
STR             R2, [SP,#0x2C+var_24]
MOV             R2, #0
STR             R2, [SP,#0x2C+pmatch]
STR             R3, [SP,#0x2C+var_18]

loc_55524
CMP             R10, #0
BNE             loc_55570
LDR             R7, =buf
LDR             R2, [SP,#0x2C+pmatch]
LDR             R3, [R7,#(buf.c_cflag - 0x7D790)]
CMP             R3, R2
BEQ             loc_55930

loc_55540
LDR             R3, =dword_7DBC0
ADD             R8, R8, #1
LDR             R7, [R3]
MOVW            R3, #0x1005
TST             R7, R3
BEQ             loc_557D8
MOV             R0, R5  ; ptr
BL              free
TST             R7, #4
BEQ             loc_557BC
MOV             R0, #0  ; status
BL              exit

loc_55570
LDR             R3, =dword_7DBC0
LDR             R4, [R10,#4]
LDR             R9, [R3]
TST             R9, #0x40
BEQ             loc_55690
LDR             R3, [R4]
MOV             R7, R5
STR             R3, [SP,#0x2C+s]
AND             R3, R9, #0x80
STR             R3, [SP,#0x2C+var_10]
AND             R3, R9, #0x20000
AND             R9, R9, #0x10000
STR             R3, [SP,#0x2C+var_C]

loc_555A4
LDR             R3, [SP,#0x2C+var_10]
MOV             R0, R7  ; haystack
LDR             R1, [SP,#0x2C+s] ; needle
CMP             R3, #0
BEQ             loc_55610
BL              strcasestr

loc_555BC
CMP             R0, #0
MOV             R3, R0
BEQ             loc_55720
LDR             R2, [SP,#0x2C+var_C]
CMP             R2, #0
BEQ             loc_55618
CMP             R7, R0
BNE             loc_55720
LDR             R0, [SP,#0x2C+s] ; s
BL              strlen
LDRB            R3, [R7,R0]
CMP             R3, #0
BNE             loc_55720

loc_555F0
LDR             R3, [SP,#0x2C+var_18]
LDR             R3, [R3,#(buf.c_cflag - 0x7D790)]
CMP             R3, #0
MOV             R3, #1
STR             R3, [SP,#0x2C+pmatch]
BEQ             loc_55540

loc_55608
LDR             R10, [R10]
B               loc_55524

loc_55610
BL              strstr
B               loc_555BC

loc_55618
CMP             R9, #0
BEQ             loc_555F0
CMP             R0, R5
LDRBNE          R2, [R0,#-1]
MOVEQ           R2, #0x20 ; ' '
SUB             R1, R2, #0x30 ; '0'
CMP             R1, #9
BLS             loc_55688
ORR             R1, R2, #0x20 ; ' '
SUB             R1, R1, #0x61 ; 'a'
CMP             R2, #0x5F ; '_'
CMPNE           R1, #0x19
BLS             loc_55688
STR             R0, [SP,#0x2C+var_8]
LDR             R0, [SP,#0x2C+s] ; s
BL              strlen
LDR             R3, [SP,#0x2C+var_8]
LDRB            R2, [R3,R0]
CMP             R2, #0
BEQ             loc_555F0
SUB             R1, R2, #0x30 ; '0'
CMP             R1, #9
BLS             loc_55688
ORR             R1, R2, #0x20 ; ' '
SUB             R1, R1, #0x61 ; 'a'
CMP             R2, #0x5F ; '_'
CMPNE           R1, #0x19
BHI             loc_555F0

loc_55688
ADD             R7, R3, #1
B               loc_555A4

loc_55690
LDR             R3, [R4,#0x2C]
ADD             R9, R4, #4
TST             R3, #2
BNE             loc_556BC
ORR             R3, R3, #2
LDR             R1, [R4]
STR             R3, [R4,#0x2C]
MOV             R0, R9
LDR             R3, [SP,#0x2C+var_18]
LDR             R2, [R3,#(buf.c_oflag - 0x7D790)]
BL              sub_625E4

loc_556BC
MOV             R7, R5
MOV             R3, #0
ADD             R2, R4, #0x24 ; '$'
STR             R3, [R4,#0x24]
STR             R3, [R4,#0x28]
STR             R2, [SP,#0x2C+s]

loc_556D4               ; eflags
STR             R3, [SP,#0x2C+eflags]
MOV             R2, #1  ; nmatch
LDR             R3, [SP,#0x2C+s] ; pmatch
MOV             R1, R7  ; string
MOV             R0, R9  ; preg
BL              regexec
CMP             R0, #0
BNE             loc_55720
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #0x20000
BEQ             loc_55730
LDR             R3, [R4,#0x24]
CMP             R3, #0
LDREQ           R3, [R4,#0x28]
LDRBEQ          R0, [R7,R3]
CLZEQ           R0, R0
MOVEQ           R0, R0,LSR#5
STR             R0, [SP,#0x2C+pmatch]

loc_55720
LDR             R3, [SP,#0x2C+pmatch]
CMP             R3, #0
BNE             loc_555F0
B               loc_55608

loc_55730
TST             R3, #0x10000
BEQ             loc_555F0
CMP             R7, R5
LDR             R3, [R4,#0x24]
BHI             loc_55750
CMP             R3, #0
MOVEQ           R3, #0x20 ; ' '
BEQ             loc_55758

loc_55750
ADD             R3, R7, R3
LDRB            R3, [R3,#-1]

loc_55758
SUB             R2, R3, #0x30 ; '0'
CMP             R2, #9
BLS             loc_55780
ORR             R2, R3, #0x20 ; ' '
SUB             R2, R2, #0x61 ; 'a'
CMP             R2, #0x19
BLS             loc_55780
CMP             R3, #0x5F ; '_'
LDRNE           R3, [R4,#0x28]
LDRBNE          R3, [R7,R3]

loc_55780
SUB             R2, R3, #0x30 ; '0'
CMP             R2, #9
BLS             loc_557A4
ORR             R2, R3, #0x20 ; ' '
SUB             R2, R2, #0x61 ; 'a'
UXTB            R2, R2
CMP             R3, #0x5F ; '_'
CMPNE           R2, #0x19
BHI             loc_555F0

loc_557A4
LDR             R3, [R4,#0x28]
CMP             R3, #0
BEQ             loc_55720
ADD             R7, R7, R3
MOV             R3, #1
B               loc_556D4

loc_557BC
TST             R7, #1
BEQ             loc_557D0
LDR             R3, =buf
LDR             R0, [R3,#(buf.c_cc+0x1B - 0x7D790)] ; s
BL              puts

loc_557D0
MOV             R8, #1
B               loc_554F8

loc_557D8
TST             R7, #0x8000
BEQ             loc_557F0
LDR             R3, =buf
LDR             R3, [R3]
CMP             R3, R8
BLT             loc_554A4

loc_557F0
TST             R7, #0x20
BNE             loc_558F8
LDR             R3, =buf
CMP             R6, #0
SUBNE           R2, R6, #1
LDR             R9, [R3,#(buf.c_cc+7 - 0x7D790)]
SUBEQ           R2, R9, #1
CMP             R9, #0
BNE             loc_55840

loc_55814
LDR             R3, =buf
LDR             R11, [R3,#(buf.c_cc+0xB - 0x7D790)]
LDR             R3, =dword_7DBC0
LDR             R9, [R3]
TST             R9, #0x2000
BNE             loc_558D0
LDR             R1, [SP,#0x2C+var_24]
MOV             R2, #0x3A ; ':'
MOV             R0, R5

loc_55838
BL              sub_55398
B               loc_558F8

loc_55840
LDR             R10, [R3,#(buf.c_cc+0xF - 0x7D790)]
LDR             R3, [R10,R2,LSL#2]
CMP             R3, #0
LDRNE           R3, [SP,#0x2C+var_24]
MOVNE           R7, R6
SUBNE           R11, R3, R9
BEQ             loc_55814

loc_5585C
LDR             R3, [R10,R7,LSL#2]
CMP             R3, #0
BEQ             loc_558B8
LDR             R9, =buf
MOV             R10, #0

loc_55870
LDR             R3, [R9,#(buf.c_cc+0xF - 0x7D790)]
LDR             R0, [R3,R7,LSL#2]
CMP             R0, #0
BEQ             loc_55814
MOV             R1, R11
MOV             R2, #0x2D ; '-'
BL              sub_55398
LDR             R3, [R9,#(buf.c_cc+0xF - 0x7D790)]
ADD             R11, R11, #1
LDR             R0, [R3,R7,LSL#2] ; ptr
BL              free
LDR             R3, [R9,#(buf.c_cc+0xF - 0x7D790)]
ADD             R0, R7, #1
STR             R10, [R3,R7,LSL#2]
LDR             R1, [R9,#(buf.c_cc+7 - 0x7D790)]
BLX             sub_161AC
MOV             R7, R1
B               loc_55870

loc_558B8
ADD             R0, R7, #1
MOV             R1, R9
BLX             sub_161AC
ADD             R11, R11, #1
MOV             R7, R1
B               loc_5585C

loc_558D0
ANDS            R9, R9, #0x40 ; '@'
ADDEQ           R3, R4, #0x24 ; '$'
STREQ           R3, [SP,#0x2C+pmatch]
BEQ             loc_559D0
LDR             R3, [SP,#0x2C+pmatch]
CMP             R3, #0
MOVNE           R2, #0x3A ; ':'
LDRNE           R1, [SP,#0x2C+var_24]
LDRNE           R0, [R4]
BNE             loc_55838

loc_558F8               ; ptr
MOV             R0, R5
BL              free
LDR             R3, =dword_7DBC0
LDR             R2, [R3]
CLZ             R3, R11
MOV             R3, R3,LSR#5
ANDS            R3, R3, R2,LSR#15
BEQ             loc_55494
LDR             R3, =buf
LDR             R3, [R3]
CMP             R3, R8
BEQ             loc_554A4
MOV             R11, #0
B               loc_55494

loc_55930
CMP             R11, #0
BEQ             loc_55950
MOV             R2, #0x2D ; '-'
LDR             R1, [SP,#0x2C+var_24]
MOV             R0, R5
SUB             R11, R11, #1
BL              sub_55398
B               loc_558F8

loc_55950
LDR             R3, [R7,#(buf.c_cc+7 - 0x7D790)]
CMP             R3, #0
BEQ             loc_558F8
LDR             R3, [R7,#(buf.c_cc+0xF - 0x7D790)]
LDR             R0, [R3,R6,LSL#2] ; ptr
BL              free
LDR             R3, [R7,#(buf.c_cc+0xF - 0x7D790)]
ADD             R0, R6, #1
STR             R5, [R3,R6,LSL#2]
MOV             R5, R11
LDR             R1, [R7,#(buf.c_cc+7 - 0x7D790)]
BLX             sub_161AC
MOV             R6, R1
B               loc_558F8

loc_55988
CMP             R10, #0
BEQ             loc_558F8
ADD             R7, R7, #1
STRB            R10, [R3]

loc_55998               ; nmatch
MOV             R2, #1
LDR             R3, [SP,#0x2C+pmatch] ; pmatch
STR             R2, [SP,#0x2C+eflags] ; eflags
ADD             R1, R5, R7 ; string
ADD             R0, R4, #4 ; preg
BL              regexec
CMP             R0, #0
BNE             loc_558F8
LDR             R3, [R4,#0x24]
ADD             R3, R3, R7
STR             R3, [R4,#0x24]
LDR             R3, [R4,#0x28]
ADD             R7, R3, R7
STR             R7, [R4,#0x28]

loc_559D0
LDR             R7, [R4,#0x28]
LDR             R0, [R4,#0x24]
LDRB            R10, [R5,R7]
ADD             R3, R5, R7
CMP             R0, R7
STRB            R9, [R5,R7]
BEQ             loc_55988
MOV             R2, #0x3A ; ':'
LDR             R1, [SP,#0x2C+var_24]
ADD             R0, R5, R0
STR             R3, [SP,#0x2C+s]
BL              sub_55398
CMP             R10, #0
LDR             R3, [SP,#0x2C+s]
BEQ             loc_558F8
STRB            R10, [R3]
B               loc_55998
; End of function sub_55478

off_55A14 DCD dword_7DBC0
off_55A18 DCD buf
off_55A1C DCD aS_8      ; "%s:"
off_55A20 DCD aSLineDUartSPor+0x2A ; "%d\n"



; int __fastcall sub_55A24(const char *, int, _DWORD *)
sub_55A24

var_5C= -0x5C

LDR             R3, [R1,#0x10]
PUSH            {R4-R7,LR}
MOV             R5, R0
SUB             SP, SP, #0x6C
MOV             R6, R2
AND             R3, R3, #0xF000
CMP             R3, #0xA000
BNE             loc_55A88
MOV             R1, SP
BLX             sub_62DFC
CMP             R0, #0
BEQ             loc_55A78
LDR             R3, =dword_7DBC0
LDR             R0, [R3]
ANDS            R4, R0, #0x10
BNE             loc_55A6C
MOV             R0, R5
BL              sub_16B80

loc_55A6C
MOV             R0, #0

loc_55A70
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R7,PC}

loc_55A78
LDR             R3, [SP,#0x6C+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BEQ             loc_55AEC

loc_55A88
MOV             R0, R5
LDR             R4, =buf
BL              sub_61C9C
SUBS            R7, R0, #0
BNE             loc_55AD0
LDR             R3, =dword_7DBC0
LDR             R3, [R3]
TST             R3, #0x10
BNE             loc_55AB4
MOV             R0, R5
BL              sub_16B80

loc_55AB4
MOV             R0, #0
MOV             R3, #1
STRB            R3, [R4,#(buf.c_line - 0x7D790)]
STRB            R0, [R4,#(buf.c_cc - 0x7D790)]
STRB            R0, [R4,#(buf.c_cc+1 - 0x7D790)]
STRB            R0, [R4,#(buf.c_cc+2 - 0x7D790)]
B               loc_55A70

loc_55AD0
STR             R5, [R4,#(buf.c_cc+0x1B - 0x7D790)]
BL              sub_55478
LDR             R3, [R6]
ADD             R0, R3, R0
STR             R0, [R6]
MOV             R0, R7  ; stream
BL              fclose

loc_55AEC
MOV             R0, #1
B               loc_55A70
; End of function sub_55A24

off_55AF4 DCD dword_7DBC0
off_55AF8 DCD buf



; unsigned int __fastcall sub_55AFC(int, char **)
sub_55AFC

var_8C= -0x8C
var_88= -0x88
var_84= -0x84
var_80= -0x80
var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x8C
ADD             R3, SP, #0x8C+var_4
MOV             R2, #0
MOV             R6, R1
MOV             R1, #2
STR             R2, [R3,#-0x74]!
MOV             R0, R6
LDR             R2, =byte_7D5F8
LDR             R4, =(buf.c_cc+7)
STRB            R1, [R2]
ADD             R2, SP, #0x8C+var_74
STR             R2, [SP,#0x8C+var_80]
ADD             R2, R4, #4
STR             R4, [SP,#0x8C+var_84]
SUB             R4, R4, #0x18
STR             R2, [SP,#0x8C+var_88]
ADD             R2, R4, #0x28 ; '('
STR             R4, [SP,#0x8C+var_8C]
LDR             R1, =aLnqvscfihheFLo ; "^lnqvscFiHhe:*f:*Lorm:+wxA:+B:+C:+EaI"
BL              sub_593CC
TST             R0, #0x100000
BEQ             loc_55B70
TST             R0, #0x40000
LDREQ           R3, [SP,#0x8C+var_74]
STREQ           R3, [R4,#(buf.c_cc+0xB - 0x7D790)]
TST             R0, #0x80000
LDREQ           R3, [SP,#0x8C+var_74]
STREQ           R3, [R4,#(buf.c_cc+7 - 0x7D790)]

loc_55B70
MOVW            R3, #0x1025
LDR             R5, =dword_7DBC0
TST             R0, R3
BEQ             loc_55C6C
LDR             R3, [R5]
BIC             R3, R3, #2
STR             R3, [R5]
MOV             R3, #0
STRB            R3, [R4,#(buf.c_cc+7 - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+8 - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+9 - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+0xA - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+0xB - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+0xC - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+0xD - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+0xE - 0x7D790)]

loc_55BB0
LDR             R3, [R5]
LDR             R7, [R4,#(buf.c_cc+0x17 - 0x7D790)]
UBFX            R3, R3, #3, #1
STR             R3, [R4,#(buf.c_cflag - 0x7D790)]

loc_55BC0
CMP             R7, #0
BNE             loc_55CA8
LDR             R3, [R5]
TST             R3, #0x800
LDRNE           R0, [SP,#0x8C+var_78]
LDRNE           R8, =(buf.c_cc+0x17)
BNE             loc_55CF8

loc_55BDC
LDR             R3, =dword_7DB90
LDR             R1, [R3]
LDR             R3, [R5]
LDRB            R2, [R1]
CMP             R2, #0x66 ; 'f'
ORREQ           R3, R3, #0x40 ; '@'
STREQ           R3, [R5]
LDR             R3, [R5]
ANDS            R2, R3, #0x32000
MOVEQ           R0, #8
STRBEQ          R2, [R4,#(buf.c_oflag+1 - 0x7D790)]
STRBEQ          R0, [R4,#(buf.c_oflag - 0x7D790)]
STRBEQ          R2, [R4,#(buf.c_oflag+2 - 0x7D790)]
STRBEQ          R2, [R4,#(buf.c_oflag+3 - 0x7D790)]
LDRB            R2, [R1]
CMP             R2, #0x65 ; 'e'
BEQ             loc_55C28
TST             R3, #0x200000
BEQ             loc_55C34

loc_55C28
LDR             R2, [R4,#(buf.c_oflag - 0x7D790)]
ORR             R2, R2, #1
STR             R2, [R4,#(buf.c_oflag - 0x7D790)]

loc_55C34
TST             R3, #0x80
LDRNE           R3, [R4,#(buf.c_oflag - 0x7D790)]
ORRNE           R3, R3, #2
STRNE           R3, [R4,#(buf.c_oflag - 0x7D790)]
LDR             R3, =optind
LDR             R3, [R3]
ADD             R7, R6, R3,LSL#2
LDR             R6, [R6,R3,LSL#2]
LDR             R3, [R4,#(buf.c_cc+0x17 - 0x7D790)]
CMP             R3, #0
BNE             loc_55D70
CMP             R6, #0
BNE             loc_55D54
BL              sub_162F0

loc_55C6C
LDR             R3, [R4,#(buf.c_cc+7 - 0x7D790)]
CMP             R3, #0
BLE             loc_55BB0
CMN             R3, #0xF0000001
MOVGT           R3, #0xFFFFFFFF
STRBGT          R3, [R4,#(buf.c_cc+7 - 0x7D790)]
STRBGT          R3, [R4,#(buf.c_cc+8 - 0x7D790)]
STRBGT          R3, [R4,#(buf.c_cc+9 - 0x7D790)]
MOVGT           R3, #0xF
STRBGT          R3, [R4,#(buf.c_cc+0xA - 0x7D790)]
LDR             R0, [R4,#(buf.c_cc+7 - 0x7D790)]
MOV             R0, R0,LSL#2
BL              sub_174DC
STR             R0, [R4,#(buf.c_cc+0xF - 0x7D790)]
B               loc_55BB0

loc_55CA8
LDR             R8, [R7,#4]
MOV             R0, #0x30 ; '0'
BL              sub_174DC
STR             R8, [R0]
STR             R0, [R7,#4]
LDR             R7, [R7]
B               loc_55BC0

loc_55CC4
LDR             R7, [R0,#4]
LDR             R9, [R0]
BL              free
MOV             R0, R7
BL              sub_61D20
MOV             R7, R0

loc_55CDC
MOV             R0, R7
BL              sub_58D24
SUBS            R10, R0, #0
BNE             loc_55D38
MOV             R0, R7
BL              sub_5888C
MOV             R0, R9  ; ptr

loc_55CF8
CMP             R0, #0
BNE             loc_55CC4
LDR             R3, [R4,#(buf.c_cc+0x17 - 0x7D790)]
CMP             R3, #0
BNE             loc_55BDC
MOV             R0, #0x30 ; '0'
BL              sub_174DC
LDR             R3, =(asc_6B39D+1) ; ""
MOV             R1, R0
STR             R3, [R0]
LDR             R0, =(buf.c_cc+0x17)
BL              sub_5D2A0
LDR             R3, [R4,#(buf.c_cflag - 0x7D790)]
EOR             R3, R3, #1
STR             R3, [R4,#(buf.c_cflag - 0x7D790)]
B               loc_55BDC

loc_55D38
MOV             R0, #0x30 ; '0'
BL              sub_174DC
MOV             R1, R0
STR             R10, [R0]
MOV             R0, R8
BL              sub_5D2A0
B               loc_55CDC

loc_55D54
MOV             R0, #0x30 ; '0'
ADD             R7, R7, #4
BL              sub_174DC
MOV             R1, R0
STR             R6, [R0]
LDR             R0, =(buf.c_cc+0x17)
BL              sub_5D2A0

loc_55D70
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_55D9C
LDR             R3, [R7,#4]
CMP             R3, #0
MOVNE           R3, #0
MOVNE           R2, #1
STRBNE          R2, [R4,#(buf.c_lflag - 0x7D790)]
STRBNE          R3, [R4,#(buf.c_lflag+1 - 0x7D790)]
STRBNE          R3, [R4,#(buf.c_lflag+2 - 0x7D790)]
STRBNE          R3, [R4,#(buf.c_lflag+3 - 0x7D790)]

loc_55D9C
LDR             R2, [R5]
MOV             R6, #0
LDR             R8, =stdin
LDR             R9, =aStandardInput_0 ; "(standard input)"
TST             R2, #0x100
LDR             R10, =sub_55A24
MOVNE           R3, #0
MOVNE           R1, #1
STRBNE          R3, [R4,#(buf.c_lflag+1 - 0x7D790)]
STRBNE          R3, [R4,#(buf.c_lflag+2 - 0x7D790)]
STRBNE          R3, [R4,#(buf.c_lflag+3 - 0x7D790)]
STRBNE          R1, [R4,#(buf.c_lflag - 0x7D790)]
TST             R2, #0x200
MOVNE           R3, #0
STRBNE          R3, [R4,#(buf.c_lflag - 0x7D790)]
STRBNE          R3, [R4,#(buf.c_lflag+1 - 0x7D790)]
STRBNE          R3, [R4,#(buf.c_lflag+2 - 0x7D790)]
STRBNE          R3, [R4,#(buf.c_lflag+3 - 0x7D790)]

loc_55DE4
LDR             R0, [R7]
CMP             R0, #0
STR             R0, [R4,#(buf.c_cc+0x1B - 0x7D790)]
LDR             R11, [R8]
BEQ             loc_55E10
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BNE             loc_55E2C
LDRB            R3, [R0,#1]
CMP             R3, #0
BNE             loc_55E2C

loc_55E10
STR             R9, [R4,#(buf.c_cc+0x1B - 0x7D790)]

loc_55E14
MOV             R0, R11
BL              sub_55478
ADD             R6, R6, R0
MOV             R0, R11
BL              sub_5888C
B               loc_55E9C

loc_55E2C
LDR             R3, [R5]
TST             R3, #0x4000
BEQ             loc_55ED0
ADD             R1, SP, #0x8C+var_6C
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_55ED0
LDR             R3, [SP,#0x8C+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BNE             loc_55ED0
LDR             R3, [R5]
MOV             R1, #0xD
LDR             R0, [R4,#(buf.c_cc+0x1B - 0x7D790)]
ANDS            R3, R3, #0x200
MOVEQ           R2, #1
STRBEQ          R3, [R4,#(buf.c_lflag+1 - 0x7D790)]
STRBEQ          R2, [R4,#(buf.c_lflag - 0x7D790)]
ADD             R2, SP, #0x8C+var_4
STRBEQ          R3, [R4,#(buf.c_lflag+2 - 0x7D790)]
STRBEQ          R3, [R4,#(buf.c_lflag+3 - 0x7D790)]
MOV             R3, #0
STR             R3, [R2,#-0x6C]!
STRD            R2, R3, [SP,#0x8C+var_8C]
MOV             R2, R10
BL              sub_60474
LDR             R3, [SP,#0x8C+var_70]
ADD             R6, R6, R3

loc_55E9C
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_55EB4
LDR             R3, [R7,#4]!
CMP             R3, #0
BNE             loc_55DE4

loc_55EB4
LDR             R3, [R4,#(buf.c_line - 0x7D790)]
CMP             R3, #0
CLZEQ           R0, R6
MOVNE           R0, #2
MOVEQ           R0, R0,LSR#5
ADD             SP, SP, #0x8C
POP             {R4-R11,PC}

loc_55ED0
LDR             R0, [R4,#(buf.c_cc+0x1B - 0x7D790)]
BL              sub_61C9C
SUBS            R11, R0, #0
BNE             loc_55E14
LDR             R3, [R5]
TST             R3, #0x10
BNE             loc_55EF4
LDR             R0, [R4,#(buf.c_cc+0x1B - 0x7D790)]
BL              sub_16B80

loc_55EF4
MOV             R3, #0
MOV             R2, #1
STRB            R2, [R4,#(buf.c_line - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+1 - 0x7D790)]
STRB            R3, [R4,#(buf.c_cc+2 - 0x7D790)]
B               loc_55E9C
; End of function sub_55AFC

off_55F10 DCD byte_7D5F8
off_55F14 DCD buf.c_cc+7
off_55F18 DCD aLnqvscfihheFLo ; "^lnqvscFiHhe:*f:*Lorm:+wxA:+B:+C:+EaI"
off_55F1C DCD dword_7DBC0
off_55F20 DCD buf.c_cc+0x17
off_55F24 DCD dword_7DB90
off_55F28 DCD optind
off_55F2C DCD asc_6B39D+1 ; ""
off_55F30 DCD stdin
off_55F34 DCD aStandardInput_0 ; "(standard input)"
off_55F38 DCD sub_55A24



; tcflag_t __fastcall sub_55F3C(int)
sub_55F3C
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, =buf
LDR             R1, [R4,#termios.c_cc+3]
LDR             R0, [R4]
TST             R1, #0xFF
BNE             loc_55F68
ADD             R1, R1, #0x100
MOV             R1, R1,LSL#2
BL              sub_174B4
STR             R0, [R4]

loc_55F68
LDR             R3, [R4,#termios.c_cc+3]
LDR             R2, [R4]
ADD             R1, R3, #1
STR             R1, [R4,#termios.c_cc+3]
STR             R5, [R2,R3,LSL#2]
POP             {R4-R6,PC}
; End of function sub_55F3C

off_55F80 DCD buf



; const char *__fastcall sub_55F84(int, int, const char *)
sub_55F84
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R8, =buf
MOV             R5, R2
MOV             R6, #0
MOV             R7, R8

loc_55F9C
LDR             R3, [R8]
CMP             R3, #0
BEQ             loc_55FB4
LDR             R0, [R3,R6] ; ptr
CMP             R0, #0
BNE             loc_56004

loc_55FB4
ADD             R4, R5, R4
MOV             R6, R5

loc_55FBC
BL              getchar_unlocked
CMN             R0, #1
BEQ             loc_55FD4
LDRB            R3, [R7,#termios.c_lflag]
CMP             R3, R0
BNE             loc_55FE0

loc_55FD4
CMP             R6, R5
BEQ             loc_56064
MOV             R0, #0

loc_55FE0
CMP             R0, #0
STRB            R0, [R6],#1
BEQ             loc_5606C
CMP             R4, R6
BNE             loc_55FBC

loc_55FF4
MOV             R3, #0
MOV             R0, R5
STRB            R3, [R4]
POP             {R4-R8,PC}

loc_56004
LDR             R3, [R8,#termios.c_oflag]
LDR             R3, [R3,R6]
CMP             R3, R0
BEQ             loc_56018
BL              free

loc_56018
ADD             R6, R6, #4
B               loc_55F9C

loc_56020               ; s
LDR             R1, [R7,#termios.c_cflag]
MOV             R0, R6  ; int
BL              sub_608E0
SUBS            R1, R0, #0 ; int
BEQ             loc_56048
MOV             R0, R6  ; int
MOV             R3, R5
LDR             R2, [R7,#termios.c_cflag] ; s
BL              sub_60924
MOV             R6, R0

loc_56048
ADD             R4, R4, #4
MOV             R0, R6
BL              sub_55F3C

loc_56054
LDR             R3, [R7,#termios.c_oflag]
LDR             R6, [R3,R4]
CMP             R6, #0
BNE             loc_56020

loc_56064
MOV             R4, R5
B               loc_55FF4

loc_5606C
MOV             R4, R0
B               loc_56054
; End of function sub_55F84

off_56074 DCD buf



; char *__fastcall sub_56078(int, int, char *s)
sub_56078
PUSH            {R4-R8,LR}
MOV             R4, R2
MOV             R6, R0
MOV             R0, R2  ; s
MOV             R7, R1
ADD             R6, R4, R6
BL              strlen
ADD             R5, R4, R0

loc_56098
BL              getchar_unlocked
CMN             R0, #1
BNE             loc_560B0
CMP             R4, R5
BEQ             loc_560E8
MOV             R0, #0

loc_560B0
CMP             R0, #0
STRB            R0, [R5],#1
BNE             loc_560D0
MOV             R0, R4
MOV             R4, R5
BL              sub_55F3C
SUBS            R7, R7, #1
BEQ             loc_560D8

loc_560D0
CMP             R6, R5
BNE             loc_56098

loc_560D8
MOV             R3, #0
MOV             R0, R4
STRB            R3, [R5]
POP             {R4-R8,PC}

loc_560E8
MOV             R5, R4
B               loc_560D8
; End of function sub_56078




; const char *__fastcall sub_560F0(int, int, char *s)
sub_560F0
PUSH            {R3-R11,LR}
MOV             R4, R2
LDR             R10, =buf
MOV             R8, R0
MOV             R6, #0
MOV             R0, R2  ; s
MOV             R9, R1
ADD             R8, R4, R8
BL              strlen
MOV             R7, R6
ADD             R5, R4, R0

loc_5611C
BL              getchar_unlocked
CMN             R0, #1
BNE             loc_56144
CMP             R4, R5
BNE             loc_561E0

loc_56130
MOV             R5, R4

loc_56134
MOV             R3, #0
MOV             R0, R4
STRB            R3, [R5]
POP             {R3-R11,PC}

loc_56144
CMP             R6, #2
BEQ             loc_561D8
CMP             R6, #1
BNE             loc_56190
CMP             R7, R0
MOVEQ           R7, #0
BEQ             loc_56230

loc_56160
CMP             R6, #4
ADD             R11, R5, #1
STRB            R0, [R5]
BNE             loc_56240
CMP             R7, #0
BEQ             loc_561EC
LDR             R3, =aDouble ; "double"
CMP             R7, #0x27 ; '''
LDR             R1, =aSingle ; "single"
LDR             R0, =aUnmatchedSQuot ; "unmatched %s quote"
MOVNE           R1, R3
BL              sub_16DBC

loc_56190
UXTB            R3, R0
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BHI             loc_561B8
CMP             R4, R5
BNE             loc_561E0

loc_561AC
CMP             R8, R5
BNE             loc_5611C
B               loc_56134

loc_561B8
CMP             R0, #0x5C ; '\'
BEQ             loc_56238
CMP             R0, #0x22 ; '"'
CMPNE           R0, #0x27 ; '''
BNE             loc_56160
MOV             R7, R3
MOV             R6, #1
B               loc_561AC

loc_561D8
MOV             R6, #0
B               loc_56160

loc_561E0
MOV             R0, #0
MOV             R6, #4
B               loc_56160

loc_561EC               ; s2
LDR             R1, [R10,#termios.c_line]
CMP             R1, #0
BEQ             loc_56218
MOV             R0, R4  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_56218

loc_56208
BL              getchar_unlocked
CMN             R0, #1
BNE             loc_56208
B               loc_56130

loc_56218
MOV             R0, R4
MOV             R5, R11
BL              sub_55F3C
SUBS            R9, R9, #1
MOV             R4, R11
BEQ             loc_56134

loc_56230
MOV             R6, #0
B               loc_561AC

loc_56238
MOV             R6, #2
B               loc_561AC

loc_56240
MOV             R5, R11
B               loc_561AC
; End of function sub_560F0

off_56248 DCD buf
off_5624C DCD aDouble   ; "double"
off_56250 DCD aSingle   ; "single"
off_56254 DCD aUnmatchedSQuot ; "unmatched %s quote"



; int __fastcall sub_56258(int, int, int)
sub_56258

stat_loc= -8

PUSH            {R0-R2,R4,R5,LR}
LDR             R4, =buf
LDR             R3, [R4,#termios.c_cc+0xB]
CMP             R3, #1
MOVNE           R5, #0
BNE             loc_562C0
LDR             R0, [R4]
BL              sub_61B38

loc_56278
CMP             R0, #0
BGE             loc_5636C
LDR             R3, [R4]
LDR             R0, [R3]
BL              sub_16B80
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
MOVEQ           R0, #0x7F
MOVNE           R0, #0x7E ; '~'

loc_562A4
STR             R0, [R4,#termios.c_cc+0xF]
B               loc_56364

loc_562AC               ; stat_loc
ADD             R0, SP, #0xC+stat_loc
BL              sub_173DC
B               loc_562E0

loc_562B8
CMP             R0, #0
BNE             loc_56278

loc_562C0
LDR             R2, [R4,#termios.c_cc+7]
LDR             R3, [R4,#termios.c_cc+0xB]
CMP             R2, R3
BLT             loc_562AC
MOV             R2, #0  ; options
ADD             R1, SP, #0xC+stat_loc ; stat_loc
MOV             R0, #0xFFFFFFFF ; pid
BL              sub_17398

loc_562E0
CMP             R0, #0
BLE             loc_56338
LDR             R3, [R4,#termios.c_cc+7]
LDR             R0, [SP,#0xC+stat_loc]
CMP             R3, #0
SUBNE           R3, R3, #1
AND             R2, R0, #0x7F
STRNE           R3, [R4,#termios.c_cc+7]
ADD             R3, R2, #1
SBFX            R3, R3, #1, #7
CMP             R3, #0
ADDGT           R0, R2, #0x180
UBFXLE          R0, R0, #8, #8
SUB             R3, R0, #1
CMP             R3, #0xFD
BHI             loc_562B8
MOV             R3, #0x7B ; '{'
STRB            R5, [R4,#termios.c_cc+0x10]
STRB            R3, [R4,#termios.c_cc+0xF]
STRB            R5, [R4,#termios.c_cc+0x11]
STRB            R5, [R4,#termios.c_cc+0x12]
B               loc_562C0

loc_56338
LDR             R0, [R4,#termios.c_cc+0xB]
CMP             R0, #0
BEQ             loc_56364
LDR             R0, [R4]
BL              sub_61AB4
CMP             R0, #0
BLE             loc_56278
LDR             R3, [R4,#termios.c_cc+7]
MOV             R0, #0
ADD             R3, R3, #1
STR             R3, [R4,#termios.c_cc+7]

loc_56364
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_5636C
CMP             R0, #0x180
BLT             loc_56390
LDR             R3, [R4]
SUB             R2, R0, #0x180
LDR             R0, =aSTerminatedByS ; "'%s' terminated by signal %d"
LDR             R1, [R3]
BL              sub_16DDC
MOV             R0, #0x7D ; '}'
B               loc_562A4

loc_56390
CMP             R0, #0
BEQ             loc_56364
CMP             R0, #0xFF
BNE             loc_563B8
LDR             R3, [R4]
LDR             R0, =aSExitedWithSta ; "%s: exited with status 255; aborting"
LDR             R1, [R3]
BL              sub_16DDC
MOV             R0, #0x7C ; '|'
B               loc_56364

loc_563B8
MOV             R0, #0
MOV             R3, #0x7B ; '{'
STRB            R3, [R4,#termios.c_cc+0xF]
STRB            R0, [R4,#termios.c_cc+0x10]
STRB            R0, [R4,#termios.c_cc+0x11]
STRB            R0, [R4,#termios.c_cc+0x12]
B               loc_56364
; End of function sub_56258

off_563D4 DCD buf
off_563D8 DCD dword_7DB94
off_563DC DCD aSTerminatedByS ; "'%s' terminated by signal %d"
off_563E0 DCD aSExitedWithSta ; "%s: exited with status 255; aborting"



; int __fastcall sub_563E4(int, char **)
sub_563E4

var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R3, #1
LDR             R4, =buf
SUB             SP, SP, #0x3C
MOV             R8, R1
MOV             R6, #0
LDR             R2, =aNoRunIfEmpty ; "no-run-if-empty"
MOV             R0, R8
STRB            R3, [R4,#termios.c_cc+0xB]
LDR             R3, =(asc_6B2F3+4) ; "{}"
LDR             R1, =aTrnSEEX0iIPA ; "+trn:s:e::E:x0I:i::P:+a:"
STR             R6, [SP,#0x3C+var_8]
STR             R3, [R4,#termios.c_cflag]
MOV             R3, #0xA
STRB            R3, [R4,#termios.c_lflag]
ADD             R3, SP, #0x3C+var_8
STR             R3, [SP,#0x3C+var_24]
ADD             R3, R4, #0x1C
STR             R3, [SP,#0x3C+var_28]
ADD             R3, R4, #8
STR             R3, [SP,#0x3C+var_2C]
STR             R3, [SP,#0x3C+var_30]
ADD             R3, R4, #0x10
STR             R3, [SP,#0x3C+var_34]
STR             R3, [SP,#0x3C+var_38]
ADD             R3, SP, #0x3C+var_C
STR             R3, [SP,#0x3C+var_3C]
ADD             R3, SP, #0x3C+var_10
STRB            R6, [R4,#termios.c_line]
STRB            R6, [R4,#termios.c_cc]
STRB            R6, [R4,#termios.c_cc+1]
STRB            R6, [R4,#termios.c_cc+2]
STRB            R6, [R4,#termios.c_cc+3]
STRB            R6, [R4,#termios.c_cc+4]
STRB            R6, [R4,#termios.c_cc+5]
STRB            R6, [R4,#termios.c_cc+6]
STRB            R6, [R4,#termios.c_cc+7]
STRB            R6, [R4,#termios.c_cc+8]
STRB            R6, [R4,#termios.c_cc+9]
STRB            R6, [R4,#termios.c_cc+0xA]
STRB            R6, [R4,#termios.c_cc+0xC]
STRB            R6, [R4,#termios.c_cc+0xD]
STRB            R6, [R4,#termios.c_cc+0xE]
STRB            R6, [R4,#termios.c_cc+0xF]
STRB            R6, [R4,#termios.c_cc+0x10]
STRB            R6, [R4,#termios.c_cc+0x11]
STRB            R6, [R4,#termios.c_cc+0x12]
BL              sub_593F8
LDR             R3, [R4,#termios.c_cc+0xB]
MOV             R5, R0
LDR             R0, [SP,#0x3C+var_8]
CMP             R3, R6
MOVLE           R3, #0x64 ; 'd'
STRBLE          R6, [R4,#termios.c_cc+0xC]
STRBLE          R3, [R4,#termios.c_cc+0xB]
STRBLE          R6, [R4,#termios.c_cc+0xD]
STRBLE          R6, [R4,#termios.c_cc+0xE]
CMP             R0, #0
BEQ             loc_564E0
MOV             R1, #0
BL              sub_175D8
MOV             R1, #0
BL              sub_176A8

loc_564E0
TST             R5, #0x20
BEQ             loc_56504
LDR             R3, [R4,#termios.c_line]
LDRB            R3, [R3]
CMP             R3, #0
STRBEQ          R3, [R4,#termios.c_line]
STRBEQ          R3, [R4,#termios.c_cc]
STRBEQ          R3, [R4,#termios.c_cc+1]
STRBEQ          R3, [R4,#termios.c_cc+2]

loc_56504
TST             R5, #0x80
MOVNE           R3, #0
LDRNE           R7, =sub_56078
STRBNE          R3, [R4,#termios.c_lflag]
LDR             R3, =optind
LDREQ           R7, =sub_560F0
LDR             R3, [R3]
ADD             R9, R8, R3,LSL#2
LDR             R3, [R8,R3,LSL#2]
CMP             R3, #0
LDREQ           R3, =(a2echo+1) ; "echo"
STREQ           R3, [R9,#-4]
SUBEQ           R9, R9, #4
BL              sub_60F68
CMP             R0, #0x8000
MOVLT           R6, R0
MOVGE           R6, #0x8000
TST             R5, #8
SUB             R6, R6, #0x800
BEQ             loc_56568
MOV             R2, #0x7FFFFFFF ; int
MOV             R1, #1  ; int
LDR             R0, [SP,#0x3C+var_C] ; int
BL              sub_6206C
MOV             R6, R0

loc_56568
SUB             R11, R9, #4
MOV             R8, #0
MOV             R10, R11

loc_56574               ; s
LDR             R0, [R10,#4]!
CMP             R0, #0
BNE             loc_56638
SUB             R6, R6, R8
CMP             R6, #0
LDRLE           R0, =aCanTFitSingleA ; "can't fit single argument within argume"...
BLE             loc_56634
ADD             R0, R6, #1
BL              sub_174DC
TST             R5, #4
MOV             R8, R0
MOVEQ           R10, R6
BEQ             loc_565BC
MOV             R2, #0x7FFFFFFF ; int
MOV             R1, #1  ; int
LDR             R0, [SP,#0x3C+var_10] ; int
BL              sub_6206C
MOV             R10, R0

loc_565BC
TST             R5, #0x300
BEQ             loc_5664C
LDR             R7, =sub_55F84
ORR             R5, R5, #2
MOV             R3, #0
STR             R9, [R4,#termios.c_oflag]
STRB            R3, [R4]
STRB            R3, [R4,#termios.c_iflag+1]
STRB            R3, [R4,#termios.c_iflag+2]
STRB            R3, [R4,#termios.c_iflag+3]

loc_565E4
LDR             R11, [R4,#termios.c_cc+3]
MOV             R3, R11,LSL#2
STR             R3, [SP,#0x3C+var_1C]

loc_565F0
MOV             R2, R8
MOV             R1, R10
STR             R11, [R4,#termios.c_cc+3]
MOV             R0, R6
BLX             R7
MOV             R9, R0
MOV             R0, #0
BL              sub_55F3C
LDR             R3, [R4]
LDR             R2, [SP,#0x3C+var_1C]
LDR             R2, [R3,R2]
CMP             R2, #0
BNE             loc_56664
LDRB            R2, [R9]
CMP             R2, #0
BEQ             loc_5665C
LDR             R0, =aArgumentLineTo ; "argument line too long"

loc_56634
BL              sub_16DBC

loc_56638
BL              strlen
ADD             R0, R0, #1
ADD             R8, R8, R0
B               loc_56574

loc_56648
BL              sub_55F3C

loc_5664C
LDR             R0, [R11,#4]!
CMP             R0, #0
BNE             loc_56648
B               loc_565E4

loc_5665C
TST             R5, #2
BNE             loc_566C8

loc_56664
TST             R5, #1
ORR             R2, R5, #2
STR             R2, [SP,#0x3C+var_18]
SUBNE           R5, R3, #4
LDRNE           R1, =(aS_2+7) ; "%s"
BNE             loc_566B0

loc_5667C
BL              sub_56258
CMP             R0, #0
BNE             loc_566C8
MOV             R1, R9
MOV             R0, R8
BL              sub_60B4C
LDR             R5, [SP,#0x3C+var_18]
B               loc_565F0

loc_5669C
LDR             R3, =stderr
LDR             R0, [R3] ; stream
BL              fprintf
LDR             R3, =(aS_2+6) ; " %s"
MOV             R1, R3  ; format

loc_566B0
LDR             R2, [R5,#4]!
CMP             R2, #0
BNE             loc_5669C
MOV             R0, #0xA
BL              sub_170EC
B               loc_5667C

loc_566C8
MOV             R3, #0
STRB            R3, [R4,#termios.c_cc+0xB]
STRB            R3, [R4,#termios.c_cc+0xC]
STRB            R3, [R4,#termios.c_cc+0xD]
STRB            R3, [R4,#termios.c_cc+0xE]
BL              sub_56258
LDR             R0, [R4,#termios.c_cc+0xF]
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}
; End of function sub_563E4

off_566EC DCD buf
off_566F0 DCD aNoRunIfEmpty ; "no-run-if-empty"
off_566F4 DCD asc_6B2F3+4 ; "{}"
off_566F8 DCD aTrnSEEX0iIPA ; "+trn:s:e::E:x0I:i::P:+a:"
off_566FC DCD sub_56078
off_56700 DCD optind
off_56704 DCD sub_560F0
off_56708 DCD a2echo+1  ; "echo"
off_5670C DCD aCanTFitSingleA ; "can't fit single argument within argume"...
off_56710 DCD sub_55F84
off_56714 DCD aArgumentLineTo ; "argument line too long"
off_56718 DCD aS_2+7    ; "%s"
off_5671C DCD stderr
off_56720 DCD aS_2+6    ; " %s"



; int sub_56724()
sub_56724

var_30C= -0x30C
var_304= -0x304
var_2E4= -0x2E4
dest= -0x2E0
var_2C0= -0x2C0
var_1B8= -0x1B8
name= -0x18C

PUSH            {LR}
SUB             SP, SP, #0x30C
MOV             R2, #0x180 ; n
MOV             R1, #0  ; c
MOV             R0, SP  ; s
BL              memset
MOV             R0, #0  ; timer
BL              time
LDR             R1, =(aForceShutdown+6) ; src
STR             R0, [SP,#0x30C+var_1B8]
ADD             R0, SP, #0x30C+dest ; dest
BL              strcpy
MOV             R3, #1
ADD             R0, SP, #0x30C+name ; name
STRH            R3, [SP,#0x30C+var_30C]
MOVW            R3, #0x7E7E
STRH            R3, [SP,#0x30C+var_2E4]
STRH            R3, [SP,#0x30C+var_304]
BL              uname
ADD             R3, SP, #0x30C+name
MOV             R2, #0x100
ADD             R1, R3, #0x82
ADD             R0, SP, #0x30C+var_2C0
BL              sub_60B34
MOV             R1, SP
LDR             R0, =aVarLogWtmp ; "/var/log/wtmp"
BL              updwtmpx
ADD             SP, SP, #0x30C
POP             {PC}
; End of function sub_56724

off_56798 DCD aForceShutdown+6 ; "shutdown"
off_5679C DCD aVarLogWtmp ; "/var/log/wtmp"



; int __fastcall sub_567A0(int, char **, unsigned int)
sub_567A0

seconds= -8

LDR             R3, =dword_7DB90
PUSH            {R0-R2,R4-R7,LR}
MOV             R4, #0
MOV             R0, R1
STR             R4, [SP,#0xC+seconds]
LDR             R3, [R3]
LDR             R1, =aHpr ; "hpr"
LDRB            R3, [R3]

loc_567C0
LDRB            R2, [R1,R4]
CMP             R2, R3
BNE             loc_56868
ADD             R2, SP, #0xC+seconds
LDR             R1, =aDNfwi ; "d:+nfwi"
BL              sub_593CC
MOV             R5, R0
LDR             R0, [SP,#0xC+seconds] ; seconds
BL              sleep
BL              sub_56724
TST             R5, #8
BNE             loc_56880
TST             R5, #2
BNE             loc_567FC
BL              sync

loc_567FC
TST             R5, #4
BNE             loc_568AC
LDR             R0, =aLinuxrc ; "linuxrc"
BL              sub_58B44
LDR             R0, [R0] ; pid
LDR             R3, =dword_63EB0
CMP             R0, #0
LDR             R6, [R3,R4,LSL#2]
BGT             loc_56870

loc_56820
LDR             R7, =aProcMeminfo ; "/proc/meminfo"
MOV             R1, R6  ; sig
MOV             R0, #1  ; pid
MOV             R4, #4
BL              kill
MOV             R5, R0

loc_56838               ; type
MOV             R1, #0
MOV             R0, R7  ; name
BL              access
CMP             R0, #0
BEQ             loc_56898
SUBS            R4, R4, #1
BCS             loc_5688C

loc_56854               ; sig
MOV             R1, R6
MOV             R0, #1  ; pid
BL              kill

loc_56860
MOV             R5, R0
B               loc_568A0

loc_56868
ADD             R4, R4, #1
B               loc_567C0

loc_56870               ; sig
MOV             R1, R6
BL              kill
CMP             R0, #0
BNE             loc_56820

loc_56880
MOV             R0, #0
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_5688C               ; seconds
MOV             R0, #1
BL              sleep
B               loc_56838

loc_56898
CMP             R4, #4
BNE             loc_56854

loc_568A0
CMP             R5, #0
BEQ             loc_56880
BL              sub_5E304

loc_568AC
LDR             R3, =dword_63EA4
LDR             R0, [R3,R4,LSL#2] ; howto
BL              reboot
B               loc_56860
; End of function sub_567A0

off_568BC DCD dword_7DB90
off_568C0 DCD aHpr      ; "hpr"
off_568C4 DCD aDNfwi    ; "d:+nfwi"
off_568C8 DCD aLinuxrc  ; "linuxrc"
off_568CC DCD dword_63EB0
off_568D0 DCD aProcMeminfo ; "/proc/meminfo"
off_568D4 DCD dword_63EA4



; unsigned int sub_568D8()
sub_568D8
LDR             R0, =0x278D00
B               sleep
; End of function sub_568D8

dword_568E0 DCD 0x278D00



; int sub_568E4()
sub_568E4

termios_p= -0x40

PUSH            {LR}
SUB             SP, SP, #0x44
ADD             R1, SP, #0x44+termios_p ; termios_p
MOV             R0, #0  ; fd
BL              tcgetattr
MOV             R3, #0x11
MOV             R1, #5
STRB            R3, [SP,#0x44+termios_p.c_cc+8]
MOV             R3, #0x13
STRB            R3, [SP,#0x44+termios_p.c_cc+9]
MOV             R3, #0x1A
STRB            R3, [SP,#0x44+termios_p.c_cc+0xA]
MOV             R0, #0x1500
LDR             R3, =0x7F1C0300
STRD            R0, R1, [SP,#0x44+termios_p]
ADD             R0, SP, #0x44+termios_p ; termios_p
STR             R3, [SP,#0x44+termios_p.c_line]
MOVW            R3, #0x415
STRH            R3, [SP,#0x44+termios_p.c_cc+3]
LDR             R3, [SP,#0x44+termios_p.c_cflag]
BIC             R3, R3, #0x7F000000
BIC             R3, R3, #0xFF0000
BIC             R3, R3, #0xEC00
BIC             R3, R3, #0x80
ORR             R3, R3, #0xC80
STR             R3, [SP,#0x44+termios_p.c_cflag]
MOVW            R3, #0x8A3B
STR             R3, [SP,#0x44+termios_p.c_lflag]
BL              sub_1729C
ADD             SP, SP, #0x44 ; 'D'
POP             {PC}
; End of function sub_568E4

dword_56960 DCD 0x7F1C0300



; char *__fastcall sub_56964(char, char *s2, const char *)
sub_56964
PUSH            {R4-R8,LR}
MOV             R8, R0
LDR             R5, =buf
MOV             R6, R1
MOV             R7, R2
LDR             R4, [R5]

loc_5697C
CMP             R4, #0
BNE             loc_5699C
MOV             R0, R6  ; s
BL              strlen
ADD             R0, R0, #0x2C ; ','
BL              sub_174DC
MOV             R4, R0
B               loc_569DC

loc_5699C               ; s2
MOV             R1, R6
ADD             R0, R4, #0x29 ; ')' ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_56A0C
MOV             R1, R7  ; s2
ADD             R0, R4, #9 ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_56A0C
LDR             R3, [R4]
STR             R3, [R5]

loc_569CC
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_56A04
STR             R3, [R4]

loc_569DC
STR             R4, [R5]
MOV             R1, R6  ; src
STRB            R8, [R4,#8]
ADD             R0, R4, #0x29 ; ')' ; dest
BL              strcpy
MOV             R1, R7
ADD             R0, R4, #9
MOV             R2, #0x20 ; ' '
POP             {R4-R8,LR}
B               sub_60B34

loc_56A04
MOV             R5, R3
B               loc_569CC

loc_56A0C
MOV             R5, R4
LDR             R4, [R4]
B               loc_5697C
; End of function sub_56964

off_56A18 DCD buf


; Attributes: noreturn

; void __fastcall __noreturn sub_56A1C(int)
sub_56A1C

howto= -8

PUSH            {R0-R2,LR}
STR             R0, [SP,#0xC+howto]
MOV             R0, #1  ; seconds
BL              sleep
BL              vfork
SUBS            R4, R0, #0
MOVNE           R4, #1
BNE             loc_56A4C
LDR             R0, [SP,#0xC+howto] ; howto
BL              reboot
MOV             R0, R4  ; status
BL              _exit

loc_56A4C               ; seconds
MOV             R0, R4
BL              sleep
B               loc_56A4C
; End of function sub_56A1C




; int sub_56A58()
sub_56A58
PUSH            {R4,LR}
MOV             R1, #0
LDR             R0, =0x18940E
BL              sub_18184
MOV             R0, #1
POP             {R4,LR}
B               sub_18158
; End of function sub_56A58

dword_56A74 DCD 0x18940E



; _DWORD *__fastcall sub_56A78(__pid_t)
sub_56A78
PUSH            {R4,LR}
SUBS            R4, R0, #0
BGT             loc_56A8C

loc_56A84
MOV             R0, #0
POP             {R4,PC}

loc_56A8C
BL              sub_617C8
LDR             R3, =buf
LDR             R0, [R3]

loc_56A98
CMP             R0, #0
BEQ             loc_56A84
LDR             R3, [R0,#4]
CMP             R3, R4
BNE             loc_56AB8
MOV             R3, #0
STR             R3, [R0,#4]
POP             {R4,PC}

loc_56AB8
LDR             R0, [R0]
B               loc_56A98
; End of function sub_56A78

off_56AC0 DCD buf



; __sighandler_t sub_56AC4()
sub_56AC4
LDR             R3, =dword_7DB94
MOV             R0, #0x12 ; sig
PUSH            {R4-R8,LR}
LDR             R4, =dword_7DBA0
LDR             R5, [R3]
LDR             R1, =sub_18140 ; handler
LDR             R6, [R4]
LDR             R7, [R5]
BL              signal

loc_56AE8               ; sig
LDR             R0, [R4]
CMP             R0, #0x12
BEQ             loc_56B0C
MOV             R0, #0  ; stat_loc
BL              sub_173DC
BL              sub_56A78
MOV             R0, #1  ; seconds
BL              sleep
B               loc_56AE8

loc_56B0C               ; handler
MOV             R1, #0
BL              signal
STR             R7, [R5]
STR             R6, [R4]
POP             {R4-R8,PC}
; End of function sub_56AC4

off_56B20 DCD dword_7DB94
off_56B24 DCD dword_7DBA0
off_56B28 DCD sub_18140



; void sub_56B2C(char, const char *, ...)
sub_56B2C

var_88= -0x88
buf= -0x84
s= -0x83
var_4= -4
varg_r1=  0x10
varg_r2=  0x14
varg_r3=  0x18

PUSH            {R1-R3}
MOV             R3, #0xD
PUSH            {R4-R6,LR}
SUB             SP, SP, #0x8C
MOV             R5, R0
MOV             R1, #0x7E ; '~' ; maxlen
ADD             R0, SP, #0x8C+s ; s
STRB            R3, [SP,#0x8C+buf]
ADD             R3, SP, #0x8C+varg_r2 ; arg
LDR             R2, [SP,#0x8C+varg_r1] ; format
STR             R3, [SP,#0x8C+var_88]
BL              vsnprintf
ADD             R0, R0, #1
ADD             R3, SP, #0x8C+var_4
CMP             R0, #0x7E ; '~'
MOV             R1, #0  ; option
MOVCC           R4, R0
MOVCS           R4, #0x7E ; '~'
TST             R5, #1
ADD             R6, R3, R4
STRB            R1, [R6,#-0x80]
BEQ             loc_56BA8
LDR             R3, =dword_7DB90
MOV             R2, #0x18 ; facility
LDR             R0, [R3] ; ident
BL              openlog
ADD             R2, SP, #0x8C+s
LDR             R1, =(aSS_8+3) ; "%s"
MOV             R0, #6  ; pri
BL              syslog
BL              closelog

loc_56BA8
MOV             R3, #0xA
ADD             R2, R4, #1 ; n
STRB            R3, [R6,#-0x80]
TST             R5, #2
ADD             R3, SP, #0x8C+var_4
MOV             R1, #0
ADD             R3, R3, R2
STRB            R1, [R3,#-0x80]
BEQ             loc_56BD8
ADD             R1, SP, #0x8C+buf ; buf
MOV             R0, #2  ; fd
BL              sub_17FB8

loc_56BD8
ADD             SP, SP, #0x8C
POP             {R4-R6,LR}
ADD             SP, SP, #0xC
BX              LR
; End of function sub_56B2C

off_56BE8 DCD dword_7DB90
off_56BEC DCD aSS_8+3   ; "%s"



; void sub_56BF0()
sub_56BF0

var_14= -0x14
s2= -0xC
var_8= -8

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x14
LDR             R1, =sub_61C9C
LDR             R0, =(aReloadingEtcIn+0xA) ; "/etc/inittab"
BL              sub_5DDC4
SUBS            R5, R0, #0
BEQ             loc_56C40
LDR             R7, =asc_6B7EB ; "#:"
LDR             R6, =0x440004
LDR             R8, =aBadInittabEntr ; "Bad inittab entry at line %d"

loc_56C18
MOV             R3, R7
MOV             R2, R6
MOV             R1, SP
MOV             R0, R5
BL              sub_5DE1C
CMP             R0, #0
BNE             loc_56CD8
MOV             R0, R5
BL              sub_5DDEC
B               loc_56CD0

loc_56C40
LDR             R2, =(asc_6B39D+1) ; ""
MOV             R0, #1  ; int
LDR             R1, =aEtcInitDRcs ; "/etc/init.d/rcS"
BL              sub_56964
LDR             R2, =(asc_6B39D+1) ; ""
MOV             R0, #0x10 ; int
LDR             R1, =aBinSh ; "-/bin/sh"
BL              sub_56964
LDR             R2, =aDevTty2 ; "/dev/tty2"
MOV             R0, #0x10 ; int
LDR             R1, =aBinSh ; "-/bin/sh"
BL              sub_56964
LDR             R2, =aDevTty3 ; "/dev/tty3"
MOV             R0, #0x10 ; int
LDR             R1, =aBinSh ; "-/bin/sh"
BL              sub_56964
LDR             R2, =aDevTty4 ; "/dev/tty4"
MOV             R0, #0x10 ; int
LDR             R1, =aBinSh ; "-/bin/sh"
BL              sub_56964
LDR             R2, =(asc_6B39D+1) ; ""
MOV             R0, #0x20 ; ' ' ; int
LDR             R1, =aReboot_0 ; "reboot"
BL              sub_56964
LDR             R2, =(asc_6B39D+1) ; ""
MOV             R0, #0x40 ; '@' ; int
LDR             R1, =aUmountAR ; "umount -a -r"
BL              sub_56964
LDR             R2, =(asc_6B39D+1) ; ""
MOV             R0, #0x40 ; '@' ; int
LDR             R1, =aSwapoffA ; "swapoff -a"
BL              sub_56964
LDR             R2, =(asc_6B39D+1) ; ""
MOV             R0, #0x80 ; int
LDR             R1, =aInit ; "init"
BL              sub_56964

loc_56CD0
ADD             SP, SP, #0x14
POP             {R4-R9,PC}

loc_56CD8
LDR             R3, [SP,#0x14+var_8]
LDR             R4, [SP,#0x14+var_14]
CMP             R3, #0
BEQ             loc_56D60
LDR             R1, [SP,#0x14+s2] ; s2
LDR             R0, =aSysinit ; "sysinit"
BL              sub_16880
SUBS            R9, R0, #0
BLT             loc_56D60
LDR             R3, [SP,#0x14+var_8]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_56D60
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_56D30
MOV             R0, R4
BL              sub_60EB8
MOV             R1, R0
LDR             R0, =aDev ; "/dev/"
BL              sub_16998
MOV             R4, R0

loc_56D30
MOV             R0, #1
MOV             R2, R4
MOV             R0, R0,LSL R9
LDR             R1, [SP,#0x14+var_8] ; s2
UXTB            R0, R0  ; int
BL              sub_56964
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_56C18
MOV             R0, R4  ; ptr
BL              free
B               loc_56C18

loc_56D60
LDR             R2, [R5,#0x18]
MOV             R1, R8
MOV             R0, #3
BL              sub_56B2C
B               loc_56C18
; End of function sub_56BF0

off_56D74 DCD sub_61C9C
off_56D78 DCD aReloadingEtcIn+0xA ; "/etc/inittab"
off_56D7C DCD asc_6B7EB ; "#:"
dword_56D80 DCD 0x440004
off_56D84 DCD aBadInittabEntr ; "Bad inittab entry at line %d"
off_56D88 DCD asc_6B39D+1 ; ""
off_56D8C DCD aEtcInitDRcs ; "/etc/init.d/rcS"
off_56D90 DCD aBinSh    ; "-/bin/sh"
off_56D94 DCD aDevTty2  ; "/dev/tty2"
off_56D98 DCD aDevTty3  ; "/dev/tty3"
off_56D9C DCD aDevTty4  ; "/dev/tty4"
off_56DA0 DCD aReboot_0 ; "reboot"
off_56DA4 DCD aUmountAR ; "umount -a -r"
off_56DA8 DCD aSwapoffA ; "swapoff -a"
off_56DAC DCD aInit     ; "init"
off_56DB0 DCD aSysinit  ; "sysinit"
off_56DB4 DCD aDev      ; "/dev/"



; int __fastcall sub_56DB8(const char *)
sub_56DB8
PUSH            {R4-R6,LR}
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_56E14
MOV             R4, R0
MOV             R0, #0  ; fd
BL              close
MOV             R1, #2
MOV             R0, R4
BL              sub_586C8
SUBS            R5, R0, #0
BEQ             loc_56E00
MOV             R2, R4
LDR             R1, =aCanTOpenSM_0 ; "can't open %s: %m"
MOV             R0, #3
BL              sub_56B2C
MOV             R0, #0
POP             {R4-R6,PC}

loc_56E00               ; fd2
MOV             R1, #1
BL              dup2
MOV             R1, #2  ; fd2
MOV             R0, R5  ; fd
BL              dup2

loc_56E14
BL              sub_568E4
MOV             R0, #1
POP             {R4-R6,PC}
; End of function sub_56DB8

off_56E20 DCD aCanTOpenSM_0 ; "can't open %s: %m"


; Attributes: bp-based frame fpd=0xFFFFFFE0

; void __fastcall sub_56E24(const char *)
sub_56E24

var_C= -0xC
var_4= -4
var_s0=  0

PUSH            {R4-R11,LR}
MOV             R7, R0
ADD             R11, SP, #0x20
SUB             SP, SP, #0xC
BL              strlen
LDRB            R9, [R7]
ADD             R3, R0, #8
MOV             R3, R3,LSR#1
ADD             R0, R0, #0xF
BIC             R0, R0, #7
LDR             R1, =asc_6B6A4 ; "~`!$^&*()=|\\{}[];\"'<>?"
SUB             R4, R9, #0x2D ; '-'
MOV             R3, R3,LSL#2
CLZ             R4, R4
MOV             R4, R4,LSR#5
ADD             R3, R3, #0xA
SUB             SP, SP, R0
BIC             R3, R3, #7
ADD             R10, R7, R4
MOV             R8, SP
MOV             R0, R10 ; s
SUB             SP, SP, R3
BL              strpbrk
SUBS            R6, R0, #0
MOV             R5, SP
BEQ             loc_56EFC
MOV             R2, R10
LDR             R1, =aExecS ; "exec %s"
MOV             R0, R8  ; s
BL              sprintf
LDR             R3, =aBinSh_0 ; "-/bin/sh"
CMP             R9, #0x2D ; '-'
ADD             R4, R3, #1
MOVNE           R3, R4
STR             R3, [R5,#0xC+var_C]
LDR             R3, =aC_1 ; "-c"
STMIB           R5, {R3,R8}
MOV             R3, #0
STR             R3, [R5,#0xC+var_s0]

loc_56EC0
CMP             R9, #0x2D ; '-'
BNE             loc_56ED8
MOV             R2, #0
MOVW            R1, #0x540E ; request
MOV             R0, R2  ; fd
BL              ioctl

loc_56ED8               ; argv
MOV             R1, R5
MOV             R0, R4  ; file
BL              execvp
MOV             R2, R4
LDR             R1, =aCanTRunSM ; "can't run '%s': %m"
MOV             R0, #3
BL              sub_56B2C
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_56EFC               ; dest
MOV             R0, R8
LDR             R8, =(asc_65657+1) ; " "
MOV             R1, R7  ; src
SUB             R7, R11, #-(-0x20+var_4)
BL              strcpy
ADD             R4, R0, R4
STR             R0, [R7,#-4]!

loc_56F18               ; delim
MOV             R1, R8
MOV             R0, R7  ; stringp
BL              strsep
CMP             R0, #0
STREQ           R0, [R5,R6,LSL#2]
BEQ             loc_56EC0
LDRB            R3, [R0]
CMP             R3, #0
STRNE           R0, [R5,R6,LSL#2]
ADDNE           R6, R6, #1
B               loc_56F18
; End of function sub_56E24

off_56F44 DCD asc_6B6A4 ; "~`!$^&*()=|\\{}[];\"'<>?"
off_56F48 DCD aExecS    ; "exec %s"
off_56F4C DCD aBinSh_0  ; "-/bin/sh"
off_56F50 DCD aC_1      ; "-c"
off_56F54 DCD aCanTRunSM ; "can't run '%s': %m"
off_56F58 DCD asc_65657+1 ; " "



; __pid_t __fastcall sub_56F5C(int)
sub_56F5C

var_18= -0x18
var_C= -0xC
buf= -1

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x18
STR             R0, [SP,#0x18+var_C]
MOV             R0, #0
BL              sub_18158
LDR             R3, [SP,#0x18+var_C]
LDRB            R3, [R3,#8]
TST             R3, #0x10
BEQ             loc_57038
BL              fork

loc_56F84
CMP             R0, #0
MOV             R4, R0
BLT             loc_57040

loc_56F90
CMP             R4, #0
BNE             loc_57050
BL              sub_56A58
BL              setsid
LDR             R3, [SP,#0x18+var_C]
ADD             R5, R3, #9
MOV             R0, R5
BL              sub_56DB8
CMP             R0, #0
MOVEQ           R0, #1
BEQ             loc_57034
LDR             R3, [SP,#0x18+var_C]
LDRB            R3, [R3,#8]
TST             R3, #0x10
BEQ             loc_57004
MOV             R6, #1
MOV             R2, #0x2E ; '.' ; n
LDR             R1, =aPleasePressEnt ; "\nPlease press Enter to activate this c"...
MOV             R0, #1  ; fd
BL              sub_17FB8

loc_56FE0               ; nbytes
MOV             R2, R6
ADD             R1, SP, #0x18+buf ; buf
MOV             R0, R4  ; fd
BL              sub_1800C
CMP             R0, #1
BNE             loc_57004
LDRB            R3, [SP,#0x18+buf]
CMP             R3, #0xA
BNE             loc_56FE0

loc_57004
BL              getpid
LDR             R3, [SP,#0x18+var_C]
MOV             R2, R0
LDR             R1, =aStartingPidUTt ; "starting pid %u, tty '%s': '%s'"
MOV             R0, #1
ADD             R4, R3, #0x29 ; ')'
MOV             R3, R5
STR             R4, [SP,#0x18+var_18]
BL              sub_56B2C
MOV             R0, R4
BL              sub_56E24
MOV             R0, #0xFFFFFFFF ; status

loc_57034
BL              _exit

loc_57038
BL              vfork
B               loc_56F84

loc_57040
LDR             R1, =aCanTFork ; "can't fork"
MOV             R0, #3
BL              sub_56B2C
B               loc_56F90

loc_57050
MOV             R0, #1
BL              sub_18158
MOV             R0, R4
ADD             SP, SP, #0x18
POP             {R4-R6,PC}
; End of function sub_56F5C

off_57064 DCD aPleasePressEnt ; "\nPlease press Enter to activate this c"...
off_57068 DCD aStartingPidUTt ; "starting pid %u, tty '%s': '%s'"
off_5706C DCD aCanTFork ; "can't fork"



; __pid_t __fastcall sub_57070(__pid_t result)
sub_57070
LDR             R3, =buf
PUSH            {R4-R6,LR}
MOV             R6, R0
LDR             R4, [R3]

loc_57080
CMP             R4, #0
POPEQ           {R4-R6,PC}
LDRB            R3, [R4,#8]
TST             R3, R6
BEQ             loc_5710C
TST             R3, #0x67
BEQ             loc_570E8
MOV             R0, R4
BL              sub_56F5C
LDRB            R3, [R4,#8]
MOV             R5, R0
TST             R3, #0x63
MOVEQ           R3, #1
MOVNE           R3, #0
CMP             R0, #0
ORRLE           R3, R3, #1
CMP             R3, #0

loc_570C4
BNE             loc_570E8
MOV             R0, #0  ; stat_loc
BL              wait
BL              sub_56A78
MOV             R1, #0  ; sig
MOV             R0, R5  ; pid
BL              kill
CMP             R0, #0
B               loc_570C4

loc_570E8
LDRB            R3, [R4,#8]
TST             R3, #0x18
BEQ             loc_5710C
LDR             R3, [R4,#4]
CMP             R3, #0
BNE             loc_5710C
MOV             R0, R4
BL              sub_56F5C
STR             R0, [R4,#4]

loc_5710C
LDR             R4, [R4]
B               loc_57080
; End of function sub_57070

off_57114 DCD buf



; void sub_57118()
sub_57118
PUSH            {R4,LR}
MOV             R0, #0x40 ; '@'
LDR             R4, =aSentSigSToAllP ; "Sent SIG%s to all processes"
BL              sub_57070
LDR             R1, =aTheSystemIsGoi ; "The system is going down NOW!"
MOV             R0, #3
BL              sub_56B2C
MOV             R1, #0xF ; sig
MOV             R0, #0xFFFFFFFF ; pid
BL              kill
LDR             R2, =(aGotTerm+6) ; "TERM"
MOV             R1, R4
MOV             R0, #2
BL              sub_56B2C
BL              sync
MOV             R0, #1  ; seconds
BL              sleep
MOV             R1, #9  ; sig
MOV             R0, #0xFFFFFFFF ; pid
BL              kill
MOV             R1, R4
LDR             R2, =aKill_1 ; "KILL"
MOV             R0, #2
BL              sub_56B2C
POP             {R4,LR}
B               sync
; End of function sub_57118

off_57180 DCD aSentSigSToAllP ; "Sent SIG%s to all processes"
off_57184 DCD aTheSystemIsGoi ; "The system is going down NOW!"
off_57188 DCD aGotTerm+6 ; "TERM"
off_5718C DCD aKill_1   ; "KILL"



; int sub_57190()
sub_57190
PUSH            {R4-R8,LR}
MOV             R0, #0
LDR             R7, =dword_7DBA0
LDR             R5, =buf

loc_571A0
LDR             R4, [R7]
CMP             R4, #0
POPEQ           {R4-R8,PC}
CMP             R4, #1
MOV             R6, #0
STR             R6, [R7]
BNE             loc_57260
LDR             R1, =aReloadingEtcIn ; "reloading /etc/inittab"
MOV             R0, R4
BL              sub_56B2C
LDR             R3, [R5]

loc_571CC
CMP             R3, #0
BNE             loc_571FC
BL              sub_56BF0
LDR             R4, [R5]

loc_571DC
CMP             R4, #0
BNE             loc_57208
MOV             R4, R5

loc_571E8               ; ptr
LDR             R0, [R4]
CMP             R0, #0
BNE             loc_57230

loc_571F4
MOV             R0, #1
B               loc_571A0

loc_571FC
STRB            R6, [R3,#8]
LDR             R3, [R3]
B               loc_571CC

loc_57208
LDRB            R3, [R4,#8]
CMP             R3, #0
BNE             loc_57228
LDR             R0, [R4,#4] ; pid
CMP             R0, #0
BEQ             loc_57228
MOV             R1, #0xF ; sig
BL              kill

loc_57228
LDR             R4, [R4]
B               loc_571DC

loc_57230
LDRB            R2, [R0,#8]
LDR             R3, [R0]
TST             R2, #0xFE
BNE             loc_57258
LDR             R2, [R0,#4]
CMP             R2, #0
BNE             loc_57258
STR             R3, [R4]
BL              free
B               loc_571E8

loc_57258
MOV             R4, R0
B               loc_571E8

loc_57260
CMP             R4, #2
BNE             loc_572C0
MOV             R0, #0x20 ; ' '
BL              sub_57070

loc_57270
LDR             R3, =0x40009400
MOV             R3, R3,ASR R4
TST             R3, #1
BEQ             loc_571F4
BL              sub_56A58
BL              sub_57118
CMP             R4, #0xF
BEQ             loc_57314
LDR             R3, =0xCDEF0123
CMP             R4, #0xC
LDR             R4, =0x4321FEDC
LDR             R2, =aPoweroff ; "poweroff"
MOVNE           R4, R3
LDR             R3, =aHalt ; "halt"
MOVNE           R2, R3

loc_572AC
MOV             R0, #2
LDR             R1, =aRequestingSyst ; "Requesting system %s"
BL              sub_56B2C
MOV             R0, R4
B               loc_57310

loc_572C0
CMP             R4, #3
LDREQ           R4, [R5]
BNE             loc_57270

loc_572CC
CMP             R4, #0
BEQ             loc_571F4
LDRSB           R3, [R4,#8]
CMP             R3, #0
LDRGE           R4, [R4]
BGE             loc_572CC
BL              sub_56A58
BL              sub_57118
LDR             R0, =0x89ABCDEF ; howto
BL              reboot
ADD             R0, R4, #9
BL              sub_56DB8
CMP             R0, #0
BEQ             loc_5730C
ADD             R0, R4, #0x29 ; ')'
BL              sub_56E24

loc_5730C
LDR             R0, =0xCDEF0123

loc_57310
BL              sub_56A1C

loc_57314
LDR             R4, =0x1234567
LDR             R2, =aReboot_0 ; "reboot"
B               loc_572AC
; End of function sub_57190

off_57320 DCD dword_7DBA0
off_57324 DCD buf
off_57328 DCD aReloadingEtcIn ; "reloading /etc/inittab"
dword_5732C DCD 0x40009400
dword_57330 DCD 0xCDEF0123
dword_57334 DCD 0x4321FEDC
off_57338 DCD aPoweroff ; "poweroff"
off_5733C DCD aHalt     ; "halt"
off_57340 DCD aRequestingSyst ; "Requesting system %s"
; const int howto
howto DCD 0x89ABCDEF
dword_57348 DCD 0x1234567
off_5734C DCD aReboot_0 ; "reboot"



; int __fastcall sub_57350(int, const char **)
sub_57350

s= -0x8C
set= -0x88

LDR             R0, [R1,#4] ; s1
PUSH            {R4-R6,LR}
MOV             R4, R1
SUB             SP, SP, #0x90
CMP             R0, #0
BEQ             loc_5738C
LDR             R1, =aQ ; "-q"
BL              strcmp
CMP             R0, #0
BNE             loc_5738C
MOV             R1, #1  ; sig
MOV             R0, R1  ; pid
BL              kill
ADD             SP, SP, #0x90
POP             {R4-R6,PC}

loc_5738C
MOV             R0, #0
BL              sub_18158
BL              getpid
CMP             R0, #1
BEQ             loc_573BC
LDR             R3, =dword_7DB90
LDR             R3, [R3]
LDRB            R3, [R3]
CMP             R3, #0x6C ; 'l'
BEQ             loc_573BC
LDR             R0, =aMustBeRunAsPid ; "must be run as PID 1"
BL              sub_16DBC

loc_573BC               ; howto
MOV             R0, #0
BL              reboot
LDR             R3, =off_7DB9C
LDR             R2, =sub_568D8
LDR             R0, =aConsole ; "CONSOLE"
STR             R2, [R3]
BL              getenv
CMP             R0, #0
BNE             loc_573F0
LDR             R0, =(aDevConsole+5) ; name
BL              getenv
CMP             R0, #0
BEQ             loc_57618

loc_573F0
MOVW            R1, #0x902
BL              open64
SUBS            R5, R0, #0
BLT             loc_57420
MOV             R1, #0  ; fd2
BL              dup2
MOV             R1, #1  ; fd2
MOV             R0, R5  ; fd
BL              dup2
MOV             R1, #2
MOV             R0, R5
BL              sub_176A8

loc_57420               ; name
LDR             R0, =(aGotTerm+6) ; "TERM"
BL              getenv
ADD             R2, SP, #0x90+s
MOV             R5, R0
MOV             R1, #0x5600 ; request
MOV             R0, #0  ; fd
BL              ioctl
CMP             R0, #0
BEQ             loc_57620
CMP             R5, #0
BEQ             loc_57460
LDR             R1, =(aTermLinux+5) ; s2
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_57468

loc_57460
LDR             R0, =aTermVt102 ; "TERM=vt102"

loc_57464
BL              putenv

loc_57468
BL              sub_568E4
LDR             R0, =(asc_69510+3) ; "/"
BL              sub_178FC
BL              setsid
LDR             R0, =aHome_0 ; "HOME=/"
BL              putenv
LDR             R0, =string ; "PATH=/sbin:/usr/sbin:/bin:/usr/bin"
BL              putenv
LDR             R0, =aShellBinSh ; "SHELL=/bin/sh"
BL              putenv
LDR             R0, =aUserRoot ; "USER=root"
BL              putenv
LDR             R1, [R4,#4]
CMP             R1, #0
BEQ             loc_574AC
LDR             R0, =aRunlevel ; "RUNLEVEL"
BL              sub_17820

loc_574AC
LDR             R5, [R4,#4]
CMP             R5, #0
BEQ             loc_57630
LDR             R1, =aSingle ; "single"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_574F8
LDR             R1, =aS ; "-s"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_574F8
LDRB            R3, [R5]
CMP             R3, #0x31 ; '1'
BNE             loc_57630
LDRB            R3, [R5,#1]
CMP             R3, #0
BNE             loc_57630

loc_574F8
LDR             R2, =(asc_6B39D+1) ; ""
MOV             R0, #8  ; int
LDR             R1, =aBinSh ; "-/bin/sh"
BL              sub_56964

loc_57508
LDR             R5, [R4]
MOV             R0, R5  ; s
BL              strlen
LDR             R1, =aInit ; "init"
MOV             R2, R0  ; n
MOV             R0, R5  ; dest
BL              strncpy

loc_57524               ; c
LDR             R1, [R4,#4]!
CMP             R1, #0
BNE             loc_57638
MOV             R2, #0x8C ; n
ADD             R0, SP, #0x90+s ; s
BL              memset
ADD             R0, SP, #0x90+set ; set
LDR             R5, =aProcessSPidDEx ; "process '%s' (pid %d) exited. Schedulin"...
BL              sigfillset
MOV             R1, #0x12 ; signo
ADD             R0, SP, #0x90+set ; set
BL              sigdelset
LDR             R3, =sub_56AC4
ADD             R1, SP, #0x90+s
MOV             R0, #0x14
STR             R3, [SP,#0x90+s]
BL              sub_18150
ADD             R1, SP, #0x90+s
MOV             R0, #0x13
BL              sub_18150
LDR             R1, =sub_18140
LDR             R0, =0x4000940E
BL              sub_181C4
MOV             R0, #1
BL              sub_18158
MOV             R0, #1
BL              sub_57070
BL              sub_57190
MOV             R0, #2
BL              sub_57070
BL              sub_57190
MOV             R0, #4
BL              sub_57070

loc_575A8
BL              sub_57190
MOV             R4, R0
MOV             R0, #0x18
BL              sub_57070
BL              sub_57190
ORR             R4, R4, R0
MOV             R0, #1  ; seconds
BL              sleep
BL              sub_57190
ORRS            R3, R4, R0
MOVNE           R4, #1
MOVEQ           R4, #0

loc_575D8               ; options
MOV             R2, R4
MOV             R1, #0  ; stat_loc
MOV             R0, #0xFFFFFFFF ; pid
BL              waitpid
SUBS            R6, R0, #0
BLE             loc_575A8
BL              sub_56A78
SUBS            R2, R0, #0
MOV             R4, #1
BEQ             loc_575D8
MOV             R3, R6
ADD             R2, R2, #0x29 ; ')'
MOV             R1, R5
MOV             R0, R4
BL              sub_56B2C
B               loc_575D8

loc_57618
BL              sub_61C40
B               loc_57420

loc_57620
CMP             R5, #0
BNE             loc_57468
LDR             R0, =aTermLinux ; "TERM=linux"
B               loc_57464

loc_57630
BL              sub_56BF0
B               loc_57508

loc_57638
MOV             R0, R1
BL              sub_5DB1C
B               loc_57524
; End of function sub_57350

off_57644 DCD aQ        ; "-q"
off_57648 DCD dword_7DB90
off_5764C DCD aMustBeRunAsPid ; "must be run as PID 1"
off_57650 DCD off_7DB9C
off_57654 DCD sub_568D8
off_57658 DCD aConsole  ; "CONSOLE"
off_5765C DCD aDevConsole+5 ; "console"
off_57660 DCD aGotTerm+6 ; "TERM"
off_57664 DCD aTermLinux+5 ; "linux"
off_57668 DCD aTermVt102 ; "TERM=vt102"
off_5766C DCD asc_69510+3 ; "/"
off_57670 DCD aHome_0   ; "HOME=/"
off_57674 DCD string    ; "PATH=/sbin:/usr/sbin:/bin:/usr/bin"
off_57678 DCD aShellBinSh ; "SHELL=/bin/sh"
off_5767C DCD aUserRoot ; "USER=root"
off_57680 DCD aRunlevel ; "RUNLEVEL"
off_57684 DCD aSingle   ; "single"
off_57688 DCD aS        ; "-s"
off_5768C DCD asc_6B39D+1 ; ""
off_57690 DCD aBinSh    ; "-/bin/sh"
off_57694 DCD aInit     ; "init"
off_57698 DCD aProcessSPidDEx ; "process '%s' (pid %d) exited. Schedulin"...
off_5769C DCD sub_56AC4
off_576A0 DCD sub_18140
dword_576A4 DCD 0x4000940E
off_576A8 DCD aTermLinux ; "TERM=linux"



; bool __fastcall sub_576AC(FILE *)
sub_576AC
PUSH            {R4-R6,LR}
MOV             R4, #0
MOV             R5, R0
BL              sub_177D8

loc_576BC               ; stream
MOV             R0, R5
BL              getc_unlocked
CMP             R0, #0xA
CMNNE           R0, #1
BNE             loc_576E0
SUB             R0, R4, #0x79 ; 'y'
CLZ             R0, R0
MOV             R0, R0,LSR#5
POP             {R4-R6,PC}

loc_576E0
CMP             R4, #0
BNE             loc_576BC
UXTB            R3, R0
CMP             R3, #9
CMPNE           R3, #0x20 ; ' '
ORRNE           R0, R0, #0x20 ; ' '
UXTBNE          R4, R0
B               loc_576BC
; End of function sub_576AC




; bool sub_57700()
sub_57700
LDR             R3, =stdin
LDR             R0, [R3]
B               sub_576AC
; End of function sub_57700

off_5770C DCD stdin



; int __fastcall sub_57710(int)
sub_57710
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R6, =byte_7D783
LDR             R7, =unk_7D744
LDRB            R4, [R6]
LDR             R0, [R7,R4,LSL#2] ; ptr
BL              free
STR             R5, [R7,R4,LSL#2]
ADD             R4, R4, #1
AND             R4, R4, #3
MOV             R0, R5
STRB            R4, [R6]
POP             {R4-R8,PC}
; End of function sub_57710

off_57744 DCD byte_7D783
off_57748 DCD unk_7D744
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_1]



; _BYTE *__fastcall sub_57750(int, unsigned int, int)
sub_57750

var_188= -0x188
termios_p= -0x158
act= -0x11C
oact= -0x90

PUSH            {R4-R9,LR}
MOV             R7, R1
SUB             SP, SP, #0x194
MOV             R1, #0  ; queue_selector
MOV             R4, R2
MOV             R6, R0
BL              tcflush
LDR             R3, =stdout
MOV             R0, R4
LDR             R1, [R3]
BL              fputs_unlocked
BL              sub_177D8
ADD             R1, SP, #0x194+termios_p ; termios_p
MOV             R0, R6  ; fd
BL              tcgetattr
ADD             LR, SP, #0x194+termios_p
MOV             R12, SP
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDR             R3, [SP,#0x194+var_188]
LDM             LR, {R0-R2}
BIC             R3, R3, #0x78 ; 'x'
STR             R3, [SP,#0x194+var_188]
STM             R12, {R0-R2}
MOV             R2, SP  ; termios_p
MOV             R1, #0  ; optional_actions
MOV             R0, R6  ; fd
BL              tcsetattr
MOV             R2, #0x88 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x194+act.sa_mask ; s
BL              memset
LDR             R3, =nullsub_1
ADD             R2, SP, #0x194+oact ; oact
ADD             R1, SP, #0x194+act ; act
MOV             R0, #2  ; sig
STR             R3, [SP,#0x194+act]
BL              sigaction
CMP             R7, #0
BEQ             loc_57814
ADD             R1, SP, #0x194+act
MOV             R0, #0xE
BL              sub_18150
MOV             R0, R7  ; seconds
BL              alarm

loc_57814
MOV             R5, #0
MOVW            R9, #0xFFF
MOV             R4, R5

loc_57820
ADD             R1, R5, #2
MOV             R0, R4
BL              sub_174B4
ADD             R8, R0, R5
MOV             R4, R0
MOV             R2, #1  ; nbytes
MOV             R1, R8  ; buf
MOV             R0, R6  ; fd
BL              read
ORRS            R3, R5, R0
MOVEQ           R3, #1
MOVNE           R3, R0,LSR#31
CMP             R3, #0
BEQ             loc_578B8
MOV             R5, #0
MOV             R0, R4
STRB            R5, [R8]
BL              sub_5DB1C
MOV             R0, R4  ; ptr
MOV             R4, R5
BL              free

loc_57874
CMP             R7, #0
BEQ             loc_57884
MOV             R0, #0  ; seconds
BL              alarm

loc_57884
ADD             R1, SP, #0x194+oact
MOV             R0, #2
BL              sub_18150
ADD             R2, SP, #0x194+termios_p ; termios_p
MOV             R1, #0  ; optional_actions
MOV             R0, R6  ; fd
BL              tcsetattr
MOV             R0, #0xA ; c
BL              j_putchar_unlocked
BL              sub_177D8
MOV             R0, R4
ADD             SP, SP, #0x194
POP             {R4-R9,PC}

loc_578B8
CMP             R0, #0
BEQ             loc_578DC
LDRB            R3, [R8]
CMP             R3, #0xA
CMPNE           R3, #0xD
BEQ             loc_578DC
ADD             R5, R5, #1
CMP             R5, R9
BNE             loc_57820

loc_578DC
MOV             R3, #0
STRB            R3, [R4,R5]
B               loc_57874
; End of function sub_57750

off_578E8 DCD stdout
off_578EC DCD nullsub_1



; _BYTE *__fastcall sub_578F0(int)
sub_578F0
MOV             R1, #0
MOV             R2, R0
MOV             R0, R1
B               sub_57750
; End of function sub_578F0




; unsigned int __fastcall sub_57900(int, unsigned int)
sub_57900
REV             R3, R0
REV             R0, R1
MOV             R1, R3
BX              LR
; End of function sub_57900




; int __fastcall sub_57910(int *)
sub_57910
LDR             R2, [R0]
LDR             R3, =off_63F54 ; "-"
PUSH            {R4-R6,R8,R9,LR}
MOV             R4, R0
CMP             R2, #0
MOV             R5, #0
MOVEQ           R4, R3

loc_5792C
LDR             R0, [R4]
BL              sub_61D34
SUBS            R6, R0, #0
BGE             loc_57954

loc_5793C
MOV             R5, #1

loc_57940
LDR             R3, [R4,#4]!
CMP             R3, #0
BNE             loc_5792C
MOV             R0, R5
POP             {R4-R6,R8,R9,PC}

loc_57954
MOV             R1, #1
BL              sub_17FAC
CMP             R6, #0
MOV             R8, R0
MOV             R9, R1
BEQ             loc_57974
MOV             R0, R6  ; fd
BL              close

loc_57974
CMP             R8, #0
SBCS            R3, R9, #0
BLT             loc_5793C
B               loc_57940
; End of function sub_57910

off_57984 DCD off_63F54 ; "-"



; signed int __fastcall sub_57988(signed int)
sub_57988
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, #0  ; timer
BL              time
MOV             R5, R0

loc_5799C               ; seconds
MOV             R0, R4
BL              sleep
MOV             R0, #0  ; timer
BL              time
SUB             R0, R0, R5
CMP             R0, R4
POPGE           {R4-R6,PC}
B               loc_5799C
; End of function sub_57988




; void *__fastcall sub_579BC(int *, void *)
sub_579BC
PUSH            {R4-R8,LR}
SUBS            R6, R0, #0
MOVEQ           R5, #0x20 ; ' '
BEQ             loc_579D8
LDR             R5, [R6]
CMP             R5, #0x20 ; ' '
MOVLT           R5, #0x20 ; ' '

loc_579D8
LDR             R7, =dword_7DB94
MOV             R4, R1

loc_579E0
ADD             R1, R5, #1
MOV             R0, R4
MOV             R1, R1,LSL#2
BL              sub_174B4
MOV             R1, R0  ; list
MOV             R4, R0
MOV             R0, R5  ; size
BL              getgroups
CMP             R0, #0
BLT             loc_57A20
MOV             R3, #0xFFFFFFFF
CMP             R6, #0
STR             R3, [R4,R0,LSL#2]
STRNE           R0, [R6]
MOV             R0, R4
POP             {R4-R8,PC}

loc_57A20
LDR             R3, [R7]
LDR             R3, [R3]
CMP             R3, #0x16
BNE             loc_57A44
MOV             R1, R4  ; list
MOV             R0, #0  ; size
BL              getgroups
MOV             R5, R0
B               loc_579E0

loc_57A44
LDR             R0, =aGetgroups_0 ; "getgroups"
BL              sub_16B40
; End of function sub_579BC

off_57A4C DCD dword_7DB94
off_57A50 DCD aGetgroups_0 ; "getgroups"



; int __fastcall sub_57A54(int, struct sockaddr *, socklen_t)
sub_57A54

var_4= -4

PUSH            {R0-R2,LR}
ADD             R3, SP, #0xC+var_4
STR             R2, [R3,#-4]!
MOV             R2, R3  ; len
BL              getsockname
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_57A54




; struct passwd *__fastcall sub_57A70(const char *)
sub_57A70
PUSH            {R4,LR}
MOV             R4, R0
BL              getpwnam
CMP             R0, #0
POPNE           {R4,PC}
MOV             R1, R4
LDR             R0, =aUnknownUserS ; "unknown user %s"
BL              sub_16DBC
; End of function sub_57A70

off_57A90 DCD aUnknownUserS ; "unknown user %s"



; struct group *__fastcall sub_57A94(const char *)
sub_57A94
PUSH            {R4,LR}
MOV             R4, R0
BL              getgrnam
CMP             R0, #0
POPNE           {R4,PC}
MOV             R1, R4
LDR             R0, =aUnknownGroupS ; "unknown group %s"
BL              sub_16DBC
; End of function sub_57A94

off_57AB4 DCD aUnknownGroupS ; "unknown group %s"



; struct passwd *__fastcall sub_57AB8(__uid_t)
sub_57AB8
PUSH            {R4,LR}
MOV             R4, R0
BL              getpwuid
CMP             R0, #0
POPNE           {R4,PC}
MOV             R1, R4
LDR             R0, =aUnknownUidU ; "unknown uid %u"
BL              sub_16DBC
; End of function sub_57AB8

off_57AD8 DCD aUnknownUidU ; "unknown uid %u"



; char *__fastcall sub_57ADC(__uid_t)
sub_57ADC
PUSH            {R4,LR}
BL              sub_57AB8
LDR             R0, [R0]
POP             {R4,PC}
; End of function sub_57ADC




; struct passwd *__fastcall sub_57AEC(__uid_t)
sub_57AEC
PUSH            {R4,LR}
BL              getpwuid
CMP             R0, #0
LDRNE           R0, [R0]
POP             {R4,PC}
; End of function sub_57AEC




; struct group *__fastcall sub_57B00(__gid_t)
sub_57B00
PUSH            {R4,LR}
BL              getgrgid
CMP             R0, #0
LDRNE           R0, [R0]
POP             {R4,PC}
; End of function sub_57B00




; struct passwd *__fastcall sub_57B14(__uid_t)
sub_57B14
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_57AEC
CMP             R0, #0
POPNE           {R4,PC}
MOV             R0, R4
POP             {R4,LR}
B               sub_16F64
; End of function sub_57B14




; struct group *__fastcall sub_57B34(__gid_t)
sub_57B34
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_57B00
CMP             R0, #0
POPNE           {R4,PC}
MOV             R0, R4
POP             {R4,LR}
B               sub_16F64
; End of function sub_57B34




; __uid_t __fastcall sub_57B54(const char *)
sub_57B54
PUSH            {R4,LR}
BL              sub_57A70
LDR             R0, [R0,#8]
POP             {R4,PC}
; End of function sub_57B54




; __gid_t __fastcall sub_57B64(const char *)
sub_57B64
PUSH            {R4,LR}
BL              sub_57A94
LDR             R0, [R0,#8]
POP             {R4,PC}
; End of function sub_57B64




; int __fastcall sub_57B74(const char *, int (__fastcall *)(const char *))
sub_57B74
PUSH            {R4-R6,LR}
MOV             R2, #0xA
MOV             R4, R1
MOV             R1, #0
MOV             R5, R0
BL              sub_18990
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
POPEQ           {R4-R6,PC}
MOV             R0, R5
MOV             R3, R4
POP             {R4-R6,LR}
BX              R3
; End of function sub_57B74

off_57BB0 DCD dword_7DB94



; unsigned int __fastcall sub_57BB4(const char *, unsigned int)
sub_57BB4

var_4= -4

PUSH            {R0,R1,R4-R6,LR}
ADD             R2, SP, #8+var_4
LDR             R1, =aCapU ; "cap_%u"
MOV             R5, R0
BL              sscanf
CMP             R0, #1
BNE             loc_57BE8
LDR             R4, [SP,#8+var_4]
CMP             R4, #0x25 ; '%'
BHI             loc_57C10

loc_57BDC
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_57BE8
LDR             R6, =off_63EBC ; "chown"
MOV             R4, #0

loc_57BF0               ; s2
MOV             R1, R5
LDR             R0, [R6,R4,LSL#2] ; s1
BL              strcasecmp
CMP             R0, #0
BNE             loc_57BDC
ADD             R4, R4, #1
CMP             R4, #0x26 ; '&'
BNE             loc_57BF0

loc_57C10
MOV             R1, R5
LDR             R0, =aUnknownCapabil ; "unknown capability '%s'"
BL              sub_16DBC
; End of function sub_57BB4

off_57C1C DCD aCapU     ; "cap_%u"
off_57C20 DCD off_63EBC ; "chown"
off_57C24 DCD aUnknownCapabil ; "unknown capability '%s'"



; int __fastcall sub_57C28(int *)
sub_57C28
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R6, =byte_6BA6C
MOV             R5, #0
STR             R5, [R0,#4]

loc_57C3C
LDRB            R3, [R5,R6]
MOV             R1, #0
MOV             R0, R4
STR             R3, [R4]
BL              capget
CMP             R0, #0
BEQ             loc_57C6C
ADD             R5, R5, #1
CMP             R5, #3
BNE             loc_57C3C

loc_57C64
LDR             R0, =aCapget_0 ; "capget"
BL              sub_16B90

loc_57C6C
LDR             R3, [R4]
LDR             R2, =0x20071026
CMP             R3, R2
BEQ             loc_57CA4
ADD             R2, R2, #0xF400
ADD             R2, R2, #0xFC
CMP             R3, R2
BEQ             loc_57CA4
LDR             R2, =0x19980330
CMP             R3, R2
MOVEQ           R3, #1
BEQ             loc_57CA8
LDR             R0, =aUnsupportedCap ; "unsupported capability version"
BL              sub_16DBC

loc_57CA4
MOV             R3, #2

loc_57CA8
STR             R3, [R4,#8]
ADD             R1, R4, #0xC
MOV             R0, R4
BL              capget
CMP             R0, #0
POPEQ           {R4-R6,PC}
B               loc_57C64
; End of function sub_57C28

off_57CC4 DCD byte_6BA6C
off_57CC8 DCD aCapget_0 ; "capget"
dword_57CCC DCD 0x20071026
dword_57CD0 DCD 0x19980330
off_57CD4 DCD aUnsupportedCap ; "unsupported capability version"



; __uid_t __fastcall sub_57CD8(int)
sub_57CD8
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R1, [R0,#0xC] ; group
LDR             R0, [R0] ; char *
BL              initgroups
MOV             R5, R0
BL              endgrent
CMP             R5, #0
BEQ             loc_57D2C
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0x26 ; '&'
BEQ             loc_57D18

loc_57D10
LDR             R0, =aCanTSetGroups ; "can't set groups"
BL              sub_16B40

loc_57D18
LDR             R4, [R4,#8]
BL              getuid
CMP             R4, R0
POPEQ           {R4-R6,PC}
B               loc_57D10

loc_57D2C
LDR             R0, [R4,#0xC]
BL              sub_178C4
LDR             R0, [R4,#8]
POP             {R4-R6,LR}
B               sub_178E0
; End of function sub_57CD8

off_57D40 DCD dword_7DB94
off_57D44 DCD aCanTSetGroups ; "can't set groups"



; const char *__fastcall sub_57D48(const char *)
sub_57D48
PUSH            {R4,LR}
MOV             R1, #0xA
BL              sub_16AA8
CMP             R0, #0
MOVNE           R3, #0
STRBNE          R3, [R0]
POP             {R4,PC}
; End of function sub_57D48




; char *__fastcall sub_57D64(const char *, _BYTE *)
sub_57D64
CMP             R1, #0
BEQ             loc_57D98
LDRB            R3, [R1]
CMP             R3, #0x2E ; '.'
BNE             loc_57D98
LDRB            R3, [R1,#1]
CMP             R3, #0
BEQ             loc_57D9C
CMP             R3, #0x2E ; '.'
BNE             loc_57D98
LDRB            R3, [R1,#2]
CMP             R3, #0
BEQ             loc_57D9C

loc_57D98
B               sub_16998

loc_57D9C
MOV             R0, #0
BX              LR
; End of function sub_57D64




; int __fastcall sub_57DA4(char *name, char)
sub_57DA4
LDR             R3, =dword_7DB94
TST             R1, #0x10
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R5, [R3]
LDR             R6, [R5]
BNE             loc_57DD8

loc_57DC0               ; name
MOV             R0, R4
BL              unlink
CMP             R0, #0
BLT             loc_57E04
MOV             R0, #1
POP             {R4-R6,PC}

loc_57DD8
MOV             R3, R0
LDR             R2, =dword_7DB90
LDR             R0, =stderr
LDR             R1, =aSOverwriteS ; "%s: overwrite '%s'? "
LDR             R2, [R2]
LDR             R0, [R0] ; stream
BL              fprintf
BL              sub_57700
CMP             R0, #0
POPEQ           {R4-R6,PC}
B               loc_57DC0

loc_57E04
STR             R6, [R5]
MOV             R1, R4
LDR             R0, =aCanTCreateS ; "can't create '%s'"
BL              sub_16AF4
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_57DA4

off_57E1C DCD dword_7DB94
off_57E20 DCD dword_7DB90
off_57E24 DCD stderr
off_57E28 DCD aSOverwriteS ; "%s: overwrite '%s'? "
off_57E2C DCD aCanTCreateS ; "can't create '%s'"



; int __fastcall sub_57E30(const char *, char *, int)
sub_57E30

var_EC= -0xEC
ptr= -0xE8
tvp= -0xE4
var_DC= -0xDC
var_D8= -0xD8
var_D4= -0xD4
mode= -0xC4
owner= -0xBC
group= -0xB8
var_B4= -0xB4
var_84= -0x84
var_74= -0x74
var_6C= -0x6C
var_5C= -0x5C
var_1C= -0x1C
var_C= -0xC

PUSH            {R4-R11,LR}
MOVW            R7, #0x102
ANDS            R7, R2, R7
MOV             R5, R2
SUB             SP, SP, #0xEC
MOV             R4, R1
LDR             R2, =(sub_62E14+1)
ADD             R1, SP, #0xEC+var_D4
LDR             R3, =(sub_62DFC+1)
MOV             R6, R0
MOVEQ           R3, R2
BLX             R3 ; sub_62DFC sub_62E14
CMP             R0, #0
BGE             loc_57EDC
TST             R5, #0x60
BEQ             loc_57EC8

loc_57E70
LDR             R3, =link
TST             R5, #0x40
LDR             R7, =symlink
MOV             R1, R4  ; to
MOV             R0, R6  ; from
MOVEQ           R7, R3
BLX             R7 ; link symlink
CMP             R0, #0
BGE             loc_5819C
MOV             R1, R5
MOV             R0, R4  ; name
BL              sub_57DA4
SUBS            R8, R0, #0
BLE             loc_581A0
MOV             R1, R4  ; to
MOV             R0, R6  ; from
BLX             R7 ; link symlink

loc_57EB4
CMP             R0, #0
MOVLT           R1, R4
LDRLT           R0, =aCanTCreateLink ; "can't create link '%s'"
BLT             loc_57ED0
B               loc_5819C

loc_57EC8
MOV             R1, R6

loc_57ECC
LDR             R0, =aCanTStatS ; "can't stat '%s'"

loc_57ED0
BL              sub_16AF4

loc_57ED4
MOV             R8, #0xFFFFFFFF
B               loc_581A0

loc_57EDC
ADD             R1, SP, #0xEC+var_6C
MOV             R0, R4
BLX             sub_62E14
CMP             R0, #0
BGE             loc_57F0C
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_57F48

loc_57F04
MOV             R1, R4
B               loc_57ECC

loc_57F0C
LDRD            R0, R1, [SP,#0xEC+var_D4]
LDRD            R2, R3, [SP,#0xEC+var_6C]
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_57FAC
LDRD            R0, R1, [SP,#0xEC+var_74]
LDRD            R2, R3, [SP,#0xEC+var_C]
CMP             R1, R3
CMPEQ           R0, R2
BNE             loc_57FAC
LDR             R0, =aSAndSAreTheSam ; "'%s' and '%s' are the same file"
MOV             R2, R4
MOV             R1, R6

loc_57F40
BL              sub_16DDC
B               loc_57ED4

loc_57F48
MOV             R9, #0

loc_57F4C
LDR             R3, [SP,#0xEC+mode]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BNE             loc_5817C
TST             R5, #4
MOVEQ           R1, R6
LDREQ           R0, =(aRecursionDetec+0x14) ; "omitting directory '%s'"
BEQ             loc_57FA4
ADD             R0, SP, #0xEC+var_D4
BL              sub_5A6C0
SUBS            R7, R0, #0
MOVNE           R1, R6
LDRNE           R0, =aRecursionDetec ; "recursion detected, omitting directory "...
BNE             loc_57FA4
CMP             R9, #0
BEQ             loc_57FB4
LDR             R3, [SP,#0xEC+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BEQ             loc_58008
LDR             R0, =aTargetSIsNotAD ; "target '%s' is not a directory"
MOV             R1, R4

loc_57FA4
BL              sub_16DDC
B               loc_57ED4

loc_57FAC
MOV             R9, #1
B               loc_57F4C

loc_57FB4
BL              umask
LDR             R1, [SP,#0xEC+mode]
TST             R5, #1
MOV             R7, R0
BICEQ           R1, R1, R0
MOV             R0, R4  ; path
ORR             R1, R1, #0x1C0 ; mode
BL              mkdir
CMP             R0, #0
MOV             R0, R7  ; mask
BGE             loc_57FF0
BL              umask
MOV             R1, R4
LDR             R0, =aCanTCreateDire ; "can't create directory '%s'"
B               loc_57ED0

loc_57FF0
BL              umask
ADD             R1, SP, #0xEC+var_6C
MOV             R0, R4
BLX             sub_62E14
CMP             R0, #0
BLT             loc_57F04

loc_58008               ; s
MOV             R1, #0
ADD             R0, SP, #0xEC+var_6C ; int
BL              sub_5A754
MOV             R0, R6  ; name
BL              opendir
SUBS            R10, R0, #0
BICNE           R3, R5, #0x100
MOVNE           R8, #0
STRNE           R3, [SP,#0xEC+var_EC]
BNE             loc_58094
MOV             R8, #0xFFFFFFFF
B               loc_580DC

loc_58038
ADD             R3, R0, #0x13
MOV             R0, R6
MOV             R1, R3
STR             R3, [SP,#0xEC+ptr]
BL              sub_57D64
SUBS            R11, R0, #0
LDR             R3, [SP,#0xEC+ptr]
BEQ             loc_58094
MOV             R1, R3
MOV             R0, R4
BL              sub_16998
LDR             R2, [SP,#0xEC+var_EC]
MOV             R1, R0
STR             R0, [SP,#0xEC+ptr]
MOV             R0, R11
BL              sub_57E30
CMP             R0, #0
MOV             R0, R11 ; ptr
MOVLT           R8, #0xFFFFFFFF
BL              free
LDR             R3, [SP,#0xEC+ptr]
MOV             R0, R3  ; ptr
BL              free

loc_58094
MOV             R0, R10
BL              readdir64
CMP             R0, #0
BNE             loc_58038
MOV             R0, R10 ; dirp
BL              closedir
CMP             R9, #0
BNE             loc_580DC
LDR             R1, [SP,#0xEC+mode]
MOV             R0, R4  ; file
BIC             R1, R1, R7 ; mode
BL              chmod
CMP             R0, #0
BGE             loc_580DC
MOV             R2, R4
LDR             R1, =aPermissions ; "permissions"
LDR             R0, =aCanTPreserveSO ; "can't preserve %s of '%s'"
BL              sub_16AF4

loc_580DC
TST             R5, #1
BEQ             loc_583BC
LDR             R3, [SP,#0xEC+var_84]
ADD             R1, SP, #0xEC+tvp ; tvp
MOV             R0, R4  ; file
STR             R3, [SP,#0xEC+tvp]
STR             R3, [SP,#0xEC+var_DC]
MOV             R3, #0
STR             R3, [SP,#0xEC+tvp.tv_usec]
STR             R3, [SP,#0xEC+var_D8]
BL              utimes
CMP             R0, #0
BGE             loc_58120
MOV             R2, R4
LDR             R1, =(a3times+1) ; "times"
LDR             R0, =aCanTPreserveSO ; "can't preserve %s of '%s'"
BL              sub_16AF4

loc_58120               ; group
LDR             R2, [SP,#0xEC+group]
MOV             R0, R4  ; file
LDR             R1, [SP,#0xEC+owner] ; owner
BL              chown
CMP             R0, #0
BGE             loc_58154
LDR             R3, [SP,#0xEC+mode]
MOV             R2, R4
LDR             R1, =aOwnership ; "ownership"
LDR             R0, =aCanTPreserveSO ; "can't preserve %s of '%s'"
BIC             R3, R3, #0xC00
STR             R3, [SP,#0xEC+mode]
BL              sub_16AF4

loc_58154               ; mode
LDR             R1, [SP,#0xEC+mode]
MOV             R0, R4  ; file
BL              chmod
CMP             R0, #0
BGE             loc_583BC
LDR             R1, =aPermissions ; "permissions"
MOV             R2, R4

loc_58170
LDR             R0, =aCanTPreserveSO ; "can't preserve %s of '%s'"
BL              sub_16AF4
B               loc_583BC

loc_5817C
CMP             R9, #0
BEQ             loc_581AC
TST             R5, #0x2000
BEQ             loc_581AC
LDR             R1, [SP,#0xEC+var_84]
LDR             R2, [SP,#0xEC+var_1C]
CMP             R1, R2
BGT             loc_581AC

loc_5819C
MOV             R8, #0

loc_581A0
MOV             R0, R8
ADD             SP, SP, #0xEC
POP             {R4-R11,PC}

loc_581AC
ANDS            R8, R5, #0x60 ; '`'
BNE             loc_57E70
EOR             R2, R5, #4
UBFX            R2, R2, #2, #1
CMP             R3, #0x8000
ORREQ           R2, R2, #1
CMP             R2, #0
BEQ             loc_5830C
CMP             R7, #0
BNE             loc_58228
CMP             R3, #0xA000
BEQ             loc_583E8
ADD             R0, SP, #0xEC+var_D4
BL              sub_5A6C0
SUBS            R7, R0, #0
MOV             R1, R4  ; s
BEQ             loc_58220
BL              link
CMP             R0, #0
BGE             loc_5819C
MOV             R1, R5
MOV             R0, R4  ; name
BL              sub_57DA4
SUBS            R8, R0, #0
BLE             loc_581A0
MOV             R1, R4  ; to
MOV             R0, R7  ; from
BL              link
B               loc_57EB4

loc_58220               ; int
ADD             R0, SP, #0xEC+var_D4
BL              sub_5A754

loc_58228
MOV             R1, #0
MOV             R0, R6
BL              sub_1760C
SUBS            R9, R0, #0
BLT             loc_57ED4
LDR             R7, [SP,#0xEC+mode]
MOVW            R3, #0x1B6
MOV             R1, #0xC1
MOV             R0, R4
AND             R2, R7, #0xF000
CMP             R2, #0x8000
MOVNE           R7, R3
MOV             R2, R7
BL              open64
CMN             R0, #1
BNE             loc_582AC
MOV             R1, R5
MOV             R0, R4  ; name
BL              sub_57DA4
SUBS            R8, R0, #0
BGT             loc_58288
MOV             R0, R9  ; fd
BL              close
B               loc_581A0

loc_58288
MOV             R2, R7
MOV             R1, #0xC1
MOV             R0, R4
BL              sub_175E0
SUBS            R7, R0, #0
BGE             loc_582B0
MOV             R0, R9  ; fd
BL              close
B               loc_57ED4

loc_582AC
MOV             R7, R0

loc_582B0
MOV             R1, R7
MOV             R0, R9
BL              sub_17FAC
AND             R8, R0, R1
MOV             R0, R7  ; fd
CMN             R8, #1
MOVNE           R8, #0
MOVEQ           R8, #1
BL              close
CMP             R0, #0
RSB             R8, R8, #0
BGE             loc_582F0
MOV             R8, #0xFFFFFFFF
MOV             R1, R4
LDR             R0, =aErrorWritingTo ; "error writing to '%s'"
BL              sub_16AF4

loc_582F0               ; fd
MOV             R0, R9
BL              close
LDR             R3, [SP,#0xEC+mode]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BNE             loc_581A0
B               loc_580DC

loc_5830C
CMP             R9, #0
BNE             loc_58368

loc_58314               ; mode
LDR             R1, [SP,#0xEC+mode]
AND             R2, R1, #0xF000
CMP             R2, #0xA000
BEQ             loc_583F0
AND             R3, R1, #0xB000
CMP             R2, #0xC000
CMPNE           R3, #0x2000
MOVEQ           R3, #1
MOVNE           R3, #0
CMP             R2, #0x1000
ORREQ           R3, R3, #1
CMP             R3, #0
BEQ             loc_583D8
LDRD            R2, R3, [SP,#0xEC+var_B4]
MOV             R0, R4  ; path
BLX             sub_62E20
CMP             R0, #0
MOVLT           R1, R4
LDRLT           R0, =aCanTCreateS ; "can't create '%s'"
BLT             loc_57ED0
B               loc_580DC

loc_58368
LDR             R3, =dword_7DB94
MOV             R2, #0x11
MOV             R1, R5
MOV             R0, R4  ; name
LDR             R3, [R3]
STR             R2, [R3]
BL              sub_57DA4
CMP             R0, #0
MOVLE           R8, R0
BLE             loc_581A0
B               loc_58314

loc_58394
TST             R5, #1
BEQ             loc_583BC
LDR             R2, [SP,#0xEC+group] ; group
MOV             R0, R4  ; file
LDR             R1, [SP,#0xEC+owner] ; owner
BL              lchown
CMP             R0, #0
MOVLT           R2, R4
LDRLT           R1, =aOwnership ; "ownership"
BLT             loc_58170

loc_583BC
TST             R5, #0x1000
BEQ             loc_581A0
MOV             R2, R4
MOV             R1, R6
LDR             R0, =aSS_3 ; "'%s' -> '%s'\n"
BL              printf
B               loc_581A0

loc_583D8
MOV             R2, R1
LDR             R0, =aUnrecognizedFi_0 ; "unrecognized file '%s' with mode %x"
MOV             R1, R6
B               loc_57F40

loc_583E8
CMP             R9, #0
BNE             loc_58368

loc_583F0
MOV             R0, R6
BL              sub_17C9C
SUBS            R7, R0, #0
BEQ             loc_583BC
MOV             R1, R4  ; to
BL              symlink
MOV             R9, R0
MOV             R0, R7  ; ptr
BL              free
CMP             R9, #0
BGE             loc_58394
MOV             R3, R7
MOV             R2, R4
LDR             R1, =aSym ; "sym"
LDR             R0, =aCanTCreateSlin ; "can't create %slink '%s' to '%s'"
BL              sub_16AF4
B               loc_57ED4
; End of function sub_57E30

off_58434 DCD sub_62E14+1
off_58438 DCD sub_62DFC+1
off_5843C DCD link
off_58440 DCD symlink
off_58444 DCD aCanTCreateLink ; "can't create link '%s'"
off_58448 DCD aCanTStatS ; "can't stat '%s'"
off_5844C DCD dword_7DB94
off_58450 DCD aSAndSAreTheSam ; "'%s' and '%s' are the same file"
off_58454 DCD aRecursionDetec+0x14 ; "omitting directory '%s'"
; const __mode_t mask
mask DCD aRecursionDetec ; "recursion detected, omitting directory "...
off_5845C DCD aTargetSIsNotAD ; "target '%s' is not a directory"
off_58460 DCD aCanTCreateDire ; "can't create directory '%s'"
off_58464 DCD aPermissions ; "permissions"
off_58468 DCD aCanTPreserveSO ; "can't preserve %s of '%s'"
off_5846C DCD a3times+1 ; "times"
off_58470 DCD aOwnership ; "ownership"
off_58474 DCD aErrorWritingTo ; "error writing to '%s'"
off_58478 DCD aCanTCreateS ; "can't create '%s'"
off_5847C DCD aSS_3     ; "'%s' -> '%s'\n"
off_58480 DCD aUnrecognizedFi_0 ; "unrecognized file '%s' with mode %x"
off_58484 DCD aSym      ; "sym"
off_58488 DCD aCanTCreateSlin ; "can't create %slink '%s' to '%s'"



; char *__fastcall sub_5848C(int, char *buffer)
sub_5848C

result= -0x38
var_30= -0x30
result_buf= -0x2C

SUBS            R3, R0, #0
BEQ             loc_58504
LDR             R0, [R3,#4]
LDRB            R2, [R0]
CMP             R2, #0x2A ; '*'
CMPNE           R2, #0x78 ; 'x'
BXNE            LR
LDRB            R12, [R0,#1]
CMP             R12, #0
BXNE            LR
PUSH            {LR}
SUB             SP, SP, #0x34 ; '4'
MOV             R0, R3
ADD             R3, SP, #0x38+var_30
MOV             R2, R1  ; buffer
ADD             R1, SP, #0x38+result_buf ; result_buf
STR             R3, [SP,#0x38+result] ; result
MOV             R3, #0x100 ; buflen
LDR             R0, [R0] ; name
STR             R12, [SP,#0x38+var_30]
BL              getspnam_r
CMP             R0, #0
BNE             loc_584F8
LDR             R3, [SP,#0x38+var_30]
CMP             R3, #0
LDRNE           R0, [R3,#4]
BNE             loc_584FC

loc_584F8
LDR             R0, =aAa ; "aa"

loc_584FC
ADD             SP, SP, #0x34 ; '4'
POP             {PC}

loc_58504
LDR             R0, =aAa ; "aa"
BX              LR
; End of function sub_5848C

off_5850C DCD aAa       ; "aa"



; int __fastcall sub_58510(int, char *)
sub_58510

var_104= -0x104

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x104
MOV             R5, R1
MOV             R1, SP  ; buffer
BL              sub_5848C
LDRB            R3, [R0]
CMP             R3, #0
MOVEQ           R4, #2
BEQ             loc_58564
MOV             R4, R0
MOV             R1, R0
MOV             R2, #1
MOV             R0, R5
BL              sub_5FBFC
MOV             R1, R4  ; s2
MOV             R5, R0
BL              strcmp
CLZ             R4, R0
MOV             R0, R5  ; ptr
MOV             R4, R4,LSR#5
BL              free

loc_58564
MOV             R0, R4
ADD             SP, SP, #0x104
POP             {R4,R5,PC}
; End of function sub_58510




; int __fastcall sub_58570(int, unsigned int, int)
sub_58570

var_100= -0x100

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x100
MOV             R5, R1
MOV             R1, SP  ; buffer
MOV             R4, R0
MOV             R6, R2
BL              sub_5848C
LDRB            R3, [R0]
CMP             R3, #0
MOVEQ           R4, #2
BEQ             loc_585D0
MOV             R1, R5
MOV             R2, R6
MOV             R0, #0
BL              sub_57750
SUBS            R5, R0, #0
MOVEQ           R4, #0xFFFFFFFF
BEQ             loc_585D0
MOV             R0, R4
MOV             R1, R5
BL              sub_58510
MOV             R4, R0
MOV             R0, R5
BL              sub_5DB1C

loc_585D0
MOV             R0, R4
ADD             SP, SP, #0x100
POP             {R4-R6,PC}
; End of function sub_58570




; int __fastcall sub_585DC(int)
sub_585DC
LDR             R2, =aPassword ; "Password: "
MOV             R1, #0
B               sub_58570
; End of function sub_585DC

off_585E8 DCD aPassword ; "Password: "



; _DWORD *__fastcall sub_585EC(_DWORD *result, int)
sub_585EC
LDR             R3, =0x4C11DB7
CMP             R1, #0
PUSH            {R4-R6,LR}
MOV             R5, R1
LDR             R4, =0xEDB88320
MOVNE           R4, R3
CMP             R0, #0
BNE             loc_58614
MOV             R0, #0x400
BL              sub_1748C

loc_58614
MOV             R2, #0

loc_58618
CMP             R5, #0
MOV             R1, #8
MOVNE           R3, R2,LSL#24
MOVEQ           R3, R2

loc_58628
CMP             R5, #0
BEQ             loc_58644
CMP             R3, #0
MOV             R3, R3,LSL#1
BGE             loc_58654

loc_5863C
EOR             R3, R3, R4
B               loc_58654

loc_58644
AND             R12, R3, #1
MOV             R3, R3,LSR#1
CMP             R12, #0
BNE             loc_5863C

loc_58654
SUBS            R1, R1, #1
BNE             loc_58628
STR             R3, [R0,R2,LSL#2]
ADD             R2, R2, #1
CMP             R2, #0x100
POPEQ           {R4-R6,PC}
B               loc_58618
; End of function sub_585EC

dword_58670 DCD 0x4C11DB7
dword_58674 DCD 0xEDB88320



; _DWORD *sub_58678()
sub_58678
MOV             R1, #0
MOV             R0, R1
B               sub_585EC
; End of function sub_58678




; unsigned int __fastcall sub_58684(unsigned int result, unsigned __int8 *, int, int)
sub_58684
ADD             R2, R1, R2

loc_58688
CMP             R1, R2
BXEQ            LR
LDRB            R12, [R1],#1
EOR             R12, R12, R0,LSR#24
LDR             R12, [R3,R12,LSL#2]
EOR             R0, R12, R0,LSL#8
B               loc_58688
; End of function sub_58684




; unsigned int __fastcall sub_586A4(unsigned int result, char *, int, int)
sub_586A4
ADD             R2, R1, R2

loc_586A8
CMP             R1, R2
BXEQ            LR
LDRB            R12, [R1],#1
EOR             R12, R12, R0
UXTB            R12, R12
LDR             R12, [R3,R12,LSL#2]
EOR             R0, R12, R0,LSR#8
B               loc_586A8
; End of function sub_586A4




; int __fastcall sub_586C8(int, int)
sub_586C8
PUSH            {R4-R8,LR}
MOV             R8, R0
MOV             R4, R1
ORR             R6, R1, #0x800
MOV             R5, #5

loc_586DC
MOV             R2, #0x180
MOV             R1, R6
MOV             R0, R8
BL              open64
SUBS            R7, R0, #0
BGE             loc_58704
SUBS            R5, R5, #1
BNE             loc_586DC

loc_586FC
MOV             R0, R7
POP             {R4-R8,PC}

loc_58704
CMP             R4, R6
BEQ             loc_586FC
MOV             R2, R4
MOV             R1, #4  ; cmd
BL              fcntl
B               loc_586FC
; End of function sub_586C8




; unsigned __int8 *__fastcall sub_5871C(unsigned __int8 *result)
sub_5871C
LDRB            R3, [R0]
CMP             R3, #0x5F ; '_'
BEQ             loc_58750

loc_58728
ORR             R3, R3, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R3, #0x19
BXHI            LR
B               loc_58750

loc_5873C
CMP             R3, #0x5F ; '_'
BEQ             loc_58750
SUB             R2, R3, #0x30 ; '0'
CMP             R2, #9
BHI             loc_58728

loc_58750
LDRB            R3, [R0,#1]!
CMP             R3, #0
BXEQ            LR
B               loc_5873C
; End of function sub_5871C




; bool __fastcall sub_58760(const char *)
sub_58760

var_58= -0x58

PUSH            {R4,LR}
MOV             R1, #1  ; type
SUB             SP, SP, #0x68
MOV             R4, R0
BL              access
CMP             R0, #0
BEQ             loc_58788

loc_5877C
MOV             R0, #0

loc_58780
ADD             SP, SP, #0x68 ; 'h'
POP             {R4,PC}

loc_58788
MOV             R1, SP
MOV             R0, R4
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_5877C
LDR             R0, [SP,#0x68+var_58]
AND             R0, R0, #0xF000
SUB             R0, R0, #0x8000
CLZ             R0, R0
MOV             R0, R0,LSR#5
B               loc_58780
; End of function sub_58760




; char *__fastcall sub_587B4(_BYTE *, char **)
sub_587B4
PUSH            {R4-R10,LR}
MOV             R7, R0
LDR             R4, [R1]
MOV             R6, R1
MOV             R8, #0x3A ; ':'
MOV             R9, #0
LDR             R10, =(asc_67ED0+4) ; "."

loc_587D0
CMP             R4, #0
BEQ             loc_58824
MOV             R1, #0x3A ; ':' ; c
MOV             R0, R4  ; s
BL              strchr
SUBS            R5, R0, #0
MOV             R1, R7
STRBNE          R9, [R5]
LDRB            R0, [R4]
CMP             R0, #0
MOVNE           R0, R4
MOVEQ           R0, R10
BL              sub_16998
MOV             R4, R0
BL              sub_58760
CMP             R5, #0
STRBNE          R8, [R5]
ADDNE           R5, R5, #1
CMP             R0, #0
BEQ             loc_5882C
STR             R5, [R6]

loc_58824
MOV             R0, R4
POP             {R4-R10,PC}

loc_5882C               ; ptr
MOV             R0, R4
MOV             R4, R5
BL              free
B               loc_587D0
; End of function sub_587B4

off_5883C DCD asc_67ED0+4 ; "."


; Attributes: noreturn

; void __fastcall __noreturn sub_58840(const char **argv)
sub_58840
MOV             R1, R0  ; argv
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0] ; file
BL              execvp
LDR             R3, =dword_7DB94
LDR             R0, =aCanTExecuteS ; "can't execute '%s'"
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
LDR             R3, =byte_7D5F8
MOVEQ           R2, #0x7F
MOVNE           R2, #0x7E ; '~'
STRB            R2, [R3]
LDR             R1, [R4]
BL              sub_16B40
; End of function sub_58840

off_58880 DCD dword_7DB94
off_58884 DCD aCanTExecuteS ; "can't execute '%s'"
off_58888 DCD byte_7D5F8



; int __fastcall sub_5888C(FILE *)
sub_5888C
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              ferror_unlocked
SUBS            R4, R0, #0
LDRNE           R3, =dword_7DB94
MOVNE           R2, #5
LDRNE           R3, [R3]
STRNE           R2, [R3]
LDR             R3, =stdin
LDR             R3, [R3]
CMP             R3, R5
BEQ             loc_588C8
MOV             R0, R5  ; stream
BL              fclose
ORR             R4, R4, R0

loc_588C8
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_5888C

off_588D0 DCD dword_7DB94
off_588D4 DCD stdin


; Attributes: noreturn

; void __fastcall __noreturn sub_588D8(char)
sub_588D8
LDR             R3, =byte_7D5F8
PUSH            {R4,LR}
STRB            R0, [R3]
LDR             R3, =stdout
LDR             R0, [R3] ; stream
BL              fflush
CMP             R0, #0
BEQ             loc_58900
LDR             R0, =aStandardOutput ; "standard output"
BL              sub_16B40

loc_58900
BL              sub_16E08
; End of function sub_588D8

off_58904 DCD byte_7D5F8
off_58908 DCD stdout
off_5890C DCD aStandardOutput ; "standard output"



; char *__fastcall sub_58910(FILE *, char *s, int, signed int *)
sub_58910

stream= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
STR             R0, [SP,#0x14+stream]
MOV             R8, R3
MOV             R0, R1  ; s
MOV             R9, R1
STR             R2, [SP,#0x14+var_C]
MOV             R4, #0
BL              strlen
LDR             R11, [R8]
MOV             R7, R0
MOV             R6, R4
MOV             R5, R4

loc_58944               ; stream
LDR             R0, [SP,#0x14+stream]
BL              getc_unlocked
CMN             R0, #1
MOV             R2, R0
BNE             loc_58990
CMP             R4, #0
BEQ             loc_5897C

loc_58960
MOV             R0, R5
ADD             R1, R4, #1
BL              sub_174B4
MOV             R5, R0
MOV             R3, #0
STRB            R3, [R0,R4]
STR             R4, [R8]

loc_5897C
MOV             R0, R5
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_58988
MOV             R4, R10
B               loc_58944

loc_58990
CMP             R6, R4
ADD             R10, R4, #1
BGT             loc_589C8
ADD             R6, R6, #0xC8
STR             R0, [SP,#0x14+var_8]
MOV             R1, R6
MOV             R0, R5
BL              sub_174B4
CMP             R11, R4
MOV             R5, R0
LDR             R2, [SP,#0x14+var_8]
STRBLS          R2, [R0,R4]
MOVLS           R4, R10
BLS             loc_58960

loc_589C8
STRB            R2, [R5,R4]
SUBS            R4, R10, R7
BMI             loc_58988
MOV             R2, R7  ; n
MOV             R1, R9  ; s2
ADD             R0, R5, R4 ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_58988
LDR             R3, [SP,#0x14+var_C]
CMP             R3, #0
MOVEQ           R4, R10
B               loc_58960
; End of function sub_58910




; char *__fastcall sub_589FC(FILE *, char *, signed int)
sub_589FC

var_4= -4

PUSH            {R0-R2,LR}
ADD             R3, SP, #0xC+var_4
LDR             R2, =0x7FFFF000
STR             R2, [R3,#-4]!
MOV             R2, #0
BL              sub_58910
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_589FC

dword_58A1C DCD 0x7FFFF000



; struct mntent *__fastcall sub_58A20(const char *, int)
sub_58A20

var_6C= -0x6C
var_5C= -0x5C
var_4C= -0x4C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x6C
MOV             R11, R1
MOV             R1, SP
MOV             R10, R0
BLX             sub_62DFC
SUBS            R4, R0, #0
BEQ             loc_58A50

loc_58A40
MOV             R5, #0

loc_58A44
MOV             R0, R5
ADD             SP, SP, #0x6C ; 'l'
POP             {R4-R11,PC}

loc_58A50
LDR             R3, [SP,#0x6C+var_5C]
LDRD            R6, R7, [SP,#0x6C+var_6C]
AND             R3, R3, #0xB000
CMP             R3, #0x2000
LDRDEQ          R6, R7, [SP,#0x6C+var_4C]
MOVEQ           R4, #1
LDR             R1, =(aNTR+5) ; "r"
LDR             R0, =file ; "/proc/mounts"
BL              setmntent
SUBS            R9, R0, #0
EORNE           R4, R4, #1
BEQ             loc_58A40

loc_58A80               ; stream
MOV             R0, R9
BL              getmntent
SUBS            R5, R0, #0
BEQ             loc_58B2C
LDR             R8, [R5]
LDR             R1, =aRootfs ; "rootfs"
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_58A80
LDR             R1, [R5,#4] ; s2
MOV             R0, R10 ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_58B2C
MOV             R1, R8  ; s2
MOV             R0, R10 ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_58B2C
CMP             R11, #0
MOVEQ           R3, R4
MOVNE           R3, #0
CMP             R3, #0
BNE             loc_58A80
MOV             R1, SP
MOV             R0, R8
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_58B08
LDRD            R2, R3, [SP,#0x6C+var_4C]
CMP             R3, R7
CMPEQ           R2, R6
BEQ             loc_58B2C

loc_58B08
MOV             R1, SP
LDR             R0, [R5,#4]
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_58A80
LDRD            R2, R3, [SP,#0x6C+var_6C]
CMP             R3, R7
CMPEQ           R2, R6
BNE             loc_58A80

loc_58B2C               ; stream
MOV             R0, R9
BL              endmntent
B               loc_58A44
; End of function sub_58A20

off_58B38 DCD aNTR+5    ; "r"
off_58B3C DCD file      ; "/proc/mounts"
off_58B40 DCD aRootfs   ; "rootfs"



; void *__fastcall sub_58B44(const char *)
sub_58B44
PUSH            {R4-R10,LR}
MOV             R7, R0
LDR             R9, =(dword_10120+1)
MOV             R0, #4
MOV             R4, #0
BL              sub_174DC
MOV             R6, R4
MOV             R5, R0

loc_58B64
MOV             R0, R4
MOV             R1, R9
BL              sub_5E8EC
SUBS            R4, R0, #0
BNE             loc_58B84
STR             R4, [R5,R6,LSL#2]
MOV             R0, R5
POP             {R4-R10,PC}

loc_58B84               ; n
MOV             R2, #0xF
MOV             R1, R7  ; s2
ADD             R0, R4, #0x48 ; 'H' ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_58BCC

loc_58B9C
LDR             R0, [R4,#8]
CMP             R0, #0
BNE             loc_58C3C

loc_58BA8
LDR             R0, [R4,#0xC]
CMP             R0, #0
BEQ             loc_58B64
BL              sub_169FC
MOV             R1, R7  ; s2
BL              strcmp
CMP             R0, #0
BEQ             loc_58BD8
B               loc_58B64

loc_58BCC
LDRB            R3, [R4,#0x56]
CMP             R3, #0
BNE             loc_58BFC

loc_58BD8
MOV             R2, R6
MOV             R0, R5
MOVW            R1, #0x402
BL              sub_62544
LDR             R3, [R4,#0x24]
MOV             R5, R0
STR             R3, [R0,R6,LSL#2]
ADD             R6, R6, #1
B               loc_58B64

loc_58BFC
LDR             R8, [R4,#8]
CMP             R8, #0
BEQ             loc_58B9C
MOV             R0, R8  ; s
BL              strlen
LDRH            R3, [R4,#6]
ADD             R0, R0, #1
CMP             R0, R3
BGE             loc_58B9C
ADD             R0, R8, R0
BL              sub_169FC
MOV             R1, R7  ; s2
BL              strcmp
CMP             R0, #0
BNE             loc_58B9C
B               loc_58BD8

loc_58C3C
BL              sub_169FC
MOV             R1, R7  ; s2
BL              strcmp
CMP             R0, #0
BEQ             loc_58BD8
B               loc_58BA8
; End of function sub_58B44

off_58C54 DCD dword_10120+1



; void *__fastcall sub_58C58(FILE *stream, _DWORD *)
sub_58C58
PUSH            {R4-R10,LR}
MOV             R4, #0
MOV             R9, R0
MOV             R8, R1
MOV             R6, R4

loc_58C6C               ; stream
MOV             R0, R9
BL              getc_unlocked
CMN             R0, #1
MOV             R5, R0
BNE             loc_58CB8
MOV             R7, R6

loc_58C84
CMP             R8, #0
BEQ             loc_58C90

loc_58C8C
STR             R7, [R8]

loc_58C90
CMP             R4, #0
BEQ             loc_58CB0
MOV             R0, R4
ADD             R1, R7, #1
BL              sub_174B4
MOV             R4, R0
MOV             R3, #0
STRB            R3, [R0,R7]

loc_58CB0
MOV             R0, R4
POP             {R4-R10,PC}

loc_58CB8
TST             R6, #0xFF
BNE             loc_58CDC
CMN             R6, #0x100
BNE             loc_58CCC
BL              sub_17440

loc_58CCC
MOV             R0, R4
ADD             R1, R6, #0x100
BL              sub_174B4
MOV             R4, R0

loc_58CDC
CMP             R5, #0
ADD             R7, R6, #1
STRB            R5, [R4,R6]
BEQ             loc_58C84
SUB             R5, R5, #0xA
CMP             R8, #0
CLZ             R5, R5
MOV             R5, R5,LSR#5
MOVEQ           R5, #0
CMP             R5, #0
BNE             loc_58C8C
MOV             R6, R7
B               loc_58C6C
; End of function sub_58C58




; void *__fastcall sub_58D10(FILE *, int, int)
sub_58D10

var_8= -8

PUSH            {R0-R2,LR}
ADD             R1, SP, #0xC+var_8
BL              sub_58C58
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_58D10




; _BYTE *__fastcall sub_58D24(FILE *, int, int)
sub_58D24

var_8= -8

PUSH            {R0-R2,LR}
ADD             R1, SP, #0xC+var_8
BL              sub_58C58
LDR             R3, [SP,#0xC+var_8]
CMP             R3, #0
BEQ             loc_58D54
SUB             R3, R3, #1
STR             R3, [SP,#0xC+var_8]
LDRB            R2, [R0,R3]
CMP             R2, #0xA
MOVEQ           R2, #0
STRBEQ          R2, [R0,R3]

loc_58D54
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_58D24




; char *sub_58D5C()
sub_58D5C
PUSH            {R4,LR}
LDR             R0, =aShell ; "SHELL"
BL              getenv
CMP             R0, #0
BEQ             loc_58D7C
LDRB            R3, [R0]
CMP             R3, #0
POPNE           {R4,PC}

loc_58D7C
BL              getuid
BL              getpwuid
CMP             R0, #0
BEQ             loc_58DAC
LDR             R0, [R0,#0x18]
CMP             R0, #0
BEQ             loc_58DAC
LDRB            R2, [R0]
LDR             R3, =(aBinSh+1) ; "/bin/sh"
CMP             R2, #0
MOVEQ           R0, R3
POP             {R4,PC}

loc_58DAC
LDR             R0, =(aBinSh+1) ; "/bin/sh"
POP             {R4,PC}
; End of function sub_58D5C

off_58DB4 DCD aShell    ; "SHELL"
off_58DB8 DCD aBinSh+1  ; "/bin/sh"


; Attributes: bp-based frame fpd=0xFFFFFFE0

; int __fastcall sub_58DBC(char **, const char *, const char *, int *)
sub_58DBC

longind= -0x44C
dest= -0x444
var_440= -0x440
argv= -0x43C
var_438= -0x438
shortopts= -0x434
longopts= -0x430
var_42C= -0x42C
var_428= -0x428
var_420= -0x420
var_400= -0x400

PUSH            {R4-R11,LR}
ADD             R11, SP, #0x20
SUB             R9, R11, #-(-0x20+var_420)
SUB             SP, SP, #0x440
SUB             R9, R9, #4
MOV             R6, R1
SUB             SP, SP, #0xC
MOV             R1, #0  ; c
MOV             R7, R2
STR             R0, [R11,#-0x20+argv]
MOV             R2, #0x420 ; n
MOV             R0, R9  ; s
MOV             R5, R3
BL              memset
MOV             R0, R6  ; s
BL              strlen
LDRB            R3, [R6]
CMP             R3, #0x5E ; '^'
ADDEQ           R6, R6, #1
MOVNE           R4, #0
LDRB            R3, [R6]
ADDEQ           R4, R6, R0
ADD             R0, R0, #0xF
BIC             R0, R0, #7
CMP             R3, #0x21 ; '!'
SUB             SP, SP, R0
ADDEQ           R6, R6, #1
ADD             R0, SP, #0x44C+dest ; dest
MOV             R1, R6  ; src
STR             R3, [R11,#-0x20+var_438]
BL              strcpy
LDRB            R3, [R0]
MOV             R6, #0
STR             R0, [R11,#-0x20+shortopts]
SUB             R3, R3, #0x2B ; '+'
TST             R3, #0xFD
MOVEQ           R3, R0
LDRNE           R0, [R11,#-0x20+shortopts]
ADDEQ           R0, R3, #1
SUB             R3, R11, #-(-0x20+var_400)
SUB             R3, R3, #4
STR             R3, [R11,#-0x20+var_428]
MOV             R8, R3
MOV             R3, #1

loc_58E6C
LDRB            R2, [R0]
CMP             R2, #0
BNE             loc_58E94

loc_58E78
CMP             R7, #0
LDREQ           R3, =unk_63F5C
STREQ           R3, [R11,#-0x20+longopts]
BEQ             loc_58F80
MOV             R10, R7
MOV             R8, #1
B               loc_58F30

loc_58E94
CMP             R6, #0x20 ; ' '
BEQ             loc_58E78
STRB            R2, [R8,#-0x20]
MOV             R2, R3,LSL R6
ADD             R10, R0, #1
STR             R2, [R8,#-0x18]
LDRB            R2, [R0,#1]
CMP             R2, #0x3A ; ':'
BNE             loc_58F0C
LDR             R1, [R5]
ADD             R2, R5, #4
STR             R1, [R8,#-8]
LDRB            R1, [R0,#2]
SUB             R12, R1, #0x2A ; '*'
CMP             R12, #1
BHI             loc_58EFC
CMP             R1, #0x2B ; '+'
STR             R2, [R11,#-0x20+var_42C]
MOVNE           R1, #1
MOVEQ           R1, #2
STR             R1, [R8,#-0x1C]
ADD             R1, R0, #3
ADD             R0, R0, #2
BL              sub_60B4C
LDR             R2, [R11,#-0x20+var_42C]
MOV             R3, #1

loc_58EFC
LDRB            R1, [R10,#1]!
CMP             R1, #0x3A ; ':'
BEQ             loc_58EFC
MOV             R5, R2

loc_58F0C
ADD             R6, R6, #1
ADD             R8, R8, #0x20 ; ' '
MOV             R0, R10
B               loc_58E6C

loc_58F1C               ; s
MOV             R0, R10
ADD             R8, R8, #1
BL              strlen
ADD             R0, R0, #3
ADD             R10, R10, R0

loc_58F30               ; c
LDRB            R1, [R10]
CMP             R1, #0
BNE             loc_58F1C
MOV             R2, R8,LSL#4 ; n
ADD             R3, R2, #8
SUB             SP, SP, R3
ADD             R3, SP, #0x44C+dest
MOV             R0, R3  ; s
STR             R3, [R11,#-0x20+longopts]
BL              memset
LDR             R10, [R11,#-0x20+longopts]

loc_58F5C
SUBS            R8, R8, #1
ADD             R10, R10, #0x10
BNE             loc_58FB0
LDR             R3, [R11,#-0x20+longopts]
MOV             R0, #1
ADD             R3, R3, #0x10

loc_58F74
LDR             R2, [R3,#-0x10]
CMP             R2, #0
BNE             loc_58FDC

loc_58F80
CMP             R4, #0
MOV             R8, #0xFFFFFFFF
MOVEQ           R7, R4
STREQ           R7, [R11,#-0x20+var_42C]
MOVEQ           R6, R7
BEQ             loc_5907C
MOV             R7, #0
SUB             R10, R11, #-(-0x20+var_420)
STR             R7, [R11,#-0x20+var_42C]
MOV             R6, R7
SUB             R10, R10, #4
B               loc_59070

loc_58FB0
STR             R7, [R10,#-0x10]
MOV             R0, R7  ; s
BL              strlen
ADD             R0, R0, #1
ADD             R3, R7, R0
LDRB            R2, [R7,R0]
ADD             R7, R3, #2
LDRB            R3, [R3,#1]
STR             R2, [R10,#-0xC]
STR             R3, [R10,#-4]
B               loc_58F5C

loc_58FDC
LDR             R2, [R3,#-8]
CMP             R2, #0
BNE             loc_5903C

loc_58FE8
LDRB            R1, [R9,R2]
ADD             R12, R9, R2
CMP             R1, #0
BNE             loc_5902C
CMP             R6, #0x1F
BGT             loc_58F80
LDR             R2, [R3,#-4]
STRB            R2, [R12]
MOV             R2, R0,LSL R6
ADD             R6, R6, #1
STR             R2, [R12,#8]
LDR             R2, [R3,#-0xC]
CMP             R2, #0
LDRNE           R2, [R5]
ADDNE           R5, R5, #4
STRNE           R2, [R12,#0x18]
B               loc_5903C

loc_5902C
LDR             R12, [R3,#-4]
ADD             R2, R2, #0x20 ; ' '
CMP             R1, R12
BNE             loc_58FE8

loc_5903C
ADD             R3, R3, #0x10
B               loc_58F74

loc_59044
CMP             R1, #0x3A ; ':'
LDRB            R2, [R4,#1]
BEQ             loc_5906C
CMP             R1, #0x3F ; '?'
BNE             loc_59124
SUB             R2, R2, #0x30 ; '0'
ADD             R3, R4, #1
CMP             R2, #9
MOVLS           R8, R2

loc_59068
MOVLS           R4, R3

loc_5906C
ADD             R4, R4, #1

loc_59070
LDRB            R1, [R4]
CMP             R1, #0
BNE             loc_59044

loc_5907C
LDR             R3, =optind
MOV             R9, #0
SUB             R5, R11, #-(-0x20+var_420)
SUB             R5, R5, #4
STR             R9, [R3]
LDR             R3, [R11,#-0x20+argv]
ADD             R0, R3, #4
BL              sub_162C8
ADD             R4, R0, #1

loc_590A0               ; longind
STR             R9, [SP,#0x44C+longind]
MOV             R0, R4  ; argc
LDR             R3, [R11,#-0x20+longopts] ; longopts
LDR             R2, [R11,#-0x20+shortopts] ; shortopts
LDR             R1, [R11,#-0x20+argv] ; argv
BL              getopt_long
CMN             R0, #1
BNE             loc_592B4

loc_590C0
LDR             R3, [R11,#-0x20+var_428]
LDRB            R3, [R3,#-0x20]
CMP             R3, #0
BNE             loc_59378
LDR             R3, [R11,#-0x20+var_42C]
CMP             R3, #0
BEQ             loc_590E4
TST             R6, R3
BEQ             loc_59344

loc_590E4
LDR             R3, =optind
LDR             R3, [R3]
SUB             R4, R4, R3
CMP             R7, R4
BGT             loc_59344
MVN             R3, R8
CMP             R8, R4
MOV             R3, R3,LSR#31
MOVGE           R3, #0
CMP             R3, #0
LDREQ           R3, =dword_7DBC0
STREQ           R6, [R3]
BNE             loc_59344

loc_59118
MOV             R0, R6
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_59124
CMP             R1, #0x2D ; '-'
BNE             loc_59140
SUB             R2, R2, #0x30 ; '0'
ADD             R3, R4, #1
CMP             R2, #9
MOVLS           R7, R2
B               loc_59068

loc_59140
CMP             R1, #0x3D ; '='
SUBEQ           R7, R2, #0x30 ; '0'
ADDEQ           R4, R4, #1
MOVEQ           R8, R7
BEQ             loc_5906C
MOV             R0, #0
B               loc_59168

loc_5915C
CMP             R12, R1
ADD             R0, R0, #0x20 ; ' '
BEQ             loc_59180

loc_59168
LDRB            R12, [R0,R10]
ADD             R3, R0, R10
CMP             R12, #0
BNE             loc_5915C
LDR             R0, =aNoOptC ; "NO OPT %c!"
BL              sub_16DBC

loc_59180
CMP             R2, #0x3A ; ':'
ADD             R1, R4, #1
BNE             loc_591C0
LDRB            R0, [R4,#2]
CMP             R0, #0x3A ; ':'
MOVEQ           R2, #1
STREQ           R2, [R3,#4]
BEQ             loc_5906C

loc_591A0
CMP             R2, #0
CMPNE           R2, #0x3A ; ':'
BNE             loc_591E8
LDR             R2, [R11,#-0x20+var_42C]
LDR             R3, [R3,#8]
ORR             R3, R2, R3
STR             R3, [R11,#-0x20+var_42C]
B               loc_5906C

loc_591C0
CMP             R2, #0x2B ; '+'
BNE             loc_591A0
LDRB            R0, [R4,#2]
CMP             R0, #0
CMPNE           R0, #0x3A ; ':'
MOVEQ           R2, #2
STREQ           R2, [R3,#4]
BNE             loc_591A0

loc_591E0
MOV             R4, R1
B               loc_5906C

loc_591E8
CMP             R2, #0x2D ; '-'
BNE             loc_59218
LDRB            R2, [R4,#2]
CMP             R2, #0
CMPNE           R2, #0x3A ; ':'
BNE             loc_5922C
LDR             R0, [R3,#8]
LDR             R2, [R3,#0x10]
ORR             R6, R6, R0
ORR             R2, R2, R0
STR             R2, [R3,#0x10]
B               loc_591E0

loc_59218
CMP             R12, R2
LDREQ           R2, [R5]
MOVEQ           R4, R1
ADDEQ           R5, R5, #4
STREQ           R2, [R3,#0x1C]

loc_5922C
ADD             R1, R3, #0x10
ADD             R2, R3, #8
ADD             LR, R3, #0xC
ADD             R12, R4, #1
ADD             R3, R3, #0x14
STR             R1, [R11,#-0x20+var_440]

loc_59244
MOV             R4, R12
LDRB            R1, [R12],#1
CMP             R1, #0
CMPNE           R1, #0x3A ; ':'
SUBEQ           R4, R4, #1
BEQ             loc_5906C
CMP             R1, #0x3F ; '?'
MOVEQ           R2, R3
BEQ             loc_59244
CMP             R1, #0x2D ; '-'
BNE             loc_59280
CMP             LR, R2
LDR             R2, [R11,#-0x20+var_440]
MOVNE           R2, LR
B               loc_59244

loc_59280
MOV             R0, #0

loc_59284
LDRB            R4, [R0,R10]
ADD             R9, R0, R10
CMP             R4, #0
BEQ             loc_59244
CMP             R4, R1
ADD             R0, R0, #0x20 ; ' '
BNE             loc_59284
LDR             R0, [R2]
LDR             R1, [R9,#8]
ORR             R1, R0, R1
STR             R1, [R2]
B               loc_59244

loc_592B4
UXTB            R0, R0
MOV             R2, #0

loc_592BC
LDRB            R1, [R2,R5]
ADD             R3, R5, R2
CMP             R1, R0
BNE             loc_59338
LDR             R2, [R3,#0x10]
TST             R6, R2
BNE             loc_59344
LDR             R1, [R3,#0xC]
LDR             R2, [R3,#8]
BIC             R0, R1, R2
BIC             R0, R6, R0
BIC             R6, R2, R1
ORR             R6, R6, R0
AND             R2, R2, R1
EOR             R6, R6, R2
LDR             R2, [R3,#0x1C]
CMP             R2, #0
LDRNE           R1, [R2]
ADDNE           R1, R1, #1
STRNE           R1, [R2]
LDR             R2, =optarg
LDR             R1, [R2]
CMP             R1, #0
BEQ             loc_590A0
LDR             R2, [R3,#4]
LDR             R10, [R3,#0x18]
CMP             R2, #1
BNE             loc_59354
MOV             R0, R10
BL              sub_5D2C8
B               loc_590A0

loc_59338
CMP             R1, #0
ADD             R2, R2, #0x20 ; ' '
BNE             loc_592BC

loc_59344
LDR             R3, [R11,#-0x20+var_438]
CMP             R3, #0x21 ; '!'
BEQ             loc_593B0
BL              sub_162F0

loc_59354
CMP             R2, #2
BNE             loc_5936C
MOV             R0, R1
BL              sub_6219C
STR             R0, [R10]
B               loc_590A0

loc_5936C
CMP             R10, #0
STRNE           R1, [R10]
B               loc_590A0

loc_59378
LDR             R3, [R11,#-0x20+var_428]
LDR             R3, [R3,#-0xC]
CMP             R3, #0
BEQ             loc_593A0
LDR             R2, [R11,#-0x20+var_428]
LDR             R2, [R2,#-0x18]
TST             R6, R2
BEQ             loc_593A0
TST             R3, R6
BEQ             loc_59344

loc_593A0
LDR             R3, [R11,#-0x20+var_428]
ADD             R3, R3, #0x20 ; ' '
STR             R3, [R11,#-0x20+var_428]
B               loc_590C0

loc_593B0
MOV             R6, #0xFFFFFFFF
B               loc_59118
; End of function sub_58DBC

off_593B8 DCD unk_63F5C
off_593BC DCD optind
off_593C0 DCD dword_7DBC0
off_593C4 DCD aNoOptC   ; "NO OPT %c!"
off_593C8 DCD optarg



; int sub_593CC(char **, const char *, ...)
sub_593CC

var_4= -4
varg_r1=  4
varg_r2=  8
varg_r3=  0xC

PUSH            {R1-R3}
MOV             R2, #0
PUSH            {R0,R1,LR}
ADD             R3, SP, #8+varg_r2
LDR             R1, [SP,#8+varg_r1]
STR             R3, [SP,#8+var_4]
BL              sub_58DBC
ADD             SP, SP, #8
POP             {LR}
ADD             SP, SP, #0xC
BX              LR
; End of function sub_593CC




; int sub_593F8(char **, const char *, const char *, ...)
sub_593F8

var_8= -8
varg_r2=  4
varg_r3=  8

PUSH            {R2,R3}
PUSH            {R0-R2,LR}
ADD             R3, SP, #0xC+varg_r3
LDR             R2, [SP,#0xC+varg_r2]
STR             R3, [SP,#0xC+var_8]
BL              sub_58DBC
ADD             SP, SP, #0xC
POP             {LR}
ADD             SP, SP, #8
BX              LR
; End of function sub_593F8




; const char *__fastcall sub_59420(const char **)
sub_59420
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R6, #0x2D ; '-'

loc_5942C               ; s
LDR             R0, [R4,#4]!
CMP             R0, #0
POPEQ           {R4-R6,PC}
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BEQ             loc_5942C
BL              strlen
ADD             R0, R0, #2
BL              sub_1748C
LDR             R1, [R4] ; src
MOV             R5, R0
STRB            R6, [R0],#1 ; dest
BL              strcpy
STR             R5, [R4]
B               loc_5942C
; End of function sub_59420




; _DWORD *__fastcall sub_59468(_DWORD *result)
sub_59468

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
ADD             R4, R0, #0x10
LDR             R3, [R0,#0x5C]
ADD             R10, R0, #0x50 ; 'P'
LDR             R9, [R0,#0x50]
LDR             R8, [R0,#0x54]
MOV             R1, R3
LDR             R7, [R0,#0x58]
LDR             R5, =unk_63F7C
MOV             R12, R9
STR             R3, [SP,#0xC+var_8]
MOV             R2, R8
MOV             R3, R7

loc_5949C
LDR             R6, [R4,#-0x10]
EOR             LR, R3, R1
LDR             R11, [R5,#-0x10]
AND             LR, LR, R2
EOR             LR, LR, R1
ADD             R4, R4, #0x10
ADD             R5, R5, #0x10
ADD             R6, R6, R11
ADD             LR, LR, R6
LDR             R6, [R5,#-0x1C]
ADD             R12, LR, R12
LDR             LR, [R4,#-0x1C]
ADD             R12, R2, R12,ROR#25
ADD             LR, LR, R6
LDR             R6, [R5,#-0x18]
ADD             LR, LR, R1
EOR             R1, R2, R3
AND             R1, R1, R12
EOR             R1, R1, R3
ADD             R1, R1, LR
LDR             LR, [R4,#-0x18]
ADD             R1, R12, R1,ROR#20
ADD             LR, LR, R6
LDR             R6, [R5,#-0x14]
ADD             LR, LR, R3
EOR             R3, R12, R2
AND             R3, R3, R1
EOR             R3, R3, R2
ADD             R3, R3, LR
LDR             LR, [R4,#-0x14]
ADD             R3, R1, R3,ROR#15
CMP             R10, R4
ADD             LR, LR, R6
ADD             LR, LR, R2
EOR             R2, R12, R1
AND             R2, R2, R3
EOR             R2, R2, R12
ADD             R2, R2, LR
ADD             R2, R3, R2,ROR#10
BNE             loc_5949C
LDR             LR, =unk_6BBD2
LDR             R4, =unk_63FBC
ADD             R5, LR, #0x10

loc_59548
EOR             R6, R2, R3
LDR             R10, [R4,#-0x10]
AND             R6, R6, R1
ADD             LR, LR, #4
EOR             R6, R6, R3
ADD             R4, R4, #0x10
ADD             R6, R6, R10
LDRB            R10, [LR,#-8]
LDR             R10, [R0,R10,LSL#2]
ADD             R6, R6, R10
LDRB            R10, [LR,#-7]
ADD             R12, R6, R12
LDR             R6, [R4,#-0x1C]
ADD             R12, R2, R12,ROR#27
ADD             R1, R1, R6
LDR             R6, [R0,R10,LSL#2]
LDRB            R10, [LR,#-6]
ADD             R6, R1, R6
EOR             R1, R12, R2
AND             R1, R1, R3
EOR             R1, R1, R2
ADD             R1, R1, R6
LDR             R6, [R4,#-0x18]
ADD             R1, R12, R1,ROR#23
ADD             R3, R3, R6
LDR             R6, [R0,R10,LSL#2]
LDRB            R10, [LR,#-5]
CMP             R5, LR
ADD             R6, R3, R6
EOR             R3, R12, R1
AND             R3, R3, R2
EOR             R3, R3, R12
ADD             R3, R3, R6
LDR             R6, [R4,#-0x14]
ADD             R3, R1, R3,ROR#18
ADD             R2, R2, R6
LDR             R6, [R0,R10,LSL#2]
ADD             R6, R2, R6
EOR             R2, R1, R3
AND             R2, R2, R12
EOR             R2, R2, R1
ADD             R2, R2, R6
ADD             R2, R3, R2,ROR#12
BNE             loc_59548
LDR             LR, =unk_6BBE2
LDR             R5, =unk_63FFC

loc_59600
LDRB            R10, [LR,#-4]
EOR             R6, R2, R3
LDR             R4, [R5,#-0x10]
EOR             R11, R6, R1
ADD             LR, LR, #4
ADD             R5, R5, #0x10
ADD             R4, R11, R4
LDR             R11, [R0,R10,LSL#2]
LDRB            R10, [LR,#-7]
ADD             R4, R4, R11
ADD             R12, R4, R12
LDR             R4, [R5,#-0x1C]
ADD             R12, R2, R12,ROR#28
ADD             R1, R1, R4
LDR             R4, [R0,R10,LSL#2]
ADD             R4, R1, R4
EOR             R1, R6, R12
ADD             R1, R1, R4
LDRB            R6, [LR,#-6]
LDR             R4, [R5,#-0x18]
ADD             R1, R12, R1,ROR#21
ADD             R3, R3, R4
LDR             R4, [R0,R6,LSL#2]
LDRB            R6, [LR,#-5]
ADD             R4, R3, R4
EOR             R3, R12, R2
EOR             R3, R3, R1
ADD             R3, R3, R4
LDR             R4, [R5,#-0x14]
ADD             R3, R1, R3,ROR#16
ADD             R2, R2, R4
LDR             R4, [R0,R6,LSL#2]
ADD             R4, R2, R4
EOR             R2, R12, R1
EOR             R2, R2, R3
ADD             R2, R2, R4
LDR             R4, =unk_6BBF2
ADD             R2, R3, R2,ROR#9
CMP             R4, LR
BNE             loc_59600
MOV             LR, R4
LDR             R4, =unk_6403C
ADD             R5, LR, #0x10

loc_596AC
LDR             R10, [R4,#-0x10]
MVN             R6, R1
ORR             R6, R6, R2
ADD             LR, LR, #4
EOR             R6, R6, R3
ADD             R4, R4, #0x10
ADD             R6, R6, R10
LDRB            R10, [LR,#-8]
LDR             R10, [R0,R10,LSL#2]
ADD             R6, R6, R10
LDRB            R10, [LR,#-7]
ADD             R12, R6, R12
LDR             R6, [R4,#-0x1C]
ADD             R12, R2, R12,ROR#26
ADD             R1, R1, R6
LDR             R6, [R0,R10,LSL#2]
LDRB            R10, [LR,#-6]
ADD             R6, R1, R6
MVN             R1, R3
ORR             R1, R1, R12
EOR             R1, R1, R2
ADD             R1, R1, R6
LDR             R6, [R4,#-0x18]
ADD             R1, R12, R1,ROR#22
ADD             R3, R3, R6
LDR             R6, [R0,R10,LSL#2]
LDRB            R10, [LR,#-5]
CMP             R5, LR
ADD             R6, R3, R6
MVN             R3, R2
ORR             R3, R3, R1
EOR             R3, R3, R12
ADD             R3, R3, R6
LDR             R6, [R4,#-0x14]
ADD             R3, R1, R3,ROR#17
ADD             R2, R2, R6
LDR             R6, [R0,R10,LSL#2]
ADD             R6, R2, R6
MVN             R2, R12
ORR             R2, R2, R3
EOR             R2, R2, R1
ADD             R2, R2, R6
ADD             R2, R3, R2,ROR#11
BNE             loc_596AC
ADD             R3, R7, R3
ADD             R12, R9, R12
STR             R3, [R0,#0x58]
ADD             R2, R8, R2
LDR             R3, [SP,#0xC+var_8]
STR             R12, [R0,#0x50]
STR             R2, [R0,#0x54]
ADD             R1, R3, R1
STR             R1, [R0,#0x5C]
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_59468

off_59788 DCD unk_63F7C
off_5978C DCD unk_6BBD2
off_59790 DCD unk_63FBC
off_59794 DCD unk_6BBE2
off_59798 DCD unk_63FFC
off_5979C DCD unk_6BBF2
off_597A0 DCD unk_6403C



; int __fastcall sub_597A4(int, int)
sub_597A4
LDR             R3, [R0,#0x48]
MOV             R2, #0xFFFFFF80
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
AND             R3, R3, #0x3F ; '?'
ADD             R0, R3, #1
STRB            R2, [R4,R3]

loc_597C4
RSB             R6, R0, #0x40 ; '@'
MOV             R1, #0  ; c
MOV             R2, R6  ; n
ADD             R0, R4, R0 ; s
BL              memset
CMP             R6, #7
BLS             loc_59800
LDRD            R0, R1, [R4,#0x48]
CMP             R5, #0
MOV             R1, R1,LSL#3
ORR             R1, R1, R0,LSR#29
MOV             R0, R0,LSL#3
BEQ             loc_597FC
BL              sub_57900

loc_597FC
STRD            R0, R1, [R4,#0x38]

loc_59800
MOV             R0, R4
LDR             R3, [R4,#0x40]
BLX             R3
CMP             R6, #7
MOV             R0, #0
POPHI           {R4-R6,PC}
B               loc_597C4
; End of function sub_597A4




; unsigned int __fastcall sub_5981C(int)
sub_5981C

var_2B8= -0x2B8
var_2B4= -0x2B4
var_2B0= -0x2B0
var_2AC= -0x2AC
var_2A4= -0x2A4
var_2A0= -0x2A0
var_29C= -0x29C
var_294= -0x294
var_28C= -0x28C
var_284= -0x284
var_84= -0x84

LDR             R3, [R0,#0x14]
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x2BC
LDR             R7, [R0,#0x10]
MOV             R4, R0
ADD             R9, R0, #0x50 ; 'P'
MOV             R8, #0
STR             R3, [SP,#0x2BC+var_2B8]
LDR             R3, [R0,#0x18]
LDR             R5, [R0,#0x30]
LDR             R6, [R0,#0x34]
STR             R3, [SP,#0x2BC+var_2B4]
LDR             R3, [R0,#0x1C]
STR             R3, [SP,#0x2BC+var_2B0]
LDR             R3, [R0,#0x20]
STR             R3, [SP,#0x2BC+var_2AC]
LDR             R3, [R0,#0x24]
STR             R3, [SP,#0x2BC+var_2AC+4]
LDR             R3, [R0,#0x28]
STR             R3, [SP,#0x2BC+var_294]
LDR             R3, [R0,#0x2C]
STR             R3, [SP,#0x2BC+var_294+4]
LDR             R3, [R0,#0x38]
STR             R3, [SP,#0x2BC+var_2A4]
LDR             R3, [R0,#0x3C]
STR             R3, [SP,#0x2BC+var_2A0]
LDR             R3, [R0,#0x40]
STR             R3, [SP,#0x2BC+var_29C]
LDR             R3, [R0,#0x44]
STR             R3, [SP,#0x2BC+var_29C+4]
LDR             R3, [R0,#0x48]
STR             R3, [SP,#0x2BC+var_28C]
LDR             R3, [R0,#0x4C]
STR             R3, [SP,#0x2BC+var_28C+4]

loc_598A4
LDRD            R0, R1, [R9,R8]
BL              sub_57900
ADD             R3, SP, #0x2BC+var_284
STRD            R0, R1, [R3,R8]
ADD             R8, R8, #8
CMP             R8, #0x80
BNE             loc_598A4
MOV             R2, R3

loc_598C4
LDR             LR, [R2,#0x74]
MOV             R9, R2
LDR             R3, [R2,#0x70]
ADD             R2, R2, #8
LDR             R12, [R2,#4]
LDR             R0, [R2]
MOV             R1, LR,LSR#19
MOV             R10, LR,LSL#3
MOV             R11, R3,LSR#19
MOV             R8, R3,LSL#3
ORR             R10, R10, R3,LSR#29
ORR             R1, R1, R3,LSL#13
MOV             R3, R3,LSR#6
ORR             R11, R11, LR,LSL#13
ORR             R8, R8, LR,LSR#29
ORR             R3, R3, LR,LSL#26
EOR             R1, R1, R10
EOR             R8, R8, R11
LDR             R11, [R9,#0x48]
EOR             R8, R8, R3
LDR             R3, [R9]
LDR             R10, [R9,#0x4C]
EOR             LR, R1, LR,LSR#6
LDR             R1, [R9,#4]
MOV             R9, R12,LSR#1
ADDS            R11, R11, R3
MOV             R3, R0,LSR#1
ORR             R9, R9, R0,LSL#31
ADC             R10, R10, R1
MOV             R1, R12,LSR#8
ADDS            R8, R8, R11
ORR             R3, R3, R12,LSL#31
ADC             LR, LR, R10
MOV             R10, R0,LSR#8
ORR             R1, R1, R0,LSL#24
MOV             R0, R0,LSR#7
ORR             R10, R10, R12,LSL#24
ORR             R0, R0, R12,LSL#25
EOR             R1, R1, R9
EOR             R3, R3, R10
EOR             R1, R1, R12,LSR#7
EOR             R3, R3, R0
ADDS            R3, R8, R3
STR             R3, [R2,#0x78]
ADD             R3, SP, #0x2BC+var_84
ADC             R1, LR, R1
CMP             R3, R2
STR             R1, [R2,#0x7C]
BNE             loc_598C4
LDR             R11, =unk_62E48
MOV             LR, #0

loc_59990
MOV             R1, R5,LSR#14
MOV             R3, R5,LSR#18
MOV             R0, R6,LSR#14
MOV             R2, R6,LSR#18
ORR             R3, R3, R6,LSL#14
ORR             R1, R1, R6,LSL#18
ORR             R2, R2, R5,LSL#14
ORR             R0, R0, R5,LSL#18
LDR             R9, [LR,R11]
EOR             R1, R1, R3
MOV             R3, R5,LSL#23
EOR             R0, R0, R2
MOV             R2, R6,LSL#23
ORR             R3, R3, R6,LSR#9
ORR             R2, R2, R5,LSR#9
EOR             R1, R1, R3
ADD             R3, R11, LR
EOR             R0, R0, R2
LDR             R12, [R3,#4]
ADD             R3, SP, #0x2BC+var_284
LDR             R8, [R3,LR]
ADD             R3, R3, LR
LDR             R2, [R3,#4]
ADD             LR, LR, #8
ADDS            R3, R9, R8
LDR             R9, [SP,#0x2BC+var_2B8]
ADC             R2, R12, R2
ADDS            R1, R1, R3
LDR             R3, [SP,#0x2BC+var_29C]
ADC             R0, R0, R2
LDR             R12, [SP,#0x2BC+var_2A0]
BIC             R8, R3, R5
LDR             R3, [SP,#0x2BC+var_29C+4]
AND             R12, R6, R12
BIC             R2, R3, R6
LDR             R3, [SP,#0x2BC+var_2A4]
EOR             R2, R2, R12
MOV             R12, R7,LSL#30
AND             R3, R5, R3
EOR             R3, R3, R8
ADDS            R3, R1, R3
LDR             R1, [SP,#0x2BC+var_28C]
ADC             R2, R0, R2
MOV             R0, R7,LSR#28
ADDS            R3, R3, R1
LDR             R1, [SP,#0x2BC+var_28C+4]
ADC             R2, R2, R1
LDR             R1, [SP,#0x2BC+var_2B8]
MOV             R1, R1,LSL#30
ORR             R8, R1, R7,LSR#2
LDR             R1, [SP,#0x2BC+var_2B8]
ORR             R0, R0, R1,LSL#4
ORR             R12, R12, R1,LSR#2
MOV             R1, R1,LSR#28
EOR             R12, R12, R0
LDR             R0, [SP,#0x2BC+var_2B8]
ORR             R1, R1, R7,LSL#4
EOR             R1, R1, R8
MOV             R8, R0,LSL#25
MOV             R0, R7,LSL#25
ORR             R8, R8, R7,LSR#7
ORR             R0, R0, R9,LSR#7
EOR             R1, R1, R8
EOR             R12, R12, R0
LDR             R8, [SP,#0x2BC+var_2AC]
LDR             R0, [SP,#0x2BC+var_2B4]
STR             R1, [SP,#0x2BC+var_28C]
LDR             R1, [SP,#0x2BC+var_2AC+4]
EOR             R10, R0, R8
LDR             R0, [SP,#0x2BC+var_2B0]
LDR             R8, [SP,#0x2BC+var_2AC+4]
AND             R10, R10, R7
EOR             R9, R0, R8
LDR             R0, [SP,#0x2BC+var_2B8]
LDR             R8, [SP,#0x2BC+var_2AC]
AND             R9, R9, R0
LDR             R0, [SP,#0x2BC+var_2B4]
AND             R0, R0, R8
LDR             R8, [SP,#0x2BC+var_2B0]
EOR             R0, R0, R10
ADDS            R0, R12, R0
AND             R8, R8, R1
LDR             R1, [SP,#0x2BC+var_28C]
EOR             R8, R8, R9
ADC             R8, R1, R8
LDR             R1, [SP,#0x2BC+var_294]
ADDS            R9, R3, R1
LDR             R1, [SP,#0x2BC+var_294+4]
ADC             R10, R2, R1
ADDS            R0, R3, R0
LDR             R3, [SP,#0x2BC+var_2AC]
ADC             R8, R2, R8
CMP             LR, #0x280
STR             R3, [SP,#0x2BC+var_294]
LDR             R3, [SP,#0x2BC+var_2AC+4]
STR             R3, [SP,#0x2BC+var_294+4]
LDR             R3, [SP,#0x2BC+var_29C]
STR             R3, [SP,#0x2BC+var_28C]
LDR             R3, [SP,#0x2BC+var_29C+4]
STR             R3, [SP,#0x2BC+var_28C+4]
BNE             loc_59C0C
LDR             R3, [R4,#0x10]
LDR             R2, [R4,#0x14]
LDR             R1, [SP,#0x2BC+var_2B4]
ADDS            R0, R3, R0
ADC             R8, R2, R8
LDRD            R2, R3, [R4,#0x18]
STR             R0, [R4,#0x10]
STR             R8, [R4,#0x14]
ADDS            R7, R2, R7
LDR             R2, [SP,#0x2BC+var_2B8]
STR             R7, [R4,#0x18]
ADC             R3, R3, R2
LDR             R2, [R4,#0x24]
STR             R3, [R4,#0x1C]
LDR             R3, [R4,#0x20]
ADDS            R3, R3, R1
LDR             R1, [SP,#0x2BC+var_2B0]
STR             R3, [R4,#0x20]
LDR             R3, [R4,#0x28]
ADC             R2, R2, R1
LDR             R1, [SP,#0x2BC+var_2AC]
STR             R2, [R4,#0x24]
LDR             R2, [R4,#0x2C]
ADDS            R3, R3, R1
LDR             R1, [SP,#0x2BC+var_2AC+4]
STR             R3, [R4,#0x28]
LDR             R3, [R4,#0x30]
ADC             R2, R2, R1
LDR             R1, [SP,#0x2BC+var_2A4]
STR             R2, [R4,#0x2C]
ADDS            R9, R3, R9
LDR             R2, [R4,#0x34]
LDR             R3, [R4,#0x38]
STR             R9, [R4,#0x30]
ADC             R10, R2, R10
LDR             R2, [R4,#0x3C]
ADDS            R5, R3, R5
LDR             R3, [R4,#0x40]
STR             R10, [R4,#0x34]
ADC             R6, R2, R6
LDR             R2, [R4,#0x44]
ADDS            R3, R3, R1
LDR             R1, [SP,#0x2BC+var_2A0]
STR             R5, [R4,#0x38]
STR             R6, [R4,#0x3C]
ADC             R2, R2, R1
STR             R3, [R4,#0x40]
LDR             R3, [R4,#0x48]
LDR             R1, [SP,#0x2BC+var_29C]
STR             R2, [R4,#0x44]
LDR             R2, [R4,#0x4C]
ADDS            R3, R3, R1
LDR             R1, [SP,#0x2BC+var_29C+4]
STR             R3, [R4,#0x48]
ADC             R2, R2, R1
STR             R2, [R4,#0x4C]
ADD             SP, SP, #0x2BC
POP             {R4-R11,PC}

loc_59C0C
LDR             R3, [SP,#0x2BC+var_2A4]
STR             R5, [SP,#0x2BC+var_2A4]
MOV             R5, R9
STR             R3, [SP,#0x2BC+var_29C]
LDR             R3, [SP,#0x2BC+var_2A0]
STR             R6, [SP,#0x2BC+var_2A0]
MOV             R6, R10
STR             R3, [SP,#0x2BC+var_29C+4]
LDR             R3, [SP,#0x2BC+var_2B4]
STR             R7, [SP,#0x2BC+var_2B4]
MOV             R7, R0
STR             R3, [SP,#0x2BC+var_2AC]
LDR             R3, [SP,#0x2BC+var_2B0]
STR             R3, [SP,#0x2BC+var_2AC+4]
LDR             R3, [SP,#0x2BC+var_2B8]
STR             R8, [SP,#0x2BC+var_2B8]
STR             R3, [SP,#0x2BC+var_2B0]
B               loc_59990
; End of function sub_5981C

off_59C54 DCD unk_62E48



; _DWORD *__fastcall sub_59C58(_DWORD *result)
sub_59C58

var_9C= -0x9C
var_98= -0x98
var_94= -0x94
var_90= -0x90
var_8C= -0x8C
var_88= -0x88
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x9C
SUB             R2, R0, #4
ADD             R1, SP, #0x9C+var_88
ADD             R12, R0, #0x3C ; '<'

loc_59C6C
LDR             R3, [R2,#4]!
CMP             R2, R12
REV             R3, R3
STR             R3, [R1,#0x44]
STR             R3, [R1,#4]!
BNE             loc_59C6C
LDR             R3, [R0,#0x50]
MOV             R1, #0
MOV             R6, R1
STR             R3, [SP,#0x9C+var_9C]
LDR             R3, [R0,#0x54]
LDR             LR, [SP,#0x9C+var_9C]
STR             R3, [SP,#0x9C+var_98]
LDR             R3, [R0,#0x58]
LDR             R5, [SP,#0x9C+var_98]
STR             R3, [SP,#0x9C+var_94]
LDR             R3, [R0,#0x5C]
STR             R3, [SP,#0x9C+var_90]
LDR             R3, [R0,#0x60]
LDR             R4, [SP,#0x9C+var_90]
STR             R3, [SP,#0x9C+var_8C]
MOV             R12, R3
LDR             R3, [SP,#0x9C+var_94]

loc_59CC8
LDR             R2, =dword_640BC
MOV             R10, R12
MOV             R7, R5
MOV             R12, R4
MOV             R5, LR
MOV             R4, R3
LDR             R2, [R2,R6,LSL#2]
MOV             R8, #0x13
STR             R2, [SP,#0x9C+var_88]

loc_59CEC
ADD             R9, SP, #0x9C+var_4
CMP             R6, #0
ADD             R9, R9, R1,LSL#2
EOR             R2, R3, R12
LDR             R11, [R9,#-0x80]
BNE             loc_59DA8
CMP             R8, #3
AND             R2, R2, R7
EOR             R2, R2, R12
BLE             loc_59DC0

loc_59D14
LDR             R3, [SP,#0x9C+var_88]
SUB             R8, R8, #1
ADD             R2, R2, R11
CMN             R8, #1
ADD             R1, R1, #1
AND             R1, R1, #0xF
ADD             LR, R3, LR,ROR#27
MOV             R3, R7,ROR#2
ADD             LR, LR, R2
MOV             R7, R5
ADD             LR, LR, R10
MOV             R10, R12
BNE             loc_59D98
ADD             R6, R6, #1
CMP             R6, #4
BNE             loc_59CC8
LDR             R2, [SP,#0x9C+var_9C]
ADD             LR, R2, LR
LDR             R2, [SP,#0x9C+var_98]
STR             LR, [R0,#0x50]
ADD             R5, R5, R2
LDR             R2, [SP,#0x9C+var_94]
STR             R5, [R0,#0x54]
ADD             R3, R2, R3
STR             R3, [R0,#0x58]
LDR             R3, [SP,#0x9C+var_90]
ADD             R4, R4, R3
LDR             R3, [SP,#0x9C+var_8C]
STR             R4, [R0,#0x5C]
ADD             R12, R12, R3
STR             R12, [R0,#0x60]
ADD             SP, SP, #0x9C
POP             {R4-R11,PC}

loc_59D98
MOV             R12, R4
MOV             R5, LR
MOV             R4, R3
B               loc_59CEC

loc_59DA8
CMP             R6, #2
ORREQ           R2, R7, R3
ANDEQ           R3, R3, R7
ANDEQ           R2, R2, R12
EORNE           R2, R2, R7
ORREQ           R2, R2, R3

loc_59DC0
ADD             R3, SP, #0x9C+var_4
ADD             R9, SP, #0x9C+var_4
ADD             R3, R3, R1,LSL#2
ADD             R9, R9, R1,LSL#2
LDR             R3, [R3,#-0x4C]
LDR             R9, [R9,#-0x60]
EOR             R3, R3, R9
EOR             R11, R11, R3
ADD             R3, SP, #0x9C+var_4
ADD             R3, R3, R1,LSL#2
LDR             R3, [R3,#-0x78]
EOR             R11, R11, R3
ADD             R3, SP, #0x9C+var_4
MOV             R11, R11,ROR#31
ADD             R3, R3, R1,LSL#2
STR             R11, [R3,#-0x40]
ADD             R3, SP, #0x9C+var_4
ADD             R3, R3, R1,LSL#2
STR             R11, [R3,#-0x80]
B               loc_59D14
; End of function sub_59C58

off_59E10 DCD dword_640BC



; _DWORD *__fastcall sub_59E14(_DWORD *result)
sub_59E14

var_120= -0x120
var_11C= -0x11C
var_118= -0x118
var_114= -0x114
var_110= -0x110
var_10C= -0x10C
var_108= -0x108
var_104= -0x104
var_44= -0x44

PUSH            {R4-R11,LR}
MOV             R3, #0
SUB             SP, SP, #0x124

loc_59E20
ADD             R1, SP, #0x124+var_104
LDR             R2, [R0,R3,LSL#2]
REV             R2, R2
STR             R2, [R1,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x10
BNE             loc_59E20
MOV             R3, R1
ADD             LR, SP, #0x124+var_44

loc_59E44
LDR             R1, [R3,#0x38]
MOV             R4, R3
LDR             R12, [R3,#4]!
MOV             R2, R1,ROR#19
CMP             LR, R3
EOR             R2, R2, R1,ROR#17
EOR             R2, R2, R1,LSR#10
LDR             R1, [R4,#0x24]
LDR             R4, [R4]
ADD             R1, R1, R4
ADD             R2, R2, R1
MOV             R1, R12,ROR#18
EOR             R1, R1, R12,ROR#7
EOR             R1, R1, R12,LSR#3
ADD             R2, R2, R1
STR             R2, [R3,#0x3C]
BNE             loc_59E44
LDR             R3, [R0,#0x54]
MOV             R5, #0
LDR             R9, [R0,#0x50]
STR             R3, [SP,#0x124+var_120]
LDR             R3, [R0,#0x58]
MOV             R12, R9
STR             R3, [SP,#0x124+var_11C]
LDR             R3, [R0,#0x5C]
LDMED           SP, {R4,LR}
STR             R3, [SP,#0x124+var_118]
LDR             R3, [R0,#0x60]
LDR             R11, [SP,#0x124+var_118]
STR             R3, [SP,#0x124+var_114]
LDR             R3, [R0,#0x64]
LDR             R1, [SP,#0x124+var_114]
STR             R3, [SP,#0x124+var_110]
LDR             R3, [R0,#0x68]
LDR             R8, [SP,#0x124+var_110]
STR             R3, [SP,#0x124+var_10C]
LDR             R3, [R0,#0x6C]
LDR             R7, [SP,#0x124+var_10C]
MOV             R10, R3
STR             R3, [SP,#0x124+var_108]

loc_59EE4
MOV             R6, R1,ROR#11
BIC             R2, R7, R1
AND             R3, R1, R8
EOR             R6, R6, R1,ROR#6
EOR             R3, R3, R2
ADD             R2, SP, #0x124+var_104
EOR             R6, R6, R1,ROR#25
ADD             R3, R6, R3
LDR             R6, [R2,R5,LSL#2]
LDR             R2, =unk_62E48
ADD             R3, R3, R6
ADD             R2, R2, R5,LSL#3
ADD             R5, R5, #1
CMP             R5, #0x40 ; '@'
LDR             R6, [R2,#4]
EOR             R2, R4, LR
AND             R2, R2, R12
ADD             R3, R3, R6
MOV             R6, R12,ROR#2
ADD             R3, R3, R10
EOR             R6, R6, R12,ROR#13
AND             R10, R4, LR
EOR             R2, R2, R10
EOR             R6, R6, R12,ROR#22
MOV             R10, R7
ADD             R6, R6, R2
ADD             R2, R3, R11
ADD             R3, R3, R6
MOV             R11, LR
BNE             loc_59FC0
ADD             R3, R9, R3
STR             R3, [R0,#0x50]
LDR             R3, [SP,#0x124+var_120]
ADD             R12, R3, R12
LDR             R3, [SP,#0x124+var_11C]
STR             R12, [R0,#0x54]
ADD             R4, R3, R4
LDR             R3, [SP,#0x124+var_118]
STR             R4, [R0,#0x58]
ADD             LR, R3, LR
LDR             R3, [SP,#0x124+var_114]
STR             LR, [R0,#0x5C]
ADD             R2, R3, R2
LDR             R3, [SP,#0x124+var_110]
STR             R2, [R0,#0x60]
ADD             R1, R3, R1
LDR             R3, [SP,#0x124+var_10C]
STR             R1, [R0,#0x64]
ADD             R8, R3, R8
LDR             R3, [SP,#0x124+var_108]
STR             R8, [R0,#0x68]
ADD             R7, R3, R7
STR             R7, [R0,#0x6C]
ADD             SP, SP, #0x124
POP             {R4-R11,PC}

loc_59FC0
MOV             R7, R8
MOV             LR, R4
MOV             R8, R1
MOV             R4, R12
MOV             R1, R2
MOV             R12, R3
B               loc_59EE4
; End of function sub_59E14

off_59FDC DCD unk_62E48



; int __fastcall sub_59FE0(int result)
sub_59FE0
LDR             R2, =0x67452301
LDR             R3, =0xEFCDAB89
STRD            R2, R3, [R0,#0x50]
LDR             R2, =0x98BADCFE
LDR             R3, =0x10325476
STRD            R2, R3, [R0,#0x58]
MOV             R3, #0
MOV             R2, #0
STRD            R2, R3, [R0,#0x48]
LDR             R3, =sub_59468
STR             R3, [R0,#0x40]
BX              LR
; End of function sub_59FE0

dword_5A010 DCD 0x67452301
dword_5A014 DCD 0xEFCDAB89
dword_5A018 DCD 0x98BADCFE
dword_5A01C DCD 0x10325476
off_5A020 DCD sub_59468



; void *__fastcall sub_5A024(int, char *src, size_t n)
sub_5A024
PUSH            {R4-R8,LR}
MOV             R5, R0
MOV             R8, R1
LDRD            R0, R1, [R0,#0x48]
MOV             R6, R2
AND             R7, R0, #0x3F ; '?'
ADDS            R2, R0, R2
ADC             R3, R1, #0
STRD            R2, R3, [R5,#0x48]

loc_5A048
RSB             R4, R7, #0x40 ; '@'
MOV             R1, R8  ; src
CMP             R4, R6
ADD             R0, R5, R7 ; dest
MOVCS           R4, R6
MOV             R2, R4  ; n
SUB             R6, R6, R4
ADD             R8, R8, R4
ADD             R4, R7, R4
BL              memcpy
CMP             R4, #0x40 ; '@'
POPNE           {R4-R8,PC}
LDR             R3, [R5,#0x40]
MOV             R0, R5
BLX             R3
MOV             R7, #0
B               loc_5A048
; End of function sub_5A024




; int __fastcall sub_5A08C(int, _DWORD *)
sub_5A08C
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
MOV             R1, #0
BL              sub_597A4
ADD             R3, R4, #0x50 ; 'P'
MOV             R1, R5
ADD             R4, R4, #0x60 ; '`'

loc_5A0AC
LDR             R2, [R3],#4
CMP             R3, R4
STR             R2, [R1],#4
BNE             loc_5A0AC
MOV             R0, #0x10
POP             {R4-R6,PC}
; End of function sub_5A08C




; int __fastcall sub_5A0C4(int)
sub_5A0C4
LDR             R12, =dword_6406C
ADD             R2, R0, #0x48 ; 'H'
PUSH            {R4,LR}
MOV             LR, R0
ADD             R4, R12, #0x28 ; '('

loc_5A0D8
MOV             R3, R12
ADD             R2, R2, #8
LDM             R3!, {R0,R1}
CMP             R3, R4
STR             R0, [R2,#-8]
STR             R1, [R2,#-4]
MOV             R12, R3
BNE             loc_5A0D8
LDR             R3, =sub_59E14
STR             R3, [LR,#0x40]
POP             {R4,PC}
; End of function sub_5A0C4

off_5A104 DCD dword_6406C
off_5A108 DCD sub_59E14



; int __fastcall sub_5A10C(int)
sub_5A10C
LDR             R12, =dword_6406C
SUB             R0, R0, #8
LDR             R1, =dword_64094
MOV             R3, #0
PUSH            {R4-R7,LR}

loc_5A120
LDR             R2, [R1,R3,LSL#2]
MOV             R6, #0
LDR             R7, [R12,R3,LSL#2]
ADD             R3, R3, #1
ADDS            R4, R6, R2
ADC             R5, R7, #0
CMP             R3, #0xA
STRD            R4, R5, [R0,#8]!
POPEQ           {R4-R7,PC}
B               loc_5A120
; End of function sub_5A10C

off_5A148 DCD dword_6406C
off_5A14C DCD dword_64094



; void *__fastcall sub_5A150(__int64 *, char *src, size_t n)
sub_5A150
PUSH            {R3-R11,LR}
MOV             R4, R0
MOV             R11, R1
LDRD            R0, R1, [R0]
MOV             R7, #0
MOV             R5, R2
MOV             R3, #0
ADDS            R8, R0, R2
AND             R10, R0, #0x7F
ADCS            R9, R1, R7
MOVCS           R2, #1
MOVCC           R2, #0
ORRS            R3, R2, R3
STRD            R8, R9, [R4]
BEQ             loc_5A1A4
LDR             R3, [R4,#8]
LDR             R2, [R4,#0xC]
ADDS            R3, R3, #1
ADC             R2, R2, #0
STR             R3, [R4,#8]
STR             R2, [R4,#0xC]

loc_5A1A4
ADD             R7, R4, #0x50 ; 'P'

loc_5A1A8
RSB             R6, R10, #0x80
MOV             R1, R11 ; src
CMP             R5, R6
ADD             R0, R7, R10 ; dest
MOVCC           R6, R5
MOV             R2, R6  ; n
ADD             R10, R6, R10
BL              memcpy
CMP             R10, #0x80
SUB             R5, R5, R6
ADD             R11, R11, R6
POPNE           {R3-R11,PC}
MOV             R0, R4
MOV             R10, #0
BL              sub_5981C
B               loc_5A1A8
; End of function sub_5A150




; size_t __fastcall sub_5A1E8(int, void *)
sub_5A1E8
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
MOV             R1, #1
BL              sub_597A4
ADD             R3, R4, #0x50 ; 'P'
LDR             R2, [R4,#0x40]
LDR             R4, =sub_59C58
MOV             R1, R3  ; src
CMP             R2, R4
MOVEQ           R4, #0x14
MOVNE           R4, #0x20 ; ' '
ADD             R0, R3, R4

loc_5A21C
LDR             R2, [R3]
REV             R2, R2
STR             R2, [R3],#4
CMP             R3, R0
BNE             loc_5A21C
MOV             R2, R4  ; n
MOV             R0, R5  ; dest
BL              memcpy
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_5A1E8

off_5A244 DCD sub_59C58



; int __fastcall sub_5A248(int, _DWORD *)
sub_5A248
LDR             R3, [R0]
MOV             R2, #0xFFFFFF80
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R6, R1
ADD             R7, R4, #0x50 ; 'P'
AND             R3, R3, #0x7F
ADD             R0, R3, #1
ADD             R3, R4, R3
STRB            R2, [R3,#0x50]

loc_5A270
RSB             R5, R0, #0x80
MOV             R1, #0  ; c
MOV             R2, R5  ; n
ADD             R0, R7, R0 ; s
BL              memset
CMP             R5, #0xF
BLS             loc_5A2C8
LDM             R4, {R1,R3}
MOV             R3, R3,LSL#3
MOV             R0, R1,LSL#3
ORR             R1, R3, R1,LSR#29
BL              sub_57900
LDR             R3, [R4,#0xC]
STRD            R0, R1, [R4,#0xC8]
LDR             R0, [R4,#4]
LDR             R1, [R4,#8]
MOV             R3, R3,LSL#3
MOV             R0, R0,LSR#29
ORR             R0, R0, R1,LSL#3
ORR             R1, R3, R1,LSR#29
BL              sub_57900
STRD            R0, R1, [R4,#0xC0]

loc_5A2C8
MOV             R0, R4
BL              sub_5981C
CMP             R5, #0xF
MOV             R0, #0
BLS             loc_5A270
ADD             R4, R4, #0x10
MOV             R5, R4

loc_5A2E4
LDRD            R0, R1, [R4]
BL              sub_57900
STRD            R0, R1, [R4],#8
CMP             R4, R7
BNE             loc_5A2E4
MOV             R3, R5
MOV             R1, R6

loc_5A300
LDR             R2, [R3],#4
CMP             R3, R7
STR             R2, [R1],#4
BNE             loc_5A300
MOV             R0, #0x40 ; '@'
POP             {R4-R8,PC}
; End of function sub_5A248




; char *__fastcall sub_5A318(unsigned __int64, unsigned int, unsigned int)
sub_5A318

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4-R9,LR}
MOV             R8, R0
MOV             R9, R1
ORRS            R1, R8, R9
BEQ             loc_5A434
CMP             R2, #1
MULHI           R12, R2, R9
UMULLHI         R8, R9, R0, R2
ADDHI           R9, R12, R9
CMP             R3, #0
BEQ             loc_5A3F8
MOV             R12, R3,LSR#1
MOV             R2, R3
MOV             R3, #0
ADDS            R0, R8, R12
ADC             R1, R9, #0
BLX             sub_62C44
LDR             R12, =(aLlu+1) ; "%llu"
MOV             R8, R0
LDR             LR, =unk_6BC1B
MOV             R9, R1
MOV             R3, #0

loc_5A370
LDRB            R2, [LR]
MOV             R0, R12
STR             R3, [SP,#0xC+var_C]
MOV             R3, R9
STR             R2, [SP,#0xC+var_8]
MOV             R2, R8
BL              sub_177E4
ADD             SP, SP, #0xC
POP             {R4-R9,LR}
B               sub_57710

loc_5A398
UBFX            R3, R8, #0, #0xA
MOV             R12, R8,LSR#10
MUL             R3, R6, R3
MOV             R7, R9,LSR#10
ORR             R12, R12, R9,LSL#22
ADD             LR, LR, #1
MOV             R8, R12
LDR             R12, =aLluUC ; "%llu.%u%c"
ADD             R3, R3, #0x200
MOV             R9, R7
MOV             R3, R3,LSR#10

loc_5A3C4
CMP             R9, R5
CMPEQ           R8, R4
BHI             loc_5A398
CMP             R3, #0xA
BNE             loc_5A410
LDR             R3, =aLluC ; "%llu%*c"
ADDS            R8, R8, #1
ADC             R9, R9, #0
CMP             R2, #0
MOVNE           R3, #0
MOVEQ           R12, R3
MOVEQ           R3, #1
B               loc_5A370

loc_5A3F8
LDR             R12, =(aLlu+1) ; "%llu"
MOVW            R4, #0x3FF
LDR             LR, =unk_6BC1B
MOV             R5, #0
MOV             R6, #0xA
B               loc_5A3C4

loc_5A410
CMP             R2, #0
BNE             loc_5A370
CMP             R3, #4
BLS             loc_5A428
ADDS            R8, R8, #1
ADC             R9, R9, #0

loc_5A428
LDR             R12, =aLluC ; "%llu%*c"
MOV             R3, #1
B               loc_5A370

loc_5A434
LDR             R0, =(aExponentLessTh+0x13) ; "0"
ADD             SP, SP, #0xC
POP             {R4-R9,PC}
; End of function sub_5A318

off_5A440 DCD aLlu+1    ; "%llu"
off_5A444 DCD unk_6BC1B
off_5A448 DCD aLluUC    ; "%llu.%u%c"
off_5A44C DCD aLluC     ; "%llu%*c"
off_5A450 DCD aExponentLessTh+0x13 ; "0"



; int __fastcall sub_5A454(unsigned __int8 *, _WORD *)
sub_5A454
PUSH            {R4-R7,LR}
MOV             R4, R1
ADD             R1, R1, #8
MOV             R3, #1
STRH            R3, [R4],#2

loc_5A468
MOV             R12, #0
MOV             LR, R0
ADD             R7, R0, #2
MOV             R6, R12

loc_5A478
MOV             R0, LR
LDRB            R5, [LR],#1
SUB             R3, R5, #0x30 ; '0'
UXTB            R3, R3
CMP             R3, #9
BLS             loc_5A4A8
ORR             R2, R5, #0x20 ; ' '
SUB             R3, R2, #0x61 ; 'a'
CMP             R3, #5
BHI             loc_5A4E4
SUB             R2, R2, #0x57 ; 'W'
UXTB            R3, R2

loc_5A4A8
ADD             R12, R3, R12,LSL#4
CMP             LR, R7
MOV             R0, LR
AND             R12, R12, #0xFF
MOV             R6, #1
BNE             loc_5A478

loc_5A4C0
STRB            R12, [R4],#1
CMP             R4, R1
LDRB            R3, [R0]
BNE             loc_5A4D8
MOV             R0, R3
POP             {R4-R7,PC}

loc_5A4D8
CMP             R3, #0x3A ; ':'
ADDEQ           R0, R0, #1
B               loc_5A468

loc_5A4E4
CMP             R6, #0
BEQ             loc_5A4F8
CMP             R5, #0
CMPNE           R5, #0x3A ; ':'
BEQ             loc_5A4C0

loc_5A4F8
MOV             R0, #0xFFFFFFFF
POP             {R4-R7,PC}
; End of function sub_5A454




; int __fastcall sub_5A500(unsigned __int16 *, int)
sub_5A500
MOV             R3, #0

loc_5A504
CMP             R1, #1
BGT             loc_5A52C
LDRBEQ          R2, [R0]
ADDEQ           R3, R3, R2
UXTH            R0, R3
ADD             R0, R0, R3,LSR#16
ADD             R0, R0, R0,LSR#16
MVN             R0, R0
UXTH            R0, R0
BX              LR

loc_5A52C
LDRH            R2, [R0],#2
SUB             R1, R1, #2
ADD             R3, R3, R2
B               loc_5A504
; End of function sub_5A500




; int __fastcall sub_5A53C(const char *, struct in_addr *)
sub_5A53C
MOV             R3, #2
PUSH            {R4-R8,LR}
MOV             R4, R1
STR             R3, [R1]
MOV             R6, R0
MOV             R7, R2
LDR             R1, =aDefault ; "default"
BL              strcmp
CMP             R0, #0
STREQ           R0, [R4,#4]
MOVEQ           R5, #1
BEQ             loc_5A5A4
ADD             R1, R4, #4 ; inp
MOV             R0, R6  ; cp
BL              inet_aton
SUBS            R5, R0, #0
MOVNE           R5, #0
BNE             loc_5A5A4
MOV             R0, R6  ; name
BL              gethostbyname
CMP             R0, #0
LDRNE           R3, [R0,#0x10]
MOVEQ           R5, #0xFFFFFFFF
LDRNE           R3, [R3]
LDRNE           R3, [R3]
STRNE           R3, [R4,#4]

loc_5A5A4
MOV             R0, R5
POP             {R4-R8,PC}
; End of function sub_5A53C

off_5A5AC DCD aDefault  ; "default"



; char *__fastcall sub_5A5B0(int, unsigned int, int)
sub_5A5B0
LDRH            R12, [R0]
PUSH            {R4-R8,LR}
CMP             R12, #2
BEQ             loc_5A5DC
LDR             R3, =dword_7DB94
MOV             R6, #0
MOV             R2, #0x61 ; 'a'
LDR             R3, [R3]
STR             R2, [R3]

loc_5A5D4
MOV             R0, R6
POP             {R4-R8,PC}

loc_5A5DC
UBFX            R12, R1, #0, #0xC
MOV             R5, R0
CMP             R12, #0
LDR             R8, [R0,#4]
BEQ             loc_5A5F8
POP             {R4-R8,LR}
B               sub_6249C

loc_5A5F8
CMP             R8, #0
BNE             loc_5A614
TST             R1, #0x8000
LDRNE           R0, =aDefault ; "default"
LDREQ           R0, =(asc_69C62+1) ; "*"

loc_5A60C
POP             {R4-R8,LR}
B               sub_174F8

loc_5A614
LDR             R7, =dword_7D754
BICS            R3, R8, R2
UBFXEQ          R4, R1, #0xE, #1
MOVNE           R4, #1
LDR             R0, [R7]

loc_5A628
CMP             R0, #0
BNE             loc_5A678
CMP             R4, #0
BNE             loc_5A69C

loc_5A638
MOV             R0, R5
BL              sub_6249C
MOV             R6, R0

loc_5A644               ; s
MOV             R0, R6
BL              strlen
ADD             R0, R0, #0x10
BL              sub_1748C
LDR             R3, [R7]
MOV             R5, R0
STR             R4, [R0,#8]
MOV             R1, R6  ; src
STM             R0, {R3,R8}
ADD             R0, R0, #0xC ; dest
BL              strcpy
STR             R5, [R7]
B               loc_5A5D4

loc_5A678
LDR             R2, [R0,#4]
CMP             R2, R8
BNE             loc_5A694
LDR             R2, [R0,#8]
CMP             R2, R4
ADDEQ           R0, R0, #0xC
BEQ             loc_5A60C

loc_5A694
LDR             R0, [R0]
B               loc_5A628

loc_5A69C
MOV             R0, R5
BL              sub_62494
SUBS            R6, R0, #0
BEQ             loc_5A638
B               loc_5A644
; End of function sub_5A5B0

off_5A6B0 DCD dword_7DB94
off_5A6B4 DCD aDefault  ; "default"
off_5A6B8 DCD asc_69C62+1 ; "*"
off_5A6BC DCD dword_7D754



; int __fastcall sub_5A6C0(int)
sub_5A6C0
LDR             R3, =dword_7D758
PUSH            {R4-R8,LR}
LDR             R4, [R3]
CMP             R4, #0
BEQ             loc_5A748
LDRD            R6, R7, [R0,#0x60]
MOV             R8, R0
MOVW            R1, #0x137
MOV             R0, R6
BLX             sub_15EFC
LDR             R0, [R4,R1,LSL#2]

loc_5A6EC
CMP             R0, #0
POPEQ           {R4-R8,PC}
LDRD            R2, R3, [R0]
CMP             R7, R3
CMPEQ           R6, R2
BNE             loc_5A740
LDRD            R4, R5, [R0,#8]
LDRD            R2, R3, [R8]
CMP             R5, R3
CMPEQ           R4, R2
BNE             loc_5A740
LDR             R3, [R8,#0x10]
LDRB            R2, [R0,#0x14]
AND             R3, R3, #0xF000
SUB             R3, R3, #0x4000
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R2, R3
BNE             loc_5A740
ADD             R0, R0, #0x15
POP             {R4-R8,PC}

loc_5A740
LDR             R0, [R0,#0x10]
B               loc_5A6EC

loc_5A748
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_5A6C0

off_5A750 DCD dword_7D758



; unsigned int __fastcall sub_5A754(int, char *s)
sub_5A754
PUSH            {R4-R6,LR}
CMP             R1, #0
LDR             R5, =(asc_6B39D+1) ; ""
MOVNE           R5, R1
MOV             R6, R0
MOV             R0, R5  ; s
BL              strlen
ADD             R0, R0, #0x18
BL              sub_1748C
LDRD            R2, R3, [R6,#0x60]
MOV             R1, R5  ; src
LDR             R5, =dword_7D758
MOV             R4, R0
ADD             R0, R0, #0x15 ; dest
STRD            R2, R3, [R0,#-0x15]
LDRD            R2, R3, [R6]
STRD            R2, R3, [R0,#-0xD]
LDR             R3, [R6,#0x10]
AND             R3, R3, #0xF000
SUB             R3, R3, #0x4000
CLZ             R3, R3
MOV             R3, R3,LSR#5
STRB            R3, [R0,#-1]
BL              strcpy
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_5A7CC
MOVW            R0, #0x4DC
BL              sub_174DC
STR             R0, [R5]

loc_5A7CC
LDR             R0, [R6,#0x60]
MOVW            R1, #0x137
BLX             sub_15EFC
LDR             R3, [R5]
LDR             R2, [R3,R1,LSL#2]
STR             R2, [R4,#0x10]
STR             R4, [R3,R1,LSL#2]
POP             {R4-R6,PC}
; End of function sub_5A754

off_5A7EC DCD asc_6B39D+1 ; ""
off_5A7F0 DCD dword_7D758



; void sub_5A7F4()
sub_5A7F4
LDR             R3, =dword_7D758
PUSH            {R4-R8,LR}
LDR             R5, [R3]
CMP             R5, #0
POPEQ           {R4-R8,PC}
ADD             R6, R5, #0x4D0
MOV             R4, R3
SUB             R7, R5, #4
ADD             R6, R6, #8

loc_5A818
CMP             R7, R6
BNE             loc_5A834
MOV             R0, R5  ; ptr
BL              free
MOV             R3, #0
STR             R3, [R4]
POP             {R4-R8,PC}

loc_5A834               ; ptr
LDR             R0, [R7,#4]!

loc_5A838
CMP             R0, #0
BEQ             loc_5A818
LDR             R8, [R0,#0x10]
BL              free
MOV             R0, R8
B               loc_5A838
; End of function sub_5A7F4

off_5A850 DCD dword_7D758



; bool __fastcall sub_5A854(int, int)
sub_5A854

var_5C= -0x5C

CMP             R1, #0
PUSH            {LR}
SUB             SP, SP, #0x6C
MOV             R1, SP
BEQ             loc_5A890
BLX             sub_62DFC

loc_5A86C
CMP             R0, #0
LDREQ           R0, [SP,#0x6C+var_5C]
MOVNE           R0, #0
ANDEQ           R0, R0, #0xF000
SUBEQ           R0, R0, #0x4000
CLZEQ           R0, R0
MOVEQ           R0, R0,LSR#5
ADD             SP, SP, #0x6C ; 'l'
POP             {PC}

loc_5A890
BLX             sub_62E14
B               loc_5A86C
; End of function sub_5A854




; int __fastcall sub_5A898(unsigned int, unsigned int)
sub_5A898
MOV             R2, #0x3E ; '>'
MOV             R3, #0
PUSH            {R4-R8,LR}

loc_5A8A4
MOV             R12, R3,LSL#1
MOV             R4, R0,LSR R2
MOV             R5, R1,LSR R2
ADD             R3, R12, #1
UMULL           R6, R7, R3, R3
RSB             R8, R2, #0x20 ; ' '
ORR             R4, R4, R1,LSL R8
SUB             LR, R2, #0x20 ; ' '
SUB             R2, R2, #2
ORR             R4, R4, R1,LSR LR
CMP             R7, R5
CMPEQ           R6, R4
MOVHI           R3, R12
CMN             R2, #2
BNE             loc_5A8A4
MOV             R0, R3
POP             {R4-R8,PC}
; End of function sub_5A898




; int sub_5A8E8()
sub_5A8E8

s= -0x10A

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x18C
LDR             R7, =(asc_67ED0+4) ; "."
MOV             R0, SP  ; name
MOV             R6, #3
MOV             R5, #0
BL              uname
ADD             R0, SP, #0x18C+s ; s

loc_5A908               ; delim
MOV             R1, R7
MOV             R5, R5,LSL#8
BL              strtok
SUBS            R4, R0, #0
MOVEQ           R0, R4  ; nptr
BEQ             loc_5A924
BL              atoi

loc_5A924
SUBS            R6, R6, #1
ADD             R5, R5, R0
MOV             R0, #0
BNE             loc_5A908
MOV             R0, R5
ADD             SP, SP, #0x18C
POP             {R4-R7,PC}
; End of function sub_5A8E8

off_5A940 DCD asc_67ED0+4 ; "."



; bool __fastcall sub_5A944(unsigned int)
sub_5A944
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_5A96C
ORR             R3, R0, #0x20 ; ' '
SUB             R3, R3, #0x61 ; 'a'
CMP             R0, #0x5F ; '_'
CMPNE           R3, #0x19
MOVLS           R0, #1
MOVHI           R0, #0
BX              LR

loc_5A96C
MOV             R0, #1
BX              LR
; End of function sub_5A944




; _WORD *__fastcall sub_5A974(_WORD *result, int, int)
sub_5A974
CMP             R1, R2
BXEQ            LR
MOV             R3, #0xFFFFFFFE
ADD             R0, R0, R1,LSL#1
MUL             R1, R3, R1
MOV             R2, R2,LSL#1

loc_5A98C
ADD             R3, R0, R1
LDRSH           R3, [R3,R2]
CMP             R3, #0
STRH            R3, [R0],#2
BXEQ            LR
B               loc_5A98C
; End of function sub_5A974




; int __fastcall sub_5A9A4(int)
sub_5A9A4
PUSH            {R4-R8,LR}
MOV             R4, R0
BL              strlen
ADD             R3, R4, R0
ADD             R0, R4, R0,LSL#1

loc_5A9B8
LDRB            R2, [R3],#-1
STRH            R2, [R0],#-2
SUB             R2, R3, R4
CMP             R2, #0
BGE             loc_5A9B8
SUB             R5, R4, #2
MOV             R1, #0
MOV             R7, R5

loc_5A9D8
LDRSH           R6, [R7,#2]!
CMP             R6, #0
BNE             loc_5AA2C
MOV             R7, R6

loc_5A9E8
MOV             R1, R7,LSL#1
LDRSH           R3, [R4,R1]
CMP             R3, #0
BNE             loc_5AA58

loc_5A9F8
MOV             R12, R3,LSL#1
LDRSH           R0, [R4,R12]
CMP             R0, #0
BNE             loc_5AAA0
MOV             R6, R5

loc_5AA0C
LDRSH           R3, [R6,#2]!
CMP             R3, #0
BEQ             loc_5AB60
CMP             R3, #0x60 ; '`'
ADD             R7, R0, #1
BEQ             loc_5AC28

loc_5AA24
MOV             R0, R7
B               loc_5AA0C

loc_5AA2C
CMP             R6, #0x5C ; '\'
ADD             R8, R1, #1
BNE             loc_5AA50
MOV             R2, R8
MOV             R0, R4
BL              sub_5A974
LDRH            R3, [R7]
ORR             R3, R3, #0x100
STRH            R3, [R7]

loc_5AA50
MOV             R1, R8
B               loc_5A9D8

loc_5AA58
CMP             R3, #0x22 ; '"'
CMPNE           R3, #0x27 ; '''
ADD             R2, R7, #1
BNE             loc_5AA88
CMP             R6, R3
CMPNE           R6, #0
BNE             loc_5AA90
MOV             R1, R7
MOV             R0, R4
EOR             R6, R6, R3
BL              sub_5A974
B               loc_5A9E8

loc_5AA88
CMP             R6, #0
BEQ             loc_5AA98

loc_5AA90
ORR             R3, R3, #0x100
STRH            R3, [R4,R1]

loc_5AA98
MOV             R7, R2
B               loc_5A9E8

loc_5AAA0
SUB             R1, R0, #0x7C ; '|'
CMP             R0, #0x26 ; '&'
CMPNE           R0, #0x3B ; ';'
CLZ             R1, R1
MOVEQ           R2, #1
MOV             R1, R1,LSR#5
MOVNE           R2, #0
ORRS            R2, R1, R2
BEQ             loc_5AB1C
CMP             R3, #0
BEQ             loc_5AB24
CMP             R0, #0x26 ; '&'
ADD             R2, R4, R12
LDRSH           LR, [R2,#-2]
BNE             loc_5AAE8
BIC             R2, LR, #2
CMP             R2, #0x3C ; '<'
BEQ             loc_5AB1C

loc_5AAE8
CMP             LR, #0x3E ; '>'
MOVNE           R1, #0
ANDEQ           R1, R1, #1
ADD             R2, R3, #1
CMP             R1, #0
BNE             loc_5AB1C
ADD             R12, R4, R12
LDRSH           R3, [R12,#2]
CMP             R3, R0
ADDEQ           R2, R2, #1
MOV             R0, R4
BL              sub_5A974
MOV             R3, #0xFFFFFFFF

loc_5AB1C
ADD             R3, R3, #1
B               loc_5A9F8

loc_5AB24
MOV             LR, R3
B               loc_5AAE8

loc_5AB2C
CMP             R1, #0x60 ; '`'
BNE             loc_5AB44
MOV             R1, R0
MOV             R0, R4
BL              sub_5A974
B               loc_5AA24

loc_5AB44
ADD             R2, R2, #1

loc_5AB48
LDRSH           R1, [R3,#2]!
CMP             R1, #0
BNE             loc_5AB2C
MOV             R2, R7
MOV             R0, R4
BL              sub_5A974

loc_5AB60
MOV             R1, #0

loc_5AB64
MOV             R3, R1,LSL#1
LDRSH           R3, [R4,R3]
CMP             R3, #0
BNE             loc_5AC34
MOV             R1, R5
MOV             R2, R3

loc_5AB7C
LDRSH           R3, [R1,#2]!
CMP             R3, #0x20 ; ' '
BEQ             loc_5AC5C
MOV             R0, R4
MOV             R1, #0
BL              sub_5A974
LDRB            R12, [R4]
MOV             R6, #0
MOV             R0, R5
MOV             R2, R6

loc_5ABA4
LDRSH           R3, [R0,#2]!
CMP             R3, #0
BNE             loc_5AC64

loc_5ABB0
MOV             R2, R5
MOV             R3, #0

loc_5ABB8
LDRSH           R1, [R2,#2]!
CMP             R1, #0
BNE             loc_5ACC0
LDR             R12, =0x50000041
SUB             R2, R3, #1
ADD             R3, R4, R3,LSL#1

loc_5ABD0
CMN             R2, #1
BEQ             loc_5AC08
LDRSH           R0, [R3,#-2]!
SUB             R1, R0, #0x20 ; ' '
UXTH            R1, R1
CMP             R1, #0x1E
BHI             loc_5ACC8
MVN             R1, R12,LSR R1
TST             R1, #1
BNE             loc_5ACD0

loc_5ABF8
ADD             R2, R2, #1
MOV             R1, #0
MOV             R0, R4
BL              sub_5A974

loc_5AC08
SUB             R4, R4, #1

loc_5AC0C
LDRH            R3, [R5,#2]!
UXTB            R3, R3
CMP             R3, #0
STRB            R3, [R4,#1]!
BNE             loc_5AC0C
MOV             R0, R6
POP             {R4-R8,PC}

loc_5AC28
MOV             R3, R6
MOV             R2, R7
B               loc_5AB48

loc_5AC34
CMP             R3, #0x7B ; '{'
CMPNE           R3, #0x28 ; '('
ADD             R2, R1, #1
BNE             loc_5AC54
MOV             R1, #0
MOV             R0, R4
BL              sub_5A974
MOV             R1, #0xFFFFFFFF

loc_5AC54
ADD             R1, R1, #1
B               loc_5AB64

loc_5AC5C
ADD             R2, R2, #1
B               loc_5AB7C

loc_5AC64
BIC             LR, R3, #2
SUB             R1, R3, #0x20 ; ' '
CMP             R3, #0x20 ; ' '
CMPNE           LR, #0x3C ; '<'
CLZ             R1, R1
MOV             R1, R1,LSR#5
BNE             loc_5ACB0
CMP             R6, #0
MOVEQ           R6, R1
MOVNE           R6, #0
CMP             R6, #0
BEQ             loc_5ACB8
CMP             R12, #0x63 ; 'c'
BNE             loc_5ACB8
LDRB            R3, [R4,#2]
CMP             R3, #0x64 ; 'd'
CMPEQ           R2, #2
BNE             loc_5ACB8
MOV             R6, #1

loc_5ACB0
ADD             R2, R2, #1
B               loc_5ABA4

loc_5ACB8
MOV             R6, #2
B               loc_5ABB0

loc_5ACC0
ADD             R3, R3, #1
B               loc_5ABB8

loc_5ACC8
CMP             R0, #0x7C ; '|'
BEQ             loc_5ABF8

loc_5ACD0
SUB             R2, R2, #1
B               loc_5ABD0
; End of function sub_5A9A4

dword_5ACD8 DCD 0x50000041



; int sub_5ACDC()
sub_5ACDC
MOV             R0, #7  ; c
B               j_putchar_unlocked
; End of function sub_5ACDC




; unsigned int __fastcall sub_5ACE4(unsigned int result)
sub_5ACE4
LDR             R3, =dword_7DBC4
PUSH            {R4-R8,LR}
LDR             R5, [R3]
LDR             R3, [R5,#0x14]
CMP             R3, R0
MOVCC           R4, R3
MOVCS           R4, R0
CMP             R4, #0
POPEQ           {R4-R8,PC}
LDR             R1, [R5,#8]
SUB             R3, R3, R4
STR             R3, [R5,#0x14]
CMP             R1, R4
BCC             loc_5AD50
CMP             R4, #4
SUB             R1, R1, R4
STR             R1, [R5,#8]
BHI             loc_5AD40

loc_5AD2C               ; c
MOV             R0, #8
BL              j_putchar_unlocked
SUBS            R4, R4, #1
POPEQ           {R4-R8,PC}
B               loc_5AD2C

loc_5AD40
LDR             R0, =aUd ; "\x1B[%uD"
MOV             R1, R4

loc_5AD48
POP             {R4-R8,LR}
B               printf

loc_5AD50
LDR             R7, [R5,#4]
SUB             R4, R4, R1
SUB             R0, R4, #1
MOV             R1, R7
BLX             sub_15CA0
LDR             R6, [R5,#0xC]
ADD             R8, R0, #1
MOV             R1, R7
MUL             R0, R6, R7
SUB             R6, R6, R8
SUB             R0, R0, R4
BLX             sub_15EFC
STR             R6, [R5,#0xC]
STR             R1, [R5,#8]
MOV             R1, R8
LDR             R0, =aUa ; "\r\x1B[%uA"
BL              printf
LDR             R1, [R5,#8]
CMP             R1, #0
POPEQ           {R4-R8,PC}
LDR             R0, =aUc ; "\x1B[%uC"
B               loc_5AD48
; End of function sub_5ACE4

off_5ADA8 DCD dword_7DBC4
off_5ADAC DCD aUd       ; "\x1B[%uD"
off_5ADB0 DCD aUa       ; "\r\x1B[%uA"
off_5ADB4 DCD aUc       ; "\x1B[%uC"



; unsigned int sub_5ADB8()
sub_5ADB8
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R5, [R4,#0x20]

loc_5ADC8
LDR             R3, [R4,#0x14]
CMP             R3, #0
POPEQ           {R4-R6,PC}
ADD             R3, R5, R3
LDRB            R3, [R3,#-1]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BLS             loc_5AE1C

loc_5ADEC
LDR             R3, [R4,#0x14]
CMP             R3, #0
POPEQ           {R4-R6,PC}
ADD             R3, R5, R3
LDRB            R3, [R3,#-1]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
POPLS           {R4-R6,PC}
MOV             R0, #1
BL              sub_5ACE4
B               loc_5ADEC

loc_5AE1C
MOV             R0, #1
BL              sub_5ACE4
B               loc_5ADC8
; End of function sub_5ADB8

off_5AE28 DCD dword_7DBC4



; void sub_5AE2C()
sub_5AE2C
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R5, [R3]
LDR             R3, [R5,#0x20]
LDRB            R3, [R3]
CMP             R3, #0
POPEQ           {R4-R6,PC}
LDR             R3, [R5]
LDR             R4, [R3,#0x10]
ADD             R4, R4, #8
LDR             R0, [R3,R4,LSL#2] ; ptr
BL              free
LDR             R6, [R5]
LDR             R0, [R5,#0x20]
BL              sub_174F8
STR             R0, [R6,R4,LSL#2]
POP             {R4-R6,PC}
; End of function sub_5AE2C

off_5AE70 DCD dword_7DBC4



; int sub_5AE74()
sub_5AE74
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R5, [R3]
LDR             R3, [R5]
LDR             R4, [R3]
ANDS            R4, R4, #1
BEQ             loc_5AEB8
LDR             R3, [R3,#0x10]
CMP             R3, #0
BEQ             loc_5AEB8
BL              sub_5AE2C
LDR             R2, [R5]
LDR             R3, [R2,#0x10]
SUB             R3, R3, #1
STR             R3, [R2,#0x10]

loc_5AEB0
MOV             R0, R4
POP             {R4-R6,PC}

loc_5AEB8
BL              sub_5ACDC
MOV             R4, #0
B               loc_5AEB0
; End of function sub_5AE74

off_5AEC4 DCD dword_7DBC4



; int sub_5AEC8()
sub_5AEC8
LDR             R3, =dword_7DBC4
PUSH            {R4,LR}
LDR             R4, [R3]
LDR             R3, [R4]
LDR             R2, [R3]
TST             R2, #1
BEQ             loc_5AF0C
LDR             R2, [R3,#0x10]
LDR             R3, [R3,#0xC]
CMP             R2, R3
BGE             loc_5AF0C
BL              sub_5AE2C
LDR             R3, [R4]
LDR             R0, [R3,#0x10]
ADD             R0, R0, #1
STR             R0, [R3,#0x10]
POP             {R4,PC}

loc_5AF0C
BL              sub_5ACDC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_5AEC8

off_5AF18 DCD dword_7DBC4



; void sub_5AF1C()
sub_5AF1C
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R5, [R3]
LDR             R3, [R5,#0x34]
CMP             R3, #0
POPEQ           {R4-R6,PC}

loc_5AF34
LDR             R4, [R5,#0x38]
LDR             R0, [R5,#0x34] ; ptr
CMP             R4, #0
BNE             loc_5AF50
BL              free
STR             R4, [R5,#0x34]
POP             {R4-R6,PC}

loc_5AF50
SUB             R4, R4, #1
STR             R4, [R5,#0x38]
LDR             R0, [R0,R4,LSL#2] ; ptr
BL              free
B               loc_5AF34
; End of function sub_5AF1C

off_5AF64 DCD dword_7DBC4



; void sub_5AF68()
sub_5AF68
LDR             R3, =dword_7DBC4
PUSH            {R4,LR}
LDR             R4, [R3]
LDR             R0, [R4,#0x24] ; ptr
BL              free
LDR             R0, [R4,#0x2C] ; ptr
BL              free
LDR             R0, [R4,#0x30] ; ptr
LDR             R3, =unk_6BC3E
CMP             R0, R3
BEQ             loc_5AF98
BL              free

loc_5AF98               ; ptr
MOV             R0, R4
POP             {R4,LR}
B               free
; End of function sub_5AF68

off_5AFA4 DCD dword_7DBC4
off_5AFA8 DCD unk_6BC3E



; size_t __fastcall sub_5AFAC(_DWORD *)
sub_5AFAC

s= -0xF9C
var_s0=  0

PUSH            {R4-R10,LR}
MOV             R5, R0
SUB             SP, SP, #0xFA0
LDR             R0, [R0,#0x1C]
BL              sub_61C9C
SUBS            R7, R0, #0
BEQ             loc_5B044
LDR             R4, [R5,#0xC]
MOV             R8, #0
ADD             R6, R5, R4,LSL#2
ADD             R6, R6, #0x20 ; ' '

loc_5AFD8
CMP             R4, #0
BNE             loc_5B04C
ADD             R6, SP, #0xFA0+s
MOVW            R2, #0xF9C ; n
MOV             R1, R4  ; c
MOV             R0, R6  ; s
BL              memset
STR             R4, [R5,#0x18]

loc_5AFF8
MOV             R0, R7
BL              sub_58D24
SUBS            R8, R0, #0
BNE             loc_5B060
MOV             R0, R7  ; stream
BL              fclose
LDR             R3, [R5,#0x18]
LDR             R7, [R5,#0x14]
CMP             R3, #0
BEQ             loc_5B02C

loc_5B020
LDR             R3, [R6,R4,LSL#2]
CMP             R3, #0
BEQ             loc_5B0A8

loc_5B02C
MOV             R6, #0
ADD             R9, R5, #0x20 ; ' '
MOV             R10, R6

loc_5B038
CMP             R7, R6
BNE             loc_5B0B8

loc_5B040
STR             R6, [R5,#0xC]

loc_5B044
ADD             SP, SP, #0xFA0
POP             {R4-R10,PC}

loc_5B04C               ; ptr
LDR             R0, [R6,#-4]!
SUB             R4, R4, #1
BL              free
STR             R8, [R6]
B               loc_5AFD8

loc_5B060
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_5B074
BL              free
B               loc_5AFF8

loc_5B074
ADD             R3, SP, #0xFA0+var_s0
ADD             R9, R3, R4,LSL#2
ADD             R4, R4, #1
LDR             R0, [R9,#-0xF9C] ; ptr
BL              free
LDR             R3, [R5,#0x18]
STR             R8, [R9,#-0xF9C]
ADD             R3, R3, #1
STR             R3, [R5,#0x18]
LDR             R3, [R5,#0x14]
CMP             R3, R4
MOVEQ           R4, #0
B               loc_5AFF8

loc_5B0A8
ADD             R4, R4, #1
CMP             R4, R7
MOVEQ           R4, R3
B               loc_5B020

loc_5B0B8
ADD             R3, SP, #0xFA0+var_s0
ADD             R3, R3, R4,LSL#2
LDR             R8, [R3,#-0xF9C]
CMP             R8, #0
BEQ             loc_5B040
ADD             R4, R4, #1
MOV             R0, R8  ; s
CMP             R7, R4
ADD             R6, R6, #1
MOVEQ           R4, #0
BL              strlen
CMP             R0, #0x400
STR             R8, [R9],#4
STRBCS          R10, [R8,#0x3FF]
B               loc_5B038
; End of function sub_5AFAC




; void sub_5B0F4()
sub_5B0F4
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0x14]
LDR             R5, [R4,#0x20]
CMP             R3, #0
POPEQ           {R4-R6,PC}

loc_5B110
MOV             R0, #1
BL              sub_5ACE4
LDR             R3, [R4,#0x14]
CMP             R3, #0
POPEQ           {R4-R6,PC}
LDRB            R1, [R5,R3]
SUB             R3, R1, #9
CMP             R1, #0x20 ; ' '
CMPNE           R3, #4
BLS             loc_5B110
MOV             R0, R1
BL              sub_5A944
CMP             R0, #0
BNE             loc_5B19C
LDR             R0, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
LDRNE           R6, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
POPEQ           {R4-R6,PC}

loc_5B160
LDR             R3, [R4,#0x14]
CMP             R3, #0
POPEQ           {R4-R6,PC}
ADD             R3, R5, R3
MOV             R0, R6
LDRB            R1, [R3,#-1]
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
POPEQ           {R4-R6,PC}
MOV             R0, #1
BL              sub_5ACE4
B               loc_5B160

loc_5B194
MOV             R0, #1
BL              sub_5ACE4

loc_5B19C
LDR             R3, [R4,#0x14]
CMP             R3, #0
POPEQ           {R4-R6,PC}
ADD             R3, R5, R3
LDRB            R0, [R3,#-1]
BL              sub_5A944
CMP             R0, #0
POPEQ           {R4-R6,PC}
B               loc_5B194
; End of function sub_5B0F4

off_5B1C0 DCD dword_7DBC4
off_5B1C4 DCD asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"



; _BYTE *sub_5B1C8()
sub_5B1C8
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R6, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
LDR             R4, [R3]
LDR             R5, [R4,#0x20]

loc_5B1DC
MOV             R0, #1
BL              sub_5ACE4
LDR             R3, [R4,#0x14]
CMP             R3, #0
POPEQ           {R4-R6,PC}
LDRB            R1, [R5,R3]
CMP             R1, #0x20 ; ' '
BEQ             loc_5B1DC
MOV             R0, R6
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_5B1DC
LDR             R6, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"

loc_5B214
LDR             R3, [R4,#0x14]
ADD             R3, R5, R3
LDRB            R1, [R3,#-1]
CMP             R1, #0x20 ; ' '
POPEQ           {R4-R6,PC}
MOV             R0, R6
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
POPNE           {R4-R6,PC}
MOV             R0, #1
BL              sub_5ACE4
LDR             R3, [R4,#0x14]
CMP             R3, #0
POPEQ           {R4-R6,PC}
B               loc_5B214
; End of function sub_5B1C8

off_5B254 DCD dword_7DBC4
off_5B258 DCD asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"



; unsigned int __fastcall sub_5B25C(int)
sub_5B25C
LDR             R3, =dword_7DBC4
CMP             R0, #0
PUSH            {R4,LR}
LDR             R1, =stdout
LDR             R4, [R3]
LDR             R1, [R1]
LDRD            R2, R3, [R4,#0x24]
MOVEQ           R0, R3
MOVNE           R0, R2
BL              fputs_unlocked
MOV             R3, #0
LDR             R1, [R4,#4]
STR             R3, [R4,#0x14]
LDR             R0, [R4,#0x10]
BLX             sub_15EFC
STR             R0, [R4,#0xC]
STR             R1, [R4,#8]
POP             {R4,PC}
; End of function sub_5B25C

off_5B2A4 DCD dword_7DBC4
off_5B2A8 DCD stdout



; unsigned int __fastcall sub_5B2AC(unsigned __int8 *)
sub_5B2AC

var_24= -0x24
var_20= -0x20
var_18= -0x18
var_17= -0x17
s= -0x14
nptr= -0x10
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x24
LDR             R9, =dword_7DBC4
MOV             R4, #0
MOV             R7, #0x5B ; '['
MOV             R10, R4
STR             R0, [SP,#0x24+var_20]
MOV             R0, #1
BL              sub_174DC
MOV             R6, R0
STRB            R4, [SP,#0x24+var_17]

loc_5B2D8
LDR             R11, [SP,#0x24+var_20]
LDRB            R3, [R11]
CMP             R3, #0
BNE             loc_5B334

loc_5B2E8
LDR             R3, =aUnknown_1 ; "(unknown)"
CMP             R4, R3
BEQ             loc_5B2FC
MOV             R0, R4  ; ptr
BL              free

loc_5B2FC
LDR             R4, [R9]
MOV             R1, #0xA ; c
MOV             R0, R6  ; s
STR             R6, [R4,#0x28]
STR             R6, [R4,#0x24]
BL              strrchr
CMP             R0, #0
STR             R0, [SP,#0x24+var_20]
ADDNE           R0, R0, #1
STRNE           R0, [R4,#0x28]
MOV             R0, #1
BL              sub_5B25C
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_5B334
ADD             R3, SP, #0x24+var_18
ADD             R5, R11, #1
STR             R3, [SP,#0x24+s]
STR             R5, [SP,#0x24+var_20]
LDRB            R8, [R11]
CMP             R8, #0x5C ; '\'
BNE             loc_5B3B8
LDRB            R8, [R11,#1]
CMP             R8, #0x74 ; 't'
BEQ             loc_5B368
ADD             R0, SP, #0x24+var_20
BL              sub_5E668
MOV             R8, R0

loc_5B368
LDR             R2, [SP,#0x24+var_20]
LDR             R3, [R9]
CMP             R5, R2
STR             R3, [SP,#0x24+var_24]
BNE             loc_5B3B8
LDRB            R3, [R11,#1]
CMP             R3, #0
BEQ             loc_5B2E8
ADD             R3, R11, #2
STR             R3, [SP,#0x24+var_20]
LDRB            R8, [R11,#1]
CMP             R8, #0x58 ; 'X'
BEQ             loc_5B578
BHI             loc_5B454
CMP             R8, #0x41 ; 'A'
BHI             loc_5B3C0
CMP             R8, #0x40 ; '@'
BCS             loc_5B4CC
CMP             R8, #0x24 ; '$'
BEQ             loc_5B4BC

loc_5B3B8
MOV             R5, #0
B               loc_5B3FC

loc_5B3C0
CMP             R8, #0x54 ; 'T'
BEQ             loc_5B4CC
CMP             R8, #0x57 ; 'W'
BEQ             loc_5B4F0
CMP             R8, #0x48 ; 'H'
BNE             loc_5B3B8

loc_5B3D8
BL              sub_60AA0
CMP             R8, #0x68 ; 'h'
MOV             R5, R0
STR             R0, [SP,#0x24+s]
BNE             loc_5B3FC
MOV             R1, #0x2E ; '.'
BL              strchrnul
MOV             R3, #0
STRB            R3, [R0]

loc_5B3FC               ; s
LDR             R0, [SP,#0x24+s]
STRB            R8, [SP,#0x24+var_18]
BL              strlen
LDR             R3, [R9]
CMP             R8, #0xA
MOVEQ           R2, #0
ADD             R10, R10, R0
STREQ           R2, [R3,#0x10]
BEQ             loc_5B430
CMP             R7, #0x5D ; ']'
LDRNE           R2, [R3,#0x10]
ADDNE           R0, R2, R0
STRNE           R0, [R3,#0x10]

loc_5B430
ADD             R1, R10, #1
MOV             R0, R6
BL              sub_174B4
LDR             R1, [SP,#0x24+s] ; src
BL              strcat
MOV             R6, R0
MOV             R0, R5  ; ptr
BL              free
B               loc_5B2D8

loc_5B454
CMP             R8, #0x74 ; 't'
BEQ             loc_5B4CC
BHI             loc_5B488
CMP             R8, #0x5D ; ']'
BEQ             loc_5B478
CMP             R8, #0x68 ; 'h'
BEQ             loc_5B3D8
CMP             R8, #0x5B ; '['
BNE             loc_5B3B8

loc_5B478
CMP             R7, R8
EOREQ           R7, R7, #6
BEQ             loc_5B2D8
B               loc_5B3B8

loc_5B488
CMP             R8, #0x77 ; 'w'
BEQ             loc_5B4F0
CMP             R8, #0x78 ; 'x'
BEQ             loc_5B578
CMP             R8, #0x75 ; 'u'
BNE             loc_5B3B8
LDR             R3, [SP,#0x24+var_24]
LDR             R2, =(asc_6B39D+1) ; ""
LDR             R3, [R3,#0x2C]
CMP             R3, #0
MOVEQ           R3, R2

loc_5B4B4
STR             R3, [SP,#0x24+s]
B               loc_5B3B8

loc_5B4BC
BL              geteuid
CMP             R0, #0
MOVEQ           R8, #0x23 ; '#'
B               loc_5B3B8

loc_5B4CC
ADD             R11, SP, #0x24+nptr
MOV             R2, #0
MOV             R1, #9
MOV             R0, R11
MOV             R5, #0
BL              sub_18768
STRB            R5, [R0,#-3]
STR             R11, [SP,#0x24+s]
B               loc_5B3FC

loc_5B4F0
CMP             R4, #0
BNE             loc_5B54C
MOV             R0, R4
BL              sub_624A4
SUBS            R4, R0, #0
LDREQ           R4, =aUnknown_1 ; "(unknown)"
BEQ             loc_5B54C
LDR             R3, [SP,#0x24+var_24]
LDR             R1, [R3,#0x30]
LDRB            R3, [R1]
CMP             R3, #0
BEQ             loc_5B54C
BL              sub_1684C
SUBS            R1, R0, #0
BEQ             loc_5B54C
LDRB            R3, [R1]
CMP             R3, #0
CMPNE           R3, #0x2F ; '/'
BNE             loc_5B54C
MOV             R0, R4
MOV             R3, #0x7E ; '~'
STRB            R3, [R0],#1
BL              sub_60B4C

loc_5B54C
CMP             R8, #0x77 ; 'w'
STR             R4, [SP,#0x24+s]
BEQ             loc_5B3B8
MOV             R1, #0x2F ; '/' ; c
MOV             R0, R4  ; s
BL              strrchr
SUBS            R5, R0, #0
ADDNE           R5, R5, #1
STRNE           R5, [SP,#0x24+s]
BNE             loc_5B3B8
B               loc_5B3FC

loc_5B578
ADD             R8, SP, #0x24+nptr
MOV             R5, #0
MOV             R11, R8

loc_5B584
LDR             R2, [SP,#0x24+var_20]
ADD             R3, R5, #1
STR             R3, [SP,#0x24+var_24]
MOV             R3, #0
MOV             R0, R11 ; nptr
LDRB            R2, [R2]
STRB            R2, [R8]
MOV             R2, #0x10 ; base
STRB            R3, [R8,#1]!
ADD             R1, SP, R2 ; endptr
BL              strtoul
CMP             R0, #0xFF
LDR             R3, [SP,#0x24+var_24]
BHI             loc_5B5CC
LDR             R2, [SP,#0x24+s]
SUB             R2, R2, R11
CMP             R2, R3
BGE             loc_5B600

loc_5B5CC
ADD             R3, SP, #0x24+var_4
ADD             R5, R3, R5
MOV             R3, #0
STRB            R3, [R5,#-0xC]

loc_5B5DC               ; base
MOV             R2, #0x10
MOV             R1, #0  ; endptr
MOV             R0, R11 ; nptr
BL              strtoul
UXTB            R8, R0
ADD             R3, SP, #0x24+var_18
CMP             R8, #0
MOVEQ           R8, #0x3F ; '?'
B               loc_5B4B4

loc_5B600
LDR             R2, [SP,#0x24+var_20]
CMP             R3, #3
MOV             R5, R3
ADD             R2, R2, #1
STR             R2, [SP,#0x24+var_20]
BNE             loc_5B584
B               loc_5B5DC
; End of function sub_5B2AC

off_5B61C DCD dword_7DBC4
off_5B620 DCD aUnknown_1 ; "(unknown)"
off_5B624 DCD asc_6B39D+1 ; ""



; int sub_5B628()
sub_5B628
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0x14]
LDR             R2, [R4,#0x20]
LDRB            R0, [R2,R3]
LDR             R2, [R4,#8]
CMP             R0, #0
ADDNE           R3, R3, #1
MOVEQ           R0, #0x20 ; ' ' ; c
STRNE           R3, [R4,#0x14]
ADDNE           R3, R2, #1
STRNE           R3, [R4,#8]
LDMIB           R4, {R3,R5}
SUB             R5, R5, R3
BL              j_putchar_unlocked
CMP             R5, #0
POPLT           {R4-R6,PC}
LDR             R0, =(asc_6AEEE+1) ; "\r"
BL              puts
LDR             R3, [R4,#0xC]
ADD             R3, R3, #1
STR             R3, [R4,#0xC]
MOV             R3, #0
STR             R3, [R4,#8]
POP             {R4-R6,PC}
; End of function sub_5B628

off_5B690 DCD dword_7DBC4
off_5B694 DCD asc_6AEEE+1 ; "\r"



; int sub_5B698()
sub_5B698
LDR             R3, =dword_7DBC4
LDR             R3, [R3]
LDRD            R2, R3, [R3,#0x14]
CMP             R2, R3
BXCS            LR
B               sub_5B628
; End of function sub_5B698

off_5B6B0 DCD dword_7DBC4



; int __fastcall sub_5B6B4(int)
sub_5B6B4
LDR             R3, =dword_7DBC4
PUSH            {R4-R8,LR}
MOV             R6, R0
LDR             R4, [R3]
LDR             R3, [R4,#0x14]
LDR             R5, [R4,#0x20]
LDRB            R1, [R5,R3]
MOV             R0, R1
BL              sub_5A944
CMP             R0, #0
BNE             loc_5B744
LDR             R0, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
LDRNE           R7, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
BEQ             loc_5B754

loc_5B6F8
LDR             R3, [R4,#0x14]
LDR             R2, [R4,#0x18]
CMP             R3, R2
BCS             loc_5B754
ADD             R3, R5, R3
MOV             R0, R7
LDRB            R1, [R3,#1]
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_5B754
BL              sub_5B698
B               loc_5B6F8

loc_5B72C
ADD             R3, R5, R3
LDRB            R0, [R3,#1]
BL              sub_5A944
CMP             R0, #0
BEQ             loc_5B754
BL              sub_5B698

loc_5B744
LDR             R3, [R4,#0x14]
LDR             R2, [R4,#0x18]
CMP             R3, R2
BCC             loc_5B72C

loc_5B754
LDRD            R2, R3, [R4,#0x14]
CMP             R2, R3
BCC             loc_5B794

loc_5B760
CMP             R6, #0
POPEQ           {R4-R8,PC}

loc_5B768
LDR             R3, [R4,#0x14]
LDR             R2, [R4,#0x18]
CMP             R3, R2
POPCS           {R4-R8,PC}
LDRB            R3, [R5,R3]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
POPHI           {R4-R8,PC}
BL              sub_5B698
B               loc_5B768

loc_5B794
BL              sub_5B698
B               loc_5B760
; End of function sub_5B6B4

off_5B79C DCD dword_7DBC4
off_5B7A0 DCD asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"



; int __fastcall sub_5B7A4(int result)
sub_5B7A4
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
MOV             R6, R0
LDR             R4, [R3]
LDR             R5, [R4,#0x20]

loc_5B7B8
LDR             R3, [R4,#0x14]
LDR             R2, [R4,#0x18]
CMP             R3, R2
BCS             loc_5B7DC
LDRB            R3, [R5,R3]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BHI             loc_5B810

loc_5B7DC
CMP             R6, #0
POPEQ           {R4-R6,PC}

loc_5B7E4
LDR             R3, [R4,#0x14]
LDR             R2, [R4,#0x18]
CMP             R3, R2
POPCS           {R4-R6,PC}
LDRB            R3, [R5,R3]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
POPHI           {R4-R6,PC}
BL              sub_5B698
B               loc_5B7E4

loc_5B810
BL              sub_5B698
B               loc_5B7B8
; End of function sub_5B7A4

off_5B818 DCD dword_7DBC4



; void sub_5B81C()
sub_5B81C
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R3, [R4,#0x18]
LDR             R2, [R4,#0x14]
LDR             R5, [R4,#0x20]
SUB             R3, R3, #1
CMP             R2, R3
POPCS           {R4-R6,PC}

loc_5B840
BL              sub_5B698
LDRD            R2, R3, [R4,#0x14]
SUB             R3, R3, #1
CMP             R2, R3
POPCS           {R4-R6,PC}
LDRB            R1, [R5,R2]
SUB             R3, R1, #9
CMP             R1, #0x20 ; ' '
CMPNE           R3, #4
BLS             loc_5B840
MOV             R0, R1
BL              sub_5A944
CMP             R0, #0
BNE             loc_5B8CC
LDR             R0, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
LDRNE           R6, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
POPEQ           {R4-R6,PC}

loc_5B890
LDR             R2, [R4,#0x18]
LDR             R3, [R4,#0x14]
SUB             R2, R2, #1
CMP             R3, R2
POPCS           {R4-R6,PC}
ADD             R3, R5, R3
MOV             R0, R6
LDRB            R1, [R3,#1]
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
POPEQ           {R4-R6,PC}
BL              sub_5B698
B               loc_5B890

loc_5B8C8
BL              sub_5B698

loc_5B8CC
LDR             R2, [R4,#0x18]
LDR             R3, [R4,#0x14]
SUB             R2, R2, #1
CMP             R3, R2
POPCS           {R4-R6,PC}
ADD             R3, R5, R3
LDRB            R0, [R3,#1]
BL              sub_5A944
CMP             R0, #0
POPEQ           {R4-R6,PC}
B               loc_5B8C8
; End of function sub_5B81C

off_5B8F8 DCD dword_7DBC4
off_5B8FC DCD asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"



; int sub_5B900()
sub_5B900
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R5, [R4,#0x20]

loc_5B910
BL              sub_5B698
LDR             R3, [R4,#0x14]
LDR             R2, [R4,#0x18]
CMP             R3, R2
BCS             loc_5B938
LDRB            R3, [R5,R3]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BLS             loc_5B910

loc_5B938
LDR             R2, [R4,#0x18]
LDR             R3, [R4,#0x14]
SUB             R2, R2, #1
CMP             R3, R2
POPCS           {R4-R6,PC}
ADD             R3, R5, R3
LDRB            R3, [R3,#1]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
POPLS           {R4-R6,PC}
BL              sub_5B698
B               loc_5B938
; End of function sub_5B900

off_5B96C DCD dword_7DBC4



; void sub_5B970()
sub_5B970
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R6, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
LDR             R4, [R3]
LDR             R5, [R4,#0x20]

loc_5B984
LDR             R3, [R4,#0x14]
LDRB            R1, [R5,R3]
CMP             R1, #0
POPEQ           {R4-R6,PC}
CMP             R1, #0x20 ; ' '
BEQ             loc_5B9E0
MOV             R0, R6
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_5B9E0
LDR             R6, =asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"

loc_5B9B4
BL              sub_5B698
LDR             R3, [R4,#0x14]
LDRB            R1, [R5,R3]
TST             R1, #0xDF
POPEQ           {R4-R6,PC}
MOV             R0, R6
BL              strchrnul
LDRB            R3, [R0]
CMP             R3, #0
POPNE           {R4-R6,PC}
B               loc_5B9B4

loc_5B9E0
BL              sub_5B698
B               loc_5B984
; End of function sub_5B970

off_5B9E8 DCD dword_7DBC4
off_5B9EC DCD asc_6B3FB ; "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"



; int sub_5B9F0()
sub_5B9F0
LDR             R3, =dword_7DBC4
PUSH            {R4,LR}
LDR             R4, [R3]

loc_5B9FC
LDRD            R2, R3, [R4,#0x14]
CMP             R2, R3
POPCS           {R4,PC}
BL              sub_5B628
B               loc_5B9FC
; End of function sub_5B9F0

off_5BA10 DCD dword_7DBC4



; int sub_5BA14()
sub_5BA14
PUSH            {R4,LR}
BL              sub_5B9F0
LDR             R3, =dword_7DBC4
LDR             R3, [R3]
LDR             R2, [R3,#0x14]
CMP             R2, #0
BEQ             loc_5BA3C
LDR             R3, [R3,#8]
CMP             R3, #0
POPEQ           {R4,PC}

loc_5BA3C               ; c
MOV             R0, #0xA
POP             {R4,LR}
B               j_putchar_unlocked
; End of function sub_5BA14

off_5BA48 DCD dword_7DBC4



; unsigned int __fastcall sub_5BA4C(int, unsigned int, int)
sub_5BA4C
PUSH            {R4-R6,LR}
MOV             R4, R1
SUBS            R1, R0, #0
MOV             R5, R2
BLE             loc_5BA68
LDR             R0, =(aUa+1) ; format
BL              printf

loc_5BA68               ; c
MOV             R0, #0xD
BL              j_putchar_unlocked
MOV             R0, R5
BL              sub_5B25C
BL              sub_5B9F0
LDR             R0, =(aHJ+3) ; format
BL              printf
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_5ACE4
; End of function sub_5BA4C

off_5BA90 DCD aUa+1     ; "\x1B[%uA"
off_5BA94 DCD aHJ+3     ; "\x1B[J"



; unsigned int __fastcall sub_5BA98(int, int, int)
sub_5BA98
PUSH            {R4-R6,LR}
MOV             R0, #0
BL              sub_17280
MOV             R1, R0
LDR             R3, =dword_7DBC4
LDR             R4, [R3]
LDR             R3, [R4,#0x14]
STR             R0, [R4,#4]
LDR             R0, [R4,#0x10]
LDR             R5, [R4,#0x18]
ADD             R0, R3, R0
SUB             R5, R5, R3
BLX             sub_15CA0
LDR             R3, [R4,#0xC]
MOV             R1, R5
MOV             R2, #0
POP             {R4-R6,LR}
CMP             R0, R3
MOVCC           R0, R3
B               sub_5BA4C
; End of function sub_5BA98

off_5BAE8 DCD dword_7DBC4



; int __fastcall sub_5BAEC(int result, int)
sub_5BAEC
LDR             R3, =dword_7DBC4
LDR             R3, [R3]
LDR             R2, [R3,#0x44]
CMP             R2, #0
BEQ             loc_5BB20
LDR             R3, =dword_7DB94
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R5, [R4]
BL              sub_5BA98
BL              sub_177D8
STR             R5, [R4]
POP             {R4-R6,PC}

loc_5BB20
LDR             R2, [R3,#0x40]
ADD             R2, R2, #1
STR             R2, [R3,#0x40]
BX              LR
; End of function sub_5BAEC

off_5BB30 DCD dword_7DBC4
off_5BB34 DCD dword_7DB94



; unsigned int __fastcall sub_5BB38(unsigned int result)
sub_5BB38
LDR             R3, =dword_7DBC4
PUSH            {R4-R6,LR}
LDR             R4, [R3]
LDR             R5, [R4,#0x14]
LDR             R3, [R4,#0x18]
CMP             R3, R5
POPEQ           {R4-R6,PC}
CMP             R0, #0
BEQ             loc_5BB94
LDR             R2, [R4,#0x48]
ADD             R3, R4, #0x50 ; 'P'
LDR             R1, [R4,#0x20]
CMP             R2, #0
MOVNE           R2, #0
STRNE           R3, [R4,#0x4C]
STRNE           R2, [R4,#0x48]
LDR             R2, [R4,#0x4C]
SUB             R3, R2, R3
CMP             R3, #0x7F
ADDLE           R3, R2, #1
STRLE           R3, [R4,#0x4C]
LDRBLE          R3, [R1,R5]
STRBLE          R3, [R2]

loc_5BB94
LDR             R0, [R4,#0x20]
ADD             R1, R5, #1
LDR             R2, [R4,#0x18]
ADD             R1, R0, R1 ; src
ADD             R0, R0, R5 ; dest
SUB             R2, R2, R5 ; n
BL              memmove
LDR             R3, [R4,#0x18]
SUB             R3, R3, #1
STR             R3, [R4,#0x18]
BL              sub_5B9F0
LDR             R0, =(aHJ+3) ; format
BL              printf
LDR             R0, [R4,#0x14]
SUB             R0, R0, R5
POP             {R4-R6,LR}
B               sub_5ACE4
; End of function sub_5BB38

off_5BBD8 DCD dword_7DBC4
off_5BBDC DCD aHJ+3     ; "\x1B[J"



; unsigned int sub_5BBE0()
sub_5BBE0
LDR             R3, =dword_7DBC4
LDR             R3, [R3]
LDR             R3, [R3,#0x14]
CMP             R3, #0
BXEQ            LR
PUSH            {R4,LR}
MOV             R0, #1
BL              sub_5ACE4
MOV             R0, #0
POP             {R4,LR}
B               sub_5BB38
; End of function sub_5BBE0

off_5BC0C DCD dword_7DBC4



; size_t __fastcall sub_5BC10(const char *)
sub_5BC10
LDR             R3, =dword_7DBC4
MOV             R1, R0
PUSH            {R4,LR}
LDR             R4, [R3]
LDR             R2, [R4,#0x1C]
LDR             R0, [R4,#0x20]
BL              sub_60B34
LDR             R0, [R4,#0x20] ; s
POP             {R4,LR}
B               strlen
; End of function sub_5BC10

off_5BC38 DCD dword_7DBC4



; _BYTE *__fastcall sub_5BC3C(const char *)
sub_5BC3C
PUSH            {R4-R10,LR}
MOV             R5, R0
LDR             R8, =asc_6BC3F ; " `\"#$%^&*()=+{}[]:;'|\\<>"
SUB             R5, R5, #1
MOV             R4, #0
MOV             R9, #0x5C ; '\'
BL              strlen
ADD             R0, R0, #1
MOV             R0, R0,LSL#1
BL              sub_174DC
MOV             R6, R0

loc_5BC68
LDRB            R7, [R5,#1]!
CMP             R7, #0
BNE             loc_5BC7C
MOV             R0, R6
POP             {R4-R10,PC}

loc_5BC7C               ; c
MOV             R1, R7
MOV             R0, R8  ; s
BL              strchr
ADD             R3, R4, #1
CMP             R0, #0
STRBNE          R9, [R6,R4]
MOVNE           R4, R3
STRB            R7, [R6,R4]
ADD             R4, R4, #1
B               loc_5BC68
; End of function sub_5BC3C

off_5BCA4 DCD asc_6BC3F ; " `\"#$%^&*()=+{}[]:;'|\\<>"



; size_t __fastcall sub_5BCA8(const char *, int)
sub_5BCA8

var_80= -0x80
var_7C= -0x7C
var_78= -0x78
var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C
var_4= -4

LDR             R3, =(asc_67ED0+4) ; "."
PUSH            {R4-R11,LR}
MOV             R10, R1
SUB             SP, SP, #0x84
MOV             R1, #0x2F ; '/' ; c
MOV             R7, R0
STR             R3, [SP,#0x84+var_70]
BL              strrchr
CMP             R0, #0
BNE             loc_5BE18
CMP             R10, #0
BEQ             loc_5BD48

loc_5BCD8
ADD             R5, SP, #0x84+var_70
MOV             R4, #0

loc_5BCE0
MOV             R9, #1

loc_5BCE4               ; s
MOV             R0, R7
MOV             R8, R5
BL              strlen
ADD             R3, R5, R9,LSL#2
STR             R0, [SP,#0x84+var_7C]
STR             R3, [SP,#0x84+var_80]

loc_5BCFC               ; name
LDR             R0, [R8],#4
BL              opendir
SUBS            R11, R0, #0
BNE             loc_5BF60

loc_5BD0C
LDR             R3, [SP,#0x84+var_80]
CMP             R8, R3
BNE             loc_5BCFC
ADD             R3, SP, #0x84+var_70
CMP             R5, R3
BEQ             loc_5BD34
LDR             R0, [R5] ; ptr
BL              free
MOV             R0, R5  ; ptr
BL              free

loc_5BD34               ; ptr
MOV             R0, R4
BL              free
LDR             R0, [SP,#0x84+var_7C]
ADD             SP, SP, #0x84
POP             {R4-R11,PC}

loc_5BD48
LDR             R3, =dword_7DBC4
LDR             R3, [R3]
LDR             R3, [R3]
LDR             R2, [R3]
TST             R2, #0x10
LDRNE           R4, [R3,#8]
BNE             loc_5BD70
LDR             R0, =(aCdpath+2) ; name
BL              getenv
MOV             R4, R0

loc_5BD70
CMP             R4, #0
BEQ             loc_5BCD8
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_5BCD8
CMP             R3, #0x3A ; ':'
BNE             loc_5BD98
LDRB            R3, [R4,#1]
CMP             R3, #0
BEQ             loc_5BCD8

loc_5BD98               ; s
MOV             R0, R4
MOV             R5, #1

loc_5BDA0               ; c
MOV             R1, #0x3A ; ':'
BL              strchr
SUBS            R3, R0, #0
BEQ             loc_5BDC4
ADD             R0, R3, #1
LDRB            R3, [R3,#1]
CMP             R3, #0
ADDNE           R5, R5, #1
BNE             loc_5BDA0

loc_5BDC4
MOV             R0, R5,LSL#2
MOV             R6, #1
MOV             R8, #0
BL              sub_1748C
MOV             R5, R0
MOV             R0, R4
BL              sub_174F8
STR             R0, [R5]

loc_5BDE4               ; c
MOV             R1, #0x3A ; ':'
MOV             R9, R6
BL              strchr
SUBS            R4, R0, #0
BEQ             loc_5BCE4
ADD             R0, R4, #1
STRB            R8, [R4]
LDRB            R4, [R4,#1]
CMP             R4, #0
BEQ             loc_5BCE4
STR             R0, [R5,R6,LSL#2]
ADD             R6, R6, #1
B               loc_5BDE4

loc_5BE18
ADD             R6, R0, #1
ADD             R5, SP, #0x84+var_4
SUB             R1, R6, R7
MOV             R0, R7
BL              sub_1751C
MOV             R7, R6
MOV             R4, R0
STR             R0, [R5,#-0x6C]!
B               loc_5BCE0

loc_5BE3C
LDRB            R3, [R7]
ADD             R9, R0, #0x13
CMP             R3, #0
BNE             loc_5BE78
LDRB            R3, [R0,#0x13]
CMP             R3, #0x2E ; '.'
BNE             loc_5BE78
LDRB            R3, [R0,#0x14]
CMP             R3, #0
BEQ             loc_5BF60
CMP             R3, #0x2E ; '.'
BNE             loc_5BE78
LDRB            R3, [R0,#0x15]
CMP             R3, #0
BEQ             loc_5BF60

loc_5BE78
MOV             R1, R7
MOV             R0, R9
BL              sub_1684C
CMP             R0, #0
BEQ             loc_5BF60
MOV             R1, R9
LDR             R0, [R8,#-4]
BL              sub_16998
ADD             R1, SP, #0x84+var_6C
MOV             R6, R0
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_5BEF0

loc_5BEAC               ; s
MOV             R0, R9
BL              strlen
ADD             R1, R0, #2
STR             R0, [SP,#0x84+var_78]
MOV             R0, R6
BL              sub_174B4
MOV             R1, R9  ; src
MOV             R6, R0
BL              strcpy
LDR             R3, [SP,#0x84+var_5C]
LDR             R2, [SP,#0x84+var_78]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BEQ             loc_5BF10
CMP             R10, #1
BEQ             loc_5BF04
B               loc_5BF24

loc_5BEF0
ADD             R1, SP, #0x84+var_6C
MOV             R0, R6
BLX             sub_62E14
CMP             R0, #0
BEQ             loc_5BEAC

loc_5BF04               ; ptr
MOV             R0, R6
BL              free
B               loc_5BF60

loc_5BF10
MOV             R3, R6
MOV             R1, #0x2F ; '/'
STRB            R1, [R3,R2]!
MOV             R2, #0
STRB            R2, [R3,#1]

loc_5BF24
SUB             R2, R6, #1

loc_5BF28
LDRB            R3, [R2,#1]!
CMP             R3, #0
BNE             loc_5BF7C
LDR             R3, =dword_7DBC4
MOVW            R1, #0x404
LDR             R9, [R3]
LDR             R2, [R9,#0x38]
LDR             R0, [R9,#0x34]
BL              sub_62544
LDR             R3, [R9,#0x38]
STR             R0, [R9,#0x34]
STR             R6, [R0,R3,LSL#2]
ADD             R3, R3, #1
STR             R3, [R9,#0x38]

loc_5BF60
MOV             R0, R11
BL              readdir64
CMP             R0, #0
BNE             loc_5BE3C
MOV             R0, R11 ; dirp
BL              closedir
B               loc_5BD0C

loc_5BF7C
SUB             R3, R3, #0x20 ; ' '
CMP             R3, #0x5E ; '^'
BLS             loc_5BF28
B               loc_5BF04
; End of function sub_5BCA8

off_5BF8C DCD asc_67ED0+4 ; "."
off_5BF90 DCD dword_7DBC4
off_5BF94 DCD aCdpath+2 ; "PATH"



; int __fastcall sub_5BF98(char *, int)
sub_5BF98
PUSH            {R4-R6,LR}
MOV             R6, R1
MOV             R5, R0
BL              sub_177D8
LDR             R3, =dword_7DBC4
MOV             R2, R6
MOV             R1, R5
MOV             R0, #0  ; fd
LDR             R4, [R3]
MOV             R3, #1
STR             R3, [R4,#0x44]
BL              sub_60068
MOV             R3, #0
STR             R3, [R4,#0x44]
POP             {R4-R6,PC}
; End of function sub_5BF98

off_5BFD4 DCD dword_7DBC4



; void __fastcall sub_5BFD8(_DWORD *)
sub_5BFD8

var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

LDR             R3, =dword_7DBC4
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
LDR             R4, [R3]
LDR             R3, [R4]
LDR             R3, [R3]
TST             R3, #2
BEQ             loc_5C398
LDR             R3, [R0]
MOV             R5, R0
CMP             R3, #0
BEQ             loc_5C12C
LDR             R3, [R4,#0x38]
CMP             R3, #0
BEQ             loc_5C398
LDR             R3, [R4,#0x14]
MOV             R5, #0
MOV             R6, R5
STR             R3, [SP,#0x14+var_10]
BL              sub_5BA14
LDR             R7, [R4,#0x38]

loc_5C02C
CMP             R7, R6
BGT             loc_5C098
ADD             R3, R5, #2
LDR             R0, [R4,#4]
MOV             R1, R3
STR             R3, [SP,#0x14+var_14]
BLX             sub_15CA0
CMP             R0, #1
MOV             R8, R0
MOVLE           R5, R7
MOVLE           R8, #1
BLE             loc_5C074
MOV             R1, R8
MOV             R0, R7
BLX             sub_161AC
CMP             R1, #0
MOV             R5, R0
ADDNE           R5, R0, #1

loc_5C074
MOV             R3, R5,LSL#2
MOV             R6, #0
STR             R3, [SP,#0x14+var_C]

loc_5C080
CMP             R5, R6
BLE             loc_5C10C
MOV             R11, R6,LSL#2
MOV             R10, R6
MOV             R9, #1
B               loc_5C0D8

loc_5C098
LDR             R3, [R4,#0x34]
LDR             R0, [R3,R6,LSL#2] ; s
ADD             R6, R6, #1
BL              strlen
CMP             R5, R0
MOVLT           R5, R0
B               loc_5C02C

loc_5C0B4
STR             R1, [SP,#0x14+var_8]
ADD             R9, R9, #1
BL              strlen
LDR             R2, [SP,#0x14+var_14]
LDR             R3, =(asc_6B39D+1) ; ""
LDR             R1, [SP,#0x14+var_8]
SUB             R2, R2, R0
LDR             R0, =aSS_4 ; "%s%-*s"
BL              printf

loc_5C0D8
LDR             R3, [R4,#0x34]
CMP             R9, R8
LDR             R1, [R3,R11]
MOV             R0, R1  ; s
BEQ             loc_5C100
ADD             R10, R10, R5
LDR             R3, [SP,#0x14+var_C]
CMP             R7, R10
ADD             R11, R11, R3
BGT             loc_5C0B4

loc_5C100
BL              puts
ADD             R6, R6, #1
B               loc_5C080

loc_5C10C
LDR             R1, [R4,#0x18]
MOV             R2, #1
LDR             R3, [SP,#0x14+var_10]
MOV             R0, #0
SUB             R1, R1, R3
ADD             SP, SP, #0x14
POP             {R4-R11,LR}
B               sub_5BA4C

loc_5C12C
MOV             R3, #1
STR             R3, [R0]
MOV             R0, #0x800
BL              sub_1748C
LDR             R2, [R4,#0x14]
MOV             R7, R0
LDR             R1, [R4,#0x20]
ADD             R2, R2, #1
BL              sub_60B34
MOV             R0, R7
BL              sub_5A9A4
MOV             R6, R0
BL              sub_5AF1C
LDR             R3, [R4,#0x34]
CMP             R3, #0
BNE             loc_5C17C
MOV             R1, R6
MOV             R0, R7
BL              sub_5BCA8
MOV             R8, R0

loc_5C17C               ; s
MOV             R0, R7
LDR             R10, =asc_6BC3F ; " `\"#$%^&*()=+{}[]:;'|\\<>"
BL              strlen
ADD             R9, R7, R0
SUB             R6, R9, R8

loc_5C190
CMP             R6, R9
BCC             loc_5C224
LDRD            R0, R1, [R4,#0x34]
CMP             R0, #0
BEQ             loc_5C1DC
MOV             R11, #0
MOV             R6, R11
BL              sub_62614

loc_5C1B0
LDR             R1, [R4,#0x38]
MOV             R0, R6,LSL#2
LDR             R9, [R4,#0x34]
MOV             R2, R11,LSL#2
ADD             R3, R11, #1
SUB             R1, R1, #1
CMP             R1, R6
LDR             R10, [R9,R6,LSL#2]
BHI             loc_5C23C
STR             R10, [R9,R2]
STR             R3, [R4,#0x38]

loc_5C1DC
LDR             R3, [R4,#0x38]
CMP             R3, #1
BEQ             loc_5C358
BL              sub_5ACDC
LDR             R5, [R4,#0x34]
CMP             R5, #0
BEQ             loc_5C340
LDR             R0, [R5]
BL              sub_174F8
MOV             R5, R0
MOV             R3, R0

loc_5C208
LDRB            R1, [R3]
CMP             R1, #0
BEQ             loc_5C29C
LDR             R12, [R4,#0x38]
MOV             R2, #1
SUB             R0, R3, R5
B               loc_5C28C

loc_5C224               ; c
LDRB            R1, [R6],#1
MOV             R0, R10 ; s
BL              strchr
CMP             R0, #0
ADDNE           R8, R8, #1
B               loc_5C190

loc_5C23C
ADD             R0, R9, R0
STRD            R2, R3, [SP,#0x14+var_14]
LDR             R1, [R0,#4] ; s2
MOV             R0, R10 ; s1
BL              strcmp
LDRD            R2, R3, [SP,#0x14+var_14]
CMP             R0, #0
ADD             R6, R6, #1
STRNE           R10, [R9,R2]
MOVNE           R11, R3
BNE             loc_5C1B0
MOV             R0, R10 ; ptr
BL              free
B               loc_5C1B0

loc_5C274
LDR             LR, [R4,#0x34]
LDR             LR, [LR,R2,LSL#2]
LDRB            LR, [LR,R0]
CMP             LR, R1
BNE             loc_5C29C
ADD             R2, R2, #1

loc_5C28C
CMP             R12, R2
BHI             loc_5C274
ADD             R3, R3, #1
B               loc_5C208

loc_5C29C
CMP             R3, R5
BEQ             loc_5C340
MOV             R2, #0
MOV             R0, R5
STRB            R2, [R3]
BL              sub_5BC3C
MOV             R9, R0
MOV             R0, R5  ; ptr
BL              free
MOV             R0, R9  ; s
MOV             R5, R9
BL              strlen
MOV             R6, R0

loc_5C2D0
LDR             R3, [R4,#0x18]
LDR             R2, [R4,#0x1C]
SUB             R3, R3, R8
ADD             R3, R3, R6
CMP             R3, R2
BGE             loc_5C340
LDR             R3, [R4,#0x14]
MOV             R0, R7  ; dest
LDR             R1, [R4,#0x20]
ADD             R1, R1, R3 ; src
BL              strcpy
LDR             R12, [R4,#0x20]
ADD             R2, R5, R8
LDR             R0, [R4,#0x14]
MOV             R3, R7
LDR             R1, =(aSSS_0+6) ; format
ADD             R0, R12, R0 ; s
BL              sprintf
LDR             R0, [R4,#0x20] ; s
BL              strlen
LDR             R3, [R4,#0x14]
MOV             R2, #0
STR             R0, [R4,#0x18]
SUB             R8, R3, R8
ADD             R6, R8, R6
SUB             R1, R0, R6
LDR             R0, [R4,#0xC]
BL              sub_5BA4C

loc_5C340               ; ptr
MOV             R0, R5
BL              free
MOV             R0, R7  ; ptr
ADD             SP, SP, #0x14
POP             {R4-R11,LR}
B               free

loc_5C358
LDR             R3, [R4,#0x34]
MOV             R9, #0
STR             R9, [R5]
LDR             R0, [R3]
BL              sub_5BC3C
MOV             R5, R0
BL              strlen
ADD             R3, R5, R0
MOV             R6, R0
LDRB            R3, [R3,#-1]
CMP             R3, #0x2F ; '/'
MOVNE           R3, #0x20 ; ' '
ADDNE           R6, R0, #1
STRBNE          R3, [R5,R0]
STRBNE          R9, [R5,R6]
B               loc_5C2D0

loc_5C398
ADD             SP, SP, #0x14
POP             {R4-R11,PC}
; End of function sub_5BFD8

off_5C3A0 DCD dword_7DBC4
off_5C3A4 DCD asc_6B39D+1 ; ""
off_5C3A8 DCD aSS_4     ; "%s%-*s"
off_5C3AC DCD asc_6BC3F ; " `\"#$%^&*()=+{}[]:;'|\\<>"
off_5C3B0 DCD aSSS_0+6  ; "%s%s"



; _DWORD *__fastcall sub_5C3B4(int)
sub_5C3B4
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, #0xFC0
BL              sub_174DC
MOV             R2, #0xFFFFFFFF
STR             R4, [R0]
STR             R2, [R0,#4]
MOVW            R2, #0x3E7
STR             R2, [R0,#0x14]
POP             {R4,PC}
; End of function sub_5C3B4




; int __fastcall sub_5C3DC(int result)
sub_5C3DC
PUSH            {R4-R8,LR}
SUBS            R5, R0, #0
POPEQ           {R4-R8,PC}
LDR             R7, =a4dS ; "%4d %s\n"
ADD             R6, R5, #0x20 ; ' '
MOV             R4, #0

loc_5C3F4
LDR             R3, [R5,#0xC]
CMP             R3, R4
POPLE           {R4-R8,PC}
MOV             R1, R4
LDR             R2, [R6],#4
MOV             R0, R7  ; format
ADD             R4, R4, #1
BL              printf
B               loc_5C3F4
; End of function sub_5C3DC

off_5C418 DCD a4dS      ; "%4d %s\n"



; size_t __fastcall sub_5C41C(int, unsigned __int8 *, char *, int)
sub_5C41C

var_154= -0x154
var_14C= -0x14C
var_148= -0x148
var_144= -0x144
src= -0x140
var_13C= -0x13C
var_138= -0x138
var_134= -0x134
var_130= -0x130
var_12C= -0x12C
var_120= -0x120
var_11C= -0x11C
var_10C= -0x10C
s= -0xFC
termios_p= -0xC0
var_4= -4

PUSH            {R4-R11,LR}
MOV             R7, R0
SUB             SP, SP, #0x154
MOV             R9, #0
MOV             R0, #0x15C
MOV             R8, R3
MOV             R5, R1
MOV             R6, R2
STR             R9, [SP,#0x154+var_120]
BL              sub_174DC
LDR             R3, =dword_7DBC4
MOV             R4, R0
STR             R0, [R3]
MOV             R3, #0x50 ; 'P'
ADD             R2, SP, #0x154+s ; s
STR             R3, [R0,#4]
ADD             R1, SP, #0x154+termios_p ; int
LDR             R3, =unk_6BC3E
STR             R3, [R0,#0x30]
ADD             R3, R0, #0x50 ; 'P'
STR             R3, [R0,#0x4C]
MOV             R0, R9  ; int
STR             R3, [SP,#0x154+src]
MOV             R3, #1
BL              sub_172AC
SUBS            R3, R0, #0
STR             R3, [SP,#0x154+var_148]
BNE             loc_5C49C
LDR             R3, [SP,#0x154+s.c_lflag]
AND             R3, R3, #0xA
CMP             R3, #2
BNE             loc_5C4E4

loc_5C49C
MOV             R0, R5
BL              sub_5B2AC
BL              sub_177D8
LDR             R3, =stdin
MOV             R1, R8
MOV             R0, R6
LDR             R2, [R3]
BL              fgets_unlocked
CMP             R0, #0
MOVEQ           R4, #0xFFFFFFFF
BEQ             loc_5C4D4
MOV             R0, R6  ; s
BL              strlen
MOV             R4, R0

loc_5C4D4
BL              sub_5AF68
MOV             R0, R4
ADD             SP, SP, #0x154
POP             {R4-R11,PC}

loc_5C4E4
CMP             R8, #0x400
MOVLT           R3, R8
MOVGE           R3, #0x400
STR             R3, [SP,#0x154+var_13C]
CMP             R7, #0
STR             R3, [R4,#0x1C]
LDR             R3, =unk_632C8
STR             R3, [R4]
MOVEQ           R3, #0xFFFFFFFF
LDRNE           R3, [R7,#4]
STRNE           R7, [R4]
LDR             R0, [R4]
STR             R3, [SP,#0x154+var_14C]
LDR             R3, [R0,#0x1C]
CMP             R3, #0
BEQ             loc_5C534
LDR             R3, [R0,#0xC]
CMP             R3, #0
BNE             loc_5C534
BL              sub_5AFAC

loc_5C534
LDR             R3, [R4]
ADD             R0, SP, #0x154+termios_p ; termios_p
LDR             R2, [R3]
TST             R2, #1
LDRNE           R2, [R3,#0xC]
STRNE           R2, [R3,#0x10]
MOV             R3, #0
STR             R3, [R4,#0xC]
STR             R3, [R4,#0x18]
STR             R6, [R4,#0x20]
STRB            R3, [R6]
BL              sub_1729C
BL              geteuid
BL              getpwuid
SUBS            R7, R0, #0
BEQ             loc_5C58C
LDR             R0, [R7]
BL              sub_174F8
STR             R0, [R4,#0x2C]
LDR             R0, [R7,#0x14]
BL              sub_174F8
STR             R0, [R4,#0x30]

loc_5C58C
MOV             R0, #0
BL              sub_17280
STR             R0, [R4,#4]
MOV             R0, R5
BL              sub_5B2AC
LDR             R3, =sub_5BAEC
MOV             R5, #0
MOV             R9, R5
MOV             R0, #0x1C ; sig
STR             R3, [R4,#0xD0]
MOV             R3, #0x10000000
STR             R3, [R4,#0x154]
ADD             R3, R4, #0xD0
MOV             R2, R3  ; oact
MOV             R1, R3  ; act
STR             R3, [SP,#0x154+var_138]
BL              sigaction
STRB            R5, [SP,#0x154+var_11C]

loc_5C5D4
LDR             R3, [R4,#0x40]
LDR             R2, [R4,#0x3C]
CMP             R2, R3
BEQ             loc_5C5EC
STR             R3, [R4,#0x3C]
BL              sub_5BA98

loc_5C5EC
LDR             R1, [SP,#0x154+var_14C]
ADD             R0, SP, #0x154+var_11C
BL              sub_5BF98
MOV             R7, R0

loc_5C5FC
CMP             R5, #0
MOV             R3, #1
ORRNE           R8, R7, #0x40000000
MOVEQ           R8, R7
CMP             R8, #0x4000000A
STR             R3, [R4,#0x48]
BEQ             loc_5C710
BGT             loc_5CA7C
CMP             R8, #2
BEQ             loc_5CA74
BGT             loc_5C6CC
CMN             R8, #7
BEQ             loc_5C6FC
BGT             loc_5C694
CMN             R8, #0x2C ; ','
BEQ             loc_5CD98
BGT             loc_5C67C
CMN             R8, #0x44 ; 'D'
BEQ             loc_5D144
CMN             R8, #0x2D ; '-'
BEQ             loc_5CD6C
CMN             R8, #0x45 ; 'E'

loc_5C654
BEQ             loc_5D13C

loc_5C658
LDRB            R3, [SP,#0x154+s.c_cc]
CMP             R3, #0
BEQ             loc_5D14C
CMP             R3, R7
BNE             loc_5D14C
MOV             R3, #0
MOV             R7, #0xFFFFFFFF
STR             R3, [R4,#0x18]
B               loc_5C718

loc_5C67C
CMN             R8, #0x24 ; '$'
BEQ             loc_5D144
CMN             R8, #9
BEQ             loc_5D184
CMN             R8, #0x25 ; '%'
B               loc_5C654

loc_5C694
CMN             R8, #3
BEQ             loc_5C9A8
BGT             loc_5C6B4
CMN             R8, #5
BEQ             loc_5CA74
BGT             loc_5CC8C

loc_5C6AC
LDR             R0, [R4,#0x14]
B               loc_5CBE8

loc_5C6B4
CMN             R8, #1
BEQ             loc_5D178
BLT             loc_5D12C
CMP             R8, #1

loc_5C6C4
BEQ             loc_5C6AC
B               loc_5C658

loc_5C6CC
CMP             R8, #0xD
BEQ             loc_5C710
BGT             loc_5C984
CMP             R8, #9
BEQ             loc_5CD30
BGT             loc_5C704
CMP             R8, #6
BEQ             loc_5CC8C
CMP             R8, #8
BEQ             loc_5CD1C
CMP             R8, #5
BNE             loc_5C658

loc_5C6FC
BL              sub_5B9F0
B               loc_5CD20

loc_5C704
CMP             R8, #0xB
BEQ             loc_5CD3C
BGT             loc_5CABC

loc_5C710
MOV             R7, #1
BL              sub_5BA14

loc_5C718
LDR             R3, [R4,#0x18]
CMP             R3, #0
BLE             loc_5C93C
LDR             R8, [R4]
LDR             R3, [R8]
TST             R3, #1
BEQ             loc_5C93C
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_5C93C
LDR             R5, [R8,#0xC]
CMP             R5, #0
BEQ             loc_5C764
ADD             R3, R5, #7
MOV             R1, R6  ; s2
LDR             R0, [R8,R3,LSL#2] ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_5C93C

loc_5C764
LDR             R3, [R8,#0x14]
ADD             R3, R3, #8
LDR             R0, [R8,R3,LSL#2] ; ptr
MOV             R8, #0
BL              free
LDR             R3, [R4]
LDR             R2, [R3,#0x14]
CMP             R5, R2
ADD             R1, R2, #8
STR             R8, [R3,R1,LSL#2]
BLT             loc_5C7C0
LDR             R0, [R3,#0x20] ; ptr
BL              free
LDR             R2, [R4]
MOV             R3, R8
LDR             R5, [R2,#0x14]
ADD             R2, R2, #0x20 ; ' '
SUB             R1, R5, #1

loc_5C7AC
CMP             R1, R3
BGT             loc_5D210
CMP             R5, #1
MOVLT           R5, #1
SUB             R5, R5, #1

loc_5C7C0
MOV             R0, R6
LDR             R9, [R4]
BL              sub_174F8
LDR             R3, [R4]
ADD             R8, R5, #1
ADD             R5, R5, #8
STR             R0, [R9,R5,LSL#2]
LDR             R0, [R3,#0x1C]
STR             R8, [R3,#0x10]
STR             R8, [R3,#0xC]
CMP             R0, #0
BEQ             loc_5C93C
MOV             R2, #0x180
MOVW            R1, #0x441
BL              open64
SUBS            R9, R0, #0
BLT             loc_5C93C
MOV             R3, #2
MOV             R2, #0
STR             R3, [SP,#0x154+var_154]
MOV             R3, #0
BL              sub_1771C
MOV             R0, R6  ; s
BL              strlen
MOV             R3, #0xA
ADD             R8, R0, #1
STRB            R3, [R6,R0]
MOV             R5, R0
MOV             R2, R8  ; n
MOV             R1, R6  ; buf
MOV             R0, R9  ; fd
BL              sub_17FB8
MOV             R3, #0
MOV             R10, R0
STRB            R3, [R6,R5]
MOV             R0, R9  ; fd
BL              close
CMP             R8, R10
BNE             loc_5C93C
LDR             R3, [R4]
LDR             R2, [R3,#0x18]
LDR             R1, [R3,#0x14]
ADD             R2, R2, #1
STR             R2, [R3,#0x18]
CMP             R2, R1,LSL#2
BLS             loc_5C93C
LDR             R0, [R3]
BL              sub_5C3B4
LDR             R3, [R4]
MOV             R5, R0
LDR             R2, [R3,#0x1C]
LDR             R3, [R3,#0x14]
STR             R2, [R0,#0x1C]
STR             R3, [R0,#0x14]
BL              sub_5AFAC
LDR             R3, [R4]
LDR             R8, [R3,#0x1C]
BL              getpid
MOV             R2, R0
LDR             R0, =aSUNew ; "%s.%u.new"
MOV             R1, R8
BL              sub_177E4
MOV             R2, #0x180
MOVW            R1, #0x241
MOV             R8, R0
BL              open64
CMP             R0, #0
BLT             loc_5C918
LDR             R11, =(aSS_2+3) ; "%s\n"
ADD             R10, R5, #0x20 ; ' '
BL              sub_61CCC
MOV             R9, R0

loc_5C8E0
LDR             R3, [R5,#0xC]
LDR             R2, [SP,#0x154+var_148]
CMP             R2, R3
BLT             loc_5D220
MOV             R0, R9  ; stream
BL              fclose
LDR             R3, [R4]
MOV             R0, R8  ; old
LDR             R1, [R3,#0x1C] ; new
BL              rename
CMP             R0, #0
LDREQ           R3, [R4]
LDREQ           R2, [R5,#0xC]
STREQ           R2, [R3,#0x18]

loc_5C918               ; ptr
MOV             R0, R8
BL              free
LDR             R8, [R5,#0xC]
ADD             R9, R5, R8,LSL#2
ADD             R9, R9, #0x20 ; ' '

loc_5C92C
CMP             R8, #0
BGT             loc_5D240
MOV             R0, R5  ; ptr
BL              free

loc_5C93C
CMP             R7, #1
BNE             loc_5C960
LDR             R2, [R4,#0x18]
MOV             R1, #0xA
ADD             R3, R2, #1
STR             R3, [R4,#0x18]
STRB            R1, [R6,R2]
MOV             R2, #0
STRB            R2, [R6,R3]

loc_5C960
BL              sub_5AF1C
ADD             R0, SP, #0x154+s ; termios_p
BL              sub_1729C
LDR             R1, [SP,#0x154+var_138]
MOV             R0, #0x1C
BL              sub_18150
BL              sub_177D8
LDR             R4, [R4,#0x18]
B               loc_5C4D4

loc_5C984
CMP             R8, #0x15
BEQ             loc_5CAF8
BGT             loc_5C9F8
CMP             R8, #0x10
BEQ             loc_5CD5C
CMP             R8, #0x12
BEQ             loc_5CDC0
CMP             R8, #0xE
BNE             loc_5C658

loc_5C9A8
BL              sub_5AEC8

loc_5C9AC
CMP             R0, #0
BEQ             loc_5CD20

loc_5C9B4
LDR             R2, [R4]
LDR             R3, [R2,#0x10]
ADD             R3, R3, #8
LDR             R0, [R2,R3,LSL#2]
LDR             R3, =(asc_6B39D+1) ; ""
CMP             R0, #0
MOVEQ           R0, R3
BL              sub_5BC10
LDR             R3, [R4]
MOV             R2, #0
STR             R0, [R4,#0x18]
LDR             R1, [R3]
MOVW            R3, #0x270F
ANDS            R1, R1, #8
MOVNE           R1, R3

loc_5C9F0
LDR             R0, [R4,#0xC]
B               loc_5CAD8

loc_5C9F8
CMP             R8, #0x1B
BEQ             loc_5D10C
BGT             loc_5CA64
CMP             R8, #0x17
BNE             loc_5C658

loc_5CA0C
LDR             R2, [R4,#0x14]
CMP             R2, #0
BEQ             loc_5CD20
LDR             R3, [R4,#0x20]
ADD             R3, R3, R2
LDRB            R3, [R3,#-1]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BLS             loc_5CD64

loc_5CA34
LDR             R2, [R4,#0x14]
CMP             R2, #0
BEQ             loc_5CD20
LDR             R3, [R4,#0x20]
ADD             R3, R3, R2
LDRB            R3, [R3,#-1]
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
BLS             loc_5CD20
BL              sub_5BBE0
B               loc_5CA34

loc_5CA64
CMP             R8, #0x7F
BEQ             loc_5CD1C
CMP             R8, #0x40000008

loc_5CA70
BNE             loc_5C658

loc_5CA74
MOV             R0, #1
B               loc_5CBE8

loc_5CA7C
LDR             R3, =0x40000057
CMP             R8, R3
BEQ             loc_5CF80
BGT             loc_5CBF0
CMP             R8, #0x40000024
BEQ             loc_5C6FC
BGT             loc_5CB2C
CMP             R8, #0x40000010
BEQ             loc_5CD5C
BGT             loc_5CAE0
CMP             R8, #0x4000000D
BEQ             loc_5C710
CMP             R8, #0x4000000E
BEQ             loc_5C9A8
CMP             R8, #0x4000000C
BNE             loc_5C658

loc_5CABC
LDR             R0, =aHJ ; "\x1B[H\x1B[J"
BL              printf
LDR             R1, [R4,#0x18]
MOV             R2, #1
LDR             R3, [R4,#0x14]
MOV             R0, #0
SUB             R1, R1, R3

loc_5CAD8
BL              sub_5BA4C
B               loc_5CD20

loc_5CAE0
CMP             R8, #0x40000017
BEQ             loc_5CA0C
CMP             R8, #0x40000020
BEQ             loc_5CC8C
CMP             R8, #0x40000015
BNE             loc_5C658

loc_5CAF8
LDR             R1, [R4,#0x14]
CMP             R1, #0
BEQ             loc_5CD20
LDR             R2, [R4,#0x18]
LDR             R0, [R4,#0x20] ; dest
SUB             R2, R2, R1
STR             R2, [R4,#0x18]
ADD             R1, R0, R1 ; src
ADD             R2, R2, #1 ; n
BL              memmove
MOV             R2, #0
LDR             R1, [R4,#0x18]
B               loc_5C9F0

loc_5CB2C
LDR             R3, =0x40000043
CMP             R8, R3
BEQ             loc_5CD00
BGT             loc_5CB54
SUB             R3, R3, #2
CMP             R8, R3
BEQ             loc_5CF78
BGT             loc_5CFA8
CMP             R8, #0x40000030
B               loc_5C6C4

loc_5CB54
LDR             R3, =0x40000045
CMP             R8, R3
BEQ             loc_5CF98
BLT             loc_5CD04
ADD             R3, R3, #4
CMP             R8, R3
BEQ             loc_5CF60
ADD             R3, R3, #7
CMP             R8, R3
BNE             loc_5C658

loc_5CB7C
LDR             R8, [R4,#0x4C]
LDR             R3, [SP,#0x154+src]
SUBS            R8, R8, R3
BEQ             loc_5CD20
LDR             R10, [R4,#0x14]
LDR             R2, [R4,#0x18]
LDR             R3, [R4,#0x20]
ADD             R0, R10, R8
SUB             R2, R2, R10
ADD             R1, R3, R10 ; src
ADD             R2, R2, #1 ; n
ADD             R0, R3, R0 ; dest
BL              memmove
LDR             R3, [R4,#0x14]
MOV             R2, R8  ; n
LDR             R0, [R4,#0x20]
LDR             R1, [SP,#0x154+src] ; src
ADD             R0, R0, R3 ; dest
BL              memcpy
LDR             R3, [R4,#0x18]
ADD             R3, R3, R8
STR             R3, [R4,#0x18]
BL              sub_5B9F0
LDR             R0, [R4,#0x14]
ADD             R0, R0, #1
SUB             R0, R0, R10
SUB             R0, R0, R8

loc_5CBE8
BL              sub_5ACE4
B               loc_5CD20

loc_5CBF0
LDR             R3, =0x40000069
CMP             R8, R3
BEQ             loc_5CF68
BGT             loc_5CC60
SUB             R3, R3, #6
CMP             R8, R3
BEQ             loc_5CFB8
BGT             loc_5CC44
SUB             R3, R3, #2
CMP             R8, R3
BEQ             loc_5CF70
BGT             loc_5CFB0
SUB             R3, R3, #9
CMP             R8, R3
BNE             loc_5C658
LDR             R3, [R4,#0x14]
CMP             R3, #0
BEQ             loc_5CD20
MOV             R0, #1
BL              sub_5ACE4
B               loc_5CCF4

loc_5CC44
LDR             R3, =0x40000065
CMP             R8, R3
BEQ             loc_5CFA0
BLT             loc_5CFBC
ADD             R3, R3, #3

loc_5CC58
CMP             R8, R3
B               loc_5CA70

loc_5CC60
LDR             R3, =0x40000070
CMP             R8, R3
BEQ             loc_5D0E8
BGT             loc_5CC94
SUB             R3, R3, #5
CMP             R8, R3
BEQ             loc_5CD5C
BLT             loc_5C9A8
ADD             R3, R3, #1
CMP             R8, R3
BNE             loc_5C658

loc_5CC8C
BL              sub_5B698
B               loc_5CD20

loc_5CC94
LDR             R3, =0x40000077
CMP             R8, R3
BEQ             loc_5CF8C
BGT             loc_5CCE4
SUB             R3, R3, #5
CMP             R8, R3
BNE             loc_5C658
LDR             R1, [SP,#0x154+var_14C]
ADD             R0, SP, #0x154+var_11C
BL              sub_5BF98
LDR             R2, =dword_7DB94
LDR             R2, [R2]
LDR             R2, [R2]
CMP             R2, #0
BNE             loc_5D178
SUB             R2, R0, #0x20 ; ' '
CMP             R2, #0xDF
BLS             loc_5D0F0

loc_5CCDC
BL              sub_5ACDC
B               loc_5CD20

loc_5CCE4
LDR             R3, =0x40000078
CMP             R8, R3
ADDNE           R3, R3, #7
BNE             loc_5CC58

loc_5CCF4
MOV             R0, #1

loc_5CCF8
BL              sub_5BB38
B               loc_5CD20

loc_5CD00
MOV             R5, #0

loc_5CD04
LDRD            R2, R3, [R4,#0x14]
CMP             R2, R3
BCS             loc_5CD20
MOV             R0, #1
BL              sub_5BB38
B               loc_5CD04

loc_5CD1C
BL              sub_5BBE0

loc_5CD20
CMP             R7, #9
MOVNE           R3, #0
STRNE           R3, [SP,#0x154+var_120]
B               loc_5C5D4

loc_5CD30
ADD             R0, SP, #0x154+var_120
BL              sub_5BFD8
B               loc_5CD20

loc_5CD3C
LDR             R3, [R4,#0x14]
LDR             R2, [R4,#0x20]
LDR             R0, =(aHJ+3) ; format
STRB            R9, [R2,R3]
LDR             R3, [R4,#0x14]
STR             R3, [R4,#0x18]
BL              printf
B               loc_5CD20

loc_5CD5C
BL              sub_5AE74
B               loc_5C9AC

loc_5CD64
BL              sub_5BBE0
B               loc_5CA0C

loc_5CD6C
LDR             R10, [R4,#0x14]
BL              sub_5B970
LDR             R8, [R4,#0x14]
SUB             R8, R8, R10
MOV             R0, R8
BL              sub_5ACE4

loc_5CD84
SUBS            R8, R8, #1
BMI             loc_5CD20
MOV             R0, #1
BL              sub_5BB38
B               loc_5CD84

loc_5CD98
LDR             R8, [R4,#0x14]
BL              sub_5B1C8

loc_5CDA0
LDR             R3, [R4,#0x14]
SUB             R10, R8, #1
CMP             R8, R3
BLS             loc_5CD20
MOV             R0, #1
MOV             R8, R10
BL              sub_5BB38
B               loc_5CDA0

loc_5CDC0
ADD             R11, SP, #0x154+var_4
STRB            R9, [SP,#0x154+var_10C]
STRB            R9, [R11,#-0x80]!
LDR             R3, [R4,#0x28]
STR             R3, [SP,#0x154+var_134]
LDR             R3, [R4,#0x10]
STR             R3, [SP,#0x154+var_130]
MOV             R3, #0
STR             R3, [SP,#0x154+var_144]

loc_5CDE4
MOV             R1, R11
LDR             R0, =aReverseISearch ; "(reverse-i-search)'%s': "
BL              sub_177E4
STR             R0, [R4,#0x28]
BL              strlen
LDR             R1, [R4,#0x18]
MOV             R2, #0
LDR             R3, [R4,#0x14]
STR             R0, [R4,#0x10]
LDR             R0, [R4,#0xC]
SUB             R1, R1, R3
BL              sub_5BA4C

loc_5CE14               ; s
MOV             R0, R11
BL              strlen
LDR             R1, [SP,#0x154+var_14C]
MOV             R8, R0
ADD             R0, SP, #0x154+var_10C
BL              sub_5BF98
CMP             R0, #0x12
MOV             R7, R0
BEQ             loc_5CE5C
CMP             R0, #0x7F
BEQ             loc_5CE48
CMP             R0, #8
BNE             loc_5CE90

loc_5CE48
CMP             R8, #0
ADD             R3, SP, #0x154+var_4
SUBNE           R8, R8, #1
ADD             R3, R3, R8
STRB            R9, [R3,#-0x80]

loc_5CE5C
LDR             R3, [R4]
CMP             R7, #0x12
LDR             R10, [R3,#0x10]
SUBEQ           R10, R10, #1
ADD             R2, R3, R10,LSL#2
ADD             R2, R2, #0x24 ; '$'

loc_5CE74
CMP             R10, #0
BGE             loc_5CEB4
ADD             R3, SP, #0x154+var_4
ADD             R8, R3, R8
STRB            R9, [R8,#-0x80]
BL              sub_5ACDC
B               loc_5CE14

loc_5CE90
SUB             R3, R0, #0x20 ; ' '
CMP             R3, #0xDF
BHI             loc_5CF14
CMP             R8, #0x7E ; '~'
ADDLS           R3, SP, #0x154+var_4
ADDLS           R3, R3, R8
STRBLS          R0, [R3,#-0x80]
STRBLS          R9, [R3,#-0x7F]
B               loc_5CE5C

loc_5CEB4
LDR             R7, [R2,#-4]!
CMP             R7, #0
BEQ             loc_5CF0C
MOV             R1, R11 ; needle
MOV             R0, R7  ; haystack
STRD            R2, R3, [SP,#0x154+var_12C]
BL              strstr
SUBS            R1, R0, #0
LDRD            R2, R3, [SP,#0x154+var_12C]
BEQ             loc_5CF0C
STR             R10, [R3,#0x10]
MOV             R0, R7
STR             R1, [SP,#0x154+var_144]
BL              sub_5BC10
LDR             R1, [SP,#0x154+var_144]
STR             R0, [R4,#0x18]
LDR             R0, [R4,#0x28] ; ptr
SUB             R1, R1, R7
STR             R1, [R4,#0x14]
BL              free
STR             R7, [SP,#0x154+var_144]
B               loc_5CDE4

loc_5CF0C
SUB             R10, R10, #1
B               loc_5CE74

loc_5CF14
LDR             R3, [SP,#0x154+var_144]
CMP             R3, #0
BEQ             loc_5CF2C
MOV             R0, R3
BL              sub_5BC10
STR             R0, [R4,#0x18]

loc_5CF2C               ; ptr
LDR             R0, [R4,#0x28]
BL              free
LDR             R3, [SP,#0x154+var_134]
MOV             R2, #0
LDR             R1, [R4,#0x18]
LDR             R0, [R4,#0xC]
STR             R3, [R4,#0x28]
LDR             R3, [SP,#0x154+var_130]
STR             R3, [R4,#0x10]
LDR             R3, [R4,#0x14]
SUB             R1, R1, R3
BL              sub_5BA4C
B               loc_5C5FC

loc_5CF60
LDR             R0, [R4,#0x14]
BL              sub_5ACE4

loc_5CF68
MOV             R5, #0
B               loc_5CD20

loc_5CF70
BL              sub_5B698
B               loc_5CF68

loc_5CF78
BL              sub_5B9F0
B               loc_5CF68

loc_5CF80
MOV             R0, #1
BL              sub_5B7A4
B               loc_5CD20

loc_5CF8C
MOV             R0, #1
BL              sub_5B6B4
B               loc_5CD20

loc_5CF98
BL              sub_5B900
B               loc_5CD20

loc_5CFA0
BL              sub_5B81C
B               loc_5CD20

loc_5CFA8
BL              sub_5ADB8
B               loc_5CD20

loc_5CFB0
BL              sub_5B0F4
B               loc_5CD20

loc_5CFB8
MOV             R5, #0

loc_5CFBC
LDR             R1, [SP,#0x154+var_14C]
ADD             R0, SP, #0x154+var_11C
BL              sub_5BF98
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_5D178
CMP             R7, R0
BNE             loc_5CFF0
LDR             R0, [R4,#0x14]
BL              sub_5ACE4
B               loc_5CD04

loc_5CFF0
CMP             R0, #0x45 ; 'E'
LDR             R8, [R4,#0x14]
BNE             loc_5D038

loc_5CFFC
CMP             R0, #0x57 ; 'W'
BGT             loc_5D08C
CMP             R0, #0x45 ; 'E'
BEQ             loc_5D0B4

loc_5D00C
LDR             R10, [R4,#0x14]
SUB             R0, R10, R8
BL              sub_5ACE4

loc_5D018
LDR             R3, [R4,#0x14]
SUB             R8, R10, #1
CMP             R10, R3
BLS             loc_5CD20
MOV             R0, #1
MOV             R10, R8
BL              sub_5BB38
B               loc_5D018

loc_5D038
BGT             loc_5D058
CMP             R0, #0x24 ; '$'
BEQ             loc_5CD04
CMP             R0, #0x42 ; 'B'
BEQ             loc_5D0BC
CMP             R0, #0x20 ; ' '
BEQ             loc_5CCF4
B               loc_5CD20

loc_5D058
CMP             R0, #0x62 ; 'b'
BEQ             loc_5D0E0
BGT             loc_5D078
CMP             R0, #0x57 ; 'W'
BNE             loc_5CD20
MOV             R0, R5
BL              sub_5B7A4
B               loc_5D00C

loc_5D078
CMP             R0, #0x65 ; 'e'
BEQ             loc_5CFFC
CMP             R0, #0x77 ; 'w'
BNE             loc_5CD20
B               loc_5CFFC

loc_5D08C
CMP             R0, #0x65 ; 'e'
BEQ             loc_5D0A8
CMP             R0, #0x77 ; 'w'
BNE             loc_5D00C
MOV             R0, R5
BL              sub_5B6B4
B               loc_5D00C

loc_5D0A8
BL              sub_5B81C

loc_5D0AC
BL              sub_5B698
B               loc_5D00C

loc_5D0B4
BL              sub_5B900
B               loc_5D0AC

loc_5D0BC
BL              sub_5ADB8

loc_5D0C0
LDR             R3, [R4,#0x14]
SUB             R10, R8, #1
CMP             R3, R8
BCS             loc_5CD20
MOV             R0, #1
MOV             R8, R10
BL              sub_5BB38
B               loc_5D0C0

loc_5D0E0
BL              sub_5B0F4
B               loc_5D0C0

loc_5D0E8
BL              sub_5B698
B               loc_5CB7C

loc_5D0F0
LDR             R1, [R4,#0x20]
LDR             R2, [R4,#0x14]
STRB            R0, [R1,R2]
BL              j_putchar_unlocked
MOV             R0, #8  ; c
BL              j_putchar_unlocked
B               loc_5CD20

loc_5D10C
LDR             R3, [R4]
LDR             R3, [R3]
TST             R3, #8
BEQ             loc_5CD20
MOV             R0, #1
MOV             R5, #1
BL              sub_5ACE4
B               loc_5CD20

loc_5D12C
BL              sub_5AE74
CMP             R0, #0
BNE             loc_5C9B4
B               loc_5CCDC

loc_5D13C
BL              sub_5B1C8
B               loc_5CD20

loc_5D144
BL              sub_5B970
B               loc_5CD20

loc_5D14C
LDRB            R3, [SP,#0x154+s.c_cc+4]
CMP             R3, #0
BEQ             loc_5D18C
CMP             R3, R7
BNE             loc_5D18C
LDR             R3, [R4,#0x18]
CMP             R3, #0
BNE             loc_5D184
LDR             R2, =dword_7DB94
LDR             R2, [R2]
STR             R3, [R2]

loc_5D178
MOV             R7, #0xFFFFFFFF
STR             R7, [R4,#0x18]
B               loc_5C718

loc_5D184
MOV             R0, #0
B               loc_5CCF8

loc_5D18C
SUB             R3, R8, #0x20 ; ' '
CMP             R3, #0xDF
BHI             loc_5CD20
LDR             R2, [SP,#0x154+var_13C]
LDR             R3, [R4,#0x18]
SUB             R2, R2, #2
CMP             R3, R2
BGE             loc_5CD20
LDR             R10, [R4,#0x14]
ADD             R2, R3, #1
LDR             R0, [R4,#0x20]
UXTB            R8, R8
STR             R2, [R4,#0x18]
CMP             R10, R3
ADD             R1, R0, R10 ; src
BNE             loc_5D1E8
STRB            R8, [R0,R10]
LDR             R3, [R4,#0x20]
LDR             R2, [R4,#0x14]
ADD             R3, R3, R2
STRB            R9, [R3,#1]
BL              sub_5B628
B               loc_5CD20

loc_5D1E8
ADD             R11, R10, #1
SUB             R2, R2, R10 ; n
ADD             R0, R0, R11 ; dest
BL              memmove
LDR             R3, [R4,#0x20]
STRB            R8, [R3,R10]
BL              sub_5B9F0
LDR             R0, [R4,#0x14]
SUB             R0, R0, R11
B               loc_5CBE8

loc_5D210
LDR             R0, [R2,#4]
ADD             R3, R3, #1
STR             R0, [R2],#4
B               loc_5C7AC

loc_5D220
LDR             R2, [R10],#4
MOV             R1, R11 ; format
MOV             R0, R9  ; stream
BL              fprintf
LDR             R3, [SP,#0x154+var_148]
ADD             R3, R3, #1
STR             R3, [SP,#0x154+var_148]
B               loc_5C8E0

loc_5D240               ; ptr
LDR             R0, [R9,#-4]!
SUB             R8, R8, #1
BL              free
B               loc_5C92C
; End of function sub_5C41C

off_5D250 DCD dword_7DBC4
off_5D254 DCD unk_6BC3E
off_5D258 DCD stdin
off_5D25C DCD unk_632C8
off_5D260 DCD sub_5BAEC
off_5D264 DCD aSUNew    ; "%s.%u.new"
off_5D268 DCD aSS_2+3   ; "%s\n"
off_5D26C DCD asc_6B39D+1 ; ""
dword_5D270 DCD 0x40000057
off_5D274 DCD aHJ       ; "\x1B[H\x1B[J"
dword_5D278 DCD 0x40000043
dword_5D27C DCD 0x40000045
dword_5D280 DCD 0x40000069
dword_5D284 DCD 0x40000065
dword_5D288 DCD 0x40000070
dword_5D28C DCD 0x40000077
off_5D290 DCD dword_7DB94
dword_5D294 DCD 0x40000078
off_5D298 DCD aHJ+3     ; "\x1B[J"
off_5D29C DCD aReverseISearch ; "(reverse-i-search)'%s': "



; _DWORD *__fastcall sub_5D2A0(int *, int)
sub_5D2A0
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, #8
MOV             R5, R1
BL              sub_1748C
LDR             R3, [R4]
STR             R5, [R0,#4]
STR             R0, [R4]
STR             R3, [R0]
POP             {R4-R6,PC}
; End of function sub_5D2A0




; _DWORD *__fastcall sub_5D2C8(_DWORD *, int)
sub_5D2C8
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1

loc_5D2D4
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_5D2F4
MOV             R0, #8
BL              sub_174DC
STR             R0, [R4]
STR             R5, [R0,#4]
POP             {R4-R6,PC}

loc_5D2F4
MOV             R4, R3
B               loc_5D2D4
; End of function sub_5D2C8




; int __fastcall sub_5D2FC(_DWORD **)
sub_5D2FC
LDR             R3, [R0]
PUSH            {R4,LR}
CMP             R3, #0
MOVEQ           R4, R3
BEQ             loc_5D320
LDM             R3, {R2,R4}
STR             R2, [R0]
MOV             R0, R3  ; ptr
BL              free

loc_5D320
MOV             R0, R4
POP             {R4,PC}
; End of function sub_5D2FC




; int __fastcall sub_5D328(int, struct utsname *)
sub_5D328

var_290= -0x290
s= -0x28C
var_28B= -0x28B
var_28A= -0x28A
name= -0x188
var_s0=  0

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x290
MOV             R4, R0
MOV             R0, SP  ; timer
MOV             R6, R1
BL              time
ADD             R0, SP, #0x290+name ; name
BL              uname
LDR             R0, =(asc_6AEEE+1) ; "\r"
BL              puts
MOV             R0, R4
BL              sub_61C9C
SUBS            R4, R0, #0
BEQ             loc_5D388
LDR             R7, =aADBY ; "%A, %d %B %Y"
MOV             R5, #0
LDR             R8, =stdout

loc_5D36C               ; stream
MOV             R0, R4
BL              getc_unlocked
CMN             R0, #1
BNE             loc_5D390
MOV             R0, R4  ; stream
BL              fclose
BL              sub_177D8

loc_5D388
ADD             SP, SP, #0x290
POP             {R4-R8,PC}

loc_5D390
CMP             R0, #0xA
STRB            R5, [SP,#0x290+var_28B]
MOVEQ           R3, #0xD
STRBEQ          R5, [SP,#0x290+var_28A]
STRBEQ          R3, [SP,#0x290+var_28B]
CMP             R0, #0x25 ; '%'
CMPNE           R0, #0x5C ; '\'
STRB            R0, [SP,#0x290+s]
BNE             loc_5D494
MOV             R0, R4  ; stream
BL              getc_unlocked
CMP             R0, #0x6D ; 'm'
ADDEQ           R3, SP, #0x290+name.machine
BEQ             loc_5D45C
BGT             loc_5D41C
CMP             R0, #0x53 ; 'S'
BEQ             loc_5D4B0
BGT             loc_5D3F4
CMP             R0, #0x44 ; 'D'
BEQ             loc_5D3E8
CMP             R0, #0x4F ; 'O'

loc_5D3E4
BNE             loc_5D410

loc_5D3E8
ADD             R3, SP, #0x290+name.machine+0x40
ADD             R3, R3, #1
B               loc_5D45C

loc_5D3F4
CMP             R0, #0x68 ; 'h'
BEQ             loc_5D46C
CMP             R0, #0x6C ; 'l'
MOVEQ           R3, R6
BEQ             loc_5D45C
CMP             R0, #0x64 ; 'd'
BEQ             loc_5D478

loc_5D410
ADD             R3, SP, #0x290+var_s0
STRB            R0, [R3,#-0x28C]!
B               loc_5D45C

loc_5D41C
CMP             R0, #0x72 ; 'r'
ADDEQ           R3, SP, #0x290+name
ADDEQ           R3, R3, #0x82
BEQ             loc_5D45C
BGT             loc_5D440
CMP             R0, #0x6E ; 'n'
BEQ             loc_5D46C
CMP             R0, #0x6F ; 'o'
B               loc_5D3E4

loc_5D440
CMP             R0, #0x74 ; 't'
BEQ             loc_5D49C
BLT             loc_5D4B0
CMP             R0, #0x76 ; 'v'
ADDEQ           R3, SP, #0x290+name.release+0x3E
ADDEQ           R3, R3, #3
BNE             loc_5D410

loc_5D45C
LDR             R1, [R8]
MOV             R0, R3
BL              fputs_unlocked
B               loc_5D36C

loc_5D46C
ADD             R3, SP, #0x290+name
ADD             R3, R3, #0x41 ; 'A'
B               loc_5D45C

loc_5D478               ; timer
MOV             R0, SP
BL              localtime
MOV             R2, R7  ; format
MOV             R3, R0  ; tp
MOVW            R1, #0x101 ; maxsize
ADD             R0, SP, #0x290+s ; s
BL              strftime

loc_5D494
ADD             R3, SP, #0x290+s
B               loc_5D45C

loc_5D49C
MOV             R2, SP
MOVW            R1, #0x101
ADD             R0, SP, #0x290+s
BL              sub_18768
B               loc_5D494

loc_5D4B0
ADD             R3, SP, #0x290+name
B               loc_5D45C
; End of function sub_5D328

off_5D4B8 DCD asc_6AEEE+1 ; "\r"
off_5D4BC DCD aADBY     ; "%A, %d %B %Y"
off_5D4C0 DCD stdout



; void sub_5D4C4()
sub_5D4C4
PUSH            {R4-R6,LR}
LDR             R4, =stdout
BL              sub_60AA0
LDR             R1, [R4]
MOV             R5, R0
BL              fputs_unlocked
LDR             R1, [R4]
LDR             R0, =aLogin_0 ; " login: "
BL              fputs_unlocked
BL              sub_177D8
MOV             R0, R5
POP             {R4-R6,LR}
B               free
; End of function sub_5D4C4

off_5D4F8 DCD stdout
off_5D4FC DCD aLogin_0  ; " login: "



; int sub_5D500()
sub_5D500
PUSH            {R4,LR}
BL              getuid
MOV             R4, R0
BL              geteuid
CMP             R4, R0
BEQ             loc_5D54C
LDR             R4, =aEnv ; "ENV"

loc_5D51C               ; name
MOV             R0, R4
BL              unsetenv
MOV             R0, R4  ; s
BL              strlen
ADD             R0, R0, #1
LDRB            R3, [R4,R0]!
CMP             R3, #0
BNE             loc_5D51C
LDR             R0, =string ; "PATH=/sbin:/usr/sbin:/bin:/usr/bin"
BL              putenv
MOV             R0, #1
POP             {R4,PC}

loc_5D54C
MOV             R0, #0
POP             {R4,PC}
; End of function sub_5D500

off_5D554 DCD aEnv      ; "ENV"
off_5D558 DCD string    ; "PATH=/sbin:/usr/sbin:/bin:/usr/bin"



; int __fastcall sub_5D55C(int)
sub_5D55C
PUSH            {R4-R6,LR}
MOV             R1, #0
BL              open64
SUBS            R5, R0, #0
MOVLT           R4, #1
BLT             loc_5D58C
MOV             R2, #0
MOVW            R1, #0x4C01 ; request
BL              ioctl
MOV             R4, R0
MOV             R0, R5  ; fd
BL              close

loc_5D58C
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_5D55C




; int __fastcall sub_5D594(char **, const char *, int, int, int)
sub_5D594

fd= -0x17C
var_178= -0x178
var_174= -0x174
s= -0x16C
var_154= -0x154
var_144= -0x144
var_EC= -0xEC
var_D4= -0xD4
var_B8= -0xB8
var_B4= -0xB4
arg_0=  0x24

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x17C
STRD            R2, R3, [SP,#0x17C+var_174]
MOV             R10, R0
LDR             R3, [SP,#0x17C+arg_0]
STR             R1, [SP,#0x17C+var_178]
TST             R3, #1
MOVNE           R7, #0
MOVEQ           R7, #2

loc_5D5B8
MOV             R1, R7
LDR             R0, [SP,#0x17C+var_178]
BL              open64
SUBS            R3, R0, #0
STR             R3, [SP,#0x17C+fd]
BGE             loc_5D5FC
CMP             R7, #0
BNE             loc_5D5F4
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R4, [R3]
RSB             R4, R4, #0

loc_5D5E8
MOV             R0, R4
ADD             SP, SP, #0x17C
POP             {R4-R11,PC}

loc_5D5F4
MOV             R7, #0
B               loc_5D5B8

loc_5D5FC
LDR             R6, [R10]
MOV             R5, #0xFFFFFFFF
MOV             R4, R5
MOV             R8, #0
CMP             R6, #0
ADDEQ           R6, SP, #0x17C+s

loc_5D614
LDR             R3, =0xFFFFF
CMP             R8, R3
MOVGT           R3, #0
MOVLE           R3, #1
CMP             R5, #0
MOVEQ           R3, #0
CMP             R3, #0
BNE             loc_5D664

loc_5D634               ; fd
LDR             R0, [SP,#0x17C+fd]
BL              close
CMP             R5, #0
MOVNE           R4, R5
BNE             loc_5D5E8
LDR             R3, [R10]
CMP             R3, #0
BNE             loc_5D5E8
ADD             R0, SP, #0x17C+s
BL              sub_174F8
STR             R0, [R10]
B               loc_5D5E8

loc_5D664
ADD             R11, SP, #0x17C+s
MOV             R2, R8
LDR             R1, =aDevLoopU ; "/dev/loop%u"
MOV             R0, R11 ; s
BL              sprintf
LDR             R3, =dword_7DB94
ADD             R1, SP, #0x17C+var_154
MOV             R0, R6
LDR             R9, [R3]
MOV             R3, #0
STR             R3, [R9]
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_5D78C
LDR             R3, [SP,#0x17C+var_144]
AND             R3, R3, #0xF000
CMP             R3, #0x6000
BNE             loc_5D78C

loc_5D6AC
MOV             R1, R7
MOV             R0, R6
BL              open64
SUBS            R4, R0, #0
BLT             loc_5D7CC

loc_5D6C0
ADD             R2, SP, #0x17C+var_EC
MOVW            R1, #0x4C05 ; request
MOV             R0, R4  ; fd
BL              ioctl
SUBS            R5, R0, #0
BEQ             loc_5D810
LDR             R3, [R9]
CMP             R3, #6
BNE             loc_5D810
MOV             R1, #0x4C00 ; request
LDR             R2, [SP,#0x17C+fd]
MOV             R0, R4  ; fd
BL              ioctl
SUBS            R1, R0, #0 ; c
BNE             loc_5D780
MOV             R2, #0xE8 ; n
ADD             R0, SP, #0x17C+var_EC ; s
BL              memset
MOV             R2, #0x40 ; '@'
LDR             R1, [SP,#0x17C+var_178]
ADD             R0, SP, #0x17C+var_B4
BL              sub_60B34
LDRD            R2, R3, [SP,#0x17C+var_174]
MOVW            R1, #0x4C04 ; request
MOV             R0, R4  ; fd
STRD            R2, R3, [SP,#0x17C+var_D4]
ADD             R2, SP, #0x17C+var_EC
LDR             R3, [SP,#0x17C+arg_0]
BIC             R3, R3, #1
STR             R3, [SP,#0x17C+var_B8]
BL              ioctl
SUBS            R5, R0, #0
BEQ             loc_5D7FC
LDR             R3, [SP,#0x17C+var_B8]
TST             R3, #4
BEQ             loc_5D770
SUB             R3, R3, #4
ADD             R2, SP, #0x17C+var_EC
MOVW            R1, #0x4C04 ; request
MOV             R0, R4  ; fd
STR             R3, [SP,#0x17C+var_B8]
BL              ioctl
SUBS            R5, R0, #0
BEQ             loc_5D7FC

loc_5D770
MOV             R2, #0
MOVW            R1, #0x4C01 ; request
MOV             R0, R4  ; fd
BL              ioctl

loc_5D780               ; fd
MOV             R0, R4
BL              close
B               loc_5D7FC

loc_5D78C
LDR             R3, [R9]
CMP             R3, #2
CMPEQ           R6, R11
BNE             loc_5D7C4
MOV             R1, R8  ; minor
MOV             R0, #7  ; major
BL              j_gnu_dev_makedev
MOV             R2, R0
MOV             R3, R1
MOV             R0, R11 ; path
MOVW            R1, #0x61A4 ; mode
BLX             sub_62E20
CMP             R0, #0
BEQ             loc_5D6AC

loc_5D7C4
MOV             R5, #0xFFFFFFFF
B               loc_5D634

loc_5D7CC
LDR             R3, [R9]
CMP             R3, #0x1E
BNE             loc_5D7F0
MOV             R1, #0
MOV             R0, R6
BL              open64
SUBS            R4, R0, #0
MOV             R7, #0
BGE             loc_5D6C0

loc_5D7F0
LDR             R3, [R9]
CMP             R3, #6
BEQ             loc_5D7C4

loc_5D7FC
LDR             R3, [R10]
CMP             R3, #0
BNE             loc_5D634
ADD             R8, R8, #1
B               loc_5D614

loc_5D810
MOV             R5, #0xFFFFFFFF
B               loc_5D780
; End of function sub_5D594

off_5D818 DCD dword_7DB94
dword_5D81C DCD 0xFFFFF
off_5D820 DCD aDevLoopU ; "/dev/loop%u"



; int __fastcall sub_5D824(char *path, __mode_t, int)
sub_5D824

var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x74
LDRB            R3, [R0]
SUB             R3, R3, #0x2E ; '.'
CMP             R3, #1
BHI             loc_5D848
LDRB            R9, [R0,#1]
CMP             R9, #0
BEQ             loc_5D968

loc_5D848
LDR             R11, =dword_7DB94
MOV             R4, #0xFFFFFFFF
MOV             R7, R0
MOV             R6, R4
MOV             R9, R2
MOV             R10, R1
MOV             R5, R0
AND             R3, R2, #4
STR             R3, [SP,#0x74+var_70]

loc_5D86C
LDR             R3, [SP,#0x74+var_70]
CMP             R3, #0
BNE             loc_5D894

loc_5D878
CMP             R6, R4
BEQ             loc_5D88C
MOV             R6, R4
MOV             R0, R4  ; mask
BL              umask

loc_5D88C
MOV             R8, #0
B               loc_5D8EC

loc_5D894
MOV             R3, R7

loc_5D898
MOV             R7, R3
LDRB            R2, [R3],#1
CMP             R2, #0
BEQ             loc_5D878
CMP             R2, #0x2F ; '/'
BNE             loc_5D898

loc_5D8B0
LDRB            R8, [R7,#1]!
CMP             R8, #0x2F ; '/'
BEQ             loc_5D8B0
MOV             R0, #0  ; mask
CMP             R8, R0
STRB            R0, [R7]
BEQ             loc_5D878
CMN             R6, #1
BNE             loc_5D8EC
BL              umask
BICS            R6, R0, #0xC0
MOV             R4, R0
BEQ             loc_5D8EC
MOV             R0, R6  ; mask
BL              umask

loc_5D8EC               ; mode
MOVW            R1, #0x1FF
MOV             R0, R5  ; path
BL              mkdir
CMP             R0, #0
BGE             loc_5D974
LDR             R3, [R11]
LDR             R3, [R3]
BIC             R2, R3, #4
LDR             R3, [SP,#0x74+var_70]
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R2, #0x11
ORRNE           R3, R3, #1
CMP             R3, #0
BNE             loc_5D9D4
ADD             R1, SP, #0x74+var_6C
MOV             R0, R5
BLX             sub_62DFC
CMP             R0, #0
BLT             loc_5D9D4
LDR             R3, [SP,#0x74+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BNE             loc_5D9D4
CMP             R8, #0
BNE             loc_5D9CC

loc_5D954
MOV             R9, #0

loc_5D958
CMP             R6, R4
BEQ             loc_5D968
MOV             R0, R4  ; mask
BL              umask

loc_5D968
MOV             R0, R9
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R11,PC}

loc_5D974
TST             R9, #0x1000
BEQ             loc_5D988
MOV             R1, R5
LDR             R0, =aCreatedDirecto ; "created directory: '%s'\n"
BL              printf

loc_5D988
CMP             R8, #0
BNE             loc_5D9CC
CMN             R10, #1
BEQ             loc_5D954
MOV             R1, R10 ; mode
MOV             R0, R5  ; file
BL              chmod
CMP             R0, #0
BGE             loc_5D954
MVN             R9, R9
LDR             R1, =aSetPermissions ; "set permissions of"
MOV             R9, R9,LSR#31
RSB             R9, R9, #0

loc_5D9BC
MOV             R2, R5
LDR             R0, =aCanTSDirectory ; "can't %s directory '%s'"
BL              sub_16AF4
B               loc_5D958

loc_5D9CC
STRB            R8, [R7]
B               loc_5D86C

loc_5D9D4
LDR             R1, =aCreate ; "create"
MOV             R9, #0xFFFFFFFF
B               loc_5D9BC
; End of function sub_5D824

off_5D9E0 DCD dword_7DB94
off_5D9E4 DCD aCreatedDirecto ; "created directory: '%s'\n"
off_5D9E8 DCD aSetPermissions ; "set permissions of"
off_5D9EC DCD aCanTSDirectory ; "can't %s directory '%s'"
off_5D9F0 DCD aCreate   ; "create"
; [00000004 BYTES: COLLAPSED FUNCTION j_gnu_dev_makedev]



; int __fastcall sub_5D9F8(int, unsigned __int8 *)
sub_5D9F8
PUSH            {R4-R6,LR}
SUBS            R4, R1, #0
MOVEQ           R5, #1
BEQ             loc_5DA70
LDRB            R3, [R4]
MOV             R6, R0
CMP             R3, #0x6E ; 'n'
BNE             loc_5DA2C
LDRB            R3, [R4,#1]
CMP             R3, #0x6F ; 'o'
ADDEQ           R4, R4, #2
MOVEQ           R5, #0
BEQ             loc_5DA30

loc_5DA2C
MOV             R5, #1

loc_5DA30
MOV             R1, R6
MOV             R0, R4
BL              sub_1684C
CMP             R0, #0
BEQ             loc_5DA54
LDRB            R3, [R0]
CMP             R3, #0x2C ; ','
CMPNE           R3, #0
BEQ             loc_5DA70

loc_5DA54               ; c
MOV             R1, #0x2C ; ','
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
ADDNE           R4, R0, #1
BNE             loc_5DA30
EOR             R5, R5, #1

loc_5DA70
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_5D9F8




; char *__fastcall sub_5DA78(int)
sub_5DA78
LDR             R2, =(aRwxststPcDBLSS+7) ; "?pc?d?b?-?l?s???similar to old password"
UBFX            R3, R0, #0xC, #4
PUSH            {R4-R8,LR}
MOV             R4, #0x100
LDR             R5, =aRwxststPcDBLSS ; "rwxSTst?pc?d?b?-?l?s???similar to old p"...
MOV             R6, #0x2D ; '-'
MOV             R7, #0x1000
LDRB            R3, [R2,R3]
MOV             R2, #0
LDR             R1, =byte_7D784
STRB            R3, [R1]

loc_5DAA4
ADD             LR, R2, R2,LSL#1
MOV             R3, #0
MOV             R12, R3
ADD             R8, R1, LR

loc_5DAB4
TST             R4, R0
STRB            R6, [R8,#1]!
LDRBNE          R3, [R12,R5]
MOV             R4, R4,ASR#1
STRBNE          R3, [R8]
MOVNE           R3, R12
ADD             R12, R12, #1
CMP             R12, #3
BNE             loc_5DAB4
ADD             R2, R2, #1
ANDS            R12, R0, R7,ASR R2
BEQ             loc_5DB00
AND             R3, R3, #2
ADD             LR, LR, #3
ADD             R3, R5, R3
CMP             R2, #3
ADDEQ           R3, R3, #1
LDRB            R3, [R3,#3]
STRB            R3, [R1,LR]

loc_5DB00
CMP             R2, #3
BNE             loc_5DAA4
LDR             R0, =byte_7D784
POP             {R4-R8,PC}
; End of function sub_5DA78

off_5DB10 DCD aRwxststPcDBLSS+7 ; "?pc?d?b?-?l?s???similar to old password"
off_5DB14 DCD aRwxststPcDBLSS ; "rwxSTst?pc?d?b?-?l?s???similar to old p"...
off_5DB18 DCD byte_7D784



; _BYTE *__fastcall sub_5DB1C(_BYTE *result)
sub_5DB1C
CMP             R0, #0
SUBNE           R0, R0, #1
MOVNE           R2, #0
BXEQ            LR

loc_5DB2C
LDRB            R3, [R0,#1]!
CMP             R3, #0
BXEQ            LR
STRB            R2, [R0]
B               loc_5DB2C
; End of function sub_5DB1C




; bool __fastcall sub_5DB40(int, int)
sub_5DB40
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R0
MOV             R1, R0
MOV             R0, R5
BL              strcasestr
CMP             R0, #0
BNE             loc_5DB78
MOV             R1, R5
MOV             R0, R4
BL              strcasestr
MOVS            R0, R0
MOVNE           R0, #1
POP             {R4-R6,PC}

loc_5DB78
MOV             R0, #1
POP             {R4-R6,PC}
; End of function sub_5DB40




; int __fastcall sub_5DB80(const char *, int)
sub_5DB80
PUSH            {R4-R8,LR}
MOV             R6, R0
MOV             R7, R1
BL              sub_5DB40
MOV             R5, R0
MOV             R0, R6
BL              sub_174F8
MOV             R4, R0
MOV             R0, R6  ; s
BL              strlen
SUB             R2, R4, #1
MOV             R3, R0

loc_5DBB0
SUBS            R3, R3, #1
BPL             loc_5DBF0
CMP             R0, #0
RSBGE           R0, R0, R0
RSBLT           R0, R0, #0
MOV             R1, R7
ADD             R4, R4, R0
MOV             R0, R4
BL              sub_5DB40
ORR             R5, R0, R5
MOV             R0, R4
BL              sub_5DB1C
MOV             R0, R4  ; ptr
BL              free
MOV             R0, R5
POP             {R4-R8,PC}

loc_5DBF0
LDRB            R1, [R6,R3]
STRB            R1, [R2,#1]!
B               loc_5DBB0
; End of function sub_5DB80




; int __fastcall sub_5DBFC(_BYTE *, const char *, int *)
sub_5DBFC

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
SUBS            R5, R1, #0
BEQ             loc_5DD68
MOV             R9, R0
MOV             R0, R5  ; s
MOV             R4, R2
BL              strlen
CMP             R0, #5
MOV             R7, R0
BLS             loc_5DD68
LDR             R1, [R4]
MOV             R0, R5
BL              sub_5DB80
CMP             R0, #0
BNE             loc_5DD7C
LDR             R1, [R4,#0x10]
LDRB            R3, [R1]
CMP             R3, #0
BNE             loc_5DD50

loc_5DC48
BL              sub_60AA0
MOV             R1, R0
MOV             R4, R0
MOV             R0, R5
BL              sub_5DB80
MOV             R6, R0
MOV             R0, R4  ; ptr
BL              free
CMP             R6, #0
BNE             loc_5DD84
MOV             R10, R5
ADD             R2, R7, R5
MOV             R4, R6

loc_5DC7C
LDRB            R8, [R10],#1
SUB             R3, R8, #0x61 ; 'a'
CMP             R3, #0x19
ORRLS           R4, R4, #1
BLS             loc_5DCB0
SUB             R3, R8, #0x41 ; 'A'
CMP             R3, #0x19
ORRLS           R4, R4, #2
BLS             loc_5DCB0
SUB             R3, R8, #0x30 ; '0'
CMP             R3, #9
ORRLS           R4, R4, #4
ORRHI           R4, R4, #8

loc_5DCB0               ; s
MOV             R0, R5
MOV             R11, #0

loc_5DCB8               ; c
MOV             R1, R8
STR             R2, [SP,#0xC+var_8]
BL              strchr
SUBS            R3, R0, #0
LDR             R2, [SP,#0xC+var_8]
BEQ             loc_5DCE4
ADD             R0, R3, #1
LDRB            R3, [R3,#1]
ADD             R11, R11, #1
CMP             R3, #0
BNE             loc_5DCB8

loc_5DCE4
CMP             R7, R11,LSL#1
BLS             loc_5DD8C
CMP             R10, R2
BNE             loc_5DC7C
MOV             R2, #4
MOV             R3, #0xE
MOV             R1, #1

loc_5DD00
TST             R4, R1
MOV             R1, R1,LSL#1
SUBNE           R3, R3, #2
SUBS            R2, R2, #1
BNE             loc_5DD00
CMP             R7, R3
BCC             loc_5DD94
CMP             R9, #0
BEQ             loc_5DD44
LDRB            R3, [R9]
CMP             R3, #0
BEQ             loc_5DD44
MOV             R1, R9
MOV             R0, R5
BL              sub_5DB80
CMP             R0, #0
BNE             loc_5DD9C

loc_5DD44
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_5DD50
MOV             R0, R5
BL              sub_5DB80
CMP             R0, #0
BEQ             loc_5DC48
LDR             R1, =aSimilarToGecos ; "similar to gecos"
B               loc_5DD6C

loc_5DD68
LDR             R1, =aTooShort ; "too short"

loc_5DD6C
LDR             R0, =aBadPasswordS ; "Bad password: %s\n"
MOV             R6, #1
BL              printf
B               loc_5DD44

loc_5DD7C
LDR             R1, =aSimilarToUsern ; "similar to username"
B               loc_5DD6C

loc_5DD84
LDR             R1, =aSimilarToHostn ; "similar to hostname"
B               loc_5DD6C

loc_5DD8C
LDR             R1, =aTooManySimilar ; "too many similar characters"
B               loc_5DD6C

loc_5DD94
LDR             R1, =aTooWeak ; "too weak"
B               loc_5DD6C

loc_5DD9C
LDR             R1, =(aRwxststPcDBLSS+0x17) ; "similar to old password"
B               loc_5DD6C
; End of function sub_5DBFC

off_5DDA4 DCD aSimilarToGecos ; "similar to gecos"
off_5DDA8 DCD aTooShort ; "too short"
off_5DDAC DCD aBadPasswordS ; "Bad password: %s\n"
off_5DDB0 DCD aSimilarToUsern ; "similar to username"
off_5DDB4 DCD aSimilarToHostn ; "similar to hostname"
off_5DDB8 DCD aTooManySimilar ; "too many similar characters"
off_5DDBC DCD aTooWeak  ; "too weak"
off_5DDC0 DCD aRwxststPcDBLSS+0x17 ; "similar to old password"



; _DWORD *__fastcall sub_5DDC4(int, int (*)(void))
sub_5DDC4
PUSH            {R4,LR}
BLX             R1
SUBS            R4, R0, #0
BEQ             loc_5DDE4
MOV             R0, #0x1C
BL              sub_174DC
STR             R4, [R0]
POP             {R4,PC}

loc_5DDE4
MOV             R0, R4
POP             {R4,PC}
; End of function sub_5DDC4




; void __fastcall sub_5DDEC(int)
sub_5DDEC
PUSH            {R4,LR}
SUBS            R4, R0, #0
POPEQ           {R4,PC}
LDR             R0, [R4] ; stream
BL              fclose
LDR             R0, [R4,#8] ; ptr
BL              free
LDR             R0, [R4,#0xC] ; ptr
BL              free
MOV             R0, R4  ; ptr
POP             {R4,LR}
B               free
; End of function sub_5DDEC




; int __fastcall sub_5DE1C(_DWORD *, void *, int, const char *)
sub_5DE1C

var_30= -0x30
var_2C= -0x2C
s= -0x28
n= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUBS            R5, R0, #0
SUB             SP, SP, #0x34
STR             R1, [SP,#0x34+s]
BEQ             loc_5E090
MOV             R7, R3
ANDS            R3, R2, #0x800000
LDRBNE          R3, [R7]
UXTB            R9, R2
STREQ           R3, [SP,#0x34+var_30]
MOV             R6, R2
ADDNE           R7, R7, #1
STRNE           R3, [SP,#0x34+var_30]
UBFX            R3, R2, #8, #8
STR             R3, [SP,#0x34+var_2C]
MOV             R3, R9,LSL#2
STR             R3, [SP,#0x34+n]
ADD             R3, R5, #0x14
STR             R3, [SP,#0x34+var_10]

loc_5DE68               ; n
LDR             R2, [SP,#0x34+n]
MOV             R1, #0  ; c
LDR             R0, [SP,#0x34+s] ; s
BL              memset
LDR             R2, [R5]
ADD             R1, R5, #0x10
ADD             R0, R5, #8
BL              getline
SUBS            R4, R0, #0
BLE             loc_5E08C
LDR             R11, [R5,#8]
ADD             R10, R5, #0xC

loc_5DE98
LDR             R3, [R5,#0x18]
ADD             R3, R3, #1
STR             R3, [R5,#0x18]
ADD             R3, R11, R4
LDRB            R3, [R3,#-1]
CMP             R3, #0xA
BNE             loc_5DEBC
SUBS            R4, R4, #1
BEQ             loc_5DF2C

loc_5DEBC
ADD             R3, R11, R4
LDRB            R3, [R3,#-1]
CMP             R3, #0x5C ; '\'
BNE             loc_5DF2C
LDR             R2, [R5]
MOV             R0, R10
LDR             R1, [SP,#0x34+var_10]
SUB             R4, R4, #1
BL              getline
SUBS            R2, R0, #0
BLE             loc_5DF2C
LDR             R3, [R5,#0x10]
ADD             R8, R4, R2
ADD             R1, R8, #1
CMP             R3, R1
BCS             loc_5DF18
MOV             R0, R11
STR             R1, [R5,#0x10]
STR             R2, [SP,#0x34+var_20]
BL              sub_174B4
LDR             R2, [SP,#0x34+var_20] ; n
MOV             R11, R0
STR             R0, [R5,#8]

loc_5DF18               ; dest
ADD             R0, R11, R4
LDR             R1, [R5,#0xC] ; src
BL              memcpy
MOV             R4, R8
B               loc_5DE98

loc_5DF2C
MOV             R3, #0
STRB            R3, [R11,R4]

loc_5DF34
ANDS            R3, R6, #0x20000
LDR             R4, [R5,#8]
STR             R3, [SP,#0x34+var_20]
BEQ             loc_5DF54
MOV             R0, R4  ; s
ADD             R1, R7, #1 ; accept
BL              strspn
ADD             R4, R4, R0

loc_5DF54
TST             R6, #0x1000000
MOV             R0, R4
BEQ             loc_5DF64
BL              sub_60E74

loc_5DF64
LDRB            R2, [R0]
CMP             R2, #0
BEQ             loc_5DE68
LDRB            R3, [R7]
LDR             R1, [SP,#0x34+var_30]
CMP             R2, R1
CMPNE           R3, R2
MOVEQ           R2, #1
MOVNE           R2, #0
BEQ             loc_5DE68
SUB             R3, R9, #1
MOV             R11, R2
STR             R3, [SP,#0x34+var_1C]
AND             R8, R6, #0x400000
AND             R3, R6, #0x40000
ADD             R10, R7, #1
STR             R3, [SP,#0x34+var_14]
AND             R3, R6, #0x10000
STR             R3, [SP,#0x34+var_18]

loc_5DFB0
LDR             R3, [SP,#0x34+s]
STR             R4, [R3,R11,LSL#2]
LDR             R3, [SP,#0x34+var_1C]
CMP             R3, R11
BNE             loc_5DFD0
LDR             R3, [SP,#0x34+var_14]
CMP             R3, #0
BNE             loc_5E0A0

loc_5DFD0
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_5DFE8
CMP             R8, #0
MOVNE           R1, R7
BNE             loc_5DFEC

loc_5DFE8               ; reject
MOV             R1, R10

loc_5DFEC               ; s
MOV             R0, R4
BL              strcspn
ADD             R4, R4, R0

loc_5DFF8
CMP             R8, #0
LDRB            R3, [R4]
BEQ             loc_5E018
LDRB            R1, [R7]
CMP             R1, R3
MOVEQ           R3, #0
STRBEQ          R3, [R4]
BEQ             loc_5E028

loc_5E018
CMP             R3, #0
MOVNE           R3, #0
STRBNE          R3, [R4]
ADDNE           R4, R4, #1

loc_5E028
LDR             R3, [SP,#0x34+var_18]
CMP             R3, #0
BEQ             loc_5E044
MOV             R0, R4  ; s
MOV             R1, R10 ; accept
BL              strspn
ADD             R4, R4, R0

loc_5E044
LDRB            R3, [R4]
ADD             R11, R11, #1
CMP             R3, #0
BEQ             loc_5E064
LDRB            R1, [R7]
CMP             R1, R3
CMPNE           R9, R11
BGT             loc_5DFB0

loc_5E064
LDR             R3, [SP,#0x34+var_2C]
CMP             R3, R11
BLE             loc_5E094
MOV             R2, R11
LDR             R1, [R5,#0x18]
LDR             R0, =aBadLineUDToken ; "bad line %u: %d tokens found, %d needed"
BL              sub_16DDC
TST             R6, #0x100000
BEQ             loc_5DE68
BL              sub_16E08

loc_5E08C
BEQ             loc_5DF34

loc_5E090
MOV             R11, #0

loc_5E094
MOV             R0, R11
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R11,PC}

loc_5E0A0
CMP             R8, #0
MOV             R0, R4
LDRBNE          R1, [R7]
MOVEQ           R1, R8
BL              strchrnul
LDR             R3, [SP,#0x34+var_20]
MOV             R4, R0
CMP             R3, #0
BEQ             loc_5DFF8
MOV             R3, R0

loc_5E0C8
MOV             R4, R3
LDRB            R1, [R3,#-1]! ; c
MOV             R0, R10 ; s
STR             R3, [SP,#0x34+var_C]
STR             R3, [SP,#0x34+var_8]
BL              strchr
CMP             R0, #0
LDR             R3, [SP,#0x34+var_C]
BNE             loc_5E0C8
B               loc_5DFF8
; End of function sub_5DE1C

off_5E0F0 DCD aBadLineUDToken ; "bad line %u: %d tokens found, %d needed"



; unsigned int __fastcall sub_5E0F4(const char *, unsigned int nptr)
sub_5E0F4

var_10= -0x10
endptr= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
LDRB            R3, [R0]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #7
BLS             loc_5E12C
LDR             R11, =dword_640CC
MOV             R4, R0
MOV             R6, R1

loc_5E118
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_5E164
MOV             R0, R6  ; nptr
B               loc_5E15C

loc_5E12C               ; base
MOV             R2, #8
ADD             R1, SP, #0x14+endptr ; endptr
BL              strtoul
LDR             R3, [SP,#0x14+endptr]
CMP             R0, #0x1000
LDRB            R2, [R3]
MOVCC           R3, #0
MOVCS           R3, #1
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
MOVNE           R0, #0xFFFFFFFF

loc_5E15C
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_5E164
CMP             R3, #0x2C ; ','
ADDEQ           R4, R4, #1
BEQ             loc_5E118
LDR             R0, =dword_640E4
MOV             R7, #0

loc_5E178
LDR             R3, =aAugo ; "augo"
LDRB            R1, [R4]
MOV             R10, R3

loc_5E184
LDRB            R2, [R3]
CMP             R2, R1
BNE             loc_5E1B0
SUB             R10, R3, R10
LDR             R3, [R0,R10,LSL#2]
ORR             R7, R7, R3
LDRB            R3, [R4,#1]!
CMP             R3, #0
BNE             loc_5E178

loc_5E1A8
MOV             R0, #0xFFFFFFFF
B               loc_5E15C

loc_5E1B0
LDRB            R2, [R3,#1]!
CMP             R2, #0
BNE             loc_5E184
LDR             R9, =0xFFFFF000
CMP             R7, #0
LDR             R3, =dword_640E4
MVNNE           R9, R7

loc_5E1CC
LDRB            R8, [R4]
SUB             R2, R8, #0x2B ; '+'
TST             R2, #0xFD
BEQ             loc_5E1E8
CMP             R8, #0x3D ; '='
BNE             loc_5E1A8
AND             R6, R6, R9

loc_5E1E8
LDRB            R0, [R4,#1]
ADD             R1, R4, #1
LDR             R2, =(aAugo+1) ; "ugo"

loc_5E1F4
LDRB            R12, [R2]
CMP             R12, R0
BNE             loc_5E278
SUB             R2, R2, R10
ADD             R4, R4, #2
LDR             R2, [R3,R2,LSL#2]
AND             R2, R2, R6
UBFX            R5, R2, #0, #9
TST             R2, #0x124
ORRNE           R5, R5, #0x124
TST             R5, #0x92
ORRNE           R5, R5, #0x92
TST             R5, #0x49
ORRNE           R5, R5, #0x49 ; 'I'

loc_5E22C
CMP             R5, #0
BEQ             loc_5E264

loc_5E234               ; mask
SUBS            R0, R7, #0
BNE             loc_5E254
BL              umask
STR             R0, [SP,#0x14+var_10]
BL              umask
LDR             R2, [SP,#0x14+var_10]
LDR             R3, =dword_640E4
MVN             R0, R2

loc_5E254
AND             R5, R5, R0
CMP             R8, #0x2D ; '-'
BICEQ           R6, R6, R5
ORRNE           R6, R6, R5

loc_5E264
LDRB            R2, [R4]
CMP             R2, #0
CMPNE           R2, #0x2C ; ','
BNE             loc_5E1CC
B               loc_5E118

loc_5E278
LDRB            R5, [R2,#1]!
CMP             R5, #0
BNE             loc_5E1F4
MOVW            R0, #0x4049
MOV             R4, R1
AND             R0, R6, R0

loc_5E290
LDR             R2, =aRwxxst ; "rwxXst"
LDRB            R12, [R4]
MOV             LR, R2

loc_5E29C
LDRB            R1, [R2]
CMP             R1, R12
BNE             loc_5E2DC
CMP             R12, #0x58 ; 'X'
BNE             loc_5E2B8
CMP             R0, #0
BEQ             loc_5E2C4

loc_5E2B8
SUB             R2, R2, LR
LDR             R2, [R11,R2,LSL#2]
ORR             R5, R5, R2

loc_5E2C4
LDRB            R2, [R4,#1]!
CMP             R2, #0
BNE             loc_5E290
CMP             R5, #0
BNE             loc_5E234
B               loc_5E118

loc_5E2DC
LDRB            R1, [R2,#1]!
CMP             R1, #0
BNE             loc_5E29C
B               loc_5E22C
; End of function sub_5E0F4

off_5E2EC DCD dword_640CC
off_5E2F0 DCD dword_640E4
off_5E2F4 DCD aAugo     ; "augo"
dword_5E2F8 DCD 0xFFFFF000
off_5E2FC DCD aAugo+1   ; "ugo"
off_5E300 DCD aRwxxst   ; "rwxXst"


; Attributes: noreturn

; void __noreturn sub_5E304()
sub_5E304
MOV             R0, #0
B               sub_16B40
; End of function sub_5E304




; int __fastcall sub_5E30C(int result)
sub_5E30C

var_78= -0x78
var_68= -0x68

CMP             R0, #0
BXEQ            LR
PUSH            {R4,R5,LR}
MOVW            R2, #0x1B6
SUB             SP, SP, #0x7C ; '|'
MOVW            R1, #0x241
BL              open64
SUBS            R5, R0, #0
BLT             loc_5E394
ADD             R1, SP, #0x88+var_78
BLX             sub_62E08
CMP             R0, #0
LDR             R2, =dword_7DBC8
BNE             loc_5E39C
LDR             R3, [SP,#0x88+var_68]
AND             R3, R3, #0xF000
CMP             R3, #0x8000
BNE             loc_5E39C
MOV             R3, #1
MOV             R4, SP
STR             R3, [R2]
BL              getpid
MOV             R2, #0xE
MOV             R1, R4
BL              sub_16EB0
MOV             R3, #0xA
SUB             R2, R0, R4
STRB            R3, [R0]
ADD             R2, R2, #1 ; n
MOV             R1, R4  ; buf
MOV             R0, R5  ; fd
BL              sub_17FB8

loc_5E38C               ; fd
MOV             R0, R5
BL              close

loc_5E394
ADD             SP, SP, #0x7C ; '|'
POP             {R4,R5,PC}

loc_5E39C
MOV             R3, #0
STR             R3, [R2]
B               loc_5E38C
; End of function sub_5E30C

off_5E3A8 DCD dword_7DBC8



; int __fastcall sub_5E3AC(int, char *s, int, const char *)
sub_5E3AC
PUSH            {R4-R10,LR}
MOV             R4, R1
LDR             R9, =(asc_6B39D+1) ; ""
MOV             R8, R3
SUB             R7, R0, #4
MOV             R5, R2
LDR             R10, =(aSSS_0+6) ; "%s%s"
MOV             R6, #0

loc_5E3CC
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_5E3E0
MOV             R0, R5
POP             {R4-R10,PC}

loc_5E3E0
LDR             R3, [R7,#4]!
TST             R5, R3
BEQ             loc_5E410
CMP             R6, #0
MOV             R2, R4
MOVNE           R1, R6
MOVEQ           R1, R9
MOV             R0, R10 ; format
MOV             R6, R8
BL              printf
LDR             R3, [R7]
BIC             R5, R5, R3

loc_5E410               ; s
MOV             R0, R4
BL              strlen
ADD             R0, R0, #1
ADD             R4, R4, R0
B               loc_5E3CC
; End of function sub_5E3AC

off_5E424 DCD asc_6B39D+1 ; ""
off_5E428 DCD aSSS_0+6  ; "%s%s"



; int __fastcall sub_5E42C(int, int)
sub_5E42C

var_C= -0xC

PUSH            {R0-R2,R4-R9,LR}
MOV             R4, R0
MOV             R0, R1
LDR             R8, =aUSS ; "%*u%s%s\n"
BL              sub_61CD8
LDR             R9, =stdout
MOV             R7, R0
LDR             R5, [R4,#4]

loc_5E44C
MOV             R0, R7
BL              sub_58D24
SUBS            R6, R0, #0
BNE             loc_5E470
STR             R5, [R4,#4]
MOV             R0, R7
ADD             SP, SP, #0xC
POP             {R4-R9,LR}
B               fclose

loc_5E470
LDR             R3, [R4,#0x14]
CMP             R3, #0
BNE             loc_5E494
LDR             R3, [R4,#0x18]
CMP             R3, #0
BEQ             loc_5E4C0
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_5E4C0

loc_5E494
LDR             R3, [R4,#0xC]
MOV             R2, R5
STR             R6, [SP,#0xC+var_C]
MOV             R0, R8  ; format
LDR             R1, [R4]
BL              printf
LDR             R3, [R4,#8]
ADD             R5, R5, R3

loc_5E4B4               ; ptr
MOV             R0, R6
BL              free
B               loc_5E44C

loc_5E4C0
LDR             R0, [R4,#0x10]
CMP             R0, #0
BEQ             loc_5E4B4
LDR             R1, [R9]
BL              fputs_unlocked
B               loc_5E4B4
; End of function sub_5E42C

off_5E4D8 DCD aUSS      ; "%*u%s%s\n"
off_5E4DC DCD stdout



; int __fastcall sub_5E4E0(__int16, FILE *stream)
sub_5E4E0
AND             R3, R0, #0x180
PUSH            {R4-R6,LR}
CMP             R3, #0x180
MOV             R4, R0
MOV             R5, R1
BNE             loc_5E504
AND             R4, R4, #0x7F
LDR             R0, =aM_0 ; "M-"
BL              fputs_unlocked

loc_5E504
UXTB            R4, R4
CMP             R4, #0x9B
BEQ             loc_5E538
CMP             R4, #0x1F
ADDLE           R4, R4, #0x40 ; '@'
BLE             loc_5E53C
CMP             R4, #0x7F
MOVEQ           R4, #0x3F ; '?'
BEQ             loc_5E53C

loc_5E528
MOV             R1, R5
MOV             R0, R4
POP             {R4-R6,LR}
B               putc_unlocked

loc_5E538
MOV             R4, #0x7B ; '{'

loc_5E53C               ; stream
MOV             R1, R5
MOV             R0, #0x5E ; '^' ; c
BL              putc_unlocked
B               loc_5E528
; End of function sub_5E4E0

off_5E54C DCD aM_0      ; "M-"



; unsigned int __fastcall sub_5E550(unsigned int result, _BYTE *, char)
sub_5E550
CMP             R0, #9
BNE             loc_5E580
TST             R2, #2
BEQ             loc_5E598

loc_5E560
CMP             R0, #0x7F
CMPNE           R0, #0x1F
BHI             loc_5E598
EOR             R0, R0, #0x40 ; '@'
MOV             R3, #0x5E ; '^'
STRB            R3, [R1]

loc_5E578
ADD             R1, R1, #1
B               loc_5E598

loc_5E580
CMP             R0, #0xA
BNE             loc_5E5A8
TST             R2, #1
MOVNE           R3, #0x24 ; '$'
STRBNE          R3, [R1]
BNE             loc_5E578

loc_5E598
MOV             R3, #0
STRB            R0, [R1]
STRB            R3, [R1,#1]
BX              LR

loc_5E5A8
CMP             R0, #0x7F
BLS             loc_5E560
MOV             R3, R1
MOV             R2, #0x4D ; 'M'
STRB            R2, [R3],#2
MOV             R2, #0x2D ; '-'
STRB            R2, [R1,#1]
SUB             R0, R0, #0x80
MOV             R1, R3
B               loc_5E560
; End of function sub_5E550




; const char *__fastcall sub_5E5D0(int *, _BYTE *)
sub_5E5D0
PUSH            {R4,LR}
MOV             R2, R1
MOV             R4, R0
MOV             R0, R1

loc_5E5E0
MOV             R12, R2
LDRB            R1, [R12],#1
CMP             R1, #0
BNE             loc_5E60C
CMP             R4, #0
POPEQ           {R4,PC}
SUB             R2, R2, R0
STR             R2, [R4]
STR             R2, [R4,#4]
STR             R2, [R4,#8]
POP             {R4,PC}

loc_5E60C
SUB             R1, R1, #0x20 ; ' '
MOV             R2, R12
CMP             R1, #0x5E ; '^'
BLS             loc_5E5E0
BL              sub_174F8
MOV             R12, #0x3F ; '?'
MOV             R3, R0

loc_5E628
MOV             R2, R3
LDRB            R1, [R2],#1
CMP             R1, #0
BEQ             loc_5E64C
SUB             R1, R1, #0x20 ; ' '
MOV             R3, R2
CMP             R1, #0x5E ; '^'
STRBHI          R12, [R2,#-1]
B               loc_5E628

loc_5E64C
CMP             R4, #0
SUBNE           R3, R3, R0
STRNE           R3, [R4]
STRNE           R3, [R4,#4]
STRNE           R3, [R4,#8]
POP             {R4,LR}
B               sub_57710
; End of function sub_5E5D0




; int __fastcall sub_5E668(unsigned __int8 **)
sub_5E668
LDR             R3, [R0]
PUSH            {R4-R6,LR}
LDRB            R2, [R3]
CMP             R2, #0x78 ; 'x'
MOV             R2, #0
ADDEQ           R3, R3, #1
MOVEQ           R4, #0x10
MOVEQ           R12, #1
MOVNE           R4, #8
MOVNE           R12, #0

loc_5E690
MOV             LR, R3
LDRB            R5, [R3],#1
ORR             R6, R5, #0x20 ; ' '
SUB             R1, R6, #0x30 ; '0'
CMP             R1, #9
SUBHI           R1, R6, #0x57 ; 'W'
CMP             R1, R4
BCC             loc_5E6CC
CMP             R4, #0x10
BNE             loc_5E6F0
CMP             R12, #1
BEQ             loc_5E724

loc_5E6C0
STR             LR, [R0]
UXTB            R0, R2
POP             {R4-R6,PC}

loc_5E6CC
MLA             R1, R4, R2, R1
CMP             R1, #0xFF
BHI             loc_5E6F0
ADD             R12, R12, #1
MOV             LR, R3
CMP             R12, #3
MOV             R2, R1
BNE             loc_5E690
B               loc_5E6C0

loc_5E6F0
CMP             R12, #0
BNE             loc_5E6C0
LDR             R3, =aAbefnrtv ; "abefnrtv\\"

loc_5E6FC
LDRB            R2, [R3]
CMP             R2, R5
BNE             loc_5E714
ADD             LR, LR, #1

loc_5E70C
LDRB            R2, [R3,#0xA]
B               loc_5E6C0

loc_5E714
LDRB            R2, [R3,#1]!
CMP             R2, #0
BNE             loc_5E6FC
B               loc_5E70C

loc_5E724
MOV             R0, #0x5C ; '\'
POP             {R4-R6,PC}
; End of function sub_5E668

off_5E72C DCD aAbefnrtv ; "abefnrtv\\"



; _BYTE *__fastcall sub_5E730(_BYTE *, unsigned __int8 *, unsigned __int8 *)
sub_5E730

var_8= -8
var_4= -4

PUSH            {R0-R2,R4-R7,LR}
MOV             R5, R0
ADD             R6, SP, #0xC+var_4
STR             R1, [R6,#-4]!

loc_5E740
LDR             R3, [SP,#0xC+var_8]
MOV             R7, R5
ADD             R2, R3, #1
STR             R2, [SP,#0xC+var_8]
LDRB            R4, [R3]
CMP             R4, #0x5C ; '\'
MOVNE           R0, R4
BNE             loc_5E768
MOV             R0, R6
BL              sub_5E668

loc_5E768
CMP             R4, #0
STRB            R0, [R5],#1
BNE             loc_5E740
MOV             R0, R7
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_5E730




; int __fastcall sub_5E780(int, int, int (__fastcall *)(int))
sub_5E780
PUSH            {R4-R10,LR}
MOV             R4, R0
LDM             R0, {R0,R6}
MOV             R12, #0

loc_5E790
CMP             R6, R12
BGT             loc_5E7EC
ADD             R3, R6, #1
MOV             R7, R6,LSL#5
MOV             R5, R1
STR             R3, [R4,#4]
MOV             R8, R2
MOVW            R1, #0x2002
MOV             R2, R6
BL              sub_62544
STR             R0, [R4]
ADD             R9, R0, R7
STR             R5, [R0,R6,LSL#5]
MOV             R0, R5
BLX             R8
MOV             R2, #0x1C
MOV             R1, R0
ADD             R0, R9, #4
BL              sub_60B34
LDR             R0, [R4]
ADD             R0, R0, R7
ADD             R0, R0, #4
POP             {R4-R10,PC}

loc_5E7EC
LDR             LR, [R0,R12,LSL#5]
ADD             R3, R0, R12,LSL#5
CMP             LR, R1
BNE             loc_5E804
ADD             R0, R3, #4
POP             {R4-R10,PC}

loc_5E804
ADD             R12, R12, #1
B               loc_5E790
; End of function sub_5E780




; ssize_t __fastcall sub_5E80C(int, void *)
sub_5E80C
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R1, #0
BL              open64
SUBS            R6, R0, #0
MOVLT           R4, #0xFFFFFFFF
BLT             loc_5E840
MOVW            R2, #0x3FF ; nbytes
MOV             R1, R5  ; buf
BL              read
MOV             R4, R0
MOV             R0, R6  ; fd
BL              close

loc_5E840
BIC             R3, R4, R4,ASR#31
MOV             R2, #0
MOV             R0, R4
STRB            R2, [R5,R3]
POP             {R4-R6,PC}
; End of function sub_5E80C




; void sub_5E854()
sub_5E854
PUSH            {R4-R6,LR}
MOV             R4, #0
LDR             R5, =dword_7D764
LDR             R0, [R5] ; ptr
BL              free
STR             R4, [R5]
STR             R4, [R5,#(dword_7D768 - 0x7D764)]
LDR             R5, =dword_7D75C
LDR             R0, [R5] ; ptr
BL              free
STR             R4, [R5]
STR             R4, [R5,#(dword_7D760 - 0x7D75C)]
POP             {R4-R6,PC}
; End of function sub_5E854

off_5E888 DCD dword_7D764
off_5E88C DCD dword_7D75C



; int __fastcall sub_5E890(int)
sub_5E890
MOV             R1, R0
LDR             R2, =sub_57B14
LDR             R0, =dword_7D764
B               sub_5E780
; End of function sub_5E890

off_5E8A0 DCD sub_57B14
off_5E8A4 DCD dword_7D764



; int __fastcall sub_5E8A8(int)
sub_5E8A8
MOV             R1, R0
LDR             R2, =sub_57B34
LDR             R0, =dword_7D75C
B               sub_5E780
; End of function sub_5E8A8

off_5E8B8 DCD sub_57B34
off_5E8BC DCD dword_7D75C



; void __fastcall sub_5E8C0(int)
sub_5E8C0
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0] ; dirp
BL              closedir
LDR             R0, [R4,#8] ; ptr
BL              free
LDR             R0, [R4,#0xC] ; ptr
BL              free
MOV             R0, R4
POP             {R4,LR}
B               free
; End of function sub_5E8C0




; char *__fastcall sub_5E8EC(char *, int)
sub_5E8EC

var_474= -0x474
var_470= -0x470
var_46C= -0x46C
var_468= -0x468
var_464= -0x464
var_460= -0x460
var_45C= -0x45C
var_458= -0x458
var_454= -0x454
var_448= -0x448
var_444= -0x444
var_440= -0x440
var_43C= -0x43C
s= -0x438
var_404= -0x404
var_3EC= -0x3EC
var_3E8= -0x3E8

PUSH            {R4-R9,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0x470
MOV             R5, R1
SUB             SP, SP, #4
BNE             loc_5E940
BL              getpagesize
MOV             R6, R0
MOV             R0, #0x58 ; 'X'
BL              sub_174DC
MOV             R4, R0
LDR             R0, =(aNoProcessInfoI+0x13) ; "/proc"
BL              sub_17980
STR             R0, [R4]

loc_5E924
MOVS            R6, R6,LSR#1
LDRB            R3, [R4,#4]
ADDNE           R3, R3, #1
STRBNE          R3, [R4,#4]
BNE             loc_5E924
SUB             R3, R3, #0xA
STRB            R3, [R4,#5]

loc_5E940
LDR             R8, =0x47E2E
LDR             R9, =dword_7DB94
AND             R8, R8, R5

loc_5E94C
LDR             R0, [R4]
BL              readdir64
SUBS            R6, R0, #0
BNE             loc_5E978
MOV             R0, R4
MOV             R4, R6
BL              sub_5E8C0

loc_5E968
MOV             R0, R4
ADD             SP, SP, #0x470
ADD             SP, SP, #4
POP             {R4-R9,PC}

loc_5E978
MOV             R1, #0
ADD             R0, R6, #0x13
MOV             R2, #0xA
BL              sub_18990
LDR             R3, [R9]
MOV             R6, R0
LDR             R1, [R3] ; c
CMP             R1, #0
BNE             loc_5E94C
MOV             R2, #0x48 ; 'H' ; n
ADD             R0, R4, #0x10 ; s
BL              memset
BICS            R3, R5, #1
STR             R6, [R4,#0x24]
BEQ             loc_5E968
MOV             R2, R6
LDR             R1, =aProcU ; "/proc/%u/"
ADD             R0, SP, #0x474+s ; s
BL              sprintf
TST             R5, #0x10
ADD             R3, SP, #0x474+s
ADD             R6, R3, R0
BEQ             loc_5E9F8
ADD             R1, SP, #0x474+var_404
MOV             R0, R3
BLX             sub_62DFC
CMP             R0, #0
BNE             loc_5E94C
LDR             R3, [SP,#0x474+var_3EC]
STR             R3, [R4,#0x34]
LDR             R3, [SP,#0x474+var_3E8]
STR             R3, [R4,#0x38]

loc_5E9F8
CMP             R8, #0
BEQ             loc_5EB40
LDR             R1, =(aProcStat+6) ; "stat"
MOV             R0, R6  ; dest
BL              strcpy
ADD             R1, SP, #0x474+var_404
ADD             R0, SP, #0x474+s
BL              sub_5E80C
CMP             R0, #0
BLT             loc_5E94C
MOV             R1, #0x29 ; ')' ; c
ADD             R0, SP, #0x474+var_404 ; s
BL              strrchr
MOV             R3, #0
MOV             R7, R0
STRB            R3, [R7],#2
MOV             R1, #0x28 ; '(' ; c
ADD             R0, SP, #0x474+var_404 ; s
BL              strchr
MOV             R2, #0x10
ADD             R1, R0, #1
ADD             R0, R4, #0x48 ; 'H'
BL              sub_60B34
ADD             R3, SP, #0x474+var_43C
ADD             R2, SP, #0x474+var_448
STR             R3, [SP,#0x474+var_454]
ADD             R3, SP, #0x474+var_440
STR             R3, [SP,#0x474+var_458]
ADD             R3, R4, #0x20 ; ' '
STR             R3, [SP,#0x474+var_45C]
ADD             R3, SP, #0x474+var_444
STR             R2, [SP,#0x474+var_460]
ADD             R2, R4, #0x18
STR             R3, [SP,#0x474+var_46C]
ADD             R3, R4, #0x30 ; '0'
STR             R2, [SP,#0x474+var_464]
ADD             R2, R4, #0x1C
STR             R3, [SP,#0x474+var_470]
ADD             R3, R4, #0x2C ; ','
STR             R2, [SP,#0x474+var_468]
MOV             R0, R7  ; s
STR             R3, [SP,#0x474+var_474]
ADD             R2, R4, #0x44 ; 'D'
ADD             R3, R4, #0x28 ; '('
LDR             R1, =aCUUUDSSSSSSLuL ; "%c %u %u %u %d %*s %*s %*s %*s %*s %*s "...
BL              sscanf
CMP             R0, #0xA
BLE             loc_5E94C
LDRB            R2, [R4,#5]
LDR             R3, [SP,#0x474+var_43C]
LDR             R1, [SP,#0x474+var_440]
MOV             R3, R3,LSL R2
LDR             R2, [SP,#0x474+var_444]
MOV             R1, R1,LSR#10
STR             R3, [R4,#0x14]
UBFX            R3, R2, #8, #0xC
CMP             R1, #0
STR             R3, [R4,#0x3C]
LDR             R3, =0xFFF00
STR             R1, [R4,#0x10]
AND             R3, R3, R2,ASR#12
UXTB            R2, R2
ORR             R3, R3, R2
STR             R3, [R4,#0x40]
MOV             R3, #0x20 ; ' '
STRB            R3, [R4,#0x45]
STRB            R3, [R4,#0x46]
BNE             loc_5EB20
LDRB            R3, [R4,#0x44]
CMP             R3, #0x5A ; 'Z'
MOVNE           R3, #0x57 ; 'W'
STRBNE          R3, [R4,#0x45]
MOVNE           R3, #2
BNE             loc_5EB24

loc_5EB20
MOV             R3, #1

loc_5EB24
LDR             R2, [SP,#0x474+var_448]
CMP             R2, #0
BEQ             loc_5EB40
ADD             R3, R4, R3
MOVLT           R2, #0x3C ; '<'
MOVGE           R2, #0x4E ; 'N'
STRB            R2, [R3,#0x44]

loc_5EB40
TST             R5, #0x100
BEQ             loc_5EB68
LDR             R1, =(aProcUExe+9) ; "exe"
MOV             R0, R6  ; dest
BL              strcpy
LDR             R0, [R4,#0xC] ; ptr
BL              free
ADD             R0, SP, #0x474+s
BL              sub_17B80
STR             R0, [R4,#0xC]

loc_5EB68
LDR             R3, =dword_10080
TST             R5, R3
BEQ             loc_5E968
LDR             R0, [R4,#8] ; ptr
BL              free
MOV             R3, #0
LDR             R1, =(aSCmdline+3) ; src
STR             R3, [R4,#8]
MOV             R0, R6  ; dest
BL              strcpy
ADD             R1, SP, #0x474+var_404
ADD             R0, SP, #0x474+s
BL              sub_5E80C
SUBS            R1, R0, #0
BLE             loc_5E968
ANDS            R5, R5, #0x10000
BEQ             loc_5EBC4
STRH            R1, [R4,#6]
ADD             R0, SP, #0x474+var_404
ADD             R1, R1, #1
BL              sub_1756C

loc_5EBBC
STR             R0, [R4,#8]
B               loc_5E968

loc_5EBC4
STRH            R5, [R4,#6]
ADD             R0, SP, #0x474+var_404
BL              sub_174F8
B               loc_5EBBC
; End of function sub_5E8EC

off_5EBD4 DCD aNoProcessInfoI+0x13 ; "/proc"
dword_5EBD8 DCD 0x47E2E
off_5EBDC DCD dword_7DB94
off_5EBE0 DCD aProcU    ; "/proc/%u/"
off_5EBE4 DCD aProcStat+6 ; "stat"
off_5EBE8 DCD aCUUUDSSSSSSLuL ; "%c %u %u %u %d %*s %*s %*s %*s %*s %*s "...
dword_5EBEC DCD 0xFFF00
off_5EBF0 DCD aProcUExe+9 ; "exe"
off_5EBF4 DCD dword_10080
off_5EBF8 DCD aSCmdline+3 ; "cmdline"



; char *__fastcall sub_5EBFC(char *, signed int, int, const char *)
sub_5EBFC
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x20
MOV             R4, R0
MOV             R6, R1
MOV             R0, SP  ; s
MOV             R7, R3
LDR             R1, =aProcUCmdline ; "/proc/%u/cmdline"
BL              sprintf
SUB             R2, R6, #1
MOV             R1, R4
MOV             R0, SP
BL              sub_180C8
SUBS            R5, R0, #0
BLE             loc_5ED24
MOV             R3, #0
STRB            R3, [R4,R5]

loc_5EC3C
SUBS            R5, R5, #1
BCC             loc_5EC50
LDRB            R3, [R4,R5]
CMP             R3, #0
BEQ             loc_5EC3C

loc_5EC50
MOV             R1, #0x20 ; ' '
MOV             R0, R4
BL              strchrnul
MOV             R3, #0
ADD             R5, R5, #1
STRB            R3, [R0]
MOV             R0, R4
BL              sub_169FC
ADD             R5, R4, R5
MOV             R8, R0
MOV             R3, #0x20 ; ' '

loc_5EC7C
CMP             R5, R4
BNE             loc_5ED14
LDRB            R3, [R8]
CMP             R3, #0x2D ; '-'
ADDEQ           R8, R8, #1
CMP             R7, #0
BEQ             loc_5ED0C
MOV             R0, R7  ; s
BL              strlen
MOV             R1, R7  ; s2
MOV             R2, R0  ; n
MOV             R5, R0
MOV             R0, R8  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_5ED0C
ADD             R5, R5, #3
CMP             R6, R5
BLE             loc_5ECD8
SUB             R2, R6, R5 ; n
MOV             R1, R4  ; src
ADD             R0, R4, R5 ; dest
BL              memmove

loc_5ECD8
MOV             R3, R7
LDR             R2, =aS_5 ; "{%s}"
MOV             R1, R6  ; maxlen
MOV             R0, R4  ; s
BL              snprintf
CMP             R6, R5
BLE             loc_5ED0C
ADD             R5, R4, R5
MOV             R3, #0x20 ; ' '
STRB            R3, [R5,#-1]
ADD             R4, R4, R6
MOV             R3, #0
STRB            R3, [R4,#-1]

loc_5ED0C
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R8,PC}

loc_5ED14
LDRB            R2, [R5,#-1]!
CMP             R2, #0x1F
STRBLS          R3, [R5]
B               loc_5EC7C

loc_5ED24
CMP             R7, #0
LDR             R3, =(asc_6B6A4+0x15) ; "?"
LDR             R2, =aS_6 ; "[%s]"
MOVNE           R3, R7
MOV             R1, R6  ; maxlen
MOV             R0, R4  ; s
BL              snprintf
B               loc_5ED0C
; End of function sub_5EBFC

off_5ED44 DCD aProcUCmdline ; "/proc/%u/cmdline"
off_5ED48 DCD aS_5      ; "{%s}"
off_5ED4C DCD asc_6B6A4+0x15 ; "?"
off_5ED50 DCD aS_6      ; "[%s]"



; int __fastcall sub_5ED54(char)
sub_5ED54
ANDS            R0, R0, #0x3F ; '?'
BEQ             loc_5ED84
CMP             R0, #1
BEQ             loc_5ED8C
CMP             R0, #0xB
BGT             loc_5ED74
ADD             R0, R0, #0x2E ; '.'
BX              LR

loc_5ED74
CMP             R0, #0x25 ; '%'
ADDLE           R0, R0, #0x35 ; '5'
ADDGT           R0, R0, #0x3B ; ';'
BX              LR

loc_5ED84
MOV             R0, #0x2E ; '.'
BX              LR

loc_5ED8C
MOV             R0, #0x2F ; '/'
BX              LR
; End of function sub_5ED54




; _BYTE *__fastcall sub_5ED94(_BYTE *result, unsigned int, int)
sub_5ED94
ADD             R2, R0, R2
MOV             R3, R0
CMP             R0, R2
BXEQ            LR
PUSH            {R4,LR}

loc_5EDA8
MOV             R0, R1
BL              sub_5ED54
STRB            R0, [R3],#1
CMP             R3, R2
MOV             R1, R1,LSR#6
BNE             loc_5EDA8
MOV             R0, R3
POP             {R4,PC}
; End of function sub_5ED94




; unsigned int __fastcall sub_5EDC8(unsigned int)
sub_5EDC8
CMP             R0, #0x7A ; 'z'
BHI             loc_5EE0C
CMP             R0, #0x60 ; '`'
BLS             loc_5EDE0
SUB             R0, R0, #0x3B ; ';'
BX              LR

loc_5EDE0
CMP             R0, #0x5A ; 'Z'
BHI             loc_5EE0C
CMP             R0, #0x40 ; '@'
BLS             loc_5EDF8
SUB             R0, R0, #0x35 ; '5'
BX              LR

loc_5EDF8
SUB             R0, R0, #0x2E ; '.'
UXTB            R3, R0
CMP             R3, #0xB
MOVHI           R0, #0
BX              LR

loc_5EE0C
MOV             R0, #0
BX              LR
; End of function sub_5EDC8




; int __fastcall sub_5EE14(int, unsigned int)
sub_5EE14
MOV             R3, R0
PUSH            {R4,LR}
MOV             R0, R1,LSR#18
BL              sub_5ED54
STRB            R0, [R3]
MOV             R0, R1,LSR#12
BL              sub_5ED54
STRB            R0, [R3,#1]
MOV             R0, R1,LSR#6
BL              sub_5ED54
STRB            R0, [R3,#2]
MOV             R0, R1
BL              sub_5ED54
STRB            R0, [R3,#3]
POP             {R4,PC}
; End of function sub_5EE14




; char *__fastcall sub_5EE50(char *, char *, char *)
sub_5EE50

var_F9= -0xF9
var_F8= -0xF8
var_F4= -0xF4
var_F3= -0xF3
var_ED= -0xED
var_E8= -0xE8
var_E4= -0xE4
var_74= -0x74

PUSH            {R4-R11,LR}
MOV             R8, R0
SUB             SP, SP, #0xFC
MOV             R9, R1
MOV             R10, R2
MOV             R4, #3

loc_5EE68
LDRB            R3, [R10,R4]
CMP             R3, #0x24 ; '$'
CMPNE           R3, #0
BEQ             loc_5EE84
ADD             R4, R4, #1
CMP             R4, #0xB
BNE             loc_5EE68

loc_5EE84
ADD             R0, SP, #0xFC+var_E4
ADD             R6, SP, #0xFC+var_F8
BL              sub_59FE0
MOV             R0, R9  ; s
BL              strlen
MOV             R1, R9  ; src
MOV             R7, R0
MOV             R2, R0  ; n
MOV             R5, R0
ADD             R0, SP, #0xFC+var_E4 ; int
MOV             R11, R7
BL              sub_5A024
MOV             R2, R4  ; n
MOV             R1, R10 ; src
ADD             R0, SP, #0xFC+var_E4 ; int
BL              sub_5A024
MOV             R2, R4  ; n
MOV             R1, R10 ; src
MOV             R0, R8  ; dest
ADD             R10, R10, #3
BL              memcpy
MOV             R3, #0x24 ; '$'
ADD             R0, SP, #0xFC+var_74
STRB            R3, [R8,R4]
SUB             R4, R4, #3
BL              sub_59FE0
MOV             R2, R7  ; n
MOV             R1, R9  ; src
ADD             R0, SP, #0xFC+var_74 ; int
BL              sub_5A024
MOV             R2, R4  ; n
MOV             R1, R10 ; src
ADD             R0, SP, #0xFC+var_74 ; int
BL              sub_5A024
MOV             R2, R7  ; n
MOV             R1, R9  ; src
ADD             R0, SP, #0xFC+var_74 ; int
BL              sub_5A024
MOV             R1, R6
ADD             R0, SP, #0xFC+var_74
BL              sub_5A08C

loc_5EF28
CMP             R11, #0
BGT             loc_5F05C
MOV             R2, #0x11 ; n
MOV             R1, #0  ; c
MOV             R0, R6  ; s
BL              memset

loc_5EF40
CMP             R5, #0
BNE             loc_5F07C
MOV             R1, R6
ADD             R0, SP, #0xFC+var_E4
BL              sub_5A08C

loc_5EF54
ADD             R0, SP, #0xFC+var_74
BL              sub_59FE0
ANDS            R11, R5, #1
ADD             R0, SP, #0xFC+var_74 ; int
MOVNE           R1, R9
MOVEQ           R1, R6  ; src
MOVNE           R2, R7
MOVEQ           R2, #0x10 ; n
BL              sub_5A024
MOV             R1, #3
MOV             R0, R5
BLX             sub_161AC
CMP             R1, #0
BEQ             loc_5EF9C
MOV             R2, R4  ; n
MOV             R1, R10 ; src
ADD             R0, SP, #0xFC+var_74 ; int
BL              sub_5A024

loc_5EF9C
MOV             R1, #7
MOV             R0, R5
BLX             sub_161AC
CMP             R1, #0
BEQ             loc_5EFC0
MOV             R2, R7  ; n
MOV             R1, R9  ; src
ADD             R0, SP, #0xFC+var_74 ; int
BL              sub_5A024

loc_5EFC0
CMP             R11, #0
ADD             R0, SP, #0xFC+var_74 ; int
MOVNE           R1, R6
MOVEQ           R1, R9  ; src
MOVNE           R2, #0x10
MOVEQ           R2, R7  ; n
BL              sub_5A024
ADD             R5, R5, #1
MOV             R1, R6
ADD             R0, SP, #0xFC+var_74
BL              sub_5A08C
CMP             R5, #0x3E8
BNE             loc_5EF54
ADD             R3, R4, #4
LDRB            R2, [SP,#0xFC+var_F3]
ADD             R3, R8, R3
ADD             R4, SP, #0xFC+var_F9
ADD             R5, SP, #0xFC+var_F4
STRB            R2, [SP,#0xFC+var_E8]

loc_5F00C
LDRB            R2, [R4,#1]!
LDRB            R1, [R4,#6]
LDRB            R0, [R4,#0xC]
MOV             R1, R1,LSL#8
ORR             R1, R1, R2,LSL#16
MOV             R2, #4
ORR             R1, R1, R0
MOV             R0, R3
BL              sub_5ED94
CMP             R5, R4
MOV             R3, R0
BNE             loc_5F00C
MOV             R2, #2
LDRB            R1, [SP,#0xFC+var_ED]
BL              sub_5ED94
MOV             R3, #0
STRB            R3, [R0]
MOV             R0, R8
ADD             SP, SP, #0xFC
POP             {R4-R11,PC}

loc_5F05C
CMP             R11, #0x10
MOV             R1, R6  ; src
MOVLT           R2, R11
MOVGE           R2, #0x10 ; n
ADD             R0, SP, #0xFC+var_E4 ; int
SUB             R11, R11, #0x10
BL              sub_5A024
B               loc_5EF28

loc_5F07C
TST             R5, #1
MOV             R2, #1  ; n
MOVNE           R1, R6
MOVEQ           R1, R9  ; src
ADD             R0, SP, #0xFC+var_E4 ; int
MOV             R5, R5,ASR#1
BL              sub_5A024
B               loc_5EF40
; End of function sub_5EE50




; _BYTE *__fastcall sub_5F09C(const char *, char *s)
sub_5F09C

var_240= -0x240
dest= -0x23C
var_238= -0x238
var_234= -0x234
var_230= -0x230
var_22C= -0x22C
var_228= -0x228
var_224= -0x224
var_206= -0x206
var_1E5= -0x1E5
src= -0x1E4
var_1A4= -0x1A4
var_D4= -0xD4
var_4= -4

PUSH            {R4-R11,LR}
MOV             R8, R1
SUB             SP, SP, #0x244
MOV             R4, R0
MOV             R0, R1  ; s
ADD             R7, R8, #3
BL              strlen
LDRB            R2, [R8,#1]
ADD             R11, SP, #0x244+var_224
CMP             R2, #0x36 ; '6'
ADDEQ           R3, R0, #0x58 ; 'X'
ADDNE           R3, R0, #0x2D ; '-'
MOV             R0, R3
MOVEQ           R6, #0x40 ; '@'
MOVNE           R6, #0x20 ; ' '
BL              sub_174DC
LDRB            R2, [R8,#1]
MOV             R3, #0x24 ; '$'
STR             R0, [SP,#0x244+var_230]
ADD             R5, R0, #3
STRB            R3, [R0]
STRB            R2, [R0,#1]
MOV             R2, #7  ; n
STRB            R3, [R0,#2]
MOV             R0, R7  ; s1
LDR             R1, =aRoundsU ; "rounds=%u$"
BL              strncmp
CMP             R0, #0
BNE             loc_5F458
MOV             R2, #0xA
MOV             R1, R11
ADD             R0, R8, R2
BL              sub_18990
LDR             R3, [SP,#0x244+var_224]
LDRB            R2, [R3]
CMP             R2, #0x24 ; '$'
BNE             loc_5F458
ADD             R7, R3, #1
LDR             R3, =0x3B9AC9FF
LDR             R1, =aRoundsU ; "rounds=%u$"
CMP             R0, R3
MOVCC           R3, R0
MOV             R0, R5  ; s
CMP             R3, #0x3E8
MOVCC           R3, #0x3E8
MOV             R2, R3
STR             R3, [SP,#0x244+var_240]
BL              sprintf
ADD             R5, R5, R0

loc_5F160
MOV             R1, #0x24 ; '$'
MOV             R0, R7
BL              strchrnul
SUB             R0, R0, R7
CMP             R0, #0x10
MOVCC           R8, R0
MOVCS           R8, #0x10
MOV             R1, R8
MOV             R0, R7
BL              sub_1751C
MOV             R1, R0  ; src
STR             R0, [SP,#0x244+dest]
MOV             R0, R5  ; dest
ADD             R7, SP, #0x244+var_1A4
BL              strcpy
ADD             R3, R5, R8
MOV             R0, R4  ; s
ADD             R3, R3, #1
STR             R3, [SP,#0x244+var_22C]
MOV             R3, #0x24 ; '$'
STRB            R3, [R5,R8]
BL              strlen
MOV             R10, R0
MOV             R0, R4
BL              sub_174F8
LDR             R2, =sub_5A248
CMP             R6, #0x20 ; ' '
LDR             R3, =sub_5A1E8
MOV             R9, R0
LDR             R5, =sub_5A150
MOV             R0, R7
MOVNE           R3, R2
LDR             R2, =sub_5A10C
STR             R3, [SP,#0x244+var_234]
LDR             R3, =sub_5A024
MOVEQ           R5, R3
LDR             R3, =sub_5A0C4
MOVNE           R3, R2
STR             R3, [SP,#0x244+var_238]
BLX             R3 ; sub_5A0C4 sub_5A10C
MOV             R2, R10 ; n
MOV             R1, R9  ; src
MOV             R0, R7  ; int
BLX             R5 ; sub_5A024 sub_5A150
MOV             R2, R8  ; n
LDR             R1, [SP,#0x244+dest] ; src
MOV             R0, R7  ; int
BLX             R5 ; sub_5A024 sub_5A150
LDR             R3, [SP,#0x244+var_238]
ADD             R0, SP, #0x244+var_D4
BLX             R3 ; sub_5A0C4 sub_5A10C
MOV             R2, R10 ; n
MOV             R1, R9  ; src
ADD             R0, SP, #0x244+var_D4 ; int
BLX             R5 ; sub_5A024 sub_5A150
MOV             R2, R8  ; n
LDR             R1, [SP,#0x244+dest] ; src
ADD             R0, SP, #0x244+var_D4 ; int
BLX             R5 ; sub_5A024 sub_5A150
MOV             R2, R10 ; n
MOV             R1, R9  ; src
ADD             R0, SP, #0x244+var_D4 ; int
BLX             R5 ; sub_5A024 sub_5A150
LDR             R3, [SP,#0x244+var_234]
MOV             R1, R11
ADD             R0, SP, #0x244+var_D4
BLX             R3 ; sub_5A1E8 sub_5A248
MOV             R3, R10

loc_5F270
CMP             R6, R3
BCC             loc_5F464
MOV             R4, R10
MOV             R2, R3  ; n
MOV             R1, R11 ; src
MOV             R0, R7  ; int
BLX             R5 ; sub_5A024 sub_5A150

loc_5F28C
CMP             R4, #0
BNE             loc_5F484
ADD             R1, SP, #0x244+var_224
MOV             R0, R7
LDR             R3, [SP,#0x244+var_234]
ADD             R7, SP, #0x244+var_D4
MOV             R11, R4
BLX             R3 ; sub_5A1E8 sub_5A248
MOV             R0, R7
LDR             R3, [SP,#0x244+var_238]
BLX             R3 ; sub_5A0C4 sub_5A10C

loc_5F2B8
CMP             R11, R10
BNE             loc_5F4A8
ADD             R3, SP, #0x244+src
MOV             R0, R7
MOV             R1, R3
LDR             R3, [SP,#0x244+var_234]
BLX             R3 ; sub_5A1E8 sub_5A248
ADD             R3, SP, #0x244+src
MOV             R0, R9  ; dest
MOV             R10, R11
MOV             R7, R3

loc_5F2E4
CMP             R6, R10
BLS             loc_5F4C0
MOV             R2, R10 ; n
MOV             R1, R7  ; src
MOV             R10, #0
ADD             R7, SP, #0x244+var_D4
BL              memcpy
MOV             R0, R7
LDR             R3, [SP,#0x244+var_238]
BLX             R3 ; sub_5A0C4 sub_5A10C

loc_5F30C
LDRB            R3, [SP,#0x244+var_224]
ADD             R3, R3, #0x10
CMP             R3, R10
BHI             loc_5F4D8
ADD             R1, SP, #0x244+src
MOV             R0, R7
LDR             R3, [SP,#0x244+var_234]
MOV             R7, #0
BLX             R3 ; sub_5A1E8 sub_5A248
MOV             R2, R8  ; n
ADD             R1, SP, #0x244+src ; src
LDR             R0, [SP,#0x244+dest] ; dest
BL              memcpy

loc_5F340
LDR             R3, [SP,#0x244+var_238]
ADD             R0, SP, #0x244+var_1A4
BLX             R3 ; sub_5A0C4 sub_5A10C
ANDS            R10, R7, #1
ADD             R0, SP, #0x244+var_1A4 ; int
MOVNE           R1, R9
ADDEQ           R1, SP, #0x244+var_224 ; src
MOVNE           R2, R11
MOVEQ           R2, R6  ; n
BLX             R5 ; sub_5A024 sub_5A150
MOV             R1, #3
MOV             R0, R7
BLX             sub_15EFC
CMP             R1, #0
BEQ             loc_5F38C
MOV             R2, R8  ; n
LDR             R1, [SP,#0x244+dest] ; src
ADD             R0, SP, #0x244+var_1A4 ; int
BLX             R5 ; sub_5A024 sub_5A150

loc_5F38C
MOV             R1, #7
MOV             R0, R7
BLX             sub_15EFC
CMP             R1, #0
BEQ             loc_5F3B0
MOV             R2, R11 ; n
MOV             R1, R9  ; src
ADD             R0, SP, #0x244+var_1A4 ; int
BLX             R5 ; sub_5A024 sub_5A150

loc_5F3B0
CMP             R10, #0
ADD             R0, SP, #0x244+var_1A4 ; int
ADDNE           R1, SP, #0x244+var_224
MOVEQ           R1, R9  ; src
MOVNE           R2, R6
MOVEQ           R2, R11 ; n
BLX             R5 ; sub_5A024 sub_5A150
LDR             R3, [SP,#0x244+var_234]
ADD             R1, SP, #0x244+var_224
ADD             R0, SP, #0x244+var_1A4
ADD             R7, R7, #1
BLX             R3 ; sub_5A1E8 sub_5A248
LDR             R3, [SP,#0x244+var_240]
CMP             R3, R7
BHI             loc_5F340
CMP             R6, #0x20 ; ' '
BNE             loc_5F518

loc_5F3F4
ADD             R2, R4, #0xA
ADD             R5, R4, #0x14
CMP             R2, #0x1D
ADD             R3, SP, #0x244+var_4
SUBHI           R2, R4, #0x14
CMP             R5, #0x1D
ADD             R2, R3, R2
SUBHI           R5, R4, #0xA
ADD             R4, R3, R4
LDRB            R3, [R2,#-0x220]
LDRB            R1, [R4,#-0x220]
ADD             R2, SP, #0x244+var_4
ADD             R2, R2, R5
LDR             R0, [SP,#0x244+var_22C]
MOV             R3, R3,LSL#8
ORR             R3, R3, R1,LSL#16
LDRB            R1, [R2,#-0x220]
MOV             R2, #4
ORR             R1, R3, R1
BL              sub_5ED94
CMP             R5, #0x1D
STR             R0, [SP,#0x244+var_22C]
BEQ             loc_5F4F0
ADD             R4, R5, #1
B               loc_5F3F4

loc_5F458
MOVW            R3, #0x1388
STR             R3, [SP,#0x244+var_240]
B               loc_5F160

loc_5F464               ; n
MOV             R2, R6
MOV             R1, R11 ; src
MOV             R0, R7  ; int
STR             R3, [SP,#0x244+var_228]
BLX             R5 ; sub_5A024 sub_5A150
LDR             R3, [SP,#0x244+var_228]
SUB             R3, R3, R6
B               loc_5F270

loc_5F484
TST             R4, #1
MOV             R0, R7  ; int
MOVNE           R2, R6
MOVNE           R1, R11
MOVEQ           R2, R10 ; n
MOVEQ           R1, R9  ; src
BLX             R5 ; sub_5A024 sub_5A150
MOV             R4, R4,LSR#1
B               loc_5F28C

loc_5F4A8               ; n
MOV             R2, R10
MOV             R1, R9  ; src
MOV             R0, R7  ; int
ADD             R11, R11, #1
BLX             R5 ; sub_5A024 sub_5A150
B               loc_5F2B8

loc_5F4C0               ; n
MOV             R2, R6
MOV             R1, R7  ; src
BL              memcpy
SUB             R10, R10, R6
ADD             R0, R0, R6
B               loc_5F2E4

loc_5F4D8               ; n
MOV             R2, R8
LDR             R1, [SP,#0x244+dest] ; src
MOV             R0, R7  ; int
ADD             R10, R10, #1
BLX             R5 ; sub_5A024 sub_5A150
B               loc_5F30C

loc_5F4F0
LDRH            R1, [SP,#0x244+var_206]
MOV             R2, #3

loc_5F4F8
BL              sub_5ED94
MOV             R0, R9  ; ptr
BL              free
LDR             R0, [SP,#0x244+dest] ; ptr
BL              free
LDR             R0, [SP,#0x244+var_230]
ADD             SP, SP, #0x244
POP             {R4-R11,PC}

loc_5F518
ADD             R5, R4, #0x15
ADD             R2, R4, #0x2A ; '*'
CMP             R5, #0x3E ; '>'
ADD             R3, SP, #0x244+var_4
SUBHI           R5, R4, #0x2A ; '*'
CMP             R2, #0x3E ; '>'
SUBHI           R2, R4, #0x15
ADD             R4, R3, R4
ADD             R3, R3, R5
LDRB            R1, [R4,#-0x220]
LDRB            R3, [R3,#-0x220]
LDR             R0, [SP,#0x244+var_22C]
MOV             R3, R3,LSL#8
ORR             R3, R3, R1,LSL#16
ADD             R1, SP, #0x244+var_4
ADD             R2, R1, R2
LDRB            R1, [R2,#-0x220]
MOV             R2, #4
ORR             R1, R3, R1
BL              sub_5ED94
CMP             R5, #0x14
STR             R0, [SP,#0x244+var_22C]
ADDNE           R4, R5, #1
BNE             loc_5F518
MOV             R2, #2
LDRB            R1, [SP,#0x244+var_1E5]
B               loc_5F4F8
; End of function sub_5F09C

off_5F584 DCD aRoundsU  ; "rounds=%u$"
dword_5F588 DCD 0x3B9AC9FF
off_5F58C DCD sub_5A248
off_5F590 DCD sub_5A1E8
off_5F594 DCD sub_5A150
off_5F598 DCD sub_5A10C
off_5F59C DCD sub_5A024
off_5F5A0 DCD sub_5A0C4



; unsigned __int8 *__fastcall sub_5F5A4(int *, unsigned __int8 *, _BYTE *, unsigned __int8 *)
sub_5F5A4

var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x24
MOV             R5, R1
ADD             R1, SP, #0x24+var_C
MOV             R4, R0
MOV             R8, R3
MOV             R0, R1

loc_5F5C0
SUB             R3, R1, R0
CMP             R3, #8
BNE             loc_5FAEC
LDR             R1, [SP,#0x24+var_C]
LDR             R2, [SP,#0x24+var_8]
REV             R1, R1
REV             R2, R2
MOV             R9, R1,LSR#25
MOV             R7, R2,LSR#25
UBFX            R6, R1, #0x11, #7
ADD             R9, R4, R9,LSL#2
ADD             R6, R4, R6,LSL#2
ADD             R7, R4, R7,LSL#2
ADD             R3, R9, #0x4000
ADD             R10, R7, #0x4000
LDR             R3, [R3,#0x120]
LDR             R10, [R10,#0x920]
UBFX            LR, R1, #9, #7
ADD             LR, R4, LR,LSL#2
UBFX            R1, R1, #1, #7
ADD             R1, R4, R1,LSL#2
UBFX            R12, R2, #0x11, #7
ORR             R3, R3, R10
ADD             R12, R4, R12,LSL#2
ADD             R10, R6, #0x4000
LDR             R10, [R10,#0x320]
UBFX            R0, R2, #9, #7
ADD             R0, R4, R0,LSL#2
UBFX            R2, R2, #1, #7
ADD             R2, R4, R2,LSL#2
ADD             R9, R9, #0x5000
ORR             R3, R3, R10
ADD             R10, LR, #0x4000
ADD             R7, R7, #0x5000
LDR             R10, [R10,#0x520]
ADD             R6, R6, #0x5000
LDR             R7, [R7,#0x920]
ADD             LR, LR, #0x5000
LDR             R6, [R6,#0x320]
ORR             R3, R3, R10
ADD             R10, R1, #0x4000
LDR             R10, [R10,#0x720]
ADD             R1, R1, #0x5000
LDR             LR, [LR,#0x520]
LDR             R1, [R1,#0x720]
ORR             R3, R3, R10
ADD             R10, R12, #0x4000
LDR             R10, [R10,#0xB20]
ADD             R12, R12, #0x5000
ORR             R3, R3, R10
ADD             R10, R0, #0x4000
LDR             R10, [R10,#0xD20]
ADD             R0, R0, #0x5000
ORR             R3, R3, R10
ADD             R10, R2, #0x4000
LDR             R10, [R10,#0xF20]
ADD             R2, R2, #0x5000
LDR             R2, [R2,#0xF20]
ORR             R3, R3, R10
ADD             R10, R4, #0xA0
STR             R3, [SP,#0x24+var_20]
LDR             R3, [R9,#0x120]
MOV             R9, #0
ORR             R3, R3, R7
ORR             R3, R3, R6
ORR             R3, R3, LR
ORR             R3, R3, R1
LDR             R1, [R12,#0xB20]
ORR             R3, R3, R1
LDR             R1, [R0,#0xD20]
ORR             R3, R3, R1
ORR             R3, R3, R2
STR             R3, [SP,#0x24+var_1C]
LDR             R3, =unk_6BFB2
STR             R3, [SP,#0x24+var_14]
ADD             R3, R4, #0xE0
STR             R3, [SP,#0x24+var_10]

loc_5F6F4
LDR             R2, [SP,#0x24+var_14]
LDRB            R3, [R2,#1]!
ADD             R9, R9, R3
LDR             R3, [SP,#0x24+var_20]
STR             R2, [SP,#0x24+var_14]
RSB             R2, R9, #0x1C
MOV             R0, R3,LSR R2
ORR             R0, R0, R3,LSL R9
LDR             R3, [SP,#0x24+var_1C]
UBFX            R7, R0, #0xE, #7
UBFX            R1, R0, #7, #7
ADD             R1, R4, R1,LSL#2
ADD             R7, R4, R7,LSL#2
MOV             R2, R3,LSR R2
STR             R1, [SP,#0x24+var_18]
ORR             R2, R2, R3,LSL R9
UBFX            R3, R0, #0x15, #7
AND             R0, R0, #0x7F
ADD             R3, R4, R3,LSL#2
UBFX            R6, R2, #0x15, #7
ADD             R0, R4, R0,LSL#2
UBFX            LR, R2, #0xE, #7
ADD             R6, R4, R6,LSL#2
UBFX            R12, R2, #7, #7
ADD             LR, R4, LR,LSL#2
AND             R2, R2, #0x7F
ADD             R12, R4, R12,LSL#2
ADD             R2, R4, R2,LSL#2
ADD             R11, R0, #0x6000
LDR             R11, [R11,#0x720]
ADD             R0, R0, #0x7000
ADD             R1, R2, #0x6000
ADD             R2, R2, #0x7000
LDR             R1, [R1,#0xF20]
ORR             R1, R11, R1
ADD             R11, R3, #0x6000
LDR             R11, [R11,#0x120]
ADD             R3, R3, #0x7000
ORR             R1, R1, R11
ADD             R11, R7, #0x6000
LDR             R11, [R11,#0x320]
ADD             R7, R7, #0x7000
ORR             R1, R1, R11
LDR             R11, [SP,#0x24+var_18]
ADD             R11, R11, #0x6000
LDR             R11, [R11,#0x520]
ORR             R1, R1, R11
ADD             R11, R6, #0x6000
LDR             R11, [R11,#0x920]
ADD             R6, R6, #0x7000
ORR             R1, R1, R11
ADD             R11, LR, #0x6000
LDR             R11, [R11,#0xB20]
ADD             LR, LR, #0x7000
ORR             R1, R1, R11
ADD             R11, R12, #0x6000
LDR             R11, [R11,#0xD20]
ADD             R12, R12, #0x7000
ORR             R1, R1, R11
STR             R1, [R10],#4
LDR             R2, [R2,#0xF20]
LDR             R1, [R0,#0x720]
ORR             R1, R1, R2
LDR             R2, [R3,#0x120]
LDR             R3, [SP,#0x24+var_18]
ORR             R1, R1, R2
LDR             R2, [R7,#0x320]
ADD             R3, R3, #0x7000
LDR             R3, [R3,#0x520]
ORR             R1, R1, R2
LDR             R2, [R6,#0x920]
ORR             R3, R1, R3
ORR             R3, R3, R2
LDR             R2, [LR,#0xB20]
ORR             R3, R3, R2
LDR             R2, [R12,#0xD20]
ORR             R3, R3, R2
STR             R3, [R10,#0x3C]
LDR             R3, [SP,#0x24+var_10]
CMP             R3, R10
BNE             loc_5F6F4
LDRB            R0, [R8,#1]
BL              sub_5EDC8
LDRB            R2, [R8]
MOV             R1, R0
MOV             R0, R2
BL              sub_5EDC8
STRB            R2, [R5]
ORR             R0, R0, R1,LSL#6
LDRB            R3, [R8,#1]
MOV             R1, #1
CMP             R3, #0
MOVNE           R2, R3
MOV             R3, #0
STRB            R2, [R5,#1]
MOV             R2, #0x800000
STR             R3, [R4,#4]
MOV             R3, #0x18

loc_5F87C
LDR             R12, [R4,#4]
TST             R0, R1
MOV             R1, R1,LSL#1
ORRNE           R12, R2, R12
MOV             R2, R2,LSR#1
STRNE           R12, [R4,#4]
SUBS            R3, R3, #1
BNE             loc_5F87C
LDM             R4, {R0,R2}
MOV             R6, #0x19
MOVW            R9, #0x2348
STR             R2, [SP,#0x24+var_20]
MOV             R2, R3

loc_5F8B0
ADD             R7, R4, #0xE0
ADD             LR, R4, #0xA0
MOV             R10, R7
MOV             R8, R2

loc_5F8C0
MOV             R2, R3,LSL#23
MOV             R12, R3,LSL#5
LDR             R11, [SP,#0x24+var_20]
AND             R1, R2, #0x800000
MOV             R2, R3,LSR#9
AND             R12, R12, #0x3F000
AND             R2, R2, #0x7C0000
ORR             R2, R1, R2
MOV             R1, R3,LSR#11
AND             R1, R1, #0x3F000
ORR             R2, R2, R1
MOV             R1, R3,LSR#13
AND             R1, R1, #0xFC0
ORR             R1, R2, R1
UBFX            R2, R3, #0xF, #6
ORR             R1, R1, R2
MOV             R2, R3,LSL#7
AND             R2, R2, #0xFC0000
ORR             R2, R2, R12
MOV             R12, R3,LSL#3
ORR             R2, R2, R3,LSR#31
AND             R12, R12, #0xFC0
ORR             R2, R2, R12
MOV             R12, R3,LSL#1
AND             R12, R12, #0x3E ; '>'
ORR             R2, R2, R12
EOR             R12, R1, R2
AND             R12, R12, R11
LDR             R11, [LR],#4
EOR             R1, R1, R11
LDR             R11, [R7],#4
EOR             R1, R1, R12
CMP             LR, R10
EOR             R2, R2, R11
EOR             R12, R12, R2
ADD             R2, R0, R1,LSR#12
UBFX            R1, R1, #0, #0xC
ADD             R1, R0, R1
LDRB            R2, [R2,#0x40]
ADD             R1, R1, #0x1040
LDRB            R11, [R1]
ADD             R2, R2, #0x2040
ADD             R2, R2, #8
ADD             R11, R11, #0x2140
LDR             R2, [R4,R2,LSL#2]
ADD             R11, R11, #8
LDR             R1, [R4,R11,LSL#2]
ORR             R2, R2, R1
ADD             R1, R0, R12,LSR#12
UBFX            R12, R12, #0, #0xC
ADD             R1, R1, #0x2040
ADD             R12, R0, R12
LDRB            R1, [R1]
ADD             R12, R12, #0x3040
ADD             R1, R1, #0x2240
ADD             R1, R1, #8
LDR             R1, [R4,R1,LSL#2]
ORR             R1, R2, R1
LDRB            R2, [R12]
ADD             R2, R2, R9
LDR             R2, [R4,R2,LSL#2]
ORR             R2, R1, R2
EOR             R2, R2, R8
MOV             R8, R3
BNE             loc_5FB08
SUBS            R6, R6, #1
BNE             loc_5F8B0
MOV             R10, R2,LSR#24
UBFX            R8, R2, #0x10, #8
UBFX            LR, R2, #8, #8
UXTB            R2, R2
ADD             R10, R4, R10,LSL#2
MOV             R9, R3,LSR#24
ADD             R2, R4, R2,LSL#2
ADD             R8, R4, R8,LSL#2
ADD             LR, R4, LR,LSL#2
ADD             R9, R4, R9,LSL#2
LDR             R7, [R10,#0x120]
UBFX            R12, R3, #0x10, #8
UBFX            R0, R3, #8, #8
UXTB            R3, R3
ADD             R12, R4, R12,LSL#2
ADD             R0, R4, R0,LSL#2
ADD             R4, R4, R3,LSL#2
LDR             R3, [R2,#0xD20]
ADD             R1, R2, #0x2000
ADD             R10, R10, #0x2000
ORR             R7, R7, R3
ADD             R3, R9, #0x1000
LDR             R3, [R3,#0x120]
ADD             R9, R9, #0x3000
LDR             R2, [R10,#0x120]
ORR             R7, R7, R3
ADD             R3, R4, #0x1000
LDR             R3, [R3,#0xD20]
ADD             R4, R4, #0x3000
ORR             R7, R7, R3
LDR             R3, [R8,#0x520]
ADD             R8, R8, #0x2000
ORR             R7, R7, R3
LDR             R3, [LR,#0x920]
ADD             LR, LR, #0x2000
ORR             R7, R7, R3
ADD             R3, R12, #0x1000
LDR             R3, [R3,#0x520]
ADD             R12, R12, #0x3000
ORR             R7, R7, R3
ADD             R3, R0, #0x1000
LDR             R3, [R3,#0x920]
ADD             R0, R0, #0x3000
ORR             R7, R7, R3
LDR             R3, [R1,#0xD20]
MOV             R1, R7,LSR#8
ORR             R2, R2, R3
LDR             R3, [R9,#0x120]
ORR             R2, R2, R3
LDR             R3, [R4,#0xD20]
ORR             R2, R2, R3
LDR             R3, [R8,#0x520]
ORR             R2, R2, R3
LDR             R3, [LR,#0x920]
ORR             R2, R2, R3
LDR             R3, [R12,#0x520]
ORR             R2, R2, R3
LDR             R3, [R0,#0x920]
ADD             R0, R5, #2
ORR             R2, R2, R3
BL              sub_5EE14
MOV             R1, R2,LSR#16
ADD             R0, R5, #6
ORR             R1, R1, R7,LSL#16
BL              sub_5EE14
ADD             R0, R5, #0xA
MOV             R1, R2,LSL#8
BL              sub_5EE14
MOV             R0, R5
STRB            R6, [R5,#0xD]
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_5FAEC
LDRB            R3, [R2]
MOV             R3, R3,LSL#1
UXTB            R3, R3
CMP             R3, #0
STRB            R3, [R1],#1
ADDNE           R2, R2, #1
B               loc_5F5C0

loc_5FB08
MOV             R3, R2
B               loc_5F8C0
; End of function sub_5F5A4

off_5FB10 DCD unk_6BFB2



; int __fastcall sub_5FB14(int, int)
sub_5FB14
PUSH            {R4-R8,LR}
MOV             R5, R0
MOV             R6, R1
LDR             R7, =0x19660D
BL              getpid
MOV             R4, R0
BL              sub_187B0
ADD             R3, R4, R0
LDR             R4, =0x3C6EF35F
ADD             R1, R5, R6,LSL#1
MOV             R2, R5

loc_5FB40
MLA             R3, R7, R3, R4
MOV             R0, R3,LSR#16
BL              sub_5ED54
STRB            R0, [R2],#2
MOV             R0, R3,LSR#22
BL              sub_5ED54
CMP             R2, R1
STRB            R0, [R2,#-1]
BNE             loc_5FB40
MOV             R2, #0
MOV             R0, R3
STRB            R2, [R5,R6,LSL#1]
POP             {R4-R8,PC}
; End of function sub_5FB14

dword_5FB74 DCD 0x19660D
dword_5FB78 DCD 0x3C6EF35F



; int __fastcall sub_5FB7C(_BYTE *, const char *)
sub_5FB7C
PUSH            {R4-R6,LR}
MOV             R4, R0
LDRB            R3, [R1]
ORR             R3, R3, #0x20 ; ' '
CMP             R3, #0x64 ; 'd'
MOVEQ           R5, R0
MOVEQ           R1, #1
BEQ             loc_5FBE8
MOV             R3, #0x24 ; '$'
MOV             R2, #0x31 ; '1'
STRB            R3, [R4]
MOV             R0, R1  ; s1
STRB            R2, [R4,#1]
ADD             R5, R4, #3
STRB            R3, [R4,#2]
LDRB            R3, [R1]
ORR             R3, R3, #0x20 ; ' '
CMP             R3, #0x73 ; 's'
MOVNE           R1, #4
BNE             loc_5FBE8
LDR             R1, =aSha512 ; "sha512"
BL              strcasecmp
MOV             R1, #8
CMP             R0, #0
MOVEQ           R3, #0x36 ; '6'
MOVNE           R3, #0x35 ; '5'
STRB            R3, [R4,#1]

loc_5FBE8
MOV             R0, R5
BL              sub_5FB14
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_5FB7C

off_5FBF8 DCD aSha512   ; "sha512"



; void *__fastcall sub_5FBFC(char *, char *, int)
sub_5FBFC

var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1C
LDRB            R3, [R1]
MOV             R5, R1
STR             R0, [SP,#0x1C+var_10]
CMP             R3, #0x24 ; '$'
STR             R2, [SP,#0x1C+var_8]
BNE             loc_5FCA4
LDRB            R3, [R1,#1]
CMP             R3, #0
BEQ             loc_5FCA4
LDRB            R2, [R1,#2]
CMP             R2, #0x24 ; '$'
BNE             loc_5FCA4
CMP             R3, #0x31 ; '1'
BNE             loc_5FC90
MOV             R0, R2
BL              sub_174DC
MOV             R2, R5
LDR             R1, [SP,#0x1C+var_10]
BL              sub_5EE50

loc_5FC50
LDR             R3, [SP,#0x1C+var_8]
MOV             R4, R0
CMP             R3, #0
BEQ             loc_5FC84
LDR             R6, =dword_7D76C
LDR             R5, =dword_7D770
LDR             R0, [R6] ; ptr
BL              free
LDR             R0, [R5] ; ptr
BL              free
MOV             R3, #0
STR             R3, [R6]
STR             R3, [R5]

loc_5FC84               ; int
MOV             R0, R4
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_5FC90
SUB             R3, R3, #0x35 ; '5'
CMP             R3, #1
BHI             loc_5FCA4
BL              sub_5F09C
B               loc_5FC50

loc_5FCA4
LDR             R3, =dword_7D76C
LDR             R4, [R3]
CMP             R4, #0
BNE             loc_5FD68
LDR             R7, =unk_6BFEE
MOVW            R0, #0x4040
BL              sub_1748C
MOV             R3, R4

loc_5FCC4
ADD             R9, R7, R3,LSL#6
MOV             R12, #0
ADD             R8, R0, R3,LSL#12
ADD             R4, R9, #0x20 ; ' '
B               loc_5FD10

loc_5FCD8
LDRB            R1, [R4,LR,LSR#1]
TST             LR, #1
ORR             R6, R10, LR
ADD             LR, LR, #1
ADD             R6, R8, R6
MOVNE           R1, R1,LSR#4
CMP             LR, #0x40 ; '@'
AND             R1, R1, #0xF
ORR             R1, R2, R1
STRB            R1, [R6,#0x40]
BNE             loc_5FCD8
ADD             R12, R12, #1
CMP             R12, #0x40 ; '@'
BEQ             loc_5FD34

loc_5FD10
LDRB            R2, [R9,R12,LSR#1]
TST             R12, #1
MOV             R10, R12,LSL#6
MOV             LR, #0
MOV             R1, R2,LSL#4
ANDEQ           R2, R1, #0xF0
BIC             R2, R2, #0xF
SXTB            R2, R2
B               loc_5FCD8

loc_5FD34
ADD             R3, R3, #1
CMP             R3, #4
BNE             loc_5FCC4
LDR             R1, =byte_6BF03
MOV             R3, #0

loc_5FD48
LDRB            R2, [R3,R1]
SUB             R2, R2, #1
STRB            R2, [R0,R3]
ADD             R3, R3, #1
CMP             R3, #0x40 ; '@'
BNE             loc_5FD48
LDR             R3, =dword_7D76C
STR             R0, [R3]

loc_5FD68
LDR             R3, =dword_7D770
LDR             R4, [R3]
LDR             R3, =dword_7D76C
CMP             R4, #0
LDR             R3, [R3]
STR             R3, [SP,#0x1C+var_14]
BNE             loc_5FD90
MOVW            R0, #0x9120
BL              sub_1748C
MOV             R4, R0

loc_5FD90
LDR             R3, [SP,#0x1C+var_14]
ADD             R2, R4, #0xA0
MOV             R1, #0xFFFFFFFF
STR             R4, [SP,#0x1C+var_18]
STR             R3, [R4]
MOV             R3, #0
STR             R3, [R4,#4]
ADD             R3, R4, #0x60 ; '`'

loc_5FDB0
STRB            R1, [R3],#1
CMP             R3, R2
BNE             loc_5FDB0
LDR             R12, =byte_6BF7B
ADD             R1, R4, #0x28 ; '('
MOV             R3, #0
MOV             R0, #0xFFFFFFFF

loc_5FDCC
LDRB            R2, [R3,R12]
ADD             R2, R4, R2
STRB            R3, [R2,#0x5F]
ADD             R3, R3, #1
CMP             R3, #0x38 ; '8'
STRB            R0, [R1],#1
BNE             loc_5FDCC
LDR             R1, =byte_6BF4B
MOV             R3, #0

loc_5FDF0
LDRB            R2, [R3,R1]
ADD             R2, R4, R2
STRB            R3, [R2,#0x27]
ADD             R3, R3, #1
CMP             R3, #0x30 ; '0'
BNE             loc_5FDF0
LDR             R1, =dword_640F4
ADD             R2, R4, #0x4100
ADD             R2, R2, #0x20 ; ' '
MOV             R7, R4
MOV             R3, #0

loc_5FE1C
LDR             R0, [SP,#0x1C+var_14]
MOV             R9, R3,LSL#3
ADD             R10, R7, #0x11C
ADD             R11, R0, R9
MOV             R0, #0

loc_5FE30
MOV             LR, #0
MOV             R8, LR
MOV             R12, LR

loc_5FE3C
LDR             R6, =byte_6BF43
LDRB            R6, [R12,R6]
TST             R6, R0
BEQ             loc_5FE68
LDRB            R6, [R11,R12]
CMP             R6, #0x1F
SUBGT           R6, R6, #0x20 ; ' '
LDRLE           R6, [R1,R6,LSL#2]
LDRGT           R6, [R1,R6,LSL#2]
ORRLE           R8, R8, R6
ORRGT           LR, LR, R6

loc_5FE68
ADD             R12, R12, #1
CMP             R12, #8
BNE             loc_5FE3C
MOVW            R12, #0x2120
STR             R8, [R10,#4]!
ADD             R12, R12, R0,LSL#2
ADD             R0, R0, #1
CMP             R0, #0x100
STR             LR, [R7,R12]
BNE             loc_5FE30
RSB             R11, R3, R3,LSL#3
ADD             R0, R4, R9
ADD             R8, R2, #0x2000
STR             R0, [SP,#0x1C+var_C]
ADD             R11, R4, R11
MOV             R9, R2
MOV             R12, #0

loc_5FEAC
MOV             R6, #0
MOV             R10, R6
MOV             LR, R6

loc_5FEB8
LDR             R0, =byte_6BF43
ADD             LR, LR, #1
LDRB            R0, [LR,R0]
TST             R0, R12
BEQ             loc_5FEF8
LDR             R0, [SP,#0x1C+var_C]
ADD             R0, R0, LR
LDRB            R0, [R0,#0x5F]
CMP             R0, #0xFF
BEQ             loc_5FEF8
CMP             R0, #0x1B
ADD             R0, R1, R0,LSL#2
LDRLE           R0, [R0,#0x10]
LDRGT           R0, [R0,#-0x60]
ORRLE           R10, R10, R0
ORRGT           R6, R6, R0

loc_5FEF8
CMP             LR, #7
BNE             loc_5FEB8
MOV             LR, #0
STR             R10, [R9],#4
MOV             R10, LR
STR             R6, [R9,#0xFFC]
MOV             R6, LR

loc_5FF14
LDR             R0, =byte_6BF43
ADD             R6, R6, #1
LDRB            R0, [R6,R0]
TST             R0, R12
BEQ             loc_5FF50
ADD             R0, R11, R6
LDRB            R0, [R0,#0x27]
CMP             R0, #0xFF
BEQ             loc_5FF50
CMP             R0, #0x17
ADD             R0, R1, R0,LSL#2
LDRLE           R0, [R0,#0x20]
LDRGT           R0, [R0,#-0x40]
ORRLE           R10, R10, R0
ORRGT           LR, LR, R0

loc_5FF50
CMP             R6, #7
BNE             loc_5FF14
ADD             R12, R12, #1
STR             R10, [R8],#4
CMP             R12, #0x80
STR             LR, [R8,#0xFFC]
BNE             loc_5FEAC
ADD             R3, R3, #1
ADD             R2, R2, #0x200
CMP             R3, #8
ADD             R7, R7, #0x400
BNE             loc_5FE1C
LDR             R1, =byte_6BFC3
MOV             R3, #0

loc_5FF88
LDRB            R2, [R3,R1]
ADD             R2, R4, R2
STRB            R3, [R2,#7]
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BNE             loc_5FF88
LDR             LR, =byte_6BF43
ADD             R12, R4, #0x1000
LDR             R7, =dword_640F4
MOV             R0, R4
MOVW            R6, #0x8120

loc_5FFB4
MOV             R3, #0
B               loc_5FFF8

loc_5FFBC
LDRB            R8, [R2,LR]
TST             R8, R3
ADDNE           R8, R0, R2
ADD             R2, R2, #1
LDRBNE          R8, [R8,#8]
LDRNE           R8, [R7,R8,LSL#2]
ORRNE           R1, R1, R8
CMP             R2, #8
BNE             loc_5FFBC
ADD             R2, R6, R3,LSL#2
LDR             R8, [SP,#0x1C+var_18]
ADD             R3, R3, #1
CMP             R3, #0x100
STR             R1, [R8,R2]
BEQ             loc_60004

loc_5FFF8
MOV             R1, #0
MOV             R2, R1
B               loc_5FFBC

loc_60004
LDR             R3, [SP,#0x1C+var_18]
ADD             R0, R0, #8
ADD             R3, R3, #0x400
CMP             R3, R12
STR             R3, [SP,#0x1C+var_18]
BNE             loc_5FFB4

loc_6001C
LDR             R3, =dword_7D770
MOV             R0, #0x15
STR             R4, [R3]
BL              sub_174DC
MOV             R3, R5
MOV             R1, R0
LDR             R2, [SP,#0x1C+var_10]
MOV             R0, R4
BL              sub_5F5A4
B               loc_5FC50
; End of function sub_5FBFC

off_60044 DCD dword_7D76C
off_60048 DCD dword_7D770
off_6004C DCD unk_6BFEE
off_60050 DCD byte_6BF03
off_60054 DCD byte_6BF7B
off_60058 DCD byte_6BF4B
off_6005C DCD dword_640F4
off_60060 DCD byte_6BF43
off_60064 DCD byte_6BFC3



; int __fastcall sub_60068(int fd, char *, int)
sub_60068

timeout= -0x18
endptr= -0x10
fds= -0xC

PUSH            {R4-R11,LR}
MOV             R3, #1
SUB             SP, SP, #0x1C
ADD             R9, R1, R3
MOV             R10, R0
MOV             R5, R1
STRH            R3, [SP,#0x1C+fds.events]
MOV             R8, #0
LDR             R3, =dword_7DB94
STR             R2, [SP,#0x1C+timeout]
STR             R0, [SP,#0x1C+fds]
LDR             R7, [R3]

loc_60098
MOV             R3, #0
STR             R3, [R7]
LDRB            R0, [R5]
CMP             R0, R3
BNE             loc_600FC
LDR             R3, [SP,#0x1C+timeout]
CMN             R3, #1
BLT             loc_600E4
MOV             R2, R3  ; timeout
MOV             R1, #1  ; nfds
ADD             R0, SP, #0x1C+fds ; fds
BL              sub_60AD4
CMP             R0, #0
BNE             loc_600E4
MOV             R3, #0xB
STR             R3, [R7]

loc_600D8
MOV             R0, #0xFFFFFFFF
MOV             R1, #0xFFFFFFFF
B               loc_601F8

loc_600E4               ; nbytes
MOV             R2, #1
MOV             R1, R9  ; buf
MOV             R0, R10 ; fd
BL              sub_1800C
CMP             R0, #0
BLE             loc_600D8

loc_600FC
SUBS            R4, R0, #1
LDRB            R6, [R5,#1]
BEQ             loc_60118
MOV             R2, R4  ; n
ADD             R1, R5, #2 ; src
MOV             R0, R9  ; dest
BL              memmove

loc_60118
CMP             R6, #0x1B
BEQ             loc_60208
UXTB            R0, R6
STRB            R4, [R5]

loc_60128
MOV             R1, #0
B               loc_601F8

loc_60130
MOV             R11, #0

loc_60134
CMP             R4, R11
BGT             loc_6018C
MOV             R2, #0x32 ; '2' ; timeout
MOV             R1, #1  ; nfds
ADD             R0, SP, #0x1C+fds ; fds
BL              sub_60AD4
CMP             R0, #0
BEQ             loc_60304
STR             R8, [R7]
MOV             R2, #1  ; nbytes
ADD             R1, R9, R4 ; buf
MOV             R0, R10 ; fd
BL              sub_1800C
CMP             R0, #0
BGT             loc_60188

loc_60170
LDR             R3, [R7]
CMP             R3, #0xB
BEQ             loc_60304
MOV             R3, #0
STRB            R3, [R5]
B               loc_600D8

loc_60188
ADD             R4, R4, #1

loc_6018C
LDRB            R1, [R6,R11]
ADD             R12, R5, R11
LDRB            R12, [R12,#1]
ADD             R2, R6, R11
SXTB            R0, R1
AND             R1, R1, #0x7F
CMP             R12, R1
BEQ             loc_601E0

loc_601AC
MOV             R6, R2
ADD             R2, R2, #1
LDRSB           R3, [R6]
CMP             R3, #0
BGE             loc_601AC
ADD             R6, R6, #2

loc_601C4
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_60130

loc_601D0
CMP             R4, #0xE
BLE             loc_60210

loc_601D8
STRB            R8, [R5]
B               loc_60098

loc_601E0
CMP             R0, #0
BGE             loc_60200
MOV             R3, #0
STRB            R3, [R5]
LDRSB           R0, [R2,#1]
MOV             R1, R0,ASR#31

loc_601F8
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_60200
ADD             R11, R11, #1
B               loc_60134

loc_60208
LDR             R6, =unk_6C0EE
B               loc_601C4

loc_60210               ; timeout
MOV             R2, #0x32 ; '2'
MOV             R1, #1  ; nfds
ADD             R0, SP, #0x1C+fds ; fds
BL              sub_60AD4
CMP             R0, #0
BEQ             loc_60304
STR             R8, [R7]
MOV             R2, #1  ; nbytes
ADD             R1, R9, R4 ; buf
MOV             R0, R10 ; fd
BL              sub_1800C
CMP             R0, #0
BLE             loc_60170
ADD             R4, R4, #1
CMP             R4, #4
BLE             loc_601D0
LDRB            R3, [R5,#1]
CMP             R3, #0x5B ; '['
BNE             loc_601D0
LDRB            R3, [R5,R4]
CMP             R3, #0x52 ; 'R'
BNE             loc_601D0
LDRB            R3, [R5,#2]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
BHI             loc_601D0
MOV             R2, #0xA ; base
ADD             R1, SP, #0x1C+endptr ; endptr
ADD             R0, R5, #2 ; nptr
BL              strtoul
MOV             R6, R0
LDR             R0, [SP,#0x1C+endptr]
LDRB            R3, [R0]
CMP             R3, #0x3B ; ';'
BNE             loc_601D0
LDRB            R3, [R0,#1]
SUB             R3, R3, #0x30 ; '0'
CMP             R3, #9
BHI             loc_601D0
MOV             R2, #0xA ; base
ADD             R1, SP, #0x1C+endptr ; endptr
ADD             R0, R0, #1 ; nptr
BL              strtoul
LDR             R3, [SP,#0x1C+endptr]
LDRB            R3, [R3]
CMP             R3, #0x52 ; 'R'
BNE             loc_601D0
CLZ             R3, R0
CMP             R6, #0
MOV             R3, R3,LSR#5
MOVEQ           R3, #1
CMP             R3, #0
BNE             loc_601D0
ORR             R2, R6, R0
CMP             R2, #0x8000
BCS             loc_601D0
STRB            R3, [R5]
ORR             R3, R0, #0x80000000
ORR             R1, R3, R6,LSL#16
MOV             R0, #0xFFFFFF00
B               loc_601F8

loc_60304
CMP             R4, #1
BGT             loc_601D8
STRB            R4, [R5]
MOV             R0, #0x1B
B               loc_60128
; End of function sub_60068

off_60318 DCD dword_7DB94
off_6031C DCD unk_6C0EE



; ssize_t __fastcall sub_60320(int fd, void *buf, size_t nbytes)
sub_60320

var_8= -8
var_4= -4

PUSH            {R0,R1,R4-R8,LR}
MOV             R4, R0
LDR             R8, =dword_7DB94
MOV             R6, R1
MOV             R7, R2
MOV             R5, #1

loc_60338               ; nbytes
MOV             R2, R7
MOV             R1, R6  ; buf
MOV             R0, R4  ; fd
BL              sub_1800C
CMP             R0, #0
BGE             loc_6037C
LDR             R3, [R8]
LDR             R3, [R3]
CMP             R3, #0xB
BNE             loc_6037C
MOV             R2, #0xFFFFFFFF ; timeout
MOV             R1, #1  ; nfds
MOV             R0, SP  ; fds
STR             R4, [SP,#8+var_8]
STRH            R5, [SP,#8+var_4]
BL              sub_60AD4
B               loc_60338

loc_6037C
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_60320

off_60384 DCD dword_7DB94



; void *__fastcall sub_60388(int, unsigned int *)
sub_60388
PUSH            {R4-R10,LR}
SUBS            R7, R1, #0
LDRNE           R9, [R7]
MOV             R6, #0
MOV             R10, R0
MOV             R5, R6
LDREQ           R9, =0x7FFFF000

loc_603A4
ADD             R8, R6, #0x80
MOV             R0, R5
MOV             R1, R8
BL              sub_174B4
MOV             R5, R0
ADD             R4, R0, R6
B               loc_603D0

loc_603C0
SUB             R6, R3, R5
MOV             R4, R3
CMP             R6, R8
BEQ             loc_603A4

loc_603D0               ; nbytes
MOV             R2, #1
MOV             R1, R4  ; buf
MOV             R0, R10 ; fd
BL              sub_60320
CMP             R0, #1
BEQ             loc_60400
CMP             R4, R5
BNE             loc_6041C
MOV             R0, R4  ; ptr
BL              free
MOV             R0, #0
POP             {R4-R10,PC}

loc_60400
LDRB            R2, [R4]
ADD             R3, R4, #1
CMP             R2, #0xA
BEQ             loc_6041C
CMP             R8, R9
BCC             loc_603C0
MOV             R4, R3

loc_6041C
MOV             R3, #0
ADD             R1, R4, #1
CMP             R7, R3
STRB            R3, [R4]
SUBNE           R3, R4, R5
SUB             R1, R1, R5
STRNE           R3, [R7]
MOV             R0, R5
POP             {R4-R10,LR}
B               sub_174B4
; End of function sub_60388

dword_60444 DCD 0x7FFFF000



; ssize_t __fastcall sub_60448(ssize_t result, char *, size_t)
sub_60448
PUSH            {R4,LR}
SUBS            R4, R2, #0
POPEQ           {R4,PC}
BL              sub_18050
CMP             R0, R4
POPEQ           {R4,PC}
LDR             R0, =aShortRead ; "short read"
BL              sub_16DBC
; End of function sub_60448

off_60468 DCD aShortRead ; "short read"



; int sub_6046C()
sub_6046C
MOV             R0, #1
BX              LR
; End of function sub_6046C




; int __fastcall sub_60474(const char *, int, int (*)(), int (*)(), int, int)
sub_60474

var_84= -0x84
var_80= -0x80
var_78= -0x78
ptr= -0x74
var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C
arg_0=  0x24
arg_4=  0x28

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x84
LDR             R7, =sub_6046C
CMP             R2, #0
MOVNE           R10, R2
MOV             R4, R1
LDR             R8, [SP,#0x84+arg_4]
MOV             R6, R0
MOVEQ           R10, R7
CMP             R3, #0
MOVNE           R7, R3
LDR             R2, =(sub_62E14+1)
CMP             R8, #0
LDR             R9, [SP,#0x84+arg_0]
MOVNE           R3, #2
MOVEQ           R3, #6
TST             R3, R1
LDR             R3, =(sub_62DFC+1)
ADD             R1, SP, #0x84+var_6C
MOVEQ           R3, R2
BLX             R3 ; sub_62DFC sub_62E14
CMP             R0, #0
BGE             loc_6053C
TST             R4, #0x40
BNE             loc_604F0

loc_604D8
ANDS            R5, R4, #0x20 ; ' '
MOVNE           R5, #0
BNE             loc_60530
MOV             R0, R6
BL              sub_16B80
B               loc_60530

loc_604F0
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_604D8
ADD             R1, SP, #0x84+var_6C
MOV             R0, R6
BLX             sub_62E14
CMP             R0, #0
BNE             loc_604D8

loc_60518
MOV             R3, R8
MOV             R2, R9
ADD             R1, SP, #0x84+var_6C
MOV             R0, R6
BLX             R10

loc_6052C
MOV             R5, R0

loc_60530
MOV             R0, R5
ADD             SP, SP, #0x84
POP             {R4-R11,PC}

loc_6053C
LDR             R3, [SP,#0x84+var_5C]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BNE             loc_60518
TST             R4, #1
BNE             loc_6056C
MOV             R3, R8
MOV             R2, R9
ADD             R1, SP, #0x84+var_6C
MOV             R0, R6
BLX             R7
B               loc_6052C

loc_6056C
ANDS            R3, R4, #8
STR             R3, [SP,#0x84+var_78]
BEQ             loc_605D8

loc_60578               ; name
MOV             R0, R6
BL              opendir
SUBS            R11, R0, #0
MOVNE           R5, #1
ADDNE           R3, R8, R5
STRNE           R3, [SP,#0x84+var_70]
BEQ             loc_604D8

loc_60594
MOV             R0, R11
BL              readdir64
SUBS            R1, R0, #0
BNE             loc_60604
MOV             R0, R11 ; dirp
BL              closedir
LDR             R3, [SP,#0x84+var_78]
CMP             R3, #0
BEQ             loc_60530
MOV             R3, R8
MOV             R2, R9
ADD             R1, SP, #0x84+var_6C
MOV             R0, R6
BLX             R7
CMP             R0, #0
BEQ             loc_604D8
B               loc_60530

loc_605D8
MOV             R3, R8
MOV             R2, R9
ADD             R1, SP, #0x84+var_6C
MOV             R0, R6
BLX             R7
CMP             R0, #0
BEQ             loc_604D8
CMP             R0, #2
MOVEQ           R5, #1
BEQ             loc_60530
B               loc_60578

loc_60604
ADD             R1, R1, #0x13
MOV             R0, R6
BL              sub_57D64
SUBS            R3, R0, #0
STR             R3, [SP,#0x84+ptr]
BEQ             loc_60594
LDR             R3, [SP,#0x84+var_70]
MOV             R2, R10
STR             R9, [SP,#0x84+var_84]
MOV             R1, R4
STR             R3, [SP,#0x84+var_80]
MOV             R3, R7
BL              sub_60474
CMP             R0, #0
LDR             R0, [SP,#0x84+ptr] ; ptr
MOVEQ           R5, #0
BL              free
B               loc_60594
; End of function sub_60474

off_6064C DCD sub_6046C
off_60650 DCD sub_62E14+1
off_60654 DCD sub_62DFC+1
off_60658 DCD dword_7DB94



; int __fastcall sub_6065C(const char *, int)
sub_6065C

var_58= -0x58

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x68
MOV             R5, R1
MOV             R1, SP
MOV             R4, R0
BLX             sub_62E14
CMP             R0, #0
BGE             loc_606B8
LDR             R3, =dword_7DB94
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, #2
MOVNE           R1, R4
LDRNE           R0, =aCanTStatS ; "can't stat '%s'"
BNE             loc_606B0
TST             R5, #8
BEQ             loc_606A8

loc_606A0
MOV             R6, #0
B               loc_6080C

loc_606A8
LDR             R0, =aCanTRemoveS ; "can't remove '%s'"
MOV             R1, R4

loc_606B0
BL              sub_16AF4
B               loc_606DC

loc_606B8
LDR             R3, [SP,#0x68+var_58]
AND             R3, R3, #0xF000
CMP             R3, #0x4000
BNE             loc_60818
TST             R5, #4
BNE             loc_606E4
MOV             R1, R4
LDR             R0, =aSIsADirectory ; "'%s' is a directory"
BL              sub_16DDC

loc_606DC
MOV             R6, #0xFFFFFFFF
B               loc_6080C

loc_606E4
ANDS            R6, R5, #8
BEQ             loc_60734

loc_606EC
TST             R5, #0x10
BNE             loc_60758

loc_606F4               ; name
MOV             R0, R4
BL              opendir
SUBS            R7, R0, #0
MOVNE           R6, #0
BEQ             loc_606DC

loc_60708
MOV             R0, R7
BL              readdir64
SUBS            R1, R0, #0
BNE             loc_60784
MOV             R0, R7  ; dirp
BL              closedir
CMP             R0, #0
BGE             loc_607B4
MOV             R1, R4
LDR             R0, =aCanTCloseS ; "can't close '%s'"
B               loc_606B0

loc_60734               ; type
MOV             R1, #2
MOV             R0, R4  ; name
BL              access
CMP             R0, #0
BGE             loc_606EC
MOV             R0, R6  ; fd
BL              isatty
CMP             R0, #0
BEQ             loc_606EC

loc_60758
LDR             R2, =dword_7DB90
MOV             R3, R4
LDR             R0, =stderr
LDR             R1, =aSDescendIntoDi ; "%s: descend into directory '%s'? "
LDR             R2, [R2]
LDR             R0, [R0] ; stream
BL              fprintf
BL              sub_57700
CMP             R0, #0
BEQ             loc_606A0
B               loc_606F4

loc_60784
ADD             R1, R1, #0x13
MOV             R0, R4
BL              sub_57D64
SUBS            R8, R0, #0
BEQ             loc_60708
MOV             R1, R5
BL              sub_6065C
CMP             R0, #0
MOV             R0, R8  ; ptr
MOVLT           R6, #0xFFFFFFFF
BL              free
B               loc_60708

loc_607B4
TST             R5, #0x10
BNE             loc_607E4

loc_607BC               ; path
MOV             R0, R4
BL              rmdir
CMP             R0, #0
BLT             loc_606A8
TST             R5, #0x1000
BEQ             loc_6080C
MOV             R1, R4
LDR             R0, =aRemovedDirecto ; "removed directory: '%s'\n"
BL              printf
B               loc_6080C

loc_607E4
LDR             R2, =dword_7DB90
MOV             R3, R4
LDR             R0, =stderr
LDR             R1, =aSRemoveDirecto ; "%s: remove directory '%s'? "
LDR             R2, [R2]
LDR             R0, [R0] ; stream
BL              fprintf
BL              sub_57700
CMP             R0, #0
BNE             loc_607BC

loc_6080C
MOV             R0, R6
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R8,PC}

loc_60818
ANDS            R6, R5, #8
BEQ             loc_60850

loc_60820
TST             R5, #0x10
BNE             loc_60884

loc_60828               ; name
MOV             R0, R4
BL              unlink
CMP             R0, #0
BLT             loc_606A8
TST             R5, #0x1000
BEQ             loc_606A0
MOV             R1, R4
LDR             R0, =aRemovedS ; "removed '%s'\n"
BL              printf
B               loc_606A0

loc_60850               ; type
MOV             R1, #2
MOV             R0, R4  ; name
BL              access
CMP             R0, #0
BGE             loc_60820
LDR             R3, [SP,#0x68+var_58]
AND             R3, R3, #0xF000
CMP             R3, #0xA000
BEQ             loc_60820
MOV             R0, R6  ; fd
BL              isatty
CMP             R0, #0
BEQ             loc_60820

loc_60884
LDR             R2, =dword_7DB90
MOV             R3, R4
LDR             R0, =stderr
LDR             R1, =aSRemoveS ; "%s: remove '%s'? "
LDR             R2, [R2]
LDR             R0, [R0] ; stream
BL              fprintf
BL              sub_57700
CMP             R0, #0
BEQ             loc_606A0
B               loc_60828
; End of function sub_6065C

off_608B0 DCD dword_7DB94
off_608B4 DCD aCanTStatS ; "can't stat '%s'"
off_608B8 DCD aCanTRemoveS ; "can't remove '%s'"
off_608BC DCD aSIsADirectory ; "'%s' is a directory"
off_608C0 DCD aCanTCloseS ; "can't close '%s'"
off_608C4 DCD dword_7DB90
off_608C8 DCD stderr
off_608CC DCD aSDescendIntoDi ; "%s: descend into directory '%s'? "
off_608D0 DCD aRemovedDirecto ; "removed directory: '%s'\n"
off_608D4 DCD aSRemoveDirecto ; "%s: remove directory '%s'? "
off_608D8 DCD aRemovedS ; "removed '%s'\n"
off_608DC DCD aSRemoveS ; "%s: remove '%s'? "



; int __fastcall sub_608E0(const char *, char *s)
sub_608E0
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R0, R1  ; s
MOV             R6, R1
MOV             R5, #0
BL              strlen
MOV             R7, R0

loc_608FC               ; needle
MOV             R1, R6
MOV             R0, R4  ; haystack
BL              strstr
CMP             R0, #0
BNE             loc_60918
MOV             R0, R5
POP             {R4-R8,PC}

loc_60918
ADD             R5, R5, #1
ADD             R4, R0, R7
B               loc_608FC
; End of function sub_608E0




; char *__fastcall sub_60924(const char *, int, char *s, const char *)
sub_60924

dest= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R10, R3
MOV             R4, R0
MOV             R0, R2  ; s
MOV             R5, R1
MOV             R8, R2
BL              strlen
MOV             R9, R0
MOV             R0, R10 ; s
BL              strlen
MOV             R6, R0
MOV             R0, R4  ; s
BL              strlen
SUB             R3, R6, R9
ADD             R0, R0, #1
MLA             R0, R5, R3, R0
BL              sub_1748C
MOV             R7, R0
MOV             R3, R0

loc_60970               ; needle
MOV             R1, R8
MOV             R0, R4  ; haystack
STR             R3, [SP,#0xC+dest]
BL              strstr
SUBS            R11, R0, #0
LDR             R3, [SP,#0xC+dest]
BNE             loc_609A4
MOV             R1, R4  ; src
MOV             R0, R3  ; dest
BL              strcpy
MOV             R0, R7
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_609A4
SUB             R5, R11, R4
MOV             R1, R4  ; src
MOV             R2, R5  ; n
MOV             R0, R3  ; dest
BL              memcpy
ADD             R3, R0, R5
MOV             R2, R6  ; n
MOV             R0, R3  ; dest
MOV             R1, R10 ; src
BL              memcpy
ADD             R4, R11, R9
ADD             R3, R0, R6
B               loc_60970
; End of function sub_60924



; Attributes: noreturn

; void __fastcall __noreturn sub_609D8(const char *, int, int *)
sub_609D8
PUSH            {R7,LR}
MOV             R4, R0
MOV             R7, R1
MOV             R6, R2
MOV             R3, R2

loc_609EC
SUBS            R0, R3, #0
BEQ             loc_60A04
LDR             R2, [R0]
ADD             R3, R3, #4
CMP             R2, #0
BNE             loc_609EC

loc_60A04
SUB             R0, R0, R6
BIC             R0, R0, #3
ADD             R0, R0, #8
BL              sub_1748C
CMP             R4, #0
MOV             R5, R0
LDREQ           R4, =(aBinSh+1) ; "/bin/sh"
BEQ             loc_60A34
LDRB            R2, [R4]
LDR             R3, =(aBinSh+1) ; "/bin/sh"
CMP             R2, #0
MOVEQ           R4, R3

loc_60A34
MOV             R0, R4
BL              sub_16A1C
CMP             R7, #0
MOV             R1, R0
STR             R0, [R5]
BEQ             loc_60A58
LDR             R0, =aS_9 ; "-%s"
BL              sub_177E4
STR             R0, [R5]

loc_60A58
MOV             R3, #0
CMP             R6, R3
STR             R3, [R5,#4]
BEQ             loc_60A7C
MOV             R2, R5

loc_60A6C
LDR             R3, [R6],#4
CMP             R3, #0
STR             R3, [R2,#4]!
BNE             loc_60A6C

loc_60A7C               ; argv
MOV             R1, R5
MOV             R0, R4  ; path
BL              execv
MOV             R1, R4
LDR             R0, =aCanTExecuteS ; "can't execute '%s'"
BL              sub_16B40
; End of function sub_609D8

off_60A94 DCD aBinSh+1  ; "/bin/sh"
off_60A98 DCD aS_9      ; "-%s"
off_60A9C DCD aCanTExecuteS ; "can't execute '%s'"



; void *sub_60AA0()
sub_60AA0

var_14B= -0x14B

PUSH            {LR}
SUB             SP, SP, #0x18C
MOV             R0, SP  ; name
BL              uname
LDRB            R3, [SP,#0x18C+var_14B]
MOV             R1, #0x41 ; 'A'
CMP             R3, #0
LDREQ           R0, =(asc_6B6A4+0x15) ; "?"
ADDNE           R0, SP, #0x18C+var_14B
BL              sub_1751C
ADD             SP, SP, #0x18C
POP             {PC}
; End of function sub_60AA0

off_60AD0 DCD asc_6B6A4+0x15 ; "?"



; int __fastcall sub_60AD4(struct pollfd *fds, nfds_t nfds, int timeout)
sub_60AD4
PUSH            {R4-R8,LR}
MOV             R7, R0
LDR             R6, =dword_7DB94
MOV             R8, R1
MOV             R4, R2

loc_60AE8               ; timeout
MOV             R2, R4
MOV             R1, R8  ; nfds
MOV             R0, R7  ; fds
BL              poll
SUBS            R5, R0, #0
BGE             loc_60B24
LDR             R3, [R6]
CMP             R4, #0
SUBGT           R4, R4, #1
LDR             R3, [R3]
BIC             R3, R3, #8
CMP             R3, #4
BEQ             loc_60AE8
LDR             R0, =aPoll_0 ; "poll"
BL              sub_16AF4

loc_60B24
MOV             R0, R5
POP             {R4-R8,PC}
; End of function sub_60AD4

off_60B2C DCD dword_7DB94
off_60B30 DCD aPoll_0   ; "poll"



; char *__fastcall sub_60B34(char *result, const char *, int)
sub_60B34
CMP             R2, #0
BXEQ            LR
SUB             R2, R2, #1 ; n
MOV             R12, #0
STRB            R12, [R0,R2]
B               strncpy
; End of function sub_60B34




; int __fastcall sub_60B4C(int result, int)
sub_60B4C
CMP             R0, R1
BXEQ            LR
SUB             R1, R1, #1
SUB             R0, R0, #1

loc_60B5C
LDRB            R3, [R1,#1]!
CMP             R3, #0
STRB            R3, [R0,#1]!
BXEQ            LR
B               loc_60B5C
; End of function sub_60B4C




; char *__fastcall sub_60B70(const char *)
sub_60B70

s1= -4
var_s0=  0

PUSH            {R0,R1,R4-R8,LR}
MOV             R8, R0
LDR             R0, =aEtcSecuretty ; "/etc/securetty"
ADD             R4, SP, #8+var_s0
LDR             R7, =asc_65657 ; "# "
LDR             R6, =0x470101
LDR             R1, =sub_61C9C
STR             R0, [R4,#-4]!
BL              sub_5DDC4
MOV             R5, R0

loc_60B98
MOV             R3, R7
MOV             R2, R6
MOV             R1, R4
MOV             R0, R5
BL              sub_5DE1C
CMP             R0, #0
BNE             loc_60BD0

loc_60BB4
MOV             R0, R5
BL              sub_5DDEC
LDR             R0, [SP,#8+s1]
MOVS            R0, R0
MOVNE           R0, #1
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_60BD0               ; s2
MOV             R1, R8
LDR             R0, [SP,#8+s1] ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_60BB4
MOV             R3, #0
STR             R3, [SP,#8+s1]
B               loc_60B98
; End of function sub_60B70

off_60BF0 DCD aEtcSecuretty ; "/etc/securetty"
off_60BF4 DCD asc_65657 ; "# "
dword_60BF8 DCD 0x470101
off_60BFC DCD sub_61C9C



; const char *__fastcall sub_60C00(const char *result, char, int)
sub_60C00
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
MOV             R6, R1
MOV             R4, R2
LDREQ           R5, =(aBinSh+1) ; "/bin/sh"
BEQ             loc_60C28
LDRB            R2, [R5]
LDR             R3, =(aBinSh+1) ; "/bin/sh"
CMP             R2, #0
MOVEQ           R5, R3

loc_60C28
TST             R6, #0x10
BNE             loc_60C60
LDR             R0, [R4,#0x14] ; path
BL              chdir
CMP             R0, #0
BEQ             loc_60C60
LDR             R0, =aCanTChangeDire ; "can't change directory to '%s'"
LDR             R1, [R4,#0x14]
BL              sub_16DDC
LDR             R3, =(asc_69510+3) ; "/"
TST             R6, #4
LDR             R0, =aTmp ; "/tmp"
MOVEQ           R0, R3
BL              sub_178FC

loc_60C60
TST             R6, #2
BEQ             loc_60CC8
LDR             R0, =(aGotTerm+6) ; name
BL              getenv
MOV             R6, R0
BL              clearenv
CMP             R6, #0
BEQ             loc_60C8C
MOV             R1, R6
LDR             R0, =(aGotTerm+6) ; "TERM"
BL              sub_17820

loc_60C8C
LDR             R1, [R4,#8]
LDR             R3, =(string+0x15) ; "/bin:/usr/bin"
LDR             R0, =(aCdpath+2) ; "PATH"
CMP             R1, #0
SUB             R2, R3, #0x10
MOVNE           R1, R3
MOVEQ           R1, R2
BL              sub_17820

loc_60CAC
LDR             R1, [R4]
LDR             R0, =aUser ; "USER"
BL              sub_17820
LDR             R1, [R4]
LDR             R0, =aLogname ; "LOGNAME"
BL              sub_17820
B               loc_60CDC

loc_60CC8
TST             R6, #1
POPEQ           {R4-R6,PC}
LDR             R3, [R4,#8]
CMP             R3, #0
BNE             loc_60CAC

loc_60CDC
LDR             R1, [R4,#0x14]
LDR             R0, =aHome ; "HOME"
BL              sub_17820
MOV             R1, R5
LDR             R0, =aShell ; "SHELL"
POP             {R4-R6,LR}
B               sub_17820
; End of function sub_60C00

off_60CF8 DCD aBinSh+1  ; "/bin/sh"
off_60CFC DCD aCanTChangeDire ; "can't change directory to '%s'"
off_60D00 DCD asc_69510+3 ; "/"
off_60D04 DCD aTmp      ; "/tmp"
off_60D08 DCD aGotTerm+6 ; "TERM"
off_60D0C DCD string+0x15 ; "/bin:/usr/bin"
off_60D10 DCD aCdpath+2 ; "PATH"
off_60D14 DCD aUser     ; "USER"
off_60D18 DCD aLogname  ; "LOGNAME"
off_60D1C DCD aHome     ; "HOME"
off_60D20 DCD aShell    ; "SHELL"



; _BYTE *__fastcall sub_60D24(_BYTE *)
sub_60D24
MOV             R3, R0
MOV             R2, R0
PUSH            {LR}

loc_60D30
LDRB            LR, [R3]
MOV             R1, R2
LDRB            R12, [R1],#1
CMP             LR, #0x2F ; '/'
BNE             loc_60DA0
CMP             R12, #0x2F ; '/'
BEQ             loc_60DA8
CMP             R12, #0x2E ; '.'
BNE             loc_60DA0
LDRB            LR, [R2,#1]
CMP             LR, #0
CMPNE           LR, #0x2F ; '/'
BEQ             loc_60DA8
CMP             LR, #0x2E ; '.'
BNE             loc_60DA0
LDRB            LR, [R2,#2]
CMP             LR, #0
CMPNE           LR, #0x2F ; '/'
BNE             loc_60DA0
CMP             R3, R0
BLS             loc_60D90

loc_60D84
LDRB            R2, [R3,#-1]!
CMP             R2, #0x2F ; '/'
BNE             loc_60D84

loc_60D90
MOV             R2, R1
B               loc_60DA8

loc_60D98
MOV             R2, R1
B               loc_60D30

loc_60DA0
STRB            R12, [R3,#1]
ADD             R3, R3, #1

loc_60DA8
ADD             R1, R2, #1
LDRB            R2, [R2,#1]
CMP             R2, #0
BNE             loc_60D98
CMP             R3, R0
BEQ             loc_60DCC
LDRB            R2, [R3]
CMP             R2, #0x2F ; '/'
BEQ             loc_60DD0

loc_60DCC
ADD             R3, R3, #1

loc_60DD0
MOV             R2, #0
MOV             R0, R3
STRB            R2, [R3]
POP             {PC}
; End of function sub_60D24




; char *__fastcall sub_60DE0(char *)
sub_60DE0
PUSH            {R4-R6,LR}
LDRB            R3, [R0]
CMP             R3, #0x2F ; '/'
BNE             loc_60E08
BL              sub_174F8
MOV             R4, R0

loc_60DF8
MOV             R0, R4
BL              sub_60D24
MOV             R0, R4
POP             {R4-R6,PC}

loc_60E08
MOV             R4, R0
MOV             R0, #0
BL              sub_624A4
MOV             R1, R4
MOV             R5, R0
BL              sub_16998
MOV             R4, R0
MOV             R0, R5  ; ptr
BL              free
B               loc_60DF8
; End of function sub_60DE0




; int __fastcall sub_60E30(int)
sub_60E30
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0,#4] ; s1
CMP             R0, #0
BEQ             loc_60E54
LDR             R1, =asc_64E96 ; "--"
BL              strcmp
CMP             R0, #0
ADDEQ           R4, R4, #4

loc_60E54
LDR             R0, [R4,#4]
CMP             R0, #0
BEQ             loc_60E6C
LDR             R3, [R4,#8]
CMP             R3, #0
POPEQ           {R4,PC}

loc_60E6C
BL              sub_162F0
; End of function sub_60E30

off_60E70 DCD asc_64E96 ; "--"



; unsigned __int8 *__fastcall sub_60E74(unsigned __int8 *)
sub_60E74
MOV             R3, R0

loc_60E78
MOV             R0, R3
LDRB            R2, [R3],#1
SUB             R1, R2, #9
CMP             R2, #0x20 ; ' '
CMPNE           R1, #4
BXHI            LR
B               loc_60E78
; End of function sub_60E74




; unsigned __int8 *__fastcall sub_60E94(unsigned __int8 *)
sub_60E94
MOV             R2, R0

loc_60E98
MOV             R0, R2
LDRB            R3, [R2],#1
TST             R3, #0xDF
BXEQ            LR
SUB             R3, R3, #9
CMP             R3, #4
BXLS            LR
B               loc_60E98
; End of function sub_60E94




; unsigned __int8 *__fastcall sub_60EB8(unsigned __int8 *)
sub_60EB8
PUSH            {R4,LR}
MOV             R4, R0
LDR             R1, =aDev ; "/dev/"
BL              sub_1684C
CMP             R0, #0
MOVEQ           R0, R4
POP             {R4,PC}
; End of function sub_60EB8

off_60ED4 DCD aDev      ; "/dev/"



; int __fastcall sub_60ED8(int)
sub_60ED8
LDR             R2, =word_643FE
MOV             R3, #0

loc_60EE0
MOV             R1, R3,LSL#2
LDRH            R12, [R1,R2]
CMP             R12, R0
BNE             loc_60F0C
ADD             R2, R2, R1
LDRH            R0, [R2,#2]
TST             R0, #0x8000
UBFXNE          R0, R0, #0, #0xF
MOVNE           R3, #0xC8
MULNE           R0, R3, R0
BX              LR

loc_60F0C
ADD             R3, R3, #1
CMP             R3, #0x1F
BNE             loc_60EE0
MOV             R0, #0
BX              LR
; End of function sub_60ED8

off_60F20 DCD word_643FE



; int __fastcall sub_60F24(int)
sub_60F24
PUSH            {R4-R8,LR}
MOV             R6, R0
LDR             R7, =word_643FE
MOV             R4, #0

loc_60F34
MOV             R3, R4,LSL#2
LDRH            R5, [R3,R7]
MOV             R0, R5
BL              sub_60ED8
CMP             R0, R6
BEQ             loc_60F5C
ADD             R4, R4, #1
CMP             R4, #0x1F
BNE             loc_60F34
MOV             R5, #0xFFFFFFFF

loc_60F5C
MOV             R0, R5
POP             {R4-R8,PC}
; End of function sub_60F24

off_60F64 DCD word_643FE



; unsigned int sub_60F68()
sub_60F68
PUSH            {R4,LR}
MOV             R0, #0  ; name
BL              sysconf
CMP             R0, #0x4000000
MOVCS           R0, #0x4000000
POP             {R4,PC}
; End of function sub_60F68




; int sub_60F80()
sub_60F80
MOV             R0, #2  ; name
B               sysconf
; End of function sub_60F80




; char *__fastcall sub_60F88(char *)
sub_60F88
PUSH            {R4-R6,LR}
MOV             R4, R0
BL              strlen
MOV             R6, R0
ADD             R3, R4, R0

loc_60F9C
CMP             R4, R3
SUB             R5, R3, R4
BEQ             loc_60FF8
LDRB            R2, [R3,#-1]!
SUB             R1, R2, #9
CMP             R2, #0x20 ; ' '
CMPNE           R1, #4
BLS             loc_60F9C
MOV             R0, R4
BL              sub_60E74
CMP             R0, R4
MOV             R1, R0  ; src
BEQ             loc_60FE4
SUB             R3, R1, R4
MOV             R0, R4  ; dest
SUB             R5, R5, R3
MOV             R2, R5  ; n
BL              memmove

loc_60FE4
CMP             R5, R6
ADD             R0, R4, R5
MOVNE           R3, #0
STRBNE          R3, [R4,R5]
POP             {R4-R6,PC}

loc_60FF8
MOV             R5, #0
B               loc_60FE4
; End of function sub_60F88




; unsigned int __fastcall sub_61000(const char *)
sub_61000
PUSH            {R4-R8,LR}
MOV             R2, #0xA
MOV             R1, #0
MOV             R5, R0
BL              sub_18990
LDR             R3, =dword_7DB94
LDR             R6, [R3]
LDR             R3, [R6]
CMP             R0, #0x40 ; '@'
CMPLS           R3, #0
POPEQ           {R4-R8,PC}
MOV             R0, R5  ; s1
MOV             R2, #3  ; n
LDR             R1, =aSig ; "SIG"
MOV             R4, #0
LDR             R7, =aExit_0 ; "EXIT"
BL              strncasecmp
CMP             R0, #0
ADDEQ           R5, R5, #3

loc_6104C
RSB             R1, R4, R4,LSL#3
MOV             R0, R5  ; s1
ADD             R1, R7, R1 ; s2
BL              strcasecmp
CMP             R0, #0
BNE             loc_6106C
MOV             R0, R4
POP             {R4-R8,PC}

loc_6106C
ADD             R4, R4, #1
CMP             R4, #0x21 ; '!'
BNE             loc_6104C
LDR             R1, =aRtmin ; "RTMIN"
MOV             R2, #5  ; n
MOV             R0, R5  ; s1
BL              strncasecmp
SUBS            R1, R0, #0
BNE             loc_610D0
LDRB            R3, [R5,#5]
CMP             R3, #0
BEQ             loc_61120
CMP             R3, #0x2B ; '+'
BEQ             loc_610AC

loc_610A4
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}

loc_610AC
MOV             R2, #0xA
ADD             R0, R5, #6
BL              sub_18990
LDR             R3, [R6]
CMP             R0, #0x20 ; ' '
CMPLS           R3, #0
BNE             loc_610A4
ADD             R0, R0, #0x20 ; ' '
POP             {R4-R8,PC}

loc_610D0
LDR             R1, =aRtmax ; "RTMAX"
MOV             R2, #5  ; n
MOV             R0, R5  ; s1
BL              strncasecmp
SUBS            R1, R0, #0
BNE             loc_610A4
LDRB            R3, [R5,#5]
CMP             R3, #0
BEQ             loc_61128
CMP             R3, #0x2D ; '-'
BNE             loc_610A4
MOV             R2, #0xA
ADD             R0, R5, #6
BL              sub_18990
LDR             R3, [R6]
CMP             R0, #0x20 ; ' '
CMPLS           R3, #0
BNE             loc_610A4
RSB             R0, R0, #0x40 ; '@'
POP             {R4-R8,PC}

loc_61120
MOV             R0, #0x20 ; ' '
POP             {R4-R8,PC}

loc_61128
MOV             R0, #0x40 ; '@'
POP             {R4-R8,PC}
; End of function sub_61000

off_61130 DCD dword_7DB94
off_61134 DCD aSig      ; "SIG"
off_61138 DCD aExit_0   ; "EXIT"
off_6113C DCD aRtmin    ; "RTMIN"
off_61140 DCD aRtmax    ; "RTMAX"



; char *__fastcall sub_61144(unsigned int)
sub_61144
CMP             R0, #0x20 ; ' '
BHI             loc_61164
LDR             R2, =aExit_0 ; "EXIT"
RSB             R3, R0, R0,LSL#3
ADD             R1, R2, R3
LDRB            R3, [R2,R3]
CMP             R3, #0
BNE             loc_61168

loc_61164
B               sub_16F8C

loc_61168
MOV             R0, R1
BX              LR
; End of function sub_61144

off_61170 DCD aExit_0   ; "EXIT"



; int sub_61174()
sub_61174
PUSH            {R4-R6,LR}
MOV             R4, #1
LDR             R5, =aExit_0 ; "EXIT"
LDR             R6, =a2uS ; "%2u) %s\n"

loc_61184
RSB             R3, R4, R4,LSL#3
ADD             R2, R5, R3
LDRB            R3, [R3,R5]
CMP             R3, #0
BEQ             loc_611A4
MOV             R1, R4
MOV             R0, R6  ; format
BL              printf

loc_611A4
ADD             R4, R4, #1
CMP             R4, #0x21 ; '!'
BNE             loc_61184
LDR             R2, =aRtmax ; "RTMAX"
MOV             R1, #0x40 ; '@'
LDR             R0, =a2uS ; "%2u) %s\n"
POP             {R4-R6,LR}
B               printf
; End of function sub_61174

off_611C4 DCD aExit_0   ; "EXIT"
off_611C8 DCD a2uS      ; "%2u) %s\n"
off_611CC DCD aRtmax    ; "RTMAX"



; int __fastcall sub_611D0(const char *, const char *, const char *)
sub_611D0

var_AC= -0xAC
var_A8= -0xA8
ptr= -0xA0
var_9C= -0x9C
fd= -0x98
var_94= -0x94
var_90= -0x90
var_8C= -0x8C
var_84= -0x84
var_7C= -0x7C
var_6C= -0x6C
var_5C= -0x5C
owner= -0x54
group= -0x50

PUSH            {R4-R11,LR}
MOV             R4, R0
SUB             SP, SP, #0xAC
MOV             R6, R1
LDR             R1, =(aEtcShadow+5) ; needle
STR             R2, [SP,#0xAC+var_90]
BL              strstr
STR             R0, [SP,#0xAC+var_94]
MOV             R0, R4
BL              sub_17BE4
SUBS            R5, R0, #0
MOVEQ           R8, #0xFFFFFFFF
BEQ             loc_612F0
MOV             R1, R5
LDR             R0, =aS_17 ; "%s+"
BL              sub_177E4
MOV             R4, R0
BL              strlen
CMP             R6, #0
LDR             R1, =(asc_6B39D+1) ; ""
SUB             R10, R0, #1
MOVNE           R1, R6
LDR             R0, =aS_8 ; "%s:"
BL              sub_177E4
LDR             R3, [SP,#0xAC+var_94]
STR             R0, [SP,#0xAC+ptr]
MOV             R0, R5
LDR             R1, =unk_6C2FD
CMP             R3, #0
BEQ             loc_612C8
BL              fopen64
SUBS            R6, R0, #0
MOVEQ           R8, R6
BEQ             loc_612D8

loc_61258
LDR             R8, =dword_7DB94
MOV             R9, #0x1E
LDR             R11, =0x186A0
MOV             R0, R6  ; stream
BL              fileno_unlocked
STR             R0, [SP,#0xAC+fd]

loc_61270
MOV             R2, #0x180
MOV             R1, #0xC1
MOV             R0, R4
BL              open64
LDR             R3, [R8]
SUBS            R7, R0, #0
STR             R3, [SP,#0xAC+var_9C]
BGE             loc_612FC
LDR             R2, [R3]
CMP             R2, #0x11
BNE             loc_612AC
MOV             R0, R11 ; useconds
BL              usleep
SUBS            R9, R9, #1
BNE             loc_61270

loc_612AC
MOV             R1, R4
LDR             R0, =aCanTCreateS ; "can't create '%s'"
BL              sub_16AF4

loc_612B8
MOV             R8, #0xFFFFFFFF

loc_612BC               ; stream
MOV             R0, R6
BL              fclose
B               loc_612D8

loc_612C8
BL              sub_61C78
SUBS            R6, R0, #0
MOVEQ           R8, #0xFFFFFFFF
BNE             loc_61258

loc_612D8               ; ptr
MOV             R0, R4
BL              free
MOV             R0, R5  ; ptr
BL              free
LDR             R0, [SP,#0xAC+ptr] ; ptr
BL              free

loc_612F0
MOV             R0, R8
ADD             SP, SP, #0xAC
POP             {R4-R11,PC}

loc_612FC
ADD             R1, SP, #0xAC+var_6C
LDR             R0, [SP,#0xAC+fd]
BLX             sub_62E08
CMP             R0, #0
BNE             loc_61330
LDR             R1, [SP,#0xAC+var_5C]
MOV             R0, R7  ; fd
UBFX            R1, R1, #0, #9 ; mode
BL              fchmod
LDR             R2, [SP,#0xAC+group] ; group
MOV             R0, R7  ; fd
LDR             R1, [SP,#0xAC+owner] ; owner
BL              fchown

loc_61330
LDR             R2, [SP,#0xAC+var_9C]
MOV             R3, #0
MOV             R0, R7
STR             R3, [R2]
BL              sub_61CCC
MOV             R3, #0x2D ; '-'
MOV             R9, R0
STRB            R3, [R4,R10]
MOV             R0, R4  ; name
BL              unlink
CMP             R0, #0
BEQ             loc_6140C
LDR             R3, [SP,#0xAC+var_9C]
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_6140C

loc_61370
MOV             R1, R4
LDR             R0, =aWarningCanTCre ; "warning: can't create backup copy '%s'"
BL              sub_16AF4

loc_6137C
MOV             R3, #0x2B ; '+'
MOV             R2, #0
STRB            R3, [R4,R10]
MOV             R3, #1
STR             R3, [SP,#0xAC+var_8C]
MOV             R3, #0
STRD            R2, R3, [SP,#0xAC+var_84]
MOV             R1, #0xD ; cmd
STRD            R2, R3, [SP,#0xAC+var_7C]
ADD             R2, SP, #0xAC+var_8C
LDR             R0, [SP,#0xAC+fd] ; fd
BL              fcntl
CMP             R0, #0
BGE             loc_613C0
MOV             R1, R5
LDR             R0, =aWarningCanTLoc ; "warning: can't lock '%s'"
BL              sub_16AF4

loc_613C0
LDR             R11, =dword_7DB90
MOV             R8, #0
MOV             R3, #2
STRH            R3, [SP,#0xAC+var_8C]

loc_613D0
MOV             R0, R6
BL              sub_58D24
SUBS            R10, R0, #0
BEQ             loc_614B8
LDR             R1, [SP,#0xAC+ptr]
BL              sub_1684C
CMP             R0, #0
BNE             loc_61424
MOV             R2, R10
LDR             R1, =(aSS_2+3) ; format
MOV             R0, R9  ; stream
BL              fprintf

loc_61400               ; ptr
MOV             R0, R10
BL              free
B               loc_613D0

loc_6140C               ; to
MOV             R1, R4
MOV             R0, R5  ; from
BL              link
CMP             R0, #0
BNE             loc_61370
B               loc_6137C

loc_61424
LDR             R3, [R11]
LDRB            R3, [R3]
CMP             R3, #0x70 ; 'p'
BNE             loc_61400
MOV             R1, #0x3A ; ':'
BL              strchrnul
LDR             R3, [SP,#0xAC+var_94]
CMP             R3, #0
BEQ             loc_6149C
LDRB            R1, [R0]
CMP             R1, #0x3A ; ':'
BNE             loc_6149C
ADD             R0, R0, #1
BL              strchrnul
STR             R0, [SP,#0xAC+var_9C]
MOV             R0, #0  ; timer
BL              time
LDR             R3, [SP,#0xAC+var_9C]
LDR             R2, [SP,#0xAC+ptr]
STR             R3, [SP,#0xAC+var_A8]
LDR             R3, =0xC22E4507
UMULL           R0, R1, R0, R3
MOV             R0, R9  ; stream
MOV             R3, R1,LSR#16
LDR             R1, =aSSUS ; "%s%s:%u%s\n"
STR             R3, [SP,#0xAC+var_AC]
LDR             R3, [SP,#0xAC+var_90]
BL              fprintf

loc_61494
ADD             R8, R8, #1
B               loc_61400

loc_6149C
STR             R0, [SP,#0xAC+var_AC]
MOV             R0, R9  ; stream
LDR             R3, [SP,#0xAC+var_90]
LDR             R2, [SP,#0xAC+ptr]
LDR             R1, =aSSS_2 ; "%s%s%s\n"
BL              fprintf
B               loc_61494

loc_614B8
ADD             R2, SP, #0xAC+var_8C
MOV             R1, #0xD ; cmd
LDR             R0, [SP,#0xAC+fd] ; fd
BL              fcntl
LDR             R3, =dword_7DB94
MOV             R0, R6  ; stream
LDR             R3, [R3]
STR             R10, [R3]
BL              ferror_unlocked
MOV             R10, R0
MOV             R0, R9  ; stream
BL              fflush
ORR             R10, R10, R0
MOV             R0, R7  ; fd
BL              fsync
ORR             R10, R10, R0
MOV             R0, R9  ; stream
BL              fclose
ORRS            R3, R10, R0
BEQ             loc_61518

loc_61508
BL              sub_62654
MOV             R0, R4  ; name
BL              unlink
B               loc_612B8

loc_61518               ; new
MOV             R1, R5
MOV             R0, R4  ; old
BL              rename
CMP             R0, #0
BNE             loc_61508
B               loc_612BC
; End of function sub_611D0

off_61530 DCD aEtcShadow+5 ; "shadow"
off_61534 DCD aS_17     ; "%s+"
off_61538 DCD asc_6B39D+1 ; ""
off_6153C DCD aS_8      ; "%s:"
off_61540 DCD unk_6C2FD
off_61544 DCD dword_7DB94
dword_61548 DCD 0x186A0
off_6154C DCD aCanTCreateS ; "can't create '%s'"
off_61550 DCD aWarningCanTCre ; "warning: can't create backup copy '%s'"
off_61554 DCD aWarningCanTLoc ; "warning: can't lock '%s'"
off_61558 DCD dword_7DB90
off_6155C DCD aSS_2+3   ; "%s\n"
dword_61560 DCD 0xC22E4507
off_61564 DCD aSSUS     ; "%s%s:%u%s\n"
off_61568 DCD aSSS_2    ; "%s%s%s\n"



; int sub_6156C()
sub_6156C
PUSH            {R4,LR}
MOV             R1, #6  ; type
LDR             R0, =aVarRunUtmp ; "/var/run/utmp"
BL              access
CMN             R0, #1
POPNE           {R4,PC}
MOV             R2, #0x1B4
MOV             R1, #0x41 ; 'A'
LDR             R0, =aVarRunUtmp ; "/var/run/utmp"
BL              open64
POP             {R4,LR}
B               close
; End of function sub_6156C

off_6159C DCD aVarRunUtmp ; "/var/run/utmp"



; int __fastcall sub_615A0(__pid_t, __int16, unsigned __int8 *, const char *, const char *)
sub_615A0

var_180= -0x180
var_17C= -0x17C
var_178= -0x178
var_158= -0x158
var_157= -0x157
var_154= -0x154
var_134= -0x134
var_2C= -0x2C
arg_0=  0x18

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x180
MOV             R4, R2
MOV             R8, R0
MOV             R2, #0x180 ; n
MOV             R7, R1
MOV             R0, SP  ; s
MOV             R1, #0  ; c
MOV             R6, R3
LDR             R5, [SP,#0x180+arg_0]
BL              memset
MOV             R0, R4
STR             R8, [SP,#0x180+var_17C]
STRH            R7, [SP,#0x180+var_180]
BL              sub_60EB8
MOV             R2, #0x20 ; ' '
MOV             R1, R0
MOV             R4, R0
ADD             R0, SP, #0x180+var_178
BL              sub_60B34
CMP             R6, #0
BEQ             loc_61608
MOV             R2, #0x20 ; ' '
MOV             R1, R6
ADD             R0, SP, #0x180+var_154
BL              sub_60B34

loc_61608
CMP             R5, #0
BEQ             loc_61620
MOV             R2, #0x100
MOV             R1, R5
ADD             R0, SP, #0x180+var_134
BL              sub_60B34

loc_61620               ; timer
MOV             R0, #0
BL              time
STR             R0, [SP,#0x180+var_2C]
MOV             R0, R4  ; s
LDRB            R3, [R4]
CMP             R3, #0x70 ; 'p'
STRBEQ          R3, [SP,#0x180+var_158]
MOVEQ           R6, #3
ADDEQ           R5, SP, #0x180+var_157
MOVNE           R6, #4
ADDNE           R5, SP, #0x180+var_158
BL              strlen
CMP             R0, #3
MOV             R2, R6  ; n
ADDHI           R4, R4, #3
MOV             R0, R5  ; dest
MOV             R1, R4  ; src
BL              strncpy
BL              sub_6156C
BL              setutxent
MOV             R0, SP  ; utmpx
BL              pututxline
BL              endutxent
MOV             R1, SP
LDR             R0, =aVarLogWtmp ; "/var/log/wtmp"
BL              updwtmpx
ADD             SP, SP, #0x180
POP             {R4-R8,PC}
; End of function sub_615A0

off_61690 DCD aVarLogWtmp ; "/var/log/wtmp"



; void __fastcall sub_61694(__pid_t, int, unsigned __int8 *, const char *, const char *)
sub_61694

var_18C= -0x18C
dest= -0x184
var_17C= -0x17C
var_158= -0x158
var_138= -0x138
var_30= -0x30
arg_0=  0x1C

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x18C
MOV             R9, R0
MOV             R5, R1
MOV             R6, R2
MOV             R7, R3
LDR             R8, [SP,#0x18C+arg_0]
BL              sub_6156C
BL              setutxent

loc_616B8
BL              getutxent
SUBS            R4, R0, #0
BNE             loc_616D4
CMP             R5, #8
BNE             loc_617A4
BL              endutxent
B               loc_617BC

loc_616D4
LDR             R3, [R4,#4]
CMP             R3, R9
BNE             loc_616B8
LDRB            R3, [R4,#0x28]
CMP             R3, #0
BEQ             loc_616B8
LDRSH           R2, [R4]
SUB             R3, R2, #5
UXTH            R3, R3
CMP             R3, #3
BHI             loc_616B8
CMP             R2, R5
BLT             loc_61718
MOV             R2, #0x100 ; n
MOV             R1, #0  ; c
ADD             R0, R4, #0x4C ; 'L' ; s
BL              memset

loc_61718               ; n
MOV             R2, #0x180
MOV             R1, R4  ; src
ADD             R0, SP, #0x18C+dest ; dest
BL              memcpy
CMP             R6, #0
STRH            R5, [SP,#0x18C+dest]
BEQ             loc_6174C
MOV             R0, R6
BL              sub_60EB8
MOV             R2, #0x20 ; ' '
MOV             R1, R0
ADD             R0, SP, #0x18C+var_17C
BL              sub_60B34

loc_6174C
CMP             R7, #0
BEQ             loc_61764
MOV             R2, #0x20 ; ' '
MOV             R1, R7
ADD             R0, SP, #0x18C+var_158
BL              sub_60B34

loc_61764
CMP             R8, #0
BEQ             loc_6177C
MOV             R2, #0x100
MOV             R1, R8
ADD             R0, SP, #0x18C+var_138
BL              sub_60B34

loc_6177C               ; timer
MOV             R0, #0
BL              time
STR             R0, [SP,#0x18C+var_30]
ADD             R0, SP, #0x18C+dest ; utmpx
BL              pututxline
BL              endutxent
ADD             R1, SP, #0x18C+dest
LDR             R0, =aVarLogWtmp ; "/var/log/wtmp"
BL              updwtmpx
B               loc_617BC

loc_617A4
STR             R8, [SP,#0x18C+var_18C]
MOV             R3, R7
MOV             R2, R6
MOV             R1, R5
MOV             R0, R9
BL              sub_615A0

loc_617BC
ADD             SP, SP, #0x18C
POP             {R4-R9,PC}
; End of function sub_61694

off_617C4 DCD aVarLogWtmp ; "/var/log/wtmp"



; void __fastcall sub_617C8(__pid_t)
sub_617C8

var_C= -0xC

MOV             R3, #0
PUSH            {R0-R2,LR}
MOV             R2, R3
STR             R3, [SP,#0xC+var_C]
MOV             R1, #8
BL              sub_61694
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_617C8




; _BYTE *__fastcall sub_617E8(_BYTE *result, int, int, int)
sub_617E8
CMP             R2, #0
ADD             R1, R1, #3
MOVLE           R12, #0
MOVLE           R1, R0
STRBLE          R12, [R1],R2
BLE             loc_618A4
PUSH            {R4,LR}

loc_61804
SUB             R2, R2, #3
CMN             R2, #2
MOVEQ           LR, #0
MOVEQ           R12, LR
BEQ             loc_61828
CMN             R2, #1
LDRB            R12, [R1,#-2]
LDRBNE          LR, [R1,#-1]
MOVEQ           LR, #0

loc_61828
LDRB            R4, [R1,#-3]
CMP             R2, #0
ADD             R0, R0, #4
ADD             R1, R1, #3
LDRB            R4, [R3,R4,LSR#2]
STRB            R4, [R0,#-4]
LDRB            R4, [R1,#-6]
MOV             R4, R4,LSL#4
AND             R4, R4, #0x30 ; '0'
ADD             R4, R3, R4
LDRB            R4, [R4,R12,LSR#4]
MOV             R12, R12,LSL#2
AND             R12, R12, #0x3C ; '<'
ADD             R12, R3, R12
STRB            R4, [R0,#-3]
LDRB            R12, [R12,LR,LSR#6]
AND             LR, LR, #0x3F ; '?'
STRB            R12, [R0,#-2]
LDRB            R12, [R3,LR]
STRB            R12, [R0,#-1]
BGT             loc_61804
MOV             R1, R0
MOV             R12, #0
STRB            R12, [R1],R2

loc_61888
CMP             R0, R1
POPEQ           {R4,PC}
LDRB            R2, [R3,#0x40]
STRB            R2, [R0,#-1]!
B               loc_61888

loc_6189C
LDRB            R2, [R3,#0x40]
STRB            R2, [R0,#-1]!

loc_618A4
CMP             R0, R1
BXEQ            LR
B               loc_6189C
; End of function sub_617E8




; _BYTE *__fastcall sub_618B0(_BYTE **, _BYTE *, int)
sub_618B0

var_8= -8
var_7= -7
var_6= -6
var_5= -5

PUSH            {R0-R2,R4-R11,LR}
MOV             R8, R0
LDR             R4, [R0]
MOV             R6, R1
ADD             R10, SP, #0xC+var_8
LDR             R9, =aAbcdefghijklmn ; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...

loc_618C8
MOV             R11, R6
MOV             R5, #0

loc_618D0
MOV             R7, R11

loc_618D4
MOV             R3, R7
ADD             R7, R7, #1
LDRB            R1, [R3] ; c
CMP             R1, #0
BEQ             loc_6197C
MOV             R0, R9  ; s
MOV             R11, R7
BL              strchr
CMP             R0, #0
BEQ             loc_618D4
SUB             R0, R0, R9
CMP             R0, #0x40 ; '@'
BEQ             loc_61964
STRB            R0, [R5,R10]
ADD             R5, R5, #1
CMP             R5, #4
BNE             loc_618D0

loc_61918
LDRB            R12, [SP,#0xC+var_7]
CMP             R5, #2
LDRB            R1, [SP,#0xC+var_8]
ADD             R3, R4, #1
MOV             R2, R12,LSR#4
ORR             R2, R2, R1,LSL#2
STRB            R2, [R4]
BEQ             loc_61970
LDRB            R0, [SP,#0xC+var_6]
CMP             R5, #4
LDRBEQ          R2, [SP,#0xC+var_5]
ADD             R3, R4, #2
ADDEQ           R3, R4, #3
MOV             R1, R0,LSR#2
ORREQ           R2, R2, R0,LSL#6
ORR             R1, R1, R12,LSL#4
STRBEQ          R2, [R4,#2]
STRB            R1, [R4,#1]
B               loc_61970

loc_61964
CMP             R5, #1
MOVLE           R3, R4
BGT             loc_61918

loc_61970
MOV             R4, R3
MOV             R6, R7
B               loc_618C8

loc_6197C
CMP             R5, #0
STR             R4, [R8]
MOVEQ           R6, R3
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_618B0

off_61994 DCD aAbcdefghijklmn ; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...



; int __fastcall sub_61998(FILE *stream, FILE *, __int16)
sub_61998

var_80= -0x80
var_7C= -0x7C
s1= -0x48
var_4= -4

PUSH            {R4-R11,LR}
MOV             R8, R0
LDR             R11, =asc_6C3A3 ; "===="
SUB             SP, SP, #0x84
MOV             R9, R1
MOV             R7, R2
MOV             R6, #0
AND             R10, R2, #0x100

loc_619B8
CMP             R6, #0x3F ; '?'
BGT             loc_619F4
MOV             R0, R8  ; stream
BL              getc_unlocked
SXTB            R3, R7
CMP             R3, R0
BNE             loc_619E4
CMP             R6, #0
BEQ             loc_61AA4

loc_619DC
MOV             R5, #1
B               loc_619F8

loc_619E4
CMN             R0, #1
BEQ             loc_619DC
CMP             R0, #0x20 ; ' '
BGT             loc_61A70

loc_619F4
MOV             R5, #0

loc_619F8
ADD             R3, SP, #0x84+var_4
CMP             R10, #0
ADD             R6, R3, R6
MOV             R3, #0
STRB            R3, [R6,#-0x44]
BEQ             loc_61A24
MOV             R1, R11 ; s2
ADD             R0, SP, #0x84+s1 ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_61AA4

loc_61A24
ADD             R6, SP, #0x84+var_7C
ADD             R0, SP, #0x84+var_4
ADD             R1, SP, #0x84+s1
STR             R6, [R0,#-0x7C]!
BL              sub_618B0
LDR             R1, [SP,#0x84+var_80]
MOV             R4, R0
MOV             R3, R9  ; s
MOV             R2, #1  ; n
MOV             R0, R6  ; ptr
SUB             R1, R1, R6 ; size
BL              fwrite
CMP             R5, #0
BEQ             loc_61A84
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_61AA4
LDR             R0, =aTruncatedBase6 ; "truncated base64 input"
BL              sub_16DBC

loc_61A70
ADD             R3, SP, #0x84+var_4
ADD             R3, R3, R6
ADD             R6, R6, #1
STRB            R0, [R3,#-0x44]
B               loc_619B8

loc_61A84               ; s
MOV             R0, R4
BL              strlen
MOV             R1, R4  ; src
MOV             R6, R0
MOV             R2, R0  ; n
ADD             R0, SP, #0x84+s1 ; dest
BL              memmove
B               loc_619B8

loc_61AA4
ADD             SP, SP, #0x84
POP             {R4-R11,PC}
; End of function sub_61998

off_61AAC DCD asc_6C3A3 ; "===="
off_61AB0 DCD aTruncatedBase6 ; "truncated base64 input"



; __pid_t __fastcall sub_61AB4(const char **)
sub_61AB4

argv= -0xC
var_4= -4

PUSH            {R0-R4,LR}
STR             R0, [SP,#0x10+argv]
BL              sub_177D8
MOV             R3, #0
STR             R3, [SP,#0x10+var_4]
BL              vfork
SUBS            R3, R0, #0
BLT             loc_61B28
BNE             loc_61AFC
LDR             R1, [SP,#0x10+argv] ; argv
LDR             R0, [R1] ; file
BL              execvp
LDR             R3, =dword_7DB94
MOV             R0, #0x6F ; 'o' ; status
LDR             R3, [R3]
LDR             R3, [R3]
STR             R3, [SP,#0x10+var_4]
BL              _exit

loc_61AFC
LDR             R2, [SP,#0x10+var_4]
CMP             R2, #0
BEQ             loc_61B28
MOV             R2, #0  ; options
MOV             R1, R2  ; stat_loc
BL              sub_17398
LDR             R3, =dword_7DB94
LDR             R2, [SP,#0x10+var_4]
LDR             R3, [R3]
STR             R2, [R3]
MOV             R3, #0xFFFFFFFF

loc_61B28
MOV             R0, R3
ADD             SP, SP, #0x14
POP             {PC}
; End of function sub_61AB4

off_61B34 DCD dword_7DB94



; int __fastcall sub_61B38(const char **)
sub_61B38
PUSH            {R4,LR}
BL              sub_61AB4
POP             {R4,LR}
B               sub_173EC
; End of function sub_61B38




; int __fastcall sub_61B48(char)
sub_61B48
TST             R0, #1
PUSH            {R4-R6,LR}
MOV             R5, R0
BEQ             loc_61B60
LDR             R0, =(asc_69510+3) ; "/"
BL              sub_178FC

loc_61B60
TST             R5, #2
BEQ             loc_61B80
MOV             R0, #0  ; fd
BL              close
MOV             R0, #1  ; fd
BL              close
MOV             R0, #2  ; fd
BL              close

loc_61B80
MOV             R1, #2
LDR             R0, =aDevNull ; "/dev/null"
BL              open64
SUBS            R4, R0, #0
BGE             loc_61BA4
MOV             R1, #0
LDR             R0, =(asc_69510+3) ; "/"
BL              sub_175D8

loc_61BA0
MOV             R4, R0

loc_61BA4
CMP             R4, #1
BLS             loc_61BC8
TST             R5, #8
BNE             loc_61C10
BL              sub_17B64
SUBS            R6, R0, #0
BEQ             loc_61BD4

loc_61BC0               ; status
MOV             R0, #0
BL              _exit

loc_61BC8               ; fd
MOV             R0, R4
BL              dup
B               loc_61BA0

loc_61BD4
BL              setsid
MOV             R1, R6  ; fd2
MOV             R0, R4  ; fd
BL              dup2
MOV             R1, #1  ; fd2
MOV             R0, R4  ; fd
BL              dup2
MOV             R1, #2  ; fd2
MOV             R0, R4  ; fd
BL              dup2
TST             R5, #0x10
BEQ             loc_61C10
BL              sub_17B64
CMP             R0, #0
BNE             loc_61BC0

loc_61C10
AND             R5, R5, #4

loc_61C14
CMP             R4, #2
POPLE           {R4-R6,PC}
MOV             R0, R4  ; fd
SUB             R6, R4, #1
BL              close
CMP             R5, #0
POPEQ           {R4-R6,PC}
MOV             R4, R6
B               loc_61C14
; End of function sub_61B48

off_61C38 DCD asc_69510+3 ; "/"
off_61C3C DCD aDevNull  ; "/dev/null"



; int sub_61C40()
sub_61C40
MOV             R0, #8
B               sub_61B48
; End of function sub_61C40




; FILE *__fastcall sub_61C48(unsigned int)
sub_61C48
LDR             R3, =(aNTR+5) ; "r"
TST             R0, #1
PUSH            {R4,LR}
MOV             R0, R0,LSR#1 ; fd
LDR             R1, =(aProcNetRaw+0xC) ; "w"
MOVEQ           R1, R3  ; modes
BL              fdopen
CMP             R0, #0
POPNE           {R4,PC}
BL              sub_17440
; End of function sub_61C48

off_61C70 DCD aNTR+5    ; "r"
off_61C74 DCD aProcNetRaw+0xC ; "w"



; int __fastcall sub_61C78(const char *, int)
sub_61C78
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              fopen64
SUBS            R4, R0, #0
BNE             loc_61C94
MOV             R0, R5
BL              sub_16B80

loc_61C94
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_61C78




; int __fastcall sub_61C9C(int)
sub_61C9C
LDR             R1, =(aNTR+5) ; "r"
B               fopen64
; End of function sub_61C9C

off_61CA4 DCD aNTR+5    ; "r"



; int __fastcall sub_61CA8(const char *)
sub_61CA8
LDR             R1, =(aNTR+5) ; "r"
B               sub_17590
; End of function sub_61CA8

off_61CB0 DCD aNTR+5    ; "r"



; int __fastcall sub_61CB4(int)
sub_61CB4
LDR             R1, =(aProcNetRaw+0xC) ; "w"
B               fopen64
; End of function sub_61CB4

off_61CBC DCD aProcNetRaw+0xC ; "w"



; int __fastcall sub_61CC0(const char *)
sub_61CC0
LDR             R1, =(aProcNetRaw+0xC) ; "w"
B               sub_17590
; End of function sub_61CC0

off_61CC8 DCD aProcNetRaw+0xC ; "w"



; FILE *__fastcall sub_61CCC(int)
sub_61CCC
MOV             R0, R0,LSL#1
ADD             R0, R0, #1
B               sub_61C48
; End of function sub_61CCC




; int __fastcall sub_61CD8(int)
sub_61CD8
LDR             R2, =aStandardInput ; "standard input"
LDR             R3, =stdin
CMP             R0, R2
LDR             R3, [R3]
BEQ             loc_61D0C
LDRB            R2, [R0]
CMP             R2, #0x2D ; '-'
BNE             loc_61D04
LDRB            R2, [R0,#1]
CMP             R2, #0
BEQ             loc_61D0C

loc_61D04
LDR             R1, =(aNTR+5) ; "r"
B               sub_61C78

loc_61D0C
MOV             R0, R3
BX              LR
; End of function sub_61CD8

off_61D14 DCD aStandardInput ; "standard input"
off_61D18 DCD stdin
off_61D1C DCD aNTR+5    ; "r"



; int __fastcall sub_61D20(int)
sub_61D20
PUSH            {R4,LR}
BL              sub_61CD8
CMP             R0, #0
POPNE           {R4,PC}
BL              sub_16E08
; End of function sub_61D20




; int __fastcall sub_61D34(int)
sub_61D34
LDR             R3, =aStandardInput ; "standard input"
CMP             R0, R3
BEQ             loc_61D60
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BNE             loc_61D58
LDRB            R3, [R0,#1]
CMP             R3, #0
BEQ             loc_61D60

loc_61D58
MOV             R1, #0
B               sub_1760C

loc_61D60
MOV             R0, #0
BX              LR
; End of function sub_61D34

off_61D68 DCD aStandardInput ; "standard input"



; int __fastcall sub_61D6C(int)
sub_61D6C
PUSH            {R4,LR}
BL              sub_61D34
CMP             R0, #0
POPGE           {R4,PC}
BL              sub_16E08
; End of function sub_61D6C




; unsigned __int64 __fastcall sub_61D80(const char *, int base, unsigned __int64, unsigned __int64, int)
sub_61D80

var_1C= -0x1C
var_14= -0x14
endptr= -8
arg_0=  0x24
arg_8=  0x2C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1C
STRD            R2, R3, [SP,#0x1C+var_14]
MOV             R7, R0
LDRB            R3, [R0]
LDR             R8, [SP,#0x1C+arg_8]
SUB             R2, R3, #0x2B ; '+'
TST             R2, #0xFD
BEQ             loc_61E10
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
MOVLS           R3, #1
MOVHI           R3, #0
BLS             loc_61E10
LDR             R2, =dword_7DB94
LDR             R6, [R2]
MOV             R2, R1  ; base
ADD             R1, SP, #0x1C+endptr ; endptr
LDR             R10, [R6]
STR             R3, [R6]
BL              strtoull
LDR             R3, [R6]
MOV             R4, R0
MOV             R5, R1
CMP             R3, #0
BNE             loc_61E10
LDR             R9, [SP,#0x1C+endptr]
CMP             R9, R7
BEQ             loc_61E10
CMP             R8, #0
STR             R10, [R6]
BNE             loc_61E20

loc_61E04
LDRB            R3, [R9]
CMP             R3, #0
BEQ             loc_61E84

loc_61E10
MOV             R1, R7
LDR             R0, =aInvalidNumberS ; "invalid number '%s'"
BL              sub_16DBC

loc_61E1C
ADD             R8, R8, #8

loc_61E20
LDR             R6, [R8,#4]
CMP             R6, #0
BEQ             loc_61E04
MOV             R1, R9  ; s2
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_61E1C
CMP             R5, #0
MOV             R10, #0
MOV             R11, #0
BEQ             loc_61E6C
UMULL           R8, R9, R4, R6
MOV             R3, R0
MOV             R2, R9
UMLAL           R2, R3, R5, R6
CMP             R3, #0
MOVNE           R10, #1
MOVNE           R11, #0

loc_61E6C
ORRS            R3, R10, R11
BNE             loc_61EB4
MUL             R0, R0, R4
MLA             R0, R6, R5, R0
UMULL           R4, R5, R4, R6
ADD             R5, R0, R5

loc_61E84
LDRD            R2, R3, [SP,#0x1C+var_14]
LDRD            R0, R1, [SP,#0x1C+arg_0]
CMP             R5, R3
CMPEQ           R4, R2
MOVCS           R3, #1
MOVCC           R3, #0
CMP             R5, R1
CMPEQ           R4, R0
MOVHI           R3, #0
ANDLS           R3, R3, #1
CMP             R3, #0
BNE             loc_61ECC

loc_61EB4
LDRD            R2, R3, [SP,#0x1C+arg_0]
MOV             R1, R7
LDR             R0, =aNumberSIsNotIn ; "number %s is not in %llu..%llu range"
STRD            R2, R3, [SP,#0x1C+var_1C]
LDRD            R2, R3, [SP,#0x1C+var_14]
BL              sub_16DBC

loc_61ECC
MOV             R0, R4
MOV             R1, R5
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}
; End of function sub_61D80

off_61EDC DCD dword_7DB94
off_61EE0 DCD aInvalidNumberS ; "invalid number '%s'"
off_61EE4 DCD aNumberSIsNotIn ; "number %s is not in %llu..%llu range"



; unsigned __int64 __fastcall sub_61EE8(const char *, int)
sub_61EE8

var_10= -0x10
var_8= -8

PUSH            {R0-R4,LR}
MOV             R2, #0xFFFFFFFF
MOV             R3, #0xFFFFFFFF
STR             R1, [SP,#0x10+var_8] ; int
MOV             R1, #0xA ; base
STRD            R2, R3, [SP,#0x10+var_10] ; int
MOV             R2, #0  ; int
MOV             R3, #0  ; int
BL              sub_61D80
ADD             SP, SP, #0x14
POP             {PC}
; End of function sub_61EE8




; unsigned int __fastcall sub_61F14(const char *, int base, unsigned int, unsigned int, int)
sub_61F14

var_14= -0x14
var_10= -0x10
endptr= -8
arg_0=  0x24

PUSH            {R4-R11,LR}
MOV             R9, R3
LDRB            R3, [R0]
MOV             R8, R2
SUB             SP, SP, #0x14
MOV             R6, R0
LDR             R5, [SP,#0x14+arg_0]
SUB             R2, R3, #0x2B ; '+'
TST             R2, #0xFD
BEQ             loc_6201C
SUB             R2, R3, #9
CMP             R3, #0x20 ; ' '
CMPNE           R2, #4
MOVLS           R3, #1
MOVHI           R3, #0
BLS             loc_6201C
LDR             R2, =dword_7DB94
LDR             R7, [R2]
MOV             R2, R1  ; base
ADD             R1, SP, #0x14+endptr ; endptr
LDR             R11, [R7]
STR             R3, [R7]
BL              strtoul
LDR             R3, [R7]
MOV             R4, R0
CMP             R3, #0
BNE             loc_6201C
LDR             R10, [SP,#0x14+endptr]
CMP             R10, R6
BEQ             loc_6201C
CMP             R5, #0
STR             R11, [R7]
BNE             loc_61FD0

loc_61F98
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_6201C

loc_61FA4
CMP             R4, R8
MOVCC           R3, #0
MOVCS           R3, #1
CMP             R4, R9
MOVHI           R3, #0
CMP             R3, #0
BEQ             loc_62000
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_61FCC
ADD             R5, R5, #8

loc_61FD0
LDR             R7, [R5,#4]
CMP             R7, #0
BEQ             loc_61F98
MOV             R1, R10 ; s2
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_61FCC
UMULL           R2, R3, R4, R7
CMP             R3, #0
MULEQ           R4, R7, R4
BEQ             loc_61FA4

loc_62000
MOV             R3, #0
STR             R9, [SP,#0x14+var_14]
STR             R3, [SP,#0x14+var_10]
MOV             R2, R8
MOV             R1, R6
LDR             R0, =aNumberSIsNotIn ; "number %s is not in %llu..%llu range"
BL              sub_16DBC

loc_6201C
MOV             R1, R6
LDR             R0, =aInvalidNumberS ; "invalid number '%s'"
BL              sub_16DBC
; End of function sub_61F14

off_62028 DCD dword_7DB94
off_6202C DCD aNumberSIsNotIn ; "number %s is not in %llu..%llu range"
off_62030 DCD aInvalidNumberS ; "invalid number '%s'"



; unsigned int __fastcall sub_62034(const char *, int, unsigned int, unsigned int)
sub_62034

var_C= -0xC

MOV             R12, #0
PUSH            {R0-R2,LR}
STR             R12, [SP,#0xC+var_C] ; int
BL              sub_61F14
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_62034




; unsigned int __fastcall sub_6204C(const char *, unsigned int, unsigned int, int)
sub_6204C

var_C= -0xC

PUSH            {R0-R2,LR}
STR             R3, [SP,#0xC+var_C] ; int
MOV             R3, R2  ; int
MOV             R2, R1  ; int
MOV             R1, #0xA ; base
BL              sub_61F14
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_6204C




; unsigned int __fastcall sub_6206C(const char *, unsigned int, unsigned int)
sub_6206C

var_C= -0xC

MOV             R3, #0
PUSH            {R0-R2,LR}
STR             R3, [SP,#0xC+var_C] ; int
MOV             R3, R2  ; int
MOV             R2, R1  ; int
MOV             R1, #0xA ; base
BL              sub_61F14
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_6206C




; unsigned int __fastcall sub_62090(const char *, int)
sub_62090

var_C= -0xC

PUSH            {R0-R2,LR}
MOV             R3, #0xFFFFFFFF ; int
STR             R1, [SP,#0xC+var_C] ; int
MOV             R2, #0  ; int
MOV             R1, #0xA ; base
BL              sub_61F14
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_62090




; unsigned int __fastcall sub_620B0(const char *)
sub_620B0
MOV             R1, #0  ; int
B               sub_62090
; End of function sub_620B0




; signed int __fastcall sub_620B8(const char *, int, signed int, signed int, int)
sub_620B8

var_8= -8
arg_0=  0x10

PUSH            {R0,R1,R4-R6,LR}
MOV             R5, R3
LDRB            R3, [R0]
MOV             R4, R0
MOV             R6, R2
SUB             R3, R3, #0x2B ; '+'
TST             R3, #0xFD
MOVNE           R3, #0x7FFFFFFF
BNE             loc_620F0
LDRB            R3, [R4,#1]
ADD             R0, R4, #1 ; int
CMP             R3, #0x2D ; '-'
MOVNE           R3, #0x7FFFFFFF
MOVEQ           R3, #0x80000000 ; int

loc_620F0
LDR             R2, [SP,#8+arg_0]
STR             R2, [SP,#8+var_8] ; int
MOV             R2, #0  ; int
BL              sub_61F14
LDRB            R3, [R4]
CMP             R3, #0x2D ; '-'
RSBEQ           R0, R0, #0
CMP             R0, R5
MOVLE           R3, #0
MOVGT           R3, #1
CMP             R0, R6
ORRLT           R3, R3, #1
CMP             R3, #0
BEQ             loc_62148
MOV             R3, R5,ASR#31
MOV             R2, R5
MOV             R1, R4
LDR             R0, =aNumberSIsNotIn_0 ; "number %s is not in %lld..%lld range"
STRD            R2, R3, [SP,#8+var_8]
MOV             R2, R6
MOV             R3, R6,ASR#31
BL              sub_16DBC

loc_62148
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_620B8

off_62150 DCD aNumberSIsNotIn_0 ; "number %s is not in %lld..%lld range"



; signed int __fastcall sub_62154(const char *, signed int, signed int)
sub_62154

var_C= -0xC

MOV             R3, #0
PUSH            {R0-R2,LR}
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, R1
MOV             R1, #0xA
BL              sub_620B8
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_62154




; signed int __fastcall sub_62178(const char *)
sub_62178

var_C= -0xC

MOV             R3, #0
PUSH            {R0-R2,LR}
MOV             R2, #0x80000000
STR             R3, [SP,#0xC+var_C]
MOV             R1, #0xA
MOV             R3, #0x7FFFFFFF
BL              sub_620B8
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_62178




; unsigned int __fastcall sub_6219C(const char *)
sub_6219C
MOV             R2, #0x7FFFFFFF ; int
MOV             R1, #0  ; int
B               sub_6206C
; End of function sub_6219C




; int __fastcall sub_621A8(const char *)
sub_621A8
PUSH            {R4,LR}
MOVW            R2, #0xFFFF ; int
MOV             R1, #0  ; int
BL              sub_6206C
UXTH            R0, R0
POP             {R4,PC}
; End of function sub_621A8



; Attributes: bp-based frame fpd=0xFFFFFFE4

; _WORD *__fastcall sub_621C0(const char *, unsigned int, int)
sub_621C0

var_28= -0x28
pai= -0x24
inp= -0x20
var_1C= -0x1C
s= -0x14

PUSH            {R4-R9,R11,LR}
MOV             R5, R1
ADD             R11, SP, #0x1C
MOV             R8, #0
SUB             SP, SP, #0x28
MOV             R1, #0x3A ; ':' ; c
MOV             R6, R0
MOV             R4, R2
STR             R8, [R11,#-0x1C+pai]
BL              strrchr
SUBS            R9, R0, #0
BEQ             loc_62268
SUB             R2, R9, R6
MOV             R1, R6
ADD             R3, R2, #0xF
ADD             R2, R2, #1
BIC             R3, R3, #7
SUB             SP, SP, R3
MOV             R0, SP
BL              sub_60B34
MOV             R2, #0xA
MOV             R7, R0
MOV             R1, R8
ADD             R0, R9, #1
BL              sub_18990
LDR             R3, =dword_7DB94
CMP             R0, #0x10000
MOV             R5, R0
LDR             R3, [R3]
LDR             R2, [R3]
MOVCC           R3, #0
MOVCS           R3, #1
CMP             R2, R8
MOVNE           R3, #1
CMP             R3, R8
BEQ             loc_6226C
MOV             R1, R6
LDR             R0, =aBadPortSpecS ; "bad port spec '%s'"
BL              sub_16DDC
ANDS            R4, R4, #2
BEQ             loc_62328

loc_62264
BL              sub_16E08

loc_62268
MOV             R7, R6

loc_6226C               ; inp
SUB             R1, R11, #-(-0x1C+inp)
MOV             R0, R7  ; cp
BL              inet_aton
SUBS            R8, R0, #0
BEQ             loc_622B8
MOV             R0, #0x14
BL              sub_174DC
MOV             R3, #0x10
MOV             R4, R0
STR             R3, [R0]
MOV             R3, #2
STRH            R3, [R0,#4]
LDR             R3, [R11,#-0x1C+inp]
STR             R3, [R0,#8]

loc_622A4
LDRH            R3, [R4,#4]
REV16           R5, R5
CMP             R3, #2
STRHEQ          R5, [R4,#6]
B               loc_62318

loc_622B8               ; n
MOV             R2, #0x14
MOV             R1, R8  ; c
SUB             R0, R11, #-(-0x1C+s) ; s
BL              memset
MOV             R0, #2
MOV             R1, #1
BIC             R3, R4, #2
STRD            R0, R1, [R11,#-0x1C+var_1C]
STR             R3, [R11,#-0x1C+inp]
SUB             R2, R11, #-(-0x1C+inp) ; req
SUB             R3, R11, #-(-0x1C+pai) ; pai
MOV             R1, R8  ; service
MOV             R0, R7  ; name
BL              getaddrinfo
CMP             R0, #0
BNE             loc_62304
LDR             R7, [R11,#-0x1C+pai]
CMP             R7, #0
BNE             loc_62334

loc_62304
MOV             R1, R6
LDR             R0, =aBadAddressS ; "bad address '%s'"
BL              sub_16DDC
ANDS            R4, R4, #2
BNE             loc_62264

loc_62318               ; ai
LDR             R0, [R11,#-0x1C+pai]
CMP             R0, #0
BEQ             loc_62328
BL              freeaddrinfo

loc_62328
MOV             R0, R4
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}

loc_62334
LDR             R0, [R7,#0x10]
ADD             R0, R0, #4
BL              sub_1748C
LDR             R2, [R7,#0x10] ; n
MOV             R4, R0
LDR             R1, [R7,#0x14] ; src
STR             R2, [R0],#4 ; dest
BL              memcpy
B               loc_622A4
; End of function sub_621C0

off_62358 DCD dword_7DB94
off_6235C DCD aBadPortSpecS ; "bad port spec '%s'"
off_62360 DCD aBadAddressS ; "bad address '%s'"



; char *__fastcall sub_62364(const struct sockaddr *, int)
sub_62364

serv= -0xA4
servlen= -0xA0
flags= -0x9C
host= -0x84

PUSH            {R4,R5,LR}
ORR             R3, R1, #2
SUB             SP, SP, #0xA4
MOV             R5, R1
MOV             R1, #0x10 ; salen
ADD             R2, SP, #0xA4+host ; host
ADD             R4, SP, R1
STR             R3, [SP,#0xA4+flags] ; flags
STR             R1, [SP,#0xA4+servlen] ; servlen
MOV             R3, #0x80 ; hostlen
STR             R4, [SP,#0xA4+serv] ; serv
BL              getnameinfo
CMP             R0, #0
MOVNE           R0, #0
BNE             loc_623B0
TST             R5, #2
BEQ             loc_623B8
ADD             R0, SP, #0xA4+host
BL              sub_174F8

loc_623B0
ADD             SP, SP, #0xA4
POP             {R4,R5,PC}

loc_623B8
MOV             R2, R4
ADD             R1, SP, #0xA4+host
LDR             R0, =aSS_0 ; "%s:%s"
BL              sub_177E4
B               loc_623B0
; End of function sub_62364

off_623CC DCD aSS_0     ; "%s:%s"



; int __fastcall sub_623D0(int, int, int, int)
sub_623D0

optlen= -0x10
var_4= -4
var_s0=  0

PUSH            {R0-R4,LR}
ADD             R12, SP, #0x10+var_s0
STR             R3, [R12,#-4]!
MOV             R3, #4
STR             R3, [SP,#0x10+optlen] ; optlen
MOV             R3, R12 ; optval
BL              setsockopt
ADD             SP, SP, #0x14
POP             {PC}
; End of function sub_623D0




; int __fastcall sub_623F4(int, int, int)
sub_623F4
MOV             R3, #1
B               sub_623D0
; End of function sub_623F4




; int __fastcall sub_623FC(int, int, int)
sub_623FC
MOV             R3, R2
MOV             R2, R1
MOV             R1, #1
B               sub_623D0
; End of function sub_623FC

; START OF FUNCTION CHUNK FOR sub_62414

loc_6240C
MOV             R2, #1
B               sub_623FC
; END OF FUNCTION CHUNK FOR sub_62414



; int __fastcall sub_62414(int)
sub_62414

; FUNCTION CHUNK AT 0006240C SIZE 00000008 BYTES

MOV             R1, #2
B               loc_6240C
; End of function sub_62414




; void sub_6241C()
sub_6241C
MOV             R1, #6
B               loc_6240C
; End of function sub_6241C




; int __fastcall sub_62424(int, const char *)
sub_62424

optlen= -0x2C
optval= -0x24

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x2C
MOV             R4, R0
ADD             R0, SP, #0x2C+optval
MOV             R5, R1
BL              sub_16EA8
MOV             R3, #0x20 ; ' '
MOV             R0, R4  ; fd
STR             R3, [SP,#0x2C+optlen] ; optlen
MOV             R2, #0x19 ; optname
ADD             R3, SP, #0x2C+optval ; optval
MOV             R1, #1  ; level
BL              setsockopt
SUBS            R4, R0, #0
BEQ             loc_6246C
MOV             R1, R5
LDR             R0, =aCanTBindToInte ; "can't bind to interface %s"
BL              sub_16AF4

loc_6246C
MOV             R0, R4
ADD             SP, SP, #0x2C ; ','
POP             {R4,R5,PC}
; End of function sub_62424

off_62478 DCD aCanTBindToInte ; "can't bind to interface %s"



; _WORD *__fastcall sub_6247C(const char *, unsigned int)
sub_6247C
MOV             R2, #0
B               sub_621C0
; End of function sub_6247C




; _WORD *__fastcall sub_62484(const char *, unsigned int)
sub_62484
MOV             R2, #2
B               sub_621C0
; End of function sub_62484




; _WORD *__fastcall sub_6248C(const char *, unsigned int)
sub_6248C
MOV             R2, #6
B               sub_621C0
; End of function sub_6248C




; char *__fastcall sub_62494(const struct sockaddr *)
sub_62494
MOV             R1, #2
B               sub_62364
; End of function sub_62494




; char *__fastcall sub_6249C(const struct sockaddr *)
sub_6249C
MOV             R1, #3
B               sub_62364
; End of function sub_6249C




; void *__fastcall sub_624A4(void *)
sub_624A4
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R7, =dword_7DB94
MOV             R5, #0x80

loc_624B4
ADD             R5, R5, #0x40 ; '@'
MOV             R0, R4
MOV             R1, R5
BL              sub_174B4
MOV             R1, R5  ; size
MOV             R4, R0
BL              getcwd
SUBS            R6, R0, #0
BNE             loc_62500
LDR             R3, [R7]
LDR             R3, [R3]
CMP             R3, #0x22 ; '"'
BEQ             loc_624B4
MOV             R0, R4  ; ptr
BL              free
LDR             R0, =aGetcwd_0 ; "getcwd"
BL              sub_16AF4
MOV             R0, R6
POP             {R4-R8,PC}

loc_62500               ; s
MOV             R0, R4
BL              strlen
ADD             R1, R0, #1
MOV             R0, R4
POP             {R4-R8,LR}
B               sub_174B4
; End of function sub_624A4

off_62518 DCD dword_7DB94
off_6251C DCD aGetcwd_0 ; "getcwd"



; struct hostent *__fastcall sub_62520(const char *)
sub_62520
PUSH            {R4,LR}
MOV             R4, R0
BL              gethostbyname
CMP             R0, #0
POPNE           {R4,PC}
MOV             R1, R4
LDR             R0, =(aSS_8+3) ; "%s"
BL              sub_62624
; End of function sub_62520

off_62540 DCD aSS_8+3   ; "%s"



; char *__fastcall sub_62544(void *, unsigned int, int)
sub_62544
PUSH            {R4-R8,LR}
MOV             R6, R2
UXTB            R2, R1
MOV             R5, #1
MOV             R5, R5,LSL R2
SUB             R3, R5, #1
ANDS            R7, R3, R6
MOVNE           R8, R0
BNE             loc_6258C
MOV             R4, R1,LSR#8
ADD             R1, R5, R6
MLA             R1, R1, R4, R4
BL              sub_174B4
MLA             R2, R5, R4, R4 ; n
MOV             R8, R0
MOV             R1, R7  ; c
MLA             R0, R4, R6, R0 ; s
BL              memset

loc_6258C
MOV             R0, R8
POP             {R4-R8,PC}
; End of function sub_62544




; char *__fastcall sub_62594(regex_t *, const char *, int)
sub_62594
PUSH            {R4-R8,LR}
MOV             R6, R0
BL              regcomp
SUBS            R5, R0, #0
MOVEQ           R4, R5
BEQ             loc_625DC
MOV             R3, #0  ; errbuf_size
MOV             R1, R6  ; preg
MOV             R2, R3  ; errbuf
BL              regerror
MOV             R7, R0
BL              sub_1748C
MOV             R3, R7  ; errbuf_size
MOV             R4, R0
MOV             R2, R0  ; errbuf
MOV             R1, R6  ; preg
MOV             R0, R5  ; errcode
BL              regerror

loc_625DC
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_62594




; char *__fastcall sub_625E4(regex_t *, const char *, int)
sub_625E4
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_62594
SUBS            R2, R0, #0
POPEQ           {R4,PC}
MOV             R1, R4
LDR             R0, =aBadRegexSS ; "bad regex '%s': %s"
BL              sub_16DBC
; End of function sub_625E4

off_62604 DCD aBadRegexSS ; "bad regex '%s': %s"



; int __fastcall sub_62608(const char **, const char **)
sub_62608
LDR             R1, [R1] ; s2
LDR             R0, [R0] ; s1
B               strcmp
; End of function sub_62608




; void __fastcall sub_62614(void *, size_t)
sub_62614
LDR             R3, =sub_62608 ; compar
MOV             R2, #4  ; size
B               qsort
; End of function sub_62614

off_62620 DCD sub_62608


; Attributes: noreturn

; void __noreturn sub_62624(const char *, ...)
sub_62624

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {R0-R2,LR}
ADD             R3, SP, #0xC+varg_r1
STR             R3, [SP,#0xC+var_8]
BL              __h_errno_location
LDR             R0, [R0] ; err_num
BL              hstrerror
LDR             R1, [SP,#0xC+var_8]
MOV             R2, R0
LDR             R0, [SP,#0xC+varg_r0]
BL              sub_16BA4
BL              sub_16E08
; End of function sub_62624




; void sub_62654()
sub_62654
MOV             R0, #0
B               sub_16AF4
; End of function sub_62654



; Attributes: bp-based frame fpd=0xFFFFFFE4

; int __fastcall sub_6265C(__uid_t *, char *s)
sub_6265C
PUSH            {R4-R9,R11,LR}
MOV             R6, R1
ADD             R11, SP, #0x1C
MOV             R4, R0
MOV             R1, #0x3A ; ':' ; c
MOV             R0, R6  ; s
BL              strchr
SUBS            R5, R0, #0
BEQ             loc_626A8
ADD             R5, R5, #1
MOV             R1, R6
SUB             R2, R5, R6
ADD             R3, R2, #0xE
BIC             R3, R3, #7
SUB             SP, SP, R3
MOV             R7, SP
MOV             R6, R7
MOV             R0, R7
BL              sub_60B34

loc_626A8
MOV             R2, #0xA
MOV             R1, #0
MOV             R0, R6
BL              sub_18990
LDR             R3, =dword_7DB94
MOV             R7, R0
LDR             R2, [R3]
MOV             R8, R3
LDR             R2, [R2]
CMP             R2, #0
BNE             loc_62734
STR             R0, [R4]
BL              getpwuid
CMP             R0, #0
LDRNE           R7, [R0,#0xC]
STR             R7, [R4,#4]

loc_626E8
CMP             R5, #0
BEQ             loc_6272C
MOV             R2, #0xA
MOV             R1, #0
MOV             R0, R5
BL              sub_18990
LDR             R3, [R8]
LDR             R3, [R3]
CMP             R3, #0
STREQ           R0, [R4,#4]
BEQ             loc_6272C
MOV             R0, R5  ; name
BL              getgrnam
CMP             R0, #0
BEQ             loc_62744
LDR             R3, [R0,#8]
STR             R3, [R4,#4]

loc_6272C
MOV             R0, #1
B               loc_62748

loc_62734               ; name
MOV             R0, R6
BL              getpwnam
CMP             R0, #0
BNE             loc_62750

loc_62744
MOV             R0, #0

loc_62748
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}

loc_62750
LDR             R3, [R0,#8]
STR             R3, [R4]
LDR             R3, [R0,#0xC]
STR             R3, [R4,#4]
B               loc_626E8
; End of function sub_6265C

off_62764 DCD dword_7DB94



; int __fastcall sub_62768(__uid_t *, char *)
sub_62768
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_6265C
CMP             R0, #0
POPNE           {R4,PC}
MOV             R1, R4
LDR             R0, =aUnknownUserGro ; "unknown user/group %s"
BL              sub_16DBC
; End of function sub_62768

off_62788 DCD aUnknownUserGro ; "unknown user/group %s"



; __uid_t __fastcall sub_6278C(__uid_t *, char *s)
sub_6278C
PUSH            {R4-R6,LR}
MOV             R3, #0xFFFFFFFF
MOV             R4, R1
STR             R3, [R0,#4]
MOV             R5, R0
MOV             R1, #0x2E ; '.' ; c
STR             R3, [R0]
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
BNE             loc_627E8
MOV             R1, #0x3A ; ':' ; c
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_627F4

loc_627CC
CMP             R4, R0
BNE             loc_62808
LDR             R1, =sub_57B64
ADD             R0, R4, #1
BL              sub_57B74
STR             R0, [R5,#4]
POP             {R4-R6,PC}

loc_627E8
MOV             R3, #0x3A ; ':'
STRB            R3, [R0]
B               loc_627CC

loc_627F4
LDR             R1, =sub_57B54
MOV             R0, R4
BL              sub_57B74
STR             R0, [R5]
POP             {R4-R6,PC}

loc_62808
LDRB            R3, [R0,#1]
MOV             R1, R4
CMP             R3, #0
STRBEQ          R3, [R0]
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_62768
; End of function sub_6278C

off_62824 DCD sub_57B64
off_62828 DCD sub_57B54
DCB 0x81
DCB 0xF0, 0, 0x41
DCD 0xBF00E002
DCB 0x83, 0xF0
CODE16
ORRS            R0, R0
PUSH            {R4,R5,LR}
MOV.W           R4, R1,LSL#1
MOV.W           R5, R3,LSL#1
TEQ.W           R4, R5
IT EQ
TEQEQ.W         R0, R2
ITTTT NE
ORRSNE.W        R12, R4, R0
ORRSNE.W        R12, R5, R2
MVNSNE.W        R12, R4,ASR#21
MVNSNE.W        R12, R5,ASR#21
BEQ.W           loc_62A26
MOV.W           R4, R4,LSR#21
RSBS.W          R5, R4, R5,LSR#21
IT LT
NEGLT           R5, R5
BLE             loc_6288A
ADD             R4, R5
EOR.W           R2, R0, R2
EOR.W           R3, R1, R3
EOR.W           R0, R2, R0
EOR.W           R1, R3, R1
EOR.W           R2, R0, R2
EOR.W           R3, R1, R3

loc_6288A
CMP             R5, #0x36 ; '6'
IT HI
POPHI           {R4,R5,PC}
TST.W           R1, #0x80000000
MOV.W           R1, R1,LSL#12
MOV.W           R12, #0x100000
ORR.W           R1, R12, R1,LSR#12
BEQ             loc_628A8
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1

loc_628A8
TST.W           R3, #0x80000000
MOV.W           R3, R3,LSL#12
ORR.W           R3, R12, R3,LSR#12
BEQ             loc_628BC
NEGS            R2, R2
SBC.W           R3, R3, R3,LSL#1

loc_628BC
TEQ.W           R4, R5
BEQ.W           loc_62A12

loc_628C4
SUB.W           R4, R4, #1
RSBS.W          LR, R5, #0x20 ; ' '
BLT             loc_628EA
LSL.W           R12, R2, LR
LSR.W           R2, R2, R5
ADDS            R0, R0, R2
ADC.W           R1, R1, #0
LSL.W           R2, R3, LR
ADDS            R0, R0, R2
ASR.W           R3, R3, R5
ADCS            R1, R3
B               loc_62908

loc_628EA
SUB.W           R5, R5, #0x20 ; ' '
ADD.W           LR, LR, #0x20 ; ' '
CMP             R2, #1
LSL.W           R12, R3, LR
IT CS
ORRCS.W         R12, R12, #2
ASR.W           R3, R3, R5
ADDS            R0, R0, R3
ADCS.W          R1, R1, R3,ASR#31

loc_62908
AND.W           R5, R1, #0x80000000
BPL             loc_6291E
MOV.W           LR, #0
RSBS.W          R12, R12, #0
SBCS.W          R0, LR, R0
SBC.W           R1, LR, R1
; START OF FUNCTION CHUNK FOR sub_62B48

loc_6291E
CMP.W           R1, #0x100000
BCC             loc_6295C
CMP.W           R1, #0x200000
BCC             loc_62944
LSRS            R1, R1, #1
MOVS.W          R0, R0,RRX
MOV.W           R12, R12,RRX
ADD.W           R4, R4, #1
MOV.W           R2, R4,LSL#21
CMN.W           R2, #0x400000
BCS.W           loc_62A78

loc_62944
CMP.W           R12, #0x80000000
IT EQ
MOVSEQ.W        R12, R0,LSR#1
ADCS.W          R0, R0, #0
ADC.W           R1, R1, R4,LSL#20
ORR.W           R1, R1, R5
POP             {R4,R5,PC}

loc_6295C
MOVS.W          R12, R12,LSL#1
ADCS            R0, R0
ADC.W           R1, R1, R1
TST.W           R1, #0x100000
SUB.W           R4, R4, #1
BNE             loc_62944

loc_62970
TEQ.W           R1, #0
ITT EQ
MOVEQ           R1, R0
MOVEQ           R0, #0
CLZ.W           R3, R1
IT EQ
ADDEQ           R3, #0x20 ; ' '
SUB.W           R3, R3, #0xB
SUBS.W          R2, R3, #0x20 ; ' '
BGE             loc_629A6
ADDS            R2, #0xC
BLE             loc_629A2
ADD.W           R12, R2, #0x14
RSB.W           R2, R2, #0xC
LSL.W           R0, R1, R12
LSR.W           R1, R1, R2
B               loc_629BC

loc_629A2
ADD.W           R2, R2, #0x14

loc_629A6
IT LE
RSBLE.W         R12, R2, #0x20 ; ' '
LSL.W           R1, R1, R2
LSR.W           R12, R0, R12
ITT LE
ORRLE.W         R1, R1, R12
LSLLE           R0, R2

loc_629BC
SUBS            R4, R4, R3
ITTT GE
ADDGE.W         R1, R1, R4,LSL#20
ORRGE           R1, R5
POPGE           {R4,R5,PC}
MVN.W           R4, R4
SUBS            R4, #0x1F
BGE             loc_62A0A
ADDS            R4, #0xC
BGT             loc_629F2
ADD.W           R4, R4, #0x14
RSB.W           R2, R4, #0x20 ; ' '
LSR.W           R0, R0, R4
LSL.W           R3, R1, R2
ORR.W           R0, R0, R3
LSR.W           R3, R1, R4
ORR.W           R1, R5, R3
POP             {R4,R5,PC}

loc_629F2
RSB.W           R4, R4, #0xC
RSB.W           R2, R4, #0x20 ; ' '
LSR.W           R0, R0, R2
LSL.W           R3, R1, R4
ORR.W           R0, R0, R3
MOV             R1, R5
POP             {R4,R5,PC}

loc_62A0A
LSR.W           R0, R1, R4
MOV             R1, R5
POP             {R4,R5,PC}
; END OF FUNCTION CHUNK FOR sub_62B48

loc_62A12
TEQ.W           R4, #0
EOR.W           R3, R3, #0x100000
ITTE EQ
EOREQ.W         R1, R1, #0x100000
ADDEQ           R4, #1
SUBNE           R5, #1
B               loc_628C4

loc_62A26
MVNS.W          R12, R4,ASR#21
IT NE
MVNSNE.W        R12, R5,ASR#21
BEQ             loc_62A86
TEQ.W           R4, R5
IT EQ
TEQEQ.W         R0, R2
BEQ             loc_62A4A
ORRS.W          R12, R4, R0
ITT EQ
MOVEQ           R1, R3
MOVEQ           R0, R2
POP             {R4,R5,PC}

loc_62A4A
TEQ.W           R1, R3
ITTT NE
MOVNE           R1, #0
MOVNE           R0, #0
POPNE           {R4,R5,PC}
MOVS.W          R12, R4,LSR#21
BNE             loc_62A68
LSLS            R0, R0, #1
ADCS            R1, R1
IT CS
ORRCS.W         R1, R1, #0x80000000
POP             {R4,R5,PC}

loc_62A68
ADDS.W          R4, R4, #0x400000
ITT CC
ADDCC.W         R1, R1, #0x100000
POPCC           {R4,R5,PC}
AND.W           R5, R1, #0x80000000
; START OF FUNCTION CHUNK FOR sub_62B48

loc_62A78
ORR.W           R1, R5, #0x7F000000
ORR.W           R1, R1, #0xF00000
MOV.W           R0, #0
POP             {R4,R5,PC}
; END OF FUNCTION CHUNK FOR sub_62B48

loc_62A86
MVNS.W          R12, R4,ASR#21
ITTE NE
MOVNE           R1, R3
MOVNE           R0, R2
MVNSEQ.W        R12, R5,ASR#21
ITT NE
MOVNE           R3, R1
MOVNE           R2, R0
ORRS.W          R4, R0, R1,LSL#12
ITTE EQ
ORRSEQ.W        R5, R2, R3,LSL#12
TEQEQ.W         R1, R3
ORRNE.W         R1, R1, #0x80000
POP             {R4,R5,PC}
ALIGN 0x10
TEQ.W           R0, #0
ITT EQ
MOVEQ           R1, #0
BXEQ            LR
PUSH            {R4,R5,LR}
MOV             R4, #0x432
MOV.W           R5, #0
MOV.W           R1, #0
B               loc_62970
ALIGN 0x10
TEQ.W           R0, #0
ITT EQ
MOVEQ           R1, #0
BXEQ            LR
PUSH            {R4,R5,LR}
MOV             R4, #0x432
ANDS.W          R5, R0, #0x80000000
IT MI
NEGMI           R0, R0
MOV.W           R1, #0
B               loc_62970
ALIGN 4
LSLS            R2, R0, #1
MOV.W           R1, R2,ASR#3
MOV.W           R1, R1,RRX
MOV.W           R0, R2,LSL#28
ITTTT NE
ANDSNE.W        R3, R2, #0xFF000000
TEQNE.W         R3, #0xFF000000
EORNE.W         R1, R1, #0x38000000
BXNE            LR
BICS.W          R2, R2, #0xFF000000
IT EQ
BXEQ            LR
TEQ.W           R3, #0xFF000000
ITT EQ
ORREQ.W         R1, R1, #0x80000
BXEQ            LR
PUSH            {R4,R5,LR}
MOV.W           R4, #0x380
AND.W           R5, R1, #0x80000000
BIC.W           R1, R1, #0x80000000
B               loc_62970
ALIGN 4



; int __fastcall sub_62B38(__int64)
sub_62B38
ORRS.W          R2, R0, R1
IT EQ
BXEQ            LR
PUSH            {R4,R5,LR}
MOV.W           R5, #0
B               loc_62B5E
; End of function sub_62B38




; int __fastcall sub_62B48(__int64)
sub_62B48

; FUNCTION CHUNK AT 0006291E SIZE 000000F4 BYTES
; FUNCTION CHUNK AT 00062A78 SIZE 0000000E BYTES

ORRS.W          R2, R0, R1
IT EQ
BXEQ            LR
PUSH            {R4,R5,LR}
ANDS.W          R5, R1, #0x80000000
BPL             loc_62B5E
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1

loc_62B5E
MOV             R4, #0x432
MOVS.W          R12, R1,LSR#22
BEQ.W           loc_6291E
MOV.W           R2, #3
MOVS.W          R12, R12,LSR#3
IT NE
ADDNE           R2, #3
MOVS.W          R12, R12,LSR#3
IT NE
ADDNE           R2, #3
ADD.W           R2, R2, R12,LSR#3
RSB.W           R3, R2, #0x20 ; ' '
LSL.W           R12, R0, R3
LSR.W           R0, R0, R2
LSL.W           LR, R1, R3
ORR.W           R0, R0, LR
LSR.W           R1, R1, R2
ADD             R4, R2
B               loc_6291E
; End of function sub_62B48

ALIGN 4



; int __fastcall sub_62BA4(signed __int64, signed __int64)
sub_62BA4

var_10= -0x10
var_C= -0xC
var_8= -8

CBNZ            R3, loc_62BC6
CBNZ            R2, loc_62BC6
CMP             R1, #0
ITTT LT
MOVLT           R0, #0
MOVLT.W         R1, #0x80000000
BLT             loc_62BC2
IT EQ
CMPEQ           R0, #0
ITT NE
MOVNE           R1, #0x7FFFFFFF
MOVNE.W         R0, #0xFFFFFFFF

loc_62BC2
B.W             loc_62C74

loc_62BC6
SUB.W           R12, SP, #8
STRD.W          R12, LR, [SP,#var_10]!
CMP             R1, #0
BLT             loc_62BE6
CMP             R3, #0
BLT             loc_62C0C
BL              sub_62CA4
LDR.W           LR, [SP,#0x10+var_C]
LDRD.W          R2, R3, [SP,#0x10+var_8]
ADD             SP, SP, #0x10
BX              LR

loc_62BE6
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1
CMP             R3, #0
BLT             loc_62C28
BL              sub_62CA4
LDR.W           LR, [SP,#0x10+var_C]
LDRD.W          R2, R3, [SP,#0x10+var_8]
ADD             SP, SP, #0x10
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1
NEGS            R2, R2
SBC.W           R3, R3, R3,LSL#1
BX              LR

loc_62C0C
NEGS            R2, R2
SBC.W           R3, R3, R3,LSL#1
BL              sub_62CA4
LDR.W           LR, [SP,#0x10+var_C]
LDRD.W          R2, R3, [SP,#0x10+var_8]
ADD             SP, SP, #0x10
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1
BX              LR

loc_62C28
NEGS            R2, R2
SBC.W           R3, R3, R3,LSL#1
BL              sub_62CA4
LDR.W           LR, [SP,#0x10+var_C]
LDRD.W          R2, R3, [SP,#0x10+var_8]
ADD             SP, SP, #0x10
NEGS            R2, R2
SBC.W           R3, R3, R3,LSL#1
BX              LR
; End of function sub_62BA4




; int __fastcall sub_62C44(unsigned __int64, unsigned __int64)
sub_62C44

var_10= -0x10
var_C= -0xC
var_8= -8

CBNZ            R3, loc_62C5C
CBNZ            R2, loc_62C5C
CMP             R1, #0
IT EQ
CMPEQ           R0, #0
ITT NE
MOVNE.W         R1, #0xFFFFFFFF
MOVNE.W         R0, #0xFFFFFFFF
B.W             loc_62C74

loc_62C5C
SUB.W           R12, SP, #8
STRD.W          R12, LR, [SP,#var_10]!
BL              sub_62CA4
LDR.W           LR, [SP,#0x10+var_C]
LDRD.W          R2, R3, [SP,#0x10+var_8]
ADD             SP, SP, #0x10
BX              LR

loc_62C74
PUSH            {R1,LR}
MOV.W           R0, #8  ; sig
BLX             raise
POP             {R1,PC}
; End of function sub_62C44




; unsigned int __fastcall sub_62C80(double)
sub_62C80
VMOV            D7, R0, R1
VCMPE.F64       D7, #0.0
VMRS            APSR_nzcv, FPSCR
BMI             loc_62C92
B.W             sub_161C8

loc_62C92
PUSH            {R3,LR}
EOR.W           R1, R1, #0x80000000
BL              sub_161C8
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1
POP             {R3,PC}
; End of function sub_62C80




; int __fastcall sub_62CA4(unsigned __int64, unsigned __int64, unsigned __int64 *)
sub_62CA4

arg_0=  0x24

CMP             R1, R3
PUSH.W          {R4-R11,LR}
IT EQ
CMPEQ           R0, R2
MOV             R4, R0
IT CC
MOVCC           R0, #0
MOV             R5, R1
LDR.W           LR, [SP,#arg_0]
IT CC
MOVCC           R1, R0
BCC             loc_62D92
MOV             R10, R2
MOV             R11, R3
CLZ.W           R12, R3
CMP             R3, #0
BEQ             loc_62DA8
CLZ.W           R1, R5
CMP             R5, #0
BEQ             loc_62DA0

loc_62CD4
SUB.W           R12, R12, R1
SUB.W           R8, R12, #0x20 ; ' '
LSL.W           R7, R11, R12
LSL.W           R1, R10, R8
RSB.W           R9, R12, #0x20 ; ' '
LSR.W           R3, R10, R9
LSL.W           R6, R10, R12
ORRS            R7, R1
ORRS            R7, R3
CMP             R5, R7
IT EQ
CMPEQ           R4, R6
ITT CC
MOVCC           R0, #0
MOVCC           R1, R0
BCC             loc_62D18
MOVS            R0, #1
SUBS            R4, R4, R6
LSL.W           R1, R0, R8
LSR.W           R3, R0, R9
LSL.W           R0, R0, R12
SBC.W           R5, R5, R7
ORRS            R1, R3

loc_62D18
CMP.W           R12, #0
BEQ             loc_62D92
LSRS            R7, R7, #1
MOV.W           R6, R6,RRX
MOV             R2, R12
B               loc_62D3E

loc_62D28
SUBS            R3, R4, R6
SBC.W           R10, R5, R7
ADDS            R3, R3, R3
ADC.W           R10, R10, R10
ADDS            R4, R3, #1
ADC.W           R5, R10, #0
SUBS            R2, #1
BEQ             loc_62D4E

loc_62D3E
CMP             R5, R7
IT EQ
CMPEQ           R4, R6
BCS             loc_62D28
ADDS            R4, R4, R4
ADCS            R5, R5
SUBS            R2, #1
BNE             loc_62D3E

loc_62D4E
LSR.W           R3, R4, R12
LSL.W           R9, R5, R9
LSR.W           R2, R5, R12
LSR.W           R8, R5, R8
ADDS            R0, R0, R4
ORR.W           R3, R3, R9
ORR.W           R4, R3, R8
ADC.W           R1, R5, R1
MOV             R5, R2
SUB.W           R2, R12, #0x20 ; ' '
LSL.W           R3, R5, R12
LSL.W           R6, R4, R12
LSL.W           R2, R4, R2
RSB.W           R12, R12, #0x20 ; ' '
LSR.W           R12, R4, R12
ORRS            R3, R2
SUBS            R0, R0, R6
ORR.W           R3, R3, R12
SBC.W           R1, R1, R3

loc_62D92
CMP.W           LR, #0
BEQ             locret_62D9C
STRD.W          R4, R5, [LR]

locret_62D9C
POP.W           {R4-R11,PC}

loc_62DA0
CLZ.W           R1, R4
ADDS            R1, #0x20 ; ' '
B               loc_62CD4

loc_62DA8
CLZ.W           R12, R2
CLZ.W           R1, R5
ADD.W           R12, R12, #0x20 ; ' '
CMP             R5, #0
BNE             loc_62CD4
B               loc_62DA0
; End of function sub_62CA4

ALIGN 4



; int __fastcall init(int, int, int)
init
PUSH.W          {R3-R9,LR}
MOV             R7, R0
LDR             R6, =(off_7CF0C - 0x62DCE)
MOV             R8, R1
MOV             R9, R2
LDR             R5, =(off_7CF08 - 0x62DD4)
ADD             R6, PC  ; off_7CF0C
BLX             .init_proc
ADD             R5, PC  ; off_7CF08
SUBS            R6, R6, R5
ASRS            R6, R6, #2
BEQ             locret_62DEC
MOVS            R4, #0

loc_62DDA
ADDS            R4, #1
LDR.W           R3, [R5],#4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R7
BLX             R3
CMP             R6, R4
BNE             loc_62DDA

locret_62DEC
POP.W           {R3-R9,PC}
; End of function init

off_62DF0 DCD off_7CF0C - 0x62DCE
off_62DF4 DCD off_7CF08 - 0x62DD4
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_3]
ALIGN 4



; int sub_62DFC()
sub_62DFC
MOV             R2, R1
MOV             R1, R0
MOVS            R0, #3
B.W             sub_140FC
; End of function sub_62DFC

ALIGN 4



; int sub_62E08()
sub_62E08
MOV             R2, R1
MOV             R1, R0
MOVS            R0, #3
B.W             j___fxstat64
; End of function sub_62E08

ALIGN 4



; int sub_62E14()
sub_62E14
MOV             R2, R1
MOV             R1, R0
MOVS            R0, #3
B.W             sub_14178
; End of function sub_62E14

ALIGN 0x10



; int __fastcall sub_62E20(char *path, __mode_t mode, __dev_t)
sub_62E20

var_8= -8
var_s0=  0

PUSH            {R4,LR}
SUB             SP, SP, #8
ADD             R4, SP, #8+var_s0
STRD.W          R2, R3, [R4,#-8]!
MOV             R2, R1  ; mode
MOV             R3, R4  ; dev
MOV             R1, R0  ; path
MOVS            R0, #1  ; ver
BLX             __xmknod
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_62E20

ALIGN 4
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x62E3C
CODE32



; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x62E44
CODE32
ALIGN 8
; LOAD ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY, ALIGN=3
; ORG 0x62E48
unk_62E48 DCB 0x22 ; "
DCB 0xAE
DCB 0x28 ; (
DCB 0xD7
DCB 0x98
DCB 0x2F ; /
DCB 0x8A
DCB 0x42 ; B
DCB 0xCD
DCB 0x65 ; e
DCB 0xEF
DCB 0x23 ; #
DCB 0x91
DCB 0x44 ; D
DCB 0x37 ; 7
DCB 0x71 ; q
DCB 0x2F ; /
DCB 0x3B ; ;
DCB 0x4D ; M
DCB 0xEC
DCB 0xCF
DCB 0xFB
DCB 0xC0
DCB 0xB5
DCB 0xBC
DCB 0xDB
DCB 0x89
DCB 0x81
DCB 0xA5
DCB 0xDB
DCB 0xB5
DCB 0xE9
DCB 0x38 ; 8
DCB 0xB5
DCB 0x48 ; H
DCB 0xF3
DCB 0x5B ; [
DCB 0xC2
DCB 0x56 ; V
DCB 0x39 ; 9
DCB 0x19
DCB 0xD0
DCB    5
DCB 0xB6
DCB 0xF1
DCB 0x11
DCB 0xF1
DCB 0x59 ; Y
DCB 0x9B
DCB 0x4F ; O
DCB 0x19
DCB 0xAF
DCB 0xA4
DCB 0x82
DCB 0x3F ; ?
DCB 0x92
DCB 0x18
DCB 0x81
DCB 0x6D ; m
DCB 0xDA
DCB 0xD5
DCB 0x5E ; ^
DCB 0x1C
DCB 0xAB
DCB 0x42 ; B
DCB    2
DCB    3
DCB 0xA3
DCB 0x98
DCB 0xAA
DCB    7
DCB 0xD8
DCB 0xBE
DCB 0x6F ; o
DCB 0x70 ; p
DCB 0x45 ; E
DCB    1
DCB 0x5B ; [
DCB 0x83
DCB 0x12
DCB 0x8C
DCB 0xB2
DCB 0xE4
DCB 0x4E ; N
DCB 0xBE
DCB 0x85
DCB 0x31 ; 1
DCB 0x24 ; $
DCB 0xE2
DCB 0xB4
DCB 0xFF
DCB 0xD5
DCB 0xC3
DCB 0x7D ; }
DCB  0xC
DCB 0x55 ; U
DCB 0x6F ; o
DCB 0x89
DCB 0x7B ; {
DCB 0xF2
DCB 0x74 ; t
DCB 0x5D ; ]
DCB 0xBE
DCB 0x72 ; r
DCB 0xB1
DCB 0x96
DCB 0x16
DCB 0x3B ; ;
DCB 0xFE
DCB 0xB1
DCB 0xDE
DCB 0x80
DCB 0x35 ; 5
DCB 0x12
DCB 0xC7
DCB 0x25 ; %
DCB 0xA7
DCB    6
DCB 0xDC
DCB 0x9B
DCB 0x94
DCB 0x26 ; &
DCB 0x69 ; i
DCB 0xCF
DCB 0x74 ; t
DCB 0xF1
DCB 0x9B
DCB 0xC1
DCB 0xD2
DCB 0x4A ; J
DCB 0xF1
DCB 0x9E
DCB 0xC1
DCB 0x69 ; i
DCB 0x9B
DCB 0xE4
DCB 0xE3
DCB 0x25 ; %
DCB 0x4F ; O
DCB 0x38 ; 8
DCB 0x86
DCB 0x47 ; G
DCB 0xBE
DCB 0xEF
DCB 0xB5
DCB 0xD5
DCB 0x8C
DCB 0x8B
DCB 0xC6
DCB 0x9D
DCB 0xC1
DCB  0xF
DCB 0x65 ; e
DCB 0x9C
DCB 0xAC
DCB 0x77 ; w
DCB 0xCC
DCB 0xA1
DCB  0xC
DCB 0x24 ; $
DCB 0x75 ; u
DCB    2
DCB 0x2B ; +
DCB 0x59 ; Y
DCB 0x6F ; o
DCB 0x2C ; ,
DCB 0xE9
DCB 0x2D ; -
DCB 0x83
DCB 0xE4
DCB 0xA6
DCB 0x6E ; n
DCB 0xAA
DCB 0x84
DCB 0x74 ; t
DCB 0x4A ; J
DCB 0xD4
DCB 0xFB
DCB 0x41 ; A
DCB 0xBD
DCB 0xDC
DCB 0xA9
DCB 0xB0
DCB 0x5C ; \
DCB 0xB5
DCB 0x53 ; S
DCB 0x11
DCB 0x83
DCB 0xDA
DCB 0x88
DCB 0xF9
DCB 0x76 ; v
DCB 0xAB
DCB 0xDF
DCB 0x66 ; f
DCB 0xEE
DCB 0x52 ; R
DCB 0x51 ; Q
DCB 0x3E ; >
DCB 0x98
DCB 0x10
DCB 0x32 ; 2
DCB 0xB4
DCB 0x2D ; -
DCB 0x6D ; m
DCB 0xC6
DCB 0x31 ; 1
DCB 0xA8
DCB 0x3F ; ?
DCB 0x21 ; !
DCB 0xFB
DCB 0x98
DCB 0xC8
DCB 0x27 ; '
DCB    3
DCB 0xB0
DCB 0xE4
DCB  0xE
DCB 0xEF
DCB 0xBE
DCB 0xC7
DCB 0x7F ; 
DCB 0x59 ; Y
DCB 0xBF
DCB 0xC2
DCB 0x8F
DCB 0xA8
DCB 0x3D ; =
DCB 0xF3
DCB  0xB
DCB 0xE0
DCB 0xC6
DCB 0x25 ; %
DCB 0xA7
DCB  0xA
DCB 0x93
DCB 0x47 ; G
DCB 0x91
DCB 0xA7
DCB 0xD5
DCB 0x6F ; o
DCB 0x82
DCB    3
DCB 0xE0
DCB 0x51 ; Q
DCB 0x63 ; c
DCB 0xCA
DCB    6
DCB 0x70 ; p
DCB 0x6E ; n
DCB  0xE
DCB  0xA
DCB 0x67 ; g
DCB 0x29 ; )
DCB 0x29 ; )
DCB 0x14
DCB 0xFC
DCB 0x2F ; /
DCB 0xD2
DCB 0x46 ; F
DCB 0x85
DCB  0xA
DCB 0xB7
DCB 0x27 ; '
DCB 0x26 ; &
DCB 0xC9
DCB 0x26 ; &
DCB 0x5C ; \
DCB 0x38 ; 8
DCB 0x21 ; !
DCB 0x1B
DCB 0x2E ; .
DCB 0xED
DCB 0x2A ; *
DCB 0xC4
DCB 0x5A ; Z
DCB 0xFC
DCB 0x6D ; m
DCB 0x2C ; ,
DCB 0x4D ; M
DCB 0xDF
DCB 0xB3
DCB 0x95
DCB 0x9D
DCB 0x13
DCB  0xD
DCB 0x38 ; 8
DCB 0x53 ; S
DCB 0xDE
DCB 0x63 ; c
DCB 0xAF
DCB 0x8B
DCB 0x54 ; T
DCB 0x73 ; s
DCB  0xA
DCB 0x65 ; e
DCB 0xA8
DCB 0xB2
DCB 0x77 ; w
DCB 0x3C ; <
DCB 0xBB
DCB  0xA
DCB 0x6A ; j
DCB 0x76 ; v
DCB 0xE6
DCB 0xAE
DCB 0xED
DCB 0x47 ; G
DCB 0x2E ; .
DCB 0xC9
DCB 0xC2
DCB 0x81
DCB 0x3B ; ;
DCB 0x35 ; 5
DCB 0x82
DCB 0x14
DCB 0x85
DCB 0x2C ; ,
DCB 0x72 ; r
DCB 0x92
DCB 0x64 ; d
DCB    3
DCB 0xF1
DCB 0x4C ; L
DCB 0xA1
DCB 0xE8
DCB 0xBF
DCB 0xA2
DCB    1
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0xBC
DCB 0x4B ; K
DCB 0x66 ; f
DCB 0x1A
DCB 0xA8
DCB 0x91
DCB 0x97
DCB 0xF8
DCB 0xD0
DCB 0x70 ; p
DCB 0x8B
DCB 0x4B ; K
DCB 0xC2
DCB 0x30 ; 0
DCB 0xBE
DCB 0x54 ; T
DCB    6
DCB 0xA3
DCB 0x51 ; Q
DCB 0x6C ; l
DCB 0xC7
DCB 0x18
DCB 0x52 ; R
DCB 0xEF
DCB 0xD6
DCB 0x19
DCB 0xE8
DCB 0x92
DCB 0xD1
DCB 0x10
DCB 0xA9
DCB 0x65 ; e
DCB 0x55 ; U
DCB 0x24 ; $
DCB    6
DCB 0x99
DCB 0xD6
DCB 0x2A ; *
DCB 0x20
DCB 0x71 ; q
DCB 0x57 ; W
DCB 0x85
DCB 0x35 ; 5
DCB  0xE
DCB 0xF4
DCB 0xB8
DCB 0xD1
DCB 0xBB
DCB 0x32 ; 2
DCB 0x70 ; p
DCB 0xA0
DCB 0x6A ; j
DCB 0x10
DCB 0xC8
DCB 0xD0
DCB 0xD2
DCB 0xB8
DCB 0x16
DCB 0xC1
DCB 0xA4
DCB 0x19
DCB 0x53 ; S
DCB 0xAB
DCB 0x41 ; A
DCB 0x51 ; Q
DCB    8
DCB 0x6C ; l
DCB 0x37 ; 7
DCB 0x1E
DCB 0x99
DCB 0xEB
DCB 0x8E
DCB 0xDF
DCB 0x4C ; L
DCB 0x77 ; w
DCB 0x48 ; H
DCB 0x27 ; '
DCB 0xA8
DCB 0x48 ; H
DCB 0x9B
DCB 0xE1
DCB 0xB5
DCB 0xBC
DCB 0xB0
DCB 0x34 ; 4
DCB 0x63 ; c
DCB 0x5A ; Z
DCB 0xC9
DCB 0xC5
DCB 0xB3
DCB  0xC
DCB 0x1C
DCB 0x39 ; 9
DCB 0xCB
DCB 0x8A
DCB 0x41 ; A
DCB 0xE3
DCB 0x4A ; J
DCB 0xAA
DCB 0xD8
DCB 0x4E ; N
DCB 0x73 ; s
DCB 0xE3
DCB 0x63 ; c
DCB 0x77 ; w
DCB 0x4F ; O
DCB 0xCA
DCB 0x9C
DCB 0x5B ; [
DCB 0xA3
DCB 0xB8
DCB 0xB2
DCB 0xD6
DCB 0xF3
DCB 0x6F ; o
DCB 0x2E ; .
DCB 0x68 ; h
DCB 0xFC
DCB 0xB2
DCB 0xEF
DCB 0x5D ; ]
DCB 0xEE
DCB 0x82
DCB 0x8F
DCB 0x74 ; t
DCB 0x60 ; `
DCB 0x2F ; /
DCB 0x17
DCB 0x43 ; C
DCB 0x6F ; o
DCB 0x63 ; c
DCB 0xA5
DCB 0x78 ; x
DCB 0x72 ; r
DCB 0xAB
DCB 0xF0
DCB 0xA1
DCB 0x14
DCB 0x78 ; x
DCB 0xC8
DCB 0x84
DCB 0xEC
DCB 0x39 ; 9
DCB 0x64 ; d
DCB 0x1A
DCB    8
DCB    2
DCB 0xC7
DCB 0x8C
DCB 0x28 ; (
DCB 0x1E
DCB 0x63 ; c
DCB 0x23 ; #
DCB 0xFA
DCB 0xFF
DCB 0xBE
DCB 0x90
DCB 0xE9
DCB 0xBD
DCB 0x82
DCB 0xDE
DCB 0xEB
DCB 0x6C ; l
DCB 0x50 ; P
DCB 0xA4
DCB 0x15
DCB 0x79 ; y
DCB 0xC6
DCB 0xB2
DCB 0xF7
DCB 0xA3
DCB 0xF9
DCB 0xBE
DCB 0x2B ; +
DCB 0x53 ; S
DCB 0x72 ; r
DCB 0xE3
DCB 0xF2
DCB 0x78 ; x
DCB 0x71 ; q
DCB 0xC6
DCB 0x9C
DCB 0x61 ; a
DCB 0x26 ; &
DCB 0xEA
DCB 0xCE
DCB 0x3E ; >
DCB 0x27 ; '
DCB 0xCA
DCB    7
DCB 0xC2
DCB 0xC0
DCB 0x21 ; !
DCB 0xC7
DCB 0xB8
DCB 0x86
DCB 0xD1
DCB 0x1E
DCB 0xEB
DCB 0xE0
DCB 0xCD
DCB 0xD6
DCB 0x7D ; }
DCB 0xDA
DCB 0xEA
DCB 0x78 ; x
DCB 0xD1
DCB 0x6E ; n
DCB 0xEE
DCB 0x7F ; 
DCB 0x4F ; O
DCB 0x7D ; }
DCB 0xF5
DCB 0xBA
DCB 0x6F ; o
DCB 0x17
DCB 0x72 ; r
DCB 0xAA
DCB 0x67 ; g
DCB 0xF0
DCB    6
DCB 0xA6
DCB 0x98
DCB 0xC8
DCB 0xA2
DCB 0xC5
DCB 0x7D ; }
DCB 0x63 ; c
DCB  0xA
DCB 0xAE
DCB  0xD
DCB 0xF9
DCB 0xBE
DCB    4
DCB 0x98
DCB 0x3F ; ?
DCB 0x11
DCB 0x1B
DCB 0x47 ; G
DCB 0x1C
DCB 0x13
DCB 0x35 ; 5
DCB  0xB
DCB 0x71 ; q
DCB 0x1B
DCB 0x84
DCB 0x7D ; }
DCB    4
DCB 0x23 ; #
DCB 0xF5
DCB 0x77 ; w
DCB 0xDB
DCB 0x28 ; (
DCB 0x93
DCB 0x24 ; $
DCB 0xC7
DCB 0x40 ; @
DCB 0x7B ; {
DCB 0xAB
DCB 0xCA
DCB 0x32 ; 2
DCB 0xBC
DCB 0xBE
DCB 0xC9
DCB 0x15
DCB  0xA
DCB 0xBE
DCB 0x9E
DCB 0x3C ; <
DCB 0x4C ; L
DCB  0xD
DCB 0x10
DCB 0x9C
DCB 0xC4
DCB 0x67 ; g
DCB 0x1D
DCB 0x43 ; C
DCB 0xB6
DCB 0x42 ; B
DCB 0x3E ; >
DCB 0xCB
DCB 0xBE
DCB 0xD4
DCB 0xC5
DCB 0x4C ; L
DCB 0x2A ; *
DCB 0x7E ; ~
DCB 0x65 ; e
DCB 0xFC
DCB 0x9C
DCB 0x29 ; )
DCB 0x7F ; 
DCB 0x59 ; Y
DCB 0xEC
DCB 0xFA
DCB 0xD6
DCB 0x3A ; :
DCB 0xAB
DCB 0x6F ; o
DCB 0xCB
DCB 0x5F ; _
DCB 0x17
DCB 0x58 ; X
DCB 0x47 ; G
DCB 0x4A ; J
DCB 0x8C
DCB 0x19
DCB 0x44 ; D
DCB 0x6C ; l
off_630C8 DCD sub_48A14
DCD sub_48A14
DCD sub_49428
DCD sub_36054
DCD sub_15610
DCD sub_495B8
DCD sub_40354
DCD sub_3C048
DCD sub_40404
DCD sub_40654
DCD sub_40788
DCD sub_40834
DCD sub_4087C
DCD sub_409A4
DCD sub_18A74
DCD sub_40B24
DCD sub_40FA8
DCD sub_14258
DCD sub_4DC54
DCD sub_41308
DCD sub_38134
DCD sub_1C70C
DCD sub_41530
DCD sub_41704
DCD sub_55AFC
DCD sub_418A4
DCD sub_1C3E0
DCD sub_4249C
DCD sub_426AC
DCD sub_38288
DCD sub_42748
DCD sub_55AFC
DCD sub_54DA4
DCD sub_427BC
DCD sub_3834C
DCD sub_3838C
DCD sub_18C40
DCD sub_55AFC
DCD sub_567A0
DCD sub_42A10
DCD sub_42D90
DCD sub_1C70C
DCD sub_42F28
DCD sub_1C868
DCD sub_57350
DCD sub_1D858
DCD sub_1D81C
DCD sub_1D830
DCD sub_1D844
DCD sub_273A8
DCD sub_273A8
DCD sub_1B150
DCD sub_43180
DCD sub_3948C
DCD sub_57350
DCD sub_431D8
DCD sub_193E0
DCD sub_4344C
DCD sub_44140
DCD sub_44554
DCD sub_383F4
DCD sub_44738
DCD sub_447FC
DCD sub_44868
DCD sub_4497C
DCD sub_38504
DCD sub_38F94
DCD sub_44A78
DCD sub_1E174
DCD sub_44CD8
DCD sub_44DB0
DCD sub_44EB0
DCD sub_19818
DCD sub_44F28
DCD sub_4E7B0
DCD sub_1E62C
DCD sub_567A0
DCD sub_4515C
DCD sub_45558
DCD sub_276E4
DCD sub_45958
DCD sub_45988
DCD sub_45A1C
DCD sub_567A0
DCD sub_45A78
DCD sub_45B54
DCD sub_1F1F0
DCD sub_5085C
DCD sub_45C4C
DCD sub_1BC28
DCD sub_39544
DCD sub_1BE28
DCD sub_36054
DCD sub_44554
DCD sub_14600
DCD sub_46458
DCD sub_49DA8
DCD sub_47378
DCD sub_28E30
DCD sub_294E4
DCD sub_478C8
DCD sub_37CB0
DCD sub_4790C
DCD sub_3C90C
DCD sub_48094
DCD sub_48A14
DCD sub_28304
DCD sub_48C48
DCD sub_490B4
DCD sub_492C0
DCD sub_492C8
DCD sub_493C8
DCD sub_251CC
DCD sub_3973C
DCD sub_49428
DCD sub_49560
DCD sub_49594
DCD sub_54680
DCD sub_496B4
DCD sub_4A270
DCD sub_49948
DCD sub_563E4
DCD sub_49AC4
off_632B4 DCD aUsrBin+8 ; "/"
DCD aUsrBin+4           ; "/bin/"
DCD aUsrSbin+4          ; "/sbin/"
DCD aUsrBin             ; "/usr/bin/"
DCD aUsrSbin            ; "/usr/sbin/"
unk_632C8 DCB    0
DCB    0
DCB    0
DCB    0
off_632CC DCD aSifmetric ; "SIFMETRIC"
DCB 0x1E
DCB 0x89
DCB 0x10
DCB    0
DCB  0xE
DCB 0x67 ; g
DCB    6
DCB    0
DCB 0x22 ; "
DCB 0x89
DCB 0x10
DCB    0
DCB    0
DCB 0x67 ; g
DCB    6
DCB    0
DCB 0x43 ; C
DCB 0x89
DCB 0x10
DCB    0
DCB 0x30 ; 0
DCB 0x57 ; W
DCB    6
DCB    0
DCB 0x18
DCB 0x89
DCB 0x10
DCB    0
DCB 0x3B ; ;
DCB 0x57 ; W
DCB    6
DCB    0
DCB 0x1C
DCB 0x89
DCB 0x10
DCB    0
DCB 0x46 ; F
DCB 0x57 ; W
DCB    6
DCB    0
DCB 0x1A
DCB 0x89
DCB 0x10
DCB    0
DCB 0xE6
DCB 0x66 ; f
DCB    6
DCB    0
DCB 0x24 ; $
DCB 0x89
DCB 0x10
DCB    0
DCB 0x30 ; 0
DCB 0x57 ; W
DCB    6
DCB    0
DCB 0x18
DCB 0x89
DCB 0x10
DCB    0
off_6330C DCD aSifaddr  ; "SIFADDR"
DCB 0x16
DCB 0x89
DCB 0x10
DCB    0
off_63314 DCD aMetric   ; "metric"
DCB 0x10
DCB    4
DCB    0
DCB    0
DCB 0xC8
DCB 0x56 ; V
DCB    6
DCB    0
DCB 0x10
DCB    4
DCB    0
DCB    0
DCB 0xCC
DCB 0x56 ; V
DCB    6
DCB    0
DCB 0x10
DCB    4
DCB    0
DCB    0
DCB 0xD7
DCB 0x56 ; V
DCB    6
DCB    0
DCB 0xD0
DCB    4
DCB    0
DCB    0
DCB 0xDF
DCB 0x56 ; V
DCB    6
DCB    0
DCB 0xD0
DCB  0xC
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0xB9
DCB    6
DCB    0
DCB 0xD2
DCB 0x94
DCB    2
DCB    0
DCB 0xE7
DCB 0x56 ; V
DCB    6
DCB    0
DCB 0x90
DCB    4
DCB    0
DCB    0
DCB 0xEA
DCB 0x56 ; V
DCB    6
DCB    0
DCB 0xD2
DCB 0x14
DCB 0x10
DCB    0
DCB 0xF6
DCB 0x56 ; V
DCB    6
DCB    0
DCB    9
DCB    0
DCB 0x80
DCB    0
DCB 0xFA
DCB 0x56 ; V
DCB    6
DCB    0
DCB    9
DCB    0
DCB 0x20
DCB    0
DCB    3
DCB 0x57 ; W
DCB    6
DCB    0
DCB    6
DCB    0
DCB    0
DCB    1
DCB  0xB
DCB 0x57 ; W
DCB    6
DCB    0
DCB    6
DCB    0
DCB    0
DCB 0x10
DCB 0x15
DCB 0x57 ; W
DCB    6
DCB    0
DCB    6
DCB    0
DCB    0
DCB    2
DCB 0x1E
DCB 0x57 ; W
DCB    6
DCB    0
DCB    6
DCB    0
DCB    0
DCB 0x80
DCB 0xB5
DCB 0x7D ; }
DCB    6
DCB    0
DCB    4
DCB    0
DCB 0x41 ; A
DCB    0
DCB 0x90
DCB 0x7D ; }
DCB    6
DCB    0
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63398 DCB 0xC0
DCB 0x70 ; p
DCB 0x41 ; A
DCB    0
DCB 0xFC
DCB 0x33 ; 3
DCB    6
DCB    0
DCB 0x74 ; t
DCB 0x34 ; 4
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x8D
DCB 0x5A ; Z
DCB    6
DCB    0
DCB 0x93
DCB 0x5A ; Z
DCB    6
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    6
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0xCC
DCB    1
DCB    0
DCB 0x54 ; T
DCB 0xA4
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_633C4 DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x28 ; (
DCB 0x34 ; 4
DCB    6
DCB    0
DCB 0xA8
DCB 0x33 ; 3
DCB    6
DCB    0
DCB 0x48 ; H
DCB 0x34 ; 4
DCB    6
DCB    0
DCB 0xA0
DCB 0x34 ; 4
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_633DC DCD aUnknown_0 ; "unknown"
DCD a10base2            ; "10base2"
DCD a10baset            ; "10baseT"
DCD aAui                ; "AUI"
DCD a100baset           ; "100baseT"
DCD a100basetx          ; "100baseTX"
DCD a100basefx          ; "100baseFX"
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB 0x56 ; V
DCB    6
DCB    0
DCB 0x31 ; 1
DCB 0x5B ; [
DCB    6
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xAC
DCB 0xCC
DCB    1
DCB    0
DCB 0xA4
DCB 0xCC
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9C
DCB 0x5A ; Z
DCB    6
DCB    0
DCB 0xA1
DCB 0x5A ; Z
DCB    6
DCB    0
DCB    4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x71 ; q
DCB 0x5A ; Z
DCB    6
DCB    0
DCB 0x75 ; u
DCB 0x5A ; Z
DCB    6
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_63468 DCD aNLluUUUUNNNLlu ; "%n%llu%u%u%u%u%n%n%n%llu%u%u%u%u%u"
DCD aLluLluUUUUNNLl     ; "%llu%llu%u%u%u%u%n%n%llu%llu%u%u%u%u%u"
DCD aLluLluUUUUUULl     ; "%llu%llu%u%u%u%u%u%u%llu%llu%u%u%u%u%u%"...
DCD aUnspec             ; "unspec"
DCD aUnspec_0           ; "UNSPEC"
ALIGN 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x24 ; $
DCB 0xCC
DCB    1
DCB    0
DCB 0x78 ; x
DCB 0xCC
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB0
DCB 0x5A ; Z
DCB    6
DCB    0
DCB 0xB7
DCB 0x5A ; Z
DCB    6
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x24 ; $
DCB 0xCC
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_634C0 DCD sub_1D814
DCD sub_20798
DCD sub_229FC
DCD sub_229FC
DCD sub_20E98
off_634D4 DCD aStream   ; "STREAM"
DCD aDgram              ; "DGRAM"
DCD aRaw                ; "RAW"
DCD aRdm                ; "RDM"
DCD aSeqpacket          ; "SEQPACKET"
off_634E8 DCD asc_6B39D+1 ; ""
DCD aEstablished        ; "ESTABLISHED"
DCD aSynSent            ; "SYN_SENT"
DCD aSynRecv            ; "SYN_RECV"
DCD aFinWait1           ; "FIN_WAIT1"
DCD aFinWait2           ; "FIN_WAIT2"
DCD aTimeWait           ; "TIME_WAIT"
DCD aClose              ; "CLOSE"
DCD aCloseWait          ; "CLOSE_WAIT"
DCD aLastAck            ; "LAST_ACK"
DCD aListen             ; "LISTEN"
DCD aClosing            ; "CLOSING"
off_63518 DCD aEchoReply ; "Echo Reply"
DCD aUnknownIcmpTyp     ; "unknown ICMP type"
DCD aUnknownIcmpTyp     ; "unknown ICMP type"
DCD aDestinationUnr     ; "Destination Unreachable"
DCD aSourceQuench       ; "Source Quench"
DCD aRedirectChange     ; "Redirect (change route)"
DCD aUnknownIcmpTyp     ; "unknown ICMP type"
DCD aUnknownIcmpTyp     ; "unknown ICMP type"
DCD aEchoRequest        ; "Echo Request"
DCD aUnknownIcmpTyp     ; "unknown ICMP type"
DCD aUnknownIcmpTyp     ; "unknown ICMP type"
DCD aTimeExceeded       ; "Time Exceeded"
DCD aParameterProbl     ; "Parameter Problem"
DCD aTimestampReque     ; "Timestamp Request"
DCD aTimestampReply     ; "Timestamp Reply"
DCD aInformationReq     ; "Information Request"
DCD aInformationRep     ; "Information Reply"
DCD aAddressMaskReq     ; "Address Mask Request"
DCD aAddressMaskRep     ; "Address Mask Reply"
unk_63564 DCB    8
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
off_63580 DCD aNone_0   ; "none"
DCD aRedirect           ; "redirect"
DCD aKernel             ; "kernel"
DCD aSysBoot+4          ; "boot"
DCD aStatic             ; "static"
ALIGN 0x10
DCD aGated              ; "gated"
DCD aZebra+3            ; "ra"
DCD aMrt                ; "mrt"
DCD aZebra              ; "zebra"
off_635B0 DCD aBird     ; "bird"
off_635B4 DCD a3        ; "3."
DCD sub_3414C
DCD a3_0                ; "3:"
DCD sub_2984C
DCD a2_0                ; "2["
DCD sub_2E4DC
DCD a2_1                ; "2[["
DCD sub_2E4DC
DCD a6alias             ; "6alias"
DCD sub_2D348
DCD a2bg                ; "2bg"
DCD sub_2F168
DCD a3break             ; "3break"
DCD sub_2B91C
DCD a2cd                ; "2cd"
DCD sub_2FCC4
DCD a0chdir             ; "0chdir"
DCD sub_2FCC4
off_635FC DCD a2command ; "2command"
DCD sub_355B0
DCD a3continue          ; "3continue"
DCD sub_2B91C
DCD a2echo              ; "2echo"
DCD sub_2E4D8
off_63614 DCD a3eval    ; "3eval"
DCB    0
DCB    0
DCB    0
DCB    0
off_6361C DCD a3exec    ; "3exec"
DCD sub_2F094
DCD a3exit              ; "3exit"
DCD sub_2C32C
DCD a7export            ; "7export"
DCD sub_2E2C8
DCD a2false             ; "2false"
DCD sub_29844
DCD a2fg                ; "2fg"
DCD sub_2F168
DCD a2getopts           ; "2getopts"
DCD sub_2F9C4
DCD a0hash              ; "0hash"
DCD sub_357CC
DCD a0help              ; "0help"
DCD sub_2C204
DCD a0history           ; "0history"
DCD sub_2E4BC
DCD a2jobs              ; "2jobs"
DCD sub_2CBBC
DCD a2kill              ; "2kill"
DCD sub_2E3B4
DCD a0let               ; "0let"
DCD sub_2CF74
DCD a7local             ; "7local"
DCD sub_2BD78
DCD a2printf            ; "2printf"
DCD sub_2E3B0
DCD a0pwd               ; "0pwd"
DCD sub_2C1AC
DCD a2read              ; "2read"
DCD sub_2F840
DCD a7readonly          ; "7readonly"
DCD sub_2E2C8
DCD a3return            ; "3return"
DCD sub_2B0C8
DCD a3set               ; "3set"
DCD sub_2E254
DCD a3shift             ; "3shift"
DCD sub_2B000
DCD a3source            ; "3source"
DCD sub_3414C
DCD a2test              ; "2test"
DCD sub_2E4DC
DCD a3times             ; "3times"
DCD sub_2E0EC
DCD a3trap              ; "3trap"
DCD sub_2DF84
DCD a2true              ; "2true"
DCD sub_2984C
DCD a0type              ; "0type"
DCD sub_35554
DCD a0ulimit            ; "0ulimit"
DCD loc_2CD9C
DCD a2umask             ; "2umask"
DCD sub_2CC38
DCD a2unalias           ; "2unalias"
DCD sub_2B618
DCD a3unset             ; "3unset"
DCD sub_2B5A0
DCD a2wait              ; "2wait"
DCD sub_2C790
off_63714 DCD byte_67DC2
DCD sub_29854
off_6371C DCD aEerrexit ; "eerrexit"
DCD aFnoglob            ; "fnoglob"
DCD aIignoreeof         ; "Iignoreeof"
DCD aIinteractive       ; "iinteractive"
DCD aMmonitor           ; "mmonitor"
DCD aNnoexec            ; "nnoexec"
DCD aSstdin             ; "sstdin"
DCD aXxtrace            ; "xxtrace"
DCD aVverbose           ; "vverbose"
DCD aCnoclobber         ; "Cnoclobber"
DCD aAallexport         ; "aallexport"
DCD aBnotify            ; "bnotify"
DCD aUnounset           ; "unounset"
DCD unk_67DC5
DCD unk_67DC9
off_63758 DCD aUnexpectedEndO+0xB ; "end of file"
DCD aNewline            ; "newline"
DCD aRedirection        ; "redirection"
DCD aRwxststPcDBLSS+0x2A ; "word"
DCD asc_6858E+1         ; ";"
DCD asc_68588+1         ; "&"
DCD asc_68588           ; "&&"
DCD asc_6858B           ; "||"
DCD asc_67EDB+1         ; "|"
DCD asc_6549B+1         ; "("
DCD aDup+6              ; ")"
DCD asc_6858E           ; ";;"
DCD asc_68591           ; "`"
off_6378C DCD aTheSystemIsGoi+0x1C ; "!"
DCD aCase_0             ; "case"
DCD aDo_0               ; "do"
DCD aDone_0+2           ; "done"
DCD aElif               ; "elif"
DCD aElse_0             ; "else"
DCD aEsac               ; "esac"
DCD aFi+2               ; "fi"
DCD aWaitFor+5          ; "for"
DCD aNotInAFunction+9   ; "function"
DCD aElif+2             ; "if"
DCD aDevStdin+8         ; "in"
DCD aThen_0             ; "then"
DCD aUntil_0            ; "until"
DCD aWhile_0            ; "while"
DCD aUnterminated+0xD   ; "{"
DCD asc_67EC5+9         ; "}"
unk_637D0 DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0x66 ; f
DCB 0x88
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0x4A ; J
DCB    6
DCB    0
DCB 0x68 ; h
DCB 0xA3
DCB    2
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0xB6
DCB 0x85
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0xBD
DCB 0x85
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0xC4
DCB 0x85
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0x6E ; n
DCB 0x88
DCB    6
DCB    0
DCB 0xB8
DCB 0xAF
DCB    2
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x2C ; ,
DCB    2
DCB    0
DCB    0
DCB 0xCB
DCB 0x85
DCB    6
DCB    0
DCB 0xF8
DCB 0xAE
DCB    2
DCB    0
DCB 0x2C ; ,
DCB    0
DCB    0
DCB    0
DCB 0x26 ; &
DCB 0x7E ; ~
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_6383C DCB    1
unk_6383D DCB    9
DCB 0x66 ; f
DCB    0
DCB 0x3B ; ;
DCB 0x89
DCB    6
DCB    0
DCB    0
DCB    0
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x89
DCB    6
DCB    0
DCB    2
DCB  0xA
DCB 0x64 ; d
DCB    0
DCB 0x13
DCB 0x89
DCB    6
DCB    0
DCB    3
DCB  0xA
DCB 0x73 ; s
DCB    0
DCB 0x26 ; &
DCB 0x89
DCB    6
DCB    0
DCB    4
DCB    9
DCB 0x63 ; c
DCB    0
DCB 0x36 ; 6
DCB 0x89
DCB    6
DCB    0
DCB    5
DCB  0xA
DCB 0x6D ; m
DCB    0
DCB 0x4E ; N
DCB 0x89
DCB    6
DCB    0
DCB    8
DCB  0xA
DCB 0x6C ; l
DCB    0
DCB 0x65 ; e
DCB 0x89
DCB    6
DCB    0
DCB    6
DCB    0
DCB 0x70 ; p
DCB    0
DCB 0x78 ; x
DCB 0xB8
DCB    6
DCB    0
DCB    7
DCB    0
DCB 0x6E ; n
DCB    0
DCB 0x78 ; x
DCB 0x89
DCB    6
DCB    0
DCB    9
DCB  0xA
DCB 0x76 ; v
DCB    0
DCB 0x89
DCB 0x89
DCB    6
DCB    0
DCB  0xA
DCB    0
DCB 0x77 ; w
DCB    0
DCB 0x47 ; G
DCB 0x98
DCB    6
DCB    0
DCB  0xD
DCB    0
DCB 0x65 ; e
DCB    0
DCB 0x9C
DCB 0x89
DCB    6
DCB    0
DCB  0xE
DCB    0
DCB 0x72 ; r
DCB    0
DCB 0xB0
DCB 0x89
DCB    6
DCB    0
off_638A4 DCD aVarLogMessages ; "/var/log/messages"
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    1
DCB    0
DCB 0xFF
DCB 0xFF
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; _DWORD dword_638F0[40]
dword_638F0 DCD 0, 0, 0x20000000, 0x40000000, 0x40000000
DCD 0, 2, 0xFFFFFFFD, 0xFFFFFFFB, 4, 0xFFFFFFF7
DCD 8, 0x10, 0x80, 0xFFFFFFEF, 0xFFFFFBFF
DCD 0x400, 0xFFFFF7FF, 0x800, 0x40, 0xFFFFFFBF
DCD 0x200000, 0xFFDFFFFF, 0x1000000, 0xFFFF7FFF
DCD 0x5000, 0x100, 0x1000, 0x2000, 0x100000
DCD 0x80000, 0x40000, 0x20000, 0x104000
DCD 0x84000, 0x44000, 0x24000, 1, 0xFFFFFFFE
DCD 0x20
; _DWORD dword_63990[14]
dword_63990 DCD 1, 4, 0xD, 0x28, 0x79, 0x16C, 0x445
DCD 0xCD0, 0x2671, 0x7354, 0x159FD, 0x40DF8
DCD 0xC29E9, 0x247DBC
; _DWORD dword_639C8[3]
dword_639C8 DCD 0x1000, 0x2000, 0x6000
unk_639D4 DCB 0x73 ; s
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x6D ; m
DCB    0
DCB    0
DCB    0
DCB 0x3C ; <
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB  0xE
DCB    0
DCB    0
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB 0x51 ; Q
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_639FC DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A04 DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A0C DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A14 DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A1C DCB    4
DCB    8
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A24 DCB    4
DCB    8
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A2C DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A34 DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A3C DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A44 DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A4C DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A54 DCB    4
DCB    8
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A5C DCB    4
DCB    8
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A64 DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A6C DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A74 DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63A7C DCB    4
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB    1
DCB    6
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    1
DCB    5
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    1
DCB    4
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    1
DCB    4
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    1
DCB    4
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    1
DCB    4
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    1
DCB    6
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    1
DCB    6
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    1
DCB    5
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    1
DCB    6
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    1
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    1
DCB    6
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    1
DCB    6
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    1
DCB    5
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    1
DCB    6
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    2
DCB    5
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    2
DCB    6
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    2
DCB    6
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    2
DCB    5
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    2
DCB    6
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    2
DCB    6
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    2
DCB    6
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    2
DCB    6
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    2
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB    6
DCB    0
DCB    6
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB    6
DCB    0
DCB    4
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB    6
DCB    0
DCB    2
DCB    0
DCB    0
DCB    2
DCB    1
DCB    0
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB 0x18
DCB    0
DCB 0x18
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB 0x18
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB 0x18
DCB    0
DCB    8
DCB    0
DCB    0
DCB    2
DCB    1
DCB    0
DCB 0x18
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB 0x20
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    2
DCB    1
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB 0x40 ; @
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    2
DCB    1
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    2
DCB    0
DCB 0x80
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    2
DCB    1
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    0
DCB    3
DCB    5
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    3
DCB    5
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    3
DCB    5
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    3
DCB    5
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    3
DCB    5
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    3
DCB  0xC
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    3
DCB    5
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    3
DCB    6
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    3
DCB    6
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    3
DCB    6
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    3
DCB    6
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    3
DCB    6
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    3
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    3
DCB    5
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    3
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    3
DCB    5
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    3
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    3
DCB    6
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    3
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
unk_63CC4 DCB 0x62 ; b
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB 0x6B ; k
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB 0x42 ; B
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63CE4 DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x21 ; !
DCB    0
DCB    0
DCB 0x61 ; a
DCB    0
DCB  0xA
DCB    0
DCB 0x77 ; w
DCB    0
DCB  0xA
DCB    0
DCB 0x7C ; |
DCB    0
DCB  0xA
DCB    0
DCB 0x70 ; p
DCB 0x26 ; &
DCB    2
DCB    9
DCB 0x6D ; m
DCB 0x26 ; &
DCB    2
DCB    9
DCB 0x50 ; P
DCB 0x26 ; &
DCB    2
DCB    9
DCB 0x4D ; M
DCB 0x26 ; &
DCB    2
DCB    9
DCB    0
DCB 0x17
DCB    2
DCB    5
DCB    5
DCB 0x14
DCB    3
DCB 0x27 ; '
DCB    0
DCB 0x1F
DCB    3
DCB 0x4A ; J
DCB 0x2B ; +
DCB 0x22 ; "
DCB 0x13
DCB 0x4A ; J
DCB 0x2D ; -
DCB 0x22 ; "
DCB 0x13
DCB 0x4A ; J
DCB 0x2A ; *
DCB 0x22 ; "
DCB 0x13
DCB 0x4A ; J
DCB 0x2F ; /
DCB 0x22 ; "
DCB 0x13
DCB 0x4A ; J
DCB 0x25 ; %
DCB 0x22 ; "
DCB 0x13
DCB 0x4A ; J
DCB 0x26 ; &
DCB 0x22 ; "
DCB 0x13
DCB 0x4A ; J
DCB 0x2B ; +
DCB 0x10
DCB 0x13
DCB 0x1D
DCB 0x2D ; -
DCB 0x10
DCB 0x13
DCB 0x1D
DCB 0x26 ; &
DCB 0x22 ; "
DCB 0x13
DCB 0x4A ; J
DCB 0x26 ; &
DCB 0x10
DCB 0x13
DCB  0xF
DCB 0x2F ; /
DCB 0x10
DCB 0x13
DCB 0x19
DCB 0x25 ; %
DCB 0x10
DCB 0x13
DCB 0x19
DCB 0x26 ; &
DCB 0x10
DCB 0x13
DCB  0xF
DCB 0x2A ; *
DCB 0x10
DCB 0x13
DCB 0x19
DCB    4
DCB 0x14
DCB    3
DCB 0x27 ; '
DCB    3
DCB 0x14
DCB    3
DCB 0x27 ; '
DCB    0
DCB 0x14
DCB    3
DCB 0x27 ; '
DCB    1
DCB 0x14
DCB    3
DCB 0x27 ; '
DCB    2
DCB 0x14
DCB    3
DCB 0x27 ; '
DCB 0x21 ; !
DCB 0x1E
DCB    5
DCB 0x2D ; -
DCB 0x7E ; ~
DCB 0x1E
DCB    5
DCB 0x2D ; -
DCB    0
DCB 0x1C
DCB    1
DCB 0x37 ; 7
DCB    0
DCB 0x1D
DCB    1
DCB 0x3B ; ;
DCB 0x3F ; ?
DCB 0x25 ; %
DCB    1
DCB 0x40 ; @
DCB 0x3A ; :
DCB 0x12
DCB    0
DCB 0x43 ; C
DCB    0
DCB 0x1B
DCB    7
DCB 0x31 ; 1
DCB    0
DCB 0x13
DCB  0xF
DCB 0x50 ; P
DCB    0
DCB 0x20
DCB    7
DCB 0x25 ; %
DCB 0x2B ; +
DCB 0x26 ; &
DCB    2
DCB 0x13
DCB 0x2D ; -
DCB 0x26 ; &
DCB    2
DCB 0x13
DCB 0x21 ; !
DCB 0x26 ; &
DCB    2
DCB 0x13
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB 0x31 ; 1
DCB    0
DCB    0
DCB    0
DCB 0x32 ; 2
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB    1
DCB    1
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0x23 ; #
DCB    1
DCB    0
DCB    0
DCB  0xA
DCB 0x11
DCB    0
DCB    0
DCB 0x33 ; 3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB 0x11
DCB    0
DCB 0x83
DCB  0xD
DCB 0x11
DCB    0
DCB 0x41 ; A
DCB  0xE
DCB 0x11
DCB    0
DCB 0x83
DCB  0xF
DCB 0x11
DCB    0
DCB 0x83
DCB 0x10
DCB 0x11
DCB    0
DCB 0x83
DCB 0x11
DCB 0x11
DCB    0
DCB 0x83
DCB  0xC
DCB 0x16
DCB    5
DCB    0
DCB  0xA
DCB 0x16
DCB    5
DCB    0
DCB  0xB
DCB 0x16
DCB    5
DCB    0
DCB    0
DCB 0x11
DCB    0
DCB 0x83
DCB    2
DCB 0x16
DCB 0x11
DCB    0
DCB    3
DCB 0x16
DCB 0x11
DCB    0
DCB    0
DCB 0x16
DCB 0x11
DCB    0
DCB    4
DCB 0x16
DCB 0x11
DCB    0
DCB    1
DCB 0x16
DCB    0
DCB    0
DCB    5
DCB 0x16
DCB 0x11
DCB    0
DCB    6
DCB 0x16
DCB 0x11
DCB    0
DCB    7
DCB 0x16
DCB 0x11
DCB    0
DCB    9
DCB 0x11
DCB    0
DCB 0xD6
DCB  0xA
DCB 0x11
DCB    0
DCB 0xB6
DCB    1
DCB 0x11
DCB    0
DCB 0x9B
DCB    2
DCB 0x11
DCB    0
DCB 0x89
DCB    3
DCB 0x11
DCB    0
DCB 0x8B
DCB    0
DCB 0x24 ; $
DCB    0
DCB    0
DCB  0xB
DCB 0x11
DCB    0
DCB 0xB6
DCB    4
DCB 0x11
DCB    0
DCB 0x8F
DCB    8
DCB 0x16
DCB    0
DCB    0
DCB    5
DCB 0x11
DCB    0
DCB  0xB
DCB    6
DCB 0x11
DCB    0
DCB  0xB
DCB    7
DCB 0x11
DCB    0
DCB 0x49 ; I
DCB    8
DCB 0x11
DCB    0
DCB 0x49 ; I
DCB    9
DCB 0x16
DCB    5
DCB    0
DCB    0
DCB 0x1A
DCB    7
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_63E74 DCB 0x63 ; c
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x77 ; w
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB 0x62 ; b
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB 0x6B ; k
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; _DWORD dword_63EA4[3]
dword_63EA4 DCD 0xCDEF0123, 0x4321FEDC, 0x1234567
; _DWORD dword_63EB0[3]
dword_63EB0 DCD 0xA, 0xC, 0xF
off_63EBC DCD aChown    ; "chown"
DCD aDacOverride        ; "dac_override"
DCD aDacReadSearch      ; "dac_read_search"
DCD aFowner             ; "fowner"
DCD aFsetid             ; "fsetid"
DCD aYouNeedToSpeci+0x1C ; "kill"
DCD aSetgid_0           ; "setgid"
DCD aSetuid_0           ; "setuid"
DCD aSetpcap            ; "setpcap"
DCD aLinuxImmutable     ; "linux_immutable"
DCD aNetBindService     ; "net_bind_service"
DCD aNetBroadcast       ; "net_broadcast"
DCD aNetAdmin           ; "net_admin"
DCD aNetRaw             ; "net_raw"
DCD aIpcLock            ; "ipc_lock"
DCD aIpcOwner           ; "ipc_owner"
DCD aSysModule          ; "sys_module"
DCD aSysRawio           ; "sys_rawio"
DCD aSysChroot          ; "sys_chroot"
DCD aSysPtrace          ; "sys_ptrace"
DCD aSysPacct           ; "sys_pacct"
DCD aSysAdmin           ; "sys_admin"
DCD aSysBoot            ; "sys_boot"
DCD aSysNice            ; "sys_nice"
DCD aSysResource        ; "sys_resource"
DCD aSysTime            ; "sys_time"
DCD aSysTtyConfig       ; "sys_tty_config"
DCD aMknod              ; "mknod"
DCD aNoLeaseTimeWit+0x25 ; "lease"
DCD aAuditWrite         ; "audit_write"
DCD aAuditControl       ; "audit_control"
DCD aSetfcap            ; "setfcap"
DCD aMacOverride        ; "mac_override"
DCD aMacAdmin           ; "mac_admin"
DCD aSyslog_0           ; "syslog"
DCD aWakeAlarm          ; "wake_alarm"
DCD aBlockSuspend       ; "block_suspend"
DCD aAuditRead          ; "audit_read"
off_63F54 DCD asc_6AE7B+3 ; "-"
DCB    0
DCB    0
DCB    0
DCB    0
unk_63F5C DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x78 ; x
DCB 0xA4
DCB 0x6A ; j
DCB 0xD7
DCB 0x56 ; V
DCB 0xB7
DCB 0xC7
DCB 0xE8
DCB 0xDB
DCB 0x70 ; p
DCB 0x20
DCB 0x24 ; $
DCB 0xEE
DCB 0xCE
DCB 0xBD
DCB 0xC1
unk_63F7C DCB 0xAF
DCB  0xF
DCB 0x7C ; |
DCB 0xF5
DCB 0x2A ; *
DCB 0xC6
DCB 0x87
DCB 0x47 ; G
DCB 0x13
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0xA8
DCB    1
DCB 0x95
DCB 0x46 ; F
DCB 0xFD
DCB 0xD8
DCB 0x98
DCB 0x80
DCB 0x69 ; i
DCB 0xAF
DCB 0xF7
DCB 0x44 ; D
DCB 0x8B
DCB 0xB1
DCB 0x5B ; [
DCB 0xFF
DCB 0xFF
DCB 0xBE
DCB 0xD7
DCB 0x5C ; \
DCB 0x89
DCB 0x22 ; "
DCB 0x11
DCB 0x90
DCB 0x6B ; k
DCB 0x93
DCB 0x71 ; q
DCB 0x98
DCB 0xFD
DCB 0x8E
DCB 0x43 ; C
DCB 0x79 ; y
DCB 0xA6
DCB 0x21 ; !
DCB    8
DCB 0xB4
DCB 0x49 ; I
DCB 0x62 ; b
DCB 0x25 ; %
DCB 0x1E
DCB 0xF6
DCB 0x40 ; @
DCB 0xB3
DCB 0x40 ; @
DCB 0xC0
DCB 0x51 ; Q
DCB 0x5A ; Z
DCB 0x5E ; ^
DCB 0x26 ; &
DCB 0xAA
DCB 0xC7
DCB 0xB6
DCB 0xE9
unk_63FBC DCB 0x5D ; ]
DCB 0x10
DCB 0x2F ; /
DCB 0xD6
DCB 0x53 ; S
DCB 0x14
DCB 0x44 ; D
DCB    2
DCB 0x81
DCB 0xE6
DCB 0xA1
DCB 0xD8
DCB 0xC8
DCB 0xFB
DCB 0xD3
DCB 0xE7
DCB 0xE6
DCB 0xCD
DCB 0xE1
DCB 0x21 ; !
DCB 0xD6
DCB    7
DCB 0x37 ; 7
DCB 0xC3
DCB 0x87
DCB  0xD
DCB 0xD5
DCB 0xF4
DCB 0xED
DCB 0x14
DCB 0x5A ; Z
DCB 0x45 ; E
DCB    5
DCB 0xE9
DCB 0xE3
DCB 0xA9
DCB 0xF8
DCB 0xA3
DCB 0xEF
DCB 0xFC
DCB 0xD9
DCB    2
DCB 0x6F ; o
DCB 0x67 ; g
DCB 0x8A
DCB 0x4C ; L
DCB 0x2A ; *
DCB 0x8D
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0xFA
DCB 0xFF
DCB 0x81
DCB 0xF6
DCB 0x71 ; q
DCB 0x87
DCB 0x22 ; "
DCB 0x61 ; a
DCB 0x9D
DCB 0x6D ; m
DCB  0xC
DCB 0x38 ; 8
DCB 0xE5
DCB 0xFD
unk_63FFC DCB 0x44 ; D
DCB 0xEA
DCB 0xBE
DCB 0xA4
DCB 0xA9
DCB 0xCF
DCB 0xDE
DCB 0x4B ; K
DCB 0x60 ; `
DCB 0x4B ; K
DCB 0xBB
DCB 0xF6
DCB 0x70 ; p
DCB 0xBC
DCB 0xBF
DCB 0xBE
DCB 0xC6
DCB 0x7E ; ~
DCB 0x9B
DCB 0x28 ; (
DCB 0xFA
DCB 0x27 ; '
DCB 0xA1
DCB 0xEA
DCB 0x85
DCB 0x30 ; 0
DCB 0xEF
DCB 0xD4
DCB    5
DCB 0x1D
DCB 0x88
DCB    4
DCB 0x39 ; 9
DCB 0xD0
DCB 0xD4
DCB 0xD9
DCB 0xE5
DCB 0x99
DCB 0xDB
DCB 0xE6
DCB 0xF8
DCB 0x7C ; |
DCB 0xA2
DCB 0x1F
DCB 0x65 ; e
DCB 0x56 ; V
DCB 0xAC
DCB 0xC4
DCB 0x44 ; D
DCB 0x22 ; "
DCB 0x29 ; )
DCB 0xF4
DCB 0x97
DCB 0xFF
DCB 0x2A ; *
DCB 0x43 ; C
DCB 0xA7
DCB 0x23 ; #
DCB 0x94
DCB 0xAB
DCB 0x39 ; 9
DCB 0xA0
DCB 0x93
DCB 0xFC
unk_6403C DCB 0xC3
DCB 0x59 ; Y
DCB 0x5B ; [
DCB 0x65 ; e
DCB 0x92
DCB 0xCC
DCB  0xC
DCB 0x8F
DCB 0x7D ; }
DCB 0xF4
DCB 0xEF
DCB 0xFF
DCB 0xD1
DCB 0x5D ; ]
DCB 0x84
DCB 0x85
DCB 0x4F ; O
DCB 0x7E ; ~
DCB 0xA8
DCB 0x6F ; o
DCB 0xE0
DCB 0xE6
DCB 0x2C ; ,
DCB 0xFE
DCB 0x14
DCB 0x43 ; C
DCB    1
DCB 0xA3
DCB 0xA1
DCB 0x11
DCB    8
DCB 0x4E ; N
DCB 0x82
DCB 0x7E ; ~
DCB 0x53 ; S
DCB 0xF7
DCB 0x35 ; 5
DCB 0xF2
DCB 0x3A ; :
DCB 0xBD
DCB 0xBB
DCB 0xD2
DCB 0xD7
DCB 0x2A ; *
DCB 0x91
DCB 0xD3
DCB 0x86
DCB 0xEB
; _DWORD dword_6406C[10]
dword_6406C DCD 0, 0, 0x6A09E667, 0xBB67AE85, 0x3C6EF372
DCD 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB
DCD 0x5BE0CD19
; _DWORD dword_64094[10]
dword_64094 DCD 0, 0, 0xF3BCC908, 0x84CAA73B, 0xFE94F82B
DCD 0x5F1D36F1, 0xADE682D1, 0x2B3E6C1F, 0xFB41BD6B
DCD 0x137E2179
; _DWORD dword_640BC[4]
dword_640BC DCD 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6
; _DWORD dword_640CC[6]
dword_640CC DCD 0x124, 0x92, 0x49, 0x49, 0xC00, 0x200
; _DWORD dword_640E4[4]
dword_640E4 DCD 0xFFF, 0x9C0, 0x438, 7
; _DWORD dword_640F4[32]
dword_640F4 DCD 0x80000000, 0x40000000, 0x20000000, 0x10000000
DCD 0x8000000, 0x4000000, 0x2000000, 0x1000000
DCD 0x800000, 0x400000, 0x200000, 0x100000
DCD 0x80000, 0x40000, 0x20000, 0x10000, 0x8000
DCD 0x4000, 0x2000, 0x1000, 0x800, 0x400
DCD 0x200, 0x100, 0x80, 0x40, 0x20, 0x10
DCD 8, 4, 2, 1
unk_64174 DCB 0x62 ; b
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB 0x6B ; k
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB 0x6D ; m
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x63 ; c
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x77 ; w
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x62 ; b
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
unk_641AC DCB 0x6B ; k
DCB 0x42 ; B
DCB    0
DCB    0
DCB 0xE8
DCB    3
DCB    0
DCB    0
DCB 0x6B ; k
DCB 0x44 ; D
DCB    0
DCB    0
DCB 0xE8
DCB    3
DCB    0
DCB    0
DCB 0x6B ; k
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB 0x4B ; K
DCB 0x42 ; B
DCB    0
DCB    0
DCB 0xE8
DCB    3
DCB    0
DCB    0
DCB 0x4B ; K
DCB 0x44 ; D
DCB    0
DCB    0
DCB 0xE8
DCB    3
DCB    0
DCB    0
DCB 0x4B ; K
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB 0x4D ; M
DCB 0x42 ; B
DCB    0
DCB    0
DCB 0x40 ; @
DCB 0x42 ; B
DCB  0xF
DCB    0
DCB 0x4D ; M
DCB 0x44 ; D
DCB    0
DCB    0
DCB 0x40 ; @
DCB 0x42 ; B
DCB  0xF
DCB    0
DCB 0x4D ; M
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB 0x47 ; G
DCB 0x42 ; B
DCB    0
DCB    0
DCB    0
DCB 0xCA
DCB 0x9A
DCB 0x3B ; ;
DCB 0x47 ; G
DCB 0x44 ; D
DCB    0
DCB    0
DCB    0
DCB 0xCA
DCB 0x9A
DCB 0x3B ; ;
DCB 0x47 ; G
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_64214 DCB 0x4B ; K
DCB 0x69 ; i
DCB 0x42 ; B
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB 0x6B ; k
DCB 0x69 ; i
DCB 0x42 ; B
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB 0x4B ; K
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB 0x6B ; k
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB 0x4D ; M
DCB 0x69 ; i
DCB 0x42 ; B
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x42 ; B
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB 0x4D ; M
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB 0x6D ; m
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB 0x47 ; G
DCB 0x69 ; i
DCB 0x42 ; B
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x42 ; B
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB 0x47 ; G
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB 0x67 ; g
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB 0x4B ; K
DCB 0x42 ; B
DCB    0
DCB    0
DCB 0xE8
DCB    3
DCB    0
DCB    0
DCB 0x4D ; M
DCB 0x42 ; B
DCB    0
DCB    0
DCB 0x40 ; @
DCB 0x42 ; B
DCB  0xF
DCB    0
DCB 0x47 ; G
DCB 0x42 ; B
DCB    0
DCB    0
DCB    0
DCB 0xCA
DCB 0x9A
DCB 0x3B ; ;
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; unsigned __int16 word_64294[15]
word_64294 DCW 0, 0x10, 0x20, 0x1000, 0x1010, 0x30
DCW 4, 2, 1, 0x40, 0x80, 8, 0x100, 0x200
DCW 0x400
unk_642B2 DCB    0
DCB 0x20
DCB    1
DCB    0
DCB    2
DCB    0
DCB    4
DCB    0
DCB    8
DCB    0
DCB 0x10
DCB    0
DCB 0x20
DCB    0
DCB 0x40 ; @
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    1
DCB    0
DCB    2
DCB    0
DCB    8
DCB    0
DCB    4
DCB    0
DCB 0x10
; _WORD word_642CE[3]
word_642CE DCW 0x200, 0x20, 0x10
unk_642D4 DCB    8
DCB    0
DCB    1
DCB    0
DCB    2
DCB    0
DCB    4
DCB    0
DCB    8
DCB    0
DCB 0x10
DCB    0
unk_642E0 DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    4
DCB    3
DCB    1
DCB    0
DCB 0x20
DCB    0
DCB    6
DCB    0
DCB 0x20
DCB    3
DCB 0x21 ; !
DCB    3
DCB 0x18
DCB    0
DCB  0xF
DCB    3
DCB    0
DCB    1
DCB    1
DCB    1
DCB    2
DCB    1
DCB    3
DCB    1
DCB    0
DCB    2
DCB    0
DCB    3
DCB    1
DCB    3
DCB    8
DCB    3
DCB  0xA
DCB    3
unk_64306 DCB 0xFF
DCB 0xFF
; int dword_64308
dword_64308 DCD 0xFFFFFFFF
DCB 0xFF
DCB 0xFF
; unsigned __int16 word_6430E[12]
word_6430E DCW 0xEEED, 0xD, 0x1111, 0xCC0, 0x54, 0x7077
DCW 0x503, 0x900D, 0xA00D, 0x2C22, 0x6066
DCW 0x8088
unk_64326 DCB    1
DCB    0
DCB    2
DCB    0
DCB    3
DCB    0
DCB    4
DCB    0
DCB    5
DCB    0
DCB    7
DCB    0
DCB    9
DCB    0
DCB  0xD
DCB    0
DCB 0x11
DCB    0
DCB 0x19
DCB    0
DCB 0x21 ; !
DCB    0
DCB 0x31 ; 1
DCB    0
DCB 0x41 ; A
DCB    0
DCB 0x61 ; a
DCB    0
DCB 0x81
DCB    0
DCB 0xC1
DCB    0
DCB    1
DCB    1
DCB 0x81
DCB    1
DCB    1
DCB    2
DCB    1
DCB    3
DCB    1
DCB    4
DCB    1
DCB    6
DCB    1
DCB    8
DCB    1
DCB  0xC
DCB    1
DCB 0x10
DCB    1
DCB 0x18
DCB    1
DCB 0x20
DCB    1
DCB 0x30 ; 0
DCB    1
DCB 0x40 ; @
DCB    1
DCB 0x60 ; `
unk_64362 DCB    3
DCB    0
DCB    4
DCB    0
DCB    5
DCB    0
DCB    6
DCB    0
DCB    7
DCB    0
DCB    8
DCB    0
DCB    9
DCB    0
DCB  0xA
DCB    0
DCB  0xB
DCB    0
DCB  0xD
DCB    0
DCB  0xF
DCB    0
DCB 0x11
DCB    0
DCB 0x13
DCB    0
DCB 0x17
DCB    0
DCB 0x1B
DCB    0
DCB 0x1F
DCB    0
DCB 0x23 ; #
DCB    0
DCB 0x2B ; +
DCB    0
DCB 0x33 ; 3
DCB    0
DCB 0x3B ; ;
DCB    0
DCB 0x43 ; C
DCB    0
DCB 0x53 ; S
DCB    0
DCB 0x63 ; c
DCB    0
DCB 0x73 ; s
DCB    0
DCB 0x83
DCB    0
DCB 0xA3
DCB    0
DCB 0xC3
DCB    0
DCB 0xE3
DCB    0
DCB    2
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
; unsigned __int16 word_643A0[17]
word_643A0 DCW 0, 1, 3, 7, 0xF, 0x1F, 0x3F, 0x7F, 0xFF
DCW 0x1FF, 0x3FF, 0x7FF, 0xFFF, 0x1FFF, 0x3FFF
DCW 0x7FFF, 0xFFFF
; unsigned __int8 byte_643C2[30]
byte_643C2 DCB 3, 0, 0x1C, 1, 0x7F, 2, 0x15, 3, 4, 4
DCB 0, 0xB, 0, 0x10, 0, 7, 0x11, 8, 0x13
DCB 9, 0x1A, 0xA, 0x12, 0xC, 0x17, 0xE, 0x16
DCB 0xF, 0xF, 0xD
unk_643E0 DCB    1
DCB    6
unk_643E2 DCB    0
DCB    5
unk_643E4 DCB    0
DCB    0
DCB 0x41 ; A
DCB    0
DCB 0x82
DCB    0
DCB 0xC3
DCB    0
DCB    4
DCB    1
DCB 0x86
DCB    1
DCB 0xC7
DCB    1
DCB    8
DCB    2
; unsigned __int16 word_643F4[5]
word_643F4 DCW 0xFB, 0x3FD, 0xFFD, 0x3FFD, 0xFFF1
; unsigned __int16 word_643FE[62]
word_643FE DCW 0, 0, 1, 0x32, 2, 0x4B, 3, 0x6E, 4, 0x86
DCW 5, 0x96, 6, 0xC8, 7, 0x12C, 8, 0x258
DCW 9, 0x4B0, 0xA, 0x708, 0xB, 0x960, 0xC
DCW 0x12C0, 0xD, 0x2580, 0xE, 0x4B00, 0xF
DCW 0x80C0, 0x1001, 0x8120, 0x1002, 0x8240
DCW 0x1003, 0x8480, 0x1004, 0x8900, 0x1006
DCW 0x8B40, 0x1007, 0x9200, 0x1009, 0x9680
DCW 0x1005, 0x89C4, 0x1008, 0x9388, 0x100A
DCW 0x9D4C, 0x100B, 0xA710, 0x100C, 0xB0D4
DCW 0x100D, 0xBA98, 0x100E, 0xC45C, 0x100F
DCW 0xCE20
; unsigned __int8 byte_6447A[62]
byte_6447A DCB 0x33, 0x11, 0x13, 0x33, 0x11, 0x41, 0x13
DCB 0x33, 0x11, 0x33, 0x11, 0x13, 0x31, 0x34
DCB 0x33, 0x11, 0x33, 0x42, 0x12, 0x32, 0x13
DCB 0x23, 0x22, 0x22, 0x12, 0x33, 0x11, 0x10
DCB 0x31, 0x31, 0x13, 0x13, 0x11, 0x11, 0x11
DCB 0x33, 0x33, 0x13, 0x12, 0x13, 0x31, 0x23
DCB 0x11, 0x12, 0x33, 0x11, 0x31, 0x31, 0x12
DCB 0x33, 0x21, 0x13, 0x33, 0x13, 0x13, 0x33
DCB 0x12, 0x31, 0x11, 0x33, 0x33, 3
unk_644B8 DCB 0x5B ; [
DCB    0
DCB 0x5B ; [
DCB 0x5B ; [
DCB    0
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x63 ; c
DCB 0x68 ; h
DCB    0
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x68 ; h
DCB    0
DCB 0x61 ; a
DCB 0x77 ; w
DCB 0x6B ; k
DCB    0
DCB 0x62 ; b
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x36 ; 6
DCB 0x34 ; 4
DCB    0
DCB 0x62 ; b
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB    0
DCB 0x62 ; b
DCB 0x7A ; z
DCB 0x69 ; i
DCB 0x70 ; p
DCB 0x32 ; 2
DCB    0
DCB 0x63 ; c
DCB 0x61 ; a
DCB 0x74 ; t
DCB    0
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x6D ; m
DCB 0x6F ; o
DCB 0x64 ; d
DCB    0
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x6F ; o
DCB 0x77 ; w
DCB 0x6E ; n
DCB    0
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x6F ; o
DCB 0x74 ; t
DCB    0
DCB 0x63 ; c
DCB 0x6B ; k
DCB 0x73 ; s
DCB 0x75 ; u
DCB 0x6D ; m
DCB    0
DCB 0x63 ; c
DCB 0x70 ; p
DCB    0
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x79 ; y
DCB 0x70 ; p
DCB 0x74 ; t
DCB 0x70 ; p
DCB 0x77 ; w
DCB    0
DCB 0x63 ; c
DCB 0x75 ; u
DCB 0x74 ; t
DCB    0
DCB 0x64 ; d
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
DCB 0x64 ; d
DCB 0x66 ; f
DCB    0
DCB 0x64 ; d
DCB 0x69 ; i
DCB 0x66 ; f
DCB 0x66 ; f
DCB    0
DCB 0x64 ; d
DCB 0x69 ; i
DCB 0x72 ; r
DCB 0x6E ; n
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB    0
DCB 0x64 ; d
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x67 ; g
DCB    0
DCB 0x64 ; d
DCB 0x6E ; n
DCB 0x73 ; s
DCB 0x64 ; d
DCB 0x6F ; o
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x6E ; n
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB    0
DCB 0x64 ; d
DCB 0x75 ; u
DCB    0
DCB 0x65 ; e
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x6F ; o
DCB    0
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x70 ; p
DCB    0
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x76 ; v
DCB    0
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x68 ; h
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x2D ; -
DCB 0x77 ; w
DCB 0x61 ; a
DCB 0x6B ; k
DCB 0x65 ; e
DCB    0
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x70 ; p
DCB 0x72 ; r
DCB    0
DCB 0x66 ; f
DCB 0x61 ; a
DCB 0x63 ; c
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x72 ; r
DCB    0
DCB 0x66 ; f
DCB 0x61 ; a
DCB 0x6C ; l
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x63 ; c
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
; const char aFalse[]
aFalse DCB "false",0
aFgrep DCB "fgrep",0
aFind DCB "find",0
aFold DCB "fold",0
aFreeramdisk DCB "freeramdisk",0
aFsfreeze DCB "fsfreeze",0
aGetty DCB "getty",0
aGrep DCB "grep",0
aHalt_0 DCB "halt",0
aHead DCB "head",0
aHostid DCB "hostid",0
aHostname_0 DCB "hostname",0
aId DCB "id",0
aIfconfig DCB "ifconfig",0
aInit_0 DCB "init",0
aIp_0 DCB "ip",0
aIpaddr DCB "ipaddr",0
aIplink DCB "iplink",0
aIproute DCB "iproute",0
aKill_2 DCB "kill",0
aKillall DCB "killall",0
aLess_0 DCB "less",0
aLink_0 DCB "link",0
aLinux32 DCB "linux32",0
aLinuxrc_0 DCB "linuxrc",0
aLn DCB "ln",0
aLogin_1 DCB "login",0
aLogname_0 DCB "logname",0
aLs DCB "ls",0
aMd5sum DCB "md5sum",0
aMesg DCB "mesg",0
; const char aMkdir_0[]
aMkdir_0 DCB "mkdir",0
aMkfifo_0 DCB "mkfifo",0
aMknod_0 DCB "mknod",0
aMktemp_0 DCB "mktemp",0
aMore_0 DCB "more",0
aMount_0 DCB "mount",0
aMv DCB "mv",0
aNetstat DCB "netstat",0
aNice DCB "nice",0
aNohup DCB "nohup",0
aNproc DCB "nproc",0
aPasswd DCB "passwd",0
aPaste DCB "paste",0
aPatch DCB "patch",0
aPing DCB "ping",0
aPoweroff_0 DCB "poweroff",0
aPrintenv DCB "printenv",0
aPrintf DCB "printf",0
aPs DCB "ps",0
aPwd DCB "pwd",0
aReadlink_0 DCB "readlink",0
aRealpath_0 DCB "realpath",0
aReboot_1 DCB "reboot",0
aRm DCB "rm",0
aRmdir_0 DCB "rmdir",0
aRoute DCB "route",0
aSed DCB "sed",0
aSeq DCB "seq",0
aSetfattr DCB "setfattr",0
aSetpriv DCB "setpriv",0
aSetserial DCB "setserial",0
; const char s2[3]
s2 DCB "sh",0
aSha256sum DCB "sha256sum",0
aSleep DCB "sleep",0
aSort DCB "sort",0
aStartStopDaemo DCB "start-stop-daemon",0
aStty DCB "stty",0
aSvc DCB "svc",0
aSvok DCB "svok",0
aSync DCB "sync",0
aSyslogd DCB "syslogd",0
aTail DCB "tail",0
aTar DCB "tar",0
aTee DCB "tee",0
aTest DCB "test",0
aTop DCB "top",0
aTouch DCB "touch",0
aTr DCB "tr",0
aTrue DCB "true",0
aTruncate DCB "truncate",0
aTty DCB "tty",0
aUdhcpc DCB "udhcpc",0
aUmount DCB "umount",0
aUname_0 DCB "uname",0
aUnlink_0 DCB "unlink",0
aUsleep_0 DCB "usleep",0
aVi DCB "vi",0
aWc DCB "wc",0
aWhich DCB "which",0
aWho DCB "who",0
aXargs DCB "xargs",0
aYes DCB "yes",0
ALIGN 0x10
aBusybox DCB "busybox",0
aMultiCallBinar DCB " multi-call binary.",0xA,0
aBusyboxIsCopyr DCB "BusyBox is copyrighted by many aut"
DCB "hors between 1998-2015.",0xA
DCB "Licensed under GPLv2. See source d"
DCB "istribution for detailed",0xA
DCB "copyright notices.",0xA
DCB 0xA
DCB "Usage: busybox [function [argument"
DCB "s]...]",0xA
DCB "   or: busybox --list[-full]",0xA
DCB "   or: busybox --install [-s] [DIR"
DCB "]",0xA
DCB "   or: function [arguments]...",0xA
DCB 0xA
DCB 9,"BusyBox is a multi-call binary t"
DCB "hat combines many common Unix",0xA
DCB 9,"utilities into a single executab"
DCB "le.  Most people will create a",0xA
DCB 9,"link to busybox for each functio"
DCB "n they wish to use and BusyBox",0xA
DCB 9,"will act like whatever it was in"
DCB "voked as.",0xA
DCB 0xA
DCB "Currently defined functions:",0xA,0
asc_649D9 DCB ",",0xA,0
aList DCB "--list",0
; const char aInstall[]
aInstall DCB "--install",0
aSIsNotAnAbsolu DCB "'%s' is not an absolute path",0
; const char aS[]
aS DCB "-s",0
aAppletNotFound DCB ": applet not found",0xA,0
; const char aHelp[]
aHelp DCB "--help",0
aUsrBin DCB "/usr/bin/",0
aUsrSbin DCB "/usr/sbin/",0
aSSS DCB "%s%s%s",0
; const char string[]
string DCB "PATH=/sbin:/usr/sbin:/bin:/usr/bin"
DCB 0
aBusyboxV129320 DCB "BusyBox v1.29.3 (2025-04-16 10:16:"
DCB "12 CST)",0
aProcSelfExe DCB "/proc/self/exe",0
; const char aBinSh[]
aBinSh DCB "-/bin/sh",0
a0123456789abcd DCB "0123456789ABCDEF",0
aCanTCreateRawS DCB "can't create raw socket",0
aInvalidArgumen DCB "invalid argument '%s' to '%s'",0
aInvalidDateS DCB "invalid date '%s'",0
aOutOfMemory DCB "out of memory",0
aPermissionDeni DCB "permission denied (are you root?)",0
aSRequiresAnArg DCB "%s requires an argument",0
aStandardInput DCB "standard input",0
aStandardOutput DCB "standard output",0
aUnknown_1 DCB "(unknown)",0
aVarLogWtmp DCB "/var/log/wtmp",0
aDevTty DCB "/dev/tty",0
; const char name[]
name DCB "LINES",0
; const char aColumns[]
aColumns DCB "COLUMNS",0
aSIOError DCB "%s: I/O error",0
aBind_0 DCB "bind",0
aCanTChangeDire DCB "can't change directory to '%s'",0
aCanTChangeRoot DCB "can't change root directory to '%s"
DCB "'",0
aCloseFailed DCB "close failed",0
aCanTDuplicateF DCB "can't duplicate file descriptor",0
aCanTOpenS DCB "can't open '%s'",0
aVfork_0 DCB "vfork",0
aLseekLlu DCB "lseek(%llu)",0
aLseek DCB "lseek",0
aCanTCreateTemp DCB "can't create temp file '%s'",0
aCanTCreatePipe DCB "can't create pipe",0
aCanTMoveSToS DCB "can't move '%s' to '%s'",0
aSendto_0 DCB "sendto",0
aSetgid_0 DCB "setgid",0
aSetuid_0 DCB "setuid",0
aCanTStatS DCB "can't stat '%s'",0
aCanTRemoveFile DCB "can't remove file '%s'",0
aShortWrite DCB "short write",0
aWriteError DCB "write error",0
aNotASymlink DCB "not a symlink",0
aSCannotReadLin DCB "%s: cannot read link: %s",0
aShortRead DCB "short read",0
aReadError DCB "read error",0
aClockGettimeMo DCB "clock_gettime(MONOTONIC) failed",0
; const char format[]
format DCB "%u.%u.%u-%u:%u%c",0
; const char aUUUUUC_0[]
aUUUUUC_0 DCB "%u-%u-%u %u:%u%c",0
; const char aUUUUC[]
aUUUUC DCB "%u-%u-%u %u%c",0
; const char aUUUC[]
aUUUC DCB "%u-%u-%u%c",0
; const char a2u2u2u2u2uC[]
a2u2u2u2u2uC DCB "%2u%2u%2u%2u%2u%c",0
; const char a4u2u2u2u2uC[]
a4u2u2u2u2uC DCB "%4u%2u%2u%2u%2u%c",0
aSpSMA DCB "^sP:+S:m:a:",0
a2_2 DCB "?2",0
; const char aSha512[]
aSha512 DCB "sha512",0
aStdin_0 DCB "stdin",0
ALIGN 2
aSpasswordFd DCB "spassword-fd",0
DCB    1
DCB 0x50 ; P
DCB 0x73 ; s
DCB 0x61 ; a
DCB 0x6C ; l
DCB 0x74 ; t
DCB    0
DCB    1
DCB 0x53 ; S
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x68 ; h
DCB 0x6F ; o
DCB 0x64 ; d
DCB    0
DCB    1
DCB 0x6D ; m
DCB    0
aILhFHilMtWn DCB "^I:LH:f:hil:mt:+wn",0
a2_3 DCB "-2",0
aBinLogin DCB "/bin/login",0
aEtcIssue DCB "/etc/issue",0
aBadSpeedS DCB "bad speed: %s",0
aTooManyAlterna DCB "too many alternate speeds",0
aSetsid_0 DCB "setsid",0
; const char aDevNull[]
aDevNull DCB "/dev/null",0
aDevS_0 DCB "/dev/%s",0
aStdinIsNotOpen DCB "stdin is not open for read/write",0
aGettyS DCB "getty: %s",0
aTiocsctty DCB "TIOCSCTTY",0
aTcsetpgrp_0 DCB "tcsetpgrp",0
aTcgetattr_0 DCB "tcgetattr",0
aLogin DCB "LOGIN",0
asc_64E92 DCB 8," ",8,0
; const char asc_64E96[3]
asc_64E96 DCB "--",0
aCanTExecuteS DCB "can't execute '%s'",0
aTcsetattr_0 DCB "tcsetattr",0
; const char aLoginTimedOutA[]
aLoginTimedOutA DCB 0xD,0xA
DCB "Login timed out after %u seconds",0xD
DCB 0xA,0
aFHP DCB "f:h:p",0
aFIsForRootOnly DCB "-f is for root only",0
aUnknown DCB "UNKNOWN",0
aOnSFromS DCB " on '%s' from '%s'",0
aOnS DCB " on '%s'",0
aLoginIncorrect DCB "Login incorrect",0
; const char aInvalidPasswor[]
aInvalidPasswor DCB "invalid password for '%s'%s",0
aEtcNologin DCB "/etc/nologin",0
; const char aSystemClosedFo[]
aSystemClosedFo DCB 0xD,0xA
DCB "System closed for routine maintena"
DCB "nce",0xD,0
; const char aHushlogin[]
aHushlogin DCB ".hushlogin",0
aEtcMotd DCB "/etc/motd",0
; const char aRootLoginS[]
aRootLoginS DCB "root login%s",0
aEtcPasswd DCB "/etc/passwd",0
aEtcShadow DCB "/etc/shadow",0
aALud DCB "a:lud",0
aSCanTChangePas DCB "%s can't change password for %s",0
aNoRecordOfSInS DCB "no record of %s in %s, using %s",0
aCanTChangeLock DCB "can't change locked password for %"
DCB "s",0
; const char aChangingPasswo[]
aChangingPasswo DCB "Changing password for %s",0xA,0
aOldPassword DCB "Old password: ",0
; const char aIncorrectPassw[]
aIncorrectPassw DCB "incorrect password for %s",0
; const char aIncorrectPassw_0[]
aIncorrectPassw_0 DCB "Incorrect password",0
aNewPassword DCB "New password: ",0
aRetypePassword DCB "Retype password: ",0
; const char aPasswordsDonTM[]
aPasswordsDonTM DCB "Passwords don't match",0
aPasswordForSIs DCB "password for %s is unchanged",0
aS_0 DCB "!%s",0
aCanTUpdatePass DCB "can't update password file %s",0
aPasswordForSCh DCB "password for %s changed by %s",0
aPasswordForSIs_0 DCB "password for %s is already %slocke"
DCB "d",0
a7u DCB "%7u ",0
; const char aUUh[]
aUUh DCB 0x1B,"[%u;%uH",0
aSS7mSM DCB "%s%.*s",0x1B,"[7m%.*s",0x1B,"[m",0
aNoNextFile DCB "No next file",0
aNoPreviousFile_0 DCB "No previous file",0
; const char aU0hK[]
aU0hK DCB 0x1B,"[%u;0H",0x1B,"[K",0
; const char reject
reject DCB 1
DCB    2
DCB    3
DCB    4
DCB    5
DCB    6
DCB    7
DCB    8
DCB  0xA
DCB  0xB
DCB  0xC
DCB  0xD
DCB  0xE
DCB  0xF
DCB 0x10
DCB 0x11
DCB 0x12
DCB 0x13
DCB 0x14
DCB 0x15
DCB 0x16
DCB 0x17
DCB 0x18
DCB 0x19
DCB 0x1A
DCB 0x1B
DCB 0x1C
DCB 0x1D
DCB 0x1E
DCB 0x1F
DCB 0x7F ; 
DCB 0x9B
DCB    0
aAbcdefghiKlmno DCB "@ABCDEFGHI@KLMNOPQRSTUVWXYZ[\]^_",0
aExamine DCB "Examine: ",0
aCannotReadThis DCB "Cannot read this file",0
aNoMatchesFound DCB "No matches found",0
aErrorOpeningLo DCB "Error opening log file",0
aDone DCB "Done",0
aEmmnIfsrs DCB "EMmN~IFSRs",0
; const char aLess[]
aLess DCB "LESS",0
aLogFile DCB "Log file: ",0
; const char aC_0[4]
aC_0 DCB ":%c",0
; const char a7mS[]
a7mS DCB 0x1B,"[7m%s",0
; const char aFileIOfI[]
aFileIOfI DCB " (file %i of %i)",0
; const char aLinesII[]
aLinesII DCB " lines %i-%i",0
; const char aI[]
aI DCB "/%i",0
; const char aEnd[]
aEnd DCB " (END)",0
; const char aNextS[]
aNextS DCB " - next: %s",0
aI_0 DCB " %i%%",0
; const char a7mSFileIOfIM[]
a7mSFileIOfIM DCB 0x1B,"[7m%s (file %i of %i)",0x1B,"["
DCB "m",0
; const char a7mSM_0[]
a7mSM_0 DCB 0x1B,"[7m%s",0x1B,"[m",0
aProcSelfFd0 DCB "/proc/self/fd/0",0
aHxNV DCB "^hx:n:v:",0
a1XNNXXNvVX DCB "-1:x:n:n--x:x--nv:v--x",0
aBgavzgq DCB "^bGavzgq",0
a1BAgGAbABg DCB "-1:b-aG:G-ab:a-bG",0
; const char aSpdNormal[]
aSpdNormal DCB "spd_normal",0
aSpdHi DCB "spd_hi",0
aSpdVhi DCB "spd_vhi",0
aSpdShi DCB "spd_shi",0
aSpdWarp DCB "spd_warp",0
aSpdCust DCB "spd_cust",0
aSak DCB "sak",0
aFourport DCB "fourport",0
aHupNotify DCB "hup_notify",0
aSkipTest DCB "skip_test",0
aAutoIrq DCB "auto_irq",0
aSplitTermios DCB "split_termios",0
aSessionLockout DCB "session_lockout",0
aPgrpLockout DCB "pgrp_lockout",0
aCalloutNohup DCB "callout_nohup",0
aLowLatency DCB "low_latency",0
aPort DCB "port",0
aIrq DCB "irq",0
aDivisor DCB "divisor",0
aUart DCB "uart",0
aBaudBase DCB "baud_base",0
aCloseDelay DCB "close_delay",0
aClosingWait_0 DCB "closing_wait",0
aAutoconfig DCB "autoconfig",0
ALIGN 2
aCanTSetSerialI DCB "can't set serial info",0
aCanTAutoconfig DCB "can't autoconfigure port",0
aCanTGetSerialI DCB "can't get serial info",0
; const char aUnknown_2[]
aUnknown_2 DCB "unknown",0
a8250 DCB "8250",0
a16450 DCB "16450",0
a16550 DCB "16550",0
a16550a DCB "16550A",0
aCirrus DCB "Cirrus",0
a16650 DCB "16650",0
a16650v2 DCB "16650V2",0
a16750 DCB "16750",0
a16950 DCB "16950",0
a16954 DCB "16954",0
a16654 DCB "16654",0
a16850 DCB "16850",0
aRsa DCB "RSA",0
aNs16550a DCB "NS16550A",0
aXscale DCB "XSCALE",0
aRm9000 DCB "RM9000",0
aOcteon DCB "OCTEON",0
aAr7 DCB "AR7",0
aU616550a DCB "U6_16550A",0
DCB    0
aUndefined DCB "undefined",0
aFlags DCB ", Flags: ",0
asc_6549B DCB " (",0
aFlags_0 DCB 9,"Flags: ",0
aInvalidFlagS DCB "invalid flag: %s",0
aCanTInvertS DCB "can't invert %s",0
aIllegalUartTyp DCB "illegal UART type: %s",0
; const char aNone_0[]
aNone_0 DCB "none",0
; const char aInfinite[]
aInfinite DCB "infinite",0
; const char aSUartSPort0x4x[]
aSUartSPort0x4x DCB "%s, UART: %s, Port: 0x%.4x, IRQ: %"
DCB "d",0
; const char aSAt0x4xIrqDIsA[]
aSAt0x4xIrqDIsA DCB "%s at 0x%.4x (irq = %d) is a %s",0
; const char aSUartSPort0x4x_0[]
aSUartSPort0x4x_0 DCB "%s uart %s port 0x%.4x irq %d baud"
DCB "_base %d",0
; const char aSLineDUartSPor[]
aSLineDUartSPor DCB "%s, Line %d, UART: %s, Port: 0x%.4"
DCB "x, IRQ: %d",0xA,0
; const char aBaudBaseDClose[]
aBaudBaseDClose DCB 9,"Baud_base: %d, close_delay: %u, "
DCB "divisor: %d",0xA,0
; const char aClosingWait[]
aClosingWait DCB 9,"closing_wait: ",0
aBiP DCB "^bi:p:",0
a1_0 DCB "=1",0
aEth0 DCB "eth0",0
; const char a2x2x2x2x2x2x[]
a2x2x2x2x2x2x DCB "%2x:%2x:%2x:%2x:%2x:%2x",0
aCanTReadWakeOn DCB "can't read Wake-On-LAN pass",0
aSiocgifhwaddrO DCB "SIOCGIFHWADDR on %s failed",0
aSoBroadcast DCB "SO_BROADCAST",0
aSiocgifindex DCB "SIOCGIFINDEX",0
aDomain DCB "domain",0
DCB    0
DCB 0x64 ; d
DCB 0x66 ; f
DCB 0x71 ; q
DCB 0x64 ; d
DCB 0x6E ; n
DCB    0
DCB    0
DCB 0x66 ; f
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x46 ; F
DCB    0
; const char asc_65657[]
asc_65657 DCB "# "
asc_65659 DCB 9,0
aSethostname_0 DCB "sethostname",0
aDfisfV DCB "dfisF:v",0
aEther DCB "ether",0
ALIGN 2
aBadS DCB "bad: '%s'",0
; const char aInet_0[]
aInet_0 DCB "inet",0
; const char aDefault[]
aDefault DCB "default",0
aInvalidHwAddrS DCB "invalid hw-addr %s",0
aSiocS DCB "SIOC%s",0
aSiocgifflags DCB "SIOCGIFFLAGS",0
aSiocsifflags DCB "SIOCSIFFLAGS",0
aMetric DCB "metric",0
aMtu DCB "mtu",0
aTxqueuelen DCB "txqueuelen",0
aDstaddr DCB "dstaddr",0
aNetmask DCB "netmask",0
aHw DCB "hw",0
aPointopoint DCB "pointopoint",0
aArp DCB "arp",0
aTrailers DCB "trailers",0
aPromisc DCB "promisc",0
aMulticast DCB "multicast",0
aAllmulti DCB "allmulti",0
aDynamic_0 DCB "dynamic",0
aSifmetric DCB "SIFMETRIC",0
aSifdstaddr DCB "SIFDSTADDR",0
aSifnetmask DCB "SIFNETMASK",0
aSifbrdaddr DCB "SIFBRDADDR",0
aSifaddr DCB "SIFADDR",0
unk_65759 DCB    0
DCB    0
DCB    0
DCB 0x4B ; K
DCB 0x69 ; i
DCB    0
DCB 0x4D ; M
DCB 0x69 ; i
DCB    0
DCB 0x47 ; G
DCB 0x69 ; i
DCB    0
DCB 0x54 ; T
DCB 0x69 ; i
DCB    0
a02x DCB "%02X-",0
aNoneSet DCB "[NONE SET]",0
aSiocgifconf DCB "SIOCGIFCONF",0
aDeviceNotFound DCB "Device not found",0
aSErrorFetching DCB "%s: error fetching interface infor"
DCB "mation: %s",0
; const char a9sLinkEncapS[]
a9sLinkEncapS DCB "%-9s Link encap:%s  ",0
; const char aHwaddrS[]
aHwaddrS DCB "HWaddr %s  ",0
; const char aMediaS[]
aMediaS DCB "Media:%s",0
; const char aAuto_0[]
aAuto_0 DCB "(auto)",0
; const char aSAddrS[]
aSAddrS DCB "          %s addr:%s ",0
; const char aPTPS[]
aPTPS DCB " P-t-P:%s ",0
; const char aBcastS[]
aBcastS DCB " Bcast:%s ",0
; const char aMaskS[]
aMaskS DCB " Mask:%s",0xA,0
; const char asc_6582A[]
asc_6582A DCB "          ",0
; const char aNoFlags[]
aNoFlags DCB "[NO FLAGS] ",0
; const char aMtuDMetricD[]
aMtuDMetricD DCB " MTU:%d  Metric:%d",0
; const char aRxPacketsLluEr[]
aRxPacketsLluEr DCB "RX packets:%llu errors:%lu dropped"
DCB ":%lu overruns:%lu frame:%lu",0xA,0
; const char aCompressedLu[]
aCompressedLu DCB "             compressed:%lu",0xA,0
; const char aTxPacketsLluEr[]
aTxPacketsLluEr DCB "TX packets:%llu errors:%lu dropped"
DCB ":%lu overruns:%lu carrier:%lu",0xA
DCB 0
; const char aCollisionsLu[]
aCollisionsLu DCB "          collisions:%lu ",0
; const char aCompressedLu_0[]
aCompressedLu_0 DCB "compressed:%lu ",0
; const char aTxqueuelenD[]
aTxqueuelenD DCB "txqueuelen:%d ",0
; const char aR[]
aR DCB 0xA
DCB "          R",0
aT DCB "  T",0
; const char aInterruptD[]
aInterruptD DCB "Interrupt:%d ",0
; const char aBaseAddress0xL[]
aBaseAddress0xL DCB "Base address:0x%lx ",0
; const char aMemoryLxLx[]
aMemoryLxLx DCB "Memory:%lx-%lx ",0
; const char aDmaChanX[]
aDmaChanX DCB "DMA chan:%x ",0
a02x02x02x02x02 DCB "%02X:%02X:%02X:%02X:%02X:%02X",0
aProcNetDev DCB "/proc/net/dev",0
; const char aCompressed[]
aCompressed DCB "compressed",0
; const char aUp[]
aUp DCB "UP",0
aBroadcast_0 DCB "BROADCAST",0
aDebug DCB "DEBUG",0
aLoopback_0 DCB "LOOPBACK",0
aPointopoint_0 DCB "POINTOPOINT",0
aNotrailers DCB "NOTRAILERS",0
aRunning_0 DCB "RUNNING",0
aNoarp DCB "NOARP",0
aPromisc_0 DCB "PROMISC",0
aAllmulti_0 DCB "ALLMULTI",0
aSlave DCB "SLAVE",0
aMaster DCB "MASTER",0
aMulticast_0 DCB "MULTICAST",0
DCB    0
; const char aXBytesLluLluUS[]
aXBytesLluLluUS DCB "X bytes:%llu (%llu.%u %sB)%s",0
aUnknown_0 DCB "unknown",0
a10base2 DCB "10base2",0
a10baset DCB "10baseT",0
aAui DCB "AUI",0
a100baset DCB "100baseT",0
a100basetx DCB "100baseTX",0
a100basefx DCB "100baseFX",0
aPpp DCB "ppp",0
aPointToPointPr DCB "Point-to-Point Protocol",0
aEther_0 DCB "ether",0
aEthernet DCB "Ethernet",0
aLoop_0 DCB "loop",0
aLocalLoopback DCB "Local Loopback",0
aUnspec DCB "unspec",0
aUnspec_0 DCB "UNSPEC",0
aNLluUUUUNNNLlu DCB "%n%llu%u%u%u%u%n%n%n%llu%u%u%u%u%u"
DCB 0
aLluLluUUUUNNLl DCB "%llu%llu%u%u%u%u%n%n%llu%llu%u%u%u"
DCB "%u%u",0
aLluLluUUUUUULl DCB "%llu%llu%u%u%u%u%u%u%llu%llu%u%u%u"
DCB "%u%u%u",0
aDarpaInternet DCB "DARPA Internet",0
aAddress_0 DCB "address",0
aRoute_0 DCB "route",0
aR_3 DCB "r",0
aLink_1 DCB "link",0
ALIGN 2
aSocket_0 DCB "socket:[",0
a0000 DCB "[0000]:",0
; const char aSCmdline[]
aSCmdline DCB "%s/cmdline",0
aSBogusDataOnLi DCB "%s: bogus data on line %d",0
aSS_0 DCB "%s:%s",0
aLaentuwxrp DCB "laentuwxrp",0
aPidProgramName DCB "PID/Program name    ",0
aCanTScanProcAr DCB "can't scan /proc - are you root?",0
aShowingOnlyPro DCB "showing only processes with your u"
DCB "ser ID",0
; const char aActiveInternet[]
aActiveInternet DCB "Active Internet connections ",0
aServersAndEsta DCB "(servers and established)",0
aOnlyServers DCB "(only servers)",0
; const char aWOServers[]
aWOServers DCB "(w/o servers)",0
aForeignAddress DCB "Foreign Address",0
aLocalAddress DCB "Local Address",0
; const char aProtoRecvQSend[]
aProtoRecvQSend DCB 0xA
DCB "Proto Recv-Q Send-Q %-23s %-23s St"
DCB "ate       %s",0xA,0
aProcNetTcp DCB "/proc/net/tcp",0
aProcNetUdp DCB "/proc/net/udp",0
aProcNetRaw DCB "/proc/net/raw",0
; const char aActiveUnixDoma[]
aActiveUnixDoma DCB "Active UNIX domain sockets ",0
; const char aProtoRefcntFla[]
aProtoRefcntFla DCB 0xA
DCB "Proto RefCnt Flags       Type     "
DCB "  State         I-Node %sPath",0xA
DCB 0
aProcNetUnix DCB "/proc/net/unix",0
; const char aS6lu6lu23s23s1[]
aS6lu6lu23s23s1 DCB "%s   %6lu %6lu %-23s %-23s %-12s",0
; const char a20s[]
a20s DCB "%.20s",0
; const char aD3209aFaFX3209[]
aD3209aFaFX3209 DCB "%*d: %32[0-9A-Fa-f]:%X %32[0-9A-Fa"
DCB "-f]:%X %X %lX:%lX %*X:%*X %*X %d %"
DCB "*d %lu ",0
; const char aX[]
aX DCB "%X",0
aStream DCB "STREAM",0
aDgram DCB "DGRAM",0
aRaw DCB "RAW",0
aRdm DCB "RDM",0
aSeqpacket DCB "SEQPACKET",0
aSynSent DCB "SYN_SENT",0
aSynRecv DCB "SYN_RECV",0
aFinWait1 DCB "FIN_WAIT1",0
aFinWait2 DCB "FIN_WAIT2",0
aTimeWait DCB "TIME_WAIT",0
aClose DCB "CLOSE",0
aCloseWait DCB "CLOSE_WAIT",0
aLastAck DCB "LAST_ACK",0
aListen DCB "LISTEN",0
aClosing DCB "CLOSING",0
aEstablished DCB "ESTABLISHED",0
aFree DCB "FREE",0
aConnected DCB "CONNECTED",0
aDisconnecting DCB "DISCONNECTING",0
aListening DCB "LISTENING",0
; const char aPLxLxLxXXLuN[]
aPLxLxLxXXLuN DCB "%*p: %lX %lX %lX %X %X %lu %n",0
; const char asc_65E75[]
asc_65E75 DCB "[ ",0
; const char aAcc[]
aAcc DCB "ACC ",0
; const char aW[]
aW DCB "W ",0
; const char aN[]
aN DCB "N ",0
; const char a5s6lu11s10s13s[]
a5s6lu11s10s13s DCB "%-5s %-6lu %-11s %-10s %-13s %6lu "
DCB 0
aQvacSTWWINp4 DCB "^qvAc:+s:t:+w:+W:+I:np:4",0
a1QVVQ DCB "=1:q--v:v--q",0
aDup DCB " (DUP!)",0
aUnknownIcmpTyp DCB "unknown ICMP type",0
; const char aPingSS[]
aPingSS DCB "PING %s (%s)",0
; const char aDDataBytes[]
aDDataBytes DCB ": %d data bytes",0xA,0
aCanTSetMultica DCB "can't set multicast source interfa"
DCB "ce",0
aRecvfrom_0 DCB "recvfrom",0
; const char aDBytesFromSSeq[]
aDBytesFromSSeq DCB "%d bytes from %s: seq=%u ttl=%d",0
; const char aTimeU03uMs[]
aTimeU03uMs DCB " time=%u.%03u ms",0
aWarningGotIcmp DCB "warning: got ICMP %d (%s)",0
; const char aSPingStatistic[]
aSPingStatistic DCB 0xA
DCB "--- %s ping statistics ---",0xA
DCB "%lu packets transmitted, %lu packe"
DCB "ts received, ",0
; const char aLuDuplicates[]
aLuDuplicates DCB "%lu duplicates, ",0
; const char aLuPacketLoss[]
aLuPacketLoss DCB "%lu%% packet loss",0xA,0
; const char aRoundTripMinAv[]
aRoundTripMinAv DCB "round-trip min/avg/max = %u.%03u/%"
DCB "u.%03u/%u.%03u ms",0xA,0
aEchoReply DCB "Echo Reply",0
aDestinationUnr DCB "Destination Unreachable",0
aSourceQuench DCB "Source Quench",0
aRedirectChange DCB "Redirect (change route)",0
aEchoRequest DCB "Echo Request",0
aTimeExceeded DCB "Time Exceeded",0
aParameterProbl DCB "Parameter Problem",0
aTimestampReque DCB "Timestamp Request",0
aTimestampReply DCB "Timestamp Reply",0
aInformationReq DCB "Information Request",0
aInformationRep DCB "Information Reply",0
aAddressMaskReq DCB "Address Mask Request",0
aAddressMaskRep DCB "Address Mask Reply",0
aResolvingS DCB "resolving %s",0
aGatewaySIsANet DCB "gateway %s is a NETWORK",0
aNetmask8xAndHo DCB "netmask %.8x and host route confli"
DCB "ct",0
aBogusNetmaskS DCB "bogus netmask %s",0
aNetmaskAndRout DCB "netmask and route address conflict"
DCB 0
aSiocaddrt DCB "SIOCADDRT",0
aSiocdelrt DCB "SIOCDELRT",0
aMssWindowIrtt DCB "  MSS Window  irtt",0
aMetricRefUse DCB "Metric Ref    Use",0
aProcNetRoute DCB "/proc/net/route",0
; const char aKernelIpRoutin[]
aKernelIpRoutin DCB "Kernel IP routing table",0xA
DCB "Destination     Gateway         Ge"
DCB "nmask         Flags %s Iface",0xA,0
; const char asc_66227[]
asc_66227 DCB "%*[^",0xA
DCB "]",0xA,0
; const char a63sLxLxXDDDLxD[]
a63sLxLxXDDDLxD DCB "%63s%lx%lx%X%d%d%d%lx%d%d%d",0xA,0
a1515s1515s16s6 DCB "%-15.15s %-15.15s %-16s%-6s",0
; const char a5d5d6dS[]
a5d5d6dS DCB "%5d %-5d %6d %s",0xA,0
a6d2d7dS DCB "%-6d %-2d %7d %s",0xA,0
aUghrdm DCB "UGHRDM",0
; const char aNet[]
aNet DCB "-net",0
aHost DCB "-host",0
aANe DCB "A:ne",0
; const char asc_662A2[]
asc_662A2 DCB 7
DCB    1
DCB 0x23 ; #
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x74 ; t
DCB    0
DCB    7
DCB    2
DCB 0x23 ; #
DCB 0x68 ; h
DCB 0x6F ; o
DCB 0x73 ; s
DCB 0x74 ; t
DCB    0
; const char asc_662B1[]
asc_662B1 DCB 9
DCB 0x10
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x63 ; c
DCB    0
DCB  0xA
DCB 0x11
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x6B ; k
DCB    0
DCB    5
DCB 0x12
DCB 0x67 ; g
DCB 0x77 ; w
DCB    0
DCB  0xA
DCB 0x12
DCB 0x67 ; g
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x77 ; w
DCB 0x61 ; a
DCB 0x79 ; y
DCB    0
DCB    6
DCB 0x13
DCB 0x6D ; m
DCB 0x73 ; s
DCB 0x73 ; s
DCB    0
DCB    9
DCB 0x14
DCB 0x77 ; w
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x6F ; o
DCB 0x77 ; w
DCB    0
DCB    7
DCB 0x15
DCB 0x69 ; i
DCB 0x72 ; r
DCB 0x74 ; t
DCB 0x74 ; t
DCB    0
DCB    6
DCB 0x16
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB    0
DCB    9
DCB 0x16
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x69 ; i
DCB 0x63 ; c
DCB 0x65 ; e
DCB    0
DCB    9
DCB 0x20
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6A ; j
DCB 0x65 ; e
DCB 0x63 ; c
DCB 0x74 ; t
DCB    0
DCB    6
DCB 0x21 ; !
DCB 0x6D ; m
DCB 0x6F ; o
DCB 0x64 ; d
DCB    0
DCB    6
DCB 0x22 ; "
DCB 0x64 ; d
DCB 0x79 ; y
DCB 0x6E ; n
DCB    0
DCB  0xB
DCB 0x23 ; #
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
; char byte_66319[21]
byte_66319 DCB 6, 1, 'a', 'd', 'd', 0, 6, 2, 'd', 'e'
DCB 'l', 0, 8, 2, 'd', 'e', 'l', 'e', 't'
DCB 'e', 0
; _BYTE byte_6632E[3]
byte_6632E DCB 2, 0xA, 0x11
; const char s1[]
s1 DCB "inet",0
aInet6_0 DCB "inet6",0
aLink_2 DCB "link",0
ALIGN 2
aOneline DCB "oneline",0
aFamily_0 DCB "family",0
a4 DCB "4",0
a6 DCB "6",0
a0 DCB "0",0
ALIGN 4
aFamily DCB "family",0
aAdd DCB "add",0
aChange_0 DCB "change",0
aChg DCB "chg",0
aReplace DCB "replace",0
aDelete_1 DCB "delete",0
aList_1 DCB "list",0
aShow DCB "show",0
aLst DCB "lst",0
aFlush_0 DCB "flush",0
ALIGN 2
; const char aLoopback[]
aLoopback DCB "LOOPBACK",0
aBroadcast_1 DCB "BROADCAST",0
aPointopoint_1 DCB "POINTOPOINT",0
aMulticast_1 DCB "MULTICAST",0
aNoarp_0 DCB "NOARP",0
aUp_0 DCB "UP",0
aLowerUp DCB "LOWER_UP",0
ALIGN 2
aCanTSendFlushR DCB "can't send flush request",0
aFlush DCB "flush",0
aCanTFlushLinkA DCB "can't flush link addresses",0
aScope DCB "scope",0
aNeedDevIface DCB "need ",0x22,"dev IFACE",0x22,0
aDevSMustMatchL DCB 0x22,"dev",0x22," (%s) must match ",0x22
DCB "label",0x22," (%s)",0
aBroadcastCanBe DCB "broadcast can be set only for IPv4"
DCB " addresses",0
aTo DCB "to",0
aScope_1 DCB "scope",0
aUp_1 DCB "up",0
aLabel DCB "label",0
aDev_1 DCB "dev",0
ALIGN 2
; const char aPeer_0[]
aPeer_0 DCB "peer",0
aRemote DCB "remote",0
aBroadcast DCB "broadcast",0
aBrd_0 DCB "brd",0
aAnycast DCB "anycast",0
aScope_2 DCB "scope",0
aDev_2 DCB "dev",0
aLabel_0 DCB "label",0
aLocal DCB "local",0
DCB    0
aWrongNlmsgLenD DCB "wrong nlmsg len %d",0
; const char aDeleted[]
aDeleted DCB "Deleted ",0
; const char aUS[]
aUS DCB "%u: %s",0
aInet DCB "    inet ",0
; const char aInet6[]
aInet6 DCB "    inet6 ",0
; const char aFamilyD[]
aFamilyD DCB "    family %d ",0
; const char aPeerSD[]
aPeerSD DCB " peer %s/%d ",0
; const char aBrdS[]
aBrdS DCB "brd %s ",0
; const char aAnyS[]
aAnyS DCB "any %s ",0
; const char aScopeS[]
aScopeS DCB "scope %s ",0
; const char aSecondary[]
aSecondary DCB "secondary ",0
; const char aTentative[]
aTentative DCB "tentative ",0
; const char aDeprecated[]
aDeprecated DCB "deprecated ",0
; const char aDynamic[]
aDynamic DCB "dynamic ",0
; const char aFlags02x[]
aFlags02x DCB "flags %02x ",0
; const char aValidLftForeve[]
aValidLftForeve DCB "valid_lft forever",0
; const char aValidLftDsec[]
aValidLftDsec DCB "valid_lft %dsec",0
; const char aPreferredLftFo[]
aPreferredLftFo DCB " preferred_lft forever",0
; const char aPreferredLftDs[]
aPreferredLftDs DCB " preferred_lft %dsec",0
; const char aS_2[]
aS_2 DCB "       %s",0
aNilIfname DCB "nil ifname",0
; const char aDS[]
aDS DCB "%d: %s",0
aNone DCB "@NONE: ",0
; const char aS_3[]
aS_3 DCB "@%s: ",0
; const char aNoCarrier[]
aNoCarrier DCB "NO-CARRIER,",0
; const char aMDown[]
aMDown DCB ",M-DOWN",0
; const char aMtuU[]
aMtuU DCB "mtu %u ",0
; const char aQdiscS[]
aQdiscS DCB "qdisc %s ",0
; const char aMasterS[]
aMasterS DCB "master %s ",0
aSiocgiftxqlen DCB "SIOCGIFTXQLEN",0
; const char aQlenD[]
aQlenD DCB "qlen %d",0
; const char aCLinkS[]
aCLinkS DCB "%c    link/%s ",0
aPeer DCB " peer ",0
; const char aBrd[]
aBrd DCB " brd ",0
; const char aOn[]
aOn DCB "on",0
aOff DCB "off",0
DCB    0
aTypeVlan DCB "type vlan",0
aUnknownVlanEnc DCB "unknown VLAN encapsulation protoco"
DCB "l '%s'",0
aArgumentOfSMus DCB "argument of ",0x22,"%s",0x22," mus"
DCB "t be ",0x22,"on",0x22," or ",0x22,"o"
DCB "ff",0x22,0
aTypeVrf DCB "type vrf",0
aQlen DCB "qlen",0
aDev_0 DCB 0x22,"dev",0x22,0
aWrongAddressSL DCB "wrong address (%s) length: expecte"
DCB "d %d bytes",0
aSiocsifhwaddr DCB "SIOCSIFHWADDR",0
aSiocsifname DCB "SIOCSIFNAME",0
aSiocsiftxqlen DCB "SIOCSIFTXQLEN",0
aSiocsifmtu DCB "SIOCSIFMTU",0
aUp_2 DCB "up",0
aDown_0 DCB "down",0
aName DCB "name",0
aMtu_0 DCB "mtu",0
aQlen_0 DCB "qlen",0
aMulticast_2 DCB "multicast",0
aArp_0 DCB "arp",0
aPromisc_1 DCB "promisc",0
aAddress DCB "address",0
aMaster_0 DCB "master",0
aNomaster DCB "nomaster",0
aDev_3 DCB "dev",0
ALIGN 2
; const char aId_0[]
aId_0 DCB "id",0
aProtocol_2 DCB "protocol",0
aReorderHdr DCB "reorder_hdr",0
aGvrp DCB "gvrp",0
aMvrp DCB "mvrp",0
aLooseBinding DCB "loose_binding",0
DCB    0
aLink DCB "link",0
aName_0 DCB "name",0
aType_1 DCB "type",0
aDev_4 DCB "dev",0
aAddress_1 DCB "address",0
DCB    0
aAdd_0 DCB "add",0
aDelete_2 DCB "delete",0
aSet DCB "set",0
aShow_0 DCB "show",0
aLst_0 DCB "lst",0
aList_2 DCB "list",0
DCB    0
a8021q DCB "802.1q",0
a8021ad DCB "802.1ad",0
DCB    0
aProcSysNetIpv4 DCB "/proc/sys/net/ipv4/route/flush",0
aA DCB "a",0
aAdd_1 DCB "add",0
aAppend DCB "append",0
aChange_1 DCB "change",0
aChg_0 DCB "chg",0
aDelete_3 DCB "delete",0
aGet DCB "get",0
aList_3 DCB "list",0
aShow_1 DCB "show",0
aPrepend DCB "prepend",0
aReplace_0 DCB "replace",0
aTest_0 DCB "test",0
aFlush_1 DCB "flush",0
DCB    0
aNeedAtLeastDes DCB "need at least destination address",0
aNotARoute DCB "not a route?",0
aWrongLenD DCB "wrong len %d",0
aCanTConnectThe DCB "can't connect the route",0
aIpRouteFlush DCB 0x22,"ip route flush",0x22,0
aProtocol DCB "protocol",0
a1 DCB "-1",0
aCanTFlushRouti DCB "can't flush routing cache",0
aCanTSendDumpRe DCB "can't send dump request",0
aSrc DCB "src",0
aVia DCB "via",0
aMtu_1 DCB "mtu",0
aAdvmss DCB "advmss",0
aScope_0 DCB "scope",0
aProtocol_1 DCB "protocol",0
aDev_5 DCB "dev",0
aOif DCB "oif",0
aTo_0 DCB "to",0
aMetric_0 DCB "metric",0
aOnlink_0 DCB "onlink",0
ALIGN 0x10
aProtocol_0 DCB "protocol",0
aDev_6 DCB "dev",0
aOif_0 DCB "oif",0
aIif DCB "iif",0
aVia_0 DCB "via",0
aTable DCB "table",0
aCache DCB "cache",0
aFrom_0 DCB "from",0
aTo_1 DCB "to",0
aScope_3 DCB "scope",0
aAll_0 DCB "all",0
aRoot DCB "root",0
aMatch DCB "match",0
aExact DCB "exact",0
aMain DCB "main",0
ALIGN 2
; const char aFrom[]
aFrom DCB "from",0
aIif_0 DCB "iif",0
aOif_1 DCB "oif",0
aDev_7 DCB "dev",0
aNotify_0 DCB "notify",0
aConnected_0 DCB "connected",0
aTo_2 DCB "to",0
ALIGN 4
; const char aNotARoute08x08[]
aNotARoute08x08 DCB "Not a route: %08x %08x %08x",0xA,0
a0D DCB "0/%d ",0
; const char aDefault_0[]
aDefault_0 DCB "default ",0
; const char aFromSU[]
aFromSU DCB "from %s/%u ",0
; const char aFromS[]
aFromS DCB "from %s ",0
aFrom0U DCB "from 0/%u ",0
; const char aViaS[]
aViaS DCB "via %s ",0
; const char aDevS[]
aDevS DCB "dev %s ",0
; const char aSrcS[]
aSrcS DCB " src %s ",0
; const char aMetricD[]
aMetricD DCB " metric %d ",0
; const char aDead[]
aDead DCB "dead ",0
; const char aOnlink[]
aOnlink DCB "onlink ",0
; const char aPervasive[]
aPervasive DCB "pervasive ",0
; const char aNotify[]
aNotify DCB "notify ",0
; const char aCCache[]
aCCache DCB "%c    cache ",0
; const char aExpiresDsec[]
aExpiresDsec DCB " expires %dsec",0
; const char aIifS[]
aIifS DCB " iif %s",0
aDeficitDRtaLen DCB "deficit %d, rta_len=%d!",0
aCanTTalkToRtne DCB "can't talk to rtnetlink",0
aTruncatedMessa DCB "truncated message",0
aMalformedMessa DCB "malformed message: len=%d!",0
aUnexpectedRepl DCB "unexpected reply!",0
aOverrun DCB "OVERRUN",0
aEofOnNetlink DCB "EOF on netlink",0
aSenderAddressL DCB "sender address length == %d",0
aErrorTruncated DCB "ERROR truncated",0
aRtnetlinkAnswe DCB "RTNETLINK answers",0
aMessageTruncat DCB "message truncated",0
aRemnantOfSizeD DCB "remnant of size %d!",0
aDumpTerminated DCB "dump terminated",0
aSIsInvalidLlad DCB 0x22,"%s",0x22," is invalid lladdr",0
aIfD DCB "if%d",0
aCanTFindDevice DCB "can't find device '%s'",0
; const char s[]
s DCB "generic",0
aLoopback_1 DCB "loopback",0
aEther_1 DCB "ether",0
aInfiniband DCB "infiniband",0
aIeee802 DCB "ieee802",0
aTr_0 DCB "tr",0
aIeee80211 DCB "ieee802.11",0
aIeee1394 DCB "ieee1394",0
aIrda DCB "irda",0
aSlip DCB "slip",0
aCslip DCB "cslip",0
aSlip6 DCB "slip6",0
aCslip6 DCB "cslip6",0
aPpp_0 DCB "ppp",0
aIpip DCB "ipip",0
aTunnel6 DCB "tunnel6",0
aSit DCB "sit",0
aGre DCB "gre",0
aVoid DCB "void",0
ALIGN 4
; const char aD[]
aD DCB "[%d]",0
aProtos DCB "protos",0
aGlobal DCB "global",0
aNowhere DCB "nowhere",0
aSite DCB "site",0
aScopes DCB "scopes",0
; const char aEtcIproute2RtS[]
aEtcIproute2RtS DCB "/etc/iproute2/rt_%s",0
aDatabaseSIsCor DCB "database %s is corrupted at line %"
DCB "d",0
aRedirect DCB "redirect",0
aKernel DCB "kernel",0
aStatic DCB "static",0
aGated DCB "gated",0
aMrt DCB "mrt",0
aZebra DCB "zebra",0
aBird DCB "bird",0
aLocal_0 DCB "local",0
aNat_0 DCB "nat",0
aBroadcast_2 DCB "broadcast",0
aBrd_1 DCB "brd",0
aAnycast_1 DCB "anycast",0
aMulticast_3 DCB "multicast",0
aProhibit_0 DCB "prohibit",0
aUnreachable_0 DCB "unreachable",0
aBlackhole_0 DCB "blackhole",0
aXresolve_0 DCB "xresolve",0
aUnicast_0 DCB "unicast",0
aThrow_0 DCB "throw",0
ALIGN 0x10
aUnicast DCB "unicast",0
aAnycast_0 DCB "anycast",0
aBlackhole DCB "blackhole",0
aUnreachable DCB "unreachable",0
aProhibit DCB "prohibit",0
aThrow DCB "throw",0
aNat DCB "nat",0
aXresolve DCB "xresolve",0
aDuplicateSSIsT DCB "duplicate ",0x22,"%s",0x22,": ",0x22
DCB "%s",0x22," is the second value",0
aEitherSIsDupli DCB "either ",0x22,"%s",0x22," is dupli"
DCB "cate, or ",0x22,"%s",0x22," is gar"
DCB "bage",0
aSMayBeInetSBut DCB 0x22,"%s",0x22," may be inet %s, bu"
DCB "t it is not allowed in this contex"
DCB "t",0
aAnSSIsExpected DCB "an %s %s is expected rather than ",0x22
DCB "%s",0x22,0
; const char aAny[]
aAny DCB "any",0
aProcNetPsched DCB "/proc/net/psched",0
; const char a08x08x08x08x[]
a08x08x08x08x DCB "%*08x%*08x%08x%08x",0
aPrefix DCB "prefix",0
aCommandLineIsN DCB "command line is not complete, try "
DCB 0x22,"help",0x22,0
asc_66E31 DCB "???",0
aCvHHFINpQrrSTT DCB "^CV:H:h:F:i:np:qRr:s:T:+t:+SA:+O:*"
DCB "ox:*fBba::v",0
aVv DCB "vv",0
aEnteringListen DCB "entering listen mode: %s",0
aOpeningRawSock DCB "opening raw socket on ifindex %d",0
aGotRawSocketFd DCB "got raw socket fd",0
aCanTSetPacketA DCB "can't set PACKET_AUXDATA on raw so"
DCB "cket",0
aCreatedRawSock DCB "created raw socket",0
; unsigned __int8 byte_66EEC[14]
byte_66EEC DCB 0, 0x11, 0x22, 1, 1, 5, 7, 0xC, 0xD
DCB 0, 0x24, 0x41, 1, 0x11
aUnicastingARel DCB "unicasting a release of %s to %s",0
aEnteringReleas DCB "entering released state",0
aDeconfig DCB "deconfig",0
aDecline DCB "decline",0
aDiscover DCB "discover",0
aSendingS DCB "sending %s",0
aRelease DCB "release",0
aSendingRenewTo DCB "sending renew to %s",0
aSendingSelectF DCB "sending select for %s",0
; const char aSUUUU[]
aSUUUU DCB "%s%u.%u.%u.%u",0
aPacketReadErro DCB "packet read error, ignoring",0
aPacketIsTooSho DCB "packet is too short, ignoring",0
aOversizedPacke DCB "oversized packet, ignoring",0
aUnrelatedBogus DCB "unrelated/bogus packet, ignoring",0
aBadIpHeaderChe DCB "bad IP header checksum, ignoring",0
aPacketWithBadU DCB "packet with bad UDP checksum recei"
DCB "ved, ignoring",0
aPacketWithBadM DCB "packet with bad magic, ignoring",0
aAPacket DCB "a packet",0
aReceivedS DCB "received %s",0
aInterfaceS DCB "interface=%s",0
aSiaddr DCB "siaddr=",0
aBootFile128s DCB "boot_file=%.128s",0
aSname64s DCB "sname=%.64s",0
aMaskU DCB "mask=%u",0
aOptU DCB "opt%u=",0
aExecutingSS DCB "executing %s %s",0
aClientidNone DCB "clientid-none",0
ALIGN 4
aCvendorclass DCB "Cvendorclass",0
DCB    1
DCB 0x56 ; V
DCB 0x68 ; h
DCB 0x6F ; o
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x6E ; n
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0x48 ; H
DCB 0x66 ; f
DCB 0x71 ; q
DCB 0x64 ; d
DCB 0x6E ; n
DCB    0
DCB    1
DCB 0x46 ; F
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x66 ; f
DCB 0x61 ; a
DCB 0x63 ; c
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x77 ; w
DCB    0
DCB    0
DCB 0x6E ; n
DCB 0x70 ; p
DCB 0x69 ; i
DCB 0x64 ; d
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0x70 ; p
DCB 0x71 ; q
DCB 0x75 ; u
DCB 0x69 ; i
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x71 ; q
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x52 ; R
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x71 ; q
DCB 0x75 ; u
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x74 ; t
DCB    0
DCB    1
DCB 0x72 ; r
DCB 0x73 ; s
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x70 ; p
DCB 0x74 ; t
DCB    0
DCB    1
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x74 ; t
DCB    0
DCB    1
DCB 0x54 ; T
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x65 ; e
DCB 0x73 ; s
DCB    0
DCB    1
DCB 0x74 ; t
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x79 ; y
DCB 0x61 ; a
DCB 0x67 ; g
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6E ; n
DCB    0
DCB    1
DCB 0x41 ; A
DCB 0x73 ; s
DCB 0x79 ; y
DCB 0x73 ; s
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x67 ; g
DCB    0
DCB    0
DCB 0x53 ; S
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x71 ; q
DCB 0x75 ; u
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x2D ; -
DCB 0x6F ; o
DCB 0x70 ; p
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    1
DCB 0x4F ; O
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x2D ; -
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x66 ; f
DCB 0x61 ; a
DCB 0x75 ; u
DCB 0x6C ; l
DCB 0x74 ; t
DCB 0x2D ; -
DCB 0x6F ; o
DCB 0x70 ; p
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x73 ; s
DCB    0
DCB    0
DCB 0x6F ; o
DCB 0x66 ; f
DCB 0x6F ; o
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x64 ; d
DCB    0
DCB    0
DCB 0x66 ; f
DCB 0x62 ; b
DCB 0x61 ; a
DCB 0x63 ; c
DCB 0x6B ; k
DCB 0x67 ; g
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x64 ; d
DCB    0
DCB    0
DCB 0x62 ; b
DCB 0x62 ; b
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x61 ; a
DCB 0x64 ; d
DCB 0x63 ; c
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x42 ; B
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x70 ; p
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x67 ; g
DCB    0
DCB    2
DCB 0x61 ; a
DCB    0
aBound DCB "bound",0
a2000 DCB "2000",0
aEtcUdhcpcDefau DCB "/etc/udhcpc/default.script",0
aUdhcp1293 DCB "udhcp 1.29.3",0
aOptionHNameIsD DCB "option -h NAME is deprecated, use "
DCB "-x hostname:NAME",0
aStartedV1293 DCB "started, v1.29.3",0
aWaitingUSecond DCB "waiting %u seconds",0
aPoll_0 DCB "poll",0
aLeasefail DCB "leasefail",0
aNoLeaseForking DCB "no lease, forking to background",0
aNoLeaseFailing DCB "no lease, failing",0
aEnteringRenewS DCB "entering renew state",0
aEnteringRebind DCB "entering rebinding state",0
aLeaseLostEnter DCB "lease lost, entering init state",0
aPerformingDhcp DCB "performing DHCP renew",0
aSigterm DCB "SIGTERM",0
aReadErrorMReop DCB "read error: %m, reopening socket",0
aXidXOurIsXIgno DCB "xid %x (our is %x), ignoring packe"
DCB "t",0
aChaddrDoesNotM DCB "chaddr does not match, ignoring pa"
DCB "cket",0
aNoMessageTypeO DCB "no message type option, ignoring p"
DCB "acket",0
aNoServerIdUsin DCB "no server ID, using 0.0.0.0",0
aNoLeaseTimeWit DCB "no lease time with ACK, using 1 ho"
DCB "ur lease",0
aOfferedAddress DCB "offered address is in use (got ARP"
DCB " reply), declining",0
aLeaseOfSObtain DCB "lease of %s obtained, lease time %"
DCB "u",0
aDhcpNak DCB "DHCP NAK",0
aNak DCB "nak",0
aReceivedDhcpNa DCB "received DHCP NAK with wrong serve"
DCB "r ID, ignoring packet",0
; const char aS_7[4]
aS_7 DCB "%s=",0
aLd DCB "%ld",0
aBad DCB "bad",0
aHlenXXidXCiadd DCB " hlen %x xid %x ciaddr %x yiaddr %"
DCB "x siaddr %x giaddr %x",0
aChaddrS DCB " chaddr %s",0
aConnect_0 DCB "connect",0
aUdp DCB "UDP",0
aBindS DCB "bind(%s)",0
aSocketS DCB "socket(%s)",0
aCanTSendSignal DCB "can't send signal",0
aOpeningListenS DCB "opening listen socket on *:%d %s",0
aIsInterfaceSUp DCB "is interface %s up and configured?"
DCB 0
aIpS DCB "IP %s",0
aSiocgifhwaddr DCB "SIOCGIFHWADDR",0
aMac02x02x02x02 DCB "MAC %02x:%02x:%02x:%02x:%02x:%02x",0
aNoA DCB "no a",0
aCanTEnableBcas DCB "can't enable bcast on raw socket",0
aSrpReplyReceiv DCB "%srp reply received for this addre"
DCB "ss",0
aMalformedHexSt DCB "malformed hex string '%s'",0
aAttachingOptio DCB "attaching option %02x to list",0
aAttachingOptio_0 DCB "attaching option %02x to existing "
DCB "member of list",0
unk_67632 DCB 0x11
unk_67633 DCB    1
DCB    8
DCB    2
DCB 0x31 ; 1
DCB    3
DCB 0x31 ; 1
DCB    6
DCB 0x21 ; !
DCB    9
DCB 0x14
DCB  0xC
DCB    6
DCB  0xD
DCB 0x14
DCB  0xF
DCB    1
DCB 0x10
DCB    3
DCB 0x11
DCB    5
DCB 0x17
DCB    6
DCB 0x1A
DCB 0x11
DCB 0x1C
DCB 0x22 ; "
DCB 0x21 ; !
DCB    4
DCB 0x28 ; (
DCB 0x21 ; !
DCB 0x29 ; )
DCB 0x31 ; 1
DCB 0x2A ; *
DCB 0x21 ; !
DCB 0x2C ; ,
DCB    7
DCB 0x33 ; 3
DCB    1
DCB 0x36 ; 6
DCB    3
DCB 0x38 ; 8
DCB    4
DCB 0x42 ; B
DCB    3
DCB 0x43 ; C
DCB 0x2C ; ,
DCB 0x77 ; w
DCB  0xD
DCB 0x78 ; x
DCB 0x2A ; *
DCB 0x79 ; y
DCB    3
DCB 0xD1
DCB    3
DCB 0xD2
DCB  0xB
DCB 0xD4
DCB 0x2A ; *
DCB 0xF9
DCB    3
DCB 0xFC
DCB    1
DCB 0x32 ; 2
DCB    5
DCB 0x35 ; 5
DCB    6
DCB 0x39 ; 9
DCB    0
DCB    0
; _BYTE byte_67678[14]
byte_67678 DCB 0, 4, 8, 1, 1, 1, 2, 4, 4, 0, 5, 0xC
DCB 1, 1
; const char aSubnet[]
aSubnet DCB "subnet",0
aTimezone DCB "timezone",0
aRouter DCB "router",0
aDns DCB "dns",0
aLprsrv DCB "lprsrv",0
aHostname_1 DCB "hostname",0
aBootsize DCB "bootsize",0
aDomain_0 DCB "domain",0
aSwapsrv DCB "swapsrv",0
aRootpath DCB "rootpath",0
aIpttl DCB "ipttl",0
aMtu_2 DCB "mtu",0
aBroadcast_3 DCB "broadcast",0
aRoutes DCB "routes",0
aNisdomain DCB "nisdomain",0
aNissrv DCB "nissrv",0
aNtpsrv DCB "ntpsrv",0
aWins DCB "wins",0
aLease DCB "lease",0
aServerid DCB "serverid",0
aMessage DCB "message",0
aTftp DCB "tftp",0
aBootfile DCB "bootfile",0
aSearch DCB "search",0
aSipsrv DCB "sipsrv",0
aStaticroutes DCB "staticroutes",0
aPxeconffile DCB "pxeconffile",0
aPxepathprefix DCB "pxepathprefix",0
aIp6rd DCB "ip6rd",0
aMsstaticroutes DCB "msstaticroutes",0
aWpad DCB "wpad",0
DCB    0
aS0x02xS DCB "%s: 0x%02x %s",0
; const char a4s4s4s4s4s4s4s[]
a4s4s4s4s4s4s4s DCB "%.4s:%.4s:%.4s:%.4s:%.4s:%.4s:%.4s"
DCB ":%.4s",0
aOption0x02xDid DCB "option 0x%02x did not fit into the"
DCB " packet",0
aAddingOption DCB "adding option",0
aCanTAddOption0 DCB "can't add option 0x%02x",0
aBadPacketMalfo DCB "bad packet, malformed option field"
DCB 0
aOptionFound DCB "option found",0
aOption0x02xNot DCB "option 0x%02x not found",0
aUnknownOptionS DCB "unknown option '%s', known options"
DCB ": %s",0
; const char delim[]
delim DCB " ",9,"=:",0
; const char asc_67879[]
asc_67879 DCB ", ",9,0
; const char asc_6787D[]
asc_6787D DCB ", ",9,"/-",0
aUnknownSignalS DCB "unknown signal '%s'",0
aBadSignalNameS DCB "bad signal name '%s'",0
aYouNeedToSpeci DCB "you need to specify whom to kill",0
aSNoProcessKill DCB "%s: no process killed",0
aCanTKillPidD DCB "can't kill pid %d",0
aInvalidNumberS DCB "invalid number '%s'",0
aW_0 DCB "^w",0
aWw_0 DCB "ww",0
; const char aPidUserVszStat[]
aPidUserVszStat DCB "  PID USER       VSZ STAT COMMAND",0
aMgtpezy DCB " mgtpezy",0
a5u88sSS DCB "%5u %-8.8s %s %s  ",0
; const char aHJS[]
aHJS DCB 0x1B,"[H",0x1B,"[J%s",0xA,0
; const char aMemLukUsedLukF[]
aMemLukUsedLukF DCB "Mem: %luK used, %luK free, %luK sh"
DCB "rd, %luK buff, %luK cached",0
; const char aCpuSusrSsysSni[]
aCpuSusrSsysSni DCB "CPU:%susr%ssys%snic%sidle%sio%sirq"
DCB "%ssirq",0
aLoadAverage DCB "Load average: ",0
aLoadavg DCB "loadavg",0
aPidPpidUserSta DCB "  PID  PPID USER     STAT   VSZ %V"
DCB "SZ %CPU COMMAND",0
; const char a5u6u88sS5s3uC3[]
a5u6u88sS5s3uC3 DCB 0xA
DCB "%5u%6u %-8.8s %s  %.5s%3u.%c%3u.%c"
DCB " ",0
aProcStat DCB "/proc/stat",0
aCanTReadS DCB "can't read '%s'",0
aMemtotal DCB "MemTotal",0
aMemfree DCB "MemFree",0
aMemshared DCB "MemShared",0
aShmem DCB "Shmem",0
aBuffers DCB "Buffers",0
aCached DCB "Cached",0
aSwaptotal DCB "SwapTotal",0
aSwapfree DCB "SwapFree",0
aDirty DCB "Dirty",0
aWriteback DCB "Writeback",0
aAnonpages DCB "AnonPages",0
aMapped DCB "Mapped",0
aSlab DCB "Slab",0
ALIGN 0x10
; const char aCpuLluLluLluLl[]
aCpuLluLluLluLl DCB "cpu %llu %llu %llu %llu %llu %llu "
DCB "%llu %llu",0
; const char src[]
src DCB "  100% ",0
aDNB DCB "d:n:b",0
aNoProcessInfoI DCB "no process info in /proc",0
aWV DCB "^w:+v",0
aVv_0 DCB "vv",0
aWarningCanTSta_0 DCB "warning: can't stat %s/check",0
aCheck DCB "./check",0
aRun_0 DCB "run",0
aWarningCanTSCh DCB "warning: can't %s child %s/check",0
aWaitFor DCB "wait for",0
aCanTOpenSuperv_1 DCB "can't open supervise/control",0
aCanTWriteToSup DCB "can't write to supervise/control",0
aFail DCB "fail: ",0
aFatalCanTS DCB "fatal: can't %s",0
; const char aSSSS_0[]
aSSSS_0 DCB "%s%s%s: %s",0
aCanTChangeDire_0 DCB "can't change directory",0
aUdopchaitkx DCB "udopchaitkx",0
aSv DCB "sv",0
; const char aSvdir[]
aSvdir DCB "SVDIR",0
; const char aSvwait[]
aSvwait DCB "SVWAIT",0
aOpenCurrentDir DCB "open current directory",0
aTc DCB "tc",0
; const char aTryRestart[]
aTryRestart DCB "try-restart",0
aTcu DCB "tcu",0
; const char aForceReload[]
aForceReload DCB "force-reload",0
; const char aForceRestart[]
aForceRestart DCB "force-restart",0
; const char aForceShutdown[]
aForceShutdown DCB "force-shutdown",0
; const char aForceStop[]
aForceStop DCB "force-stop",0
aCanTChangeToSe DCB "can't change to service directory",0
aChangeToOrigin DCB "change to original directory",0
aKill_0 DCB "kill: ",0
aTimeout DCB "timeout: ",0
aRunsvNotRunnin DCB "runsv not running",0
; const char aOk[]
aOk DCB "ok: ",0
aCanTOpenSuperv DCB "can't open supervise/ok",0
aCanTOpenSuperv_0 DCB "can't open supervise/status",0
aCanTReadSuperv_0 DCB "can't read supervise/status",0
aCanTReadSuperv DCB "can't read supervise/status: bad f"
DCB "ormat",0
aWarningCanTSta DCB "warning: can't stat %s/down",0
; const char aDown[]
aDown DCB "down: ",0
aRun DCB "run: ",0
aFinish DCB "finish: ",0
; const char aPidD[]
aPidD DCB "(pid %d) ",0
; const char aUs[]
aUs DCB "%us",0
; const char aNormallyDown[]
aNormallyDown DCB ", normally down",0
; const char aPaused[]
aPaused DCB ", paused",0
; const char aWantDown[]
aWantDown DCB ", want down",0
; const char aGotTerm[]
aGotTerm DCB ", got TERM",0
; const char aNormallyUp[]
aNormallyUp DCB ", normally up",0
; const char aWantUp[]
aWantUp DCB ", want up",0
aWarning DCB "warning: ",0
byte_67DC2 DCB 0
DCB    0
DCB    0
unk_67DC5 DCB    0
DCB 0x76 ; v
DCB 0x69 ; i
DCB    0
unk_67DC9 DCB    0
DCB 0x70 ; p
DCB 0x69 ; i
DCB 0x70 ; p
DCB 0x65 ; e
DCB 0x66 ; f
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB    0
; const char aNrbtfavx012345[]
aNrbtfavx012345 DCB "nrbtfavx\01234567",0
aCanTCreatePipe_0 DCB "can't create pipe: %m",0
; const char aLineno[]
aLineno DCB "LINENO=",0
aC_1 DCB "-c",0
aEtcProfile DCB "/etc/profile",0
aHomeProfile DCB 0x24,"HOME/.profile",0
aEnv_0 DCB "ENV",0
aHistfile DCB "HISTFILE",0
aAshHistory DCB ".ash_history",0
; const char aLineD[]
aLineD DCB "line %d: ",0
; const char aHome[]
aHome DCB "HOME",0
aCdpath DCB "CDPATH",0
aCanTCdToSM DCB "can't cd to %s: %m",0
; const char accept[4]
accept DCB "*?[\"
DCB 0x88
DCB 0x81
DCB    0
aUseExitToLeave DCB 0xA
DCB "Use ",0x22,"exit",0x22," to leave "
DCB "shell.",0xA,0
asc_67E89 DCB 0x22,"}",0
asc_67E8C DCB 0x24,"(...)",0
asc_67E93 DCB 0x24,"{",0
asc_67E96 DCB 0x24,"{#",0
asc_67E9A DCB "))",0
asc_67E9D DCB 0x24,"((",0
asc_67EA1 DCB " && ",0
asc_67EA6 DCB " || ",0
aWhile DCB "while ",0
aUntil DCB "until ",0
aFi DCB "; fi",0
aDone_0 DCB "; done",0
asc_67EC5 DCB "() { ... }",0
asc_67ED0 DCB "<<...",0
aEsac DCB "esac",0
asc_67EDB DCB ">|",0
asc_67EDE DCB ">>",0
asc_67EE1 DCB ">&",0
asc_67EE4 DCB "<&",0
asc_67EE7 DCB " | ",0
aIf DCB "if ",0
aThen DCB "; then ",0
aElse DCB "; else ",0
aDo DCB "; do ",0
aFor DCB "for ",0
aIn DCB " in ",0
aCase DCB "case ",0
asc_67F15 DCB ";; ",0
aPvv DCB "pvV",0
; const char aLld[]
aLld DCB "%lld",0
aIsAShellKeywor DCB " is a shell keyword",0
aSpecial DCB "special ",0
aAlias DCB "alias ",0
aIsAnAliasForS DCB " is an alias for %s",0
aIsS DCB " is %s",0
aIsAShellFuncti DCB " is a shell function",0
aIsASshellBuilt DCB " is a %sshell builtin",0
aNotFound DCB ": not found",0xA,0
unk_67F99 DCB 0x88
unk_67F9A DCB 0x82
DCB    1
DCB 0x40 ; @
DCB 0x3D ; =
DCB 0x88
DCB    0
aSNotFound DCB "%s: not found",0
aDM DCB "%d: %m",0
aBashXtracefd DCB "BASH_XTRACEFD",0
aSSS_1 DCB "%s%.*s%s",0
asc_67FCC DCB "_",0
aBadSubstitutio DCB "bad substitution",0
aNp DCB "np",0
aRedirError DCB "redir error",0
aBadFdNumber DCB "bad fd number",0
aD_1 DCB "[%d] ",0
aS_10 DCB " | %s",0
; const char needle[]
needle DCB "%builtin",0
aFunc DCB "func",0
aSNotDefinedInS DCB "%s not defined in %s",0
aCommandNotFoun DCB "command_not_found_handle",0
aCanTForkM DCB "can't fork: %m",0
aNoCurrentJob DCB "No current job",0
aNoPreviousJob DCB "No previous job",0
aSAmbiguous DCB "%s: ambiguous",0
aSNoSuchJob DCB "%s: no such job",0
aJobSNotCreated DCB "job %s not created under job contr"
DCB "ol",0
aUsageGetoptsOp DCB "usage: getopts optstring var [arg]"
DCB 0
aOptarg_0 DCB "OPTARG",0
aOpterr DCB "OPTERR",0
; const char aIllegalOptionC_2[]
aIllegalOptionC_2 DCB "Illegal option -%c",0xA,0
; const char aNoArgForCOptio_0[]
aNoArgForCOptio_0 DCB "No arg for -%c option",0xA,0
aOptind_0 DCB "OPTIND",0
aBuiltInCommand DCB "Built-in commands:",0xA
DCB "------------------",0xA,0
aPs1W DCB "PS1=\w \",0x24," ",0
aPpid DCB "PPID",0
aShlvl DCB "SHLVL",0
aHostname DCB "HOSTNAME",0
; const char aU_0[]
aU_0 DCB " -%u",0
; const char aL[3]
aL DCB "-l",0
aExpressionExpe DCB "expression expected",0
aNotInAFunction DCB "not in a function",0
aIllegalOptionC DCB "illegal option -%c",0
aNoArgForCOptio DCB "no arg for -%c option",0
; unsigned __int8 byte_681B5[27]
byte_681B5 DCB 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10
DCB 0x10, 0x10, 0x10, 0x10, 0x18, 0x10, 0x10
DCB 0x10, 0x10, 0x18, 0x18, 0x18, 0x18, 0x18
DCB 0x18, 0x18, 0x18, 0x10, 0x10, 8
aIllegalNumberS DCB "Illegal number: %s",0
aIllegalOptionC_0 DCB "illegal option %co %s",0
a16sS DCB "%-16s%s",0xA,0
aSetCoS DCB "set %co %s",0xA,0
aIllegalOptionC_1 DCB "illegal option %c%c",0
aO DCB "-o",0
aBadForLoopVari DCB "bad for loop variable",0
aBadFunctionNam DCB "bad function name",0
aOgutmout DCB "oguTMOUT",0
aC DCB "^C",0
; const char aTimedOutWaitin[]
aTimedOutWaitin DCB 7,"timed out waiting for input: aut"
DCB "o-logout",0
aSS_1 DCB "%s=%s",0xA,0
unk_6828A DCB 0x2F ; /
unk_6828B DCB 0x81
DCB 0x88
DCB    0
aSyntaxErrorS DCB "syntax error: %s",0
; const char aUnexpectedS[]
aUnexpectedS DCB "unexpected %s",0
; const char aExpectingS[]
aExpectingS DCB " (expecting %s)",0
aPURtNSd DCB "p:u:rt:n:sd:",0
aIfs DCB "IFS",0
aMissing DCB "missing '))'",0
aUnterminatedQu DCB "unterminated quoted string",0
aMissing_0 DCB "missing '}'",0
aEofInBackquote DCB "EOF in backquote substitution",0
aNonexistentDir DCB "nonexistent directory",0
aCanTCreateSS DCB "can't create %s: %s",0
aNoSuchFile DCB "no such file",0
aCanTOpenSS DCB "can't open %s: %s",0
aCanTOpenSM DCB "can't open '%s': %m",0
aCanTAccessTtyJ DCB "can't access tty; job control turn"
DCB "ed off",0
aOldpwd DCB "OLDPWD",0
aSBadVariableNa DCB "%.*s: bad variable name",0
aSIsReadOnly DCB "%.*s: is read only",0
aD_0 DCB "[%d]   ",0
; const char aRunning[]
aRunning DCB "Running",0
aCD DCB 0xA
DCB "%*c%d ",0
; const char aSCSS[]
aSCSS DCB "%s%*c%s%s",0
aSSSS DCB "%s%s%.*s%s",0xA,0
unk_68406 DCB 0x3D ; =
unk_68407 DCB 0x3A ; :
unk_68408 DCB 0x88
DCB 0x83
DCB 0x81
DCB 0x82
DCB 0x84
DCB 0x87
DCB    0
asc_6840F DCB 9,0xA
DCB " !",0x22,0x24,"&'()*-:;<=>?[\]`|}~"
DCB 0
aDoneD DCB "Done(%d)",0
; const char aCoreDumped[]
aCoreDumped DCB " (core dumped)",0
aYouHaveStopped DCB "You have stopped jobs.",0xA,0
a3 DCB "3.",0
a3_0 DCB "3:",0
a2_0 DCB "2[",0
a2_1 DCB "2[[",0
a6alias DCB "6alias",0
a2bg DCB "2bg",0
a3break DCB "3break",0
a2cd DCB "2cd",0
a0chdir DCB "0chdir",0
a2command DCB "2command",0
a3continue DCB "3continue",0
a2echo DCB "2echo",0
a3eval DCB "3eval",0
a3exec DCB "3exec",0
a3exit DCB "3exit",0
a7export DCB "7export",0
a2false DCB "2false",0
a2fg DCB "2fg",0
a2getopts DCB "2getopts",0
a0hash DCB "0hash",0
a0help DCB "0help",0
a0history DCB "0history",0
a2jobs DCB "2jobs",0
a2kill DCB "2kill",0
a0let DCB "0let",0
a7local DCB "7local",0
a2printf DCB "2printf",0
a0pwd DCB "0pwd",0
a2read DCB "2read",0
a7readonly DCB "7readonly",0
a3return DCB "3return",0
a3set DCB "3set",0
a3shift DCB "3shift",0
a3source DCB "3source",0
a2test DCB "2test",0
a3times DCB "3times",0
a3trap DCB "3trap",0
a2true DCB "2true",0
a0type DCB "0type",0
a0ulimit DCB "0ulimit",0
a2umask DCB "2umask",0
a2unalias DCB "2unalias",0
a3unset DCB "3unset",0
a2wait DCB "2wait",0
aNewline DCB "newline",0
aRedirection DCB "redirection",0
asc_68588 DCB "&&",0
asc_6858B DCB "||",0
asc_6858E DCB ";;",0
asc_68591 DCB "`",0
aCase_0 DCB "case",0
aDo_0 DCB "do",0
aElif DCB "elif",0
aElse_0 DCB "else",0
aThen_0 DCB "then",0
aUntil_0 DCB "until",0
aWhile_0 DCB "while",0
aPs1 DCB "PS1=",0x24," ",0
aPs2 DCB "PS2=> ",0
aPs4 DCB "PS4=+ ",0
aRandom DCB "RANDOM",0
aEerrexit DCB "eerrexit",0
aFnoglob DCB "fnoglob",0
aIignoreeof DCB "Iignoreeof",0
aIinteractive DCB "iinteractive",0
aMmonitor DCB "mmonitor",0
aNnoexec DCB "nnoexec",0
aSstdin DCB "sstdin",0
aXxtrace DCB "xxtrace",0
aVverbose DCB "vverbose",0
aCnoclobber DCB "Cnoclobber",0
aAallexport DCB "aallexport",0
aBnotify DCB "bnotify",0
aUnounset DCB "unounset",0
aParameterNotSe DCB "parameter not set",0
aOrNull DCB " or null",0
aSSS_0 DCB "%.*s: %s%s",0
; unsigned __int8 byte_68671[25]
byte_68671 DCB 1, 2, 1, 3, 4, 5, 1, 6, 7, 8, 3, 3, 3
DCB 1, 1, 3, 1, 3, 3, 9, 3, 0xA, 1, 0xB
DCB 3
aUmU03usC DCB "%um%u.%03us%c",0
DCB " ",0
unk_6869A DCB  0xA
DCB    4
DCB 0x20
DCB    8
DCB  0xA
DCB  0xC
DCB    0
aTrapSS DCB "trap -- %s %s",0xA,0
aSInvalidSignal DCB "%s: invalid signal specification",0
; const char asc_686D1[]
asc_686D1 DCB "}-+?=",0
a04o DCB "%04o",0xA,0
aIllegalModeS DCB "illegal mode: %s",0
; const char aSSNotFound[]
aSSNotFound DCB "%s: %s not found",0xA,0
aVf DCB "vf",0
unk_68703 DCB    0
DCB    0
DCB    0
DCB 0x7D ; }
DCB    0
DCB    0
DCB 0x2D ; -
DCB    0
DCB    0
DCB 0x2B ; +
DCB    0
DCB    0
DCB 0x3F ; ?
DCB    0
DCB    0
DCB 0x3D ; =
DCB    0
DCB    0
DCB 0x25 ; %
DCB    0
DCB    0
DCB 0x25 ; %
DCB 0x25 ; %
DCB    0
DCB 0x23 ; #
DCB    0
DCB    0
DCB 0x23 ; #
DCB 0x23 ; #
DCB    0
DCB 0x3A ; :
DCB    0
DCB    0
DCB 0x2F ; /
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x2F ; /
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aCanTSetTtyProc DCB "can't set tty process group: %m",0
; const char asc_68753[]
asc_68753 DCB 0xA
DCB "()&|;",0
; unsigned __int8 byte_6875A[10]
byte_6875A DCB 1, 9, 0xA, 5, 8, 4, 0, 6, 7, 0xB
aArithmeticSynt DCB "arithmetic syntax error",0
aExponentLessTh DCB "exponent less than 0",0
aDivideByZero DCB "divide by zero",0
aMalformedOpera DCB "malformed ?: operator",0
aExpressionRecu DCB "expression recursion loop detected"
DCB 0
asc_687D9 DCB "<<=",0
DCB 0xC2
DCB 0x3E ; >
DCB 0x3E ; >
DCB 0x3D ; =
DCB    0
DCB 0xE2
DCB 0x3C ; <
DCB 0x3C ; <
DCB    0
DCB  0xC
DCB 0x3E ; >
DCB 0x3E ; >
DCB    0
DCB 0x2C ; ,
DCB 0x7C ; |
DCB 0x7C ; |
DCB    0
DCB    5
DCB 0x26 ; &
DCB 0x26 ; &
DCB    0
DCB    6
DCB 0x21 ; !
DCB 0x3D ; =
DCB    0
DCB 0x2A ; *
DCB 0x3C ; <
DCB 0x3D ; =
DCB    0
DCB 0x6B ; k
DCB 0x3E ; >
DCB 0x3D ; =
DCB    0
DCB 0x4B ; K
DCB 0x3D ; =
DCB 0x3D ; =
DCB    0
DCB  0xA
DCB 0x7C ; |
DCB 0x3D ; =
DCB    0
DCB 0x42 ; B
DCB 0x26 ; &
DCB 0x3D ; =
DCB    0
DCB 0x22 ; "
DCB 0x2A ; *
DCB 0x3D ; =
DCB    0
DCB    3
DCB 0x2F ; /
DCB 0x3D ; =
DCB    0
DCB 0x23 ; #
DCB 0x25 ; %
DCB 0x3D ; =
DCB    0
DCB 0x43 ; C
DCB 0x2B ; +
DCB 0x3D ; =
DCB    0
DCB 0x82
DCB 0x2D ; -
DCB 0x3D ; =
DCB    0
DCB 0xA2
DCB 0x2D ; -
DCB 0x2D ; -
DCB    0
DCB 0x33 ; 3
DCB 0x5E ; ^
DCB 0x3D ; =
DCB    0
DCB 0x62 ; b
DCB 0x2B ; +
DCB 0x2B ; +
DCB    0
DCB 0x13
DCB 0x2A ; *
DCB 0x2A ; *
DCB    0
DCB 0x2F ; /
DCB 0x21 ; !
DCB    0
DCB 0x30 ; 0
DCB 0x3C ; <
DCB    0
DCB  0xB
DCB 0x3E ; >
DCB    0
DCB 0x2B ; +
DCB 0x3D ; =
DCB    0
DCB    2
DCB 0x7C ; |
DCB    0
DCB    7
DCB 0x26 ; &
DCB    0
DCB    9
DCB 0x2A ; *
DCB    0
DCB  0xE
DCB 0x2F ; /
DCB    0
DCB 0x2E ; .
DCB 0x25 ; %
DCB    0
DCB 0x4E ; N
DCB 0x2B ; +
DCB    0
DCB  0xD
DCB 0x2D ; -
DCB    0
DCB 0x2D ; -
DCB 0x5E ; ^
DCB    0
DCB    8
DCB 0x7E ; ~
DCB    0
DCB 0x10
DCB 0x2C ; ,
DCB    0
DCB    1
DCB 0x3F ; ?
DCB    0
DCB    4
DCB 0x3A ; :
DCB    0
DCB 0x24 ; $
unk_6885F DCB 0x29 ; )
unk_68860 DCB    0
DCB 0x34 ; 4
DCB 0x28 ; (
DCB    0
DCB    0
DCB    0
DCB 0x49 ; I
DCB 0x46 ; F
DCB 0x53 ; S
DCB 0x3D ; =
; const char asc_6886A[4]
asc_6886A DCB " ",9,0xA,0
aOptind1 DCB "OPTIND=1",0
aUnlimited DCB "unlimited",0
aInvalidFileDes DCB "invalid file descriptor",0
aInvalidTimeout DCB "invalid timeout",0
aInvalidCount DCB "invalid count",0
aReadSNotAValid DCB "read: '%s': not a valid identifier"
DCB 0
aReply DCB "REPLY",0
aC30s DCB "-%c: %-30s ",0
aErrorSettingLi DCB "error setting limit",0
aCpuTimeSeconds DCB "cpu time (seconds)",0
aDataSegSizeKb DCB "data seg size (kb)",0
aStackSizeKb DCB "stack size (kb)",0
aCoreFileSizeBl DCB "core file size (blocks)",0
aResidentSetSiz DCB "resident set size (kb)",0
aLockedMemoryKb DCB "locked memory (kb)",0
aFileDescriptor DCB "file descriptors",0
aAddressSpaceKb DCB "address space (kb)",0
aSchedulingPrio DCB "scheduling priority",0
aRealTimePriori DCB "real-time priority",0
aHsafTDSCMLPNVW DCB "-HSaf::t::d::s::c::m::l::p::n::v::"
DCB "w::e::r::",0
aMNoLSsBCDk DCB "^m:nO:l:Ss:b:C::DK",0
a0_0 DCB "=0",0
; const char aDevLog[]
aDevLog DCB "/dev/log",0
aVarLogMessages DCB "/var/log/messages",0
aAuth DCB "auth",0
aAuthpriv DCB "authpriv",0
aCron DCB "cron",0
aDaemon DCB "daemon",0
aFtp DCB "ftp",0
aKern DCB "kern",0
aLpr DCB "lpr",0
aMail DCB "mail",0
aMark DCB "mark",0
aNews DCB "news",0
aSecurity DCB "security",0
aSyslog_0 DCB "syslog",0
aUser_0 DCB "user",0
aUucp DCB "uucp",0
aLocal0 DCB "local0",0
aLocal1 DCB "local1",0
aLocal2 DCB "local2",0
aLocal3 DCB "local3",0
aLocal4 DCB "local4",0
aLocal5 DCB "local5",0
aLocal6 DCB "local6",0
aLocal7 DCB "local7",0
aAlert DCB "alert",0
aCrit DCB "crit",0
aDebug_0 DCB "debug",0
aEmerg DCB "emerg",0
aNotice DCB "notice",0
aPanic DCB "panic",0
aWarn DCB "warn",0
aWarning_0 DCB "warning",0
aShmget_0 DCB "shmget",0
aShmat_0 DCB "shmat",0
aSemget_0 DCB "semget",0
aDevKmsg DCB "/dev/kmsg",0
aSyslogdStarted DCB "syslogd started: BusyBox v1.29.3",0
aReadFromS DCB "read from %s",0
aSyslogdExiting DCB "syslogd exiting",0
; const char aDS_0[]
aDS_0 DCB "<%d>%s",0xA,0
; const char aD_2[]
aD_2 DCB "<%d>",0
; const char aS64sSS[]
aS64sSS DCB "%s %.64s %s %s",0xA,0
aSmwdn DCB "SMwdn",0
aSmwup DCB "SMwup",0
aDevConsole DCB "/dev/console",0
; const char aSD[]
aSD DCB "%s.%d",0
; const char aSS[]
aSS DCB "%s.%s",0
aCsNR DCB "cs:+n:+r",0
aKlogctl_0 DCB "klogctl",0
aLO DCB "^l:o:",0
a1_1 DCB "=1",0
aFallocateS DCB "fallocate '%s'",0
aFreeze DCB "freeze",0
ALIGN 4
DCB 0xFF
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x66 ; f
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x65 ; e
DCB 0x7A ; z
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0xFE
DCB    0
; const char[]
DCB "^",0
DCB 0x3D ; =
DCB 0x31 ; 1
DCB 0x3A ; :
DCB 0xFF
DCB 0x3A ; :
DCB 0xFE
DCB 0x3A ; :
DCB 0xFF
DCB 0x2D ; -
DCB 0x2D ; -
DCB 0xFE
DCB 0x3A ; :
DCB 0xFE
DCB 0x2D ; -
DCB 0x2D ; -
DCB 0xFF
DCB    0
aOpts1FifreezeF DCB "(opts & 1) ? FIFREEZE : FITHAW",0
; const char aIsY[]
aIsY DCB "is y",0
aIsN DCB "is n",0
; const char aNotATty[]
aNotATty DCB "not a tty",0
aDflsu DCB "dflsu",0
; const char aMore[]
aMore DCB "--More-- ",0
; const char aUOfLluBytes[]
aUOfLluBytes DCB "(%u%% of %llu bytes)",0
; const char aS_11[]
aS_11 DCB 0xD,"%*s",0xD,0
aEnterNextLineS DCB "(Enter:next line Space:next page Q"
DCB ":quit R:show the rest)",0
aOTRwanfvsioT DCB "^o:*t:rwanfvsiO:T:",0
a2_4 DCB "?2",0
aSS_5 DCB "%s,%.*s",0
aEtcFilesystems DCB "/etc/filesystems",0
DCB    0
DCB 0x2F ; /
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x63 ; c
DCB 0x2F ; /
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x79 ; y
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x73 ; s
DCB    0
aSIsWriteProtec DCB "%s is write-protected, mounting re"
DCB "ad-only",0
aEtcFstab DCB "/etc/fstab",0
aRw DCB "rw",0
; const char file[]
file DCB "/proc/mounts",0
aNoS DCB "no %s",0
aSOnSTypeSS DCB "%s on %s type %s (%s)",0xA,0
; const char aSwap[]
aSwap DCB "swap",0
aCanTFindSInS DCB "can't find %s in %s",0
aLoop DCB "loop",0
aDefaults DCB "defaults",0
aNoauto DCB "noauto",0
aSw DCB "sw",0
aSwap_0 DCB "swap",0
aNetdev DCB "_netdev",0
aNosuid DCB "nosuid",0
aSuid DCB "suid",0
aDev_8 DCB "dev",0
aNodev_0 DCB "nodev",0
aExec_0 DCB "exec",0
aNoexec DCB "noexec",0
aSync_0 DCB "sync",0
aDirsync DCB "dirsync",0
aAsync DCB "async",0
aAtime DCB "atime",0
aNoatime DCB "noatime",0
aDiratime DCB "diratime",0
aNodiratime DCB "nodiratime",0
aMand DCB "mand",0
aNomand DCB "nomand",0
aRelatime DCB "relatime",0
aNorelatime DCB "norelatime",0
aStrictatime DCB "strictatime",0
aLoud DCB "loud",0
aRbind DCB "rbind",0
aUnion DCB "union",0
aBind_1 DCB "bind",0
aMove DCB "move",0
aMakeShared DCB "make-shared",0
aMakeSlave DCB "make-slave",0
aMakePrivate DCB "make-private",0
aMakeUnbindable DCB "make-unbindable",0
aMakeRshared DCB "make-rshared",0
aMakeRslave DCB "make-rslave",0
aMakeRprivate DCB "make-rprivate",0
aMakeRunbindabl DCB "make-runbindable",0
aRo DCB "ro",0
aRw_0 DCB "rw",0
aRemount DCB "remount",0
ALIGN 2
aUncSSPrefixpat DCB "unc=\\%s\%.*s,prefixpath=%s",0
aUncSS DCB "unc=\\%s\%.*s",0
; const char aAuto[]
aAuto DCB "auto",0
; const char aCifs[]
aCifs DCB "cifs",0
; const char asc_68E8E[]
asc_68E8E DCB "/\",0
; const char aIp[]
aIp DCB ",ip=",0
aIpS_0 DCB "ip=%s",0
aNfs DCB "nfs",0
aSSaddrS DCB "%s%saddr=%s",0
aCanTSetupLoopD DCB "can't setup loop device",0
aNodev DCB "nodev",0
aMountingSOnSFa DCB "mounting %s on %s failed",0
aR_0 DCB "+R",0
aPersonality0xL DCB "personality(0x%lx)",0
aInvalidCapabil DCB "invalid capability '%s'",0
aNnp DCB "nnp",0
ALIGN 2
DCB 0xFF
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x2D ; -
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x77 ; w
DCB 0x2D ; -
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x76 ; v
DCB 0x73 ; s
DCB    0
DCB    0
DCB 0xFF
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x68 ; h
DCB 0x2D ; -
DCB 0x63 ; c
DCB 0x61 ; a
DCB 0x70 ; p
DCB 0x73 ; s
DCB    0
DCB    1
DCB 0xFE
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x74 ; t
DCB 0x2D ; -
DCB 0x63 ; c
DCB 0x61 ; a
DCB 0x70 ; p
DCB 0x73 ; s
DCB    0
DCB    1
DCB 0xFD
DCB    0
; const char asc_68F41[]
asc_68F41 DCB "+"
DCB 0xFE
DCB 0x3A ; :
DCB 0xFD
DCB 0x3A ; :
DCB    0
aSetNoNewPrivs DCB "SET_NO_NEW_PRIVS",0
aPrctlS DCB "prctl: %s",0
aCapset_0 DCB "capset",0
aCapAmbientRais DCB "cap_ambient_raise",0
aCapAmbientLowe DCB "cap_ambient_lower",0
aSBusyRemounted DCB "%s busy - remounted read-only",0
aCanTRemountSRe DCB "can't remount %s read-only",0
aFldnratCvi DCB "fldnrat:cvi",0
aCanTUnmountS DCB "can't unmount %s",0
aCfkvqdtzs12345 DCB "^cfkvqdtzs123456789",0
aS2 DCB "s2",0
aBz2 DCB "bz2",0
; const char aTxcFOopvkchtXZ[]
aTxcFOopvkchtXZ DCB "^txC:f:OopvkchT:*X:*zm"
DCB 0xF9
DCB 0x3A ; :
DCB    0
DCB 0x74 ; t
DCB 0x74 ; t
DCB 0x3A ; :
DCB 0x76 ; v
DCB 0x76 ; v
DCB 0x3A ; :
DCB 0xFF
DCB 0x3A ; :
DCB 0x3A ; :
DCB 0x63 ; c
DCB 0x3A ; :
DCB 0x74 ; t
DCB 0x3A ; :
DCB 0x78 ; x
DCB 0x3A ; :
DCB 0x63 ; c
DCB 0x2D ; -
DCB 0x2D ; -
DCB 0x74 ; t
DCB 0x78 ; x
DCB 0x3A ; :
DCB 0x74 ; t
DCB 0x2D ; -
DCB 0x2D ; -
DCB 0x63 ; c
DCB 0x78 ; x
DCB 0x3A ; :
DCB 0x78 ; x
DCB 0x2D ; -
DCB 0x2D ; -
DCB 0x63 ; c
DCB 0x74 ; t
DCB 0x3A ; :
DCB 0xF9
DCB 0x2B ; +
DCB    0
; const char a0Llo[]
a0Llo DCB "%0*llo",0
aList_0 DCB "list",0
ALIGN 4
aTextract DCB "textract",0
ALIGN 2
aXdirectory DCB "xdirectory",0
DCB    1
DCB 0x43 ; C
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0x66 ; f
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x2D ; -
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x64 ; d
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x4F ; O
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x2D ; -
DCB 0x73 ; s
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x2D ; -
DCB 0x6F ; o
DCB 0x77 ; w
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x72 ; r
DCB    0
DCB    0
DCB 0x6F ; o
DCB 0x73 ; s
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x2D ; -
DCB 0x70 ; p
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x73 ; s
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x73 ; s
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x62 ; b
DCB 0x6F ; o
DCB 0x73 ; s
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x76 ; v
DCB 0x6B ; k
DCB 0x65 ; e
DCB 0x65 ; e
DCB 0x70 ; p
DCB 0x2D ; -
DCB 0x6F ; o
DCB 0x6C ; l
DCB 0x64 ; d
DCB    0
DCB    0
DCB 0x6B ; k
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x63 ; c
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x66 ; f
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x63 ; c
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x68 ; h
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x2D ; -
DCB 0x66 ; f
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x6D ; m
DCB    0
DCB    1
DCB 0x54 ; T
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x63 ; c
DCB 0x6C ; l
DCB 0x75 ; u
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x2D ; -
DCB 0x66 ; f
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x6D ; m
DCB    0
DCB    1
DCB 0x58 ; X
DCB 0x67 ; g
DCB 0x7A ; z
DCB 0x69 ; i
DCB 0x70 ; p
DCB    0
DCB    0
DCB 0x7A ; z
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x63 ; c
DCB 0x68 ; h
DCB    0
DCB    0
DCB 0x6D ; m
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x70 ; p
DCB 0x2D ; -
DCB 0x63 ; c
DCB 0x6F ; o
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x74 ; t
DCB 0x73 ; s
DCB    0
DCB    1
DCB 0xF9
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x2D ; -
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x63 ; c
DCB 0x75 ; u
DCB 0x72 ; r
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB 0xFA
DCB 0x6E ; n
DCB 0x75 ; u
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x63 ; c
DCB 0x2D ; -
DCB 0x6F ; o
DCB 0x77 ; w
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x72 ; r
DCB    0
DCB    0
DCB 0xFC
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x2D ; -
DCB 0x73 ; s
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x2D ; -
DCB 0x70 ; p
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x73 ; s
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x73 ; s
DCB    0
DCB    0
DCB 0xFD
DCB 0x6F ; o
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x77 ; w
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0xFE
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x63 ; c
DCB 0x6C ; l
DCB 0x75 ; u
DCB 0x64 ; d
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0xFF
DCB    0
aGzip DCB "gzip",0
aS_9 DCB "-%s",0
aEmptyArchive DCB "empty archive",0
aSNotFoundInArc DCB "%s: not found in archive",0
aF_1 DCB "-f",0
; const char aSSocketIgnored[]
aSSocketIgnored DCB "%s: socket ignored",0
aSFileIsTheArch DCB "%s: file is the archive; skipping",0
aCanTStatTarFil DCB "can't stat tar file",0
aErrorExitDelay DCB "error exit delayed from previous e"
DCB "rrors",0
aWaitpid_0 DCB "waitpid",0
aNamesLongerTha DCB "names longer than 100 chars not su"
DCB "pported",0
aCanTStoreFileS DCB "can't store file '%s' of size %llu"
DCB ", aborting",0
aSUnknownFileTy DCB "%s: unknown file type",0
; const char aUstar[]
aUstar DCB "ustar  ",0
aSUnknownSuffix DCB "%s: unknown suffix - ignored",0
aCompressedData DCB "compressed data not read from term"
DCB "inal, use -f to force it",0
aCfkvqdt DCB "cfkvqdt",0
aCanTRemoveOldF DCB "can't remove old file %s",0
aCanTStatOldFil DCB "can't stat old file",0
aSNotCreatedNew DCB "%s not created: newer or same age "
DCB "file exists",0
aCanTMakeDirS DCB "can't make dir %s",0
aCanTCreateNode DCB "can't create node %s",0
aUnrecognizedFi DCB "unrecognized file type",0
aBunzipErrorD DCB "bunzip error %d",0
aCrcError_0 DCB "CRC error",0
; unsigned __int8 byte_6937F[19]
byte_6937F DCB 0x10, 0x11, 0x12, 0, 8, 7, 9, 6, 0xA
DCB 5, 0xB, 4, 0xC, 3, 0xD, 2, 0xE, 1, 0xF
unk_69392 DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    1
DCB    2
DCB    2
DCB    3
DCB    3
DCB    4
DCB    4
DCB    5
DCB    5
DCB    6
DCB    6
DCB    7
DCB    7
DCB    8
DCB    8
DCB    9
DCB    9
DCB  0xA
DCB  0xA
DCB  0xB
DCB  0xB
DCB  0xC
DCB  0xC
DCB  0xD
DCB  0xD
unk_693B0 DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    1
DCB    1
DCB    1
DCB    2
DCB    2
DCB    2
DCB    2
DCB    3
DCB    3
DCB    3
DCB    3
DCB    4
DCB    4
DCB    4
DCB    4
DCB    5
DCB    5
DCB    5
DCB    5
DCB    0
DCB 0x63 ; c
DCB 0x63 ; c
aUnexpectedEndO DCB "unexpected end of file",0
aCorruptedData DCB "corrupted data",0
aCrcError DCB "crc error",0
aIncorrectLengt DCB "incorrect length",0
aCorruptedOctal DCB "corrupted octal value in tar heade"
DCB "r",0
aUstar_0 DCB "ustar",0
aInvalidTarMagi DCB "invalid tar magic",0
aInvalidTarHead DCB "invalid tar header checksum",0
aWarningSkippin DCB "warning: skipping header '%c'",0
aUnknownTypefla DCB "unknown typeflag: 0x%x",0
; const char aSSS9llu4u02u02[]
aSSS9llu4u02u02 DCB "%s %s/%s %9llu %4u-%02u-%02u %02u:"
DCB "%02u:%02u %s",0
; const char aS_4[]
aS_4 DCB " -> %s",0
aInvalidMagic DCB "invalid magic",0
aNoGzipMagic DCB "no gzip magic",0
aBufferUTooSmal DCB "buffer %u too small",0
aSeekFailure DCB "seek failure",0
asc_69510 DCB "/../",0
aRemovingLeadin DCB "removing leading '%.*s' from membe"
DCB "r names",0
aHard DCB "hard",0
aCSCS DCB "%c%s%c%s",0
aSym DCB "sym",0
aCanTCreateSlin DCB "can't create %slink '%s' to '%s'",0
aEtvanbu DCB "^etvAnbu",0
aAetv DCB "Aetv",0
; const char a6u[]
a6u DCB "%6u  ",0
aR_1 DCB "^R",0
a2_5 DCB "-2",0
; const char aR_2[3]
aR_2 DCB "-R",0
aInvalidModeS DCB "invalid mode '%s'",0
aRh DCB "^Rh",0
a2_6 DCB "-2",0
aI_1 DCB "-i",0
; const char aULluS[]
aULluS DCB "%u %llu %s",0xA,0
aULlu DCB "%u %llu",0xA,0
aPdrfilslharpvu DCB "^pdRfilsLHarPvuT",0
a2LSSLPdRrdRdAp DCB "-2:l--s:s--l:Pd:rRd:Rd:apdR",0
aSIsADirectory DCB "'%s' is a directory",0
aTooManyArgumen DCB "too many arguments",0
aBCFDSn DCB "^b:c:f:d:sn",0
aBBcfCBcfFBcf DCB "b--bcf:c--bcf:f--bcf",0
aOnlyWhenOperat DCB " only when operating on fields",0
aExpectedAListO DCB "expected a list of bytes, characte"
DCB "rs, or fields",0
aTheDelimiterMu DCB "the delimiter must be a single cha"
DCB "racter",0
aSuppressingNon DCB "suppressing non-delimited lines ma"
DCB "kes sense%s",0
aADelimiterMayB DCB "a delimiter may be specified%s",0
aMissingListOfP DCB "missing list of positions",0
aRsUdRID DCB "^Rs:ud:r:I::D:",0
aDSSDRIIR DCB "d--s:s--d:R--I:I--R",0
aRfc822 DCB "rfc-822",0
ALIGN 0x10
aRrfc2822 DCB "Rrfc-2822",0
DCB    0
DCB 0x52 ; R
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x74 ; t
DCB    0
DCB    1
DCB 0x73 ; s
DCB 0x75 ; u
DCB 0x74 ; t
DCB 0x63 ; c
DCB    0
DCB    0
DCB 0x75 ; u
DCB 0x64 ; d
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0x64 ; d
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x66 ; f
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x63 ; c
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0x72 ; r
DCB    0
aABEHMSZY DCB "%a %b %e %H:%M:%S %Z %Y",0
aYMDHMS DCB "%Y.%m.%d-%H:%M:%S",0
; const char aTzUtc0[]
aTzUtc0 DCB "TZ=UTC0",0
; const char a0123456789[]
a0123456789 DCB "0123456789",0
aCanTSetDate DCB "can't set date",0
; const char aYMDtHMS[]
aYMDtHMS DCB "%Y-%m-%dT%H:%M:%S",0
; const char aADBYHMS[]
aADBYHMS DCB "%a, %d %b %Y %H:%M:%S ",0
aF_0 DCB "%f",0
aDate DCB "date",0
aHours DCB "hours",0
aMinutes DCB "minutes",0
aSeconds DCB "seconds",0
ALIGN 0x10
aKpthm DCB "^kPThm",0
aKMMK DCB "k-m:m-k",0
aSize DCB "     Size",0
aType DCB "Type       ",0
aCapacity DCB "Capacity",0
aUse DCB "Use%",0
; const char aPosixlyCorrect[]
aPosixlyCorrect DCB "POSIXLY_CORRECT",0
aSBlocks DCB "%s-blocks",0
; const char aFilesystemS15s[]
aFilesystemS15s DCB "Filesystem           %s%-15sUsed A"
DCB "vailable %s Mounted on",0xA,0
aSCanTFindMount DCB "%s: can't find mount point",0
; const char aRootfs[]
aRootfs DCB "rootfs",0
; const char a20s_0[]
a20s_0 DCB 0xA
DCB "%-20s",0
; const char a10s_0[]
a10s_0 DCB " %-10s",0
; const char a30s[]
a30s DCB 0xA
DCB "%-30s",0
; const char a9s[]
a9s DCB " %9s ",0
; const char a9s3uS[]
a9s3uS DCB "%9s %3u%% %s",0xA,0
aAhklsxdLchm DCB "^aHkLsxd:+lchm",0
aHKmKHmMHkHLLHS DCB "h-km:k-hm:m-hk:H-L:L-H:s-d:d-s",0
; const char aSS_2[]
aSS_2 DCB "%s",9,"%s",0xA,0
aTotal DCB "total",0
aIgnoreEnvironm DCB "ignore-environment",0
DCB    0
DCB 0x69 ; i
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x74 ; t
DCB    0
DCB    1
DCB 0x75 ; u
DCB    0
aIu DCB "+iu:*",0
aPutenv_0 DCB "putenv",0
aNonNumericArgu DCB "non-numeric argument",0
aDivisionByZero_0 DCB "division by zero",0
aWarningSUsingA DCB "warning: '%s': using '^' as the fi"
DCB "rst character",0xA
DCB "of a basic regular expression is n"
DCB "ot portable; it is ignored",0
asc_699CB DCB "<=",0
asc_699CE DCB "!=",0
asc_699D1 DCB ">=",0
aTooFewArgument_0 DCB "too few arguments",0
; const char aLld_0[]
aLld_0 DCB "%lld",0xA,0
; const char aQuote[]
aQuote DCB "quote",0
aLength DCB "length",0
aMatch_0 DCB "match",0
aIndex DCB "index",0
aSubstr DCB "substr",0
DCB    0
; const char a2[3]
a2 DCB " 2",0
; const char aLlu[]
aLlu DCB " %llu",0
; const char aLlu_0[]
aLlu_0 DCB "%llu:",0
a80 DCB "80",0
aWS DCB "-w%s",0
aBsw DCB "bsw:",0
aS_1 DCB 0xA
DCB "==> %s <==",0xA,0
aCountIsTooBigL DCB "count is too big: %lu",0
; const char shortopts[]
shortopts DCB "n:c:qv",0
aRnugg DCB "^rnugG",0
a1UGGUGUUGGGGGR DCB "?1:u--g:g--u:G--u:u--G:g--G:G--g:r"
DCB "?ugG:n?ugG",0
aGroups DCB " groups=",0
aGid DCB " gid=",0
aEuid DCB " euid=",0
aEgid DCB " egid=",0
asc_69AA4 DCB "^",0
a2_7 DCB "=2",0
aSfnbsVt DCB "^sfnbS:vT",0
a1_2 DCB "-1",0
aTAccepts2ArgsM DCB "-T accepts 2 args max",0
; const char aSS_3[]
aSS_3 DCB "'%s' -> '%s'",0xA,0
aGetlogin DCB "getlogin",0
; unsigned __int8 byte_69AE3[51]
byte_69AE3 DCB 0, 0x7C, 0, 0, 0x2F, 0, 0, 0, 0, 0, 0x40
DCB 0, 0x3D, 0, 0, 0, 0, 1, 0, 1, 7, 1, 7
DCB 1, 7, 0, 7, 1, 7, 1, 7, 7, 1, 0, 0x1F
DCB 0x23, 0x23, 0x25, 0x22, 0x25, 0x23, 0x23
DCB 0, 0x25, 0x24, 0x25, 0x23, 0x25, 0x25
DCB 0x20, 0
aCadi1lgnsxakfp DCB "^Cadi1lgnsxAkFpRQctuSXrvLHh",0
DCB 0x6E ; n
DCB 0x6C ; l
DCB 0x3A ; :
DCB 0x67 ; g
DCB 0x6C ; l
DCB 0x3A ; :
DCB 0xFF
DCB 0x6C ; l
DCB 0x3A ; :
DCB 0x74 ; t
DCB 0x2D ; -
DCB 0x53 ; S
DCB 0x3A ; :
DCB 0x53 ; S
DCB 0x2D ; -
DCB 0x74 ; t
DCB 0x3A ; :
DCB 0x48 ; H
DCB 0x2D ; -
DCB 0x4C ; L
DCB 0x3A ; :
DCB 0x4C ; L
DCB 0x2D ; -
DCB 0x48 ; H
DCB 0x3A ; :
DCB 0x43 ; C
DCB 0x2D ; -
DCB 0x78 ; x
DCB 0x6C ; l
DCB 0x3A ; :
DCB 0x78 ; x
DCB 0x2D ; -
DCB 0x43 ; C
DCB 0x6C ; l
DCB 0x3A ; :
DCB 0x6C ; l
DCB 0x2D ; -
DCB 0x78 ; x
DCB 0x43 ; C
DCB 0x3A ; :
DCB 0x43 ; C
DCB 0x2D ; -
DCB 0x31 ; 1
DCB 0x3A ; :
DCB 0x31 ; 1
DCB 0x2D ; -
DCB 0x43 ; C
DCB 0x3A ; :
DCB 0x78 ; x
DCB 0x2D ; -
DCB 0x31 ; 1
DCB 0x3A ; :
DCB 0x31 ; 1
DCB 0x2D ; -
DCB 0x78 ; x
DCB 0x3A ; :
DCB 0x63 ; c
DCB 0x2D ; -
DCB 0x75 ; u
DCB 0x3A ; :
DCB 0x75 ; u
DCB 0x2D ; -
DCB 0x63 ; c
DCB    0
aAlways DCB "always",0
aYes_0 DCB "yes",0
aForce DCB "force",0
aAuto_1 DCB "auto",0
aTty_0 DCB "tty",0
aIfTty DCB "if-tty",0
ALIGN 4
; const char aS_13[4]
aS_13 DCB "%*s",0
; const char a7llu[]
a7llu DCB "%7llu ",0
; const char a6llu[]
a6llu DCB "%6llu ",0
; const char a10s[]
a10s DCB "%-10s ",0
; const char a4lu[]
a4lu DCB "%4lu ",0
; const char a8u8u[]
a8u8u DCB "%-8u %-8u ",0
; const char a88s88s[]
a88s88s DCB "%-8.8s %-8.8s ",0
; const char a4u3u[]
a4u3u DCB "%4u, %3u ",0
; const char a7s[]
a7s DCB "%7s ",0
; const char a9llu[]
a9llu DCB "%9llu ",0
; const char aYMDHMSZ[]
aYMDHMSZ DCB "%Y-%m-%d %H:%M:%S %z",0
; const char a12s[]
a12s DCB "%.12s ",0
; const char a7s6s[]
a7s6s DCB "%.7s%6s",0
; const char aUUm[]
aUUm DCB 0x1B,"[%u;%um",0
; const char asc_69C10[]
asc_69C10 DCB " -> ",0
aFullTime DCB "full-time",0
ALIGN 0x10
DCB 0xFF
DCB 0x67 ; g
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x70 ; p
DCB 0x2D ; -
DCB 0x64 ; d
DCB 0x69 ; i
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x63 ; c
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x2D ; -
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x72 ; r
DCB 0x73 ; s
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0xFE
DCB 0x63 ; c
DCB 0x6F ; o
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x72 ; r
DCB    0
DCB    2
DCB 0xFD
DCB    0
; const char aLsColors[]
aLsColors DCB "LS_COLORS",0
; const char aS_12[]
aS_12 DCB "%s:",0xA,0
aScwbt DCB "^scwbt",0
aSCWC DCB "s?c:w?c",0
; const char asc_69C62[3]
asc_69C62 DCB " *",0
; const char aSOk[]
aSOk DCB "%s: OK",0xA,0
; const char aSFailed[]
aSFailed DCB "%s: FAILED",0xA,0
aWarningDOfDCom DCB "WARNING: %d of %d computed checksu"
DCB "ms did NOT match",0
aSNoChecksumLin DCB "%s: no checksum lines found",0
; const char aSS_6[]
aSS_6 DCB "%s  %s",0xA,0
aMode DCB "mode",0
DCB    1
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x74 ; t
DCB 0x73 ; s
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x62 ; b
DCB 0x6F ; o
DCB 0x73 ; s
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x76 ; v
DCB    0
aMPv DCB "m:pv",0
; const char aPcub[]
aPcub DCB "pcub",0
DCB    1
DCB    1
DCB    2
aDqtpU DCB "^dqtp:u",0
a1_3 DCB "?1",0
; const char aTmpdir[]
aTmpdir DCB "TMPDIR",0
aTmp DCB "/tmp",0
aTmpXxxxxx DCB "tmp.XXXXXX",0
aInteractive DCB "interactive",0
ALIGN 4
aIforce DCB "iforce",0
ALIGN 0x10
aFnoClobber DCB "fno-clobber",0
DCB    0
DCB 0x6E ; n
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x62 ; b
DCB 0x6F ; o
DCB 0x73 ; s
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x76 ; v
DCB    0
; const char aFinv[]
aFinv DCB "^finv",0
DCB 0x2D ; -
DCB 0x32 ; 2
DCB 0x3A ; :
DCB 0x66 ; f
DCB 0x2D ; -
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x3A ; :
DCB 0x69 ; i
DCB 0x2D ; -
DCB 0x66 ; f
DCB 0x6E ; n
DCB 0x3A ; :
DCB 0x6E ; n
DCB 0x2D ; -
DCB 0x66 ; f
DCB 0x69 ; i
DCB    0
aCanTOverwriteS DCB "can't overwrite %sdirectory with %"
DCB "sdirectory",0
; const char aMvOverwriteS[]
aMvOverwriteS DCB "mv: overwrite '%s'? ",0
aCanTRenameS DCB "can't rename '%s'",0
aNon DCB "non-",0
aCanTRemoveS DCB "can't remove '%s'",0
aSetpriorityD DCB "setpriority(%d)",0
aNohupOut DCB "nohup.out",0
aAppendingOutpu DCB "appending output to %s",0
aDS_1 DCB "d:s",0
aDIsNotSupporte DCB "-d '' is not supported",0
; const char aDiouxxfeeggcs[]
aDiouxxfeeggcs DCB "diouxXfeEgGcs",0
; const char asc_69E26[3]
asc_69E26 DCB ".*",0
aUsagePrintfFor DCB "usage: printf FORMAT [ARGUMENT...]"
DCB 0
; const char asc_69E4C[]
asc_69E4C DCB "-+ #",0
aSInvalidFormat DCB "%s: invalid format",0
aFnvsq DCB "^fnvsq",0
a1_4 DCB "=1",0
aFirrv DCB "^fiRrv",0
aFIIF DCB "f-i:i-f",0
aCanTRemoveOr DCB "can't remove '.' or '..'",0
aParents DCB "parents",0
DCB    0
DCB 0x70 ; p
DCB 0x69 ; i
DCB 0x67 ; g
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x2D ; -
DCB 0x66 ; f
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x2D ; -
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x2D ; -
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x2D ; -
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x74 ; t
DCB 0x79 ; y
DCB    0
DCB    0
DCB 0xFF
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x62 ; b
DCB 0x6F ; o
DCB 0x73 ; s
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x76 ; v
DCB    0
; const char aRmdirRemovingD[]
aRmdirRemovingD DCB "rmdir: removing directory, '%s'",0xA
DCB 0
aWs DCB "+ws:",0
; const char aS0F[]
aS0F DCB "%s%0*.*f",0
a0123456789_0 DCB "0123456789.",0
aUnknownSortTyp DCB "unknown sort type",0
aB DCB "%b",0
aBadTParameter DCB "bad -t parameter",0
aUnknownKeyOpti DCB "unknown key option",0
; const char aCheckLineU[]
aCheckLineU DCB "Check line %u",0xA,0
; const char aSC[]
aSC DCB "%s%c",0
aNgmucszbrdfims DCB "^ngMucszbrdfimS:T:o:k:*t:",0
aOOTT DCB "o--o:t--t",0
aBadFieldSpecif DCB "bad field specification",0
aS_14 DCB "%s",0
aSNoSizeInforma DCB "%s: no size information for this d"
DCB "evice",0
aLuLu DCB "%lu %lu",0xA,0
aIspeedLuBaudOs DCB "ispeed %lu baud; ospeed %lu baud;",0
aLu DCB "%lu",0xA,0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x73 ; s
DCB 0x70 ; p
DCB 0x65 ; e
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0x20
DCB 0x25 ; %
DCB 0x6C ; l
DCB 0x75 ; u
DCB 0x20
DCB 0x62 ; b
DCB 0x61 ; a
DCB 0x75 ; u
DCB 0x64 ; d
DCB 0x3B ; ;
DCB    0
; const char aIntr[]
aIntr DCB "intr",0
aQuit_0 DCB "quit",0
aErase DCB "erase",0
aKill_3 DCB "kill",0
aEof DCB "eof",0
aEol DCB "eol",0
aEol2 DCB "eol2",0
aSwtch DCB "swtch",0
aStart DCB "start",0
aStop_0 DCB "stop",0
aSusp DCB "susp",0
aRprnt DCB "rprnt",0
aWerase DCB "werase",0
aLnext DCB "lnext",0
aFlush_2 DCB "flush",0
aMin DCB "min",0
aTime DCB "time",0
ALIGN 4
; const char aLxLxLxLx[]
aLxLxLxLx DCB "%lx:%lx:%lx:%lx",0
aX_0 DCB ":%x",0
aRowsUColumnsU DCB "rows %u; columns %u;",0
aUU DCB "%u %u",0xA,0
aLineU DCB "line = %u;",0xA,0
aUndef_0 DCB "<undef>",0
aSS_7 DCB "%s = %s;",0
aMinUTimeU DCB "min = %u; time = %u;",0
; const char aEvenp[]
aEvenp DCB "evenp",0
aParity DCB "parity",0
aOddp DCB "oddp",0
aNl DCB "nl",0
aEk DCB "ek",0
aSane DCB "sane",0
aCooked DCB "cooked",0
aRaw_0 DCB "raw",0
aPass8 DCB "pass8",0
aLitout DCB "litout",0
aCbreak DCB "cbreak",0
aCrt DCB "crt",0
aDec DCB "dec",0
aDecctlq DCB "decctlq",0
aTabs DCB "tabs",0
aLcase DCB "lcase",0
aLcase_0 DCB "LCASE",0
aParenb DCB "parenb",0
aParodd DCB "parodd",0
aCmspar DCB "cmspar",0
aCs5 DCB "cs5",0
aCs6 DCB "cs6",0
aCs7 DCB "cs7",0
aCs8 DCB "cs8",0
aHupcl DCB "hupcl",0
aHup DCB "hup",0
aCstopb DCB "cstopb",0
aCread DCB "cread",0
aClocal DCB "clocal",0
aCrtscts DCB "crtscts",0
aIgnbrk DCB "ignbrk",0
aBrkint DCB "brkint",0
aIgnpar DCB "ignpar",0
aParmrk DCB "parmrk",0
aInpck DCB "inpck",0
aIstrip DCB "istrip",0
aInlcr DCB "inlcr",0
aIgncr DCB "igncr",0
aIcrnl DCB "icrnl",0
aIxon DCB "ixon",0
aIxoff DCB "ixoff",0
aTandem DCB "tandem",0
aIuclc DCB "iuclc",0
aIxany DCB "ixany",0
aImaxbel DCB "imaxbel",0
aIutf8 DCB "iutf8",0
aOpost DCB "opost",0
aOlcuc DCB "olcuc",0
aOcrnl DCB "ocrnl",0
aOnlcr DCB "onlcr",0
aOnocr DCB "onocr",0
aOnlret DCB "onlret",0
aOfill DCB "ofill",0
aOfdel DCB "ofdel",0
aNl1 DCB "nl1",0
aNl0 DCB "nl0",0
aCr3 DCB "cr3",0
aCr2 DCB "cr2",0
aCr1 DCB "cr1",0
aCr0 DCB "cr0",0
aTab3 DCB "tab3",0
aTab2 DCB "tab2",0
aTab1 DCB "tab1",0
aTab0 DCB "tab0",0
aBs1 DCB "bs1",0
aBs0 DCB "bs0",0
aVt1 DCB "vt1",0
aVt0 DCB "vt0",0
aFf1 DCB "ff1",0
aFf0 DCB "ff0",0
aIsig DCB "isig",0
aIcanon DCB "icanon",0
aIexten DCB "iexten",0
aEcho DCB "echo",0
aEchoe DCB "echoe",0
aCrterase DCB "crterase",0
aEchok DCB "echok",0
aEchonl DCB "echonl",0
aNoflsh DCB "noflsh",0
aXcase DCB "xcase",0
aTostop DCB "tostop",0
aEchoprt DCB "echoprt",0
aPrterase DCB "prterase",0
aEchoctl DCB "echoctl",0
aCtlecho DCB "ctlecho",0
aEchoke DCB "echoke",0
aCrtkill DCB "crtkill",0
aFlusho DCB "flusho",0
aExtproc DCB "extproc",0
ALIGN 2
; const char aLine[]
aLine DCB "line",0
aRows DCB "rows",0
aCols DCB "cols",0
aColumns_0 DCB "columns",0
aSize_0 DCB "size",0
aSpeed DCB "speed",0
aIspeed DCB "ispeed",0
aOspeed DCB "ospeed",0
DCB    0
; const char aLxLxLxLxN[]
aLxLxLxLxN DCB "%lx:%lx:%lx:%lx%n",0
; const char aXN[]
aXN DCB ":%x%n",0
; const char asc_6A30B[]
asc_6A30B DCB "^-",0
; const char aUndef[]
aUndef DCB "undef",0
aOnlyOneDeviceM DCB "only one device may be specified",0
aF DCB "-F",0
aInvalidArgumen_0 DCB "invalid argument '%s'",0
aAAndGAreMutual DCB "-a and -g are mutually exclusive",0
aModesMayNotBeS DCB "modes may not be set when -a or -g"
DCB " is used",0
aSCannotPerform DCB "%s: cannot perform all requested o"
DCB "perations",0
asc_6A3C6 DCB 8,0
DCB    4
DCB  0xC
aFcNQsVf DCB "^fc:n:qs:+vF",0
aFf DCB "Ff",0
aAppeared DCB "appeared",0
aBeenReplaced DCB "been replaced",0
aNoFiles DCB "no files",0
aSHasSFollowing DCB "%s has %s; following end of new fi"
DCB "le",0
aSHasBecomeInac DCB "%s has become inaccessible",0
aW_1 DCB "w",0
aA_1 DCB "a",0
aIa DCB "ia",0
aArgumentExpect DCB "argument expected",0
aOutOfRange DCB "out of range",0
aBadNumber DCB "bad number",0
aClosingParenEx DCB "closing paren expected",0
unk_6A482 DCB 0xFF
DCB 0xFF
unk_6A484 DCB    1
DCB    0
DCB    2
DCB    0
DCB    3
DCB    0
DCB    4
DCB    0
DCB    5
DCB    0
DCB    6
DCB    0
DCB    7
DCB    0
DCB    8
DCB    0
DCB    9
DCB    0
DCB  0xE
DCB    0
DCB  0xF
DCB    0
DCB 0x10
DCB    0
DCB  0xC
DCB    0
DCB  0xD
DCB    0
DCB 0x16
DCB    0
DCB 0x17
DCB    0
DCB  0xB
DCB    0
DCB 0x14
DCB    0
DCB 0x15
DCB    0
DCB  0xB
DCB    0
DCB  0xA
DCB    0
DCB 0x18
DCB    1
DCB 0x18
DCB    1
DCB 0x19
DCB    1
DCB 0x1A
DCB    1
DCB 0x1B
DCB    1
DCB 0x1C
DCB    1
DCB 0x1D
DCB    1
DCB 0x1E
DCB    1
DCB 0x1F
DCB    1
DCB 0x20
DCB    1
DCB 0x21 ; !
DCB    1
DCB 0x11
DCB    1
DCB 0x12
DCB    1
DCB 0x13
DCB    1
DCB 0x22 ; "
DCB    2
DCB 0x23 ; #
DCB    3
DCB 0x24 ; $
DCB    3
DCB 0x25 ; %
DCB    4
DCB 0x26 ; &
DCB    4
; const char aR_5[3]
aR_5 DCB "-r",0
DCB 0x2D ; -
DCB 0x77 ; w
DCB    0
DCB 0x2D ; -
DCB 0x78 ; x
DCB    0
DCB 0x2D ; -
DCB 0x65 ; e
DCB    0
DCB 0x2D ; -
DCB 0x66 ; f
DCB    0
DCB 0x2D ; -
DCB 0x64 ; d
DCB    0
DCB 0x2D ; -
DCB 0x63 ; c
DCB    0
DCB 0x2D ; -
DCB 0x62 ; b
DCB    0
DCB 0x2D ; -
DCB 0x70 ; p
DCB    0
DCB 0x2D ; -
DCB 0x75 ; u
DCB    0
DCB 0x2D ; -
DCB 0x67 ; g
DCB    0
DCB 0x2D ; -
DCB 0x6B ; k
DCB    0
DCB 0x2D ; -
DCB 0x73 ; s
DCB    0
DCB 0x2D ; -
DCB 0x74 ; t
DCB    0
DCB 0x2D ; -
DCB 0x7A ; z
DCB    0
DCB 0x2D ; -
DCB 0x6E ; n
DCB    0
DCB 0x2D ; -
DCB 0x68 ; h
DCB    0
DCB 0x2D ; -
DCB 0x4F ; O
DCB    0
DCB 0x2D ; -
DCB 0x47 ; G
DCB    0
DCB 0x2D ; -
DCB 0x4C ; L
DCB    0
DCB 0x2D ; -
DCB 0x53 ; S
DCB    0
DCB 0x3D ; =
DCB    0
DCB 0x3D ; =
DCB 0x3D ; =
DCB    0
DCB 0x21 ; !
DCB 0x3D ; =
DCB    0
DCB 0x3C ; <
DCB    0
DCB 0x3E ; >
DCB    0
DCB 0x2D ; -
DCB 0x65 ; e
DCB 0x71 ; q
DCB    0
DCB 0x2D ; -
DCB 0x6E ; n
DCB 0x65 ; e
DCB    0
DCB 0x2D ; -
DCB 0x67 ; g
DCB 0x65 ; e
DCB    0
DCB 0x2D ; -
DCB 0x67 ; g
DCB 0x74 ; t
DCB    0
DCB 0x2D ; -
DCB 0x6C ; l
DCB 0x65 ; e
DCB    0
DCB 0x2D ; -
DCB 0x6C ; l
DCB 0x74 ; t
DCB    0
DCB 0x2D ; -
DCB 0x6E ; n
DCB 0x74 ; t
DCB    0
DCB 0x2D ; -
DCB 0x6F ; o
DCB 0x74 ; t
DCB    0
DCB 0x2D ; -
DCB 0x65 ; e
DCB 0x66 ; f
DCB    0
DCB 0x21 ; !
DCB    0
DCB 0x2D ; -
DCB 0x61 ; a
DCB    0
DCB 0x2D ; -
DCB 0x6F ; o
DCB    0
DCB 0x28 ; (
DCB    0
DCB 0x29 ; )
DCB    0
DCB    0
aMissing_1 DCB "missing ]",0
aMissing_2 DCB "missing ]]",0
aSUnknownOperan DCB "%s: unknown operand",0
aCfma DCB "cfma",0
aCcds DCB "^+Ccds",0
a1_5 DCB "-1",0
; const char aAlpha[]
aAlpha DCB "alpha:]",0
aAlnum DCB "alnum:]",0
aDigit DCB "digit:]",0
aLower DCB "lower:]",0
aUpper DCB "upper:]",0
aSpace DCB "space:]",0
aBlank DCB "blank:]",0
aPunct DCB "punct:]",0
aCntrl DCB "cntrl:]",0
aXdigit DCB "xdigit:]",0
ALIGN 2
aString2CannotB DCB "STRING2 cannot be empty",0
aCs DCB "^cs:",0
aS1 DCB "s:-1",0
aSOpen DCB "%s: open",0
aSTruncate DCB "%s: truncate",0
aAll DCB "all",0
DCB    0
DCB 0x61 ; a
DCB 0x6B ; k
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x2D ; -
DCB 0x6E ; n
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x73 ; s
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x6E ; n
DCB 0x6B ; k
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x2D ; -
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x72 ; r
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x72 ; r
DCB 0x6B ; k
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x2D ; -
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB 0x76 ; v
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x63 ; c
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x73 ; s
DCB 0x6F ; o
DCB 0x72 ; r
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x64 ; d
DCB 0x77 ; w
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x2D ; -
DCB 0x70 ; p
DCB 0x6C ; l
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x66 ; f
DCB 0x6F ; o
DCB 0x72 ; r
DCB 0x6D ; m
DCB    0
DCB    0
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x70 ; p
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x67 ; g
DCB 0x2D ; -
DCB 0x73 ; s
DCB 0x79 ; y
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x6D ; m
DCB    0
DCB    0
DCB 0x6F ; o
DCB    0
aSnrvmpioa DCB "snrvmpioa",0
; const char aGnuLinux[]
aGnuLinux DCB "GNU/Linux",0
asc_6A6AF DCB "^",0
a1_6 DCB "=1",0
aD_4 DCB "^d",0
a1_7 DCB "?1",0
a9u DCB " %9u",0
aLwmcl DCB "lwmcL",0
aAh DCB "^aH",0
a0_1 DCB "=0",0
; const char aUserTtyIdleTim[]
aUserTtyIdleTim DCB "USER",9,9,"TTY",9,9,"IDLE",9,"TIME"
DCB 9,9," HOST",0
aDev DCB "/dev/",0
; const char a02d02d[]
a02d02d DCB "%02d:%02d",0
; const char aOld[]
aOld DCB "old",0
a15S15S7s1616sS DCB "%-15.*s %-15.*s %-7s %-16.16s %.*s"
DCB 0xA,0
aM DCB "m:",0
aKsbqtmaNSUCXPO DCB "^KSbqtma:n:s:u:c:x:p:ovN:R:",0
aKSKSSKMPKXpunS DCB "K:S:K--S:S--K:m?p:K?xpun:S?xaq-v",0
; const char aProcUExe[]
aProcUExe DCB "/proc/%u/exe",0
; const char aProcUStat[]
aProcUStat DCB "/proc/%u/stat",0
; const char aProcU_0[]
aProcU_0 DCB "/proc/%u",0
aStop DCB "stop",0
ALIGN 2
aKstart DCB "Kstart",0
ALIGN 2
aSbackground DCB "Sbackground",0
DCB    0
DCB 0x62 ; b
DCB 0x71 ; q
DCB 0x75 ; u
DCB 0x69 ; i
DCB 0x65 ; e
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x71 ; q
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x6B ; k
DCB 0x65 ; e
DCB 0x2D ; -
DCB 0x70 ; p
DCB 0x69 ; i
DCB 0x64 ; d
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x6D ; m
DCB 0x6F ; o
DCB 0x6B ; k
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x64 ; d
DCB 0x6F ; o
DCB    0
DCB    0
DCB 0x6F ; o
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x62 ; b
DCB 0x6F ; o
DCB 0x73 ; s
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x76 ; v
DCB 0x6E ; n
DCB 0x69 ; i
DCB 0x63 ; c
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x6C ; l
DCB    0
DCB    1
DCB 0x4E ; N
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x74 ; t
DCB 0x61 ; a
DCB 0x73 ; s
DCB    0
DCB    1
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0x6E ; n
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x67 ; g
DCB 0x6E ; n
DCB 0x61 ; a
DCB 0x6C ; l
DCB    0
DCB    1
DCB 0x73 ; s
DCB 0x75 ; u
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x72 ; r
DCB    0
DCB    1
DCB 0x75 ; u
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x75 ; u
DCB 0x69 ; i
DCB 0x64 ; d
DCB    0
DCB    1
DCB 0x63 ; c
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x65 ; e
DCB 0x63 ; c
DCB    0
DCB    1
DCB 0x78 ; x
DCB 0x70 ; p
DCB 0x69 ; i
DCB 0x64 ; d
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x79 ; y
DCB    0
DCB    1
DCB 0x52 ; R
DCB    0
aOpenPidfileS DCB "open pidfile %s",0
aNothingInProcN DCB "nothing in /proc - not mounted?",0
aProcessInPidfi DCB "process in pidfile '%s'",0
aProcessEsOwned DCB "process(es) owned by '%s'",0
aInternalErrorP DCB "internal error, please report",0
; const char aNoSFoundNoneKi[]
aNoSFoundNoneKi DCB "no %s found; none killed",0xA,0
aWarningKilling DCB "warning: killing process %u",0
; const char aStoppedSPid[]
aStoppedSPid DCB "stopped %s (pid",0
; const char aSIsAlreadyRunn[]
aSIsAlreadyRunn DCB "%s is already running",0xA
DCB "%u",0xA,0
aA_0 DCB "^a",0
a1_8 DCB "-1",0
aDivisionByZero DCB "Division by zero",0
aInternalError DCB "Internal error",0
aInvalidFormatS DCB "Invalid format specifier",0
aAccessToNegati DCB "Access to negative field",0
aNotAnArray DCB "Not an array",0
aPossibleSyntax DCB "Possible syntax error",0
aTooFewArgument DCB "Too few arguments for builtin",0
aCallToUndefine DCB "Call to undefined function",0
aUnexpectedEndO_0 DCB "Unexpected end of string",0
aUnexpectedToke DCB "Unexpected token",0
aDevStdin DCB "/dev/stdin",0
aDevStdout DCB "/dev/stdout",0
aDevStderr DCB "/dev/stderr",0
aFVFEW DCB "+F:v:*f:*e:*W:",0
aWarningOptionW DCB "warning: option -W is ignored",0
aCmdLine DCB "cmd. line",0
aAwk DCB "awk",0
aXFormatsAreNot DCB "%*x formats are not supported",0
; const char aUUUUUUD[]
aUUUUUUD DCB "%u %u %u %u %u %u %d",0
aPopen_0 DCB "popen",0
aABDHMSZY DCB "%a %b %d %H:%M:%S %Z %Y",0
aRstart DCB "RSTART",0
aRlength DCB "RLENGTH",0
; const char aDiouxx[]
aDiouxx DCB "diouxX",0
; const char aEefgg[]
aEefgg DCB "eEfgG",0
aEmptySequence DCB "Empty sequence",0
aSIS DCB "%s:%i: %s",0
unk_6AAC2 DCB    1
DCB 0x28 ; (
DCB 0xFF
DCB    1
DCB 0x29 ; )
DCB 0xFF
DCB    1
DCB 0x2F ; /
DCB 0xFF
DCB    2
DCB 0x3E ; >
DCB 0x3E ; >
DCB    1
DCB 0x3E ; >
DCB    1
DCB 0x7C ; |
DCB 0xFF
DCB    2
DCB 0x2B ; +
DCB 0x2B ; +
DCB    2
DCB 0x2D ; -
DCB 0x2D ; -
DCB 0xFF
DCB    2
DCB 0x2B ; +
DCB 0x2B ; +
DCB    2
DCB 0x2D ; -
DCB 0x2D ; -
DCB    1
DCB 0x24 ; $
DCB 0xFF
DCB    2
DCB 0x3D ; =
DCB 0x3D ; =
DCB    1
DCB 0x3D ; =
DCB    2
DCB 0x2B ; +
DCB 0x3D ; =
DCB    2
DCB 0x2D ; -
DCB 0x3D ; =
DCB    2
DCB 0x2A ; *
DCB 0x3D ; =
DCB    2
DCB 0x2F ; /
DCB 0x3D ; =
DCB    2
DCB 0x25 ; %
DCB 0x3D ; =
DCB    2
DCB 0x5E ; ^
DCB 0x3D ; =
DCB    1
DCB 0x2B ; +
DCB    1
DCB 0x2D ; -
DCB    3
DCB 0x2A ; *
DCB 0x2A ; *
DCB 0x3D ; =
DCB    2
DCB 0x2A ; *
DCB 0x2A ; *
DCB    1
DCB 0x2F ; /
DCB    1
DCB 0x25 ; %
DCB    1
DCB 0x5E ; ^
DCB    1
DCB 0x2A ; *
DCB    2
DCB 0x21 ; !
DCB 0x3D ; =
DCB    2
DCB 0x3E ; >
DCB 0x3D ; =
DCB    2
DCB 0x3C ; <
DCB 0x3D ; =
DCB    1
DCB 0x3E ; >
DCB    1
DCB 0x3C ; <
DCB    2
DCB 0x21 ; !
DCB 0x7E ; ~
DCB    1
DCB 0x7E ; ~
DCB    2
DCB 0x26 ; &
DCB 0x26 ; &
DCB    2
DCB 0x7C ; |
DCB 0x7C ; |
DCB    1
DCB 0x3F ; ?
DCB    1
DCB 0x3A ; :
DCB 0xFF
DCB    2
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0xFF
DCB    1
DCB 0x2C ; ,
DCB 0xFF
DCB    1
DCB 0x7C ; |
DCB 0xFF
DCB    1
DCB 0x2B ; +
DCB    1
DCB 0x2D ; -
DCB    1
DCB 0x21 ; !
DCB 0xFF
DCB    1
DCB 0x5D ; ]
DCB 0xFF
DCB    1
DCB 0x7B ; {
DCB 0xFF
DCB    1
DCB 0x7D ; }
DCB 0xFF
DCB    1
DCB 0x3B ; ;
DCB 0xFF
DCB    1
DCB  0xA
DCB 0xFF
DCB    2
DCB 0x69 ; i
DCB 0x66 ; f
DCB    2
DCB 0x64 ; d
DCB 0x6F ; o
DCB    3
DCB 0x66 ; f
DCB 0x6F ; o
DCB 0x72 ; r
DCB    5
DCB 0x62 ; b
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x6B ; k
DCB    8
DCB 0x63 ; c
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x75 ; u
DCB 0x65 ; e
DCB    6
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x65 ; e
DCB    5
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x74 ; t
DCB    6
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x74 ; t
DCB 0x66 ; f
DCB    4
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x74 ; t
DCB    8
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x74 ; t
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB    6
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x75 ; u
DCB 0x72 ; r
DCB 0x6E ; n
DCB    4
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x69 ; i
DCB 0x74 ; t
DCB 0xFF
DCB    5
DCB 0x77 ; w
DCB 0x68 ; h
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0xFF
DCB    4
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0xFF
DCB    3
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB    5
DCB 0x63 ; c
DCB 0x6F ; o
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x6C ; l
DCB    6
DCB 0x6C ; l
DCB 0x73 ; s
DCB 0x68 ; h
DCB 0x69 ; i
DCB 0x66 ; f
DCB 0x74 ; t
DCB    2
DCB 0x6F ; o
DCB 0x72 ; r
DCB    6
DCB 0x72 ; r
DCB 0x73 ; s
DCB 0x68 ; h
DCB 0x69 ; i
DCB 0x66 ; f
DCB 0x74 ; t
DCB    3
DCB 0x78 ; x
DCB 0x6F ; o
DCB 0x72 ; r
DCB    5
DCB 0x63 ; c
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x73 ; s
DCB 0x65 ; e
DCB    6
DCB 0x73 ; s
DCB 0x79 ; y
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x6D ; m
DCB    6
DCB 0x66 ; f
DCB 0x66 ; f
DCB 0x6C ; l
DCB 0x75 ; u
DCB 0x73 ; s
DCB 0x68 ; h
DCB    5
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x32 ; 2
DCB    3
DCB 0x63 ; c
DCB 0x6F ; o
DCB 0x73 ; s
DCB    3
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x70 ; p
DCB    3
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x74 ; t
DCB    3
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x67 ; g
DCB    4
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB    3
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x6E ; n
DCB    4
DCB 0x73 ; s
DCB 0x71 ; q
DCB 0x72 ; r
DCB 0x74 ; t
DCB    5
DCB 0x73 ; s
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB    6
DCB 0x67 ; g
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x73 ; s
DCB 0x75 ; u
DCB 0x62 ; b
DCB    4
DCB 0x67 ; g
DCB 0x73 ; s
DCB 0x75 ; u
DCB 0x62 ; b
DCB    5
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x78 ; x
DCB    5
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x63 ; c
DCB 0x68 ; h
DCB    5
DCB 0x73 ; s
DCB 0x70 ; p
DCB 0x6C ; l
DCB 0x69 ; i
DCB 0x74 ; t
DCB    7
DCB 0x73 ; s
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x74 ; t
DCB 0x66 ; f
DCB    3
DCB 0x73 ; s
DCB 0x75 ; u
DCB 0x62 ; b
DCB    6
DCB 0x73 ; s
DCB 0x75 ; u
DCB 0x62 ; b
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB    7
DCB 0x73 ; s
DCB 0x79 ; y
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x6D ; m
DCB 0x65 ; e
DCB    8
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x66 ; f
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x6D ; m
DCB 0x65 ; e
DCB    6
DCB 0x6D ; m
DCB 0x6B ; k
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x6D ; m
DCB 0x65 ; e
DCB    7
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x77 ; w
DCB 0x65 ; e
DCB 0x72 ; r
DCB    7
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x70 ; p
DCB 0x70 ; p
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0xFF
DCB    6
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x67 ; g
DCB 0x74 ; t
DCB 0x68 ; h
DCB 0xFF
DCB    7
DCB 0x67 ; g
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x6C ; l
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0xFF
DCB    4
DCB 0x66 ; f
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x63 ; c
DCB    8
DCB 0x66 ; f
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x63 ; c
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0xFF
DCB    5
DCB 0x42 ; B
DCB 0x45 ; E
DCB 0x47 ; G
DCB 0x49 ; I
DCB 0x4E ; N
DCB 0xFF
DCB    3
DCB 0x45 ; E
DCB 0x4E ; N
DCB 0x44 ; D
DCB    0
aConvfmt DCB "CONVFMT",0
aOfmt DCB "OFMT",0
aFs DCB "FS",0
aOfs DCB "*OFS",0
aOrs DCB "ORS",0
aRs DCB "RS",0
aRt DCB "*RT",0
aFilename DCB "FILENAME",0
aSubsep DCB "SUBSEP",0
DCB 0x24,0
aArgind DCB "*ARGIND",0
aArgc DCB "ARGC",0
aArgv DCB "ARGV",0
aErrno DCB "ERRNO",0
aFnr DCB "FNR",0
aNr DCB "NR",0
aNf DCB "NF",0
aIgnorecase DCB "*IGNORECASE",0
aEnviron_0 DCB "*ENVIRON",0
DCB    0
DCB    0
a6g DCB "%.6g",0
a6g_0 DCB "%.6g",0
DCB " ",0
DCB " ",0
DCB 0xA,0
DCB 0xA,0
DCB    0
DCB    0
DCB 0x1C
DCB    0
DCB    0
DCB 0xFF
DCB    0
aAbdilNqrssTtuW DCB "^abdiL:*NqrsS:tTU:+wupBE",0
a2_8 DCB "=2",0
aCanTCompareStd DCB "can't compare stdin to a directory"
DCB 0
aNoSupportForDi DCB "no support for directory compariso"
DCB "n",0
; const char aS_15[]
aS_15 DCB "--- %s",0xA,0
; const char aS_16[]
aS_16 DCB "+++ %s",0xA,0
; const char aCD_0[]
aCD_0 DCB " %c%d",0
; const char aD_3[]
aD_3 DCB ",%d",0
; const char asc_6AD83[]
asc_6AD83 DCB " @@",0
; const char aFilesSAndSDiff[]
aFilesSAndSDiff DCB "Files %s and %s differ",0xA,0
aFilesSAndSAreI DCB "Files %s and %s are identical",0xA
DCB 0
aTmpDifxxxxxx DCB "/tmp/difXXXXXX",0
aNoNewlineAtEnd DCB 0xA
DCB "\ No newline at end of file",0
aHunkDFailedLdL DCB "Hunk %d FAILED %ld/%ld.",0xA,0
aReverse DCB "reverse",0
ALIGN 4
aRunified DCB "Runified",0
ALIGN 2
aUstrip DCB "ustrip",0
DCB    1
DCB 0x70 ; p
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x70 ; p
DCB 0x75 ; u
DCB 0x74 ; t
DCB    0
DCB    1
DCB 0x69 ; i
DCB 0x66 ; f
DCB 0x6F ; o
DCB 0x72 ; r
DCB 0x77 ; w
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x64 ; d
DCB    0
DCB    0
DCB 0x4E ; N
DCB 0x66 ; f
DCB 0x6F ; o
DCB 0x72 ; r
DCB 0x63 ; c
DCB 0x65 ; e
DCB    0
DCB    0
DCB 0x66 ; f
DCB 0x64 ; d
DCB 0x72 ; r
DCB 0x79 ; y
DCB 0x2D ; -
DCB 0x72 ; r
DCB 0x75 ; u
DCB 0x6E ; n
DCB    0
DCB    0
DCB 0xFD
DCB    0
aRupINefg DCB "Rup:i:NEfg",0
aPossiblyRevers DCB "Possibly reversed hunk %d at %ld",0xA
DCB 0
asc_6AE71 DCB "--- ",0
asc_6AE76 DCB "+++ ",0
asc_6AE7B DCB "@@ -",0
aReallyS DCB "Really? %s",0
aMissingFilenam DCB "MISSING_FILENAME",0
; const char aRemovingS[]
aRemovingS DCB "removing %s",0xA,0
; const char aPatchingFileS[]
aPatchingFileS DCB "patching file %s",0xA,0
; const char aCreatingS[]
aCreatingS DCB "creating %s",0xA,0
aSxxxxxx DCB "%sXXXXXX",0
asc_6AED1 DCB "+-",0
asc_6AED4 DCB "-+",0
aIReneF DCB "^i::rEne:*f:*",0
aNn DCB "nn",0
aSS_8 DCB "%s",0xA
DCB "%s",0
asc_6AEEE DCB 0xA
DCB 0xD,0
aNoAddressAfter DCB "no address after comma",0
aMissingCommand DCB "missing command",0
aBadOptionInSub DCB "bad option in substitution express"
DCB "ion",0
aCommandCUsesOn DCB "command '%c' uses only one address"
DCB 0
aUnsupportedCom DCB "unsupported command %c",0
aSaicrwBttyddgg DCB "saicrw:btTydDgGhHlnNpPqx={}",0
aNTR DCB 0xA
DCB "n",9,"t",0xD,"r",0
aNoPreviousRege DCB "no previous regexp",0
aUnmatchedC DCB "unmatched '%c'",0
aEmptyFilename DCB "empty filename",0
aBadFormatInSub DCB "bad format in substitution express"
DCB "ion",0
aUnterminated DCB "unterminated {",0
aCanTFindLabelF DCB "can't find label for jump to '%s'",0
aInPlace DCB "in-place",0
DCB    2
DCB 0x69 ; i
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x70 ; p
DCB 0x2D ; -
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x64 ; d
DCB    0
DCB    0
DCB 0x72 ; r
DCB 0x71 ; q
DCB 0x75 ; u
DCB 0x69 ; i
DCB 0x65 ; e
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x6E ; n
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x6E ; n
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x78 ; x
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    1
DCB 0x65 ; e
DCB 0x66 ; f
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB    0
DCB    1
DCB 0x66 ; f
DCB    0
; const char aVersion[]
aVersion DCB "--version",0
; const char aThisIsNotGnuSe[]
aThisIsNotGnuSe DCB "This is not GNU sed version 4.0",0
; const char asc_6B090[]
asc_6B090 DCB "; ",0xA
DCB 0xD,9,0xB,0
aHitReturnToCon DCB "[Hit return to continue]",0
aIr DCB "-IR-",0
aNewFile DCB " [New file]",0
; const char aShellReturnedI[]
aShellReturnedI DCB 0xA
DCB "shell returned %i",0xA
DCB 0xA,0
; const char aDelete[]
aDelete DCB "delete",0
aNoWriteSinceLa DCB "No write since last change (:%s! o"
DCB "verrides)",0
aSSDlDc DCB "'%s'%s %dL, %dC",0
aNoAddressAllow DCB "No address allowed on this command"
DCB 0
; const char aFeatures[]
aFeatures DCB "features",0
; const char aTheseFeaturesA[]
aTheseFeaturesA DCB "These features are available:",0xA
DCB 9,"Pattern searches with / and ?",0xA
DCB 9,"Some colon mode commands with :",0
asc_6B1A3 DCB 0x24,0xD,0
; const char aQuit[]
aQuit DCB "quit",0
; const char aNext[]
aNext DCB "next",0
; const char aPrev[]
aPrev DCB "prev",0
aDMoreFileSToEd DCB "%d more file(s) to edit",0
aNoMoreFilesToE DCB "No more files to edit",0
aNoPreviousFile DCB "No previous files to edit",0
aNoFilenameGive DCB "No filename given",0
aSDlDc DCB "'%s' %dL, %dC",0
; const char aRewind[]
aRewind DCB "rewind",0
; const char aWq[]
aWq DCB "wq",0
aSExpressionMis DCB ":s expression missing delimiters",0
aSearchHitBotto DCB "search hit BOTTOM, continuing at T"
DCB "OP",0
aSearchHitTopCo DCB "search hit TOP, continuing at BOTT"
DCB "OM",0
aPatternNotFoun DCB "Pattern not found",0
aAlreadyAtOldes DCB "Already at oldest change",0
aRestored DCB "restored",0
aUndoDSDCharsAt DCB "Undo [%d] %s %d chars at position "
DCB "%d",0
aDeleted_0 DCB "deleted",0
; const char asc_6B2F3[]
asc_6B2F3 DCB "()[]{}",0
aWriteErrorM DCB "Write error: %m",0
; const char aWw[]
aWw DCB "wW",0
; const char a0bbeeftLh[14]
a0bbeeftLh DCB "^0bBeEft%",0x24," lh",8
DCB 0x7F ; 
DCB    0
; const char aCdykjhl[]
aCdykjhl DCB "cdykjHL+-{}",0xD,0xA,0
; const char aChange[]
aChange DCB "Change",0
; const char aDelete_0[]
aDelete_0 DCB "Delete",0
aSM DCB "'%s' %m",0
aSIsNotARegular DCB "'%s' is not a regular file",0
aNoCurrentFilen DCB "No current filename",0
; const char aCdy[]
aCdy DCB "cdy><",0
; const char a0bbeefth[12]
a0bbeefth DCB "^%",0x24,"0bBeEfth",8
DCB 0x7F ; 
DCB    0
; const char aHK[]
aHK DCB "H-k{",0
; const char aLJ[]
aLJ DCB "L+j}",0xD,0xA,0
; const char a0bbh[6]
a0bbh DCB "^0bBh",8
DCB 0x7F ; 
DCB    0
; const char aDN[]
aDN DCB "%d%n",0
asc_6B39D DCB 7,0
aNull DCB "(NULL)",0
aSIsNotImplemen DCB "'%s' is not implemented",0
aCanTReadUserIn DCB "can't read user input",0
aNoFile DCB "No file",0
aModified DCB " [Modified]",0
; const char aCSSDDD[]
aCSSDDD DCB "%c %s%s %d/%d %d%%",0
asc_6B3FB DCB "!",0x22,"#",0x24,"%&'()*+,-./:;<=>"
DCB "?@[\]^_`{|}~",0
; const char a7m[]
a7m DCB 0x1B,"[7m",0
; const char aExinit[]
aExinit DCB "EXINIT",0
; const char aHcrhc[]
aHcrhc DCB "hCRHc:",0
a1049h DCB 0x1B,"[?1049h",0
a1049l DCB 0x1B,"[?1049l",0
aHlp DCB "+HLP",0
aExec DCB "-exec",0
aOnlyOneAllowed DCB "only one '{}' allowed for -exec +",0
aType_0 DCB "-type",0
aUnrecognizedS DCB "unrecognized: %s",0
; const char aFollow[]
aFollow DCB "-follow",0
aDepth DCB "-depth",0
aA_2 DCB "-a",0
aO_0 DCB "-o",0
DCB "!",0
aPrint DCB "-print",0
aExec_1 DCB "-exec",0
aName_1 DCB "-name",0
aIname DCB "-iname",0
aPath DCB "-path",0
aIpath DCB "-ipath",0
aType_2 DCB "-type",0
aInum DCB "-inum",0
aSize_1 DCB "-size",0
ALIGN 2
aLnqvscfihheFLo DCB "^lnqvscFiHhe:*f:*Lorm:+wxA:+B:+C:+"
DCB "EaI",0
aHHCAb DCB "H-h:C-AB",0
; const char aS_8[4]
aS_8 DCB "%s:",0
aStandardInput_0 DCB "(standard input)",0
; const char aIC[]
aIC DCB "%i%c",0
aNoRunIfEmpty DCB "no-run-if-empty",0
ALIGN 0x10
aR_4 DCB "r",0
; const char aSingle[]
aSingle DCB "single",0
aDouble DCB "double",0
aUnmatchedSQuot DCB "unmatched %s quote",0
aSTerminatedByS DCB "'%s' terminated by signal %d",0
aSExitedWithSta DCB "%s: exited with status 255; aborti"
DCB "ng",0
aTrnSEEX0iIPA DCB "+trn:s:e::E:x0I:i::P:+a:",0
aCanTFitSingleA DCB "can't fit single argument within a"
DCB "rgument list size limit",0
aArgumentLineTo DCB "argument line too long",0
aHpr DCB "hpr",0
aDNfwi DCB "d:+nfwi",0
aLinuxrc DCB "linuxrc",0
aProcMeminfo DCB "/proc/meminfo",0
; const char aSysinit[]
aSysinit DCB "sysinit",0
aWait_0 DCB "wait",0
aOnce DCB "once",0
aRespawn DCB "respawn",0
aAskfirst DCB "askfirst",0
aCtrlaltdel DCB "ctrlaltdel",0
aShutdown DCB "shutdown",0
aRestart DCB "restart",0
DCB    0
aHalt DCB "halt",0
aPoweroff DCB "poweroff",0
aReloadingEtcIn DCB "reloading /etc/inittab",0
aRequestingSyst DCB "Requesting system %s",0
aBinSh_0 DCB "-/bin/sh",0
; const char asc_6B6A4[]
asc_6B6A4 DCB "~`!",0x24,"^&*()=|\{}[];",0x22,"'<"
DCB ">?",0
; const char aExecS[]
aExecS DCB "exec %s",0
aCanTRunSM DCB "can't run '%s': %m",0
; const char aQ[]
aQ DCB "-q",0
aMustBeRunAsPid DCB "must be run as PID 1",0
; const char aConsole[]
aConsole DCB "CONSOLE",0
; const char aTermVt102[]
aTermVt102 DCB "TERM=vt102",0
aTermLinux DCB "TERM=linux",0
; const char aHome_0[]
aHome_0 DCB "HOME=/",0
; const char aShellBinSh[]
aShellBinSh DCB "SHELL=/bin/sh",0
; const char aUserRoot[]
aUserRoot DCB "USER=root",0
aRunlevel DCB "RUNLEVEL",0
aProcessSPidDEx DCB "process '%s' (pid %d) exited. Sche"
DCB "duling for restart.",0
aCanTOpenSM_0 DCB "can't open %s: %m",0
; const char aEtcInitDRcs[]
aEtcInitDRcs DCB "/etc/init.d/rcS",0
aDevTty2 DCB "/dev/tty2",0
aDevTty3 DCB "/dev/tty3",0
aDevTty4 DCB "/dev/tty4",0
; const char aReboot_0[]
aReboot_0 DCB "reboot",0
; const char aUmountAR[]
aUmountAR DCB "umount -a -r",0
; const char aSwapoffA[]
aSwapoffA DCB "swapoff -a",0
; const char aInit[]
aInit DCB "init",0
aBadInittabEntr DCB "Bad inittab entry at line %d",0
asc_6B7EB DCB "#:",0
aPleasePressEnt DCB 0xA
DCB "Please press Enter to activate thi"
DCB "s console. ",0
aCanTFork DCB "can't fork",0
aStartingPidUTt DCB "starting pid %u, tty '%s': '%s'",0
aTheSystemIsGoi DCB "The system is going down NOW!",0
aSentSigSToAllP DCB "Sent SIG%s to all processes",0
aKill_1 DCB "KILL",0
aGetgroups_0 DCB "getgroups",0
aUnknownGroupS DCB "unknown group %s",0
aUnknownUserS DCB "unknown user %s",0
aUnknownUidU DCB "unknown uid %u",0
; const char aCapU[]
aCapU DCB "cap_%u",0
aUnknownCapabil DCB "unknown capability '%s'",0
aCapget_0 DCB "capget",0
aUnsupportedCap DCB "unsupported capability version",0
aChown DCB "chown",0
aDacOverride DCB "dac_override",0
aDacReadSearch DCB "dac_read_search",0
aFowner DCB "fowner",0
aFsetid DCB "fsetid",0
aSetpcap DCB "setpcap",0
aLinuxImmutable DCB "linux_immutable",0
aNetBindService DCB "net_bind_service",0
aNetBroadcast DCB "net_broadcast",0
aNetAdmin DCB "net_admin",0
aNetRaw DCB "net_raw",0
aIpcLock DCB "ipc_lock",0
aIpcOwner DCB "ipc_owner",0
aSysModule DCB "sys_module",0
aSysRawio DCB "sys_rawio",0
aSysChroot DCB "sys_chroot",0
aSysPtrace DCB "sys_ptrace",0
aSysPacct DCB "sys_pacct",0
aSysAdmin DCB "sys_admin",0
aSysBoot DCB "sys_boot",0
aSysNice DCB "sys_nice",0
aSysResource DCB "sys_resource",0
aSysTime DCB "sys_time",0
aSysTtyConfig DCB "sys_tty_config",0
aMknod DCB "mknod",0
aAuditWrite DCB "audit_write",0
aAuditControl DCB "audit_control",0
aSetfcap DCB "setfcap",0
aMacOverride DCB "mac_override",0
aMacAdmin DCB "mac_admin",0
aWakeAlarm DCB "wake_alarm",0
aBlockSuspend DCB "block_suspend",0
aAuditRead DCB "audit_read",0
; unsigned __int8 byte_6BA6C[3]
byte_6BA6C DCB 2, 2, 1
aCanTSetGroups DCB "can't set groups",0
; const char aSOverwriteS[]
aSOverwriteS DCB "%s: overwrite '%s'? ",0
aCanTCreateS DCB "can't create '%s'",0
aSAndSAreTheSam DCB "'%s' and '%s' are the same file",0
aRecursionDetec DCB "recursion detected, omitting direc"
DCB "tory '%s'",0
aTargetSIsNotAD DCB "target '%s' is not a directory",0
aCanTCreateDire DCB "can't create directory '%s'",0
aPermissions DCB "permissions",0
aCanTPreserveSO DCB "can't preserve %s of '%s'",0
aCanTCreateLink DCB "can't create link '%s'",0
aErrorWritingTo DCB "error writing to '%s'",0
aOwnership DCB "ownership",0
aUnrecognizedFi_0 DCB "unrecognized file '%s' with mode %"
DCB "x",0
aPassword DCB "Password: ",0
aAa DCB "aa",0
; const char aShell[]
aShell DCB "SHELL",0
aNoOptC DCB "NO OPT %c!",0
DCB    1
DCB    6
DCB  0xB
DCB    0
unk_6BBD2 DCB    5
DCB  0xA
DCB  0xF
DCB    4
DCB    9
DCB  0xE
DCB    3
DCB    8
DCB  0xD
DCB    2
DCB    7
DCB  0xC
DCB    5
DCB    8
DCB  0xB
DCB  0xE
unk_6BBE2 DCB    1
DCB    4
DCB    7
DCB  0xA
DCB  0xD
DCB    0
DCB    3
DCB    6
DCB    9
DCB  0xC
DCB  0xF
DCB    2
DCB    0
DCB    7
DCB  0xE
DCB    5
unk_6BBF2 DCB  0xC
DCB    3
DCB  0xA
DCB    1
DCB    8
DCB  0xF
DCB    6
DCB  0xD
DCB    4
DCB  0xB
DCB    2
DCB    9
aLluC DCB "%llu%*c",0
aLluUC DCB "%llu.%u%c",0
a123456789 DCB " 123456789",0
unk_6BC1B DCB    0
DCB 0x4B ; K
DCB 0x4D ; M
DCB 0x47 ; G
DCB 0x54 ; T
DCB 0x50 ; P
DCB 0x45 ; E
DCB 0x5A ; Z
DCB 0x59 ; Y
; const char aUd[]
aUd DCB 0x1B,"[%uD",0
; const char aUa[]
aUa DCB 0xD,0x1B,"[%uA",0
aUc DCB 0x1B,"[%uC",0
; const char aSS_4[]
aSS_4 DCB "%s%-*s",0
unk_6BC3E DCB    0
asc_6BC3F DCB " `",0x22,"#",0x24,"%^&*()=+{}[]:;'"
DCB "|\<>",0
; const char aHJ[]
aHJ DCB 0x1B,"[H",0x1B,"[J",0
aReverseISearch DCB "(reverse-i-search)'%s': ",0
aSUNew DCB "%s.%u.new",0
a4dS DCB "%4d %s",0xA,0
aADBY DCB "%A, %d %B %Y",0
; const char aEnv[]
aEnv DCB "ENV",0
aBashEnv DCB "BASH_ENV",0
aHome_1 DCB "HOME",0
aIfs_0 DCB "IFS",0
aShell_0 DCB "SHELL",0
aLdLibraryPath DCB "LD_LIBRARY_PATH",0
aLdPreload DCB "LD_PRELOAD",0
aLdTraceLoadedO DCB "LD_TRACE_LOADED_OBJECTS",0
aLdBindNow DCB "LD_BIND_NOW",0
aLdAoutLibraryP DCB "LD_AOUT_LIBRARY_PATH",0
aLdAoutPreload DCB "LD_AOUT_PRELOAD",0
aLdNowarn DCB "LD_NOWARN",0
aLdKeepdir DCB "LD_KEEPDIR",0
DCB    0
aLogin_0 DCB " login: ",0
; const char aDevLoopU[]
aDevLoopU DCB "/dev/loop%u",0
aSetPermissions DCB "set permissions of",0
aCreate DCB "create",0
; const char aCreatedDirecto[]
aCreatedDirecto DCB "created directory: '%s'",0xA,0
aCanTSDirectory DCB "can't %s directory '%s'",0
aRwxststPcDBLSS DCB "rwxSTst?pc?d?b?-?l?s???similar to "
DCB "old password",0
aTooWeak DCB "too weak",0
aTooManySimilar DCB "too many similar characters",0
aSimilarToHostn DCB "similar to hostname",0
aSimilarToGecos DCB "similar to gecos",0
aSimilarToUsern DCB "similar to username",0
aTooShort DCB "too short",0
; const char aBadPasswordS[]
aBadPasswordS DCB "Bad password: %s",0xA,0
aBadLineUDToken DCB "bad line %u: %d tokens found, %d n"
DCB "eeded",0
aRwxxst DCB "rwxXst",0
aAugo DCB "augo",0
aUSS DCB "%*u%s%s",0xA,0
aM_0 DCB "M-",0
aAbefnrtv DCB "abefnrtv\",0
DCB    7
DCB    8
DCB 0x1B
DCB  0xC
DCB  0xA
DCB  0xD
DCB    9
DCB  0xB
DCB 0x5C ; \
DCB 0x5C ; \
; const char aProcU[]
aProcU DCB "/proc/%u/",0
; const char aCUUUDSSSSSSLuL[]
aCUUUDSSSSSSLuL DCB "%c %u %u %u %d %*s %*s %*s %*s %*s"
DCB " %*s %lu %lu %*s %*s %*s %ld %*s %"
DCB "*s %lu %lu %lu ",0
; const char aProcUCmdline[]
aProcUCmdline DCB "/proc/%u/cmdline",0
; const char aS_5[]
aS_5 DCB "{%s}",0
; const char aS_6[]
aS_6 DCB "[%s]",0
; _BYTE byte_6BF03[64]
byte_6BF03 DCB 0x3A, 0x32, 0x2A, 0x22, 0x1A, 0x12, 0xA
DCB 2, 0x3C, 0x34, 0x2C, 0x24, 0x1C, 0x14
DCB 0xC, 4, 0x3E, 0x36, 0x2E, 0x26, 0x1E
DCB 0x16, 0xE, 6, 0x40, 0x38, 0x30, 0x28
DCB 0x20, 0x18, 0x10, 8, 0x39, 0x31, 0x29
DCB 0x21, 0x19, 0x11, 9, 1, 0x3B, 0x33, 0x2B
DCB 0x23, 0x1B, 0x13, 0xB, 3, 0x3D, 0x35
DCB 0x2D, 0x25, 0x1D, 0x15, 0xD, 5, 0x3F
DCB 0x37, 0x2F, 0x27, 0x1F, 0x17, 0xF, 7
; unsigned __int8 byte_6BF43[8]
byte_6BF43 DCB 0x80, 0x40, 0x20, 0x10, 8, 4, 2, 1
; unsigned __int8 byte_6BF4B[48]
byte_6BF4B DCB 0xE, 0x11, 0xB, 0x18, 1, 5, 3, 0x1C
DCB 0xF, 6, 0x15, 0xA, 0x17, 0x13, 0xC, 4
DCB 0x1A, 8, 0x10, 7, 0x1B, 0x14, 0xD, 2
DCB 0x29, 0x34, 0x1F, 0x25, 0x2F, 0x37, 0x1E
DCB 0x28, 0x33, 0x2D, 0x21, 0x30, 0x2C, 0x31
DCB 0x27, 0x38, 0x22, 0x35, 0x2E, 0x2A, 0x32
DCB 0x24, 0x1D, 0x20
; unsigned __int8 byte_6BF7B[55]
byte_6BF7B DCB 0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 9
DCB 1, 0x3A, 0x32, 0x2A, 0x22, 0x1A, 0x12
DCB 0xA, 2, 0x3B, 0x33, 0x2B, 0x23, 0x1B
DCB 0x13, 0xB, 3, 0x3C, 0x34, 0x2C, 0x24
DCB 0x3F, 0x37, 0x2F, 0x27, 0x1F, 0x17, 0xF
DCB 7, 0x3E, 0x36, 0x2E, 0x26, 0x1E, 0x16
DCB 0xE, 6, 0x3D, 0x35, 0x2D, 0x25, 0x1D
DCB 0x15, 0xD, 5, 0x1C, 0x14, 0xC
unk_6BFB2 DCB    4
DCB    1
DCB    1
DCB    2
DCB    2
DCB    2
DCB    2
DCB    2
DCB    2
DCB    1
DCB    2
DCB    2
DCB    2
DCB    2
DCB    2
DCB    2
DCB    1
; unsigned __int8 byte_6BFC3[32]
byte_6BFC3 DCB 0x10, 7, 0x14, 0x15, 0x1D, 0xC, 0x1C
DCB 0x11, 1, 0xF, 0x17, 0x1A, 5, 0x12, 0x1F
DCB 0xA, 2, 8, 0x18, 0xE, 0x20, 0x1B, 3
DCB 9, 0x13, 0xD, 0x1E, 6, 0x16, 0xB, 4
DCB 0x19
; const char aRoundsU[]
aRoundsU DCB "rounds=%u",0x24,0
unk_6BFEE DCB  0xE
DCB 0xF4
DCB 0x7D ; }
DCB 0x41 ; A
DCB 0xE2
DCB 0x2F ; /
DCB 0xDB
DCB 0x18
DCB 0xA3
DCB 0x6A ; j
DCB 0xC6
DCB 0xBC
DCB 0x95
DCB 0x59 ; Y
DCB 0x30 ; 0
DCB 0x87
DCB 0xF4
DCB 0xC1
DCB 0x8E
DCB 0x28 ; (
DCB 0x4D ; M
DCB 0x96
DCB 0x12
DCB 0x7B ; {
DCB 0x5F ; _
DCB 0xBC
DCB 0x39 ; 9
DCB 0xE7
DCB 0xA3
DCB  0xA
DCB 0x65 ; e
DCB 0xD0
DCB 0x3F ; ?
DCB 0xD1
DCB 0x48 ; H
DCB 0x7E ; ~
DCB 0xF6
DCB 0x2B ; +
DCB 0x83
DCB 0xE4
DCB 0xC9
DCB    7
DCB 0x12
DCB 0xAD
DCB 0x6C ; l
DCB 0x90
DCB 0xB5
DCB 0x5A ; Z
DCB 0xD0
DCB 0x8E
DCB 0xA7
DCB 0x1B
DCB 0x3A ; :
DCB 0xF4
DCB 0x4D ; M
DCB 0x21 ; !
DCB 0xB5
DCB 0x68 ; h
DCB 0x7C ; |
DCB 0xC6
DCB    9
DCB 0x53 ; S
DCB 0xE2
DCB 0x9F
DCB 0xDA
DCB 0x70 ; p
DCB    9
DCB 0x9E
DCB 0x36 ; 6
DCB 0x43 ; C
DCB 0x6F ; o
DCB 0xA5
DCB 0x21 ; !
DCB 0x8D
DCB 0x5C ; \
DCB 0xE7
DCB 0xCB
DCB 0xB4
DCB 0xF2
DCB 0x18
DCB 0x1D
DCB 0xA6
DCB 0xD4
DCB    9
DCB 0x68 ; h
DCB 0x9F
DCB 0x83
DCB 0x70 ; p
DCB 0x4B ; K
DCB 0xF1
DCB 0xE2
DCB 0x3C ; <
DCB 0xB5
DCB 0x5A ; Z
DCB 0x2E ; .
DCB 0xC7
DCB 0xD7
DCB 0x8D
DCB 0xBE
DCB 0x53 ; S
DCB 0x60 ; `
DCB 0xF6
DCB    9
DCB 0x3A ; :
DCB 0x41 ; A
DCB 0x72 ; r
DCB 0x28 ; (
DCB 0xC5
DCB 0x1B
DCB 0xAC
DCB 0xE4
DCB 0x9F
DCB 0x3A ; :
DCB 0xF6
DCB    9
DCB 0x60 ; `
DCB 0xAC
DCB 0x1B
DCB 0xD7
DCB 0x8D
DCB 0x9F
DCB 0x41 ; A
DCB 0x53 ; S
DCB 0xBE
DCB 0xC5
DCB 0x72 ; r
DCB 0x28 ; (
DCB 0xE4
DCB 0xE2
DCB 0xBC
DCB 0x24 ; $
DCB 0xC1
DCB 0x47 ; G
DCB 0x7A ; z
DCB 0xDB
DCB 0x16
DCB 0x58 ; X
DCB    5
DCB 0xF3
DCB 0xAF
DCB 0x3D ; =
DCB 0x90
DCB 0x8E
DCB 0x69 ; i
DCB 0xB4
DCB 0x82
DCB 0xC1
DCB 0x7B ; {
DCB 0x1A
DCB 0xED
DCB 0x27 ; '
DCB 0xD8
DCB 0x6F ; o
DCB 0xF9
DCB  0xC
DCB 0x95
DCB 0xA6
DCB 0x43 ; C
DCB 0x50 ; P
DCB 0x3E ; >
DCB 0xAC
DCB 0xF1
DCB 0x4A ; J
DCB 0x2F ; /
DCB 0x79 ; y
DCB 0xC2
DCB 0x96
DCB 0x58 ; X
DCB 0x60 ; `
DCB 0x1D
DCB 0xD3
DCB 0xE4
DCB  0xE
DCB 0xB7
DCB 0x35 ; 5
DCB 0x8B
DCB 0x49 ; I
DCB 0x3E ; >
DCB 0x2F ; /
DCB 0xC5
DCB 0x92
DCB 0x58 ; X
DCB 0xFC
DCB 0xA3
DCB 0xB7
DCB 0xE0
DCB 0x14
DCB 0x7A ; z
DCB 0x61 ; a
DCB  0xD
DCB 0x8B
DCB 0xD6
DCB 0xD4
DCB  0xB
DCB 0xB2
DCB 0x7E ; ~
DCB 0x4F ; O
DCB 0x90
DCB 0x18
DCB 0xAD
DCB 0xE3
DCB 0x3C ; <
DCB 0x59 ; Y
DCB 0xC7
DCB 0x25 ; %
DCB 0xFA
DCB 0x86
DCB 0x61 ; a
DCB 0x61 ; a
DCB 0xB4
DCB 0xDB
DCB 0x8D
DCB 0x1C
DCB 0x43 ; C
DCB 0xA7
DCB 0x7E ; ~
DCB 0x9A
DCB 0x5F ; _
DCB    6
DCB 0xF8
DCB 0xE0
DCB 0x25 ; %
DCB 0x39 ; 9
DCB 0xC2
DCB 0x1D
DCB 0xF2
DCB 0xD8
DCB 0x84
DCB 0xA6
DCB 0x3F ; ?
DCB 0x7B ; {
DCB 0x41 ; A
DCB 0xCA
DCB 0x59 ; Y
DCB 0x63 ; c
DCB 0xBE
DCB    5
DCB 0xE0
DCB 0x9C
DCB 0x27 ; '
DCB 0x27 ; '
DCB 0x1B
DCB 0xE4
DCB 0x71 ; q
DCB 0x49 ; I
DCB 0xAC
DCB 0x8E
DCB 0xD2
DCB 0xF0
DCB 0xC6
DCB 0x9A
DCB  0xD
DCB 0x3F ; ?
DCB 0x53 ; S
DCB 0x65 ; e
DCB 0xB8
unk_6C0EE DCB 0xFF
DCB 0xD4
DCB 0x88
DCB 0xD4
DCB 0xE4
DCB 0xD3
DCB 0xE6
DCB 0xDC
DCB 0xE2
DCB 0xDB
DCB 0x4F ; O
DCB 0xC1
DCB 0xFE
DCB 0x4F ; O
DCB 0xC2
DCB 0xFD
DCB 0x4F ; O
DCB 0xC3
DCB 0xFC
DCB 0x4F ; O
DCB 0xC4
DCB 0xFB
DCB 0x4F ; O
DCB 0xC8
DCB 0xFA
DCB 0x4F ; O
DCB 0xC6
DCB 0xF9
DCB 0x5B ; [
DCB 0xC1
DCB 0xFE
DCB 0x5B ; [
DCB 0xC2
DCB 0xFD
DCB 0x5B ; [
DCB 0xC3
DCB 0xFC
DCB 0x5B ; [
DCB 0xC4
DCB 0xFB
DCB 0x5B ; [
DCB 0xC8
DCB 0xFA
DCB 0x5B ; [
DCB 0xC6
DCB 0xF9
DCB 0x5B ; [
DCB 0x31 ; 1
DCB 0xFE
DCB 0xFA
DCB 0x5B ; [
DCB 0x32 ; 2
DCB 0xFE
DCB 0xF8
DCB 0x5B ; [
DCB 0x33 ; 3
DCB 0xFE
DCB 0xF7
DCB 0x5B ; [
DCB 0x34 ; 4
DCB 0xFE
DCB 0xF9
DCB 0x5B ; [
DCB 0x35 ; 5
DCB 0xFE
DCB 0xF6
DCB 0x5B ; [
DCB 0x36 ; 6
DCB 0xFE
DCB 0xF5
DCB 0x5B ; [
DCB 0x37 ; 7
DCB 0xFE
DCB 0xFA
DCB 0x5B ; [
DCB 0x38 ; 8
DCB 0xFE
DCB 0xF9
DCB 0x5B ; [
DCB 0x31 ; 1
DCB 0x3B ; ;
DCB 0x35 ; 5
DCB 0xC3
DCB 0xBC
DCB 0x5B ; [
DCB 0x31 ; 1
DCB 0x3B ; ;
DCB 0x35 ; 5
DCB 0xC4
DCB 0xBB
DCB 0x5B ; [
DCB 0x31 ; 1
DCB 0x3B ; ;
DCB 0x33 ; 3
DCB 0xC3
DCB 0xDC
DCB 0x5B ; [
DCB 0x31 ; 1
DCB 0x3B ; ;
DCB 0x33 ; 3
DCB 0xC4
DCB 0xDB
DCB    0
; const char aSDescendIntoDi[]
aSDescendIntoDi DCB "%s: descend into directory '%s'? ",0
aCanTCloseS DCB "can't close '%s'",0
; const char aSRemoveDirecto[]
aSRemoveDirecto DCB "%s: remove directory '%s'? ",0
; const char aRemovedDirecto[]
aRemovedDirecto DCB "removed directory: '%s'",0xA,0
; const char aSRemoveS[]
aSRemoveS DCB "%s: remove '%s'? ",0
; const char aRemovedS[]
aRemovedS DCB "removed '%s'",0xA,0
aEtcSecuretty DCB "/etc/securetty",0
aUser DCB "USER",0
aLogname DCB "LOGNAME",0
; const char aSig[]
aSig DCB "SIG",0
; const char aRtmin[]
aRtmin DCB "RTMIN",0
; const char aRtmax[]
aRtmax DCB "RTMAX",0
; const char a2uS[]
a2uS DCB "%2u) %s",0xA,0
; char aExit_0[231]
aExit_0 DCB "EXIT",0
DCB    0
DCB    0
DCB 0x48 ; H
DCB 0x55 ; U
DCB 0x50 ; P
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x49 ; I
DCB 0x4E ; N
DCB 0x54 ; T
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x51 ; Q
DCB 0x55 ; U
DCB 0x49 ; I
DCB 0x54 ; T
DCB    0
DCB    0
DCB    0
DCB 0x49 ; I
DCB 0x4C ; L
DCB 0x4C ; L
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0x52 ; R
DCB 0x41 ; A
DCB 0x50 ; P
DCB    0
DCB    0
DCB    0
DCB 0x41 ; A
DCB 0x42 ; B
DCB 0x52 ; R
DCB 0x54 ; T
DCB    0
DCB    0
DCB    0
DCB 0x42 ; B
DCB 0x55 ; U
DCB 0x53 ; S
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x46 ; F
DCB 0x50 ; P
DCB 0x45 ; E
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4B ; K
DCB 0x49 ; I
DCB 0x4C ; L
DCB 0x4C ; L
DCB    0
DCB    0
DCB    0
DCB 0x55 ; U
DCB 0x53 ; S
DCB 0x52 ; R
DCB 0x31 ; 1
DCB    0
DCB    0
DCB    0
DCB 0x53 ; S
DCB 0x45 ; E
DCB 0x47 ; G
DCB 0x56 ; V
DCB    0
DCB    0
DCB    0
DCB 0x55 ; U
DCB 0x53 ; S
DCB 0x52 ; R
DCB 0x32 ; 2
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x49 ; I
DCB 0x50 ; P
DCB 0x45 ; E
DCB    0
DCB    0
DCB    0
DCB 0x41 ; A
DCB 0x4C ; L
DCB 0x52 ; R
DCB 0x4D ; M
DCB    0
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0x45 ; E
DCB 0x52 ; R
DCB 0x4D ; M
DCB    0
DCB    0
DCB    0
DCB 0x53 ; S
DCB 0x54 ; T
DCB 0x4B ; K
DCB 0x46 ; F
DCB 0x4C ; L
DCB 0x54 ; T
DCB    0
DCB 0x43 ; C
DCB 0x48 ; H
DCB 0x4C ; L
DCB 0x44 ; D
DCB    0
DCB    0
DCB    0
DCB 0x43 ; C
DCB 0x4F ; O
DCB 0x4E ; N
DCB 0x54 ; T
DCB    0
DCB    0
DCB    0
DCB 0x53 ; S
DCB 0x54 ; T
DCB 0x4F ; O
DCB 0x50 ; P
DCB    0
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0x53 ; S
DCB 0x54 ; T
DCB 0x50 ; P
DCB    0
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0x54 ; T
DCB 0x49 ; I
DCB 0x4E ; N
DCB    0
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0x54 ; T
DCB 0x4F ; O
DCB 0x55 ; U
DCB    0
DCB    0
DCB    0
DCB 0x55 ; U
DCB 0x52 ; R
DCB 0x47 ; G
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x58 ; X
DCB 0x43 ; C
DCB 0x50 ; P
DCB 0x55 ; U
DCB    0
DCB    0
DCB    0
DCB 0x58 ; X
DCB 0x46 ; F
DCB 0x53 ; S
DCB 0x5A ; Z
DCB    0
DCB    0
DCB    0
DCB 0x56 ; V
DCB 0x54 ; T
DCB 0x41 ; A
DCB 0x4C ; L
DCB 0x52 ; R
DCB 0x4D ; M
DCB    0
DCB 0x50 ; P
DCB 0x52 ; R
DCB 0x4F ; O
DCB 0x46 ; F
DCB    0
DCB    0
DCB    0
DCB 0x57 ; W
DCB 0x49 ; I
DCB 0x4E ; N
DCB 0x43 ; C
DCB 0x48 ; H
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x4F ; O
DCB 0x4C ; L
DCB 0x4C ; L
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x57 ; W
DCB 0x52 ; R
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x53 ; S
DCB 0x59 ; Y
DCB 0x53 ; S
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x52 ; R
DCB 0x54 ; T
DCB 0x4D ; M
DCB 0x49 ; I
DCB 0x4E ; N
DCB    0
DCB    0
; const char aS_17[]
aS_17 DCB "%s+",0
unk_6C2FD DCB 0x72 ; r
DCB 0x2B ; +
DCB    0
aWarningCanTCre DCB "warning: can't create backup copy "
DCB "'%s'",0
aWarningCanTLoc DCB "warning: can't lock '%s'",0
; const char aSSUS[]
aSSUS DCB "%s%s:%u%s",0xA,0
; const char aSSS_2[]
aSSS_2 DCB "%s%s%s",0xA,0
; const char aVarRunUtmp[]
aVarRunUtmp DCB "/var/run/utmp",0
; const char aAbcdefghijklmn[]
aAbcdefghijklmn DCB "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgh"
DCB "ijklmnopqrstuvwxyz0123456789+/=",0
asc_6C3A3 DCB "====",0
aTruncatedBase6 DCB "truncated base64 input",0
aNumberSIsNotIn_0 DCB "number %s is not in %lld..%lld ran"
DCB "ge",0
aNumberSIsNotIn DCB "number %s is not in %llu..%llu ran"
DCB "ge",0
aCanTBindToInte DCB "can't bind to interface %s",0
aBadPortSpecS DCB "bad port spec '%s'",0
aBadAddressS DCB "bad address '%s'",0
aGetcwd_0 DCB "getcwd",0
aBadRegexSS DCB "bad regex '%s': %s",0
aUnknownUserGro DCB "unknown user/group %s",0
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x6C478
unk_6C478 DCB 0x90
DCB 0x9D
DCB 0xFA
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x6C480
DCB    0
DCB    0
DCB    0
DCB    0
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x7CF08
off_7CF08 DCD sub_162C4+1
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x7CF0C
off_7CF0C DCD sub_162AC+1
; .fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x7CF10
stru_7CF10 Elf32_Dyn <1, <1>> ; DT_NEEDED libm.so.6
Elf32_Dyn <1, <0x6B>>   ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x13424>> ; DT_INIT
Elf32_Dyn <0xD, <0x62E3C>> ; DT_FINI
Elf32_Dyn <0x19, <0x7CF08>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x7CF0C>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x101B4>> ; DT_HASH
Elf32_Dyn <5, <0x11DFC>> ; DT_STRTAB
Elf32_Dyn <6, <0x10AAC>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0x9EB>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x7D000>> ; DT_PLTGOT
Elf32_Dyn <2, <0x958>>  ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x12ACC>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x12A94>> ; DT_REL
Elf32_Dyn <0x12, <0x38>> ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x12A54>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <2>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x127E8>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x40
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x7D000
_GLOBAL_OFFSET_TABLE_ DCD stru_7CF10
DCD 0
off_7D008 DCD 0
fdopen_ptr DCD __imp_fdopen
endgrent_ptr DCD __imp_endgrent
fputs_unlocked_ptr DCD __imp_fputs_unlocked
strstr_ptr DCD __imp_strstr
gnu_dev_major_ptr DCD __imp_gnu_dev_major
ether_hostton_ptr DCD __imp_ether_hostton
raise_ptr DCD __imp_raise
vasprintf_ptr DCD __imp_vasprintf
sendfile64_ptr DCD __imp_sendfile64
log_ptr DCD __imp_log
strverscmp_ptr DCD __imp_strverscmp
inet_aton_ptr DCD __imp_inet_aton
getpwnam_ptr DCD __imp_getpwnam
fsync_ptr DCD __imp_fsync
setbuf_ptr DCD __imp_setbuf
strcasestr_ptr DCD __imp_strcasestr
strcmp_ptr DCD __imp_strcmp
strtol_ptr DCD __imp_strtol
getpwuid_ptr DCD __imp_getpwuid
setsockopt_ptr DCD __imp_setsockopt
strcspn_ptr DCD __imp_strcspn
times_ptr DCD __imp_times
gnu_dev_makedev_ptr DCD __imp_gnu_dev_makedev
dprintf_ptr DCD __imp_dprintf
clearenv_ptr DCD __imp_clearenv
printf_ptr DCD __imp_printf
hstrerror_ptr DCD __imp_hstrerror
gnu_dev_minor_ptr DCD __imp_gnu_dev_minor
regerror_ptr DCD __imp_regerror
setrlimit64_ptr DCD __imp_setrlimit64
read_ptr DCD __imp_read
tcflush_ptr DCD __imp_tcflush
mktime_ptr DCD __imp_mktime
longjmp_ptr DCD __imp_longjmp
fflush_ptr DCD __imp_fflush
getuid_ptr DCD __imp_getuid
sigprocmask_ptr DCD __imp_sigprocmask
_setjmp_ptr DCD __imp__setjmp
memmove_ptr DCD __imp_memmove
lsetxattr_ptr DCD __imp_lsetxattr
strchrnul_ptr DCD __imp_strchrnul
free_ptr DCD __imp_free
nanosleep_ptr DCD __imp_nanosleep
fileno_unlocked_ptr DCD __imp_fileno_unlocked
inet_pton_ptr DCD __imp_inet_pton
_exit_ptr DCD __imp__exit
pututxline_ptr DCD __imp_pututxline
memcpy_ptr DCD __imp_memcpy
execvp_ptr DCD __imp_execvp
execlp_ptr DCD __imp_execlp
shmget_ptr DCD __imp_shmget
signal_ptr DCD __imp_signal
time_ptr DCD __imp_time
rmdir_ptr DCD __imp_rmdir
gethostid_ptr DCD __imp_gethostid
tcsetpgrp_ptr DCD __imp_tcsetpgrp
sendmsg_ptr DCD __imp_sendmsg
pow_ptr DCD __imp_pow
ftruncate64_ptr DCD __imp_ftruncate64
memcmp_ptr DCD __imp_memcmp
inet_ntoa_ptr DCD __imp_inet_ntoa
sleep_ptr DCD __imp_sleep
stpcpy_ptr DCD __imp_stpcpy
getc_unlocked_ptr DCD __imp_getc_unlocked
uname_ptr DCD __imp_uname
ctime_ptr DCD __imp_ctime
removexattr_ptr DCD __imp_removexattr
recvfrom_ptr DCD __imp_recvfrom
strdup_ptr DCD __imp_strdup
setutxent_ptr DCD __imp_setutxent
cfgetispeed_ptr DCD __imp_cfgetispeed
alarm_ptr DCD __imp_alarm
sysconf_ptr DCD __imp_sysconf
unlink_ptr DCD __imp_unlink
dup2_ptr DCD __imp_dup2
reboot_ptr DCD __imp_reboot
getrlimit64_ptr DCD __imp_getrlimit64
realloc_ptr DCD __imp_realloc
killpg_ptr DCD __imp_killpg
strptime_ptr DCD __imp_strptime
dup_ptr DCD __imp_dup
getpriority_ptr DCD __imp_getpriority
initgroups_ptr DCD __imp_initgroups
regexec_ptr DCD __imp_regexec
localtime_r_ptr DCD __imp_localtime_r
wait_ptr DCD __imp_wait
getlogin_r_ptr DCD __imp_getlogin_r
shmat_ptr DCD __imp_shmat
chdir_ptr DCD __imp_chdir
strcasecmp_ptr DCD __imp_strcasecmp
getpgrp_ptr DCD __imp_getpgrp
geteuid_ptr DCD __imp_geteuid
strsignal_ptr DCD __imp_strsignal
poll_ptr DCD __imp_poll
setgroups_ptr DCD __imp_setgroups
cfsetospeed_ptr DCD __imp_cfsetospeed
semop_ptr DCD __imp_semop
__fxstat64_ptr DCD __imp___fxstat64
readlink_ptr DCD __imp_readlink
getegid_ptr DCD __imp_getegid
sigaction_ptr DCD __imp_sigaction
fwrite_ptr DCD __imp_fwrite
strcat_ptr DCD __imp_strcat
ioctl_ptr DCD __imp_ioctl
lseek64_ptr DCD __imp_lseek64
regfree_ptr DCD __imp_regfree
strtoll_ptr DCD __imp_strtoll
capget_ptr DCD __imp_capget
usleep_ptr DCD __imp_usleep
waitpid_ptr DCD __imp_waitpid
tcsetattr_ptr DCD __imp_tcsetattr
strcpy_ptr DCD __imp_strcpy
chroot_ptr DCD __imp_chroot
fread_ptr DCD __imp_fread
sched_yield_ptr DCD __imp_sched_yield
ferror_unlocked_ptr DCD __imp_ferror_unlocked
shmctl_ptr DCD __imp_shmctl
getmntent_ptr DCD __imp_getmntent
opendir_ptr DCD __imp_opendir
umount2_ptr DCD __imp_umount2
setxattr_ptr DCD __imp_setxattr
fnmatch_ptr DCD __imp_fnmatch
open64_ptr DCD __imp_open64
getenv_ptr DCD __imp_getenv
setpriority_ptr DCD __imp_setpriority
mkstemp64_ptr DCD __imp_mkstemp64
puts_ptr DCD __imp_puts
setgid_ptr DCD __imp_setgid
malloc_ptr DCD __imp_malloc
sigaddset_ptr DCD __imp_sigaddset
__libc_start_main_ptr DCD __imp___libc_start_main
strerror_ptr DCD __imp_strerror
system_ptr DCD __imp_system
strftime_ptr DCD __imp_strftime
tcdrain_ptr DCD __imp_tcdrain
__h_errno_location_ptr DCD __imp___h_errno_location
localtime_ptr DCD __imp_localtime
strsep_ptr DCD __imp_strsep
lremovexattr_ptr DCD __imp_lremovexattr
mktemp_ptr DCD __imp_mktemp
closelog_ptr DCD __imp_closelog
sethostname_ptr DCD __imp_sethostname
dirname_ptr DCD __imp_dirname
__gmon_start___ptr DCD __imp___gmon_start__
rename_ptr DCD __imp_rename
getopt_long_ptr DCD __imp_getopt_long
kill_ptr DCD __imp_kill
getcwd_ptr DCD __imp_getcwd
getpid_ptr DCD __imp_getpid
exit_ptr DCD __imp_exit
syscall_ptr DCD __imp_syscall
sin_ptr DCD __imp_sin
strtoul_ptr DCD __imp_strtoul
tcgetpgrp_ptr DCD __imp_tcgetpgrp
strlen_ptr DCD __imp_strlen
getchar_unlocked_ptr DCD __imp_getchar_unlocked
setsid_ptr DCD __imp_setsid
vprintf_ptr DCD __imp_vprintf
strchr_ptr DCD __imp_strchr
srand_ptr DCD __imp_srand
setenv_ptr DCD __imp_setenv
personality_ptr DCD __imp_personality
memrchr_ptr DCD __imp_memrchr
ttyname_r_ptr DCD __imp_ttyname_r
fchown_ptr DCD __imp_fchown
execve_ptr DCD __imp_execve
getopt_ptr DCD __imp_getopt
fprintf_ptr DCD __imp_fprintf
getpagesize_ptr DCD __imp_getpagesize
cfsetispeed_ptr DCD __imp_cfsetispeed
chown_ptr DCD __imp_chown
ungetc_ptr DCD __imp_ungetc
fcntl_ptr DCD __imp_fcntl
execv_ptr DCD __imp_execv
sqrt_ptr DCD __imp_sqrt
cfgetospeed_ptr DCD __imp_cfgetospeed
sigfillset_ptr DCD __imp_sigfillset
__errno_location_ptr DCD __imp___errno_location
strncasecmp_ptr DCD __imp_strncasecmp
klogctl_ptr DCD __imp_klogctl
snprintf_ptr DCD __imp_snprintf
mkdir_ptr DCD __imp_mkdir
semget_ptr DCD __imp_semget
bind_ptr DCD __imp_bind
getservbyport_ptr DCD __imp_getservbyport
getgid_ptr DCD __imp_getgid
getgrouplist_ptr DCD __imp_getgrouplist
memset_ptr DCD __imp_memset
getmntent_r_ptr DCD __imp_getmntent_r
bsearch_ptr DCD __imp_bsearch
utimes_ptr DCD __imp_utimes
strncpy_ptr DCD __imp_strncpy
fscanf_ptr DCD __imp_fscanf
mallopt_ptr DCD __imp_mallopt
sigsuspend_ptr DCD __imp_sigsuspend
strtoull_ptr DCD __imp_strtoull
statvfs64_ptr DCD __imp_statvfs64
prctl_ptr DCD __imp_prctl
strtod_ptr DCD __imp_strtod
link_ptr DCD __imp_link
write_ptr DCD __imp_write
sigdelset_ptr DCD __imp_sigdelset
ether_aton_r_ptr DCD __imp_ether_aton_r
shmdt_ptr DCD __imp_shmdt
vfork_ptr DCD __imp_vfork
memchr_ptr DCD __imp_memchr
vsprintf_ptr DCD __imp_vsprintf
access_ptr DCD __imp_access
rand_ptr DCD __imp_rand
fclose_ptr DCD __imp_fclose
getsid_ptr DCD __imp_getsid
strnlen_ptr DCD __imp_strnlen
pipe_ptr DCD __imp_pipe
fseeko64_ptr DCD __imp_fseeko64
endmntent_ptr DCD __imp_endmntent
posix_fallocate64_ptr DCD __imp_posix_fallocate64
strtok_ptr DCD __imp_strtok
semctl_ptr DCD __imp_semctl
sendto_ptr DCD __imp_sendto
endutxent_ptr DCD __imp_endutxent
sigemptyset_ptr DCD __imp_sigemptyset
popen_ptr DCD __imp_popen
fork_ptr DCD __imp_fork
putenv_ptr DCD __imp_putenv
stime_ptr DCD __imp_stime
getnameinfo_ptr DCD __imp_getnameinfo
strrchr_ptr DCD __imp_strrchr
vfprintf_ptr DCD __imp_vfprintf
lchown_ptr DCD __imp_lchown
syslog_ptr DCD __imp_syslog
symlink_ptr DCD __imp_symlink
updwtmpx_ptr DCD __imp_updwtmpx
setuid_ptr DCD __imp_setuid
sscanf_ptr DCD __imp_sscanf
setpgid_ptr DCD __imp_setpgid
clearerr_ptr DCD __imp_clearerr
sprintf_ptr DCD __imp_sprintf
readdir64_ptr DCD __imp_readdir64
mkdtemp_ptr DCD __imp_mkdtemp
openlog_ptr DCD __imp_openlog
regcomp_ptr DCD __imp_regcomp
getgroups_ptr DCD __imp_getgroups
exp_ptr DCD __imp_exp
getsockname_ptr DCD __imp_getsockname
vsnprintf_ptr DCD __imp_vsnprintf
getppid_ptr DCD __imp_getppid
atoi_ptr DCD __imp_atoi
recvmsg_ptr DCD __imp_recvmsg
fchdir_ptr DCD __imp_fchdir
fopen64_ptr DCD __imp_fopen64
qsort_ptr DCD __imp_qsort
strpbrk_ptr DCD __imp_strpbrk
freeaddrinfo_ptr DCD __imp_freeaddrinfo
getaddrinfo_ptr DCD __imp_getaddrinfo
capset_ptr DCD __imp_capset
inet_ntop_ptr DCD __imp_inet_ntop
fgets_unlocked_ptr DCD __imp_fgets_unlocked
socket_ptr DCD __imp_socket
sched_getaffinity_ptr DCD __imp_sched_getaffinity
setmntent_ptr DCD __imp_setmntent
cfsetspeed_ptr DCD __imp_cfsetspeed
atof_ptr DCD __imp_atof
inet_addr_ptr DCD __imp_inet_addr
__cmsg_nxthdr_ptr DCD __imp___cmsg_nxthdr
sync_ptr DCD __imp_sync
getline_ptr DCD __imp_getline
if_nametoindex_ptr DCD __imp_if_nametoindex
getspnam_r_ptr DCD __imp_getspnam_r
umask_ptr DCD __imp_umask
chmod_ptr DCD __imp_chmod
gethostbyname_ptr DCD __imp_gethostbyname
__xstat64_ptr DCD __imp___xstat64
isatty_ptr DCD __imp_isatty
__xmknod_ptr DCD __imp___xmknod
unsetenv_ptr DCD __imp_unsetenv
strncmp_ptr DCD __imp_strncmp
abort_ptr DCD __imp_abort
feof_unlocked_ptr DCD __imp_feof_unlocked
getutxent_ptr DCD __imp_getutxent
realpath_ptr DCD __imp_realpath
close_ptr DCD __imp_close
__lxstat64_ptr DCD __imp___lxstat64
mkfifo_ptr DCD __imp_mkfifo
connect_ptr DCD __imp_connect
closedir_ptr DCD __imp_closedir
getgrgid_ptr DCD __imp_getgrgid
div_ptr DCD __imp_div
getgrnam_ptr DCD __imp_getgrnam
atan2_ptr DCD __imp_atan2
putchar_unlocked_ptr DCD __imp_putchar_unlocked
strspn_ptr DCD __imp_strspn
fchmod_ptr DCD __imp_fchmod
cos_ptr DCD __imp_cos
tcgetattr_ptr DCD __imp_tcgetattr
putc_unlocked_ptr DCD __imp_putc_unlocked
tcgetsid_ptr DCD __imp_tcgetsid
ftello64_ptr DCD __imp_ftello64
pclose_ptr DCD __imp_pclose
mount_ptr DCD __imp_mount
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x7D4BC
dword_7D4BC DCD 1
off_7D4C0 DCD aShellReturnedI+0x13 ; "\n"
dword_7D4C4 DCD 3
dword_7D4C8 DCD 0xFFFFFFFF
dword_7D4CC DCD 0xFFFFFFFF
off_7D4D0 DCD unk_7D64C
dword_7D4D4 DCD 0xFFFFFFFF
DCD aAuth               ; "auth"
DCB 0x20
DCB    0
DCB    0
DCB    0
off_7D4E0 DCD aAuthpriv ; "authpriv"
DCB 0x50 ; P
DCB    0
DCB    0
DCB    0
DCB 0x2E ; .
DCB 0x8A
DCB    6
DCB    0
DCB 0x48 ; H
DCB    0
DCB    0
DCB    0
DCB 0x33 ; 3
DCB 0x8A
DCB    6
DCB    0
DCB 0x18
DCB    0
DCB    0
DCB    0
DCB 0x3A ; :
DCB 0x8A
DCB    6
DCB    0
DCB 0x58 ; X
DCB    0
DCB    0
DCB    0
DCB 0x3E ; >
DCB 0x8A
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x43 ; C
DCB 0x8A
DCB    6
DCB    0
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB 0x47 ; G
DCB 0x8A
DCB    6
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB 0x8A
DCB    6
DCB    0
DCB 0xC0
DCB    0
DCB    0
DCB    0
DCB 0x51 ; Q
DCB 0x8A
DCB    6
DCB    0
DCB 0x38 ; 8
DCB    0
DCB    0
DCB    0
DCB 0x56 ; V
DCB 0x8A
DCB    6
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB 0x5F ; _
DCB 0x8A
DCB    6
DCB    0
DCB 0x28 ; (
DCB    0
DCB    0
DCB    0
DCB 0x66 ; f
DCB 0x8A
DCB    6
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB 0x6B ; k
DCB 0x8A
DCB    6
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0x8A
DCB    6
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB 0x77 ; w
DCB 0x8A
DCB    6
DCB    0
DCB 0x88
DCB    0
DCB    0
DCB    0
DCB 0x7E ; ~
DCB 0x8A
DCB    6
DCB    0
DCB 0x90
DCB    0
DCB    0
DCB    0
DCB 0x85
DCB 0x8A
DCB    6
DCB    0
DCB 0x98
DCB    0
DCB    0
DCB    0
DCB 0x8C
DCB 0x8A
DCB    6
DCB    0
DCB 0xA0
DCB    0
DCB    0
DCB    0
DCB 0x93
DCB 0x8A
DCB    6
DCB    0
DCB 0xA8
DCB    0
DCB    0
DCB    0
DCB 0x9A
DCB 0x8A
DCB    6
DCB    0
DCB 0xB0
DCB    0
DCB    0
DCB    0
DCB 0xA1
DCB 0x8A
DCB    6
DCB    0
DCB 0xB8
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xA8
DCB 0x8A
DCB    6
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
off_7D598 DCD aCrit     ; "crit"
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0xB3
DCB 0x8A
DCB    6
DCB    0
DCB    7
DCB    0
DCB    0
DCB    0
DCB 0xB9
DCB 0x8A
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFD
DCB 0xA9
DCB    6
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x79 ; y
DCB 0x93
DCB    6
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0xFE
DCB 0x53 ; S
DCB    6
DCB    0
DCB    6
DCB    0
DCB    0
DCB    0
DCB 0xDE
DCB 0x54 ; T
DCB    6
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0xBF
DCB 0x8A
DCB    6
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB 0xC6
DCB 0x8A
DCB    6
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xCC
DCB 0x8A
DCB    6
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB 0xD1
DCB 0x8A
DCB    6
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
byte_7D5F8 DCB 1
; .data ends


; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x7D5F9
ALIGN 4
unk_7D5FC % 1
% 1
% 1
% 1
; LOAD ends


; Segment type: Uninitialized
AREA .bss, DATA, ALIGN=3
; ORG 0x7D600
EXPORT __environ
__environ % 4           ; Copy of shared data
EXPORT optind
optind % 4              ; Copy of shared data
EXPORT stderr
stderr % 4              ; Copy of shared data
ALIGN 0x10
EXPORT stdin
stdin % 4               ; Copy of shared data
EXPORT stdout
stdout % 4              ; Copy of shared data
EXPORT optarg
optarg % 4              ; Copy of shared data
dword_7D61C % 4
dword_7D620 % 4
dword_7D624 % 4
dword_7D628 % 4
dword_7D62C % 4
dword_7D630 % 4
dword_7D634 % 4
dword_7D638 % 4
dword_7D63C % 4
dword_7D640 % 4
dword_7D644 % 4
dword_7D648 % 4
unk_7D64C % 1
% 1
% 1
% 1
dword_7D650 % 4
dword_7D654 % 4
ALIGN 0x10
dword_7D660 % 4
dword_7D664 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_7D694 % 4
dword_7D698 % 4
dword_7D69C % 4
dword_7D6A0 % 4
dword_7D6A4 % 4
dword_7D6A8 % 4
dword_7D6AC % 4
dword_7D6B0 % 4
dword_7D6B4 % 4
dword_7D6B8 % 4
dword_7D6BC % 4
dword_7D6C0 % 4
dword_7D6C4 % 4
dword_7D6C8 % 4
dword_7D6CC % 4
dword_7D6D0 % 4
dword_7D6D4 % 4
dword_7D6D8 % 4
dword_7D6DC % 4
dword_7D6E0 % 4
dword_7D6E4 % 4
% 1
% 1
% 1
% 1
dword_7D6EC % 4
dword_7D6F0 % 4
dword_7D6F4 % 4
dword_7D6F8 % 4
dword_7D6FC % 4
dword_7D700 % 4
dword_7D704 % 4
dword_7D708 % 4
dword_7D70C % 4
dword_7D710 % 4
dword_7D714 % 4
dword_7D718 % 4
dword_7D71C % 4
dword_7D720 % 4
dword_7D724 % 4
dword_7D728 % 4
dword_7D72C % 4
dword_7D730 % 4
dword_7D734 % 4
dword_7D738 % 4
dword_7D73C % 4
dword_7D740 % 4
unk_7D744 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_7D754 % 4
dword_7D758 % 4
dword_7D75C % 4
dword_7D760 % 4
dword_7D764 % 4
dword_7D768 % 4
dword_7D76C % 4
dword_7D770 % 4
byte_7D774 % 1
; _BYTE byte_7D775[12]
byte_7D775 % 0xC
byte_7D781 % 1
byte_7D782 % 1
byte_7D783 % 1
; char byte_7D784[]
byte_7D784 % 1
ALIGN 0x10
; struct termios buf
buf termios <?>
dword_7D7CC % 4
dword_7D7D0 % 4
dword_7D7D4 % 4
dword_7D7D8 % 4
dword_7D7DC % 4
dword_7D7E0 % 4
dword_7D7E4 % 4
unk_7D7E8 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
byte_7D7F4 % 1
ALIGN 2
word_7D7F6 % 2
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_7D808 % 4
dword_7D80C % 4
dword_7D810 % 4
; _DWORD *dword_7D814
dword_7D814 % 4
dword_7D818 % 4
dword_7D81C % 4
dword_7D820 % 4
dword_7D824 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_7D990 % 4
word_7D994 % 2
ALIGN 4
; int dword_7D998[9]
dword_7D998 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_7D9BC % 4
dword_7D9C0 % 4
dword_7D9C4 % 4
dword_7D9C8 % 4
dword_7D9CC % 4
dword_7D9D0 % 4
dword_7D9D4 % 4
dword_7D9D8 % 4
word_7D9DC % 2
word_7D9DE % 2
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_7DB90 % 4
dword_7DB94 % 4
dword_7DB98 % 4
; int (*off_7DB9C)(void)
off_7DB9C % 4
dword_7DBA0 % 4
dword_7DBA4 % 4
byte_7DBA8 % 1
ALIGN 4
dword_7DBAC % 4
dword_7DBB0 % 4
dword_7DBB4 % 4
dword_7DBB8 % 4
dword_7DBBC % 4
dword_7DBC0 % 4
dword_7DBC4 % 4
dword_7DBC8 % 4
; .bss ends


; Segment type: Externs
; FILE *fdopen(int fd, const char *modes)
IMPORT __imp_fdopen
; void endgrent(void)
IMPORT __imp_endgrent
IMPORT __imp_fputs_unlocked
; char *strstr(const char *haystack, const char *needle)
IMPORT __imp_strstr
; unsigned int gnu_dev_major(unsigned __int64 dev)
IMPORT __imp_gnu_dev_major
; int ether_hostton(const char *hostname, struct ether_addr *addr)
IMPORT __imp_ether_hostton
; int raise(int sig)
IMPORT __imp_raise
; int vasprintf(char **, const char *, va_list)
IMPORT __imp_vasprintf
IMPORT __imp_sendfile64
; double log(double x)
IMPORT __imp_log
IMPORT __imp_strverscmp
; int inet_aton(const char *cp, struct in_addr *inp)
IMPORT __imp_inet_aton
; struct passwd *getpwnam(const char *name)
IMPORT __imp_getpwnam
; int fsync(int fd)
IMPORT __imp_fsync
; void setbuf(FILE *stream, char *buf)
IMPORT __imp_setbuf
IMPORT __imp_strcasestr
; int strcmp(const char *s1, const char *s2)
IMPORT __imp_strcmp
; int strtol(const char *nptr, char **endptr, int base)
IMPORT __imp_strtol
; struct passwd *getpwuid(__uid_t uid)
IMPORT __imp_getpwuid
; int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen)
IMPORT __imp_setsockopt
; size_t strcspn(const char *s, const char *reject)
IMPORT __imp_strcspn
; clock_t times(struct tms *buffer)
IMPORT __imp_times
; unsigned __int64 gnu_dev_makedev(unsigned int major, unsigned int minor)
IMPORT __imp_gnu_dev_makedev
IMPORT __imp_dprintf
; int clearenv(void)
IMPORT __imp_clearenv
; int printf(const char *format, ...)
IMPORT __imp_printf
; const char *hstrerror(int err_num)
IMPORT __imp_hstrerror
; unsigned int gnu_dev_minor(unsigned __int64 dev)
IMPORT __imp_gnu_dev_minor
; size_t regerror(int errcode, const regex_t *preg, char *errbuf, size_t errbuf_size)
IMPORT __imp_regerror
IMPORT __imp_setrlimit64
; ssize_t read(int fd, void *buf, size_t nbytes)
IMPORT __imp_read
; int tcflush(int fd, int queue_selector)
IMPORT __imp_tcflush
; time_t mktime(struct tm *tp)
IMPORT __imp_mktime
; void longjmp(struct __jmp_buf_tag env[1], int val)
IMPORT __imp_longjmp
; int fflush(FILE *stream)
IMPORT __imp_fflush
; __uid_t getuid(void)
IMPORT __imp_getuid
; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
IMPORT __imp_sigprocmask
; int _setjmp(jmp_buf env)
IMPORT __imp__setjmp
; void *memmove(void *dest, const void *src, size_t n)
IMPORT __imp_memmove
; int lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags)
IMPORT __imp_lsetxattr
IMPORT __imp_strchrnul
; void free(void *ptr)
IMPORT __imp_free
; int nanosleep(const struct timespec *requested_time, struct timespec *remaining)
IMPORT __imp_nanosleep
; int fileno_unlocked(FILE *stream)
IMPORT __imp_fileno_unlocked
; int inet_pton(int af, const char *cp, void *buf)
IMPORT __imp_inet_pton
; void _exit(int status)
IMPORT __imp__exit
; struct utmpx *pututxline(const struct utmpx *utmpx)
IMPORT __imp_pututxline
; void *memcpy(void *dest, const void *src, size_t n)
IMPORT __imp_memcpy
; int execvp(const char *file, char *const argv[])
IMPORT __imp_execvp
; int execlp(const char *file, const char *arg, ...)
IMPORT __imp_execlp
IMPORT __imp_shmget
; __sighandler_t signal(int sig, __sighandler_t handler)
IMPORT __imp_signal
; time_t time(time_t *timer)
IMPORT __imp_time
; int rmdir(const char *path)
IMPORT __imp_rmdir
; int gethostid(void)
IMPORT __imp_gethostid
; int tcsetpgrp(int fd, __pid_t pgrp_id)
IMPORT __imp_tcsetpgrp
; ssize_t sendmsg(int fd, const struct msghdr *message, int flags)
IMPORT __imp_sendmsg
; double pow(double x, double y)
IMPORT __imp_pow
IMPORT __imp_ftruncate64
; int memcmp(const void *s1, const void *s2, size_t n)
IMPORT __imp_memcmp
; char *inet_ntoa(struct in_addr in)
IMPORT __imp_inet_ntoa
; unsigned int sleep(unsigned int seconds)
IMPORT __imp_sleep
IMPORT __imp_stpcpy
; int getc_unlocked(FILE *stream)
IMPORT __imp_getc_unlocked
; int uname(struct utsname *name)
IMPORT __imp_uname
; char *ctime(const time_t *timer)
IMPORT __imp_ctime
; int removexattr(const char *path, const char *name)
IMPORT __imp_removexattr
; ssize_t recvfrom(int fd, void *buf, size_t n, int flags, struct sockaddr *addr, socklen_t *addr_len)
IMPORT __imp_recvfrom
; char *strdup(const char *s)
IMPORT __imp_strdup
; void setutxent(void)
IMPORT __imp_setutxent
; speed_t cfgetispeed(const struct termios *termios_p)
IMPORT __imp_cfgetispeed
; unsigned int alarm(unsigned int seconds)
IMPORT __imp_alarm
; int sysconf(int name)
IMPORT __imp_sysconf
; int unlink(const char *name)
IMPORT __imp_unlink
; int dup2(int fd, int fd2)
IMPORT __imp_dup2
; int reboot(int howto)
IMPORT __imp_reboot
IMPORT __imp_getrlimit64
; void *realloc(void *ptr, size_t size)
IMPORT __imp_realloc
; int killpg(__pid_t pgrp, int sig)
IMPORT __imp_killpg
IMPORT __imp_strptime
; int dup(int fd)
IMPORT __imp_dup
; int getpriority(__priority_which_t which, id_t who)
IMPORT __imp_getpriority
; int initgroups(const char *, __gid_t group)
IMPORT __imp_initgroups
; int regexec(const regex_t *preg, const char *string, size_t nmatch, regmatch_t pmatch[], int eflags)
IMPORT __imp_regexec
; struct tm *localtime_r(const time_t *timer, struct tm *tp)
IMPORT __imp_localtime_r
; __pid_t wait(void *stat_loc)
IMPORT __imp_wait
; int getlogin_r(char *name, size_t name_len)
IMPORT __imp_getlogin_r
IMPORT __imp_shmat
; int chdir(const char *path)
IMPORT __imp_chdir
; int strcasecmp(const char *s1, const char *s2)
IMPORT __imp_strcasecmp
; __pid_t getpgrp(void)
IMPORT __imp_getpgrp
; __uid_t geteuid(void)
IMPORT __imp_geteuid
IMPORT __imp_strsignal
; int poll(struct pollfd *fds, nfds_t nfds, int timeout)
IMPORT __imp_poll
; int setgroups(size_t n, const __gid_t *groups)
IMPORT __imp_setgroups
; int cfsetospeed(struct termios *termios_p, speed_t speed)
IMPORT __imp_cfsetospeed
; int semop(int semid, struct sembuf *sops, size_t nsops)
IMPORT __imp_semop
IMPORT __imp___fxstat64
; ssize_t readlink(const char *path, char *buf, size_t len)
IMPORT __imp_readlink
; __gid_t getegid(void)
IMPORT __imp_getegid
; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
IMPORT __imp_sigaction
; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
IMPORT __imp_fwrite
; char *strcat(char *dest, const char *src)
IMPORT __imp_strcat
; int ioctl(int fd, unsigned int request, ...)
IMPORT __imp_ioctl
IMPORT __imp_lseek64
; void regfree(regex_t *preg)
IMPORT __imp_regfree
; __int64 strtoll(const char *nptr, char **endptr, int base)
IMPORT __imp_strtoll
IMPORT __imp_capget
; int usleep(__useconds_t useconds)
IMPORT __imp_usleep
; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
IMPORT __imp_waitpid
; int tcsetattr(int fd, int optional_actions, const struct termios *termios_p)
IMPORT __imp_tcsetattr
; char *strcpy(char *dest, const char *src)
IMPORT __imp_strcpy
; int chroot(const char *path)
IMPORT __imp_chroot
; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
IMPORT __imp_fread
; int sched_yield(void)
IMPORT __imp_sched_yield
; int ferror_unlocked(FILE *stream)
IMPORT __imp_ferror_unlocked
IMPORT __imp_shmctl
; struct mntent *getmntent(FILE *stream)
IMPORT __imp_getmntent
; DIR *opendir(const char *name)
IMPORT __imp_opendir
; int umount2(const char *special_file, int flags)
IMPORT __imp_umount2
; int setxattr(const char *path, const char *name, const void *value, size_t size, int flags)
IMPORT __imp_setxattr
; int fnmatch(const char *pattern, const char *name, int flags)
IMPORT __imp_fnmatch
IMPORT __imp_open64
; char *getenv(const char *name)
IMPORT __imp_getenv
; int setpriority(__priority_which_t which, id_t who, int prio)
IMPORT __imp_setpriority
IMPORT __imp_mkstemp64
; int puts(const char *s)
IMPORT __imp_puts
; int setgid(__gid_t gid)
IMPORT __imp_setgid
; void *malloc(size_t size)
IMPORT __imp_malloc
; int sigaddset(sigset_t *set, int signo)
IMPORT __imp_sigaddset
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; char *strerror(int errnum)
IMPORT __imp_strerror
; int system(const char *command)
IMPORT __imp_system
; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
IMPORT __imp_strftime
; int tcdrain(int fd)
IMPORT __imp_tcdrain
; int *__h_errno_location(void)
IMPORT __imp___h_errno_location
; struct tm *localtime(const time_t *timer)
IMPORT __imp_localtime
; char *strsep(char **stringp, const char *delim)
IMPORT __imp_strsep
; int lremovexattr(const char *path, const char *name)
IMPORT __imp_lremovexattr
; char *mktemp(char *template)
IMPORT __imp_mktemp
; void closelog(void)
IMPORT __imp_closelog
; int sethostname(const char *name, size_t len)
IMPORT __imp_sethostname
; char *dirname(char *path)
IMPORT __imp_dirname
; int rename(const char *old, const char *new)
IMPORT __imp_rename
; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
IMPORT __imp_getopt_long
; int kill(__pid_t pid, int sig)
IMPORT __imp_kill
; char *getcwd(char *buf, size_t size)
IMPORT __imp_getcwd
; __pid_t getpid(void)
IMPORT __imp_getpid
; void exit(int status)
IMPORT __imp_exit
; int syscall(int sysno, ...)
IMPORT __imp_syscall
; double sin(double x)
IMPORT __imp_sin
; unsigned int strtoul(const char *nptr, char **endptr, int base)
IMPORT __imp_strtoul
; __pid_t tcgetpgrp(int fd)
IMPORT __imp_tcgetpgrp
; size_t strlen(const char *s)
IMPORT __imp_strlen
; int getchar_unlocked(void)
IMPORT __imp_getchar_unlocked
; __pid_t setsid(void)
IMPORT __imp_setsid
; int vprintf(const char *format, __gnuc_va_list arg)
IMPORT __imp_vprintf
; char *strchr(const char *s, int c)
IMPORT __imp_strchr
; void srand(unsigned int seed)
IMPORT __imp_srand
; int setenv(const char *name, const char *value, int replace)
IMPORT __imp_setenv
; int personality(unsigned int persona)
IMPORT __imp_personality
IMPORT __imp_memrchr
; int ttyname_r(int fd, char *buf, size_t buflen)
IMPORT __imp_ttyname_r
; int fchown(int fd, __uid_t owner, __gid_t group)
IMPORT __imp_fchown
; int execve(const char *path, char *const argv[], char *const envp[])
IMPORT __imp_execve
; int getopt(int argc, char *const *argv, const char *shortopts)
IMPORT __imp_getopt
; int fprintf(FILE *stream, const char *format, ...)
IMPORT __imp_fprintf
; int getpagesize(void)
IMPORT __imp_getpagesize
; int cfsetispeed(struct termios *termios_p, speed_t speed)
IMPORT __imp_cfsetispeed
; int chown(const char *file, __uid_t owner, __gid_t group)
IMPORT __imp_chown
; int ungetc(int c, FILE *stream)
IMPORT __imp_ungetc
; int fcntl(int fd, int cmd, ...)
IMPORT __imp_fcntl
; int execv(const char *path, char *const argv[])
IMPORT __imp_execv
; double sqrt(double x)
IMPORT __imp_sqrt
; speed_t cfgetospeed(const struct termios *termios_p)
IMPORT __imp_cfgetospeed
; int sigfillset(sigset_t *set)
IMPORT __imp_sigfillset
; int *__errno_location(void)
IMPORT __imp___errno_location
; int strncasecmp(const char *s1, const char *s2, size_t n)
IMPORT __imp_strncasecmp
; int klogctl(int type, char *bufp, int len)
IMPORT __imp_klogctl
; int snprintf(char *s, size_t maxlen, const char *format, ...)
IMPORT __imp_snprintf
; int mkdir(const char *path, __mode_t mode)
IMPORT __imp_mkdir
; int semget(key_t key, int nsems, int semflg)
IMPORT __imp_semget
; int bind(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_bind
; struct servent *getservbyport(int port, const char *proto)
IMPORT __imp_getservbyport
; __gid_t getgid(void)
IMPORT __imp_getgid
; int getgrouplist(const char *, __gid_t group, __gid_t *groups, int *ngroups)
IMPORT __imp_getgrouplist
; void *memset(void *s, int c, size_t n)
IMPORT __imp_memset
; struct mntent *getmntent_r(FILE *stream, struct mntent *result, char *buffer, int bufsize)
IMPORT __imp_getmntent_r
; void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, __compar_fn_t compar)
IMPORT __imp_bsearch
; int utimes(const char *file, const struct timeval tvp[2])
IMPORT __imp_utimes
; char *strncpy(char *dest, const char *src, size_t n)
IMPORT __imp_strncpy
; int fscanf(FILE *stream, const char *format, ...)
IMPORT __imp_fscanf
; int mallopt(int param, int val)
IMPORT __imp_mallopt
; int sigsuspend(const sigset_t *set)
IMPORT __imp_sigsuspend
; unsigned __int64 strtoull(const char *nptr, char **endptr, int base)
IMPORT __imp_strtoull
IMPORT __imp_statvfs64
; int prctl(int option, ...)
IMPORT __imp_prctl
; double strtod(const char *nptr, char **endptr)
IMPORT __imp_strtod
; int link(const char *from, const char *to)
IMPORT __imp_link
; ssize_t write(int fd, const void *buf, size_t n)
IMPORT __imp_write
; int sigdelset(sigset_t *set, int signo)
IMPORT __imp_sigdelset
; struct ether_addr *ether_aton_r(const char *asc, struct ether_addr *addr)
IMPORT __imp_ether_aton_r
IMPORT __imp_shmdt
; __pid_t vfork(void)
IMPORT __imp_vfork
; void *memchr(const void *s, int c, size_t n)
IMPORT __imp_memchr
; int vsprintf(char *s, const char *format, __gnuc_va_list arg)
IMPORT __imp_vsprintf
; int access(const char *name, int type)
IMPORT __imp_access
; int rand(void)
IMPORT __imp_rand
; int fclose(FILE *stream)
IMPORT __imp_fclose
IMPORT __imp_getsid
IMPORT __imp_strnlen
; int pipe(int pipedes[2])
IMPORT __imp_pipe
IMPORT __imp_fseeko64
; int endmntent(FILE *stream)
IMPORT __imp_endmntent
IMPORT __imp_posix_fallocate64
; char *strtok(char *s, const char *delim)
IMPORT __imp_strtok
; int semctl(int semid, int semnum, int cmd, ...)
IMPORT __imp_semctl
; ssize_t sendto(int fd, const void *buf, size_t n, int flags, const struct sockaddr *addr, socklen_t addr_len)
IMPORT __imp_sendto
; void endutxent(void)
IMPORT __imp_endutxent
; int sigemptyset(sigset_t *set)
IMPORT __imp_sigemptyset
; FILE *popen(const char *command, const char *modes)
IMPORT __imp_popen
; __pid_t fork(void)
IMPORT __imp_fork
; int putenv(char *string)
IMPORT __imp_putenv
; int stime(const time_t *when)
IMPORT __imp_stime
; int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, socklen_t hostlen, char *serv, socklen_t servlen, unsigned int flags)
IMPORT __imp_getnameinfo
; char *strrchr(const char *s, int c)
IMPORT __imp_strrchr
; int vfprintf(FILE *s, const char *format, __gnuc_va_list arg)
IMPORT __imp_vfprintf
; int lchown(const char *file, __uid_t owner, __gid_t group)
IMPORT __imp_lchown
; void syslog(int pri, const char *fmt, ...)
IMPORT __imp_syslog
; int symlink(const char *from, const char *to)
IMPORT __imp_symlink
IMPORT __imp_updwtmpx
; int setuid(__uid_t uid)
IMPORT __imp_setuid
; int sscanf(const char *s, const char *format, ...)
IMPORT __imp_sscanf
; int setpgid(__pid_t pid, __pid_t pgid)
IMPORT __imp_setpgid
; void clearerr(FILE *stream)
IMPORT __imp_clearerr
; int sprintf(char *s, const char *format, ...)
IMPORT __imp_sprintf
IMPORT __imp_readdir64
; char *mkdtemp(char *template)
IMPORT __imp_mkdtemp
; void openlog(const char *ident, int option, int facility)
IMPORT __imp_openlog
; int regcomp(regex_t *preg, const char *pattern, int cflags)
IMPORT __imp_regcomp
; int getgroups(int size, __gid_t list[])
IMPORT __imp_getgroups
; double exp(double x)
IMPORT __imp_exp
; int getsockname(int fd, struct sockaddr *addr, socklen_t *len)
IMPORT __imp_getsockname
; int vsnprintf(char *s, size_t maxlen, const char *format, __gnuc_va_list arg)
IMPORT __imp_vsnprintf
; __pid_t getppid(void)
IMPORT __imp_getppid
; int atoi(const char *nptr)
IMPORT __imp_atoi
; ssize_t recvmsg(int fd, struct msghdr *message, int flags)
IMPORT __imp_recvmsg
; int fchdir(int fd)
IMPORT __imp_fchdir
IMPORT __imp_fopen64
; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
IMPORT __imp_qsort
; char *strpbrk(const char *s, const char *accept)
IMPORT __imp_strpbrk
; void freeaddrinfo(struct addrinfo *ai)
IMPORT __imp_freeaddrinfo
; int getaddrinfo(const char *name, const char *service, const struct addrinfo *req, struct addrinfo **pai)
IMPORT __imp_getaddrinfo
IMPORT __imp_capset
; const char *inet_ntop(int af, const void *cp, char *buf, socklen_t len)
IMPORT __imp_inet_ntop
IMPORT __imp_fgets_unlocked
; int socket(int domain, int type, int protocol)
IMPORT __imp_socket
IMPORT __imp_sched_getaffinity
; FILE *setmntent(const char *file, const char *mode)
IMPORT __imp_setmntent
; int cfsetspeed(struct termios *termios_p, speed_t speed)
IMPORT __imp_cfsetspeed
; double atof(const char *nptr)
IMPORT __imp_atof
; in_addr_t inet_addr(const char *cp)
IMPORT __imp_inet_addr
; struct cmsghdr *__cmsg_nxthdr(struct msghdr *mhdr, struct cmsghdr *cmsg)
IMPORT __imp___cmsg_nxthdr
; void sync(void)
IMPORT __imp_sync
IMPORT __imp_getline
IMPORT __imp_if_nametoindex
; int getspnam_r(const char *name, struct spwd *result_buf, char *buffer, size_t buflen, struct spwd **result)
IMPORT __imp_getspnam_r
; __mode_t umask(__mode_t mask)
IMPORT __imp_umask
; int chmod(const char *file, __mode_t mode)
IMPORT __imp_chmod
; struct hostent *gethostbyname(const char *name)
IMPORT __imp_gethostbyname
IMPORT __imp___xstat64
; int isatty(int fd)
IMPORT __imp_isatty
; int __xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)
IMPORT __imp___xmknod
; int unsetenv(const char *name)
IMPORT __imp_unsetenv
; int strncmp(const char *s1, const char *s2, size_t n)
IMPORT __imp_strncmp
; void abort(void)
IMPORT __imp_abort
; int feof_unlocked(FILE *stream)
IMPORT __imp_feof_unlocked
; struct utmpx *getutxent(void)
IMPORT __imp_getutxent
; char *realpath(const char *name, char *resolved)
IMPORT __imp_realpath
; int close(int fd)
IMPORT __imp_close
IMPORT __imp___lxstat64
; int mkfifo(const char *path, __mode_t mode)
IMPORT __imp_mkfifo
; int connect(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_connect
; int closedir(DIR *dirp)
IMPORT __imp_closedir
; struct group *getgrgid(__gid_t gid)
IMPORT __imp_getgrgid
; div_t *div(div_t *__return_ptr __struct_ptr retstr, int numer, int denom)
IMPORT __imp_div
; struct group *getgrnam(const char *name)
IMPORT __imp_getgrnam
; double atan2(double y, double x)
IMPORT __imp_atan2
; int putchar_unlocked(int c)
IMPORT __imp_putchar_unlocked
; size_t strspn(const char *s, const char *accept)
IMPORT __imp_strspn
; int fchmod(int fd, __mode_t mode)
IMPORT __imp_fchmod
; double cos(double x)
IMPORT __imp_cos
; int tcgetattr(int fd, struct termios *termios_p)
IMPORT __imp_tcgetattr
; int putc_unlocked(int c, FILE *stream)
IMPORT __imp_putc_unlocked
IMPORT __imp_tcgetsid
IMPORT __imp_ftello64
; int pclose(FILE *stream)
IMPORT __imp_pclose
; int mount(const char *special_file, const char *dir, const char *fstype, unsigned int rwflag, const void *data)
IMPORT __imp_mount
IMPORT _ITM_deregisterTMCloneTable, WEAK
IMPORT __imp___gmon_start__, WEAK
IMPORT _ITM_registerTMCloneTable, WEAK

END start

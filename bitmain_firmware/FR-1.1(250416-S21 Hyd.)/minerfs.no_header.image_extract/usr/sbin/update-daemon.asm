;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : A640B45CB4181F2C97696B3A22C9B9EB701E8268EDE32C13C9AAB5B7ADF1044F
; Input MD5    : 8DB2CD3B95F86D24399982430C5F16A9
; Input CRC32  : 952044DD
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/hashsource_antminer_S21x/bitmain_firmware/FR-1.1(250416-S21 Hyd.)/minerfs.no_header.image_extract/usr/sbin/update-daemon
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libpthread.so.0'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD _start+1            ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x21B4              ; SHT file offset
DCD 0x5000400           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 9                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x1A                ; Number of entries in SHT
DCW 0x19                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0x1650              ; File offset
DCD unk_11650           ; Virtual address
DCD 0x11650             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x154               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x10154             ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0x165C              ; Size in file image
DCD 0x165C              ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0x1F08              ; File offset
DCD off_21F08           ; Virtual address
DCD 0x21F08             ; Physical address
DCD 0x18C               ; Size in file image
DCD 0x198               ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0x1F10              ; File offset
DCD stru_21F10          ; Virtual address
DCD 0x21F10             ; Physical address
DCD 0xF0                ; Size in file image
DCD 0xF0                ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x170               ; File offset
DCD dword_10170         ; Virtual address
DCD 0x10170             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHT Entry 8
DCD 0x6474E552          ; Type: RO-AFTER
DCD 0x1F08              ; File offset
DCD off_21F08           ; Virtual address
DCD 0x21F08             ; Physical address
DCD 0xF8                ; Size in file image
DCD 0xF8                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10154
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10170 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 3, 2, 0          ; ABI: Linux 3.2.0
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0xD0, 0x8D, 0x43, 0x35, 0x89, 0x9E, 0x55 ; Desc
DCB 0x39, 0x40, 6, 0x2D, 0xA9, 0xE7, 0x68
DCB 0x75, 0xE1, 0xF8, 0x92, 0x73, 0x77
; ELF Hash Table
elf_hash_nbucket DCD 0x11
elf_hash_nchain DCD 0x23
elf_hash_bucket DCD 1, 0xA, 0x1A, 0x1F, 0x1C, 0, 0x1E, 0x18
DCD 0x21, 5, 0x22, 0, 9, 0x17, 0x16, 0xE
DCD 0
elf_hash_chain DCD 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 4
DCD 0, 0xD, 0, 0, 0xB, 0, 0x10, 8, 0x11
DCD 0x12, 0x13, 0xC, 0x14, 7, 0, 0x15, 0x19
DCD 0xF, 0x1B, 0x1D, 6, 0x20
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aStrstr - byte_104BC, 0, 0, \ ; "strstr"
           0x12, 0, 0>
Elf32_Sym <aItmDeregistert - byte_104BC,\ ; "_ITM_deregisterTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aSprintf+1 - byte_104BC, 0, \ ; "printf"
           0, 0x12, 0, 0>
Elf32_Sym <aRead - byte_104BC, 0, 0, \ ; "read"
           0x12, 0, 0>
Elf32_Sym <aPerror - byte_104BC, 0, 0, \ ; "perror"
           0x12, 0, 0>
Elf32_Sym <aAccept - byte_104BC, 0, 0, \ ; "accept"
           0x12, 0, 0>
Elf32_Sym <aStderr - byte_104BC, stderr,\ ; "stderr"
           4, 0x11, 0, 0x17>
Elf32_Sym <aFwrite - byte_104BC, 0, 0, \ ; "fwrite"
           0x12, 0, 0>
Elf32_Sym <aStrcpy - byte_104BC, 0, 0, \ ; "strcpy"
           0x12, 0, 0>
Elf32_Sym <aPthreadCreate - byte_104BC, \ ; "pthread_create"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPuts - byte_104BC, 0, 0, \ ; "puts"
           0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_104BC, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSystem - byte_104BC, 0, 0, \ ; "system"
           0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_104BC, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aCtypeBLoc - byte_104BC, 0, \ ; "__ctype_b_loc"
           0, 0x12, 0, 0>
Elf32_Sym <aPthreadExit+8 - byte_104BC, \ ; "exit"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrlen - byte_104BC, 0, 0, \ ; "strlen"
           0x12, 0, 0>
Elf32_Sym <aBind - byte_104BC, 0, 0, \ ; "bind"
           0x12, 0, 0>
Elf32_Sym <aMemset - byte_104BC, 0, 0, \ ; "memset"
           0x12, 0, 0>
Elf32_Sym <aFwrite+1 - byte_104BC, 0, 0,\ ; "write"
           0x12, 0, 0>
Elf32_Sym <aAccess - byte_104BC, 0, 0, \ ; "access"
           0x12, 0, 0>
Elf32_Sym <aPthreadExit - byte_104BC, 0,\ ; "pthread_exit"
           0, 0x12, 0, 0>
Elf32_Sym <aShutdown - byte_104BC, 0, 0,\ ; "shutdown"
           0x12, 0, 0>
Elf32_Sym <aListen - byte_104BC, 0, 0, \ ; "listen"
           0x12, 0, 0>
Elf32_Sym <aSprintf - byte_104BC, 0, 0, \ ; "sprintf"
           0x12, 0, 0>
Elf32_Sym <aSocket - byte_104BC, 0, 0, \ ; "socket"
           0x12, 0, 0>
Elf32_Sym <aItmRegistertmc - byte_104BC,\ ; "_ITM_registerTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aInetAddr - byte_104BC, 0, 0,\ ; "inet_addr"
           0x12, 0, 0>
Elf32_Sym <aAbort - byte_104BC, 0, 0, \ ; "abort"
           0x12, 0, 0>
Elf32_Sym <aRecv - byte_104BC, 0, 0, \ ; "recv"
           0x12, 0, 0>
Elf32_Sym <aClose - byte_104BC, 0, 0, \ ; "close"
           0x12, 0, 0>
Elf32_Sym <aSend - byte_104BC, 0, 0, \ ; "send"
           0x12, 0, 0>
Elf32_Sym <aConnect - byte_104BC, 0, 0, \ ; "connect"
           0x12, 0, 0>
Elf32_Sym <aAssertFail - byte_104BC, 0, \ ; "__assert_fail"
           0, 0x12, 0, 0>
; ELF String Table
byte_104BC DCB 0
aLibpthreadSo0 DCB "libpthread.so.0",0
aItmDeregistert DCB "_ITM_deregisterTMCloneTable",0
aItmRegistertmc DCB "_ITM_registerTMCloneTable",0
aRead DCB "read",0
aClose DCB "close",0
aPthreadExit DCB "pthread_exit",0
aConnect DCB "connect",0
aSend DCB "send",0
aRecv DCB "recv",0
aAccept DCB "accept",0
aPthreadCreate DCB "pthread_create",0
aLibcSo6 DCB "libc.so.6",0
aSocket DCB "socket",0
aStrcpy DCB "strcpy",0
aSprintf DCB "sprintf",0
aPerror DCB "perror",0
aPuts DCB "puts",0
aListen DCB "listen",0
aAbort DCB "abort",0
aAssertFail DCB "__assert_fail",0
aStrlen DCB "strlen",0
aMemset DCB "memset",0
aStrstr DCB "strstr",0
aBind DCB "bind",0
aShutdown DCB "shutdown",0
aInetAddr DCB "inet_addr",0
aCtypeBLoc DCB "__ctype_b_loc",0
aStderr DCB "stderr",0
aSystem DCB "system",0
aFwrite DCB "fwrite",0
aAccess DCB "access",0
aLibcStartMain DCB "__libc_start_main",0
aGmonStart DCB "__gmon_start__",0
aGlibc24 DCB "GLIBC_2.4",0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; strstr@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_deregisterTMCloneTable
DCW 2                   ; printf@@GLIBC_2.4
DCW 3                   ; read@@GLIBC_2.4
DCW 2                   ; perror@@GLIBC_2.4
DCW 3                   ; accept@@GLIBC_2.4
DCW 2                   ; stderr@@GLIBC_2.4
DCW 2                   ; fwrite@@GLIBC_2.4
DCW 2                   ; strcpy@@GLIBC_2.4
DCW 3                   ; pthread_create@@GLIBC_2.4
DCW 2                   ; puts@@GLIBC_2.4
DCW 2                   ; __libc_start_main@@GLIBC_2.4
DCW 2                   ; system@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 2                   ; __ctype_b_loc@@GLIBC_2.4
DCW 2                   ; exit@@GLIBC_2.4
DCW 2                   ; strlen@@GLIBC_2.4
DCW 2                   ; bind@@GLIBC_2.4
DCW 2                   ; memset@@GLIBC_2.4
DCW 3                   ; write@@GLIBC_2.4
DCW 2                   ; access@@GLIBC_2.4
DCW 3                   ; pthread_exit@@GLIBC_2.4
DCW 2                   ; shutdown@@GLIBC_2.4
DCW 2                   ; listen@@GLIBC_2.4
DCW 2                   ; sprintf@@GLIBC_2.4
DCW 2                   ; socket@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_registerTMCloneTable
DCW 2                   ; inet_addr@@GLIBC_2.4
DCW 2                   ; abort@@GLIBC_2.4
DCW 3                   ; recv@@GLIBC_2.4
DCW 3                   ; close@@GLIBC_2.4
DCW 3                   ; send@@GLIBC_2.4
DCW 3                   ; connect@@GLIBC_2.4
DCW 2                   ; __assert_fail@@GLIBC_2.4
DCW 0
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libpthread.so.0"
               aLibpthreadSo0 - byte_104BC,\
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 3, \ ; "GLIBC_2.4"
               aGlibc24 - byte_104BC, 0>
Elf32_Verneed <1, 1, \  ; "libc.so.6"
               aLibcSo6 - byte_104BC, \
               0x10, 0>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_104BC, 0>
; ELF REL Relocation Table
Elf32_Rel <0x22088, 0xE15> ; R_ARM_GLOB_DAT __gmon_start__
Elf32_Rel <0x22098, 0x714> ; R_ARM_COPY stderr
; ELF JMPREL Relocation Table
Elf32_Rel <0x2200C, 0x116> ; R_ARM_JUMP_SLOT strstr
Elf32_Rel <0x22010, 0x316> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x22014, 0x416> ; R_ARM_JUMP_SLOT read
Elf32_Rel <0x22018, 0x516> ; R_ARM_JUMP_SLOT perror
Elf32_Rel <0x2201C, 0x616> ; R_ARM_JUMP_SLOT accept
Elf32_Rel <0x22020, 0x816> ; R_ARM_JUMP_SLOT fwrite
Elf32_Rel <0x22024, 0x916> ; R_ARM_JUMP_SLOT strcpy
Elf32_Rel <0x22028, 0xA16> ; R_ARM_JUMP_SLOT pthread_create
Elf32_Rel <0x2202C, 0xB16> ; R_ARM_JUMP_SLOT puts
Elf32_Rel <0x22030, 0xC16> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x22034, 0xD16> ; R_ARM_JUMP_SLOT system
Elf32_Rel <0x22038, 0xE16> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x2203C, 0xF16> ; R_ARM_JUMP_SLOT __ctype_b_loc
Elf32_Rel <0x22040, 0x1016> ; R_ARM_JUMP_SLOT exit
Elf32_Rel <0x22044, 0x1116> ; R_ARM_JUMP_SLOT strlen
Elf32_Rel <0x22048, 0x1216> ; R_ARM_JUMP_SLOT bind
Elf32_Rel <0x2204C, 0x1316> ; R_ARM_JUMP_SLOT memset
Elf32_Rel <0x22050, 0x1416> ; R_ARM_JUMP_SLOT write
Elf32_Rel <0x22054, 0x1516> ; R_ARM_JUMP_SLOT access
Elf32_Rel <0x22058, 0x1616> ; R_ARM_JUMP_SLOT pthread_exit
Elf32_Rel <0x2205C, 0x1716> ; R_ARM_JUMP_SLOT shutdown
Elf32_Rel <0x22060, 0x1816> ; R_ARM_JUMP_SLOT listen
Elf32_Rel <0x22064, 0x1916> ; R_ARM_JUMP_SLOT sprintf
Elf32_Rel <0x22068, 0x1A16> ; R_ARM_JUMP_SLOT socket
Elf32_Rel <0x2206C, 0x1C16> ; R_ARM_JUMP_SLOT inet_addr
Elf32_Rel <0x22070, 0x1D16> ; R_ARM_JUMP_SLOT abort
Elf32_Rel <0x22074, 0x1E16> ; R_ARM_JUMP_SLOT recv
Elf32_Rel <0x22078, 0x1F16> ; R_ARM_JUMP_SLOT close
Elf32_Rel <0x2207C, 0x2016> ; R_ARM_JUMP_SLOT send
Elf32_Rel <0x22080, 0x2116> ; R_ARM_JUMP_SLOT connect
Elf32_Rel <0x22084, 0x2216> ; R_ARM_JUMP_SLOT __assert_fail
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x1079C
CODE32



; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              sub_10BB0
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x107A8
CODE32



; void sub_107A8()
sub_107A8
PUSH            {LR}
LDR             LR, =(_GLOBAL_OFFSET_TABLE_ - 0x107B8)
ADD             LR, PC, LR ; _GLOBAL_OFFSET_TABLE_
LDR             PC, [LR,#(off_22008 - 0x22000)]!
; End of function sub_107A8

off_107B8 DCD _GLOBAL_OFFSET_TABLE_ - 0x107B8
; [0000000C BYTES: COLLAPSED FUNCTION strstr]
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION read]
; [0000000C BYTES: COLLAPSED FUNCTION perror]
; [0000000C BYTES: COLLAPSED FUNCTION accept]
; [0000000C BYTES: COLLAPSED FUNCTION fwrite]
; [0000000C BYTES: COLLAPSED FUNCTION strcpy]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_create]
; [0000000C BYTES: COLLAPSED FUNCTION puts]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION system]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION __ctype_b_loc]
; [0000000C BYTES: COLLAPSED FUNCTION exit]
; [0000000C BYTES: COLLAPSED FUNCTION strlen]
; [0000000C BYTES: COLLAPSED FUNCTION bind]
; [0000000C BYTES: COLLAPSED FUNCTION memset]
; [0000000C BYTES: COLLAPSED FUNCTION write]
; [0000000C BYTES: COLLAPSED FUNCTION access]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_exit]
; [0000000C BYTES: COLLAPSED FUNCTION shutdown]
; [0000000C BYTES: COLLAPSED FUNCTION listen]
; [0000000C BYTES: COLLAPSED FUNCTION sprintf]
; [0000000C BYTES: COLLAPSED FUNCTION socket]
; [0000000C BYTES: COLLAPSED FUNCTION inet_addr]
; [0000000C BYTES: COLLAPSED FUNCTION abort]
; [0000000C BYTES: COLLAPSED FUNCTION recv]
; [0000000C BYTES: COLLAPSED FUNCTION close]
; [0000000C BYTES: COLLAPSED FUNCTION send]
; [0000000C BYTES: COLLAPSED FUNCTION connect]
; [0000000C BYTES: COLLAPSED FUNCTION __assert_fail]

; Segment type: Pure code
AREA .text, CODE
; ORG 0x10930
CODE32



; int __fastcall main(int, const char **, char **)
main

arg= -0x2C
addr_len= -0x28
newthread= -0x24
addr= -0x20
var_10= -0x10

PUSH            {R4-R8,LR}
MOV             R6, R1
LDR             R4, [R6]
MOVW            R1, #:lower16:aDaemonc ; "daemonc"
SUB             SP, SP, #0x30
MOVT            R1, #:upper16:aDaemonc ; "daemonc"
MOV             R0, R4  ; haystack
BL              strstr
SUBS            R5, R0, #0
BNE             loc_10AB8
MOVW            R1, #:lower16:aDaemons ; "daemons"
MOV             R0, R4  ; haystack
MOVT            R1, #:upper16:aDaemons ; "daemons"
BL              strstr
CMP             R0, #0
BEQ             loc_10AE0
MOV             R2, R5  ; protocol
MOV             R1, #1  ; type
MOV             R0, #2  ; domain
BL              socket
CMN             R0, #1
MOV             R4, R0
BEQ             loc_10B10
MOVW            R0, #:lower16:a127001 ; "127.0.0.1"
MOV             R3, #2
MOVT            R0, #:upper16:a127001 ; "127.0.0.1"
STRH            R3, [SP,#0x30+addr]
STR             R5, [SP,#0x30+addr.sa_data]
STR             R5, [SP,#0x30+addr.sa_data+4]
STR             R5, [SP,#0x30+addr.sa_data+8]
STRH            R5, [SP,#0x30+addr.sa_data+0xC]
BL              inet_addr
STR             R0, [SP,#0x30+addr.sa_data+2]
MOV             R0, #a22322 ; "22322"
BL              sub_10C40
MOV             R1, R0
MOV             R5, R0
MOV             R0, #aWillListeningT ; "Will Listening To Port[%d]\r\n"
BL              printf
ADD             R1, SP, #0x30+addr ; addr
MOV             R2, #0x10 ; len
MOV             R0, R4  ; fd
STRH            R5, [SP,#0x30+addr.sa_data]
BL              bind
CMN             R0, #1
BEQ             loc_10B54
MOV             R1, #0x200 ; n
MOV             R0, R4  ; fd
BL              listen
CMN             R0, #1
BEQ             loc_10B2C
MOVW            R8, #:lower16:stderr
MOVW            R5, #:lower16:aWaitingForNewC ; "waiting for new connection..."
MOVW            R7, #:lower16:aANewConnection ; "A new connection occurs!"
MOVW            R6, #:lower16:sub_10C8C
MOVT            R8, #:upper16:stderr
MOVT            R5, #:upper16:aWaitingForNewC ; "waiting for new connection..."
MOVT            R7, #:upper16:aANewConnection ; "A new connection occurs!"
MOVT            R6, #:upper16:sub_10C8C

loc_10A24               ; s
MOV             R0, R5
BL              puts
MOV             R3, #0x10
ADD             R2, SP, #0x30+addr_len ; addr_len
ADD             R1, SP, #0x30+var_10 ; addr
MOV             R0, R4  ; fd
STR             R3, [SP,#0x30+addr_len]
BL              accept
CMN             R0, #1
STR             R0, [SP,#0x30+arg]
BEQ             loc_10AC4
MOV             R0, R7  ; s
BL              puts
ADD             R3, SP, #0x30+arg ; arg
MOV             R2, R6  ; start_routine
MOV             R1, #0  ; attr
ADD             R0, SP, #0x30+newthread ; newthread
BL              pthread_create
CMN             R0, #1
BNE             loc_10A24
MOVW            R0, #:lower16:aPthreadCreateE ; "pthread_create error!\n"
LDR             R3, [R8] ; s
MOV             R2, #0x16 ; n
MOV             R1, #1  ; size
MOVT            R0, #:upper16:aPthreadCreateE ; "pthread_create error!\n"
BL              fwrite
MOV             R0, R4  ; fd
MOV             R1, #1  ; how
BL              shutdown
CMN             R0, #1
BEQ             loc_10AF4
MOV             R0, #aServerShutsDow ; "Server shuts down"
BL              puts
MOV             R0, #0

loc_10AB0
ADD             SP, SP, #0x30 ; '0'
POP             {R4-R8,PC}

loc_10AB8
LDR             R0, [R6,#4]
BL              sub_10EB8
B               loc_10AB0

loc_10AC4
MOVW            R0, #:lower16:aAcceptError ; "Accept error!\n"
LDR             R3, [R8] ; s
MOV             R2, #0xE ; n
MOV             R1, #1  ; size
MOVT            R0, #:upper16:aAcceptError ; "Accept error!\n"
BL              fwrite
B               loc_10A24

loc_10AE0
MOV             R0, #aCannotFindComm ; "Cannot Find Command!\r"
BL              puts
MOV             R0, #0xFFFFFFFF
B               loc_10AB0

loc_10AF4
MOVW            R1, #:lower16:aUpdateDaemonC ; "update-daemon.c"
MOVW            R0, #:lower16:aRet1 ; "ret != -1"
MOVT            R1, #:upper16:aUpdateDaemonC ; "update-daemon.c"
MOVT            R0, #:upper16:aRet1 ; "ret != -1"
LDR             R3, =function ; "ProcessServer"
MOV             R2, #0xCE ; line
BL              __assert_fail

loc_10B10
MOVW            R1, #:lower16:aUpdateDaemonC ; "update-daemon.c"
MOVW            R0, #:lower16:aSockfdServer1 ; "sockfd_server != -1"
MOVT            R1, #:upper16:aUpdateDaemonC ; "update-daemon.c"
MOVT            R0, #:upper16:aSockfdServer1 ; "sockfd_server != -1"
LDR             R3, =function ; "ProcessServer"
MOV             R2, #0xA4 ; line
BL              __assert_fail

loc_10B2C
MOVW            R3, #:lower16:stderr
MOVW            R0, #:lower16:aListenError ; "listen error!\n"
MOVT            R3, #:upper16:stderr
MOVT            R0, #:upper16:aListenError ; "listen error!\n"
LDR             R3, [R3] ; s
MOV             R2, #0xE ; n
MOV             R1, #1  ; size
BL              fwrite
MOV             R0, #1  ; status
BL              exit

loc_10B54
MOVW            R3, #:lower16:stderr
MOVW            R0, #:lower16:aBindError ; "bind error!\n"
MOVT            R3, #:upper16:stderr
MOVT            R0, #:upper16:aBindError ; "bind error!\n"
LDR             R3, [R3] ; s
MOV             R2, #0xC ; n
MOV             R1, #1  ; size
BL              fwrite
MOV             R0, #1  ; status
BL              exit
; End of function main

off_10B7C DCD function  ; "ProcessServer"
CODE16


; Attributes: noreturn info_from_lumina

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT _start
_start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(nullsub_1+1)
PUSH.W          {R12}   ; fini
LDR             R0, =main ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function _start

off_10BA4 DCD nullsub_1+1
off_10BA8 DCD main
off_10BAC DCD init+1
CODE32



; int sub_10BB0()
sub_10BB0
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x10BC0)
LDR             R2, =(__gmon_start___ptr_0 - 0x22000)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function sub_10BB0

off_10BCC DCD _GLOBAL_OFFSET_TABLE_ - 0x10BC0
off_10BD0 DCD __gmon_start___ptr_0 - 0x22000
CODE16


; Attributes: info_from_lumina

; int deregister_tm_clones()
deregister_tm_clones
MOVW            R0, #0x2094
MOVW            R3, #0x2094
MOVT            R0, #2
MOVT            R3, #2
CMP             R3, R0
BEQ             locret_10BF4
MOV             R3, #0
CBZ             R3, locret_10BF4
BX              R3

locret_10BF4
BX              LR
; End of function deregister_tm_clones

ALIGN 4


; Attributes: info_from_lumina

; int register_tm_clones()
register_tm_clones
MOVW            R0, #0x2094
MOVW            R1, #0x2094
MOVT            R0, #2
MOVT            R1, #2
SUBS            R1, R1, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_10C20
MOV             R3, #0
CBZ             R3, locret_10C20
BX              R3

locret_10C20
BX              LR
; End of function register_tm_clones

ALIGN 4



; int sub_10C24()
sub_10C24
PUSH            {R4,LR}
MOV             R4, #byte_2209C
LDRB            R3, [R4]
CBNZ            R3, locret_10C3A
BL              deregister_tm_clones
MOVS            R3, #1
STRB            R3, [R4]

locret_10C3A
POP             {R4,PC}
; End of function sub_10C24

; [00000002 BYTES: COLLAPSED FUNCTION j_register_tm_clones]
ALIGN 0x10
CODE32



; int __fastcall sub_10C40(const char *)
sub_10C40
PUSH            {R4,LR}
MOV             R4, R0
BL              strlen
SUB             R1, R4, #2
SUB             R12, R0, #1
ADD             R1, R1, R0
SUB             R2, R4, #1
MOV             R0, #0
B               loc_10C74

loc_10C64
LDRB            R0, [R2,#1]!
ADD             R0, R0, R3
ADD             R0, R0, R0,LSL#2
MOV             R0, R0,LSL#1

loc_10C74
CMP             R2, R1
SUB             R3, R0, #0x30 ; '0'
BNE             loc_10C64
LDRB            R0, [R4,R12]
ADD             R0, R0, R3
POP             {R4,PC}
; End of function sub_10C40



; Attributes: noreturn

; void __fastcall __noreturn sub_10C8C(int *)
sub_10C8C

var_810= -0x810
buf= -0x800
s= -0x7FC
command= -0x400
var_3F0= -0x3F0

PUSH            {R4-R6,LR}
MOV             R5, R0
MOVW            R0, #:lower16:aNewThread ; "New Thread!\r"
SUB             SP, SP, #0x810
MOV             R4, #0
MOVT            R0, #:upper16:aNewThread ; "New Thread!\r"
BL              puts
MOV             R1, R4  ; c
MOV             R2, #0x3FC ; n
ADD             R0, SP, #0x810+s ; s
STR             R4, [SP,#0x810+buf]
BL              memset
LDR             R6, [R5]
MOV             R2, #0x400 ; nbytes
ADD             R1, SP, #0x810+buf ; buf
MOV             R0, R6  ; fd
BL              read
MOVW            R0, #:lower16:aRecvS ; "Recv:'%s'\r\n"
ADD             R1, SP, #0x810+buf
MOVT            R0, #:upper16:aRecvS ; "Recv:'%s'\r\n"
BL              printf
MOV             R1, R4  ; type
ADD             R0, SP, #0x810+buf ; name
BL              access
CMP             R0, R4
BNE             loc_10E2C
LDRB            R4, [SP,#0x810+buf]
CMP             R4, #0
BEQ             loc_10D58
BL              __ctype_b_loc
LDR             R1, [R0]
ADD             R2, SP, #0x810+buf

loc_10D0C
MOV             R3, R4,LSL#1
LDRH            R0, [R1,R3]
ANDS            R5, R0, #8
BNE             loc_10D4C
CMP             R4, #0x5F ; '_'
BEQ             loc_10D4C
SUB             R4, R4, #0x2D ; '-'
CMP             R4, #2
BLS             loc_10D4C
MOV             R0, #aInvalidClientC ; "Invalid client content."
BL              puts
MOV             R0, R6  ; fd
BL              close
MOV             R0, R5  ; retval
BL              pthread_exit

loc_10D4C
LDRB            R4, [R2,#1]!
CMP             R4, #0
BNE             loc_10D0C

loc_10D58
MOVW            LR, #:lower16:aUsrSbinUpdatep ; "/usr/sbin/updateporc.sh "
ADD             R12, SP, #0x810+command
MOVT            LR, #:upper16:aUsrSbinUpdatep ; "/usr/sbin/updateporc.sh "
LDM             LR!, {R0-R3} ; "/usr/sbin/updateporc.sh "
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "porc.sh "
STM             R12!, {R0,R1}
ADD             R0, SP, #0x810+var_3F0
STRB            R2, [R12]
MOV             R1, #0  ; c
MOVW            R2, #0x3E7 ; n
ADD             R0, R0, #9 ; s
BL              memset
ADD             R0, SP, #0x810+var_3F0
ADD             R1, SP, #0x810+buf ; src
ADD             R0, R0, #8 ; dest
BL              strcpy
MOVW            R3, #:lower16:aComeOnWuhan ; "Come On WUHAN"
MOV             R12, SP
MOVT            R3, #:upper16:aComeOnWuhan ; "Come On WUHAN"
LDM             R3, {R0-R3} ; "Come On WUHAN"
STM             R12!, {R0-R2}
ADD             R0, SP, #0x810+command ; command
STRH            R3, [R12]
BL              system
CMN             R0, #1
MOV             R4, R0
BEQ             loc_10E74
MOVW            R0, #:lower16:aSystemStatusD ; "system status:[%d]\r\n"
MOV             R1, R4
MOVT            R0, #:upper16:aSystemStatusD ; "system status:[%d]\r\n"
UBFX            R5, R4, #8, #8
BL              printf
TST             R4, #0x7F
BNE             loc_10E4C
CMP             R5, #0
BNE             loc_10E90
MOV             R0, #aShellExecSucce ; "Shell Exec Successfully!\r"
BL              puts
MOV             R3, #0x303032
STR             R3, [SP,#0x810+var_810]

loc_10E04               ; s
MOV             R0, SP
BL              strlen
MOV             R1, SP  ; buf
ADD             R2, R0, #1 ; n
MOV             R0, R6  ; fd
BL              write
MOV             R0, R6  ; fd
BL              close
MOV             R0, #0  ; retval
BL              pthread_exit

loc_10E2C
MOVW            R0, #:lower16:aFileDoesNotExi ; "File does not exist: %s\n"
ADD             R1, SP, #0x810+buf
MOVT            R0, #:upper16:aFileDoesNotExi ; "File does not exist: %s\n"
BL              printf
MOV             R0, R6  ; fd
BL              close
MOV             R0, R4  ; retval
BL              pthread_exit

loc_10E4C
MOVW            R0, #:lower16:aOtherExitRetD ; "Other Exit Ret[%d]\r\n"
MOV             R1, R5
MOVT            R0, #:upper16:aOtherExitRetD ; "Other Exit Ret[%d]\r\n"
BL              printf
MOVW            R1, #:lower16:a6D ; "6%d"
MOV             R2, R5
MOV             R0, SP  ; s
MOVT            R1, #:upper16:a6D ; "6%d"
BL              sprintf
B               loc_10E04

loc_10E74
MOV             R0, #aSystemErr ; "system err!\r"
BL              puts
MOV             R3, #0x303035
STR             R3, [SP,#0x810+var_810]
B               loc_10E04

loc_10E90
MOVW            R0, #:lower16:aShellExecuteFa ; "Shell Execute Failed, Ret[%d]\r\n"
MOV             R1, R5
MOVT            R0, #:upper16:aShellExecuteFa ; "Shell Execute Failed, Ret[%d]\r\n"
BL              printf
MOVW            R1, #:lower16:aD ; "%d"
MOV             R2, R5
MOV             R0, SP  ; s
MOVT            R1, #:upper16:aD ; "%d"
BL              sprintf
B               loc_10E04
; End of function sub_10C8C




; int __fastcall sub_10EB8(const char *)
sub_10EB8

var_410= -0x410
var_40E= -0x40E
var_40A= -0x40A
var_406= -0x406
var_402= -0x402
buf= -0x400
s= -0x3FC
var_s0=  0

PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
SUB             SP, SP, #0x410
BEQ             loc_10FA0
MOVW            R0, #:lower16:a127001 ; "127.0.0.1"
MOV             R4, #0
MOV             R6, #2
MOVT            R0, #:upper16:a127001 ; "127.0.0.1"
STRH            R6, [SP,#0x410+var_410]
STR             R4, [SP,#0x410+var_40A]
STR             R4, [SP,#0x410+var_406]
STRH            R4, [SP,#0x410+var_402]
STR             R4, [SP,#0x410+var_40E]
BL              inet_addr
STR             R0, [SP,#0x410+var_40E+2]
MOV             R0, #a22322 ; "22322"
BL              sub_10C40
MOV             R2, R4  ; protocol
STRH            R0, [SP,#0x410+var_40E]
MOV             R1, #1  ; type
MOV             R0, R6  ; domain
BL              socket
SUBS            R6, R0, #0
BLT             loc_10FA8
MOV             R1, SP  ; addr
MOV             R2, #0x10 ; len
BL              connect
CMP             R0, #0
BLT             loc_10FBC
MOV             R0, R5  ; s
BL              strlen
MOV             R3, R4  ; flags
ADD             R2, R0, #1 ; n
MOV             R1, R5  ; buf
MOV             R0, R6  ; fd
BL              send
MOV             R2, #0x3FC ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x410+s ; s
STR             R4, [SP,#0x410+buf]
BL              memset
MOV             R0, R6  ; fd
ADD             R1, SP, #0x410+buf ; buf
MOV             R3, R4  ; flags
MOV             R2, #0x400 ; n
BL              recv
CMP             R0, #0
BLE             loc_10FA0
ADD             R3, SP, #0x410+var_s0
ADD             R3, R3, R0
ADD             R0, SP, #0x410+buf
STRB            R4, [R3,#-0x400]
BL              sub_10C40
CMP             R0, #0xC8
MOVEQ           R0, #0

loc_10F98
ADD             SP, SP, #0x410
POP             {R4-R6,PC}

loc_10FA0
MOV             R0, #0xFFFFFFFD
B               loc_10F98

loc_10FA8
MOV             R0, #aSocketErr ; "socket err:"
BL              perror
MOV             R0, #0xFFFFFFFF
B               loc_10F98

loc_10FBC
MOV             R0, #aConnectErr ; "connect err:"
BL              perror
MOV             R0, #0xFFFFFFFE
B               loc_10F98
; End of function sub_10EB8

CODE16



; int __fastcall init(int, int, int)
init
PUSH.W          {R3-R9,LR}
MOV             R7, R0
LDR             R6, =(off_21F0C - 0x10FE2)
MOV             R8, R1
MOV             R9, R2
LDR             R5, =(off_21F08 - 0x10FE8)
ADD             R6, PC  ; off_21F0C
BLX             .init_proc
ADD             R5, PC  ; off_21F08
SUBS            R6, R6, R5
ASRS            R6, R6, #2
BEQ             locret_11000
MOVS            R4, #0

loc_10FEE
ADDS            R4, #1
LDR.W           R3, [R5],#4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R7
BLX             R3
CMP             R6, R4
BNE             loc_10FEE

locret_11000
POP.W           {R3-R9,PC}
; End of function init

off_11004 DCD off_21F0C - 0x10FE2
off_11008 DCD off_21F08 - 0x10FE8
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
ALIGN 0x10
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x11010
CODE32



; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY
; ORG 0x11018
DCB    1
DCB    0
DCB    2
DCB    0
aUsrSbinUpdatep DCB "/usr/sbin/updateporc.sh ",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; const char function[]
function DCB "ProcessServer",0
ALIGN 4
aNewThread DCB "New Thread!",0xD,0
ALIGN 4
aRecvS DCB "Recv:'%s'",0xD,0xA,0
aFileDoesNotExi DCB "File does not exist: %s",0xA,0
ALIGN 4
aInvalidClientC DCB "Invalid client content.",0
aSystemErr DCB "system err!",0xD,0
ALIGN 4
aSystemStatusD DCB "system status:[%d]",0xD,0xA,0
ALIGN 4
aShellExecSucce DCB "Shell Exec Successfully!",0xD,0
ALIGN 0x10
aShellExecuteFa DCB "Shell Execute Failed, Ret[%d]",0xD
DCB 0xA,0
aD DCB "%d",0
ALIGN 4
aOtherExitRetD DCB "Other Exit Ret[%d]",0xD,0xA,0
ALIGN 4
a6D DCB "6%d",0
aComeOnWuhan DCB "Come On WUHAN",0
ALIGN 0x10
a127001 DCB "127.0.0.1",0
ALIGN 4
a22322 DCB "22322",0
ALIGN 4
aSocketErr DCB "socket err:",0
aConnectErr DCB "connect err:",0
ALIGN 0x10
aDaemonc DCB "daemonc",0
aDaemons DCB "daemons",0
aUpdateDaemonC DCB "update-daemon.c",0
aSockfdServer1 DCB "sockfd_server != -1",0
aWillListeningT DCB "Will Listening To Port[%d]",0xD,0xA
DCB 0
ALIGN 4
aBindError DCB "bind error!",0xA,0
ALIGN 4
aListenError DCB "listen error!",0xA,0
ALIGN 4
aWaitingForNewC DCB "waiting for new connection...",0
ALIGN 4
aAcceptError DCB "Accept error!",0xA,0
ALIGN 4
aANewConnection DCB "A new connection occurs!",0
ALIGN 0x10
aPthreadCreateE DCB "pthread_create error!",0xA,0
ALIGN 4
aRet1 DCB "ret != -1",0
ALIGN 4
aServerShutsDow DCB "Server shuts down",0
ALIGN 4
aCannotFindComm DCB "Cannot Find Command!",0xD,0
ALIGN 0x10
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x11650
unk_11650 DCB 0x30 ; 0
DCB 0xF5
DCB 0xFF
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x11658
DCB    0
DCB    0
DCB    0
DCB    0
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x21F08
off_21F08 DCD j_register_tm_clones+1
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x21F0C
off_21F0C DCD sub_10C24+1
; .fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x21F10
stru_21F10 Elf32_Dyn <1, <1>> ; DT_NEEDED libpthread.so.0
Elf32_Dyn <1, <0x87>>   ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x1079C>> ; DT_INIT
Elf32_Dyn <0xD, <0x11010>> ; DT_FINI
Elf32_Dyn <0x19, <0x21F08>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x21F0C>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x101B4>> ; DT_HASH
Elf32_Dyn <5, <0x104BC>> ; DT_STRTAB
Elf32_Dyn <6, <0x1028C>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0x150>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x22000>> ; DT_PLTGOT
Elf32_Dyn <2, <0xF8>>   ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x106A4>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x10694>> ; DT_REL
Elf32_Dyn <0x12, <0x10>> ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x10654>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <2>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x1060C>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x40
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x22000
_GLOBAL_OFFSET_TABLE_ DCD stru_21F10
DCD 0
off_22008 DCD 0
strstr_ptr DCD __imp_strstr
printf_ptr DCD __imp_printf
read_ptr DCD __imp_read
perror_ptr DCD __imp_perror
accept_ptr DCD __imp_accept
fwrite_ptr DCD __imp_fwrite
strcpy_ptr DCD __imp_strcpy
pthread_create_ptr DCD __imp_pthread_create
puts_ptr DCD __imp_puts
__libc_start_main_ptr DCD __imp___libc_start_main
system_ptr DCD __imp_system
__gmon_start___ptr DCD __imp___gmon_start__
__ctype_b_loc_ptr DCD __imp___ctype_b_loc
exit_ptr DCD __imp_exit
strlen_ptr DCD __imp_strlen
bind_ptr DCD __imp_bind
memset_ptr DCD __imp_memset
write_ptr DCD __imp_write
access_ptr DCD __imp_access
pthread_exit_ptr DCD __imp_pthread_exit
shutdown_ptr DCD __imp_shutdown
listen_ptr DCD __imp_listen
sprintf_ptr DCD __imp_sprintf
socket_ptr DCD __imp_socket
inet_addr_ptr DCD __imp_inet_addr
abort_ptr DCD __imp_abort
recv_ptr DCD __imp_recv
close_ptr DCD __imp_close
send_ptr DCD __imp_send
connect_ptr DCD __imp_connect
__assert_fail_ptr DCD __imp___assert_fail
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x2208C
ALIGN 0x10
DCB    0
DCB    0
DCB    0
DCB    0
; .data ends


; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x22094
% 1
% 1
% 1
% 1
; LOAD ends


; Segment type: Uninitialized
AREA .bss, DATA, ALIGN=3
; ORG 0x22098
EXPORT stderr
stderr % 4              ; Copy of shared data
byte_2209C % 1
ALIGN 0x10
; .bss ends


; Segment type: Externs
; char *strstr(const char *haystack, const char *needle)
IMPORT __imp_strstr
; int printf(const char *format, ...)
IMPORT __imp_printf
; ssize_t read(int fd, void *buf, size_t nbytes)
IMPORT __imp_read
; void perror(const char *s)
IMPORT __imp_perror
; int accept(int fd, struct sockaddr *addr, socklen_t *addr_len)
IMPORT __imp_accept
; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
IMPORT __imp_fwrite
; char *strcpy(char *dest, const char *src)
IMPORT __imp_strcpy
; int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg)
IMPORT __imp_pthread_create
; int puts(const char *s)
IMPORT __imp_puts
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; int system(const char *command)
IMPORT __imp_system
; const unsigned __int16 **__ctype_b_loc(void)
IMPORT __imp___ctype_b_loc
; void exit(int status)
IMPORT __imp_exit
; size_t strlen(const char *s)
IMPORT __imp_strlen
; int bind(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_bind
; void *memset(void *s, int c, size_t n)
IMPORT __imp_memset
; ssize_t write(int fd, const void *buf, size_t n)
IMPORT __imp_write
; int access(const char *name, int type)
IMPORT __imp_access
; void pthread_exit(void *retval)
IMPORT __imp_pthread_exit
; int shutdown(int fd, int how)
IMPORT __imp_shutdown
; int listen(int fd, int n)
IMPORT __imp_listen
; int sprintf(char *s, const char *format, ...)
IMPORT __imp_sprintf
; int socket(int domain, int type, int protocol)
IMPORT __imp_socket
; in_addr_t inet_addr(const char *cp)
IMPORT __imp_inet_addr
; void abort(void)
IMPORT __imp_abort
; ssize_t recv(int fd, void *buf, size_t n, int flags)
IMPORT __imp_recv
; int close(int fd)
IMPORT __imp_close
; ssize_t send(int fd, const void *buf, size_t n, int flags)
IMPORT __imp_send
; int connect(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_connect
; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
IMPORT __imp___assert_fail
IMPORT _ITM_deregisterTMCloneTable, WEAK
IMPORT __imp___gmon_start__, WEAK
IMPORT _ITM_registerTMCloneTable, WEAK

END _start

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 7423B67E7FF4C8614A34A21DF2E99AF567F9C7A139A65795AE502AB00AF76CD2
; Input MD5    : 53BBFDE16E1D82E6833FC909C8C0DD30
; Input CRC32  : AA2FA5C1
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/hashsource_antminer_S21x/bitmain_firmware/FR-1.1(250416-S21 Hyd.)/minerfs.no_header.image_extract/usr/sbin/dropbear
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libutil.so.1'
; Needed Library 'libcrypt.so.1'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD start+1             ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x2C564             ; SHT file offset
DCD 0x5000400           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 9                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x1A                ; Number of entries in SHT
DCW 0x19                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0x2B0F4             ; File offset
DCD unk_3B0F4           ; Virtual address
DCD 0x3B0F4             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x154               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x10154             ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0x2B100             ; Size in file image
DCD 0x2B100             ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0x2BF00             ; File offset
DCD off_4BF00           ; Virtual address
DCD 0x4BF00             ; Physical address
DCD 0x544               ; Size in file image
DCD 0xD18               ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0x2BF08             ; File offset
DCD stru_4BF08          ; Virtual address
DCD 0x4BF08             ; Physical address
DCD 0xF8                ; Size in file image
DCD 0xF8                ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x170               ; File offset
DCD dword_10170         ; Virtual address
DCD 0x10170             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHT Entry 8
DCD 0x6474E552          ; Type: RO-AFTER
DCD 0x2BF00             ; File offset
DCD off_4BF00           ; Virtual address
DCD 0x4BF00             ; Physical address
DCD 0x100               ; Size in file image
DCD 0x100               ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10154
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10170 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 3, 2, 0          ; ABI: Linux 3.2.0
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0xEB, 0x3D, 0x5A, 0xB6, 0x92, 2, 0x6B ; Desc
DCB 0x1F, 0x71, 7, 0xCD, 0xD9, 0x34, 0xF8
DCB 0x15, 0x35, 0x66, 0x16, 0xFE, 8
; ELF Hash Table
elf_hash_nbucket DCD 0x83
elf_hash_nchain DCD 0x8B
elf_hash_bucket DCD 0, 0x3A, 0x51, 0x71, 0x5A, 0, 0, 0x30
DCD 9, 0x6D, 0x45, 0x67, 0x43, 0x59, 0x23
DCD 0, 0, 0, 0x12, 0x37, 0, 0, 0, 1, 0x50
DCD 0, 0x44, 0, 0x60, 0, 0, 0, 0, 0x8A, 0
DCD 0x66, 0, 0x73, 0x5F, 0x89, 0x21, 0x6E
DCD 0x7F, 0x86, 0x62, 0, 0, 0x74, 0, 0, 0x26
DCD 0, 0x3E, 0x2B, 0x2E, 0x20, 0x10, 0x4F
DCD 0xE, 0, 0x38, 0x2D, 0x17, 0x68, 0x84
DCD 0x80, 0x57, 0, 0x70, 0, 0x22, 0x63, 0x1E
DCD 0, 0x83, 0x56, 0x58, 0, 0, 0, 0x88, 0x77
DCD 0x72, 0, 0x81, 0, 0x55, 0x87, 0x78, 0x4E
DCD 0x7D, 0x7E, 0x7A, 0, 0x49, 0, 0, 0x32
DCD 0xB, 0x54, 0, 0x2F, 0x34, 0, 0x85, 0
DCD 0x3B, 0x75, 0, 0, 0, 0x5D, 0x47, 0xF
DCD 0, 0x31, 0x40, 0x52, 0, 0x6A, 0x6C, 0x7C
DCD 0x7B, 0, 0, 0, 0x76, 0x2C, 0, 0x69, 0x1C
elf_hash_chain DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCD 0, 0, 0, 0, 0, 0, 0, 0x13, 0, 0, 4, 0
DCD 0, 0, 0, 0, 0, 0, 0x14, 0, 0x15, 0, 0
DCD 0, 0, 0, 0, 0, 0x1B, 0, 5, 0x1F, 0, 0x28
DCD 0, 0, 0xC, 0, 0, 0x29, 0x1D, 0x19, 0
DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x11
DCD 0, 0, 0x27, 0, 0x16, 0, 0, 0xD, 0x25
DCD 2, 0, 0, 0x2A, 0, 0x42, 0x3D, 0, 0x18
DCD 0x46, 0, 0, 0x4C, 0, 0x33, 0xA, 0, 0
DCD 0, 0x48, 0x4A, 0x3F, 0, 0x4D, 0x1A, 0x36
DCD 0, 0, 0x4B, 0x24, 0, 0, 0x5B, 0x6B, 0x3C
DCD 0, 0x61, 0, 0x64, 0, 0, 0x53, 6, 0, 8
DCD 0, 0, 7, 0x6F, 0, 0, 0, 0x5C, 0x79, 0x65
DCD 0x39, 0x41, 0x82, 0, 0x35, 0x5E, 3
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aCalloc - byte_10EA4, 0, 0, \ ; "calloc"
           0x12, 0, 0>
Elf32_Sym <aLogin - byte_10EA4, 0, 0, \ ; "login"
           0x12, 0, 0>
Elf32_Sym <aRaise - byte_10EA4, 0, 0, \ ; "raise"
           0x12, 0, 0>
Elf32_Sym <aGetpwnam - byte_10EA4, 0, 0,\ ; "getpwnam"
           0x12, 0, 0>
Elf32_Sym <aFsync - byte_10EA4, 0, 0, \ ; "fsync"
           0x12, 0, 0>
Elf32_Sym <aStrcmp - byte_10EA4, 0, 0, \ ; "strcmp"
           0x12, 0, 0>
Elf32_Sym <aGetpwuid - byte_10EA4, 0, 0,\ ; "getpwuid"
           0x12, 0, 0>
Elf32_Sym <aItmDeregistert - byte_10EA4,\ ; "_ITM_deregisterTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aSetsockopt - byte_10EA4, 0, \ ; "setsockopt"
           0, 0x12, 0, 0>
Elf32_Sym <aClearenv - byte_10EA4, 0, 0,\ ; "clearenv"
           0x12, 0, 0>
Elf32_Sym <aFprintf+1 - byte_10EA4, 0, \ ; "printf"
           0, 0x12, 0, 0>
Elf32_Sym <aGetusershell - byte_10EA4, \ ; "getusershell"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSetrlimit64 - byte_10EA4, 0,\ ; "setrlimit64"
           0, 0x12, 0, 0>
Elf32_Sym <aRead - byte_10EA4, 0, 0, \ ; "read"
           0x12, 0, 0>
Elf32_Sym <aGetuid - byte_10EA4, 0, 0, \ ; "getuid"
           0x12, 0, 0>
Elf32_Sym <aGetspnam - byte_10EA4, 0, 0,\ ; "getspnam"
           0x12, 0, 0>
Elf32_Sym <aMemmove - byte_10EA4, 0, 0, \ ; "memmove"
           0x12, 0, 0>
Elf32_Sym <aFree - byte_10EA4, 0, 0, \ ; "free"
           0x12, 0, 0>
Elf32_Sym <aGaiStrerror - byte_10EA4, 0,\ ; "gai_strerror"
           0, 0x12, 0, 0>
Elf32_Sym <aFgets - byte_10EA4, 0, 0, \ ; "fgets"
           0x12, 0, 0>
Elf32_Sym <aExit - byte_10EA4, 0, 0, \ ; "_exit"
           0x12, 0, 0>
Elf32_Sym <aMemcpy - byte_10EA4, 0, 0, \ ; "memcpy"
           0x12, 0, 0>
Elf32_Sym <aEndusershell - byte_10EA4, \ ; "endusershell"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSignal - byte_10EA4, 0, 0, \ ; "signal"
           0x12, 0, 0>
Elf32_Sym <aStrftime+4 - byte_10EA4, 0, \ ; "time"
           0, 0x12, 0, 0>
Elf32_Sym <aRmdir - byte_10EA4, 0, 0, \ ; "rmdir"
           0x12, 0, 0>
Elf32_Sym <aMemcmp - byte_10EA4, 0, 0, \ ; "memcmp"
           0x12, 0, 0>
Elf32_Sym <aInetNtoa - byte_10EA4, 0, 0,\ ; "inet_ntoa"
           0x12, 0, 0>
Elf32_Sym <aSelect - byte_10EA4, 0, 0, \ ; "select"
           0x12, 0, 0>
Elf32_Sym <aStrdup - byte_10EA4, 0, 0, \ ; "strdup"
           0x12, 0, 0>
Elf32_Sym <aUnlink - byte_10EA4, 0, 0, \ ; "unlink"
           0x12, 0, 0>
Elf32_Sym <aDup2 - byte_10EA4, 0, 0, \ ; "dup2"
           0x12, 0, 0>
Elf32_Sym <aRealloc - byte_10EA4, 0, 0, \ ; "realloc"
           0x12, 0, 0>
Elf32_Sym <aInitgroups - byte_10EA4, 0, \ ; "initgroups"
           0, 0x12, 0, 0>
Elf32_Sym <aChdir - byte_10EA4, 0, 0, \ ; "chdir"
           0x12, 0, 0>
Elf32_Sym <aGeteuid - byte_10EA4, 0, 0, \ ; "geteuid"
           0x12, 0, 0>
Elf32_Sym <aAccept - byte_10EA4, 0, 0, \ ; "accept"
           0x12, 0, 0>
Elf32_Sym <aSeteuid - byte_10EA4, 0, 0, \ ; "seteuid"
           0x12, 0, 0>
Elf32_Sym <aSigaction - byte_10EA4, 0, \ ; "sigaction"
           0, 0x12, 0, 0>
Elf32_Sym <aStderr - byte_10EA4, stderr,\ ; "stderr"
           4, 0x11, 0, 0x17>
Elf32_Sym <aFwrite - byte_10EA4, 0, 0, \ ; "fwrite"
           0x12, 0, 0>
Elf32_Sym <aStrcat - byte_10EA4, 0, 0, \ ; "strcat"
           0x12, 0, 0>
Elf32_Sym <aGetsockopt - byte_10EA4, 0, \ ; "getsockopt"
           0, 0x12, 0, 0>
Elf32_Sym <aIoctl - byte_10EA4, 0, 0, \ ; "ioctl"
           0x12, 0, 0>
Elf32_Sym <aUsleep - byte_10EA4, 0, 0, \ ; "usleep"
           0x12, 0, 0>
Elf32_Sym <aWaitpid - byte_10EA4, 0, 0, \ ; "waitpid"
           0x12, 0, 0>
Elf32_Sym <aTcsetattr - byte_10EA4, 0, \ ; "tcsetattr"
           0, 0x12, 0, 0>
Elf32_Sym <aStrcpy - byte_10EA4, 0, 0, \ ; "strcpy"
           0x12, 0, 0>
Elf32_Sym <aGettimeofday - byte_10EA4, \ ; "gettimeofday"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aDaemon - byte_10EA4, 0, 0, \ ; "daemon"
           0x12, 0, 0>
Elf32_Sym <aGethostname - byte_10EA4, 0,\ ; "gethostname"
           0, 0x12, 0, 0>
Elf32_Sym <aFopen64+1 - byte_10EA4, 0, \ ; "open64"
           0, 0x12, 0, 0>
Elf32_Sym <aFputs+1 - byte_10EA4, 0, 0, \ ; "puts"
           0x12, 0, 0>
Elf32_Sym <aSetgid - byte_10EA4, 0, 0, \ ; "setgid"
           0x12, 0, 0>
Elf32_Sym <aMalloc - byte_10EA4, 0, 0, \ ; "malloc"
           0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_10EA4, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGaiStrerror+4 - byte_10EA4, \ ; "strerror"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrftime - byte_10EA4, 0, 0,\ ; "strftime"
           0x12, 0, 0>
Elf32_Sym <aLocaltime - byte_10EA4, 0, \ ; "localtime"
           0, 0x12, 0, 0>
Elf32_Sym <aDirname - byte_10EA4, 0, 0, \ ; "dirname"
           0x12, 0, 0>
Elf32_Sym <aCtypeToupperLo - byte_10EA4,\ ; "__ctype_toupper_loc"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_10EA4, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aOpenpty - byte_10EA4, 0, 0, \ ; "openpty"
           0x12, 0, 0>
Elf32_Sym <aClock - byte_10EA4, 0, 0, \ ; "clock"
           0x12, 0, 0>
Elf32_Sym <aKill - byte_10EA4, 0, 0, \ ; "kill"
           0x12, 0, 0>
Elf32_Sym <aCtypeBLoc - byte_10EA4, 0, \ ; "__ctype_b_loc"
           0, 0x12, 0, 0>
Elf32_Sym <aGetpid - byte_10EA4, 0, 0, \ ; "getpid"
           0x12, 0, 0>
Elf32_Sym <aExit+1 - byte_10EA4, 0, 0, \ ; "exit"
           0x12, 0, 0>
Elf32_Sym <aSyscall - byte_10EA4, 0, 0, \ ; "syscall"
           0x12, 0, 0>
Elf32_Sym <aStrtoul - byte_10EA4, 0, 0, \ ; "strtoul"
           0x12, 0, 0>
Elf32_Sym <aTtyname - byte_10EA4, 0, 0, \ ; "ttyname"
           0x12, 0, 0>
Elf32_Sym <aStrlen - byte_10EA4, 0, 0, \ ; "strlen"
           0x12, 0, 0>
Elf32_Sym <aSetsid - byte_10EA4, 0, 0, \ ; "setsid"
           0x12, 0, 0>
Elf32_Sym <aStrchr - byte_10EA4, 0, 0, \ ; "strchr"
           0x12, 0, 0>
Elf32_Sym <aAtol - byte_10EA4, 0, 0, \ ; "atol"
           0x12, 0, 0>
Elf32_Sym <aFprintf - byte_10EA4, 0, 0, \ ; "fprintf"
           0x12, 0, 0>
Elf32_Sym <aChown - byte_10EA4, 0, 0, \ ; "chown"
           0x12, 0, 0>
Elf32_Sym <aStdin - byte_10EA4, stdin, \ ; "stdin"
           4, 0x11, 0, 0x17>
Elf32_Sym <aFcntl - byte_10EA4, 0, 0, \ ; "fcntl"
           0x12, 0, 0>
Elf32_Sym <aExecv - byte_10EA4, 0, 0, \ ; "execv"
           0x12, 0, 0>
Elf32_Sym <aErrnoLocation - byte_10EA4, \ ; "__errno_location"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrncasecmp - byte_10EA4, 0,\ ; "strncasecmp"
           0, 0x12, 0, 0>
Elf32_Sym <aVsnprintf+1 - byte_10EA4, 0,\ ; "snprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aIsoc99Sscanf - byte_10EA4, \ ; "__isoc99_sscanf"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aMkdir - byte_10EA4, 0, 0, \ ; "mkdir"
           0x12, 0, 0>
Elf32_Sym <aBind - byte_10EA4, 0, 0, \ ; "bind"
           0x12, 0, 0>
Elf32_Sym <aGetgid - byte_10EA4, 0, 0, \ ; "getgid"
           0x12, 0, 0>
Elf32_Sym <aGetgrouplist - byte_10EA4, \ ; "getgrouplist"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aMemset - byte_10EA4, 0, 0, \ ; "memset"
           0x12, 0, 0>
Elf32_Sym <aStrncpy - byte_10EA4, 0, 0, \ ; "strncpy"
           0x12, 0, 0>
Elf32_Sym <aXpgBasename - byte_10EA4, 0,\ ; "__xpg_basename"
           0, 0x12, 0, 0>
Elf32_Sym <aSetusershell - byte_10EA4, \ ; "setusershell"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFgetc - byte_10EA4, 0, 0, \ ; "fgetc"
           0x12, 0, 0>
Elf32_Sym <aUnlink+2 - byte_10EA4, 0, 0,\ ; "link"
           0x12, 0, 0>
Elf32_Sym <aFwrite+1 - byte_10EA4, 0, 0,\ ; "write"
           0x12, 0, 0>
Elf32_Sym <aRand - byte_10EA4, 0, 0, \ ; "rand"
           0x12, 0, 0>
Elf32_Sym <aSetegid - byte_10EA4, 0, 0, \ ; "setegid"
           0x12, 0, 0>
Elf32_Sym <aStdout - byte_10EA4, stdout,\ ; "stdout"
           4, 0x11, 0, 0x17>
Elf32_Sym <aWritev - byte_10EA4, 0, 0, \ ; "writev"
           0x12, 0, 0>
Elf32_Sym <aFclose - byte_10EA4, 0, 0, \ ; "fclose"
           0x12, 0, 0>
Elf32_Sym <aPipe - byte_10EA4, 0, 0, \ ; "pipe"
           0x12, 0, 0>
Elf32_Sym <aShutdown - byte_10EA4, 0, 0,\ ; "shutdown"
           0x12, 0, 0>
Elf32_Sym <aSigemptyset - byte_10EA4, 0,\ ; "sigemptyset"
           0, 0x12, 0, 0>
Elf32_Sym <aPopen - byte_10EA4, 0, 0, \ ; "popen"
           0x12, 0, 0>
Elf32_Sym <aLogout - byte_10EA4, 0, 0, \ ; "logout"
           0x12, 0, 0>
Elf32_Sym <aFork - byte_10EA4, 0, 0, \ ; "fork"
           0x12, 0, 0>
Elf32_Sym <aPutenv - byte_10EA4, 0, 0, \ ; "putenv"
           0x12, 0, 0>
Elf32_Sym <aGetnameinfo - byte_10EA4, 0,\ ; "getnameinfo"
           0, 0x12, 0, 0>
Elf32_Sym <aStrrchr - byte_10EA4, 0, 0, \ ; "strrchr"
           0x12, 0, 0>
Elf32_Sym <aListen - byte_10EA4, 0, 0, \ ; "listen"
           0x12, 0, 0>
Elf32_Sym <aCrypt - byte_10EA4, 0, 0, \ ; "crypt"
           0x12, 0, 0>
Elf32_Sym <aFputc - byte_10EA4, 0, 0, \ ; "fputc"
           0x12, 0, 0>
Elf32_Sym <aSyslog - byte_10EA4, 0, 0, \ ; "syslog"
           0x12, 0, 0>
Elf32_Sym <aSetuid - byte_10EA4, 0, 0, \ ; "setuid"
           0x12, 0, 0>
Elf32_Sym <aOpenlog - byte_10EA4, 0, 0, \ ; "openlog"
           0x12, 0, 0>
Elf32_Sym <aGetsockname - byte_10EA4, 0,\ ; "getsockname"
           0, 0x12, 0, 0>
Elf32_Sym <aVsnprintf - byte_10EA4, 0, \ ; "vsnprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aAtoi - byte_10EA4, 0, 0, \ ; "atoi"
           0x12, 0, 0>
Elf32_Sym <aFopen64 - byte_10EA4, 0, 0, \ ; "fopen64"
           0x12, 0, 0>
Elf32_Sym <aGetpeername - byte_10EA4, 0,\ ; "getpeername"
           0, 0x12, 0, 0>
Elf32_Sym <aExplicitBzero - byte_10EA4, \ ; "explicit_bzero"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFreeaddrinfo - byte_10EA4, \ ; "freeaddrinfo"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGetaddrinfo - byte_10EA4, 0,\ ; "getaddrinfo"
           0, 0x12, 0, 0>
Elf32_Sym <aSocket - byte_10EA4, 0, 0, \ ; "socket"
           0x12, 0, 0>
Elf32_Sym <aItmRegistertmc - byte_10EA4,\ ; "_ITM_registerTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aUmask - byte_10EA4, 0, 0, \ ; "umask"
           0x12, 0, 0>
Elf32_Sym <aChmod - byte_10EA4, 0, 0, \ ; "chmod"
           0x12, 0, 0>
Elf32_Sym <aXstat64 - byte_10EA4, 0, 0, \ ; "__xstat64"
           0x12, 0, 0>
Elf32_Sym <aFputs - byte_10EA4, 0, 0, \ ; "fputs"
           0x12, 0, 0>
Elf32_Sym <aStrncmp - byte_10EA4, 0, 0, \ ; "strncmp"
           0x12, 0, 0>
Elf32_Sym <aAbort - byte_10EA4, 0, 0, \ ; "abort"
           0x12, 0, 0>
Elf32_Sym <aLogwtmp - byte_10EA4, 0, 0, \ ; "logwtmp"
           0x12, 0, 0>
Elf32_Sym <aFclose+1 - byte_10EA4, 0, 0,\ ; "close"
           0x12, 0, 0>
Elf32_Sym <aConnect - byte_10EA4, 0, 0, \ ; "connect"
           0x12, 0, 0>
Elf32_Sym <aGetgrnam - byte_10EA4, 0, 0,\ ; "getgrnam"
           0x12, 0, 0>
Elf32_Sym <aAssertFail - byte_10EA4, 0, \ ; "__assert_fail"
           0, 0x12, 0, 0>
Elf32_Sym <aTcgetattr - byte_10EA4, 0, \ ; "tcgetattr"
           0, 0x12, 0, 0>
Elf32_Sym <aPclose - byte_10EA4, 0, 0, \ ; "pclose"
           0x12, 0, 0>
; ELF String Table
byte_10EA4 DCB 0
aLibutilSo1 DCB "libutil.so.1",0
aItmDeregistert DCB "_ITM_deregisterTMCloneTable",0
aGmonStart DCB "__gmon_start__",0
aItmRegistertmc DCB "_ITM_registerTMCloneTable",0
aLogwtmp DCB "logwtmp",0
aLogout DCB "logout",0
aOpenpty DCB "openpty",0
aLogin DCB "login",0
aLibcryptSo1 DCB "libcrypt.so.1",0
aCrypt DCB "crypt",0
aLibcSo6 DCB "libc.so.6",0
aSetuid DCB "setuid",0
aSocket DCB "socket",0
aXpgBasename DCB "__xpg_basename",0
aStrcpy DCB "strcpy",0
aExecv DCB "execv",0
aGaiStrerror DCB "gai_strerror",0
aStrncmp DCB "strncmp",0
aStrrchr DCB "strrchr",0
aPipe DCB "pipe",0
aIsoc99Sscanf DCB "__isoc99_sscanf",0
aConnect DCB "connect",0
aGetpwuid DCB "getpwuid",0
aInitgroups DCB "initgroups",0
aInetNtoa DCB "inet_ntoa",0
aGetusershell DCB "getusershell",0
aSignal DCB "signal",0
aStrncpy DCB "strncpy",0
aFork DCB "fork",0
aDaemon DCB "daemon",0
aUnlink DCB "unlink",0
aListen DCB "listen",0
aSelect DCB "select",0
aMkdir DCB "mkdir",0
aRealloc DCB "realloc",0
aFsync DCB "fsync",0
aClock DCB "clock",0
aAbort DCB "abort",0
aStdin DCB "stdin",0
aExit DCB "_exit",0
aPopen DCB "popen",0
aGetpid DCB "getpid",0
aKill DCB "kill",0
aStrdup DCB "strdup",0
aStrftime DCB "strftime",0
aChmod DCB "chmod",0
aAssertFail DCB "__assert_fail",0
aClearenv DCB "clearenv",0
aSyslog DCB "syslog",0
aFgetc DCB "fgetc",0
aFgets DCB "fgets",0
aGetpwnam DCB "getpwnam",0
aCalloc DCB "calloc",0
aStrlen DCB "strlen",0
aSigemptyset DCB "sigemptyset",0
aOpenlog DCB "openlog",0
aGetaddrinfo DCB "getaddrinfo",0
aMemset DCB "memset",0
aDirname DCB "dirname",0
aWritev DCB "writev",0
aRmdir DCB "rmdir",0
aErrnoLocation DCB "__errno_location",0
aTcsetattr DCB "tcsetattr",0
aBind DCB "bind",0
aChdir DCB "chdir",0
aRead DCB "read",0
aMemcmp DCB "memcmp",0
aGetnameinfo DCB "getnameinfo",0
aGetsockopt DCB "getsockopt",0
aTtyname DCB "ttyname",0
aDup2 DCB "dup2",0
aShutdown DCB "shutdown",0
aVsnprintf DCB "vsnprintf",0
aGetgrnam DCB "getgrnam",0
aPutenv DCB "putenv",0
aStdout DCB "stdout",0
aFputc DCB "fputc",0
aFputs DCB "fputs",0
aMemcpy DCB "memcpy",0
aEndusershell DCB "endusershell",0
aFclose DCB "fclose",0
aRand DCB "rand",0
aStrtoul DCB "strtoul",0
aSetsockopt DCB "setsockopt",0
aMalloc DCB "malloc",0
aStrcat DCB "strcat",0
aUmask DCB "umask",0
aRaise DCB "raise",0
aSetegid DCB "setegid",0
aGetpeername DCB "getpeername",0
aGetgid DCB "getgid",0
aGetspnam DCB "getspnam",0
aCtypeBLoc DCB "__ctype_b_loc",0
aStderr DCB "stderr",0
aIoctl DCB "ioctl",0
aSetrlimit64 DCB "setrlimit64",0
aSeteuid DCB "seteuid",0
aGetuid DCB "getuid",0
aExplicitBzero DCB "explicit_bzero",0
aStrncasecmp DCB "strncasecmp",0
aPclose DCB "pclose",0
aGethostname DCB "gethostname",0
aUsleep DCB "usleep",0
aChown DCB "chown",0
aFwrite DCB "fwrite",0
aGettimeofday DCB "gettimeofday",0
aSigaction DCB "sigaction",0
aGeteuid DCB "geteuid",0
aAtoi DCB "atoi",0
aAtol DCB "atol",0
aWaitpid DCB "waitpid",0
aLocaltime DCB "localtime",0
aStrchr DCB "strchr",0
aFprintf DCB "fprintf",0
aGetsockname DCB "getsockname",0
aSetusershell DCB "setusershell",0
aAccept DCB "accept",0
aTcgetattr DCB "tcgetattr",0
aCtypeToupperLo DCB "__ctype_toupper_loc",0
aSyscall DCB "syscall",0
aFreeaddrinfo DCB "freeaddrinfo",0
aSetsid DCB "setsid",0
aFcntl DCB "fcntl",0
aMemmove DCB "memmove",0
aFopen64 DCB "fopen64",0
aGetgrouplist DCB "getgrouplist",0
aSetgid DCB "setgid",0
aStrcmp DCB "strcmp",0
aLibcStartMain DCB "__libc_start_main",0
aFree DCB "free",0
aXstat64 DCB "__xstat64",0
aGlibc24 DCB "GLIBC_2.4",0
aGlibc225 DCB "GLIBC_2.25",0
aGlibc27 DCB "GLIBC_2.7",0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; calloc@@GLIBC_2.4
DCW 3                   ; login@@GLIBC_2.4
DCW 2                   ; raise@@GLIBC_2.4
DCW 2                   ; getpwnam@@GLIBC_2.4
DCW 2                   ; fsync@@GLIBC_2.4
DCW 2                   ; strcmp@@GLIBC_2.4
DCW 2                   ; getpwuid@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_deregisterTMCloneTable
DCW 2                   ; setsockopt@@GLIBC_2.4
DCW 2                   ; clearenv@@GLIBC_2.4
DCW 2                   ; printf@@GLIBC_2.4
DCW 2                   ; getusershell@@GLIBC_2.4
DCW 2                   ; setrlimit64@@GLIBC_2.4
DCW 2                   ; read@@GLIBC_2.4
DCW 2                   ; getuid@@GLIBC_2.4
DCW 2                   ; getspnam@@GLIBC_2.4
DCW 2                   ; memmove@@GLIBC_2.4
DCW 2                   ; free@@GLIBC_2.4
DCW 2                   ; gai_strerror@@GLIBC_2.4
DCW 2                   ; fgets@@GLIBC_2.4
DCW 2                   ; _exit@@GLIBC_2.4
DCW 2                   ; memcpy@@GLIBC_2.4
DCW 2                   ; endusershell@@GLIBC_2.4
DCW 2                   ; signal@@GLIBC_2.4
DCW 2                   ; time@@GLIBC_2.4
DCW 2                   ; rmdir@@GLIBC_2.4
DCW 2                   ; memcmp@@GLIBC_2.4
DCW 2                   ; inet_ntoa@@GLIBC_2.4
DCW 2                   ; select@@GLIBC_2.4
DCW 2                   ; strdup@@GLIBC_2.4
DCW 2                   ; unlink@@GLIBC_2.4
DCW 2                   ; dup2@@GLIBC_2.4
DCW 2                   ; realloc@@GLIBC_2.4
DCW 2                   ; initgroups@@GLIBC_2.4
DCW 2                   ; chdir@@GLIBC_2.4
DCW 2                   ; geteuid@@GLIBC_2.4
DCW 2                   ; accept@@GLIBC_2.4
DCW 2                   ; seteuid@@GLIBC_2.4
DCW 2                   ; sigaction@@GLIBC_2.4
DCW 2                   ; stderr@@GLIBC_2.4
DCW 2                   ; fwrite@@GLIBC_2.4
DCW 2                   ; strcat@@GLIBC_2.4
DCW 2                   ; getsockopt@@GLIBC_2.4
DCW 2                   ; ioctl@@GLIBC_2.4
DCW 2                   ; usleep@@GLIBC_2.4
DCW 2                   ; waitpid@@GLIBC_2.4
DCW 2                   ; tcsetattr@@GLIBC_2.4
DCW 2                   ; strcpy@@GLIBC_2.4
DCW 2                   ; gettimeofday@@GLIBC_2.4
DCW 2                   ; daemon@@GLIBC_2.4
DCW 2                   ; gethostname@@GLIBC_2.4
DCW 2                   ; open64@@GLIBC_2.4
DCW 2                   ; puts@@GLIBC_2.4
DCW 2                   ; setgid@@GLIBC_2.4
DCW 2                   ; malloc@@GLIBC_2.4
DCW 2                   ; __libc_start_main@@GLIBC_2.4
DCW 2                   ; strerror@@GLIBC_2.4
DCW 2                   ; strftime@@GLIBC_2.4
DCW 2                   ; localtime@@GLIBC_2.4
DCW 2                   ; dirname@@GLIBC_2.4
DCW 2                   ; __ctype_toupper_loc@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 3                   ; openpty@@GLIBC_2.4
DCW 2                   ; clock@@GLIBC_2.4
DCW 2                   ; kill@@GLIBC_2.4
DCW 2                   ; __ctype_b_loc@@GLIBC_2.4
DCW 2                   ; getpid@@GLIBC_2.4
DCW 2                   ; exit@@GLIBC_2.4
DCW 2                   ; syscall@@GLIBC_2.4
DCW 2                   ; strtoul@@GLIBC_2.4
DCW 2                   ; ttyname@@GLIBC_2.4
DCW 2                   ; strlen@@GLIBC_2.4
DCW 2                   ; setsid@@GLIBC_2.4
DCW 2                   ; strchr@@GLIBC_2.4
DCW 2                   ; atol@@GLIBC_2.4
DCW 2                   ; fprintf@@GLIBC_2.4
DCW 2                   ; chown@@GLIBC_2.4
DCW 2                   ; stdin@@GLIBC_2.4
DCW 2                   ; fcntl@@GLIBC_2.4
DCW 2                   ; execv@@GLIBC_2.4
DCW 2                   ; __errno_location@@GLIBC_2.4
DCW 2                   ; strncasecmp@@GLIBC_2.4
DCW 2                   ; snprintf@@GLIBC_2.4
DCW 4                   ; __isoc99_sscanf@@GLIBC_2.7
DCW 2                   ; mkdir@@GLIBC_2.4
DCW 2                   ; bind@@GLIBC_2.4
DCW 2                   ; getgid@@GLIBC_2.4
DCW 2                   ; getgrouplist@@GLIBC_2.4
DCW 2                   ; memset@@GLIBC_2.4
DCW 2                   ; strncpy@@GLIBC_2.4
DCW 2                   ; __xpg_basename@@GLIBC_2.4
DCW 2                   ; setusershell@@GLIBC_2.4
DCW 2                   ; fgetc@@GLIBC_2.4
DCW 2                   ; link@@GLIBC_2.4
DCW 2                   ; write@@GLIBC_2.4
DCW 2                   ; rand@@GLIBC_2.4
DCW 2                   ; setegid@@GLIBC_2.4
DCW 2                   ; stdout@@GLIBC_2.4
DCW 2                   ; writev@@GLIBC_2.4
DCW 2                   ; fclose@@GLIBC_2.4
DCW 2                   ; pipe@@GLIBC_2.4
DCW 2                   ; shutdown@@GLIBC_2.4
DCW 2                   ; sigemptyset@@GLIBC_2.4
DCW 2                   ; popen@@GLIBC_2.4
DCW 3                   ; logout@@GLIBC_2.4
DCW 2                   ; fork@@GLIBC_2.4
DCW 2                   ; putenv@@GLIBC_2.4
DCW 2                   ; getnameinfo@@GLIBC_2.4
DCW 2                   ; strrchr@@GLIBC_2.4
DCW 2                   ; listen@@GLIBC_2.4
DCW 5                   ; crypt@@GLIBC_2.4
DCW 2                   ; fputc@@GLIBC_2.4
DCW 2                   ; syslog@@GLIBC_2.4
DCW 2                   ; setuid@@GLIBC_2.4
DCW 2                   ; openlog@@GLIBC_2.4
DCW 2                   ; getsockname@@GLIBC_2.4
DCW 2                   ; vsnprintf@@GLIBC_2.4
DCW 2                   ; atoi@@GLIBC_2.4
DCW 2                   ; fopen64@@GLIBC_2.4
DCW 2                   ; getpeername@@GLIBC_2.4
DCW 6                   ; explicit_bzero@@GLIBC_2.25
DCW 2                   ; freeaddrinfo@@GLIBC_2.4
DCW 2                   ; getaddrinfo@@GLIBC_2.4
DCW 2                   ; socket@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_registerTMCloneTable
DCW 2                   ; umask@@GLIBC_2.4
DCW 2                   ; chmod@@GLIBC_2.4
DCW 2                   ; __xstat64@@GLIBC_2.4
DCW 2                   ; fputs@@GLIBC_2.4
DCW 2                   ; strncmp@@GLIBC_2.4
DCW 2                   ; abort@@GLIBC_2.4
DCW 3                   ; logwtmp@@GLIBC_2.4
DCW 2                   ; close@@GLIBC_2.4
DCW 2                   ; connect@@GLIBC_2.4
DCW 2                   ; getgrnam@@GLIBC_2.4
DCW 2                   ; __assert_fail@@GLIBC_2.4
DCW 2                   ; tcgetattr@@GLIBC_2.4
DCW 2                   ; pclose@@GLIBC_2.4
DCW 0
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libcrypt.so.1"
               aLibcryptSo1 - byte_10EA4,\
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 5, \ ; "GLIBC_2.4"
               aGlibc24 - byte_10EA4, 0>
Elf32_Verneed <1, 1, \  ; "libutil.so.1"
               aLibutilSo1 - byte_10EA4,\
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 3, \ ; "GLIBC_2.4"
               aGlibc24 - byte_10EA4, 0>
Elf32_Verneed <1, 3, \  ; "libc.so.6"
               aLibcSo6 - byte_10EA4, \
               0x10, 0>
Elf32_Vernaux <0x6969185, 0, 6, \ ; "GLIBC_2.25"
               aGlibc225 - byte_10EA4, \
               0x10>
Elf32_Vernaux <0xD696917, 0, 4, \ ; "GLIBC_2.7"
               aGlibc27 - byte_10EA4, \
               0x10>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_10EA4, 0>
; ELF REL Relocation Table
Elf32_Rel <0x4C220, 0x3E15> ; R_ARM_GLOB_DAT __gmon_start__
Elf32_Rel <0x4C448, 0x2814> ; R_ARM_COPY stderr
Elf32_Rel <0x4C450, 0x4E14> ; R_ARM_COPY stdin
Elf32_Rel <0x4C454, 0x6214> ; R_ARM_COPY stdout
; ELF JMPREL Relocation Table
Elf32_Rel <0x4C00C, 0x116> ; R_ARM_JUMP_SLOT calloc
Elf32_Rel <0x4C010, 0x216> ; R_ARM_JUMP_SLOT login
Elf32_Rel <0x4C014, 0x316> ; R_ARM_JUMP_SLOT raise
Elf32_Rel <0x4C018, 0x416> ; R_ARM_JUMP_SLOT getpwnam
Elf32_Rel <0x4C01C, 0x516> ; R_ARM_JUMP_SLOT fsync
Elf32_Rel <0x4C020, 0x616> ; R_ARM_JUMP_SLOT strcmp
Elf32_Rel <0x4C024, 0x716> ; R_ARM_JUMP_SLOT getpwuid
Elf32_Rel <0x4C028, 0x916> ; R_ARM_JUMP_SLOT setsockopt
Elf32_Rel <0x4C02C, 0xA16> ; R_ARM_JUMP_SLOT clearenv
Elf32_Rel <0x4C030, 0xB16> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x4C034, 0xC16> ; R_ARM_JUMP_SLOT getusershell
Elf32_Rel <0x4C038, 0xD16> ; R_ARM_JUMP_SLOT setrlimit64
Elf32_Rel <0x4C03C, 0xE16> ; R_ARM_JUMP_SLOT read
Elf32_Rel <0x4C040, 0xF16> ; R_ARM_JUMP_SLOT getuid
Elf32_Rel <0x4C044, 0x1016> ; R_ARM_JUMP_SLOT getspnam
Elf32_Rel <0x4C048, 0x1116> ; R_ARM_JUMP_SLOT memmove
Elf32_Rel <0x4C04C, 0x1216> ; R_ARM_JUMP_SLOT free
Elf32_Rel <0x4C050, 0x1316> ; R_ARM_JUMP_SLOT gai_strerror
Elf32_Rel <0x4C054, 0x1416> ; R_ARM_JUMP_SLOT fgets
Elf32_Rel <0x4C058, 0x1516> ; R_ARM_JUMP_SLOT _exit
Elf32_Rel <0x4C05C, 0x1616> ; R_ARM_JUMP_SLOT memcpy
Elf32_Rel <0x4C060, 0x1716> ; R_ARM_JUMP_SLOT endusershell
Elf32_Rel <0x4C064, 0x1816> ; R_ARM_JUMP_SLOT signal
Elf32_Rel <0x4C068, 0x1916> ; R_ARM_JUMP_SLOT time
Elf32_Rel <0x4C06C, 0x1A16> ; R_ARM_JUMP_SLOT rmdir
Elf32_Rel <0x4C070, 0x1B16> ; R_ARM_JUMP_SLOT memcmp
Elf32_Rel <0x4C074, 0x1C16> ; R_ARM_JUMP_SLOT inet_ntoa
Elf32_Rel <0x4C078, 0x1D16> ; R_ARM_JUMP_SLOT select
Elf32_Rel <0x4C07C, 0x1E16> ; R_ARM_JUMP_SLOT strdup
Elf32_Rel <0x4C080, 0x1F16> ; R_ARM_JUMP_SLOT unlink
Elf32_Rel <0x4C084, 0x2016> ; R_ARM_JUMP_SLOT dup2
Elf32_Rel <0x4C088, 0x2116> ; R_ARM_JUMP_SLOT realloc
Elf32_Rel <0x4C08C, 0x2216> ; R_ARM_JUMP_SLOT initgroups
Elf32_Rel <0x4C090, 0x2316> ; R_ARM_JUMP_SLOT chdir
Elf32_Rel <0x4C094, 0x2416> ; R_ARM_JUMP_SLOT geteuid
Elf32_Rel <0x4C098, 0x2516> ; R_ARM_JUMP_SLOT accept
Elf32_Rel <0x4C09C, 0x2616> ; R_ARM_JUMP_SLOT seteuid
Elf32_Rel <0x4C0A0, 0x2716> ; R_ARM_JUMP_SLOT sigaction
Elf32_Rel <0x4C0A4, 0x2916> ; R_ARM_JUMP_SLOT fwrite
Elf32_Rel <0x4C0A8, 0x2A16> ; R_ARM_JUMP_SLOT strcat
Elf32_Rel <0x4C0AC, 0x2B16> ; R_ARM_JUMP_SLOT getsockopt
Elf32_Rel <0x4C0B0, 0x2C16> ; R_ARM_JUMP_SLOT ioctl
Elf32_Rel <0x4C0B4, 0x2D16> ; R_ARM_JUMP_SLOT usleep
Elf32_Rel <0x4C0B8, 0x2E16> ; R_ARM_JUMP_SLOT waitpid
Elf32_Rel <0x4C0BC, 0x2F16> ; R_ARM_JUMP_SLOT tcsetattr
Elf32_Rel <0x4C0C0, 0x3016> ; R_ARM_JUMP_SLOT strcpy
Elf32_Rel <0x4C0C4, 0x3116> ; R_ARM_JUMP_SLOT gettimeofday
Elf32_Rel <0x4C0C8, 0x3216> ; R_ARM_JUMP_SLOT daemon
Elf32_Rel <0x4C0CC, 0x3316> ; R_ARM_JUMP_SLOT gethostname
Elf32_Rel <0x4C0D0, 0x3416> ; R_ARM_JUMP_SLOT open64
Elf32_Rel <0x4C0D4, 0x3516> ; R_ARM_JUMP_SLOT puts
Elf32_Rel <0x4C0D8, 0x3616> ; R_ARM_JUMP_SLOT setgid
Elf32_Rel <0x4C0DC, 0x3716> ; R_ARM_JUMP_SLOT malloc
Elf32_Rel <0x4C0E0, 0x3816> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x4C0E4, 0x3916> ; R_ARM_JUMP_SLOT strerror
Elf32_Rel <0x4C0E8, 0x3A16> ; R_ARM_JUMP_SLOT strftime
Elf32_Rel <0x4C0EC, 0x3B16> ; R_ARM_JUMP_SLOT localtime
Elf32_Rel <0x4C0F0, 0x3C16> ; R_ARM_JUMP_SLOT dirname
Elf32_Rel <0x4C0F4, 0x3D16> ; R_ARM_JUMP_SLOT __ctype_toupper_loc
Elf32_Rel <0x4C0F8, 0x3E16> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x4C0FC, 0x3F16> ; R_ARM_JUMP_SLOT openpty
Elf32_Rel <0x4C100, 0x4016> ; R_ARM_JUMP_SLOT clock
Elf32_Rel <0x4C104, 0x4116> ; R_ARM_JUMP_SLOT kill
Elf32_Rel <0x4C108, 0x4216> ; R_ARM_JUMP_SLOT __ctype_b_loc
Elf32_Rel <0x4C10C, 0x4316> ; R_ARM_JUMP_SLOT getpid
Elf32_Rel <0x4C110, 0x4416> ; R_ARM_JUMP_SLOT exit
Elf32_Rel <0x4C114, 0x4516> ; R_ARM_JUMP_SLOT syscall
Elf32_Rel <0x4C118, 0x4616> ; R_ARM_JUMP_SLOT strtoul
Elf32_Rel <0x4C11C, 0x4716> ; R_ARM_JUMP_SLOT ttyname
Elf32_Rel <0x4C120, 0x4816> ; R_ARM_JUMP_SLOT strlen
Elf32_Rel <0x4C124, 0x4916> ; R_ARM_JUMP_SLOT setsid
Elf32_Rel <0x4C128, 0x4A16> ; R_ARM_JUMP_SLOT strchr
Elf32_Rel <0x4C12C, 0x4B16> ; R_ARM_JUMP_SLOT atol
Elf32_Rel <0x4C130, 0x4C16> ; R_ARM_JUMP_SLOT fprintf
Elf32_Rel <0x4C134, 0x4D16> ; R_ARM_JUMP_SLOT chown
Elf32_Rel <0x4C138, 0x4F16> ; R_ARM_JUMP_SLOT fcntl
Elf32_Rel <0x4C13C, 0x5016> ; R_ARM_JUMP_SLOT execv
Elf32_Rel <0x4C140, 0x5116> ; R_ARM_JUMP_SLOT __errno_location
Elf32_Rel <0x4C144, 0x5216> ; R_ARM_JUMP_SLOT strncasecmp
Elf32_Rel <0x4C148, 0x5316> ; R_ARM_JUMP_SLOT snprintf
Elf32_Rel <0x4C14C, 0x5416> ; R_ARM_JUMP_SLOT __isoc99_sscanf
Elf32_Rel <0x4C150, 0x5516> ; R_ARM_JUMP_SLOT mkdir
Elf32_Rel <0x4C154, 0x5616> ; R_ARM_JUMP_SLOT bind
Elf32_Rel <0x4C158, 0x5716> ; R_ARM_JUMP_SLOT getgid
Elf32_Rel <0x4C15C, 0x5816> ; R_ARM_JUMP_SLOT getgrouplist
Elf32_Rel <0x4C160, 0x5916> ; R_ARM_JUMP_SLOT memset
Elf32_Rel <0x4C164, 0x5A16> ; R_ARM_JUMP_SLOT strncpy
Elf32_Rel <0x4C168, 0x5B16> ; R_ARM_JUMP_SLOT __xpg_basename
Elf32_Rel <0x4C16C, 0x5C16> ; R_ARM_JUMP_SLOT setusershell
Elf32_Rel <0x4C170, 0x5D16> ; R_ARM_JUMP_SLOT fgetc
Elf32_Rel <0x4C174, 0x5E16> ; R_ARM_JUMP_SLOT link
Elf32_Rel <0x4C178, 0x5F16> ; R_ARM_JUMP_SLOT write
Elf32_Rel <0x4C17C, 0x6016> ; R_ARM_JUMP_SLOT rand
Elf32_Rel <0x4C180, 0x6116> ; R_ARM_JUMP_SLOT setegid
Elf32_Rel <0x4C184, 0x6316> ; R_ARM_JUMP_SLOT writev
Elf32_Rel <0x4C188, 0x6416> ; R_ARM_JUMP_SLOT fclose
Elf32_Rel <0x4C18C, 0x6516> ; R_ARM_JUMP_SLOT pipe
Elf32_Rel <0x4C190, 0x6616> ; R_ARM_JUMP_SLOT shutdown
Elf32_Rel <0x4C194, 0x6716> ; R_ARM_JUMP_SLOT sigemptyset
Elf32_Rel <0x4C198, 0x6816> ; R_ARM_JUMP_SLOT popen
Elf32_Rel <0x4C19C, 0x6916> ; R_ARM_JUMP_SLOT logout
Elf32_Rel <0x4C1A0, 0x6A16> ; R_ARM_JUMP_SLOT fork
Elf32_Rel <0x4C1A4, 0x6B16> ; R_ARM_JUMP_SLOT putenv
Elf32_Rel <0x4C1A8, 0x6C16> ; R_ARM_JUMP_SLOT getnameinfo
Elf32_Rel <0x4C1AC, 0x6D16> ; R_ARM_JUMP_SLOT strrchr
Elf32_Rel <0x4C1B0, 0x6E16> ; R_ARM_JUMP_SLOT listen
Elf32_Rel <0x4C1B4, 0x6F16> ; R_ARM_JUMP_SLOT crypt
Elf32_Rel <0x4C1B8, 0x7016> ; R_ARM_JUMP_SLOT fputc
Elf32_Rel <0x4C1BC, 0x7116> ; R_ARM_JUMP_SLOT syslog
Elf32_Rel <0x4C1C0, 0x7216> ; R_ARM_JUMP_SLOT setuid
Elf32_Rel <0x4C1C4, 0x7316> ; R_ARM_JUMP_SLOT openlog
Elf32_Rel <0x4C1C8, 0x7416> ; R_ARM_JUMP_SLOT getsockname
Elf32_Rel <0x4C1CC, 0x7516> ; R_ARM_JUMP_SLOT vsnprintf
Elf32_Rel <0x4C1D0, 0x7616> ; R_ARM_JUMP_SLOT atoi
Elf32_Rel <0x4C1D4, 0x7716> ; R_ARM_JUMP_SLOT fopen64
Elf32_Rel <0x4C1D8, 0x7816> ; R_ARM_JUMP_SLOT getpeername
Elf32_Rel <0x4C1DC, 0x7916> ; R_ARM_JUMP_SLOT explicit_bzero
Elf32_Rel <0x4C1E0, 0x7A16> ; R_ARM_JUMP_SLOT freeaddrinfo
Elf32_Rel <0x4C1E4, 0x7B16> ; R_ARM_JUMP_SLOT getaddrinfo
Elf32_Rel <0x4C1E8, 0x7C16> ; R_ARM_JUMP_SLOT socket
Elf32_Rel <0x4C1EC, 0x7E16> ; R_ARM_JUMP_SLOT umask
Elf32_Rel <0x4C1F0, 0x7F16> ; R_ARM_JUMP_SLOT chmod
Elf32_Rel <0x4C1F4, 0x8016> ; R_ARM_JUMP_SLOT __xstat64
Elf32_Rel <0x4C1F8, 0x8116> ; R_ARM_JUMP_SLOT fputs
Elf32_Rel <0x4C1FC, 0x8216> ; R_ARM_JUMP_SLOT strncmp
Elf32_Rel <0x4C200, 0x8316> ; R_ARM_JUMP_SLOT abort
Elf32_Rel <0x4C204, 0x8416> ; R_ARM_JUMP_SLOT logwtmp
Elf32_Rel <0x4C208, 0x8516> ; R_ARM_JUMP_SLOT close
Elf32_Rel <0x4C20C, 0x8616> ; R_ARM_JUMP_SLOT connect
Elf32_Rel <0x4C210, 0x8716> ; R_ARM_JUMP_SLOT getgrnam
Elf32_Rel <0x4C214, 0x8816> ; R_ARM_JUMP_SLOT __assert_fail
Elf32_Rel <0x4C218, 0x8916> ; R_ARM_JUMP_SLOT tcgetattr
Elf32_Rel <0x4C21C, 0x8A16> ; R_ARM_JUMP_SLOT pclose
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x1192C
CODE32



; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              sub_120A0
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x11938
CODE32



; void sub_11938()
sub_11938
PUSH            {LR}
LDR             LR, =(_GLOBAL_OFFSET_TABLE_ - 0x11948)
ADD             LR, PC, LR ; _GLOBAL_OFFSET_TABLE_
LDR             PC, [LR,#(off_4C008 - 0x4C000)]!
; End of function sub_11938

off_11948 DCD _GLOBAL_OFFSET_TABLE_ - 0x11948
; [0000000C BYTES: COLLAPSED FUNCTION calloc]
; [0000000C BYTES: COLLAPSED FUNCTION login]
; [0000000C BYTES: COLLAPSED FUNCTION raise]
; [0000000C BYTES: COLLAPSED FUNCTION getpwnam]
; [0000000C BYTES: COLLAPSED FUNCTION fsync]
; [0000000C BYTES: COLLAPSED FUNCTION strcmp]
; [0000000C BYTES: COLLAPSED FUNCTION getpwuid]
; [0000000C BYTES: COLLAPSED FUNCTION setsockopt]
; [0000000C BYTES: COLLAPSED FUNCTION clearenv]
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION getusershell]
; [0000000C BYTES: COLLAPSED FUNCTION setrlimit64]
; [0000000C BYTES: COLLAPSED FUNCTION read]
; [0000000C BYTES: COLLAPSED FUNCTION getuid]
; [0000000C BYTES: COLLAPSED FUNCTION getspnam]
; [0000000C BYTES: COLLAPSED FUNCTION memmove]
; [0000000C BYTES: COLLAPSED FUNCTION free]
; [0000000C BYTES: COLLAPSED FUNCTION gai_strerror]
; [0000000C BYTES: COLLAPSED FUNCTION fgets]
; [0000000C BYTES: COLLAPSED FUNCTION _exit]
; [0000000C BYTES: COLLAPSED FUNCTION memcpy]
; [0000000C BYTES: COLLAPSED FUNCTION endusershell]
; [0000000C BYTES: COLLAPSED FUNCTION signal]
; [0000000C BYTES: COLLAPSED FUNCTION time]
; [0000000C BYTES: COLLAPSED FUNCTION rmdir]
; [0000000C BYTES: COLLAPSED FUNCTION memcmp]
; [0000000C BYTES: COLLAPSED FUNCTION inet_ntoa]
; [0000000C BYTES: COLLAPSED FUNCTION select]
; [0000000C BYTES: COLLAPSED FUNCTION strdup]
; [0000000C BYTES: COLLAPSED FUNCTION unlink]
; [0000000C BYTES: COLLAPSED FUNCTION dup2]
; [0000000C BYTES: COLLAPSED FUNCTION realloc]
; [0000000C BYTES: COLLAPSED FUNCTION initgroups]
; [0000000C BYTES: COLLAPSED FUNCTION chdir]
; [0000000C BYTES: COLLAPSED FUNCTION geteuid]
; [0000000C BYTES: COLLAPSED FUNCTION accept]
; [0000000C BYTES: COLLAPSED FUNCTION seteuid]
; [0000000C BYTES: COLLAPSED FUNCTION sigaction]
; [0000000C BYTES: COLLAPSED FUNCTION fwrite]
; [0000000C BYTES: COLLAPSED FUNCTION strcat]
; [0000000C BYTES: COLLAPSED FUNCTION getsockopt]
; [0000000C BYTES: COLLAPSED FUNCTION ioctl]
; [0000000C BYTES: COLLAPSED FUNCTION usleep]
; [0000000C BYTES: COLLAPSED FUNCTION waitpid]
; [0000000C BYTES: COLLAPSED FUNCTION tcsetattr]
; [0000000C BYTES: COLLAPSED FUNCTION strcpy]
; [0000000C BYTES: COLLAPSED FUNCTION gettimeofday]
; [0000000C BYTES: COLLAPSED FUNCTION daemon]
; [0000000C BYTES: COLLAPSED FUNCTION gethostname]
; [0000000C BYTES: COLLAPSED FUNCTION open64]
; [0000000C BYTES: COLLAPSED FUNCTION puts]
; [0000000C BYTES: COLLAPSED FUNCTION setgid]
; [0000000C BYTES: COLLAPSED FUNCTION malloc]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION strerror]
; [0000000C BYTES: COLLAPSED FUNCTION strftime]
; [0000000C BYTES: COLLAPSED FUNCTION localtime]
; [0000000C BYTES: COLLAPSED FUNCTION dirname]
; [0000000C BYTES: COLLAPSED FUNCTION __ctype_toupper_loc]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION openpty]
; [0000000C BYTES: COLLAPSED FUNCTION clock]
; [0000000C BYTES: COLLAPSED FUNCTION kill]
; [0000000C BYTES: COLLAPSED FUNCTION __ctype_b_loc]
; [0000000C BYTES: COLLAPSED FUNCTION getpid]
; [0000000C BYTES: COLLAPSED FUNCTION exit]
; [0000000C BYTES: COLLAPSED FUNCTION syscall]
; [0000000C BYTES: COLLAPSED FUNCTION strtoul]
; [0000000C BYTES: COLLAPSED FUNCTION ttyname]
; [0000000C BYTES: COLLAPSED FUNCTION strlen]
; [0000000C BYTES: COLLAPSED FUNCTION setsid]
; [0000000C BYTES: COLLAPSED FUNCTION strchr]
; [0000000C BYTES: COLLAPSED FUNCTION atol]
; [0000000C BYTES: COLLAPSED FUNCTION fprintf]
; [0000000C BYTES: COLLAPSED FUNCTION chown]
; [0000000C BYTES: COLLAPSED FUNCTION fcntl]
; [0000000C BYTES: COLLAPSED FUNCTION execv]
; [0000000C BYTES: COLLAPSED FUNCTION __errno_location]
; [0000000C BYTES: COLLAPSED FUNCTION strncasecmp]
; [0000000C BYTES: COLLAPSED FUNCTION snprintf]
; [0000000C BYTES: COLLAPSED FUNCTION __isoc99_sscanf]
; [0000000C BYTES: COLLAPSED FUNCTION mkdir]
; [0000000C BYTES: COLLAPSED FUNCTION bind]
; [0000000C BYTES: COLLAPSED FUNCTION getgid]
; [0000000C BYTES: COLLAPSED FUNCTION getgrouplist]
; [0000000C BYTES: COLLAPSED FUNCTION memset]
; [0000000C BYTES: COLLAPSED FUNCTION strncpy]
; [0000000C BYTES: COLLAPSED FUNCTION __xpg_basename]
; [0000000C BYTES: COLLAPSED FUNCTION setusershell]
; [0000000C BYTES: COLLAPSED FUNCTION fgetc]
; [0000000C BYTES: COLLAPSED FUNCTION link]
; [0000000C BYTES: COLLAPSED FUNCTION write]
; [0000000C BYTES: COLLAPSED FUNCTION rand]
; [0000000C BYTES: COLLAPSED FUNCTION setegid]
; [0000000C BYTES: COLLAPSED FUNCTION writev]
; [0000000C BYTES: COLLAPSED FUNCTION fclose]
; [0000000C BYTES: COLLAPSED FUNCTION pipe]
; [0000000C BYTES: COLLAPSED FUNCTION shutdown]
; [0000000C BYTES: COLLAPSED FUNCTION sigemptyset]
; [0000000C BYTES: COLLAPSED FUNCTION popen]
; [0000000C BYTES: COLLAPSED FUNCTION logout]
; [0000000C BYTES: COLLAPSED FUNCTION fork]
; [0000000C BYTES: COLLAPSED FUNCTION putenv]
; [0000000C BYTES: COLLAPSED FUNCTION getnameinfo]
; [0000000C BYTES: COLLAPSED FUNCTION strrchr]
; [0000000C BYTES: COLLAPSED FUNCTION listen]
; [0000000C BYTES: COLLAPSED FUNCTION crypt]
; [0000000C BYTES: COLLAPSED FUNCTION fputc]
; [0000000C BYTES: COLLAPSED FUNCTION syslog]
; [0000000C BYTES: COLLAPSED FUNCTION setuid]
; [0000000C BYTES: COLLAPSED FUNCTION openlog]
; [0000000C BYTES: COLLAPSED FUNCTION getsockname]
; [0000000C BYTES: COLLAPSED FUNCTION vsnprintf]
; [0000000C BYTES: COLLAPSED FUNCTION atoi]
; [0000000C BYTES: COLLAPSED FUNCTION fopen64]
; [0000000C BYTES: COLLAPSED FUNCTION getpeername]
; [0000000C BYTES: COLLAPSED FUNCTION explicit_bzero]
; [0000000C BYTES: COLLAPSED FUNCTION freeaddrinfo]
; [0000000C BYTES: COLLAPSED FUNCTION getaddrinfo]
; [0000000C BYTES: COLLAPSED FUNCTION socket]
; [0000000C BYTES: COLLAPSED FUNCTION umask]
; [0000000C BYTES: COLLAPSED FUNCTION chmod]
CODE16


; Attributes: thunk

; int sub_11F04()
sub_11F04
BX              PC
ALIGN 4
; End of function sub_11F04

CODE32
; [0000000C BYTES: COLLAPSED FUNCTION __xstat64]
; [0000000C BYTES: COLLAPSED FUNCTION fputs]
; [0000000C BYTES: COLLAPSED FUNCTION strncmp]
; [0000000C BYTES: COLLAPSED FUNCTION abort]
; [0000000C BYTES: COLLAPSED FUNCTION logwtmp]
; [0000000C BYTES: COLLAPSED FUNCTION close]
; [0000000C BYTES: COLLAPSED FUNCTION connect]
; [0000000C BYTES: COLLAPSED FUNCTION getgrnam]
; [0000000C BYTES: COLLAPSED FUNCTION __assert_fail]
; [0000000C BYTES: COLLAPSED FUNCTION tcgetattr]
; [0000000C BYTES: COLLAPSED FUNCTION pclose]

; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x11F8C
CODE32
ALIGN 0x10
; LOAD ends


; Segment type: Pure code
AREA .text, CODE, ALIGN=3
; ORG 0x11F90
CODE32



; int main(int, char **, char **)
main
PUSH            {R3-R11,LR}
MOV             R7, R0
LDR             R10, =aDropbearkey ; "dropbearkey"
MOV             R8, R1
MOV             R4, #0
LDR             R11, =aDropbearconver ; "dropbearconvert"

loc_11FA8
CMP             R7, R4
BLE             loc_12034
LDR             R0, [R8,R4,LSL#2] ; path
ADD             R6, R8, R4,LSL#2
SUB             R5, R7, R4
BL              __xpg_basename
LDR             R1, =s2 ; "dropbear"
MOV             R9, R0
BL              strcmp
CMP             R0, #0
BNE             loc_11FEC
MOV             R1, R6
MOV             R0, R5
POP             {R3-R11,LR}
B               sub_22298

loc_11FE4
MOV             R4, #1
B               loc_11FA8

loc_11FEC               ; s2
MOV             R1, R10
MOV             R0, R9  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_12010
MOV             R1, R6
MOV             R0, R5
POP             {R3-R11,LR}
B               sub_1903C

loc_12010               ; s2
MOV             R1, R11
MOV             R0, R9  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_12034
MOV             R1, R6
MOV             R0, R5
POP             {R3-R11,LR}
B               sub_18CC0

loc_12034
CMP             R4, #1
BNE             loc_11FE4
LDR             R3, =stderr
LDR             R2, =(aSsh20Dropbear2+0x11) ; "2018.76"
LDR             R1, =format ; "Dropbear SSH multi-purpose v%s\nMake a "...
LDR             R0, [R3] ; stream
BL              fprintf
MOV             R0, R4  ; status
BL              exit
; End of function main

off_12058 DCD aDropbearkey ; "dropbearkey"
off_1205C DCD aDropbearconver ; "dropbearconvert"
off_12060 DCD s2        ; "dropbear"
off_12064 DCD stderr
off_12068 DCD aSsh20Dropbear2+0x11 ; "2018.76"
off_1206C DCD format    ; "Dropbear SSH multi-purpose v%s\nMake a "...
CODE16


; Attributes: noreturn

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT start
start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(nullsub_3+1)
PUSH.W          {R12}   ; fini
LDR             R0, =main ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function start

off_12094 DCD nullsub_3+1
off_12098 DCD main
off_1209C DCD init+1
CODE32



; int sub_120A0()
sub_120A0
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x120B0)
LDR             R2, =(__gmon_start___ptr_0 - 0x4C000)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function sub_120A0

off_120BC DCD _GLOBAL_OFFSET_TABLE_ - 0x120B0
off_120C0 DCD __gmon_start___ptr_0 - 0x4C000
CODE16



; void *sub_120C4()
sub_120C4
MOVW            R0, #:lower16:unk_4C444
MOVW            R3, #:lower16:unk_4C444
MOVT            R0, #:upper16:unk_4C444
MOVT            R3, #:upper16:unk_4C444
CMP             R3, R0
BEQ             locret_120E4
MOV             R3, #0
CBZ             R3, locret_120E4
BX              R3

locret_120E4
BX              LR
; End of function sub_120C4

ALIGN 4



; __int64 sub_120E8()
sub_120E8
MOVW            R0, #:lower16:unk_4C444
MOVW            R1, #:lower16:unk_4C444
MOVT            R0, #:upper16:unk_4C444
MOVT            R1, #:upper16:unk_4C444
SUBS            R1, R1, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_12110
MOV             R3, #0
CBZ             R3, locret_12110
BX              R3

locret_12110
BX              LR
; End of function sub_120E8

ALIGN 4



; void *sub_12114()
sub_12114
PUSH            {R4,LR}
MOV             R4, #byte_4C458
LDRB            R3, [R4]
CBNZ            R3, locret_1212A
BL              sub_120C4
MOVS            R3, #1
STRB            R3, [R4]

locret_1212A
POP             {R4,PC}
; End of function sub_12114



; Attributes: thunk

sub_1212C
B               sub_120E8
; End of function sub_1212C

ALIGN 0x10
CODE32



; int __fastcall sub_12130(int (__fastcall *)(int, int, int), int, int, unsigned int)
sub_12130
PUSH            {R4-R8,LR}
MOV             R6, R0
MOV             R7, R1
MOV             R8, R2
MOV             R5, R3
MOV             R4, #0

loc_12148
CMP             R4, R5
BCS             loc_12198
SUB             R2, R5, R4
ADD             R1, R8, R4
MOV             R0, R7
BLX             R6
CMN             R0, #1
BEQ             loc_12178
CMP             R0, #0
BEQ             loc_121A0
ADD             R4, R4, R0
B               loc_12148

loc_12178
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #0xB
CMPNE           R3, #4
MOVEQ           R3, #1
MOVNE           R3, #0
BEQ             loc_12148
MOV             R4, R3

loc_12198
MOV             R0, R4
POP             {R4-R8,PC}

loc_121A0
BL              __errno_location
MOV             R3, #0x20 ; ' '
STR             R3, [R0]
B               loc_12198
; End of function sub_12130




; int __fastcall sub_121B0(int)
sub_121B0
PUSH            {R4,LR}
BL              sub_2BAD0
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R0, =aMemAllocError ; "Mem alloc error"
BL              sub_184AC
; End of function sub_121B0

off_121C8 DCD aMemAllocError ; "Mem alloc error"



; int sub_121CC(int result, ...)
sub_121CC

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {R0-R2,LR}
ADD             R3, SP, #0xC+varg_r1
LDR             R0, [SP,#0xC+varg_r0]
STR             R3, [SP,#0xC+var_8]

loc_121E0
CMP             R0, #0
BNE             loc_121F8
ADD             SP, SP, #0xC
POP             {LR}
ADD             SP, SP, #0x10
BX              LR

loc_121F8
BL              sub_2BAD0
CMP             R0, #0
BEQ             loc_1220C
LDR             R0, =aMemAllocError ; "Mem alloc error"
BL              sub_184AC

loc_1220C
LDR             R3, [SP,#0xC+var_8]
ADD             R2, R3, #4
LDR             R0, [R3]
STR             R2, [SP,#0xC+var_8]
B               loc_121E0
; End of function sub_121CC

off_12220 DCD aMemAllocError ; "Mem alloc error"



; int sub_12224(int result, ...)
sub_12224

var_4= -4
varg_r0=  8
varg_r1=  0xC
varg_r2=  0x10
varg_r3=  0x14

PUSH            {R0-R3}
PUSH            {R0,R1,R4,LR}
ADD             R3, SP, #8+varg_r1
LDR             R4, [SP,#8+varg_r0]
STR             R3, [SP,#8+var_4]

loc_12238
CMP             R4, #0
BNE             loc_12250
ADD             SP, SP, #8
POP             {R4,LR}
ADD             SP, SP, #0x10
BX              LR

loc_12250
MOV             R0, #0x10
BL              sub_18718
STR             R0, [R4]
BL              sub_2BAD0
CMP             R0, #0
BEQ             loc_12270
LDR             R0, =aMemAllocError ; "Mem alloc error"
BL              sub_184AC

loc_12270
LDR             R3, [SP,#8+var_4]
ADD             R2, R3, #4
LDR             R4, [R3]
STR             R2, [SP,#8+var_4]
B               loc_12238
; End of function sub_12224

off_12284 DCD aMemAllocError ; "Mem alloc error"



; void sub_12288(int *, ...)
sub_12288

var_8= -8
varg_r0=  0xC
varg_r1=  0x10
varg_r2=  0x14
varg_r3=  0x18

PUSH            {R0-R3}
PUSH            {R0-R2,R4,R5,LR}
MOV             R5, #0
ADD             R3, SP, #0xC+varg_r1
LDR             R4, [SP,#0xC+varg_r0]
STR             R3, [SP,#0xC+var_8]

loc_122A0
CMP             R4, #0
BNE             loc_122B8
ADD             SP, SP, #0xC
POP             {R4,R5,LR}
ADD             SP, SP, #0x10
BX              LR

loc_122B8
LDR             R0, [R4]
CMP             R0, #0
BEQ             loc_122C8
BL              sub_29D74

loc_122C8               ; ptr
LDR             R0, [R4]
BL              free
LDR             R3, [SP,#0xC+var_8]
STR             R5, [R4]
ADD             R2, R3, #4
LDR             R4, [R3]
STR             R2, [SP,#0xC+var_8]
B               loc_122A0
; End of function sub_12288




; int __fastcall sub_122E8(int, unsigned __int8 *, int)
sub_122E8
PUSH            {R4,LR}
BL              sub_2DE30
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R0, =aMemAllocError ; "Mem alloc error"
BL              sub_184AC
; End of function sub_122E8

off_12300 DCD aMemAllocError ; "Mem alloc error"



; void __fastcall sub_12304(int, int, int)
sub_12304
PUSH            {R4-R8,LR}
MOV             R7, R2
MOV             R6, R0
MOV             R0, #0x214
MOV             R5, R1
BL              sub_12344
MOV             R1, R7
MOV             R4, R0
BL              sub_1282C
LDR             R3, [R6,#0x58]
MOV             R0, R5
LDM             R4, {R1,R2}
BLX             R3
MOV             R0, R4  ; ptr
POP             {R4-R8,LR}
B               j_free
; End of function sub_12304




; _DWORD *__fastcall sub_12344(unsigned int)
sub_12344
LDR             R3, =0x3B9ACA00
PUSH            {R4,LR}
CMP             R0, R3
BLS             loc_1235C
LDR             R0, =aBufSizeTooBig ; "buf->size too big"
BL              sub_184AC

loc_1235C
MOV             R4, R0
ADD             R0, R0, #0x10
BL              sub_18718
CMP             R4, #0
STR             R4, [R0,#0xC]
ADDNE           R3, R0, #0x10
STREQ           R4, [R0]
STRNE           R3, [R0]
POP             {R4,PC}
; End of function sub_12344

dword_12380 DCD 0x3B9ACA00
off_12384 DCD aBufSizeTooBig ; "buf->size too big"
; [00000004 BYTES: COLLAPSED FUNCTION j_free]



; int __fastcall sub_1238C(_DWORD *)
sub_1238C
LDR             R1, [R0,#0xC]
LDR             R0, [R0]
B               j_explicit_bzero
; End of function sub_1238C




; _DWORD *__fastcall sub_12398(void *, unsigned int)
sub_12398
LDR             R3, =0x3B9ACA00
PUSH            {R4,LR}
CMP             R1, R3
BLS             loc_123B0
LDR             R0, =aBufSizeTooBig ; "buf->size too big"
BL              sub_184AC

loc_123B0
MOV             R4, R1
ADD             R1, R1, #0x10
BL              sub_18888
ADD             R2, R0, #0x10
STR             R4, [R0,#0xC]
STR             R2, [R0]
LDR             R2, [R0,#4]
CMP             R2, R4
STRLS           R2, [R0,#4]
STRHI           R4, [R0,#4]
LDR             R2, [R0,#8]
CMP             R2, R4
STRLS           R2, [R0,#8]
STRHI           R4, [R0,#8]
POP             {R4,PC}
; End of function sub_12398

dword_123EC DCD 0x3B9ACA00
off_123F0 DCD aBufSizeTooBig ; "buf->size too big"



; void **__fastcall sub_123F4(int)
sub_123F4
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R0, [R0,#4]
BL              sub_12344
LDR             R3, [R4,#4]
MOV             R5, R0
STR             R3, [R0,#4]
LDR             R2, [R4,#4] ; n
CMP             R2, #0
BEQ             loc_12428
LDR             R1, [R4] ; src
LDR             R0, [R0] ; dest
BL              memcpy

loc_12428
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_123F4




; _DWORD *__fastcall sub_12430(_DWORD *result, unsigned int)
sub_12430
LDR             R3, [R0,#0xC]
CMP             R3, R1
BCS             loc_12448
PUSH            {R4,LR}
LDR             R0, =aBadBufSetlen ; "Bad buf_setlen"
BL              sub_184AC

loc_12448
LDR             R3, [R0,#8]
STR             R1, [R0,#4]
CMP             R3, R1
STRLS           R3, [R0,#8]
STRHI           R1, [R0,#8]
BX              LR
; End of function sub_12430

off_12460 DCD aBadBufSetlen ; "Bad buf_setlen"



; int __fastcall sub_12464(int result, unsigned int)
sub_12464
LDR             R3, =0x3B9ACA00
CMP             R1, R3
BHI             loc_12484
LDR             R3, [R0,#4]
ADD             R1, R1, R3
LDR             R3, [R0,#0xC]
CMP             R1, R3
BLS             loc_12490

loc_12484
PUSH            {R4,LR}
LDR             R0, =aBadBufIncrlen ; "Bad buf_incrlen"
BL              sub_184AC

loc_12490
STR             R1, [R0,#4]
BX              LR
; End of function sub_12464

dword_12498 DCD 0x3B9ACA00
off_1249C DCD aBadBufIncrlen ; "Bad buf_incrlen"



; int __fastcall sub_124A0(int result, unsigned int)
sub_124A0
LDR             R3, [R0,#4]
CMP             R3, R1
BCS             loc_124B8
PUSH            {R4,LR}
LDR             R0, =aBadBufSetpos ; "Bad buf_setpos"
BL              sub_184AC

loc_124B8
STR             R1, [R0,#8]
BX              LR
; End of function sub_124A0

off_124C0 DCD aBadBufSetpos ; "Bad buf_setpos"



; _DWORD *__fastcall sub_124C4(_DWORD *result, unsigned int)
sub_124C4
LDR             R3, =0x3B9ACA00
CMP             R1, R3
BHI             loc_124E4
LDR             R3, [R0,#8]
ADD             R1, R1, R3
LDR             R3, [R0,#0xC]
CMP             R1, R3
BLS             loc_124F0

loc_124E4
PUSH            {R4,LR}
LDR             R0, =aBadBufIncrwrit ; "Bad buf_incrwritepos"
BL              sub_184AC

loc_124F0
LDR             R3, [R0,#4]
STR             R1, [R0,#8]
CMP             R1, R3
STRHI           R1, [R0,#4]
BX              LR
; End of function sub_124C4

dword_12504 DCD 0x3B9ACA00
off_12508 DCD aBadBufIncrwrit ; "Bad buf_incrwritepos"



; int __fastcall sub_1250C(int result, int)
sub_1250C
LDR             R3, =0x3B9ACA00
LDR             R2, =0x77359400
ADD             R3, R1, R3
CMP             R3, R2
BHI             loc_12540
LDR             R3, [R0,#8]
ADD             R1, R3, R1
LDR             R3, [R0,#4]
CMP             R1, R3
MOVLS           R3, #0
MOVHI           R3, #1
ORRS            R3, R3, R1,LSR#31
BEQ             loc_1254C

loc_12540
PUSH            {R4,LR}
LDR             R0, =aBadBufIncrpos ; "Bad buf_incrpos"
BL              sub_184AC

loc_1254C
STR             R1, [R0,#8]
BX              LR
; End of function sub_1250C

dword_12554 DCD 0x3B9ACA00
dword_12558 DCD 0x77359400
off_1255C DCD aBadBufIncrpos ; "Bad buf_incrpos"



; int __fastcall sub_12560(int)
sub_12560
LDRD            R2, R3, [R0,#4]
CMP             R3, R2
BCC             loc_12578
PUSH            {R4,LR}
LDR             R0, =aBadBufGetbyte ; "Bad buf_getbyte"
BL              sub_184AC

loc_12578
LDR             R2, [R0]
ADD             R1, R3, #1
STR             R1, [R0,#8]
LDRB            R0, [R2,R3]
BX              LR
; End of function sub_12560

off_1258C DCD aBadBufGetbyte ; "Bad buf_getbyte"



; bool __fastcall sub_12590(int)
sub_12590
PUSH            {R4,LR}
BL              sub_12560
MOVS            R0, R0
MOVNE           R0, #1
POP             {R4,PC}
; End of function sub_12590




; int __fastcall sub_125A4(int result, char)
sub_125A4
LDR             R2, [R0,#8]
LDR             R3, [R0,#4]
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
CMP             R2, R3
BCC             loc_125C8
MOV             R1, #1
BL              sub_12464

loc_125C8
LDR             R3, [R4,#8]
LDR             R2, [R4]
STRB            R5, [R2,R3]
LDR             R3, [R4,#8]
ADD             R3, R3, #1
STR             R3, [R4,#8]
POP             {R4-R6,PC}
; End of function sub_125A4




; int __fastcall sub_125E4(_DWORD *, unsigned int)
sub_125E4
LDR             R3, =0x3B9ACA00
CMP             R1, R3
BHI             loc_12604
LDR             R3, [R0,#8]
LDR             R2, [R0,#4]
ADD             R1, R3, R1
CMP             R1, R2
BLS             loc_12610

loc_12604
PUSH            {R4,LR}
LDR             R0, =aBadBufGetptr ; "Bad buf_getptr"
BL              sub_184AC

loc_12610
LDR             R0, [R0]
ADD             R0, R0, R3
BX              LR
; End of function sub_125E4

dword_1261C DCD 0x3B9ACA00
off_12620 DCD aBadBufGetptr ; "Bad buf_getptr"



; int __fastcall sub_12624(_DWORD *, unsigned int)
sub_12624
LDR             R3, =0x3B9ACA00
CMP             R1, R3
BHI             loc_12644
LDR             R3, [R0,#8]
LDR             R2, [R0,#0xC]
ADD             R1, R3, R1
CMP             R1, R2
BLS             loc_12650

loc_12644
PUSH            {R4,LR}
LDR             R0, =aBadBufGetwrite ; "Bad buf_getwriteptr"
BL              sub_184AC

loc_12650
LDR             R0, [R0]
ADD             R0, R0, R3
BX              LR
; End of function sub_12624

dword_1265C DCD 0x3B9ACA00
off_12660 DCD aBadBufGetwrite ; "Bad buf_getwriteptr"



; unsigned int __fastcall sub_12664(_DWORD *)
sub_12664
PUSH            {R4-R6,LR}
MOV             R1, #4
MOV             R5, R0
BL              sub_125E4
LDR             R4, [R0]
MOV             R1, #4
MOV             R0, R5
BL              sub_1250C
REV             R4, R4
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_12664




; void *__fastcall sub_12690(_DWORD *, unsigned int *)
sub_12690
PUSH            {R4-R6,LR}
MOV             R6, R0
MOV             R5, R1
BL              sub_12664
MOVW            R3, #0x2328
CMP             R0, R3
BLS             loc_126B4
LDR             R0, =aStringTooLong ; "String too long"
BL              sub_184AC

loc_126B4
CMP             R5, #0
MOV             R4, R0
STRNE           R0, [R5]
ADD             R0, R0, #1
BL              sub_18718
MOV             R1, R4
MOV             R5, R0
MOV             R0, R6
BL              sub_125E4
MOV             R2, R4  ; n
MOV             R1, R0  ; src
MOV             R0, R5  ; dest
BL              memcpy
MOV             R0, R6
MOV             R1, R4
BL              sub_1250C
MOV             R3, #0
MOV             R0, R5
STRB            R3, [R5,R4]
POP             {R4-R6,PC}
; End of function sub_12690

off_12704 DCD aStringTooLong ; "String too long"



; _DWORD *__fastcall sub_12708(_DWORD *)
sub_12708
PUSH            {R4-R8,LR}
MOV             R6, R0
BL              sub_12664
MOVW            R3, #0x2328
CMP             R0, R3
BLS             loc_12728
LDR             R0, =aStringTooLong ; "String too long"
BL              sub_184AC

loc_12728
MOV             R4, R0
BL              sub_12344
MOV             R1, R4
MOV             R5, R0
BL              sub_12624
MOV             R1, R4
MOV             R7, R0
MOV             R0, R6
BL              sub_125E4
MOV             R2, R4  ; n
MOV             R1, R0  ; src
MOV             R0, R7  ; dest
BL              memcpy
MOV             R1, R4
MOV             R0, R6
BL              sub_1250C
MOV             R0, R5
MOV             R1, R4
BL              sub_12464
MOV             R0, R5
POP             {R4-R8,PC}
; End of function sub_12708

off_1277C DCD aStringTooLong ; "String too long"



; int __fastcall sub_12780(_DWORD *)
sub_12780
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_12664
MOV             R1, R0
MOV             R0, R4
POP             {R4,LR}
B               sub_1250C
; End of function sub_12780




; _DWORD *__fastcall sub_1279C(_DWORD *, unsigned int)
sub_1279C
PUSH            {R4-R6,LR}
MOV             R4, R0
REV             R5, R1
MOV             R1, #4
BL              sub_12624
MOV             R1, #4
STR             R5, [R0]
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_124C4
; End of function sub_1279C




; _DWORD *__fastcall sub_127C4(_DWORD *, const void *, unsigned int)
sub_127C4
PUSH            {R4-R6,LR}
MOV             R4, R2
MOV             R6, R1
MOV             R1, R2
MOV             R5, R0
BL              sub_12624
MOV             R1, R6  ; src
MOV             R2, R4  ; n
BL              memcpy
MOV             R1, R4
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_124C4
; End of function sub_127C4




; _DWORD *__fastcall sub_127F8(_DWORD *, const void *, unsigned int)
sub_127F8
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R6, R1
MOV             R4, R2
MOV             R1, R2
BL              sub_1279C
MOV             R2, R4
MOV             R1, R6
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_127C4
; End of function sub_127F8




; _DWORD *__fastcall sub_12824(_DWORD *, int)
sub_12824
LDM             R1, {R1,R2}
B               sub_127F8
; End of function sub_12824




; _DWORD *__fastcall sub_1282C(_DWORD *, int)
sub_1282C
PUSH            {R4-R8,LR}
SUBS            R6, R1, #0
BNE             loc_12848
MOVW            R2, #0x126
LDR             R1, =(aCircbufferC+4) ; "buffer.c"
LDR             R0, =aMpNull ; "mp != NULL"
BL              sub_184D4

loc_12848
LDR             R3, [R6,#8]
CMP             R3, #1
LDREQ           R0, =aNegativeBignum ; "negative bignum"
BEQ             loc_128EC
LDR             R3, [R6]
MOV             R7, R0
CMP             R3, #1
BNE             loc_12880
LDR             R3, [R6,#0xC]
LDR             R4, [R3]
CMP             R4, #0
MOVEQ           R5, R4
MOVEQ           R4, R5
BEQ             loc_1289C

loc_12880
MOV             R0, R6
BL              sub_2A310
TST             R0, #7
MOV             R0, R0,LSR#3
MOVEQ           R5, #1
MOVNE           R5, #0
ADD             R4, R0, #1

loc_1289C
MOV             R1, R4
MOV             R0, R7
BL              sub_1279C
CMP             R4, #0
POPEQ           {R4-R8,PC}
CMP             R5, #0
BEQ             loc_128C4
MOV             R1, #0
MOV             R0, R7
BL              sub_125A4

loc_128C4
SUB             R4, R4, R5
MOV             R0, R7
MOV             R1, R4
BL              sub_12624
MOV             R1, R0
MOV             R0, R6
BL              sub_2EACC
CMP             R0, #0
BEQ             loc_128F0
LDR             R0, =aMpintError ; "mpint error"

loc_128EC
BL              sub_184AC

loc_128F0
MOV             R1, R4
MOV             R0, R7
POP             {R4-R8,LR}
B               sub_124C4
; End of function sub_1282C

off_12900 DCD aCircbufferC+4 ; "buffer.c"
off_12904 DCD aMpNull   ; "mp != NULL"
off_12908 DCD aNegativeBignum ; "negative bignum"
off_1290C DCD aMpintError ; "mpint error"



; int __fastcall sub_12910(_DWORD *, int)
sub_12910
PUSH            {R4-R6,LR}
MOV             R6, R0
MOV             R5, R1
BL              sub_12664
SUBS            R4, R0, #0
BNE             loc_1293C
MOV             R0, R5
MOV             R5, R4
BL              sub_2EB8C

loc_12934
MOV             R0, R5
POP             {R4-R6,PC}

loc_1293C
MOVW            R3, #0x406
CMP             R4, R3
BLS             loc_12950

loc_12948
MOV             R5, #0xFFFFFFFF
B               loc_12934

loc_12950
MOV             R1, #1
MOV             R0, R6
BL              sub_125E4
LDRSB           R3, [R0]
CMP             R3, #0
BLT             loc_12948
MOV             R1, R4
MOV             R0, R6
BL              sub_125E4
MOV             R2, R4
MOV             R1, R0
MOV             R0, R5
BL              sub_2DE30
SUBS            R5, R0, #0
BNE             loc_12948
MOV             R1, R4
MOV             R0, R6
BL              sub_1250C
B               loc_12934
; End of function sub_12910




; _DWORD *__fastcall sub_1299C(unsigned int)
sub_1299C
LDR             R3, =0x5F5E100
PUSH            {R4,LR}
CMP             R0, R3
BLS             loc_129B4
LDR             R0, =aBadCbufSize ; "Bad cbuf size"
BL              sub_184AC

loc_129B4
MOV             R4, R0
MOV             R0, #0x14
BL              sub_18718
MOV             R2, #0
STR             R4, [R0]
STR             R2, [R0,#0x10]
STR             R2, [R0,#0xC]
STR             R2, [R0,#4]
STR             R2, [R0,#8]
POP             {R4,PC}
; End of function sub_1299C

dword_129DC DCD 0x5F5E100
off_129E0 DCD aBadCbufSize ; "Bad cbuf size"



; void __fastcall sub_129E4(_DWORD *ptr)
sub_129E4
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0,#0x10]
CMP             R0, #0
BEQ             loc_12A08
LDR             R1, [R4]
BL              j_explicit_bzero
LDR             R0, [R4,#0x10] ; ptr
BL              free

loc_12A08               ; ptr
MOV             R0, R4
POP             {R4,LR}
B               free
; End of function sub_129E4




; int __fastcall sub_12A14(int)
sub_12A14
LDR             R0, [R0,#0xC]
BX              LR
; End of function sub_12A14




; int __fastcall sub_12A1C(_DWORD *)
sub_12A1C
LDR             R2, [R0]
LDR             R0, [R0,#0xC]
SUB             R0, R2, R0
BX              LR
; End of function sub_12A1C




; unsigned int __fastcall sub_12A2C(unsigned int *)
sub_12A2C
PUSH            {R4-R10,LR}
LDR             R7, [R0,#0xC]
LDR             R5, [R0]
CMP             R7, R5
BLS             loc_12A50
LDR             R1, =aCircbufferC ; "circbuffer.c"
MOV             R2, #0x49 ; 'I'
LDR             R0, =aCbufUsedCbufSi ; "cbuf->used <= cbuf->size"

loc_12A4C
BL              sub_184D4

loc_12A50
LDR             R6, [R0,#4]
MOV             R8, R5,LSL#1
LDR             R4, [R0,#8]
MOV             R1, R5
SUB             R0, R8, R6
ADD             R0, R0, R4
BLX             sub_34DFC
MOV             R0, R7
MOV             R9, R1
MOV             R1, R5
BLX             sub_34DFC
CMP             R9, R1
MOVNE           R2, #0x4A ; 'J'
LDRNE           R1, =aCircbufferC ; "circbuffer.c"
LDRNE           R0, =a2CbufSizeCbufW ; "((2*cbuf->size)+cbuf->writepos-cbuf->re"...
BNE             loc_12A4C
SUB             R0, R8, R4
MOV             R1, R5
ADD             R0, R0, R6
BLX             sub_34DFC
SUB             R0, R5, R7
MOV             R8, R1
MOV             R1, R5
BLX             sub_34DFC
CMP             R8, R1
MOVNE           R2, #0x4B ; 'K'
LDRNE           R1, =aCircbufferC ; "circbuffer.c"
LDRNE           R0, =a2CbufSizeCbufR ; "((2*cbuf->size)+cbuf->readpos-cbuf->wri"...
BNE             loc_12A4C
CMP             R7, R5
BEQ             loc_12ADC
CMP             R4, R6
SUBCC           R0, R6, R4
SUBCS           R0, R5, R4
POP             {R4-R10,PC}

loc_12ADC
MOV             R0, #0
POP             {R4-R10,PC}
; End of function sub_12A2C

off_12AE4 DCD aCircbufferC ; "circbuffer.c"
off_12AE8 DCD aCbufUsedCbufSi ; "cbuf->used <= cbuf->size"
off_12AEC DCD a2CbufSizeCbufW ; "((2*cbuf->size)+cbuf->writepos-cbuf->re"...
off_12AF0 DCD a2CbufSizeCbufR ; "((2*cbuf->size)+cbuf->readpos-cbuf->wri"...



; _DWORD *__fastcall sub_12AF4(_DWORD *result, _DWORD *, unsigned int *, unsigned int *, unsigned int *)
sub_12AF4

arg_0=  8

LDR             R12, [R0,#0x10]
PUSH            {R4,LR}
LDR             R4, [R0,#4]
LDR             LR, [SP,#arg_0]
ADD             R12, R12, R4
STR             R12, [R1]
LDR             R1, [R0]
LDR             R12, [R0,#0xC]
SUB             R1, R1, R4
CMP             R1, R12
MOVCS           R1, R12
STR             R1, [R2]
LDR             R2, [R0,#0xC]
CMP             R1, R2
LDRCC           R0, [R0,#0x10]
MOVCS           R2, #0
SUBCC           R1, R2, R1
STRCS           R2, [R3]
STRCS           R2, [LR]
STRCC           R0, [R3]
STRCC           R1, [LR]
POP             {R4,PC}
; End of function sub_12AF4




; int __fastcall sub_12B4C(unsigned int *, unsigned int)
sub_12B4C
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R0
BL              sub_12A2C
CMP             R0, R5
BCS             loc_12B6C
LDR             R0, =aBadCbufWrite ; "Bad cbuf write"
BL              sub_184AC

loc_12B6C
LDR             R3, [R4,#0x10]
CMP             R3, #0
BNE             loc_12B84
LDR             R0, [R4]
BL              sub_18718
STR             R0, [R4,#0x10]

loc_12B84
LDR             R0, [R4,#0x10]
LDR             R3, [R4,#8]
ADD             R0, R0, R3
POP             {R4-R6,PC}
; End of function sub_12B4C

off_12B94 DCD aBadCbufWrite ; "Bad cbuf write"



; unsigned int __fastcall sub_12B98(unsigned int *, unsigned int)
sub_12B98
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R0
BL              sub_12A2C
CMP             R0, R5
BCS             loc_12BB8
LDR             R0, =aBadCbufWrite ; "Bad cbuf write"
BL              sub_184AC

loc_12BB8
LDR             R3, [R4,#0xC]
LDR             R1, [R4]
ADD             R3, R5, R3
CMP             R3, R1
STR             R3, [R4,#0xC]
BLS             loc_12BE0
MOV             R2, #0x7C ; '|'
LDR             R1, =aCircbufferC ; "circbuffer.c"
LDR             R0, =aCbufUsedCbufSi ; "cbuf->used <= cbuf->size"
BL              sub_184D4

loc_12BE0
LDR             R0, [R4,#8]
ADD             R0, R5, R0
BLX             sub_34DFC
STR             R1, [R4,#8]
POP             {R4-R6,PC}
; End of function sub_12B98

off_12BF4 DCD aBadCbufWrite ; "Bad cbuf write"
off_12BF8 DCD aCircbufferC ; "circbuffer.c"
off_12BFC DCD aCbufUsedCbufSi ; "cbuf->used <= cbuf->size"



; unsigned int __fastcall sub_12C00(unsigned int *, unsigned int)
sub_12C00
LDR             R3, [R0,#0xC]
PUSH            {R4,LR}
CMP             R3, R1
BCS             loc_12C20
MOV             R2, #0x82
LDR             R1, =aCircbufferC ; "circbuffer.c"
LDR             R0, =aCbufUsedLen ; "cbuf->used >= len"
BL              sub_184D4

loc_12C20
SUB             R3, R3, R1
MOV             R4, R0
STR             R3, [R0,#0xC]
MOV             R2, R1
LDR             R0, [R0,#4]
LDR             R1, [R4]
ADD             R0, R2, R0
BLX             sub_34DFC
STR             R1, [R4,#4]
POP             {R4,PC}
; End of function sub_12C00

off_12C48 DCD aCircbufferC ; "circbuffer.c"
off_12C4C DCD aCbufUsedLen ; "cbuf->used >= len"



; int sub_12C50()
sub_12C50
MOV             R0, #0
BX              LR
; End of function sub_12C50




; int __fastcall sub_12C58(void *src, void *dest, size_t)
sub_12C58
CMP             R0, R1
BEQ             loc_12C7C
MOV             R3, R0
PUSH            {R4,LR}
MOV             R0, R1  ; dest
MOV             R1, R3  ; src
BL              memmove
MOV             R0, #0
POP             {R4,PC}

loc_12C7C
MOV             R0, #0
BX              LR
; End of function sub_12C58




; int __fastcall sub_12C84(unsigned int, char *, int, int, int, unsigned int *)
sub_12C84

var_10= -0x10
var_C= -0xC
var_8= -8
arg_0=  8
arg_4=  0xC

PUSH            {R0-R4,LR}
LDR             R12, [SP,#0x10+arg_4]
STR             R12, [SP,#0x10+var_8]
MOV             R12, #0x1000
STR             R12, [SP,#0x10+var_C]
LDR             R12, [SP,#0x10+arg_0]
STR             R12, [SP,#0x10+var_10]
BL              sub_27470
ADD             SP, SP, #0x14
POP             {PC}
; End of function sub_12C84




; int __fastcall sub_12CAC(const char *, size_t, const char **)
sub_12CAC
PUSH            {R4-R8,LR}
MOV             R7, R0
MOV             R6, R1
MOV             R5, R2

loc_12CBC
LDR             R4, [R5]
CMP             R4, #0
BNE             loc_12CD0
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}

loc_12CD0               ; s
MOV             R0, R4
BL              strlen
CMP             R0, R6
BNE             loc_12CF8
MOV             R2, R6  ; n
MOV             R1, R7  ; s2
MOV             R0, R4  ; s1
BL              strncmp
CMP             R0, #0
POPEQ           {R4-R8,PC}

loc_12CF8
ADD             R5, R5, #0x14
B               loc_12CBC
; End of function sub_12CAC




; void __fastcall sub_12D00(_DWORD *, int)
sub_12D00
PUSH            {R4-R8,LR}
MOV             R4, R1
MOV             R7, R0
MOV             R0, #0x12C
ADD             R4, R4, #0xC
BL              sub_12344
MOV             R3, #0
MOV             R5, R0

loc_12D20
LDR             R2, [R4,#-0xC]
CMP             R2, #0
BNE             loc_12D44
MOV             R0, R7
LDM             R5, {R1,R2}
BL              sub_127F8
MOV             R0, R5  ; ptr
POP             {R4-R8,LR}
B               j_free

loc_12D44
LDRB            R2, [R4]
CMP             R2, #0
BEQ             loc_12D84
CMP             R3, #0
BEQ             loc_12D64
MOV             R1, #0x2C ; ','
MOV             R0, R5
BL              sub_125A4

loc_12D64
LDR             R6, [R4,#-0xC]
MOV             R0, R6  ; s
BL              strlen
MOV             R1, R6
MOV             R2, R0
MOV             R0, R5
BL              sub_127C4
MOV             R3, #1

loc_12D84
ADD             R4, R4, #0x14
B               loc_12D20
; End of function sub_12D00




; int __fastcall sub_12D8C(_DWORD *, int, int *, _DWORD *)
sub_12D8C

var_B0= -0xB0
var_A8= -0xA8
var_A4= -0xA4
var_54= -0x54
var_4= -4

PUSH            {R4-R11,LR}
SUBS            R7, R3, #0
MOVNE           R3, #0
SUB             SP, SP, #0xB4
MOV             R8, R1
ADD             R1, SP, #0xB4+var_A8
STRNE           R3, [R7]
MOV             R6, R2
BL              sub_12690
LDR             R2, [SP,#0xB4+var_A8]
MOVW            R3, #0x514
MOV             R9, R0
CMP             R2, R3
BHI             loc_12F50
STR             R0, [SP,#0xB4+var_A4]
MOV             R3, R0
MOV             R10, #1
MOV             R0, #0

loc_12DD4
LDR             R1, [SP,#0xB4+var_A8]
SUB             R2, R3, R9
CMP             R1, R2
BLS             loc_12E18
LDRB            R2, [R3]
CMP             R2, #0
BEQ             loc_12F50
CMP             R2, #0x2C ; ','
ADD             R2, R3, #1
STRBEQ          R0, [R3]
ADDEQ           R3, SP, #0xB4+var_4
ADDEQ           R3, R3, R10,LSL#2
ADDEQ           R10, R10, #1
STREQ           R2, [R3,#-0xA0]
CMP             R10, #0x13
MOV             R3, R2
BLS             loc_12DD4

loc_12E18
CMP             R6, #0
BEQ             loc_12E60
LDR             R4, [R6]
CMP             R4, #0
BNE             loc_12E60
LDR             R11, =aKexguess2MattU ; "kexguess2@matt.ucc.asn.au"
ADD             R5, SP, #0xB4+var_A4

loc_12E34               ; s2
MOV             R1, R11
LDR             R0, [R5,R4,LSL#2] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_12E88
MOV             R3, #2
STR             R3, [R6]

loc_12E50
LDR             R3, [R6]
CMP             R3, #0
MOVEQ           R3, #1
STREQ           R3, [R6]

loc_12E60
MOV             R3, R8
MOV             R11, #0
ADD             R1, SP, #0xB4+var_54

loc_12E6C
LDR             R4, [R3]
CMP             R4, #0
BNE             loc_12E98
ADD             R3, SP, #0xB4+var_A4
ADD             R2, SP, #0xB4+var_54

loc_12E80
MOV             R5, #0
B               loc_12F38

loc_12E88
ADD             R4, R4, #1
CMP             R10, R4
BNE             loc_12E34
B               loc_12E50

loc_12E98
LDRB            R2, [R3,#0xC]
ADD             R3, R3, #0x14
CMP             R2, #0
MOVEQ           R4, R2
STR             R4, [R1,R11,LSL#2]
ADD             R11, R11, #1
B               loc_12E6C

loc_12EB4               ; s1
LDR             R0, [R2,R5,LSL#2]
CMP             R0, #0
BEQ             loc_12F34
LDR             R1, [R3] ; s2
CMP             R1, #0
BEQ             loc_12F34
STR             R3, [SP,#0xB4+var_B0]
BL              strcmp
CMP             R0, #0
LDR             R3, [SP,#0xB4+var_B0]
ADD             R2, SP, #0xB4+var_54
BNE             loc_12F34
CMP             R7, #0
CMPNE           R6, #0
BEQ             loc_12F0C
LDR             R3, [R6]
CMP             R3, #2
BNE             loc_12F28
CMP             R4, #0
BNE             loc_12F0C

loc_12F04
MOV             R3, #1
STR             R3, [R7]

loc_12F0C
MOV             R3, #0x14
MLA             R5, R3, R5, R8

loc_12F14               ; ptr
MOV             R0, R9
BL              free
MOV             R0, R5
ADD             SP, SP, #0xB4
POP             {R4-R11,PC}

loc_12F28
ORRS            R3, R5, R4
BEQ             loc_12F04
B               loc_12F0C

loc_12F34
ADD             R5, R5, #1

loc_12F38
CMP             R11, R5
BNE             loc_12EB4
ADD             R4, R4, #1
ADD             R3, R3, #4
CMP             R10, R4
BNE             loc_12E80

loc_12F50
MOV             R5, #0
B               loc_12F14
; End of function sub_12D8C

off_12F58 DCD aKexguess2MattU ; "kexguess2@matt.ucc.asn.au"



; char *__fastcall sub_12F5C(int)
sub_12F5C
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, #0xC8
BL              sub_12344
MOV             R1, R5
MOV             R4, R0
BL              sub_12D00
LDR             R1, [R4,#4]
MOV             R0, R4
BL              sub_124A0
MOV             R0, R4
MOV             R1, #0
BL              sub_125A4
MOV             R0, R4
MOV             R1, #4
BL              sub_124A0
LDMIB           R4, {R1,R3}
SUB             R1, R1, R3
MOV             R0, R4
BL              sub_125E4
BL              sub_1886C
MOV             R5, R0
MOV             R0, R4  ; ptr
BL              j_free
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_12F5C




; int __fastcall sub_12FC4(const char *, const char **, const char *)
sub_12FC4

var_1B8= -0x1B8
var_1B4= -0x1B4
var_1B0= -0x1B0
var_1A8= -0x1A8
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1BC
MOV             R10, R1
STR             R2, [SP,#0x1BC+var_1B4]
ADD             R9, SP, #0x1BC+var_1A8
MOV             R5, #0
STR             R0, [SP,#0x1BC+var_1B8]
BL              sub_1886C
MOV             R7, R0
MOV             R2, #0x1A4 ; n
MOV             R6, R7
MOV             R11, R7
MOV             R1, #0  ; c
MOV             R0, R9  ; s
BL              memset

loc_13000
CMP             R5, #0x13
LDRB            R8, [R6]
BLE             loc_13018
LDR             R1, [SP,#0x1BC+var_1B8]
LDR             R0, =aTooManyAlgorit ; "Too many algorithms '%s'"
BL              sub_184AC

loc_13018
CMP             R8, #0
CMPNE           R8, #0x2C ; ','
MOVEQ           R3, #0
MOVEQ           R4, R10
STRBEQ          R3, [R6]
BEQ             loc_1304C

loc_13030
ADD             R6, R6, #1
B               loc_13000

loc_13038               ; s2
MOV             R1, R11
BL              strcmp
SUBS            R3, R0, #0
BEQ             loc_1309C
ADD             R4, R4, #0x14

loc_1304C               ; s1
LDR             R0, [R4]
CMP             R0, #0
BNE             loc_13038
LDR             R3, [SP,#0x1BC+var_1B4]
MOV             R2, R11
LDR             R1, =aThisDropbearPr ; "This Dropbear program does not support "...
MOV             R0, #4
BL              sub_184E8

loc_1306C
CMP             R8, #0
ADD             R6, R6, #1
BEQ             loc_130D0
MOV             R11, R6
B               loc_13030

loc_13080               ; s2
MOV             R1, R11
STR             R3, [SP,#0x1BC+var_1B0]
BL              strcmp
LDR             R3, [SP,#0x1BC+var_1B0]
CMP             R0, #0
ADD             R3, R3, #0x14
BEQ             loc_1306C

loc_1309C               ; s1
LDR             R0, [R9,R3]
CMP             R0, #0
BNE             loc_13080
ADD             R3, SP, #0x1BC+var_4
MOV             R12, #0x14
MLA             R12, R12, R5, R3
LDM             R4!, {R0-R3}
ADD             R5, R5, #1
SUB             R12, R12, #0x1A4
STM             R12!, {R0-R3}
LDR             R3, [R4]
STR             R3, [R12]
B               loc_1306C

loc_130D0               ; ptr
MOV             R0, R7
BL              free
MOV             R2, #0x14
MOV             R1, R9  ; src
MLA             R2, R5, R2, R2 ; n
MOV             R0, R10 ; dest
BL              memcpy
MOV             R0, R5
ADD             SP, SP, #0x1BC
POP             {R4-R11,PC}
; End of function sub_12FC4

off_130F8 DCD aTooManyAlgorit ; "Too many algorithms '%s'"
off_130FC DCD aThisDropbearPr ; "This Dropbear program does not support "...



; int __fastcall sub_13100(void *)
sub_13100
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R0, [R0,#0x2C] ; ptr
MOV             R5, #0
BL              sub_129E4
LDR             R0, [R4,#0x30] ; ptr
STR             R5, [R4,#0x2C]
CMP             R0, R5
BEQ             loc_1312C
BL              sub_129E4
STR             R5, [R4,#0x30]

loc_1312C
LDR             R0, [R4,#0x20]
BL              sub_185B8
LDR             R0, [R4,#0x24]
BL              sub_185B8
LDR             R0, [R4,#0x28]
BL              sub_185B8
LDR             R3, [R4,#0x44]
CMP             R3, #0
BNE             loc_13170
LDR             R3, [R4,#0x5C]
LDR             R3, [R3,#0x14]
CMP             R3, #0
BEQ             loc_13170
MOV             R0, R4
BLX             R3
MOV             R3, #1
STR             R3, [R4,#0x44]

loc_13170
LDR             R0, [R4,#0x48]
CMP             R0, #0
BEQ             loc_13180
BL              sub_1C6CC

loc_13180
LDR             R5, =byte_4CA40
MOV             R1, #0
LDR             R2, [R4]
MOV             R0, R4  ; ptr
LDR             R3, [R5,#(dword_4CB24 - 0x4CA40)]
STR             R1, [R3,R2,LSL#2]
BL              free
LDR             R3, [R5,#(dword_4CB2C - 0x4CA40)]
SUB             R3, R3, #1
STR             R3, [R5,#(dword_4CB2C - 0x4CA40)]
POP             {R4-R6,LR}
B               sub_1617C
; End of function sub_13100

off_131B0 DCD byte_4CA40



; int __fastcall sub_131B4(const char *)
sub_131B4
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, =byte_4CA40
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
LDR             R3, [R4,#(dword_4CB28 - 0x4CA40)]
MOV             R2, R0
CMP             R3, R0
BLS             loc_131E8
LDR             R3, [R4,#(dword_4CB24 - 0x4CA40)]
LDR             R0, [R3,R0,LSL#2]
CMP             R0, #0
POPNE           {R4-R6,PC}

loc_131E8
CMP             R5, #0
BEQ             loc_131FC
MOV             R1, R5
LDR             R0, =aSForUnknownCha ; "%s for unknown channel %d"
BL              sub_184AC

loc_131FC
MOV             R1, R2
LDR             R0, =aUnknownChannel ; "Unknown channel %d"
BL              sub_184AC
; End of function sub_131B4

off_13208 DCD byte_4CA40
off_1320C DCD aSForUnknownCha ; "%s for unknown channel %d"
off_13210 DCD aUnknownChannel ; "Unknown channel %d"



; _DWORD *__fastcall sub_13214(unsigned int *, unsigned int, unsigned int)
sub_13214
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R4, =byte_4CA40
MOV             R7, R1
MOV             R1, #0x5B ; '['
MOV             R6, R2
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R5,#4]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
LDR             R1, [R5]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
MOV             R1, R7
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
MOV             R1, R6
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
POP             {R4-R8,LR}
B               sub_1D894
; End of function sub_13214

off_1326C DCD byte_4CA40



; int __fastcall sub_13270(int, int fd, int how)
sub_13270
LDR             R3, [R0,#0x5C]
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_132D4
MOV             R6, R2
MOV             R1, R2  ; how
MOV             R0, R5  ; fd
BL              shutdown
CMP             R6, #0
BEQ             loc_132E0

loc_132A4
LDR             R3, [R4,#0x20]
CMP             R3, R5
MOVEQ           R3, #0xFFFFFFFF
STREQ           R3, [R4,#0x20]
LDR             R3, [R4,#0x30]
CMP             R3, #0
BEQ             loc_13314
LDR             R3, [R4,#0x28]
CMP             R3, R5
MOVEQ           R3, #0xFFFFFFFF
STREQ           R3, [R4,#0x28]
B               loc_13314

loc_132D4
MOV             R6, #1
MOV             R0, R1
BL              sub_185B8

loc_132E0
LDR             R3, [R4,#0x24]
CMP             R3, R5
MOVEQ           R3, #0xFFFFFFFF
STREQ           R3, [R4,#0x24]
LDR             R3, [R4,#0x30]
CMP             R3, #0
BNE             loc_1330C
LDR             R3, [R4,#0x28]
CMP             R3, R5
MOVEQ           R3, #0xFFFFFFFF
STREQ           R3, [R4,#0x28]

loc_1330C
CMP             R6, #0
BNE             loc_132A4

loc_13314
LDR             R3, [R4,#0x5C]
LDR             R3, [R3]
CMP             R3, #0
POPEQ           {R4-R6,PC}
LDR             R3, [R4,#0x24]
CMN             R3, #1
POPNE           {R4-R6,PC}
LDR             R3, [R4,#0x20]
CMN             R3, #1
POPNE           {R4-R6,PC}
LDR             R3, [R4,#0x28]
CMN             R3, #1
POPNE           {R4-R6,PC}
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_185B8
; End of function sub_13270




; _DWORD *__fastcall sub_13354(unsigned int *, unsigned int, unsigned int)
sub_13354

var_8= -8

LDR             R3, [R0,#0x34]
PUSH            {R0-R2,R4-R9,LR}
CMP             R3, #0
BEQ             loc_13374
LDR             R1, =file ; "common-channel.c"
MOV             R2, #0x2D8
LDR             R0, =aChannelSentClo ; "!channel->sent_close"

loc_13370
BL              sub_184D4

loc_13374
CMP             R1, #0
MOV             R4, R0
MOV             R8, R1
LDR             R5, =byte_4CA40
BEQ             loc_133A4
LDR             R7, [R0,#0x28]
CMP             R7, #0
BGE             loc_13464

loc_13394
MOV             R2, #0x2E0
LDR             R1, =file ; "common-channel.c"
LDR             R0, =aFd0 ; "fd >= 0"
B               loc_13370

loc_133A4
LDR             R7, [R0,#0x24]
CMP             R7, #0
BLT             loc_13394
LDR             R3, [R0,#0xC]
MOV             R2, R1
LDR             R6, [R0,#0x18]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
CMP             R6, R3
MOVCS           R6, R3
LDR             R3, [R0,#0xC]
B               loc_13480

loc_133D0
LDR             R8, [R4,#0x58]
CMP             R8, #0
BEQ             loc_13400
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_12624
ADD             R2, SP, #0xC+var_8
MOV             R1, R0
MOV             R0, R4
BLX             R8
LDR             R8, [SP,#0xC+var_8]
CMP             R8, #0
BEQ             loc_13528

loc_13400
LDR             R1, [SP,#0xC+var_8]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_124C4
MOV             R1, R9
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_124A0
LDR             R1, [SP,#0xC+var_8]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
LDR             R3, [R4,#0xC]
LDR             R2, [SP,#0xC+var_8]
SUB             R3, R3, R2
STR             R3, [R4,#0xC]
BL              sub_1D894
LDR             R3, [R4,#0x54]
CMP             R3, #0
BEQ             loc_13540
LDR             R3, [SP,#0xC+var_8]
CMP             R3, R6
BGE             loc_13540
MOV             R2, #0  ; how
MOV             R1, R7  ; fd
MOV             R0, R4  ; int
BL              sub_13270
B               loc_13540

loc_13464
LDR             R3, [R0,#0xC]
MOV             R2, #4
LDR             R6, [R0,#0x18]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
CMP             R6, R3
MOVCS           R6, R3
LDR             R3, [R0,#0xC]

loc_13480
SUB             R3, R3, #9
SUB             R3, R3, R2
CMP             R3, R6
MOVCC           R6, R3
CMP             R6, #0
BEQ             loc_13540
CMP             R8, #0
MOVEQ           R1, #0x5E ; '^'
MOVNE           R1, #0x5F ; '_'
BL              sub_125A4
LDR             R1, [R4,#4]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
CMP             R8, #0
BEQ             loc_134C8
MOV             R1, #1
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C

loc_134C8
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
MOV             R1, #0
LDR             R9, [R0,#8]
BL              sub_1279C
MOV             R1, R6
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_12624
MOV             R2, R6  ; nbytes
MOV             R1, R0  ; buf
MOV             R0, R7  ; fd
BL              read
CMP             R0, #0
MOV             R1, R0
STR             R0, [SP,#0xC+var_8]
BGT             loc_133D0
BEQ             loc_13518
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_13528

loc_13518               ; how
MOV             R2, #0
MOV             R1, R7  ; fd
MOV             R0, R4  ; int
BL              sub_13270

loc_13528
MOV             R1, #0
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_124A0
MOV             R1, #0
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_12430

loc_13540
ADD             SP, SP, #0xC
POP             {R4-R9,PC}
; End of function sub_13354

off_13548 DCD file      ; "common-channel.c"
off_1354C DCD aChannelSentClo ; "!channel->sent_close"
off_13550 DCD byte_4CA40
off_13554 DCD aFd0      ; "fd >= 0"



; int __fastcall sub_13558(_DWORD *)
sub_13558
LDR             R3, [R0,#0x5C]
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R3, [R3,#0x14]
CMP             R3, #0
BEQ             loc_13588
LDR             R2, [R0,#0x44]
CMP             R2, #0
BNE             loc_13588
BLX             R3
MOV             R3, #1
STR             R3, [R4,#0x44]

loc_13588
LDR             R5, =byte_4CA40
MOV             R1, #0x61 ; 'a'
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R4,#4]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
MOV             R5, #1
BL              sub_1279C
BL              sub_1D894
LDR             R1, [R4,#0x24] ; fd
MOV             R0, R4  ; int
STR             R5, [R4,#0x40]
MOV             R2, #0  ; how
STR             R5, [R4,#0x34]
BL              sub_13270
LDR             R1, [R4,#0x28] ; fd
MOV             R0, R4  ; int
MOV             R2, #2  ; how
BL              sub_13270
MOV             R2, R5  ; how
LDR             R1, [R4,#0x20] ; fd
MOV             R0, R4  ; int
POP             {R4-R6,LR}
B               sub_13270
; End of function sub_13558

off_135E8 DCD byte_4CA40



; _DWORD *__fastcall sub_135EC(int, int, int, int)
sub_135EC
PUSH            {R4-R10,LR}
MOV             R8, R0
LDR             R5, =byte_4CA40
MOV             R10, R3
MOV             R6, R1
MOV             R9, R2
MOV             R7, #0
LDR             R3, [R5,#(dword_4CB28 - 0x4CA40)]
LDR             R0, [R5,#(dword_4CB24 - 0x4CA40)]

loc_13610
CMP             R3, R7
BNE             loc_1365C
CMP             R7, #0x3E8
MOVCS           R4, #0
BCS             loc_13704
ADD             R1, R7, #3
MOV             R1, R1,LSL#2
BL              sub_18888
LDR             R2, [R5,#(dword_4CB28 - 0x4CA40)]
MOV             R3, R7
MOV             R1, #0
STR             R0, [R5,#(dword_4CB24 - 0x4CA40)]
ADD             R2, R2, #3
STR             R2, [R5,#(dword_4CB28 - 0x4CA40)]

loc_13648
CMP             R2, R3
BLS             loc_13668
STR             R1, [R0,R3,LSL#2]
ADD             R3, R3, #1
B               loc_13648

loc_1365C
LDR             R2, [R0,R7,LSL#2]
CMP             R2, #0
BNE             loc_1370C

loc_13668
MOV             R0, #0x64 ; 'd'
BL              sub_18718
STR             R8, [R0,#4]
MOV             R3, #0xFFFFFFFE
LDR             R8, =dword_4CA24
MOV             R4, R0
STR             R6, [R0,#0x5C]
MOV             R6, #0
STR             R3, [R0,#0x20]
STR             R3, [R0,#0x24]
MOV             R3, #0xFFFFFFFF
STR             R3, [R0,#0x28]
STR             R7, [R0]
STR             R6, [R0,#0x38]
STR             R6, [R0,#0x34]
STR             R6, [R0,#0x3C]
STR             R6, [R0,#0x40]
STR             R6, [R0,#0x44]
STR             R9, [R0,#0xC]
STR             R10, [R0,#0x18]
STR             R6, [R0,#0x1C]
STR             R6, [R0,#0x50]
STR             R6, [R0,#0x54]
LDR             R0, [R8,#(dword_4CA28 - 0x4CA24)]
BL              sub_1299C
LDR             R3, [R8,#(dword_4CA28 - 0x4CA24)]
STR             R0, [R4,#0x2C]
STR             R6, [R4,#0x30]
STR             R3, [R4,#8]
MOVW            R3, #0x7FF7
STR             R3, [R4,#0x14]
MOV             R3, #3
STR             R3, [R4,#0x60]
LDR             R3, [R5,#(dword_4CB24 - 0x4CA40)]
STR             R6, [R4,#0x10]
STR             R4, [R3,R7,LSL#2]
LDR             R3, [R5,#(dword_4CB2C - 0x4CA40)]
ADD             R3, R3, #1
STR             R3, [R5,#(dword_4CB2C - 0x4CA40)]

loc_13704
MOV             R0, R4
POP             {R4-R10,PC}

loc_1370C
ADD             R7, R7, #1
B               loc_13610
; End of function sub_135EC

off_13714 DCD byte_4CA40
off_13718 DCD dword_4CA24



; int __fastcall sub_1371C(int, int, unsigned int *, int, int *)
sub_1371C

var_30= -0x30
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
iovec= -0x18
var_s0=  0
arg_0=  0x18

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x30
MOV             R7, R2
MOV             R8, R3
ADD             R3, SP, #0x30+var_1C
ADD             R2, SP, #0x30+var_20
STR             R3, [SP,#0x30+var_30]
MOV             R4, R0
ADD             R3, SP, #0x30+var_24
MOV             R5, R1
MOV             R0, R7
ADD             R1, SP, #0x30+var_28
LDR             R6, [SP,#0x30+arg_0]
BL              sub_12AF4
LDR             R2, [SP,#0x30+var_20]
LDR             R1, [SP,#0x30+var_1C]
CMP             R2, #0
LDRNE           R3, [SP,#0x30+var_28]
STRNE           R2, [SP,#0x30+iovec.iov_len]
MOVNE           R2, #1
STRNE           R3, [SP,#0x30+iovec]
CMP             R1, #0
BEQ             loc_137C4
ADD             R3, SP, #0x30+var_s0
LDR             R0, [SP,#0x30+var_24]
ADD             R3, R3, R2,LSL#3
CMP             R6, #0
ADD             R2, R2, #1 ; count
STRD            R0, R1, [R3,#-0x18]
BNE             loc_137CC

loc_13794               ; iovec
ADD             R1, SP, #0x30+iovec
MOV             R0, R5  ; fd
BL              writev
SUBS            R8, R0, #0
BGE             loc_138A4
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
CMPNE           R3, #0xB
BNE             loc_1380C

loc_137BC
MOV             R6, #0
B               loc_13820

loc_137C4
CMP             R6, #0
BEQ             loc_13928

loc_137CC
CMP             R8, #0
BNE             loc_137E8
LDR             R3, =function ; "writechannel_writev"
MOVW            R2, #0x1E3 ; line
LDR             R1, =file ; "common-channel.c"
LDR             R0, =assertion ; "moredata"
BL              __assert_fail

loc_137E8
LDR             R1, [R6]
ADD             R3, SP, #0x30+var_s0
ADD             R3, R3, R2,LSL#3
ADD             R2, R2, #1
STR             R8, [R3,#-0x18]
STR             R1, [R3,#-0x14]
MOV             R3, #0
STR             R3, [R6]
B               loc_13794

loc_1380C
MOV             R6, #0xFFFFFFFF
MOV             R2, #1  ; how
MOV             R1, R5  ; fd
MOV             R0, R4  ; int
BL              sub_13270

loc_13820
LDR             R3, =dword_4CA24
LDR             R2, =0xAAAAAAAB
LDR             R8, [R4,#0x10]
LDR             R0, [R3,#(dword_4CA28 - 0x4CA24)]
MOV             R5, R3
UMULL           R0, R1, R0, R2
CMP             R8, R1,LSR#1
BCC             loc_13884
LDR             R7, =byte_4CA40
MOV             R1, #0x5D ; ']'
LDR             R0, [R7,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R4,#4]
LDR             R0, [R7,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
MOV             R1, R8
LDR             R0, [R7,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
BL              sub_1D894
LDR             R3, [R4,#8]
LDR             R2, [R4,#0x10]
ADD             R3, R3, R2
STR             R3, [R4,#8]
MOV             R3, #0
STR             R3, [R4,#0x10]

loc_13884
LDR             R7, [R4,#8]
LDR             R3, [R5,#(dword_4CA28 - 0x4CA24)]
CMP             R7, R3
BLS             loc_138E0
LDR             R1, =file ; "common-channel.c"
MOV             R2, #0x220
LDR             R0, =aChannelRecvwin ; "channel->recvwindow <= opts.recv_window"

loc_138A0
BL              sub_184D4

loc_138A4
LDR             R3, [SP,#0x30+var_1C]
MOV             R0, R7
LDR             R5, [SP,#0x30+var_20]
ADD             R5, R5, R3
CMP             R5, R8
MOVCS           R5, R8
MOV             R1, R5
BL              sub_12C00
CMP             R6, #0
SUBNE           R5, R8, R5
STRNE           R5, [R6]
LDR             R3, [R4,#0x10]
ADD             R8, R3, R8
STR             R8, [R4,#0x10]
B               loc_137BC

loc_138E0
LDR             R0, [R4,#0x2C]
BL              sub_12A1C
CMP             R7, R0
MOVWHI          R2, #0x221
LDRHI           R1, =file ; "common-channel.c"
LDRHI           R0, =aChannelRecvwin_0 ; "channel->recvwindow <= cbuf_getavail(ch"...
BHI             loc_138A0
LDR             R0, [R4,#0x30]
CMP             R0, #0
BEQ             loc_13934
LDR             R4, [R4,#8]
BL              sub_12A1C
CMP             R4, R0
BLS             loc_13934
MOVW            R2, #0x223
LDR             R1, =file ; "common-channel.c"
LDR             R0, =aChannelExtrabu ; "channel->extrabuf == NULL || channel->r"...
B               loc_138A0

loc_13928
CMP             R2, #0
BEQ             loc_137BC
B               loc_13794

loc_13934
MOV             R0, R6
ADD             SP, SP, #0x30 ; '0'
POP             {R4-R8,PC}
; End of function sub_1371C

off_13940 DCD function  ; "writechannel_writev"
off_13944 DCD file      ; "common-channel.c"
off_13948 DCD assertion ; "moredata"
off_1394C DCD dword_4CA24
dword_13950 DCD 0xAAAAAAAB
off_13954 DCD byte_4CA40
off_13958 DCD aChannelRecvwin ; "channel->recvwindow <= opts.recv_window"
off_1395C DCD aChannelRecvwin_0 ; "channel->recvwindow <= cbuf_getavail(ch"...
off_13960 DCD aChannelExtrabu ; "channel->extrabuf == NULL || channel->r"...



; int __fastcall sub_13964(int *)
sub_13964
LDR             R3, [R0,#0x20]
PUSH            {R4,LR}
MOV             R4, R0
CMP             R3, #0
BGE             loc_1398C

loc_13978
LDR             R3, [R4,#0x28]
CMP             R3, #0
BGE             loc_139A4
MOV             R0, #0
POP             {R4,PC}

loc_1398C
LDR             R0, [R0,#0x2C]
BL              sub_12A14
CMP             R0, #0
BEQ             loc_13978
MOV             R0, #1
POP             {R4,PC}

loc_139A4
LDR             R0, [R4,#0x30]
CMP             R0, #0
POPEQ           {R4,PC}
BL              sub_12A14
MOVS            R0, R0
MOVNE           R0, #1
POP             {R4,PC}
; End of function sub_13964




; _DWORD *__fastcall sub_139C0(_DWORD *result, int, unsigned int)
sub_139C0
LDR             R3, [R0,#0x54]
PUSH            {R4-R6,LR}
MOV             R4, R0
CMP             R3, #0
BNE             loc_13A00
LDR             R3, [R0,#0x44]
CMP             R3, #0
BNE             loc_13A00
LDR             R3, [R0,#0x5C]
LDR             R3, [R3,#0xC]
CMP             R3, #0
BEQ             loc_13A74
BLX             R3
CMP             R0, #0
MOVNE           R3, #1
STRNE           R3, [R4,#0x54]

loc_13A00
LDR             R3, [R4,#0x5C]
LDR             R3, [R3,#0xC]
CMP             R3, #0
BEQ             loc_13A74
LDR             R2, [R4,#0x44]
CMP             R2, #0
BNE             loc_13A74
MOV             R0, R4
BLX             R3
MOVS            R5, R0
MOVNE           R5, #1

loc_13A2C
LDR             R3, [R4,#0x38]
CMP             R3, #0
BEQ             loc_13A7C
MOV             R0, R4
BL              sub_13964
CMP             R0, #0
MOVEQ           R0, R5
MOVNE           R0, #0
CMP             R0, #0
BEQ             loc_13A7C
LDR             R3, [R4,#0x34]
CMP             R3, #0
BNE             loc_13A68
MOV             R0, R4
BL              sub_13558

loc_13A68
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_13100

loc_13A74
MOV             R5, #1
B               loc_13A2C

loc_13A7C
LDR             R3, [R4,#0x3C]
CMP             R3, #0
BNE             loc_13BCC

loc_13A88
LDR             R3, [R4,#0x5C]
LDR             R3, [R3,#0xC]
CMP             R3, #0
MOVNE           R3, R5
MOVEQ           R3, #0
CMP             R3, #0
BEQ             loc_13AB4

loc_13AA4               ; how
MOV             R2, #1
LDR             R1, [R4,#0x20] ; fd
MOV             R0, R4  ; int
BL              sub_13270

loc_13AB4
LDR             R3, [R4,#0x54]
CMP             R3, #0
BEQ             loc_13B14
LDR             R3, [R4,#0x24]
CMP             R3, #0
BLT             loc_13AE4
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_13AE4
MOV             R1, #0
MOV             R0, R4
BL              sub_13354

loc_13AE4
LDR             R3, [R4,#0x30]
CMP             R3, #0
BNE             loc_13B14
LDR             R3, [R4,#0x28]
CMP             R3, #0
BLT             loc_13B14
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_13B14
MOV             R1, #1
MOV             R0, R4
BL              sub_13354

loc_13B14
LDR             R3, [R4,#0x40]
CMP             R3, #0
BNE             loc_13B6C
LDR             R3, [R4,#0x24]
CMN             R3, #1
BNE             loc_13B6C
LDR             R3, [R4,#0x30]
CMP             R3, #0
BNE             loc_13B44
LDR             R3, [R4,#0x28]
CMN             R3, #1
BNE             loc_13B6C

loc_13B44
LDR             R6, =byte_4CA40
MOV             R1, #0x60 ; '`'
LDR             R0, [R6,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R4,#4]
LDR             R0, [R6,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
BL              sub_1D894
MOV             R3, #1
STR             R3, [R4,#0x40]

loc_13B6C
LDR             R3, [R4,#0x24]
CMN             R3, #1
POPNE           {R4-R6,PC}
LDR             R3, [R4,#0x20]
CMN             R3, #1
POPNE           {R4-R6,PC}
LDR             R3, [R4,#0x30]
CMP             R3, #0
BNE             loc_13B9C
LDR             R3, [R4,#0x28]
CMN             R3, #1
POPNE           {R4-R6,PC}

loc_13B9C
LDR             R3, [R4,#0x34]
CMP             R3, #0
MOVNE           R5, #0
CMP             R5, #0
POPEQ           {R4-R6,PC}
MOV             R0, R4
BL              sub_13964
CMP             R0, #0
POPNE           {R4-R6,PC}
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_13558

loc_13BCC
MOV             R0, R4
BL              sub_13964
CMP             R0, #0
BNE             loc_13A88
B               loc_13AA4
; End of function sub_139C0

off_13BE0 DCD byte_4CA40



; _DWORD *__fastcall sub_13BE4(unsigned int, unsigned int)
sub_13BE4
PUSH            {R4-R6,LR}
MOV             R6, R0
LDR             R4, =byte_4CA40
MOV             R5, R1
MOV             R1, #0x5C ; '\'
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
MOV             R1, R6
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
MOV             R1, R5
LDR             R5, =(aSsh20Dropbear2_0+0x1A) ; ""
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
MOV             R2, #0
BL              sub_127F8
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
MOV             R2, #0
BL              sub_127F8
POP             {R4-R6,LR}
B               sub_1D894
; End of function sub_13BE4

off_13C44 DCD byte_4CA40
off_13C48 DCD aSsh20Dropbear2_0+0x1A ; ""



; _DWORD *__fastcall sub_13C4C(int)
sub_13C4C
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, #4
BL              sub_18718
LDR             R3, =byte_4CA40
MOV             R2, #1
STR             R2, [R3,#(dword_4CB28 - 0x4CA40)]
MOV             R2, #0
STR             R0, [R3,#(dword_4CB24 - 0x4CA40)]
STR             R2, [R0]
STR             R4, [R3,#(dword_4CB30 - 0x4CA40)]
POP             {R4,LR}
STR             R2, [R3,#(dword_4CB2C - 0x4CA40)]
B               sub_1BE34
; End of function sub_13C4C

off_13C84 DCD byte_4CA40



; void sub_13C88()
sub_13C88
PUSH            {R4-R6,LR}
MOV             R4, #0
LDR             R5, =byte_4CA40

loc_13C94
LDR             R3, [R5,#(dword_4CB28 - 0x4CA40)]
LDR             R0, [R5,#(dword_4CB24 - 0x4CA40)] ; ptr
CMP             R3, R4
BHI             loc_13CB4
BL              free
MOV             R3, #0
STR             R3, [R5,#(dword_4CB24 - 0x4CA40)]
POP             {R4-R6,PC}

loc_13CB4
LDR             R0, [R0,R4,LSL#2]
CMP             R0, #0
BEQ             loc_13CC4
BL              sub_13100

loc_13CC4
ADD             R4, R4, #1
B               loc_13C94
; End of function sub_13C88

off_13CCC DCD byte_4CA40



; int sub_13CD0()
sub_13CD0
MOV             R0, #0
B               sub_131B4
; End of function sub_13CD0




; int __fastcall sub_13CD8(int, int)
sub_13CD8

var_8= -8

PUSH            {R0,R1,R4-R10,LR}
MOV             R7, R0
LDR             R8, =byte_4CA40
MOV             R9, R1
MOV             R6, #0
MOV             R5, #1
MOV             R10, R8

loc_13CF4
LDR             R3, [R8,#(dword_4CB28 - 0x4CA40)]
CMP             R3, R6
BHI             loc_13D10
MOV             R0, R7
ADD             SP, SP, #8
POP             {R4-R10,LR}
B               sub_1BED4

loc_13D10
LDR             R3, [R8,#(dword_4CB24 - 0x4CA40)]
LDR             R4, [R3,R6,LSL#2]
CMP             R4, #0
BEQ             loc_13E1C
LDR             R3, [R4,#0x24]
CMP             R3, #0
MOVLT           R3, #0
BLT             loc_13D54
MOV             R2, R3,ASR#5
AND             R3, R3, #0x1F
LDR             R2, [R7,R2,LSL#2]
ANDS            R3, R2, R5,LSL R3
BEQ             loc_13D54
MOV             R1, #0
MOV             R0, R4
BL              sub_13354
MOV             R3, #1

loc_13D54
LDR             R2, [R4,#0x30]
CMP             R2, #0
BNE             loc_13D90
LDR             R2, [R4,#0x28]
CMP             R2, #0
BLT             loc_13D90
MOV             R1, R2,ASR#5
AND             R2, R2, #0x1F
LDR             R1, [R7,R1,LSL#2]
ANDS            R2, R1, R5,LSL R2
BEQ             loc_13D90
MOV             R1, #1
MOV             R0, R4
BL              sub_13354
MOV             R3, #1

loc_13D90
LDR             R1, [R4,#0x20]
CMP             R1, #0
BLT             loc_13DC8
MOV             R0, R1,ASR#5
AND             R2, R1, #0x1F
LDR             R0, [R9,R0,LSL#2]
ANDS            R2, R0, R5,LSL R2
BEQ             loc_13DC8
MOV             R3, #0
MOV             R0, R4
STR             R3, [SP,#8+var_8]
LDR             R2, [R4,#0x2C]
BL              sub_1371C
MOV             R3, #1

loc_13DC8
LDR             R2, [R4,#0x30]
CMP             R2, #0
BEQ             loc_13E08
LDR             R1, [R4,#0x28]
CMP             R1, #0
BLT             loc_13E08
MOV             R12, R1,ASR#5
AND             R0, R1, #0x1F
LDR             R12, [R9,R12,LSL#2]
ANDS            R0, R12, R5,LSL R0
BEQ             loc_13E08
MOV             R3, #0
MOV             R0, R4
STR             R3, [SP,#8+var_8]
BL              sub_1371C
MOV             R3, #1

loc_13E08
LDR             R2, [R10,#(dword_4CA90 - 0x4CA40)]
ORRS            R3, R3, R2
BEQ             loc_13E1C
MOV             R0, R4
BL              sub_139C0

loc_13E1C
ADD             R6, R6, #1
B               loc_13CF4
; End of function sub_13CD8

off_13E24 DCD byte_4CA40



; _DWORD *__fastcall sub_13E28(int, unsigned int, unsigned int *)
sub_13E28
CMP             R0, #0
PUSH            {R4,LR}
MOV             R4, R2
BNE             loc_13E58
STR             R1, [R2,#0x20]
STR             R1, [R2,#0x24]
STR             R0, [R2,#0x48]
MOV             R0, R4
LDR             R1, [R4,#8]
LDR             R2, [R2,#0x14]
POP             {R4,LR}
B               sub_13214

loc_13E58
LDR             R0, [R2,#4]
MOV             R1, #2
BL              sub_13BE4
MOV             R0, R4
POP             {R4,LR}
B               sub_13100
; End of function sub_13E28




; int __fastcall sub_13E70(int, int, int)
sub_13E70
PUSH            {R4-R10,LR}
MOV             R5, R0
LDR             R10, =byte_4CA40
MOV             R8, R1
MOV             R7, R2
MOV             R6, #0
MOV             R9, #1

loc_13E8C
LDR             R3, [R10,#(dword_4CB28 - 0x4CA40)]
CMP             R3, R6
BHI             loc_13EA4
MOV             R0, R5
POP             {R4-R10,LR}
B               sub_1BE60

loc_13EA4
LDR             R3, [R10,#(dword_4CB24 - 0x4CA40)]
LDR             R4, [R3,R6,LSL#2]
CMP             R4, #0
BEQ             loc_13FC8
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_13F28
LDRB            R3, [R10,#(byte_4CA84 - 0x4CA40)]
CMP             R7, #0
MOVEQ           R3, #0
ANDNE           R3, R3, #1
CMP             R3, #0
BNE             loc_13EE4
LDR             R3, [R4,#0x58]
CMP             R3, #0
BEQ             loc_13F28

loc_13EE4
LDR             R3, [R4,#0x24]
CMP             R3, #0
MOVGE           R1, R3,ASR#5
ANDGE           R3, R3, #0x1F
LDRGE           R2, [R5,R1,LSL#2]
ORRGE           R3, R2, R9,LSL R3
STRGE           R3, [R5,R1,LSL#2]
LDR             R3, [R4,#0x30]
CMP             R3, #0
BNE             loc_13F28
LDR             R3, [R4,#0x28]
CMP             R3, #0
MOVGE           R1, R3,ASR#5
ANDGE           R3, R3, #0x1F
LDRGE           R2, [R5,R1,LSL#2]
ORRGE           R3, R2, R9,LSL R3
STRGE           R3, [R5,R1,LSL#2]

loc_13F28
LDR             R3, [R4,#0x20]
CMP             R3, #0
BLT             loc_13F74
LDR             R0, [R4,#0x2C]
BL              sub_12A14
CMP             R0, #0
BEQ             loc_13F74
LDR             R3, [R4,#0x20]
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
RSBS            R1, R3, #0
MOV             R2, R2,ASR#5
AND             R1, R1, #0x1F
AND             R3, R3, #0x1F
RSBPL           R3, R1, #0
LDR             R1, [R8,R2,LSL#2]
ORR             R3, R1, R9,LSL R3
STR             R3, [R8,R2,LSL#2]

loc_13F74
LDR             R0, [R4,#0x30]
CMP             R0, #0
BEQ             loc_13FC8
LDR             R3, [R4,#0x28]
CMP             R3, #0
BLT             loc_13FC8
BL              sub_12A14
CMP             R0, #0
BEQ             loc_13FC8
LDR             R3, [R4,#0x28]
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
RSBS            R1, R3, #0
MOV             R2, R2,ASR#5
AND             R1, R1, #0x1F
AND             R3, R3, #0x1F
RSBPL           R3, R1, #0
LDR             R1, [R8,R2,LSL#2]
ORR             R3, R1, R9,LSL R3
STR             R3, [R8,R2,LSL#2]

loc_13FC8
ADD             R6, R6, #1
B               loc_13E8C
; End of function sub_13E70

off_13FD0 DCD byte_4CA40



; _DWORD *sub_13FD4()
sub_13FD4
PUSH            {R4,LR}
LDR             R0, =aEof ; "EOF"
BL              sub_131B4
MOV             R3, #1
POP             {R4,LR}
STR             R3, [R0,#0x3C]
B               sub_139C0
; End of function sub_13FD4

off_13FF0 DCD aEof      ; "EOF"



; _DWORD *sub_13FF4()
sub_13FF4
PUSH            {R4,LR}
LDR             R0, =aClose ; "Close"
BL              sub_131B4
MOV             R2, #1
POP             {R4,LR}
STR             R2, [R0,#0x3C]
STR             R2, [R0,#0x38]
B               sub_139C0
; End of function sub_13FF4

off_14014 DCD aClose    ; "Close"



; int __fastcall sub_14018(int result, unsigned int, unsigned int *)
sub_14018

var_14= -0x14
var_8= -8
var_4= -4

LDR             R3, [R0,#0x3C]
PUSH            {R4-R9,LR}
SUB             SP, SP, #0x14
CMP             R3, #0
LDRNE           R0, =aReceivedDataAf ; "Received data after eof"
BNE             loc_14070
CLZ             R3, R2
MOV             R9, R1
MOV             R3, R3,LSR#5
MOV             R6, R2
ORRS            R3, R3, R1,LSR#31
BNE             loc_14108
LDR             R5, =byte_4CA40
MOV             R7, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
MOV             R4, R0
MOV             R0, R6
BL              sub_12A1C
CMP             R4, R0
BLS             loc_14074
LDR             R0, =aOversizedPacke ; "Oversized packet"

loc_14070
BL              sub_184AC

loc_14074
LDR             R3, [R7,#8]
CMP             R4, R3
BLS             loc_14090
LDR             R1, =file ; "common-channel.c"
MOV             R2, #0x354
LDR             R0, =aChannelRecvwin_1 ; "channel->recvwindow >= datalen"

loc_1408C
BL              sub_184D4

loc_14090
LDR             R2, =dword_4CA24
SUB             R3, R3, R4
STR             R3, [R7,#8]
LDR             R2, [R2,#(dword_4CA28 - 0x4CA24)]
CMP             R3, R2
MOVWHI          R2, #0x356
LDRHI           R1, =file ; "common-channel.c"
LDRHI           R0, =aChannelRecvwin ; "channel->recvwindow <= opts.recv_window"
BHI             loc_1408C
ADD             R8, SP, #0x14+var_4
MOV             R1, R4
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
STR             R4, [R8,#-4]!
BL              sub_125E4
STR             R8, [SP,#0x14+var_14]
MOV             R3, R0
MOV             R2, R6
MOV             R1, R9
MOV             R0, R7
BL              sub_1371C
LDR             R7, [SP,#0x14+var_8]
MOV             R8, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
MOV             R1, R7
BL              sub_1250C
CMP             R8, #0
BNE             loc_14108

loc_140FC
SUB             R4, R4, R7
CMP             R4, #0
BNE             loc_14110

loc_14108
ADD             SP, SP, #0x14
POP             {R4-R9,PC}

loc_14110
MOV             R0, R6
BL              sub_12A2C
CMP             R0, R4
MOVCC           R7, R0
MOVCS           R7, R4
MOV             R1, R7
MOV             R0, R6
BL              sub_12B4C
MOV             R1, R7
MOV             R8, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_125E4
MOV             R2, R7  ; n
MOV             R1, R0  ; src
MOV             R0, R8  ; dest
BL              memcpy
MOV             R1, R7
MOV             R0, R6
BL              sub_12B98
MOV             R1, R7
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_1250C
B               loc_140FC
; End of function sub_14018

off_1416C DCD aReceivedDataAf ; "Received data after eof"
off_14170 DCD byte_4CA40
off_14174 DCD aOversizedPacke ; "Oversized packet"
off_14178 DCD file      ; "common-channel.c"
off_1417C DCD aChannelRecvwin_1 ; "channel->recvwindow >= datalen"
off_14180 DCD dword_4CA24
off_14184 DCD aChannelRecvwin ; "channel->recvwindow <= opts.recv_window"



; int sub_14188()
sub_14188
PUSH            {R4,LR}
BL              sub_13CD0
POP             {R4,LR}
LDR             R2, [R0,#0x2C]
LDR             R1, [R0,#0x20]
B               sub_14018
; End of function sub_14188




; unsigned int sub_141A0()
sub_141A0
PUSH            {R4,LR}
BL              sub_13CD0
MOV             R4, R0
LDR             R3, =byte_4CA40
LDR             R0, [R3,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
LDR             R2, =0x1DCD6500
LDR             R3, [R4,#0xC]
CMP             R0, R2
ADDLS           R0, R3, R0
ADDHI           R0, R3, R2
CMP             R0, R2
STRLS           R0, [R4,#0xC]
STRHI           R2, [R4,#0xC]
POP             {R4,PC}
; End of function sub_141A0

off_141DC DCD byte_4CA40
dword_141E0 DCD 0x1DCD6500



; int __fastcall sub_141E4(int, unsigned int, unsigned int)
sub_141E4

var_8= -8

PUSH            {R0-R2,R4-R9,LR}
ADD             R1, SP, #0xC+var_8
LDR             R4, =byte_4CA40
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
MOV             R6, R0
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
MOV             R7, R0
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
MOV             R8, R0
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
LDR             R3, [SP,#0xC+var_8]
CMP             R3, #0x40 ; '@'
LDRLS           R5, [R4,#(dword_4CB30 - 0x4CA40)]
MOVLS           R9, R0
LDRLS           R4, [R5]
BLS             loc_14254

loc_14234
MOV             R4, #3
B               loc_14290

loc_1423C               ; s2
LDR             R1, [R4,#4]
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_142D4
LDR             R4, [R5,#4]!

loc_14254
CMP             R4, #0
BNE             loc_1423C
B               loc_14234

loc_14260
LDR             R3, [R5,#0x5C]
LDR             R3, [R3,#8]
CMP             R3, #0
BEQ             loc_142A0
BLX             R3
CMP             R0, #0x63 ; 'c'
BEQ             loc_142C0
CMP             R0, #0
BLE             loc_142A0
MOV             R4, R0
MOV             R0, R5
BL              sub_13100

loc_14290
MOV             R1, R4
MOV             R0, R7
BL              sub_13BE4
B               loc_142C0

loc_142A0
LDR             R3, [R5,#0x60]
MOV             R0, R5
LDR             R2, [R5,#0x14]
LDR             R1, [R5,#8]
CMP             R3, #3
MOVEQ           R3, #2
STREQ           R3, [R5,#0x60]
BL              sub_13214

loc_142C0               ; ptr
MOV             R0, R6
BL              free
BL              sub_1617C
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_142D4
LDR             R2, =0x1DCD6500
CMP             R9, #0x4000
MOVCC           R3, R9
MOVCS           R3, #0x4000
MOV             R1, R4
MOV             R0, R7
CMP             R8, R2
MOVCC           R2, R8
BL              sub_135EC
SUBS            R5, R0, #0
BNE             loc_14260
MOV             R4, #4
B               loc_14290
; End of function sub_141E4

off_14308 DCD byte_4CA40
dword_1430C DCD 0x1DCD6500



; _DWORD *__fastcall sub_14310(int)
sub_14310
PUSH            {R4-R6,LR}
MOV             R1, #0x64 ; 'd'
LDR             R4, =byte_4CA40
MOV             R5, R0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R5,#4]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
POP             {R4-R6,LR}
B               sub_1D894
; End of function sub_14310

off_1433C DCD byte_4CA40



; int sub_14340()
sub_14340
PUSH            {R4-R6,LR}
BL              sub_13CD0
LDR             R3, [R0,#0x34]
CMP             R3, #0
POPNE           {R4-R6,PC}
LDR             R3, [R0,#0x5C]
MOV             R4, R0
LDR             R3, [R3,#0x10]
CMP             R3, #0
BEQ             loc_1437C
LDR             R2, [R0,#0x44]
CMP             R2, #0
BNE             loc_1437C
POP             {R4-R6,LR}
BX              R3

loc_1437C
LDR             R5, =byte_4CA40
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12780
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12590
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_14310
; End of function sub_14340

off_143A4 DCD byte_4CA40



; _DWORD *__fastcall sub_143A8(int)
sub_143A8
PUSH            {R4-R6,LR}
MOV             R1, #0x63 ; 'c'
LDR             R4, =byte_4CA40
MOV             R5, R0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R5,#4]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
POP             {R4-R6,LR}
B               sub_1D894
; End of function sub_143A8

off_143D4 DCD byte_4CA40



; int __fastcall sub_143D8(int, int)
sub_143D8
MOV             R3, #0
PUSH            {R4-R8,LR}
MOV             R2, R3
MOV             R6, R0
MOV             R0, R3
MOV             R7, R1
BL              sub_135EC
SUBS            R5, R0, #0
BEQ             loc_14480
LDR             R4, =byte_4CA40
MOV             R0, R6
BL              sub_188B0
STR             R6, [R5,#0x24]
MOV             R1, #0x5A ; 'Z'
LDR             R3, [R4,#(dword_4CA54 - 0x4CA40)]
STR             R6, [R5,#0x20]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
CMP             R3, R6
STRGE           R3, [R4,#(dword_4CA54 - 0x4CA40)]
STRLT           R6, [R4,#(dword_4CA54 - 0x4CA40)]
MOV             R3, #1
STR             R3, [R5,#0x50]
BL              sub_125A4
LDR             R6, [R7,#4]
MOV             R0, R6  ; s
BL              strlen
MOV             R1, R6
MOV             R2, R0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
LDR             R1, [R5]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
LDR             R3, =dword_4CA24
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
LDR             R1, [R3,#(dword_4CA28 - 0x4CA24)]
BL              sub_1279C
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
MOVW            R1, #0x7FF7
BL              sub_1279C
MOV             R0, #0
POP             {R4-R8,PC}

loc_14480
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}
; End of function sub_143D8

off_14488 DCD byte_4CA40
off_1448C DCD dword_4CA24



; int sub_14490()
sub_14490
PUSH            {R4-R6,LR}
BL              sub_13CD0
LDR             R3, [R0,#0x50]
CMP             R3, #0
BNE             loc_144AC
LDR             R0, =aUnexpectedChan ; "Unexpected channel reply"
BL              sub_184AC

loc_144AC
LDR             R5, =byte_4CA40
MOV             R3, #0
MOV             R4, R0
STR             R3, [R0,#0x50]
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
STR             R0, [R4,#4]
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
STR             R0, [R4,#0xC]
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
LDR             R3, [R4,#0x5C]
STR             R0, [R4,#0x18]
LDR             R3, [R3,#8]
CMP             R3, #0
BEQ             loc_1450C
MOV             R0, R4
BLX             R3
CMP             R0, #0
BLE             loc_1450C
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_13100

loc_1450C
LDR             R3, [R4,#0x60]
CMP             R3, #3
MOVEQ           R3, #2
STREQ           R3, [R4,#0x60]
POP             {R4-R6,LR}
B               sub_1617C
; End of function sub_14490

off_14524 DCD aUnexpectedChan ; "Unexpected channel reply"
off_14528 DCD byte_4CA40



; int sub_1452C()
sub_1452C
PUSH            {R4,LR}
BL              sub_13CD0
LDR             R2, [R0,#0x50]
CMP             R2, #0
BNE             loc_14548
LDR             R0, =aUnexpectedChan ; "Unexpected channel reply"
BL              sub_184AC

loc_14548
MOV             R2, #0
POP             {R4,LR}
STR             R2, [R0,#0x50]
B               sub_13100
; End of function sub_1452C

off_14558 DCD aUnexpectedChan ; "Unexpected channel reply"



; _DWORD *sub_1455C()
sub_1455C
LDR             R3, =byte_4CA40
MOV             R1, #0x51 ; 'Q'
PUSH            {R4,LR}
LDR             R0, [R3,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
POP             {R4,LR}
B               sub_1D894
; End of function sub_1455C

off_14578 DCD byte_4CA40



; _DWORD *sub_1457C()
sub_1457C
LDR             R3, =byte_4CA40
MOV             R1, #0x52 ; 'R'
PUSH            {R4,LR}
LDR             R0, [R3,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
POP             {R4,LR}
B               sub_1D894
; End of function sub_1457C

off_14598 DCD byte_4CA40



; _DWORD *sub_1459C()
sub_1459C
LDR             R3, =byte_4CA40
LDR             R0, [R3,#(dword_4CB2C - 0x4CA40)]
CMP             R0, #0
LDRNE           R2, [R3,#(dword_4CB28 - 0x4CA40)]
LDRNE           R1, [R3,#(dword_4CB24 - 0x4CA40)]
MOVNE           R3, #0
BXEQ            LR

loc_145B8
CMP             R2, R3
BNE             loc_145C8
MOV             R0, #0
BX              LR

loc_145C8
LDR             R0, [R1,R3,LSL#2]
CMP             R0, #0
BEQ             loc_145F8
LDR             R12, [R0,#0x40]
CMP             R12, #0
BNE             loc_145F8
LDR             R12, [R0,#0x3C]
CMP             R12, #0
BNE             loc_145F8
LDR             R12, [R0,#0x50]
CMP             R12, #0
BXEQ            LR

loc_145F8
ADD             R3, R3, #1
B               loc_145B8
; End of function sub_1459C

off_14600 DCD byte_4CA40



; _DWORD *__fastcall sub_14604(int, const char *)
sub_14604
PUSH            {R4-R6,LR}
MOV             R5, R1
LDR             R4, =byte_4CA40
MOV             R6, R0
MOV             R1, #0x62 ; 'b'
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R6,#4]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
MOV             R0, R5  ; s
BL              strlen
MOV             R1, R5
MOV             R2, R0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
POP             {R4-R6,LR}
B               sub_127F8
; End of function sub_14604

off_14648 DCD byte_4CA40



; int __fastcall sub_1464C(char *, unsigned int, void *src, char)
sub_1464C

var_111= -0x111
src= -0x110
dest= -0xD0

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x118
LDR             R5, =byte_4CA40
MOV             R8, R2
MOV             R6, R1
MOV             R7, R0
STRB            R3, [SP,#0x118+var_111]
MOV             R2, #0xD0 ; n
LDR             R3, [R5,#(dword_4CAC0 - 0x4CA40)]
MOV             R1, R8  ; src
ADD             R0, SP, #0x118+dest ; dest
LDR             R3, [R3,#0x660]
LDR             R4, [R3,#0x10]
BL              memcpy
MOV             R2, #1
ADD             R1, SP, #0x118+var_111
LDR             R3, [R4,#0x58]
ADD             R0, SP, #0x118+dest
BLX             R3
LDR             R3, [R5,#(dword_4CAC4 - 0x4CA40)]
ADD             R0, SP, #0x118+dest
LDR             R5, [R4,#0x58]
LDM             R3, {R1,R2}
BLX             R5
LDR             R3, [R4,#0x5C]
ADD             R1, SP, #0x118+src
ADD             R0, SP, #0x118+dest
BLX             R3
LDR             R2, [R4,#8]
ADD             R1, SP, #0x118+src ; src
MOV             R0, R7  ; dest
CMP             R6, R2
MOVCC           R2, R6  ; n
BL              memcpy
LDR             R5, [R4,#8]

loc_146D8
CMP             R5, R6
BCC             loc_146F4
MOV             R1, #0xD0
ADD             R0, SP, #0x118+dest
BL              j_explicit_bzero
ADD             SP, SP, #0x118
POP             {R4-R8,PC}

loc_146F4               ; n
MOV             R2, #0xD0
MOV             R1, R8  ; src
ADD             R0, SP, #0x118+dest ; dest
BL              memcpy
MOV             R2, R5
LDR             R3, [R4,#0x58]
MOV             R1, R7
ADD             R0, SP, #0x118+dest
BLX             R3
LDR             R3, [R4,#0x5C]
ADD             R1, SP, #0x118+src
ADD             R0, SP, #0x118+dest
BLX             R3
LDR             R3, [R4,#8]
SUB             R2, R6, R5
ADD             R0, R7, R5 ; dest
ADD             R1, SP, #0x118+src ; src
CMP             R2, R3
MOVCS           R2, R3  ; n
BL              memcpy
LDR             R3, [R4,#8]
ADD             R5, R5, R3
B               loc_146D8
; End of function sub_1464C

off_14750 DCD byte_4CA40



; int sub_14754()
sub_14754

var_140= -0x140
var_13C= -0x13C
var_138= -0x138
var_124= -0x124
var_110= -0x110
var_F0= -0xF0
src= -0xD0

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x140
LDR             R4, =byte_4CA40
ADD             R0, SP, #0x140+src
MOV             R5, #0
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R3,#0x660]
LDR             R6, [R3,#0x10]
LDR             R3, [R6,#0x54]
BLX             R3
LDR             R2, [R4,#(dword_4CAC8 - 0x4CA40)]
ADD             R1, SP, #0x140+src
MOV             R0, R6
BL              sub_12304
LDR             R0, [R4,#(dword_4CAC8 - 0x4CA40)]
BL              sub_29D74
LDR             R0, [R4,#(dword_4CAC8 - 0x4CA40)] ; ptr
BL              free
LDR             R3, [R4,#(dword_4CACC - 0x4CA40)]
ADD             R0, SP, #0x140+src
STR             R5, [R4,#(dword_4CAC8 - 0x4CA40)]
LDR             R6, [R6,#0x58]
LDM             R3, {R1,R2}
BLX             R6
LDR             R0, [R4,#(dword_4CACC - 0x4CA40)]
BL              sub_1238C
LDR             R0, [R4,#(dword_4CACC - 0x4CA40)] ; ptr
BL              j_free
MOV             R3, #0x41 ; 'A'
ADD             R2, SP, #0x140+src ; src
MOV             R1, #0x14 ; int
ADD             R0, SP, #0x140+var_138 ; int
STR             R5, [R4,#(dword_4CACC - 0x4CA40)]
BL              sub_1464C
MOV             R3, #0x42 ; 'B'
ADD             R2, SP, #0x140+src ; src
MOV             R1, #0x14 ; int
ADD             R0, SP, #0x140+var_124 ; int
BL              sub_1464C
MOV             R3, #0x43 ; 'C'
ADD             R2, SP, #0x140+src ; src
MOV             R1, #0x20 ; ' ' ; int
ADD             R0, SP, #0x140+var_110 ; int
BL              sub_1464C
MOV             R3, #0x44 ; 'D'
ADD             R2, SP, #0x140+src ; src
MOV             R1, #0x20 ; ' ' ; int
ADD             R0, SP, #0x140+var_F0 ; int
BL              sub_1464C
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R3]
LDR             R3, [R3]
CMP             R3, R5
BEQ             loc_14878
LDR             R0, [R3]
BL              sub_26EE4
CMP             R0, R5
BGE             loc_14844

loc_1483C
LDR             R0, =aCryptoError ; "Crypto error"
BL              sub_184AC

loc_14844
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R1, [R3,#4]
ADD             R3, R3, #0x14
LDR             R2, [R3,#-0x14]
STR             R3, [SP,#0x140+var_13C]
STR             R5, [SP,#0x140+var_140]
LDR             R5, [R1]
ADD             R1, SP, #0x140+var_138
LDR             R3, [R2,#4]
ADD             R2, SP, #0x140+var_110
BLX             R5
CMP             R0, #0
BNE             loc_1483C

loc_14878
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R3,#0x330]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_148D4
LDR             R0, [R3]
BL              sub_26EE4
CMP             R0, #0
BLT             loc_1483C
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R2, [R3,#0x330]
ADD             R3, R3, #0x344
LDR             R1, [R3,#-0x10]
STR             R3, [SP,#0x140+var_13C]
MOV             R3, #0
STR             R3, [SP,#0x140+var_140]
LDR             R5, [R1]
ADD             R1, SP, #0x140+var_124
LDR             R3, [R2,#4]
ADD             R2, SP, #0x140+var_F0
BLX             R5
CMP             R0, #0
BNE             loc_1483C

loc_148D4
LDR             R0, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R1, [R0,#0x338]
LDR             R3, [R1]
CMP             R3, #0
BEQ             loc_14918
ADD             R0, R0, #0x630
MOV             R3, #0x46 ; 'F'
ADD             R2, SP, #0x140+src ; src
LDR             R1, [R1,#4] ; int
ADD             R0, R0, #0xC ; int
BL              sub_1464C
LDR             R5, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R5,#0x338]
LDR             R3, [R3]
LDR             R0, [R3]
BL              sub_26F50
STR             R0, [R5,#0x33C]

loc_14918
LDR             R0, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R1, [R0,#8]
LDR             R3, [R1]
CMP             R3, #0
BEQ             loc_14958
MOV             R3, #0x45 ; 'E'
ADD             R2, SP, #0x140+src ; src
LDR             R1, [R1,#4] ; int
ADD             R0, R0, #0x30C ; int
BL              sub_1464C
LDR             R5, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R5,#8]
LDR             R3, [R3]
LDR             R0, [R3]
BL              sub_26F50
STR             R0, [R5,#0xC]

loc_14958
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
MOV             R2, #1
ADD             R0, SP, #0x140+var_138
MOV             R1, #0x14
STR             R2, [R3,#0x65C]
STR             R2, [R3,#0x32C]
BL              j_explicit_bzero
ADD             R0, SP, #0x140+var_110
MOV             R1, #0x20 ; ' '
BL              j_explicit_bzero
ADD             R0, SP, #0x140+var_124
MOV             R1, #0x14
BL              j_explicit_bzero
ADD             R0, SP, #0x140+var_F0
MOV             R1, #0x20 ; ' '
BL              j_explicit_bzero
MOV             R1, #0xD0
ADD             R0, SP, #0x140+src
BL              j_explicit_bzero
ADD             SP, SP, #0x140
POP             {R4-R6,PC}
; End of function sub_14754

off_149AC DCD byte_4CA40
off_149B0 DCD aCryptoError ; "Crypto error"



; time_t __fastcall sub_149B4(int, int)
sub_149B4
PUSH            {R4,LR}
MOV             R2, #0
LDR             R4, =byte_4CA40
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
STR             R2, [R4,#(dword_4CAB4 - 0x4CA40)]
STR             R2, [R4,#(dword_4CAB8 - 0x4CA40)]
AND             R3, R3, #0xE0
BFI             R3, R2, #6, #1
STRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
BL              sub_18BF0
STR             R0, [R4,#(dword_4CAB0 - 0x4CA40)]
POP             {R4,PC}
; End of function sub_149B4

off_149E4 DCD byte_4CA40



; void sub_149E8()
sub_149E8
PUSH            {R4-R6,LR}
LDR             R4, =byte_4CA40
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
AND             R3, R3, #3
CMP             R3, #3
BEQ             loc_14A08
LDR             R0, =aUnexpectedNewk ; "Unexpected newkeys message"
BL              sub_184AC

loc_14A08
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
CMP             R3, #0
BNE             loc_14A20
MOVW            R0, #0x66C
BL              sub_18718
STR             R0, [R4,#(dword_4CABC - 0x4CA40)]

loc_14A20
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
TST             R3, #0x10
BEQ             loc_14A64
LDR             R5, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R5,#0x32C]
CMP             R3, #0
BEQ             loc_14A64
MOV             R2, #0x330 ; n
MOV             R1, R5  ; src
LDR             R0, [R4,#(dword_4CABC - 0x4CA40)] ; dest
BL              memcpy
MOV             R1, #0x330
MOV             R0, R5
BL              j_explicit_bzero
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
MOV             R2, #0
STR             R2, [R3,#0x32C]

loc_14A64
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
TST             R3, #8
BEQ             loc_14AB0
LDR             R5, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R5,#0x65C]
CMP             R3, #0
BEQ             loc_14AB0
LDR             R0, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R2, #0x330 ; n
ADD             R5, R5, #0x330
MOV             R1, R5  ; src
ADD             R0, R0, R2 ; dest
BL              memcpy
MOV             R1, #0x330
MOV             R0, R5
BL              j_explicit_bzero
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
MOV             R2, #0
STR             R2, [R3,#0x65C]

loc_14AB0
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
AND             R3, R3, #0x18
CMP             R3, #0x18
POPNE           {R4-R6,PC}
LDR             R0, [R4,#(dword_4CAC0 - 0x4CA40)] ; ptr
MOV             R5, #0
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
LDR             R2, [R0,#0x660]
STR             R2, [R3,#0x660]
LDR             R2, [R0,#0x664]
STR             R5, [R3,#0x668]
STR             R2, [R3,#0x664]
BL              free
STR             R5, [R4,#(dword_4CAC0 - 0x4CA40)]
POP             {R4-R6,LR}
B               sub_149B4
; End of function sub_149E8

off_14AF0 DCD byte_4CA40
off_14AF4 DCD aUnexpectedNewk ; "Unexpected newkeys message"



; int __fastcall sub_14AF8(int)
sub_14AF8
LDR             R3, =byte_4CA40
LDR             R3, [R3,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R3,#0x660]
LDMIB           R3, {R1,R2}
B               sub_122E8
; End of function sub_14AF8

off_14B0C DCD byte_4CA40



; void **sub_14B10()
sub_14B10
PUSH            {R4-R6,LR}
SUB             SP, SP, #0xD0
LDR             R4, =byte_4CA40
MOV             R0, SP
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R3,#0x660]
LDR             R5, [R3,#0x10]
LDR             R3, [R5,#0x54]
BLX             R3
MOV             R1, #0
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_124A0
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
LDR             R6, [R5,#0x58]
LDR             R1, [R0,#4]
BL              sub_125E4
LDR             R3, [R4,#(dword_4CAD0 - 0x4CA40)]
MOV             R1, R0
MOV             R0, SP
LDR             R2, [R3,#4]
BLX             R6
LDR             R0, [R5,#8]
BL              sub_12344
LDR             R1, [R5,#8]
LDR             R6, [R5,#0x5C]
STR             R0, [R4,#(dword_4CACC - 0x4CA40)]
BL              sub_12624
MOV             R1, R0
MOV             R0, SP
BLX             R6
LDR             R1, [R5,#8]
LDR             R0, [R4,#(dword_4CACC - 0x4CA40)]
BL              sub_12430
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_1238C
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)] ; ptr
BL              j_free
MOV             R1, #0xD0
MOV             R0, SP
BL              j_explicit_bzero
MOV             R3, #0
STR             R3, [R4,#(dword_4CAD0 - 0x4CA40)]
LDR             R3, [R4,#(dword_4CAC4 - 0x4CA40)]
CMP             R3, #0
BNE             loc_14BD0
LDR             R0, [R4,#(dword_4CACC - 0x4CA40)]
BL              sub_123F4
STR             R0, [R4,#(dword_4CAC4 - 0x4CA40)]

loc_14BD0
ADD             SP, SP, #0xD0
POP             {R4-R6,PC}
; End of function sub_14B10

off_14BD8 DCD byte_4CA40



; _DWORD *sub_14BDC()
sub_14BDC
PUSH            {R4-R6,LR}
MOV             R1, #0x14
LDR             R4, =byte_4CA40
LDR             R6, =off_4C22C ; "curve25519-sha256"
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
MOV             R1, #0x10
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12624
LDR             R5, =off_4C2E0 ; "ecdsa-sha2-nistp256"
MOV             R1, #0x10
BL              sub_18090
MOV             R1, #0x10
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_124C4
MOV             R1, R6
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12D00
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12D00
LDR             R1, =off_4C3A8 ; "aes128-ctr"
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12D00
LDR             R1, =off_4C3A8 ; "aes128-ctr"
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12D00
LDR             R1, =off_4C36C ; "hmac-sha1"
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12D00
LDR             R1, =off_4C36C ; "hmac-sha1"
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12D00
LDR             R1, [R4,#(dword_4CAD8 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12D00
LDR             R1, [R4,#(dword_4CAD8 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12D00
MOV             R2, #0
LDR             R1, =(aSsh20Dropbear2_0+0x1A) ; ""
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
MOV             R2, #0
LDR             R1, =(aSsh20Dropbear2_0+0x1A) ; ""
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
LDR             R1, [R4,#(off_4CAEC - 0x4CA40)]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
MOVS            R1, R1
MOVNE           R1, #1
BL              sub_125A4
MOV             R1, #0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_123F4
STR             R0, [R4,#(dword_4CAD4 - 0x4CA40)]
BL              sub_1D894
LDRB            R3, [R4,#(byte_4CA84 - 0x4CA40)]
MOVW            R0, #0x66C
BFC             R3, #0, #1
STRB            R3, [R4,#(byte_4CA84 - 0x4CA40)]
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
ORR             R3, R3, #1
STRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
BL              sub_18718
LDR             R3, [R4,#(off_4CAEC - 0x4CA40)]
STR             R0, [R4,#(dword_4CAC0 - 0x4CA40)]
CMP             R3, #0
POPEQ           {R4-R6,PC}
LDR             R2, [R6,#(off_4C234 - 0x4C22C)] ; unk_352C0
STR             R2, [R0,#0x660]
LDRB            R2, [R5,#(byte_4C2E4 - 0x4C2E0)]
POP             {R4-R6,LR}
STR             R2, [R0,#0x664]
BX              R3
; End of function sub_14BDC

off_14D10 DCD byte_4CA40
off_14D14 DCD off_4C22C ; "curve25519-sha256"
off_14D18 DCD off_4C2E0 ; "ecdsa-sha2-nistp256"
off_14D1C DCD off_4C3A8 ; "aes128-ctr"
off_14D20 DCD off_4C36C ; "hmac-sha1"
off_14D24 DCD aSsh20Dropbear2_0+0x1A ; ""



; void sub_14D28()
sub_14D28
PUSH            {R4,LR}
MOV             R1, #0x15
LDR             R4, =byte_4CA40
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
BL              sub_1D894
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
ORR             R3, R3, #0x28 ; '('
STRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
LDRB            R3, [R4,#(byte_4CA84 - 0x4CA40)]
ORR             R3, R3, #1
STRB            R3, [R4,#(byte_4CA84 - 0x4CA40)]
BL              sub_14754
POP             {R4,LR}
B               sub_149E8
; End of function sub_14D28

off_14D64 DCD byte_4CA40



; void sub_14D68()
sub_14D68
LDR             R2, =byte_4CA40
LDRB            R3, [R2,#(byte_4CAAC - 0x4CA40)]
ORR             R3, R3, #0x10
STRB            R3, [R2,#(byte_4CAAC - 0x4CA40)]
B               sub_149E8
; End of function sub_14D68

off_14D7C DCD byte_4CA40



; time_t __fastcall sub_14D80(int, int)
sub_14D80
LDR             R3, =byte_4CA40
LDRB            R2, [R3,#(byte_4CAAC - 0x4CA40)]
BFC             R2, #5, #1
STRB            R2, [R3,#(byte_4CAAC - 0x4CA40)]
LDR             R2, =off_4C344 ; "none"
STR             R2, [R3,#(dword_4CAD8 - 0x4CA40)]
B               sub_149B4
; End of function sub_14D80

off_14D9C DCD byte_4CA40
off_14DA0 DCD off_4C344 ; "none"
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
LDR             R4, =byte_4CA40
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
TST             R3, #1
BNE             loc_14DC0
BL              sub_14BDC

loc_14DC0
LDR             R0, [R4,#(dword_4CA50 - 0x4CA40)]
MOV             R5, #0
BL              strlen
LDR             R2, [R4,#(dword_4CAD4 - 0x4CA40)]
MOV             R7, R0
LDR             R3, [R4,#(dword_4CA70 - 0x4CA40)]
LDR             R0, [R2,#4]
LDR             R3, [R3,#4]
ADD             R0, R0, R3
ADD             R0, R0, #0x840
ADD             R0, R0, #2
ADD             R0, R0, R7
BL              sub_12344
MOV             R1, #0x10
STR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
STR             R5, [SP,#8]
STR             R5, [SP,#0xC]
BL              sub_1250C
MOVW            R2, #0x66C
MOV             R1, R5
LDR             R0, [R4,#(dword_4CAC0 - 0x4CA40)]
BL              memset
ADD             R3, SP, #8
ADD             R2, SP, #0xC
LDR             R1, =off_4C22C ; "curve25519-sha256"
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12D8C
CMP             R0, #0
LDR             R6, [SP,#8]
BEQ             loc_15068
LDRB            R3, [R0,#4]
CMP             R3, #0x63 ; 'c'
BEQ             loc_15068
LDR             R2, [R0,#8]
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R1, =off_4C2E0 ; "ecdsa-sha2-nistp256"
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
STR             R2, [R3,#0x660]
ADD             R3, SP, #8
ADD             R2, SP, #0xC
BL              sub_12D8C
LDR             R3, [SP,#8]
CMP             R0, #0
AND             R6, R6, R3
AND             R6, R6, #1
BEQ             loc_15074
LDRB            R2, [R0,#4]
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R1, =off_4C3A8 ; "aes128-ctr"
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
STR             R2, [R3,#0x664]
MOV             R3, R5
MOV             R2, R5
BL              sub_12D8C
SUBS            R9, R0, #0
BEQ             loc_1507C
MOV             R3, R5
MOV             R2, R5
LDR             R1, =off_4C3A8 ; "aes128-ctr"
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12D8C
SUBS            R8, R0, #0
BEQ             loc_15084
MOV             R3, R5
MOV             R2, R5
LDR             R1, =off_4C36C ; "hmac-sha1"
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12D8C
SUBS            R11, R0, #0
BEQ             loc_1508C
MOV             R3, R5
MOV             R2, R5
LDR             R1, =off_4C36C ; "hmac-sha1"
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12D8C
SUBS            R10, R0, #0
BEQ             loc_15094
MOV             R3, R5
MOV             R2, R5
LDR             R1, [R4,#(dword_4CAD8 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12D8C
SUBS            R3, R0, #0
STR             R3, [SP,#4]
BEQ             loc_1509C
MOV             R3, R5
MOV             R2, R5
LDR             R1, [R4,#(dword_4CAD8 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12D8C
SUBS            R5, R0, #0
BEQ             loc_150A4
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12780
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12780
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12590
CMP             R0, #0
BEQ             loc_14F6C
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
CMP             R6, #0
ORR             R3, R3, #4
STRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
MOVEQ           R3, #1
STRBEQ          R3, [R4,#(byte_4CA86 - 0x4CA40)]

loc_14F6C
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R2, [R9,#8]
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
STR             R2, [R3]
LDR             R2, [R8,#8]
STR             R2, [R3,#0x330]
LDR             R2, [R9,#0x10]
STR             R2, [R3,#4]
LDR             R2, [R8,#0x10]
STR             R2, [R3,#0x334]
LDR             R2, [R11,#8]
STR             R2, [R3,#8]
LDR             R2, [R10,#8]
STR             R2, [R3,#0x338]
LDR             R2, [SP,#4]
LDRB            R2, [R2,#4]
STR             R2, [R3,#0x10]
LDRB            R2, [R5,#4]
STR             R2, [R3,#0x340]
BL              sub_12664
LDR             R3, [R4,#(off_4CAEC - 0x4CA40)]
MOV             R2, R7
LDR             R1, [R4,#(dword_4CA50 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
CMP             R3, #0
MOVEQ           R6, #0
CMP             R6, #0
LDRBNE          R3, [R4,#(byte_4CAAC - 0x4CA40)]
ORRNE           R3, R3, #0x40 ; '@'
STRBNE          R3, [R4,#(byte_4CAAC - 0x4CA40)]
BL              sub_127F8
MOV             R2, #0x18
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
LDR             R1, =aSsh20Dropbear2 ; "SSH-2.0-dropbear_2018.76"
BL              sub_127F8
LDRD            R0, R1, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_124A0
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
LDR             R5, [R4,#(dword_4CAD0 - 0x4CA40)]
LDMIB           R0, {R1,R3}
SUB             R1, R1, R3
BL              sub_125E4
LDR             R3, [R4,#(dword_4CA70 - 0x4CA40)]
MOV             R1, R0
MOV             R0, R5
LDMIB           R3, {R2,R3}
SUB             R2, R2, R3
BL              sub_127F8
LDR             R3, [R4,#(dword_4CAD4 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
LDM             R3, {R1,R2}
BL              sub_127F8
MOV             R3, #0x1E
LDR             R0, [R4,#(dword_4CAD4 - 0x4CA40)]
STRB            R3, [R4,#(byte_4CA85 - 0x4CA40)]
BL              j_free
MOV             R3, #0
STR             R3, [R4,#(dword_4CAD4 - 0x4CA40)]
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
ORR             R3, R3, #2
STRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_15068
LDR             R1, =aKex ; "kex"

loc_1506C
LDR             R0, =aNoMatchingAlgo ; "No matching algo %s"
BL              sub_184AC

loc_15074
LDR             R1, =aHostkey ; "hostkey"
B               loc_1506C

loc_1507C
LDR             R1, =aEncCS ; "enc c->s"
B               loc_1506C

loc_15084
LDR             R1, =aEncSC ; "enc s->c"
B               loc_1506C

loc_1508C
LDR             R1, =aMacCS ; "mac c->s"
B               loc_1506C

loc_15094
LDR             R1, =aMacSC ; "mac s->c"
B               loc_1506C

loc_1509C
LDR             R1, =aCompCS ; "comp c->s"
B               loc_1506C

loc_150A4
LDR             R1, =aCompSC ; "comp s->c"
B               loc_1506C
off_150AC DCD byte_4CA40
off_150B0 DCD off_4C22C ; "curve25519-sha256"
off_150B4 DCD off_4C2E0 ; "ecdsa-sha2-nistp256"
off_150B8 DCD off_4C3A8 ; "aes128-ctr"
off_150BC DCD off_4C36C ; "hmac-sha1"
off_150C0 DCD aSsh20Dropbear2 ; "SSH-2.0-dropbear_2018.76"
off_150C4 DCD aKex      ; "kex"
off_150C8 DCD aNoMatchingAlgo ; "No matching algo %s"
off_150CC DCD aHostkey  ; "hostkey"
off_150D0 DCD aEncCS    ; "enc c->s"
off_150D4 DCD aEncSC    ; "enc s->c"
off_150D8 DCD aMacCS    ; "mac c->s"
off_150DC DCD aMacSC    ; "mac s->c"
off_150E0 DCD aCompCS   ; "comp c->s"
off_150E4 DCD aCompSC   ; "comp s->c"



; int *sub_150E8()
sub_150E8

var_38= -0x38
var_34= -0x34
s= -0x30
var_20= -0x20
var_10= -0x10

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x38
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R4, SP, #0x38+var_20
ADD             R0, SP, #0x38+s ; s
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
MOV             R0, R4  ; s
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x38+var_10 ; s
BL              memset
MOV             R0, #0x20 ; ' '
BL              sub_18718
MOV             R3, #0
ADD             R5, R0, #0x10
ADD             R2, SP, #0x38+var_10
MOV             R1, R5
STR             R3, [SP,#0x38+var_34]
ADD             R3, SP, #0x38+s
STR             R4, [SP,#0x38+var_38]
MOV             R6, R0
BL              sub_121CC
ADD             R0, SP, #0x38+s
BL              sub_14AF8
LDR             R3, =dword_35C0C
ADD             R0, SP, #0x38+var_10
LDR             R1, [R3]
BL              sub_2E65C
CMP             R0, #0
BEQ             loc_15178

loc_15170
LDR             R0, =aDiffieHellmanE ; "Diffie-Hellman error"
BL              sub_184AC

loc_15178
MOV             R2, R5
MOV             R1, #1
ADD             R0, SP, #0x38+s
BL              sub_2E7D4
CMP             R0, #0
BNE             loc_15170
MOV             R1, R4
MOV             R0, R5
BL              sub_2A350
CMP             R0, #0
BNE             loc_15170
MOV             R1, R5
MOV             R0, R4
BL              sub_18314
MOV             R3, R6
ADD             R2, SP, #0x38+s
MOV             R1, R5
ADD             R0, SP, #0x38+var_10
BL              sub_2AB08
SUBS            R3, R0, #0
BNE             loc_15170
ADD             R0, SP, #0x38+var_10
MOV             R2, R4
ADD             R1, SP, #0x38+s
BL              sub_29DB8
MOV             R0, R6
ADD             SP, SP, #0x38 ; '8'
POP             {R4-R6,PC}
; End of function sub_150E8

off_151E8 DCD dword_35C0C
off_151EC DCD aDiffieHellmanE ; "Diffie-Hellman error"



; void __fastcall sub_151F0(char *)
sub_151F0
PUSH            {R4,LR}
ADD             R1, R0, #0x10
MOV             R4, R0
MOV             R2, #0
BL              sub_29DB8
MOV             R0, R4  ; ptr
POP             {R4,LR}
B               free
; End of function sub_151F0




; void **__fastcall sub_15210(int, int *, int)
sub_15210

var_14= -0x14

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x24
MOV             R6, R0
MOV             R5, R1
MOV             R7, R2
MOV             R1, #0  ; c
MOV             R2, #0x10 ; n
MOV             R0, SP  ; s
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, R2 ; s
BL              memset
MOV             R2, #0
ADD             R1, SP, #0x24+var_14
MOV             R0, SP
BL              sub_121CC
MOV             R0, SP
BL              sub_14AF8
ADD             R2, SP, #0x24+var_14
MOV             R1, #1
MOV             R0, SP
BL              sub_2E7D4
SUBS            R4, R0, #0
BEQ             loc_1527C

loc_15274
LDR             R0, =aDiffieHellmanE ; "Diffie-Hellman error"
BL              sub_184AC

loc_1527C
ADD             R1, SP, #0x24+var_14
MOV             R0, R5
BL              sub_29E00
CMN             R0, #1
BNE             loc_15274
MOV             R1, #1
MOV             R0, R5
BL              sub_29E48
CMP             R0, #1
BNE             loc_15274
MOV             R1, R4
LDR             R4, =byte_4CA40
LDR             R0, =dword_4CAC8
BL              sub_12224
MOV             R2, SP
LDR             R3, [R4,#(dword_4CAC8 - 0x4CA40)]
ADD             R1, R6, #0x10
MOV             R0, R5
BL              sub_2AB08
SUBS            R2, R0, #0
BNE             loc_15274
ADD             R1, SP, #0x24+var_14
MOV             R0, SP
BL              sub_29DB8
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
MOV             R1, R7
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
LDR             R2, [R3,#0x664]
BL              sub_1E964
MOV             R1, R5
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_1282C
MOV             R1, R6
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_1282C
LDR             R1, [R4,#(dword_4CAC8 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_1282C
BL              sub_14B10
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}
; End of function sub_15210

off_15320 DCD aDiffieHellmanE ; "Diffie-Hellman error"
off_15324 DCD byte_4CA40
off_15328 DCD dword_4CAC8



; _DWORD *sub_1532C()
sub_1532C
PUSH            {R4,LR}
MOV             R0, #0x1C
BL              sub_18718
MOV             R2, R0
MOV             R4, R0
LDR             R3, =byte_4CA40
MOV             R0, #0
LDR             R1, =dword_4C3E4
LDR             R3, [R3,#(dword_4CAC0 - 0x4CA40)]
LDR             R1, [R1]
LDR             R3, [R3,#0x660]
LDR             R3, [R3,#0xC]
LDR             R3, [R3,#4]
BL              sub_277F4
CMP             R0, #0
BEQ             loc_15374
LDR             R0, =aEccError ; "ECC error"
BL              sub_184AC

loc_15374
MOV             R0, R4
POP             {R4,PC}
; End of function sub_1532C

off_1537C DCD byte_4CA40
off_15380 DCD dword_4C3E4
off_15384 DCD aEccError ; "ECC error"



; void __fastcall sub_15388(int *, int, int)
sub_15388
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_277B4
MOV             R0, R4  ; ptr
POP             {R4,LR}
B               free
; End of function sub_15388




; void **__fastcall sub_153A0(_DWORD *, _DWORD *, int)
sub_153A0
PUSH            {R4-R8,LR}
MOV             R5, R0
LDR             R4, =byte_4CA40
MOV             R0, R1
MOV             R7, R2
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R3,#0x660]
LDR             R1, [R3,#0xC]
BL              sub_193DC
SUBS            R6, R0, #0
BNE             loc_153D4
LDR             R0, =aEccError ; "ECC error"
BL              sub_184AC

loc_153D4
MOV             R1, R5
BL              sub_196E0
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
MOV             R1, R7
STR             R0, [R4,#(dword_4CAC8 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
LDR             R2, [R3,#0x664]
BL              sub_1E964
MOV             R1, R6
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_19370
MOV             R1, R5
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_19370
LDR             R1, [R4,#(dword_4CAC8 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_1282C
POP             {R4-R8,LR}
B               sub_14B10
; End of function sub_153A0

off_15420 DCD byte_4CA40
off_15424 DCD aEccError ; "ECC error"



; char *sub_15428()
sub_15428

var_24= -0x24

PUSH            {R4,R5,LR}
MOV             R0, #0x40 ; '@'
SUB             SP, SP, #0x24
MOV             R5, #0x20 ; ' '
BL              sub_18718
MOV             R2, R5  ; n
MOV             R4, R0
MOV             R1, #0  ; c
MOV             R0, SP  ; s
BL              memset
MOV             R3, #9
MOV             R1, R5
MOV             R0, R4
STRB            R3, [SP,#0x24+var_24]
BL              sub_18090
LDRB            R3, [R4]
MOV             R2, SP
MOV             R1, R4
ADD             R0, R4, R5
BIC             R3, R3, #7
STRB            R3, [R4]
LDRB            R3, [R4,#0x1F]
AND             R3, R3, #0x7F
ORR             R3, R3, #0x40 ; '@'
STRB            R3, [R4,#0x1F]
BL              sub_17330
MOV             R0, R4
ADD             SP, SP, #0x24 ; '$'
POP             {R4,R5,PC}
; End of function sub_15428




; void __fastcall sub_1549C(void *)
sub_1549C
PUSH            {R4,LR}
MOV             R1, #0x20 ; ' '
MOV             R4, R0
BL              j_explicit_bzero
MOV             R0, R4  ; ptr
POP             {R4,LR}
B               free
; End of function sub_1549C




; void **__fastcall sub_154B8(int, int, int)
sub_154B8

var_20= -0x20

PUSH            {R4-R8,LR}
MOV             R8, R2
SUB             SP, SP, #0x40
MOV             R2, #0x20 ; ' ' ; n
MOV             R6, R1
MOV             R7, R0
MOV             R1, #0  ; c
ADD             R0, SP, R2 ; s
BL              memset
LDR             R5, [R6,#4]
CMP             R5, #0x20 ; ' '
BEQ             loc_154F0

loc_154E8
LDR             R0, =aBadCurve25519 ; "Bad curve25519"
BL              sub_184AC

loc_154F0
LDR             R2, [R6]
MOV             R1, R7
MOV             R0, SP
BL              sub_17330
MOV             R2, R5
MOV             R1, SP
ADD             R0, SP, #0x40+var_20
BL              sub_18BC0
CMP             R0, #0
BEQ             loc_154E8
LDR             R4, =byte_4CA40
MOV             R1, #0
LDR             R0, =dword_4CAC8
BL              sub_12224
MOV             R2, R5
MOV             R1, SP
LDR             R0, [R4,#(dword_4CAC8 - 0x4CA40)]
BL              sub_122E8
MOV             R1, R5
MOV             R0, SP
BL              j_explicit_bzero
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
MOV             R1, R8
LDR             R6, [R6]
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
LDR             R2, [R3,#0x664]
BL              sub_1E964
MOV             R2, R5
MOV             R1, R6
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_127F8
MOV             R2, R5
ADD             R1, R7, #0x20 ; ' '
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_127F8
LDR             R1, [R4,#(dword_4CAC8 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CAD0 - 0x4CA40)]
BL              sub_1282C
BL              sub_14B10
ADD             SP, SP, #0x40 ; '@'
POP             {R4-R8,PC}
; End of function sub_154B8

off_15594 DCD aBadCurve25519 ; "Bad curve25519"
off_15598 DCD byte_4CA40
off_1559C DCD dword_4CAC8



; int __fastcall sub_155A0(int, int, int *)
sub_155A0
PUSH            {R4-R8,LR}
MOV             R5, R0
MOVW            R0, #0x6A4
MOV             R6, R1
MOV             R7, R2
BL              sub_12344
MOV             R1, R5
MOV             R4, R0
BL              sub_1867C
CMN             R0, #1
MOVEQ           R5, R0
BEQ             loc_15610
MOV             R1, #0
MOV             R0, R4
BL              sub_124A0
LDR             R1, [R4,#4]
MOV             R0, R4
BL              sub_125E4
LDR             R1, [R4,#4]
BL              sub_1803C
MOV             R2, R7
MOV             R1, R6
MOV             R0, R4
BL              sub_1E858
CMN             R0, #1
MOVNE           R0, #0
MOVEQ           R0, #1
RSB             R5, R0, #0

loc_15610
MOV             R0, R4
BL              sub_1238C
MOV             R0, R4  ; ptr
BL              j_free
MOV             R0, R5
POP             {R4-R8,PC}
; End of function sub_155A0




; void sub_15628()
sub_15628
PUSH            {R4-R6,LR}
LDR             R4, =dword_4CA24
LDR             R5, [R4,#(dword_4CA38 - 0x4CA24)]
CMP             R5, #0
BEQ             loc_156B4
LDR             R1, =aHelp ; "help"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_1567C
LDR             R0, =off_4C3A8 ; "aes128-ctr"
BL              sub_12F5C
LDR             R1, =aAvailableCiphe ; "Available ciphers:\n%s\n"
MOV             R4, R0
MOV             R2, R0

loc_15664
MOV             R0, #6
BL              sub_184E8
MOV             R0, R4  ; ptr
BL              free
LDR             R0, =(aSsh2+5) ; "."
B               loc_156B0

loc_1567C
LDR             R1, =aNone ; "none"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
LDR             R2, =aCipher ; "cipher"
LDREQ           R3, =aNoneAes128Ctr ; "none,aes128-ctr"
LDR             R1, =off_4C3A8 ; "aes128-ctr"
STREQ           R3, [R4,#(dword_4CA38 - 0x4CA24)]
LDR             R0, [R4,#(dword_4CA38 - 0x4CA24)]
BL              sub_12FC4
CMP             R0, #0
BNE             loc_156B4
LDR             R0, =aNoValidCiphers ; "No valid ciphers specified for '-c'"

loc_156B0
BL              sub_184AC

loc_156B4
LDR             R4, [R4,#(dword_4CA3C - 0x4CA24)]
CMP             R4, #0
POPEQ           {R4-R6,PC}
LDR             R1, =aHelp ; "help"
MOV             R0, R4  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_156EC
LDR             R0, =off_4C36C ; "hmac-sha1"
BL              sub_12F5C
LDR             R1, =aAvailableMacsS ; "Available MACs:\n%s\n"
MOV             R4, R0
MOV             R2, R0
B               loc_15664

loc_156EC
LDR             R2, =aMac ; "MAC"
MOV             R0, R4
LDR             R1, =off_4C36C ; "hmac-sha1"
BL              sub_12FC4
CMP             R0, #0
LDREQ           R0, =aNoValidMacsSpe ; "No valid MACs specified for '-m'"
POPNE           {R4-R6,PC}
B               loc_156B0
; End of function sub_15628

off_1570C DCD dword_4CA24
off_15710 DCD aHelp     ; "help"
off_15714 DCD off_4C3A8 ; "aes128-ctr"
off_15718 DCD aAvailableCiphe ; "Available ciphers:\n%s\n"
off_1571C DCD aSsh2+5   ; "."
off_15720 DCD aNone     ; "none"
off_15724 DCD aCipher   ; "cipher"
off_15728 DCD aNoneAes128Ctr ; "none,aes128-ctr"
off_1572C DCD aNoValidCiphers ; "No valid ciphers specified for '-c'"
off_15730 DCD off_4C36C ; "hmac-sha1"
off_15734 DCD aAvailableMacsS ; "Available MACs:\n%s\n"
off_15738 DCD aMac      ; "MAC"
off_1573C DCD aNoValidMacsSpe ; "No valid MACs specified for '-m'"



; int sub_15740()
sub_15740
LDR             R3, =stderr
LDR             R2, =(aSsh20Dropbear2+0x11) ; "2018.76"
LDR             R1, =aDropbearVS ; "Dropbear v%s\n"
LDR             R0, [R3] ; stream
B               fprintf
; End of function sub_15740

off_15754 DCD stderr
off_15758 DCD aSsh20Dropbear2+0x11 ; "2018.76"
off_1575C DCD aDropbearVS ; "Dropbear v%s\n"



; int __fastcall sub_15760(int result, int, int, _DWORD *)
sub_15760
CMP             R2, #0
CMPGT           R0, #0
BXLE            LR
ADD             R2, R2, R0
SUB             R1, R2, R1
LDR             R2, [R3]
CMP             R2, R1
STRLE           R2, [R3]
STRGT           R1, [R3]
BX              LR
; End of function sub_15760




; time_t sub_15788()
sub_15788
PUSH            {R4-R6,LR}
LDR             R4, =byte_4CA40
LDR             R5, [R4,#(dword_4CAA8 - 0x4CA40)]
BL              sub_1459C
CMP             R0, #0
BEQ             loc_157C8
LDR             R1, =aKeepaliveOpens ; "keepalive@openssh.com"
BL              sub_14604

loc_157A8
MOV             R1, #1
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
BL              sub_1D894
BL              sub_18BF0
STR             R5, [R4,#(dword_4CAA8 - 0x4CA40)]
STR             R0, [R4,#(dword_4CA9C - 0x4CA40)]
POP             {R4-R6,PC}

loc_157C8
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
MOV             R1, #0x50 ; 'P'
BL              sub_125A4
MOV             R2, #0x15
LDR             R1, =aKeepaliveOpens ; "keepalive@openssh.com"
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
B               loc_157A8
; End of function sub_15788

off_157E8 DCD byte_4CA40
off_157EC DCD aKeepaliveOpens ; "keepalive@openssh.com"



; _DWORD *__fastcall sub_157F0(int, int)
sub_157F0
PUSH            {R4-R6,LR}
LDR             R4, =byte_4CA40
BL              sub_18BF0
LDR             R3, [R4,#(dword_4CA44 - 0x4CA40)]
MOV             R5, R0
CMP             R3, #0
BEQ             loc_15820
SUB             R3, R0, R3
CMP             R3, #0x12C
BLT             loc_15820
LDR             R0, =aTimeoutBeforeA ; "Timeout before auth"
BL              sub_18484

loc_15820
LDR             R3, [R4,#(dword_4CA50 - 0x4CA40)]
CMP             R3, #0
POPEQ           {R4-R6,PC}
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
TST             R3, #1
BNE             loc_15860
LDR             R3, [R4,#(dword_4CAB0 - 0x4CA40)]
MOVW            R2, #0x707F
SUB             R3, R5, R3
CMP             R3, R2
BGT             loc_1585C
LDRD            R2, R3, [R4,#(dword_4CAB4 - 0x4CA40)]
ADD             R3, R3, R2
CMN             R3, #0xC0000001
BLS             loc_15860

loc_1585C
BL              sub_14BDC

loc_15860
LDR             R6, =dword_4CA24
LDR             R2, [R6,#(dword_4CA2C - 0x4CA24)]
CMP             R2, #0
BLE             loc_158D8
LDR             R3, [R4,#(dword_4CAFC - 0x4CA40)]
CMP             R3, #0
BEQ             loc_158D8
LDR             R3, [R4,#(dword_4CAA4 - 0x4CA40)]
SUB             R3, R5, R3
CMP             R2, R3
BGT             loc_15890
BL              sub_15788

loc_15890
LDR             R3, [R4,#(dword_4CAA0 - 0x4CA40)]
LDR             R2, [R6,#(dword_4CA2C - 0x4CA24)]
SUB             R3, R5, R3
CMP             R3, R2
BLT             loc_158B8
LDR             R3, [R4,#(dword_4CA9C - 0x4CA40)]
SUB             R3, R5, R3
CMP             R2, R3
BGT             loc_158B8
BL              sub_15788

loc_158B8
LDR             R3, [R6,#(dword_4CA2C - 0x4CA24)]
LDR             R2, [R4,#(dword_4CAA0 - 0x4CA40)]
ADD             R3, R3, R3,LSL#1
SUB             R2, R5, R2
CMP             R2, R3
BLT             loc_158D8
LDR             R0, =aKeepaliveTimeo ; "Keepalive timeout"
BL              sub_184AC

loc_158D8
LDR             R3, [R6,#(dword_4CA30 - 0x4CA24)]
CMP             R3, #0
POPLE           {R4-R6,PC}
LDR             R2, [R4,#(dword_4CAA8 - 0x4CA40)]
SUB             R5, R5, R2
CMP             R3, R5
POPGT           {R4-R6,PC}
LDR             R0, =aIdleTimeout ; "Idle timeout"
POP             {R4-R6,LR}
B               sub_18484
; End of function sub_157F0

off_15900 DCD byte_4CA40
off_15904 DCD aTimeoutBeforeA ; "Timeout before auth"
off_15908 DCD dword_4CA24
off_1590C DCD aKeepaliveTimeo ; "Keepalive timeout"
off_15910 DCD aIdleTimeout ; "Idle timeout"



; void __fastcall sub_15914(void **)
sub_15914
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0]
CMP             R0, #0
POPEQ           {R4,PC}
BL              sub_1238C
LDR             R0, [R4] ; ptr
BL              j_free
MOV             R3, #0
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_15914



; Attributes: noreturn

; void __fastcall __noreturn sub_15940(int, int)
sub_15940

timeout= -0x2B4
var_2A8= -0x2A8
var_2A4= -0x2A4
var_2A0= -0x2A0
buf= -0x295
var_294= -0x294
var_28C= -0x28C
var_284= -0x284
var_204= -0x204
readfds= -0x184
var_104= -0x104
var_4= -4

PUSH            {R7,R11,LR}
SUB             SP, SP, #0x2B4
LDR             R11, =byte_4CA40
STR             R0, [SP,#0x2B4+var_2A0]
MOV             R4, R11

loc_15954
MOV             R7, #0

loc_15958
LDR             R8, [R11,#(dword_4CA68 - 0x4CA40)]
MOVW            R10, #0x7080
ADD             R6, SP, #0x2B4+var_4
STR             R10, [R6,#-0x100]!
CMP             R8, #0x8000
MOVHI           R9, #0
MOVLS           R9, #1
BL              sub_18BF0
LDRB            R3, [R11,#(byte_4CAAC - 0x4CA40)]
MOV             R5, R0
TST             R3, #1
BNE             loc_1599C
MOV             R1, R0
MOV             R3, R6
LDR             R2, [R11,#(dword_4CAB0 - 0x4CA40)]
MOV             R0, R10
BL              sub_15760

loc_1599C
LDR             R3, [R4,#(dword_4CAFC - 0x4CA40)]
CMP             R3, #1
BEQ             loc_159BC
MOV             R3, R6
LDR             R2, [R4,#(dword_4CA44 - 0x4CA40)]
MOV             R1, R5
MOV             R0, #0x12C
BL              sub_15760

loc_159BC
LDR             R3, [R4,#(dword_4CAFC - 0x4CA40)]
CMP             R3, #0
BEQ             loc_159EC
LDR             R1, [R4,#(dword_4CA9C - 0x4CA40)]
MOV             R3, R6
LDR             R2, [R4,#(dword_4CAA0 - 0x4CA40)]
LDR             R0, =dword_4CA24
CMP             R1, R2
MOVGE           R2, R1
LDR             R0, [R0,#(dword_4CA2C - 0x4CA24)]
MOV             R1, R5
BL              sub_15760

loc_159EC
LDR             R0, =dword_4CA24
MOV             R3, R6
LDR             R2, [R4,#(dword_4CAA8 - 0x4CA40)]
MOV             R1, R5
ADD             R10, SP, #0x2B4+var_204
LDR             R0, [R0,#(dword_4CA30 - 0x4CA24)]
BL              sub_15760
LDR             R3, [SP,#0x2B4+var_104]
STR             R7, [SP,#0x2B4+var_294.tv_usec]
BIC             R3, R3, R3,ASR#31
STR             R3, [SP,#0x2B4+var_294]
MOV             R3, #0

loc_15A1C
STR             R7, [R10,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BNE             loc_15A1C
MOV             R3, #0
ADD             R5, SP, #0x2B4+var_284

loc_15A34
STR             R7, [R5,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BNE             loc_15A34
LDR             R3, [R4,#(dword_4CA70 - 0x4CA40)]
CMP             R3, #0
BEQ             loc_15A60
MOV             R2, #0x99
LDR             R1, =aCommonSessionC ; "common-session.c"
LDR             R0, =aSesPayloadNull ; "ses.payload == NULL"
BL              sub_184D4

loc_15A60
LDR             R3, [R4,#(pipedes - 0x4CA40)]
ADD             R1, SP, #0x2B4+var_4
MOV             R0, #1
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
MOV             R2, R2,ASR#5
ADD             R2, R1, R2,LSL#2
RSBS            R1, R3, #0
AND             R1, R1, #0x1F
AND             R3, R3, #0x1F
RSBPL           R3, R1, #0
LDR             R1, [R2,#-0x280]
ORR             R3, R1, R0,LSL R3
MOV             R1, R10
MOV             R0, R5
STR             R3, [R2,#-0x280]
MOV             R2, R9
BL              sub_13E70
MOV             R0, R10
BL              sub_1CA24
LDR             R3, [R4,#(dword_4CA48 - 0x4CA40)]
CMN             R3, #1
BEQ             loc_15AD4
LDR             R3, [R4,#(dword_4CA50 - 0x4CA40)]
CMP             R3, #0
BEQ             loc_15B60

loc_15ACC
CMP             R8, #0x8000
BLS             loc_15B74

loc_15AD4
LDR             R3, [R4,#(dword_4CA4C - 0x4CA40)]
CMN             R3, #1
BEQ             loc_15B2C
LDR             R0, =dword_4CA5C
BL              sub_1DD50
CMP             R0, #0
BNE             loc_15B2C
LDR             R3, [R4,#(dword_4CA4C - 0x4CA40)]
ADD             R1, SP, #0x2B4+var_4
MOV             R0, #1
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
MOV             R2, R2,ASR#5
ADD             R2, R1, R2,LSL#2
RSBS            R1, R3, #0
AND             R1, R1, #0x1F
AND             R3, R3, #0x1F
RSBPL           R3, R1, #0
LDR             R1, [R2,#-0x200]
ORR             R3, R1, R0,LSL R3
STR             R3, [R2,#-0x200]

loc_15B2C
LDR             R0, [R4,#(dword_4CA54 - 0x4CA40)]
ADD             R3, SP, #0x2B4+var_294
STR             R3, [SP,#0x2B4+timeout] ; timeout
MOV             R2, R10 ; writefds
MOV             R3, #0  ; exceptfds
MOV             R1, R5  ; readfds
ADD             R0, R0, #1 ; nfds
BL              select
LDR             R8, [R4,#(dword_4CB44 - 0x4CA40)]
CMP             R8, #0
BEQ             loc_15BB4
LDR             R0, =aTerminatedBySi ; "Terminated by signal"

loc_15B5C
BL              sub_184AC

loc_15B60
LDR             R0, =dword_4CA5C
BL              sub_1DD50
CMP             R0, #0
BNE             loc_15ACC
B               loc_15AD4

loc_15B74
LDR             R3, [R4,#(dword_4CA48 - 0x4CA40)]
ADD             R1, SP, #0x2B4+var_4
MOV             R0, #1
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
MOV             R2, R2,ASR#5
ADD             R2, R1, R2,LSL#2
RSBS            R1, R3, #0
AND             R1, R1, #0x1F
AND             R3, R3, #0x1F
RSBPL           R3, R1, #0
LDR             R1, [R2,#-0x280]
ORR             R3, R1, R0,LSL R3
STR             R3, [R2,#-0x280]
B               loc_15AD4

loc_15BB4
CMP             R0, #0
BGE             loc_15BD4
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_15D70
LDR             R0, =aErrorInSelect ; "Error in select"
B               loc_15B5C

loc_15BD4
BNE             loc_15BFC

loc_15BD8
STR             R7, [R10,R0,LSL#2]
ADD             R0, R0, #1
CMP             R0, #0x20 ; ' '
BNE             loc_15BD8
MOV             R3, #0

loc_15BEC
STR             R7, [R5,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BNE             loc_15BEC

loc_15BFC
LDR             R3, [R4,#(pipedes - 0x4CA40)]
ADD             R1, SP, #0x2B4+var_4
STR             R7, [R4,#(dword_4CA90 - 0x4CA40)]
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
MOV             R2, R2,ASR#5
ADD             R2, R1, R2,LSL#2
RSBS            R1, R3, #0
AND             R1, R1, #0x1F
LDR             R2, [R2,#-0x280]
AND             R3, R3, #0x1F
RSBPL           R3, R1, #0
MOV             R1, #1
ANDS            R3, R2, R1,LSL R3
BEQ             loc_15C5C

loc_15C3C               ; nbytes
MOV             R2, #1
MOV             R1, R6  ; buf
LDR             R0, [R4,#(pipedes - 0x4CA40)] ; fd
BL              read
CMP             R0, #0
BGT             loc_15C3C
MOV             R3, #1
STR             R3, [R4,#(dword_4CA90 - 0x4CA40)]

loc_15C5C
BL              sub_157F0
LDR             R3, [R4,#(dword_4CA48 - 0x4CA40)]
CMN             R3, #1
BEQ             loc_15E88
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
ADD             R1, SP, #0x2B4+var_4
MOV             R2, R2,ASR#5
ADD             R2, R1, R2,LSL#2
RSBS            R1, R3, #0
AND             R1, R1, #0x1F
LDR             R2, [R2,#-0x280]
AND             R3, R3, #0x1F
RSBPL           R3, R1, #0
MOV             R1, #1
ANDS            R3, R2, R1,LSL R3
BEQ             loc_15E78
LDR             R3, [R4,#(dword_4CA50 - 0x4CA40)]
CMP             R3, #0
BNE             loc_15E74
MOV             R3, #0x32 ; '2'
STR             R3, [SP,#0x2B4+var_2A8]

loc_15CB8
LDR             R9, [R4,#(dword_4CA48 - 0x4CA40)]
MOV             R3, #0
ADD             R2, SP, #0x2B4+readfds

loc_15CC4
STR             R7, [R2,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BNE             loc_15CC4
CMP             R9, #0
ADD             R8, R9, #0x1F
MOVGE           R8, R9
RSBS            R2, R9, #0
AND             R2, R2, #0x1F
AND             R3, R9, #0x1F
RSBPL           R3, R2, #0
MOV             R2, #1
MOV             R3, R2,LSL R3
MOV             R8, R8,ASR#5
STR             R3, [SP,#0x2B4+var_2A4]
ADD             R3, SP, #0x2B4+var_4
ADD             R8, R3, R8,LSL#2
MOV             R5, #0

loc_15D0C
LDR             R3, [R8,#-0x180]
ADD             R1, SP, #0x2B4+readfds ; readfds
LDR             R2, [SP,#0x2B4+var_2A4]
ADD             R0, R9, #1 ; nfds
STR             R7, [SP,#0x2B4+var_28C.tv_usec]
ORR             R3, R3, R2
STR             R3, [R8,#-0x180]
MOV             R3, #1
STR             R3, [SP,#0x2B4+var_28C]
ADD             R3, SP, #0x2B4+var_28C
STR             R3, [SP,#0x2B4+timeout] ; timeout
MOV             R3, #0  ; exceptfds
MOV             R2, R3  ; writefds
BL              select
CMP             R0, #0
BGE             loc_15D78

loc_15D4C
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_15DC8

loc_15D5C
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_15DE8
B               loc_15DF8

loc_15D70
MOV             R0, R8
B               loc_15BD8

loc_15D78
BL              sub_157F0
LDR             R3, [R8,#-0x180]
LDR             R2, [SP,#0x2B4+var_2A4]
TST             R2, R3
BEQ             loc_15DC8
MOV             R2, #1  ; nbytes
ADD             R1, SP, #0x2B4+buf ; buf
MOV             R0, R9  ; fd
BL              read
CMP             R0, #0
BLT             loc_15D4C
BEQ             loc_15D5C
LDRB            R3, [SP,#0x2B4+buf]
CMP             R3, #0xA
BEQ             loc_15DD0
CMP             R3, #0xD
ADDNE           R2, SP, #0x2B4+var_4
ADDNE           R2, R2, R5
ADDNE           R5, R5, #1
STRBNE          R3, [R2,#-0x100]

loc_15DC8
CMP             R5, #0xFF
BNE             loc_15D0C

loc_15DD0
ADD             R3, SP, #0x2B4+var_4
ADD             R3, R3, R5
ADD             R5, R5, #1
CMP             R5, #3
STRB            R7, [R3,#-0x100]
BGT             loc_15E40

loc_15DE8
LDR             R3, [SP,#0x2B4+var_2A8]
SUBS            R3, R3, #1
STR             R3, [SP,#0x2B4+var_2A8]
BNE             loc_15CB8

loc_15DF8
LDR             R3, [R4,#(off_4CAE4 - 0x4CA40)]
BLX             R3

loc_15E00
LDR             R5, [R4,#(dword_4CA50 - 0x4CA40)]
MOV             R2, #6  ; n
LDR             R1, =aSsh2 ; "SSH-2."
MOV             R0, R5  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_15E78
MOV             R2, #9  ; n
LDR             R1, =aSsh199 ; "SSH-1.99-"
MOV             R0, R5  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_15E78
MOV             R1, R5
LDR             R0, =aIncompatibleRe ; "Incompatible remote version '%s'"
BL              sub_184AC

loc_15E40               ; n
MOV             R2, #4
LDR             R1, =aSsh ; "SSH-"
MOV             R0, R6  ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_15DE8
MOV             R0, R5
BL              sub_18718
MOV             R2, R5  ; n
MOV             R1, R6  ; src
STR             R0, [R4,#(dword_4CA50 - 0x4CA40)]
BL              memcpy
B               loc_15E00

loc_15E74
BL              sub_1D640

loc_15E78
LDR             R3, [R4,#(dword_4CA70 - 0x4CA40)]
CMP             R3, #0
BEQ             loc_15E88
BL              sub_1DBF0

loc_15E88
BL              sub_1DB60
MOV             R0, R10
BL              sub_1C820
LDR             R3, [SP,#0x2B4+var_2A0]
BLX             R3
MOV             R1, R10
ADD             R0, SP, #0x2B4+var_284
BL              sub_13CD8
LDR             R3, [R4,#(dword_4CA4C - 0x4CA40)]
CMN             R3, #1
BEQ             loc_15958
LDR             R0, =dword_4CA5C
BL              sub_1DD50
CMP             R0, #0
BNE             loc_15954
BL              sub_1D3D8
B               loc_15954
; End of function sub_15940

off_15ECC DCD byte_4CA40
off_15ED0 DCD dword_4CA24
off_15ED4 DCD aCommonSessionC ; "common-session.c"
off_15ED8 DCD aSesPayloadNull ; "ses.payload == NULL"
off_15EDC DCD dword_4CA5C
off_15EE0 DCD aTerminatedBySi ; "Terminated by signal"
off_15EE4 DCD aErrorInSelect ; "Error in select"
off_15EE8 DCD aSsh2     ; "SSH-2."
off_15EEC DCD aSsh199   ; "SSH-1.99-"
off_15EF0 DCD aIncompatibleRe ; "Incompatible remote version '%s'"
off_15EF4 DCD aSsh      ; "SSH-"



; void sub_15EF8()
sub_15EF8
PUSH            {R4-R6,LR}
LDR             R4, =byte_4CA40
LDR             R3, [R4,#(dword_4CB48 - 0x4CA40)]
CMP             R3, #0
POPEQ           {R4-R6,PC}
BL              sub_13C88
LDR             R3, [R4,#(off_4CAE8 - 0x4CA40)]
CMP             R3, #0
BEQ             loc_15F20
BLX             R3

loc_15F20
LDR             R5, =dword_4CA5C
BL              sub_1C14C
BL              sub_1C7FC

loc_15F2C
MOV             R0, R5
BL              sub_1DD50
CMP             R0, #0
BEQ             loc_15FFC
LDR             R0, [R4,#(dword_4CA50 - 0x4CA40)] ; ptr
MOV             R5, #0
BL              free
LDR             R0, [R4,#(dword_4CB10 - 0x4CA40)] ; ptr
STR             R5, [R4,#(dword_4CA50 - 0x4CA40)]
BL              free
LDR             R0, [R4,#(dword_4CB18 - 0x4CA40)] ; ptr
STR             R5, [R4,#(dword_4CB10 - 0x4CA40)]
BL              free
LDR             R0, [R4,#(dword_4CB14 - 0x4CA40)] ; ptr
STR             R5, [R4,#(dword_4CB18 - 0x4CA40)]
BL              free
LDR             R0, [R4,#(dword_4CB1C - 0x4CA40)] ; ptr
STR             R5, [R4,#(dword_4CB14 - 0x4CA40)]
BL              free
LDR             R0, [R4,#(dword_4CAF0 - 0x4CA40)] ; ptr
STR             R5, [R4,#(dword_4CB1C - 0x4CA40)]
BL              free
LDR             R0, =dword_4CAC4
STR             R5, [R4,#(dword_4CAF0 - 0x4CA40)]
BL              sub_15914
LDR             R0, =dword_4CACC
BL              sub_15914
LDR             R0, =dword_4CA70
BL              sub_15914
LDR             R0, =dword_4CA6C
BL              sub_15914
LDR             R0, =dword_4CA58
BL              sub_15914
LDR             R0, =dword_4CAD0
BL              sub_15914
LDR             R0, =dword_4CAD4
BL              sub_15914
LDR             R0, [R4,#(dword_4CAC8 - 0x4CA40)]
CMP             R0, R5
BEQ             loc_15FD0
BL              sub_29D74

loc_15FD0               ; ptr
LDR             R0, [R4,#(dword_4CAC8 - 0x4CA40)]
MOV             R5, #0
BL              free
MOVW            R1, #0x66C
LDR             R0, [R4,#(dword_4CABC - 0x4CA40)]
STR             R5, [R4,#(dword_4CAC8 - 0x4CA40)]
BL              j_explicit_bzero
LDR             R0, [R4,#(dword_4CABC - 0x4CA40)] ; ptr
BL              free
STR             R5, [R4,#(dword_4CABC - 0x4CA40)]
POP             {R4-R6,PC}

loc_15FFC
MOV             R0, R5
BL              sub_1DD60
BL              j_free
B               loc_15F2C
; End of function sub_15EF8

off_1600C DCD byte_4CA40
off_16010 DCD dword_4CA5C
off_16014 DCD dword_4CAC4
off_16018 DCD dword_4CACC
off_1601C DCD dword_4CA70
off_16020 DCD dword_4CA6C
off_16024 DCD dword_4CA58
off_16028 DCD dword_4CAD0
off_1602C DCD dword_4CAD4



; _DWORD *sub_16030()
sub_16030
PUSH            {R4,LR}
MOV             R0, #0x1B
BL              sub_12344
MOV             R2, #0x1A
MOV             R4, R0
LDR             R1, =aSsh20Dropbear2_0 ; "SSH-2.0-dropbear_2018.76\r\n"
BL              sub_127C4
MOV             R0, R4
MOV             R1, #0
POP             {R4,LR}
B               sub_1D84C
; End of function sub_16030

off_1605C DCD aSsh20Dropbear2_0 ; "SSH-2.0-dropbear_2018.76\r\n"
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_1]



; const char *sub_16064()
sub_16064
LDR             R3, =byte_4CA40
LDR             R2, =aBinSh ; "/bin/sh"
LDR             R3, [R3,#(dword_4CB14 - 0x4CA40)]
LDRB            R0, [R3]
CMP             R0, #0
MOVNE           R0, R3
MOVEQ           R0, R2
BX              LR
; End of function sub_16064

off_16084 DCD byte_4CA40
off_16088 DCD aBinSh    ; "/bin/sh"



; const char **__fastcall sub_1608C(char *name)
sub_1608C
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, =byte_4CA40
LDR             R0, [R4,#(dword_4CB18 - 0x4CA40)] ; ptr
CMP             R0, #0
BEQ             loc_160B0
BL              free
MOV             R3, #0
STR             R3, [R4,#(dword_4CB18 - 0x4CA40)]

loc_160B0               ; ptr
LDR             R0, [R4,#(dword_4CB10 - 0x4CA40)]
CMP             R0, #0
BEQ             loc_160C8
BL              free
MOV             R3, #0
STR             R3, [R4,#(dword_4CB10 - 0x4CA40)]

loc_160C8               ; ptr
LDR             R0, [R4,#(dword_4CB14 - 0x4CA40)]
CMP             R0, #0
BEQ             loc_160E0
BL              free
MOV             R3, #0
STR             R3, [R4,#(dword_4CB14 - 0x4CA40)]

loc_160E0               ; ptr
LDR             R0, [R4,#(dword_4CB1C - 0x4CA40)]
CMP             R0, #0
BEQ             loc_160F8
BL              free
MOV             R3, #0
STR             R3, [R4,#(dword_4CB1C - 0x4CA40)]

loc_160F8               ; name
MOV             R0, R5
BL              getpwnam
SUBS            R5, R0, #0
POPEQ           {R4-R6,PC}
LDR             R3, [R5,#8]
LDR             R0, [R5]
STR             R3, [R4,#(dword_4CB08 - 0x4CA40)]
LDR             R3, [R5,#0xC]
STR             R3, [R4,#(dword_4CB0C - 0x4CA40)]
BL              sub_1886C
STR             R0, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R0, [R5,#0x14]
BL              sub_1886C
STR             R0, [R4,#(dword_4CB10 - 0x4CA40)]
LDR             R0, [R5,#0x18]
BL              sub_1886C
STR             R0, [R4,#(dword_4CB14 - 0x4CA40)]
LDR             R0, [R4,#(dword_4CB18 - 0x4CA40)] ; name
LDR             R5, [R5,#4]
BL              getspnam
CMP             R0, #0
BEQ             loc_1615C
LDR             R0, [R0,#4]
CMP             R0, #0
BNE             loc_16168

loc_1615C
CMP             R5, #0
LDR             R0, =asc_359A7 ; "!!"
MOVNE           R0, R5

loc_16168
BL              sub_1886C
STR             R0, [R4,#(dword_4CB1C - 0x4CA40)]
POP             {R4-R6,PC}
; End of function sub_1608C

off_16174 DCD byte_4CA40
off_16178 DCD asc_359A7 ; "!!"



; int sub_1617C()
sub_1617C
PUSH            {R4-R6,LR}
LDR             R5, =byte_4CA40
LDR             R0, [R5,#(dword_4CA4C - 0x4CA40)] ; fd
CMP             R0, #0
POPLT           {R4-R6,PC}
LDR             R12, [R5,#(dword_4CB28 - 0x4CA40)]
MOV             R3, #0
LDR             LR, [R5,#(dword_4CB24 - 0x4CA40)]
MOV             R1, R3
MOV             R4, #0xC

loc_161A4
CMP             R12, R3
BNE             loc_161D0
CMP             R1, #0
MOVEQ           R4, #0xB

loc_161B4
LDR             R3, [R5,#(dword_4CB34 - 0x4CA40)]
CMP             R3, R4
POPEQ           {R4-R6,PC}
MOV             R1, R4
BL              sub_1CD30
STR             R4, [R5,#(dword_4CB34 - 0x4CA40)]
POP             {R4-R6,PC}

loc_161D0
LDR             R2, [LR,R3,LSL#2]
CMP             R2, #0
BEQ             loc_16200
LDR             R2, [R2,#0x60]
CMP             R2, #3
BEQ             loc_16200
CMP             R2, #0
BEQ             loc_16208
MOV             R1, #1
CMP             R4, #0xC
CMPEQ           R2, R1
MOVEQ           R4, #0xA

loc_16200
ADD             R3, R3, #1
B               loc_161A4

loc_16208
MOV             R4, #0xB
B               loc_161B4
; End of function sub_1617C

off_16210 DCD byte_4CA40



; _DWORD *__fastcall sub_16214(__int64)
sub_16214
PUSH            {R4-R6,LR}
MOV             R5, R1
LDR             R4, =byte_4CA40
CMP             R0, R1
STRGE           R0, [R4,#(dword_4CA54 - 0x4CA40)]
STRLT           R1, [R4,#(dword_4CA54 - 0x4CA40)]
CMP             R0, #0
STRD            R0, R1, [R4,#(dword_4CA48 - 0x4CA40)]
BLT             loc_1623C
BL              sub_188B0

loc_1623C
CMP             R5, #0
BLT             loc_1624C
MOV             R0, R5
BL              sub_188B0

loc_1624C
MOV             R3, #0xA
MOV             R5, #0
STR             R3, [R4,#(dword_4CB34 - 0x4CA40)]
BL              sub_1617C
BL              sub_18BF0
STR             R0, [R4,#(dword_4CA44 - 0x4CA40)]
STR             R0, [R4,#(dword_4CAA0 - 0x4CA40)]
STR             R0, [R4,#(dword_4CAA8 - 0x4CA40)]
LDR             R0, =pipedes ; pipedes
STR             R5, [R4,#(dword_4CAA4 - 0x4CA40)]
STR             R5, [R4,#(dword_4CA9C - 0x4CA40)]
BL              pipe
CMP             R0, R5
BGE             loc_1628C
LDR             R0, =aSignalPipeFail ; "Signal pipe failed"
BL              sub_184AC

loc_1628C
LDR             R0, [R4,#(pipedes - 0x4CA40)]
BL              sub_188B0
LDR             R0, [R4,#(dword_4CA8C - 0x4CA40)]
BL              sub_188B0
LDR             R3, [R4,#(pipedes - 0x4CA40)]
MOV             R0, #0x4000
LDR             R2, [R4,#(dword_4CA54 - 0x4CA40)]
CMP             R3, R2
MOVLT           R3, R2
LDR             R2, [R4,#(dword_4CA8C - 0x4CA40)]
CMP             R3, R2
STRGE           R3, [R4,#(dword_4CA54 - 0x4CA40)]
STRLT           R2, [R4,#(dword_4CA54 - 0x4CA40)]
BL              sub_12344
STR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
LDR             R0, =dword_4CA5C
STR             R5, [R4,#(dword_4CA78 - 0x4CA40)]
STR             R5, [R4,#(dword_4CA6C - 0x4CA40)]
STR             R5, [R4,#(dword_4CA70 - 0x4CA40)]
STR             R5, [R4,#(dword_4CA7C - 0x4CA40)]
BL              sub_1DD3C
MOV             R3, #0x14
MOVW            R0, #0x66C
STRB            R3, [R4,#(byte_4CA85 - 0x4CA40)]
LDRB            R3, [R4,#(byte_4CA84 - 0x4CA40)]
STRB            R5, [R4,#(byte_4CA86 - 0x4CA40)]
STRB            R5, [R4,#(byte_4CA87 - 0x4CA40)]
ORR             R3, R3, #1
STR             R5, [R4,#(dword_4CADC - 0x4CA40)]
STRB            R3, [R4,#(byte_4CA84 - 0x4CA40)]
STR             R5, [R4,#(dword_4CAE0 - 0x4CA40)]
BL              sub_18718
LDR             R3, =unk_35374
STR             R0, [R4,#(dword_4CABC - 0x4CA40)]
STR             R5, [R4,#(dword_4CAC0 - 0x4CA40)]
STR             R3, [R0,#0x330]
STR             R3, [R0]
LDR             R3, =off_35368
STR             R5, [R0,#0x10]
STR             R5, [R0,#0x660]
STR             R3, [R0,#4]
STR             R3, [R0,#0x334]
LDR             R3, =unk_35338
STR             R5, [R0,#0x340]
STR             R3, [R0,#8]
STR             R3, [R0,#0x338]
MOV             R3, #0xFFFFFFFF
STR             R3, [R0,#0x664]
STR             R5, [R4,#(dword_4CAC4 - 0x4CA40)]
STR             R5, [R4,#(dword_4CAD0 - 0x4CA40)]
STR             R5, [R4,#(dword_4CAD4 - 0x4CA40)]
STR             R5, [R4,#(dword_4CAC8 - 0x4CA40)]
STR             R5, [R4,#(dword_4CA50 - 0x4CA40)]
STR             R5, [R4,#(dword_4CB30 - 0x4CA40)]
STR             R5, [R4,#(dword_4CB40 - 0x4CA40)]
POP             {R4-R6,PC}
; End of function sub_16214

off_1636C DCD byte_4CA40
off_16370 DCD pipedes
off_16374 DCD aSignalPipeFail ; "Signal pipe failed"
off_16378 DCD dword_4CA5C
off_1637C DCD unk_35374
off_16380 DCD off_35368
off_16384 DCD unk_35338



; size_t __fastcall sub_16388(int, char *s, int)
sub_16388
CMP             R2, #0
BEQ             loc_163D4
SUB             R12, R1, #1
MOV             R3, R0
SUB             R2, R2, #1
PUSH            {LR}

loc_163A0
SUB             LR, R3, R0
CMP             R2, LR
BHI             loc_163C0

loc_163AC
MOV             R2, #0
MOV             R0, R1  ; s
STRB            R2, [R3]
POP             {LR}
B               strlen

loc_163C0
LDRB            LR, [R12,#1]!
CMP             LR, #0
BEQ             loc_163AC
STRB            LR, [R3],#1
B               loc_163A0

loc_163D4
MOV             R0, R2
BX              LR
; End of function sub_16388




; char *__fastcall sub_163DC(char *, char *s, int)
sub_163DC
PUSH            {R4-R6,LR}
MOV             R3, R0
ADD             R5, R2, R0

loc_163E8
CMP             R3, R5
MOV             R12, R3
BNE             loc_16414

loc_163F4
SUB             R4, R3, R0
SUBS            R2, R2, R4
MOVNE           R3, R1
BNE             loc_16440
MOV             R0, R1  ; s
BL              strlen

loc_1640C
ADD             R0, R0, R4
POP             {R4-R6,PC}

loc_16414
LDRB            LR, [R3]
ADD             R4, R3, #1
CMP             LR, #0
BEQ             loc_163F4
MOV             R3, R4
B               loc_163E8

loc_1642C
CMP             R2, #1
MOV             R3, LR
STRBNE          R0, [R12]
SUBNE           R2, R2, #1
ADDNE           R12, R12, #1

loc_16440
MOV             LR, R3
LDRB            R0, [LR],#1
CMP             R0, #0
BNE             loc_1642C
STRB            R0, [R12]
SUB             R0, R3, R1
B               loc_1640C
; End of function sub_163DC




; void sub_1645C()
sub_1645C

var_14= -0x14

PUSH            {R4,LR}
SUB             SP, SP, #0x18
LDR             LR, =off_359C0
ADD             R12, SP, #0x18+var_14
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDR             R3, [LR]
LDR             R0, =off_394EC ; "aes"
STR             R3, [R12]
BL              sub_26FF0
CMN             R0, #1
MOVNE           R4, SP
BNE             loc_164A4

loc_16490
LDR             R0, =aErrorRegisteri ; "Error registering crypto"
BL              sub_184AC

loc_16498
BL              sub_27098
CMN             R0, #1
BEQ             loc_16490

loc_164A4
LDR             R0, [R4,#4]!
CMP             R0, #0
BNE             loc_16498
LDR             R0, =off_368C8 ; "dropbear_prng"
BL              sub_27138
LDR             R3, =dword_4C3E4
CMN             R0, #1
STR             R0, [R3]
BEQ             loc_16490
MOV             R2, #0xD0 ; n
LDR             R1, =off_39BC0 ; src
LDR             R0, =dword_4C684 ; dest
BL              memcpy
ADD             SP, SP, #0x18
POP             {R4,LR}
B               sub_1928C
; End of function sub_1645C

off_164E4 DCD off_359C0
off_164E8 DCD off_394EC ; "aes"
off_164EC DCD aErrorRegisteri ; "Error registering crypto"
off_164F0 DCD off_368C8 ; "dropbear_prng"
off_164F4 DCD dword_4C3E4
off_164F8 DCD off_39BC0 ; "LibTomMath"
off_164FC DCD dword_4C684



; int __fastcall sub_16500(int result, int)
sub_16500
MOV             R2, #0
PUSH            {R4-R6,LR}

loc_16508
MOV             LR, R1
LDR             R3, [R0,R2]
ADD             R12, R0, R2
LDRD            R4, R5, [LR,R2]!
LDR             R6, [R12,#4]
MOV             R12, R4
ADDS            R12, R3, R12
MOV             R3, R0
ADC             R6, R6, R5
MOV             R4, R12
MOV             R5, R6
STRD            R4, R5, [R3,R2]!
ADD             R2, R2, #0x10
LDR             R5, [LR,#8]
LDR             R12, [R3,#8]
LDR             LR, [LR,#0xC]
LDR             R4, [R3,#0xC]
ADDS            R12, R12, R5
STR             R12, [R3,#8]
ADC             LR, R4, LR
CMP             R2, #0x50 ; 'P'
STR             LR, [R3,#0xC]
BNE             loc_16508
POP             {R4-R6,PC}
; End of function sub_16500




; _QWORD *__fastcall sub_16568(int, int)
sub_16568
SUB             R3, R1, #8
SUB             R0, R0, #8
ADD             R1, R1, #0x48 ; 'H'
PUSH            {R4-R7,LR}

loc_16578
LDRD            R6, R7, [R3,#8]!
LDRD            R4, R5, [R0,#8]!
SUBS            R12, R6, R4
SBC             R2, R7, R5
CMP             R3, R1
STR             R12, [R0]
STR             R2, [R0,#4]
BNE             loc_16578
POP             {R4-R7,PC}
; End of function sub_16568




; _QWORD *__fastcall sub_1659C(_QWORD *result, int *, int *)
sub_1659C

var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x2C
LDR             R3, [R2]
LDR             R6, [R1]
SMULL           R6, R7, R6, R3
STRD            R6, R7, [R0]
LDR             R3, [R2]
LDR             R6, [R1,#8]
LDR             R12, [R1]
SMULL           R6, R7, R6, R3
LDR             R3, [R2,#8]
SMLAL           R6, R7, R3, R12
STRD            R6, R7, [R0,#8]
LDR             R8, [R1,#8]
LDR             R12, [R2,#8]
ADDS            R6, R8, R8
MOV             R9, R8,ASR#31
ADC             R3, R9, R9
MOV             R9, R12,ASR#31
MUL             LR, R6, R9
UMULL           R6, R7, R6, R12
MLA             R3, R12, R3, LR
LDR             R12, [R1]
ADD             R7, R3, R7
LDR             R3, [R2,#0x10]
SMLAL           R6, R7, R3, R12
LDR             R12, [R1,#0x10]
LDR             R3, [R2]
SMLAL           R6, R7, R3, R12
STRD            R6, R7, [R0,#0x10]
LDR             R3, [R2,#8]
LDR             R6, [R1,#0x10]
LDR             R12, [R1,#8]
SMULL           R6, R7, R6, R3
LDR             R3, [R2,#0x10]
SMLAL           R6, R7, R3, R12
LDR             R12, [R1]
LDR             R3, [R2,#0x18]
SMLAL           R6, R7, R3, R12
LDR             R12, [R1,#0x18]
LDR             R3, [R2]
SMLAL           R6, R7, R3, R12
STRD            R6, R7, [R0,#0x18]
LDR             R3, [R2,#8]
LDR             R6, [R1,#0x18]
LDR             R12, [R1,#8]
SMULL           R6, R7, R6, R3
LDR             R3, [R2,#0x18]
SMLAL           R6, R7, R3, R12
LDR             R12, [R1,#0x10]
LDR             R3, [R2,#0x10]
ADDS            R4, R6, R6
ADC             R5, R7, R7
SMLAL           R4, R5, R3, R12
LDR             R12, [R1]
LDR             R3, [R2,#0x20]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x20]
LDR             R3, [R2]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x20]
LDR             R3, [R2,#0x10]
LDR             R4, [R1,#0x18]
LDR             R12, [R1,#0x10]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x18]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#8]
LDR             R3, [R2,#0x20]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x20]
LDR             R3, [R2,#8]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1]
LDR             R3, [R2,#0x28]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x28]
LDR             R3, [R2]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x28]
LDR             R3, [R2,#0x28]
LDR             R4, [R1,#8]
LDR             R12, [R1,#0x18]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x18]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x28]
LDR             R3, [R2,#8]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x10]
LDR             R3, [R2,#0x20]
ADDS            R10, R4, R4
ADC             R11, R5, R5
SMLAL           R10, R11, R3, R12
LDR             R12, [R1,#0x20]
LDR             R3, [R2,#0x10]
SMLAL           R10, R11, R3, R12
LDR             R12, [R1]
LDR             R3, [R2,#0x30]
SMLAL           R10, R11, R3, R12
LDR             R12, [R1,#0x30]
LDR             R3, [R2]
SMLAL           R10, R11, R3, R12
STRD            R10, R11, [R0,#0x30]
LDR             R4, [R1,#0x20]
LDR             R3, [R2,#0x18]
LDR             R12, [R1,#0x18]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x20]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x10]
LDR             R3, [R2,#0x28]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x28]
LDR             R3, [R2,#0x10]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#8]
LDR             R3, [R2,#0x30]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x30]
LDR             R3, [R2,#8]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1]
LDR             R3, [R2,#0x38]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x38]
LDR             R3, [R2]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x38]
LDR             R3, [R2,#0x18]
LDR             R4, [R1,#0x28]
LDR             R12, [R1,#0x18]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x28]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#8]
LDR             R3, [R2,#0x38]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x38]
LDR             R3, [R2,#8]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x20]
ADDS            R3, R4, R4
STR             R3, [SP,#0x2C+var_2C]
ADC             R3, R5, R5
STR             R3, [SP,#0x2C+var_28]
LDRD            R4, R5, [SP,#0x2C+var_2C]
LDR             R3, [R2,#0x20]
SMLAL           R4, R5, R3, R12
LDR             R3, [R2,#0x30]
LDR             R12, [R1,#0x10]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x30]
LDR             R3, [R2,#0x10]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1]
LDR             R3, [R2,#0x40]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x40]
LDR             R3, [R2]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x40]
LDR             R3, [R2,#0x20]
LDR             R4, [R1,#0x28]
LDR             R12, [R1,#0x20]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x28]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x18]
LDR             R3, [R2,#0x30]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x30]
LDR             R3, [R2,#0x18]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x10]
LDR             R3, [R2,#0x38]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x38]
LDR             R3, [R2,#0x10]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#8]
LDR             R3, [R2,#0x40]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x40]
LDR             R3, [R2,#8]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1]
LDR             R3, [R2,#0x48]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x48]
LDR             R3, [R2]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x48]
LDR             R3, [R2,#0x38]
LDR             R4, [R1,#0x18]
LDR             R12, [R1,#0x28]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x28]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x38]
LDR             R3, [R2,#0x18]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#8]
LDR             R3, [R2,#0x48]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x48]
LDR             R3, [R2,#8]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x20]
ADDS            R3, R4, R4
STR             R3, [SP,#0x2C+var_24]
ADC             R3, R5, R5
STR             R3, [SP,#0x2C+var_20]
LDRD            R4, R5, [SP,#0x2C+var_24]
LDR             R3, [R2,#0x30]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x30]
LDR             R3, [R2,#0x20]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x10]
LDR             R3, [R2,#0x40]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x40]
LDR             R3, [R2,#0x10]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x50]
LDR             R3, [R2,#0x28]
LDR             R4, [R1,#0x30]
LDR             R12, [R1,#0x28]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x30]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x20]
LDR             R3, [R2,#0x38]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x38]
LDR             R3, [R2,#0x20]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x18]
LDR             R3, [R2,#0x40]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x40]
LDR             R3, [R2,#0x18]
SMLAL           R4, R5, R3, R12
LDR             R3, [R2,#0x48]
LDR             R12, [R1,#0x10]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x48]
LDR             R3, [R2,#0x10]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x58]
LDR             R3, [R2,#0x28]
LDR             R4, [R1,#0x38]
LDR             R12, [R1,#0x28]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x38]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x18]
LDR             R3, [R2,#0x48]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x48]
LDR             R3, [R2,#0x18]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x30]
ADDS            R3, R4, R4
STR             R3, [SP,#0x2C+var_1C]
ADC             R3, R5, R5
STR             R3, [SP,#0x2C+var_18]
LDRD            R4, R5, [SP,#0x2C+var_1C]
LDR             R3, [R2,#0x30]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x20]
LDR             R3, [R2,#0x40]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x40]
LDR             R3, [R2,#0x20]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x60]
LDR             R3, [R2,#0x30]
LDR             R4, [R1,#0x38]
LDR             R12, [R1,#0x30]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x38]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x28]
LDR             R3, [R2,#0x40]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x40]
LDR             R3, [R2,#0x28]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x20]
LDR             R3, [R2,#0x48]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x48]
LDR             R3, [R2,#0x20]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x68]
LDR             R3, [R2,#0x48]
LDR             R4, [R1,#0x28]
LDR             R12, [R1,#0x38]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x38]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x48]
LDR             R3, [R2,#0x28]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x30]
ADDS            R3, R4, R4
STR             R3, [SP,#0x2C+var_14]
ADC             R3, R5, R5
STR             R3, [SP,#0x2C+var_10]
LDRD            R4, R5, [SP,#0x2C+var_14]
LDR             R3, [R2,#0x40]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x40]
LDR             R3, [R2,#0x30]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x70]
LDR             R3, [R2,#0x38]
LDR             R4, [R1,#0x40]
LDR             R12, [R1,#0x38]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x40]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x30]
LDR             R3, [R2,#0x48]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x48]
LDR             R3, [R2,#0x30]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x78]
LDR             R3, [R2,#0x38]
LDR             R4, [R1,#0x48]
LDR             R12, [R1,#0x38]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x48]
SMLAL           R4, R5, R3, R12
LDR             R12, [R1,#0x40]
ADDS            R3, R4, R4
STR             R3, [SP,#0x2C+var_C]
ADC             R3, R5, R5
STR             R3, [SP,#0x2C+var_C+4]
LDR             R3, [R2,#0x40]
LDRD            R4, R5, [SP,#0x2C+var_C]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x80]
LDR             R3, [R2,#0x40]
LDR             R4, [R1,#0x48]
LDR             R12, [R1,#0x40]
SMULL           R4, R5, R4, R3
LDR             R3, [R2,#0x48]
SMLAL           R4, R5, R3, R12
STRD            R4, R5, [R0,#0x88]
LDR             R4, [R1,#0x48]
LDR             R2, [R2,#0x48]
ADDS            R3, R4, R4
MOV             R5, R4,ASR#31
ADC             R1, R5, R5
MOV             R5, R2,ASR#31
MUL             R12, R3, R5
MLA             R1, R2, R1, R12
UMULL           R2, R3, R3, R2
ADD             R3, R1, R3
STRD            R2, R3, [R0,#0x90]
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}
; End of function sub_1659C




; unsigned int *__fastcall sub_16B54(unsigned int *result)
sub_16B54
LDR             R12, [R0,#0x94]
LDR             R1, [R0,#0x90]
PUSH            {R4,LR}
LDR             LR, [R0,#0x40]
MOV             R2, R12,LSL#4
LDR             R4, [R0,#0x44]
MOV             R3, R1,LSL#4
ORR             R2, R2, R1,LSR#28
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            LR, R1, R1
ADC             R4, R12, R12
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            R3, R3, R1
ADC             R2, R2, R12
LDR             R12, [R0,#0x8C]
LDR             R1, [R0,#0x88]
LDR             LR, [R0,#0x38]
STR             R2, [R0,#0x44]
MOV             R2, R12,LSL#4
LDR             R4, [R0,#0x3C]
STR             R3, [R0,#0x40]
MOV             R3, R1,LSL#4
ORR             R2, R2, R1,LSR#28
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            LR, R1, R1
ADC             R4, R12, R12
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            R3, R3, R1
ADC             R2, R2, R12
LDR             R12, [R0,#0x84]
LDR             R1, [R0,#0x80]
LDR             LR, [R0,#0x30]
STR             R2, [R0,#0x3C]
MOV             R2, R12,LSL#4
LDR             R4, [R0,#0x34]
STR             R3, [R0,#0x38]
MOV             R3, R1,LSL#4
ORR             R2, R2, R1,LSR#28
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            LR, R1, R1
ADC             R4, R12, R12
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            R3, R3, R1
ADC             R2, R2, R12
LDR             R12, [R0,#0x7C]
LDR             R1, [R0,#0x78]
LDR             LR, [R0,#0x28]
STR             R2, [R0,#0x34]
MOV             R2, R12,LSL#4
LDR             R4, [R0,#0x2C]
STR             R3, [R0,#0x30]
MOV             R3, R1,LSL#4
ORR             R2, R2, R1,LSR#28
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            LR, R1, R1
ADC             R4, R12, R12
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            R3, R3, R1
ADC             R2, R2, R12
LDR             R12, [R0,#0x74]
LDR             R1, [R0,#0x70]
LDR             LR, [R0,#0x20]
STR             R2, [R0,#0x2C]
MOV             R2, R12,LSL#4
LDR             R4, [R0,#0x24]
STR             R3, [R0,#0x28]
MOV             R3, R1,LSL#4
ORR             R2, R2, R1,LSR#28
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            LR, R1, R1
ADC             R4, R12, R12
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            R3, R3, R1
ADC             R2, R2, R12
LDR             R1, [R0,#0x68]
STR             R3, [R0,#0x20]
STR             R2, [R0,#0x24]
LDR             R12, [R0,#0x6C]
LDR             LR, [R0,#0x18]
MOV             R3, R1,LSL#4
LDR             R4, [R0,#0x1C]
MOV             R2, R12,LSL#4
ADDS            R3, R3, LR
ORR             R2, R2, R1,LSR#28
ADC             R2, R2, R4
ADDS            LR, R1, R1
ADC             R4, R12, R12
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            R3, R3, R1
ADC             R2, R2, R12
LDR             R12, [R0,#0x64]
LDR             R1, [R0,#0x60]
LDR             LR, [R0,#0x10]
STR             R2, [R0,#0x1C]
MOV             R2, R12,LSL#4
LDR             R4, [R0,#0x14]
STR             R3, [R0,#0x18]
MOV             R3, R1,LSL#4
ORR             R2, R2, R1,LSR#28
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            LR, R1, R1
ADC             R4, R12, R12
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            R3, R3, R1
ADC             R2, R2, R12
LDR             R12, [R0,#0x5C]
LDR             R1, [R0,#0x58]
LDR             LR, [R0,#8]
STR             R2, [R0,#0x14]
MOV             R2, R12,LSL#4
LDR             R4, [R0,#0xC]
STR             R3, [R0,#0x10]
MOV             R3, R1,LSL#4
ORR             R2, R2, R1,LSR#28
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            LR, R1, R1
ADC             R4, R12, R12
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            R3, R3, R1
ADC             R2, R2, R12
LDR             R12, [R0,#0x54]
LDR             R1, [R0,#0x50]
LDR             LR, [R0]
STR             R2, [R0,#0xC]
MOV             R2, R12,LSL#4
LDR             R4, [R0,#4]
STR             R3, [R0,#8]
MOV             R3, R1,LSL#4
ORR             R2, R2, R1,LSR#28
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            LR, R1, R1
ADC             R4, R12, R12
ADDS            R3, R3, LR
ADC             R2, R2, R4
ADDS            R3, R3, R1
ADC             R2, R2, R12
STR             R3, [R0]
STR             R2, [R0,#4]
POP             {R4,PC}
; End of function sub_16B54




; __int64 *__fastcall sub_16DC0(__int64 *result)
sub_16DC0
MOV             R1, R0
ADD             R12, R0, #0x50 ; 'P'
PUSH            {R4-R10,LR}
MOV             R6, #0
MOV             R7, #0
STRD            R6, R7, [R0,#0x50]

loc_16DD8
LDRD            R8, R9, [R1]
MOV             LR, R9,ASR#31
MOV             LR, LR,LSR#6
ADDS            R6, R8, LR
AND             LR, R6, #0xFC000000
ADC             R7, R9, #0
SUBS            LR, R8, LR
MOV             R10, R7
STR             LR, [R1]
MOV             LR, R6,LSR#26
SBC             R8, R9, R7
ORR             LR, LR, R7,LSL#6
STR             R8, [R1,#4]
MOV             R8, R7,ASR#26
LDRD            R6, R7, [R1,#8]
ADDS            R4, LR, R6
ADC             R5, R8, R7
MOV             LR, R5,ASR#31
MOV             LR, LR,LSR#7
ADDS            R6, R4, LR
AND             LR, R6, #0xFE000000
ADC             R7, R5, #0
SUBS            LR, R4, LR
MOV             R9, R7,ASR#25
SBC             R8, R5, R7
STR             LR, [R1,#8]
STR             R8, [R1,#0xC]
MOV             R8, R6,LSR#25
LDR             LR, [R1,#0x10]
ORR             R8, R8, R7,LSL#7
LDR             R6, [R1,#0x14]
ADDS            LR, LR, R8
ADC             R8, R6, R9
MOV             R6, LR
MOV             R7, R8
STRD            R6, R7, [R1,#0x10]!
CMP             R12, R1
BNE             loc_16DD8
LDR             R4, [R0,#0x54]
LDR             R12, [R0,#0x50]
LDM             R0, {R5,R6}
MOV             LR, R4,LSL#4
MOV             R1, R12,LSL#4
ORR             LR, LR, R12,LSR#28
ADDS            R1, R1, R5
ADC             LR, LR, R6
ADDS            R5, R12, R12
ADC             R6, R4, R4
ADDS            R1, R1, R5
ADC             LR, LR, R6
ADDS            R2, R1, R12
ADC             R3, LR, R4
MOV             R1, #0
MOV             LR, R3,ASR#31
LDR             R12, [R0,#0xC]
STR             R1, [R0,#0x50]
MOV             LR, LR,LSR#6
STR             R1, [R0,#0x54]
ADDS            R4, R2, LR
AND             LR, R4, #0xFC000000
ADC             R5, R3, #0
SUBS            LR, R2, LR
LDR             R2, [R0,#8]
SBC             R6, R3, R5
MOV             R3, R4,LSR#26
MOV             R1, R5,ASR#26
STR             LR, [R0]
ORR             R3, R3, R5,LSL#6
STR             R6, [R0,#4]
ADDS            R3, R2, R3
ADC             R1, R12, R1
STR             R3, [R0,#8]
STR             R1, [R0,#0xC]
POP             {R4-R10,PC}
; End of function sub_16DC0




; int __fastcall sub_16F00(int, int)
sub_16F00
EOR             R0, R0, R1
MVN             R0, R0
AND             R0, R0, R0,LSL#16
AND             R0, R0, R0,LSL#8
AND             R0, R0, R0,LSL#4
AND             R0, R0, R0,LSL#2
AND             R0, R0, R0,LSL#1
MOV             R0, R0,ASR#31
BX              LR
; End of function sub_16F00




; int __fastcall sub_16F24(int, int, int)
sub_16F24
SUB             R3, R0, #8
RSB             R2, R2, #0
SUB             R1, R1, #8
ADD             R0, R0, #0x48 ; 'H'
PUSH            {R4-R7,LR}

loc_16F38
LDR             R6, [R3,#8]!
LDR             R4, [R1,#8]!
CMP             R0, R3
EOR             R4, R4, R6
AND             R4, R4, R2
EOR             R6, R6, R4
MOV             R7, R6,ASR#31
STRD            R6, R7, [R3]
LDR             R12, [R1]
EOR             R4, R4, R12
MOV             R5, R4,ASR#31
STRD            R4, R5, [R1]
BNE             loc_16F38
POP             {R4-R7,PC}
; End of function sub_16F24




; void *__fastcall sub_16F70(void *, int *)
sub_16F70

var_CC= -0xCC
var_C8= -0xC8
var_C4= -0xC4
var_BC= -0xBC
var_B4= -0xB4
var_AC= -0xAC
dest= -0xA0
src= -0x9C
var_94= -0x94
var_8C= -0x8C
var_84= -0x84
var_7C= -0x7C
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_68= -0x68
var_64= -0x64
var_5C= -0x5C
var_54= -0x54
var_4C= -0x4C
var_44= -0x44
var_3C= -0x3C
var_34= -0x34
var_2C= -0x2C
var_24= -0x24
var_1C= -0x1C
var_14= -0x14
var_10= -0x10
var_C= -0xC

PUSH            {R4-R11,LR}
MOV             R12, R1
LDR             R10, [R1]
SUB             SP, SP, #0xCC
LDR             LR, [R12,#8]
ADDS            R1, R10, R10
STR             R0, [SP,#0xCC+dest]
SMULL           R2, R3, R10, R10
LDR             R11, [R12,#0x10]
LDR             R7, [R12,#0x18]
MOV             R9, LR,ASR#31
LDR             R6, [R12,#0x20]
MOV             R5, R9,LSL#2
STRD            R2, R3, [SP,#0xCC+src]
MOV             R3, R10,ASR#31
MOV             R2, R1
ORR             R5, R5, LR,LSR#30
ADC             R3, R3, R3
MUL             R4, LR, R3
MUL             R3, R6, R3
MLA             R4, R1, R9, R4
UMULL           R0, R1, LR, R1
ADD             R1, R4, R1
MOV             R4, LR,LSL#2
STRD            R0, R1, [SP,#0xCC+var_94]
SMULL           R0, R1, R10, R11
SMLAL           R0, R1, LR, LR
ADDS            R0, R0, R0
ADC             R1, R1, R1
STRD            R0, R1, [SP,#0xCC+var_8C]
SMULL           R0, R1, R10, R7
SMLAL           R0, R1, R11, LR
ADDS            R0, R0, R0
ADC             R1, R1, R1
STRD            R0, R1, [SP,#0xCC+var_84]
MOV             R1, R7,ASR#31
MUL             R1, R4, R1
MLA             R1, R7, R5, R1
UMULL           R4, R5, R4, R7
ADD             R5, R1, R5
MOV             R1, R6,ASR#31
SMLAL           R4, R5, R11, R11
MLA             R1, R2, R1, R3
UMULL           R2, R3, R6, R2
STRD            R2, R3, [SP,#0xCC+var_CC]
LDR             R3, [SP,#0xCC+var_C8]
ADD             R3, R1, R3
SMULL           R0, R1, LR, R6
STR             R3, [SP,#0xCC+var_C8]
LDR             R3, [SP,#0xCC+var_CC]
ADDS            R2, R4, R3
LDR             R3, [SP,#0xCC+var_C8]
SMLAL           R0, R1, R7, R11
ADC             R3, R5, R3
STRD            R2, R3, [SP,#0xCC+var_7C]
SMULL           R4, R5, R11, R6
LDR             R3, [R12,#0x28]
MOV             R8, R3
SMLAL           R0, R1, R3, R10
SMLAL           R4, R5, R7, R7
ADDS            R2, R0, R0
ADC             R1, R1, R1
STR             R2, [SP,#0xCC+var_74]
STR             R1, [SP,#0xCC+var_70]
LDR             R1, [R12,#0x30]
SMLAL           R4, R5, R1, R10
STRD            R4, R5, [SP,#0xCC+var_C4]
ADDS            R4, LR, LR
ADC             R0, R9, R9
MOV             R9, R3,ASR#31
STRD            R8, R9, [SP,#0xCC+var_CC]
LDR             R2, [SP,#0xCC+var_C8]
MUL             R2, R4, R2
UMULL           R4, R5, R4, R3
MLA             R2, R3, R0, R2
LDR             R0, [SP,#0xCC+var_C4+4]
ADD             R5, R2, R5
LDR             R2, [SP,#0xCC+var_C4]
ADDS            R2, R2, R4
ADC             R0, R0, R5
SMULL           R4, R5, R11, R3
ADDS            R2, R2, R2
STR             R2, [SP,#0xCC+var_6C]
ADC             R0, R0, R0
LDR             R2, [R12,#0x38]
STR             R0, [SP,#0xCC+var_68]
SMLAL           R4, R5, R6, R7
SMLAL           R4, R5, R1, LR
SMLAL           R4, R5, R2, R10
ADDS            R0, R4, R4
ADC             R4, R5, R5
STR             R0, [SP,#0xCC+var_64]
STR             R4, [SP,#0xCC+var_64+4]
SMULL           R4, R5, R7, R3
LDR             R0, [R12,#0x40]
SMLAL           R4, R5, R2, LR
ADDS            R8, R4, R4
ADC             R9, R5, R5
SMULL           R4, R5, R10, R0
SMLAL           R4, R5, R1, R11
ADDS            R8, R8, R4
ADC             R9, R9, R5
ADDS            R4, R8, R8
STR             R4, [SP,#0xCC+var_BC]
ADC             R4, R9, R9
STR             R4, [SP,#0xCC+var_BC+4]
LDRD            R4, R5, [SP,#0xCC+var_BC]
LDR             R12, [R12,#0x48]
SMLAL           R4, R5, R6, R6
MOV             R9, R12,ASR#31
STRD            R4, R5, [SP,#0xCC+var_5C]
SMULL           R4, R5, R7, R1
SMLAL           R4, R5, R3, R6
SMLAL           R4, R5, R2, R11
SMLAL           R4, R5, R0, LR
SMLAL           R4, R5, R12, R10
STRD            R4, R5, [SP,#0xCC+var_C4]
LDR             R4, [SP,#0xCC+var_C4]
LDR             R5, [SP,#0xCC+var_C4+4]
ADDS            R4, R4, R4
ADC             R5, R5, R5
STRD            R4, R5, [SP,#0xCC+var_54]
SMULL           R4, R5, R6, R1
SMLAL           R4, R5, R3, R3
SMLAL           R4, R5, R0, R11
STRD            R4, R5, [SP,#0xCC+var_C4]
SMULL           R4, R5, LR, R12
SMLAL           R4, R5, R2, R7
ADDS            LR, R4, R4
ADC             R4, R5, R5
LDR             R5, [SP,#0xCC+var_C4]
ADDS            LR, R5, LR
LDR             R5, [SP,#0xCC+var_C4+4]
ADC             R4, R5, R4
ADDS            LR, LR, LR
ADC             R4, R4, R4
STR             LR, [SP,#0xCC+var_4C]
STR             R4, [SP,#0xCC+var_4C+4]
SMULL           R4, R5, R6, R2
SMLAL           R4, R5, R1, R3
SMLAL           R4, R5, R0, R7
SMLAL           R4, R5, R12, R11
ADDS            LR, R4, R4
ADC             R4, R5, R5
STR             LR, [SP,#0xCC+var_44]
STR             R4, [SP,#0xCC+var_44+4]
SMULL           R4, R5, R7, R12
SMLAL           R4, R5, R2, R3
ADDS            LR, R4, R4
STR             LR, [SP,#0xCC+var_B4]
ADC             LR, R5, R5
STR             LR, [SP,#0xCC+var_B4+4]
LDRD            R4, R5, [SP,#0xCC+var_B4]
SMLAL           R4, R5, R0, R6
ADDS            LR, R4, R4
STR             LR, [SP,#0xCC+var_AC]
ADC             LR, R5, R5
STR             LR, [SP,#0xCC+var_AC+4]
LDRD            R4, R5, [SP,#0xCC+var_AC]
SMLAL           R4, R5, R1, R1
STRD            R4, R5, [SP,#0xCC+var_3C]
SMULL           R4, R5, R3, R0
SMLAL           R4, R5, R2, R1
SMLAL           R4, R5, R12, R6
SMULL           R6, R7, R1, R0
ADDS            LR, R4, R4
ADC             R3, R5, R5
STR             LR, [SP,#0xCC+var_34]
STR             R3, [SP,#0xCC+var_34+4]
LDR             R3, [SP,#0xCC+var_CC]
SMLAL           R6, R7, R2, R2
ADDS            R4, R3, R3
LDR             R3, [SP,#0xCC+var_C8]
MUL             LR, R4, R9
ADC             R3, R3, R3
UMULL           R4, R5, R4, R12
MLA             R3, R12, R3, LR
ADD             R5, R3, R5
ADDS            R3, R6, R4
ADC             LR, R7, R5
SMULL           R4, R5, R1, R12
ADDS            R3, R3, R3
ADC             LR, LR, LR
STR             R3, [SP,#0xCC+var_2C]
STR             LR, [SP,#0xCC+var_2C+4]
SMLAL           R4, R5, R0, R2
ADDS            R1, R4, R4
ADC             R3, R5, R5
MOV             R5, R2,ASR#31
STR             R3, [SP,#0xCC+var_24+4]
MOV             R3, R5,LSL#2
STR             R1, [SP,#0xCC+var_24]
ORR             R3, R3, R2,LSR#30
MOV             R2, R2,LSL#2
MUL             R1, R2, R9
MLA             R1, R12, R3, R1
UMULL           R2, R3, R2, R12
ADD             R3, R1, R3
MOV             R1, R0,ASR#31
SMLAL           R2, R3, R0, R0
STRD            R2, R3, [SP,#0xCC+var_1C]
ADDS            R2, R0, R0
MUL             R3, R2, R9
ADC             R1, R1, R1
ADD             R0, SP, #0xCC+src
MLA             R1, R12, R1, R3
UMULL           R2, R3, R2, R12
ADD             R3, R1, R3
STRD            R2, R3, [SP,#0xCC+var_14]
ADDS            R2, R12, R12
MUL             R3, R2, R9
ADC             R1, R9, R9
MLA             R1, R12, R1, R3
UMULL           R2, R3, R2, R12
ADD             R3, R1, R3
STRD            R2, R3, [SP,#0xCC+var_C]
BL              sub_16B54
ADD             R0, SP, #0xCC+src
BL              sub_16DC0
MOV             R2, #0x50 ; 'P' ; n
ADD             R1, SP, #0xCC+src ; src
LDR             R0, [SP,#0xCC+dest] ; dest
BL              memcpy
ADD             SP, SP, #0xCC
POP             {R4-R11,PC}
; End of function sub_16F70




; void *__fastcall sub_172F4(void *, int *, int *)
sub_172F4
PUSH            {R4,LR}
SUB             SP, SP, #0x98
MOV             R4, R0
MOV             R0, SP
BL              sub_1659C
MOV             R0, SP
BL              sub_16B54
MOV             R0, SP
BL              sub_16DC0
MOV             R2, #0x50 ; 'P' ; n
MOV             R1, SP  ; src
MOV             R0, R4  ; dest
BL              memcpy
ADD             SP, SP, #0x98
POP             {R4,PC}
; End of function sub_172F4




; int __fastcall sub_17330(int, int, int *)
sub_17330

var_A28= -0xA28
var_A24= -0xA24
var_A20= -0xA20
var_A1C= -0xA1C
var_A18= -0xA18
var_A14= -0xA14
var_A0C= -0xA0C
var_A08= -0xA08
var_A04= -0xA04
var_A00= -0xA00
var_9FC= -0x9FC
var_9DD= -0x9DD
src= -0x9DC
var_9D8= -0x9D8
var_9D4= -0x9D4
var_9D0= -0x9D0
var_9CC= -0x9CC
var_9C8= -0x9C8
var_9C4= -0x9C4
var_9C0= -0x9C0
var_9BC= -0x9BC
var_9B8= -0x9B8
var_9B4= -0x9B4
var_9B0= -0x9B0
var_9AC= -0x9AC
var_9A8= -0x9A8
var_9A4= -0x9A4
var_9A0= -0x9A0
var_99C= -0x99C
var_998= -0x998
var_994= -0x994
var_990= -0x990
var_98C= -0x98C
var_93C= -0x93C
dest= -0x8EC
s= -0x89C
var_854= -0x854
var_84C= -0x84C
var_7B4= -0x7B4
var_724= -0x724
var_68C= -0x68C
var_5FC= -0x5FC
var_5EC= -0x5EC
var_55C= -0x55C
var_4CC= -0x4CC
var_4BC= -0x4BC
var_42C= -0x42C
var_3DC= -0x3DC
var_39C= -0x39C
var_2FC= -0x2FC
var_26C= -0x26C
var_1CC= -0x1CC
var_13C= -0x13C
var_134= -0x134
var_130= -0x130
var_12C= -0x12C
var_128= -0x128
var_124= -0x124
var_120= -0x120
var_11C= -0x11C
var_118= -0x118
var_114= -0x114
var_110= -0x110
var_9C= -0x9C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0xA20
SUB             SP, SP, #0xC
MOV             R6, R0
MOV             R12, R2
MOV             R3, #0

loc_17348
LDRB            R2, [R1,R3]
ADD             R0, SP, #0xA2C+var_9FC
STRB            R2, [R0,R3]
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BNE             loc_17348
LDRB            R0, [R12,#5]
MOV             LR, #0
LDRB            R10, [R12,#4]
MOV             R1, LR
LDRB            R8, [R12,#3]
MOV             R5, #0
LDRB            R2, [R12,#7]
ADD             R7, SP, #0xA2C+var_7B4
MOV             R0, R0,LSL#16
LDRB            R4, [R12,#6]
LDRB            R3, [SP,#0xA2C+var_9FC]
ADD             R9, SP, #0xA2C+var_4CC
ORR             R10, R0, R10,LSL#8
LDRB            R0, [R12,#8]
STR             LR, [SP,#0xA2C+var_9D8]
ADD             R9, R9, #8
ORR             R8, R10, R8
LDRB            R10, [R12,#9]
ORR             R8, R8, R4,LSL#24
BIC             R3, R3, #7
MOV             R0, R0,LSL#16
STRB            R3, [SP,#0xA2C+var_9FC]
LDRB            R3, [SP,#0xA2C+var_9DD]
UBFX            R8, R8, #2, #0x19
ORR             R2, R0, R2,LSL#8
LDRB            R0, [R12,#0xB]
STR             LR, [SP,#0xA2C+var_9D0]
ORR             R4, R2, R4
LDRB            R2, [R12,#0xA]
ORR             R4, R4, R10,LSL#24
AND             R3, R3, #0x7F
MOV             R0, R0,LSL#16
ORR             R3, R3, #0x40 ; '@'
UBFX            R4, R4, #3, #0x1A
STRB            R3, [SP,#0xA2C+var_9DD]
STR             R4, [SP,#0xA2C+var_9CC]
ORR             R2, R0, R2,LSL#8
LDRB            R4, [R12,#0xC]
ORR             R10, R2, R10
LDRB            R0, [R12,#0xE]
LDR             R3, [R12]
STR             LR, [SP,#0xA2C+var_9C8]
ORR             R10, R10, R4,LSL#24
STR             LR, [SP,#0xA2C+var_9C0]
MOV             R0, R0,LSL#16
BIC             R3, R3, #0xFC000000
UBFX            R10, R10, #5, #0x19
STR             R3, [SP,#0xA2C+src]
STR             R10, [SP,#0xA2C+var_9C4]
LDRB            R10, [R12,#0xD]
LDR             R3, [R12,#0x10]
STR             LR, [SP,#0xA2C+var_9B8]
STR             LR, [SP,#0xA2C+var_9B0]
ORR             R10, R0, R10,LSL#8
BIC             R3, R3, #0xFE000000
STR             R3, [SP,#0xA2C+var_9B4]
ORR             R4, R10, R4
LDRB            R10, [R12,#0xF]
STR             R8, [SP,#0xA2C+var_9D4]
ADD             R8, SP, #0xA2C+var_5FC
ADD             R8, R8, #8
ORR             R4, R4, R10,LSL#24
LDRB            R10, [R12,#0x13]
MOV             R4, R4,LSR#6
STR             R4, [SP,#0xA2C+var_9BC]
LDRB            R4, [R12,#0x16]
LDRB            R0, [R12,#0x15]
LDRB            R2, [R12,#0x14]
STR             LR, [SP,#0xA2C+var_9A8]
STR             LR, [SP,#0xA2C+var_9A0]
MOV             R0, R0,LSL#16
STR             LR, [SP,#0xA2C+var_998]
STR             LR, [SP,#0xA2C+var_990]
ORR             R2, R0, R2,LSL#8
ORR             R10, R2, R10
LDRB            R2, [R12,#0x17]
ORR             R0, R10, R4,LSL#24
LDRB            R10, [R12,#0x19]
MOVS            R1, R1,ASR#1
MOV             R0, R0,RRX
MOV             R1, LR  ; c
BIC             R0, R0, #0xFC000000
STR             R0, [SP,#0xA2C+var_9AC]
LDRB            R0, [R12,#0x18]
MOV             R0, R0,LSL#16
ORR             R2, R0, R2,LSL#8
LDRB            R0, [R12,#0x1B]
ORR             R4, R2, R4
LDRB            R2, [R12,#0x1A]
ORR             R4, R4, R10,LSL#24
MOV             R0, R0,LSL#16
UBFX            R4, R4, #3, #0x19
STR             R4, [SP,#0xA2C+var_9A4]
ORR             R2, R0, R2,LSL#8
LDRB            R4, [R12,#0x1C]
ORR             R10, R2, R10
LDRB            R0, [R12,#0x1E]
MOV             R2, #0x48 ; 'H' ; n
ORR             R10, R10, R4,LSL#24
MOV             R0, R0,LSL#16
UBFX            R10, R10, #4, #0x1A
STR             R10, [SP,#0xA2C+var_99C]
LDRB            R10, [R12,#0x1D]
ORR             R10, R0, R10,LSL#8
ADD             R0, SP, #0xA2C+s ; s
ORR             R4, R10, R4
LDRB            R10, [R12,#0x1F]
ORR             R4, R4, R10,LSL#24
ADD             R10, SP, #0xA2C+var_854
UBFX            R4, R4, #6, #0x19
STR             R4, [SP,#0xA2C+var_994]
MOV             R4, #1
BL              memset
MOV             R2, #0x90 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xA2C+var_84C ; s
BL              memset
MOV             R2, #0x90 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xA2C+var_7B4 ; s
STRD            R4, R5, [R10]
BL              memset
MOV             R2, #0x98 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xA2C+var_724 ; s
STRD            R4, R5, [R7,#-8]!
BL              memset
MOV             R2, #0x98 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xA2C+var_68C ; s
BL              memset
MOV             R2, #0x90 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xA2C+var_5EC ; s
BL              memset
MOV             R2, #0x98 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xA2C+var_55C ; s
STRD            R4, R5, [R8]
BL              memset
MOV             R2, #0x90 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xA2C+var_4BC ; s
BL              memset
ADD             R3, SP, #0xA2C+src
MOV             R2, #0x50 ; 'P' ; n
MOV             R1, R3  ; src
ADD             R0, SP, #0xA2C+dest ; dest
STR             R3, [SP,#0xA2C+var_A00]
STRD            R4, R5, [R9]
BL              memcpy
ADD             R3, SP, #0xA2C+src
STR             R10, [SP,#0xA2C+var_A18]
STR             R3, [SP,#0xA2C+var_A08]
ADD             R3, SP, #0xA2C+var_55C
STMFA           SP, {R3,R8}
ADD             R3, SP, #0xA2C+var_68C
ADD             R8, SP, #0xA2C+var_724
STR             R3, [SP,#0xA2C+var_A20]
ADD             R3, SP, #0xA2C+dest
STR             R3, [SP,#0xA2C+var_A1C]

loc_175E4
LDR             R3, [SP,#0xA2C+var_A08]
LDRB            R2, [R3,#-1]!
STRD            R2, R3, [SP,#0xA2C+var_A0C]
LDR             R3, [SP,#0xA2C+var_A24]
LDR             R2, [SP,#0xA2C+var_A18]
STR             R3, [SP,#0xA2C+var_A18]
MOV             R3, R9
STR             R2, [SP,#0xA2C+var_A24]
MOV             R9, R8
LDR             R2, [SP,#0xA2C+var_A1C]
MOV             R8, R3
LDR             R3, [SP,#0xA2C+var_A20]
STRD            R2, R3, [SP,#0xA2C+var_A20]
LDR             R3, [SP,#0xA2C+var_A28]
STR             R7, [SP,#0xA2C+var_A28]
MOV             R7, R3
MOV             R3, #8
STR             R3, [SP,#0xA2C+var_A04]

loc_1762C
LDR             R3, [SP,#0xA2C+var_A0C]
MOV             R1, #0
ADD             R4, SP, #0xA2C+var_1CC
ADD             R5, SP, #0xA2C+var_13C
ADD             R5, R5, #8
ADD             R10, SP, #0xA2C+var_2FC
MOV             R11, #0
MOV             R3, R3,LSR#7
UXTB            R0, R3
MOV             R3, R1
STRD            R0, R1, [SP,#0xA2C+var_A14]
MOV             R2, R0
LDR             R1, [SP,#0xA2C+var_A20]
LDR             R0, [SP,#0xA2C+var_A28]
BL              sub_16F24
LDRD            R2, R3, [SP,#0xA2C+var_A14]
MOV             R0, R9
LDR             R1, [SP,#0xA2C+var_A24]
BL              sub_16F24
MOV             R2, #0x50 ; 'P' ; n
LDR             R1, [SP,#0xA2C+var_A28] ; src
ADD             R0, SP, #0xA2C+var_98C ; dest
BL              memcpy
MOV             R1, R9
LDR             R0, [SP,#0xA2C+var_A28]
BL              sub_16500
ADD             R1, SP, #0xA2C+var_98C
MOV             R0, R9
BL              sub_16568
MOV             R2, #0x50 ; 'P' ; n
LDR             R1, [SP,#0xA2C+var_A20] ; src
ADD             R0, SP, #0xA2C+var_93C ; dest
BL              memcpy
LDR             R1, [SP,#0xA2C+var_A24]
LDR             R0, [SP,#0xA2C+var_A20]
BL              sub_16500
ADD             R1, SP, #0xA2C+var_93C
LDR             R0, [SP,#0xA2C+var_A24]
BL              sub_16568
ADD             R0, SP, #0xA2C+var_26C
MOV             R2, R9
LDR             R1, [SP,#0xA2C+var_A20]
ADD             R0, R0, #8
BL              sub_1659C
LDMED           SP, {R1,R2}
MOV             R0, R4
BL              sub_1659C
ADD             R0, SP, #0xA2C+var_26C
ADD             R0, R0, #8
BL              sub_16B54
ADD             R0, SP, #0xA2C+var_26C
ADD             R0, R0, #8
BL              sub_16DC0
MOV             R0, R4
BL              sub_16B54
BL              sub_16DC0
ADD             R1, SP, #0xA2C+var_26C
MOV             R2, #0x50 ; 'P' ; n
ADD             R1, R1, #8 ; src
ADD             R0, SP, #0xA2C+var_93C ; dest
BL              memcpy
ADD             R0, SP, #0xA2C+var_26C
MOV             R1, R4
ADD             R0, R0, #8
BL              sub_16500
ADD             R1, SP, #0xA2C+var_93C
MOV             R0, R4
BL              sub_16568
ADD             R1, SP, #0xA2C+var_26C
ADD             R0, SP, #0xA2C+var_9C
ADD             R1, R1, #8
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
LDR             R2, [SP,#0xA2C+var_A00]
MOV             R1, R5
MOV             R0, R4
BL              sub_1659C
BL              sub_16B54
BL              sub_16DC0
MOV             R2, #0x50 ; 'P' ; n
ADD             R1, SP, #0xA2C+var_9C ; src
LDR             R0, [SP,#0xA2C+var_A1C] ; dest
BL              memcpy
MOV             R2, #0x50 ; 'P' ; n
MOV             R1, R4  ; src
LDR             R0, [SP,#0xA2C+var_A18] ; dest
BL              memcpy
ADD             R0, SP, #0xA2C+var_39C
LDR             R1, [SP,#0xA2C+var_A28]
ADD             R0, R0, #8
BL              sub_16F70
MOV             R1, R9
MOV             R0, R10
BL              sub_16F70
ADD             R1, SP, #0xA2C+var_39C
MOV             R2, R10
ADD             R1, R1, #8
MOV             R0, R7
BL              sub_1659C
BL              sub_16B54
BL              sub_16DC0
ADD             R1, SP, #0xA2C+var_39C
MOV             R0, R10
ADD             R1, R1, #8
BL              sub_16568
MOV             R1, #0  ; c
MOV             R2, #0x48 ; 'H' ; n
ADD             R0, SP, #0xA2C+var_3DC ; s
BL              memset
LDR             R1, =0x1DB41

loc_177EC
LDR             R2, [R11,R10]
ADD             R3, R11, R10
LDR             R0, [R3,#4]
UMULL           R2, R3, R2, R1
MLA             R3, R1, R0, R3
ADD             R0, SP, #0xA2C+var_42C
STRD            R2, R3, [R0,R11]
ADD             R11, R11, #8
CMP             R11, #0x50 ; 'P'
BNE             loc_177EC
BL              sub_16DC0
ADD             R1, SP, #0xA2C+var_39C
ADD             R0, SP, #0xA2C+var_42C
ADD             R1, R1, #8
BL              sub_16500
ADD             R2, SP, #0xA2C+var_42C
MOV             R1, R10
MOV             R0, R8
BL              sub_1659C
BL              sub_16B54
BL              sub_16DC0
LDRD            R2, R3, [SP,#0xA2C+var_A14]
MOV             R0, R7
LDR             R1, [SP,#0xA2C+var_A1C]
BL              sub_16F24
LDRD            R2, R3, [SP,#0xA2C+var_A14]
MOV             R0, R8
LDR             R1, [SP,#0xA2C+var_A18]
BL              sub_16F24
LDR             R3, [SP,#0xA2C+var_A0C]
MOV             R3, R3,LSL#1
UXTB            R3, R3
STR             R3, [SP,#0xA2C+var_A0C]
LDR             R3, [SP,#0xA2C+var_A04]
SUBS            R3, R3, #1
STR             R3, [SP,#0xA2C+var_A04]
BNE             loc_17C48

loc_17880
LDR             R2, [SP,#0xA2C+var_A08]
ADD             R3, SP, #0xA2C+var_9FC
CMP             R3, R2
BNE             loc_175E4
MOV             R1, R7  ; src
MOV             R2, R11 ; n
ADD             R0, SP, #0xA2C+var_93C ; dest
MOV             R7, #4
BL              memcpy
MOV             R2, R11 ; n
MOV             R1, R8  ; src
ADD             R0, SP, #0xA2C+var_9C ; dest
BL              memcpy
ADD             R1, SP, #0xA2C+var_9C
ADD             R0, SP, #0xA2C+var_68C
BL              sub_16F70
ADD             R1, SP, #0xA2C+var_68C
MOV             R0, R5
BL              sub_16F70
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
ADD             R0, SP, #0xA2C+var_5FC
ADD             R2, SP, #0xA2C+var_9C
MOV             R1, R4
ADD             R0, R0, #8
BL              sub_172F4
ADD             R1, SP, #0xA2C+var_5FC
ADD             R2, SP, #0xA2C+var_68C
ADD             R1, R1, #8
ADD             R0, SP, #0xA2C+var_55C
BL              sub_172F4
ADD             R1, SP, #0xA2C+var_55C
MOV             R0, R4
BL              sub_16F70
ADD             R2, SP, #0xA2C+var_5FC
ADD             R0, SP, #0xA2C+var_4CC
ADD             R2, R2, #8
MOV             R1, R4
ADD             R0, R0, #8
BL              sub_172F4
ADD             R1, SP, #0xA2C+var_4CC
MOV             R0, R4
ADD             R1, R1, #8
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
ADD             R2, SP, #0xA2C+var_4CC
MOV             R1, R4
ADD             R2, R2, #8
ADD             R0, SP, #0xA2C+var_42C
BL              sub_172F4
ADD             R1, SP, #0xA2C+var_42C
MOV             R0, R4
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70

loc_17990
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
SUBS            R7, R7, #1
BNE             loc_17990
ADD             R0, SP, #0xA2C+var_39C
ADD             R2, SP, #0xA2C+var_42C
MOV             R1, R5
ADD             R0, R0, #8
BL              sub_172F4
ADD             R1, SP, #0xA2C+var_39C
MOV             R0, R4
ADD             R1, R1, #8
MOV             R7, #9
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70

loc_179E4
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
SUBS            R7, R7, #1
BNE             loc_179E4
ADD             R2, SP, #0xA2C+var_39C
MOV             R1, R5
ADD             R2, R2, #8
MOV             R0, R4
BL              sub_172F4
MOV             R7, #4
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70

loc_17A34
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
SUBS            R7, R7, #1
BNE             loc_17A34
ADD             R2, SP, #0xA2C+var_42C
MOV             R1, R4
ADD             R0, SP, #0xA2C+var_2FC
MOV             R7, #0x18
BL              sub_172F4
ADD             R1, SP, #0xA2C+var_2FC
MOV             R0, R4
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70

loc_17A80
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
SUBS            R7, R7, #1
BNE             loc_17A80
ADD             R0, SP, #0xA2C+var_26C
ADD             R2, SP, #0xA2C+var_2FC
MOV             R1, R5
ADD             R0, R0, #8
BL              sub_172F4
ADD             R1, SP, #0xA2C+var_26C
MOV             R0, R5
ADD             R1, R1, #8
MOV             R7, #0x31 ; '1'
BL              sub_16F70
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70

loc_17AD4
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
SUBS            R7, R7, #1
BNE             loc_17AD4
ADD             R2, SP, #0xA2C+var_26C
MOV             R1, R4
ADD             R2, R2, #8
MOV             R0, R5
BL              sub_172F4
MOV             R7, #0x18
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70

loc_17B24
MOV             R1, R5
MOV             R0, R4
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
SUBS            R7, R7, #1
BNE             loc_17B24
MOV             R2, R10
MOV             R0, R4
MOV             R1, R5
BL              sub_172F4
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
MOV             R0, R4
MOV             R1, R5
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
MOV             R0, R4
MOV             R1, R5
BL              sub_16F70
MOV             R1, R4
MOV             R0, R5
BL              sub_16F70
ADD             R4, SP, #0xA2C+var_9C
ADD             R2, SP, #0xA2C+var_55C
MOV             R1, R5
ADD             R0, SP, #0xA2C+var_724
BL              sub_172F4
ADD             R2, SP, #0xA2C+var_724
ADD             R1, SP, #0xA2C+var_93C
MOV             R0, R4
BL              sub_172F4
MOV             R3, R7

loc_17BB8
LDR             R2, [R4,R3,LSL#3]
STR             R2, [R5,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0xA
BNE             loc_17BB8
MOV             R1, #2
MOV             R0, #0x13

loc_17BD4
MOV             R12, R5
MOV             LR, #0

loc_17BDC
LDR             R2, [R12],#4
AND             R4, LR, #1
CMP             R4, #0
ADD             LR, LR, #1
AND             R3, R2, R2,ASR#31
MOVNE           R3, R3,ASR#25
MOVEQ           R3, R3,ASR#26
SUBNE           R2, R2, R3,LSL#25
SUBEQ           R2, R2, R3,LSL#26
STR             R2, [R12,#-4]
CMP             LR, #9
LDR             R2, [R12]
ADD             R3, R2, R3
STR             R3, [R12]
BNE             loc_17BDC
LDR             R2, [SP,#0xA2C+var_110]
CMP             R1, #1
AND             R3, R2, R2,ASR#31
MOV             R3, R3,ASR#25
SUB             R2, R2, R3,LSL#25
STR             R2, [SP,#0xA2C+var_110]
LDR             R2, [SP,#0xA2C+var_134]
MLA             R3, R0, R3, R2
STR             R3, [SP,#0xA2C+var_134]
BEQ             loc_17C80
MOV             R1, #1
B               loc_17BD4

loc_17C48
LDR             R3, [SP,#0xA2C+var_A24]
LDR             R2, [SP,#0xA2C+var_A18]
STR             R3, [SP,#0xA2C+var_A18]
MOV             R3, R9
STR             R2, [SP,#0xA2C+var_A24]
MOV             R9, R8
LDR             R2, [SP,#0xA2C+var_A1C]
MOV             R8, R3
LDR             R3, [SP,#0xA2C+var_A20]
STRD            R2, R3, [SP,#0xA2C+var_A20]
LDR             R3, [SP,#0xA2C+var_A28]
STR             R7, [SP,#0xA2C+var_A28]
MOV             R7, R3
B               loc_1762C

loc_17C80
AND             R2, R3, R3,ASR#31
MOV             LR, #0x13
MOV             R2, R2,ASR#26
SUB             R3, R3, R2,LSL#26
STR             R3, [SP,#0xA2C+var_134]
LDR             R3, [SP,#0xA2C+var_130]
ADD             R2, R3, R2
STR             R2, [SP,#0xA2C+var_130]
MOV             R2, #2

loc_17CA4
MOV             R3, R5
MOV             R1, #0

loc_17CAC
LDR             R0, [R3],#4
AND             R12, R1, #1
CMP             R12, #0
ADD             R1, R1, #1
BICNE           R12, R0, #0xFE000000
BICEQ           R12, R0, #0xFC000000
STRNE           R12, [R3,#-4]
STREQ           R12, [R3,#-4]
LDRNE           R12, [R3]
LDREQ           R12, [R3]
ADDNE           R0, R12, R0,ASR#25
ADDEQ           R0, R12, R0,ASR#26
CMP             R1, #9
STR             R0, [R3]
BNE             loc_17CAC
LDR             R4, [SP,#0xA2C+var_110]
CMP             R2, #1
BIC             R3, R4, #0xFE000000
STR             R3, [SP,#0xA2C+var_110]
MOV             R4, R4,ASR#25
LDR             R3, [SP,#0xA2C+var_134]
MLA             R4, LR, R4, R3
STR             R4, [SP,#0xA2C+var_134]
MOVNE           R2, #1
BNE             loc_17CA4
ADD             R3, R4, #0xFC000000
ADD             R3, R3, #0x13
MOV             R3, R3,ASR#31
MVN             R3, R3

loc_17D20
TST             R2, #1
LDR             R0, [R5,R2,LSL#2]
MOVNE           R1, #0x1FFFFFF
MOVEQ           R1, #0x3FFFFFF
BL              sub_16F00
ADD             R2, R2, #1
AND             R3, R3, R0
CMP             R2, #0xA
BNE             loc_17D20
BIC             R2, R3, #0xFC000000
BIC             R0, R3, #0xFC000000
BIC             R2, R2, #0x12
BIC             R3, R3, #0xFE000000
SUB             R2, R4, R2
STR             R2, [SP,#0xA2C+var_134]
MOV             R2, #1

loc_17D60
LDR             R1, [R5,R2,LSL#2]
TST             R2, #1
SUBNE           R1, R1, R3
SUBEQ           R1, R1, R0
STR             R1, [R5,R2,LSL#2]
ADD             R2, R2, #1
CMP             R2, #0xA
BNE             loc_17D60
LDR             R7, [SP,#0xA2C+var_134]
LDR             R5, [SP,#0xA2C+var_130]
LDR             R4, [SP,#0xA2C+var_12C]
STRB            R7, [R6]
MOV             R8, R7,ASR#8
LDR             LR, [SP,#0xA2C+var_128]
MOV             R5, R5,LSL#2
LDR             R12, [SP,#0xA2C+var_124]
STRB            R8, [R6,#1]
MOV             R8, R7,ASR#16
ORR             R7, R5, R7,LSR#24
MOV             R4, R4,LSL#3
MOV             LR, LR,LSL#5
LDR             R0, [SP,#0xA2C+var_11C]
STRB            R7, [R6,#3]
MOV             R7, R5,ASR#8
MOV             R12, R12,LSL#6
LDR             R1, [SP,#0xA2C+var_118]
STRB            R7, [R6,#4]
MOV             R7, R5,ASR#16
ORR             R5, R4, R5,LSR#24
MOV             R0, R0,LSL#1
LDR             R2, [SP,#0xA2C+var_114]
STRB            R5, [R6,#6]
MOV             R5, R4,ASR#8
MOV             R1, R1,LSL#3
LDR             R3, [SP,#0xA2C+var_110]
STRB            R5, [R6,#7]
MOV             R5, R4,ASR#16
ORR             R4, LR, R4,LSR#24
MOV             R2, R2,LSL#4
STRB            R8, [R6,#2]
STRB            R4, [R6,#9]
MOV             R4, LR,ASR#8
STRB            R7, [R6,#5]
MOV             R3, R3,LSL#6
STRB            R4, [R6,#0xA]
MOV             R4, LR,ASR#16
ORR             LR, R12, LR,LSR#24
STRB            R5, [R6,#8]
STRB            R4, [R6,#0xB]
STRB            LR, [R6,#0xC]
MOV             LR, R12,ASR#8
STRB            LR, [R6,#0xD]
MOV             LR, R12,ASR#16
MOV             R12, R12,LSR#24
STRB            LR, [R6,#0xE]
STRB            R12, [R6,#0xF]
LDR             R12, [SP,#0xA2C+var_120]
STRB            R12, [R6,#0x10]
MOV             LR, R12,ASR#8
STRB            LR, [R6,#0x11]
MOV             LR, R12,ASR#16
ORR             R12, R0, R12,LSR#24
STRB            LR, [R6,#0x12]
STRB            R12, [R6,#0x13]
MOV             R12, R0,ASR#8
STRB            R12, [R6,#0x14]
MOV             R12, R0,ASR#16
ORR             R0, R1, R0,LSR#24
STRB            R12, [R6,#0x15]
STRB            R0, [R6,#0x16]
MOV             R0, R1,ASR#8
STRB            R0, [R6,#0x17]
MOV             R0, R1,ASR#16
ORR             R1, R2, R1,LSR#24
STRB            R0, [R6,#0x18]
MOV             R0, #0
STRB            R1, [R6,#0x19]
MOV             R1, R2,ASR#8
STRB            R1, [R6,#0x1A]
MOV             R1, R2,ASR#16
ORR             R2, R3, R2,LSR#24
STRB            R1, [R6,#0x1B]
STRB            R2, [R6,#0x1C]
MOV             R2, R3,ASR#8
STRB            R2, [R6,#0x1D]
MOV             R2, R3,ASR#16
MOV             R3, R3,LSR#24
STRB            R2, [R6,#0x1E]
STRB            R3, [R6,#0x1F]
ADD             SP, SP, #0xA20
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_17330

dword_17ED0 DCD 0x1DB41
; [00000004 BYTES: COLLAPSED FUNCTION j_explicit_bzero]



; int __fastcall sub_17ED8(unsigned int *, const char *, unsigned int)
sub_17ED8

timeout= -0x101C
var_1014= -0x1014
var_1010= -0x1010
var_100C= -0x100C
readfds= -0x1004

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1000
SUB             SP, SP, #0x1C
MOV             R9, R1
MOV             R1, #0
MOV             R5, R2
STR             R0, [SP,#0x101C+var_1010]
MOV             R0, R9
BL              open64
SUBS            R6, R0, #0
MOVLT           R5, #0xFFFFFFFF
BLT             loc_18004
LDR             R10, =dword_4C45C
AND             R3, R6, #0x1F
MOV             R2, #1
MOV             R8, R6,ASR#5
MOV             R3, R2,LSL R3
MOV             R7, #0
STR             R3, [SP,#0x101C+var_1014]

loc_17F24
CMP             R5, R7
MOVLS           R3, #0
MOVHI           R3, #1
CMP             R5, #0
MOVEQ           R3, #1
CMP             R3, #0
MOVEQ           R5, R3
BEQ             loc_18004
LDR             R3, [R10]
ADD             R4, SP, #0x101C+readfds
CMP             R3, #0
BNE             loc_17FBC
MOV             R2, #2
STRD            R2, R3, [R4,#-8]
MOV             R2, R3

loc_17F60
STR             R2, [R4,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BNE             loc_17F60
LDR             R3, [R4,R8,LSL#2]
MOV             R1, R4  ; readfds
LDR             R2, [SP,#0x101C+var_1014]
ADD             R0, R6, #1 ; nfds
ORR             R3, R3, R2
STR             R3, [R4,R8,LSL#2]
SUB             R3, R4, #8
STR             R3, [SP,#0x101C+timeout] ; timeout
MOV             R3, #0  ; exceptfds
MOV             R2, R3  ; writefds
BL              select
CMP             R0, #0
BNE             loc_17FBC
MOV             R2, R9
LDR             R1, =aWarningReading ; "Warning: Reading the randomness source "...
MOV             R0, #4
BL              sub_184E8
MOV             R3, #1
STR             R3, [R10]

loc_17FBC
CMP             R5, #0
MOVEQ           R2, #0x1000
BEQ             loc_17FD4
SUB             R2, R5, R7
CMP             R2, #0x1000
MOVCS           R2, #0x1000 ; nbytes

loc_17FD4               ; buf
MOV             R1, R4
MOV             R0, R6  ; fd
BL              read
SUBS            R11, R0, #0
BGT             loc_1801C
BEQ             loc_17FFC
BL              __errno_location
LDR             R2, [R0]
CMP             R2, #4
BEQ             loc_17F24

loc_17FFC
ORRS            R5, R5, R11
MOVNE           R5, #0xFFFFFFFF

loc_18004               ; fd
MOV             R0, R6
BL              close
MOV             R0, R5
ADD             SP, SP, #0x1000
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_1801C
MOV             R2, R11
MOV             R1, R4  ; src
LDR             R0, [SP,#0x101C+var_1010] ; int
ADD             R7, R7, R11
BL              sub_24A78
B               loc_17F24
; End of function sub_17ED8

off_18034 DCD dword_4C45C
off_18038 DCD aWarningReading ; "Warning: Reading the randomness source "...



; int __fastcall sub_1803C(char *, unsigned int)
sub_1803C
PUSH            {R4-R6,LR}
SUB             SP, SP, #0xD0
LDR             R4, =byte_4C460
MOV             R5, R0
MOV             R0, SP
MOV             R6, R1
BL              sub_24A08
MOV             R1, R4  ; src
MOV             R2, #0x14
MOV             R0, SP  ; int
BL              sub_24A78
MOV             R2, R6
MOV             R1, R5  ; src
MOV             R0, SP  ; int
BL              sub_24A78
MOV             R1, R4
MOV             R0, SP
BL              sub_248D4
ADD             SP, SP, #0xD0
POP             {R4-R6,PC}
; End of function sub_1803C

off_1808C DCD byte_4C460



; int __fastcall sub_18090(char *, unsigned int)
sub_18090

src= -0xE8
var_D4= -0xD4

PUSH            {R4-R9,LR}
SUB             SP, SP, #0xEC
LDR             R4, =dword_4C45C
LDR             R3, [R4,#(dword_4C474 - 0x4C45C)]
CMP             R3, #0
BEQ             loc_180D4
MOV             R6, R0
MOV             R5, R1
ADD             R8, R4, #4
ADD             R9, R4, #0x1C

loc_180B8
CMP             R5, #0
BNE             loc_180DC
MOV             R1, #0x14
ADD             R0, SP, #0xEC+src
BL              j_explicit_bzero
ADD             SP, SP, #0xEC
POP             {R4-R9,PC}

loc_180D4
LDR             R0, =aSeedrandomNotD ; "seedrandom not done"
BL              sub_184AC

loc_180DC
ADD             R0, SP, #0xEC+var_D4
BL              sub_24A08
MOV             R2, #0x14
MOV             R1, R8  ; src
ADD             R0, SP, #0xEC+var_D4 ; int
BL              sub_24A78
MOV             R2, #4
MOV             R1, R9  ; src
ADD             R0, SP, #0xEC+var_D4 ; int
BL              sub_24A78
ADD             R1, SP, #0xEC+src
ADD             R0, SP, #0xEC+var_D4
BL              sub_248D4
LDR             R3, [R4,#(dword_4C478 - 0x4C45C)]
ADD             R3, R3, #1
CMP             R3, #0x40000000
STR             R3, [R4,#(dword_4C478 - 0x4C45C)]
BLS             loc_18128
BL              sub_18158

loc_18128
CMP             R5, #0x14
MOV             R0, R6  ; dest
MOVCC           R7, R5
MOVCS           R7, #0x14
MOV             R2, R7  ; n
ADD             R1, SP, #0xEC+src ; src
BL              memcpy
SUB             R5, R5, R7
ADD             R6, R6, R7
B               loc_180B8
; End of function sub_18090

off_18150 DCD dword_4C45C
off_18154 DCD aSeedrandomNotD ; "seedrandom not done"



; int sub_18158()
sub_18158

var_100= -0x100
var_FC= -0xFC
tv= -0xF8
ptr= -0xF0
var_D0= -0xD0
var_s0=  0

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x100
LDR             R5, =dword_4C45C
ADD             R0, SP, #0x100+var_D0
BL              sub_24A08
MOV             R2, #0x14
ADD             R1, R5, #4 ; src
ADD             R0, SP, #0x100+var_D0 ; int
BL              sub_24A78
MOV             R2, #0x20 ; ' '
LDR             R1, =aDevUrandom ; "/dev/urandom"
ADD             R0, SP, #0x100+var_D0
BL              sub_17ED8
SUBS            R4, R0, #0
BEQ             loc_181A0
LDR             R1, =aDevUrandom ; "/dev/urandom"
LDR             R0, =aFailureReading ; "Failure reading random device %s"
BL              sub_184AC

loc_181A0
MOV             R2, R4
LDR             R1, =aProcTimerList ; "/proc/timer_list"
ADD             R0, SP, #0x100+var_D0
MOV             R6, #1
BL              sub_17ED8
MOV             R2, R4
LDR             R1, =aProcInterrupts ; "/proc/interrupts"
ADD             R0, SP, #0x100+var_D0
BL              sub_17ED8
MOV             R2, R4
LDR             R1, =aProcLoadavg ; "/proc/loadavg"
ADD             R0, SP, #0x100+var_D0
BL              sub_17ED8
MOV             R2, R4
LDR             R1, =aProcSysKernelR ; "/proc/sys/kernel/random/entropy_avail"
ADD             R0, SP, #0x100+var_D0
BL              sub_17ED8
MOV             R2, #0x1000
LDR             R1, =aProcNetNetstat ; "/proc/net/netstat"
ADD             R0, SP, #0x100+var_D0
BL              sub_17ED8
MOV             R2, #0x1000
LDR             R1, =aProcNetDev ; "/proc/net/dev"
ADD             R0, SP, #0x100+var_D0
BL              sub_17ED8
MOV             R2, #0x1000
LDR             R1, =aProcNetTcp ; "/proc/net/tcp"
ADD             R0, SP, #0x100+var_D0
BL              sub_17ED8
MOV             R2, #0x1000
LDR             R1, =aProcNetRtCache ; "/proc/net/rt_cache"
ADD             R0, SP, #0x100+var_D0
BL              sub_17ED8
MOV             R2, R4
LDR             R1, =aProcVmstat ; "/proc/vmstat"
ADD             R0, SP, #0x100+var_D0
BL              sub_17ED8
BL              getpid
ADD             R1, SP, #0x100+var_s0
MOV             R2, #4
STR             R0, [R1,#-0x100]! ; src
ADD             R0, SP, #0x100+var_D0 ; int
BL              sub_24A78
MOV             R1, R4  ; tz
ADD             R0, SP, #0x100+tv ; tv
STR             R4, [SP,#0x100+tv]
STR             R4, [SP,#0x100+tv.tv_usec]
BL              gettimeofday
MOV             R2, #8
ADD             R0, SP, #0x100+var_D0 ; int
ADD             R1, SP, R2 ; src
BL              sub_24A78
BL              clock
ADD             R1, SP, #0x100+var_s0
MOV             R2, #4
STR             R0, [R1,#-0xFC]! ; src
ADD             R0, SP, #0x100+var_D0 ; int
BL              sub_24A78
ADD             R1, R5, #4
ADD             R0, SP, #0x100+var_D0
BL              sub_248D4
LDR             R1, =(aChannelRecvwin+0x26) ; "w"
LDR             R0, =aDevUrandom ; "/dev/urandom"
STR             R4, [R5,#(dword_4C478 - 0x4C45C)]
STR             R6, [R5,#(dword_4C474 - 0x4C45C)]
BL              fopen64
SUBS            R4, R0, #0
BEQ             loc_182D8
MOV             R1, #0x20 ; ' '
ADD             R0, SP, #0x100+ptr
BL              sub_18090
MOV             R3, R4  ; s
MOV             R2, R6  ; n
MOV             R1, #0x20 ; ' ' ; size
ADD             R0, SP, #0x100+ptr ; ptr
BL              fwrite
MOV             R0, R4  ; stream
BL              fclose

loc_182D8
ADD             SP, SP, #0x100
POP             {R4-R6,PC}
; End of function sub_18158

off_182E0 DCD dword_4C45C
off_182E4 DCD aDevUrandom ; "/dev/urandom"
off_182E8 DCD aFailureReading ; "Failure reading random device %s"
off_182EC DCD aProcTimerList ; "/proc/timer_list"
off_182F0 DCD aProcInterrupts ; "/proc/interrupts"
off_182F4 DCD aProcLoadavg ; "/proc/loadavg"
off_182F8 DCD aProcSysKernelR ; "/proc/sys/kernel/random/entropy_avail"
off_182FC DCD aProcNetNetstat ; "/proc/net/netstat"
off_18300 DCD aProcNetDev ; "/proc/net/dev"
off_18304 DCD aProcNetTcp ; "/proc/net/tcp"
off_18308 DCD aProcNetRtCache ; "/proc/net/rt_cache"
off_1830C DCD aProcVmstat ; "/proc/vmstat"
off_18310 DCD aChannelRecvwin+0x26 ; "w"



; void __fastcall sub_18314(int *, int *, int)
sub_18314

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R0-R2,R4-R9,LR}
MOV             R7, R1
LDR             R4, =0x70301FF
MOV             R8, R0
LDR             R5, =0x7F3F1F0F
STRD            R4, R5, [SP,#0xC+var_C]
BL              sub_2A310
CMP             R0, #0
ADD             R5, R0, #7
MOVGE           R5, R0
ANDS            R9, R0, #7
MOV             R5, R5,ASR#3
MOV             R4, R0
ADDNE           R5, R5, #1
MOV             R0, R5
BL              sub_18718
RSBS            R4, R4, #0
ADD             R3, SP, #0xC+var_4
AND             R4, R4, #7
MOV             R6, R0
RSBPL           R9, R4, #0
ADD             R9, R3, R9

loc_1836C
MOV             R1, R5
MOV             R0, R6
BL              sub_18090
LDRB            R3, [R6]
MOV             R1, R6
LDRB            R2, [R9,#-8]
MOV             R0, R7
AND             R3, R3, R2
MOV             R2, R5
STRB            R3, [R6]
BL              sub_122E8
MOV             R1, R8
MOV             R0, R7
BL              sub_29E00
CMN             R0, #1
BNE             loc_1836C
MOV             R1, #0
MOV             R0, R7
BL              sub_29E48
CMP             R0, #1
BNE             loc_1836C
MOV             R0, R6
MOV             R1, R5
BL              j_explicit_bzero
MOV             R0, R6  ; ptr
ADD             SP, SP, #0xC
POP             {R4-R9,LR}
B               free
; End of function sub_18314

dword_183DC DCD 0x70301FF
dword_183E0 DCD 0x7F3F1F0F


; Attributes: noreturn

; void __fastcall __noreturn sub_183E4(int, const char *, void *)
sub_183E4

s= -0x130

PUSH            {LR}
SUB             SP, SP, #0x134
MOV             R3, R1
MOV             R4, R0
MOV             R5, R2
MOV             R1, #0x12C ; maxlen
LDR             R2, =aExitedS ; "Exited: %s"
ADD             R0, SP, #0x134+s ; s
BL              snprintf
LDR             R3, =off_4C3E8
MOV             R0, #6  ; int
MOV             R2, R5  ; arg
ADD             R1, SP, #0x134+s ; format
LDR             R3, [R3] ; sub_18430
BLX             R3
MOV             R0, R4  ; status
BL              exit
; End of function sub_183E4

off_18428 DCD aExitedS  ; "Exited: %s"
off_1842C DCD off_4C3E8



; int __fastcall sub_18430(int, char *format, __gnuc_va_list arg)
sub_18430
PUSH            {LR}
SUB             SP, SP, #0x400
SUB             SP, SP, #4
MOV             R3, R2  ; arg
MOV             R0, SP  ; s
MOV             R2, R1  ; format
MOV             R1, #0x400 ; maxlen
BL              vsnprintf
LDR             R3, =stderr
MOV             R2, SP
LDR             R1, =(aAvailableMacsS+0x10) ; "%s\n"
LDR             R0, [R3] ; stream
BL              fprintf
ADD             SP, SP, #0x400
ADD             SP, SP, #4
POP             {PC}
; End of function sub_18430

off_18470 DCD stderr
off_18474 DCD aAvailableMacsS+0x10 ; "%s\n"



; void __fastcall sub_18478(const char *)
sub_18478
MOV             R2, #0x50 ; 'P' ; facility
MOV             R1, #1  ; option
B               openlog
; End of function sub_18478



; Attributes: noreturn

; void __noreturn sub_18484(const char *, ...)
sub_18484

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
LDR             R3, =off_4C3E8
PUSH            {R0-R2,LR}
MOV             R0, #0
ADD             R2, SP, #0xC+varg_r1
LDR             R3, [R3,#(off_4C3EC - 0x4C3E8)] ; sub_183E4
LDR             R1, [SP,#0xC+varg_r0]
STR             R2, [SP,#0xC+var_8]
BLX             R3      ; sub_183E4
; End of function sub_18484

off_184A8 DCD off_4C3E8


; Attributes: noreturn

; void __noreturn sub_184AC(const char *, ...)
sub_184AC

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
LDR             R3, =off_4C3E8
PUSH            {R0-R2,LR}
MOV             R0, #1
ADD             R2, SP, #0xC+varg_r1
LDR             R3, [R3,#(off_4C3EC - 0x4C3E8)] ; sub_183E4
LDR             R1, [SP,#0xC+varg_r0]
STR             R2, [SP,#0xC+var_8]
BLX             R3      ; sub_183E4
; End of function sub_184AC

off_184D0 DCD off_4C3E8


; Attributes: noreturn

; void __fastcall __noreturn sub_184D4(const char *, const char *, int)
sub_184D4
MOV             R3, R0
PUSH            {R4,LR}
LDR             R0, =aFailedAssertio ; "Failed assertion (%s:%d): `%s'"
BL              sub_184AC
; End of function sub_184D4

off_184E4 DCD aFailedAssertio ; "Failed assertion (%s:%d): `%s'"



; int sub_184E8(int, char *, ...)
sub_184E8

var_4= -4
varg_r1=  4
varg_r2=  8
varg_r3=  0xC

PUSH            {R1-R3}
LDR             R3, =off_4C3E8
PUSH            {R0,R1,LR}
ADD             R2, SP, #8+varg_r2 ; arg
LDR             R3, [R3] ; sub_18430
LDR             R1, [SP,#8+varg_r1] ; format
STR             R2, [SP,#8+var_4]
BLX             R3
ADD             SP, SP, #8
POP             {LR}
ADD             SP, SP, #0xC
BX              LR
; End of function sub_184E8

off_18518 DCD off_4C3E8



; int __fastcall sub_1851C(_DWORD *, FILE *)
sub_1851C
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R6, R1
MOV             R4, #0xFFFFFFFF
MOV             R1, #0
BL              sub_124A0
MOV             R1, #0
MOV             R0, R5
BL              sub_12430

loc_18540
LDRD            R2, R3, [R5,#8]
CMP             R2, R3
BCC             loc_18570
MOV             R1, #0
MOV             R0, R5
BL              sub_12430

loc_18558
CMN             R4, #1
BNE             loc_18590
LDR             R3, [R5,#8]
CMP             R3, #0
BNE             loc_18590
B               loc_185A0

loc_18570               ; stream
MOV             R0, R6
BL              fgetc
CMN             R0, #1
CMPNE           R0, #0xA
MOV             R4, R0
BEQ             loc_18558
CMP             R0, #0xD
BNE             loc_185A8

loc_18590
MOV             R4, #0
MOV             R1, #0
MOV             R0, R5
BL              sub_124A0

loc_185A0
MOV             R0, R4
POP             {R4-R6,PC}

loc_185A8
UXTB            R1, R0
MOV             R0, R5
BL              sub_125A4
B               loc_18540
; End of function sub_1851C




; int __fastcall sub_185B8(int result)
sub_185B8
PUSH            {R4,LR}
SUBS            R4, R0, #0
POPLT           {R4,PC}

loc_185C4               ; fd
MOV             R0, R4
BL              close
CMP             R0, #0
POPGE           {R4,PC}
BL              __errno_location
LDR             R0, [R0] ; errnum
CMP             R0, #4
BEQ             loc_185C4
CMP             R0, #9
POPEQ           {R4,PC}
BL              strerror
MOV             R1, R4
MOV             R2, R0
LDR             R0, =aErrorClosingFd ; "Error closing fd %d, %s"
BL              sub_184AC
; End of function sub_185B8

off_18600 DCD aErrorClosingFd ; "Error closing fd %d, %s"
PUSH            {R4,R5,LR}
SUB             SP, SP, #0x74 ; 't'
MOV             R5, R0
MOV             R2, #0x6C ; 'l'
MOV             R1, #0
ADD             R0, SP, #2
BL              memset
MOV             R4, #1
MOV             R2, #0x6C ; 'l'
MOV             R1, R5
ADD             R0, SP, #2
STRH            R4, [SP]
BL              sub_16388
MOV             R1, R4
MOV             R0, R4
MOV             R2, #0
BL              socket
SUBS            R4, R0, #0
BLT             loc_1866C
MOV             R2, #0x6E ; 'n'
MOV             R1, SP
BL              connect
CMP             R0, #0
BGE             loc_18670
MOV             R0, R4
BL              sub_185B8

loc_1866C
MOV             R4, #0xFFFFFFFF

loc_18670
MOV             R0, R4
ADD             SP, SP, #0x74 ; 't'
POP             {R4,R5,PC}



; int __fastcall sub_1867C(_DWORD *, int)
sub_1867C
PUSH            {R4-R8,LR}
MOV             R6, R0
MOV             R0, R1
MOV             R1, #0
BL              open64
SUBS            R7, R0, #0
MOVLT           R4, #0xFFFFFFFF
BLT             loc_186EC

loc_1869C
LDR             R4, [R6,#0xC]
MOV             R0, R6
LDR             R5, [R6,#8]
SUB             R5, R4, R5
MOV             R1, R5
BL              sub_12624
MOV             R2, R5  ; nbytes
MOV             R1, R0  ; buf
MOV             R0, R7  ; fd
BL              read
SUBS            R4, R0, #0
BGE             loc_186F4
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #0xB
CMPNE           R3, #4
BEQ             loc_18700
MOV             R4, #0xFFFFFFFF

loc_186E4
MOV             R0, R7
BL              sub_185B8

loc_186EC
MOV             R0, R4
POP             {R4-R8,PC}

loc_186F4
MOV             R1, R4
MOV             R0, R6
BL              sub_124C4

loc_18700
CMP             R5, R4
CMPGT           R4, #0
MOVGT           R4, #1
MOVLE           R4, #0
BGT             loc_1869C
B               loc_186E4
; End of function sub_1867C




; void *__fastcall sub_18718(size_t)
sub_18718
SUBS            R1, R0, #0 ; size
PUSH            {R4,LR}
BNE             loc_1872C

loc_18724
LDR             R0, =aMMallocFailed ; "m_malloc failed"
BL              sub_184AC

loc_1872C               ; nmemb
MOV             R0, #1
BL              calloc
CMP             R0, #0
POPNE           {R4,PC}
B               loc_18724
; End of function sub_18718

off_18740 DCD aMMallocFailed ; "m_malloc failed"



; int __fastcall sub_18744(char *, unsigned int, char *path, int)
sub_18744

var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R0-R8,LR}
MOV             R4, R0
MOV             R0, R2  ; path
MOV             R8, R1
MOV             R5, R2
BL              __xpg_basename
CMP             R4, #0
MOV             R7, R0
BEQ             loc_1879C
LDR             R3, =aC ; "-c"
STR             R0, [SP,#0x10+var_10]
STMFA           SP, {R3,R4}
MOV             R3, #0
STR             R3, [SP,#0x10+var_4]

loc_1877C               ; handler
MOV             R1, #0
MOV             R0, #0xD ; sig
BL              signal
CMN             R0, #1
MOVNE           R4, #3
BNE             loc_187D4
LDR             R0, =aSignalError ; "signal() error"
BL              sub_184AC

loc_1879C
BL              strlen
ADD             R6, R0, #2
MOV             R0, R6
BL              sub_18718
MOV             R3, R7
LDR             R2, =(aEcdsaSha2S+0xA) ; format
MOV             R1, R6  ; maxlen
STR             R0, [SP,#0x10+var_10]
BL              snprintf
STR             R4, [SP,#0x10+var_C]
B               loc_1877C

loc_187C8
MOV             R0, R4
ADD             R4, R4, #1
BL              sub_185B8

loc_187D4
CMP             R4, R8
BLS             loc_187C8
MOV             R1, SP  ; argv
MOV             R0, R5  ; path
BL              execv
ADD             SP, SP, #0x10
POP             {R4-R8,PC}
; End of function sub_18744

off_187F0 DCD aC        ; "-c"
off_187F4 DCD aSignalError ; "signal() error"
off_187F8 DCD aEcdsaSha2S+0xA ; "-%s"



; char *__fastcall sub_187FC(const char *)
sub_187FC
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              strlen
MOV             R4, R0
ADD             R0, R0, #1
BL              sub_18718
MOV             R1, R5
MOV             R12, #0

loc_1881C
SUB             R3, R1, R5
ADD             LR, R0, R12
CMP             R3, R4
BLT             loc_18838
MOV             R3, #0
STRB            R3, [LR]
POP             {R4-R6,PC}

loc_18838
LDRB            R2, [R1],#1
SUB             R3, R2, #0x20 ; ' '
SUB             R6, R2, #9
CMP             R6, #1
CMPHI           R3, #0x5E ; '^'
MOVLS           R3, #1
MOVHI           R3, #0
CMP             R2, #0xD
ORREQ           R3, R3, #1
CMP             R3, #0
STRBNE          R2, [LR]
ADDNE           R12, R12, #1
B               loc_1881C
; End of function sub_187FC




; char *__fastcall sub_1886C(const char *)
sub_1886C
PUSH            {R4,LR}
BL              strdup
CMP             R0, #0
POPNE           {R4,PC}
LDR             R0, =aMStrdupFailed ; "m_strdup failed"
BL              sub_184AC
; End of function sub_1886C

off_18884 DCD aMStrdupFailed ; "m_strdup failed"



; void *__fastcall sub_18888(void *, size_t)
sub_18888
CMP             R1, #0
PUSH            {R4,LR}
BNE             loc_1889C

loc_18894
LDR             R0, =aMReallocFailed ; "m_realloc failed"
BL              sub_184AC

loc_1889C
BL              realloc
CMP             R0, #0
POPNE           {R4,PC}
B               loc_18894
; End of function sub_18888

off_188AC DCD aMReallocFailed ; "m_realloc failed"



; int *__fastcall sub_188B0(int)
sub_188B0
PUSH            {R4,LR}
MOV             R2, #0x800
MOV             R1, #4  ; cmd
BL              fcntl
CMP             R0, #0
POPGE           {R4,PC}
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #0x13
POPEQ           {R4,PC}
LDR             R0, =aCouldnTSetNonb ; "Couldn't set nonblocking"
BL              sub_184AC
; End of function sub_188B0

off_188E0 DCD aCouldnTSetNonb ; "Couldn't set nonblocking"



; int __fastcall sub_188E4(void (__fastcall *)(int), int, int *, _DWORD *, _DWORD *, int *)
sub_188E4

fd= -0x1C
var_18= -0x18
pipedes= -0x14
var_C= -0xC
arg_0=  0x24
arg_4=  0x28

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1C
MOV             R10, R0
MOV             R0, SP  ; pipedes
MOV             R11, R1
MOV             R6, R2
MOV             R7, R3
LDR             R4, [SP,#0x1C+arg_0]
LDR             R8, [SP,#0x1C+arg_4]
BL              pipe
CMP             R0, #0
BEQ             loc_18924

loc_18914
MOV             R5, #0xFFFFFFFF

loc_18918
MOV             R0, R5
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_18924               ; pipedes
ADD             R0, SP, #0x1C+pipedes
BL              pipe
SUBS            R5, R0, #0
BNE             loc_18914
CMP             R4, #0
BNE             loc_18980

loc_1893C
BL              fork
SUBS            R9, R0, #0
BLT             loc_18914
BNE             loc_18A08
MOV             R1, R9  ; handler
MOV             R0, #0x11 ; sig
BL              signal
CMN             R0, #1
LDREQ           R0, =aSignalError ; "signal() error"
BEQ             loc_1897C
MOV             R1, R9  ; fd2
LDR             R0, [SP,#0x1C+fd] ; fd
BL              dup2
CMP             R0, #0
BGE             loc_18994

loc_18978
LDR             R0, =aChildDup2Failu ; "Child dup2() failure"

loc_1897C
BL              sub_184AC

loc_18980               ; pipedes
ADD             R0, SP, #0x1C+var_C
BL              pipe
CMP             R0, #0
BEQ             loc_1893C
B               loc_18914

loc_18994               ; fd2
MOV             R1, #1
LDR             R0, [SP,#0x1C+pipedes+4] ; fd
BL              dup2
CMP             R0, #0
BLT             loc_18978
CMP             R4, #0
BEQ             loc_189C4
MOV             R1, #2  ; fd2
LDR             R0, [SP,#0x1C+var_C+4] ; fd
BL              dup2
CMP             R0, #0
BLT             loc_18978

loc_189C4               ; fd
LDR             R0, [SP,#0x1C+var_18]
BL              close
LDR             R0, [SP,#0x1C+fd] ; fd
BL              close
LDR             R0, [SP,#0x1C+pipedes] ; fd
BL              close
LDR             R0, [SP,#0x1C+pipedes+4] ; fd
BL              close
CMP             R4, #0
BEQ             loc_189FC
LDR             R0, [SP,#0x1C+var_C] ; fd
BL              close
LDR             R0, [SP,#0x1C+var_C+4] ; fd
BL              close

loc_189FC
MOV             R0, R11
BLX             R10
B               loc_18914

loc_18A08               ; fd
LDR             R0, [SP,#0x1C+fd]
BL              close
LDR             R0, [SP,#0x1C+pipedes+4] ; fd
BL              close
LDR             R0, [SP,#0x1C+pipedes]
BL              sub_188B0
LDR             R0, [SP,#0x1C+var_18]
BL              sub_188B0
CMP             R4, #0
BEQ             loc_18A84
LDR             R0, [SP,#0x1C+var_C+4] ; fd
BL              close
LDR             R0, [SP,#0x1C+var_C]
BL              sub_188B0
CMP             R8, #0
BEQ             loc_18A70

loc_18A48
LDR             R3, [SP,#0x1C+var_18]
CMP             R4, #0
STR             R9, [R8]
STR             R3, [R6]
LDR             R3, [SP,#0x1C+pipedes]
STR             R3, [R7]
BEQ             loc_18918

loc_18A64
LDR             R3, [SP,#0x1C+var_C]
STR             R3, [R4]
B               loc_18918

loc_18A70
LDR             R3, [SP,#0x1C+var_18]
STR             R3, [R6]
LDR             R3, [SP,#0x1C+pipedes]
STR             R3, [R7]
B               loc_18A64

loc_18A84
CMP             R8, #0
BNE             loc_18A48
LDR             R3, [SP,#0x1C+var_18]
STR             R3, [R6]
LDR             R3, [SP,#0x1C+pipedes]
STR             R3, [R7]
B               loc_18918
; End of function sub_188E4

off_18AA0 DCD aSignalError ; "signal() error"
off_18AA4 DCD aChildDup2Failu ; "Child dup2() failure"



; int sub_18AA8()
sub_18AA8

var_10= -0x10
var_8= -8
var_4= -4
var_s0=  0

PUSH            {R0-R4,LR}
MOV             R2, #0
MOV             R3, #0
ADD             R1, SP, #0x10+var_s0
MOV             R0, #4
STRD            R2, R3, [R1,#-0x10]!
STRD            R2, R3, [SP,#0x10+var_8]
BL              setrlimit64
ADD             SP, SP, #0x14
POP             {PC}
; End of function sub_18AA8




; unsigned int __fastcall sub_18AD0(const char *, unsigned int *)
sub_18AD0
PUSH            {R4-R6,LR}
MOV             R6, R0
MOV             R5, R1
BL              __errno_location
MOV             R1, #0  ; endptr
MOV             R4, R0
STR             R1, [R0]
MOV             R2, #0xA ; base
MOV             R0, R6  ; nptr
BL              strtoul
CMP             R0, #0
BNE             loc_18B14
LDR             R3, [R4]
CMP             R3, #0x16
BNE             loc_18B28
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_18B14
CMN             R0, #1
BNE             loc_18B28
LDR             R3, [R4]
CMP             R3, #0x22 ; '"'
POPEQ           {R4-R6,PC}

loc_18B28
STR             R0, [R5]
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_18AD0




; char *__fastcall sub_18B34(const char *)
sub_18B34

var_C= -0xC

PUSH            {R0-R2,R4-R7,LR}
MOV             R5, R0
LDRB            R3, [R0]
CMP             R3, #0x2F ; '/'
BEQ             loc_18B64
BL              getuid
BL              getpwuid
SUBS            R6, R0, #0
BEQ             loc_18B64
LDR             R7, [R6,#0x14]
CMP             R7, #0
BNE             loc_18B74

loc_18B64
MOV             R0, R5
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
B               sub_1886C

loc_18B74               ; s
MOV             R0, R5
BL              strlen
MOV             R4, R0
MOV             R0, R7  ; s
BL              strlen
ADD             R4, R4, R0
ADD             R4, R4, #2
MOV             R0, R4
BL              sub_18718
STR             R5, [SP,#0xC+var_C]
MOV             R7, R0
LDR             R3, [R6,#0x14]
MOV             R1, R4  ; maxlen
LDR             R2, =aSS ; "%s/%s"
BL              snprintf
MOV             R0, R7
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_18B34

off_18BBC DCD aSS       ; "%s/%s"



; int __fastcall sub_18BC0(int, int, int)
sub_18BC0
MOV             R3, #0
PUSH            {R4,LR}
MOV             LR, R0
MOV             R0, R3

loc_18BD0
CMP             R3, R2
POPEQ           {R4,PC}
LDRB            R12, [LR,R3]
LDRB            R4, [R1,R3]
ADD             R3, R3, #1
EOR             R12, R12, R4
ORR             R0, R0, R12
B               loc_18BD0
; End of function sub_18BC0




; time_t __fastcall sub_18BF0(int, int)
sub_18BF0

var_8= -8

PUSH            {R0,R1,R4,LR}
LDR             R4, =off_4C3E8
LDR             R3, [R4,#(dword_4C3F0 - 0x4C3E8)]
CMN             R3, #2
BNE             loc_18C40
MOV             R2, SP
MOV             R1, #6
MOVW            R0, #0x107 ; sysno
BL              syscall
CMP             R0, #0
MOVEQ           R3, #6
BEQ             loc_18C3C
MOV             R2, SP
MOV             R1, #1
MOVW            R0, #0x107 ; sysno
BL              syscall
CMP             R0, #0
MOVEQ           R3, #1
MOVNE           R3, #0xFFFFFFFF

loc_18C3C
STR             R3, [R4,#(dword_4C3F0 - 0x4C3E8)]

loc_18C40
LDR             R1, [R4,#(dword_4C3F0 - 0x4C3E8)]
CMP             R1, #0
BLT             loc_18C6C
MOV             R2, SP
MOVW            R0, #0x107 ; sysno
BL              syscall
CMP             R0, #0
LDREQ           R0, [SP,#8+var_8]
BEQ             loc_18C74
LDR             R0, =aClockBroke ; "Clock broke"
BL              sub_184AC

loc_18C6C               ; timer
MOV             R0, #0
BL              time

loc_18C74
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_18BF0

off_18C7C DCD off_4C3E8
off_18C80 DCD aClockBroke ; "Clock broke"



; void __fastcall sub_18C84(const char *)
sub_18C84
PUSH            {R4-R6,LR}
BL              sub_1886C
MOV             R5, R0
BL              dirname
MOV             R1, #0
BL              open64
CMN             R0, #1
BEQ             loc_18CB4
MOV             R4, R0
BL              fsync
MOV             R0, R4
BL              sub_185B8

loc_18CB4
MOV             R0, R5
POP             {R4-R6,LR}
B               free
; End of function sub_18C84




; int __fastcall sub_18CC0(int, int)
sub_18CC0
PUSH            {R4-R10,LR}
MOV             R4, R0
MOV             R5, R1
BL              sub_1645C
BL              sub_18158
CMP             R4, #5
LDR             R4, =stderr
LDRNE           R0, =aAllArgumentsMu ; "All arguments must be specified\n"
LDRNE           R1, [R4]
BNE             loc_18D34
LDR             R3, [R5,#4]
LDRB            R3, [R3]
CMP             R3, #0x64 ; 'd'
BEQ             loc_18D10
CMP             R3, #0x6F ; 'o'
LDRNE           R1, [R4]
LDRNE           R0, =aInvalidInputKe ; "Invalid input key type\n"
BNE             loc_18D34
MOV             R9, #1
B               loc_18D14

loc_18D10
MOV             R9, #0

loc_18D14
LDR             R3, [R5,#8]
LDRB            R3, [R3]
CMP             R3, #0x64 ; 'd'
BEQ             loc_18D54
CMP             R3, #0x6F ; 'o'
BEQ             loc_18DE0
LDR             R1, [R4] ; stream
LDR             R0, =s  ; "Invalid output key type\n"

loc_18D34
BL              fputs
LDR             R2, [R5]
LDR             R1, =aUsageSInputtyp ; "Usage: %s <inputtype> <outputtype> <inp"...

loc_18D40               ; stream
LDR             R0, [R4]
MOV             R4, #1
BL              fprintf

loc_18D4C
MOV             R0, R4
POP             {R4-R10,PC}

loc_18D54
MOV             R7, #0

loc_18D58               ; mask
MOV             R0, #0x3F ; '?'
BL              umask
LDR             R8, [R5,#0xC]
MOV             R2, R9
MOV             R1, #0
LDR             R6, [R5,#0x10]
MOV             R0, R8
BL              sub_1AD48
SUBS            R5, R0, #0
MOVEQ           R2, R8
LDREQ           R1, =aErrorReadingKe ; "Error reading key from '%s'\n"
BEQ             loc_18D40
MOV             R1, #0
LDR             R0, [R5]
BL              sub_1E660
LDR             R1, =aKeyIsASKey ; "Key is a %s key\n"
MOV             R2, R0
LDR             R0, [R4] ; stream
BL              fprintf
MOV             R2, #0
MOV             R3, R7
MOV             R1, R5
MOV             R0, R6
BL              sub_1B3B8
CMP             R0, #1
MOV             R2, R6
BEQ             loc_18DE8
LDR             R0, [R4] ; stream
MOV             R4, #1
LDR             R1, =aErrorWritingKe ; "Error writing key to '%s'\n"
BL              fprintf

loc_18DD4
MOV             R0, R5
BL              sub_1EA60
B               loc_18D4C

loc_18DE0
MOV             R7, #1
B               loc_18D58

loc_18DE8               ; stream
LDR             R0, [R4]
MOV             R4, #0
LDR             R1, =aWroteKeyToS ; "Wrote key to '%s'\n"
BL              fprintf
B               loc_18DD4
; End of function sub_18CC0

off_18DFC DCD stderr
off_18E00 DCD aAllArgumentsMu ; "All arguments must be specified\n"
off_18E04 DCD aInvalidInputKe ; "Invalid input key type\n"
off_18E08 DCD s         ; "Invalid output key type\n"
off_18E0C DCD aUsageSInputtyp ; "Usage: %s <inputtype> <outputtype> <inp"...
off_18E10 DCD aErrorReadingKe ; "Error reading key from '%s'\n"
off_18E14 DCD aKeyIsASKey ; "Key is a %s key\n"
off_18E18 DCD aErrorWritingKe ; "Error writing key to '%s'\n"
off_18E1C DCD aWroteKeyToS ; "Wrote key to '%s'\n"



; int __fastcall sub_18E20(const char *)
sub_18E20
LDR             R3, =stderr
MOV             R2, R0
LDR             R1, =aUsageSTTypeFFi ; "Usage: %s -t <type> -f <filename> [-s b"...
LDR             R0, [R3] ; stream
B               fprintf
; End of function sub_18E20

off_18E34 DCD stderr
off_18E38 DCD aUsageSTTypeFFi ; "Usage: %s -t <type> -f <filename> [-s b"...



; void __fastcall sub_18E3C(int, unsigned int)
sub_18E3C

var_DB8= -0xDB8
var_DB4= -0xDB4
var_DB0= -0xDB0
var_DAC= -0xDAC
var_D49= -0xD49
var_D48= -0xD48
var_8= -8

PUSH            {R4-R8,LR}
SUB             SP, SP, #0xDB0
SUB             SP, SP, #8
MOV             R5, R0
MOV             R7, R1
MOVW            R0, #0x6A4
BL              sub_12344
MOV             R2, R7
MOV             R4, R0
MOV             R1, R5
ADD             R6, SP, #0xDB8+var_8
BL              sub_1E964
MOV             R1, #4
MOV             R0, R4
BL              sub_124A0
LDMIB           R4, {R3,R5}
SUB             R5, R3, R5
ADD             R6, R6, #8
MOVW            R3, #0xD48
MOV             R0, R4
STR             R3, [R6,#-0xDB0]!
MOV             R1, R5
BL              sub_125E4
MOV             R3, R6
ADD             R2, SP, #0xDB8+var_D48
MOV             R1, R5
BL              sub_26D2C
CMP             R0, #0
BEQ             loc_18EC0
LDR             R3, =stderr
LDR             R0, =aBase64Failed ; "base64 failed"
LDR             R1, [R3] ; stream
BL              fputs

loc_18EC0
MOV             R1, #0
MOV             R0, R7
BL              sub_1E660
MOV             R1, R5
MOV             R8, R0
MOV             R0, R4
ADD             R7, SP, #0xDB8+var_DAC
BL              sub_125E4
MOV             R1, R5
BL              sub_1EAE0
MOV             R5, R0
BL              getuid
BL              getpwuid
CMP             R0, #0
MOV             R1, #0x64 ; 'd' ; len
LDRNE           R6, [R0]
MOV             R0, R7  ; name
LDREQ           R6, =(aSsh20Dropbear2_0+0x1A) ; ""
BL              gethostname
MOV             R3, #0
ADD             R2, SP, #0xDB8+var_D48
MOV             R1, R8
STRB            R3, [SP,#0xDB8+var_D49]
STR             R5, [SP,#0xDB8+var_DB4]
MOV             R3, R6
STR             R7, [SP,#0xDB8+var_DB8]
LDR             R0, =aPublicKeyPorti ; "Public key portion is:\n%s %s %s@%s\nFi"...
BL              printf
MOV             R0, R5  ; ptr
BL              free
MOV             R0, R4  ; ptr
BL              j_free
ADD             SP, SP, #0xDB0
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_18E3C

off_18F4C DCD stderr
off_18F50 DCD aBase64Failed ; "base64 failed"
off_18F54 DCD aSsh20Dropbear2_0+0x1A ; ""
off_18F58 DCD aPublicKeyPorti ; "Public key portion is:\n%s %s %s@%s\nFi"...



; int __fastcall sub_18F5C(const char *, unsigned int)
sub_18F5C

var_4= -4
var_s0=  0

PUSH            {R0,R1,R4-R8,LR}
MOV             R7, R0
MOVW            R0, #0x6A4
BL              sub_12344
MOV             R1, R7
MOV             R6, R0
BL              sub_1867C
SUBS            R8, R0, #0
BEQ             loc_18FC8
LDR             R3, =stderr
MOV             R5, #0xFFFFFFFF
MOV             R4, #0
MOV             R2, R7
LDR             R1, =aFailedReadingS ; "Failed reading '%s'\n"
LDR             R0, [R3] ; stream
BL              fprintf

loc_18F9C
MOV             R0, R6
BL              sub_1238C
MOV             R0, R6  ; ptr
BL              j_free
CMP             R4, #0
BEQ             loc_18FBC
MOV             R0, R4
BL              sub_1EA60

loc_18FBC
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_18FC8
BL              sub_1E644
ADD             R5, SP, #8+var_s0
MOV             R3, #0x50 ; 'P'
MOV             R4, R0
MOV             R1, R8
MOV             R0, R6
STR             R3, [R5,#-4]!
BL              sub_124A0
MOV             R2, R5
MOV             R1, R4
MOV             R0, R6
BL              sub_1E858
CMN             R0, #1
MOV             R5, R0
BNE             loc_1901C
LDR             R3, =stderr
MOV             R2, R7
LDR             R1, =aBadKeyInS ; "Bad key in '%s'\n"
LDR             R0, [R3] ; stream
BL              fprintf
B               loc_18F9C

loc_1901C
LDR             R1, [SP,#8+var_4]
MOV             R0, R4
BL              sub_18E3C
MOV             R5, R8
B               loc_18F9C
; End of function sub_18F5C

off_19030 DCD stderr
off_19034 DCD aFailedReadingS ; "Failed reading '%s'\n"
off_19038 DCD aBadKeyInS ; "Bad key in '%s'\n"



; int __fastcall sub_1903C(signed int, const char **)
sub_1903C

var_10= -0x10
s1= -0xC
var_8= -8
var_4= -4

PUSH            {R0-R8,LR}
MOV             R4, #0
MOV             R6, R1
MOV             R7, R0
MOV             R5, R4
STR             R4, [SP,#0x10+var_10]
STR             R4, [SP,#0x10+s1]
STR             R4, [SP,#0x10+var_8]
STR             R4, [SP,#0x10+var_4]
BL              sub_1645C
BL              sub_18158
MOV             R1, #1

loc_1906C
CMP             R1, R7
BLT             loc_190A0
LDR             R8, [SP,#0x10+var_10]
LDR             R5, =stderr
CMP             R8, #0
LDREQ           R1, [R5]
LDREQ           R0, =aMustSpecifyAKe ; "Must specify a key filename\n"
BEQ             loc_19160
CMP             R4, #0
BEQ             loc_1914C
MOV             R0, R8
BL              sub_18F5C
B               loc_19140

loc_190A0
LDR             R2, [R6,R1,LSL#2]
CMP             R2, #0
BEQ             loc_19124
CMP             R5, #0
STRNE           R2, [R5]
MOVNE           R5, #0
BNE             loc_19124
LDRB            R3, [R2]
CMP             R3, #0x2D ; '-'
BNE             loc_19124
LDRB            R3, [R2,#1]
CMP             R3, #0x73 ; 's'
BEQ             loc_1912C
BHI             loc_19108
CMP             R3, #0x66 ; 'f'
BEQ             loc_19144
CMP             R3, #0x68 ; 'h'
BEQ             loc_19134

loc_190E8
LDR             R3, =stderr
LDR             R1, =aUnknownArgumen ; "Unknown argument %s\n"
LDR             R0, [R3] ; stream

loc_190F4
BL              fprintf

loc_190F8
LDR             R0, [R6]
BL              sub_18E20

loc_19100
MOV             R0, #1
B               loc_19140

loc_19108
CMP             R3, #0x74 ; 't'
BEQ             loc_19120
CMP             R3, #0x79 ; 'y'
BNE             loc_190E8
MOV             R4, #1
B               loc_19124

loc_19120
ADD             R5, SP, #0x10+s1

loc_19124
ADD             R1, R1, #1
B               loc_1906C

loc_1912C
ADD             R5, SP, #0x10+var_8
B               loc_19124

loc_19134
LDR             R0, [R6]
BL              sub_18E20
MOV             R0, R5  ; status

loc_19140
BL              exit

loc_19144
MOV             R5, SP
B               loc_19124

loc_1914C
LDR             R7, [SP,#0x10+s1]
CMP             R7, #0
BNE             loc_19168
LDR             R1, [R5] ; stream
LDR             R0, =aMustSpecifyKey ; "Must specify key type\n"

loc_19160
BL              fputs
B               loc_190F8

loc_19168               ; s2
LDR             R1, =(aSshRsa+4) ; "rsa"
MOV             R0, R7  ; s1
BL              strcmp
LDR             R1, =aEcdsa ; "ecdsa"
CMP             R0, #0
MOV             R0, R7  ; s1
MOVNE           R4, #0x5A ; 'Z'
MOVEQ           R4, #0
BL              strcmp
CMP             R0, #0
BEQ             loc_191AC
CMP             R4, #0x5A ; 'Z'
BNE             loc_191B0
MOV             R2, R7
LDR             R1, =aUnknownKeyType ; "Unknown key type '%s'\n"
LDR             R0, [R5]
B               loc_190F4

loc_191AC
MOV             R4, #0x46 ; 'F'

loc_191B0
LDR             R0, [SP,#0x10+var_8]
CMP             R0, #0
BEQ             loc_19208
ADD             R2, SP, #0x10+var_4
LDR             R1, =(aBadPacketSizeU+0x10) ; "%u"
BL              __isoc99_sscanf
CMP             R0, #1
BEQ             loc_191E0
LDR             R1, [R5] ; stream
LDR             R0, =aBitsMustBeAnIn ; "Bits must be an integer\n"
BL              fputs
B               loc_19100

loc_191E0
CMP             R4, #0
BNE             loc_19208
LDR             R3, [SP,#0x10+var_4]
SUB             R2, R3, #0x200
CMP             R2, #0xE00
BHI             loc_19200
TST             R3, #7
BEQ             loc_19208

loc_19200
LDR             R0, =aBitsMustSatisf ; "Bits must satisfy 512 <= bits <= 4096, "...

loc_19204
BL              sub_184AC

loc_19208
LDR             R1, [SP,#0x10+var_4]
MOV             R0, R4
BL              sub_1A440
MOV             R3, R7
MOV             R2, R0
LDR             R1, =aGeneratingUBit ; "Generating %u bit %s key, this may take"...
LDR             R0, [R5] ; stream
BL              fprintf
MOV             R3, #0
MOV             R2, R8
LDR             R1, [SP,#0x10+var_4]
MOV             R0, R4
BL              sub_1A488
CMN             R0, #1
LDREQ           R0, =aFailedToGenera ; "Failed to generate key.\n"
BEQ             loc_19204
MOV             R0, R8
BL              sub_18F5C
MOV             R0, #0
ADD             SP, SP, #0x10
POP             {R4-R8,PC}
; End of function sub_1903C

off_1925C DCD stderr
off_19260 DCD aMustSpecifyAKe ; "Must specify a key filename\n"
off_19264 DCD aUnknownArgumen ; "Unknown argument %s\n"
off_19268 DCD aMustSpecifyKey ; "Must specify key type\n"
off_1926C DCD aSshRsa+4 ; "rsa"
off_19270 DCD aEcdsa    ; "ecdsa"
off_19274 DCD aUnknownKeyType ; "Unknown key type '%s'\n"
off_19278 DCD aBadPacketSizeU+0x10 ; "%u"
off_1927C DCD aBitsMustBeAnIn ; "Bits must be an integer\n"
off_19280 DCD aBitsMustSatisf ; "Bits must satisfy 512 <= bits <= 4096, "...
off_19284 DCD aGeneratingUBit ; "Generating %u bit %s key, this may take"...
off_19288 DCD aFailedToGenera ; "Failed to generate key.\n"



; void sub_1928C()
sub_1928C
LDR             R1, =dword_4C3F0
LDR             R2, =dword_39FBC

loc_19294
LDR             R3, [R1,#4]!
CMP             R3, #0
BNE             loc_192A8
BX              LR

loc_192A4
ADD             R2, R2, #0x1C

loc_192A8
LDR             R0, [R2]
CMP             R0, #0
BLE             loc_192C4
LDR             R12, [R3]
CMP             R12, R0
BNE             loc_192A4
STR             R2, [R3,#4]

loc_192C4
LDR             R0, [R3,#4]
CMP             R0, #0
BNE             loc_19294
PUSH            {R4,LR}
LDR             R1, [R3,#0xC]
LDR             R0, =aMissingEccPara ; "Missing ECC params %s"
BL              sub_184AC
; End of function sub_1928C

off_192E0 DCD dword_4C3F0
off_192E4 DCD dword_39FBC
off_192E8 DCD aMissingEccPara ; "Missing ECC params %s"



; int __fastcall sub_192EC(int)
sub_192EC
LDR             R2, =dword_4C3F0

loc_192F0
LDR             R3, [R2,#4]!
CMP             R3, #0
BNE             loc_19314
PUSH            {R4,LR}
MOV             R2, #0x47 ; 'G' ; line
LDR             R3, =aCurveForDp ; "curve_for_dp"
LDR             R1, =aEccC ; "ecc.c"
LDR             R0, =aCurve ; "*curve"
BL              __assert_fail

loc_19314
LDR             R1, [R3,#4]
CMP             R1, R0
BNE             loc_192F0
MOV             R0, R3
BX              LR
; End of function sub_192EC

off_19328 DCD dword_4C3F0
off_1932C DCD aCurveForDp ; "curve_for_dp"
off_19330 DCD aEccC     ; "ecc.c"
off_19334 DCD aCurve    ; "*curve"



; char *__fastcall sub_19338(int, int)
sub_19338

var_8= -8

PUSH            {R0,R1,R4,LR}
MOV             R0, #0x1C
BL              sub_18718
MOV             R3, #0
MOV             R4, R0
STR             R3, [SP,#8+var_8]
ADD             R2, R0, #0x14
ADD             R3, R0, #0x18
ADD             R1, R0, #0x10
ADD             R0, R0, #0xC
BL              sub_12224
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_19338




; _DWORD *__fastcall sub_19370(_DWORD *, int)
sub_19370

var_4= -4
var_s0=  0

LDR             R3, [R1,#8]
PUSH            {R0,R1,R4-R6,LR}
MOV             R6, R1
ADD             R4, SP, #8+var_s0
MOV             R5, R0
LDR             R1, [R3]
MOV             R1, R1,LSL#1
ADD             R1, R1, #1
STR             R1, [SP,#8+var_4]
BL              sub_1279C
LDR             R1, [R4,#-4]!
MOV             R0, R5
BL              sub_12624
MOV             R1, R0
MOV             R0, R6
MOV             R2, R4
BL              sub_27634
CMP             R0, #0
BEQ             loc_193C4
LDR             R0, =aEccError ; "ECC error"
BL              sub_184AC

loc_193C4
LDR             R1, [SP,#8+var_4]
MOV             R0, R5
BL              sub_124C4
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_19370

off_193D8 DCD aEccError ; "ECC error"



; char *__fastcall sub_193DC(_DWORD *, int)
sub_193DC

var_1C= -0x1C
ptr= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

LDR             R3, [R1,#4]
PUSH            {R4-R7,LR}
MOV             R6, R0
SUB             SP, SP, #0x1C
MOV             R7, R1
MOV             R1, #0
LDR             R5, [R3]
BL              sub_124A0
MOV             R0, R6
BL              sub_12560
SUB             R3, R0, #2
UXTB            R3, R3
CMP             R3, #1
BHI             loc_19428
LDR             R1, =aDropbearDoesnT ; "Dropbear doesn't support ECC point comp"...
MOV             R0, #4
BL              sub_184E8

loc_19420
MOV             R4, #0
B               loc_196D0

loc_19428
CMP             R0, #4
BNE             loc_19420
MOV             R3, R5,LSL#1
LDR             R2, [R6,#4]
ADD             R3, R3, #1
CMP             R2, R3
BNE             loc_19420
BL              sub_19338
LDR             R3, [R7,#4]
MOV             R1, R5
LDR             R7, [R0,#0xC]
MOV             R4, R0
STR             R3, [R0,#8]
MOV             R0, R6
BL              sub_125E4
MOV             R2, R5
MOV             R1, R0
MOV             R0, R7
BL              sub_2DE30
CMP             R0, #0
BEQ             loc_19490

loc_1947C
MOV             R0, R4
BL              sub_277B4
MOV             R0, R4  ; ptr
BL              free
B               loc_19420

loc_19490
MOV             R1, R5
MOV             R0, R6
BL              sub_1250C
LDR             R7, [R4,#0x10]
MOV             R1, R5
MOV             R0, R6
BL              sub_125E4
MOV             R2, R5
MOV             R1, R0
MOV             R0, R7
BL              sub_2DE30
SUBS            R7, R0, #0
BNE             loc_1947C
MOV             R1, R5
MOV             R0, R6
BL              sub_1250C
MOV             R1, #1
LDR             R0, [R4,#0x14]
BL              sub_2E630
ADD             R3, SP, #0x1C+var_8
ADD             R2, SP, #0x1C+var_C
ADD             R1, SP, #0x1C+var_10
ADD             R0, SP, #0x1C+ptr
STR             R7, [SP,#0x1C+var_1C]
BL              sub_12224
LDR             R3, [R4,#8]
MOV             R2, #0x10
LDR             R0, [SP,#0x1C+ptr]
LDR             R1, [R3,#8]
BL              sub_2DCD0
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R3, [R4,#8]
MOV             R2, #0x10
LDR             R0, [SP,#0x1C+var_10]
LDR             R1, [R3,#0xC]
BL              sub_2DCD0
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R1, [SP,#0x1C+var_C]
LDR             R0, [R4,#0x10]
BL              sub_2E6C0
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R1, [SP,#0x1C+var_8]
LDR             R0, [R4,#0xC]
BL              sub_2E6C0
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R2, [SP,#0x1C+var_8]
LDR             R1, [SP,#0x1C+ptr]
MOV             R0, R2
BL              sub_2C470
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R2, [SP,#0x1C+var_8]
LDR             R0, [R4,#0xC]
MOV             R1, R2
BL              sub_2CB6C
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R2, [SP,#0x1C+var_C]
LDR             R1, [SP,#0x1C+var_8]
MOV             R0, R2
BL              sub_2E764
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R2, [SP,#0x1C+var_C]
LDR             R1, [R4,#0xC]
MOV             R0, R2
BL              sub_29934
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R2, [SP,#0x1C+var_C]
LDR             R1, [R4,#0xC]
MOV             R0, R2
BL              sub_29934
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R2, [SP,#0x1C+var_C]
LDR             R1, [R4,#0xC]
MOV             R0, R2
BL              sub_29934
SUBS            R5, R0, #0
BNE             loc_1966C
LDR             R2, [SP,#0x1C+var_C]
LDR             R1, [SP,#0x1C+ptr]
MOV             R0, R2
BL              sub_2C470

loc_195F4
SUBS            R5, R0, #0
BNE             loc_1966C
MOV             R1, #0
LDR             R0, [SP,#0x1C+var_C]
BL              sub_29E48
CMN             R0, #1
BEQ             loc_19640

loc_19610
LDR             R1, [SP,#0x1C+ptr]
LDR             R0, [SP,#0x1C+var_C]
BL              sub_29E00
CMN             R0, #1
BNE             loc_19654
LDR             R1, [SP,#0x1C+var_10]
LDR             R0, [SP,#0x1C+var_C]
BL              sub_29E00
CMP             R0, #0
MOVNE           R5, #7
MOVEQ           R5, #0
B               loc_1966C

loc_19640
LDR             R2, [SP,#0x1C+var_C]
LDR             R1, [SP,#0x1C+ptr]
MOV             R0, R2
BL              sub_29934
B               loc_195F4

loc_19654
LDR             R2, [SP,#0x1C+var_C]
LDR             R1, [SP,#0x1C+ptr]
MOV             R0, R2
BL              sub_2E764
SUBS            R5, R0, #0
BEQ             loc_19610

loc_1966C
MOV             R3, #0
LDRD            R0, R1, [SP,#0x1C+ptr]
STR             R3, [SP,#0x1C+var_1C]
LDRD            R2, R3, [SP,#0x1C+var_C]
BL              sub_29DB8
LDR             R0, [SP,#0x1C+ptr] ; ptr
BL              free
LDR             R0, [SP,#0x1C+var_10] ; ptr
BL              free
LDR             R0, [SP,#0x1C+var_C] ; ptr
BL              free
LDR             R0, [SP,#0x1C+var_8] ; ptr
BL              free
CMP             R5, #0
BNE             loc_1947C
MOV             R1, R5
LDR             R0, [R4,#0xC]
BL              sub_29E48
CMP             R0, #0
BEQ             loc_1947C
MOV             R1, R5
LDR             R0, [R4,#0x10]
BL              sub_29E48
CMP             R0, #0
BEQ             loc_1947C

loc_196D0
MOV             R0, R4
ADD             SP, SP, #0x1C
POP             {R4-R7,PC}
; End of function sub_193DC

off_196DC DCD aDropbearDoesnT ; "Dropbear doesn't support ECC point comp"...



; int *__fastcall sub_196E0(int, _DWORD *)
sub_196E0

var_8= -8

PUSH            {R0,R1,R4-R8,LR}
LDR             R8, [R1]
CMP             R8, #1
BNE             loc_1978C
LDR             R2, [R1,#8]
MOV             R7, R0
LDR             R3, [R0,#8]
MOV             R5, R1
CMP             R2, R3
BNE             loc_1978C
BL              sub_28738
SUBS            R6, R0, #0
BEQ             loc_1978C
MOV             R0, #0x10
BL              sub_18718
MOV             R4, R0
BL              sub_121B0
LDR             R3, [R5,#8]
MOV             R2, #0x10
MOV             R0, R4
LDR             R1, [R3,#8]
BL              sub_2DCD0
CMP             R0, #0
BNE             loc_1978C
LDR             R3, =dword_4C684
MOV             R2, R6
STR             R8, [SP,#8+var_8]
ADD             R1, R7, #0xC
LDR             R0, [R5,#0x18]
LDR             R8, [R3,#(off_4C72C - 0x4C684)]
MOV             R3, R4
BLX             R8
CMP             R0, #0
BNE             loc_1978C
MOV             R0, #0x10
BL              sub_18718
MOV             R5, R0
BL              sub_121B0
MOV             R1, R5
LDR             R0, [R6]
BL              sub_2A25C
CMP             R0, #0
BEQ             loc_19794

loc_1978C
LDR             R0, =aEccError ; "ECC error"
BL              sub_184AC

loc_19794
MOV             R0, R4
BL              sub_29D74
MOV             R0, R4  ; ptr
BL              free
MOV             R0, R6
BL              sub_2877C
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_196E0

off_197B8 DCD dword_4C684
off_197BC DCD aEccError ; "ECC error"



; bool __fastcall sub_197C0(int)
sub_197C0
SUB             R0, R0, #1
CMP             R0, #2
MOVHI           R0, #0
MOVLS           R0, #1
BX              LR
; End of function sub_197C0




; int __fastcall sub_197D4(int)
sub_197D4
LDR             R3, =unk_4C424
LDR             R0, [R0,#8]
LDR             R3, [R3,#(dword_4C428 - 0x4C424)]
CMP             R0, R3
BEQ             loc_19810
LDR             R3, =unk_4C414
LDR             R3, [R3,#(dword_4C418 - 0x4C414)]
CMP             R0, R3
BEQ             loc_19818
LDR             R3, =unk_4C404
LDR             R3, [R3,#(dword_4C408 - 0x4C404)]
CMP             R0, R3
MOVEQ           R0, #3
MOVNE           R0, #0x5A ; 'Z'
BX              LR

loc_19810
MOV             R0, #1
BX              LR

loc_19818
MOV             R0, #2
BX              LR
; End of function sub_197D4

off_19820 DCD unk_4C424
off_19824 DCD unk_4C414
off_19828 DCD unk_4C404



; _DWORD *__fastcall sub_1982C(int)
sub_1982C
CMP             R0, #0x180
PUSH            {R4-R6,LR}
MOV             R1, R0
BEQ             loc_1985C
MOVW            R3, #0x209
CMP             R0, R3
BEQ             loc_198A0
CMP             R0, #0x100
LDREQ           R3, =unk_4C424
BEQ             loc_19860

loc_19854
LDR             R0, =aKeySizeDIsnTVa ; "Key size %d isn't valid. Try 256 384 52"...
BL              sub_184AC

loc_1985C
LDR             R3, =unk_4C414

loc_19860
LDR             R4, [R3,#4]
CMP             R4, #0
BEQ             loc_19854
MOV             R0, #0x1C
BL              sub_18718
LDR             R1, =dword_4C3E4
MOV             R2, R0
MOV             R5, R0
MOV             R3, R4
MOV             R0, #0
LDR             R1, [R1]
BL              sub_277F4
CMP             R0, #0
BEQ             loc_198A8
LDR             R0, =aEccError ; "ECC error"
BL              sub_184AC

loc_198A0
LDR             R3, =unk_4C404
B               loc_19860

loc_198A8
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_1982C

off_198B0 DCD unk_4C424
off_198B4 DCD aKeySizeDIsnTVa ; "Key size %d isn't valid. Try 256 384 52"...
off_198B8 DCD unk_4C414
off_198BC DCD dword_4C3E4
off_198C0 DCD aEccError ; "ECC error"
off_198C4 DCD unk_4C404



; char *__fastcall sub_198C8(_DWORD *, size_t, size_t)
sub_198C8

var_C= -0xC
n= -8

PUSH            {R0-R2,R4-R9,LR}
MOV             R7, R0
MOV             R1, SP
BL              sub_12690
ADD             R1, SP, #0xC+n
MOV             R8, R0
MOV             R0, R7
BL              sub_12690
LDR             R2, [SP,#0xC+n] ; n
MOV             R6, R0
LDR             R3, [SP,#0xC+var_C]
ADD             R1, R2, #0xB
CMP             R1, R3
BNE             loc_19918
MOV             R1, R0  ; s2
ADD             R0, R8, #0xB ; s1
BL              memcmp
CMP             R0, #0
LDREQ           R5, =off_4C3F4
BEQ             loc_19944

loc_19918
MOV             R4, #0
B               loc_19954

loc_19920
LDR             R4, [R4,#0xC]
MOV             R0, R4  ; s
BL              strlen
MOV             R1, R4  ; s2
MOV             R2, R0  ; n
MOV             R0, R6  ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_19984

loc_19944
MOV             R9, R5
LDR             R4, [R5],#4
CMP             R4, #0
BNE             loc_19920

loc_19954
MOV             R5, R4

loc_19958               ; ptr
MOV             R0, R8
BL              free
MOV             R0, R6  ; ptr
BL              free
CMP             R5, #0
BEQ             loc_19978
MOV             R0, R5  ; ptr
BL              j_free

loc_19978
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_19984
MOV             R0, R7
BL              sub_12708
LDR             R1, [R9]
MOV             R5, R0
BL              sub_193DC
MOV             R4, R0
B               loc_19958
; End of function sub_198C8

off_199A0 DCD off_4C3F4



; int *__fastcall sub_199A4(_DWORD *, size_t, size_t)
sub_199A4
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_198C8
SUBS            R4, R0, #0
BEQ             loc_199E0
LDR             R1, [R4,#0x18]
MOV             R0, R5
BL              sub_12910
CMP             R0, #0
BEQ             loc_199E0
MOV             R0, R4
BL              sub_277B4
MOV             R0, R4  ; ptr
MOV             R4, #0
BL              free

loc_199E0
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_199A4




; _DWORD *__fastcall sub_199E8(_DWORD *, int)
sub_199E8
PUSH            {R4-R6,LR}
MOV             R4, R0
SUB             SP, SP, #0x20
LDR             R0, [R1,#8]
MOV             R5, R1
BL              sub_192EC
LDR             R2, =aEcdsaSha2S ; "ecdsa-sha2-%s"
MOV             R1, #0x1E ; maxlen
LDR             R3, [R0,#0xC]
MOV             R6, R0
MOV             R0, SP  ; s
BL              snprintf
MOV             R0, SP  ; s
BL              strlen
MOV             R1, SP
MOV             R2, R0
MOV             R0, R4
BL              sub_127F8
LDR             R6, [R6,#0xC]
MOV             R0, R6  ; s
BL              strlen
MOV             R1, R6
MOV             R2, R0
MOV             R0, R4
BL              sub_127F8
MOV             R1, R5
MOV             R0, R4
BL              sub_19370
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R6,PC}
; End of function sub_199E8

off_19A60 DCD aEcdsaSha2S ; "ecdsa-sha2-%s"



; _DWORD *__fastcall sub_19A64(_DWORD *, int)
sub_19A64
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
BL              sub_199E8
LDR             R1, [R5,#0x18]
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_1282C
; End of function sub_19A64




; void __fastcall sub_19A84(_DWORD *, int, _DWORD *)
sub_19A84

var_14C= -0x14C
var_144= -0x144
var_140= -0x140
var_13C= -0x13C
var_138= -0x138
s= -0x134
var_128= -0x128
var_11C= -0x11C
var_114= -0x114
var_D4= -0xD4

PUSH            {R4-R9,LR}
MOV             R4, #0
SUB             SP, SP, #0x14C
MOV             R8, R0
MOV             R7, R1
MOV             R6, R2
LDR             R0, [R1,#8]
STR             R4, [SP,#0x14C+var_144]
STR             R4, [SP,#0x14C+var_140]
STR             R4, [SP,#0x14C+var_13C]
BL              sub_192EC
STR             R4, [SP,#0x14C+var_14C]
MOV             R5, R0
ADD             R3, SP, #0x14C+var_144
ADD             R2, SP, #0x14C+var_140
ADD             R1, SP, #0x14C+var_13C
ADD             R0, SP, #0x14C+var_138
BL              sub_26A28
CMP             R0, R4
BEQ             loc_19B38

loc_19AD4
MOV             R4, #0
MOV             R6, #0xFFFFFFFF

loc_19ADC
LDR             R0, [SP,#0x14C+var_138]
CMP             R0, #0
BEQ             loc_19B18
LDR             R1, [SP,#0x14C+var_13C]
CMP             R1, #0
BEQ             loc_19B18
LDR             R2, [SP,#0x14C+var_140]
CMP             R2, #0
BEQ             loc_19B18
LDR             R3, [SP,#0x14C+var_144]
CMP             R3, #0
BEQ             loc_19B18
MOV             R12, #0
STR             R12, [SP,#0x14C+var_14C]
BL              sub_26ABC

loc_19B18
CMP             R4, #0
BEQ             loc_19B28
MOV             R0, R4  ; ptr
BL              j_free

loc_19B28
CMN             R6, #1
BNE             loc_19D18
LDR             R0, =aEccError ; "ECC error"
BL              sub_184AC

loc_19B38
LDR             R3, [R5,#8]
ADD             R0, SP, #0x14C+var_D4
LDR             R4, =dword_4C684
LDR             R3, [R3,#0x54]
BLX             R3
LDR             R3, [R5,#8]
ADD             R0, SP, #0x14C+var_D4
LDM             R6, {R1,R2}
LDR             R3, [R3,#0x58]
BLX             R3
LDR             R3, [R5,#8]
ADD             R1, SP, #0x14C+var_114
ADD             R0, SP, #0x14C+var_D4
LDR             R3, [R3,#0x5C]
BLX             R3
LDR             R2, [R5,#8]
ADD             R1, SP, #0x14C+var_114
LDR             R3, [R4,#(off_4C6D4 - 0x4C684)]
LDR             R0, [SP,#0x14C+var_144]
LDR             R2, [R2,#8]
BLX             R3
CMP             R0, #0
BNE             loc_19AD4
LDR             R1, [R7,#8]
MOV             R2, #0x10
LDR             R3, [R4,#(off_4C6C4 - 0x4C684)]
LDR             R0, [SP,#0x14C+var_140]
LDR             R1, [R1,#0x10]
BLX             R3
CMP             R0, #0
BNE             loc_19AD4
LDR             R9, =dword_4C3E4

loc_19BB8
ADD             R2, SP, #0x14C+s
LDR             R3, [R7,#8]
LDR             R1, [R9]
MOV             R0, #0
BL              sub_277F4
SUBS            R2, R0, #0
BNE             loc_19AD4
LDR             R1, [SP,#0x14C+var_140]
LDR             R6, [R4,#(off_4C6F4 - 0x4C684)]
LDR             R3, [SP,#0x14C+var_138]
LDR             R0, [SP,#0x14C+var_128]
BLX             R6
SUBS            R1, R0, #0
BNE             loc_19AD4
LDR             R3, [R4,#(off_4C6B4 - 0x4C684)]
LDR             R0, [SP,#0x14C+var_138]
BLX             R3
CMP             R0, #0
BNE             loc_19C10
ADD             R0, SP, #0x14C+s
BL              sub_277B4
B               loc_19BB8

loc_19C10
LDR             R2, [SP,#0x14C+var_11C]
LDR             R3, [R4,#(off_4C710 - 0x4C684)]
LDR             R1, [SP,#0x14C+var_140]
MOV             R0, R2
BLX             R3
CMP             R0, #0
BNE             loc_19AD4
LDR             R6, [R4,#(off_4C708 - 0x4C684)]
LDRD            R2, R3, [SP,#0x14C+var_140]
LDR             R1, [SP,#0x14C+var_138]
LDR             R0, [R7,#0x18]
BLX             R6
CMP             R0, #0
BNE             loc_19AD4
LDR             R2, [SP,#0x14C+var_13C]
LDR             R3, [R4,#(off_4C6D8 - 0x4C684)]
LDR             R0, [SP,#0x14C+var_144]
MOV             R1, R2
BLX             R3
SUBS            R2, R0, #0
BNE             loc_19AD4
LDR             R3, [SP,#0x14C+var_13C]
LDR             R6, [R4,#(off_4C6F4 - 0x4C684)]
LDR             R1, [SP,#0x14C+var_140]
MOV             R0, R3
BLX             R6
CMP             R0, #0
BNE             loc_19AD4
LDRD            R2, R3, [SP,#0x14C+var_140]
LDR             R6, [R4,#(off_4C708 - 0x4C684)]
LDR             R1, [SP,#0x14C+var_11C]
MOV             R0, R3
BLX             R6
SUBS            R6, R0, #0
BNE             loc_19AD4
ADD             R0, SP, #0x14C+s
BL              sub_277B4
LDR             R3, [R4,#(off_4C6B4 - 0x4C684)]
MOV             R1, R6
LDR             R0, [SP,#0x14C+var_13C]
BLX             R3
CMP             R0, #0
BEQ             loc_19BB8
LDR             R3, [R5,#0xC]
MOV             R1, #0x1E ; maxlen
LDR             R2, =aEcdsaSha2S ; "ecdsa-sha2-%s"
ADD             R0, SP, #0x14C+s ; s
BL              snprintf
ADD             R0, SP, #0x14C+s ; s
BL              strlen
ADD             R1, SP, #0x14C+s
MOV             R2, R0
MOV             R0, R8
BL              sub_127F8
MOV             R0, #0xC8
BL              sub_12344
LDR             R1, [SP,#0x14C+var_138]
MOV             R4, R0
BL              sub_1282C
LDR             R1, [SP,#0x14C+var_13C]
MOV             R0, R4
BL              sub_1282C
MOV             R1, R4
MOV             R0, R8
BL              sub_12824
B               loc_19ADC

loc_19D18
ADD             SP, SP, #0x14C
POP             {R4-R9,PC}
; End of function sub_19A84

off_19D20 DCD aEccError ; "ECC error"
off_19D24 DCD dword_4C684
off_19D28 DCD dword_4C3E4
off_19D2C DCD aEcdsaSha2S ; "ecdsa-sha2-%s"



; int __fastcall sub_19D30(_DWORD *, _DWORD *, _DWORD *)
sub_19D30

var_15C= -0x15C
var_158= -0x158
var_154= -0x154
var_150= -0x150
var_14C= -0x14C
var_148= -0x148
var_144= -0x144
var_140= -0x140
var_13C= -0x13C
var_138= -0x138
var_134= -0x134
var_130= -0x130
var_12C= -0x12C
var_128= -0x128
var_124= -0x124
var_120= -0x120
var_11C= -0x11C
var_118= -0x118
var_114= -0x114
var_D4= -0xD4

PUSH            {R4-R11,LR}
MOV             R4, #0
SUB             SP, SP, #0x15C
MOV             R8, R0
MOV             R7, R1
MOV             R10, R2
LDR             R0, [R1,#8]
STR             R4, [SP,#0x15C+var_13C]
STR             R4, [SP,#0x15C+var_138]
STR             R4, [SP,#0x15C+var_134]
STR             R4, [SP,#0x15C+var_130]
STR             R4, [SP,#0x15C+var_12C]
STR             R4, [SP,#0x15C+var_128]
STR             R4, [SP,#0x15C+var_124]
STR             R4, [SP,#0x15C+var_120]
STR             R4, [SP,#0x15C+var_11C]
STR             R4, [SP,#0x15C+var_118]
BL              sub_192EC
MOV             R9, R0
BL              sub_28738
MOV             R5, R0
BL              sub_28738
ADD             R3, SP, #0x15C+var_11C
MOV             R6, R0
STR             R3, [SP,#0x15C+var_14C]
ADD             R3, SP, #0x15C+var_124
STR             R3, [SP,#0x15C+var_150]
ADD             R3, SP, #0x15C+var_120
STR             R3, [SP,#0x15C+var_154]
ADD             R3, SP, #0x15C+var_128
STR             R3, [SP,#0x15C+var_158]
ADD             R3, SP, #0x15C+var_12C
STR             R3, [SP,#0x15C+var_15C]
ADD             R2, SP, #0x15C+var_134
STR             R4, [SP,#0x15C+var_148]
ADD             R3, SP, #0x15C+var_130
ADD             R1, SP, #0x15C+var_138
ADD             R0, SP, #0x15C+var_13C
BL              sub_26A28
CMP             R0, R4
BNE             loc_19DE0
CMP             R6, R4
CMPNE           R5, R4
BNE             loc_19DE8

loc_19DE0
LDR             R0, =aEccError ; "ECC error"
BL              sub_184AC

loc_19DE8
LDR             R3, [SP,#0x15C+var_138]
MOV             R0, R8
LDR             R1, [SP,#0x15C+var_13C]
STR             R3, [SP,#0x15C+var_144]
STR             R1, [SP,#0x15C+var_140]
BL              sub_12664
LDR             R1, [SP,#0x15C+var_140]
MOV             R4, R0
MOV             R0, R8
LDR             R11, [R8,#8]
BL              sub_12910
CMP             R0, #0
LDR             R3, [SP,#0x15C+var_144]
BEQ             loc_19E94

loc_19E20
MOV             R4, #0xFFFFFFFF

loc_19E24
MOV             R0, R5
BL              sub_2877C
MOV             R0, R6
BL              sub_2877C
MOV             R3, #0
LDRD            R0, R1, [SP,#0x15C+var_13C]
STR             R3, [SP,#0x15C+var_148]
LDR             R3, [SP,#0x15C+var_11C]
STR             R3, [SP,#0x15C+var_14C]
LDR             R3, [SP,#0x15C+var_124]
STR             R3, [SP,#0x15C+var_150]
LDR             R3, [SP,#0x15C+var_120]
STR             R3, [SP,#0x15C+var_154]
LDR             R3, [SP,#0x15C+var_128]
STR             R3, [SP,#0x15C+var_158]
LDR             R3, [SP,#0x15C+var_12C]
STR             R3, [SP,#0x15C+var_15C]
LDRD            R2, R3, [SP,#0x15C+var_134]
BL              sub_26ABC
LDR             R0, [SP,#0x15C+var_118]
CMP             R0, #0
BEQ             loc_19E88
LDR             R3, =dword_4C684
LDR             R3, [R3,#(off_4C720 - 0x4C684)]
BLX             R3

loc_19E88
MOV             R0, R4
ADD             SP, SP, #0x15C
POP             {R4-R11,PC}

loc_19E94
MOV             R1, R3
MOV             R0, R8
BL              sub_12910
CMP             R0, #0
BNE             loc_19E20
LDR             R3, [R8,#8]
SUB             R3, R3, R11
CMP             R4, R3
BNE             loc_19E20
LDR             R3, [R9,#8]
ADD             R0, SP, #0x15C+var_D4
LDR             R4, =dword_4C684
LDR             R3, [R3,#0x54]
BLX             R3
LDR             R3, [R9,#8]
ADD             R0, SP, #0x15C+var_D4
LDM             R10, {R1,R2}
LDR             R3, [R3,#0x58]
BLX             R3
LDR             R3, [R9,#8]
ADD             R1, SP, #0x15C+var_114
ADD             R0, SP, #0x15C+var_D4
LDR             R3, [R3,#0x5C]
BLX             R3
LDR             R2, [R9,#8]
ADD             R1, SP, #0x15C+var_114
LDR             R3, [R4,#(off_4C6D4 - 0x4C684)]
LDR             R0, [SP,#0x15C+var_124]
LDR             R2, [R2,#8]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R1, [R7,#8]
MOV             R2, #0x10
LDR             R3, [R4,#(off_4C6C4 - 0x4C684)]
LDR             R0, [SP,#0x15C+var_120]
LDR             R1, [R1,#0x10]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R1, [R7,#8]
MOV             R2, #0x10
LDR             R3, [R4,#(off_4C6C4 - 0x4C684)]
LDR             R0, [SP,#0x15C+var_11C]
LDR             R1, [R1,#8]
BLX             R3
SUBS            R8, R0, #0
BNE             loc_19E20
LDR             R3, [R4,#(off_4C6B4 - 0x4C684)]
MOV             R1, R8
LDR             R0, [SP,#0x15C+var_13C]
BLX             R3
CMP             R0, #0
BEQ             loc_19E20
LDR             R3, [R4,#(off_4C6B4 - 0x4C684)]
MOV             R1, R8
LDR             R0, [SP,#0x15C+var_138]
BLX             R3
CMP             R0, #0
BEQ             loc_19E20
LDR             R3, [R4,#(off_4C6B0 - 0x4C684)]
LDR             R1, [SP,#0x15C+var_120]
LDR             R0, [SP,#0x15C+var_13C]
BLX             R3
CMN             R0, #1
BNE             loc_19E20
LDR             R3, [R4,#(off_4C6B0 - 0x4C684)]
LDR             R1, [SP,#0x15C+var_120]
LDR             R0, [SP,#0x15C+var_138]
BLX             R3
CMN             R0, #1
BNE             loc_19E20
LDR             R3, [R4,#(off_4C710 - 0x4C684)]
LDR             R2, [SP,#0x15C+var_130]
LDR             R1, [SP,#0x15C+var_120]
LDR             R0, [SP,#0x15C+var_138]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R8, [R4,#(off_4C708 - 0x4C684)]
LDR             R3, [SP,#0x15C+var_12C]
LDR             R2, [SP,#0x15C+var_120]
LDR             R1, [SP,#0x15C+var_130]
LDR             R0, [SP,#0x15C+var_124]
BLX             R8
CMP             R0, #0
BNE             loc_19E20
LDR             R8, [R4,#(off_4C708 - 0x4C684)]
LDR             R3, [SP,#0x15C+var_128]
LDR             R2, [SP,#0x15C+var_120]
LDR             R1, [SP,#0x15C+var_130]
LDR             R0, [SP,#0x15C+var_13C]
BLX             R8
CMP             R0, #0
BNE             loc_19E20
LDR             R1, [R7,#8]
MOV             R2, #0x10
LDR             R3, [R4,#(off_4C6C4 - 0x4C684)]
LDR             R0, [R5]
LDR             R1, [R1,#0x14]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R1, [R7,#8]
MOV             R2, #0x10
LDR             R3, [R4,#(off_4C6C4 - 0x4C684)]
LDR             R0, [R5,#4]
LDR             R1, [R1,#0x18]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R3, [R4,#(off_4C6A0 - 0x4C684)]
MOV             R1, #1
LDR             R0, [R5,#8]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R3, [R4,#(off_4C69C - 0x4C684)]
LDR             R1, [R6]
LDR             R0, [R7,#0xC]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R3, [R4,#(off_4C69C - 0x4C684)]
LDR             R1, [R6,#4]
LDR             R0, [R7,#0x10]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R3, [R4,#(off_4C69C - 0x4C684)]
LDR             R1, [R6,#8]
LDR             R0, [R7,#0x14]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R7, [R4,#(off_4C73C - 0x4C684)]
LDR             R0, [SP,#0x15C+var_12C]
LDR             R3, [SP,#0x15C+var_11C]
CMP             R7, #0
BNE             loc_1A1A0
STR             R7, [SP,#0x15C+var_15C]
MOV             R2, R5
LDR             R7, [R4,#(off_4C72C - 0x4C684)]
MOV             R1, R5
BLX             R7
CMP             R0, #0
BNE             loc_19E20
STR             R0, [SP,#0x15C+var_15C]
MOV             R2, R6
LDR             R7, [R4,#(off_4C72C - 0x4C684)]
MOV             R1, R6
LDR             R3, [SP,#0x15C+var_11C]
LDR             R0, [SP,#0x15C+var_128]
BLX             R7
CMP             R0, #0
BNE             loc_19E20
LDR             R3, [R4,#(off_4C714 - 0x4C684)]
ADD             R1, SP, #0x15C+var_118
LDR             R0, [SP,#0x15C+var_11C]
BLX             R3
CMP             R0, #0
BNE             loc_19E20
LDR             R3, [SP,#0x15C+var_118]
MOV             R2, R5
MOV             R1, R5
MOV             R0, R6
STR             R3, [SP,#0x15C+var_15C]
LDR             R3, [SP,#0x15C+var_11C]
LDR             R7, [R4,#(off_4C730 - 0x4C684)]
BLX             R7
CMP             R0, #0
BNE             loc_19E20
LDR             R3, [R4,#(off_4C738 - 0x4C684)]
MOV             R0, R5
LDR             R2, [SP,#0x15C+var_118]
LDR             R1, [SP,#0x15C+var_11C]
BLX             R3

loc_1A158
CMP             R0, #0
BNE             loc_19E20
LDR             R7, [R4,#(off_4C6F4 - 0x4C684)]
MOV             R2, #0
LDR             R3, [SP,#0x15C+var_134]
LDR             R1, [SP,#0x15C+var_120]
LDR             R0, [R5]
BLX             R7
CMP             R0, #0
BNE             loc_19E20
LDR             R3, [R4,#(off_4C6B0 - 0x4C684)]
LDR             R1, [SP,#0x15C+var_13C]
LDR             R0, [SP,#0x15C+var_134]
BLX             R3
MOVS            R0, R0
MOVNE           R0, #1
RSB             R4, R0, #0
B               loc_19E24

loc_1A1A0
STR             R3, [SP,#0x15C+var_158]
MOV             R1, R0
STR             R5, [SP,#0x15C+var_15C]
MOV             R2, R6
LDR             R3, [SP,#0x15C+var_128]
MOV             R0, R5
BLX             R7
B               loc_1A158
; End of function sub_19D30

off_1A1C0 DCD aEccError ; "ECC error"
off_1A1C4 DCD dword_4C684



; void __fastcall sub_1A1C8(int *, int *, int *, size_t)
sub_1A1C8
PUSH            {R4-R9,LR}
SUB             SP, SP, #0x14
MOV             R5, R3
MOV             R6, R0
MOV             R7, R1
MOV             R8, R2
MOV             R1, #0  ; c
MOV             R2, #0x10 ; n
MOV             R0, SP  ; s
MOV             R9, #0xFFFFFF80
BL              memset
MOV             R0, R5
BL              sub_18718
MOV             R4, R0
MOV             R0, SP
BL              sub_121B0

loc_1A208
MOV             R1, R5
MOV             R0, R4
BL              sub_18090
LDRB            R3, [R4]
MOV             R2, R5
MOV             R1, R4
MOV             R0, R6
ORR             R3, R9, R3
STRB            R3, [R4]
BL              sub_122E8
MOV             R2, #0
MOV             R1, #8
MOV             R0, R6
BL              sub_2D44C
CMP             R0, #0
BEQ             loc_1A260

loc_1A248
LDR             R3, =stderr
LDR             R0, =aRsaGenerationF ; "RSA generation failed\n"
LDR             R1, [R3] ; stream
BL              fputs
MOV             R0, #1  ; status
BL              exit

loc_1A260
MOV             R2, R7
MOV             R1, #1
MOV             R0, R6
BL              sub_2E7D4
CMP             R0, #0
BNE             loc_1A248
MOV             R2, SP
MOV             R1, R8
MOV             R0, R7
BL              sub_2B818
CMP             R0, #0
BNE             loc_1A248
MOV             R1, #1
MOV             R0, SP
BL              sub_29E48
CMP             R0, #0
BNE             loc_1A208
MOV             R0, SP
BL              sub_29D74
MOV             R1, R5
MOV             R0, R4
BL              j_explicit_bzero
MOV             R0, R4  ; ptr
BL              free
ADD             SP, SP, #0x14
POP             {R4-R9,PC}
; End of function sub_1A1C8

off_1A2C8 DCD stderr
off_1A2CC DCD aRsaGenerationF ; "RSA generation failed\n"



; int **__fastcall sub_1A2D0(unsigned int)
sub_1A2D0

var_38= -0x38
var_34= -0x34
s= -0x30
var_20= -0x20
var_10= -0x10

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x38
MOV             R5, R0
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x38+s ; s
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x38+var_20 ; s
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x38+var_10 ; s
BL              memset
SUB             R3, R5, #0x200
CMP             R3, #0xE00
BHI             loc_1A320
ANDS            R6, R5, #7
BEQ             loc_1A328

loc_1A320
LDR             R0, =aBitsMustSatisf_0 ; "Bits must satisfy 512 <= bits <= 4096, "...
BL              sub_184AC

loc_1A328
MOV             R0, #0x14
BL              sub_18718
ADD             R3, R0, #0x10
ADD             R2, R0, #8
MOV             R1, R0
MOV             R4, R0
STR             R6, [SP,#0x38+var_34]
STR             R3, [SP,#0x38+var_38]
ADD             R3, R0, #0xC
ADD             R0, R0, #4
BL              sub_12224
MOV             R3, R6
ADD             R2, SP, #0x38+var_20
ADD             R1, SP, #0x38+var_10
ADD             R0, SP, #0x38+s
BL              sub_121CC
LDR             R1, =0x10001
LDR             R0, [R4,#4]
BL              sub_2E65C
CMP             R0, #0
MOVEQ           R6, R5,LSR#4
BEQ             loc_1A398

loc_1A380
LDR             R3, =stderr
LDR             R0, =aRsaGenerationF ; "RSA generation failed\n"
LDR             R1, [R3] ; stream
BL              fputs
MOV             R0, #1  ; status
BL              exit

loc_1A398
MOV             R3, R6
LDR             R2, [R4,#4]
ADD             R1, SP, #0x38+s
LDR             R0, [R4,#0xC]
BL              sub_1A1C8
MOV             R3, R6
LDR             R2, [R4,#4]
ADD             R1, SP, #0x38+var_20
LDR             R0, [R4,#0x10]
BL              sub_1A1C8
LDR             R2, [R4]
LDRD            R0, R1, [R4,#0xC]
BL              sub_2CB6C
CMP             R0, #0
BNE             loc_1A380
LDR             R0, [R4]
BL              sub_2A310
CMP             R0, R5
BNE             loc_1A398
ADD             R2, SP, #0x38+var_10
ADD             R1, SP, #0x38+var_20
ADD             R0, SP, #0x38+s
BL              sub_2C074
CMP             R0, #0
BNE             loc_1A380
LDR             R2, [R4,#8]
ADD             R1, SP, #0x38+var_10
LDR             R0, [R4,#4]
BL              sub_2BBA8
SUBS            R3, R0, #0
BNE             loc_1A380
ADD             R0, SP, #0x38+s
ADD             R2, SP, #0x38+var_10
ADD             R1, SP, #0x38+var_20
BL              sub_29DB8
MOV             R0, R4
ADD             SP, SP, #0x38 ; '8'
POP             {R4-R6,PC}
; End of function sub_1A2D0

off_1A430 DCD aBitsMustSatisf_0 ; "Bits must satisfy 512 <= bits <= 4096, "...
dword_1A434 DCD 0x10001
off_1A438 DCD stderr
off_1A43C DCD aRsaGenerationF ; "RSA generation failed\n"



; int __fastcall sub_1A440(unsigned int, int)
sub_1A440
CMP             R1, #0
BNE             loc_1A46C
CMP             R0, #2
MOVEQ           R1, #0x180
BEQ             loc_1A46C
BHI             loc_1A474
CMP             R0, #0
MOVEQ           R1, #0x800
BEQ             loc_1A46C
CMP             R0, #1

loc_1A468
MOVEQ           R1, #0x100

loc_1A46C
MOV             R0, R1
BX              LR

loc_1A474
CMP             R0, #3
MOVWEQ          R1, #0x209
BEQ             loc_1A46C
CMP             R0, #0x46 ; 'F'
B               loc_1A468
; End of function sub_1A440




; int __fastcall sub_1A488(unsigned int, int, const char *, int)
sub_1A488

var_C= -0xC

PUSH            {R0-R2,R4-R9,LR}
MOV             R5, R0
MOV             R7, R2
MOV             R9, R3
BL              sub_1A440
MOV             R4, R0
BL              sub_1E644
MOV             R6, R0
BL              sub_18158
CMP             R5, #3
BHI             loc_1A4E4
CMP             R5, #1
BCC             loc_1A4F4

loc_1A4BC
MOV             R0, R4
BL              sub_1982C
MOV             R4, R0
BL              sub_197D4
MOV             R1, R0
MOV             R5, R0
MOV             R0, R6
BL              sub_1E708
STR             R4, [R0]
B               loc_1A500

loc_1A4E4
CMP             R5, #0x46 ; 'F'
BEQ             loc_1A4BC
LDR             R0, =aInternalError ; "Internal error"
BL              sub_184AC

loc_1A4F4
MOV             R0, R4
BL              sub_1A2D0
STR             R0, [R6,#0xC]

loc_1A500
BL              sub_18158
MOVW            R0, #0x6A4
BL              sub_12344
MOV             R2, R5
MOV             R1, R6
MOV             R4, R0
BL              sub_1E9F8
MOV             R0, R6
BL              sub_1EA60
MOV             R1, #0
MOV             R0, R4
BL              sub_124A0
MOV             R0, R7  ; s
BL              strlen
ADD             R0, R0, #0x1E
BL              sub_18718
MOV             R6, R0
MOV             R0, R7  ; s
BL              strlen
MOV             R5, R0
BL              getpid
MOV             R3, R7
STR             R0, [SP,#0xC+var_C]
LDR             R2, =aSTmpD ; "%s.tmp%d"
ADD             R1, R5, #0x1E ; maxlen
MOV             R0, R6  ; s
BL              snprintf
MOV             R2, #0x180
MOV             R1, #0xC2
MOV             R0, R6
BL              open64
SUBS            R8, R0, #0
BGE             loc_1A608
BL              __errno_location
LDR             R0, [R0] ; errnum
MOV             R5, #0xFFFFFFFF
BL              strerror
MOV             R2, R6
MOV             R3, R0
LDR             R1, =aCouldnTCreateN ; "Couldn't create new file %s: %s"
MOV             R0, #3
BL              sub_184E8
CMP             R4, #0
BNE             loc_1A6D0

loc_1A5B0               ; name
MOV             R0, R6
BL              unlink
MOV             R0, R6  ; ptr
BL              free
MOV             R0, R5
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_1A5CC
SUB             R1, R1, R3
MOV             R0, R4
BL              sub_125E4
LDMIB           R4, {R2,R3}
SUB             R2, R2, R3 ; n
MOV             R1, R0  ; buf
MOV             R0, R8  ; fd
BL              write
CMN             R0, #1
MOV             R1, R0
BNE             loc_1A61C
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BNE             loc_1A624

loc_1A608
LDMIB           R4, {R1,R3}
CMP             R1, R3
BNE             loc_1A5CC
MOV             R5, #0
B               loc_1A648

loc_1A61C
CMP             R0, #0
BGT             loc_1A6E4

loc_1A624
BL              __errno_location
MOV             R5, #0xFFFFFFFF
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R2, R6
MOV             R3, R0
LDR             R1, =aFailedWritingF ; "Failed writing file %s: %s"
MOV             R0, #3
BL              sub_184E8

loc_1A648               ; fd
MOV             R0, R8
BL              fsync
CMP             R0, #0
BEQ             loc_1A678
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R2, R6
MOV             R3, R0
LDR             R1, =aFsyncOfSFailed ; "fsync of %s failed: %s"
MOV             R0, #3
BL              sub_184E8

loc_1A678
MOV             R0, R8
BL              sub_185B8
CMN             R5, #1
BEQ             loc_1A6D0
MOV             R1, R7  ; to
MOV             R0, R6  ; from
BL              link
CMP             R0, #0
BGE             loc_1A6F0
BL              __errno_location
CMP             R9, #0
LDR             R0, [R0] ; errnum
BEQ             loc_1A6B4
CMP             R0, #0x11
BEQ             loc_1A6F0

loc_1A6B4
MOV             R5, #0xFFFFFFFF
BL              strerror
MOV             R2, R7
MOV             R3, R0
LDR             R1, =aFailedMovingKe ; "Failed moving key file to %s: %s"
MOV             R0, #3
BL              sub_184E8

loc_1A6D0
MOV             R0, R4
BL              sub_1238C
MOV             R0, R4  ; ptr
BL              j_free
B               loc_1A5B0

loc_1A6E4
MOV             R0, R4
BL              sub_1250C
B               loc_1A608

loc_1A6F0
MOV             R5, #0
B               loc_1A6D0
; End of function sub_1A488

off_1A6F8 DCD aInternalError ; "Internal error"
off_1A6FC DCD aSTmpD    ; "%s.tmp%d"
off_1A700 DCD aCouldnTCreateN ; "Couldn't create new file %s: %s"
off_1A704 DCD aFailedWritingF ; "Failed writing file %s: %s"
off_1A708 DCD aFsyncOfSFailed ; "fsync of %s failed: %s"
off_1A70C DCD aFailedMovingKe ; "Failed moving key file to %s: %s"



; int __fastcall sub_1A710(_BYTE *, char, int, char)
sub_1A710
CMP             R0, #0
BEQ             loc_1A79C
CMP             R2, #0x7F
ORR             R1, R1, R3
ADD             R12, R0, #1
STRB            R1, [R0]
BGT             loc_1A778
CMP             R12, #0
STRBNE          R2, [R0,#1]

loc_1A734
MOV             R0, #2
BX              LR

loc_1A73C
ADD             R3, R3, #1

loc_1A740
MOV             R1, R3,LSL#3
MOV             R1, R2,ASR R1
CMP             R1, #0
BGT             loc_1A73C
CMP             R0, #0
MVNNE           R1, R3,LSL#25
MVNNE           R1, R1,LSR#25
STRBNE          R1, [R0]
ADDNE           R0, R0, #1
MOV             R1, R3

loc_1A768
SUBS            R1, R1, #1
BCS             loc_1A784
ADD             R0, R3, #2
BX              LR

loc_1A778
MOV             R0, R12

loc_1A77C
MOV             R3, #1
B               loc_1A740

loc_1A784
CMP             R0, #0
MOVNE           R12, R1,LSL#3
MOVNE           R12, R2,ASR R12
STRBNE          R12, [R0]
ADDNE           R0, R0, #1
B               loc_1A768

loc_1A79C
CMP             R2, #0x7F
BLE             loc_1A734
B               loc_1A77C
; End of function sub_1A710




; void *__fastcall sub_1A7A8(const char *)
sub_1A7A8

var_10C= -0x10C
var_108= -0x108
s= -0x104
var_4= -4

PUSH            {R4-R11,LR}
MOV             R5, R0
SUB             SP, SP, #0x10C
MOV             R0, #0x34 ; '4'
BL              sub_18718
MOV             R1, #0  ; c
ADD             R9, R0, #8
STR             R1, [R0,#0x28]
MOV             R2, #0x20 ; ' ' ; n
STR             R1, [R0,#0x30]
MOV             R4, R0
STR             R1, [R0,#0x2C]
STR             R1, [R0,#4]
MOV             R0, R9  ; s
BL              memset
MOV             R0, R5  ; s
BL              strlen
CMP             R0, #1
BNE             loc_1A808
LDRB            R3, [R5]
CMP             R3, #0x2D ; '-'
LDREQ           R3, =stdin
LDREQ           R7, [R3]
BEQ             loc_1A818

loc_1A808
LDR             R1, =(s2+7) ; "r"
MOV             R0, R5
BL              fopen64
MOV             R7, R0

loc_1A818
CMP             R7, #0
BEQ             loc_1AB58
MOV             R2, R7  ; stream
MOV             R1, #0x100 ; n
ADD             R0, SP, #0x10C+s ; s
BL              fgets
CMP             R0, #0
BEQ             loc_1AB60
MOV             R2, #0xB ; n
LDR             R1, =aBegin ; "-----BEGIN "
ADD             R0, SP, #0x10C+s ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_1AB60
ADD             R0, SP, #0x10C+s ; s
BL              strlen
ADD             R3, SP, #0x10C+s
SUB             R0, R0, #0x11
LDR             R1, =(aBeginDsaPrivat+0xF) ; s2
ADD             R0, R3, R0 ; s1
BL              strcmp
SUBS            R5, R0, #0
BNE             loc_1AB60
LDR             R1, =aBeginRsaPrivat ; "-----BEGIN RSA PRIVATE KEY-----\n"
ADD             R0, SP, #0x10C+s ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_1A978
MOV             R3, #1

loc_1A88C
STR             R3, [R4]

loc_1A890
LDR             R10, =0xAAAAAAAB

loc_1A894               ; stream
MOV             R2, R7
MOV             R1, #0x100 ; n
ADD             R0, SP, #0x10C+s ; s
BL              fgets
CMP             R0, #0
BEQ             loc_1AB68
MOV             R2, #9  ; n
LDR             R1, =aEnd ; "-----END "
ADD             R0, SP, #0x10C+s ; s1
BL              strncmp
CMP             R0, #0
BNE             loc_1A8E8
ADD             R0, SP, #0x10C+s ; s
BL              strlen
ADD             R3, SP, #0x10C+s
SUB             R0, R0, #0x11
LDR             R1, =(aBeginDsaPrivat+0xF) ; s2
ADD             R0, R3, R0 ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_1AB14

loc_1A8E8               ; c
MOV             R1, #0x3A ; ':'
ADD             R0, SP, #0x10C+s ; s
BL              strchr
SUBS            R8, R0, #0
BEQ             loc_1AA88
CMP             R5, #0
BNE             loc_1AB70
STRB            R5, [R8],#1

loc_1A908
MOV             R6, R8
LDRB            R11, [R8],#1
CMP             R11, #0
BEQ             loc_1A930
BL              __ctype_b_loc
LDR             R2, [R0]
MOV             R3, R11,LSL#1
LDRH            R3, [R2,R3]
TST             R3, #0x2000
BNE             loc_1A908

loc_1A930
LDR             R1, =aProcType ; "Proc-Type"
ADD             R0, SP, #0x10C+s ; s1
BL              strcmp
SUBS            R8, R0, #0
BNE             loc_1A9B0
CMP             R11, #0x34 ; '4'
BNE             loc_1AB78
LDRB            R3, [R6,#1]
CMP             R3, #0x2C ; ','
BNE             loc_1AB78
LDR             R1, =aEncrypted ; "ENCRYPTED\n"
ADD             R0, R6, #2 ; s1
BL              strcmp
SUBS            R5, R0, #0
MOVEQ           R3, #1
STREQ           R3, [R4,#4]
MOVNE           R5, R8
B               loc_1A894

loc_1A978
LDR             R1, =aBeginDsaPrivat ; "-----BEGIN DSA PRIVATE KEY-----\n"
ADD             R0, SP, #0x10C+s ; s1
BL              strcmp
CMP             R0, #0
STREQ           R5, [R4]
BEQ             loc_1A890
LDR             R1, =aBeginEcPrivate ; "-----BEGIN EC PRIVATE KEY-----\n"
ADD             R0, SP, #0x10C+s ; s1
BL              strcmp
CMP             R0, #0
MOVEQ           R3, #2
BEQ             loc_1A88C
LDR             R5, =aUnrecognisedKe ; "Unrecognised key type"
B               loc_1AA24

loc_1A9B0               ; s2
LDR             R1, =(aExpected16Digi+0x18) ; "DEK-Info"
ADD             R0, SP, #0x10C+s ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_1A894
MOV             R2, #0xD ; n
LDR             R1, =aDesEde3Cbc ; "DES-EDE3-CBC,"
MOV             R0, R6  ; s1
BL              strncmp
SUBS            R5, R0, #0
BNE             loc_1AA20
LDR             R3, =a2x ; "%2x"
ADD             R8, R6, #0xD
MOV             R11, R9
ADD             R6, R6, #0x1D

loc_1A9EC
ADD             R2, SP, #0x10C+var_108
MOV             R1, R3
MOV             R0, R8
BL              __isoc99_sscanf
CMP             R0, #1
BNE             loc_1AA80
LDR             R2, [SP,#0x10C+var_108]
ADD             R8, R8, #2
CMP             R6, R8
LDR             R3, =a2x ; "%2x"
STRB            R2, [R11],#1
BNE             loc_1A9EC
B               loc_1A894

loc_1AA20
LDR             R5, =aCiphersOtherTh ; "Ciphers other than DES-EDE3-CBC not sup"...

loc_1AA24
ADD             R0, SP, #0x10C+s
MOV             R1, #0x100
BL              j_explicit_bzero
LDR             R0, [R4,#0x28]
CMP             R0, #0
BEQ             loc_1AA4C
LDR             R1, [R4,#0x30]
BL              j_explicit_bzero
LDR             R0, [R4,#0x28] ; ptr
BL              free

loc_1AA4C               ; ptr
MOV             R0, R4
BL              free
CMP             R7, #0
BEQ             loc_1AA64
MOV             R0, R7  ; stream
BL              fclose

loc_1AA64
LDR             R3, =stderr
MOV             R2, R5
LDR             R1, =aErrorS ; "Error: %s\n"
MOV             R4, #0
LDR             R0, [R3] ; stream
BL              fprintf
B               loc_1AB4C

loc_1AA80
LDR             R5, =aExpected16Digi ; "Expected 16-digit iv in DEK-Info"
B               loc_1AA24

loc_1AA88               ; s
ADD             R0, SP, #0x10C+s
BL              strlen
MOV             R2, R0,LSL#2
MOV             R5, R0
UMULL           R2, R3, R2, R10
MOV             R1, R3,LSR#1
LDR             R3, [R4,#0x2C]
STR             R1, [SP,#0x10C+var_10C]
ADD             R1, R1, R3
LDR             R3, [R4,#0x30]
CMP             R1, R3
BLS             loc_1AACC
ADD             R1, R1, #0x100
LDR             R0, [R4,#0x28]
STR             R1, [R4,#0x30]
BL              sub_18888
STR             R0, [R4,#0x28]

loc_1AACC
LDR             R2, [R4,#0x2C]
ADD             R3, SP, #0x10C+var_4
LDR             R1, [R4,#0x30]
ADD             R0, SP, #0x10C+s
SUB             R1, R1, R2
STR             R1, [R3,#-0x108]!
LDR             R1, [R4,#0x28]
ADD             R2, R1, R2
MOV             R1, R5
BL              sub_26CFC
CMP             R0, #0
BNE             loc_1AB80
LDR             R3, [R4,#0x2C]
MOV             R5, #1
LDR             R2, [SP,#0x10C+var_10C]
ADD             R3, R3, R2
STR             R3, [R4,#0x2C]
B               loc_1A894

loc_1AB14
LDR             R3, [R4,#0x2C]
CMP             R3, #0
BEQ             loc_1AB88
LDR             R2, [R4,#0x28]
CMP             R2, #0
BEQ             loc_1AB88
LDR             R2, [R4,#4]
CMP             R2, #0
BEQ             loc_1AB40
TST             R3, #7
BNE             loc_1AB90

loc_1AB40
MOV             R1, #0x100
ADD             R0, SP, #0x10C+s
BL              j_explicit_bzero

loc_1AB4C
MOV             R0, R4
ADD             SP, SP, #0x10C
POP             {R4-R11,PC}

loc_1AB58
LDR             R5, =aUnableToOpenKe ; "Unable to open key file"
B               loc_1AA24

loc_1AB60
LDR             R5, =aFileDoesNotBeg ; "File does not begin with OpenSSH key he"...
B               loc_1AA24

loc_1AB68
LDR             R5, =aUnexpectedEndO ; "Unexpected end of file"
B               loc_1AA24

loc_1AB70
LDR             R5, =aHeaderFoundInB ; "Header found in body of key data"
B               loc_1AA24

loc_1AB78
LDR             R5, =aProcTypeIsNot4 ; "Proc-Type is not 4 (only 4 is supported"...
B               loc_1AA24

loc_1AB80
LDR             R5, =aErrorDecodingB ; "Error decoding base64"
B               loc_1AA24

loc_1AB88
LDR             R5, =aKeyBodyNotPres ; "Key body not present"
B               loc_1AA24

loc_1AB90
LDR             R5, =aEncryptedKeyBl ; "Encrypted key blob is not a multiple of"...
B               loc_1AA24
; End of function sub_1A7A8

off_1AB98 DCD stdin
off_1AB9C DCD s2+7      ; "r"
off_1ABA0 DCD aBegin    ; "-----BEGIN "
off_1ABA4 DCD aBeginDsaPrivat+0xF ; "PRIVATE KEY-----\n"
off_1ABA8 DCD aBeginRsaPrivat ; "-----BEGIN RSA PRIVATE KEY-----\n"
dword_1ABAC DCD 0xAAAAAAAB
off_1ABB0 DCD aEnd      ; "-----END "
off_1ABB4 DCD aProcType ; "Proc-Type"
off_1ABB8 DCD aEncrypted ; "ENCRYPTED\n"
off_1ABBC DCD aBeginDsaPrivat ; "-----BEGIN DSA PRIVATE KEY-----\n"
off_1ABC0 DCD aBeginEcPrivate ; "-----BEGIN EC PRIVATE KEY-----\n"
off_1ABC4 DCD aUnrecognisedKe ; "Unrecognised key type"
off_1ABC8 DCD aExpected16Digi+0x18 ; "DEK-Info"
off_1ABCC DCD aDesEde3Cbc ; "DES-EDE3-CBC,"
off_1ABD0 DCD a2x       ; "%2x"
off_1ABD4 DCD aCiphersOtherTh ; "Ciphers other than DES-EDE3-CBC not sup"...
off_1ABD8 DCD stderr
off_1ABDC DCD aErrorS   ; "Error: %s\n"
off_1ABE0 DCD aExpected16Digi ; "Expected 16-digit iv in DEK-Info"
off_1ABE4 DCD aUnableToOpenKe ; "Unable to open key file"
off_1ABE8 DCD aFileDoesNotBeg ; "File does not begin with OpenSSH key he"...
off_1ABEC DCD aUnexpectedEndO ; "Unexpected end of file"
off_1ABF0 DCD aHeaderFoundInB ; "Header found in body of key data"
off_1ABF4 DCD aProcTypeIsNot4 ; "Proc-Type is not 4 (only 4 is supported"...
off_1ABF8 DCD aErrorDecodingB ; "Error decoding base64"
off_1ABFC DCD aKeyBodyNotPres ; "Key body not present"
off_1AC00 DCD aEncryptedKeyBl ; "Encrypted key blob is not a multiple of"...



; int __fastcall sub_1AC04(_BYTE *, int, int *, int *, int *)
sub_1AC04

arg_0=  0

CMP             R1, #0
BNE             loc_1AC14
MOV             R0, #0xFFFFFFFF
BX              LR

loc_1AC14
PUSH            {R4-R6,LR}
LDRB            R12, [R0]
LDR             LR, [SP,#0x10+arg_0]
AND             R12, R12, #0xE0
STR             R12, [LR]
LDRB            LR, [R0]
AND             LR, LR, #0x1F
CMP             LR, #0x1F
MOVEQ           R12, #0
STREQ           R12, [R2]
MOVEQ           R12, R0
BEQ             loc_1AC70
ADD             R12, R0, #1
SUB             R1, R1, #1
STR             LR, [R2]
B               loc_1AC80

loc_1AC54
CMP             R1, #0
BEQ             loc_1ACE0
LDR             R4, [R2]
LDRB            LR, [R12]
AND             LR, LR, #0x7F
ORR             LR, LR, R4,LSL#7
STR             LR, [R2]

loc_1AC70
LDRSB           LR, [R12],#1
SUB             R1, R1, #1
CMP             LR, #0
BLT             loc_1AC54

loc_1AC80
CMP             R1, #0
BEQ             loc_1ACE0
MOV             R2, R12
LDRB            LR, [R2],#1
TST             LR, #0x80
STREQ           LR, [R3]
BEQ             loc_1ACCC
AND             LR, LR, #0x7F
SUB             R1, R1, #1
CMP             LR, R1
BGT             loc_1ACE0
ADD             R1, LR, #1
MOV             R4, R2
ADD             R12, R12, R1
MOV             R1, #0

loc_1ACBC
CMP             R4, R12
BNE             loc_1ACE8
ADD             R2, R2, LR
STR             R1, [R3]

loc_1ACCC
LDR             R3, [R3]
CMP             R3, #0
BGE             loc_1ACF4
LDR             R0, =aNegativeAsn1Le ; "Negative ASN.1 length"
BL              puts

loc_1ACE0
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_1ACE8
LDRB            R5, [R4],#1
ORR             R1, R5, R1,LSL#8
B               loc_1ACBC

loc_1ACF4
SUB             R0, R2, R0
POP             {R4-R6,PC}
; End of function sub_1AC04

off_1ACFC DCD aNegativeAsn1Le ; "Negative ASN.1 length"



; void *__fastcall sub_1AD00(const char *, int)
sub_1AD00
CMP             R1, #1
PUSH            {R4-R6,LR}
BEQ             loc_1AD18

loc_1AD0C
MOV             R5, #0

loc_1AD10
MOV             R0, R5
POP             {R4-R6,PC}

loc_1AD18
BL              sub_1A7A8
SUBS            R4, R0, #0
BEQ             loc_1AD0C
LDR             R1, [R4,#0x30]
LDR             R0, [R4,#0x28]
LDR             R5, [R4,#4]
BL              j_explicit_bzero
LDR             R0, [R4,#0x28] ; ptr
BL              free
MOV             R0, R4  ; ptr
BL              free
B               loc_1AD10
; End of function sub_1AD00




; int *__fastcall sub_1AD48(const char *, int, int *)
sub_1AD48

var_24= -0x24
var_18= -0x18
var_14= -0x14
n= -0x10
var_C= -0xC
var_8= -8
var_4= -4

CMP             R2, #1
PUSH            {R4-R11,LR}
MOV             R6, R0
SUB             SP, SP, #0x24
BNE             loc_1B2D0
BL              sub_1E644
MOV             R4, R0
MOV             R0, R6
BL              sub_1A7A8
SUBS            R5, R0, #0
BEQ             loc_1B358
LDR             R6, [R5,#4]
CMP             R6, #0
MOVNE           R4, #0
LDRNE           R6, =aEncryptedKeysN ; "encrypted keys not supported currently"
BNE             loc_1AE94
LDR             R7, [R5,#0x28]
ADD             R3, SP, #0x24+var_C
STR             R3, [SP,#0x24+var_24]
ADD             R2, SP, #0x24+var_14
ADD             R3, SP, #0x24+n
LDR             R1, [R5,#0x2C]
MOV             R0, R7
BL              sub_1AC04
CMP             R0, #0
BLT             loc_1B2C4
LDR             R3, [SP,#0x24+var_14]
CMP             R3, #0x10
BNE             loc_1B2C4
LDR             R2, [SP,#0x24+n]
CMP             R2, #0
BLT             loc_1B2C4
LDR             R3, [R5,#0x28]
ADD             R7, R7, R0
LDR             R1, [R5,#0x2C]
ADD             R3, R3, R1
SUB             R3, R3, R7
CMP             R2, R3
BGT             loc_1B2C4
LDR             R9, [R5]
CMP             R9, #1
MOVEQ           R9, #9
BEQ             loc_1AE08
CMP             R9, #0
SUBNE           R9, R9, #2
MOVEQ           R9, #6
CLZNE           R9, R9
MOVNE           R9, R9,LSR#5

loc_1AE08
MOVW            R0, #0xBB8
BL              sub_12344
LDR             R3, [R5]
MOV             R8, R0
CMP             R3, #1
BNE             loc_1AE34
MOV             R2, #7
LDR             R1, =aSshRsa ; "ssh-rsa"
BL              sub_127F8
MOV             R3, #0
STR             R3, [R4]

loc_1AE34
LDR             R10, =0xFFFFD8F1
MOV             R11, #0
B               loc_1AFB4

loc_1AE40
LDR             R3, [R5,#0x2C]
MOV             R0, R7
LDR             R1, [R5,#0x28]
ADD             R2, SP, #0x24+var_14
ADD             R1, R1, R3
ADD             R3, SP, #0x24+var_C
STR             R3, [SP,#0x24+var_24]
SUB             R1, R1, R7
ADD             R3, SP, #0x24+n
BL              sub_1AC04
CMP             R0, #0
ADD             R7, R7, R0
BGE             loc_1AEEC

loc_1AE74
LDR             R6, =aAsn1DecodingFa ; "ASN.1 decoding failure"

loc_1AE78
MOV             R4, #0

loc_1AE7C
CMP             R8, #0
BEQ             loc_1AE94
MOV             R0, R8
BL              sub_1238C
MOV             R0, R8  ; ptr
BL              j_free

loc_1AE94
LDR             R1, [R5,#0x30]
LDR             R0, [R5,#0x28]
BL              j_explicit_bzero
LDR             R0, [R5,#0x28] ; ptr
BL              free
MOV             R3, #0
MOV             R1, #0x34 ; '4'
STR             R3, [R5,#0x28]
MOV             R0, R5
BL              j_explicit_bzero
MOV             R0, R5  ; ptr
BL              free
CMP             R6, #0
BEQ             loc_1AEE0
LDR             R3, =stderr
MOV             R2, R6
LDR             R1, =aErrorS ; "Error: %s\n"
LDR             R0, [R3] ; stream
BL              fprintf

loc_1AEE0
MOV             R0, R4
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_1AEEC
LDR             R3, [SP,#0x24+var_14]
CMP             R3, #2
BNE             loc_1AE74
LDR             R2, [SP,#0x24+n]
CMP             R2, #0
BLT             loc_1AE74
LDR             R3, [R5,#0x28]
LDR             R1, [R5,#0x2C]
ADD             R3, R3, R1
SUB             R3, R3, R7
CMP             R2, R3
BGT             loc_1AE74
CMP             R6, #0
LDR             R3, [R5]
BNE             loc_1AF68
CMP             R3, #0
BLT             loc_1AF48
CMP             R3, #1
MOVLE           R3, R6
BLE             loc_1AF4C
CMP             R3, #2
MOVEQ           R3, #1
BEQ             loc_1AF4C

loc_1AF48
MOV             R3, #0xFFFFFFFF

loc_1AF4C
CMP             R2, #1
BNE             loc_1AF60
LDRB            R2, [R7]
CMP             R2, R3
BEQ             loc_1AFA8

loc_1AF60
LDR             R6, =aVersionNumberM ; "Version number mismatch"
B               loc_1AE78

loc_1AF68
CMP             R3, #1
BNE             loc_1B1D0
CMP             R6, #1
MOVEQ           R10, R2
MOVEQ           R11, R7
BEQ             loc_1AFA8
SUB             R3, R6, #2
CMP             R3, #3
BHI             loc_1AFA8
MOV             R1, R7
MOV             R0, R8
BL              sub_127F8
CMP             R6, #2
MOVEQ           R2, R10
MOVEQ           R1, R11
BEQ             loc_1B1DC

loc_1AFA8
LDR             R0, [SP,#0x24+n]
ADD             R6, R6, #1
ADD             R7, R7, R0

loc_1AFB4
CMP             R6, R9
BNE             loc_1AE40
LDR             R3, [R5]
CMP             R3, #2
BNE             loc_1B270
LDR             R3, [R5,#0x2C]
ADD             R10, SP, #0x24+var_C
LDR             R1, [R5,#0x28]
ADD             R2, SP, #0x24+var_14
STR             R10, [SP,#0x24+var_24]
MOV             R0, R7
ADD             R1, R1, R3
ADD             R3, SP, #0x24+n
SUB             R1, R1, R7
BL              sub_1AC04
CMP             R0, #0
BLT             loc_1AE74
LDR             R3, [SP,#0x24+var_14]
CMP             R3, #4
BNE             loc_1AE74
LDR             R9, [SP,#0x24+n]
CMP             R9, #0
BLT             loc_1AE74
LDR             R3, [R5,#0x2C]
ADD             R7, R7, R0
LDR             R1, [R5,#0x28]
ADD             R1, R1, R3
SUB             R3, R1, R7
CMP             R9, R3
BGT             loc_1AE74
ADD             R6, R7, R9
STR             R10, [SP,#0x24+var_24]
SUB             R1, R1, R6
MOV             R0, R6
ADD             R3, SP, #0x24+n
ADD             R2, SP, #0x24+var_14
BL              sub_1AC04
CMP             R0, #0
ADD             R6, R6, R0
BLT             loc_1AE74
LDR             R3, [SP,#0x24+var_14]
CMP             R3, #0
BNE             loc_1AE74
LDR             R3, [SP,#0x24+n]
CMP             R3, #0
BLT             loc_1AE74
LDR             R3, [R5,#0x2C]
ADD             R2, SP, #0x24+var_14
LDR             R1, [R5,#0x28]
MOV             R0, R6
STR             R10, [SP,#0x24+var_24]
ADD             R1, R1, R3
ADD             R3, SP, #0x24+n
SUB             R1, R1, R6
BL              sub_1AC04
CMP             R0, #0
ADD             R10, R6, R0
BLT             loc_1AE74
LDR             R2, [SP,#0x24+var_14]
CMP             R2, #6
BNE             loc_1AE74
LDR             R6, [SP,#0x24+n]
CMP             R6, #0
BLT             loc_1AE74
LDRD            R2, R3, [R5,#0x28]
ADD             R3, R3, R2
SUB             R2, R3, R10
STR             R3, [SP,#0x24+var_18]
CMP             R6, R2
BGT             loc_1AE74
CMP             R6, #8
BNE             loc_1B1E8
MOV             R2, R6  ; n
LDR             R1, =unk_363C8 ; s2
MOV             R0, R10 ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_1B2BC
LDR             R11, =unk_4C424
MOV             R2, #1
STR             R2, [R4]

loc_1B0F8
LDR             R1, [SP,#0x24+var_18]
ADD             R6, R10, R6
ADD             R3, SP, #0x24+var_C
MOV             R0, R6
STR             R3, [SP,#0x24+var_24]
ADD             R2, SP, #0x24+var_14
SUB             R1, R1, R6
ADD             R3, SP, #0x24+n
BL              sub_1AC04
CMP             R0, #0
ADD             R6, R6, R0
BLT             loc_1AE74
LDR             R3, [SP,#0x24+var_14]
CMP             R3, #1
BNE             loc_1AE74
LDR             R3, [SP,#0x24+n]
CMP             R3, #0
BLT             loc_1AE74
LDR             R3, [R5,#0x2C]
MOV             R0, R6
LDR             R1, [R5,#0x28]
ADD             R2, SP, #0x24+var_14
ADD             R1, R1, R3
ADD             R3, SP, #0x24+var_C
STR             R3, [SP,#0x24+var_24]
SUB             R1, R1, R6
ADD             R3, SP, #0x24+n
BL              sub_1AC04
CMP             R0, #0
ADD             R6, R6, R0
BLT             loc_1AE74
LDR             R3, [SP,#0x24+var_14]
CMP             R3, #3
BNE             loc_1AE74
LDR             R2, [SP,#0x24+n]
CMP             R2, #0
BLT             loc_1AE74
LDR             R3, [R5,#0x28]
LDR             R1, [R5,#0x2C]
ADD             R3, R3, R1
SUB             R3, R3, R6
CMP             R2, R3
BGT             loc_1AE74
ADD             R1, R6, #1
SUB             R2, R2, #1
MOV             R0, R8
BL              sub_127C4
MOV             R1, R11
MOV             R0, R8
BL              sub_193DC
SUBS            R6, R0, #0
BNE             loc_1B23C

loc_1B1C8
LDR             R6, =aErrorParsingEc ; "Error parsing ECC key"
B               loc_1AE78

loc_1B1D0
CMP             R3, #0
BNE             loc_1AFA8
MOV             R1, R7

loc_1B1DC
MOV             R0, R8
BL              sub_127F8
B               loc_1AFA8

loc_1B1E8
CMP             R6, #5
BNE             loc_1B2BC
MOV             R2, R6  ; n
LDR             R1, =unk_363D0 ; s2
MOV             R0, R10 ; s1
BL              memcmp
CMP             R0, #0
MOVEQ           R2, #2
LDREQ           R11, =unk_4C414
STREQ           R2, [R4]
BEQ             loc_1B0F8
MOV             R2, R6  ; n
LDR             R1, =unk_363D5 ; s2
MOV             R0, R10 ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_1B2BC
MOV             R2, #3
LDR             R11, =unk_4C404
STR             R2, [R4]
B               loc_1B0F8

loc_1B23C
MOV             R1, #0
ADD             R0, R6, #0x18
BL              sub_12224
MOV             R2, R9
MOV             R1, R7
LDR             R0, [R6,#0x18]
BL              sub_2DE30
CMP             R0, #0
BNE             loc_1B1C8
LDR             R1, [R4]
MOV             R0, R4
BL              sub_1E708
STR             R6, [R0]

loc_1B270
LDR             R3, [R5]
CMP             R3, #1
MOVHI           R6, #0
BHI             loc_1AE7C
MOV             R1, #0
MOV             R0, R8
BL              sub_124A0
ADD             R2, SP, #0x24+var_4
MOV             R3, #0x50 ; 'P'
STR             R3, [R2,#-4]!
MOV             R1, R4
MOV             R0, R8
BL              sub_1E858
SUBS            R6, R0, #0
BEQ             loc_1AE7C
MOV             R0, R4
LDR             R6, =aUnableToCreate ; "unable to create key structure"
BL              sub_1EA60
B               loc_1AE78

loc_1B2BC
LDR             R6, =aUnknownEccKeyT ; "Unknown ECC key type"
B               loc_1AE78

loc_1B2C4
MOV             R4, R6
LDR             R6, =aAsn1DecodingFa ; "ASN.1 decoding failure"
B               loc_1AE94

loc_1B2D0
CMP             R2, #0
MOV             R4, R2
BNE             loc_1B358
MOVW            R0, #0x6A4
BL              sub_12344
MOV             R1, R6
MOV             R5, R0
BL              sub_1867C
CMN             R0, #1
BEQ             loc_1B36C
MOV             R1, R4
MOV             R0, R5
BL              sub_124A0
BL              sub_1E644
ADD             R2, SP, #0x24+var_4
MOV             R3, #0x50 ; 'P'
MOV             R1, R0
MOV             R4, R0
STR             R3, [R2,#-4]!
MOV             R0, R5
BL              sub_1E858
CMN             R0, #1
BEQ             loc_1B340
MOV             R0, R5  ; ptr
BL              j_free
LDR             R3, [SP,#0x24+var_8]
STR             R3, [R4]
B               loc_1AEE0

loc_1B340
CMP             R5, #0
BEQ             loc_1B350

loc_1B348               ; ptr
MOV             R0, R5
BL              j_free

loc_1B350
CMP             R4, #0
BNE             loc_1B360

loc_1B358
MOV             R4, #0
B               loc_1AEE0

loc_1B360
MOV             R0, R4
BL              sub_1EA60
B               loc_1B358

loc_1B36C
CMP             R5, #0
BNE             loc_1B348
B               loc_1B358
; End of function sub_1AD48

off_1B378 DCD aEncryptedKeysN ; "encrypted keys not supported currently"
off_1B37C DCD aSshRsa   ; "ssh-rsa"
dword_1B380 DCD 0xFFFFD8F1
off_1B384 DCD aAsn1DecodingFa ; "ASN.1 decoding failure"
off_1B388 DCD stderr
off_1B38C DCD aErrorS   ; "Error: %s\n"
off_1B390 DCD aVersionNumberM ; "Version number mismatch"
off_1B394 DCD unk_363C8
off_1B398 DCD unk_4C424
off_1B39C DCD aErrorParsingEc ; "Error parsing ECC key"
off_1B3A0 DCD unk_363D0
off_1B3A4 DCD unk_4C414
off_1B3A8 DCD unk_363D5
off_1B3AC DCD unk_4C404
off_1B3B0 DCD aUnableToCreate ; "unable to create key structure"
off_1B3B4 DCD aUnknownEccKeyT ; "Unknown ECC key type"



; unsigned int __fastcall sub_1B3B8(const char *, int *, signed int, unsigned int)
sub_1B3B8

var_118= -0x118
var_114= -0x114
var_110= -0x110
s= -0x10C
n= -0x108
var_104= -0x104
var_100= -0x100
var_F8= -0xF8
var_F4= -0xF4
var_F0= -0xF0
var_E0= -0xE0
var_D0= -0xD0
var_C0= -0xC0
var_B0= -0xB0
var_AC= -0xAC
var_A8= -0xA8
var_A4= -0xA4
var_A0= -0xA0
var_9C= -0x9C
var_98= -0x98
var_94= -0x94
var_90= -0x90
var_8C= -0x8C
var_88= -0x88
var_84= -0x84
var_80= -0x80
var_7C= -0x7C
var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
ptr= -0x68
var_4= -4

CMP             R3, #1
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x11C
MOV             R8, R1
MOV             R5, R3
STR             R0, [SP,#0x11C+s]
STR             R2, [SP,#0x11C+var_100]
BNE             loc_1BC74
LDR             R7, [R1]
CMP             R7, #0
BNE             loc_1B8F4
MOVW            R0, #0xBB8
BL              sub_12344
LDR             R2, [R8]
MOV             R4, R0
MOV             R1, R8
BL              sub_1E9F8
MOV             R1, R7
MOV             R0, R4
BL              sub_124A0
MOV             R0, R4
BL              sub_12664
MOV             R1, R0
MOV             R0, R4
BL              sub_1250C
ADD             R3, SP, #0x11C+var_F8
STR             R5, [SP,#0x11C+var_AC]
STR             R3, [SP,#0x11C+var_B0]
LDR             R3, [R8]
STRB            R7, [SP,#0x11C+var_F8]
CMP             R3, #0
BNE             loc_1B884
LDR             R3, [R8,#0xC]
LDR             R2, [R3,#0xC]
CMP             R2, #0
BEQ             loc_1B454
LDR             R3, [R3,#0x10]
CMP             R3, #0
BNE             loc_1B48C

loc_1B454
LDR             R3, =stderr
LDR             R0, =aPre033Dropbear ; "Pre-0.33 Dropbear keys cannot be conver"...
LDR             R1, [R3] ; stream

loc_1B460
BL              fputs
CMP             R4, #0
MOVEQ           R5, R4
BEQ             loc_1BB58
MOV             R5, #0
MOV             R6, R5

loc_1B478
MOV             R0, R4
BL              sub_1238C
MOV             R0, R4  ; ptr
BL              j_free
B               loc_1BB40

loc_1B48C
MOV             R0, R4
BL              sub_12664
MOV             R6, R0
MOV             R1, R0
STR             R0, [SP,#0x11C+var_9C]
MOV             R0, R4
BL              sub_125E4
MOV             R1, R6
STR             R0, [SP,#0x11C+var_A0]
MOV             R0, R4
BL              sub_1250C
MOV             R0, R4
BL              sub_12664
MOV             R6, R0
MOV             R1, R0
STR             R0, [SP,#0x11C+var_A4]
MOV             R0, R4
BL              sub_125E4
MOV             R1, R6
STR             R0, [SP,#0x11C+var_A8]
MOV             R0, R4
BL              sub_1250C
MOV             R0, R4
BL              sub_12664
MOV             R6, R0
MOV             R1, R0
STR             R0, [SP,#0x11C+var_94]
MOV             R0, R4
BL              sub_125E4
MOV             R1, R6
STR             R0, [SP,#0x11C+var_98]
MOV             R0, R4
BL              sub_1250C
MOV             R0, R4
BL              sub_12664
MOV             R6, R0
MOV             R1, R0
STR             R0, [SP,#0x11C+var_8C]
MOV             R0, R4
BL              sub_125E4
MOV             R1, R6
STR             R0, [SP,#0x11C+var_90]
MOV             R0, R4
BL              sub_1250C
MOV             R0, R4
BL              sub_12664
MOV             R1, R0
MOV             R6, R0
STR             R0, [SP,#0x11C+var_84]
MOV             R0, R4
BL              sub_125E4
MOV             R1, R6
STR             R0, [SP,#0x11C+var_88]
MOV             R0, R4
BL              sub_1250C
ADD             R0, SP, #0x11C+var_C0
BL              sub_121B0
ADD             R0, SP, #0x11C+var_F0
BL              sub_121B0
ADD             R0, SP, #0x11C+var_E0
BL              sub_121B0
ADD             R0, SP, #0x11C+var_D0
BL              sub_121B0
LDR             R3, [R8,#0xC]
ADD             R2, SP, #0x11C+var_C0
MOV             R1, R5
LDR             R0, [R3,#0xC]
BL              sub_2E7D4
CMP             R0, #0
LDRNE           R3, =stderr
LDRNE           R0, =aBignumErrorFor ; "Bignum error for p-1\n"
LDRNE           R1, [R3]
BNE             loc_1B460
LDR             R3, [R8,#0xC]
ADD             R2, SP, #0x11C+var_F0
ADD             R1, SP, #0x11C+var_C0
LDR             R0, [R3,#8]
BL              sub_2C470
CMP             R0, #0
LDRNE           R3, =stderr
LDRNE           R0, =aBignumErrorFor_0 ; "Bignum error for dmp1\n"
LDRNE           R1, [R3]
BNE             loc_1B460
LDR             R3, [R8,#0xC]
ADD             R2, SP, #0x11C+var_C0
MOV             R1, R5
LDR             R0, [R3,#0x10]
BL              sub_2E7D4
CMP             R0, #0
LDRNE           R3, =stderr
LDRNE           R0, =aBignumErrorFor_1 ; "Bignum error for q-1\n"
LDRNE           R1, [R3]
BNE             loc_1B460
LDR             R3, [R8,#0xC]
ADD             R2, SP, #0x11C+var_E0
ADD             R1, SP, #0x11C+var_C0
LDR             R0, [R3,#8]
BL              sub_2C470
CMP             R0, #0
LDRNE           R3, =stderr
LDRNE           R0, =aBignumErrorFor_2 ; "Bignum error for dmq1\n"
LDRNE           R1, [R3]
BNE             loc_1B460
LDR             R3, [R8,#0xC]
ADD             R2, SP, #0x11C+var_D0
LDR             R1, [R3,#0xC]
LDR             R0, [R3,#0x10]
BL              sub_2BBA8
SUBS            R9, R0, #0
LDRNE           R3, =stderr
LDRNE           R0, =aBignumErrorFor_3 ; "Bignum error for iqmp\n"
LDRNE           R1, [R3]
BNE             loc_1B460
MOV             R0, #0x7D0
BL              sub_12344
ADD             R1, SP, #0x11C+var_F0
MOV             R6, R0
BL              sub_1282C
ADD             R1, SP, #0x11C+var_E0
MOV             R0, R6
BL              sub_1282C
ADD             R1, SP, #0x11C+var_D0
MOV             R0, R6
BL              sub_1282C
MOV             R1, #0
MOV             R0, R6
BL              sub_124A0
ADD             R0, SP, #0x11C+var_F0
BL              sub_29D74
ADD             R0, SP, #0x11C+var_E0
BL              sub_29D74
ADD             R0, SP, #0x11C+var_D0
BL              sub_29D74
ADD             R0, SP, #0x11C+var_C0
BL              sub_29D74
MOV             R0, R6
BL              sub_12664
MOV             R7, R0
MOV             R1, R0
STR             R0, [SP,#0x11C+var_7C]
MOV             R0, R6
BL              sub_125E4
MOV             R1, R7
STR             R0, [SP,#0x11C+var_80]
MOV             R0, R6
BL              sub_1250C
MOV             R0, R6
BL              sub_12664
MOV             R7, R0
MOV             R1, R0
STR             R0, [SP,#0x11C+var_74]
MOV             R0, R6
BL              sub_125E4
MOV             R1, R7
STR             R0, [SP,#0x11C+var_78]
MOV             R0, R6
BL              sub_1250C
MOV             R0, R6
BL              sub_12664
MOV             R7, R0
MOV             R1, R0
STR             R0, [SP,#0x11C+var_6C]
MOV             R0, R6
BL              sub_125E4
MOV             R1, R7
MOV             R7, #0
STR             R0, [SP,#0x11C+var_70]
MOV             R0, R6
BL              sub_1250C

loc_1B730
ADD             R3, SP, #0x11C+var_B0
MOV             R1, #2
ADD             R3, R3, R7
ADD             R7, R7, #8
LDR             R10, [R3,#4]
MOV             R3, #0
MOV             R0, R3
MOV             R2, R10
BL              sub_1A710
CMP             R7, #0x48 ; 'H'
ADD             R9, R0, R9
ADD             R9, R10, R9
BNE             loc_1B730
LDR             R3, =aBeginRsaPrivat ; "-----BEGIN RSA PRIVATE KEY-----\n"
LDR             R7, =aEndRsaPrivateK ; "-----END RSA PRIVATE KEY-----\n"
STR             R3, [SP,#0x11C+var_110]
MOV             R3, #9
STR             R3, [SP,#0x11C+var_104]

loc_1B778
MOV             R2, R9
MOV             R1, #0x10
MOV             R3, #0x20 ; ' '
MOV             R0, #0
BL              sub_1A710
ADD             R3, R0, R9
STR             R3, [SP,#0x11C+var_114]
LDR             R3, [SP,#0x11C+var_100]
CMP             R3, #0
LDRNE           R3, [SP,#0x11C+var_114]
LDREQ           R11, [SP,#0x11C+var_114]
ADDNE           R3, R3, #8
BICNE           R11, R3, #7
MOV             R0, R11
BL              sub_18718
MOV             R3, #0x20 ; ' '
MOV             R2, R9
MOV             R1, #0x10
MOV             R10, R0
BL              sub_1A710
MOV             R3, #0
MOV             R9, R0

loc_1B7D0
STR             R3, [SP,#0x11C+var_118]
LDR             R3, [SP,#0x11C+var_118]
LDR             R2, [SP,#0x11C+var_104]
CMP             R3, R2
BLT             loc_1B89C

loc_1B7E4
LDR             R3, [R8]
SUB             R3, R3, #1
CMP             R3, #2
BHI             loc_1BB64
MOV             R0, #0x190
BL              sub_12344
LDR             R1, [R8]
MOV             R7, R0
MOV             R0, R8
BL              sub_1E708
LDR             R3, [R0]
MOV             R9, R0
MOV             R1, #0xA
MOV             R0, R7
LDR             R3, [R3,#8]
LDR             R11, [R3]
MOV             R3, R11,LSL#1
ADD             R3, R3, #1
STR             R3, [SP,#0x11C+ptr]
BL              sub_12624
MOV             R3, #0
MOV             R2, #1
MOV             R1, #2
BL              sub_1A710
MOV             R1, R0
MOV             R0, R7
BL              sub_124C4
MOV             R1, #1
MOV             R0, R7
BL              sub_125A4
LDR             R3, [R9]
LDR             R0, [R3,#0x18]
BL              sub_2EB68
CMP             R11, R0
MOV             R10, R0
BGE             loc_1B918
LDR             R1, =aKeyimportC ; "keyimport.c"
MOVW            R2, #0x42B
LDR             R0, =aKSizeCurveSize ; "k_size <= curve_size"

loc_1B880
BL              sub_184D4

loc_1B884
MOV             R3, #0xFFFFFFFF
STR             R7, [SP,#0x11C+var_110]
MOV             R6, R7
STR             R3, [SP,#0x11C+var_104]
MOV             R9, R7
B               loc_1B778

loc_1B89C
LDR             R2, [SP,#0x11C+var_118]
ADD             R3, SP, #0x11C+var_B0
MOV             R1, #2
ADD             R0, R10, R9
ADD             R3, R3, R2,LSL#3
LDR             R3, [R3,#4]
STR             R3, [SP,#0x11C+n]
MOV             R3, #0
LDR             R2, [SP,#0x11C+n]
BL              sub_1A710
LDR             R3, [SP,#0x11C+var_118]
ADD             R9, R9, R0
ADD             R1, SP, #0x11C+var_B0
ADD             R0, R10, R9 ; dest
LDR             R2, [SP,#0x11C+n] ; n
LDR             R1, [R1,R3,LSL#3] ; src
BL              memcpy
LDR             R3, [SP,#0x11C+n]
ADD             R9, R3, R9
LDR             R3, [SP,#0x11C+var_118]
ADD             R3, R3, #1
B               loc_1B7D0

loc_1B8F4
MOV             R7, #0
LDR             R11, =0xFFFFD8F1
STR             R7, [SP,#0x11C+var_110]
MOV             R9, R7
STR             R7, [SP,#0x11C+var_114]
MOV             R10, R7
MOV             R6, R7
MOV             R4, R7
B               loc_1B7E4

loc_1B918
MOV             R1, #0xA
MOV             R0, R7
BL              sub_12624
MOV             R2, R10
MOV             R3, #0
MOV             R1, #4
BL              sub_1A710
MOV             R1, R0
MOV             R0, R7
BL              sub_124C4
LDR             R3, [R9]
MOV             R1, R10
MOV             R0, R7
LDR             R11, [R3,#0x18]
BL              sub_12624
MOV             R1, R0
MOV             R0, R11
BL              sub_2EACC
MOV             R1, R10
MOV             R0, R7
BL              sub_124C4
LDR             R3, [R8]
CMP             R3, #2
BEQ             loc_1BA8C
CMP             R3, #3
BEQ             loc_1BA98
CMP             R3, #1
LDRNE           R0, =aInternalError ; "Internal error"
BNE             loc_1BA88
LDR             R10, =unk_363C8
MOV             R8, #8

loc_1B994
MOV             R1, #0xA
MOV             R0, R7
BL              sub_12624
ADD             R2, R8, #2
MOV             R3, #0xA0
MOV             R1, #0
BL              sub_1A710
MOV             R1, R0
MOV             R0, R7
BL              sub_124C4
MOV             R1, #0xA
MOV             R0, R7
BL              sub_12624
MOV             R3, #0
MOV             R2, R8
MOV             R1, #6
BL              sub_1A710
MOV             R1, R0
MOV             R0, R7
BL              sub_124C4
MOV             R2, R8
MOV             R1, R10
MOV             R0, R7
ADD             R8, SP, #0x11C+var_4
BL              sub_127C4
MOV             R1, #0xA
MOV             R0, R7
BL              sub_12624
LDR             R2, [SP,#0x11C+ptr]
MOV             R3, #0xA0
MOV             R1, #1
ADD             R2, R2, #3
BL              sub_1A710
MOV             R1, R0
MOV             R0, R7
BL              sub_124C4
MOV             R1, #0xA
MOV             R0, R7
BL              sub_12624
LDR             R2, [SP,#0x11C+ptr]
MOV             R3, #0
MOV             R1, #3
ADD             R2, R2, #1
BL              sub_1A710
MOV             R1, R0
MOV             R0, R7
BL              sub_124C4
MOV             R1, #0
MOV             R0, R7
BL              sub_125A4
LDR             R1, [R8,#-0x64]!
MOV             R0, R7
LDR             R9, [R9]
BL              sub_12624
MOV             R2, R8
MOV             R1, R0
MOV             R0, R9
BL              sub_27634
SUBS            R8, R0, #0
BEQ             loc_1BAA0
LDR             R0, =aEccError ; "ECC error"

loc_1BA88
BL              sub_184AC

loc_1BA8C
LDR             R10, =unk_363D0

loc_1BA90
MOV             R8, #5
B               loc_1B994

loc_1BA98
LDR             R10, =unk_363D5
B               loc_1BA90

loc_1BAA0
MOV             R0, R7
LDR             R1, [SP,#0x11C+ptr]
BL              sub_124C4
MOV             R1, R8
MOV             R0, R7
BL              sub_124A0
MOV             R0, #0x3E8
BL              sub_18718
MOV             R3, #0x20 ; ' '
LDR             R2, [R7,#4]
MOV             R10, R0
MOV             R1, #0x10
BL              sub_1A710
LDM             R7, {R1,R2} ; n
MOV             R11, R0
ADD             R0, R10, R0 ; dest
BL              memcpy
LDR             R3, [R7,#4]
MOV             R0, R7
ADD             R11, R11, R3
BL              sub_1238C
MOV             R0, R7  ; ptr
LDR             R7, =aEndEcPrivateKe ; "-----END EC PRIVATE KEY-----\n"
BL              j_free
LDR             R3, =aBeginEcPrivate ; "-----BEGIN EC PRIVATE KEY-----\n"
STR             R3, [SP,#0x11C+var_110]

loc_1BB08
LDR             R3, [SP,#0x11C+var_100]
CMP             R3, #0
BEQ             loc_1BB9C
LDR             R3, =stderr
LDR             R0, =aEncryptedKeysA ; "Encrypted keys aren't supported current"...
LDR             R1, [R3] ; stream

loc_1BB20
MOV             R5, #0
BL              fputs

loc_1BB28
CMP             R10, #0
BEQ             loc_1BB38
MOV             R0, R10 ; ptr
BL              free

loc_1BB38
CMP             R4, #0
BNE             loc_1B478

loc_1BB40
CMP             R6, #0
BEQ             loc_1BB58
MOV             R0, R6
BL              sub_1238C
MOV             R0, R6  ; ptr

loc_1BB54
BL              j_free

loc_1BB58
MOV             R0, R5

loc_1BB5C
ADD             SP, SP, #0x11C
POP             {R4-R11,PC}

loc_1BB64
LDR             R3, [SP,#0x11C+var_114]
CMP             R9, R3
ADDEQ           R3, R10, R9
SUBEQ           R9, R11, R9
BEQ             loc_1BB8C
MOVW            R2, #0x47B
LDR             R1, =aKeyimportC ; "keyimport.c"
LDR             R0, =aPosLen ; "pos == len"
B               loc_1B880

loc_1BB88
STRB            R9, [R3],#1

loc_1BB8C
SUB             R2, R3, R10
CMP             R2, R11
BLT             loc_1BB88
B               loc_1BB08

loc_1BB9C               ; s
LDR             R0, [SP,#0x11C+s]
BL              strlen
CMP             R0, #1
BNE             loc_1BBC4
LDR             R3, [SP,#0x11C+s]
LDRB            R3, [R3]
CMP             R3, #0x2D ; '-'
LDREQ           R3, =stdout
LDREQ           R8, [R3]
BEQ             loc_1BBD4

loc_1BBC4
LDR             R1, =aWb ; "wb"
LDR             R0, [SP,#0x11C+s]
BL              fopen64
MOV             R8, R0

loc_1BBD4
CMP             R8, #0
LDREQ           R3, =stderr
LDREQ           R0, =aFailedOpeningO ; "Failed opening output file\n"
LDREQ           R1, [R3]
BEQ             loc_1BB20
MOV             R9, R10
MOV             R1, R8  ; stream
LDR             R0, [SP,#0x11C+var_110] ; s
BL              fputs

loc_1BBF8
CMP             R11, #0
BGT             loc_1BC18
MOV             R1, R8  ; stream
MOV             R0, R7  ; s
BL              fputs
MOV             R0, R8  ; stream
BL              fclose
B               loc_1BB28

loc_1BC18
CMP             R11, #0x30 ; '0'
ADD             R2, SP, #0x11C+ptr
MOVLT           R3, R11
MOVGE           R3, #0x30 ; '0'
STR             R3, [SP,#0x11C+var_118]
MOV             R3, #0x64 ; 'd'
STR             R3, [SP,#0x11C+var_F4]
MOV             R0, R9
ADD             R3, SP, #0x11C+var_F4
LDR             R1, [SP,#0x11C+var_118]
BL              sub_26D2C
LDR             R3, [SP,#0x11C+var_118]
MOV             R1, #1  ; size
LDR             R2, [SP,#0x11C+var_F4] ; n
ADD             R0, SP, #0x11C+ptr ; ptr
ADD             R9, R9, R3
SUB             R11, R11, R3
MOV             R3, R8  ; s
BL              fwrite
MOV             R1, R8  ; stream
MOV             R0, #0xA ; c
BL              fputc
B               loc_1BBF8

loc_1BC74
CMP             R3, #0
MOVNE           R0, #0
BNE             loc_1BB5C
MOVW            R0, #0x6A4
BL              sub_12344
LDR             R2, [R8]
MOV             R1, R8
MOV             R4, R0
BL              sub_1E9F8
LDR             R1, =(aChannelRecvwin+0x26) ; "w"
LDR             R0, [SP,#0x11C+s]
BL              fopen64
SUBS            R6, R0, #0
BEQ             loc_1BD18
MOV             R1, R5
MOV             R0, R4
BL              sub_124A0

loc_1BCB8
LDMIB           R4, {R1,R3}
SUB             R1, R1, R3
MOV             R0, R4
BL              sub_125E4
LDMIB           R4, {R1,R2}
SUB             R2, R1, R2 ; n
MOV             R3, R6  ; s
MOV             R1, #1  ; size
BL              fwrite
MOV             R5, R0
MOV             R1, R0
MOV             R0, R4
BL              sub_1250C
CMP             R5, #0
BLE             loc_1BD00
LDRD            R2, R3, [R4,#4]
CMP             R2, R3
BNE             loc_1BCB8

loc_1BD00               ; stream
MOV             R0, R6
BL              fclose
LDMIB           R4, {R0,R5}
SUB             R5, R5, R0
CLZ             R5, R5
MOV             R5, R5,LSR#5

loc_1BD18
MOV             R0, R4
B               loc_1BB54
; End of function sub_1B3B8

off_1BD20 DCD stderr
off_1BD24 DCD aPre033Dropbear ; "Pre-0.33 Dropbear keys cannot be conver"...
off_1BD28 DCD aBignumErrorFor ; "Bignum error for p-1\n"
off_1BD2C DCD aBignumErrorFor_0 ; "Bignum error for dmp1\n"
off_1BD30 DCD aBignumErrorFor_1 ; "Bignum error for q-1\n"
off_1BD34 DCD aBignumErrorFor_2 ; "Bignum error for dmq1\n"
off_1BD38 DCD aBignumErrorFor_3 ; "Bignum error for iqmp\n"
off_1BD3C DCD aBeginRsaPrivat ; "-----BEGIN RSA PRIVATE KEY-----\n"
off_1BD40 DCD aEndRsaPrivateK ; "-----END RSA PRIVATE KEY-----\n"
off_1BD44 DCD aKeyimportC ; "keyimport.c"
off_1BD48 DCD aKSizeCurveSize ; "k_size <= curve_size"
dword_1BD4C DCD 0xFFFFD8F1
off_1BD50 DCD aInternalError ; "Internal error"
off_1BD54 DCD unk_363C8
off_1BD58 DCD aEccError ; "ECC error"
off_1BD5C DCD unk_363D0
off_1BD60 DCD unk_363D5
off_1BD64 DCD aEndEcPrivateKe ; "-----END EC PRIVATE KEY-----\n"
off_1BD68 DCD aBeginEcPrivate ; "-----BEGIN EC PRIVATE KEY-----\n"
off_1BD6C DCD aEncryptedKeysA ; "Encrypted keys aren't supported current"...
off_1BD70 DCD aPosLen   ; "pos == len"
off_1BD74 DCD stdout
off_1BD78 DCD aWb       ; "wb"
off_1BD7C DCD aFailedOpeningO ; "Failed opening output file\n"
off_1BD80 DCD aChannelRecvwin+0x26 ; "w"



; _DWORD *__fastcall sub_1BD84(int *, int)
sub_1BD84
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, #0x10
MOV             R5, R1
BL              sub_18718
MOV             R3, #0
STR             R5, [R0]
STR             R3, [R0,#4]
LDR             R3, [R4]
STR             R4, [R0,#0xC]
CMP             R3, #0
LDRNE           R3, [R4,#4]
STREQ           R0, [R4]
STREQ           R3, [R0,#8]
STRNE           R3, [R0,#8]
STRNE           R0, [R3,#4]
STR             R0, [R4,#4]
POP             {R4-R6,PC}
; End of function sub_1BD84




; _DWORD *sub_1BDCC()
sub_1BDCC
PUSH            {R4,LR}
MOV             R0, #8
BL              sub_18718
MOV             R2, #0
STR             R2, [R0,#4]
STR             R2, [R0]
POP             {R4,PC}
; End of function sub_1BDCC




; int __fastcall sub_1BDE8(int *)
sub_1BDE8
LDR             R2, [R0,#0xC]
LDR             R1, [R0,#4]
PUSH            {R4,LR}
LDR             R3, [R2]
LDR             R4, [R0]
CMP             R3, R0
LDR             R3, [R2,#4]
STREQ           R1, [R2]
CMP             R3, R0
LDR             R3, [R0,#8]
STREQ           R3, [R2,#4]
CMP             R3, #0
STRNE           R1, [R3,#4]
LDR             R2, [R0,#4]
CMP             R2, #0
STRNE           R3, [R2,#8]
BL              free
MOV             R0, R4
POP             {R4,PC}
; End of function sub_1BDE8




; _DWORD *sub_1BE34()
sub_1BE34
PUSH            {R4,LR}
MOV             R0, #4
BL              sub_18718
MOV             R2, #1
LDR             R3, =byte_4CA40
STR             R0, [R3,#(dword_4CB38 - 0x4CA40)]
STR             R2, [R3,#(dword_4CB3C - 0x4CA40)]
MOV             R3, #0
STR             R3, [R0]
POP             {R4,PC}
; End of function sub_1BE34

off_1BE5C DCD byte_4CA40



; int __fastcall sub_1BE60(int result)
sub_1BE60
LDR             R3, =byte_4CA40
PUSH            {R4-R6,LR}
MOV             R6, #1
LDR             R12, [R3,#(dword_4CB38 - 0x4CA40)]
LDR             LR, [R3,#(dword_4CB3C - 0x4CA40)]
ADD             LR, R12, LR,LSL#2

loc_1BE78
CMP             R12, LR
POPEQ           {R4-R6,PC}
LDR             R2, [R12],#4
CMP             R2, #0
LDRNE           R4, [R2,#8]
ADDNE           R4, R2, R4,LSL#2
BEQ             loc_1BE78

loc_1BE94
CMP             R2, R4
BEQ             loc_1BE78
LDR             R3, [R2],#4
CMP             R3, #0
ADD             R1, R3, #0x1F
MOVGE           R1, R3
RSBS            R5, R3, #0
MOV             R1, R1,ASR#5
AND             R5, R5, #0x1F
AND             R3, R3, #0x1F
RSBPL           R3, R5, #0
LDR             R5, [R0,R1,LSL#2]
ORR             R3, R5, R6,LSL R3
STR             R3, [R0,R1,LSL#2]
B               loc_1BE94
; End of function sub_1BE60

off_1BED0 DCD byte_4CA40



; int __fastcall sub_1BED4(int result)
sub_1BED4
PUSH            {R4-R10,LR}
MOV             R8, R0
LDR             R7, =byte_4CA40
MOV             R5, #0
MOV             R9, #1

loc_1BEE8
LDR             R3, [R7,#(dword_4CB3C - 0x4CA40)]
CMP             R3, R5
POPLS           {R4-R10,PC}
LDR             R3, [R7,#(dword_4CB38 - 0x4CA40)]
LDR             R4, [R3,R5,LSL#2]
CMP             R4, #0
MOVNE           R6, #0
BNE             loc_1BF50

loc_1BF08
ADD             R5, R5, #1
B               loc_1BEE8

loc_1BF10
LDR             R1, [R4,R6,LSL#2]
CMP             R1, #0
ADD             R3, R1, #0x1F
MOVGE           R3, R1
RSBS            R0, R1, #0
MOV             R3, R3,ASR#5
AND             R0, R0, #0x1F
AND             R2, R1, #0x1F
LDR             R3, [R8,R3,LSL#2]
RSBPL           R2, R0, #0
ANDS            R3, R3, R9,LSL R2
BEQ             loc_1BF4C
LDR             R3, [R4,#0x10]
MOV             R0, R4
BLX             R3

loc_1BF4C
ADD             R6, R6, #1

loc_1BF50
LDR             R3, [R4,#8]
CMP             R3, R6
BHI             loc_1BF10
B               loc_1BF08
; End of function sub_1BED4

off_1BF60 DCD byte_4CA40



; _DWORD *__fastcall sub_1BF64(int *, int, int, int, int, int)
sub_1BF64

arg_0=  0x24
arg_4=  0x28

PUSH            {R3-R11,LR}
MOV             R7, R0
LDR             R4, =byte_4CA40
MOV             R9, R3
MOV             R8, R1
MOV             R10, R2
MOV             R5, #0
LDR             R3, [R4,#(dword_4CB3C - 0x4CA40)]
LDR             R0, [R4,#(dword_4CB38 - 0x4CA40)]

loc_1BF88
CMP             R3, R5
MOV             R6, R5,LSL#2
BNE             loc_1BFDC
CMP             R3, #0x14
ADDHI           R6, R7, R6
MOVHI           R4, #0
BHI             loc_1C058
ADD             R1, R5, #1
MOV             R1, R1,LSL#2
BL              sub_18888
LDR             R2, [R4,#(dword_4CB3C - 0x4CA40)]
MOV             R3, R5
MOV             R1, #0
STR             R0, [R4,#(dword_4CB38 - 0x4CA40)]
ADD             R2, R2, #1
STR             R2, [R4,#(dword_4CB3C - 0x4CA40)]

loc_1BFC8
CMP             R2, R3
BLS             loc_1BFE8
STR             R1, [R0,R3,LSL#2]
ADD             R3, R3, #1
B               loc_1BFC8

loc_1BFDC
LDR             R2, [R0,R5,LSL#2]
CMP             R2, #0
BNE             loc_1C044

loc_1BFE8
MOV             R11, R8,LSL#2
LDR             R2, =byte_4CA40
MOV             R3, R7
ADD             R1, R11, R7

loc_1BFF8
CMP             R1, R3
BNE             loc_1C06C
MOV             R0, #0x20 ; ' '
BL              sub_18718
MOV             R2, R11 ; n
STR             R5, [R0,#0xC]
STR             R10, [R0,#0x18]
MOV             R1, R7  ; src
STR             R9, [R0,#0x1C]
STR             R8, [R0,#8]
BL              memcpy
LDR             R2, [SP,#4+arg_0]
MOV             R3, R0
STR             R2, [R0,#0x10]
LDR             R2, [SP,#4+arg_4]
STR             R2, [R0,#0x14]
LDR             R2, [R4,#(dword_4CB38 - 0x4CA40)]
STR             R0, [R2,R6]
B               loc_1C064

loc_1C044
ADD             R5, R5, #1
B               loc_1BF88

loc_1C04C
ADD             R4, R4, #1
LDR             R0, [R6] ; fd
BL              close

loc_1C058
CMP             R4, R8
BNE             loc_1C04C
MOV             R3, #0

loc_1C064
MOV             R0, R3
POP             {R3-R11,PC}

loc_1C06C
LDR             R0, [R3],#4
LDR             R12, [R2,#(dword_4CA54 - 0x4CA40)]
CMP             R12, R0
STRGE           R12, [R2,#(dword_4CA54 - 0x4CA40)]
STRLT           R0, [R2,#(dword_4CA54 - 0x4CA40)]
B               loc_1BFF8
; End of function sub_1BF64

off_1C084 DCD byte_4CA40



; int __fastcall sub_1C088(int, int, int (__fastcall *)(int, _DWORD))
sub_1C088
LDR             R3, =byte_4CA40
PUSH            {R4-R10,LR}
MOV             R9, R2
MOV             R7, R0
MOV             R8, R1
MOV             R6, #0
MOV             R5, R3
LDR             R2, [R3,#(dword_4CB38 - 0x4CA40)]
LDR             R4, [R2]

loc_1C0AC
LDR             R3, [R5,#(dword_4CB3C - 0x4CA40)]
CMP             R3, R6
MOVLS           R4, #0
BLS             loc_1C0E4
LDR             R3, [R4,#0x18]
CMP             R3, R7
BEQ             loc_1C0D0

loc_1C0C8
ADD             R6, R6, #1
B               loc_1C0AC

loc_1C0D0
LDR             R1, [R4,#0x1C]
MOV             R0, R8
BLX             R9
CMP             R0, #0
BEQ             loc_1C0C8

loc_1C0E4
MOV             R0, R4
POP             {R4-R10,PC}
; End of function sub_1C088

off_1C0EC DCD byte_4CA40



; void __fastcall sub_1C0F0(_DWORD *ptr)
sub_1C0F0
LDR             R3, [R0,#0x14]
PUSH            {R4-R6,LR}
MOV             R4, R0
CMP             R3, #0
BEQ             loc_1C108
BLX             R3

loc_1C108
MOV             R5, #0

loc_1C10C
LDR             R3, [R4,#8]
CMP             R3, R5
BHI             loc_1C138
LDR             R3, =byte_4CA40
MOV             R1, #0
LDR             R2, [R4,#0xC]
MOV             R0, R4  ; ptr
POP             {R4-R6,LR}
LDR             R3, [R3,#(dword_4CB38 - 0x4CA40)]
STR             R1, [R3,R2,LSL#2]
B               free

loc_1C138               ; fd
LDR             R0, [R4,R5,LSL#2]
ADD             R5, R5, #1
BL              close
B               loc_1C10C
; End of function sub_1C0F0

off_1C148 DCD byte_4CA40



; void sub_1C14C()
sub_1C14C
PUSH            {R4-R6,LR}
MOV             R4, #0
LDR             R5, =byte_4CA40

loc_1C158
LDR             R3, [R5,#(dword_4CB3C - 0x4CA40)]
LDR             R0, [R5,#(dword_4CB38 - 0x4CA40)] ; ptr
CMP             R3, R4
BHI             loc_1C178
BL              free
MOV             R3, #0
STR             R3, [R5,#(dword_4CB38 - 0x4CA40)]
POP             {R4-R6,PC}

loc_1C178               ; ptr
LDR             R0, [R0,R4,LSL#2]
CMP             R0, #0
BEQ             loc_1C188
BL              sub_1C0F0

loc_1C188
ADD             R4, R4, #1
B               loc_1C158
; End of function sub_1C14C

off_1C190 DCD byte_4CA40
; [00000004 BYTES: COLLAPSED FUNCTION j_free_0]



; int __fastcall sub_1C198(struct timeval)
sub_1C198

var_8= -8
var_4= -4

PUSH            {R0,R1,R4,LR}
MOV             R4, R0
MOV             R1, #0  ; tz
MOV             R0, SP  ; tv
BL              gettimeofday
LDR             R3, [SP,#8+var_8]
STR             R3, [R4,#0x1D8]
LDR             R3, [SP,#8+var_4]
STR             R3, [R4,#0x1DC]
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_1C198




; void *__fastcall sub_1C1C4(void *, char *, size_t)
sub_1C1C4
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R1, #0  ; c
MOV             R6, R2
MOV             R4, R0
BL              memset
MOV             R2, #5  ; n
LDR             R1, =aDev ; "/dev/"
MOV             R0, R5  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_1C208
MOV             R0, R5  ; s
BL              strlen
ADD             R0, R0, #5
CMP             R0, R6
BLS             loc_1C220

loc_1C208
MOV             R2, R6
MOV             R1, R5  ; s
MOV             R0, R4  ; int
BL              sub_16388

loc_1C218
MOV             R0, R4
POP             {R4-R6,PC}

loc_1C220
MOV             R2, R6
LDR             R1, =aDev ; "/dev/"
MOV             R0, R4  ; int
BL              sub_16388
MOV             R2, R6
MOV             R1, R5  ; s
MOV             R0, R4  ; int
BL              sub_163DC
B               loc_1C218
; End of function sub_1C1C4

off_1C244 DCD aDev      ; "/dev/"



; int __fastcall sub_1C248(int, int, char *, char *, char *)
sub_1C248

arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R8, R1
LDR             R5, [SP,#arg_0]
MOV             R7, R2
MOV             R1, #0  ; c
MOV             R2, #0x260 ; n
MOV             R4, R0
MOV             R6, R3
BL              memset
CMP             R5, #0
STR             R8, [R4,#0x48]
BEQ             loc_1C288
MOV             R2, #0x40 ; '@'
MOV             R1, R5
ADD             R0, R4, #0x50 ; 'P'
BL              sub_1C1C4

loc_1C288
CMP             R7, #0
BEQ             loc_1C2C8
ADD             R5, R4, #0x90
MOV             R2, #0x40 ; '@'
MOV             R1, R7  ; s
MOV             R0, R5  ; int
BL              sub_16388
MOV             R0, R5  ; name
BL              getpwnam
CMP             R0, #0
LDRNE           R3, [R0,#8]
STRNE           R3, [R4,#0x4C]
BNE             loc_1C2C8
MOV             R1, R5
LDR             R0, =aLoginInitEntry ; "login_init_entry: Cannot find user \"%s"...
BL              sub_184AC

loc_1C2C8
CMP             R6, #0
BEQ             loc_1C2E0
MOV             R2, #0x100
MOV             R1, R6  ; s
ADD             R0, R4, #0xD0 ; int
BL              sub_16388

loc_1C2E0
MOV             R0, #1
POP             {R4-R8,PC}
; End of function sub_1C248

off_1C2E8 DCD aLoginInitEntry ; "login_init_entry: Cannot find user \"%s"...



; void *__fastcall sub_1C2EC(int, char *, char *, char *)
sub_1C2EC

var_8= -8

PUSH            {R0,R1,R4-R8,LR}
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
MOV             R5, R0
MOV             R0, #0x260
BL              sub_18718
STR             R8, [SP,#8+var_8]
MOV             R4, R0
MOV             R3, R7
MOV             R2, R6
MOV             R1, R5
BL              sub_1C248
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_1C2EC




; void *__fastcall sub_1C32C(void *, const char *, size_t)
sub_1C32C
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R1, #0  ; c
MOV             R4, R0
MOV             R6, R2
BL              memset
LDR             R1, =aDev ; "/dev/"
MOV             R2, #5  ; n
MOV             R0, R5  ; s1
BL              strncmp
CMP             R0, #0
MOV             R2, R6
ADDEQ           R1, R5, #5
MOVNE           R1, R5  ; s
MOV             R0, R4  ; int
BL              sub_16388
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_1C32C

off_1C374 DCD aDev      ; "/dev/"



; void *__fastcall sub_1C378(void *, const char *, size_t)
sub_1C378
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R1, #0  ; c
MOV             R5, R2
MOV             R6, R0
BL              memset
MOV             R2, #5  ; n
LDR             R1, =aDev ; "/dev/"
MOV             R0, R4  ; s1
BL              strncmp
CMP             R0, #0
ADDEQ           R4, R4, #5
MOV             R0, R4  ; s
BL              strlen
CMP             R0, #0
BEQ             loc_1C3D4
CMP             R5, R0
MOV             R2, R5  ; n
SUBNE           R0, R0, R5
ADDNE           R4, R4, R0
MOV             R0, R6  ; dest
MOV             R1, R4  ; src
BL              strncpy

loc_1C3D4
MOV             R0, R6
POP             {R4-R6,PC}
; End of function sub_1C378

off_1C3DC DCD aDev      ; "/dev/"



; int __fastcall sub_1C3E0(int result, int)
sub_1C3E0
LDR             R3, [R0,#0x1D8]
STR             R3, [R1,#0x154]
LDR             R3, [R0,#0x1DC]
STR             R3, [R1,#0x158]
BX              LR
; End of function sub_1C3E0




; void *__fastcall sub_1C3F4(int, char *s)
sub_1C3F4
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
MOV             R2, #0x180 ; n
MOV             R1, #0  ; c
MOV             R0, R4  ; s
ADD             R6, R5, #0x50 ; 'P'
BL              memset
MOV             R2, #4
MOV             R1, R6
ADD             R0, R4, #0x28 ; '('
BL              sub_1C378
LDRSH           R3, [R5,#0x44]
CMP             R3, #7
BEQ             loc_1C4A4
CMP             R3, #8
BEQ             loc_1C4A4

loc_1C438
LDR             R3, [R5,#0x1D8]
MOV             R2, #0x20 ; ' '
MOV             R1, R6
ADD             R0, R4, #8
STR             R3, [R4,#0x154]
LDR             R3, [R5,#0x1DC]
STR             R3, [R4,#0x158]
BL              sub_1C32C
LDR             R3, [R5,#0x48]
STR             R3, [R4,#4]
LDRSH           R3, [R5,#0x44]
CMP             R3, #8
POPEQ           {R4-R6,PC}
MOV             R2, #0x20 ; ' ' ; n
ADD             R1, R5, #0x90 ; src
ADD             R0, R4, #0x2C ; ',' ; dest
BL              strncpy
MOV             R2, #0x100 ; n
ADD             R1, R5, #0xD0 ; src
ADD             R0, R4, #0x4C ; 'L' ; dest
BL              strncpy
ADD             R3, R5, #0x1E0
LDRH            R3, [R3]
CMP             R3, #2
LDREQ           R3, [R5,#0x1E4]
STREQ           R3, [R4,#0x15C]
POP             {R4-R6,PC}

loc_1C4A4
STRH            R3, [R4]
B               loc_1C438
; End of function sub_1C3F4




; int __fastcall sub_1C4AC(int, int, int)
sub_1C4AC
PUSH            {R0-R2,R4,R5,LR}
MOV             R5, R0
LDRSH           R2, [R0,#0x44]
CMP             R2, #7
BEQ             loc_1C4DC
CMP             R2, #8
BEQ             loc_1C518
LDR             R1, =aSysloginWriteE ; "syslogin_write_entry: Invalid type fiel"...

loc_1C4CC
MOV             R0, #4
BL              sub_184E8
MOV             R0, #0
B               loc_1C510

loc_1C4DC               ; size
MOV             R0, #0x180
BL              malloc
SUBS            R4, R0, #0
LDREQ           R1, =aSysloginPerfor ; "syslogin_perform_login: couldn't malloc"...
BEQ             loc_1C4CC
MOV             R1, R4  ; s
MOV             R0, R5  ; int
BL              sub_1C3F4
MOV             R0, R4  ; entry
BL              login
MOV             R0, R4  ; ptr
BL              free

loc_1C50C
MOV             R0, #1

loc_1C510
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_1C518
ADD             R1, R0, #0x50 ; 'P'
MOV             R0, SP
BL              sub_1C32C
MOV             R0, SP  ; ut_line
BL              logout
CMP             R0, #0
BNE             loc_1C558
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R2, SP
MOV             R3, R0
LDR             R1, =aSysloginPerfor_0 ; "syslogin_perform_logout: logout(%s) ret"...
MOV             R0, #4
BL              sub_184E8
B               loc_1C50C

loc_1C558               ; ut_host
LDR             R2, =(aSsh20Dropbear2_0+0x1A) ; ""
MOV             R0, SP  ; ut_line
MOV             R1, R2  ; ut_name
BL              logwtmp
B               loc_1C50C
; End of function sub_1C4AC

off_1C56C DCD aSysloginWriteE ; "syslogin_write_entry: Invalid type fiel"...
off_1C570 DCD aSysloginPerfor ; "syslogin_perform_login: couldn't malloc"...
off_1C574 DCD aSysloginPerfor_0 ; "syslogin_perform_logout: logout(%s) ret"...
off_1C578 DCD aSsh20Dropbear2_0+0x1A ; ""



; int __fastcall sub_1C57C(int)
sub_1C57C
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              geteuid
SUBS            R4, R0, #0
BNE             loc_1C5A8
MOV             R0, R5
BL              sub_1C198
MOV             R0, R5
BL              sub_1C4AC
MOV             R0, R4
POP             {R4-R6,PC}

loc_1C5A8
MOV             R0, #1
POP             {R4-R6,PC}
; End of function sub_1C57C




; int __fastcall sub_1C5B0(int)
sub_1C5B0
MOV             R3, #7
STRH            R3, [R0,#0x44]
B               sub_1C57C
; End of function sub_1C5B0




; int __fastcall sub_1C5BC(int)
sub_1C5BC
MOV             R3, #8
STRH            R3, [R0,#0x44]
B               sub_1C57C
; End of function sub_1C5BC




; int sub_1C5C8()
sub_1C5C8
MOV             R0, #0
BX              LR
; End of function sub_1C5C8




; int sub_1C5D0()
sub_1C5D0
MOV             R0, #0
BX              LR
; End of function sub_1C5D0




; int sub_1C5D8()
sub_1C5D8
MOV             R0, #0
BX              LR
; End of function sub_1C5D8




; int __fastcall sub_1C5E0(int, _DWORD *)
sub_1C5E0
CMP             R1, #0
BNE             loc_1C5FC
PUSH            {R4,LR}
MOV             R2, #0x5F ; '_'
LDR             R1, =aLtcPrngC ; "ltc_prng.c"
LDR             R0, =aOutlenNull ; "outlen != NULL"
BL              sub_26EB8

loc_1C5FC
MOV             R0, #0
STR             R0, [R1]
BX              LR
; End of function sub_1C5E0

off_1C608 DCD aLtcPrngC ; "ltc_prng.c"
off_1C60C DCD aOutlenNull ; "outlen != NULL"



; unsigned int __fastcall sub_1C610(char *, unsigned int)
sub_1C610
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_1C62C
MOV             R2, #0x47 ; 'G'
LDR             R1, =aLtcPrngC ; "ltc_prng.c"
LDR             R0, =aOutNull ; "out != NULL"
BL              sub_26EB8

loc_1C62C
MOV             R4, R1
BL              sub_18090
MOV             R0, R4
POP             {R4,PC}
; End of function sub_1C610

off_1C63C DCD aLtcPrngC ; "ltc_prng.c"
off_1C640 DCD aOutNull  ; "out != NULL"



; int sub_1C644()
sub_1C644
MOV             R0, #0
BX              LR
; End of function sub_1C644




; int sub_1C64C()
sub_1C64C
MOV             R0, #0
BX              LR
; End of function sub_1C64C




; int sub_1C654()
sub_1C654
MOV             R0, #0
BX              LR
; End of function sub_1C654




; int __fastcall sub_1C65C(int result, int)
sub_1C65C
CMP             R0, #0
BXNE            LR
MOV             R0, R1
B               sub_185B8
; End of function sub_1C65C




; void __fastcall sub_1C66C(void *, int *)
sub_1C66C
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R0, [R0] ; ai
MOV             R5, R1
CMP             R0, #0
BEQ             loc_1C688
BL              freeaddrinfo

loc_1C688               ; ptr
LDR             R0, [R4,#8]
BL              free
LDR             R0, [R4,#0xC] ; ptr
BL              free
LDR             R0, [R4,#0x20] ; ptr
BL              free
LDR             R0, [R4,#0x24] ; ptr
BL              free
LDR             R0, [R4,#0x28] ; ptr
BL              free
MOV             R0, R4  ; ptr
BL              free
CMP             R5, #0
POPEQ           {R4-R6,PC}
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_1BDE8
; End of function sub_1C66C




; int __fastcall sub_1C6CC(int result)
sub_1C6CC
LDR             R3, =sub_1C65C
STR             R3, [R0,#0x10]
MOV             R3, #0
STR             R3, [R0,#0x14]
BX              LR
; End of function sub_1C6CC

off_1C6E0 DCD sub_1C65C



; struct addrinfo **__fastcall sub_1C6E4(const char *, const char *, struct addrinfo *, struct addrinfo *, const char *, const char *)
sub_1C6E4

var_2C= -0x2C
var_28= -0x28
s= -0x24
var_1C= -0x1C
arg_0=  0x24
arg_4=  0x28

PUSH            {R4-R11,LR}
MOV             R5, R0
SUB             SP, SP, #0x2C
MOV             R0, #0x2C ; ','
MOV             R6, R1
MOV             R10, R2
MOV             R9, R3
LDR             R8, [SP,#0x2C+arg_0]
LDR             R7, [SP,#0x2C+arg_4]
BL              sub_18718
MOV             R4, R0
MOV             R0, R5
BL              sub_1886C
STR             R0, [R4,#8]
MOV             R0, R6
BL              sub_1886C
MOV             R3, #0xFFFFFFFF
STR             R0, [R4,#0xC]
STR             R3, [R4,#0x1C]
MOV             R1, R4
LDR             R0, =dword_4CA94
STR             R10, [R4,#0x10]
STR             R9, [R4,#0x14]
BL              sub_1BD84
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x2C+s ; s
BL              memset
MOV             R3, #1
ADD             R2, SP, #0x2C+s ; req
STR             R3, [SP,#0x2C+var_1C]
MOV             R1, R6  ; service
MOV             R3, R4  ; pai
MOV             R0, R5  ; name
BL              getaddrinfo
SUBS            R11, R0, #0
LDREQ           R3, [R4]
STREQ           R3, [R4,#4]
BEQ             loc_1C7C0
BL              gai_strerror
BL              strlen
ADD             R10, R0, #0x64 ; 'd'
MOV             R0, R10
BL              sub_18718
MOV             R9, R0
STR             R0, [R4,#0x20]
MOV             R0, R11 ; ecode
BL              gai_strerror
STR             R6, [SP,#0x2C+var_2C]
MOV             R3, R5
STR             R0, [SP,#0x2C+var_28]
MOV             R1, R10 ; maxlen
LDR             R2, =aErrorResolving ; "Error resolving '%s' port '%s'. %s"
MOV             R0, R9  ; s
BL              snprintf

loc_1C7C0
CMP             R8, #0
BEQ             loc_1C7D4
MOV             R0, R8
BL              sub_1886C
STR             R0, [R4,#0x24]

loc_1C7D4
CMP             R7, #0
BEQ             loc_1C7E8
MOV             R0, R7
BL              sub_1886C
STR             R0, [R4,#0x28]

loc_1C7E8
MOV             R0, R4
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}
; End of function sub_1C6E4

off_1C7F4 DCD dword_4CA94
off_1C7F8 DCD aErrorResolving ; "Error resolving '%s' port '%s'. %s"



; int sub_1C7FC()
sub_1C7FC
PUSH            {R4,LR}
LDR             R4, =byte_4CA40

loc_1C804
LDR             R1, [R4,#(dword_4CA94 - 0x4CA40)]
CMP             R1, #0
POPEQ           {R4,PC}
LDR             R0, [R1]
BL              sub_1C66C
B               loc_1C804
; End of function sub_1C7FC

off_1C81C DCD byte_4CA40



; void __fastcall sub_1C820(int)
sub_1C820

optlen= -0x14
optval= -0xC
var_8= -8

LDR             R3, =byte_4CA40
PUSH            {R4-R9,LR}
MOV             R6, R0
SUB             SP, SP, #0x14
MOV             R7, #4
MOV             R8, #1
LDR             R5, [R3,#(dword_4CA94 - 0x4CA40)]

loc_1C83C
CMP             R5, #0
BEQ             loc_1C900
LDR             R4, [R5]
STR             R7, [SP,#0x14+var_8]
LDR             R0, [R4,#0x1C] ; fd
CMP             R0, #0
BLT             loc_1C86C
MOV             R2, R0,ASR#5
AND             R3, R0, #0x1F
LDR             R2, [R6,R2,LSL#2]
ANDS            R3, R2, R8,LSL R3
BNE             loc_1C874

loc_1C86C
LDR             R5, [R5,#4]
B               loc_1C83C

loc_1C874
ADD             R3, SP, #0x14+var_8
MOV             R2, #4  ; optname
STR             R3, [SP,#0x14+optlen] ; optlen
MOV             R1, #1  ; level
ADD             R3, SP, #0x14+optval ; optval
BL              getsockopt
SUBS            R9, R0, #0
BEQ             loc_1C8A8
LDR             R0, [R4,#0x1C]
BL              sub_185B8
MOV             R3, #0xFFFFFFFF
STR             R3, [R4,#0x1C]
B               loc_1C86C

loc_1C8A8
LDR             R3, [SP,#0x14+optval]
LDR             R1, [R4,#0x1C]
CMP             R3, #0
BEQ             loc_1C8E8
MOV             R0, R1
BL              sub_185B8
MOV             R3, #0xFFFFFFFF
LDR             R0, [R4,#0x20] ; ptr
STR             R3, [R4,#0x1C]
BL              free
STR             R9, [R4,#0x20]
LDR             R0, [SP,#0x14+optval] ; errnum
BL              strerror
BL              sub_1886C
STR             R0, [R4,#0x20]
B               loc_1C86C

loc_1C8E8
LDR             R6, [R4,#0x10]
LDR             R2, [R4,#0x14]
BLX             R6
MOV             R1, R5
MOV             R0, R4
BL              sub_1C66C

loc_1C900
ADD             SP, SP, #0x14
POP             {R4-R9,PC}
; End of function sub_1C820

off_1C908 DCD byte_4CA40



; int __fastcall sub_1C90C(int result, int)
sub_1C90C
STR             R1, [R0,#0x18]
BX              LR
; End of function sub_1C90C




; int __fastcall sub_1C914(int result, int, unsigned int *)
sub_1C914
LDR             R3, [R0,#8]
PUSH            {R4-R8,LR}
MOV             R7, R2
LDR             R8, [R0]
MOV             R5, R1
CMP             R3, #0x400
MOV             R6, #0
LDR             R2, [R2]
MOVCS           R3, #0x400
CMP             R2, R3
STRLS           R2, [R7]
STRHI           R3, [R7]

loc_1C944
LDR             R3, [R7]
CMP             R3, R6
POPLS           {R4-R8,PC}
LDR             R0, [R8]
ADD             R5, R5, #8
LDR             R4, [R0,#4]
LDR             R3, [R0,#8]
SUB             R4, R4, #1
SUB             R4, R4, R3
CMP             R4, #0
BGT             loc_1C980
MOVW            R2, #0x135
LDR             R1, =aNetioC ; "netio.c"
LDR             R0, =aLen0 ; "len > 0"
BL              sub_184D4

loc_1C980
MOV             R1, R4
ADD             R6, R6, #1
BL              sub_125E4
STMDB           R5, {R0,R4}
LDR             R8, [R8,#4]
B               loc_1C944
; End of function sub_1C914

off_1C998 DCD aNetioC   ; "netio.c"
off_1C99C DCD aLen0     ; "len > 0"



; void __fastcall sub_1C9A0(int, int)
sub_1C9A0
PUSH            {R4-R6,LR}
MOV             R6, R0
MOV             R4, R1

loc_1C9AC
CMP             R4, #0
POPLE           {R4-R6,PC}
MOV             R0, R6
BL              sub_1DDB8
LDR             R3, [R0,#4]
MOV             R5, R0
LDR             R2, [R0,#8]
SUB             R3, R3, #1
SUB             R3, R3, R2
CMP             R4, R3
BGE             loc_1C9E4
MOV             R1, R4
POP             {R4-R6,LR}
B               sub_1250C

loc_1C9E4
MOV             R0, R6
SUB             R4, R4, R3
BL              sub_1DD60
MOV             R0, R5  ; ptr
BL              j_free
B               loc_1C9AC
; End of function sub_1C9A0




; int __fastcall sub_1C9FC(int)
sub_1C9FC

optlen= -0x10
var_4= -4
var_s0=  0

PUSH            {R0-R4,LR}
MOV             R2, #1  ; optname
ADD             R3, SP, #0x10+var_s0
MOV             R1, #4
STR             R2, [R3,#-4]! ; optval
STR             R1, [SP,#0x10+optlen] ; optlen
MOV             R1, #6  ; level
BL              setsockopt
ADD             SP, SP, #0x14
POP             {PC}
; End of function sub_1C9FC




; void __fastcall sub_1CA24(int)
sub_1CA24

var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
errnum= -0x34
var_30= -0x30
pai= -0x28
req= -0x24

LDR             R3, =byte_4CA40
PUSH            {R4-R11,LR}
MOV             R9, R0
SUB             SP, SP, #0x44
LDR             R6, [R3,#(dword_4CA94 - 0x4CA40)]
STR             R3, [SP,#0x44+var_3C]

loc_1CA3C
CMP             R6, #0
BNE             loc_1CA4C
ADD             SP, SP, #0x44 ; 'D'
POP             {R4-R11,PC}

loc_1CA4C
LDR             R4, [R6]
MOV             R7, #0
LDR             R3, [R6,#4]
STR             R3, [SP,#0x44+var_38]

loc_1CA5C
LDR             R5, [R4,#4]
LDR             R3, [R4,#0x1C]
CMP             R5, #0
BNE             loc_1CC7C
CMP             R3, #0
BLT             loc_1CCA0

loc_1CA74
MOV             R1, R3,ASR#5
MOV             R0, #1
AND             R3, R3, #0x1F
LDR             R2, [R9,R1,LSL#2]
ORR             R3, R2, R0,LSL R3
STR             R3, [R9,R1,LSL#2]

loc_1CA8C
LDR             R6, [SP,#0x44+var_38]
B               loc_1CA3C

loc_1CA94               ; protocol
LDMIB           R5, {R0-R2}
BL              socket
CMP             R0, #0
STR             R0, [R4,#0x1C]
BLT             loc_1CB74
LDR             R8, [R4,#0x24]
LDR             R10, [R4,#0x28]
CMP             R8, #0
BNE             loc_1CAC0
CMP             R10, #0
BEQ             loc_1CC08

loc_1CAC0               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, R2 ; s
STR             R7, [SP,#0x44+pai]
BL              memset
LDR             R2, [R5,#4]
MOV             R3, #1
STR             R3, [SP,#0x44+req.ai_socktype]
MOV             R0, R8  ; name
STR             R3, [SP,#0x44+req]
MOV             R1, R10 ; service
STR             R2, [SP,#0x44+req.ai_family]
ADD             R3, SP, #0x44+pai ; pai
ADD             R2, SP, #0x44+req ; req
BL              getaddrinfo
SUBS            R8, R0, #0
BEQ             loc_1CB88
BL              gai_strerror
BL              strlen
ADD             R11, R0, #0x64 ; 'd'
LDR             R0, [R4,#0x20] ; ptr
BL              free
STR             R7, [R4,#0x20]
MOV             R0, R11
BL              sub_18718
LDR             R3, [R4,#0x24]
MOV             R10, R0
LDR             R2, [R4,#0x28]
STR             R0, [R4,#0x20]
MOV             R0, R8  ; ecode
STR             R3, [SP,#0x44+var_30]
STR             R2, [SP,#0x44+errnum]
BL              gai_strerror
LDR             R2, [SP,#0x44+errnum]
MOV             R1, R11 ; maxlen
LDR             R3, [SP,#0x44+var_30]
STR             R0, [SP,#0x44+var_40]
MOV             R0, R10 ; s
STR             R2, [SP,#0x44+var_44]
LDR             R2, =aErrorResolving_0 ; "Error resolving bind address '%s' (port"...

loc_1CB60
BL              snprintf

loc_1CB64               ; fd
LDR             R0, [R4,#0x1C]
BL              close
MOV             R3, #0xFFFFFFFF
STR             R3, [R4,#0x1C]

loc_1CB74
LDR             R5, [R5,#0x1C]
CMP             R5, #0
BNE             loc_1CC84
STR             R5, [R4,#4]
B               loc_1CA5C

loc_1CB88
LDR             R3, [SP,#0x44+pai]
LDR             R0, [R4,#0x1C] ; fd
LDR             R2, [R3,#0x10] ; len
LDR             R1, [R3,#0x14] ; addr
BL              bind
MOV             R10, R0
LDR             R0, [SP,#0x44+pai] ; ai
BL              freeaddrinfo
CMP             R10, #0
STR             R8, [SP,#0x44+pai]
BGE             loc_1CC08
BL              __errno_location
LDR             R3, [R0]
LDR             R0, [R4,#0x20] ; ptr
STR             R3, [SP,#0x44+errnum]
BL              free
STR             R8, [R4,#0x20]
MOV             R0, #0x12C
BL              sub_18718
LDR             R3, [SP,#0x44+errnum]
MOV             R8, R0
LDRD            R10, R11, [R4,#0x24]
STR             R0, [R4,#0x20]
MOV             R0, R3  ; errnum
BL              strerror
STR             R11, [SP,#0x44+var_44]
MOV             R3, R10
STR             R0, [SP,#0x44+var_40]
MOV             R1, #0x12C
LDR             R2, =aErrorBindingLo ; "Error binding local address '%s' (port "...
MOV             R0, R8
B               loc_1CB60

loc_1CC08
LDR             R3, [SP,#0x44+var_3C]
LDR             R2, [SP,#0x44+var_3C]
LDR             R0, [R4,#0x1C]
LDR             R3, [R3,#(dword_4CA54 - 0x4CA40)]
CMP             R3, R0
STRGE           R3, [R2,#(dword_4CA54 - 0x4CA40)]
STRLT           R0, [R2,#(dword_4CA54 - 0x4CA40)]
BL              sub_1C9FC
LDR             R0, [R4,#0x1C]
BL              sub_188B0
LDR             R2, [R5,#0x10] ; len
LDR             R1, [R5,#0x14] ; addr
LDR             R0, [R4,#0x1C] ; fd
BL              connect
CMP             R0, #0
BGE             loc_1CCE0
BL              __errno_location
LDR             R3, [R0]
MOV             R8, R0
CMP             R3, #0x73 ; 's'
BEQ             loc_1CCE0
LDR             R0, [R4,#0x20] ; ptr
BL              free
STR             R7, [R4,#0x20]
LDR             R0, [R8] ; errnum
BL              strerror
BL              sub_1886C
STR             R0, [R4,#0x20]
B               loc_1CB64

loc_1CC7C
CMP             R3, #0
BGE             loc_1CA74

loc_1CC84
LDR             R3, [R4,#0x1C]
CMN             R3, #1
BEQ             loc_1CA94
MOV             R2, #0x42 ; 'B'
LDR             R1, =aNetioC ; "netio.c"
LDR             R0, =aCSock1 ; "c->sock == -1"
BL              sub_184D4

loc_1CCA0
LDR             R3, [R4,#0x20]
CMP             R3, #0
BNE             loc_1CCB8
LDR             R0, =aUnexpectedFail ; "unexpected failure"
BL              sub_1886C
STR             R0, [R4,#0x20]

loc_1CCB8
MOV             R1, #0xFFFFFFFF
LDR             R5, [R4,#0x10]
MOV             R0, R1
LDR             R3, [R4,#0x20]
LDR             R2, [R4,#0x14]
BLX             R5
MOV             R1, R6
MOV             R0, R4
BL              sub_1C66C
B               loc_1CA8C

loc_1CCE0
LDR             R3, [R5,#0x1C]
STR             R3, [R4,#4]
B               loc_1CA5C
; End of function sub_1CA24

off_1CCEC DCD byte_4CA40
off_1CCF0 DCD aErrorResolving_0 ; "Error resolving bind address '%s' (port"...
off_1CCF4 DCD aErrorBindingLo ; "Error binding local address '%s' (port "...
off_1CCF8 DCD aNetioC   ; "netio.c"
off_1CCFC DCD aCSock1   ; "c->sock == -1"
off_1CD00 DCD aUnexpectedFail ; "unexpected failure"



; int __fastcall sub_1CD04(int)
sub_1CD04

optlen= -0x10
var_4= -4
var_s0=  0

PUSH            {R0-R4,LR}
MOV             R2, #5
ADD             R3, SP, #0x10+var_s0
MOV             R1, #6  ; level
STR             R2, [R3,#-4]! ; optval
MOV             R2, #4
STR             R2, [SP,#0x10+optlen] ; optlen
MOV             R2, #0x17 ; optname
BL              setsockopt
ADD             SP, SP, #0x14
POP             {PC}
; End of function sub_1CD04




; int __fastcall sub_1CD30(int fd, int)
sub_1CD30

optlen= -0x10
optval= -8
var_4= -4

CMP             R1, #0xB
PUSH            {R0-R6,LR}
MOV             R3, #0
MOV             R6, R0
MOV             R5, R1
STR             R3, [SP,#0x10+optval]
STR             R3, [SP,#0x10+var_4]
MOVEQ           R3, #0x10
BEQ             loc_1CD60
CMP             R1, #0xC
BNE             loc_1CD64
MOV             R3, #8

loc_1CD60
STR             R3, [SP,#0x10+optval]

loc_1CD64
MOV             R4, #4
ADD             R3, SP, #0x10+optval ; optval
MOV             R2, #0x43 ; 'C' ; optname
MOV             R1, #0x29 ; ')' ; level
STR             R4, [SP,#0x10+optlen] ; optlen
MOV             R0, R6  ; fd
BL              setsockopt
ADD             R3, SP, #0x10+optval ; optval
STR             R4, [SP,#0x10+optlen] ; optlen
MOV             R2, #1  ; optname
MOV             R1, #0  ; level
MOV             R0, R6  ; fd
BL              setsockopt
CMP             R5, #0xB
MOVEQ           R3, #6
BEQ             loc_1CDB0
CMP             R5, #0xC
BNE             loc_1CDB4
MOV             R3, #2

loc_1CDB0
STR             R3, [SP,#0x10+var_4]

loc_1CDB4               ; optlen
STR             R4, [SP,#0x10+optlen]
ADD             R3, SP, #0x10+var_4 ; optval
MOV             R2, #0xC ; optname
MOV             R1, #1  ; level
MOV             R0, R6  ; fd
BL              setsockopt
CMP             R0, #0
BGE             loc_1CDF8
BL              __errno_location
LDR             R0, [R0] ; errnum
CMP             R0, #0x58 ; 'X'
BEQ             loc_1CDF8
BL              strerror
LDR             R1, =aCouldnTSetSoPr ; "Couldn't set SO_PRIORITY (%s)"
MOV             R2, R0
MOV             R0, #4
BL              sub_184E8

loc_1CDF8
ADD             SP, SP, #0x10
POP             {R4-R6,PC}
; End of function sub_1CD30

off_1CE00 DCD aCouldnTSetSoPr ; "Couldn't set SO_PRIORITY (%s)"



; int __fastcall sub_1CE04(int)
sub_1CE04

serv= -0xB8
servlen= -0xB4
flags= -0xB0
len= -0xA4
var_A0= -0xA0
s= -0x80

PUSH            {R4,LR}
SUB             SP, SP, #0xB8
MOV             R2, #0x80 ; n
MOV             R4, R0
MOV             R1, #0  ; c
ADD             R0, SP, #0xB8+s ; s
STR             R2, [SP,#0xB8+len]
BL              memset
ADD             R2, SP, #0xB8+len ; len
ADD             R1, SP, #0xB8+s ; addr
MOV             R0, R4  ; fd
BL              getsockname
CMP             R0, #0
BGE             loc_1CE48

loc_1CE3C
MOV             R0, #0

loc_1CE40
ADD             SP, SP, #0xB8
POP             {R4,PC}

loc_1CE48
LDRH            R3, [SP,#0xB8+s]
CMP             R3, #0xA
BIC             R3, R3, #8
UXTH            R3, R3
MOVEQ           R2, #0x1C
STREQ           R2, [SP,#0xB8+len]
CMP             R3, #2
BNE             loc_1CE3C
STR             R3, [SP,#0xB8+flags] ; flags
MOV             R3, #0x20 ; ' '
STR             R3, [SP,#0xB8+servlen] ; servlen
ADD             R4, SP, #0xB8+var_A0
MOV             R3, #0  ; hostlen
STR             R4, [SP,#0xB8+serv] ; serv
MOV             R2, R3  ; host
LDR             R1, [SP,#0xB8+len] ; salen
ADD             R0, SP, #0xB8+s ; sa
BL              getnameinfo
MOV             R0, R4  ; nptr
BL              atoi
B               loc_1CE40
; End of function sub_1CE04




; int __fastcall sub_1CE9C(const char *, const char *, int, unsigned int, char **, int *)
sub_1CE9C

optlen= -0x54
var_48= -0x48
var_44= -0x44
var_40= -0x40
pai= -0x38
optval= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
s= -0x24
var_1C= -0x1C
var_4= -4
arg_0=  0x24
arg_4=  0x28

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x54
STRD            R2, R3, [SP,#0x54+var_44]
MOV             R4, R0
MOV             R5, R1
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x54+s ; s
LDR             R8, [SP,#0x54+arg_0]
STR             R1, [SP,#0x54+pai]
BL              memset
CMP             R4, #0
MOV             R3, #1
STR             R3, [SP,#0x54+var_1C]
BEQ             loc_1CEE8
LDRB            R2, [R4]
STR             R3, [SP,#0x54+s]
CMP             R2, #0
MOVEQ           R4, #0

loc_1CEE8               ; pai
ADD             R3, SP, #0x54+pai
ADD             R2, SP, #0x54+s ; req
MOV             R1, R5  ; service
MOV             R0, R4  ; name
BL              getaddrinfo
SUBS            R7, R0, #0
BEQ             loc_1CF70
CMP             R8, #0
BEQ             loc_1CF50
LDR             R3, [R8]
CMP             R3, #0
BNE             loc_1CF50
BL              gai_strerror
BL              strlen
ADD             R5, R0, #0x14
MOV             R0, R5
BL              sub_18718
MOV             R4, R0
STR             R0, [R8]
MOV             R0, R7  ; ecode
BL              gai_strerror
LDR             R2, =aErrorResolving_1 ; "Error resolving: %s"
MOV             R3, R0
MOV             R1, R5  ; maxlen
MOV             R0, R4  ; s
BL              snprintf

loc_1CF50               ; ai
LDR             R0, [SP,#0x54+pai]
CMP             R0, #0
BNE             loc_1CF68

loc_1CF5C
MOV             R0, #0xFFFFFFFF

loc_1CF60
ADD             SP, SP, #0x54 ; 'T'
POP             {R4-R11,PC}

loc_1CF68
BL              freeaddrinfo
B               loc_1CF5C

loc_1CF70
LDR             R5, [SP,#0x54+pai]
MOV             R9, R7
MOV             R4, R7
MOV             R10, #1
STR             R7, [SP,#0x54+var_48]

loc_1CF84
LDR             R3, [SP,#0x54+var_40]
CMP             R4, R3
MOVCS           R6, #0
MOVCC           R6, #1
CMP             R5, #0
MOVEQ           R6, #0
CMP             R6, #0
BNE             loc_1D018
LDR             R0, [SP,#0x54+pai] ; ai
CMP             R0, #0
BEQ             loc_1CFB8
BL              freeaddrinfo
STR             R6, [SP,#0x54+pai]

loc_1CFB8
CMP             R4, #0
MOVNE           R0, R4
BNE             loc_1CF60
CMP             R8, #0
BEQ             loc_1CF5C
LDR             R3, [R8]
CMP             R3, #0
BNE             loc_1CF5C
MOV             R0, R7  ; errnum
BL              strerror
BL              strlen
ADD             R5, R0, #0x14
MOV             R0, R5
BL              sub_18718
MOV             R4, R0
STR             R0, [R8]
MOV             R0, R7  ; errnum
BL              strerror
LDR             R2, =aErrorListening ; "Error listening: %s"
MOV             R3, R0
MOV             R1, R5  ; maxlen
MOV             R0, R4  ; s
BL              snprintf
B               loc_1CF5C

loc_1D018
CMP             R9, #0
LDR             R0, [R5,#4] ; domain
BLE             loc_1D050
CMP             R0, #2
BNE             loc_1D03C

loc_1D02C
LDR             R3, [R5,#0x14]
ADD             R3, R3, #2
STR             R3, [SP,#0x54+var_48]
B               loc_1D044

loc_1D03C
CMP             R0, #0xA
BEQ             loc_1D02C

loc_1D044
LDR             R2, [SP,#0x54+var_48]
REV16           R3, R9
STRH            R3, [R2]

loc_1D050               ; protocol
LDR             R2, [R5,#0xC]
LDR             R1, [R5,#8] ; type
BL              socket
LDR             R3, [SP,#0x54+var_44]
CMP             R0, #0
MOV             R6, R0
STR             R0, [R3,R4,LSL#2]
BGE             loc_1D080
BL              __errno_location
LDR             R7, [R0]

loc_1D078
LDR             R5, [R5,#0x1C]
B               loc_1CF84

loc_1D080
MOV             R11, #4
ADD             R3, SP, #0x54+optval ; optval
MOV             R2, #2  ; optname
MOV             R1, #1  ; level
STR             R11, [SP,#0x54+optlen] ; optlen
STR             R10, [SP,#0x54+optval]
BL              setsockopt
MOV             R3, #5
MOV             R2, #0xD ; optname
STR             R3, [SP,#0x54+var_28]
MOV             R3, #8
STR             R3, [SP,#0x54+optlen] ; optlen
MOV             R1, #1  ; level
ADD             R3, SP, #0x54+var_2C ; optval
MOV             R0, R6  ; fd
STR             R10, [SP,#0x54+var_2C]
BL              setsockopt
LDR             R3, [R5,#4]
CMP             R3, #0xA
BNE             loc_1D100
ADD             R3, SP, #0x54+var_4
MOV             R2, #0x1A ; optname
STR             R10, [R3,#-0x2C]! ; optval
MOV             R1, #0x29 ; ')' ; level
STR             R11, [SP,#0x54+optlen] ; optlen
MOV             R0, R6  ; fd
BL              setsockopt
CMN             R0, #1
BNE             loc_1D100
LDR             R1, =aCouldnTSetIpv6 ; "Couldn't set IPV6_V6ONLY"
MOV             R0, R11
BL              sub_184E8

loc_1D100
MOV             R0, R6
BL              sub_1C9FC
LDR             R2, [R5,#0x10] ; len
MOV             R0, R6  ; fd
LDR             R1, [R5,#0x14] ; addr
BL              bind
CMP             R0, #0
BGE             loc_1D134

loc_1D120
BL              __errno_location
LDR             R7, [R0]
MOV             R0, R6  ; fd
BL              close
B               loc_1D078

loc_1D134               ; n
MOV             R1, #0x3E8
MOV             R0, R6  ; fd
BL              listen
CMP             R0, #0
BLT             loc_1D120
CMP             R9, #0
BNE             loc_1D15C
MOV             R0, R6
BL              sub_1CE04
MOV             R9, R0

loc_1D15C
LDR             R3, [SP,#0x54+arg_4]
ADD             R4, R4, #1
LDR             R2, [SP,#0x54+arg_4]
LDR             R3, [R3]
CMP             R3, R6
STRGE           R3, [R2]
STRLT           R6, [R2]
B               loc_1D078
; End of function sub_1CE9C

off_1D17C DCD aErrorResolving_1 ; "Error resolving: %s"
off_1D180 DCD aErrorListening ; "Error listening: %s"
off_1D184 DCD aCouldnTSetIpv6 ; "Couldn't set IPV6_V6ONLY"



; char *__fastcall sub_1D188(const struct sockaddr *, char **, char **, int)
sub_1D188

serv= -0x438
servlen= -0x434
flags= -0x430
var_428= -0x428
host= -0x404

PUSH            {R4-R8,LR}
SUBS            R8, R3, #0
LDRH            R3, [R0]
MOV             R4, R2
MOVEQ           R2, #3
MOVNE           R2, #2
SUB             SP, SP, #0x430
MOV             R5, R1
CMP             R3, #2
SUB             SP, SP, #8
MOV             R6, R0
MOVEQ           R1, #0x10
BEQ             loc_1D1C8
CMP             R3, #0xA
MOVNE           R1, #0x80
MOVEQ           R1, #0x1C ; salen

loc_1D1C8
MOV             R3, #0x20 ; ' '
ADD             R7, SP, #0x438+var_428
STR             R2, [SP,#0x438+flags] ; flags
MOV             R0, R6  ; sa
STR             R3, [SP,#0x438+servlen] ; servlen
ADD             R2, SP, #0x438+host ; host
STR             R7, [SP,#0x438+serv] ; serv
MOVW            R3, #0x401 ; hostlen
BL              getnameinfo
CMP             R0, #0
BEQ             loc_1D22C
CMP             R8, #0
BEQ             loc_1D21C
MOV             R3, #0
MOV             R2, R4
MOV             R1, R5
MOV             R0, R6
BL              sub_1D188

loc_1D210
ADD             SP, SP, #0x430
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_1D21C
BL              gai_strerror
MOV             R1, R0
LDR             R0, =aFailedLookupS ; "Failed lookup: %s"
BL              sub_184AC

loc_1D22C
CMP             R5, #0
BEQ             loc_1D240
ADD             R0, SP, #0x438+host
BL              sub_1886C
STR             R0, [R5]

loc_1D240
CMP             R4, #0
BEQ             loc_1D210
MOV             R0, R7
BL              sub_1886C
STR             R0, [R4]
B               loc_1D210
; End of function sub_1D188

off_1D258 DCD aFailedLookupS ; "Failed lookup: %s"



; char *__fastcall sub_1D25C(char *fd, char **, char **, unsigned int, char **, int)
sub_1D25C

var_84= -0x84
addr= -0x80
var_s0=  0
arg_0=  0x18
arg_4=  0x1C

CMP             R2, #0
CMPEQ           R1, #0
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x88
MOV             R8, R0
MOV             R4, R3
LDR             R5, [SP,#0x88+arg_0]
BEQ             loc_1D2CC
MOV             R3, #0x80
MOV             R7, R2
ADD             R2, SP, #0x88+var_s0
MOV             R6, R1
STR             R3, [R2,#-0x84]! ; len
ADD             R1, SP, #0x88+addr ; addr
BL              getsockname
CMP             R0, #0
BGE             loc_1D2B8

loc_1D2A0
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R1, R0
LDR             R0, =aFailedSocketAd ; "Failed socket address: %s"
BL              sub_184AC

loc_1D2B8
LDR             R3, [SP,#0x88+arg_4]
MOV             R2, R7
MOV             R1, R6
ADD             R0, SP, #0x88+addr
BL              sub_1D188

loc_1D2CC
CMP             R5, #0
CMPEQ           R4, #0
BEQ             loc_1D30C
ADD             R2, SP, #0x88+var_s0
MOV             R3, #0x80
STR             R3, [R2,#-0x84]! ; len
ADD             R1, SP, #0x88+addr ; addr
MOV             R0, R8  ; fd
BL              getpeername
CMP             R0, #0
BLT             loc_1D2A0
LDR             R3, [SP,#0x88+arg_4]
MOV             R2, R5
MOV             R1, R4
ADD             R0, SP, #0x88+addr
BL              sub_1D188

loc_1D30C
ADD             SP, SP, #0x88
POP             {R4-R8,PC}
; End of function sub_1D25C

off_1D314 DCD aFailedSocketAd ; "Failed socket address: %s"



; int __fastcall sub_1D318(int result, _DWORD *, _DWORD *, unsigned int, int)
sub_1D318

var_1B8= -0x1B8
var_1B4= -0x1B4
var_1B0= -0x1B0
var_s0=  0
arg_0=  0x10

LDR             R12, [R1,#8]
PUSH            {R4-R6,LR}
SUB             SP, SP, #0x1B8
LDRB            LR, [R12,#8]
CMP             LR, #0
BEQ             loc_1D3CC
MOV             R5, R3
MOV             R6, R2
MOV             R4, R0
ADD             R2, R1, #0x30C
LDR             R3, [R12,#4]
ADD             R0, SP, #0x1B8+var_1B0
LDR             R1, [R1,#0xC]
BL              sub_25B04
CMP             R0, #0
BEQ             loc_1D360

loc_1D358
LDR             R0, =aHmacError ; "HMAC error"
BL              sub_184AC

loc_1D360
ADD             R1, SP, #0x1B8+var_s0
REV             R4, R4
STR             R4, [R1,#-0x1B8]!
MOV             R2, #4
ADD             R0, SP, #0x1B8+var_1B0
BL              sub_25C88
SUBS            R1, R0, #0
BNE             loc_1D358
MOV             R0, R6
BL              sub_124A0
MOV             R1, R5
MOV             R0, R6
BL              sub_125E4
MOV             R2, R5
MOV             R1, R0
ADD             R0, SP, #0x1B8+var_1B0
BL              sub_25C88
CMP             R0, #0
BNE             loc_1D358
ADD             R2, SP, #0x1B8+var_s0
MOV             R3, #0x20 ; ' '
STR             R3, [R2,#-0x1B4]!
ADD             R0, SP, #0x1B8+var_1B0
LDR             R1, [SP,#0x1B8+arg_0]
BL              sub_259AC
CMP             R0, #0
BNE             loc_1D358

loc_1D3CC
ADD             SP, SP, #0x1B8
POP             {R4-R6,PC}
; End of function sub_1D318

off_1D3D4 DCD aHmacError ; "HMAC error"



; void sub_1D3D8()
sub_1D3D8

count= -0x198
iovec= -0x194

PUSH            {R4,R5,LR}
MOV             R3, #0x32 ; '2'
SUB             SP, SP, #0x19C
LDR             R0, =dword_4CA5C
STR             R3, [SP,#0x19C+count]
BL              sub_1DD50
CMP             R0, #0
BEQ             loc_1D408
MOV             R2, #0x47 ; 'G'
LDR             R1, =aPacketC ; "packet.c"
LDR             R0, =aIsemptySesWrit ; "!isempty(&ses.writequeue)"
BL              sub_184D4

loc_1D408
LDR             R4, =byte_4CA40
ADD             R2, SP, #0x19C+count
ADD             R1, SP, #0x19C+iovec
LDR             R0, =dword_4CA5C
BL              sub_1C914
LDR             R2, [SP,#0x19C+count] ; count
ADD             R1, SP, #0x19C+iovec ; iovec
LDR             R0, [R4,#(dword_4CA4C - 0x4CA40)] ; fd
BL              writev
SUBS            R5, R0, #0
BGE             loc_1D458
BL              __errno_location
LDR             R0, [R0] ; errnum
CMP             R0, #0xB
CMPNE           R0, #4
BEQ             loc_1D480
BL              strerror
MOV             R1, R0
LDR             R0, =aErrorWritingS ; "Error writing: %s"
BL              sub_184AC

loc_1D458
MOV             R1, R5
ADD             R0, R4, #0x1C
BL              sub_1C9A0
LDR             R3, [R4,#(dword_4CA68 - 0x4CA40)]
CMP             R5, #0
SUB             R3, R3, R5
STR             R3, [R4,#(dword_4CA68 - 0x4CA40)]
BNE             loc_1D480
LDR             R3, [R4,#(off_4CAE4 - 0x4CA40)]
BLX             R3

loc_1D480
ADD             SP, SP, #0x19C
POP             {R4,R5,PC}
; End of function sub_1D3D8

off_1D488 DCD dword_4CA5C
off_1D48C DCD aPacketC  ; "packet.c"
off_1D490 DCD aIsemptySesWrit ; "!isempty(&ses.writequeue)"
off_1D494 DCD byte_4CA40
off_1D498 DCD aErrorWritingS ; "Error writing: %s"



; _DWORD *sub_1D49C()
sub_1D49C

var_28= -0x28
var_20= -0x20

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x28
LDR             R4, =byte_4CA40
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
LDR             R2, [R3]
LDR             R3, [R3,#8]
LDRB            R1, [R2,#8]
LDRB            R7, [R3,#8]
LDR             R2, [R0,#4]
LDR             R3, [R4,#(dword_4CAB8 - 0x4CA40)]
ADD             R3, R3, R2
STR             R3, [R4,#(dword_4CAB8 - 0x4CA40)]
BL              sub_124A0
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
LDR             R5, [R0,#4]
LDR             R3, [R0,#8]
SUB             R5, R5, R7
SUB             R5, R5, R3
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R1, R5
LDR             R3, [R3,#4]
LDR             R6, [R3,#8]
BL              sub_125E4
MOV             R1, R5
MOV             R8, R0
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_12624
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R1, R0
MOV             R2, R5
MOV             R0, R8
ADD             R3, R3, #0x14
BLX             R6
SUBS            R8, R0, #0
LDRNE           R0, =aErrorDecryptin ; "Error decrypting"
BNE             loc_1D5AC
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_1250C
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R1, R8
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
ADD             R8, SP, #0x28+var_20
LDR             R3, [R3,#8]
LDR             R5, [R0,#4]
LDRB            R6, [R3,#8]
BL              sub_124A0
LDR             R2, [R4,#(dword_4CA6C - 0x4CA40)]
SUB             R5, R5, R6
LDR             R1, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R3, R5
LDR             R0, [R4,#(dword_4CA7C - 0x4CA40)]
STR             R8, [SP,#0x28+var_28]
BL              sub_1D318
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_124A0
MOV             R1, R6
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_125E4
MOV             R2, R6
MOV             R1, R0
MOV             R0, R8
BL              sub_18BC0
SUBS            R5, R0, #0
BEQ             loc_1D5B0
LDR             R0, =aIntegrityError ; "Integrity error"

loc_1D5AC
BL              sub_184AC

loc_1D5B0
MOV             R1, #4
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_124A0
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_12560
LDR             R2, [R4,#(dword_4CA6C - 0x4CA40)]
LDR             R3, [R2,#4]
SUB             R0, R3, R0
MOVW            R3, #0x8014
SUB             R0, R0, R7
SUB             R6, R0, #5
SUB             R0, R0, #6
CMP             R0, R3
BLS             loc_1D5F4
MOV             R1, R6
LDR             R0, =aBadPacketSizeU ; "Bad packet size %u"
BL              sub_184AC

loc_1D5F4
MOV             R0, R2
MOV             R1, #5
BL              sub_124A0
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
LDR             R1, [R0,#8]
STR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
STR             R1, [R4,#(dword_4CA74 - 0x4CA40)]
ADD             R1, R1, R6
BL              sub_12430
LDR             R3, [R4,#(dword_4CA7C - 0x4CA40)]
STR             R5, [R4,#(dword_4CA6C - 0x4CA40)]
ADD             R3, R3, #1
STR             R3, [R4,#(dword_4CA7C - 0x4CA40)]
ADD             SP, SP, #0x28 ; '('
POP             {R4-R8,PC}
; End of function sub_1D49C

off_1D630 DCD byte_4CA40
off_1D634 DCD aErrorDecryptin ; "Error decrypting"
off_1D638 DCD aIntegrityError ; "Integrity error"
off_1D63C DCD aBadPacketSizeU ; "Bad packet size %u"



; _DWORD *sub_1D640()
sub_1D640
PUSH            {R4-R8,LR}
LDR             R4, =byte_4CA40
LDR             R2, [R4,#(dword_4CABC - 0x4CA40)]
LDR             R3, [R4,#(dword_4CA6C - 0x4CA40)]
LDR             R1, [R2]
CMP             R3, #0
LDRB            R6, [R1,#8]
BEQ             loc_1D66C
LDR             R1, [R3,#4]
CMP             R1, R6
BCS             loc_1D7D4

loc_1D66C
LDR             R2, [R2,#8]
CMP             R3, #0
LDRB            R7, [R2,#8]
BNE             loc_1D688
MOV             R0, #0x80
BL              sub_12344
STR             R0, [R4,#(dword_4CA6C - 0x4CA40)]

loc_1D688
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
LDR             R8, [R4,#(dword_4CA48 - 0x4CA40)]
LDR             R5, [R0,#8]
SUB             R5, R6, R5
MOV             R1, R5
BL              sub_12624
MOV             R2, R5  ; nbytes
MOV             R1, R0  ; buf
MOV             R0, R8  ; fd
BL              read
SUBS            R8, R0, #0
BNE             loc_1D730
LDR             R3, [R4,#(off_4CAE4 - 0x4CA40)]
BLX             R3

loc_1D6C0
MOV             R1, R8
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_124C4
CMP             R5, R8
POPNE           {R4-R8,PC}
MOV             R1, #0
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_124A0
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R1, R6
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
LDR             R3, [R3,#4]
LDR             R5, [R3,#8]
BL              sub_125E4
MOV             R1, R6
MOV             R8, R0
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_12624
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R1, R0
MOV             R2, R6
MOV             R0, R8
ADD             R3, R3, #0x14
BLX             R5
CMP             R0, #0
BEQ             loc_1D758
LDR             R0, =aErrorDecryptin ; "Error decrypting"
BL              sub_184AC

loc_1D730
BGE             loc_1D6C0

loc_1D734
BL              __errno_location
LDR             R0, [R0] ; errnum
CMP             R0, #0xB
CMPNE           R0, #4
POPEQ           {R4-R8,PC}
BL              strerror
MOV             R1, R0
LDR             R0, =aErrorReadingS ; "Error reading: %s"
B               loc_1D79C

loc_1D758
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
ADD             R5, R7, #4
BL              sub_12664
MOVW            R3, #0x88B8
ADD             R5, R5, R0
CMP             R5, R3
BHI             loc_1D794
ADD             R3, R7, #0x10
CMP             R5, R3
BCC             loc_1D794
MOV             R1, R6
SUB             R0, R5, R7
BLX             sub_34DFC
CMP             R1, #0
BEQ             loc_1D7A0

loc_1D794
LDR             R0, =aIntegrityError_0 ; "Integrity error (bad packet size %u)"
MOV             R1, R5

loc_1D79C
BL              sub_184AC

loc_1D7A0
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
LDR             R3, [R0,#0xC]
CMP             R5, R3
BLS             loc_1D7BC
MOV             R1, R5
BL              sub_12398
STR             R0, [R4,#(dword_4CA6C - 0x4CA40)]

loc_1D7BC
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_12430
MOV             R1, R6
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_124A0

loc_1D7D4
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
LDMIB           R0, {R3,R5}
SUB             R5, R3, R5
CMP             R5, #0
MOVEQ           R6, R5
BEQ             loc_1D824
LDR             R6, [R4,#(dword_4CA48 - 0x4CA40)]
MOV             R1, R5
BL              sub_125E4
MOV             R2, R5  ; nbytes
MOV             R1, R0  ; buf
MOV             R0, R6  ; fd
BL              read
SUBS            R6, R0, #0
BNE             loc_1D834
LDR             R3, [R4,#(off_4CAE4 - 0x4CA40)]
BLX             R3

loc_1D818
MOV             R1, R6
LDR             R0, [R4,#(dword_4CA6C - 0x4CA40)]
BL              sub_1250C

loc_1D824
CMP             R6, R5
POPNE           {R4-R8,PC}
POP             {R4-R8,LR}
B               sub_1D49C

loc_1D834
BLT             loc_1D734
B               loc_1D818
; End of function sub_1D640

off_1D83C DCD byte_4CA40
off_1D840 DCD aErrorDecryptin ; "Error decrypting"
off_1D844 DCD aErrorReadingS ; "Error reading: %s"
off_1D848 DCD aIntegrityError_0 ; "Integrity error (bad packet size %u)"



; _DWORD *__fastcall sub_1D84C(int, char)
sub_1D84C
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, =dword_4CA5C
BL              sub_125A4
MOV             R1, #0
MOV             R0, R5
BL              sub_124A0
MOV             R0, R4
MOV             R1, R5
BL              sub_1DDE8
LDR             R3, [R4,#(dword_4CA68 - 0x4CA5C)]
SUB             R4, R4, #0x1C
LDR             R2, [R5,#4]
SUB             R3, R3, #1
ADD             R3, R3, R2
STR             R3, [R4,#(dword_4CA68 - 0x4CA40)]
POP             {R4-R6,PC}
; End of function sub_1D84C

off_1D890 DCD dword_4CA5C



; _DWORD *sub_1D894()
sub_1D894

var_2C= -0x2C
var_24= -0x24

PUSH            {R4-R11,LR}
MOV             R1, #0
LDR             R4, =byte_4CA40
SUB             SP, SP, #0x2C
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_124A0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12560
MOV             R1, #0
MOV             R7, R0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_124A0
LDRB            R3, [R4,#(byte_4CA84 - 0x4CA40)]
TST             R3, #1
BNE             loc_1D940
CMP             R7, #0x31 ; '1'
BHI             loc_1D8EC
SUB             R3, R7, #5
UXTB            R3, R3
CMP             R7, #0x14
CMPNE           R3, #1
BHI             loc_1D940

loc_1D8EC
MOV             R6, #0
MOV             R0, #8
BL              sub_18718
MOV             R5, R0
STR             R6, [R0]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_123F4
MOV             R1, R6
STR             R0, [R5,#4]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_124A0
MOV             R1, R6
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12430
LDR             R3, [R4,#(dword_4CAE0 - 0x4CA40)]
CMP             R3, R6
STRNE           R5, [R3]
STREQ           R5, [R4,#(dword_4CADC - 0x4CA40)]
STR             R5, [R4,#(dword_4CAE0 - 0x4CA40)]

loc_1D938
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_1D940
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
LDR             R2, [R3,#0x330]
LDR             R3, [R3,#0x338]
LDRB            R9, [R2,#8]
LDRB            R8, [R3,#8]
LDR             R3, [R4,#(dword_4CA58 - 0x4CA40)]
LDR             R0, [R3,#4]
ADD             R0, R0, #9
ADD             R0, R0, R8
CMP             R9, #0x10
ADDCS           R0, R0, R9
ADDCC           R0, R0, #0x10
BL              sub_12344
MOV             R1, #5
MOV             R5, R0
BL              sub_12430
MOV             R1, #5
MOV             R0, R5
BL              sub_124A0
LDR             R3, [R4,#(dword_4CA58 - 0x4CA40)]
MOV             R0, R5
LDR             R1, [R3,#4]
BL              sub_12624
MOV             R6, R0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
LDR             R1, [R0,#4]
BL              sub_125E4
LDR             R3, [R4,#(dword_4CA58 - 0x4CA40)]
MOV             R1, R0  ; src
MOV             R0, R6  ; dest
LDR             R2, [R3,#4] ; n
BL              memcpy
LDR             R3, [R4,#(dword_4CA58 - 0x4CA40)]
MOV             R0, R5
LDR             R1, [R3,#4]
BL              sub_124C4
MOV             R1, #0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_124A0
MOV             R1, #0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12430
LDR             R10, [R5,#4]
MOV             R1, R9
MOV             R0, R10
BLX             sub_34DFC
SUB             R1, R9, R1
MOV             R0, R5
UXTB            R6, R1
MOV             R1, #0
CMP             R6, #3
ADDLS           R6, R9, R6
UXTBLS          R6, R6
ADD             R10, R6, R10
CMP             R10, #0xF
ADDLS           R6, R6, R9
ADD             R9, SP, #0x2C+var_24
UXTBLS          R6, R6
BL              sub_124A0
LDR             R1, [R5,#4]
MOV             R0, R5
SUB             R1, R1, #4
ADD             R1, R1, R6
BL              sub_1279C
MOV             R1, R6
MOV             R0, R5
BL              sub_125A4
LDR             R1, [R5,#4]
MOV             R0, R5
BL              sub_124A0
MOV             R1, R6
MOV             R0, R5
BL              sub_12464
MOV             R1, R6
MOV             R0, R5
BL              sub_125E4
MOV             R1, R6
BL              sub_18090
LDR             R1, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R2, R5
STR             R9, [SP,#0x2C+var_2C]
LDR             R0, [R4,#(dword_4CA78 - 0x4CA40)]
LDR             R3, [R5,#4]
ADD             R1, R1, #0x330
BL              sub_1D318
MOV             R1, #0
MOV             R0, R5
BL              sub_124A0
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R0, R5
LDR             R6, [R5,#4]
LDR             R3, [R3,#0x334]
MOV             R1, R6
LDR             R10, [R3,#4]
BL              sub_125E4
MOV             R1, R6
MOV             R11, R0
MOV             R0, R5
BL              sub_12624
LDR             R3, [R4,#(dword_4CABC - 0x4CA40)]
MOV             R1, R0
MOV             R2, R6
MOV             R0, R11
ADD             R3, R3, #0x344
BLX             R10
CMP             R0, #0
BEQ             loc_1DAF4
LDR             R0, =aErrorEncryptin ; "Error encrypting"
BL              sub_184AC

loc_1DAF4
MOV             R1, R6
MOV             R0, R5
BL              sub_1250C
MOV             R2, R8
MOV             R1, R9
MOV             R0, R5
BL              sub_127C4
LDR             R2, [R5,#4]
MOV             R1, R7
LDR             R3, [R4,#(dword_4CAB4 - 0x4CA40)]
MOV             R0, R5
ADD             R3, R3, R2
STR             R3, [R4,#(dword_4CAB4 - 0x4CA40)]
BL              sub_1D84C
LDR             R3, [R4,#(dword_4CA78 - 0x4CA40)]
ADD             R3, R3, #1
STR             R3, [R4,#(dword_4CA78 - 0x4CA40)]
BL              sub_18BF0
SUB             R3, R7, #2
STR             R0, [R4,#(dword_4CAA4 - 0x4CA40)]
UXTB            R3, R3
CMP             R7, #0x52 ; 'R'
CMPNE           R3, #1
STRHI           R0, [R4,#(dword_4CAA8 - 0x4CA40)]
B               loc_1D938
; End of function sub_1D894

off_1DB58 DCD byte_4CA40
off_1DB5C DCD aErrorEncryptin ; "Error encrypting"



; _DWORD *sub_1DB60()
sub_1DB60
PUSH            {R4-R6,LR}
LDR             R5, =byte_4CA40
LDRB            R3, [R5,#(byte_4CA84 - 0x4CA40)]
TST             R3, #1
LDRNE           R4, [R5,#(dword_4CADC - 0x4CA40)]
POPEQ           {R4-R6,PC}

loc_1DB78
CMP             R4, #0
BNE             loc_1DB8C
STR             R4, [R5,#(dword_4CAE0 - 0x4CA40)]
STR             R4, [R5,#(dword_4CADC - 0x4CA40)]
POP             {R4-R6,PC}

loc_1DB8C
LDR             R3, [R4,#4]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
LDM             R3, {R1,R2}
BL              sub_127C4
LDR             R0, [R4,#4] ; ptr
BL              j_free
LDR             R6, [R4]
MOV             R0, R4  ; ptr
BL              free
BL              sub_1D894
MOV             R4, R6
B               loc_1DB78
; End of function sub_1DB60

off_1DBBC DCD byte_4CA40



; _DWORD *sub_1DBC0()
sub_1DBC0
PUSH            {R4,LR}
MOV             R1, #3
LDR             R4, =byte_4CA40
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R4,#(dword_4CA7C - 0x4CA40)]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
SUB             R1, R1, #1
BL              sub_1279C
POP             {R4,LR}
B               sub_1D894
; End of function sub_1DBC0

off_1DBEC DCD byte_4CA40



; void sub_1DBF0()
sub_1DBF0
PUSH            {R4-R6,LR}
LDR             R4, =byte_4CA40
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12560
MOV             R5, R0
STRB            R0, [R4,#(byte_4CA87 - 0x4CA40)]
BL              sub_18BF0
CMP             R5, #1
MOV             R6, R0
STR             R0, [R4,#(dword_4CAA0 - 0x4CA40)]
BEQ             loc_1DC94
BCC             loc_1DC28
CMP             R5, #4
BLS             loc_1DC80

loc_1DC28
LDRB            R2, [R4,#(byte_4CA85 - 0x4CA40)]
AND             R3, R5, #0xFD
CMP             R3, #0x50 ; 'P'
STRNE           R6, [R4,#(dword_4CAA8 - 0x4CA40)]
SUB             R3, R2, R5
CMP             R2, R5
CMPNE           R2, #0
CLZ             R3, R3
MOV             R3, R3,LSR#5
BEQ             loc_1DCAC
SUB             R3, R5, #1
CMP             R3, #0x30 ; '0'
SUB             R1, R5, #5
MOVLS           R3, #1
MOVHI           R3, #0
CMP             R1, #1
MOVLS           R3, #0
CMP             R3, #0
BEQ             loc_1DCA0
CMP             R5, #0x14
BEQ             loc_1DCA0

loc_1DC7C
BL              sub_1DBC0

loc_1DC80               ; ptr
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              j_free
MOV             R3, #0
STR             R3, [R4,#(dword_4CA70 - 0x4CA40)]
POP             {R4-R6,PC}

loc_1DC94
LDR             R0, =aDisconnectRece ; "Disconnect received"
BL              sub_18484
B               loc_1DC28

loc_1DCA0
MOV             R1, R5
LDR             R0, =aUnexpectedPack ; "Unexpected packet type %d, expected %d"
BL              sub_184AC

loc_1DCAC
LDRB            R1, [R4,#(byte_4CA86 - 0x4CA40)]
CMP             R1, #0
MOVNE           R3, #0
STRBNE          R3, [R4,#(byte_4CA86 - 0x4CA40)]
BNE             loc_1DC80
CMP             R2, #0
MOVNE           R2, R3
MOVEQ           R2, #0
CMP             R2, #0
LDR             R2, [R4,#(dword_4CAFC - 0x4CA40)]
STRBNE          R1, [R4,#(byte_4CA85 - 0x4CA40)]
CMP             R5, #0x3C ; '<'
MOVLS           R3, #0
MOVHI           R3, #1
CMP             R2, #0
MOVNE           R3, #0
CMP             R3, #0
LDREQ           R3, [R4,#(dword_4CA80 - 0x4CA40)]
BEQ             loc_1DD04
MOV             R1, R5
LDR             R0, =aReceivedMessag ; "Received message %d before userauth"
BL              sub_184AC

loc_1DD04
LDRB            R2, [R3]
MOV             R1, R3
CMP             R2, #0
BEQ             loc_1DC7C
CMP             R2, R5
ADD             R3, R3, #8
BNE             loc_1DD04
LDR             R3, [R1,#4]
BLX             R3
B               loc_1DC80
; End of function sub_1DBF0

off_1DD2C DCD byte_4CA40
off_1DD30 DCD aDisconnectRece ; "Disconnect received"
off_1DD34 DCD aUnexpectedPack ; "Unexpected packet type %d, expected %d"
off_1DD38 DCD aReceivedMessag ; "Received message %d before userauth"



; _DWORD *__fastcall sub_1DD3C(_DWORD *result)
sub_1DD3C
MOV             R3, #0
STR             R3, [R0]
STR             R3, [R0,#4]
STR             R3, [R0,#8]
BX              LR
; End of function sub_1DD3C




; bool __fastcall sub_1DD50(_DWORD *)
sub_1DD50
LDR             R0, [R0]
CLZ             R0, R0
MOV             R0, R0,LSR#5
BX              LR
; End of function sub_1DD50




; int __fastcall sub_1DD60(int)
sub_1DD60
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R0, [R0] ; ptr
CMP             R0, #0
BNE             loc_1DD84
MOV             R2, #0x2D ; '-'
LDR             R1, =aQueueC ; "queue.c"
LDR             R0, =aIsemptyQueue ; "!isempty(queue)"
BL              sub_184D4

loc_1DD84
LDR             R3, [R0,#4]
LDR             R5, [R0]
CMP             R3, #0
STR             R3, [R4]
STREQ           R3, [R4,#4]
BL              free
LDR             R3, [R4,#8]
MOV             R0, R5
SUB             R3, R3, #1
STR             R3, [R4,#8]
POP             {R4-R6,PC}
; End of function sub_1DD60

off_1DDB0 DCD aQueueC   ; "queue.c"
off_1DDB4 DCD aIsemptyQueue ; "!isempty(queue)"



; int __fastcall sub_1DDB8(int)
sub_1DDB8
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_1DDD8
PUSH            {R4,LR}
MOV             R2, #0x41 ; 'A'
LDR             R1, =aQueueC ; "queue.c"
LDR             R0, =aIsemptyQueue ; "!isempty(queue)"
BL              sub_184D4

loc_1DDD8
LDR             R0, [R3]
BX              LR
; End of function sub_1DDB8

off_1DDE0 DCD aQueueC   ; "queue.c"
off_1DDE4 DCD aIsemptyQueue ; "!isempty(queue)"



; _DWORD *__fastcall sub_1DDE8(int *, int)
sub_1DDE8
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, #8
MOV             R5, R1
BL              sub_18718
MOV             R3, #0
STR             R5, [R0]
STR             R3, [R0,#4]
LDR             R3, [R4,#4]
CMP             R3, #0
STRNE           R0, [R3,#4]
LDR             R3, [R4]
STR             R0, [R4,#4]
CMP             R3, #0
LDR             R3, [R4,#8]
STREQ           R0, [R4]
ADD             R3, R3, #1
STR             R3, [R4,#8]
POP             {R4-R6,PC}
; End of function sub_1DDE8




; void __fastcall sub_1DE34(int **, int, int)
sub_1DE34

var_D4= -0xD4

LDR             R3, =unk_36B95
PUSH            {R4-R7,LR}
SUB             SP, SP, #0xE4
MOV             R7, R2
MOV             R2, SP
MOV             LR, R0
MOV             R6, R1
ADD             R4, R3, #0x10
MOV             R5, R2

loc_1DE58
LDR             R0, [R3]
ADD             R3, R3, #8
LDR             R1, [R3,#-4]
CMP             R3, R4
MOV             R12, R2
STM             R12!, {R0,R1}
MOV             R2, R12
BNE             loc_1DE58
CMP             LR, #0
BNE             loc_1DE90
LDR             R1, =aRsaC ; "rsa.c"
MOV             R2, #0x170
LDR             R0, =(aSkeyNull+1) ; "key != NULL"

loc_1DE8C
BL              sub_184D4

loc_1DE90
LDR             R0, [LR]
BL              sub_2EB68
SUB             R0, R0, #1
BL              sub_12344
MOV             R1, #1
MOV             R4, R0

loc_1DEA8
BL              sub_125A4
LDR             R3, [R4,#0xC]
LDR             R2, [R4,#8]
SUB             R3, R3, #0x24 ; '$'
CMP             R2, R3
BNE             loc_1DF58
MOV             R1, #0x10
MOV             R0, R4
BL              sub_12624
MOV             R2, R5
MOV             R12, R0
ADD             R5, SP, #0xE4+var_D4

loc_1DED8
MOV             R3, R2
ADD             R12, R12, #8
LDM             R3!, {R0,R1}
CMP             R3, R5
STR             R0, [R12,#-8]
STR             R1, [R12,#-4]
MOV             R2, R3
BNE             loc_1DED8
MOV             R1, #0x10
MOV             R0, R4
BL              sub_124C4
MOV             R0, R5
BL              sub_24A08
LDM             R6, {R1,R2} ; src
MOV             R0, R5  ; int
BL              sub_24A78
MOV             R1, #0x14
MOV             R0, R4
BL              sub_12624
MOV             R1, R0
MOV             R0, R5
BL              sub_248D4
MOV             R1, #0x14
MOV             R0, R4
BL              sub_124C4
LDRD            R2, R3, [R4,#8]
CMP             R2, R3
BEQ             loc_1DF64
MOVW            R2, #0x185
LDR             R1, =aRsaC ; "rsa.c"
LDR             R0, =aRsaEmPosRsaEmS ; "rsa_EM->pos == rsa_EM->size"
B               loc_1DE8C

loc_1DF58
MOV             R1, #0xFF
MOV             R0, R4
B               loc_1DEA8

loc_1DF64
MOV             R0, R4
MOV             R1, #0
BL              sub_124A0
LDR             R1, [R4,#0xC]
MOV             R0, R4
BL              sub_125E4
LDR             R2, [R4,#0xC]
MOV             R1, R0
MOV             R0, R7
BL              sub_122E8
MOV             R0, R4  ; ptr
BL              j_free
ADD             SP, SP, #0xE4
POP             {R4-R7,PC}
; End of function sub_1DE34

off_1DF9C DCD unk_36B95
off_1DFA0 DCD aRsaC     ; "rsa.c"
off_1DFA4 DCD aSkeyNull+1 ; "key != NULL"
off_1DFA8 DCD aRsaEmPosRsaEmS ; "rsa_EM->pos == rsa_EM->size"



; int __fastcall sub_1DFAC(_DWORD *, int *)
sub_1DFAC
PUSH            {R4-R8,LR}
SUBS            R4, R1, #0
BNE             loc_1DFC8
MOV             R2, #0x34 ; '4'
LDR             R1, =aRsaC ; "rsa.c"
LDR             R0, =(aSkeyNull+1) ; "key != NULL"
BL              sub_184D4

loc_1DFC8
ADD             R7, R4, #4
MOV             R6, R0
MOV             R2, #0
MOV             R5, #0
MOV             R0, R7
BL              sub_12224
MOV             R1, #0xB
MOV             R0, R6
STR             R5, [R4,#8]
STR             R5, [R4,#0xC]
STR             R5, [R4,#0x10]
BL              sub_1250C
LDR             R1, [R4,#4]
MOV             R0, R6
BL              sub_12910
CMN             R0, #1
BEQ             loc_1E050
LDR             R1, [R4]
MOV             R0, R6
BL              sub_12910
CMN             R0, #1
BEQ             loc_1E050
LDR             R0, [R4]
BL              sub_2A310
CMP             R0, #0x400
LDRLT           R1, =aRsaKeyTooShort ; "RSA key too short"
BLT             loc_1E048
LDR             R0, [R4,#4]
BL              sub_2A310
CMP             R0, #0x40 ; '@'
BLE             loc_1E068
LDR             R1, =aRsaKeyBadE ; "RSA key bad e"

loc_1E048
MOV             R0, #4
BL              sub_184E8

loc_1E050
MOV             R0, R7
MOV             R2, #0
MOV             R1, R4
BL              sub_12288
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}

loc_1E068
MOV             R0, R5
POP             {R4-R8,PC}
; End of function sub_1DFAC

off_1E070 DCD aRsaC     ; "rsa.c"
off_1E074 DCD aSkeyNull+1 ; "key != NULL"
off_1E078 DCD aRsaKeyTooShort ; "RSA key too short"
off_1E07C DCD aRsaKeyBadE ; "RSA key bad e"



; int __fastcall sub_1E080(_DWORD *, int *)
sub_1E080
PUSH            {R4-R8,LR}
SUBS            R4, R1, #0
BNE             loc_1E09C
MOV             R2, #0x5D ; ']'
LDR             R1, =aRsaC ; "rsa.c"
LDR             R0, =(aSkeyNull+1) ; "key != NULL"
BL              sub_184D4

loc_1E09C
MOV             R5, R0
BL              sub_1DFAC
CMN             R0, #1
POPEQ           {R4-R8,PC}
MOV             R6, #0
ADD             R7, R4, #8
MOV             R1, R6
MOV             R0, R7
STR             R6, [R4,#8]
STR             R6, [R4,#0xC]
STR             R6, [R4,#0x10]
BL              sub_12224
LDR             R1, [R4,#8]
MOV             R0, R5
BL              sub_12910
CMN             R0, #1
BNE             loc_1E0FC

loc_1E0E0
MOV             R0, R7
MOV             R3, #0
ADD             R2, R4, #0x10
ADD             R1, R4, #0xC
BL              sub_12288
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}

loc_1E0FC
LDR             R2, [R5,#8]
LDR             R3, [R5,#4]
CMP             R2, R3
BNE             loc_1E114

loc_1E10C
MOV             R0, #0
POP             {R4-R8,PC}

loc_1E114
MOV             R2, R6
ADD             R1, R4, #0x10
ADD             R0, R4, #0xC
BL              sub_12224
LDR             R1, [R4,#0xC]
MOV             R0, R5
BL              sub_12910
CMN             R0, #1
BEQ             loc_1E0E0
LDR             R1, [R4,#0x10]
MOV             R0, R5
BL              sub_12910
CMN             R0, #1
BNE             loc_1E10C
B               loc_1E0E0
; End of function sub_1E080

off_1E150 DCD aRsaC     ; "rsa.c"
off_1E154 DCD aSkeyNull+1 ; "key != NULL"



; void __fastcall sub_1E158(int *)
sub_1E158

var_8= -8
var_4= -4

PUSH            {R0,R1,R4,LR}
SUBS            R4, R0, #0
BEQ             loc_1E194
MOV             R3, #0
ADD             R0, R4, #8
STR             R3, [SP,#8+var_4]
ADD             R2, R4, #0xC
STR             R4, [SP,#8+var_8]
ADD             R3, R4, #0x10
ADD             R1, R4, #4
BL              sub_12288
MOV             R0, R4  ; ptr
ADD             SP, SP, #8
POP             {R4,LR}
B               free

loc_1E194
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_1E158




; _DWORD *__fastcall sub_1E19C(_DWORD *, int *)
sub_1E19C
PUSH            {R4-R6,LR}
SUBS            R5, R1, #0
BNE             loc_1E1B8
MOV             R2, #0x9F
LDR             R1, =aRsaC ; "rsa.c"
LDR             R0, =(aSkeyNull+1) ; "key != NULL"
BL              sub_184D4

loc_1E1B8
MOV             R4, R0
MOV             R2, #7
LDR             R1, =aSshRsa ; "ssh-rsa"
BL              sub_127F8
LDR             R1, [R5,#4]
MOV             R0, R4
BL              sub_1282C
LDR             R1, [R5]
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_1282C
; End of function sub_1E19C

off_1E1E4 DCD aRsaC     ; "rsa.c"
off_1E1E8 DCD aSkeyNull+1 ; "key != NULL"
off_1E1EC DCD aSshRsa   ; "ssh-rsa"



; _DWORD *__fastcall sub_1E1F0(_DWORD *, int *)
sub_1E1F0
PUSH            {R4-R6,LR}
SUBS            R5, R1, #0
BNE             loc_1E20C
MOV             R2, #0xAE
LDR             R1, =aRsaC ; "rsa.c"
LDR             R0, =(aSkeyNull+1) ; "key != NULL"
BL              sub_184D4

loc_1E20C
MOV             R4, R0
BL              sub_1E19C
LDR             R1, [R5,#8]
MOV             R0, R4
BL              sub_1282C
LDR             R1, [R5,#0xC]
CMP             R1, #0
BEQ             loc_1E234
MOV             R0, R4
BL              sub_1282C

loc_1E234
LDR             R1, [R5,#0x10]
CMP             R1, #0
POPEQ           {R4-R6,PC}
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_1282C
; End of function sub_1E1F0

off_1E24C DCD aRsaC     ; "rsa.c"
off_1E250 DCD aSkeyNull+1 ; "key != NULL"



; int __fastcall sub_1E254(_DWORD *, int **, int)
sub_1E254

var_24= -0x24
s= -0x14

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x34
MOV             R4, R1
MOV             R5, R0
MOV             R1, #0  ; c
MOV             R6, R2
MOV             R0, SP  ; s
MOV             R2, #0x10 ; n
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, R2 ; s
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x34+s ; s
BL              memset
CMP             R4, #0
BNE             loc_1E2B0
MOV             R2, #0xCB
LDR             R1, =aRsaC ; "rsa.c"
LDR             R0, =(aSkeyNull+1) ; "key != NULL"
BL              sub_184D4

loc_1E2B0
MOV             R3, #0
ADD             R2, SP, #0x34+s
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_121CC
MOV             R0, R5
BL              sub_12664
MOV             R7, R0
LDR             R0, [R4]
BL              sub_2EB68
CMP             R0, R7
BEQ             loc_1E304

loc_1E2E0
MOV             R4, #0xFFFFFFFF

loc_1E2E4
ADD             R0, SP, #0x34+var_24
MOV             R3, #0
ADD             R2, SP, #0x34+s
MOV             R1, SP
BL              sub_29DB8
MOV             R0, R4
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R7,PC}

loc_1E304
LDMIB           R5, {R1,R3}
SUB             R1, R1, R3
MOV             R0, R5
BL              sub_125E4
LDMIB           R5, {R2,R3}
SUB             R2, R2, R3
MOV             R1, R0
MOV             R0, SP
BL              sub_2DE30
CMP             R0, #0
BNE             loc_1E2E0
LDR             R1, [R4]
MOV             R0, SP
BL              sub_29E00
CMN             R0, #1
BNE             loc_1E2E0
ADD             R2, SP, #0x34+s
MOV             R1, R6
MOV             R0, R4
BL              sub_1DE34
ADD             R3, SP, #0x34+var_24
LDR             R2, [R4]
LDR             R1, [R4,#4]
MOV             R0, SP
BL              sub_2AB08
CMP             R0, #0
BNE             loc_1E2E0
ADD             R1, SP, #0x34+var_24
ADD             R0, SP, #0x34+s
BL              sub_29E00
MOVS            R0, R0
MOVNE           R0, #1
RSB             R4, R0, #0
B               loc_1E2E4
; End of function sub_1E254

off_1E38C DCD aRsaC     ; "rsa.c"
off_1E390 DCD aSkeyNull+1 ; "key != NULL"



; int __fastcall sub_1E394(_DWORD *, int **, int)
sub_1E394

var_48= -0x48
s= -0x40
var_30= -0x30
var_20= -0x20
var_10= -0x10

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x48
MOV             R4, R1
MOV             R6, R0
MOV             R1, #0  ; c
MOV             R5, R2
ADD             R0, SP, #0x48+s ; s
MOV             R2, #0x10 ; n
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x48+var_30 ; s
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x48+var_20 ; s
BL              memset
MOV             R2, #0x10 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x48+var_10 ; s
BL              memset
CMP             R4, #0
BNE             loc_1E400
LDR             R1, =aRsaC ; "rsa.c"
MOVW            R2, #0x102
LDR             R0, =(aSkeyNull+1) ; "key != NULL"

loc_1E3FC
BL              sub_184D4

loc_1E400
MOV             R3, #0
ADD             R2, SP, #0x48+var_20
STR             R3, [SP,#0x48+var_48]
ADD             R1, SP, #0x48+var_30
ADD             R3, SP, #0x48+var_10
ADD             R0, SP, #0x48+s
BL              sub_121CC
ADD             R2, SP, #0x48+var_30
MOV             R1, R5
MOV             R0, R4
BL              sub_1DE34
ADD             R1, SP, #0x48+var_20
LDR             R0, [R4]
BL              sub_18314
ADD             R3, SP, #0x48+s
LDR             R2, [R4]
LDR             R1, [R4,#4]
ADD             R0, SP, #0x48+var_20
BL              sub_2AB08
CMP             R0, #0
BEQ             loc_1E45C

loc_1E454
LDR             R0, =aRsaError ; "RSA error"
BL              sub_184AC

loc_1E45C
ADD             R2, SP, #0x48+var_10
LDR             R1, [R4]
ADD             R0, SP, #0x48+var_20
BL              sub_2BBA8
CMP             R0, #0
BNE             loc_1E454
ADD             R3, SP, #0x48+var_20
LDR             R2, [R4]
ADD             R1, SP, #0x48+s
ADD             R0, SP, #0x48+var_30
BL              sub_2CCE0
CMP             R0, #0
BNE             loc_1E454
ADD             R3, SP, #0x48+var_30
LDR             R2, [R4]
LDR             R1, [R4,#8]
ADD             R0, SP, #0x48+var_20
BL              sub_2AB08
CMP             R0, #0
BNE             loc_1E454
ADD             R3, SP, #0x48+s
LDR             R2, [R4]
ADD             R1, SP, #0x48+var_10
ADD             R0, SP, #0x48+var_30
BL              sub_2CCE0
SUBS            R5, R0, #0
BNE             loc_1E454
MOV             R3, R5
ADD             R2, SP, #0x48+var_10
ADD             R1, SP, #0x48+var_20
ADD             R0, SP, #0x48+var_30
BL              sub_29DB8
MOV             R2, #7
LDR             R1, =aSshRsa ; "ssh-rsa"
MOV             R0, R6
BL              sub_127F8
LDR             R0, [R4]
BL              sub_2EB68
MOV             R7, R0
MOV             R1, R0
MOV             R0, R6
BL              sub_1279C
ADD             R0, SP, #0x48+s
BL              sub_2EB68
CMP             R7, R0
MOV             R8, R0
SUBCS           R7, R7, R0
BCS             loc_1E53C
MOVW            R2, #0x142
LDR             R1, =aRsaC ; "rsa.c"
LDR             R0, =aSsizeNsize ; "ssize <= nsize"
B               loc_1E3FC

loc_1E52C
ADD             R5, R5, #1
MOV             R1, #0
MOV             R0, R6
BL              sub_125A4

loc_1E53C
CMP             R7, R5
BHI             loc_1E52C
MOV             R1, R8
MOV             R0, R6
BL              sub_12624
MOV             R1, R0
ADD             R0, SP, #0x48+s
BL              sub_2EACC
CMP             R0, #0
BNE             loc_1E454
MOV             R1, R8
MOV             R0, R6
BL              sub_124C4
ADD             R0, SP, #0x48+s
BL              sub_29D74
ADD             SP, SP, #0x48 ; 'H'
POP             {R4-R8,PC}
; End of function sub_1E394

off_1E580 DCD aRsaC     ; "rsa.c"
off_1E584 DCD aSkeyNull+1 ; "key != NULL"
off_1E588 DCD aRsaError ; "RSA error"
off_1E58C DCD aSshRsa   ; "ssh-rsa"
off_1E590 DCD aSsizeNsize ; "ssize <= nsize"



; char *__fastcall sub_1E594(char *, unsigned int)
sub_1E594

var_E9= -0xE9
var_E8= -0xE8
var_D4= -0xD4

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xEC
MOV             R4, R0
MOV             R5, R1
ADD             R0, SP, #0xEC+var_D4
BL              sub_24A08
MOV             R2, R5
MOV             R1, R4  ; src
ADD             R0, SP, #0xEC+var_D4 ; int
BL              sub_24A78
ADD             R1, SP, #0xEC+var_E8
ADD             R0, SP, #0xEC+var_D4
BL              sub_248D4
MOV             R0, #0x43 ; 'C'
BL              sub_18718
LDR             R1, =src ; "sha1!! "
MOV             R4, R0
BL              strcpy
ADD             R1, SP, #0xEC+var_E9
MOV             R2, R4
ADD             R0, R4, #0x3C ; '<'
MOV             R12, #0x3A ; ':'

loc_1E5EC
LDRB            R3, [R1,#1]!
ADD             R2, R2, #3
MOV             R3, R3,LSR#4
CMP             R3, #9
ADDLS           R3, R3, #0x30 ; '0'
ADDHI           R3, R3, #0x57 ; 'W'
STRB            R3, [R2,#4]
LDRB            R3, [R1]
STRB            R12, [R2,#6]
AND             R3, R3, #0xF
CMP             R3, #9
ADDLS           R3, R3, #0x30 ; '0'
ADDHI           R3, R3, #0x57 ; 'W'
STRB            R3, [R2,#5]
CMP             R2, R0
BNE             loc_1E5EC
MOV             R3, #0
MOV             R0, R4
STRB            R3, [R4,#0x42]
ADD             SP, SP, #0xEC
POP             {R4,R5,PC}
; End of function sub_1E594

off_1E640 DCD src       ; "sha1!! "



; _DWORD *sub_1E644()
sub_1E644
PUSH            {R4,LR}
MOV             R0, #0x1C
BL              sub_18718
MOV             R1, #0x5A ; 'Z'
MOV             R2, #2
STM             R0, {R1,R2}
POP             {R4,PC}
; End of function sub_1E644




; char *__fastcall sub_1E660(unsigned int, size_t *)
sub_1E660
CMP             R0, #3
PUSH            {R4-R6,LR}
BLS             loc_1E678
MOV             R1, R0
LDR             R0, =aBadKeyTypeD ; "Bad key type %d"
BL              sub_184AC

loc_1E678
LDR             R3, =off_36C00 ; "ssh-rsa"
CMP             R1, #0
MOV             R5, R1
LDR             R4, [R3,R0,LSL#2]
BEQ             loc_1E698
MOV             R0, R4  ; s
BL              strlen
STR             R0, [R5]

loc_1E698
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_1E660

off_1E6A0 DCD aBadKeyTypeD ; "Bad key type %d"
off_1E6A4 DCD off_36C00 ; "ssh-rsa"



; int __fastcall sub_1E6A8(const void *, size_t)
sub_1E6A8
PUSH            {R4-R10,LR}
MOV             R8, R0
LDR             R9, =off_36C00 ; "ssh-rsa"
MOV             R6, R1
MOV             R4, #0

loc_1E6BC
LDR             R7, [R9,R4,LSL#2]
MOV             R5, R4
MOV             R0, R7  ; s
BL              strlen
CMP             R0, R6
BNE             loc_1E6EC
MOV             R2, R6  ; n
MOV             R1, R8  ; s2
MOV             R0, R7  ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_1E6FC

loc_1E6EC
ADD             R4, R4, #1
CMP             R4, #4
BNE             loc_1E6BC
MOV             R5, #0x5A ; 'Z'

loc_1E6FC
MOV             R0, R5
POP             {R4-R10,PC}
; End of function sub_1E6A8

off_1E704 DCD off_36C00 ; "ssh-rsa"



; int __fastcall sub_1E708(int, int)
sub_1E708
CMP             R1, #3  ; switch 4 cases
LDRLS           PC, [PC,R1,LSL#2] ; switch jump
B               def_1E70C ; jumptable 0001E70C default case
jpt_1E70C DCD loc_1E73C ; jump table for switch statement
DCD loc_1E724
DCD loc_1E72C
DCD loc_1E734

loc_1E724               ; jumptable 0001E70C case 1
ADD             R0, R0, #0x10
BX              LR

loc_1E72C               ; jumptable 0001E70C case 2
ADD             R0, R0, #0x14
BX              LR

loc_1E734               ; jumptable 0001E70C case 3
ADD             R0, R0, #0x18
BX              LR

loc_1E73C               ; jumptable 0001E70C case 0
ADD             R0, R0, #0xC
BX              LR

def_1E70C               ; jumptable 0001E70C default case
MOV             R0, #0
BX              LR
; End of function sub_1E708




; int __fastcall sub_1E74C(_DWORD *, int, int *)
sub_1E74C

var_4= -4

PUSH            {R0,R1,R4-R8,LR}
MOV             R6, R1
ADD             R1, SP, #8+var_4
MOV             R4, R2
MOV             R7, R0
BL              sub_12690
LDR             R1, [SP,#8+var_4]
MOV             R8, R0
BL              sub_1E6A8
MOV             R5, R0
MOV             R0, R8  ; ptr
BL              free
LDR             R3, [R4]
CMP             R3, R5
CMPNE           R3, #0x50 ; 'P'
MOVNE           R4, #0xFFFFFFFF
BNE             loc_1E84C
LDR             R1, [SP,#8+var_4]
MOV             R0, R7
STR             R5, [R4]
RSB             R1, R1, #0xFF000000
ADD             R1, R1, #0xFF0000
ADD             R1, R1, #0xFF00
ADD             R1, R1, #0xFC
BL              sub_1250C
CMP             R5, #0
MOVNE           R4, #0xFFFFFFFF
BNE             loc_1E7F4
LDR             R0, [R6,#0xC]
BL              sub_1E158
MOV             R0, #0x14
BL              sub_18718
MOV             R1, R0
STR             R0, [R6,#0xC]
MOV             R0, R7
BL              sub_1DFAC
CMN             R0, #1
MOV             R4, R0
BNE             loc_1E7F4
LDR             R0, [R6,#0xC]
BL              sub_1E158
STR             R5, [R6,#0xC]

loc_1E7F4
MOV             R0, R5
BL              sub_197C0
CMP             R0, #0
BEQ             loc_1E84C
MOV             R1, R5
MOV             R0, R6
BL              sub_1E708
SUBS            R5, R0, #0
BEQ             loc_1E84C
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_1E838
BL              sub_277B4
LDR             R0, [R5] ; ptr
BL              free
MOV             R3, #0
STR             R3, [R5]

loc_1E838
MOV             R0, R7
BL              sub_198C8
CMP             R0, #0
STR             R0, [R5]
MOVNE           R4, #0

loc_1E84C
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_1E74C




; int __fastcall sub_1E858(_DWORD *, int, int *)
sub_1E858

var_4= -4

PUSH            {R0,R1,R4-R8,LR}
MOV             R6, R1
ADD             R1, SP, #8+var_4
MOV             R4, R2
MOV             R7, R0
BL              sub_12690
LDR             R1, [SP,#8+var_4]
MOV             R8, R0
BL              sub_1E6A8
MOV             R5, R0
MOV             R0, R8  ; ptr
BL              free
LDR             R3, [R4]
CMP             R3, R5
CMPNE           R3, #0x50 ; 'P'
MOVNE           R4, #0xFFFFFFFF
BNE             loc_1E958
LDR             R1, [SP,#8+var_4]
MOV             R0, R7
STR             R5, [R4]
RSB             R1, R1, #0xFF000000
ADD             R1, R1, #0xFF0000
ADD             R1, R1, #0xFF00
ADD             R1, R1, #0xFC
BL              sub_1250C
CMP             R5, #0
MOVNE           R4, #0xFFFFFFFF
BNE             loc_1E900
LDR             R0, [R6,#0xC]
BL              sub_1E158
MOV             R0, #0x14
BL              sub_18718
MOV             R1, R0
STR             R0, [R6,#0xC]
MOV             R0, R7
BL              sub_1E080
CMN             R0, #1
MOV             R4, R0
BNE             loc_1E900
LDR             R0, [R6,#0xC]
BL              sub_1E158
STR             R5, [R6,#0xC]

loc_1E900
MOV             R0, R5
BL              sub_197C0
CMP             R0, #0
BEQ             loc_1E958
MOV             R1, R5
MOV             R0, R6
BL              sub_1E708
SUBS            R5, R0, #0
BEQ             loc_1E958
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_1E944
BL              sub_277B4
LDR             R0, [R5] ; ptr
BL              free
MOV             R3, #0
STR             R3, [R5]

loc_1E944
MOV             R0, R7
BL              sub_199A4
CMP             R0, #0
STR             R0, [R5]
MOVNE           R4, #0

loc_1E958
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_1E858




; void __fastcall sub_1E964(_DWORD *, int, int)
sub_1E964
PUSH            {R4-R8,LR}
MOV             R5, R2
MOV             R7, R0
MOVW            R0, #0x6A4
MOV             R6, R1
BL              sub_12344
CMP             R5, #0
MOV             R4, R0
BNE             loc_1E990
LDR             R1, [R6,#0xC]
BL              sub_1E19C

loc_1E990
MOV             R0, R5
BL              sub_197C0
CMP             R0, #0
BEQ             loc_1E9C8
MOV             R1, R5
MOV             R0, R6
BL              sub_1E708
CMP             R0, #0
BEQ             loc_1E9C8
LDR             R1, [R0]
CMP             R1, #0
BEQ             loc_1E9C8
MOV             R0, R4
BL              sub_199E8

loc_1E9C8
LDR             R3, [R4,#4]
CMP             R3, #0
BNE             loc_1E9DC
LDR             R0, =aBadKeyTypesInB ; "Bad key types in buf_put_pub_key"
BL              sub_184AC

loc_1E9DC
MOV             R0, R7
MOV             R1, R4
BL              sub_12824
MOV             R0, R4  ; ptr
POP             {R4-R8,LR}
B               j_free
; End of function sub_1E964

off_1E9F4 DCD aBadKeyTypesInB ; "Bad key types in buf_put_pub_key"



; _DWORD *__fastcall sub_1E9F8(_DWORD *, int, int)
sub_1E9F8
PUSH            {R4-R6,LR}
SUBS            R5, R2, #0
BNE             loc_1EA10
LDR             R1, [R1,#0xC]
POP             {R4-R6,LR}
B               sub_1E1F0

loc_1EA10
MOV             R6, R0
MOV             R0, R5
MOV             R4, R1
BL              sub_197C0
CMP             R0, #0
BEQ             loc_1EA54
MOV             R1, R5
MOV             R0, R4
BL              sub_1E708
CMP             R0, #0
BEQ             loc_1EA54
LDR             R1, [R0]
CMP             R1, #0
BEQ             loc_1EA54
MOV             R0, R6
POP             {R4-R6,LR}
B               sub_19A64

loc_1EA54
LDR             R0, =aBadKeyTypesInP ; "Bad key types in put pub key"
BL              sub_184AC
; End of function sub_1E9F8

off_1EA5C DCD aBadKeyTypesInP ; "Bad key types in put pub key"



; void __fastcall sub_1EA60(int)
sub_1EA60
PUSH            {R4-R6,LR}
MOV             R4, R0
LDR             R0, [R0,#0xC]
MOV             R5, #0
BL              sub_1E158
LDR             R0, [R4,#0x10]
STR             R5, [R4,#0xC]
CMP             R0, R5
BEQ             loc_1EA94
BL              sub_277B4
LDR             R0, [R4,#0x10] ; ptr
BL              free
STR             R5, [R4,#0x10]

loc_1EA94
LDR             R0, [R4,#0x14]
CMP             R0, #0
BEQ             loc_1EAB4
BL              sub_277B4
LDR             R0, [R4,#0x14] ; ptr
BL              free
MOV             R3, #0
STR             R3, [R4,#0x14]

loc_1EAB4
LDR             R0, [R4,#0x18]
CMP             R0, #0
BEQ             loc_1EACC
BL              sub_277B4
LDR             R0, [R4,#0x18] ; ptr
BL              free

loc_1EACC               ; ptr
LDR             R0, [R4,#8]
BL              free
MOV             R0, R4  ; ptr
POP             {R4-R6,LR}
B               free
; End of function sub_1EA60



; Attributes: thunk

; int __fastcall sub_1EAE0(_DWORD, _DWORD)
sub_1EAE0
B               sub_1E594
; End of function sub_1EAE0




; void __fastcall sub_1EAE4(_DWORD *, int, int, _DWORD *)
sub_1EAE4
PUSH            {R4-R8,LR}
MOV             R5, R2
MOV             R8, R0
MOVW            R0, #0x6A4
MOV             R7, R1
MOV             R6, R3
BL              sub_12344
CMP             R5, #0
MOV             R4, R0
BNE             loc_1EB18
MOV             R2, R6
LDR             R1, [R7,#0xC]
BL              sub_1E394

loc_1EB18
MOV             R0, R5
BL              sub_197C0
CMP             R0, #0
BEQ             loc_1EB54
MOV             R1, R5
MOV             R0, R7
BL              sub_1E708
CMP             R0, #0
BEQ             loc_1EB54
LDR             R1, [R0]
CMP             R1, #0
BEQ             loc_1EB54
MOV             R2, R6
MOV             R0, R4
BL              sub_19A84

loc_1EB54
LDR             R3, [R4,#4]
CMP             R3, #0
BNE             loc_1EB68
LDR             R0, =aNonMatchingSig ; "Non-matching signing type"
BL              sub_184AC

loc_1EB68
MOV             R0, R8
MOV             R1, R4
BL              sub_12824
MOV             R0, R4  ; ptr
POP             {R4-R8,LR}
B               j_free
; End of function sub_1EAE4

off_1EB80 DCD aNonMatchingSig ; "Non-matching signing type"



; int __fastcall sub_1EB84(_DWORD *, int, _DWORD *)
sub_1EB84

var_4= -4
var_s0=  0

PUSH            {R0,R1,R4-R8,LR}
MOV             R3, #0
ADD             R5, SP, #8+var_s0
MOV             R4, R0
MOV             R6, R2
MOV             R7, R1
STR             R3, [R5,#-4]!
BL              sub_12664
MOV             R1, R5
MOV             R0, R4
BL              sub_12690
LDR             R1, [SP,#8+var_4]
MOV             R8, R0
BL              sub_1E6A8
MOV             R5, R0
MOV             R0, R8  ; ptr
BL              free
CMP             R5, #0
BNE             loc_1EBF4
LDR             R1, [R7,#0xC]
CMP             R1, #0
LDREQ           R0, =aNoRsaKeyToVeri ; "No RSA key to verify signature"
BEQ             loc_1EC38
MOV             R2, R6
MOV             R0, R4
BL              sub_1E254

loc_1EBEC
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_1EBF4
MOV             R0, R5
BL              sub_197C0
CMP             R0, #0
BEQ             loc_1EC34
MOV             R1, R5
MOV             R0, R7
BL              sub_1E708
CMP             R0, #0
BEQ             loc_1EC34
LDR             R1, [R0]
CMP             R1, #0
BEQ             loc_1EC34
MOV             R2, R6
MOV             R0, R4
BL              sub_19D30
B               loc_1EBEC

loc_1EC34
LDR             R0, =aNonMatchingSig ; "Non-matching signing type"

loc_1EC38
BL              sub_184AC
; End of function sub_1EB84

off_1EC3C DCD aNoRsaKeyToVeri ; "No RSA key to verify signature"
off_1EC40 DCD aNonMatchingSig ; "Non-matching signing type"


; Attributes: bp-based frame fpd=4

; int __fastcall sub_1EC44(const void *, unsigned int, const void *, size_t, _DWORD *, char **)
sub_1EC44

var_8= -8
arg_0=  0x24
arg_4=  0x28

PUSH            {R0-R2,R4-R11,LR}
MOV             R6, R3
LDR             R11, [SP,#0xC+arg_0]
MOV             R9, R0
ADD             R7, SP, #8
MOV             R8, R2
MOV             R10, R1
LDMIB           R11, {R3,R5}
SUB             R5, R3, R5
MOV             R0, R5,LSL#1
STR             R0, [R7,#4+var_8]!
BL              sub_12344
MOV             R1, R5
MOV             R4, R0
MOV             R0, R11
BL              sub_125E4
LDR             R1, [R4,#0xC]
MOV             R11, R0
MOV             R0, R4
BL              sub_12624
MOV             R3, R7
MOV             R2, R0
MOV             R1, R5
MOV             R0, R11
BL              sub_26CFC
CMP             R0, #0
BEQ             loc_1ECC8

loc_1ECB0
MOV             R5, #0xFFFFFFFF

loc_1ECB4               ; ptr
MOV             R0, R4
BL              j_free
MOV             R0, R5
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_1ECC8
LDR             R1, [SP,#0xC+var_8]
MOV             R0, R4
BL              sub_12464
LDR             R3, [SP,#0xC+arg_4]
CMP             R3, #0
BEQ             loc_1ECFC
LDR             R1, [SP,#0xC+var_8]
MOV             R0, R4
BL              sub_125E4
LDR             R1, [SP,#0xC+var_8]
BL              sub_1E594
LDR             R3, [SP,#0xC+arg_4]
STR             R0, [R3]

loc_1ECFC
LDR             R3, [SP,#0xC+var_8]
CMP             R3, R10
BNE             loc_1ECB0
LDR             R1, [R4,#4]
MOV             R0, R4
BL              sub_125E4
LDR             R2, [R4,#4] ; n
MOV             R1, R9  ; s2
BL              memcmp
CMP             R0, #0
BNE             loc_1ECB0
MOV             R0, R4
BL              sub_12664
MOV             R5, R0
MOV             R1, R0
MOV             R0, R4
BL              sub_125E4
CMP             R5, R6
BNE             loc_1ECB0
MOV             R2, R6  ; n
MOV             R1, R8  ; s2
BL              memcmp
MOVS            R0, R0
MOVNE           R0, #1
RSB             R5, R0, #0
B               loc_1ECB4
; End of function sub_1EC44




; int __fastcall sub_1ED64(int *, int *, int, int)
sub_1ED64

winp= -0xC

PUSH            {R0-R2,R4-R7,LR}
MOV             R4, #0
MOV             R5, R2
MOV             R6, R3
MOV             R2, R4  ; name
MOV             R3, R4  ; termp
STR             R4, [SP,#0xC+winp] ; winp
MOV             R7, R1
BL              openpty
CMP             R0, R4
BGE             loc_1EDB8
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
LDR             R1, =aPtyAllocateOpe ; "pty_allocate: openpty: %.100s"
MOV             R2, R0
MOV             R0, #4
BL              sub_184E8
MOV             R0, R4

loc_1EDB0
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_1EDB8               ; fd
LDR             R0, [R7]
BL              ttyname
SUBS            R1, R0, #0 ; s
BNE             loc_1EDD0
LDR             R0, =aTtynameFailsFo ; "ttyname fails for openpty device"
BL              sub_184AC

loc_1EDD0
MOV             R2, R6
MOV             R0, R5  ; int
BL              sub_16388
MOV             R0, #1
B               loc_1EDB0
; End of function sub_1ED64

off_1EDE4 DCD aPtyAllocateOpe ; "pty_allocate: openpty: %.100s"
off_1EDE8 DCD aTtynameFailsFo ; "ttyname fails for openpty device"



; int __fastcall sub_1EDEC(const char *)
sub_1EDEC
MOV             R2, #0  ; group
PUSH            {R4,LR}
MOV             R1, R2  ; owner
MOV             R4, R0
BL              chown
CMP             R0, #0
BGE             loc_1EE30
BL              __errno_location
LDR             R0, [R0] ; errnum
CMP             R0, #2
BEQ             loc_1EE30
BL              strerror
MOV             R2, R4
MOV             R3, R0
LDR             R1, =aChown100s00Fai ; "chown %.100s 0 0 failed: %.100s"
MOV             R0, #3
BL              sub_184E8

loc_1EE30               ; mode
MOVW            R1, #0x1B6
MOV             R0, R4  ; file
BL              chmod
CMP             R0, #0
POPGE           {R4,PC}
BL              __errno_location
LDR             R0, [R0] ; errnum
CMP             R0, #2
POPEQ           {R4,PC}
BL              strerror
MOV             R2, R4
MOV             R3, R0
LDR             R1, =aChmod100s0666F ; "chmod %.100s 0666 failed: %.100s"
MOV             R0, #3
POP             {R4,LR}
B               sub_184E8
; End of function sub_1EDEC

off_1EE70 DCD aChown100s00Fai ; "chown %.100s 0 0 failed: %.100s"
off_1EE74 DCD aChmod100s0666F ; "chmod %.100s 0666 failed: %.100s"



; int __fastcall sub_1EE78(int *, const char *)
sub_1EE78
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
MOV             R0, #0x16 ; sig
MOV             R1, #1  ; handler
BL              signal
MOVW            R1, #0x102
LDR             R0, =aDevTty ; "/dev/tty"
BL              open64
SUBS            R6, R0, #0
BLT             loc_1EEB8
MOV             R2, #0
MOVW            R1, #0x5422 ; request
BL              ioctl
MOV             R0, R6  ; fd
BL              close

loc_1EEB8
BL              setsid
CMP             R0, #0
BGE             loc_1EEE0
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
LDR             R1, =aSetsid100s ; "setsid: %.100s"
MOV             R2, R0
MOV             R0, #3
BL              sub_184E8

loc_1EEE0
MOVW            R1, #0x102
LDR             R0, =aDevTty ; "/dev/tty"
BL              open64
SUBS            R6, R0, #0
BLT             loc_1EF08
MOV             R0, #3
LDR             R1, =aFailedToDiscon ; "Failed to disconnect from controlling t"...
BL              sub_184E8
MOV             R0, R6  ; fd
BL              close

loc_1EF08
MOV             R2, #0
MOVW            R1, #0x540E ; request
LDR             R0, [R5] ; fd
BL              ioctl
CMP             R0, #0
BGE             loc_1EF3C
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
LDR             R1, =aIoctlTiocsctty ; "ioctl(TIOCSCTTY): %.100s"
MOV             R2, R0
MOV             R0, #3
BL              sub_184E8

loc_1EF3C
MOV             R1, #2
MOV             R0, R4
BL              open64
CMP             R0, #0
BGE             loc_1EFA4
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R2, R4
MOV             R3, R0
LDR             R1, =a100s100s ; "%.100s: %.100s"
MOV             R0, #3
BL              sub_184E8

loc_1EF70
MOV             R1, #1
LDR             R0, =aDevTty ; "/dev/tty"
BL              open64
CMP             R0, #0
BGE             loc_1EFAC
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
LDR             R1, =aOpenDevTtyFail ; "open /dev/tty failed - could not set co"...
MOV             R2, R0
POP             {R4-R6,LR}
MOV             R0, #3
B               sub_184E8

loc_1EFA4
BL              close
B               loc_1EF70

loc_1EFAC
POP             {R4-R6,LR}
B               close
; End of function sub_1EE78

off_1EFB4 DCD aDevTty   ; "/dev/tty"
off_1EFB8 DCD aSetsid100s ; "setsid: %.100s"
off_1EFBC DCD aFailedToDiscon ; "Failed to disconnect from controlling t"...
off_1EFC0 DCD aIoctlTiocsctty ; "ioctl(TIOCSCTTY): %.100s"
off_1EFC4 DCD a100s100s ; "%.100s: %.100s"
off_1EFC8 DCD aOpenDevTtyFail ; "open /dev/tty failed - could not set co"...



; int __fastcall sub_1EFCC(int, __int16, int, __int16, int)
sub_1EFCC

var_C= -0xC
var_A= -0xA
var_8= -8
var_6= -6
var_4= -4
arg_0=  4

PUSH            {R0-R2,LR}
STRH            R3, [SP,#0xC+var_8]
LDR             R3, [SP,#0xC+arg_0]
STRH            R1, [SP,#0xC+var_C]
MOVW            R1, #0x5414 ; request
STRH            R2, [SP,#0xC+var_A]
MOV             R2, SP
STRH            R3, [SP,#0xC+var_6]
BL              ioctl
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1EFCC




; int __fastcall sub_1EFF8(int, const char *)
sub_1EFF8

var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_5C= -0x5C
var_54= -0x54
var_50= -0x50

PUSH            {R4-R7,LR}
MOV             R7, R0
SUB             SP, SP, #0x74
LDR             R0, =(aDevTty+5) ; name
MOV             R4, R1
BL              getgrnam
CMP             R0, #0
ADD             R1, SP, #0x74+var_6C
LDRNE           R6, [R0,#8]
MOV             R0, R4
MOVNE           R5, #0x190
LDREQ           R6, [R7,#0xC]
MOVWEQ          R5, #0x192
BLX             sub_34FAC
CMP             R0, #0
BEQ             loc_1F054
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R1, R4
MOV             R2, R0
LDR             R0, =aPtySetownerSta ; "pty_setowner: stat(%.101s) failed: %.10"...
BL              sub_184AC

loc_1F054               ; owner
LDR             R1, [R7,#8]
LDR             R3, [SP,#0x74+var_54]
CMP             R3, R1
BNE             loc_1F070
LDR             R3, [SP,#0x74+var_50]
CMP             R3, R6
BEQ             loc_1F0C8

loc_1F070               ; group
MOV             R2, R6
MOV             R0, R4  ; file
BL              chown
CMP             R0, #0
BGE             loc_1F0C8
BL              __errno_location
LDR             R0, [R0] ; errnum
LDR             R7, [R7,#8]
CMP             R0, #0x1E
BNE             loc_1F12C
LDR             R3, [SP,#0x74+var_54]
CMP             R3, #0
CMPNE           R3, R7
BNE             loc_1F12C
BL              strerror
STR             R6, [SP,#0x74+var_74]
MOV             R3, R7
STR             R0, [SP,#0x74+var_70]
MOV             R2, R4
LDR             R1, =aChown100sUUFai ; "chown(%.100s, %u, %u) failed: %.100s"
MOV             R0, #3
BL              sub_184E8

loc_1F0C8
LDR             R3, [SP,#0x74+var_5C]
UBFX            R3, R3, #0, #9
CMP             R3, R5
BEQ             loc_1F124
MOV             R1, R5  ; mode
MOV             R0, R4  ; file
BL              chmod
CMP             R0, #0
BGE             loc_1F124
BL              __errno_location
LDR             R0, [R0] ; errnum
CMP             R0, #0x1E
BNE             loc_1F148
LDR             R3, [SP,#0x74+var_5C]
TST             R3, #0x24
BNE             loc_1F148
BL              strerror
MOV             R3, R5
STR             R0, [SP,#0x74+var_74]
MOV             R2, R4
LDR             R1, =aChmod100s0OFai ; "chmod(%.100s, 0%o) failed: %.100s"
MOV             R0, #3
BL              sub_184E8

loc_1F124
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R7,PC}

loc_1F12C
BL              strerror
MOV             R3, R6
STR             R0, [SP,#0x74+var_74]
MOV             R2, R7
MOV             R1, R4
LDR             R0, =aChown100sUUFai ; "chown(%.100s, %u, %u) failed: %.100s"
BL              sub_184AC

loc_1F148
BL              strerror
MOV             R2, R5
MOV             R3, R0
MOV             R1, R4
LDR             R0, =aChmod100s0OFai ; "chmod(%.100s, 0%o) failed: %.100s"
BL              sub_184AC
; End of function sub_1EFF8

off_1F160 DCD aDevTty+5 ; "tty"
off_1F164 DCD aPtySetownerSta ; "pty_setowner: stat(%.101s) failed: %.10"...
off_1F168 DCD aChown100sUUFai ; "chown(%.100s, %u, %u) failed: %.100s"
off_1F16C DCD aChmod100s0OFai ; "chmod(%.100s, 0%o) failed: %.100s"



; _DWORD *__fastcall sub_1F170(int, int fd)
sub_1F170
MOV             R2, #0  ; addr_len
PUSH            {R4,LR}
MOV             R0, R1  ; fd
MOV             R1, R2  ; addr
BL              accept
SUBS            R4, R0, #0
POPLT           {R4,PC}
LDR             R1, =unk_36E3C
BL              sub_143D8
CMP             R0, #0
BEQ             loc_1F1A8
MOV             R0, R4  ; fd
POP             {R4,LR}
B               close

loc_1F1A8
POP             {R4,LR}
B               sub_1D894
; End of function sub_1F170

off_1F1B0 DCD unk_36E3C



; int __fastcall sub_1F1B4(int, int)
sub_1F1B4

var_15C= -0x15C
var_150= -0x150
path= -0x14C
var_E0= -0xE0
addr= -0x74

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x15C
LDR             R4, =byte_4CA40
MOV             R6, R1
MOV             R5, R0
BL              getuid
MOV             R8, R0
BL              getgid
MOV             R7, R0
LDR             R0, [R4,#(dword_4CB0C - 0x4CA40)] ; gid
BL              setegid
CMP             R0, #0
BGE             loc_1F1F0

loc_1F1E8
LDR             R0, =aFailedToSetEui ; "Failed to set euid"

loc_1F1EC
BL              sub_184AC

loc_1F1F0               ; uid
LDR             R0, [R4,#(dword_4CB08 - 0x4CA40)]
BL              seteuid
CMP             R0, #0
BLT             loc_1F1E8
LDR             R9, =aTmpDropbear8x ; "/tmp/dropbear-%.8x"
MOV             R2, #0x6C ; 'l' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x15C+addr.sa_data ; s
MOV             R4, #0x14
BL              memset
MOV             R3, #1
STRH            R3, [SP,#0x15C+addr]

loc_1F220
MOV             R1, #4
ADD             R0, SP, #0x15C+var_150
BL              sub_18090
LDR             R3, [SP,#0x15C+var_150]
MOV             R2, R9  ; format
MOV             R1, #0x6C ; 'l' ; maxlen
ADD             R0, SP, #0x15C+path ; s
BL              snprintf
MOV             R1, #0x1C0 ; mode
ADD             R0, SP, #0x15C+path ; path
BL              mkdir
CMP             R0, #0
BEQ             loc_1F28C
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #0x11
BEQ             loc_1F280

loc_1F264
MOV             R5, #0xFFFFFFFF

loc_1F268               ; uid
MOV             R0, R8
BL              seteuid
CMP             R0, #0
BGE             loc_1F300

loc_1F278
LDR             R0, =aFailedToRevert ; "Failed to revert euid"
B               loc_1F1EC

loc_1F280
SUBS            R4, R4, #1
BNE             loc_1F220
B               loc_1F264

loc_1F28C
MOV             R1, #4
ADD             R0, SP, #0x15C+var_150
ADD             R4, SP, #0x15C+var_E0
BL              sub_18090
STR             R5, [SP,#0x15C+var_15C]
MOV             R1, #0x6C ; 'l' ; maxlen
LDR             R3, [SP,#0x15C+var_150]
MOV             R0, R4  ; s
LDR             R2, =aAuth8xD ; "auth-%.8x-%d"
BL              snprintf
ADD             R3, SP, #0x15C+path
LDR             R2, =aSS ; "%s/%s"
MOV             R1, #0x6C ; 'l' ; maxlen
STR             R4, [SP,#0x15C+var_15C]
ADD             R0, SP, #0x15C+addr.sa_data ; s
BL              snprintf
MOV             R0, R5  ; fd
MOV             R2, #0x6E ; 'n' ; len
ADD             R1, SP, #0x15C+addr ; addr
BL              bind
SUBS            R5, R0, #0
BNE             loc_1F264
ADD             R0, SP, #0x15C+path
BL              sub_1886C
STR             R0, [R6,#0x50]
MOV             R0, R4
BL              sub_1886C
STR             R0, [R6,#0x4C]
B               loc_1F268

loc_1F300               ; gid
MOV             R0, R7
BL              setegid
CMP             R0, #0
BLT             loc_1F278
MOV             R0, R5
ADD             SP, SP, #0x15C
POP             {R4-R9,PC}
; End of function sub_1F1B4

off_1F31C DCD byte_4CA40
off_1F320 DCD aFailedToSetEui ; "Failed to set euid"
off_1F324 DCD aTmpDropbear8x ; "/tmp/dropbear-%.8x"
off_1F328 DCD aFailedToRevert ; "Failed to revert euid"
off_1F32C DCD aAuth8xD  ; "auth-%.8x-%d"
off_1F330 DCD aSS       ; "%s/%s"



; void __fastcall sub_1F334(int)
sub_1F334

var_18= -0x18

LDR             R3, [R0,#0x48]
CMP             R3, #0
BXEQ            LR
PUSH            {R0,R1,R4-R6,LR}
MOV             R4, R0
LDR             R0, [R0,#0x50] ; s
BL              strlen
MOV             R5, R0
LDR             R0, [R4,#0x4C] ; s
BL              strlen
ADD             R5, R5, R0
ADD             R5, R5, #2
MOV             R0, R5
BL              sub_18718
LDR             R3, [R4,#0x4C]
MOV             R6, R0
LDR             R2, =aSS ; "%s/%s"
MOV             R1, R5  ; maxlen
STR             R3, [SP,#0x18+var_18]
LDR             R3, [R4,#0x50]
BL              snprintf
MOV             R1, R6
LDR             R0, =aSshAuthSock ; "SSH_AUTH_SOCK"
BL              sub_20DC8
MOV             R0, R6  ; ptr
ADD             SP, SP, #8
POP             {R4-R6,LR}
B               free
; End of function sub_1F334

off_1F3A4 DCD aSS       ; "%s/%s"
off_1F3A8 DCD aSshAuthSock ; "SSH_AUTH_SOCK"



; void __fastcall sub_1F3AC(int)
sub_1F3AC

var_8= -8

PUSH            {R0,R1,R4-R8,LR}
MOV             R4, R0
LDR             R0, [R0,#0x48] ; ptr
CMP             R0, #0
BEQ             loc_1F3CC
BL              sub_1C0F0
MOV             R3, #0
STR             R3, [R4,#0x48]

loc_1F3CC
LDR             R3, [R4,#0x4C]
CMP             R3, #0
BEQ             loc_1F4BC
LDR             R3, [R4,#0x50]
CMP             R3, #0
BEQ             loc_1F4BC
LDR             R5, =byte_4CA40
BL              getuid
MOV             R8, R0
BL              getgid
MOV             R7, R0
LDR             R0, [R5,#(dword_4CB0C - 0x4CA40)] ; gid
BL              setegid
CMP             R0, #0
BGE             loc_1F410

loc_1F408
LDR             R0, =aFailedToSetEui ; "Failed to set euid"

loc_1F40C
BL              sub_184AC

loc_1F410               ; uid
LDR             R0, [R5,#(dword_4CB08 - 0x4CA40)]
BL              seteuid
CMP             R0, #0
BLT             loc_1F408
LDR             R0, [R4,#0x50] ; s
BL              strlen
MOV             R5, R0
LDR             R0, [R4,#0x4C] ; s
BL              strlen
ADD             R5, R5, R0
ADD             R5, R5, #2
MOV             R0, R5
BL              sub_18718
LDR             R3, [R4,#0x4C]
MOV             R1, R5  ; maxlen
LDR             R2, =aSS ; "%s/%s"
MOV             R6, R0
STR             R3, [SP,#8+var_8]
LDR             R3, [R4,#0x50]
BL              snprintf
MOV             R0, R6  ; name
BL              unlink
MOV             R0, R6  ; ptr
BL              free
LDR             R0, [R4,#0x50] ; path
BL              rmdir
MOV             R0, R8  ; uid
BL              seteuid
CMP             R0, #0
BGE             loc_1F490

loc_1F488
LDR             R0, =aFailedToRevert ; "Failed to revert euid"
B               loc_1F40C

loc_1F490               ; gid
MOV             R0, R7
BL              setegid
CMP             R0, #0
BLT             loc_1F488
LDR             R0, [R4,#0x4C] ; ptr
MOV             R5, #0
BL              free
STR             R5, [R4,#0x4C]
LDR             R0, [R4,#0x50] ; ptr
BL              free
STR             R5, [R4,#0x50]

loc_1F4BC
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_1F3AC

off_1F4C4 DCD byte_4CA40
off_1F4C8 DCD aFailedToSetEui ; "Failed to set euid"
off_1F4CC DCD aSS       ; "%s/%s"
off_1F4D0 DCD aFailedToRevert ; "Failed to revert euid"



; int __fastcall sub_1F4D4(int)
sub_1F4D4

var_10= -0x10
var_C= -0xC
fd= -4
var_s0=  0

PUSH            {R0-R6,LR}
MOV             R4, #0xFFFFFFFF
MOV             R6, R0
STR             R4, [SP,#0x10+fd]
BL              sub_204C4
CMP             R0, #0
BEQ             loc_1F52C
LDR             R5, [R6,#0x48]
CMP             R5, #0
MOVNE           R0, R4
BNE             loc_1F530
MOV             R1, #1  ; type
MOV             R2, R5  ; protocol
MOV             R0, R1  ; domain
BL              socket
CMP             R0, #0
STR             R0, [SP,#0x10+fd]
BGE             loc_1F538

loc_1F51C
LDR             R0, [SP,#0x10+fd]
BL              sub_185B8
MOV             R0, R6
BL              sub_1F3AC

loc_1F52C
MOV             R0, #0xFFFFFFFF

loc_1F530
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_1F538
MOV             R1, R6
BL              sub_1F1B4
CMN             R0, #1
BEQ             loc_1F51C
MOV             R1, #0x14 ; n
LDR             R0, [SP,#0x10+fd] ; fd
BL              listen
CMP             R0, #0
BLT             loc_1F51C
ADD             R4, SP, #0x10+var_s0
LDR             R0, [R4,#-4]!
BL              sub_188B0
LDR             R3, =sub_1F170
MOV             R2, R5
STR             R5, [SP,#0x10+var_C]
MOV             R1, #1
MOV             R0, R4
STR             R3, [SP,#0x10+var_10]
MOV             R3, R6
BL              sub_1BF64
CMP             R0, #0
STR             R0, [R6,#0x48]
MOVNE           R0, R5
BNE             loc_1F530
B               loc_1F51C
; End of function sub_1F4D4

off_1F59C DCD sub_1F170



; void *sub_1F5A0()
sub_1F5A0
MOV             R2, #0x34 ; '4' ; n
PUSH            {R4,LR}
MOV             R1, #0  ; c
LDR             R0, =dword_4CAF0 ; s
BL              memset
LDR             R3, =byte_4CA40
MOV             R2, #2
STRB            R2, [R3,#(byte_4CAF4 - 0x4CA40)]
LDR             R2, =dword_4CB4C
LDR             R2, [R2,#(dword_4CBB8 - 0x4CB4C)]
CMP             R2, #0
MOVEQ           R2, #6
STRBEQ          R2, [R3,#(byte_4CAF4 - 0x4CA40)]
POP             {R4,PC}
; End of function sub_1F5A0

off_1F5D8 DCD dword_4CAF0
off_1F5DC DCD byte_4CA40
off_1F5E0 DCD dword_4CB4C



; _DWORD *__fastcall sub_1F5E4(int)
sub_1F5E4
PUSH            {R4-R6,LR}
MOV             R1, #0x35 ; '5'
LDR             R4, =byte_4CA40
MOV             R5, R0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12824
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
MOV             R2, #2
LDR             R1, =(aPosLen+8) ; "en"
BL              sub_127F8
POP             {R4-R6,LR}
B               sub_1D894
; End of function sub_1F5E4

off_1F620 DCD byte_4CA40
off_1F624 DCD aPosLen+8 ; "en"



; _DWORD *__fastcall sub_1F628(int, unsigned int, unsigned int)
sub_1F628

var_8= -8

PUSH            {R0-R2,R4-R7,LR}
MOV             R7, R0
LDR             R4, =byte_4CA40
MOV             R6, R1
MOV             R1, #0x33 ; '3'
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
MOV             R0, #0x1E
BL              sub_12344
LDRB            R3, [R4,#(byte_4CAF4 - 0x4CA40)]
MOV             R5, R0
TST             R3, #2
BEQ             loc_1F680
MOV             R2, #9
LDR             R1, =aPublickey ; "publickey"
BL              sub_127C4
LDRB            R3, [R4,#(byte_4CAF4 - 0x4CA40)]
TST             R3, #4
BEQ             loc_1F69C
MOV             R1, #0x2C ; ','
MOV             R0, R5
BL              sub_125A4

loc_1F680
LDRB            R3, [R4,#(byte_4CAF4 - 0x4CA40)]
TST             R3, #4
BEQ             loc_1F69C
MOV             R2, #8
LDR             R1, =aPassword ; "password"
MOV             R0, R5
BL              sub_127C4

loc_1F69C
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_12824
MOV             R0, R5  ; ptr
BL              j_free
MOVS            R1, R7
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
MOVNE           R1, #1
BL              sub_125A4
BL              sub_1D894
CMP             R6, #0
BEQ             loc_1F700
MOV             R1, #4
ADD             R0, SP, R1
BL              sub_18090
LDR             R0, [SP,#0xC+var_8]
LDR             R1, =0x186A0
BLX             sub_34DFC
ADD             R0, R1, #0x3D000
ADD             R0, R0, #0x90 ; useconds
STR             R0, [SP,#0xC+var_8]
BL              usleep
LDR             R3, [R4,#(dword_4CAF8 - 0x4CA40)]
ADD             R3, R3, #1
STR             R3, [R4,#(dword_4CAF8 - 0x4CA40)]

loc_1F700
LDR             R3, =dword_4CB4C
LDR             R2, [R4,#(dword_4CAF8 - 0x4CA40)]
LDR             R3, [R3,#(dword_4CBC4 - 0x4CB4C)]
CMP             R2, R3
BCC             loc_1F734
LDR             R3, =dword_4CBF4
LDR             R1, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R0, =aMaxAuthTriesRe ; "Max auth tries reached - user '%s' from"...
LDR             R2, [R3,#(dword_4CC10 - 0x4CBF4)]
LDR             R3, =aIsInvalid ; "is invalid"
CMP             R1, #0
MOVEQ           R1, R3
BL              sub_184AC

loc_1F734
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_1F628

off_1F73C DCD byte_4CA40
off_1F740 DCD aPublickey ; "publickey"
off_1F744 DCD aPassword ; "password"
dword_1F748 DCD 0x186A0
off_1F74C DCD dword_4CB4C
off_1F750 DCD dword_4CBF4
off_1F754 DCD aMaxAuthTriesRe ; "Max auth tries reached - user '%s' from"...
off_1F758 DCD aIsInvalid ; "is invalid"



; int sub_1F75C()
sub_1F75C
PUSH            {R4,LR}
MOV             R1, #0x34 ; '4'
LDR             R4, =byte_4CA40
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
BL              sub_1D894
MOV             R2, #0
MOV             R3, #1
STR             R2, [R4,#(dword_4CA44 - 0x4CA40)]
LDR             R2, [R4,#(dword_4CB08 - 0x4CA40)]
STR             R3, [R4,#(dword_4CAFC - 0x4CA40)]
CMP             R2, #0
STREQ           R3, [R4,#(dword_4CB40 - 0x4CA40)]
LDR             R3, =dword_4CBF4
POP             {R4,LR}
LDR             R0, [R3]
B               sub_185B8
; End of function sub_1F75C

off_1F7A0 DCD byte_4CA40
off_1F7A4 DCD dword_4CBF4
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1C
LDR             R4, =byte_4CA40
LDR             R3, [R4,#(dword_4CAFC - 0x4CA40)]
CMP             R3, #1
BEQ             loc_1F9D8
LDR             R5, =dword_4CB4C
LDR             R0, [R5,#(dword_4CBE8 - 0x4CB4C)]
CMP             R0, #0
BEQ             loc_1F7E4
BL              sub_1F5E4
LDR             R0, [R5,#(dword_4CBE8 - 0x4CB4C)]
BL              j_free
MOV             R3, #0
STR             R3, [R5,#(dword_4CBE8 - 0x4CB4C)]

loc_1F7E4
ADD             R1, SP, #8
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
ADD             R1, SP, #0xC
MOV             R6, R0
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
ADD             R1, SP, #0x10
MOV             R9, R0
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
LDR             R3, [SP,#0xC]
MOV             R7, R0
CMP             R3, #0xE
BEQ             loc_1F858
MOV             R2, #0xE
LDR             R1, =aSshConnection ; "ssh-connection"
MOV             R0, R9
BL              strncmp
CMP             R0, #0
BEQ             loc_1F858
MOV             R0, R6
BL              free
MOV             R0, R9
BL              free
MOV             R0, R7
BL              free
LDR             R0, =aUnknownService ; "unknown service in auth"
BL              sub_184AC

loc_1F858
LDR             R8, [SP,#8]
CMP             R8, #0x19
BLS             loc_1F86C

loc_1F864
MOV             R8, #0
B               loc_1F938

loc_1F86C
MOV             R0, R6
BL              strlen
CMP             R8, R0
BEQ             loc_1F88C
LDR             R3, =dword_4CBF4
LDR             R0, =aAttemptedUsern ; "Attempted username with a null byte fro"...
LDR             R1, [R3,#(dword_4CC10 - 0x4CBF4)]

loc_1F888
BL              sub_184AC

loc_1F88C
LDR             R1, [R4,#(dword_4CAF0 - 0x4CA40)]
MOV             R0, R6
CMP             R1, #0
BNE             loc_1F8E4
BL              sub_1608C
MOV             R0, R6
BL              sub_1886C
STR             R0, [R4,#(dword_4CAF0 - 0x4CA40)]

loc_1F8AC
LDR             R8, [R4,#(dword_4CB04 - 0x4CA40)]
CMP             R8, #0
BNE             loc_1F864
LDR             R10, [R4,#(dword_4CB18 - 0x4CA40)]
CMP             R10, #0
BNE             loc_1F900
LDR             R3, =dword_4CBF4
MOV             R0, #4
LDR             R1, =aLoginAttemptFo ; "Login attempt for nonexistent user from"...
LDR             R2, [R3,#(dword_4CC10 - 0x4CBF4)]
BL              sub_184E8

loc_1F8D8
MOV             R3, #1
STR             R3, [R4,#(dword_4CB04 - 0x4CA40)]
B               loc_1F864

loc_1F8E4
BL              strcmp
CMP             R0, #0
BEQ             loc_1F8AC
LDR             R3, =dword_4CBF4
LDR             R0, =aClientTryingMu ; "Client trying multiple usernames from %"...
LDR             R1, [R3,#(dword_4CC10 - 0x4CBF4)]
B               loc_1F888

loc_1F900
BL              geteuid
CMP             R0, #0
BEQ             loc_1F9E0
LDR             R3, [R4,#(dword_4CB08 - 0x4CA40)]
CMP             R0, R3
BEQ             loc_1F9E0
LDR             R3, =dword_4CBF4
MOV             R0, #4
LDR             R2, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R1, =aLoginAttemptWi ; "Login attempt with wrong user %s from %"...
LDR             R3, [R3,#(dword_4CC10 - 0x4CBF4)]
BL              sub_184E8

loc_1F930
MOV             R3, #1
STR             R3, [R4,#(dword_4CB04 - 0x4CA40)]

loc_1F938
LDR             R10, [SP,#0x10]
CMP             R10, #4
BNE             loc_1FB60
MOV             R2, R10
LDR             R1, =aNone ; "none"
MOV             R0, R7
BL              strncmp
CMP             R0, #0
BNE             loc_1FB60
CMP             R8, #0
BEQ             loc_1FB50
LDR             R3, [R5,#(dword_4CBC0 - 0x4CB4C)]
CMP             R3, #0
BEQ             loc_1FB50
LDR             R3, [R5,#(dword_4CBB8 - 0x4CB4C)]
CMP             R3, #0
BNE             loc_1FB50
LDR             R3, [R5,#(dword_4CBBC - 0x4CB4C)]
CMP             R3, #0
BEQ             loc_1F994
LDR             R3, [R4,#(dword_4CB08 - 0x4CA40)]
CMP             R3, #0
BEQ             loc_1FB50

loc_1F994
LDR             R3, [R4,#(dword_4CB1C - 0x4CA40)]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1FB50
LDR             R3, =dword_4CBF4
MOV             R0, #5
LDR             R2, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R1, =aAuthSucceededW ; "Auth succeeded with blank password for "...
LDR             R3, [R3,#(dword_4CC10 - 0x4CBF4)]
BL              sub_184E8
BL              sub_1F75C

loc_1F9C0
MOV             R0, R6
BL              free
MOV             R0, R9
BL              free
MOV             R0, R7
BL              free

loc_1F9D8
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_1F9E0
LDR             R3, [R5,#(dword_4CBAC - 0x4CB4C)]
CMP             R3, #0
BEQ             loc_1FA08
LDR             R8, [R4,#(dword_4CB08 - 0x4CA40)]
CMP             R8, #0
BNE             loc_1FA08
LDR             R1, =aRootLoginRejec ; "root login rejected"
MOV             R0, #4
BL              sub_184E8
B               loc_1F930

loc_1FA08
LDR             R3, [R5,#(dword_4CBB0 - 0x4CB4C)]
CMP             R3, #0
BEQ             loc_1FAD4
LDR             R3, [R5,#(dword_4CBB4 - 0x4CB4C)]
ADD             R10, SP, #0x18
LDR             R11, [R4,#(dword_4CB18 - 0x4CA40)]
STR             R3, [SP]
LDR             R3, [R4,#(dword_4CB0C - 0x4CA40)]
STR             R3, [SP,#4]
MOV             R3, #0x20 ; ' '
STR             R3, [R10,#-4]!

loc_1FA34
LDR             R0, [SP,#0x14]
CMP             R0, #0x400
BLE             loc_1FA68

loc_1FA40
MOV             R2, R11
LDR             R1, =aTooManyGroupsF ; "Too many groups for user '%s'"
MOV             R0, #3
BL              sub_184E8

loc_1FA50
LDR             R3, [R4,#(dword_4CB18 - 0x4CA40)]
MOV             R0, #4
LDR             R2, [R5,#(dword_4CBB0 - 0x4CB4C)]
LDR             R1, =aLoginsAreRestr ; "Logins are restricted to the group %s b"...
BL              sub_184E8
B               loc_1F8D8

loc_1FA68
MOV             R0, R0,LSL#2
BL              sub_18718
MOV             R3, R10
MOV             R2, R0
MOV             R8, R0
LDR             R1, [SP,#4]
MOV             R0, R11
BL              getgrouplist
CMP             R0, #0
BGE             loc_1FAA8
MOV             R0, R8
BL              free
LDR             R3, [SP,#0x14]
MOV             R3, R3,LSL#1
STR             R3, [SP,#0x14]
B               loc_1FA34

loc_1FAA8
CMP             R8, #0
LDRNE           R2, [SP,#0x14]
MOVNE           R3, #0
BEQ             loc_1FA40

loc_1FAB8
CMP             R3, R2
BLT             loc_1FB18
MOV             R10, #0xFFFFFFFF

loc_1FAC4
MOV             R0, R8
BL              free
CMN             R10, #1
BEQ             loc_1FA50

loc_1FAD4
LDR             R10, [R4,#(dword_4CB14 - 0x4CA40)]
LDR             R3, =aBinSh ; "/bin/sh"
LDRB            R2, [R10]
CMP             R2, #0
MOVEQ           R10, R3
BL              setusershell

loc_1FAEC
BL              getusershell
SUBS            R8, R0, #0
BNE             loc_1FB34
BL              endusershell
MOV             R3, #1
LDR             R2, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R1, =aUserSHasInvali ; "User '%s' has invalid shell, rejected"
MOV             R0, #4
STR             R3, [R4,#(dword_4CB04 - 0x4CA40)]
BL              sub_184E8
B               loc_1F938

loc_1FB18
LDR             R1, [R8,R3,LSL#2]
LDR             R0, [SP]
CMP             R0, R1
ADDNE           R3, R3, #1
BNE             loc_1FAB8
MOV             R10, #0
B               loc_1FAC4

loc_1FB34
MOV             R1, R10
BL              strcmp
CMP             R0, #0
BNE             loc_1FAEC
BL              endusershell
MOV             R8, #1
B               loc_1F938

loc_1FB50
MOV             R1, #0

loc_1FB54
MOV             R0, #0
BL              sub_1F628
B               loc_1F9C0

loc_1FB60
LDR             R3, [R5,#(dword_4CBB8 - 0x4CB4C)]
CMP             R3, #0
BNE             loc_1FBB0
LDR             R3, [R5,#(dword_4CBBC - 0x4CB4C)]
CMP             R3, #0
BEQ             loc_1FB84
LDR             R3, [R4,#(dword_4CB08 - 0x4CA40)]
CMP             R3, #0
BEQ             loc_1FBB0

loc_1FB84
CMP             R10, #8
BNE             loc_1FBB0
MOV             R2, R10
LDR             R1, =aPassword ; "password"
MOV             R0, R7
BL              strncmp
CMP             R0, #0
BNE             loc_1FBDC
MOV             R0, R8
BL              sub_1FC2C
B               loc_1F9C0

loc_1FBB0
CMP             R10, #9
BNE             loc_1FBDC
MOV             R2, R10
LDR             R1, =aPublickey ; "publickey"
MOV             R0, R7
BL              strncmp
CMP             R0, #0
BNE             loc_1FBDC
MOV             R0, R8
BL              sub_1FDE0
B               loc_1F9C0

loc_1FBDC
MOV             R1, #1
B               loc_1FB54
off_1FBE4 DCD byte_4CA40
off_1FBE8 DCD dword_4CB4C
off_1FBEC DCD aSshConnection ; "ssh-connection"
off_1FBF0 DCD aUnknownService ; "unknown service in auth"
off_1FBF4 DCD dword_4CBF4
off_1FBF8 DCD aAttemptedUsern ; "Attempted username with a null byte fro"...
off_1FBFC DCD aLoginAttemptFo ; "Login attempt for nonexistent user from"...
off_1FC00 DCD aClientTryingMu ; "Client trying multiple usernames from %"...
off_1FC04 DCD aLoginAttemptWi ; "Login attempt with wrong user %s from %"...
off_1FC08 DCD aNone     ; "none"
off_1FC0C DCD aAuthSucceededW ; "Auth succeeded with blank password for "...
off_1FC10 DCD aRootLoginRejec ; "root login rejected"
off_1FC14 DCD aTooManyGroupsF ; "Too many groups for user '%s'"
off_1FC18 DCD aLoginsAreRestr ; "Logins are restricted to the group %s b"...
off_1FC1C DCD aBinSh    ; "/bin/sh"
off_1FC20 DCD aUserSHasInvali ; "User '%s' has invalid shell, rejected"
off_1FC24 DCD aPassword ; "password"
off_1FC28 DCD aPublickey ; "publickey"



; _DWORD *__fastcall sub_1FC2C(int, unsigned int)
sub_1FC2C

var_4= -4

PUSH            {R0,R1,R4-R8,LR}
MOV             R7, R0
LDR             R4, =byte_4CA40
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12590
CMP             R0, #0
BEQ             loc_1FC58

loc_1FC48
MOV             R1, #1
MOV             R0, #0
BL              sub_1F628
B               loc_1FD24

loc_1FC58
ADD             R1, SP, #8+var_4
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
CMP             R7, #0
MOV             R8, R0
MOVEQ           R5, R7
MOVEQ           R6, R7
BEQ             loc_1FC88
LDR             R6, [R4,#(dword_4CB1C - 0x4CA40)]
MOV             R1, R6  ; salt
BL              crypt
MOV             R5, R0

loc_1FC88
LDR             R1, [SP,#8+var_4]
MOV             R0, R8
BL              j_explicit_bzero
MOV             R0, R8  ; ptr
BL              free
CMP             R7, #0
BEQ             loc_1FC48
CMP             R5, #0
LDREQ           R2, [R4,#(dword_4CB18 - 0x4CA40)]
LDREQ           R1, =aUserAccountSIs ; "User account '%s' is locked"
BEQ             loc_1FCC8
LDRB            R7, [R6]
CMP             R7, #0
BNE             loc_1FCD4
LDR             R2, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R1, =aUserSHasBlankP ; "User '%s' has blank password, rejected"

loc_1FCC8
MOV             R0, #4
BL              sub_184E8
B               loc_1FC48

loc_1FCD4               ; s
MOV             R0, R5
LDR             R7, =dword_4CBF4
BL              strlen
MOV             R8, R0
MOV             R0, R6  ; s
BL              strlen
CMP             R8, R0
BNE             loc_1FD2C
MOV             R2, R8
MOV             R1, R6
MOV             R0, R5
BL              sub_18BC0
CMP             R0, #0
BNE             loc_1FD2C
LDR             R3, [R7,#(dword_4CC10 - 0x4CBF4)]
MOV             R0, #5
LDR             R2, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R1, =aPasswordAuthSu ; "Password auth succeeded for '%s' from %"...
BL              sub_184E8
BL              sub_1F75C

loc_1FD24
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_1FD2C
LDR             R3, [R7,#(dword_4CC10 - 0x4CBF4)]
MOV             R0, #4
LDR             R2, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R1, =aBadPasswordAtt ; "Bad password attempt for '%s' from %s"
BL              sub_184E8
B               loc_1FC48
; End of function sub_1FC2C

off_1FD44 DCD byte_4CA40
off_1FD48 DCD aUserAccountSIs ; "User account '%s' is locked"
off_1FD4C DCD aUserSHasBlankP ; "User '%s' has blank password, rejected"
off_1FD50 DCD dword_4CBF4
off_1FD54 DCD aPasswordAuthSu ; "Password auth succeeded for '%s' from %"...
off_1FD58 DCD aBadPasswordAtt ; "Bad password attempt for '%s' from %s"



; int __fastcall sub_1FD5C(const char *)
sub_1FD5C

var_58= -0x58
var_50= -0x50

PUSH            {R4,LR}
SUB             SP, SP, #0x68
MOV             R1, SP
MOV             R4, R0
BLX             sub_34FAC
CMP             R0, #0
BNE             loc_1FDCC
LDR             R1, =byte_4CA40
LDR             R3, [SP,#0x68+var_50]
LDR             R2, [R1,#(dword_4CB08 - 0x4CA40)]
CMP             R2, R3
CMPNE           R3, #0
LDR             R2, [SP,#0x68+var_58]
MOVNE           R3, #1
MOVEQ           R3, #0
TST             R2, #0x12
MOVNE           R3, #1
CMP             R3, #0
BEQ             loc_1FDD0
LDR             R3, [R1,#(dword_4CB00 - 0x4CA40)]
CMP             R3, #0
BNE             loc_1FDCC
MOV             R3, #1
MOV             R2, R4
STR             R3, [R1,#(dword_4CB00 - 0x4CA40)]
MOV             R0, #6
LDR             R1, =aSMustBeOwnedBy ; "%s must be owned by user or root, and n"...
BL              sub_184E8

loc_1FDCC
MOV             R0, #0xFFFFFFFF

loc_1FDD0
ADD             SP, SP, #0x68 ; 'h'
POP             {R4,PC}
; End of function sub_1FD5C

off_1FDD8 DCD byte_4CA40
off_1FDDC DCD aSMustBeOwnedBy ; "%s must be owned by user or root, and n"...



; void __fastcall sub_1FDE0(int)
sub_1FDE0

var_2C= -0x2C
var_28= -0x28
stream= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4-R11,LR}
MOV             R7, R0
LDR             R5, =byte_4CA40
SUB             SP, SP, #0x2C
MOV             R4, #0xFFFFFFFF
STR             R4, [SP,#0x2C+var_8]
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12590
ADD             R1, SP, #0x2C+var_C
STR             R0, [SP,#0x2C+var_18]
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
MOV             R6, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
MOV             R1, R0
MOV             R10, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_125E4
CMP             R7, #0
BNE             loc_1FE58

loc_1FE34
MOV             R1, #0
MOV             R0, R1
BL              sub_1F628

loc_1FE40
CMP             R6, #0
MOVNE           R7, #0
BEQ             loc_20310

loc_1FE4C               ; ptr
MOV             R0, R6
BL              free
B               loc_20300

loc_1FE58
LDR             R7, [SP,#0x2C+var_C]
MOV             R11, R0
LDR             R2, =off_4C2E0 ; "ecdsa-sha2-nistp256"
MOV             R0, R6
MOV             R1, R7
BL              sub_12CAC
CMN             R0, #1
BNE             loc_1FE9C
LDR             R3, =dword_4CBF4
MOV             R0, #4
LDR             R2, [R5,#(dword_4CB18 - 0x4CA40)]
LDR             R1, =aPubkeyAuthAtte ; "Pubkey auth attempt with unknown algo f"...
LDR             R3, [R3,#(dword_4CC10 - 0x4CBF4)]
BL              sub_184E8

loc_1FE90
MOV             R9, #0

loc_1FE94
MOV             R5, #0xFFFFFFFF
B               loc_2026C

loc_1FE9C
MOV             R8, R5
LDR             R5, [R5,#(dword_4CB10 - 0x4CA40)]
CMP             R5, #0
BEQ             loc_1FF24
MOV             R0, R5  ; s
BL              strlen
SUBS            R9, R0, #0
MOVEQ           R5, R9
BEQ             loc_1FF24
ADD             R0, R9, #0x16
BL              sub_18718
ADD             R2, R9, #1 ; n
MOV             R5, R0
LDR             R1, [R8,#(dword_4CB10 - 0x4CA40)] ; src
BL              strncpy
MOV             R0, R5
BL              sub_1FD5C
CMP             R0, #0
BNE             loc_1FF24
LDR             R1, =aSsh_0 ; "/.ssh"
MOV             R0, R5  ; dest
BL              strcat
MOV             R0, R5
BL              sub_1FD5C
CMP             R0, #0
BNE             loc_1FF24
LDR             R1, =(aSSshAuthorized+7) ; src
MOV             R0, R5  ; dest
BL              strcat
MOV             R0, R5
BL              sub_1FD5C
MOVS            R4, R0
MOVNE           R4, #1
RSB             R4, R4, #0

loc_1FF24               ; ptr
MOV             R0, R5
BL              free
CMN             R4, #1
BEQ             loc_1FE90
LDR             R0, [R8,#(dword_4CB10 - 0x4CA40)] ; s
BL              strlen
ADD             R4, R0, #0x16
MOV             R0, R4
BL              sub_18718
MOV             R1, R4  ; maxlen
LDR             R3, [R8,#(dword_4CB10 - 0x4CA40)]
LDR             R2, =aSSshAuthorized ; "%s/.ssh/authorized_keys"
MOV             R9, R0
BL              snprintf
BL              getuid
MOV             R5, R0
BL              getgid
MOV             R4, R0
LDR             R0, [R8,#(dword_4CB0C - 0x4CA40)] ; gid
BL              setegid
CMP             R0, #0
BGE             loc_1FF84

loc_1FF7C
LDR             R0, =aFailedToSetEui ; "Failed to set euid"

loc_1FF80
BL              sub_184AC

loc_1FF84               ; uid
LDR             R0, [R8,#(dword_4CB08 - 0x4CA40)]
BL              seteuid
CMP             R0, #0
BLT             loc_1FF7C
LDR             R1, =(s2+7) ; "r"
MOV             R0, R9
BL              fopen64
STR             R0, [SP,#0x2C+stream]
MOV             R0, R5  ; uid
BL              seteuid
CMP             R0, #0
BGE             loc_1FFBC

loc_1FFB4
LDR             R0, =aFailedToRevert ; "Failed to revert euid"
B               loc_1FF80

loc_1FFBC               ; gid
MOV             R0, R4
BL              setegid
CMP             R0, #0
BLT             loc_1FFB4
LDR             R3, [SP,#0x2C+stream]
CMP             R3, #0
BEQ             loc_1FE94
MOVW            R0, #0x1068
MOV             R5, #0xFFFFFFFF
BL              sub_12344
MOV             R3, #0
MOV             R4, R0
STR             R3, [SP,#0x2C+var_20]
ADD             R3, R7, #3
STR             R3, [SP,#0x2C+var_1C]

loc_1FFF8
LDR             R1, [SP,#0x2C+stream]
MOV             R0, R4
BL              sub_1851C
CMN             R0, #1
BEQ             loc_20254
LDR             R3, [SP,#0x2C+var_20]
MOVW            R1, #0x105E
LDR             R2, [R4,#4]
ADD             R3, R3, #1
STR             R3, [SP,#0x2C+var_20]
SUB             R3, R2, #0xA
CMP             R3, R1
BHI             loc_20204
LDR             R3, [R4,#8]
LDR             R1, [SP,#0x2C+var_1C]
ADD             R3, R1, R3
CMP             R2, R3
BCC             loc_20204
MOV             R1, R7
MOV             R0, R4
BL              sub_125E4
MOV             R2, R7  ; n
MOV             R1, R6  ; s2
BL              strncmp
SUBS            R8, R0, #0
BNE             loc_20120

loc_20060
MOV             R1, R7
MOV             R0, R4
BL              sub_1250C
MOV             R0, R4
BL              sub_12560
CMP             R0, #0x20 ; ' '
LDREQ           R1, [R4,#8]
MOVEQ           R5, #0
BNE             loc_201F8

loc_20084
LDR             R2, [R4,#8]
LDR             R3, [R4,#4]
CMP             R2, R3
BCS             loc_200AC
MOV             R0, R4
STR             R1, [SP,#0x2C+var_14]
BL              sub_12560
CMP             R0, #0x20 ; ' '
LDR             R1, [SP,#0x2C+var_14]
BNE             loc_2023C

loc_200AC
MOV             R0, R4
BL              sub_124A0
LDR             R1, [R4,#8]
MOV             R0, R4
ADD             R1, R5, R1
BL              sub_12430
MOV             R3, #0
STR             R4, [SP,#0x2C+var_2C]
STR             R3, [SP,#0x2C+var_28]
MOV             R2, R6
MOV             R3, R7
MOV             R1, R10
MOV             R0, R11
BL              sub_1EC44
MOVS            R3, R8
MOV             R5, R0
MOVNE           R3, #1
CMP             R0, #0
MOVNE           R3, #0
CMP             R3, #0
BEQ             loc_20244
MOV             R2, R9
LDR             R1, [SP,#0x2C+var_20]
MOV             R0, R8
BL              sub_20604
MOV             R5, R0

loc_20114               ; ptr
MOV             R0, R8
BL              j_free
B               loc_2024C

loc_20120
LDR             R2, [R4,#8]
LDR             R3, [R4,#4]
CMP             R2, R3
BCS             loc_20158
MOV             R0, R4
BL              sub_12560
CMP             R0, #9
CMPNE           R0, #0x20 ; ' '
BEQ             loc_20120
CMP             R0, #0x23 ; '#'
BEQ             loc_20204
MOV             R1, #0xFFFFFFFF
MOV             R0, R4
BL              sub_1250C

loc_20158
MOV             R8, #0
MOV             R1, #1
MOV             R0, R4
MOV             R5, R8
BL              sub_125E4
MOV             R3, R8
STR             R0, [SP,#0x2C+var_14]

loc_20174
LDR             R0, [R4,#8]
LDR             R1, [R4,#4]
CMP             R0, R1
BCS             loc_201A8
MOV             R0, R4
STR             R3, [SP,#0x2C+var_10]
BL              sub_12560
CMP             R8, #0
LDR             R3, [SP,#0x2C+var_10]
BNE             loc_2020C
CMP             R0, #9
CMPNE           R0, #0x20 ; ' '
BNE             loc_2020C

loc_201A8
MOV             R0, R5
BL              sub_12344
MOV             R2, R5
LDR             R1, [SP,#0x2C+var_14]
MOV             R8, R0
BL              sub_127C4
LDR             R2, [SP,#0x2C+var_1C]
LDR             R3, [R4,#8]
ADD             R3, R2, R3
LDR             R2, [R4,#4]
CMP             R3, R2
BHI             loc_201F8
MOV             R1, R7
MOV             R0, R4
BL              sub_125E4
MOV             R2, R7  ; n
MOV             R1, R6  ; s2
BL              strncmp
CMP             R0, #0
BEQ             loc_20060

loc_201F8
CMP             R8, #0
MOVNE           R5, #0xFFFFFFFF
BNE             loc_20114

loc_20204
MOV             R5, #0xFFFFFFFF
B               loc_1FFF8

loc_2020C
EOR             R3, R3, #1
ADD             R5, R5, #1
CMP             R0, #0x5C ; '\'
MOVNE           R3, #0
ANDEQ           R3, R3, #1
EOR             R1, R3, #1
CMP             R0, #0x22 ; '"'
MOVNE           R0, #0
ANDEQ           R0, R1, #1
CMP             R0, #0
EORNE           R8, R8, #1
B               loc_20174

loc_2023C
ADD             R5, R5, #1
B               loc_20084

loc_20244
CMP             R8, #0
BNE             loc_20114

loc_2024C
CMP             R5, #0
BNE             loc_1FFF8

loc_20254               ; stream
LDR             R0, [SP,#0x2C+stream]
BL              fclose
CMP             R4, #0
BEQ             loc_2026C
MOV             R0, R4  ; ptr
BL              j_free

loc_2026C               ; ptr
MOV             R0, R9
BL              free
CMN             R5, #1
BEQ             loc_1FE34
LDR             R3, [SP,#0x2C+var_18]
LDR             R4, =byte_4CA40
CMP             R3, #0
BNE             loc_202C4
LDR             R5, [SP,#0x2C+var_C]
MOV             R1, #0x3C ; '<'
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
MOV             R2, R5
MOV             R1, R6
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
MOV             R2, R10
MOV             R1, R11
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
BL              sub_1D894
B               loc_1FE40

loc_202C4
BL              sub_1E644
ADD             R2, SP, #0x2C+var_4
MOV             R3, #0x50 ; 'P'
MOV             R1, R0
MOV             R7, R0
STR             R3, [R2,#-4]!
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_1E74C
CMN             R0, #1
BNE             loc_20318
MOV             R1, #1
MOV             R0, #0
BL              sub_1F628

loc_202F8
CMP             R6, #0
BNE             loc_1FE4C

loc_20300
CMP             R7, #0
BEQ             loc_20310
MOV             R0, R7
BL              sub_1EA60

loc_20310
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_20318
LDR             R3, [R4,#(dword_4CA70 - 0x4CA40)]
LDR             R5, [R4,#(dword_4CA74 - 0x4CA40)]
LDR             R0, [R3,#8]
CMP             R5, R0
BLS             loc_20340
LDR             R3, =aSvrAuthPubkey ; "svr_auth_pubkey"
MOV             R2, #0x8A ; line
LDR             R1, =aSvrAuthpubkeyC ; "svr-authpubkey.c"
LDR             R0, =aSesPayloadBegi ; "ses.payload_beginning <= ses.payload->p"...
BL              __assert_fail

loc_20340
LDR             R3, [R4,#(dword_4CAC4 - 0x4CA40)]
SUB             R5, R0, R5
LDR             R3, [R3,#4]
ADD             R0, R0, R3
ADD             R0, R0, #4
BL              sub_12344
LDR             R1, [R4,#(dword_4CAC4 - 0x4CA40)]
MOV             R8, R0
BL              sub_12824
LDRD            R0, R1, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_124A0
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_125E4
MOV             R2, R5
MOV             R1, R0
MOV             R0, R8
BL              sub_127C4
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_1250C
MOV             R1, #0
MOV             R0, R8
BL              sub_124A0
MOV             R1, R10
MOV             R0, R11
BL              sub_1EAE0
MOV             R2, R8
MOV             R5, R0
MOV             R1, R7
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_1EB84
LDR             R3, =dword_4CBF4
CMP             R0, #0
LDR             R3, [R3,#(dword_4CC10 - 0x4CBF4)]
STR             R3, [SP,#0x2C+var_2C]
MOV             R3, R5
LDR             R2, [R4,#(dword_4CB18 - 0x4CA40)]
BNE             loc_20408
LDR             R1, =aPubkeyAuthSucc ; "Pubkey auth succeeded for '%s' with key"...
MOV             R0, #5
BL              sub_184E8
BL              sub_1F75C

loc_203EC               ; ptr
MOV             R0, R5
BL              free
CMP             R8, #0
BEQ             loc_202F8
MOV             R0, R8  ; ptr
BL              j_free
B               loc_202F8

loc_20408
LDR             R1, =aPubkeyAuthBadS ; "Pubkey auth bad signature for '%s' with"...
MOV             R0, #4
BL              sub_184E8
MOV             R1, #1
MOV             R0, #0
BL              sub_1F628
B               loc_203EC
; End of function sub_1FDE0

off_20424 DCD byte_4CA40
off_20428 DCD off_4C2E0 ; "ecdsa-sha2-nistp256"
off_2042C DCD dword_4CBF4
off_20430 DCD aPubkeyAuthAtte ; "Pubkey auth attempt with unknown algo f"...
off_20434 DCD aSsh_0    ; "/.ssh"
off_20438 DCD aSSshAuthorized+7 ; "/authorized_keys"
off_2043C DCD aSSshAuthorized ; "%s/.ssh/authorized_keys"
off_20440 DCD aFailedToSetEui ; "Failed to set euid"
off_20444 DCD s2+7      ; "r"
off_20448 DCD aFailedToRevert ; "Failed to revert euid"
off_2044C DCD aSvrAuthPubkey ; "svr_auth_pubkey"
off_20450 DCD aSvrAuthpubkeyC ; "svr-authpubkey.c"
off_20454 DCD aSesPayloadBegi ; "ses.payload_beginning <= ses.payload->p"...
off_20458 DCD aPubkeyAuthSucc ; "Pubkey auth succeeded for '%s' with key"...
off_2045C DCD aPubkeyAuthBadS ; "Pubkey auth bad signature for '%s' with"...



; int __fastcall sub_20460(_DWORD *, char *s)
sub_20460
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, R1  ; s
MOV             R6, R1
BL              strlen
LDMIB           R4, {R2,R3}
SUB             R3, R2, R3
CMP             R3, R0
BCS             loc_20490

loc_20484
MOV             R6, #0xFFFFFFFF

loc_20488
MOV             R0, R6
POP             {R4-R6,PC}

loc_20490
MOV             R1, R0
MOV             R5, R0
MOV             R0, R4
BL              sub_125E4
MOV             R1, R6  ; s2
MOV             R2, R5  ; n
BL              strncasecmp
SUBS            R6, R0, #0
BNE             loc_20484
MOV             R1, R5
MOV             R0, R4
BL              sub_1250C
B               loc_20488
; End of function sub_20460




; bool sub_204C4()
sub_204C4
LDR             R3, =byte_4CA40
LDR             R3, [R3,#(dword_4CB20 - 0x4CA40)]
CMP             R3, #0
LDRNE           R0, [R3,#4]
CLZNE           R0, R0
MOVNE           R0, R0,LSR#5
MOVEQ           R0, #1
BX              LR
; End of function sub_204C4

off_204E4 DCD byte_4CA40



; bool sub_204E8()
sub_204E8
LDR             R3, =byte_4CA40
LDR             R3, [R3,#(dword_4CB20 - 0x4CA40)]
CMP             R3, #0
LDRNE           R0, [R3]
CLZNE           R0, R0
MOVNE           R0, R0,LSR#5
MOVEQ           R0, #1
BX              LR
; End of function sub_204E8

off_20508 DCD byte_4CA40



; bool sub_2050C()
sub_2050C
LDR             R3, =byte_4CA40
LDR             R3, [R3,#(dword_4CB20 - 0x4CA40)]
CMP             R3, #0
LDRNE           R0, [R3,#8]
CLZNE           R0, R0
MOVNE           R0, R0,LSR#5
MOVEQ           R0, #1
BX              LR
; End of function sub_2050C

off_2052C DCD byte_4CA40



; bool sub_20530()
sub_20530
LDR             R3, =byte_4CA40
LDR             R3, [R3,#(dword_4CB20 - 0x4CA40)]
CMP             R3, #0
LDRNE           R0, [R3,#0xC]
CLZNE           R0, R0
MOVNE           R0, R0,LSR#5
MOVEQ           R0, #1
BX              LR
; End of function sub_20530

off_20550 DCD byte_4CA40



; char *__fastcall sub_20554(char *result)
sub_20554
LDR             R3, =byte_4CA40
LDR             R2, [R3,#(dword_4CB20 - 0x4CA40)]
CMP             R2, #0
BXEQ            LR
PUSH            {R4-R6,LR}
MOV             R5, R3
LDR             R3, [R2,#0x10]
CMP             R3, #0
POPEQ           {R4-R6,PC}
LDR             R3, [R0]
MOV             R4, R0
CMP             R3, #0
STRNE           R3, [R0,#0x54]
MOVNE           R3, #0
STRNE           R3, [R0]
BNE             loc_205A0
LDR             R0, =(aSsh20Dropbear2_0+0x1A) ; ""
BL              sub_1886C
STR             R0, [R4,#0x54]

loc_205A0
LDR             R3, [R5,#(dword_4CB20 - 0x4CA40)]
LDR             R0, [R3,#0x10]
BL              sub_1886C
STR             R0, [R4]
POP             {R4-R6,PC}
; End of function sub_20554

off_205B4 DCD byte_4CA40
off_205B8 DCD aSsh20Dropbear2_0+0x1A ; ""



; void sub_205BC()
sub_205BC
PUSH            {R4,LR}
LDR             R4, =byte_4CA40
LDR             R3, [R4,#(dword_4CB20 - 0x4CA40)]
CMP             R3, #0
POPEQ           {R4,PC}
LDR             R0, [R3,#0x10] ; ptr
CMP             R0, #0
BEQ             loc_205EC
BL              free
LDR             R3, [R4,#(dword_4CB20 - 0x4CA40)]
MOV             R2, #0
STR             R2, [R3,#0x10]

loc_205EC               ; ptr
LDR             R0, [R4,#(dword_4CB20 - 0x4CA40)]
BL              free
MOV             R3, #0
STR             R3, [R4,#(dword_4CB20 - 0x4CA40)]
POP             {R4,PC}
; End of function sub_205BC

off_20600 DCD byte_4CA40



; int __fastcall sub_20604(_DWORD *, int, const char *)
sub_20604

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4-R11,LR}
MOV             R4, R0
LDR             R5, =byte_4CA40
MOV             R0, #0x14
MOV             R8, R1
LDR             R9, =aNoPortForwardi ; "no-port-forwarding"
LDR             R10, =aNoAgentForward ; "no-agent-forwarding"
LDR             R11, =aNoX11Forwardin ; "no-X11-forwarding"
STR             R2, [SP,#0xC+var_C]
BL              sub_18718
MOV             R1, #0
STR             R0, [R5,#(dword_4CB20 - 0x4CA40)]
MOV             R0, R4
BL              sub_124A0

loc_2063C
LDR             R2, [R4,#8]
LDR             R3, [R4,#4]
CMP             R2, R3
BCC             loc_20658
MOV             R0, #0

loc_20650
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_20658               ; s
MOV             R1, R9
MOV             R0, R4  ; int
BL              sub_20460
CMP             R0, #0
BNE             loc_206A8
LDR             R1, =aPortForwarding ; "Port forwarding disabled."
MOV             R0, #4
BL              sub_184E8
LDR             R3, [R5,#(dword_4CB20 - 0x4CA40)]
MOV             R2, #1
STR             R2, [R3]

loc_20684
LDR             R2, [R4,#8]
LDR             R3, [R4,#4]
CMP             R2, R3
BCS             loc_2063C
MOV             R0, R4
BL              sub_12560
CMP             R0, #0x2C ; ','
BEQ             loc_2063C
B               loc_20778

loc_206A8               ; s
MOV             R1, R10
MOV             R0, R4  ; int
BL              sub_20460
CMP             R0, #0
BNE             loc_206D8
LDR             R1, =aAgentForwardin ; "Agent forwarding disabled."
MOV             R0, #4
BL              sub_184E8
LDR             R3, [R5,#(dword_4CB20 - 0x4CA40)]
MOV             R2, #1
STR             R2, [R3,#4]
B               loc_20684

loc_206D8               ; s
MOV             R1, R11
MOV             R0, R4  ; int
BL              sub_20460
CMP             R0, #0
BNE             loc_20708
LDR             R1, =aX11ForwardingD ; "X11 forwarding disabled."
MOV             R0, #4
BL              sub_184E8
LDR             R3, [R5,#(dword_4CB20 - 0x4CA40)]
MOV             R2, #1
STR             R2, [R3,#8]
B               loc_20684

loc_20708
LDR             R1, =aNoPty ; "no-pty"
MOV             R0, R4  ; int
BL              sub_20460
CMP             R0, #0
BNE             loc_20738
LDR             R1, =aPtyAllocationD ; "Pty allocation disabled."
MOV             R0, #4
BL              sub_184E8
LDR             R3, [R5,#(dword_4CB20 - 0x4CA40)]
MOV             R2, #1
STR             R2, [R3,#0xC]
B               loc_20684

loc_20738
LDR             R1, =aCommand ; "command=\""
MOV             R0, R4  ; int
BL              sub_20460
SUBS            R7, R0, #0
BNE             loc_20684
MOV             R1, R7
MOV             R0, R4
BL              sub_125E4
MOV             R6, R0

loc_2075C
LDR             R1, [R4,#8]
LDR             R2, [R4,#4]
CMP             R1, R2
BCC             loc_20798
LDR             R1, =aBadlyFormatted ; "Badly formatted command= authorized_key"...
MOV             R0, #4
BL              sub_184E8

loc_20778
BL              sub_205BC
MOV             R0, #4
MOV             R3, R8
LDR             R2, [SP,#0xC+var_C]
LDR             R1, =aBadPublicKeyOp ; "Bad public key options at %s:%d"
BL              sub_184E8
MOV             R0, #0xFFFFFFFF
B               loc_20650

loc_20798
MOV             R0, R4
BL              sub_12560
EOR             R3, R7, #1
AND             R3, R3, #1
CMP             R0, #0x22 ; '"'
MOVNE           R2, #0
ANDEQ           R2, R3, #1
CMP             R2, #0
BEQ             loc_20824
MOV             R1, #0
MOV             R0, R4
BL              sub_125E4
LDR             R2, [R5,#(dword_4CB20 - 0x4CA40)]
SUB             R7, R0, R6
MOV             R0, R7
STR             R2, [SP,#0xC+var_8]
BL              sub_18718
LDR             R2, [SP,#0xC+var_8]
MOV             R1, R6  ; src
STR             R0, [R2,#0x10]
SUB             R2, R7, #1 ; n
LDR             R0, [R5,#(dword_4CB20 - 0x4CA40)]
LDR             R0, [R0,#0x10] ; dest
BL              memcpy
LDR             R2, [R5,#(dword_4CB20 - 0x4CA40)]
MOV             R3, #0
LDR             R1, =aForcedCommandS ; "Forced command '%s'"
LDR             R0, [R2,#0x10]
ADD             R0, R0, R7
STRB            R3, [R0,#-1]
MOV             R0, #4
LDR             R3, [R5,#(dword_4CB20 - 0x4CA40)]
LDR             R2, [R3,#0x10]
BL              sub_184E8
B               loc_20684

loc_20824
CMP             R0, #0x5C ; '\'
MOVNE           R7, #0
ANDEQ           R7, R3, #1
B               loc_2075C
; End of function sub_20604

off_20834 DCD byte_4CA40
off_20838 DCD aNoPortForwardi ; "no-port-forwarding"
off_2083C DCD aNoAgentForward ; "no-agent-forwarding"
off_20840 DCD aNoX11Forwardin ; "no-X11-forwarding"
off_20844 DCD aPortForwarding ; "Port forwarding disabled."
off_20848 DCD aAgentForwardin ; "Agent forwarding disabled."
off_2084C DCD aX11ForwardingD ; "X11 forwarding disabled."
off_20850 DCD aNoPty    ; "no-pty"
off_20854 DCD aPtyAllocationD ; "Pty allocation disabled."
off_20858 DCD aCommand  ; "command=\""
off_2085C DCD aBadlyFormatted ; "Badly formatted command= authorized_key"...
off_20860 DCD aBadPublicKeyOp ; "Bad public key options at %s:%d"
off_20864 DCD aForcedCommandS ; "Forced command '%s'"



; bool __fastcall sub_20868(int)
sub_20868
LDR             R3, [R0,#0x1C]
LDR             R0, [R3,#0x18]
ADDS            R0, R0, #1
MOVNE           R0, #1
BX              LR
; End of function sub_20868




; void *__fastcall sub_2087C(int, int)
sub_2087C
PUSH            {R4-R8,LR}
MOV             R6, R0
LDR             R4, =dword_4CBF4
MOV             R7, R1
MOV             R3, #0
LDRD            R0, R1, [R4,#(dword_4CBF8 - 0x4CBF4)]

loc_20894
CMP             R1, R3
MOV             R5, R3,LSL#3
BNE             loc_208D0
ADD             R1, R1, #1
MOV             R1, R1,LSL#3
BL              sub_18888
LDR             R3, [R4,#(dword_4CBFC - 0x4CBF4)]
STR             R0, [R4,#(dword_4CBF8 - 0x4CBF4)]
ADD             R3, R3, #1
STR             R3, [R4,#(dword_4CBFC - 0x4CBF4)]

loc_208BC
LDR             R3, [R4,#(dword_4CBF8 - 0x4CBF4)]
ADD             R2, R3, R5
STR             R7, [R3,R5]
STR             R6, [R2,#4]
POP             {R4-R8,PC}

loc_208D0
LDR             R2, [R0,R3,LSL#3]
CMN             R2, #1
BEQ             loc_208BC
ADD             R3, R3, #1
B               loc_20894
; End of function sub_2087C

off_208E4 DCD dword_4CBF4



sub_208E8

act= -0x8C

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x90
BL              __errno_location
MOV             R4, R0
LDR             R5, [R0]
LDR             R6, =byte_4CA40

loc_20900               ; n
MOV             R2, #1
LDR             R1, =byte_4CA40 ; buf
LDR             R0, [R6,#(dword_4CA8C - 0x4CA40)] ; fd
BL              write
CMP             R0, #1
BEQ             loc_20924
LDR             R3, [R4]
CMP             R3, #4
BEQ             loc_20900

loc_20924
LDR             R3, =sub_208E8
ADD             R0, SP, #0x90+act.sa_mask ; set
STR             R3, [SP,#0x90+act]
MOV             R3, #1
STR             R3, [SP,#0x90+act.sa_flags]
BL              sigemptyset
MOV             R2, #0  ; oact
ADD             R1, SP, #0x90+act ; act
MOV             R0, #0x11 ; sig
BL              sigaction
STR             R5, [R4]
ADD             SP, SP, #0x90
POP             {R4-R6,PC}
; End of function sub_208E8

off_20958 DCD byte_4CA40
off_2095C DCD sub_208E8



; int __fastcall sub_20960(int *)
sub_20960

var_8= -8

LDR             R3, [R0]
PUSH            {R0,R1,R4-R8,LR}
CMP             R3, #0
MOVLT           R0, #0xFFFFFFFF
BLT             loc_209C4
LDR             R5, =byte_4CA40
MOV             R4, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
MOV             R7, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
MOV             R6, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
MOV             R8, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
MOV             R3, R8
STR             R0, [SP,#8+var_8]
MOV             R2, R7
LDR             R0, [R4]
MOV             R1, R6
BL              sub_1EFCC
MOV             R0, #0

loc_209C4
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_20960

off_209CC DCD byte_4CA40



; int __fastcall sub_209D0(int)
sub_209D0
PUSH            {R4-R6,LR}
LDR             R4, [R0,#0x1C]
CMP             R4, #0
BEQ             loc_209F0
MOV             R2, #0xF4
LDR             R1, =aSvrChansession ; "svr-chansession.c"
LDR             R0, =aChannelTypedat ; "channel->typedata == NULL"
BL              sub_184D4

loc_209F0
MOV             R5, R0
MOV             R0, #0x58 ; 'X'
BL              sub_18718
MOV             R3, #0xFFFFFFFF
STR             R4, [R0]
STR             R4, [R0,#0x28]
STR             R4, [R0,#0x2C]
STR             R4, [R0,#4]
STR             R3, [R0,#8]
STR             R3, [R0,#0xC]
STR             R4, [R0,#0x10]
STR             R4, [R0,#0x14]
STR             R3, [R0,#0x18]
STR             R0, [R5,#0x1C]
STR             R4, [R0,#0x30]
STR             R4, [R0,#0x38]
STR             R4, [R0,#0x3C]
STR             R4, [R0,#0x48]
STR             R4, [R0,#0x4C]
STR             R4, [R0,#0x50]
MOV             R0, R4
STR             R4, [R5,#0x60]
POP             {R4-R6,PC}
; End of function sub_209D0

off_20A4C DCD aSvrChansession ; "svr-chansession.c"
off_20A50 DCD aChannelTypedat ; "channel->typedata == NULL"



; void __fastcall sub_20A54(int)
sub_20A54
PUSH            {R4-R8,LR}
LDR             R4, [R0,#0x1C]
CMP             R4, #0
POPEQ           {R4-R8,PC}
LDR             R3, [R4,#0x18]
MOV             R6, R0
CMP             R3, #0
BLT             loc_20AB8
LDR             R2, [R4,#0x20]
CMP             R2, #0
LDRGT           R3, =off_356B0 ; "ABRT"
BGT             loc_20AAC
CMN             R2, #1
BEQ             loc_20B64
LDR             R1, =aSvrChansession ; "svr-chansession.c"
MOV             R2, #0xB9
LDR             R0, =aChansessExitEx ; "chansess->exit.exitsignal == -1"

loc_20A98
BL              sub_184D4

loc_20A9C
ADD             R3, R3, #8
LDR             R1, [R3,#-0xC]
CMP             R2, R1
BEQ             loc_20BE8

loc_20AAC
LDR             R7, [R3]
CMP             R7, #0
BNE             loc_20A9C

loc_20AB8
MOV             R5, #0
LDR             R0, [R4] ; ptr
BL              free
LDR             R0, [R4,#0x14] ; ptr
STR             R5, [R4]
BL              free
STR             R5, [R4,#0x14]
LDR             R0, [R4,#0x54] ; ptr
BL              free
LDR             R3, [R4,#0x10]
STR             R5, [R4,#0x54]
LDR             R6, =dword_4CBF4
CMP             R3, R5
BEQ             loc_20B28
LDR             R1, =byte_4CA40
LDR             R2, [R6,#(dword_4CC14 - 0x4CBF4)]
LDR             R0, [R4,#4]
LDR             R1, [R1,#(dword_4CAF0 - 0x4CA40)]
BL              sub_1C2EC
MOV             R7, R0
BL              sub_1C5BC
MOV             R0, R7  ; ptr
BL              j_free_0
LDR             R0, [R4,#0x10]
BL              sub_1EDEC
LDR             R0, [R4,#0x10] ; ptr
BL              free
STR             R5, [R4,#0x10]

loc_20B28
MOV             R0, R4
BL              sub_238D8
MOV             R0, R4
BL              sub_1F3AC
LDR             R1, [R6,#(dword_4CBF8 - 0x4CBF4)]
MOV             R3, #0
LDR             R0, [R6,#(dword_4CBFC - 0x4CBF4)]
MOV             R12, #0xFFFFFFFF
MOV             LR, R3
MOV             R2, R1

loc_20B50
CMP             R0, R3
BNE             loc_20BB0
MOV             R0, R4
POP             {R4-R8,LR}
B               free

loc_20B64
LDR             R5, =byte_4CA40
MOV             R1, #0x62 ; 'b'
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R6,#4]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
MOV             R2, #0xB
LDR             R1, =aExitStatus ; "exit-status"
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
MOV             R1, #0
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R4,#0x1C]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C

loc_20BA8
BL              sub_1D894
B               loc_20AB8

loc_20BB0
LDR             R5, [R2,#4]
CMP             R5, R4
BNE             loc_20BDC
LDR             R5, [R1,R3,LSL#3]
CMP             R5, #0
MOVWLE          R2, #0x14E
LDRLE           R1, =aSvrChansession ; "svr-chansession.c"
LDRLE           R0, =aSvrSesChildpid ; "svr_ses.childpids[i].pid > 0"
BLE             loc_20A98
STR             R12, [R1,R3,LSL#3]
STR             LR, [R2,#4]

loc_20BDC
ADD             R3, R3, #1
ADD             R2, R2, #8
B               loc_20B50

loc_20BE8
LDR             R5, =byte_4CA40
MOV             R1, #0x62 ; 'b'
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R1, [R6,#4]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
MOV             R2, #0xB
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
LDR             R1, =aExitSignal ; "exit-signal"
BL              sub_127F8
MOV             R1, #0
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
MOV             R0, R7  ; s
BL              strlen
MOV             R1, R7
MOV             R2, R0
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
LDRB            R1, [R4,#0x24]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
MOV             R2, #0
LDR             R1, =(aSsh20Dropbear2_0+0x1A) ; ""
BL              sub_127F8
MOV             R2, #0
LDR             R1, =(aSsh20Dropbear2_0+0x1A) ; ""
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
B               loc_20BA8
; End of function sub_20A54

off_20C68 DCD off_356B0 ; "ABRT"
off_20C6C DCD aSvrChansession ; "svr-chansession.c"
off_20C70 DCD aChansessExitEx ; "chansess->exit.exitsignal == -1"
off_20C74 DCD dword_4CBF4
off_20C78 DCD byte_4CA40
off_20C7C DCD aExitStatus ; "exit-status"
off_20C80 DCD aSvrSesChildpid ; "svr_ses.childpids[i].pid > 0"
off_20C84 DCD aExitSignal ; "exit-signal"
off_20C88 DCD aSsh20Dropbear2_0+0x1A ; ""



; __pid_t __fastcall sub_20C8C(__pid_t result, int, int)
sub_20C8C

stat_loc= -0x14

LDR             R3, =byte_4CA40
LDR             R3, [R3,#(dword_4CA90 - 0x4CA40)]
CMP             R3, #0
BXEQ            LR
PUSH            {R0-R2,R4,R5,LR}
LDR             R4, =dword_4CBF4
ADD             R5, R4, #0xC

loc_20CA8               ; options
MOV             R2, #1
ADD             R1, SP, #0x18+stat_loc ; stat_loc
MOV             R0, #0xFFFFFFFF ; pid
BL              waitpid
CMP             R0, #0
BLE             loc_20D3C
LDR             R1, [R4,#(dword_4CBFC - 0x4CBF4)]
MOV             R3, #0
LDR             R2, [R4,#(dword_4CBF8 - 0x4CBF4)]
B               loc_20D2C

loc_20CD0
LDR             LR, [R2,R3,LSL#3]
ADD             R12, R2, R3,LSL#3
CMP             LR, R0
BNE             loc_20D28
LDR             R3, [R12,#4]
CMN             R3, #0x18
ADDNE           R3, R3, #0x18
MOVEQ           R3, R5

loc_20CF0
LDR             R2, [SP,#0x18+stat_loc]
STR             R0, [R3]
ANDS            R0, R2, #0x7F
UBFXEQ          R1, R2, #8, #8
STREQ           R1, [R3,#4]
ADD             R1, R0, #1
SBFX            R1, R1, #1, #7
CMP             R1, #0
ANDGT           R2, R2, #0x80
MOVLE           R2, #0xFFFFFFFF
STRGT           R0, [R3,#8]
STRGT           R2, [R3,#0xC]
STRLE           R2, [R3,#8]
B               loc_20CA8

loc_20D28
ADD             R3, R3, #1

loc_20D2C
CMP             R1, R3
BNE             loc_20CD0
LDR             R3, =dword_4CC00
B               loc_20CF0

loc_20D3C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_20C8C

off_20D44 DCD byte_4CA40
off_20D48 DCD dword_4CBF4
off_20D4C DCD dword_4CC00



; int sub_20D50()
sub_20D50

act= -0x8C

PUSH            {R4,LR}
MOV             R0, #8
SUB             SP, SP, #0x90
MOV             R4, #0
BL              sub_18718
LDR             R3, =dword_4CBF4
MOV             R1, #0xFFFFFFFF
MOV             R2, #1
STR             R0, [R3,#(dword_4CBF8 - 0x4CBF4)]
STM             R0, {R1,R4}
ADD             R0, SP, #0x90+act.sa_mask ; set
STR             R2, [R3,#(dword_4CBFC - 0x4CBF4)]
STR             R1, [R3,#(dword_4CC00 - 0x4CBF4)]
LDR             R3, =sub_208E8
STR             R2, [SP,#0x90+act.sa_flags]
STR             R3, [SP,#0x90+act]
BL              sigemptyset
MOV             R2, R4  ; oact
ADD             R1, SP, #0x90+act ; act
MOV             R0, #0x11 ; sig
BL              sigaction
CMP             R0, R4
BGE             loc_20DB4
LDR             R0, =aSignalError ; "signal() error"
BL              sub_184AC

loc_20DB4
ADD             SP, SP, #0x90
POP             {R4,PC}
; End of function sub_20D50

off_20DBC DCD dword_4CBF4
off_20DC0 DCD sub_208E8
off_20DC4 DCD aSignalError ; "signal() error"



; int __fastcall sub_20DC8(const char *, const char *)
sub_20DC8
PUSH            {R4-R10,LR}
MOV             R7, R1
MOV             R9, R0
BL              strlen
MOV             R4, R0
MOV             R0, R7  ; s
BL              strlen
ADD             R6, R4, R0
MOV             R8, R0
ADD             R0, R6, #2
BL              sub_18718
MOV             R2, R4  ; n
MOV             R1, R9  ; src
MOV             R5, R0
BL              memcpy
MOV             R3, #0x3D ; '='
ADD             R0, R4, #1
STRB            R3, [R5,R4]
MOV             R2, R8  ; n
MOV             R1, R7  ; src
ADD             R0, R5, R0 ; dest
BL              memcpy
ADD             R6, R5, R6
MOV             R3, #0
STRB            R3, [R6,#1]
MOV             R0, R5  ; string
BL              putenv
CMP             R0, #0
POPGE           {R4-R10,PC}
LDR             R0, =aEnvironError ; "environ error"
BL              sub_184AC
; End of function sub_20DC8

off_20E44 DCD aEnvironError ; "environ error"


; Attributes: noreturn

; void __fastcall __noreturn sub_20E48(int)
sub_20E48
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, =dword_4CB4C
LDR             R0, [R4,#(dword_4CBD0 - 0x4CB4C)]
BL              sub_1EA60
MOV             R3, #0
STR             R3, [R4,#(dword_4CBD0 - 0x4CB4C)]
BL              sub_18158
BL              clearenv
BL              getuid
CMP             R0, #0
LDR             R4, =byte_4CA40
BNE             loc_20EC0
LDR             R0, [R4,#(dword_4CB0C - 0x4CA40)] ; gid
BL              setgid
CMP             R0, #0
BGE             loc_20E94

loc_20E8C
LDR             R0, =aErrorChangingU ; "Error changing user group"

loc_20E90
BL              sub_184AC

loc_20E94               ; group
LDR             R1, [R4,#(dword_4CB0C - 0x4CA40)]
LDR             R0, [R4,#(dword_4CB18 - 0x4CA40)] ; char *
BL              initgroups
CMP             R0, #0
BLT             loc_20E8C
LDR             R0, [R4,#(dword_4CB08 - 0x4CA40)] ; uid
BL              setuid
CMP             R0, #0
BGE             loc_20ED4
LDR             R0, =aErrorChangingU_0 ; "Error changing user"
B               loc_20E90

loc_20EC0
BL              getuid
LDR             R3, [R4,#(dword_4CB08 - 0x4CA40)]
CMP             R0, R3
LDRNE           R0, =aCouldnTChangeU ; "Couldn't\tchange user as non-root"
BNE             loc_20E90

loc_20ED4
LDR             R1, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R0, =aUser ; "USER"
BL              sub_20DC8
LDR             R1, [R4,#(dword_4CB18 - 0x4CA40)]
LDR             R0, =aLogname ; "LOGNAME"
BL              sub_20DC8
LDR             R1, [R4,#(dword_4CB10 - 0x4CA40)]
LDR             R0, =aHome ; "HOME"
BL              sub_20DC8
BL              sub_16064
MOV             R1, R0
LDR             R0, =aShell ; "SHELL"
BL              sub_20DC8
LDR             R1, =aBinSbinUsrBinU ; "/bin:/sbin:/usr/bin:/usr/sbin"
LDR             R0, =aPath ; "PATH"
BL              sub_20DC8
LDR             R1, [R5,#0x14]
CMP             R1, #0
BEQ             loc_20F28
LDR             R0, =aTerm ; "TERM"
BL              sub_20DC8

loc_20F28
LDR             R1, [R5,#0x10]
CMP             R1, #0
BEQ             loc_20F3C
LDR             R0, =aSshTty ; "SSH_TTY"
BL              sub_20DC8

loc_20F3C
LDR             R1, [R5,#0x28]
CMP             R1, #0
BEQ             loc_20F50
LDR             R0, =aSshConnection_0 ; "SSH_CONNECTION"
BL              sub_20DC8

loc_20F50
LDR             R1, [R5,#0x2C]
CMP             R1, #0
BEQ             loc_20F64
LDR             R0, =aSshClient ; "SSH_CLIENT"
BL              sub_20DC8

loc_20F64
LDR             R1, [R5,#0x54]
CMP             R1, #0
BEQ             loc_20F78
LDR             R0, =aSshOriginalCom ; "SSH_ORIGINAL_COMMAND"
BL              sub_20DC8

loc_20F78               ; path
LDR             R0, [R4,#(dword_4CB10 - 0x4CA40)]
BL              chdir
CMP             R0, #0
LDRLT           R0, =aErrorChangingD ; "Error changing directory"
BLT             loc_20E90
MOV             R0, R5
BL              sub_237E8
MOV             R0, R5
BL              sub_1F334
BL              sub_16064
BL              sub_1886C
LDR             R1, [R4,#(dword_4CA54 - 0x4CA40)] ; int
MOV             R2, R0  ; path
LDR             R0, [R5] ; int
BL              sub_18744
LDR             R0, =aChildFailed ; "Child failed"
B               loc_20E90
; End of function sub_20E48

off_20FBC DCD dword_4CB4C
off_20FC0 DCD byte_4CA40
off_20FC4 DCD aErrorChangingU ; "Error changing user group"
off_20FC8 DCD aErrorChangingU_0 ; "Error changing user"
off_20FCC DCD aCouldnTChangeU ; "Couldn't\tchange user as non-root"
off_20FD0 DCD aUser     ; "USER"
off_20FD4 DCD aLogname  ; "LOGNAME"
off_20FD8 DCD aHome     ; "HOME"
off_20FDC DCD aShell    ; "SHELL"
off_20FE0 DCD aBinSbinUsrBinU ; "/bin:/sbin:/usr/bin:/usr/sbin"
off_20FE4 DCD aPath     ; "PATH"
off_20FE8 DCD aTerm     ; "TERM"
off_20FEC DCD aSshTty   ; "SSH_TTY"
off_20FF0 DCD aSshConnection_0 ; "SSH_CONNECTION"
off_20FF4 DCD aSshClient ; "SSH_CLIENT"
off_20FF8 DCD aSshOriginalCom ; "SSH_ORIGINAL_COMMAND"
off_20FFC DCD aErrorChangingD ; "Error changing directory"
off_21000 DCD aChildFailed ; "Child failed"



; int __fastcall sub_21004(int *, int, int, int)
sub_21004

var_2C= -0x2C
var_28= -0x28
var_24= -0x24
n= -0x18
s= -0x14
ptr= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R9,LR}
MOV             R12, #0
LDR             R9, [R1]
SUB             SP, SP, #0x2C
STR             R12, [SP,#0x2C+n]
CMP             R9, R12
BNE             loc_21064
CMP             R2, R12
MOV             R7, R3
MOV             R4, R1
MOV             R6, R0
LDR             R8, =byte_4CA40
BEQ             loc_210AC
ADD             R1, SP, #0x2C+n
LDR             R0, [R8,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
LDR             R2, [SP,#0x2C+n] ; n
MOVW            R3, #0x2328
MOV             R5, R0
STR             R0, [R4]
CMP             R2, R3
BLS             loc_21074
BL              free
STR             R9, [R4]

loc_21064
MOV             R5, #0xFFFFFFFF

loc_21068
MOV             R0, R5
ADD             SP, SP, #0x2C ; ','
POP             {R4-R9,PC}

loc_21074
CMP             R7, #0
BEQ             loc_210AC
CMP             R2, #4
BNE             loc_211F0
LDR             R1, =aSftp ; "sftp"
BL              strncmp
SUBS            R7, R0, #0
BNE             loc_211F0
MOV             R0, R5  ; ptr
BL              free
STR             R7, [R4]
LDR             R0, =aUsrLibexecSftp ; "/usr/libexec/sftp-server"
BL              sub_1886C
STR             R0, [R4]

loc_210AC
LDR             R3, =dword_4CB4C
LDR             R2, [R3,#(dword_4CBF0 - 0x4CB4C)]
MOV             R5, R3
CMP             R2, #0
BEQ             loc_21204
LDR             R0, [R4]
CMP             R0, #0
BNE             loc_210D4
LDR             R0, =(aSsh20Dropbear2_0+0x1A) ; ""
BL              sub_1886C

loc_210D4
STR             R0, [R4,#0x54]
LDR             R0, [R5,#(dword_4CBF0 - 0x4CB4C)]
BL              sub_1886C
STR             R0, [R4]

loc_210E4
MOV             R5, #0
ADD             R3, SP, #0x2C+var_8
ADD             R2, SP, #0x2C+ptr ; int
ADD             R1, SP, #0x2C+s ; int
STR             R3, [SP,#0x2C+var_2C] ; int
ADD             R3, SP, #0x2C+var_C ; int
LDR             R0, [R8,#(dword_4CA48 - 0x4CA40)] ; fd
STR             R5, [SP,#0x2C+var_28] ; int
BL              sub_1D25C
LDR             R0, [SP,#0x2C+s] ; s
BL              strlen
MOV             R7, R0
LDR             R0, [SP,#0x2C+var_C] ; s
BL              strlen
ADD             R7, R7, R0
ADD             R7, R7, #0x14
MOV             R0, R7
BL              sub_18718
LDR             R3, [SP,#0x2C+ptr]
MOV             R1, R7  ; maxlen
STR             R0, [R4,#0x28]
LDR             R2, =aSSSS ; "%s %s %s %s"
STR             R3, [SP,#0x2C+var_24]
LDR             R3, [SP,#0x2C+s]
STR             R3, [SP,#0x2C+var_28]
LDR             R3, [SP,#0x2C+var_8]
STR             R3, [SP,#0x2C+var_2C]
LDR             R3, [SP,#0x2C+var_C]
BL              snprintf
LDR             R0, [SP,#0x2C+var_C] ; s
BL              strlen
ADD             R7, R0, #0x14
MOV             R0, R7
BL              sub_18718
LDR             R3, [SP,#0x2C+ptr]
MOV             R1, R7  ; maxlen
STR             R0, [R4,#0x2C]
LDR             R2, =(aSSSS+3) ; format
STR             R3, [SP,#0x2C+var_28]
LDR             R3, [SP,#0x2C+var_8]
STR             R3, [SP,#0x2C+var_2C]
LDR             R3, [SP,#0x2C+var_C]
BL              snprintf
LDR             R0, [SP,#0x2C+s] ; ptr
BL              free
LDR             R0, [SP,#0x2C+ptr] ; ptr
BL              free
LDR             R0, [SP,#0x2C+var_C] ; ptr
BL              free
LDR             R0, [SP,#0x2C+var_8] ; ptr
BL              free
LDR             R7, [R4,#0x14]
CMP             R7, R5
BNE             loc_212E8
ADD             R3, R4, #4
ADD             R2, R6, #0x20 ; ' '
STR             R3, [SP,#0x2C+var_28]
ADD             R3, R6, #0x28 ; '('
STR             R3, [SP,#0x2C+var_2C]
MOV             R1, R4
ADD             R3, R6, #0x24 ; '$'
LDR             R0, =sub_20E48
BL              sub_188E4
CMN             R0, #1
BNE             loc_21210

loc_211E8
MOV             R5, #0xFFFFFFFF
B               loc_21274

loc_211F0               ; ptr
MOV             R0, R5
BL              free
MOV             R3, #0
STR             R3, [R4]
B               loc_21064

loc_21204
MOV             R0, R4
BL              sub_20554
B               loc_210E4

loc_21210
LDR             R3, [R6,#0x20]
MOV             R0, R4
LDR             R2, [R6,#0x24]
LDR             R1, [R4,#4]
CMP             R3, R2
MOVLT           R3, R2
LDR             R2, [R8,#(dword_4CA54 - 0x4CA40)]
CMP             R3, R2
MOVLT           R3, R2
LDR             R2, [R6,#0x28]
CMP             R3, R2
STRGE           R3, [R8,#(dword_4CA54 - 0x4CA40)]
STRLT           R2, [R8,#(dword_4CA54 - 0x4CA40)]
BL              sub_2087C
LDR             R12, =dword_4CBF4
LDR             R2, [R12,#(dword_4CC00 - 0x4CBF4)]
CMN             R2, #1
LDRNE           R0, [R12,#(dword_4CBFC - 0x4CBF4)]
MOVNE           R3, R7
LDRNE           R1, [R12,#(dword_4CBF8 - 0x4CBF4)]
BNE             loc_212B0

loc_21264
MOV             R3, #2
MOV             R5, #0
STR             R3, [R6,#0x60]
BL              sub_1617C

loc_21274
MOV             R6, #0
LDR             R0, [R4,#0x28] ; ptr
BL              free
STR             R6, [R4,#0x28]
LDR             R0, [R4,#0x2C] ; ptr
BL              free
CMN             R5, #1
STR             R6, [R4,#0x2C]
MOVNE           R5, R6
BNE             loc_21068
LDR             R0, [R4] ; ptr
BL              free
STR             R6, [R4]
B               loc_21068

loc_212AC
ADD             R3, R3, #1

loc_212B0
CMP             R3, R0
BEQ             loc_21264
LDR             R5, [R1,R3,LSL#3]
ADD             LR, R1, R3,LSL#3
CMP             R2, R5
BNE             loc_212AC
LDR             R3, =dword_4CC00
LDR             LR, [LR,#4]
LDM             R3, {R0-R3}
ADD             LR, LR, #0x18
STM             LR, {R0-R3}
MOV             R3, #0xFFFFFFFF
STR             R3, [R12,#(dword_4CC00 - 0x4CBF4)]
B               loc_21264

loc_212E8
LDR             R3, [R4,#8]
CMN             R3, #1
BEQ             loc_21300
LDR             R3, [R4,#0x10]
CMP             R3, #0
BNE             loc_21310

loc_21300
LDR             R1, =aNoPtyWasAlloca ; "No pty was allocated, couldn't execute"
MOV             R0, #4
BL              sub_184E8
B               loc_211E8

loc_21310
BL              fork
SUBS            R7, R0, #0
BLT             loc_211E8
BNE             loc_213C4
MOV             R1, R7  ; handler
MOV             R0, #0x11 ; sig
BL              signal
CMN             R0, #1
BNE             loc_2133C
LDR             R0, =aSignalError ; "signal() error"
BL              sub_184AC

loc_2133C               ; fd
LDR             R0, [R4,#8]
BL              close
LDR             R1, [R4,#0x10]
ADD             R0, R4, #0xC
BL              sub_1EE78
MOV             R1, R7  ; fd2
LDR             R0, [R4,#0xC] ; fd
BL              dup2
CMP             R0, #0
BLT             loc_211E8
MOV             R1, #2  ; fd2
LDR             R0, [R4,#0xC] ; fd
BL              dup2
CMP             R0, #0
BLT             loc_211E8
MOV             R1, #1  ; fd2
LDR             R0, [R4,#0xC] ; fd
BL              dup2
CMP             R0, #0
BLT             loc_211E8
LDR             R0, [R4,#0xC] ; fd
BL              close
LDR             R2, =dword_4CBF4
LDR             R3, [R4,#0x10]
LDR             R1, [R8,#(dword_4CAF0 - 0x4CA40)]
LDR             R2, [R2,#(dword_4CC14 - 0x4CBF4)]
LDR             R0, [R4,#4]
BL              sub_1C2EC
MOV             R5, R0
BL              sub_1C5B0
MOV             R0, R5  ; ptr
BL              j_free_0
MOV             R0, R4
BL              sub_20E48

loc_213C4
MOV             R1, R7
MOV             R0, R4
STR             R7, [R4,#4]
BL              sub_2087C
LDR             R0, [R4,#0xC] ; fd
BL              close
LDR             R0, [R4,#8]
LDR             R3, [R8,#(dword_4CA54 - 0x4CA40)]
STR             R0, [R6,#0x20]
STR             R0, [R6,#0x24]
CMP             R3, R0
STRGE           R3, [R8,#(dword_4CA54 - 0x4CA40)]
STRLT           R0, [R8,#(dword_4CA54 - 0x4CA40)]
BL              sub_188B0
B               loc_21274
; End of function sub_21004

off_21400 DCD byte_4CA40
off_21404 DCD aSftp     ; "sftp"
off_21408 DCD aUsrLibexecSftp ; "/usr/libexec/sftp-server"
off_2140C DCD dword_4CB4C
off_21410 DCD aSsh20Dropbear2_0+0x1A ; ""
off_21414 DCD aSSSS     ; "%s %s %s %s"
off_21418 DCD aSSSS+3   ; "%s %s %s"
off_2141C DCD sub_20E48
off_21420 DCD dword_4CBF4
off_21424 DCD dword_4CC00
off_21428 DCD aNoPtyWasAlloca ; "No pty was allocated, couldn't execute"
off_2142C DCD aSignalError ; "signal() error"



; void __fastcall sub_21430(int *)
sub_21430

var_8C= -0x8C
var_88= -0x88
termios_p= -0x84
var_48= -0x48
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x8C
LDR             R7, =byte_4CA40
MOV             R1, SP
MOV             R8, R0
LDR             R0, [R7,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
MOV             R5, R0
LDR             R0, [R7,#(dword_4CA70 - 0x4CA40)]
BL              sub_12590
LDR             R3, [SP,#0x8C+var_8C]
MOV             R11, R0
CMP             R3, #0x40 ; '@'
BHI             loc_217E0
LDR             R4, [R8,#0x1C]
CMP             R4, #0
BNE             loc_21484
MOV             R2, #0x170
LDR             R1, =aSvrChansession ; "svr-chansession.c"
LDR             R0, =aChansessNull ; "chansess != NULL"
BL              sub_184D4

loc_21484
LDR             R1, =aWindowChange ; "window-change"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_214A8
ADD             R0, R4, #8
BL              sub_20960

loc_214A0
MOV             R6, R0
B               loc_214E8

loc_214A8
LDR             R1, =aShell_0 ; "shell"
MOV             R0, R5  ; s1
BL              strcmp
SUBS            R3, R0, #0
MOVEQ           R2, R3
BEQ             loc_216F8
LDR             R1, =aPtyReq ; "pty-req"
MOV             R0, R5  ; s1
BL              strcmp
SUBS            R6, R0, #0
MOV             R9, R7
BNE             loc_216E0
BL              sub_20530
CMP             R0, #0
BNE             loc_21510

loc_214E4
MOV             R6, #0xFFFFFFFF

loc_214E8
CMP             R11, #0
BEQ             loc_21500
CMP             R6, #0
BNE             loc_217E8

loc_214F8
MOV             R0, R8
BL              sub_143A8

loc_21500               ; ptr
MOV             R0, R5
BL              free
ADD             SP, SP, #0x8C
POP             {R4-R11,PC}

loc_21510
ADD             R1, SP, #0x8C+var_88
LDR             R0, [R7,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
LDR             R3, [SP,#0x8C+var_88]
STR             R0, [R4,#0x14]
CMP             R3, #0xC8
BHI             loc_214E4
LDR             R3, [R4,#8]
CMN             R3, #1
LDRNE           R0, =aMultiplePtyReq ; "Multiple pty requests"
BNE             loc_21574
ADD             R7, R4, #8
MOV             R3, #0x40 ; '@'
ADD             R2, SP, #0x8C+var_48
ADD             R1, R4, #0xC
MOV             R0, R7
BL              sub_1ED64
CMP             R0, #0
BEQ             loc_214E4
ADD             R0, SP, #0x8C+var_48
BL              sub_1886C
CMP             R0, #0
STR             R0, [R4,#0x10]
BNE             loc_21578
LDR             R0, =aOutOfMemory ; "Out of memory"

loc_21574
BL              sub_184AC

loc_21578               ; name
LDR             R0, [R9,#(dword_4CB18 - 0x4CA40)]
BL              getpwnam
CMP             R0, #0
LDREQ           R0, =aGetpwnamFailed ; "getpwnam failed after succeeding previo"...
BEQ             loc_21574
LDR             R1, [R4,#0x10]
BL              sub_1EFF8
MOV             R0, R7
BL              sub_20960
ADD             R1, SP, #0x8C+termios_p ; termios_p
LDR             R0, [R4,#8] ; fd
BL              tcgetattr
CMN             R0, #1
BEQ             loc_214E8
LDR             R0, [R9,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
LDR             R3, [R9,#(dword_4CA70 - 0x4CA40)]
LDMIB           R3, {R2,R3}
SUB             R3, R2, R3
CMP             R0, R3
LDRNE           R0, =aBadTermModeStr ; "Bad term mode string"
BNE             loc_21574
CMP             R0, #0
LDRNE           R10, =unk_381D4
BEQ             loc_214E8

def_21640               ; jumptable 00021640 default case
LDR             R0, [R9,#(dword_4CA70 - 0x4CA40)]
BL              sub_12560
SUB             R3, R0, #1
MOV             R7, R0
UXTB            R3, R3
CMP             R3, #0x9E
BLS             loc_21620
ADD             R2, SP, #0x8C+termios_p ; termios_p
MOV             R1, #0  ; optional_actions
LDR             R0, [R4,#8] ; fd
BL              tcsetattr
CMP             R0, #0
BGE             loc_214E8
LDR             R1, =aErrorSettingTe ; "Error setting terminal attributes"
MOV             R0, #6
BL              sub_184E8
B               loc_214E8

loc_21620
LDR             R0, [R9,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
CMP             R7, #0x5D ; ']'
BHI             def_21640 ; jumptable 00021640 default case
ADD             R3, R10, R7,LSL#3
LDRB            R3, [R3,#4]
SUB             R3, R3, #1
CMP             R3, #4  ; switch 5 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_21640 ; jumptable 00021640 default case
jpt_21640 DCD loc_216C4 ; jump table for switch statement
DCD loc_21670
DCD loc_2168C
DCD loc_216A8
DCD loc_2165C

loc_2165C               ; jumptable 00021640 case 4
LDR             R3, [R10,R7,LSL#3]
ADD             R2, SP, #0x8C+var_4
ADD             R3, R2, R3
STRB            R0, [R3,#-0x6F]
B               def_21640 ; jumptable 00021640 default case

loc_21670               ; jumptable 00021640 case 1
LDR             R3, [SP,#0x8C+termios_p]
CMP             R0, #0
LDR             R2, [R10,R7,LSL#3]
ORRNE           R3, R3, R2
BICEQ           R3, R3, R2
STR             R3, [SP,#0x8C+termios_p]
B               def_21640 ; jumptable 00021640 default case

loc_2168C               ; jumptable 00021640 case 2
LDR             R3, [SP,#0x8C+termios_p.c_oflag]
CMP             R0, #0
LDR             R2, [R10,R7,LSL#3]
ORRNE           R3, R3, R2
BICEQ           R3, R3, R2
STR             R3, [SP,#0x8C+termios_p.c_oflag]
B               def_21640 ; jumptable 00021640 default case

loc_216A8               ; jumptable 00021640 case 3
LDR             R3, [SP,#0x8C+termios_p.c_lflag]
CMP             R0, #0
LDR             R2, [R10,R7,LSL#3]
ORRNE           R3, R2, R3
BICEQ           R3, R3, R2
STR             R3, [SP,#0x8C+termios_p.c_lflag]
B               def_21640 ; jumptable 00021640 default case

loc_216C4               ; jumptable 00021640 case 0
LDR             R3, [SP,#0x8C+termios_p.c_cflag]
CMP             R0, #0
LDR             R2, [R10,R7,LSL#3]
ORRNE           R3, R3, R2
BICEQ           R3, R3, R2
STR             R3, [SP,#0x8C+termios_p.c_cflag]
B               def_21640 ; jumptable 00021640 default case

loc_216E0
LDR             R1, =aExec ; "exec"
MOV             R0, R5  ; s1
BL              strcmp
SUBS            R3, R0, #0
BNE             loc_21708

loc_216F4
MOV             R2, #1

loc_216F8
MOV             R1, R4
MOV             R0, R8
BL              sub_21004
B               loc_214A0

loc_21708
LDR             R1, =aSubsystem ; "subsystem"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
MOVEQ           R3, #1
BEQ             loc_216F4
LDR             R1, =aX11Req ; "x11-req"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_21740
MOV             R0, R4
BL              sub_23610
B               loc_214A0

loc_21740
LDR             R1, =aAuthAgentReqOp ; "auth-agent-req@openssh.com"
MOV             R0, R5  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_21760
MOV             R0, R4
BL              sub_1F4D4
B               loc_214A0

loc_21760               ; s2
LDR             R1, =(aTerminatedBySi+0xE) ; "signal"
MOV             R0, R5  ; s1
BL              strcmp
SUBS            R7, R0, #0
BNE             loc_217E0
LDR             R3, [R4,#4]
CMP             R3, #0
BEQ             loc_217E0
LDR             R10, =unk_356AC
MOV             R1, #0
LDR             R0, [R9,#(dword_4CA70 - 0x4CA40)]
MOV             R6, #0
BL              sub_12690
MOV             R9, R0

loc_21798
ADD             R3, R10, R6,LSL#3
LDR             R0, [R3,#4] ; s1
CMP             R0, #0
BEQ             loc_217BC
MOV             R1, R9  ; s2
BL              strcmp
CMP             R0, #0
BNE             loc_217F4
LDR             R7, [R10,R6,LSL#3]

loc_217BC               ; ptr
MOV             R0, R9
BL              free
CMP             R7, #0
BEQ             loc_217E0
MOV             R1, R7  ; sig
LDR             R0, [R4,#4] ; pid
BL              kill
CMP             R0, #0
BGE             loc_217FC

loc_217E0
CMP             R11, #0
BEQ             loc_21500

loc_217E8
MOV             R0, R8
BL              sub_14310
B               loc_21500

loc_217F4
ADD             R6, R6, #1
B               loc_21798

loc_217FC
CMP             R11, #0
BNE             loc_214F8
B               loc_21500
; End of function sub_21430

off_21808 DCD byte_4CA40
off_2180C DCD aSvrChansession ; "svr-chansession.c"
off_21810 DCD aChansessNull ; "chansess != NULL"
off_21814 DCD aWindowChange ; "window-change"
off_21818 DCD aShell_0  ; "shell"
off_2181C DCD aPtyReq   ; "pty-req"
off_21820 DCD aMultiplePtyReq ; "Multiple pty requests"
off_21824 DCD aOutOfMemory ; "Out of memory"
off_21828 DCD aGetpwnamFailed ; "getpwnam failed after succeeding previo"...
off_2182C DCD aBadTermModeStr ; "Bad term mode string"
off_21830 DCD unk_381D4
off_21834 DCD aErrorSettingTe ; "Error setting terminal attributes"
off_21838 DCD aExec     ; "exec"
off_2183C DCD aSubsystem ; "subsystem"
off_21840 DCD aX11Req   ; "x11-req"
off_21844 DCD aAuthAgentReqOp ; "auth-agent-req@openssh.com"
off_21848 DCD aTerminatedBySi+0xE ; "signal"
off_2184C DCD unk_356AC
PUSH            {R4-R9,LR}
SUB             SP, SP, #0x1C
LDR             R4, =byte_4CA40
MOV             R2, #0x10
MOV             R1, #0
ADD             R0, SP, #8
BL              memset
LDRB            R3, [R4,#(byte_4CAAC - 0x4CA40)]
TST             R3, #2
LDREQ           R0, =aPrematureKexdh ; "Premature kexdh_init message received"
BEQ             loc_2193C
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R3,#0x660]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_2191C
CMP             R3, #2
MOVHI           R6, #0
BHI             loc_218A8
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12708
MOV             R6, R0

loc_218A8
LDR             R3, [R4,#(dword_4CA70 - 0x4CA40)]
LDR             R2, [R3,#8]
LDR             R3, [R3,#4]
CMP             R2, R3
BNE             loc_21938
LDR             R5, =dword_4CB4C
LDR             R3, [R5,#(dword_4CBD4 - 0x4CB4C)]
CMP             R3, #0
BEQ             loc_21A04
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R0, [R5,#(dword_4CBD0 - 0x4CB4C)]
LDR             R1, [R3,#0x664]
STR             R1, [SP,#4]
BL              sub_1E708
CMP             R0, #0
BEQ             loc_218F4
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_21A04

loc_218F4
LDR             R3, [SP,#4]
CMP             R3, #0
BEQ             loc_21940
CMP             R3, #3
LDRLS           R7, =aEtcDropbearDro ; "/etc/dropbear/dropbear_ecdsa_host_key"
BLS             loc_21944
MOV             R2, #0x7F
LDR             R1, =aSvrKexC ; "svr-kex.c"
LDR             R0, =(aFd0+6) ; "0"
BL              sub_184D4

loc_2191C
ADD             R0, SP, #8
BL              sub_121B0
ADD             R1, SP, #8
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12910
SUBS            R6, R0, #0
BEQ             loc_218A8

loc_21938
LDR             R0, =aBadKexValue ; "Bad kex value"

loc_2193C
BL              sub_184AC

loc_21940
LDR             R7, =aEtcDropbearDro_0 ; "/etc/dropbear/dropbear_rsa_host_key"

loc_21944
ADD             R2, SP, #4
LDR             R1, [R5,#(dword_4CBD0 - 0x4CB4C)]
MOV             R0, R7
BL              sub_155A0
CMP             R0, #0
BEQ             loc_21A04
MOV             R3, #1
MOV             R2, R7
MOV             R1, #0
LDR             R0, [SP,#4]
BL              sub_1A488
CMN             R0, #1
BNE             loc_21984

loc_21978
MOV             R1, R7
LDR             R0, =aCouldnTReadOrG ; "Couldn't read or generate hostkey %s"
BL              sub_184AC

loc_21984
ADD             R2, SP, #4
LDR             R1, [R5,#(dword_4CBD0 - 0x4CB4C)]
MOV             R0, R7
BL              sub_155A0
CMP             R0, #0
BNE             loc_21A8C
MOVW            R0, #0x6A4
BL              sub_12344
LDR             R2, [SP,#4]
MOV             R8, R0
LDR             R1, [R5,#(dword_4CBD0 - 0x4CB4C)]
BL              sub_1E964
MOV             R1, #4
MOV             R0, R8
BL              sub_124A0
LDMIB           R8, {R3,R9}
SUB             R9, R3, R9
MOV             R0, R8
MOV             R1, R9
BL              sub_125E4
MOV             R1, R9
BL              sub_1EAE0
MOV             R2, R7
MOV             R3, R0
MOV             R9, R0
LDR             R1, =aGeneratedHostk ; "Generated hostkey %s, fingerprint is %s"
MOV             R0, #6
BL              sub_184E8
MOV             R0, R9
BL              free
MOV             R0, R8
BL              j_free

loc_21A04
MOV             R1, #0x1F
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R1, [R5,#(dword_4CBD0 - 0x4CB4C)]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
LDR             R2, [R3,#0x664]
BL              sub_1E964
LDR             R3, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R3,#0x660]
LDR             R3, [R3]
CMP             R3, #1
BEQ             loc_21AC4
BCC             loc_21A98
CMP             R3, #2
BEQ             loc_21AF0

loc_21A44
LDR             R2, [R4,#(dword_4CAC0 - 0x4CA40)]
LDR             R3, [R4,#(dword_4CACC - 0x4CA40)]
LDR             R1, [R5,#(dword_4CBD0 - 0x4CB4C)]
LDR             R2, [R2,#0x664]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1EAE4
BL              sub_1D894
ADD             R0, SP, #8
BL              sub_29D74
CMP             R6, #0
BEQ             loc_21A78
MOV             R0, R6
BL              j_free

loc_21A78
BL              sub_14D28
MOV             R3, #0x15
STRB            R3, [R4,#(byte_4CA85 - 0x4CA40)]
ADD             SP, SP, #0x1C
POP             {R4-R9,PC}

loc_21A8C
CMN             R0, #1
BNE             loc_21A04
B               loc_21978

loc_21A98
BL              sub_150E8
LDR             R2, [R5,#(dword_4CBD0 - 0x4CB4C)]
MOV             R7, R0
ADD             R1, SP, #8
BL              sub_15210
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
MOV             R1, R7
BL              sub_1282C
MOV             R0, R7
BL              sub_151F0
B               loc_21A44

loc_21AC4
BL              sub_1532C
LDR             R2, [R5,#(dword_4CBD0 - 0x4CB4C)]
MOV             R7, R0
MOV             R1, R6
BL              sub_153A0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
MOV             R1, R7
BL              sub_19370
MOV             R0, R7
BL              sub_15388
B               loc_21A44

loc_21AF0
BL              sub_15428
LDR             R2, [R5,#(dword_4CBD0 - 0x4CB4C)]
MOV             R1, R6
MOV             R7, R0
BL              sub_154B8
MOV             R2, #0x20 ; ' '
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
ADD             R1, R7, R2
BL              sub_127F8
MOV             R0, R7
BL              sub_1549C
B               loc_21A44
off_21B20 DCD byte_4CA40
off_21B24 DCD aPrematureKexdh ; "Premature kexdh_init message received"
off_21B28 DCD dword_4CB4C
off_21B2C DCD aEtcDropbearDro ; "/etc/dropbear/dropbear_ecdsa_host_key"
off_21B30 DCD aSvrKexC  ; "svr-kex.c"
off_21B34 DCD aFd0+6    ; "0"
off_21B38 DCD aBadKexValue ; "Bad kex value"
off_21B3C DCD aEtcDropbearDro_0 ; "/etc/dropbear/dropbear_rsa_host_key"
off_21B40 DCD aCouldnTReadOrG ; "Couldn't read or generate hostkey %s"
off_21B44 DCD aGeneratedHostk ; "Generated hostkey %s, fingerprint is %s"



; void handler(int)
handler
LDR             R3, =byte_4CA40
MOV             R2, #1
STR             R2, [R3,#(dword_4CB44 - 0x4CA40)]
BX              LR
; End of function handler

off_21B58 DCD byte_4CA40



; int sub_21B5C()
sub_21B5C

act= -0x90

LDR             R3, =dword_4CA24
PUSH            {LR}
SUB             SP, SP, #0x94
LDR             R3, [R3,#(dword_4CA34 - 0x4CA24)]
CMP             R3, #0
BEQ             loc_21B7C
LDR             R0, =s2 ; "dropbear"
BL              sub_18478

loc_21B7C               ; handler
LDR             R1, =handler
MOV             R0, #2  ; sig
BL              signal
CMN             R0, #1
BEQ             loc_21BB8
LDR             R1, =handler ; handler
MOV             R0, #0xF ; sig
BL              signal
CMN             R0, #1
BEQ             loc_21BB8
MOV             R1, #1  ; handler
MOV             R0, #0xD ; sig
BL              signal
CMN             R0, #1
BNE             loc_21BC0

loc_21BB8
LDR             R0, =aSignalError ; "signal() error"
BL              sub_184AC

loc_21BC0
LDR             R3, =sub_21C54
ADD             R0, SP, #0x94+act.sa_mask ; set
STR             R3, [SP,#0x94+act]
MOV             R3, #1
STR             R3, [SP,#0x94+act.sa_flags]
BL              sigemptyset
MOV             R2, #0  ; oact
ADD             R1, SP, #0x94+act ; act
MOV             R0, #0x11 ; sig
BL              sigaction
CMP             R0, #0
BLT             loc_21BB8
LDR             R1, =sub_21C30 ; handler
MOV             R0, #0xB ; sig
BL              signal
CMN             R0, #1
BEQ             loc_21BB8
BL              sub_1645C
BL              sub_22C28
BL              sub_18158
ADD             SP, SP, #0x94
POP             {PC}
; End of function sub_21B5C

off_21C18 DCD dword_4CA24
off_21C1C DCD s2        ; "dropbear"
off_21C20 DCD handler
off_21C24 DCD aSignalError ; "signal() error"
off_21C28 DCD sub_21C54
off_21C2C DCD sub_21C30


; Attributes: noreturn

; void __fastcall __noreturn sub_21C30(int)
sub_21C30
LDR             R3, =stderr
PUSH            {R4,LR}
LDR             R0, =aAieeSegfaultYo ; "Aiee, segfault! You should probably rep"...
LDR             R1, [R3] ; stream
BL              fputs
MOV             R0, #1  ; status
BL              _exit
; End of function sub_21C30

off_21C4C DCD stderr
off_21C50 DCD aAieeSegfaultYo ; "Aiee, segfault! You should probably rep"...



sub_21C54

act= -0x90

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x94
BL              __errno_location
MOV             R4, R0
LDR             R5, [R0]

loc_21C68               ; options
MOV             R2, #1
MOV             R1, #0  ; stat_loc
MOV             R0, #0xFFFFFFFF ; pid
BL              waitpid
CMP             R0, #0
BGT             loc_21C68
LDR             R3, =sub_21C54
ADD             R0, SP, #0x94+act.sa_mask ; set
STR             R3, [SP,#0x94+act]
MOV             R3, #1
STR             R3, [SP,#0x94+act.sa_flags]
BL              sigemptyset
MOV             R2, #0  ; oact
ADD             R1, SP, #0x94+act ; act
MOV             R0, #0x11 ; sig
BL              sigaction
CMP             R0, #0
BGE             loc_21CB8
LDR             R0, =aSignalError ; "signal() error"
BL              sub_184AC

loc_21CB8
STR             R5, [R4]
ADD             SP, SP, #0x94
POP             {R4,R5,PC}
; End of function sub_21C54

off_21CC4 DCD sub_21C54
off_21CC8 DCD aSignalError ; "signal() error"


; Attributes: noreturn

; void __noreturn sub_21CCC()
sub_21CCC

timeout= -0x2AC
var_2A8= -0x2A8
var_2A0= -0x2A0
s1= -0x29C
var_298= -0x298
var_294= -0x294
var_290= -0x290
var_288= -0x288
var_284= -0x284
var_280= -0x280
var_27C= -0x27C
var_278= -0x278
pipedes= -0x274
var_26C= -0x26C
var_1F4= -0x1F4
s= -0x17C
readfds= -0x104
ptr= -0x84
var_4= -4

PUSH            {R4-R11,LR}
MOV             R4, #0xFFFFFFFF
SUB             SP, SP, #0x2AC
STR             R4, [SP,#0x2AC+var_288]
BL              sub_21B5C
MOV             R3, #0

loc_21CE4
ADD             R2, SP, #0x2AC+var_1F4
STR             R4, [R2,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x1E
BNE             loc_21CE4
LDR             R6, =dword_4CB7C
MOV             R4, #0
LDR             R11, =aFailedListenin ; "Failed listening on '%s': %s"
MOV             R9, R4
MOV             R2, #0x78 ; 'x' ; n
MOV             R1, #0  ; c
SUB             R10, R6, #0x30 ; '0'
ADD             R0, SP, #0x2AC+s ; s
MOV             R8, R10
BL              memset
STR             R4, [SP,#0x2AC+ptr]

loc_21D24
LDR             R3, [R10,#(dword_4CB7C - 0x4CB4C)]
ADD             R5, SP, #0x2AC+var_26C
CMP             R9, R3
BCC             loc_21DD0
CMP             R4, #0
LDREQ           R0, =aNoListeningPor ; "No listening ports available."
BEQ             loc_21FAC
MOV             R1, #0
MOV             R0, #1

loc_21D48
LDR             R3, [R5,R1,LSL#2]
ADD             R12, SP, #0x2AC+var_4
ADD             R1, R1, #1
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
MOV             R2, R2,ASR#5
ADD             R2, R12, R2,LSL#2
RSBS            R12, R3, #0
AND             R12, R12, #0x1F
AND             R3, R3, #0x1F
RSBPL           R3, R12, #0
LDR             R12, [R2,#-0x100]
CMP             R1, R4
ORR             R3, R12, R0,LSL R3
STR             R3, [R2,#-0x100]
BNE             loc_21D48
LDR             R3, [R8,#(dword_4CB50 - 0x4CB4C)]
CMP             R3, #0
BEQ             loc_21E70
LDR             R3, =dword_4CA24
MOV             R0, #0  ; nochdir
LDR             R1, [R3,#(dword_4CA34 - 0x4CA24)]
CLZ             R1, R1
MOV             R1, R1,LSR#5 ; noclose
BL              daemon
CMP             R0, #0
BGE             loc_21E70
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R1, R0
LDR             R0, =aFailedToDaemon ; "Failed to daemonize: %s"

loc_21DCC
BL              sub_184AC

loc_21DD0
ADD             R3, SP, #0x2AC+var_288
ADD             R5, R5, R4,LSL#2
STR             R3, [SP,#0x2AC+var_2A8]
ADD             R6, R6, #4
ADD             R3, SP, #0x2AC+ptr
MOV             R2, R5
STR             R3, [SP,#0x2AC+timeout]
RSB             R3, R4, #0x1E
LDR             R1, [R6,#-0x2C]
LDR             R0, [R6]
BL              sub_1CE9C
SUBS            R2, R0, #0
MOVGE           R7, #0
BGE             loc_21E60
LDR             R3, [SP,#0x2AC+ptr]
MOV             R1, R11
LDR             R2, [R6,#-0x2C]
MOV             R0, #4
BL              sub_184E8
LDR             R0, [SP,#0x2AC+ptr] ; ptr
BL              free
MOV             R3, #0
STR             R3, [SP,#0x2AC+ptr]

loc_21E2C
ADD             R9, R9, #1
B               loc_21D24

loc_21E34
LDR             R3, [R5,R7,LSL#2]
MOV             R1, #0xB
STR             R2, [SP,#0x2AC+s1]
ADD             R7, R7, #1
MOV             R0, R3  ; fd
STR             R3, [SP,#0x2AC+var_2A0]
BL              sub_1CD30
LDR             R3, [SP,#0x2AC+var_2A0]
MOV             R0, R3
BL              sub_1CD04
LDR             R2, [SP,#0x2AC+s1]

loc_21E60
CMP             R7, R2
BNE             loc_21E34
ADD             R4, R4, R7
B               loc_21E2C

loc_21E70
LDR             R3, [R8,#(dword_4CB50 - 0x4CB4C)]
MOV             R0, #6
CMP             R3, #0
LDRNE           R1, =aRunningInBackg ; "Running in background"
LDREQ           R1, =aNotBackgroundi ; "Not backgrounding"
BL              sub_184E8
LDR             R1, =(aChannelRecvwin+0x26) ; "w"
LDR             R0, [R8,#(dword_4CBEC - 0x4CB4C)]
BL              fopen64
SUBS            R6, R0, #0
BEQ             loc_21EB8
BL              getpid
LDR             R1, =aD ; "%d\n"
MOV             R2, R0
MOV             R0, R6  ; stream
BL              fprintf
MOV             R0, R6  ; stream
BL              fclose

loc_21EB8
MOV             R9, #0
MOV             R11, #1

loc_21EC0
MOV             R3, #0
ADD             R1, SP, #0x2AC+readfds ; readfds

loc_21EC8
STR             R9, [R1,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BNE             loc_21EC8
MOV             R0, #0

loc_21EDC
LDR             R3, [R5,R0,LSL#2]
ADD             R12, SP, #0x2AC+var_4
ADD             R0, R0, #1
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
MOV             R2, R2,ASR#5
ADD             R2, R12, R2,LSL#2
RSBS            R12, R3, #0
AND             R12, R12, #0x1F
AND             R3, R3, #0x1F
RSBPL           R3, R12, #0
LDR             R12, [R2,#-0x100]
CMP             R0, R4
ORR             R3, R12, R11,LSL R3
STR             R3, [R2,#-0x100]
BNE             loc_21EDC
LDR             R2, [SP,#0x2AC+var_288]
MOV             R12, #0
MOV             R0, R12

loc_21F2C
ADD             R3, SP, #0x2AC+var_1F4
LDR             R3, [R3,R0,LSL#2]
CMP             R3, #0
BLT             loc_21F64
MOV             R12, R3,ASR#5
ADD             LR, SP, #0x2AC+var_4
AND             R6, R3, #0x1F
ADD             R12, LR, R12,LSL#2
CMP             R2, R3
MOVLT           R2, R3
LDR             LR, [R12,#-0x100]
ORR             LR, LR, R11,LSL R6
STR             LR, [R12,#-0x100]
MOV             R12, #1

loc_21F64
ADD             R0, R0, #1
CMP             R0, #0x1E
BNE             loc_21F2C
CMP             R12, #0
MOV             R3, #0  ; exceptfds
STRNE           R2, [SP,#0x2AC+var_288]
MOV             R2, R3  ; writefds
LDR             R0, [SP,#0x2AC+var_288]
STR             R9, [SP,#0x2AC+timeout] ; timeout
ADD             R0, R0, #1 ; nfds
BL              select
LDR             R3, =byte_4CA40
LDR             R7, [R3,#(dword_4CB44 - 0x4CA40)]
CMP             R7, #0
BEQ             loc_21FB0
LDR             R0, [R8,#(dword_4CBEC - 0x4CB4C)] ; name
BL              unlink
LDR             R0, =aTerminatedBySi ; "Terminated by signal"

loc_21FAC
BL              sub_184AC

loc_21FB0
CMP             R0, #0
BEQ             loc_21EC0
BGE             loc_21FD4
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_21EC0
LDR             R0, =aListeningSocke ; "Listening socket error"
B               loc_21FAC

loc_21FD4
MOV             R6, #0xFFFFFFFF

loc_21FD8
ADD             R3, SP, #0x2AC+var_1F4
LDR             R0, [R3,R7,LSL#2]
CMP             R0, #0
BLT             loc_22024
MOV             R2, R0,ASR#5
ADD             R3, SP, #0x2AC+var_4
ADD             R2, R3, R2,LSL#2
AND             R3, R0, #0x1F
LDR             R2, [R2,#-0x100]
ANDS            R3, R2, R11,LSL R3
BEQ             loc_22024
BL              sub_185B8
ADD             R3, SP, #0x2AC+var_1F4
STR             R6, [R3,R7,LSL#2]
ADD             R3, SP, #0x2AC+s
LDR             R0, [R3,R7,LSL#2] ; ptr
BL              free
ADD             R3, SP, #0x2AC+s
STR             R9, [R3,R7,LSL#2]

loc_22024
ADD             R7, R7, #1
CMP             R7, #0x1E
BNE             loc_21FD8
MOV             R10, #0

loc_22034               ; fd
LDR             R0, [R5,R10,LSL#2]
ADD             R2, SP, #0x2AC+var_4
STR             R9, [SP,#0x2AC+var_284]
STR             R9, [SP,#0x2AC+var_280]
CMP             R0, #0
ADD             R3, R0, #0x1F
MOVGE           R3, R0
RSBS            R1, R0, #0
MOV             R3, R3,ASR#5
AND             R1, R1, #0x1F
STR             R9, [SP,#0x2AC+var_27C]
ADD             R3, R2, R3,LSL#2
AND             R2, R0, #0x1F
RSBPL           R2, R1, #0
LDR             R3, [R3,#-0x100]
ANDS            R3, R3, R11,LSL R2
BEQ             loc_22180
MOV             R3, #0x80
ADD             R2, SP, #0x2AC+var_4
STR             R3, [R2,#-0x274]! ; addr_len
ADD             R1, SP, #0x2AC+ptr ; addr
BL              accept
SUBS            R3, R0, #0
STR             R3, [SP,#0x2AC+var_2A0]
BLT             loc_22180
MOV             R3, #0
ADD             R1, SP, #0x2AC+var_284
MOV             R2, R3
ADD             R0, SP, #0x2AC+ptr
BL              sub_1D188
LDR             R3, [SP,#0x2AC+var_284]
MOV             R7, #0
MOV             R2, R7
MOV             R6, R7
STR             R3, [SP,#0x2AC+s1]
MOV             R3, R7

loc_220C4
ADD             R1, SP, #0x2AC+var_1F4
LDR             R1, [R1,R6,LSL#2]
CMP             R1, #0
MOVLT           R7, R6
BLT             loc_22108
ADD             R3, R3, #1
LDR             R0, [SP,#0x2AC+s1] ; s1
STR             R3, [SP,#0x2AC+var_298]
STR             R3, [SP,#0x2AC+var_290]
ADD             R3, SP, #0x2AC+s
LDR             R1, [R3,R6,LSL#2] ; s2
STR             R2, [SP,#0x2AC+var_294]
BL              strcmp
LDR             R2, [SP,#0x2AC+var_294]
CMP             R0, #0
LDR             R3, [SP,#0x2AC+var_298]
ADDEQ           R2, R2, #1

loc_22108
ADD             R6, R6, #1
CMP             R6, #0x1E
BNE             loc_220C4
CMP             R2, #4
CMPLS           R3, #0x1D
MOVHI           R6, #1
MOVLS           R6, #0
BHI             loc_22168
BL              sub_18158
ADD             R0, SP, #0x2AC+pipedes ; pipedes
BL              pipe
CMP             R0, #0
BLT             loc_22168
BL              fork
CMP             R0, #0
STR             R0, [SP,#0x2AC+var_27C]
BGE             loc_22190
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
LDR             R1, =aErrorForkingS ; "Error forking: %s"
MOV             R2, R0
MOV             R0, #4
BL              sub_184E8

loc_22168
LDR             R0, [SP,#0x2AC+var_2A0]
BL              sub_185B8
LDR             R0, [SP,#0x2AC+var_284] ; ptr
CMP             R0, #0
BEQ             loc_22180
BL              free

loc_22180
ADD             R10, R10, #1
CMP             R10, R4
BCC             loc_22034
B               loc_21EC0

loc_22190
MOV             R1, #4
ADD             R0, SP, #0x2AC+var_27C
BL              sub_1803C
LDR             R3, [SP,#0x2AC+var_27C]
CMP             R3, #0
BLE             loc_221D0
ADD             R3, SP, #0x2AC+var_4
LDR             R0, [SP,#0x2AC+pipedes+4]
ADD             R7, R3, R7,LSL#2
LDR             R3, [SP,#0x2AC+pipedes]
STR             R3, [R7,#-0x1F0]
BL              sub_185B8
LDR             R3, [SP,#0x2AC+var_284]
STR             R6, [SP,#0x2AC+var_284]
STR             R3, [R7,#-0x178]
B               loc_22168

loc_221D0
MOV             R3, R6
ADD             R2, SP, #0x2AC+var_280
MOV             R1, R6
ADD             R0, SP, #0x2AC+ptr
BL              sub_1D188
LDRD            R2, R3, [SP,#0x2AC+var_284]
MOV             R0, #6
LDR             R1, =aChildConnectio ; "Child connection from %s:%s"
BL              sub_184E8
LDR             R0, [SP,#0x2AC+var_284] ; ptr
BL              free
LDR             R0, [SP,#0x2AC+var_280] ; ptr
STR             R6, [SP,#0x2AC+var_284]
BL              free
STR             R6, [SP,#0x2AC+var_280]
BL              setsid
CMP             R0, #0
ADDGE           R5, SP, #0x2AC+var_26C
BGE             loc_22234
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R1, R0
LDR             R0, =aSetsidS ; "setsid: %s"
B               loc_21DCC

loc_22234
LDR             R0, [R5,R6,LSL#2]
ADD             R6, R6, #1
BL              sub_185B8
CMP             R6, R4
BCC             loc_22234
LDR             R0, [SP,#0x2AC+pipedes]
BL              sub_185B8
LDR             R1, [SP,#0x2AC+pipedes+4]
LDR             R0, [SP,#0x2AC+var_2A0]
BL              sub_22EC4
; End of function sub_21CCC

off_2225C DCD dword_4CB7C
off_22260 DCD aFailedListenin ; "Failed listening on '%s': %s"
off_22264 DCD aNoListeningPor ; "No listening ports available."
off_22268 DCD dword_4CA24
off_2226C DCD aFailedToDaemon ; "Failed to daemonize: %s"
off_22270 DCD aRunningInBackg ; "Running in background"
off_22274 DCD aNotBackgroundi ; "Not backgrounding"
off_22278 DCD aChannelRecvwin+0x26 ; "w"
off_2227C DCD aD        ; "%d\n"
off_22280 DCD byte_4CA40
off_22284 DCD aTerminatedBySi ; "Terminated by signal"
off_22288 DCD aListeningSocke ; "Listening socket error"
off_2228C DCD aErrorForkingS ; "Error forking: %s"
off_22290 DCD aChildConnectio ; "Child connection from %s:%s"
off_22294 DCD aSetsidS  ; "setsid: %s"


; Attributes: noreturn

; void __fastcall __noreturn sub_22298(unsigned int, const char **, void *, void *)
sub_22298

var_10= -0x10
var_C= -0xC
ptr= -8
var_4= -4

PUSH            {R0-R4,LR}
MOV             R5, R1
LDR             R3, =off_4C3EC
MOV             R4, R0
LDR             R2, =sub_22FDC
STR             R2, [R3] ; sub_183E4
LDR             R3, =off_4C3E8
LDR             R2, =sub_23100
STR             R2, [R3] ; sub_18430
BL              sub_18AA8
MOV             R1, R5
MOV             R0, R4
BL              sub_2257C
LDR             R3, =dword_4CB4C
LDR             R3, [R3,#(dword_4CBA8 - 0x4CB4C)]
CMP             R3, #0
BEQ             loc_22340
MOV             R4, #0
STR             R4, [SP,#0x10+var_4]
BL              sub_21B5C
ADD             R3, SP, #0x10+var_4
MOV             R2, R4  ; int
STR             R3, [SP,#0x10+var_10] ; int
MOV             R1, R4  ; int
ADD             R3, SP, #0x10+ptr ; int
MOV             R0, R4  ; fd
STR             R4, [SP,#0x10+var_C] ; int
BL              sub_1D25C
LDR             R1, =aChildConnectio ; "Child connection from %s:%s"
MOV             R0, #6
LDRD            R2, R3, [SP,#0x10+ptr]
BL              sub_184E8
LDR             R0, [SP,#0x10+ptr] ; ptr
BL              free
LDR             R0, [SP,#0x10+var_4] ; ptr
STR             R4, [SP,#0x10+ptr]
BL              free
STR             R4, [SP,#0x10+var_4]
BL              setsid
MOV             R1, #0xFFFFFFFF
MOV             R0, R4
BL              sub_22EC4

loc_22340
BL              sub_21CCC
; End of function sub_22298

off_22344 DCD off_4C3EC
off_22348 DCD sub_22FDC
off_2234C DCD off_4C3E8
off_22350 DCD sub_23100
off_22354 DCD dword_4CB4C
off_22358 DCD aChildConnectio ; "Child connection from %s:%s"



; int __fastcall sub_2235C(int result)
sub_2235C
LDR             R2, =off_4C2E0 ; "ecdsa-sha2-nistp256"
MOV             R3, #0
PUSH            {LR}
MOV             LR, #0x14

loc_2236C
MUL             R1, LR, R3
ADD             R12, R1, R2
LDR             R1, [R1,R2]
CMP             R1, #0
POPEQ           {PC}
LDRB            R1, [R12,#4]
CMP             R1, R0
BNE             loc_22398
MOV             R3, #0
STRB            R3, [R12,#0xC]
POP             {PC}

loc_22398
ADD             R3, R3, #1
B               loc_2236C
; End of function sub_2235C

off_223A0 DCD off_4C2E0 ; "ecdsa-sha2-nistp256"



; const char *__fastcall sub_223A4(const char *result, _DWORD *, _DWORD *, int)
sub_223A4
LDR             R12, [R2]
CMP             R12, #0
BEQ             loc_223C8
CMP             R3, #0
BXEQ            LR
MOV             R1, R0
PUSH            {R4,LR}
LDR             R0, =aOnlyOneSKeyCan ; "Only one %s key can be specified"
BL              sub_184AC

loc_223C8
LDR             R3, [R1]
STR             R3, [R2]
STR             R12, [R1]
BX              LR
; End of function sub_223A4

off_223D8 DCD aOnlyOneSKeyCan ; "Only one %s key can be specified"



; int __fastcall sub_223DC(const char *)
sub_223DC

var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC

PUSH            {LR}
MOV             R3, #0
SUB             SP, SP, #0x2C
LDR             R2, =(aSsh20Dropbear2+0x11) ; "2018.76"
STR             R3, [SP,#0x2C+var_C]
STR             R3, [SP,#0x2C+var_10]
MOV             R3, #0x6000
STR             R3, [SP,#0x2C+var_14]
LDR             R3, =aVarRunDropbear ; "/var/run/dropbear.pid"
LDR             R1, =aDropbearServer ; "Dropbear server v%s https://matt.ucc.as"...
STR             R3, [SP,#0x2C+var_18]
LDR             R3, =a22 ; "22"
STR             R3, [SP,#0x2C+var_1C]
MOV             R3, #0xA
STR             R3, [SP,#0x2C+var_20]
STR             R3, [SP,#0x2C+var_24]
LDR             R3, =aEtcDropbearDro ; "/etc/dropbear/dropbear_ecdsa_host_key"
STR             R3, [SP,#0x2C+var_28]
LDR             R3, =aEtcDropbearDro_0 ; "/etc/dropbear/dropbear_rsa_host_key"
STR             R3, [SP,#0x2C+var_2C]
MOV             R3, R0
LDR             R0, =stderr
LDR             R0, [R0] ; stream
BL              fprintf
ADD             SP, SP, #0x2C ; ','
POP             {PC}
; End of function sub_223DC

off_22444 DCD aSsh20Dropbear2+0x11 ; "2018.76"
off_22448 DCD aVarRunDropbear ; "/var/run/dropbear.pid"
off_2244C DCD aDropbearServer ; "Dropbear server v%s https://matt.ucc.as"...
off_22450 DCD a22       ; "22"
off_22454 DCD aEtcDropbearDro ; "/etc/dropbear/dropbear_ecdsa_host_key"
off_22458 DCD aEtcDropbearDro_0 ; "/etc/dropbear/dropbear_rsa_host_key"
off_2245C DCD stderr



; void __fastcall sub_22460(const char *, int)
sub_22460

var_4= -4
var_s0=  0

PUSH            {R0,R1,R4-R6,LR}
MOV             R6, R0
MOV             R5, R1
BL              sub_1E644
ADD             R2, SP, #8+var_s0
MOV             R3, #0x50 ; 'P'
MOV             R1, R0
MOV             R4, R0
STR             R3, [R2,#-4]!
MOV             R0, R6
BL              sub_155A0
CMN             R0, #1
BNE             loc_224B4
LDR             R3, =dword_4CB4C
LDR             R3, [R3,#(dword_4CBD4 - 0x4CB4C)]
CMP             R3, #0
BNE             loc_224B4
MOV             R2, R6
LDR             R1, =aFailedLoadingS ; "Failed loading %s"
MOV             R0, #4
BL              sub_184E8

loc_224B4
LDR             R3, [SP,#8+var_4]
CMP             R3, #0
BNE             loc_224DC
LDR             R3, =dword_4CB4C
ADD             R1, R4, #0xC
LDR             R0, =aRsa ; "RSA"
LDR             R2, [R3,#(dword_4CBD0 - 0x4CB4C)]
MOV             R3, R5
ADD             R2, R2, #0xC
BL              sub_223A4

loc_224DC
LDR             R3, [SP,#8+var_4]
CMP             R3, #1
BNE             loc_22504
LDR             R3, =dword_4CB4C
ADD             R1, R4, #0x10
LDR             R0, =aEcdsa256 ; "ECDSA256"
LDR             R2, [R3,#(dword_4CBD0 - 0x4CB4C)]
MOV             R3, R5
ADD             R2, R2, #0x10
BL              sub_223A4

loc_22504
LDR             R3, [SP,#8+var_4]
CMP             R3, #2
BNE             loc_2252C
LDR             R3, =dword_4CB4C
ADD             R1, R4, #0x14
LDR             R0, =aEcdsa384 ; "ECDSA384"
LDR             R2, [R3,#(dword_4CBD0 - 0x4CB4C)]
MOV             R3, R5
ADD             R2, R2, #0x14
BL              sub_223A4

loc_2252C
LDR             R3, [SP,#8+var_4]
CMP             R3, #3
BNE             loc_22554
LDR             R3, =dword_4CB4C
ADD             R1, R4, #0x18
LDR             R0, =aEcdsa521 ; "ECDSA521"
LDR             R2, [R3,#(dword_4CBD0 - 0x4CB4C)]
MOV             R3, R5
ADD             R2, R2, #0x18
BL              sub_223A4

loc_22554
MOV             R0, R4
BL              sub_1EA60
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_22460

off_22564 DCD dword_4CB4C
off_22568 DCD aFailedLoadingS ; "Failed loading %s"
off_2256C DCD aRsa      ; "RSA"
off_22570 DCD aEcdsa256 ; "ECDSA256"
off_22574 DCD aEcdsa384 ; "ECDSA384"
off_22578 DCD aEcdsa521 ; "ECDSA521"



; struct group *__fastcall sub_2257C(unsigned int, const char **)
sub_2257C

var_90= -0x90
var_8C= -0x8C
var_88= -0x88
nptr= -0x80
var_7C= -0x7C
var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_3C= -0x3C
var_4= -4

PUSH            {R4-R11,LR}
MOV             R3, #0xA
LDR             R7, =dword_4CB4C
MOV             R10, R1
MOV             R4, #0
SUB             SP, SP, #0x94
LDR             R9, =dword_4CA24
MOV             R8, #1
STR             R3, [R7,#(dword_4CBC4 - 0x4CB4C)]
MOV             R6, R7
LDR             R3, =aVarRunDropbear ; "/var/run/dropbear.pid"
STR             R0, [SP,#0x94+var_8C]
STR             R4, [SP,#0x94+nptr]
STR             R3, [R7,#(dword_4CBEC - 0x4CB4C)]
MOV             R3, #0x6000
STR             R4, [SP,#0x94+var_7C]
STR             R4, [SP,#0x94+var_78]
STR             R4, [SP,#0x94+var_74]
STR             R4, [SP,#0x94+var_70]
STR             R4, [R7]
STR             R4, [R7,#(dword_4CBE8 - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBF0 - 0x4CB4C)]
STR             R8, [R7,#(dword_4CB50 - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBAC - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBB0 - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBB4 - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBB8 - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBBC - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBC0 - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBA8 - 0x4CB4C)]
STR             R4, [R7,#(dword_4CB7C - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBD0 - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBD4 - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBCC - 0x4CB4C)]
STR             R4, [R7,#(dword_4CBC8 - 0x4CB4C)]
STR             R8, [R9,#(dword_4CA34 - 0x4CA24)]
STMIB           R9, {R3,R4}
STR             R4, [R9,#(dword_4CA30 - 0x4CA24)]
STR             R4, [R9]

loc_22618
LDR             R3, [SP,#0x94+var_8C]
CMP             R3, R8
BHI             loc_22678
LDR             R3, [R6,#(dword_4CB7C - 0x4CB4C)]
CMP             R3, #0
BNE             loc_22650
LDR             R0, =a22 ; "22"
BL              sub_1886C
STR             R0, [R6,#(dword_4CB54 - 0x4CB4C)]
LDR             R0, =(aSsh20Dropbear2_0+0x1A) ; ""
BL              sub_1886C
MOV             R3, #1
STR             R0, [R6,#(dword_4CB80 - 0x4CB4C)]
STR             R3, [R6,#(dword_4CB7C - 0x4CB4C)]

loc_22650
LDR             R0, [R6]
CMP             R0, #0
BEQ             loc_22AA8
ADD             R1, SP, #0x94+var_6C
BLX             sub_34FAC
CMP             R0, #0
BEQ             loc_22A60
LDR             R1, [R6]
LDR             R0, =aErrorOpeningBa ; "Error opening banner file '%s'"
B               loc_226F8

loc_22678
LDR             R1, [R10,R8,LSL#2]
MOV             R3, R8,LSL#2
STR             R3, [SP,#0x94+var_90]
LDRB            R3, [R1]
CMP             R3, #0x2D ; '-'
BNE             loc_226F4
LDRB            R3, [R1,#1]
CMP             R3, #0
BEQ             loc_226F4
LDR             R11, =dword_4CBEC
ADD             LR, R1, #1
MOV             R5, #0
MOV             R3, #1

loc_226AC
SUB             R12, LR, R1
LDRB            R2, [LR],#1
CMP             R4, #0
EOREQ           R0, R5, #1
MOVNE           R0, #0
CMP             R2, #0
BNE             loc_228F8
CMP             R0, #0
MOVNE           R4, R2
BNE             loc_229F8
LDR             R3, [SP,#0x94+var_90]
ADD             R8, R8, #1
ADD             R3, R10, R3
LDR             R3, [R3,#4]
CMP             R3, #0
BNE             loc_22950
LDR             R0, =aMissingArgumen ; "Missing argument"

loc_226F0
BL              sub_184AC

loc_226F4
LDR             R0, =aInvalidArgumen ; "Invalid argument: %s"

loc_226F8
BL              sub_184AC

loc_226FC
SUB             R0, R2, #0x42 ; 'B'
CMP             R0, #0x35 ; switch 54 cases
LDRLS           PC, [PC,R0,LSL#2] ; switch jump
B               def_22704 ; jumptable 00022704 default case, cases 1,2,6,8,10-13,15,17,19,22-30,35,36,42-45,47,50,52
jpt_22704 DCD loc_228AC, def_22704, def_22704, loc_22814 ; jump table for switch statement
DCD loc_22808, loc_22860, def_22704, loc_22884
DCD def_22704, loc_22878, def_22704, def_22704
DCD def_22704, def_22704, loc_2284C, def_22704
DCD loc_227FC, def_22704, loc_22890, def_22704
DCD loc_228C4, loc_2286C, def_22704, def_22704
DCD def_22704, def_22704, def_22704, def_22704
DCD def_22704, def_22704, def_22704, loc_22830
DCD loc_228EC, loc_227E4, loc_227F0, def_22704
DCD def_22704, loc_228A4, loc_228B4, loc_22838
DCD loc_22820, loc_22828, def_22704, def_22704
DCD def_22704, def_22704, loc_22840, def_22704
DCD loc_227F0, loc_2289C, def_22704, loc_22800
DCD def_22704, loc_22858

loc_227E4               ; jumptable 00022704 case 33
MOV             R5, #0
LDR             R4, =dword_4CBF0
B               loc_226AC

loc_227F0               ; jumptable 00022704 cases 34,48
MOV             R5, #0
ADD             R4, SP, #0x94+var_70
B               loc_226AC

loc_227FC               ; jumptable 00022704 case 16
STR             R3, [R6,#(dword_4CBD4 - 0x4CB4C)]

loc_22800               ; jumptable 00022704 case 51
MOV             R5, #0
B               loc_22844

loc_22808               ; jumptable 00022704 case 4
MOV             R2, #0
STR             R2, [R6,#(dword_4CB50 - 0x4CB4C)]
B               loc_22800 ; jumptable 00022704 case 51

loc_22814               ; jumptable 00022704 case 3
MOV             R2, #0
STR             R2, [R9,#(dword_4CA34 - 0x4CA24)]
B               loc_22800 ; jumptable 00022704 case 51

loc_22820               ; jumptable 00022704 case 40
STR             R3, [R6,#(dword_4CBCC - 0x4CB4C)]
B               loc_22800 ; jumptable 00022704 case 51

loc_22828               ; jumptable 00022704 case 41
STR             R3, [R6,#(dword_4CBC8 - 0x4CB4C)]
B               loc_22800 ; jumptable 00022704 case 51

loc_22830               ; jumptable 00022704 case 31
STR             R3, [R9]
B               loc_22800 ; jumptable 00022704 case 51

loc_22838               ; jumptable 00022704 case 39
STR             R3, [R6,#(dword_4CBA8 - 0x4CB4C)]
B               loc_22800 ; jumptable 00022704 case 51

loc_22840               ; jumptable 00022704 case 46
MOV             R5, #1

loc_22844
MOV             R4, #0
B               loc_226AC

loc_2284C               ; jumptable 00022704 case 14
MOV             R5, #0
MOV             R4, R11
B               loc_226AC

loc_22858               ; jumptable 00022704 case 53
STR             R3, [R6,#(dword_4CBAC - 0x4CB4C)]
B               loc_22800 ; jumptable 00022704 case 51

loc_22860               ; jumptable 00022704 case 5
MOV             R5, #0
LDR             R4, =dword_4CBB0
B               loc_226AC

loc_2286C               ; jumptable 00022704 case 21
MOV             R5, #0
ADD             R4, SP, #0x94+nptr
B               loc_226AC

loc_22878               ; jumptable 00022704 case 9
MOV             R5, #0
ADD             R4, SP, #0x94+var_7C
B               loc_226AC

loc_22884               ; jumptable 00022704 case 7
MOV             R5, #0
ADD             R4, SP, #0x94+var_78
B               loc_226AC

loc_22890               ; jumptable 00022704 case 18
MOV             R5, #0
ADD             R4, SP, #0x94+var_74
B               loc_226AC

loc_2289C               ; jumptable 00022704 case 49
STR             R3, [R6,#(dword_4CBB8 - 0x4CB4C)]
B               loc_22800 ; jumptable 00022704 case 51

loc_228A4               ; jumptable 00022704 case 37
STR             R3, [R6,#(dword_4CBBC - 0x4CB4C)]
B               loc_22800 ; jumptable 00022704 case 51

loc_228AC               ; jumptable 00022704 case 0
STR             R3, [R6,#(dword_4CBC0 - 0x4CB4C)]
B               loc_22800 ; jumptable 00022704 case 51

loc_228B4               ; jumptable 00022704 case 38
LDR             R0, [R10]
BL              sub_223DC

loc_228BC               ; status
MOV             R0, #0

loc_228C0
BL              exit

loc_228C4               ; jumptable 00022704 case 20
BL              sub_15740
B               loc_228BC

def_22704               ; jumptable 00022704 default case, cases 1,2,6,8,10-13,15,17,19,22-30,35,36,42-45,47,50,52
LDR             R3, =stderr
LDR             R1, =aInvalidOptionC ; "Invalid option -%c\n"
LDR             R0, [R3] ; stream
BL              fprintf
LDR             R0, [R10]
BL              sub_223DC
MOV             R0, #1
B               loc_228C0

loc_228EC               ; jumptable 00022704 case 32
MOV             R5, #0
MOV             R4, R7
B               loc_226AC

loc_228F8
CMP             R0, #0
BNE             loc_226FC

loc_22900
CMP             R5, #0
BEQ             loc_22A00
LDR             R3, [R6,#(dword_4CB7C - 0x4CB4C)]
CMP             R3, #9
BHI             loc_229F8
LDR             R0, [R10,R8,LSL#2]
ADD             R0, R0, R12
BL              sub_1886C
LDRB            R3, [R0]
MOV             R5, R0
CMP             R3, #0x5B ; '['
BNE             loc_22978
ADD             R11, R0, #1
MOV             R1, #0x5D ; ']' ; c
MOV             R0, R11 ; s
BL              strchr
SUBS            R3, R0, #0
BNE             loc_22958
LDR             R0, =aBadListenAddre ; "Bad listen address"
B               loc_226F0

loc_22950
MOV             R12, R0
B               loc_22900

loc_22958
MOV             R0, R3
MOV             R2, #0
STRB            R2, [R0],#1
LDRB            R3, [R3,#1]
CMP             R3, #0x3A ; ':'
BEQ             loc_22984
LDR             R0, =aMissingPort ; "Missing port"
B               loc_226F0

loc_22978
MOV             R11, R5
MOV             R1, #0x3A ; ':' ; c
BL              strrchr

loc_22984
CMP             R0, #0
LDREQ           R2, =(aSsh20Dropbear2_0+0x1A) ; ""
MOVNE           R3, #0
MOVNE           R2, R11
STRBNE          R3, [R0],#1
MOVNE           R11, R0
LDRB            R3, [R11]
CMP             R3, #0
LDREQ           R0, =aBadPort ; "Bad port"
BEQ             loc_226F0
LDR             R3, [R6,#(dword_4CB7C - 0x4CB4C)]
MOV             R0, R11
STR             R2, [SP,#0x94+var_88]
STR             R3, [SP,#0x94+var_90]
BL              sub_1886C
LDR             R3, [SP,#0x94+var_90]
LDR             R2, [SP,#0x94+var_88]
LDR             R11, [R6,#(dword_4CB7C - 0x4CB4C)]
ADD             R3, R3, #2
STR             R0, [R6,R3,LSL#2]
MOV             R0, R2
BL              sub_1886C
LDR             R3, [R6,#(dword_4CB7C - 0x4CB4C)]
ADD             R11, R6, R11,LSL#2
STR             R0, [R11,#0x34]
MOV             R0, R5  ; ptr
ADD             R3, R3, #1
STR             R3, [R6,#(dword_4CB7C - 0x4CB4C)]
BL              free

loc_229F8
ADD             R8, R8, #1
B               loc_22618

loc_22A00
CMP             R4, #0
BEQ             loc_229F8
LDR             R0, [R10,R8,LSL#2]
ADD             R12, R0, R12
CMP             R12, #0
STR             R12, [R4]
LDREQ           R0, =aInvalidNullArg ; "Invalid null argument"
BEQ             loc_226F0
LDR             R0, [SP,#0x94+var_70]
CMP             R0, #0
BEQ             loc_22A58
LDR             R4, [R6,#(dword_4CBE4 - 0x4CB4C)]
CMP             R4, #2
LDRGT           R0, =aTooManyHostkey ; "Too many hostkeys"
BGT             loc_226F0
BL              sub_1886C
LDR             R3, [R6,#(dword_4CBE4 - 0x4CB4C)]
ADD             R4, R6, R4,LSL#2
STR             R5, [SP,#0x94+var_70]
STR             R0, [R4,#0x8C]
ADD             R3, R3, #1
STR             R3, [R6,#(dword_4CBE4 - 0x4CB4C)]

loc_22A58
MOV             R4, R5
B               loc_229F8

loc_22A60
LDRD            R0, R1, [SP,#0x94+var_3C]
MOV             R2, #0x7D0
MOV             R3, #0
CMP             R2, R0
SBCS            R3, R3, R1
MOVLT           R1, #0x7D0
LDRLT           R0, =aBannerFileTooL ; "Banner file too large, max is %d bytes"
BLT             loc_226F8
BL              sub_12344
LDR             R1, [R6]
STR             R0, [R6,#(dword_4CBE8 - 0x4CB4C)]
BL              sub_1867C
SUBS            R1, R0, #0
LDRNE           R1, [R6]
LDRNE           R0, =aErrorReadingBa ; "Error reading banner file '%s'"
BNE             loc_226F8
LDR             R0, [R6,#(dword_4CBE8 - 0x4CB4C)]
BL              sub_124A0

loc_22AA8               ; name
LDR             R0, [R6,#(dword_4CBB0 - 0x4CB4C)]
CMP             R0, #0
BEQ             loc_22AD0
BL              getgrnam
CMP             R0, #0
LDRNE           R3, [R0,#8]
LDREQ           R1, [R6,#(dword_4CBB0 - 0x4CB4C)]
LDREQ           R0, =aCannotRestrict ; "Cannot restrict logins to group '%s' as"...
STRNE           R3, [R6,#(dword_4CBB4 - 0x4CB4C)]
BEQ             loc_226F8

loc_22AD0
LDR             R4, [SP,#0x94+nptr]
CMP             R4, #0
BEQ             loc_22AFC
MOV             R0, R4  ; nptr
BL              atol
STR             R0, [R9,#(dword_4CA28 - 0x4CA24)]
SUB             R0, R0, #1
CMP             R0, #0x100000
MOVCS           R1, R4
LDRCS           R0, =aBadRecvWindowS ; "Bad recv window '%s'"
BCS             loc_226F8

loc_22AFC
LDR             R4, [SP,#0x94+var_74]
CMP             R4, #0
BEQ             loc_22B40
ADD             R1, SP, #0x94+var_4
MOV             R3, #0
STR             R3, [R1,#-0x68]!
MOV             R0, R4
BL              sub_18AD0
CMN             R0, #1
BEQ             loc_22B34
LDR             R3, [SP,#0x94+var_6C]
CMP             R3, #0
STRNE           R3, [R6,#(dword_4CBC4 - 0x4CB4C)]
BNE             loc_22B40

loc_22B34
MOV             R1, R4
LDR             R0, =aBadMaxauthtrie ; "Bad maxauthtries '%s'"
B               loc_226F8

loc_22B40
LDR             R4, [SP,#0x94+var_7C]
CMP             R4, #0
BEQ             loc_22B70
ADD             R1, SP, #0x94+var_6C
MOV             R0, R4
BL              sub_18AD0
CMN             R0, #1
MOVEQ           R1, R4
LDREQ           R0, =aBadKeepaliveS ; "Bad keepalive '%s'"
BEQ             loc_226F8
LDR             R3, [SP,#0x94+var_6C]
STR             R3, [R9,#(dword_4CA2C - 0x4CA24)]

loc_22B70
LDR             R4, [SP,#0x94+var_78]
CMP             R4, #0
BEQ             loc_22BA0
ADD             R1, SP, #0x94+var_6C
MOV             R0, R4
BL              sub_18AD0
CMN             R0, #1
MOVEQ           R1, R4
LDREQ           R0, =aBadIdleTimeout ; "Bad idle_timeout '%s'"
BEQ             loc_226F8
LDR             R3, [SP,#0x94+var_6C]
STR             R3, [R9,#(dword_4CA30 - 0x4CA24)]

loc_22BA0
LDR             R2, [R6,#(dword_4CBF0 - 0x4CB4C)]
CMP             R2, #0
BEQ             loc_22BB8
LDR             R1, =aForcedCommandS_0 ; "Forced command set to '%s'"
MOV             R0, #6
BL              sub_184E8

loc_22BB8
ADD             SP, SP, #0x94
POP             {R4-R11,PC}
; End of function sub_2257C

off_22BC0 DCD dword_4CB4C
off_22BC4 DCD dword_4CA24
off_22BC8 DCD aVarRunDropbear ; "/var/run/dropbear.pid"
off_22BCC DCD a22       ; "22"
off_22BD0 DCD aSsh20Dropbear2_0+0x1A ; ""
off_22BD4 DCD aErrorOpeningBa ; "Error opening banner file '%s'"
off_22BD8 DCD dword_4CBEC
off_22BDC DCD aMissingArgumen ; "Missing argument"
off_22BE0 DCD aInvalidArgumen ; "Invalid argument: %s"
off_22BE4 DCD dword_4CBF0
off_22BE8 DCD dword_4CBB0
off_22BEC DCD stderr
off_22BF0 DCD aInvalidOptionC ; "Invalid option -%c\n"
off_22BF4 DCD aBadListenAddre ; "Bad listen address"
off_22BF8 DCD aMissingPort ; "Missing port"
off_22BFC DCD aBadPort  ; "Bad port"
off_22C00 DCD aInvalidNullArg ; "Invalid null argument"
off_22C04 DCD aTooManyHostkey ; "Too many hostkeys"
off_22C08 DCD aBannerFileTooL ; "Banner file too large, max is %d bytes"
off_22C0C DCD aErrorReadingBa ; "Error reading banner file '%s'"
off_22C10 DCD aCannotRestrict ; "Cannot restrict logins to group '%s' as"...
off_22C14 DCD aBadRecvWindowS ; "Bad recv window '%s'"
off_22C18 DCD aBadMaxauthtrie ; "Bad maxauthtries '%s'"
off_22C1C DCD aBadKeepaliveS ; "Bad keepalive '%s'"
off_22C20 DCD aBadIdleTimeout ; "Bad idle_timeout '%s'"
off_22C24 DCD aForcedCommandS_0 ; "Forced command set to '%s'"



; void sub_22C28()
sub_22C28
PUSH            {R4-R6,LR}
MOV             R6, #0
LDR             R4, =dword_4CB4C
BL              sub_1E644
STR             R0, [R4,#(dword_4CBD0 - 0x4CB4C)]

loc_22C3C
LDR             R5, [R4,#(dword_4CBE4 - 0x4CB4C)]
CMP             R5, R6
BGT             loc_22D20
CMP             R5, #0
BNE             loc_22C68
MOV             R1, R5
LDR             R0, =aEtcDropbearDro_0 ; "/etc/dropbear/dropbear_rsa_host_key"
BL              sub_22460
MOV             R1, R5
LDR             R0, =aEtcDropbearDro ; "/etc/dropbear/dropbear_ecdsa_host_key"
BL              sub_22460

loc_22C68
LDR             R5, [R4,#(dword_4CBD4 - 0x4CB4C)]
CMP             R5, #0
BNE             loc_22D44
LDR             R3, [R4,#(dword_4CBD0 - 0x4CB4C)]
LDR             R3, [R3,#0xC]
CMP             R3, #0
BNE             loc_22D44
MOV             R0, R5
BL              sub_2235C

loc_22C8C
LDR             R3, [R4,#(dword_4CBD0 - 0x4CB4C)]
LDR             R1, [R3,#0x10]
CMP             R1, #0
BNE             loc_22D4C
LDR             R2, [R3,#0x14]
CMP             R2, #0
BNE             loc_22D4C
LDR             R3, [R3,#0x18]
MOVS            R3, R3
MOVNE           R3, #1

loc_22CB4
LDR             R2, [R4,#(dword_4CBD4 - 0x4CB4C)]
CMP             R1, #0
ORR             R5, R2, R5
ORR             R5, R3, R5
BNE             loc_22CE0
CMP             R2, #0
MOVEQ           R3, #1
CMP             R3, #0
BEQ             loc_22CE0
MOV             R0, #1
BL              sub_2235C

loc_22CE0
LDR             R3, [R4,#(dword_4CBD0 - 0x4CB4C)]
LDR             R3, [R3,#0x14]
CMP             R3, #0
BNE             loc_22CF8
MOV             R0, #2
BL              sub_2235C

loc_22CF8
LDR             R3, [R4,#(dword_4CBD0 - 0x4CB4C)]
LDR             R3, [R3,#0x18]
CMP             R3, #0
BNE             loc_22D10
MOV             R0, #3
BL              sub_2235C

loc_22D10
CMP             R5, #0
POPNE           {R4-R6,PC}
LDR             R0, =aNoHostkeysAvai ; "No hostkeys available. 'dropbear -R' ma"...
BL              sub_184AC

loc_22D20
ADD             R3, R4, R6,LSL#2
MOV             R1, #1
ADD             R6, R6, #1
LDR             R5, [R3,#0x8C]
MOV             R0, R5
BL              sub_22460
MOV             R0, R5  ; ptr
BL              free
B               loc_22C3C

loc_22D44
MOV             R5, #1
B               loc_22C8C

loc_22D4C
MOV             R3, #1
B               loc_22CB4
; End of function sub_22C28

off_22D54 DCD dword_4CB4C
off_22D58 DCD aEtcDropbearDro_0 ; "/etc/dropbear/dropbear_rsa_host_key"
off_22D5C DCD aEtcDropbearDro ; "/etc/dropbear/dropbear_ecdsa_host_key"
off_22D60 DCD aNoHostkeysAvai ; "No hostkeys available. 'dropbear -R' ma"...



; _DWORD *__fastcall sub_22D64(const void *, unsigned int)
sub_22D64
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, =byte_4CA40
MOV             R6, R1
MOV             R1, #6
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
MOV             R2, R6
MOV             R1, R5
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
POP             {R4-R6,LR}
B               sub_1D894
; End of function sub_22D64

off_22D98 DCD byte_4CA40



; void __fastcall sub_22D9C(int, size_t)
sub_22D9C

n= -4

PUSH            {R0,R1,R4-R6,LR}
ADD             R1, SP, #8+n
LDR             R6, =byte_4CA40
LDR             R0, [R6,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
LDR             R5, [SP,#8+n]
MOV             R4, R0
CMP             R5, #0xC
BNE             loc_22DF4
MOV             R1, R0  ; s2
MOV             R2, R5  ; n
LDR             R0, =s1 ; "ssh-userauth"
BL              strncmp
CMP             R0, #0
BNE             loc_22E28

loc_22DD8
MOV             R1, R5
MOV             R0, R4
BL              sub_22D64
MOV             R0, R4  ; ptr
BL              free
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_22DF4
CMP             R5, #0xE
BNE             loc_22E28
MOV             R1, R0  ; s2
MOV             R2, R5  ; n
LDR             R0, =aSshConnection ; "ssh-connection"
BL              strncmp
CMP             R0, #0
BNE             loc_22E28
LDR             R3, [R6,#(dword_4CAFC - 0x4CA40)]
CMP             R3, #1
LDRNE           R0, =aRequestForConn ; "Request for connection before auth"
BEQ             loc_22DD8

loc_22E24
BL              sub_184AC

loc_22E28               ; ptr
MOV             R0, R4
BL              free
LDR             R0, =aUnrecognisedSs ; "Unrecognised SSH_MSG_SERVICE_REQUEST"
B               loc_22E24
; End of function sub_22D9C

off_22E38 DCD byte_4CA40
off_22E3C DCD s1        ; "ssh-userauth"
off_22E40 DCD aSshConnection ; "ssh-connection"
off_22E44 DCD aRequestForConn ; "Request for connection before auth"
off_22E48 DCD aUnrecognisedSs ; "Unrecognised SSH_MSG_SERVICE_REQUEST"



; void sub_22E4C()
sub_22E4C
PUSH            {R4-R6,LR}
MOV             R5, #0
LDR             R4, =dword_4CBF4
BL              sub_205BC
LDR             R0, [R4,#(dword_4CC10 - 0x4CBF4)] ; ptr
BL              free
LDR             R0, [R4,#(dword_4CC14 - 0x4CBF4)] ; ptr
STR             R5, [R4,#(dword_4CC10 - 0x4CBF4)]
BL              free
LDR             R0, [R4,#(dword_4CBF8 - 0x4CBF4)] ; ptr
STR             R5, [R4,#(dword_4CC14 - 0x4CBF4)]
BL              free
STR             R5, [R4,#(dword_4CBF8 - 0x4CBF4)]
STR             R5, [R4,#(dword_4CBFC - 0x4CBF4)]
POP             {R4-R6,PC}
; End of function sub_22E4C

off_22E88 DCD dword_4CBF4


; Attributes: noreturn

; void __noreturn sub_22E8C()
sub_22E8C
PUSH            {R4,LR}
LDR             R4, =byte_4CA40
LDR             R0, [R4,#(dword_4CA48 - 0x4CA40)]
BL              sub_185B8
LDR             R0, [R4,#(dword_4CA4C - 0x4CA40)]
BL              sub_185B8
MOV             R3, #0xFFFFFFFF
LDR             R0, =aExitedNormally ; "Exited normally"
STR             R3, [R4,#(dword_4CA48 - 0x4CA40)]
STR             R3, [R4,#(dword_4CA4C - 0x4CA40)]
POP             {R4,LR}
B               sub_18484
; End of function sub_22E8C

off_22EBC DCD byte_4CA40
off_22EC0 DCD aExitedNormally ; "Exited normally"


; Attributes: noreturn

; void __fastcall __noreturn sub_22EC4(__int64, char *, char *)
sub_22EC4

var_10= -0x10
var_C= -0xC
s= -8
var_4= -4

PUSH            {R0-R3,R7,LR}
MOV             R4, R1
LDR             R7, =dword_4CBF4
MOV             R1, R0
MOV             R5, #0
BL              sub_16214
STR             R4, [R7]
LDR             R4, =byte_4CA40
BL              sub_1F5A0
LDR             R0, =off_4C434
BL              sub_13C4C
BL              sub_20D50
ADD             R3, SP, #0x10+var_4
MOV             R2, R5  ; int
MOV             R1, R5  ; int
STR             R3, [SP,#0x10+var_10] ; int
STR             R5, [SP,#0x10+var_C] ; int
ADD             R3, SP, #0x10+s ; int
LDR             R0, [R4,#(dword_4CA48 - 0x4CA40)] ; fd
BL              sub_1D25C
LDR             R0, [SP,#0x10+s] ; s
BL              strlen
MOV             R6, R0
LDR             R0, [SP,#0x10+var_4] ; s
BL              strlen
ADD             R6, R6, R0
ADD             R6, R6, #2
MOV             R0, R6
BL              sub_18718
LDR             R3, [SP,#0x10+var_4]
MOV             R1, R6  ; maxlen
LDR             R2, =(aChildConnectio+0x16) ; format
MOV             R6, #1
STR             R0, [R7,#(dword_4CC10 - 0x4CBF4)]
STR             R3, [SP,#0x10+var_10] ; int
LDR             R3, [SP,#0x10+s]
BL              snprintf
LDR             R0, [SP,#0x10+s] ; ptr
BL              free
LDR             R0, [SP,#0x10+var_4] ; ptr
STR             R5, [SP,#0x10+s]
BL              free
MOV             R2, R5  ; int
MOV             R1, R5  ; int
STMEA           SP, {R5,R6}
ADD             R3, R7, #0x20 ; ' ' ; int
LDR             R0, [R4,#(dword_4CA48 - 0x4CA40)] ; fd
STR             R5, [SP,#0x10+var_4]
BL              sub_1D25C
LDR             R3, =sub_22E8C
STRB            R6, [R4]
STR             R6, [R4,#(dword_4CB48 - 0x4CA40)]
STR             R3, [R4,#(off_4CAE4 - 0x4CA40)]
LDR             R3, =sub_22E4C
STR             R3, [R4,#(off_4CAE8 - 0x4CA40)]
LDR             R3, =asc_37F68 ; "^"
STR             R3, [R4,#(dword_4CA80 - 0x4CA40)]
BL              sub_16030
BL              sub_14D80
BL              sub_14BDC
LDR             R0, =sub_20C8C
BL              sub_15940
; End of function sub_22EC4

off_22FBC DCD dword_4CBF4
off_22FC0 DCD byte_4CA40
off_22FC4 DCD off_4C434
off_22FC8 DCD aChildConnectio+0x16 ; "%s:%s"
off_22FCC DCD sub_22E8C
off_22FD0 DCD sub_22E4C
off_22FD4 DCD asc_37F68 ; "^"
off_22FD8 DCD sub_20C8C


; Attributes: noreturn

; void __fastcall __noreturn sub_22FDC(int, char *format, __gnuc_va_list arg)
sub_22FDC

var_1D0= -0x1D0
var_1CC= -0x1CC
s= -0x1C4
var_12C= -0x12C

PUSH            {R7,LR}
SUB             SP, SP, #0x1D0
ADD             R4, SP, #0x1D0+s
MOV             R3, R2  ; arg
MOV             R6, R0
MOV             R2, R1  ; format
MOV             R0, R4  ; s
MOV             R1, #0x96 ; maxlen
BL              vsnprintf
LDR             R2, =byte_4CA40
LDR             R3, [R2,#(dword_4CB48 - 0x4CA40)]
CMP             R3, #0
MOVEQ           R3, R4
LDREQ           R2, =aEarlyExitS ; "Early exit: %s"
BEQ             loc_230D0
LDR             R1, [R2,#(dword_4CAFC - 0x4CA40)]
LDR             R3, [R2,#(dword_4CB18 - 0x4CA40)]
CMP             R1, #0
BEQ             loc_230A0
STR             R4, [SP,#0x1D0+var_1D0]
MOV             R1, #0x12C ; maxlen
LDR             R2, =aExitSS ; "Exit (%s): %s"
ADD             R0, SP, #0x1D0+var_12C ; s
BL              snprintf

loc_2303C
LDR             R4, =dword_4CB4C
MOV             R0, #6
ADD             R2, SP, #0x1D0+var_12C
LDR             R1, =(aErrorClosingFd+0x15) ; "%s"
BL              sub_184E8
BL              sub_15EF8
LDR             R0, [R4,#(dword_4CBD0 - 0x4CB4C)]
CMP             R0, #0
BEQ             loc_2306C
BL              sub_1EA60
MOV             R3, #0
STR             R3, [R4,#(dword_4CBD0 - 0x4CB4C)]

loc_2306C
LDR             R4, =dword_4CB50
MOV             R5, #0
ADD             R7, R4, #0x28 ; '('

loc_23078               ; ptr
LDR             R0, [R4,#0x30]
BL              free
STR             R5, [R4,#0x30]
LDR             R0, [R4,#4]! ; ptr
BL              free
CMP             R4, R7
STR             R5, [R4]
BNE             loc_23078
MOV             R0, R6  ; status
BL              exit

loc_230A0
CMP             R3, #0
BEQ             loc_230C8
STR             R4, [SP,#0x1D0+var_1CC]
MOV             R1, #0x12C ; maxlen
LDR             R2, [R2,#(dword_4CAF8 - 0x4CA40)]
ADD             R0, SP, #0x1D0+var_12C ; s
STR             R2, [SP,#0x1D0+var_1D0]
LDR             R2, =aExitBeforeAuth ; "Exit before auth (user '%s', %u fails):"...
BL              snprintf
B               loc_2303C

loc_230C8
LDR             R2, =aExitBeforeAuth_0 ; "Exit before auth: %s"
MOV             R3, R4

loc_230D0               ; maxlen
MOV             R1, #0x12C
ADD             R0, SP, #0x1D0+var_12C ; s
BL              snprintf
B               loc_2303C
; End of function sub_22FDC

off_230E0 DCD byte_4CA40
off_230E4 DCD aEarlyExitS ; "Early exit: %s"
off_230E8 DCD aExitSS   ; "Exit (%s): %s"
off_230EC DCD dword_4CB4C
off_230F0 DCD aErrorClosingFd+0x15 ; "%s"
off_230F4 DCD dword_4CB50
off_230F8 DCD aExitBeforeAuth ; "Exit before auth (user '%s', %u fails):"...
off_230FC DCD aExitBeforeAuth_0 ; "Exit before auth: %s"



; int __fastcall sub_23100(int, char *format, __gnuc_va_list arg)
sub_23100

var_420= -0x420
timer= -0x418
var_414= -0x414
s= -0x400

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x420
ADD             R5, SP, #0x420+s
MOV             R3, R2  ; arg
MOV             R6, R0
MOV             R2, R1  ; format
MOV             R0, R5  ; s
MOV             R1, #0x400 ; maxlen
BL              vsnprintf
LDR             R3, =dword_4CA24
LDR             R2, [R3,#(dword_4CA34 - 0x4CA24)]
MOV             R4, R3
CMP             R2, #0
BEQ             loc_23148
MOV             R2, R5
LDR             R1, =(aErrorClosingFd+0x15) ; fmt
MOV             R0, R6  ; pri
BL              syslog

loc_23148               ; timer
LDR             R0, [R4,#(dword_4CA34 - 0x4CA24)]
CMP             R0, #0
BNE             loc_231A4
BL              time
STR             R0, [SP,#0x420+timer]
ADD             R0, SP, #0x420+timer ; timer
BL              localtime
SUBS            R3, R0, #0 ; tp
BNE             loc_231AC

loc_2316C
LDR             R3, [SP,#0x420+timer]
MOV             R1, #0x14 ; maxlen
LDR             R2, =(aUnexpectedPack+0x24) ; format
ADD             R0, SP, #0x420+var_414 ; s
BL              snprintf

loc_23180
LDR             R3, =stderr
LDR             R4, [R3]
BL              getpid
STR             R5, [SP,#0x420+var_420]
MOV             R2, R0
ADD             R3, SP, #0x420+var_414
LDR             R1, =aDSS ; "[%d] %s %s\n"
MOV             R0, R4  ; stream
BL              fprintf

loc_231A4
ADD             SP, SP, #0x420
POP             {R4-R6,PC}

loc_231AC
LDR             R2, =aBDHMS ; "%b %d %H:%M:%S"
MOV             R1, #0x14 ; maxsize
ADD             R0, SP, #0x420+var_414 ; s
BL              strftime
CMP             R0, #0
BEQ             loc_2316C
B               loc_23180
; End of function sub_23100

off_231C8 DCD dword_4CA24
off_231CC DCD aErrorClosingFd+0x15 ; "%s"
off_231D0 DCD aUnexpectedPack+0x24 ; "%d"
off_231D4 DCD stderr
off_231D8 DCD aDSS      ; "[%d] %s %s\n"
off_231DC DCD aBDHMS    ; "%b %d %H:%M:%S"



; bool __fastcall sub_231E0(int, int)
sub_231E0
LDR             R2, [R0,#0xC]
LDR             R3, [R1,#0xC]
CMP             R2, R3
BNE             loc_2321C
LDR             R2, [R0,#0x14]
LDR             R3, [R1,#0x14]
CMP             R2, R3
BNE             loc_2321C
PUSH            {R4,LR}
LDR             R1, [R1,#8] ; s2
LDR             R0, [R0,#8] ; s1
BL              strcmp
CLZ             R0, R0
MOV             R0, R0,LSR#5
POP             {R4,PC}

loc_2321C
MOV             R0, #0
BX              LR
; End of function sub_231E0




; int __fastcall sub_23224(struct addrinfo *)
sub_23224

var_30= -0x30
var_2C= -0x2C
var_24= -0x24
s= -0x20

LDR             R3, =dword_4CB4C
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x30
LDR             R4, [R3,#(dword_4CBCC - 0x4CB4C)]
CMP             R4, #0
BEQ             loc_23264

loc_2323C
MOV             R4, #0
MOV             R5, #1
MOV             R7, R4

loc_23248               ; ptr
MOV             R0, R7
BL              free
MOV             R0, R4  ; ptr
BL              free
MOV             R0, R5
ADD             SP, SP, #0x30 ; '0'
POP             {R4-R8,PC}

loc_23264
MOV             R8, R0
BL              sub_204E8
CMP             R0, #0
BEQ             loc_2323C
LDR             R5, =byte_4CA40
ADD             R1, SP, #0x30+var_24
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
LDR             R3, [SP,#0x30+var_24]
MOV             R7, R0
CMP             R3, #0xFE
BHI             loc_2331C
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
ADD             R1, SP, #0x30+var_24
MOV             R6, R0
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
LDR             R3, [SP,#0x30+var_24]
MOV             R4, R0
CMP             R3, #0xFE
BHI             loc_2331C
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
CMP             R6, #0x10000
CMPCC           R0, #0x10000
MOVCS           R5, #1
MOVCC           R5, #0
BCS             loc_2331C
MOV             R3, R6
LDR             R2, =(aBadPacketSizeU+0x10) ; format
MOV             R1, #0x20 ; ' ' ; maxlen
ADD             R0, SP, #0x30+s ; s
BL              snprintf
STR             R5, [SP,#0x30+var_2C]
MOV             R3, R8
STR             R5, [SP,#0x30+var_30]
ADD             R1, SP, #0x30+s
LDR             R2, =sub_13E28
MOV             R0, R7
BL              sub_1C6E4
MOV             R3, #1
STR             R0, [R8,#0x48]
STR             R3, [R8,#0x60]
MOV             R5, #0x63 ; 'c'
B               loc_23248

loc_2331C
MOV             R5, #1
B               loc_23248
; End of function sub_23224

off_23324 DCD dword_4CB4C
off_23328 DCD byte_4CA40
off_2332C DCD aBadPacketSizeU+0x10 ; "%u"
off_23330 DCD sub_13E28



; void sub_23334()
sub_23334

var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14

LDR             R3, =dword_4CB4C
PUSH            {R4-R9,LR}
SUB             SP, SP, #0x2C
LDR             R3, [R3,#(dword_4CBC8 - 0x4CB4C)]
CMP             R3, #0
BEQ             loc_23360

loc_2334C
MOV             R6, #0

loc_23350               ; ptr
MOV             R0, R6
BL              free
ADD             SP, SP, #0x2C ; ','
POP             {R4-R9,PC}

loc_23360
BL              sub_204E8
CMP             R0, #0
BEQ             loc_2334C
LDR             R4, =byte_4CA40
ADD             R1, SP, #0x2C+var_28
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
MOV             R5, R4
BL              sub_12690
MOV             R6, R0
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12590
LDR             R3, [SP,#0x2C+var_28]
MOV             R9, R0
CMP             R3, #0x40 ; '@'
BHI             loc_234E0
MOV             R1, R6  ; s2
LDR             R0, =(aCancelTcpipFor+7) ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_234F0
ADD             R1, SP, #0x2C+var_20
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
LDR             R3, [SP,#0x2C+var_20]
MOV             R7, R0
CMP             R3, #0xF
BLS             loc_233E4

loc_233CC
MOV             R4, #0

loc_233D0               ; ptr
MOV             R0, R7
BL              free
MOV             R0, R4  ; ptr
BL              free
B               loc_234E0

loc_233E4
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
SUBS            R8, R0, #0
BEQ             loc_23424
SUB             R2, R8, #1
MOVW            R3, #0xFFFE
CMP             R2, R3
BHI             loc_233CC
LDR             R2, [R4,#(dword_4CB40 - 0x4CA40)]
CMP             R8, #0x400
MOVCS           R3, #0
MOVCC           R3, #1
CMP             R2, #0
MOVNE           R3, #0
CMP             R3, #0
BNE             loc_233CC

loc_23424
MOV             R0, #0x1C
BL              sub_18718
MOV             R3, #0
MOV             R4, R0
STR             R3, [R0]
STR             R3, [R0,#4]
LDR             R3, =unk_38088
STR             R8, [R0,#0xC]
STR             R7, [R0,#0x10]
STR             R3, [R0,#0x14]
MOV             R3, #1
STR             R3, [R0,#0x18]
LDR             R3, =dword_4CA24
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_23478
LDR             R1, =aLocalhost ; "localhost"
MOV             R0, R7  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_234C8

loc_23478
MOV             R3, #0
STR             R3, [R4,#8]

loc_23480
MOV             R0, R4
BL              sub_23B3C
CMP             R0, #0
BNE             loc_234D8
LDR             R3, [R5,#(dword_4CB38 - 0x4CA40)]
LDR             R3, [R3]
LDR             R0, [R3]
BL              sub_1CE04
MOV             R1, #0x51 ; 'Q'
MOV             R7, R0
STR             R0, [R4,#0xC]
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_125A4
MOV             R1, R7
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
BL              sub_1D894
B               loc_23350

loc_234C8
MOV             R0, R7
BL              sub_1886C
STR             R0, [R4,#8]
B               loc_23480

loc_234D8
CMN             R0, #1
BEQ             loc_233D0

loc_234E0
CMP             R9, #0
BEQ             loc_23350

loc_234E8
BL              sub_1457C
B               loc_23350

loc_234F0               ; s2
MOV             R1, R6
LDR             R0, =aCancelTcpipFor ; "cancel-tcpip-forward"
BL              strcmp
SUBS            R5, R0, #0
BNE             loc_234E0
ADD             R1, SP, #0x2C+var_24
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
LDR             R3, [SP,#0x2C+var_24]
MOV             R7, R0
CMP             R3, #0xF
BLS             loc_23544

loc_23520
MOV             R5, #0xFFFFFFFF

loc_23524               ; ptr
MOV             R0, R7
BL              free
CMP             R9, #0
BEQ             loc_23350
CMP             R5, #0
BNE             loc_234E8
BL              sub_1455C
B               loc_23350

loc_23544
LDR             R0, [R4,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
LDR             R2, =sub_231E0
ADD             R1, SP, #0x2C+var_20
STR             R0, [SP,#0x2C+var_14]
LDR             R0, =0x43612C67
STR             R5, [SP,#0x2C+var_20]
STR             R5, [SP,#0x2C+var_1C]
STR             R7, [SP,#0x2C+var_18]
BL              sub_1C088
CMP             R0, #0
BEQ             loc_23520
BL              sub_1C0F0
B               loc_23524
; End of function sub_23334

off_2357C DCD dword_4CB4C
off_23580 DCD byte_4CA40
off_23584 DCD aCancelTcpipFor+7 ; "tcpip-forward"
off_23588 DCD unk_38088
off_2358C DCD dword_4CA24
off_23590 DCD aLocalhost ; "localhost"
off_23594 DCD aCancelTcpipFor ; "cancel-tcpip-forward"
off_23598 DCD sub_231E0
dword_2359C DCD 0x43612C67



; int __fastcall sub_235A0(int)
sub_235A0
MOV             R3, #0
STR             R3, [R0,#0x60]
MOV             R0, R3
BX              LR
; End of function sub_235A0




; int __fastcall sub_235B0(int)
sub_235B0
PUSH            {R4-R6,LR}
SUB             R5, R0, #1

loc_235B8
LDRB            R4, [R5,#1]!
CMP             R4, #0
BNE             loc_235CC
MOV             R0, R4
POP             {R4-R6,PC}

loc_235CC
BL              __ctype_b_loc
LDR             R2, [R0]
MOV             R3, R4,LSL#1
CMP             R4, #0x3A ; ':'
CMPNE           R4, #0x5F ; '_'
MOVNE           R0, #1
MOVEQ           R0, #0
LDRH            R3, [R2,R3]
SUB             R4, R4, #0x2D ; '-'
CMP             R4, #2
MOVLS           R4, #0
ANDHI           R4, R0, #1
EOR             R3, R3, #8
ANDS            R3, R4, R3,LSR#3
BEQ             loc_235B8
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_235B0




; int __fastcall sub_23610(int)
sub_23610

var_24= -0x24
var_20= -0x20
fd= -0x18
var_14= -0x14
var_12= -0x12
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4-R7,LR}
MOV             R5, #0xFFFFFFFF
SUB             SP, SP, #0x24
MOV             R4, R0
STR             R5, [SP,#0x24+fd]
BL              sub_2050C
CMP             R0, #0
BEQ             loc_237B0
LDR             R6, [R4,#0x30]
CMP             R6, #0
BNE             loc_237B0
LDR             R5, =byte_4CA40
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12590
MOV             R1, R6
STRB            R0, [R4,#0x44]
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
MOV             R1, R6
STR             R0, [R4,#0x38]
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12690
STR             R0, [R4,#0x3C]
LDR             R0, [R5,#(dword_4CA70 - 0x4CA40)]
BL              sub_12664
STR             R0, [R4,#0x40]
LDR             R0, [R4,#0x38]
BL              sub_235B0
CMN             R0, #1
BEQ             loc_23698
LDR             R0, [R4,#0x3C]
BL              sub_235B0
CMN             R0, #1
BNE             loc_236D0

loc_23698
LDR             R1, =aBadXauthReques ; "Bad xauth request"
MOV             R0, #4
BL              sub_184E8

loc_236A4
MOV             R5, #0
LDR             R0, [R4,#0x38] ; ptr
BL              free
STR             R5, [R4,#0x38]
LDR             R0, [R4,#0x3C] ; ptr
BL              free
STR             R5, [R4,#0x3C]
MOV             R5, #0xFFFFFFFF
LDR             R0, [SP,#0x24+fd]
BL              sub_185B8
B               loc_237B0

loc_236D0               ; protocol
MOV             R2, R6
MOV             R1, #1  ; type
MOV             R0, #2  ; domain
BL              socket
CMP             R0, #0
MOV             R7, R0
STR             R0, [SP,#0x24+fd]
BLT             loc_236A4
MOV             R3, #2
STR             R6, [SP,#0x24+var_C]
STRH            R3, [SP,#0x24+var_14]
MOVW            R5, #0x177A
LDR             R3, =0x100007F
STR             R6, [SP,#0x24+var_8]
MOVW            R6, #0x1F4A
STR             R3, [SP,#0x24+var_10]

loc_23710               ; len
MOV             R2, #0x10
REV16           R3, R5
ADD             R1, SP, R2 ; addr
MOV             R0, R7  ; fd
STRH            R3, [SP,#0x24+var_12]
BL              bind
CMP             R0, #0
BEQ             loc_23754
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #0x62 ; 'b'
BNE             loc_237BC
ADD             R5, R5, #1
UXTH            R5, R5
CMP             R5, R6
BNE             loc_23710
MOV             R5, #0xFFFFFFFF

loc_23754
CMN             R5, #1
STR             R5, [R4,#0x34]
BEQ             loc_236A4
MOV             R1, #0x14 ; n
LDR             R0, [SP,#0x24+fd] ; fd
BL              listen
CMP             R0, #0
BLT             loc_236A4
ADD             R6, SP, #0x24+var_4
MOV             R5, #0
LDR             R0, [R6,#-0x14]!
BL              sub_188B0
LDR             R3, =sub_23914
MOV             R2, R5
STR             R5, [SP,#0x24+var_20]
MOV             R1, #1
MOV             R0, R6
STR             R3, [SP,#0x24+var_24]
MOV             R3, R4
BL              sub_1BF64
CMP             R0, R5
STR             R0, [R4,#0x30]
BEQ             loc_236A4

loc_237B0
MOV             R0, R5
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}

loc_237BC
LDR             R1, =aFailedToBindX1 ; "Failed to bind x11 socket"
MOV             R0, #7
BL              sub_184E8
MOV             R3, #0xFFFFFFFF
STR             R3, [R4,#0x34]
B               loc_236A4
; End of function sub_23610

off_237D4 DCD byte_4CA40
off_237D8 DCD aBadXauthReques ; "Bad xauth request"
dword_237DC DCD 0x100007F
off_237E0 DCD sub_23914
off_237E4 DCD aFailedToBindX1 ; "Failed to bind x11 socket"



; int __fastcall sub_237E8(int result)
sub_237E8

var_30= -0x30
s= -0x24

LDR             R3, [R0,#0x30]
CMP             R3, #0
BXEQ            LR
LDR             R3, [R0,#0x34]
MOV             R1, #0x14 ; maxlen
LDR             R2, [R0,#0x40]
PUSH            {R4,R5,LR}
SUB             SP, SP, #0x24 ; '$'
SUB             R3, R3, #0x1740
MOV             R4, R0
SUB             R3, R3, #0x30 ; '0'
ADD             R0, SP, #0x30+s ; s
STR             R2, [SP,#0x30+var_30]
LDR             R2, =aLocalhostDU ; "localhost:%d.%u"
BL              snprintf
CMP             R0, #0x13
BGT             loc_23898
ADD             R1, SP, #0x30+s
LDR             R0, =aDisplay ; "DISPLAY"
BL              sub_20DC8
LDR             R3, [R4,#0x34]
MOV             R1, #0x14 ; maxlen
LDR             R2, [R4,#0x40]
ADD             R0, SP, #0x30+s ; s
SUB             R3, R3, #0x1740
STR             R2, [SP,#0x30+var_30]
SUB             R3, R3, #0x30 ; '0'
LDR             R2, =aUnixDU ; "unix:%d.%u"
BL              snprintf
CMP             R0, #0x13
BGT             loc_23898
LDR             R1, =(aChannelRecvwin+0x26) ; modes
LDR             R0, =command ; "/usr/bin/xauth -q"
BL              popen
SUBS            R5, R0, #0
BEQ             loc_238A0
LDR             R3, [R4,#0x3C]
ADD             R2, SP, #0x30+s
LDR             R1, =aAddSSS ; "add %s %s %s\n"
STR             R3, [SP,#0x30+var_30]
LDR             R3, [R4,#0x38]
BL              fprintf
MOV             R0, R5  ; stream
BL              pclose

loc_23898
ADD             SP, SP, #0x24 ; '$'
POP             {R4,R5,PC}

loc_238A0
LDR             R3, =stderr
LDR             R2, =command ; "/usr/bin/xauth -q"
LDR             R1, =aFailedToRunS ; "Failed to run %s\n"
LDR             R0, [R3] ; stream
BL              fprintf
B               loc_23898
; End of function sub_237E8

off_238B8 DCD aLocalhostDU ; "localhost:%d.%u"
off_238BC DCD aDisplay  ; "DISPLAY"
off_238C0 DCD aUnixDU   ; "unix:%d.%u"
off_238C4 DCD aChannelRecvwin+0x26 ; "w"
off_238C8 DCD command   ; "/usr/bin/xauth -q"
off_238CC DCD aAddSSS   ; "add %s %s %s\n"
off_238D0 DCD stderr
off_238D4 DCD aFailedToRunS ; "Failed to run %s\n"



; void __fastcall sub_238D8(int)
sub_238D8
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, #0
LDR             R0, [R0,#0x38] ; ptr
BL              free
LDR             R0, [R4,#0x3C] ; ptr
STR             R5, [R4,#0x38]
BL              free
LDR             R0, [R4,#0x30] ; ptr
STR             R5, [R4,#0x3C]
CMP             R0, R5
POPEQ           {R4-R6,PC}
BL              sub_1C0F0
STR             R5, [R4,#0x30]
POP             {R4-R6,PC}
; End of function sub_238D8




; _DWORD *__fastcall sub_23914(int, int fd)
sub_23914

var_18= -0x18
addr= -0x14
var_4= -4

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x1C
MOV             R3, R1
ADD             R2, SP, #0x1C+var_4
MOV             R1, #0x10
LDR             R5, [R0,#0x1C]
MOV             R0, R3  ; fd
STR             R1, [R2,#-0x14]! ; addr_len
ADD             R1, SP, #0x1C+addr ; addr
BL              accept
SUBS            R4, R0, #0
BLT             loc_23974
LDRB            R3, [R5,#0x44]
CMP             R3, #0
BEQ             loc_23958
MOV             R0, R5
BL              sub_238D8

loc_23958
LDR             R1, =unk_380F4
MOV             R0, R4
BL              sub_143D8
CMP             R0, #0
BEQ             loc_2397C
MOV             R0, R4  ; fd
BL              close

loc_23974
ADD             SP, SP, #0x1C
POP             {R4,R5,PC}

loc_2397C
LDR             R4, =byte_4CA40
LDR             R0, [SP,#0x1C+addr.sa_data+2] ; in
BL              inet_ntoa
MOV             R5, R0
BL              strlen
MOV             R1, R5
MOV             R2, R0
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
LDRH            R1, [SP,#0x1C+addr.sa_data]
LDR             R0, [R4,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
BL              sub_1D894
B               loc_23974
; End of function sub_23914

off_239B4 DCD unk_380F4
off_239B8 DCD byte_4CA40



; void __fastcall sub_239BC(int)
sub_239BC
PUSH            {R4,LR}
LDR             R4, [R0,#0x1C]
LDR             R0, [R4] ; ptr
BL              free
LDR             R0, [R4,#8] ; ptr
BL              free
LDR             R0, [R4,#0x10] ; ptr
BL              free
MOV             R0, R4  ; ptr
POP             {R4,LR}
B               free
; End of function sub_239BC




; _DWORD *__fastcall sub_239E8(int, int fd)
sub_239E8

serv= -0x4BC
servlen= -0x4B8
addr_len= -0x4AC
var_4A8= -0x4A8
addr= -0x488
host= -0x408

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x4B0
SUB             SP, SP, #0xC
MOV             R3, R1
MOV             R2, #0x80
ADD             R1, SP, #0x4BC+addr ; addr
LDR             R5, [R0,#0x1C]
MOV             R0, R3  ; fd
STR             R2, [SP,#0x4BC+addr_len]
ADD             R2, SP, #0x4BC+addr_len ; addr_len
BL              accept
SUBS            R4, R0, #0
BLT             loc_23A54
MOV             R0, #0x20 ; ' '
MOV             R1, #3
ADD             R6, SP, #0x4BC+var_4A8
STRD            R0, R1, [SP,#0x4BC+servlen] ; servlen
STR             R6, [SP,#0x4BC+serv] ; serv
MOVW            R3, #0x401 ; hostlen
ADD             R2, SP, #0x4BC+host ; host
LDR             R1, [SP,#0x4BC+addr_len] ; salen
ADD             R0, SP, #0x4BC+addr ; sa
BL              getnameinfo
CMP             R0, #0
BEQ             loc_23A60
MOV             R0, R4
BL              sub_185B8

loc_23A54
ADD             SP, SP, #0x4B0
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_23A60
LDR             R1, [R5,#0x14]
MOV             R0, R4
BL              sub_143D8
CMP             R0, #0
BNE             loc_23B10
LDR             R3, [R5,#0x18]
CMP             R3, #0
BNE             loc_23AF0
LDM             R5, {R4,R7}

loc_23A84
LDR             R3, =aLocalhost ; "localhost"
CMP             R4, #0
LDR             R5, =byte_4CA40
MOVEQ           R4, R3
MOV             R0, R4  ; s
BL              strlen
MOV             R1, R4
MOV             R2, R0
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
MOV             R1, R7
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_1279C
ADD             R0, SP, #0x4BC+host ; s
BL              strlen
ADD             R1, SP, #0x4BC+host
MOV             R2, R0
LDR             R0, [R5,#(dword_4CA58 - 0x4CA40)]
BL              sub_127F8
LDR             R4, [R5,#(dword_4CA58 - 0x4CA40)]
MOV             R0, R6  ; nptr
BL              atol
MOV             R1, R0
MOV             R0, R4
BL              sub_1279C
BL              sub_1D894
B               loc_23A54

loc_23AF0
CMP             R3, #1
LDREQ           R4, [R5,#0x10]
LDREQ           R7, [R5,#0xC]
BEQ             loc_23A84
MOV             R2, #0x57 ; 'W'
LDR             R1, =aTcpAcceptC ; "tcp-accept.c"
LDR             R0, =aTcpinfoTcpType ; "tcpinfo->tcp_type == forwarded"
BL              sub_184D4

loc_23B10               ; fd
MOV             R0, R4
BL              close
B               loc_23A54
; End of function sub_239E8

off_23B1C DCD aLocalhost ; "localhost"
off_23B20 DCD byte_4CA40
off_23B24 DCD aTcpAcceptC ; "tcp-accept.c"
off_23B28 DCD aTcpinfoTcpType ; "tcpinfo->tcp_type == forwarded"



; int __fastcall sub_23B2C(int)
sub_23B2C
MOV             R3, #1
STR             R3, [R0,#0x60]
MOV             R0, #0
BX              LR
; End of function sub_23B2C




; int __fastcall sub_23B3C(int)
sub_23B3C

var_38= -0x38
var_34= -0x34
ptr= -0x2C
var_28= -0x28
s= -0x20

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x38
LDR             R3, [R0,#0xC]
MOV             R4, R0
MOV             R1, #0x20 ; ' ' ; maxlen
MOV             R5, #0
LDR             R2, =(aBadPacketSizeU+0x10) ; format
ADD             R0, SP, #0x38+s ; s
STR             R5, [SP,#0x38+ptr]
BL              snprintf
LDR             R3, =dword_4CA54
ADD             R2, SP, #0x38+var_28
ADD             R1, SP, #0x38+s
LDR             R0, [R4,#8]
STR             R3, [SP,#0x38+var_34]
ADD             R3, SP, #0x38+ptr
STR             R3, [SP,#0x38+var_38]
MOV             R3, #2
BL              sub_1CE9C
SUBS            R6, R0, #0
BGE             loc_23BB4
LDR             R2, [SP,#0x38+ptr]
MOV             R0, #6
LDR             R1, =aTcpForwardFail ; "TCP forward failed: %s"
BL              sub_184E8
LDR             R0, [SP,#0x38+ptr] ; ptr
BL              free
MOV             R0, #0xFFFFFFFF

loc_23BAC
ADD             SP, SP, #0x38 ; '8'
POP             {R4-R6,PC}

loc_23BB4               ; ptr
LDR             R0, [SP,#0x38+ptr]
BL              free
LDR             R3, =sub_239BC
MOV             R1, R6
LDR             R2, =0x43612C67
ADD             R0, SP, #0x38+var_28
STR             R5, [SP,#0x38+ptr]
STR             R3, [SP,#0x38+var_34]
LDR             R3, =sub_239E8
STR             R3, [SP,#0x38+var_38]
MOV             R3, R4
BL              sub_1BF64
CLZ             R0, R0
MOV             R0, R0,LSR#5
RSB             R0, R0, #0
B               loc_23BAC
; End of function sub_23B3C

off_23BF4 DCD aBadPacketSizeU+0x10 ; "%u"
off_23BF8 DCD dword_4CA54
off_23BFC DCD aTcpForwardFail ; "TCP forward failed: %s"
off_23C00 DCD sub_239BC
dword_23C04 DCD 0x43612C67
off_23C08 DCD sub_239E8



; unsigned int __fastcall sub_23C0C(unsigned int)
sub_23C0C
LDR             R1, =byte_384C4
UBFX            R3, R0, #0x10, #8
LDR             R2, [R1,R3,LSL#2]
UBFX            R3, R0, #8, #8
LDR             R3, [R1,R3,LSL#2]
AND             R2, R2, #0xFF000000
AND             R3, R3, #0xFF0000
ORR             R2, R2, R3
UXTB            R3, R0
MOV             R0, R0,LSR#24
LDR             R3, [R1,R3,LSL#2]
LDRB            R0, [R1,R0,LSL#2]
AND             R3, R3, #0xFF00
ORR             R0, R3, R0
ORR             R0, R2, R0
BX              LR
; End of function sub_23C0C

off_23C4C DCD byte_384C4



; int __fastcall sub_23C50(unsigned int)
sub_23C50
LDR             R3, =byte_384C4
UXTB            R2, R0
LDRB            R2, [R3,R2,LSL#2]
ADD             R2, R3, R2,LSL#2
LDR             R12, [R2,#0x400]
MOV             R2, R0,LSR#24
LDRB            R1, [R3,R2,LSL#2]
ADD             R1, R3, R1,LSL#2
LDR             R2, [R1,#0x400]
UBFX            R1, R0, #0x10, #8
LDRB            R1, [R3,R1,LSL#2]
UBFX            R0, R0, #8, #8
EOR             R2, R2, R12,ROR#24
ADD             R1, R3, R1,LSL#2
LDR             R1, [R1,#0x400]
EOR             R2, R2, R1,ROR#8
LDRB            R1, [R3,R0,LSL#2]
ADD             R3, R3, R1,LSL#2
LDR             R0, [R3,#0x400]
EOR             R0, R2, R0,ROR#16
BX              LR
; End of function sub_23C50

off_23CA4 DCD byte_384C4



; int sub_23CA8()
sub_23CA8
MOV             R0, #2
BX              LR
; End of function sub_23CA8

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_2]



; int __fastcall sub_23CB4(unsigned int *, _DWORD *, _DWORD *)
sub_23CB4

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
CMP             R0, #0
BNE             loc_23CD0
LDR             R1, =aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
MOVW            R2, #0x126
LDR             R0, =aPtNull ; "pt != NULL"

loc_23CCC
BL              sub_26EB8

loc_23CD0
CMP             R1, #0
MOVWEQ          R2, #0x127
LDREQ           R1, =aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
LDREQ           R0, =aCtNull ; "ct != NULL"
BEQ             loc_23CCC
CMP             R2, #0
MOVEQ           R2, #0x128
LDREQ           R1, =aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
LDREQ           R0, =aSkeyNull ; "skey != NULL"
BEQ             loc_23CCC
LDR             R4, [R0]
MOV             R9, R2
LDR             R3, [R2]
MOV             R10, #0
LDR             R5, [R0,#4]
REV             R4, R4
LDR             R6, [R0,#8]
EOR             R4, R4, R3
LDR             R3, [R2,#4]
REV             R5, R5
LDR             R0, [R0,#0xC]
REV             R6, R6
LDR             R7, [R2,#0x1E0]
EOR             R5, R5, R3
LDR             R3, [R2,#8]
REV             R0, R0
SUB             R12, R7, #2
EOR             R6, R6, R3
LDR             R3, [R2,#0xC]
STR             R12, [SP,#0xC+var_8]
EOR             R0, R0, R3
LDR             R3, =byte_384C4

loc_23D50
MOV             R12, R4,LSR#24
ADD             R9, R9, #0x10
ADD             R12, R3, R12,LSL#2
LDR             LR, [R12,#0x800]
LDR             R12, [R9]
EOR             R12, R12, LR
UXTB            LR, R0
ADD             LR, R3, LR,LSL#2
LDR             LR, [LR,#0x800]
EOR             R12, R12, LR,ROR#24
UBFX            LR, R5, #0x10, #8
ADD             LR, R3, LR,LSL#2
LDR             LR, [LR,#0x800]
EOR             R12, R12, LR,ROR#8
UBFX            LR, R6, #8, #8
ADD             LR, R3, LR,LSL#2
LDR             LR, [LR,#0x800]
EOR             R12, R12, LR,ROR#16
MOV             LR, R5,LSR#24
ADD             LR, R3, LR,LSL#2
LDR             R8, [LR,#0x800]
LDR             LR, [R9,#4]
EOR             LR, LR, R8
UXTB            R8, R4
ADD             R8, R3, R8,LSL#2
LDR             R8, [R8,#0x800]
EOR             LR, LR, R8,ROR#24
UBFX            R8, R6, #0x10, #8
ADD             R8, R3, R8,LSL#2
LDR             R8, [R8,#0x800]
EOR             LR, LR, R8,ROR#8
UBFX            R8, R0, #8, #8
ADD             R8, R3, R8,LSL#2
LDR             R8, [R8,#0x800]
EOR             LR, LR, R8,ROR#16
MOV             R8, R6,LSR#24
UXTB            R6, R6
ADD             R8, R3, R8,LSL#2
ADD             R6, R3, R6,LSL#2
LDR             R11, [R8,#0x800]
LDR             R8, [R9,#8]
EOR             R8, R8, R11
UXTB            R11, R5
UBFX            R5, R5, #8, #8
ADD             R11, R3, R11,LSL#2
ADD             R5, R3, R5,LSL#2
LDR             R11, [R11,#0x800]
EOR             R8, R8, R11,ROR#24
UBFX            R11, R0, #0x10, #8
ADD             R11, R3, R11,LSL#2
MOV             R0, R0,LSR#24
LDR             R11, [R11,#0x800]
ADD             R0, R3, R0,LSL#2
EOR             R8, R8, R11,ROR#8
UBFX            R11, R4, #8, #8
ADD             R11, R3, R11,LSL#2
UBFX            R4, R4, #0x10, #8
ADD             R4, R3, R4,LSL#2
LDR             R11, [R11,#0x800]
EOR             R8, R8, R11,ROR#16
LDR             R11, [R0,#0x800]
LDR             R0, [R9,#0xC]
EOR             R0, R0, R11
LDR             R11, [R6,#0x800]
EOR             R0, R0, R11,ROR#24
LDR             R11, [R4,#0x800]
LDR             R4, [R5,#0x800]
EOR             R0, R0, R11,ROR#8
EOR             R0, R0, R4,ROR#16
LDR             R4, [SP,#0xC+var_8]
CMP             R4, R10
ADDNE           R10, R10, #1
MOVNE           R6, R8
MOVNE           R5, LR
MOVNE           R4, R12
BNE             loc_23D50
SUB             R7, R7, #0xF0000001
MOV             R5, R12,LSR#24
ADD             R7, R2, R7,LSL#4
UXTB            R2, R0
LDR             R5, [R3,R5,LSL#2]
LDR             R4, [R7,#0x10]
LDRB            R2, [R3,R2,LSL#2]
AND             R5, R5, #0xFF000000
EOR             R4, R4, R2
UBFX            R2, R8, #8, #8
LDR             R2, [R3,R2,LSL#2]
AND             R2, R2, #0xFF00
EOR             R2, R2, R4
UBFX            R4, LR, #0x10, #8
LDR             R4, [R3,R4,LSL#2]
AND             R4, R4, #0xFF0000
ORR             R4, R4, R5
MOV             R5, LR,LSR#24
EOR             R2, R2, R4
REV             R2, R2
LDR             R5, [R3,R5,LSL#2]
STR             R2, [R1]
UXTB            R2, R12
LDR             R4, [R7,#0x14]
LDRB            R2, [R3,R2,LSL#2]
AND             R5, R5, #0xFF000000
EOR             R4, R4, R2
UBFX            R2, R0, #8, #8
LDR             R2, [R3,R2,LSL#2]
AND             R2, R2, #0xFF00
EOR             R2, R2, R4
UBFX            R4, R8, #0x10, #8
LDR             R4, [R3,R4,LSL#2]
AND             R4, R4, #0xFF0000
ORR             R4, R4, R5
MOV             R5, R8,LSR#24
EOR             R2, R2, R4
UXTB            R8, R8
REV             R2, R2
LDR             R5, [R3,R5,LSL#2]
STR             R2, [R1,#4]
UXTB            R2, LR
LDR             R4, [R7,#0x18]
UBFX            LR, LR, #8, #8
LDRB            R2, [R3,R2,LSL#2]
AND             R5, R5, #0xFF000000
LDR             LR, [R3,LR,LSL#2]
EOR             R4, R4, R2
UBFX            R2, R12, #8, #8
LDR             R2, [R3,R2,LSL#2]
UBFX            R12, R12, #0x10, #8
LDR             R12, [R3,R12,LSL#2]
AND             LR, LR, #0xFF00
AND             R2, R2, #0xFF00
EOR             R2, R2, R4
UBFX            R4, R0, #0x10, #8
LDR             R4, [R3,R4,LSL#2]
MOV             R0, R0,LSR#24
AND             R12, R12, #0xFF0000
AND             R4, R4, #0xFF0000
ORR             R4, R4, R5
EOR             R2, R2, R4
REV             R2, R2
STR             R2, [R1,#8]
LDRB            R2, [R3,R8,LSL#2]
LDR             R4, [R7,#0x1C]
LDR             R3, [R3,R0,LSL#2]
MOV             R0, #0
EOR             R2, R2, R4
AND             R3, R3, #0xFF000000
EOR             R2, R2, LR
ORR             R3, R12, R3
EOR             R3, R3, R2
REV             R3, R3
STR             R3, [R1,#0xC]
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_23CB4

off_23FB4 DCD aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
off_23FB8 DCD aPtNull   ; "pt != NULL"
off_23FBC DCD aCtNull   ; "ct != NULL"
off_23FC0 DCD aSkeyNull ; "skey != NULL"
off_23FC4 DCD byte_384C4



; int __fastcall sub_23FC8(unsigned int *, _DWORD *, _DWORD *)
sub_23FC8

var_8= -8

PUSH            {R0-R2,R4-R11,LR}
CMP             R1, #0
BNE             loc_23FE4
LDR             R1, =aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
MOVW            R2, #0x1D9
LDR             R0, =aPtNull ; "pt != NULL"

loc_23FE0
BL              sub_26EB8

loc_23FE4
CMP             R0, #0
MOVWEQ          R2, #0x1DA
LDREQ           R1, =aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
LDREQ           R0, =aCtNull ; "ct != NULL"
BEQ             loc_23FE0
CMP             R2, #0
MOVWEQ          R2, #0x1DB
LDREQ           R1, =aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
LDREQ           R0, =aSkeyNull ; "skey != NULL"
BEQ             loc_23FE0
LDR             LR, [R0]
ADD             R10, R2, #0xF0
LDR             R3, [R2,#0xF0]
MOV             R8, R10
LDR             R4, [R0,#4]
MOV             R9, #0
REV             LR, LR
LDR             R5, [R0,#8]
EOR             LR, LR, R3
LDR             R3, [R2,#0xF4]
REV             R4, R4
LDR             R7, [R2,#0x1E0]
REV             R5, R5
EOR             R4, R4, R3
LDR             R3, [R2,#0xF8]
LDR             R2, [R2,#0xFC]
EOR             R5, R5, R3
LDR             R3, [R0,#0xC]
SUB             R0, R7, #2
STR             R0, [SP,#0xC+var_8]
REV             R3, R3
EOR             R2, R2, R3
LDR             R3, =byte_384C4

loc_24068
MOV             R0, LR,LSR#24
ADD             R8, R8, #0x10
ADD             R0, R3, R0,LSL#2
LDR             R12, [R0,#0x400]
LDR             R0, [R8]
EOR             R12, R12, R0
UXTB            R0, R4
ADD             R0, R3, R0,LSL#2
LDR             R0, [R0,#0x400]
EOR             R12, R12, R0,ROR#24
UBFX            R0, R2, #0x10, #8
ADD             R0, R3, R0,LSL#2
LDR             R0, [R0,#0x400]
EOR             R12, R12, R0,ROR#8
UBFX            R0, R5, #8, #8
ADD             R0, R3, R0,LSL#2
LDR             R0, [R0,#0x400]
EOR             R12, R12, R0,ROR#16
MOV             R0, R4,LSR#24
ADD             R0, R3, R0,LSL#2
LDR             R6, [R0,#0x400]
LDR             R0, [R8,#4]
EOR             R0, R0, R6
UXTB            R6, R5
ADD             R6, R3, R6,LSL#2
LDR             R6, [R6,#0x400]
EOR             R0, R0, R6,ROR#24
UBFX            R6, LR, #0x10, #8
ADD             R6, R3, R6,LSL#2
LDR             R6, [R6,#0x400]
EOR             R0, R0, R6,ROR#8
UBFX            R6, R2, #8, #8
ADD             R6, R3, R6,LSL#2
LDR             R6, [R6,#0x400]
EOR             R0, R0, R6,ROR#16
MOV             R6, R5,LSR#24
ADD             R6, R3, R6,LSL#2
UBFX            R5, R5, #0x10, #8
ADD             R5, R3, R5,LSL#2
LDR             R11, [R6,#0x400]
LDR             R6, [R8,#8]
EOR             R6, R6, R11
UXTB            R11, R2
MOV             R2, R2,LSR#24
ADD             R11, R3, R11,LSL#2
ADD             R2, R3, R2,LSL#2
LDR             R11, [R11,#0x400]
EOR             R6, R6, R11,ROR#24
UBFX            R11, R4, #0x10, #8
ADD             R11, R3, R11,LSL#2
UBFX            R4, R4, #8, #8
ADD             R4, R3, R4,LSL#2
LDR             R11, [R11,#0x400]
EOR             R6, R6, R11,ROR#8
UBFX            R11, LR, #8, #8
ADD             R11, R3, R11,LSL#2
UXTB            LR, LR
LDR             R11, [R11,#0x400]
ADD             LR, R3, LR,LSL#2
EOR             R6, R6, R11,ROR#16
LDR             R11, [R2,#0x400]
LDR             R2, [R8,#0xC]
EOR             R2, R2, R11
LDR             R11, [LR,#0x400]
LDR             LR, [R4,#0x400]
EOR             R2, R2, R11,ROR#24
LDR             R11, [R5,#0x400]
EOR             R2, R2, R11,ROR#8
EOR             R2, R2, LR,ROR#16
LDR             LR, [SP,#0xC+var_8]
CMP             LR, R9
ADDNE           R9, R9, #1
MOVNE           R5, R6
MOVNE           R4, R0
MOVNE           LR, R12
BNE             loc_24068
UXTB            LR, R0
SUB             R7, R7, #0xF0000001
ADD             R10, R10, R7,LSL#4
MOV             R5, R12,LSR#24
ADD             LR, R3, LR,LSL#2
LDR             R4, [R10,#0x10]
ADD             R5, R3, R5,LSL#2
LDRB            LR, [LR,#0xC00]
LDR             R5, [R5,#0xC00]
EOR             R4, R4, LR
UBFX            LR, R6, #8, #8
ADD             LR, R3, LR,LSL#2
AND             R5, R5, #0xFF000000
LDR             LR, [LR,#0xC00]
AND             LR, LR, #0xFF00
EOR             LR, LR, R4
UBFX            R4, R2, #0x10, #8
ADD             R4, R3, R4,LSL#2
LDR             R4, [R4,#0xC00]
AND             R4, R4, #0xFF0000
ORR             R4, R4, R5
MOV             R5, R0,LSR#24
EOR             LR, LR, R4
REV             LR, LR
ADD             R5, R3, R5,LSL#2
STR             LR, [R1]
UXTB            LR, R6
LDR             R4, [R10,#0x14]
ADD             LR, R3, LR,LSL#2
LDR             R5, [R5,#0xC00]
LDRB            LR, [LR,#0xC00]
AND             R5, R5, #0xFF000000
EOR             R4, R4, LR
UBFX            LR, R2, #8, #8
ADD             LR, R3, LR,LSL#2
LDR             LR, [LR,#0xC00]
AND             LR, LR, #0xFF00
EOR             LR, LR, R4
UBFX            R4, R12, #0x10, #8
ADD             R4, R3, R4,LSL#2
LDR             R4, [R4,#0xC00]
AND             R4, R4, #0xFF0000
ORR             R4, R4, R5
MOV             R5, R6,LSR#24
EOR             LR, LR, R4
REV             LR, LR
ADD             R5, R3, R5,LSL#2
STR             LR, [R1,#4]
UXTB            LR, R2
LDR             R4, [R10,#0x18]
MOV             R2, R2,LSR#24
ADD             LR, R3, LR,LSL#2
LDR             R5, [R5,#0xC00]
UBFX            R6, R6, #0x10, #8
LDRB            LR, [LR,#0xC00]
ADD             R6, R3, R6,LSL#2
AND             R5, R5, #0xFF000000
EOR             R4, R4, LR
UBFX            LR, R12, #8, #8
ADD             LR, R3, LR,LSL#2
UXTB            R12, R12
LDR             LR, [LR,#0xC00]
ADD             R12, R3, R12,LSL#2
LDRB            R12, [R12,#0xC00]
AND             LR, LR, #0xFF00
EOR             LR, LR, R4
UBFX            R4, R0, #0x10, #8
ADD             R4, R3, R4,LSL#2
UBFX            R0, R0, #8, #8
ADD             R0, R3, R0,LSL#2
ADD             R3, R3, R2,LSL#2
LDR             R4, [R4,#0xC00]
LDR             R0, [R0,#0xC00]
LDR             R3, [R3,#0xC00]
AND             R4, R4, #0xFF0000
ORR             R4, R4, R5
AND             R0, R0, #0xFF00
EOR             LR, LR, R4
AND             R3, R3, #0xFF000000
REV             LR, LR
STR             LR, [R1,#8]
LDR             LR, [R10,#0x1C]
EOR             R12, R12, LR
EOR             R0, R0, R12
LDR             R12, [R6,#0xC00]
AND             R12, R12, #0xFF0000
ORR             R3, R12, R3
EOR             R3, R3, R0
MOV             R0, #0
REV             R3, R3
STR             R3, [R1,#0xC]
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_23FC8

off_2430C DCD aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
off_24310 DCD aPtNull   ; "pt != NULL"
off_24314 DCD aCtNull   ; "ct != NULL"
off_24318 DCD aSkeyNull ; "skey != NULL"
off_2431C DCD byte_384C4
CMP             R0, #0
BNE             loc_2433C
PUSH            {R4,LR}
MOV             R2, #0x2D4
LDR             R1, =aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
LDR             R0, =aKeysizeNull ; "keysize != NULL"
BL              sub_26EB8

loc_2433C
LDR             R3, [R0]
CMP             R3, #0xF
BLE             loc_2436C
CMP             R3, #0x17
MOVLE           R3, #0x10
BLE             loc_24360
CMP             R3, #0x1F
MOVGT           R3, #0x20 ; ' '
MOVLE           R3, #0x18

loc_24360
STR             R3, [R0]
MOV             R0, #0
BX              LR

loc_2436C
MOV             R0, #3
BX              LR
off_24374 DCD aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
off_24378 DCD aKeysizeNull ; "keysize != NULL"



; int __fastcall sub_2437C(unsigned int *, int, int, _DWORD *)
sub_2437C
CMP             R0, #0
PUSH            {R4-R10,LR}
BNE             loc_24398
LDR             R1, =aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
MOV             R2, #0x81
LDR             R0, =(aSkeyNull+1) ; "key != NULL"

loc_24394
BL              sub_26EB8

loc_24398
CMP             R3, #0
MOV             R4, R3
MOVEQ           R2, #0x82
LDREQ           R1, =aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
LDREQ           R0, =aSkeyNull ; "skey != NULL"
BEQ             loc_24394
BIC             R3, R1, #8
MOV             R6, R1
CMP             R3, #0x10
CMPNE           R1, #0x20 ; ' '
BNE             loc_24694
CMP             R1, #0
ADD             R3, R1, #7
MOVGE           R3, R1
CMP             R2, #0
MOV             R3, R3,ASR#3
ADD             R3, R3, #3
MOV             R3, R3,LSL#1
BEQ             loc_243EC
CMP             R2, R3
BNE             loc_2469C

loc_243EC
STR             R3, [R4,#0x1E0]
CMP             R6, #0x10
LDR             R3, [R0]
REV             R3, R3
STR             R3, [R4]
LDR             R3, [R0,#4]
REV             R3, R3
STR             R3, [R4,#4]
LDR             R3, [R0,#8]
REV             R3, R3
STR             R3, [R4,#8]
LDR             R3, [R0,#0xC]
REV             R3, R3
STR             R3, [R4,#0xC]
BNE             loc_24488
LDR             R9, =dword_394C4
MOV             R5, R4
MOV             R7, #0

loc_24434
LDR             R8, [R5,#0xC]
MOV             R0, R8
BL              sub_23C0C
LDR             R3, [R5]
EOR             R0, R0, R3
LDR             R3, [R9,R7,LSL#2]
ADD             R7, R7, #1
CMP             R7, #0xA
EOR             R0, R0, R3
LDR             R3, [R5,#4]
STR             R0, [R5,#0x10]
EOR             R0, R0, R3
LDR             R3, [R5,#8]
STR             R0, [R5,#0x14]
EOR             R0, R0, R3
STR             R0, [R5,#0x18]
EOR             R0, R0, R8
STR             R0, [R5,#0x1C]
BEQ             loc_245F0
ADD             R5, R5, #0x10
B               loc_24434

loc_24488
CMP             R6, #0x18
BNE             loc_24520
LDR             R3, [R0,#0x10]
MOV             R5, R4
LDR             R9, =dword_394C4
MOV             R8, #0
REV             R3, R3
STR             R3, [R4,#0x10]
LDR             R3, [R0,#0x14]
REV             R3, R3
STR             R3, [R4,#0x14]

loc_244B4
LDR             R7, [R5,#0x14]
MOV             R0, R7
BL              sub_23C0C
LDR             R3, [R5]
EOR             R0, R0, R3
LDR             R3, [R9,R8,LSL#2]
ADD             R8, R8, #1
CMP             R8, #8
EOR             R0, R0, R3
LDR             R3, [R5,#4]
STR             R0, [R5,#0x18]
EOR             R0, R0, R3
LDR             R3, [R5,#8]
STR             R0, [R5,#0x1C]
EOR             R0, R0, R3
LDR             R3, [R5,#0xC]
STR             R0, [R5,#0x20]
EOR             R0, R0, R3
STR             R0, [R5,#0x24]
BEQ             loc_245F0
LDR             R3, [R5,#0x10]
ADD             R5, R5, #0x18
EOR             R0, R0, R3
STR             R0, [R5,#0x10]
EOR             R0, R0, R7
STR             R0, [R5,#0x14]
B               loc_244B4

loc_24520
CMP             R6, #0x20 ; ' '
BNE             loc_246A4
LDR             R3, [R0,#0x10]
MOV             R5, R4
LDR             R8, =dword_394C4
MOV             R9, #0
REV             R3, R3
STR             R3, [R4,#0x10]
LDR             R3, [R0,#0x14]
REV             R3, R3
STR             R3, [R4,#0x14]
LDR             R3, [R0,#0x18]
REV             R3, R3
STR             R3, [R4,#0x18]
LDR             R3, [R0,#0x1C]
REV             R3, R3
STR             R3, [R4,#0x1C]

loc_24564
LDR             R7, [R5,#0x1C]
MOV             R0, R7
BL              sub_23C0C
LDR             R3, [R5]
EOR             R0, R0, R3
LDR             R3, [R8,R9,LSL#2]
ADD             R9, R9, #1
CMP             R9, #7
EOR             R0, R0, R3
LDR             R3, [R5,#4]
STR             R0, [R5,#0x20]
EOR             R0, R0, R3
LDR             R3, [R5,#8]
STR             R0, [R5,#0x24]
EOR             R0, R0, R3
LDR             R3, [R5,#0xC]
STR             R0, [R5,#0x28]
EOR             R0, R0, R3
STR             R0, [R5,#0x2C]
BEQ             loc_245F0
MOV             R0, R0,ROR#8
ADD             R5, R5, #0x20 ; ' '
BL              sub_23C0C
LDR             R3, [R5,#-0x10]
EOR             R0, R0, R3
LDR             R3, [R5,#-0xC]
STR             R0, [R5,#0x10]
EOR             R0, R0, R3
LDR             R3, [R5,#-8]
STR             R0, [R5,#0x14]
EOR             R0, R0, R3
EOR             R7, R7, R0
STR             R0, [R5,#0x18]
STR             R7, [R5,#0x1C]
B               loc_24564

loc_245F0
ADD             R6, R6, #0x18
MOV             R7, #1
LDR             R3, [R4,R6,LSL#2]
ADD             R5, R4, R6,LSL#2
ADD             R6, R4, #0xF0
STR             R3, [R4,#0xF0]
LDR             R3, [R5,#4]
STR             R3, [R4,#0xF4]
LDR             R3, [R5,#8]
STR             R3, [R4,#0xF8]
LDR             R3, [R5,#0xC]
STR             R3, [R4,#0xFC]

loc_24620
LDR             R3, [R4,#0x1E0]
CMP             R7, R3
BLT             loc_24654
LDR             R3, [R5,#-0x10]
MOV             R0, #0
STR             R3, [R6,#0x10]
LDR             R3, [R5,#-0xC]
STR             R3, [R6,#0x14]
LDR             R3, [R5,#-8]
STR             R3, [R6,#0x18]
LDR             R3, [R5,#-4]
STR             R3, [R6,#0x1C]
POP             {R4-R10,PC}

loc_24654
LDR             R0, [R5,#-0x10]
ADD             R7, R7, #1
BL              sub_23C50
STR             R0, [R6,#0x10]
SUB             R5, R5, #0x10
LDR             R0, [R5,#4]
ADD             R6, R6, #0x10
BL              sub_23C50
STR             R0, [R6,#4]
LDR             R0, [R5,#8]
BL              sub_23C50
STR             R0, [R6,#8]
LDR             R0, [R5,#0xC]
BL              sub_23C50
STR             R0, [R6,#0xC]
B               loc_24620

loc_24694
MOV             R0, #3
POP             {R4-R10,PC}

loc_2469C
MOV             R0, #4
POP             {R4-R10,PC}

loc_246A4
MOV             R0, #1
POP             {R4-R10,PC}
; End of function sub_2437C

off_246AC DCD aSrcCiphersAesA ; "src/ciphers/aes/aes.c"
off_246B0 DCD aSkeyNull+1 ; "key != NULL"
off_246B4 DCD aSkeyNull ; "skey != NULL"
off_246B8 DCD dword_394C4



; int sub_246BC()
sub_246BC
MOV             R0, #2
BX              LR
; End of function sub_246BC




; int __fastcall sub_246C4(_DWORD *, int)
sub_246C4

var_148= -0x148
var_144= -0x144
var_48= -0x48

PUSH            {R4-R11,LR}
MOV             R3, #0
SUB             SP, SP, #0x14C

loc_246D0
ADD             R12, SP, #0x14C+var_144
LDR             R2, [R1,R3]
REV             R2, R2
STR             R2, [R12,R3]
ADD             R3, R3, #4
CMP             R3, #0x40 ; '@'
BNE             loc_246D0
LDR             R11, [R0,#8]
ADD             R2, SP, #0x14C+var_148
LDR             R10, [R0,#0xC]
ADD             R12, SP, #0x14C+var_48
LDR             R9, [R0,#0x10]
LDR             R8, [R0,#0x14]
LDR             R3, [R0,#0x18]
STR             R3, [SP,#0x14C+var_148]

loc_2470C
LDR             R3, [R2,#0x38]
LDR             LR, [R2,#0x24]
LDR             R1, [R2,#0xC]
EOR             R3, R3, LR
EOR             R3, R3, R1
LDR             R1, [R2,#4]!
EOR             R3, R3, R1
CMP             R12, R2
MOV             R3, R3,ROR#31
STR             R3, [R2,#0x40]
BNE             loc_2470C
LDR             R12, [SP,#0x14C+var_148]
MOV             R6, R8
LDR             LR, =0x5A827999
MOV             R5, R9
MOV             R1, R10
MOV             R7, R11
MOV             R3, #0

loc_24754
ADD             R2, SP, #0x14C+var_144
EOR             R4, R5, R6
LDR             R2, [R2,R3,LSL#2]
AND             R4, R4, R1
ADD             R3, R3, #1
EOR             R4, R4, R6
CMP             R3, #0x14
ADD             R2, R2, R7,ROR#27
ADD             R2, R2, LR
ADD             R2, R2, R4
MOV             R4, R1,ROR#2
ADD             R2, R2, R12
MOV             R1, R7
MOV             R12, R6
BNE             loc_24884
LDR             R12, =0x6ED9EBA1

loc_24794
ADD             R1, SP, #0x14C+var_144
EOR             LR, R7, R4
LDR             R1, [R1,R3,LSL#2]
ADD             R3, R3, #1
EOR             LR, LR, R5
CMP             R3, #0x28 ; '('
ADD             R1, R1, R2,ROR#27
ADD             R1, R1, R12
ADD             R1, R1, LR
MOV             LR, R7,ROR#2
ADD             R1, R1, R6
MOV             R7, R2
MOV             R6, R5
BNE             loc_24894
LDR             R7, =0x8F1BBCDC

loc_247D0
ORR             R12, R2, LR
AND             R6, R2, LR
AND             R12, R12, R4
ORR             R12, R12, R6
ADD             R6, SP, #0x14C+var_144
LDR             R6, [R6,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #0x3C ; '<'
ADD             R6, R6, R1,ROR#27
ADD             R6, R6, R7
ADD             R12, R12, R6
MOV             R6, R2,ROR#2
ADD             R12, R12, R5
MOV             R2, R1
MOV             R5, R4
BNE             loc_248A4
LDR             R5, =0xCA62C1D6

loc_24814
ADD             R2, SP, #0x14C+var_144
EOR             R7, R1, R6
LDR             R2, [R2,R3,LSL#2]
ADD             R3, R3, #1
EOR             R7, R7, LR
CMP             R3, #0x50 ; 'P'
ADD             R2, R2, R12,ROR#27
ADD             R2, R2, R5
ADD             R2, R2, R7
MOV             R7, R1,ROR#2
ADD             R2, R2, R4
MOV             R1, R12
MOV             R4, LR
BNE             loc_248B4
LDR             R3, [SP,#0x14C+var_148]
ADD             R11, R11, R2
ADD             R12, R10, R12
ADD             R9, R9, R7
ADD             R8, R8, R6
STR             R11, [R0,#8]
ADD             LR, R3, LR
STR             R12, [R0,#0xC]
STR             R9, [R0,#0x10]
STR             R8, [R0,#0x14]
STR             LR, [R0,#0x18]
MOV             R0, #0
ADD             SP, SP, #0x14C
POP             {R4-R11,PC}

loc_24884
MOV             R6, R5
MOV             R7, R2
MOV             R5, R4
B               loc_24754

loc_24894
MOV             R5, R4
MOV             R2, R1
MOV             R4, LR
B               loc_24794

loc_248A4
MOV             R4, LR
MOV             R1, R12
MOV             LR, R6
B               loc_247D0

loc_248B4
MOV             LR, R6
MOV             R12, R2
MOV             R6, R7
B               loc_24814
; End of function sub_246C4

dword_248C4 DCD 0x5A827999
dword_248C8 DCD 0x6ED9EBA1
dword_248CC DCD 0x8F1BBCDC
dword_248D0 DCD 0xCA62C1D6



; int __fastcall sub_248D4(_DWORD *, _DWORD *)
sub_248D4

var_C= -0xC

PUSH            {R0-R2,R4-R7,LR}
SUBS            R4, R0, #0
BNE             loc_248F0
LDR             R1, =aSrcHashesSha1C ; "src/hashes/sha1.c"
MOV             R2, #0xC3
LDR             R0, =aMdNull ; "md != NULL"

loc_248EC
BL              sub_26EB8

loc_248F0
CMP             R1, #0
MOV             R5, R1
MOVEQ           R2, #0xC4
LDREQ           R1, =aSrcHashesSha1C ; "src/hashes/sha1.c"
LDREQ           R0, =aOutNull ; "out != NULL"
BEQ             loc_248EC
LDR             R3, [R4,#0x1C]
CMP             R3, #0x3F ; '?'
MOVHI           R0, #0x10
BHI             loc_249AC
LDRD            R0, R1, [R4]
MOV             R2, R3,LSL#3
ADDS            R6, R0, R2
ADD             R2, R3, #1
ADC             R7, R1, #0
CMP             R2, #0x38 ; '8'
ADD             R3, R4, R3
MOV             R1, #0xFFFFFF80
STR             R2, [R4,#0x1C]
MOVHI           R2, #0
STRD            R6, R7, [R4]
STRB            R1, [R3,#0x20]
BHI             loc_249C4

loc_2494C
MOV             R2, #0

loc_24950
LDR             R3, [R4,#0x1C]
CMP             R3, #0x37 ; '7'
BLS             loc_249E8
LDR             R3, [R4]
LDR             R2, [R4,#4]
REV             R3, R3
REV             R2, R2
STRD            R2, R3, [SP,#0xC+var_C]
MOV             R3, SP
LDM             R3!, {R0,R1}
STR             R0, [R4,#0x58]
MOV             R0, R4
STR             R1, [R4,#0x5C]
ADD             R1, R4, #0x20 ; ' '
BL              sub_246C4
ADD             R3, R4, #8
ADD             R4, R4, #0x1C

loc_24994
LDR             R2, [R3],#4
CMP             R3, R4
REV             R2, R2
STR             R2, [R5],#4
BNE             loc_24994
MOV             R0, #0

loc_249AC
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_249B4
ADD             R1, R3, #1
ADD             R3, R4, R3
STR             R1, [R4,#0x1C]
STRB            R2, [R3,#0x20]

loc_249C4
LDR             R3, [R4,#0x1C]
CMP             R3, #0x3F ; '?'
BLS             loc_249B4
ADD             R1, R4, #0x20 ; ' '
MOV             R0, R4
BL              sub_246C4
MOV             R3, #0
STR             R3, [R4,#0x1C]
B               loc_2494C

loc_249E8
ADD             R1, R3, #1
ADD             R3, R4, R3
STR             R1, [R4,#0x1C]
STRB            R2, [R3,#0x20]
B               loc_24950
; End of function sub_248D4

off_249FC DCD aSrcHashesSha1C ; "src/hashes/sha1.c"
off_24A00 DCD aMdNull   ; "md != NULL"
off_24A04 DCD aOutNull  ; "out != NULL"



; int __fastcall sub_24A08(int)
sub_24A08
SUBS            R3, R0, #0
PUSH            {R4-R6,LR}
BNE             loc_24A24
MOV             R2, #0xA5
LDR             R1, =aSrcHashesSha1C ; "src/hashes/sha1.c"
LDR             R0, =aMdNull ; "md != NULL"
BL              sub_26EB8

loc_24A24
LDR             R0, =0x67452301
LDR             R1, =0xEFCDAB89
LDR             R4, =0x98BADCFE
LDR             R5, =0x10325476
LDR             R2, =0xC3D2E1F0
STRD            R0, R1, [R3,#8]
MOV             R0, #0
STRD            R4, R5, [R3,#0x10]
MOV             R4, #0
MOV             R5, #0
STR             R2, [R3,#0x18]
STR             R0, [R3,#0x1C]
STRD            R4, R5, [R3]
POP             {R4-R6,PC}
; End of function sub_24A08

off_24A5C DCD aSrcHashesSha1C ; "src/hashes/sha1.c"
off_24A60 DCD aMdNull   ; "md != NULL"
dword_24A64 DCD 0x67452301
dword_24A68 DCD 0xEFCDAB89
dword_24A6C DCD 0x98BADCFE
dword_24A70 DCD 0x10325476
dword_24A74 DCD 0xC3D2E1F0



; int __fastcall sub_24A78(unsigned int *, char *src, unsigned int)
sub_24A78
PUSH            {R4-R8,LR}
SUBS            R4, R0, #0
BNE             loc_24A94
LDR             R1, =aSrcHashesSha1C ; "src/hashes/sha1.c"
MOV             R2, #0xB7
LDR             R0, =aMdNull ; "md != NULL"

loc_24A90
BL              sub_26EB8

loc_24A94
CMP             R1, #0
MOV             R6, R1
MOVEQ           R2, #0xB7
LDREQ           R1, =aSrcHashesSha1C ; "src/hashes/sha1.c"
LDREQ           R0, =aInNull ; "in != NULL"
BEQ             loc_24A90
LDR             R3, [R4,#0x1C]
CMP             R3, #0x40 ; '@'
BHI             loc_24BB0
MOV             R5, R2
LDRD            R2, R3, [R4]
ADDS            R0, R2, R5
ADC             R1, R3, #0
CMP             R3, R1
CMPEQ           R2, R0
ADDLS           R8, R4, #0x20 ; ' '
BLS             loc_24B34
MOV             R0, #0x19
POP             {R4-R8,PC}

loc_24AE0
LDR             R0, [R4,#0x1C]
CMP             R5, #0x3F ; '?'
MOVLS           R3, #0
MOVHI           R3, #1
CMP             R0, #0
MOVNE           R3, #0
CMP             R3, #0
BEQ             loc_24B44
MOV             R1, R6
MOV             R0, R4
BL              sub_246C4
CMP             R0, #0
POPNE           {R4-R8,PC}
LDR             R3, [R4]
ADD             R6, R6, #0x40 ; '@'
LDR             R2, [R4,#4]
SUB             R5, R5, #0x40 ; '@'
ADDS            R3, R3, #0x200
ADC             R2, R2, #0
STR             R3, [R4]
STR             R2, [R4,#4]

loc_24B34
CMP             R5, #0
BNE             loc_24AE0
MOV             R0, R5
POP             {R4-R8,PC}

loc_24B44
RSB             R7, R0, #0x40 ; '@'
MOV             R1, R6  ; src
CMP             R7, R5
ADD             R0, R8, R0 ; dest
MOVCS           R7, R5
MOV             R2, R7  ; n
ADD             R6, R6, R7
BL              memcpy
LDR             R3, [R4,#0x1C]
SUB             R5, R5, R7
ADD             R3, R7, R3
CMP             R3, #0x40 ; '@'
STR             R3, [R4,#0x1C]
BNE             loc_24B34
MOV             R1, R8
MOV             R0, R4
BL              sub_246C4
CMP             R0, #0
POPNE           {R4-R8,PC}
LDR             R3, [R4]
LDR             R2, [R4,#4]
STR             R0, [R4,#0x1C]
ADDS            R3, R3, #0x200
ADC             R2, R2, #0
STR             R3, [R4]
STR             R2, [R4,#4]
B               loc_24B34

loc_24BB0
MOV             R0, #0x10
POP             {R4-R8,PC}
; End of function sub_24A78

off_24BB8 DCD aSrcHashesSha1C ; "src/hashes/sha1.c"
off_24BBC DCD aMdNull   ; "md != NULL"
off_24BC0 DCD aInNull   ; "in != NULL"



; int sub_24BC4()
sub_24BC4
MOV             R0, #2
BX              LR
; End of function sub_24BC4




; int __fastcall sub_24BCC(int, int)
sub_24BCC

var_128= -0x128
var_124= -0x124
var_120= -0x120
var_11C= -0x11C
var_118= -0x118
var_114= -0x114
var_110= -0x110
var_10C= -0x10C
var_108= -0x108
var_104= -0x104
var_44= -0x44

ADD             R0, R0, #8
PUSH            {R4-R11,LR}
MOV             R2, R0
SUB             SP, SP, #0x12C
MOV             R3, #0

loc_24BE0
LDR             R12, [R2],#4
ADD             LR, SP, #0x12C+var_124
STR             R12, [LR,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #8
BNE             loc_24BE0
MOV             R2, #0
ADD             R3, SP, #0x12C+var_104

loc_24C00
LDR             R12, [R1,R2]
REV             R12, R12
STR             R12, [R2,R3]
ADD             R2, R2, #4
CMP             R2, #0x40 ; '@'
BNE             loc_24C00
ADD             LR, SP, #0x12C+var_44

loc_24C1C
LDR             R1, [R3,#0x38]
MOV             R4, R3
LDR             R12, [R3,#4]!
MOV             R2, R1,ROR#19
CMP             LR, R3
EOR             R2, R2, R1,ROR#17
EOR             R2, R2, R1,LSR#10
LDR             R1, [R4,#0x24]
LDR             R4, [R4]
ADD             R1, R1, R4
ADD             R2, R2, R1
MOV             R1, R12,ROR#18
EOR             R1, R1, R12,ROR#7
EOR             R1, R1, R12,LSR#3
ADD             R2, R2, R1
STR             R2, [R3,#0x3C]
BNE             loc_24C1C
ADD             R1, SP, #0x12C+var_114
LDR             R5, [SP,#0x12C+var_108]
LDM             R1, {R1,R7,LR}
MOV             R4, #0
ADD             R11, SP, #0x12C+var_104
LDR             R2, [SP,#0x12C+var_124]
LDR             R12, [SP,#0x12C+var_120]
LDR             R6, [SP,#0x12C+var_11C]
LDR             R9, [SP,#0x12C+var_118]
LDR             R10, =dword_39634

loc_24C88
MOV             R3, R1,ROR#11
EOR             R8, R7, LR
AND             R8, R8, R1
EOR             R3, R3, R1,ROR#6
EOR             R8, R8, LR
EOR             R3, R3, R1,ROR#25
ADD             R3, R3, R8
LDR             R8, [R11,R4,LSL#2]
ADD             R3, R3, R8
LDR             R8, [R10,R4,LSL#2]
ADD             R4, R4, #1
CMP             R4, #0x40 ; '@'
ADD             R3, R3, R8
ADD             R3, R3, R5
MOV             R5, R2,ROR#13
ADD             R8, R9, R3
EOR             R5, R5, R2,ROR#2
AND             R9, R12, R2
EOR             R5, R5, R2,ROR#22
STR             R5, [SP,#0x12C+var_128]
ORR             R5, R12, R2
AND             R5, R5, R6
ORR             R5, R5, R9
LDR             R9, [SP,#0x12C+var_128]
ADD             R5, R9, R5
MOV             R9, R6
ADD             R3, R5, R3
MOV             R5, LR
BNE             loc_24D4C
STR             R3, [SP,#0x12C+var_124]
MOV             R3, #0
STR             LR, [SP,#0x12C+var_108]
STR             R8, [SP,#0x12C+var_114]
STR             R7, [SP,#0x12C+var_10C]
STR             R1, [SP,#0x12C+var_110]
STR             R2, [SP,#0x12C+var_120]
STR             R12, [SP,#0x12C+var_11C]
STR             R6, [SP,#0x12C+var_118]

loc_24D20
ADD             R2, SP, #0x12C+var_124
LDR             R1, [R0]
LDR             R2, [R2,R3,LSL#2]
ADD             R3, R3, #1
CMP             R3, #8
ADD             R2, R2, R1
STR             R2, [R0],#4
BNE             loc_24D20
MOV             R0, #0
ADD             SP, SP, #0x12C
POP             {R4-R11,PC}

loc_24D4C
MOV             R6, R12
MOV             LR, R7
MOV             R12, R2
MOV             R7, R1
MOV             R2, R3
MOV             R1, R8
B               loc_24C88
; End of function sub_24BCC

off_24D68 DCD dword_39634



; int __fastcall sub_24D6C(unsigned int *, _DWORD *)
sub_24D6C

var_C= -0xC

PUSH            {R0-R2,R4-R7,LR}
SUBS            R4, R0, #0
BNE             loc_24D88
LDR             R1, =aSrcHashesSha2S_1 ; "src/hashes/sha2/sha256.c"
MOV             R2, #0xF0
LDR             R0, =aMdNull ; "md != NULL"

loc_24D84
BL              sub_26EB8

loc_24D88
CMP             R1, #0
MOV             R5, R1
MOVEQ           R2, #0xF1
LDREQ           R1, =aSrcHashesSha2S_1 ; "src/hashes/sha2/sha256.c"
LDREQ           R0, =aOutNull ; "out != NULL"
BEQ             loc_24D84
LDR             R3, [R4,#0x28]
CMP             R3, #0x3F ; '?'
MOVHI           R0, #0x10
BHI             loc_24E44
LDRD            R0, R1, [R4]
MOV             R2, R3,LSL#3
ADDS            R6, R0, R2
ADD             R2, R3, #1
ADC             R7, R1, #0
CMP             R2, #0x38 ; '8'
ADD             R3, R4, R3
MOV             R1, #0xFFFFFF80
STR             R2, [R4,#0x28]
MOVHI           R2, #0
STRD            R6, R7, [R4]
STRB            R1, [R3,#0x2C]
BHI             loc_24E5C

loc_24DE4
MOV             R2, #0

loc_24DE8
LDR             R3, [R4,#0x28]
CMP             R3, #0x37 ; '7'
BLS             loc_24E80
LDR             R3, [R4]
LDR             R2, [R4,#4]
REV             R3, R3
REV             R2, R2
STRD            R2, R3, [SP,#0xC+var_C]
MOV             R3, SP
LDM             R3!, {R0,R1}
STR             R0, [R4,#0x64]
MOV             R0, R4
STR             R1, [R4,#0x68]
ADD             R1, R4, #0x2C ; ','
BL              sub_24BCC
ADD             R3, R4, #8
ADD             R4, R4, #0x28 ; '('

loc_24E2C
LDR             R2, [R3],#4
CMP             R3, R4
REV             R2, R2
STR             R2, [R5],#4
BNE             loc_24E2C
MOV             R0, #0

loc_24E44
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_24E4C
ADD             R1, R3, #1
ADD             R3, R4, R3
STR             R1, [R4,#0x28]
STRB            R2, [R3,#0x2C]

loc_24E5C
LDR             R3, [R4,#0x28]
CMP             R3, #0x3F ; '?'
BLS             loc_24E4C
ADD             R1, R4, #0x2C ; ','
MOV             R0, R4
BL              sub_24BCC
MOV             R3, #0
STR             R3, [R4,#0x28]
B               loc_24DE4

loc_24E80
ADD             R1, R3, #1
ADD             R3, R4, R3
STR             R1, [R4,#0x28]
STRB            R2, [R3,#0x2C]
B               loc_24DE8
; End of function sub_24D6C

off_24E94 DCD aSrcHashesSha2S_1 ; "src/hashes/sha2/sha256.c"
off_24E98 DCD aMdNull   ; "md != NULL"
off_24E9C DCD aOutNull  ; "out != NULL"



; int __fastcall sub_24EA0(int)
sub_24EA0
SUBS            R3, R0, #0
PUSH            {R4-R6,LR}
BNE             loc_24EBC
MOV             R2, #0xCE
LDR             R1, =aSrcHashesSha2S_1 ; "src/hashes/sha2/sha256.c"
LDR             R0, =aMdNull ; "md != NULL"
BL              sub_26EB8

loc_24EBC
LDR             R2, =0x6A09E667
MOV             R0, #0
MOV             R4, #0
MOV             R5, #0
STR             R0, [R3,#0x28]
STR             R2, [R3,#8]
LDR             R2, =0xBB67AE85
STRD            R4, R5, [R3]
STR             R2, [R3,#0xC]
LDR             R2, =0x3C6EF372
STR             R2, [R3,#0x10]
LDR             R2, =0xA54FF53A
STR             R2, [R3,#0x14]
LDR             R2, =0x510E527F
STR             R2, [R3,#0x18]
LDR             R2, =0x9B05688C
STR             R2, [R3,#0x1C]
LDR             R2, =0x1F83D9AB
STR             R2, [R3,#0x20]
LDR             R2, =0x5BE0CD19
STR             R2, [R3,#0x24]
POP             {R4-R6,PC}
; End of function sub_24EA0

off_24F14 DCD aSrcHashesSha2S_1 ; "src/hashes/sha2/sha256.c"
off_24F18 DCD aMdNull   ; "md != NULL"
dword_24F1C DCD 0x6A09E667
dword_24F20 DCD 0xBB67AE85
dword_24F24 DCD 0x3C6EF372
dword_24F28 DCD 0xA54FF53A
dword_24F2C DCD 0x510E527F
dword_24F30 DCD 0x9B05688C
dword_24F34 DCD 0x1F83D9AB
dword_24F38 DCD 0x5BE0CD19



; int __fastcall sub_24F3C(__int64 *, char *src, unsigned int)
sub_24F3C
PUSH            {R4-R8,LR}
SUBS            R4, R0, #0
BNE             loc_24F58
LDR             R1, =aSrcHashesSha2S_1 ; "src/hashes/sha2/sha256.c"
MOV             R2, #0xE4
LDR             R0, =aMdNull ; "md != NULL"

loc_24F54
BL              sub_26EB8

loc_24F58
CMP             R1, #0
MOV             R6, R1
MOVEQ           R2, #0xE4
LDREQ           R1, =aSrcHashesSha2S_1 ; "src/hashes/sha2/sha256.c"
LDREQ           R0, =aInNull ; "in != NULL"
BEQ             loc_24F54
LDR             R3, [R4,#0x28]
CMP             R3, #0x40 ; '@'
BHI             loc_25074
MOV             R5, R2
LDRD            R2, R3, [R4]
ADDS            R0, R2, R5
ADC             R1, R3, #0
CMP             R3, R1
CMPEQ           R2, R0
ADDLS           R8, R4, #0x2C ; ','
BLS             loc_24FF8
MOV             R0, #0x19
POP             {R4-R8,PC}

loc_24FA4
LDR             R0, [R4,#0x28]
CMP             R5, #0x3F ; '?'
MOVLS           R3, #0
MOVHI           R3, #1
CMP             R0, #0
MOVNE           R3, #0
CMP             R3, #0
BEQ             loc_25008
MOV             R1, R6
MOV             R0, R4
BL              sub_24BCC
CMP             R0, #0
POPNE           {R4-R8,PC}
LDR             R3, [R4]
ADD             R6, R6, #0x40 ; '@'
LDR             R2, [R4,#4]
SUB             R5, R5, #0x40 ; '@'
ADDS            R3, R3, #0x200
ADC             R2, R2, #0
STR             R3, [R4]
STR             R2, [R4,#4]

loc_24FF8
CMP             R5, #0
BNE             loc_24FA4
MOV             R0, R5
POP             {R4-R8,PC}

loc_25008
RSB             R7, R0, #0x40 ; '@'
MOV             R1, R6  ; src
CMP             R7, R5
ADD             R0, R8, R0 ; dest
MOVCS           R7, R5
MOV             R2, R7  ; n
ADD             R6, R6, R7
BL              memcpy
LDR             R3, [R4,#0x28]
SUB             R5, R5, R7
ADD             R3, R7, R3
CMP             R3, #0x40 ; '@'
STR             R3, [R4,#0x28]
BNE             loc_24FF8
MOV             R1, R8
MOV             R0, R4
BL              sub_24BCC
CMP             R0, #0
POPNE           {R4-R8,PC}
LDR             R3, [R4]
LDR             R2, [R4,#4]
STR             R0, [R4,#0x28]
ADDS            R3, R3, #0x200
ADC             R2, R2, #0
STR             R3, [R4]
STR             R2, [R4,#4]
B               loc_24FF8

loc_25074
MOV             R0, #0x10
POP             {R4-R8,PC}
; End of function sub_24F3C

off_2507C DCD aSrcHashesSha2S_1 ; "src/hashes/sha2/sha256.c"
off_25080 DCD aMdNull   ; "md != NULL"
off_25084 DCD aInNull   ; "in != NULL"



; int sub_25088()
sub_25088
MOV             R0, #2
BX              LR
; End of function sub_25088




; int __fastcall sub_25090(int)
sub_25090
SUBS            R3, R0, #0
PUSH            {R4-R6,LR}
BNE             loc_250AC
MOV             R2, #0x2B ; '+'
LDR             R1, =aSrcHashesSha2S ; "src/hashes/sha2/sha384.c"
LDR             R0, =aMdNull ; "md != NULL"
BL              sub_26EB8

loc_250AC
MOV             R4, #0
MOV             R5, #0
STRD            R4, R5, [R3]
MOV             R0, #0
ADR             R5, dword_25128
LDRD            R4, R5, [R5]
STR             R0, [R3,#0x48]
STRD            R4, R5, [R3,#8]
ADR             R5, dword_25130
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x10]
ADR             R5, dword_25138
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x18]
ADR             R5, dword_25140
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x20]
ADR             R5, dword_25148
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x28]
ADR             R5, dword_25150
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x30]
ADR             R5, dword_25158
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x38]
ADR             R5, dword_25160
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x40]
POP             {R4-R6,PC}
; End of function sub_25090

ALIGN 8
dword_25128 DCD 0xC1059ED8
DCD 0xCBBB9D5D
dword_25130 DCD 0x367CD507
DCD 0x629A292A
dword_25138 DCD 0x3070DD17
DCD 0x9159015A
dword_25140 DCD 0xF70E5939
DCD 0x152FECD8
dword_25148 DCD 0xFFC00B31
DCD 0x67332667
dword_25150 DCD 0x68581511
DCD 0x8EB44A87
dword_25158 DCD 0x64F98FA7
DCD 0xDB0C2E0D
dword_25160 DCD 0xBEFA4FA4
DCD 0x47B5481D
off_25168 DCD aSrcHashesSha2S ; "src/hashes/sha2/sha384.c"
off_2516C DCD aMdNull   ; "md != NULL"



; int __fastcall sub_25170(unsigned int *, int)
sub_25170

var_10= -0x10

SUBS            R3, R0, #0
PUSH            {R4,LR}
SUB             SP, SP, #0x40
BNE             loc_25190
LDR             R1, =aSrcHashesSha2S ; "src/hashes/sha2/sha384.c"
MOV             R2, #0x44 ; 'D'
LDR             R0, =aMdNull ; "md != NULL"

loc_2518C
BL              sub_26EB8

loc_25190
CMP             R1, #0
MOV             R4, R1
MOVEQ           R2, #0x45 ; 'E'
LDREQ           R1, =aSrcHashesSha2S ; "src/hashes/sha2/sha384.c"
LDREQ           R0, =aOutNull ; "out != NULL"
BEQ             loc_2518C
LDR             R3, [R3,#0x48]
CMP             R3, #0x7F
MOVHI           R0, #0x10
BHI             loc_251F0
MOV             R1, SP
BL              sub_25630
MOV             R2, SP
MOV             R3, R4
ADD             LR, SP, #0x40+var_10

loc_251CC
MOV             R12, R2
ADD             R3, R3, #8
LDM             R12!, {R0,R1}
CMP             R12, LR
STR             R0, [R3,#-8]
STR             R1, [R3,#-4]
MOV             R2, R12
BNE             loc_251CC
MOV             R0, #0

loc_251F0
ADD             SP, SP, #0x40 ; '@'
POP             {R4,PC}
; End of function sub_25170

off_251F8 DCD aSrcHashesSha2S ; "src/hashes/sha2/sha384.c"
off_251FC DCD aMdNull   ; "md != NULL"
off_25200 DCD aOutNull  ; "out != NULL"
ALIGN 8



; int sub_25208()
sub_25208
MOV             R0, #2
BX              LR
; End of function sub_25208




; int __fastcall sub_25210(int, int)
sub_25210

var_2FC= -0x2FC
var_2F8= -0x2F8
var_2F0= -0x2F0
var_2EC= -0x2EC
var_2E8= -0x2E8
var_2E4= -0x2E4
var_2E0= -0x2E0
var_2D8= -0x2D8
var_2D4= -0x2D4
var_2D0= -0x2D0
var_2CC= -0x2CC
var_2C8= -0x2C8
var_2C4= -0x2C4
var_2C0= -0x2C0
var_2BC= -0x2BC
var_2B8= -0x2B8
var_2B4= -0x2B4
var_2B0= -0x2B0
var_2AC= -0x2AC
var_2A8= -0x2A8
var_2A4= -0x2A4
var_2A0= -0x2A0
var_29C= -0x29C
var_298= -0x298
var_294= -0x294
var_290= -0x290
var_28C= -0x28C
var_284= -0x284

PUSH            {R4-R11,LR}
ADD             R9, R0, #8
SUB             SP, SP, #0x2FC
MOV             R4, R1
MOV             R2, R9
MOV             R3, #0

loc_25228
LDRD            R0, R1, [R2],#8
ADD             R12, SP, #0x2FC+var_2C4
STRD            R0, R1, [R12,R3]
ADD             R3, R3, #8
CMP             R3, #0x40 ; '@'
BNE             loc_25228
ADD             R12, SP, #0x2FC+var_284
MOV             R2, #0
MOV             LR, R12

loc_2524C
ADD             R1, R4, R2
MOV             R5, LR
LDR             R0, [R1]
MOV             R3, LR
LDR             R1, [R1,#4]
ADD             R2, R2, #8
CMP             R2, #0x80
STM             R3!, {R0,R1}
REV             R1, R0
LDR             R0, [R5,#4]
MOV             LR, R3
REV             R0, R0
STRD            R0, R1, [R3,#-8]
BNE             loc_2524C
ADD             R4, R12, #0x200

loc_25288
LDR             R0, [R12,#0x70]
MOV             R6, R12
LDR             R5, [R12,#0x74]
ADD             R12, R12, #8
LDR             LR, [R12,#4]
LDR             R1, [R12]
MOV             R3, R0,LSR#19
MOV             R2, R5,LSR#19
MOV             R7, R5,LSL#3
ORR             R8, R3, R5,LSL#13
MOV             R3, R0,LSL#3
ORR             R7, R7, R0,LSR#29
ORR             R2, R2, R0,LSL#13
MOV             R0, R0,LSR#6
ORR             R3, R3, R5,LSR#29
ORR             R0, R0, R5,LSL#26
EOR             R3, R3, R8
EOR             R2, R2, R7
LDR             R7, [R6]
EOR             R3, R3, R0
LDR             R0, [R6,#0x48]
EOR             R2, R2, R5,LSR#6
LDR             R5, [R6,#0x4C]
LDR             R6, [R6,#4]
ADDS            R0, R0, R7
MOV             R7, R1,LSR#8
ADC             R5, R5, R6
ADDS            R3, R3, R0
ADC             R2, R2, R5
MOV             R6, LR,LSR#8
MOV             R5, LR,LSR#1
MOV             R0, R1,LSR#1
ORR             R6, R6, R1,LSL#24
ORR             R7, R7, LR,LSL#24
ORR             R5, R5, R1,LSL#31
MOV             R1, R1,LSR#7
ORR             R0, R0, LR,LSL#31
ORR             R1, R1, LR,LSL#25
EOR             R5, R5, R6
EOR             R0, R0, R7
EOR             LR, R5, LR,LSR#7
EOR             R1, R1, R0
ADDS            R1, R3, R1
ADC             LR, R2, LR
CMP             R4, R12
STR             R1, [R12,#0x78]
STR             LR, [R12,#0x7C]
BNE             loc_25288
LDR             R3, [SP,#0x2FC+var_28C]
MOV             R6, #0
LDR             R4, [SP,#0x2FC+var_2A4]
LDR             LR, [SP,#0x2FC+var_2A0]
STR             R3, [SP,#0x2FC+var_2E0]
LDR             R3, [SP,#0x2FC+var_28C+4]
LDR             R12, [SP,#0x2FC+var_2C4]
LDR             R0, [SP,#0x2FC+var_2C0]
STR             R3, [SP,#0x2FC+var_2E0+4]
LDR             R3, [SP,#0x2FC+var_294]
LDR             R5, [SP,#0x2FC+var_2B8]
LDR             R11, [SP,#0x2FC+var_2A8]
STR             R3, [SP,#0x2FC+var_2F8]
LDR             R3, [SP,#0x2FC+var_290]
STR             R3, [SP,#0x2FC+var_2F8+4]
LDR             R3, [SP,#0x2FC+var_29C]
STR             R3, [SP,#0x2FC+var_2E8]
LDR             R3, [SP,#0x2FC+var_298]
STR             R3, [SP,#0x2FC+var_2E4]
LDR             R3, [SP,#0x2FC+var_2BC]
STR             R3, [SP,#0x2FC+var_2FC]
LDR             R3, [SP,#0x2FC+var_2B4]
STR             R3, [SP,#0x2FC+var_2F0]
LDR             R3, [SP,#0x2FC+var_2B0]
STR             R3, [SP,#0x2FC+var_2EC]
LDR             R3, [SP,#0x2FC+var_2AC]
STR             R3, [SP,#0x2FC+var_2D8]

loc_253B4
MOV             R2, R4,LSR#14
MOV             R3, R4,LSR#18
MOV             R7, LR,LSR#14
MOV             R1, LR,LSR#18
ORR             R3, R3, LR,LSL#14
ORR             R2, R2, LR,LSL#18
ORR             R1, R1, R4,LSL#14
ORR             R7, R7, R4,LSL#18
EOR             R2, R2, R3
MOV             R3, R4,LSL#23
EOR             R7, R7, R1
MOV             R1, LR,LSL#23
ORR             R3, R3, LR,LSR#9
ORR             R1, R1, R4,LSR#9
EOR             R2, R2, R3
LDR             R3, =unk_39840
EOR             R7, R7, R1
LDR             R10, [R6,R3]
ADD             R3, R3, R6
LDR             R8, [R3,#4]
ADD             R3, SP, #0x2FC+var_284
LDR             R3, [R3,R6]
STR             R3, [SP,#0x2FC+var_2CC]
ADD             R3, SP, #0x2FC+var_284
ADD             R3, R3, R6
ADD             R6, R6, #8
LDR             R1, [R3,#4]
LDR             R3, [SP,#0x2FC+var_2CC]
ADDS            R3, R10, R3
ADC             R1, R8, R1
ADDS            R3, R2, R3
ADC             R1, R7, R1
LDR             R2, [SP,#0x2FC+var_2E8]
LDR             R7, [SP,#0x2FC+var_2F8]
EOR             R8, R2, R7
LDR             R7, [SP,#0x2FC+var_2F8+4]
LDR             R2, [SP,#0x2FC+var_2E4]
AND             R8, R8, R4
EOR             R10, R2, R7
LDR             R2, [SP,#0x2FC+var_2F8]
AND             R10, R10, LR
EOR             R10, R10, R7
EOR             R8, R8, R2
LDR             R2, [SP,#0x2FC+var_2E0]
ADDS            R3, R3, R8
ADC             R1, R1, R10
ADDS            R3, R3, R2
LDR             R2, [SP,#0x2FC+var_2E0+4]
ADC             R2, R1, R2
MOV             R1, R0,LSR#28
STR             R2, [SP,#0x2FC+var_2E0]
LDR             R2, [SP,#0x2FC+var_2D8]
ORR             R7, R1, R12,LSL#4
MOV             R1, R0,LSL#30
ADDS            R2, R2, R3
ORR             R1, R1, R12,LSR#2
STR             R2, [SP,#0x2FC+var_2CC]
LDR             R2, [SP,#0x2FC+var_2E0]
EOR             R1, R1, R7
MOV             R7, R0,LSL#25
ADC             R2, R11, R2
ORR             R7, R7, R12,LSR#7
STR             R2, [SP,#0x2FC+var_2C8]
MOV             R2, R12,LSR#28
EOR             R1, R1, R7
LDR             R7, [SP,#0x2FC+var_2FC]
ORR             R8, R2, R0,LSL#4
MOV             R2, R12,LSL#30
ORR             R2, R2, R0,LSR#2
ORR             R10, R7, R12
ORR             R7, R5, R0
EOR             R2, R2, R8
MOV             R8, R12,LSL#25
AND             R11, R5, R0
ORR             R8, R8, R0,LSR#7
EOR             R2, R2, R8
LDR             R8, [SP,#0x2FC+var_2F0]
AND             R10, R10, R8
LDR             R8, [SP,#0x2FC+var_2EC]
AND             R7, R7, R8
LDR             R8, [SP,#0x2FC+var_2FC]
ORR             R11, R7, R11
AND             R8, R8, R12
ORR             R8, R10, R8
ADDS            R8, R2, R8
ADC             R11, R1, R11
ADDS            R8, R8, R3
LDR             R3, [SP,#0x2FC+var_2E0]
ADC             R1, R11, R3
LDR             R3, [SP,#0x2FC+var_2F8]
CMP             R6, #0x280
STR             R3, [SP,#0x2FC+var_2E0]
LDR             R3, [SP,#0x2FC+var_2F8+4]
STR             R3, [SP,#0x2FC+var_2E0+4]
LDR             R3, [SP,#0x2FC+var_2F0]
STR             R3, [SP,#0x2FC+var_2D8]
LDR             R11, [SP,#0x2FC+var_2EC]
BNE             loc_255EC
LDR             R3, [SP,#0x2FC+var_2F8]
STR             R4, [SP,#0x2FC+var_29C]
STR             LR, [SP,#0x2FC+var_298]
STR             R3, [SP,#0x2FC+var_28C]
LDR             R3, [SP,#0x2FC+var_2F8+4]
STR             R8, [SP,#0x2FC+var_2C4]
STR             R1, [SP,#0x2FC+var_2C0]
STR             R3, [SP,#0x2FC+var_28C+4]
LDR             R3, [SP,#0x2FC+var_2CC]
STR             R12, [SP,#0x2FC+var_2BC]
STR             R0, [SP,#0x2FC+var_2B8]
STR             R3, [SP,#0x2FC+var_2A4]
LDR             R3, [SP,#0x2FC+var_2C8]
STR             R5, [SP,#0x2FC+var_2B0]
STR             R11, [SP,#0x2FC+var_2A8]
STR             R3, [SP,#0x2FC+var_2A0]
LDR             R3, [SP,#0x2FC+var_2E8]
STR             R3, [SP,#0x2FC+var_294]
LDR             R3, [SP,#0x2FC+var_2E4]
STR             R3, [SP,#0x2FC+var_290]
LDR             R3, [SP,#0x2FC+var_2FC]
STR             R3, [SP,#0x2FC+var_2B4]
LDR             R3, [SP,#0x2FC+var_2F0]
STR             R3, [SP,#0x2FC+var_2AC]
MOV             R3, #0

loc_255A0
ADD             R2, SP, #0x2FC+var_2C4
ADD             R12, SP, #0x2FC+var_2C4
LDR             R1, [R9]
ADD             R12, R12, R3
LDR             R2, [R2,R3]
ADD             R3, R3, #8
LDR             R0, [R9,#4]
LDR             R12, [R12,#4]
ADDS            R2, R2, R1
STR             R2, [SP,#0x2FC+var_2D4]
ADC             R2, R12, R0
CMP             R3, #0x40 ; '@'
STR             R2, [SP,#0x2FC+var_2D0]
LDRD            R0, R1, [SP,#0x2FC+var_2D4]
STRD            R0, R1, [R9],#8
BNE             loc_255A0
MOV             R0, #0
ADD             SP, SP, #0x2FC
POP             {R4-R11,PC}

loc_255EC
LDR             R3, [SP,#0x2FC+var_2FC]
STR             R5, [SP,#0x2FC+var_2EC]
MOV             R5, R0
STR             R12, [SP,#0x2FC+var_2FC]
MOV             R0, R1
STR             R3, [SP,#0x2FC+var_2F0]
MOV             R12, R8
LDR             R3, [SP,#0x2FC+var_2E8]
STR             R4, [SP,#0x2FC+var_2E8]
LDR             R4, [SP,#0x2FC+var_2CC]
STR             R3, [SP,#0x2FC+var_2F8]
LDR             R3, [SP,#0x2FC+var_2E4]
STR             LR, [SP,#0x2FC+var_2E4]
LDR             LR, [SP,#0x2FC+var_2C8]
STR             R3, [SP,#0x2FC+var_2F8+4]
B               loc_253B4
; End of function sub_25210

off_2562C DCD unk_39840



; int __fastcall sub_25630(unsigned int *, int)
sub_25630

var_C= -0xC

PUSH            {R0-R2,R4,R5,LR}
SUBS            R4, R0, #0
BNE             loc_2564C
LDR             R1, =aSrcHashesSha2S_0 ; "src/hashes/sha2/sha512.c"
MOV             R2, #0xD0
LDR             R0, =aMdNull ; "md != NULL"

loc_25648
BL              sub_26EB8

loc_2564C
CMP             R1, #0
MOV             R5, R1
MOVEQ           R2, #0xD1
LDREQ           R1, =aSrcHashesSha2S_0 ; "src/hashes/sha2/sha512.c"
LDREQ           R0, =aOutNull ; "out != NULL"
BEQ             loc_25648
LDR             R1, [R4,#0x48]
CMP             R1, #0x7F
MOVHI           R0, #0x10
BHI             loc_25728
LDRD            R2, R3, [R4]
MOV             R0, #8
UMLAL           R2, R3, R0, R1
STRD            R2, R3, [R4]
ADD             R3, R1, #1
CMP             R3, #0x70 ; 'p'
MOV             R2, #0xFFFFFF80
ADD             R1, R4, R1
STR             R3, [R4,#0x48]
STRB            R2, [R1,#0x4C]
MOVHI           R2, #0
BHI             loc_25740

loc_256A4
MOV             R2, #0

loc_256A8
LDR             R3, [R4,#0x48]
CMP             R3, #0x77 ; 'w'
BLS             loc_25764
LDR             R3, [R4]
LDR             R2, [R4,#4]
REV             R3, R3
REV             R2, R2
STRD            R2, R3, [SP,#0xC+var_C]
MOV             R3, SP
LDM             R3!, {R0,R1}
STR             R0, [R4,#0xC4]
MOV             R0, R4
STR             R1, [R4,#0xC8]
ADD             R1, R4, #0x4C ; 'L'
BL              sub_25210
ADD             R2, R4, #8
MOV             R3, R5
ADD             R4, R4, #0x48 ; 'H'

loc_256F0
LDR             R1, [R2]
MOV             R12, SP
LDR             R0, [R2,#4]
ADD             R2, R2, #8
CMP             R2, R4
ADD             R3, R3, #8
REV             R1, R1
REV             R0, R0
STRD            R0, R1, [SP,#0xC+var_C]
LDM             R12!, {R0,R1}
STR             R0, [R3,#-8]
STR             R1, [R3,#-4]
BNE             loc_256F0
MOV             R0, #0

loc_25728
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_25730
ADD             R1, R3, #1
ADD             R3, R4, R3
STR             R1, [R4,#0x48]
STRB            R2, [R3,#0x4C]

loc_25740
LDR             R3, [R4,#0x48]
CMP             R3, #0x7F
BLS             loc_25730
ADD             R1, R4, #0x4C ; 'L'
MOV             R0, R4
BL              sub_25210
MOV             R3, #0
STR             R3, [R4,#0x48]
B               loc_256A4

loc_25764
ADD             R1, R3, #1
ADD             R3, R4, R3
STR             R1, [R4,#0x48]
STRB            R2, [R3,#0x4C]
B               loc_256A8
; End of function sub_25630

off_25778 DCD aSrcHashesSha2S_0 ; "src/hashes/sha2/sha512.c"
off_2577C DCD aMdNull   ; "md != NULL"
off_25780 DCD aOutNull  ; "out != NULL"



; int __fastcall sub_25784(int)
sub_25784
SUBS            R3, R0, #0
PUSH            {R4-R6,LR}
BNE             loc_257A0
MOV             R2, #0xAF
LDR             R1, =aSrcHashesSha2S_0 ; "src/hashes/sha2/sha512.c"
LDR             R0, =aMdNull ; "md != NULL"
BL              sub_26EB8

loc_257A0
MOV             R4, #0
MOV             R5, #0
STRD            R4, R5, [R3]
MOV             R0, #0
ADR             R5, dword_25818
LDRD            R4, R5, [R5]
STR             R0, [R3,#0x48]
STRD            R4, R5, [R3,#8]
ADR             R5, dword_25820
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x10]
ADR             R5, dword_25828
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x18]
ADR             R5, dword_25830
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x20]
ADR             R5, dword_25838
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x28]
ADR             R5, dword_25840
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x30]
ADR             R5, dword_25848
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x38]
ADR             R5, dword_25850
LDRD            R4, R5, [R5]
STRD            R4, R5, [R3,#0x40]
POP             {R4-R6,PC}
; End of function sub_25784

dword_25818 DCD 0xF3BCC908
DCD 0x6A09E667
dword_25820 DCD 0x84CAA73B
DCD 0xBB67AE85
dword_25828 DCD 0xFE94F82B
DCD 0x3C6EF372
dword_25830 DCD 0x5F1D36F1
DCD 0xA54FF53A
dword_25838 DCD 0xADE682D1
DCD 0x510E527F
dword_25840 DCD 0x2B3E6C1F
DCD 0x9B05688C
dword_25848 DCD 0xFB41BD6B
DCD 0x1F83D9AB
dword_25850 DCD 0x137E2179
DCD 0x5BE0CD19
off_25858 DCD aSrcHashesSha2S_0 ; "src/hashes/sha2/sha512.c"
off_2585C DCD aMdNull   ; "md != NULL"



; int __fastcall sub_25860(__int64 *, char *src, unsigned int)
sub_25860
PUSH            {R4-R8,LR}
SUBS            R4, R0, #0
BNE             loc_2587C
LDR             R1, =aSrcHashesSha2S_0 ; "src/hashes/sha2/sha512.c"
MOV             R2, #0xC4
LDR             R0, =aMdNull ; "md != NULL"

loc_25878
BL              sub_26EB8

loc_2587C
CMP             R1, #0
MOV             R6, R1
MOVEQ           R2, #0xC4
LDREQ           R1, =aSrcHashesSha2S_0 ; "src/hashes/sha2/sha512.c"
LDREQ           R0, =aInNull ; "in != NULL"
BEQ             loc_25878
LDR             R3, [R4,#0x48]
CMP             R3, #0x80
BHI             loc_25998
MOV             R5, R2
LDRD            R2, R3, [R4]
ADDS            R0, R2, R5
ADC             R1, R3, #0
CMP             R3, R1
CMPEQ           R2, R0
ADDLS           R8, R4, #0x4C ; 'L'
BLS             loc_2591C
MOV             R0, #0x19
POP             {R4-R8,PC}

loc_258C8
LDR             R0, [R4,#0x48]
CMP             R5, #0x7F
MOVLS           R3, #0
MOVHI           R3, #1
CMP             R0, #0
MOVNE           R3, #0
CMP             R3, #0
BEQ             loc_2592C
MOV             R1, R6
MOV             R0, R4
BL              sub_25210
CMP             R0, #0
POPNE           {R4-R8,PC}
LDR             R3, [R4]
ADD             R6, R6, #0x80
LDR             R2, [R4,#4]
SUB             R5, R5, #0x80
ADDS            R3, R3, #0x400
ADC             R2, R2, #0
STR             R3, [R4]
STR             R2, [R4,#4]

loc_2591C
CMP             R5, #0
BNE             loc_258C8
MOV             R0, R5
POP             {R4-R8,PC}

loc_2592C
RSB             R7, R0, #0x80
MOV             R1, R6  ; src
CMP             R7, R5
ADD             R0, R8, R0 ; dest
MOVCS           R7, R5
MOV             R2, R7  ; n
ADD             R6, R6, R7
BL              memcpy
LDR             R3, [R4,#0x48]
SUB             R5, R5, R7
ADD             R3, R7, R3
CMP             R3, #0x80
STR             R3, [R4,#0x48]
BNE             loc_2591C
MOV             R1, R8
MOV             R0, R4
BL              sub_25210
CMP             R0, #0
POPNE           {R4-R8,PC}
LDR             R3, [R4]
LDR             R2, [R4,#4]
STR             R0, [R4,#0x48]
ADDS            R3, R3, #0x400
ADC             R2, R2, #0
STR             R3, [R4]
STR             R2, [R4,#4]
B               loc_2591C

loc_25998
MOV             R0, #0x10
POP             {R4-R8,PC}
; End of function sub_25860

off_259A0 DCD aSrcHashesSha2S_0 ; "src/hashes/sha2/sha512.c"
off_259A4 DCD aMdNull   ; "md != NULL"
off_259A8 DCD aInNull   ; "in != NULL"



; int __fastcall sub_259AC(int, int, unsigned int *)
sub_259AC

var_84= -0x84

PUSH            {R4-R11,LR}
SUBS            R6, R0, #0
SUB             SP, SP, #0x104
BNE             loc_259CC
LDR             R1, =aSrcMacHmacHmac ; "src/mac/hmac/hmac_done.c"
MOV             R2, #0x21 ; '!'
LDR             R0, =aHmacNull ; "hmac != NULL"

loc_259C8
BL              sub_26EB8

loc_259CC
CMP             R1, #0
MOV             R9, R1
MOVEQ           R2, #0x22 ; '"'
LDREQ           R1, =aSrcMacHmacHmac ; "src/mac/hmac/hmac_done.c"
LDREQ           R0, =aOutNull ; "out != NULL"
BEQ             loc_259C8
LDR             R10, [R6,#0xD0]
MOV             R7, R2
MOV             R0, R10
BL              sub_26FBC
SUBS            R4, R0, #0
BNE             loc_25A30
LDR             R5, =dword_4C47C
MOV             R11, #0x68 ; 'h'
ADD             R1, SP, #0x104+var_84
MOV             R0, R6
MLA             R11, R11, R10, R5
LDR             R3, [R11,#0x5C]
LDR             R8, [R11,#8]
BLX             R3
SUBS            R4, R0, #0
LDREQ           R2, [R11,#0xC]
BEQ             loc_25A50

loc_25A28               ; ptr
LDR             R0, [R6,#0x1A8]
BL              free

loc_25A30
MOV             R0, R4
ADD             SP, SP, #0x104
POP             {R4-R11,PC}

loc_25A3C
LDR             R3, [R6,#0x1A8]
LDRB            R3, [R3,R4]
EOR             R3, R3, #0x5C ; '\'
STRB            R3, [SP,R4]
ADD             R4, R4, #1

loc_25A50
CMP             R2, R4
BNE             loc_25A3C
MOV             R3, #0x68 ; 'h'
MOV             R0, R6
MLA             R5, R3, R10, R5
LDR             R3, [R5,#0x54]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_25A28
LDR             R3, [R5,#0x58]
MOV             R1, SP
LDR             R2, [R5,#0xC]
MOV             R0, R6
BLX             R3
SUBS            R4, R0, #0
BNE             loc_25A28
LDR             R3, [R5,#0x58]
MOV             R2, R8
ADD             R1, SP, #0x104+var_84
MOV             R0, R6
BLX             R3
SUBS            R4, R0, #0
BNE             loc_25A28
LDR             R3, [R5,#0x5C]
MOV             R1, SP
MOV             R0, R6
BLX             R3
SUBS            R4, R0, #0
MOVEQ           R3, R4
BNE             loc_25A28

loc_25AC8
CMP             R3, R8
BNE             loc_25AD8

loc_25AD0
STR             R3, [R7]
B               loc_25A28

loc_25AD8
LDR             R2, [R7]
CMP             R2, R3
BLS             loc_25AD0
LDRB            R2, [SP,R3]
STRB            R2, [R9,R3]
ADD             R3, R3, #1
B               loc_25AC8
; End of function sub_259AC

off_25AF4 DCD aSrcMacHmacHmac ; "src/mac/hmac/hmac_done.c"
off_25AF8 DCD aHmacNull ; "hmac != NULL"
off_25AFC DCD aOutNull  ; "out != NULL"
off_25B00 DCD dword_4C47C



; int __fastcall sub_25B04(int, unsigned int, const void *, size_t)
sub_25B04

var_90= -0x90
var_84= -0x84
var_80= -0x80
var_s0=  0

PUSH            {R4-R10,LR}
SUBS            R5, R0, #0
SUB             SP, SP, #0x90
BNE             loc_25B24
LDR             R1, =aSrcMacHmacHmac_0 ; "src/mac/hmac/hmac_init.c"
MOV             R2, #0x23 ; '#'
LDR             R0, =aHmacNull ; "hmac != NULL"

loc_25B20
BL              sub_26EB8

loc_25B24
CMP             R2, #0
MOV             R10, R2
MOVEQ           R2, #0x24 ; '$'
LDREQ           R1, =aSrcMacHmacHmac_0 ; "src/mac/hmac/hmac_init.c"
LDREQ           R0, =(aSkeyNull+1) ; "key != NULL"
BEQ             loc_25B20
MOV             R0, R1
MOV             R4, R1
MOV             R8, R3
BL              sub_26FBC
SUBS            R6, R0, #0
BNE             loc_25C40
CMP             R8, #0
STR             R4, [R5,#0xD0]
MOVEQ           R6, #3
BEQ             loc_25C40
LDR             R7, =dword_4C47C
MOV             R3, #0x68 ; 'h'
MLA             R3, R3, R4, R7
LDR             R6, [R3,#0xC]
LDR             R9, [R3,#8]
MOV             R0, R6  ; size
BL              malloc
CMP             R0, #0
MOV             R3, R0
STR             R0, [R5,#0x1A8]
MOVEQ           R6, #0xD
BEQ             loc_25C40
CMP             R6, R8
BCS             loc_25C4C
ADD             R2, SP, #0x90+var_s0
MOV             R1, R10
STR             R6, [R2,#-0x84]!
MOV             R0, R4
STR             R2, [SP,#0x90+var_90]
MOV             R2, R8
BL              sub_29768
SUBS            R6, R0, #0
BNE             loc_25C38

loc_25BC0
MOV             R3, #0x68 ; 'h'
MLA             R3, R3, R4, R7
LDR             R1, [R3,#0xC]
CMP             R1, R9
BLS             loc_25BE4
LDR             R0, [R5,#0x1A8]
SUB             R1, R1, R9
ADD             R0, R0, R9
BL              j_j_explicit_bzero

loc_25BE4
MOV             R3, #0x68 ; 'h'
ADD             R0, SP, #0x90+var_80
MLA             R3, R3, R4, R7
LDR             R1, [R3,#0xC]
MOV             R3, #0

loc_25BF8
CMP             R1, R3
BNE             loc_25C60
MOV             R3, #0x68 ; 'h'
MOV             R0, R5
MLA             R4, R3, R4, R7
LDR             R3, [R4,#0x54]
BLX             R3
SUBS            R6, R0, #0
BNE             loc_25C38
LDR             R3, [R4,#0x58]
ADD             R1, SP, #0x90+var_80
LDR             R2, [R4,#0xC]
MOV             R0, R5
BLX             R3
SUBS            R6, R0, #0
BEQ             loc_25C40

loc_25C38               ; ptr
LDR             R0, [R5,#0x1A8]
BL              free

loc_25C40
MOV             R0, R6
ADD             SP, SP, #0x90
POP             {R4-R10,PC}

loc_25C4C               ; n
MOV             R2, R8
MOV             R1, R10 ; src
BL              memcpy
MOV             R9, R8
B               loc_25BC0

loc_25C60
LDR             R2, [R5,#0x1A8]
LDRB            R2, [R2,R3]
EOR             R2, R2, #0x36 ; '6'
STRB            R2, [R3,R0]
ADD             R3, R3, #1
B               loc_25BF8
; End of function sub_25B04

off_25C78 DCD aSrcMacHmacHmac_0 ; "src/mac/hmac/hmac_init.c"
off_25C7C DCD aHmacNull ; "hmac != NULL"
off_25C80 DCD aSkeyNull+1 ; "key != NULL"
off_25C84 DCD dword_4C47C



; int __fastcall sub_25C88(int, int, int)
sub_25C88
PUSH            {R4-R6,LR}
SUBS            R4, R0, #0
BNE             loc_25CA4
LDR             R1, =aSrcMacHmacHmac_1 ; "src/mac/hmac/hmac_process.c"
MOV             R2, #0x1C
LDR             R0, =aHmacNull ; "hmac != NULL"

loc_25CA0
BL              sub_26EB8

loc_25CA4
CMP             R1, #0
MOV             R5, R1
MOVEQ           R2, #0x1D
LDREQ           R1, =aSrcMacHmacHmac_1 ; "src/mac/hmac/hmac_process.c"
LDREQ           R0, =aInNull ; "in != NULL"
BEQ             loc_25CA0
LDR             R0, [R4,#0xD0]
MOV             R6, R2
BL              sub_26FBC
CMP             R0, #0
POPNE           {R4-R6,PC}
LDR             R3, [R4,#0xD0]
MOV             R1, #0x68 ; 'h'
LDR             R2, =dword_4C47C
MOV             R0, R4
MLA             R3, R1, R3, R2
MOV             R2, R6
MOV             R1, R5
POP             {R4-R6,LR}
LDR             R3, [R3,#0x58]
BX              R3
; End of function sub_25C88

off_25CF8 DCD aSrcMacHmacHmac_1 ; "src/mac/hmac/hmac_process.c"
off_25CFC DCD aHmacNull ; "hmac != NULL"
off_25D00 DCD aInNull   ; "in != NULL"
off_25D04 DCD dword_4C47C



; int __fastcall sub_25D08(int)
sub_25D08
CMP             R0, #0
BEQ             loc_25D30
CMN             R0, #2
BEQ             loc_25D2C
CMN             R0, #3
MOVEQ           R0, #2
BEQ             loc_25D30
MOV             R0, #1
BX              LR

loc_25D2C
MOV             R0, #1

loc_25D30
LDR             R3, =dword_39BA4
ADD             R0, R3, R0,LSL#3
LDR             R0, [R0,#4]
BX              LR
; End of function sub_25D08

off_25D40 DCD dword_39BA4
; [00000004 BYTES: COLLAPSED FUNCTION j_free_1]
CMP             R0, #0
BNE             loc_25D64
PUSH            {R4,LR}
MOV             R2, #0x70 ; 'p'
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_25D64
LDR             R0, [R0]
BX              LR
off_25D6C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_25D70 DCD aANull    ; "a != NULL"
SUBS            R2, R0, #0
BNE             loc_25D90
PUSH            {R4,LR}
MOV             R2, #0x68 ; 'h'
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_25D90
LDR             R3, [R2]
CMP             R1, #0
CMPGE           R3, R1
LDRGT           R3, [R2,#0xC]
MOVGT           R0, #1
MOVLE           R0, #0
LDRGT           R0, [R3,R1,LSL#2]
BX              LR
off_25DB0 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_25DB4 DCD aANull    ; "a != NULL"



; int __fastcall sub_25DB8(int *, int)
sub_25DB8
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_25DD4
MOV             R2, #0x1A0
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_25DD4
BL              sub_2DB1C
POP             {R4,LR}
B               sub_25D08
; End of function sub_25DB8

off_25DE0 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_25DE4 DCD aANull    ; "a != NULL"



; int __fastcall sub_25DE8(int *, int *, int *, int *)
sub_25DE8
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_25E04
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0x140
LDR             R0, =aANull ; "a != NULL"

loc_25E00
BL              sub_26EB8

loc_25E04
CMP             R1, #0
MOVWEQ          R2, #0x141
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_25E00
CMP             R2, #0
MOVWEQ          R2, #0x142
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_25E00
CMP             R3, #0
MOVWEQ          R2, #0x143
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aMdNull+1) ; "d != NULL"
BEQ             loc_25E00
BL              sub_2E954
POP             {R4,LR}
B               sub_25D08
; End of function sub_25DE8

off_25E4C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_25E50 DCD aANull    ; "a != NULL"
off_25E54 DCD aBNull    ; "b != NULL"
off_25E58 DCD aHmacNull+3 ; "c != NULL"
off_25E5C DCD aMdNull+1 ; "d != NULL"



; int __fastcall sub_25E60(int *, int *, int *, int *)
sub_25E60
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_25E7C
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x137
LDR             R0, =aANull ; "a != NULL"

loc_25E78
BL              sub_26EB8

loc_25E7C
CMP             R1, #0
MOVEQ           R2, #0x138
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_25E78
CMP             R2, #0
MOVWEQ          R2, #0x139
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_25E78
CMP             R3, #0
MOVWEQ          R2, #0x13A
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aMdNull+1) ; "d != NULL"
BEQ             loc_25E78
BL              sub_29B48
POP             {R4,LR}
B               sub_25D08
; End of function sub_25E60

off_25EC4 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_25EC8 DCD aANull    ; "a != NULL"
off_25ECC DCD aBNull    ; "b != NULL"
off_25ED0 DCD aHmacNull+3 ; "c != NULL"
off_25ED4 DCD aMdNull+1 ; "d != NULL"



; int __fastcall sub_25ED8(int *, int, _DWORD *)
sub_25ED8
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_25EF4
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0x194
LDR             R0, =aANull ; "a != NULL"

loc_25EF0
BL              sub_26EB8

loc_25EF4
CMP             R2, #0
MOV             R4, R2
MOVWEQ          R2, #0x195
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_25EF0
CMP             R1, #0
MOVEQ           R1, #0x28 ; '('
BL              sub_2CDA4
BL              sub_25D08
LDR             R3, [R4]
SUB             R3, R3, #1
CLZ             R3, R3
MOV             R3, R3,LSR#5
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_25ED8

off_25F34 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_25F38 DCD aANull    ; "a != NULL"
off_25F3C DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_25F40(int *, int *, int, int *)
sub_25F40
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_25F5C
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x18A
LDR             R0, =aANull ; "a != NULL"

loc_25F58
BL              sub_26EB8

loc_25F5C
CMP             R1, #0
MOVWEQ          R2, #0x18B
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_25F58
CMP             R2, #0
MOVEQ           R2, #0x18C
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_25F58
CMP             R3, #0
MOVWEQ          R2, #0x18D
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aMdNull+1) ; "d != NULL"
BEQ             loc_25F58
BL              sub_2AB08
POP             {R4,LR}
B               sub_25D08
; End of function sub_25F40

off_25FA4 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_25FA8 DCD aANull    ; "a != NULL"
off_25FAC DCD aBNull    ; "b != NULL"
off_25FB0 DCD aHmacNull+3 ; "c != NULL"
off_25FB4 DCD aMdNull+1 ; "d != NULL"



; int __fastcall sub_25FB8(int *, int *, int *)
sub_25FB8
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_25FD4
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0x17C
LDR             R0, =aANull ; "a != NULL"

loc_25FD0
BL              sub_26EB8

loc_25FD4
CMP             R1, #0
MOVWEQ          R2, #0x17D
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_25FD0
CMP             R2, #0
MOVWEQ          R2, #0x17E
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_25FD0
LDR             R2, [R2]
BL              sub_2C7D0
POP             {R4,LR}
B               sub_25D08
; End of function sub_25FB8

off_2600C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26010 DCD aANull    ; "a != NULL"
off_26014 DCD aBNull    ; "b != NULL"
off_26018 DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_2601C(int *, int *)
sub_2601C
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_26038
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0x174
LDR             R0, =aANull ; "a != NULL"

loc_26034
BL              sub_26EB8

loc_26038
CMP             R1, #0
MOVWEQ          R2, #0x175
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26034
BL              sub_2C528
POP             {R4,LR}
B               sub_25D08
; End of function sub_2601C

off_26058 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_2605C DCD aANull    ; "a != NULL"
off_26060 DCD aBNull    ; "b != NULL"



; int __fastcall sub_26064(int, void **)
sub_26064
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
BNE             loc_26080
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x165
LDR             R0, =aANull ; "a != NULL"

loc_2607C
BL              sub_26EB8

loc_26080
CMP             R1, #0
MOV             R4, R1
MOVWEQ          R2, #0x166
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_2607C
MOV             R1, #4  ; size
MOV             R0, #1  ; nmemb
BL              calloc
CMP             R0, #0
MOV             R1, R0
STR             R0, [R4]
MOVEQ           R5, #0xD
BEQ             loc_260D4
MOV             R0, R5
BL              sub_2C930
BL              sub_25D08
SUBS            R5, R0, #0
BEQ             loc_260D4
LDR             R0, [R4] ; ptr
BL              free

loc_260D4
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_26064

off_260DC DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_260E0 DCD aANull    ; "a != NULL"
off_260E4 DCD aBNull    ; "b != NULL"



; int __fastcall sub_260E8(int *, int, int *)
sub_260E8
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_26104
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x15B
LDR             R0, =aANull ; "a != NULL"

loc_26100
BL              sub_26EB8

loc_26104
CMP             R1, #0
MOVEQ           R2, #0x15C
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26100
CMP             R2, #0
MOVWEQ          R2, #0x15D
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_26100
BL              sub_2BBA8
POP             {R4,LR}
B               sub_25D08
; End of function sub_260E8

off_26138 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_2613C DCD aANull    ; "a != NULL"
off_26140 DCD aBNull    ; "b != NULL"
off_26144 DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_26148(int *, int *, int *)
sub_26148
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_26164
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x152
LDR             R0, =aANull ; "a != NULL"

loc_26160
BL              sub_26EB8

loc_26164
CMP             R1, #0
MOVWEQ          R2, #0x153
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26160
CMP             R2, #0
MOVEQ           R2, #0x154
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_26160
BL              sub_2E6F8
POP             {R4,LR}
B               sub_25D08
; End of function sub_26148

off_26198 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_2619C DCD aANull    ; "a != NULL"
off_261A0 DCD aBNull    ; "b != NULL"
off_261A4 DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_261A8(int *, int *, int *, int *)
sub_261A8
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_261C4
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x149
LDR             R0, =aANull ; "a != NULL"

loc_261C0
BL              sub_26EB8

loc_261C4
CMP             R1, #0
MOVWEQ          R2, #0x14A
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_261C0
CMP             R2, #0
MOVWEQ          R2, #0x14B
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_261C0
CMP             R3, #0
MOVEQ           R2, #0x14C
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aMdNull+1) ; "d != NULL"
BEQ             loc_261C0
BL              sub_2CCE0
POP             {R4,LR}
B               sub_25D08
; End of function sub_261A8

off_2620C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26210 DCD aANull    ; "a != NULL"
off_26214 DCD aBNull    ; "b != NULL"
off_26218 DCD aHmacNull+3 ; "c != NULL"
off_2621C DCD aMdNull+1 ; "d != NULL"



; int __fastcall sub_26220(int *, int *, int *, int)
sub_26220
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_2623C
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x12F
LDR             R0, =aANull ; "a != NULL"

loc_26238
BL              sub_26EB8

loc_2623C
CMP             R1, #0
MOVEQ           R2, #0x130
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26238
CMP             R2, #0
MOVWEQ          R2, #0x131
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_26238
BL              sub_2C074
POP             {R4,LR}
B               sub_25D08
; End of function sub_26220

off_26270 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26274 DCD aANull    ; "a != NULL"
off_26278 DCD aBNull    ; "b != NULL"
off_2627C DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_26280(int *, int *, int *)
sub_26280
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_2629C
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x126
LDR             R0, =aANull ; "a != NULL"

loc_26298
BL              sub_26EB8

loc_2629C
CMP             R1, #0
MOVWEQ          R2, #0x127
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26298
CMP             R2, #0
MOVEQ           R2, #0x128
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_26298
BL              sub_2B818
POP             {R4,LR}
B               sub_25D08
; End of function sub_26280

off_262D0 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_262D4 DCD aANull    ; "a != NULL"
off_262D8 DCD aBNull    ; "b != NULL"
off_262DC DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_262E0(int, unsigned int, unsigned int *)
sub_262E0

var_4= -4

CMP             R0, #0
PUSH            {R0,R1,R4,LR}
BNE             loc_262FC
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x119
LDR             R0, =aANull ; "a != NULL"

loc_262F8
BL              sub_26EB8

loc_262FC
CMP             R2, #0
MOV             R4, R2
MOVWEQ          R2, #0x11A
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_262F8
ADD             R2, SP, #8+var_4
BL              sub_2C51C
BL              sub_25D08
CMP             R0, #0
LDREQ           R3, [SP,#8+var_4]
STREQ           R3, [R4]
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_262E0

off_26334 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26338 DCD aANull    ; "a != NULL"
off_2633C DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_26340(int *, int *)
sub_26340
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_2635C
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x10E
LDR             R0, =aANull ; "a != NULL"

loc_26358
BL              sub_26EB8

loc_2635C
CMP             R1, #0
MOVWEQ          R2, #0x10F
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26358
BL              sub_2A350
POP             {R4,LR}
B               sub_25D08
; End of function sub_26340

off_2637C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26380 DCD aANull    ; "a != NULL"
off_26384 DCD aBNull    ; "b != NULL"



; int __fastcall sub_26388(int *, int *, int *, int *)
sub_26388
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_263A4
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOVW            R2, #0x107
LDR             R0, =aANull ; "a != NULL"

loc_263A0
BL              sub_26EB8

loc_263A4
CMP             R1, #0
MOVEQ           R2, #0x108
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_263A0
BL              sub_2A5A8
POP             {R4,LR}
B               sub_25D08
; End of function sub_26388

off_263C4 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_263C8 DCD aANull    ; "a != NULL"
off_263CC DCD aBNull    ; "b != NULL"



; int __fastcall sub_263D0(int *, int *)
sub_263D0
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_263EC
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xFF
LDR             R0, =aANull ; "a != NULL"

loc_263E8
BL              sub_26EB8

loc_263EC
CMP             R1, #0
MOVEQ           R2, #0x100
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_263E8
BL              sub_2E6C0
POP             {R4,LR}
B               sub_25D08
; End of function sub_263D0

off_2640C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26410 DCD aANull    ; "a != NULL"
off_26414 DCD aBNull    ; "b != NULL"



; int __fastcall sub_26418(int *, unsigned int, int *)
sub_26418
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_26434
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xF7
LDR             R0, =aANull ; "a != NULL"

loc_26430
BL              sub_26EB8

loc_26434
CMP             R2, #0
MOVEQ           R2, #0xF8
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_26430
BL              sub_2CBE4
POP             {R4,LR}
B               sub_25D08
; End of function sub_26418

off_26454 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26458 DCD aANull    ; "a != NULL"
off_2645C DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_26460(int *, int *, int *)
sub_26460
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_2647C
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xEF
LDR             R0, =aANull ; "a != NULL"

loc_26478
BL              sub_26EB8

loc_2647C
CMP             R1, #0
MOVEQ           R2, #0xF0
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26478
CMP             R2, #0
MOVEQ           R2, #0xF1
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_26478
BL              sub_2CB6C
POP             {R4,LR}
B               sub_25D08
; End of function sub_26460

off_264B0 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_264B4 DCD aANull    ; "a != NULL"
off_264B8 DCD aBNull    ; "b != NULL"
off_264BC DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_264C0(int *, unsigned int, int *)
sub_264C0
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_264DC
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xE7
LDR             R0, =aANull ; "a != NULL"

loc_264D8
BL              sub_26EB8

loc_264DC
CMP             R2, #0
MOVEQ           R2, #0xE8
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_264D8
BL              sub_2E7D4
POP             {R4,LR}
B               sub_25D08
; End of function sub_264C0

off_264FC DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26500 DCD aANull    ; "a != NULL"
off_26504 DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_26508(int *, int *, int *)
sub_26508
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_26524
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xDF
LDR             R0, =aANull ; "a != NULL"

loc_26520
BL              sub_26EB8

loc_26524
CMP             R1, #0
MOVEQ           R2, #0xE0
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26520
CMP             R2, #0
MOVEQ           R2, #0xE1
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_26520
BL              sub_2E764
POP             {R4,LR}
B               sub_25D08
; End of function sub_26508

off_26558 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_2655C DCD aANull    ; "a != NULL"
off_26560 DCD aBNull    ; "b != NULL"
off_26564 DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_26568(int *, unsigned int, int *)
sub_26568
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_26584
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xD7
LDR             R0, =aANull ; "a != NULL"

loc_26580
BL              sub_26EB8

loc_26584
CMP             R2, #0
MOVEQ           R2, #0xD8
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_26580
BL              sub_2999C
POP             {R4,LR}
B               sub_25D08
; End of function sub_26568

off_265A4 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_265A8 DCD aANull    ; "a != NULL"
off_265AC DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_265B0(int *, int *, int *)
sub_265B0
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_265CC
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xCF
LDR             R0, =aANull ; "a != NULL"

loc_265C8
BL              sub_26EB8

loc_265CC
CMP             R1, #0
MOVEQ           R2, #0xD0
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_265C8
CMP             R2, #0
MOVEQ           R2, #0xD1
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =(aHmacNull+3) ; "c != NULL"
BEQ             loc_265C8
BL              sub_29934
POP             {R4,LR}
B               sub_25D08
; End of function sub_265B0

off_26600 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26604 DCD aANull    ; "a != NULL"
off_26608 DCD aBNull    ; "b != NULL"
off_2660C DCD aHmacNull+3 ; "c != NULL"



; int __fastcall sub_26610(int, unsigned __int8 *, int)
sub_26610
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_2662C
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xC7
LDR             R0, =aANull ; "a != NULL"

loc_26628
BL              sub_26EB8

loc_2662C
CMP             R1, #0
MOVEQ           R2, #0xC8
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26628
BL              sub_2DE30
POP             {R4,LR}
B               sub_25D08
; End of function sub_26610

off_2664C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26650 DCD aANull    ; "a != NULL"
off_26654 DCD aBNull    ; "b != NULL"



; int __fastcall sub_26658(int *, _BYTE *)
sub_26658
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_26674
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xBF
LDR             R0, =aANull ; "a != NULL"

loc_26670
BL              sub_26EB8

loc_26674
CMP             R1, #0
MOVEQ           R2, #0xC0
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26670
BL              sub_2EACC
POP             {R4,LR}
B               sub_25D08
; End of function sub_26658

off_26694 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26698 DCD aANull    ; "a != NULL"
off_2669C DCD aBNull    ; "b != NULL"
CMP             R0, #0
BNE             loc_266BC
PUSH            {R4,LR}
MOV             R2, #0xB8
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_266BC
B               sub_2EB68
off_266C0 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_266C4 DCD aANull    ; "a != NULL"



; int __fastcall sub_266C8(int *, _BYTE *, unsigned int)
sub_266C8
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_266E4
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xB0
LDR             R0, =aANull ; "a != NULL"

loc_266E0
BL              sub_26EB8

loc_266E4
CMP             R1, #0
MOVEQ           R2, #0xB1
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_266E0
BL              sub_2E9C8
POP             {R4,LR}
B               sub_25D08
; End of function sub_266C8

off_26704 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26708 DCD aANull    ; "a != NULL"
off_2670C DCD aBNull    ; "b != NULL"



; int __fastcall sub_26710(int *, _BYTE *, signed int)
sub_26710
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_2672C
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0xA8
LDR             R0, =aANull ; "a != NULL"

loc_26728
BL              sub_26EB8

loc_2672C
CMP             R1, #0
MOVEQ           R2, #0xA9
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26728
BL              sub_2DCD0
POP             {R4,LR}
B               sub_25D08
; End of function sub_26710

off_2674C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26750 DCD aANull    ; "a != NULL"
off_26754 DCD aBNull    ; "b != NULL"



; int __fastcall sub_26758(_DWORD *, int)
sub_26758
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_26774
MOV             R2, #0x9F
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_26774
BL              sub_298D4
POP             {R4,LR}
B               sub_25D08
; End of function sub_26758

off_26780 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26784 DCD aANull    ; "a != NULL"
CMP             R0, #0
BNE             loc_267A4
PUSH            {R4,LR}
MOV             R2, #0x98
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_267A4
B               sub_2A0A4
off_267A8 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_267AC DCD aANull    ; "a != NULL"
CMP             R0, #0
BNE             loc_267CC
PUSH            {R4,LR}
MOV             R2, #0x92
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_267CC
B               sub_2A310
off_267D0 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_267D4 DCD aANull    ; "a != NULL"



; int __fastcall sub_267D8(int, unsigned int)
sub_267D8
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_267F4
MOV             R2, #0x86
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_267F4
BL              sub_29E48
ADD             R0, R0, #1
CMP             R0, #2
LDRLS           R3, =dword_39BA4
ADDLS           R0, R3, R0
LDRSBLS         R0, [R0,#0x18]
MOVHI           R0, #0
POP             {R4,PC}
; End of function sub_267D8

off_26814 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26818 DCD aANull    ; "a != NULL"
off_2681C DCD dword_39BA4



; int __fastcall sub_26820(int *, int *)
sub_26820
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_2683C
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0x78 ; 'x'
LDR             R0, =aANull ; "a != NULL"

loc_26838
BL              sub_26EB8

loc_2683C
CMP             R1, #0
MOVEQ           R2, #0x79 ; 'y'
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26838
BL              sub_29E00
ADD             R0, R0, #1
CMP             R0, #2
LDRLS           R3, =byte_39BBC
LDRSBLS         R0, [R3,R0]
MOVHI           R0, #0
POP             {R4,PC}
; End of function sub_26820

off_2686C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26870 DCD aANull    ; "a != NULL"
off_26874 DCD aBNull    ; "b != NULL"
off_26878 DCD byte_39BBC
CMP             R0, #0
BNE             loc_26898
PUSH            {R4,LR}
MOV             R2, #0x61 ; 'a'
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_26898
B               loc_2BA0C
off_2689C DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_268A0 DCD aANull    ; "a != NULL"



; int __fastcall sub_268A4(int *, unsigned int)
sub_268A4
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_268C0
MOV             R2, #0x5B ; '['
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_268C0
BL              sub_2E65C
POP             {R4,LR}
B               sub_25D08
; End of function sub_268A4

off_268CC DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_268D0 DCD aANull    ; "a != NULL"



; int __fastcall sub_268D4(int *, int *)
sub_268D4
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_268F0
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0x4B ; 'K'
LDR             R0, =aANull ; "a != NULL"

loc_268EC
BL              sub_26EB8

loc_268F0
CMP             R1, #0
MOVEQ           R2, #0x4C ; 'L'
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_268EC
BL              sub_2A25C
POP             {R4,LR}
B               sub_25D08
; End of function sub_268D4

off_26910 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26914 DCD aANull    ; "a != NULL"
off_26918 DCD aBNull    ; "b != NULL"



; int __fastcall sub_2691C(int *, int *)
sub_2691C
CMP             R0, #0
PUSH            {R4,LR}
BNE             loc_26938
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
MOV             R2, #0x44 ; 'D'
LDR             R0, =aANull ; "a != NULL"

loc_26934
BL              sub_26EB8

loc_26938
CMP             R1, #0
MOVEQ           R2, #0x45 ; 'E'
LDREQ           R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDREQ           R0, =aBNull ; "b != NULL"
BEQ             loc_26934
BL              sub_2CD58
POP             {R4,LR}
B               sub_25D08
; End of function sub_2691C

off_26958 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_2695C DCD aANull    ; "a != NULL"
off_26960 DCD aBNull    ; "b != NULL"



; void __fastcall sub_26964(void *)
sub_26964
PUSH            {R4,LR}
SUBS            R4, R0, #0
BNE             loc_26980
MOV             R2, #0x3D ; '='
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_26980
BL              sub_29D74
MOV             R0, R4
POP             {R4,LR}
B               free
; End of function sub_26964

off_26990 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_26994 DCD aANull    ; "a != NULL"



; int __fastcall sub_26998(void **)
sub_26998
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
BNE             loc_269B4
MOV             R2, #0x2E ; '.'
LDR             R1, =aSrcMathLtmDesc ; "src/math/ltm_desc.c"
LDR             R0, =aANull ; "a != NULL"
BL              sub_26EB8

loc_269B4               ; size
MOV             R1, #0x10
MOV             R0, #1  ; nmemb
BL              calloc
CMP             R0, #0
STR             R0, [R5]
MOVEQ           R4, #0xD
BEQ             loc_269E8
BL              sub_2BAD0
BL              sub_25D08
SUBS            R4, R0, #0
BEQ             loc_269E8
LDR             R0, [R5] ; ptr
BL              free

loc_269E8
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_26998

off_269F0 DCD aSrcMathLtmDesc ; "src/math/ltm_desc.c"
off_269F4 DCD aANull    ; "a != NULL"



; int __fastcall sub_269F8(int **, int *)
sub_269F8
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
BL              sub_26998
CMP             R0, #0
BNE             loc_26A20
LDR             R1, [R5]
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_268D4

loc_26A20
MOV             R0, #0xD
POP             {R4-R6,PC}
; End of function sub_269F8




; int sub_26A28(int result, ...)
sub_26A28

var_C= -0xC
var_8= -8
varg_r0=  0x14
varg_r1=  0x18
varg_r2=  0x1C
varg_r3=  0x20

PUSH            {R0-R3}
PUSH            {R0-R2,R4-R7,LR}
MOV             R4, #0
ADD             R6, SP, #0xC+varg_r1
LDR             R5, [SP,#0xC+varg_r0]
LDR             R7, =dword_4C684
STR             R6, [SP,#0xC+var_C]
MOV             R0, R5

loc_26A48
CMP             R0, #0
BEQ             loc_26A70
LDR             R3, [R7,#(off_4C68C - 0x4C684)]
BLX             R3
CMP             R0, #0
BEQ             loc_26AA0
STR             R6, [SP,#0xC+var_8]

loc_26A64
SUBS            R4, R4, #1
BCS             loc_26A80
MOV             R0, #0xD

loc_26A70
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
ADD             SP, SP, #0x10
BX              LR

loc_26A80
LDR             R3, [R7,#(off_4C694 - 0x4C684)]
LDR             R0, [R5]
BLX             R3
LDR             R3, [SP,#0xC+var_8]
ADD             R2, R3, #4
LDR             R5, [R3]
STR             R2, [SP,#0xC+var_8]
B               loc_26A64

loc_26AA0
LDR             R3, [SP,#0xC+var_C]
ADD             R4, R4, #1
ADD             R2, R3, #4
LDR             R0, [R3]
STR             R2, [SP,#0xC+var_C]
B               loc_26A48
; End of function sub_26A28

off_26AB8 DCD dword_4C684



; int sub_26ABC(int result, ...)
sub_26ABC

var_4= -4
varg_r0=  8
varg_r1=  0xC
varg_r2=  0x10
varg_r3=  0x14

PUSH            {R0-R3}
PUSH            {R0,R1,R4,LR}
ADD             R3, SP, #8+varg_r1
LDR             R0, [SP,#8+varg_r0]
LDR             R4, =dword_4C684
STR             R3, [SP,#8+var_4]

loc_26AD4
CMP             R0, #0
BNE             loc_26AEC
ADD             SP, SP, #8
POP             {R4,LR}
ADD             SP, SP, #0x10
BX              LR

loc_26AEC
LDR             R3, [R4,#(off_4C694 - 0x4C684)]
BLX             R3
LDR             R3, [SP,#8+var_4]
ADD             R2, R3, #4
LDR             R0, [R3]
STR             R2, [SP,#8+var_4]
B               loc_26AD4
; End of function sub_26ABC

off_26B08 DCD dword_4C684



; int sub_26B0C(int result, ...)
sub_26B0C

var_4= -4
varg_r0=  0x10
varg_r1=  0x14
varg_r2=  0x18
varg_r3=  0x1C

PUSH            {R0-R3}
PUSH            {R0,R1,R4-R6,LR}
MOV             R6, #0
ADD             R3, SP, #8+varg_r1
LDR             R4, [SP,#8+varg_r0]
LDR             R5, =dword_4C684
STR             R3, [SP,#8+var_4]

loc_26B28
CMP             R4, #0
BNE             loc_26B40
ADD             SP, SP, #8
POP             {R4-R6,LR}
ADD             SP, SP, #0x10
BX              LR

loc_26B40
LDR             R0, [R4]
CMP             R0, #0
BEQ             loc_26B58
LDR             R3, [R5,#(off_4C694 - 0x4C684)]
BLX             R3
STR             R6, [R4]

loc_26B58
LDR             R3, [SP,#8+var_4]
ADD             R2, R3, #4
LDR             R4, [R3]
STR             R2, [SP,#8+var_4]
B               loc_26B28
; End of function sub_26B0C

off_26B6C DCD dword_4C684



; int __fastcall sub_26B70(unsigned __int8 *, int, int, _DWORD *, int)
sub_26B70

arg_0=  0x24

CMP             R0, #0
PUSH            {R3-R11,LR}
LDR             R6, [SP,#4+arg_0]
BNE             loc_26B90
LDR             R1, =aSrcMiscBase64B ; "src/misc/base64/base64_decode.c"
MOV             R2, #0x56 ; 'V'
LDR             R0, =aInNull ; "in != NULL"

loc_26B8C
BL              sub_26EB8

loc_26B90
CMP             R2, #0
MOVEQ           R2, #0x57 ; 'W'
LDREQ           R1, =aSrcMiscBase64B ; "src/misc/base64/base64_decode.c"
LDREQ           R0, =aOutNull ; "out != NULL"
BEQ             loc_26B8C
CMP             R3, #0
BEQ             loc_26C48
LDR             R9, =byte_39CC3
MOV             R5, #0
ADD             R1, R0, R1
MOV             R4, R5
MOV             LR, R5
MOV             R12, R5
AND             R10, R6, #1

loc_26BC8
CMP             R1, R0
BNE             loc_26C58
CMP             LR, #0
BEQ             loc_26C3C
CMP             LR, #1
BEQ             loc_26C90
ADD             R5, R5, LR
CMP             R5, #4
MOVEQ           R5, #0
ANDNE           R5, R6, #1
CMP             R5, #0
BNE             loc_26C90
LDR             R0, [R3]
ADD             R1, LR, R4
SUB             R1, R1, #1
CMP             R1, R0
BHI             loc_26CE0
MOV             R1, #0xFFFFFFFA
CMP             LR, #3
MUL             R1, R1, LR
ADD             R1, R1, #0x18
MOV             R12, R12,LSL R1
ADD             R1, R4, #1
MOV             R0, R12,LSR#16
MOVEQ           R12, R12,LSR#8
STRB            R0, [R2,R4]
ADDEQ           R4, R4, #2
MOVNE           R4, R1
STRBEQ          R12, [R2,R1]

loc_26C3C
STR             R4, [R3]
MOV             R0, #0
POP             {R3-R11,PC}

loc_26C48
MOV             R2, #0x58 ; 'X'
LDR             R1, =aSrcMiscBase64B ; "src/misc/base64/base64_decode.c"
LDR             R0, =aOutlenNull ; "outlen != NULL"
B               loc_26B8C

loc_26C58
LDRB            R7, [R0],#1
LDRB            R7, [R9,R7]
CMP             R7, #0xFE
ADDEQ           R5, R5, #1
BEQ             loc_26BC8
CMP             R5, #0
MOVLE           R8, #0
ANDGT           R8, R10, #1
CMP             R8, #0
BNE             loc_26C90
CMP             R7, #0xFF
BNE             loc_26C98
CMP             R6, #0
BEQ             loc_26BC8

loc_26C90
MOV             R0, #7
POP             {R3-R11,PC}

loc_26C98
ADD             LR, LR, #1
ORR             R12, R7, R12,LSL#6
CMP             LR, #4
BNE             loc_26BC8
LDR             LR, [R3]
ADD             R7, R4, #3
CMP             R7, LR
BHI             loc_26CE0
MOV             R11, R12,LSR#16
MOV             LR, R2
STRB            R11, [LR,R4]!
MOV             R4, R12,LSR#8
STRB            R12, [LR,#2]
MOV             R12, R8
STRB            R4, [LR,#1]
MOV             R4, R7
MOV             LR, R8
B               loc_26BC8

loc_26CE0
MOV             R0, #6
POP             {R3-R11,PC}
; End of function sub_26B70

off_26CE8 DCD aSrcMiscBase64B ; "src/misc/base64/base64_decode.c"
off_26CEC DCD aInNull   ; "in != NULL"
off_26CF0 DCD aOutNull  ; "out != NULL"
off_26CF4 DCD byte_39CC3
off_26CF8 DCD aOutlenNull ; "outlen != NULL"



; int __fastcall sub_26CFC(unsigned __int8 *, int, int, _DWORD *)
sub_26CFC

var_C= -0xC

MOV             R12, #0
PUSH            {R0-R2,LR}
STR             R12, [SP,#0xC+var_C]
BL              sub_26B70
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_26CFC




; int __fastcall sub_26D14(unsigned __int8 *, int, int, _DWORD *)
sub_26D14

var_C= -0xC

MOV             R12, #1
PUSH            {R0-R2,LR}
STR             R12, [SP,#0xC+var_C]
BL              sub_26B70
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_26D14




; int __fastcall sub_26D2C(unsigned __int8 *, unsigned int, _BYTE *, unsigned int *)
sub_26D2C
CMP             R0, #0
PUSH            {R4-R8,LR}
BNE             loc_26D48
LDR             R1, =aSrcMiscBase64B_0 ; "src/misc/base64/base64_encode.c"
MOV             R2, #0x25 ; '%'
LDR             R0, =aInNull ; "in != NULL"

loc_26D44
BL              sub_26EB8

loc_26D48
CMP             R2, #0
MOVEQ           R2, #0x26 ; '&'
LDREQ           R1, =aSrcMiscBase64B_0 ; "src/misc/base64/base64_encode.c"
LDREQ           R0, =aOutNull ; "out != NULL"
BEQ             loc_26D44
CMP             R3, #0
MOVEQ           R2, #0x27 ; '''
LDREQ           R1, =aSrcMiscBase64B_0 ; "src/misc/base64/base64_encode.c"
LDREQ           R0, =aOutlenNull ; "outlen != NULL"
BEQ             loc_26D44
LDR             R4, =0xAAAAAAAB
ADD             R6, R1, #2
LDR             LR, [R3]
UMULL           R6, R7, R6, R4
MOV             R12, R7,LSR#1
MOV             R12, R12,LSL#2
ADD             R12, R12, #1
CMP             LR, R12
BCS             loc_26DA0
STR             R12, [R3]
MOV             R0, #6
POP             {R4-R8,PC}

loc_26DA0
UMULL           R4, R5, R1, R4
LDR             R6, =aAbcdefghijklmn ; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...
MOV             R4, R2
MOV             LR, #0
MOV             R5, R5,LSR#1
ADD             R5, R5, R5,LSL#1

loc_26DB8
CMP             R5, LR
MOV             R12, R4
MOV             R7, R0
ADD             R4, R4, #4
ADD             R0, R0, #3
BHI             loc_26E44
CMP             R1, LR
BLS             loc_26E30
LDRB            R0, [R7]
ADD             LR, LR, #1
LDR             R5, =aAbcdefghijklmn ; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...
CMP             R1, LR
LDRBHI          R4, [R7,#1]
MOVLS           R4, #0
CMP             R1, LR
ADD             R12, R12, #4
LDRB            R6, [R5,R0,LSR#2]
MOV             R0, R0,LSL#4
MOVLS           R1, #0x3D ; '='
AND             R0, R0, #0x30 ; '0'
ADD             R0, R5, R0
STRB            R6, [R12,#-4]
LDRB            R0, [R0,R4,LSR#4]
MOVHI           R4, R4,LSL#2
ANDHI           R4, R4, #0x3C ; '<'
LDRBHI          R1, [R5,R4]
STRB            R0, [R12,#-3]
STRB            R1, [R12,#-2]
MOV             R1, #0x3D ; '='
STRB            R1, [R12,#-1]

loc_26E30
MOV             R0, #0
STRB            R0, [R12]
SUB             R12, R12, R2
STR             R12, [R3]
POP             {R4-R8,PC}

loc_26E44
LDRB            R12, [R0,#-3]
ADD             LR, LR, #3
LDRB            R12, [R6,R12,LSR#2]
STRB            R12, [R4,#-4]
LDRB            R12, [R0,#-3]
LDRB            R7, [R0,#-2]
MOV             R12, R12,LSL#4
AND             R12, R12, #0x30 ; '0'
ADD             R12, R6, R12
LDRB            R12, [R12,R7,LSR#4]
STRB            R12, [R4,#-3]
LDRB            R12, [R0,#-2]
LDRB            R7, [R0,#-1]
MOV             R12, R12,LSL#2
AND             R12, R12, #0x3C ; '<'
ADD             R12, R6, R12
LDRB            R12, [R12,R7,LSR#6]
STRB            R12, [R4,#-2]
LDRB            R12, [R0,#-1]
AND             R12, R12, #0x3F ; '?'
LDRB            R12, [R6,R12]
STRB            R12, [R4,#-1]
B               loc_26DB8
; End of function sub_26D2C

off_26EA0 DCD aSrcMiscBase64B_0 ; "src/misc/base64/base64_encode.c"
off_26EA4 DCD aInNull   ; "in != NULL"
off_26EA8 DCD aOutNull  ; "out != NULL"
off_26EAC DCD aOutlenNull ; "outlen != NULL"
dword_26EB0 DCD 0xAAAAAAAB
off_26EB4 DCD aAbcdefghijklmn ; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...


; Attributes: noreturn

; void __fastcall __noreturn sub_26EB8(const char *, const char *, int)
sub_26EB8

var_C= -0xC

PUSH            {R0-R2,LR}
MOV             R3, R2
MOV             R2, R0
LDR             R0, =stderr
STR             R1, [SP,#0xC+var_C]
LDR             R1, =aLtcArgchkSFail ; "LTC_ARGCHK '%s' failure on line %d of f"...
LDR             R0, [R0] ; stream
BL              fprintf
BL              abort
; End of function sub_26EB8

off_26EDC DCD stderr
off_26EE0 DCD aLtcArgchkSFail ; "LTC_ARGCHK '%s' failure on line %d of f"...



; int __fastcall sub_26EE4(const char *)
sub_26EE4
PUSH            {R4-R8,LR}
SUBS            R5, R0, #0
BNE             loc_26F00
MOV             R2, #0x18
LDR             R1, =aSrcMiscCryptCr ; "src/misc/crypt/crypt_find_cipher.c"
LDR             R0, =(aLtcMpNameNull+7) ; "name != NULL"
BL              sub_26EB8

loc_26F00
LDR             R7, =dword_4C754
MOV             R4, #0
MOV             R6, #0x68 ; 'h'

loc_26F0C
MUL             R3, R6, R4
LDR             R0, [R3,R7] ; s1
CMP             R0, #0
BEQ             loc_26F2C
MOV             R1, R5  ; s2
BL              strcmp
CMP             R0, #0
BEQ             loc_26F3C

loc_26F2C
ADD             R4, R4, #1
CMP             R4, #5
BNE             loc_26F0C
MOV             R4, #0xFFFFFFFF

loc_26F3C
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_26EE4

off_26F44 DCD aSrcMiscCryptCr ; "src/misc/crypt/crypt_find_cipher.c"
off_26F48 DCD aLtcMpNameNull+7 ; "name != NULL"
off_26F4C DCD dword_4C754



; int __fastcall sub_26F50(const char *)
sub_26F50
PUSH            {R4-R8,LR}
SUBS            R5, R0, #0
BNE             loc_26F6C
MOV             R2, #0x18
LDR             R1, =aSrcMiscCryptCr_0 ; "src/misc/crypt/crypt_find_hash.c"
LDR             R0, =(aLtcMpNameNull+7) ; "name != NULL"
BL              sub_26EB8

loc_26F6C
LDR             R7, =dword_4C47C
MOV             R4, #0
MOV             R6, #0x68 ; 'h'

loc_26F78
MUL             R3, R6, R4
LDR             R0, [R3,R7] ; s1
CMP             R0, #0
BEQ             loc_26F98
MOV             R1, R5  ; s2
BL              strcmp
CMP             R0, #0
BEQ             loc_26FA8

loc_26F98
ADD             R4, R4, #1
CMP             R4, #5
BNE             loc_26F78
MOV             R4, #0xFFFFFFFF

loc_26FA8
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_26F50

off_26FB0 DCD aSrcMiscCryptCr_0 ; "src/misc/crypt/crypt_find_hash.c"
off_26FB4 DCD aLtcMpNameNull+7 ; "name != NULL"
off_26FB8 DCD dword_4C47C



; int __fastcall sub_26FBC(unsigned int)
sub_26FBC
CMP             R0, #4
BHI             loc_26FE4
MOV             R3, #0x68 ; 'h'
MUL             R0, R3, R0
LDR             R3, =dword_4C47C
LDR             R3, [R3,R0]
CMP             R3, #0
MOVEQ           R0, #0xB
MOVNE           R0, #0
BX              LR

loc_26FE4
MOV             R0, #0xB
BX              LR
; End of function sub_26FBC

off_26FEC DCD dword_4C47C



; int __fastcall sub_26FF0(unsigned __int8 *)
sub_26FF0
SUBS            R1, R0, #0 ; src
PUSH            {R4,LR}
BNE             loc_2700C
MOV             R2, #0x19
LDR             R1, =aSrcMiscCryptCr_1 ; "src/misc/crypt/crypt_register_cipher.c"
LDR             R0, =aCipherNull ; "cipher != NULL"
BL              sub_26EB8

loc_2700C
LDR             R3, =dword_4C754
MOV             R4, #0
MOV             R12, #0x68 ; 'h'
MOV             R2, R3

loc_2701C
MUL             R0, R12, R4
ADD             LR, R0, R3
LDR             R0, [R0,R3]
CMP             R0, #0
BEQ             loc_27040
LDRB            LR, [LR,#4]
LDRB            R0, [R1,#4]
CMP             LR, R0
BEQ             loc_27070

loc_27040
ADD             R4, R4, #1
CMP             R4, #5
BNE             loc_2701C
MOV             R4, #0
MOV             R12, #0x68 ; 'h'

loc_27054
MUL             R3, R12, R4
ADD             R0, R2, R3 ; dest
LDR             R3, [R2,R3]
CMP             R3, #0
BNE             loc_27078
MOV             R2, #0x68 ; 'h' ; n
BL              memcpy

loc_27070
MOV             R0, R4
POP             {R4,PC}

loc_27078
ADD             R4, R4, #1
CMP             R4, #5
BNE             loc_27054
MOV             R4, #0xFFFFFFFF
B               loc_27070
; End of function sub_26FF0

off_2708C DCD aSrcMiscCryptCr_1 ; "src/misc/crypt/crypt_register_cipher.c"
off_27090 DCD aCipherNull ; "cipher != NULL"
off_27094 DCD dword_4C754



; int __fastcall sub_27098(const void *)
sub_27098
PUSH            {R4-R8,LR}
SUBS            R5, R0, #0
BNE             loc_270B4
MOV             R2, #0x19
LDR             R1, =aSrcMiscCryptCr_2 ; "src/misc/crypt/crypt_register_hash.c"
LDR             R0, =aHashNull ; "hash != NULL"
BL              sub_26EB8

loc_270B4
LDR             R7, =dword_4C47C
MOV             R4, #0
MOV             R8, #0x68 ; 'h'
MOV             R6, R7

loc_270C4               ; n
MOV             R2, #0x68 ; 'h'
MOV             R1, R5  ; s2
MLA             R0, R8, R4, R7 ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_27110
ADD             R4, R4, #1
CMP             R4, #5
BNE             loc_270C4
MOV             R4, #0
MOV             R2, #0x68 ; 'h'

loc_270F0
MUL             R3, R2, R4
ADD             R0, R6, R3 ; dest
LDR             R3, [R6,R3]
CMP             R3, #0
BNE             loc_27118
MOV             R2, #0x68 ; 'h' ; n
MOV             R1, R5  ; src
BL              memcpy

loc_27110
MOV             R0, R4
POP             {R4-R8,PC}

loc_27118
ADD             R4, R4, #1
CMP             R4, #5
BNE             loc_270F0
MOV             R4, #0xFFFFFFFF
B               loc_27110
; End of function sub_27098

off_2712C DCD aSrcMiscCryptCr_2 ; "src/misc/crypt/crypt_register_hash.c"
off_27130 DCD aHashNull ; "hash != NULL"
off_27134 DCD dword_4C47C



; int __fastcall sub_27138(int *)
sub_27138
PUSH            {R4-R8,LR}
SUBS            R5, R0, #0
BNE             loc_27154
MOV             R2, #0x19
LDR             R1, =aSrcMiscCryptCr_3 ; "src/misc/crypt/crypt_register_prng.c"
LDR             R0, =aPrngNull ; "prng != NULL"
BL              sub_26EB8

loc_27154
LDR             R7, =dword_4C95C
MOV             R4, #0
MOV             R8, #0x28 ; '('
MOV             R6, R7

loc_27164               ; n
MOV             R2, #0x28 ; '('
MOV             R1, R5  ; s2
MLA             R0, R8, R4, R7 ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_271CC
ADD             R4, R4, #1
CMP             R4, #5
BNE             loc_27164
MOV             R4, #0
MOV             R1, #0x28 ; '('

loc_27190
MUL             R3, R1, R4
ADD             R2, R6, R3
LDR             R3, [R6,R3]
CMP             R3, #0
BNE             loc_271D4
MOV             R3, R5
ADD             LR, R5, #0x28 ; '('

loc_271AC
LDR             R0, [R3]
ADD             R3, R3, #8
LDR             R1, [R3,#-4]
CMP             R3, LR
MOV             R12, R2
STM             R12!, {R0,R1}
MOV             R2, R12
BNE             loc_271AC

loc_271CC
MOV             R0, R4
POP             {R4-R8,PC}

loc_271D4
ADD             R4, R4, #1
CMP             R4, #5
BNE             loc_27190
MOV             R4, #0xFFFFFFFF
B               loc_271CC
; End of function sub_27138

off_271E8 DCD aSrcMiscCryptCr_3 ; "src/misc/crypt/crypt_register_prng.c"
off_271EC DCD aPrngNull ; "prng != NULL"
off_271F0 DCD dword_4C95C
; [00000004 BYTES: COLLAPSED FUNCTION j_j_explicit_bzero]



; int __fastcall sub_271F8(_BYTE *, _BYTE *, unsigned int, unsigned int *)
sub_271F8
CMP             R1, #0
PUSH            {R4,LR}
BNE             loc_27214
LDR             R1, =aSrcModesCtrCtr_0 ; "src/modes/ctr/ctr_decrypt.c"
MOV             R2, #0x1C
LDR             R0, =aPtNull ; "pt != NULL"

loc_27210
BL              sub_26EB8

loc_27214
CMP             R0, #0
MOVEQ           R2, #0x1D
LDREQ           R1, =aSrcModesCtrCtr_0 ; "src/modes/ctr/ctr_decrypt.c"
LDREQ           R0, =aCtNull ; "ct != NULL"
BEQ             loc_27210
CMP             R3, #0
MOVEQ           R2, #0x1E
LDREQ           R1, =aSrcModesCtrCtr_0 ; "src/modes/ctr/ctr_decrypt.c"
LDREQ           R0, =aCtrNull ; "ctr != NULL"
BEQ             loc_27210
POP             {R4,LR}
B               sub_27254
; End of function sub_271F8

off_27244 DCD aSrcModesCtrCtr_0 ; "src/modes/ctr/ctr_decrypt.c"
off_27248 DCD aPtNull   ; "pt != NULL"
off_2724C DCD aCtNull   ; "ct != NULL"
off_27250 DCD aCtrNull  ; "ctr != NULL"



; int __fastcall sub_27254(_BYTE *, _BYTE *, unsigned int, unsigned int *)
sub_27254

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4-R11,LR}
SUBS            R8, R0, #0
BNE             loc_27270
LDR             R1, =aSrcModesCtrCtr_1 ; "src/modes/ctr/ctr_encrypt.c"
MOV             R2, #0x1F
LDR             R0, =aPtNull ; "pt != NULL"

loc_2726C
BL              sub_26EB8

loc_27270
CMP             R1, #0
MOV             R5, R1
MOVEQ           R2, #0x20 ; ' '
LDREQ           R1, =aSrcModesCtrCtr_1 ; "src/modes/ctr/ctr_encrypt.c"
LDREQ           R0, =aCtNull ; "ct != NULL"
BEQ             loc_2726C
CMP             R3, #0
MOV             R4, R3
MOVEQ           R2, #0x21 ; '!'
LDREQ           R1, =aSrcModesCtrCtr_1 ; "src/modes/ctr/ctr_encrypt.c"
LDREQ           R0, =aCtrNull ; "ctr != NULL"
BEQ             loc_2726C
LDR             R0, [R3]
MOV             R6, R2
BL              sub_2986C
SUBS            R7, R0, #0
BNE             loc_27378
LDR             R1, [R4,#4]
SUB             R3, R1, #1
CMP             R3, #0x7F
BHI             loc_27454
LDR             R3, [R4,#8]
CMP             R3, #0x80
BHI             loc_27454
CMP             R1, R3
BNE             loc_27360
LDR             R3, [R4]
MOV             R0, #0x68 ; 'h'
LDR             R2, =dword_4C754
CMP             R1, R6
MLA             R3, R0, R3, R2
LDR             R10, [R3,#0x40]
MOVHI           R3, #0
MOVLS           R3, #1
CMP             R10, #0
MOVEQ           R3, #0
CMP             R3, #0
BEQ             loc_27360
MOV             R0, R6
ADD             R9, R4, #0x14
BLX             sub_34BA0
ADD             R3, R4, #0x114
MOV             R2, R0
STR             R3, [SP,#0xC+var_8]
MOV             R1, R5
LDR             R3, [R4,#0xC]
MOV             R0, R8
STR             R3, [SP,#0xC+var_C]
MOV             R3, R9
BLX             R10
CMP             R0, #0
BNE             loc_27424
LDR             R9, [R4,#4]
MOV             R0, R6
MOV             R1, R9
BLX             sub_34DFC
MUL             R0, R9, R0
MOV             R6, R1
ADD             R8, R8, R0
ADD             R5, R5, R0

loc_27360
LDR             R11, =dword_4C754
ADD             R6, R5, R6
ADD             R9, R4, #0x114
ADD             R10, R4, #0x94

loc_27370
CMP             R5, R6
BNE             loc_27384

loc_27378
MOV             R0, R7
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_27384
LDRD            R2, R3, [R4,#4]
CMP             R3, R2
BNE             loc_27430
LDR             R2, [R4,#0xC]
LDR             R0, [R4,#0x10]
CMP             R2, #0
ADDEQ           R1, R4, #0x14
BEQ             loc_273DC
SUB             R1, R3, #1
ADD             R3, R3, #0x14
ADD             R3, R4, R3

loc_273B0
CMP             R1, R0
BLT             loc_273FC
LDRB            R2, [R3,#-1]!
ADD             R2, R2, #1
UXTB            R2, R2
CMP             R2, #0
STRB            R2, [R3]
BNE             loc_273FC
SUB             R1, R1, #1
B               loc_273B0

loc_273D8
ADD             R2, R2, #1

loc_273DC
CMP             R2, R0
BGE             loc_273FC
LDRB            R3, [R1]
ADD             R3, R3, #1
UXTB            R3, R3
CMP             R3, #0
STRB            R3, [R1],#1
BEQ             loc_273D8

loc_273FC
LDR             R3, [R4]
MOV             R2, #0x68 ; 'h'
MOV             R1, R10
ADD             R0, R4, #0x14
MLA             R3, R2, R3, R11
MOV             R2, R9
LDR             R3, [R3,#0x1C]
BLX             R3
CMP             R0, #0
BEQ             loc_2742C

loc_27424
MOV             R7, R0
B               loc_27378

loc_2742C
STR             R0, [R4,#8]

loc_27430
LDR             R3, [R4,#8]
LDRB            R2, [R8],#1
ADD             R1, R3, #1
ADD             R3, R4, R3
STR             R1, [R4,#8]
LDRB            R3, [R3,#0x94]
EOR             R3, R3, R2
STRB            R3, [R5],#1
B               loc_27370

loc_27454
MOV             R7, #0x10
B               loc_27378
; End of function sub_27254

off_2745C DCD aSrcModesCtrCtr_1 ; "src/modes/ctr/ctr_encrypt.c"
off_27460 DCD aPtNull   ; "pt != NULL"
off_27464 DCD aCtNull   ; "ct != NULL"
off_27468 DCD aCtrNull  ; "ctr != NULL"
off_2746C DCD dword_4C754



; int __fastcall sub_27470(unsigned int, char *, int, int, int, __int16, unsigned int *)
sub_27470

var_10= -0x10
var_C= -0xC
var_8= -8
arg_0=  0x24
arg_4=  0x28
arg_8=  0x2C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
STR             R3, [SP,#0x14+var_C]
SUBS            R3, R1, #0
MOV             R9, R2
LDR             R6, [SP,#0x14+arg_4]
LDR             R2, [SP,#0x14+arg_0]
LDR             R4, [SP,#0x14+arg_8]
STR             R3, [SP,#0x14+var_10]
BNE             loc_274A8
LDR             R1, =aSrcModesCtrCtr ; "src/modes/ctr/ctr_start.c"
MOV             R2, #0x26 ; '&'
LDR             R0, =aIvNull ; "IV != NULL"

loc_274A4
BL              sub_26EB8

loc_274A8
CMP             R9, #0
MOVEQ           R2, #0x27 ; '''
LDREQ           R1, =aSrcModesCtrCtr ; "src/modes/ctr/ctr_start.c"
LDREQ           R0, =(aSkeyNull+1) ; "key != NULL"
BEQ             loc_274A4
CMP             R4, #0
MOVEQ           R2, #0x28 ; '('
LDREQ           R1, =aSrcModesCtrCtr ; "src/modes/ctr/ctr_start.c"
LDREQ           R0, =aCtrNull ; "ctr != NULL"
BEQ             loc_274A4
MOV             R7, R0
STR             R2, [SP,#0x14+var_8]
BL              sub_2986C
CMP             R0, #0
BNE             loc_27618
LDR             R1, =dword_4C754
MOV             R3, #0x68 ; 'h'
MOV             R11, R1
MLA             R3, R3, R7, R1
ANDS            R1, R6, #0xFF
LDR             R3, [R3,#0x10]
MOVEQ           R1, R3
CMP             R1, R3
STR             R1, [R4,#0x10]
BGT             loc_27614
MOV             R8, #0x68 ; 'h'
ANDS            R5, R6, #0x1000
MLA             R8, R8, R7, R11
LDR             R2, [SP,#0x14+var_8]
SUBNE           R3, R3, R1
LDR             R1, [SP,#0x14+var_C]
ADD             R10, R4, #0x114
STRNE           R3, [R4,#0x10]
MOV             R0, R9
MOV             R3, R10
LDR             R12, [R8,#0x18]
BLX             R12
CMP             R0, #0
BNE             loc_27618
LDR             R1, [SP,#0x14+var_10]
ADD             R2, R4, #0x14
LDR             R3, [R8,#0x10]
MOV             R12, R2
STR             R0, [R4,#8]
MOV             R0, R2
STR             R7, [R4]
STR             R3, [R4,#4]
STR             R5, [R4,#0xC]

loc_27568
LDR             LR, [SP,#0x14+var_10]
SUB             LR, R1, LR
CMP             R3, LR
BGT             loc_275A0
TST             R6, #0x2000
BNE             loc_275AC

loc_27580
MOV             R3, #0x68 ; 'h'
MOV             R2, R10
MLA             R7, R3, R7, R11
ADD             R1, R4, #0x94
LDR             R3, [R7,#0x1C]
ADD             SP, SP, #0x14
POP             {R4-R11,LR}
BX              R3

loc_275A0
LDRB            LR, [R1],#1
STRB            LR, [R12],#1
B               loc_27568

loc_275AC
CMP             R5, #0
LDR             R1, [R4,#0x10]
BEQ             loc_27608
SUB             R12, R3, #1
ADD             R3, R3, #0x14
ADD             R3, R4, R3

loc_275C4
CMP             R12, R1
BLT             loc_27580
LDRB            R2, [R3,#-1]!
ADD             R2, R2, #1
UXTB            R2, R2
CMP             R2, #0
STRB            R2, [R3]
BNE             loc_27580
SUB             R12, R12, #1
B               loc_275C4

loc_275EC
LDRB            R3, [R2]
ADD             R3, R3, #1
UXTB            R3, R3
CMP             R3, #0
STRB            R3, [R2],#1
BNE             loc_27580
ADD             R5, R5, #1

loc_27608
CMP             R5, R1
BLT             loc_275EC
B               loc_27580

loc_27614
MOV             R0, #0x10

loc_27618
ADD             SP, SP, #0x14
POP             {R4-R11,PC}
; End of function sub_27470

off_27620 DCD aSrcModesCtrCtr ; "src/modes/ctr/ctr_start.c"
off_27624 DCD aIvNull   ; "IV != NULL"
off_27628 DCD aSkeyNull+1 ; "key != NULL"
off_2762C DCD aCtrNull  ; "ctr != NULL"
off_27630 DCD dword_4C754



; int __fastcall sub_27634(int, _BYTE *, unsigned int *)
sub_27634

var_110= -0x110
dest= -0x10C
var_108= -0x108
src= -0x104

PUSH            {R4-R11,LR}
SUBS            R5, R0, #0
SUB             SP, SP, #0x114
BNE             loc_27654
LDR             R1, =aSrcPkEccEccAns ; "src/pk/ecc/ecc_ansi_x963_export.c"
MOV             R2, #0x23 ; '#'
LDR             R0, =(aSkeyNull+1) ; "key != NULL"

loc_27650
BL              sub_26EB8

loc_27654
CMP             R2, #0
MOV             R7, R2
MOVEQ           R2, #0x24 ; '$'
LDREQ           R1, =aSrcPkEccEccAns ; "src/pk/ecc/ecc_ansi_x963_export.c"
LDREQ           R0, =aOutlenNull ; "outlen != NULL"
BEQ             loc_27650
LDR             R0, [R5,#4]
MOV             R11, R1
BL              sub_27AC4
CMP             R0, #0
BEQ             loc_27790
LDR             R3, [R5,#8]
LDR             R9, =dword_4C684
LDR             R0, [R5,#0xC]
LDR             R4, [R3]
LDR             R3, [R9,#(off_4C6CC - 0x4C684)]
BLX             R3
LDR             R3, [R9,#(off_4C6CC - 0x4C684)]
MOV             R10, R0
LDR             R0, [R5,#0x10]
BLX             R3
CMP             R4, R0
CMPCS           R4, R10
MOV             R8, R0
MOVCC           R0, #1
MOVCS           R0, #0
CMP             R4, #0x100
ORRHI           R0, R0, #1
CMP             R0, #0
STR             R0, [SP,#0x114+var_110]
BNE             loc_27798
LDR             R3, [R7]
MOV             R6, R4,LSL#1
ADD             R6, R6, #1
CMP             R3, R6
STRCC           R6, [R7]
BCC             loc_27798
CMP             R11, #0
MOVEQ           R2, #0x36 ; '6'
LDREQ           R1, =aSrcPkEccEccAns ; "src/pk/ecc/ecc_ansi_x963_export.c"
LDREQ           R0, =aOutNull ; "out != NULL"
BEQ             loc_27650
MOV             R3, R11
MOV             R2, #4
STRB            R2, [R3],#1
MOV             R1, #0x100
ADD             R0, SP, #0x114+src
STR             R3, [SP,#0x114+dest]
STR             R3, [SP,#0x114+var_108]
BL              j_j_explicit_bzero
ADD             R3, SP, #0x114+src
SUB             R1, R4, R10
ADD             R1, R3, R1
LDR             R2, [R9,#(off_4C6D0 - 0x4C684)]
LDR             R0, [R5,#0xC]
BLX             R2
LDR             R3, [SP,#0x114+dest]
MOV             R2, R4  ; n
ADD             R1, SP, #0x114+src ; src
MOV             R0, R3  ; dest
BL              memcpy
MOV             R1, #0x100
ADD             R0, SP, #0x114+src
BL              j_j_explicit_bzero
ADD             R2, SP, #0x114+src
SUB             R1, R4, R8
ADD             R1, R2, R1
LDR             R3, [R9,#(off_4C6D0 - 0x4C684)]
LDR             R0, [R5,#0x10]
BLX             R3
ADD             R0, R4, #1
MOV             R2, R4  ; n
ADD             R1, SP, #0x114+src ; src
ADD             R0, R11, R0 ; dest
BL              memcpy
LDR             R0, [SP,#0x114+var_110]
STR             R6, [R7]

loc_27788
ADD             SP, SP, #0x114
POP             {R4-R11,PC}

loc_27790
MOV             R0, #0x10
B               loc_27788

loc_27798
MOV             R0, #6
B               loc_27788
; End of function sub_27634

off_277A0 DCD aSrcPkEccEccAns ; "src/pk/ecc/ecc_ansi_x963_export.c"
off_277A4 DCD aSkeyNull+1 ; "key != NULL"
off_277A8 DCD aOutlenNull ; "outlen != NULL"
off_277AC DCD dword_4C684
off_277B0 DCD aOutNull  ; "out != NULL"



; int __fastcall sub_277B4(int *, int, int)
sub_277B4

var_C= -0xC

PUSH            {R0-R2,LR}
CMP             R0, #0
BNE             loc_277D0
MOV             R2, #0x1E
LDR             R1, =aSrcPkEccEccFre ; "src/pk/ecc/ecc_free.c"
LDR             R0, =(aSkeyNull+1) ; "key != NULL"
BL              sub_26EB8

loc_277D0
MOV             R3, #0
STR             R3, [SP,#0xC+var_C]
LDRD            R2, R3, [R0,#0x14]
LDRD            R0, R1, [R0,#0xC]
BL              sub_26ABC
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_277B4

off_277EC DCD aSrcPkEccEccFre ; "src/pk/ecc/ecc_free.c"
off_277F0 DCD aSkeyNull+1 ; "key != NULL"



; int __fastcall sub_277F4(int, unsigned int, _DWORD *, int *)
sub_277F4

var_18= -0x18
var_14= -0x14
var_10= -0x10
var_8= -8
var_4= -4

PUSH            {R4-R10,LR}
SUBS            R4, R2, #0
SUB             SP, SP, #0x18
BNE             loc_27814
LDR             R1, =aSrcPkEccEccMak ; "src/pk/ecc/ecc_make_key.c"
MOV             R2, #0x38 ; '8'
LDR             R0, =(aSkeyNull+1) ; "key != NULL"

loc_27810
BL              sub_26EB8

loc_27814
LDR             R6, =dword_4C684
MOV             R8, R3
LDR             R3, [R6]
CMP             R3, #0
MOVEQ           R2, #0x39 ; '9'
LDREQ           R1, =aSrcPkEccEccMak ; "src/pk/ecc/ecc_make_key.c"
LDREQ           R0, =aLtcMpNameNull ; "ltc_mp.name != NULL"
BEQ             loc_27810
CMP             R8, #0
MOVEQ           R2, #0x3A ; ':'
LDREQ           R1, =aSrcPkEccEccMak ; "src/pk/ecc/ecc_make_key.c"
LDREQ           R0, =aDpNull ; "dp != NULL"
BEQ             loc_27810
MOV             R10, R0
MOV             R0, R1
MOV             R7, R1
BL              sub_298A0
SUBS            R5, R0, #0
BNE             loc_279FC
MOV             R3, #0xFFFFFFFF
MOV             R0, #0x42 ; 'B' ; size
STMIB           R4, {R3,R8}
LDR             R8, [R8]
BL              malloc
SUBS            R9, R0, #0
MOVEQ           R5, #0xD
BEQ             loc_279FC
LDR             R3, =dword_4C95C
MOV             R2, #0x28 ; '('
MOV             R1, R8
MLA             R7, R2, R7, R3
MOV             R2, R10
LDR             R3, [R7,#0x14]
BLX             R3
CMP             R8, R0
MOVNE           R5, #9
BNE             loc_279F4
ADD             R3, SP, #0x18+var_4
ADD             R10, R4, #0xC
STR             R3, [SP,#0x18+var_14]
ADD             R3, SP, #0x18+var_8
STR             R5, [SP,#0x18+var_10]
ADD             R2, R4, #0x14
STR             R3, [SP,#0x18+var_18]
ADD             R1, R4, #0x10
ADD             R3, R4, #0x18
MOV             R0, R10
BL              sub_26A28
SUBS            R5, R0, #0
BNE             loc_279F4
BL              sub_28738
SUBS            R7, R0, #0
BEQ             loc_27A40
LDR             R1, [R4,#8]
MOV             R2, #0x10
LDR             R3, [R6,#(off_4C6C4 - 0x4C684)]
LDR             R0, [SP,#0x18+var_8]
LDR             R1, [R1,#8]
BLX             R3
SUBS            R5, R0, #0
BNE             loc_27A28
LDR             R1, [R4,#8]
MOV             R2, #0x10
LDR             R3, [R6,#(off_4C6C4 - 0x4C684)]
LDR             R0, [SP,#0x18+var_4]
LDR             R1, [R1,#0x10]
BLX             R3
SUBS            R5, R0, #0
BNE             loc_27A28
LDR             R1, [R4,#8]
MOV             R2, #0x10
LDR             R3, [R6,#(off_4C6C4 - 0x4C684)]
LDR             R0, [R7]
LDR             R1, [R1,#0x14]
BLX             R3
SUBS            R5, R0, #0
BNE             loc_27A28
LDR             R1, [R4,#8]
MOV             R2, #0x10
LDR             R3, [R6,#(off_4C6C4 - 0x4C684)]
LDR             R0, [R7,#4]
LDR             R1, [R1,#0x18]
BLX             R3
SUBS            R5, R0, #0
BNE             loc_27A28
LDR             R3, [R6,#(off_4C6A0 - 0x4C684)]
MOV             R1, #1
LDR             R0, [R7,#8]
BLX             R3
SUBS            R5, R0, #0
BNE             loc_27A28
LDR             R3, [R6,#(off_4C6D4 - 0x4C684)]
MOV             R2, R8
MOV             R1, R9
LDR             R0, [R4,#0x18]
BLX             R3
SUBS            R5, R0, #0
BNE             loc_27A28
LDR             R3, [R6,#(off_4C6B0 - 0x4C684)]
LDR             R1, [SP,#0x18+var_4]
LDR             R0, [R4,#0x18]
BLX             R3
CMN             R0, #1
BNE             loc_27A08

loc_279B4
MOV             R8, #1
LDR             R5, [R6,#(off_4C72C - 0x4C684)]
STR             R8, [SP,#0x18+var_18]
MOV             R2, R10
LDR             R3, [SP,#0x18+var_8]
MOV             R1, R7
LDR             R0, [R4,#0x18]
BLX             R5
SUBS            R5, R0, #0
BNE             loc_27A28
STR             R8, [R4]

loc_279E0
MOV             R0, R7
BL              sub_2877C
MOV             R2, #0
LDRD            R0, R1, [SP,#0x18+var_8]
BL              sub_26ABC

loc_279F4               ; ptr
MOV             R0, R9
BL              free

loc_279FC
MOV             R0, R5
ADD             SP, SP, #0x18
POP             {R4-R10,PC}

loc_27A08
LDR             R3, [R4,#0x18]
MOV             R2, R5
LDR             R8, [R6,#(off_4C6F4 - 0x4C684)]
LDR             R1, [SP,#0x18+var_4]
MOV             R0, R3
BLX             R8
SUBS            R5, R0, #0
BEQ             loc_279B4

loc_27A28
MOV             R3, #0
STR             R3, [SP,#0x18+var_18]
LDRD            R2, R3, [R4,#0x14]
LDRD            R0, R1, [R4,#0xC]
BL              sub_26ABC
B               loc_279E0

loc_27A40
MOV             R5, #0xD
B               loc_27A28
; End of function sub_277F4

off_27A48 DCD aSrcPkEccEccMak ; "src/pk/ecc/ecc_make_key.c"
off_27A4C DCD aSkeyNull+1 ; "key != NULL"
off_27A50 DCD dword_4C684
off_27A54 DCD aLtcMpNameNull ; "ltc_mp.name != NULL"
off_27A58 DCD aDpNull   ; "dp != NULL"
off_27A5C DCD dword_4C95C



; int __fastcall sub_27A60(int, unsigned int, int, _DWORD *)
sub_27A60
PUSH            {R4-R6,LR}
MOV             R4, R3
LDR             LR, =dword_39FBC
MOV             R5, #0
MOV             R6, #0x1C

loc_27A74
MUL             R12, R6, R5
ADD             R3, R12, LR
LDR             R12, [R12,LR]
CMP             R12, R2
BGE             loc_27AA0
CMP             R12, #0
BNE             loc_27A98

loc_27A90
MOV             R0, #3
POP             {R4-R6,PC}

loc_27A98
ADD             R5, R5, #1
B               loc_27A74

loc_27AA0
CMP             R12, #0x42 ; 'B'
BGT             loc_27A90
CMP             R12, #0
BEQ             loc_27A90
MOV             R2, R4
BL              sub_277F4
STR             R5, [R4,#4]
POP             {R4-R6,PC}
; End of function sub_27A60

off_27AC0 DCD dword_39FBC



; bool __fastcall sub_27AC4(int)
sub_27AC4
LDR             R1, =dword_39FBC
MOV             R3, #0
MOV             R12, #0x1C

loc_27AD0
MUL             R2, R12, R3
LDR             R2, [R2,R1]
CMP             R2, #0
BNE             loc_27AF4
CMN             R0, #1
CMPGE           R3, R0
MOVGT           R0, #1
MOVLE           R0, #0
BX              LR

loc_27AF4
ADD             R3, R3, #1
B               loc_27AD0
; End of function sub_27AC4

off_27AFC DCD dword_39FBC



; int __fastcall sub_27B00(_DWORD *, int, int)
sub_27B00

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4-R9,LR}
SUBS            R6, R0, #0
BNE             loc_27B1C
LDR             R1, =aSrcPkEccLtcEcc ; "src/pk/ecc/ltc_ecc_map.c"
MOV             R2, #0x24 ; '$'
LDR             R0, =aPNull ; "P != NULL"

loc_27B18
BL              sub_26EB8

loc_27B1C
CMP             R1, #0
MOV             R7, R1
MOVEQ           R2, #0x25 ; '%'
LDREQ           R1, =aSrcPkEccLtcEcc ; "src/pk/ecc/ltc_ecc_map.c"
LDREQ           R0, =aModulusNull ; "modulus != NULL"
BEQ             loc_27B18
CMP             R2, #0
MOV             R8, R2
MOVEQ           R2, #0x26 ; '&'
LDREQ           R1, =aSrcPkEccLtcEcc ; "src/pk/ecc/ltc_ecc_map.c"
LDREQ           R0, =aMpNull ; "mp != NULL"
BEQ             loc_27B18
MOV             R2, #0
ADD             R1, SP, #0xC+var_8
MOV             R0, SP
BL              sub_26A28
SUBS            R4, R0, #0
BNE             loc_27CA0
LDR             R5, =dword_4C684
MOV             R2, R8
MOV             R1, R7
LDR             R0, [R6,#8]
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R3, [R5,#(off_4C710 - 0x4C684)]
MOV             R1, R7
LDR             R2, [SP,#0xC+var_C]
LDR             R0, [R6,#8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R3, [R5,#(off_4C6F0 - 0x4C684)]
LDRD            R0, R1, [SP,#0xC+var_C]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R3, [SP,#0xC+var_8]
MOV             R2, R4
LDR             R9, [R5,#(off_4C6F4 - 0x4C684)]
MOV             R1, R7
MOV             R0, R3
BLX             R9
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R2, [SP,#0xC+var_C]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R1, [SP,#0xC+var_8]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R3, [SP,#0xC+var_C]
MOV             R2, R4
LDR             R9, [R5,#(off_4C6F4 - 0x4C684)]
MOV             R1, R7
MOV             R0, R3
BLX             R9
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R2, [R6]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R1, [SP,#0xC+var_8]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R8
MOV             R1, R7
LDR             R0, [R6]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R2, [R6,#4]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R1, [SP,#0xC+var_C]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R8
MOV             R1, R7
LDR             R0, [R6,#4]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_27C94
LDR             R3, [R5,#(off_4C6A0 - 0x4C684)]
MOV             R1, #1
LDR             R0, [R6,#8]
BLX             R3
MOV             R4, R0

loc_27C94
MOV             R2, #0
LDRD            R0, R1, [SP,#0xC+var_C]
BL              sub_26ABC

loc_27CA0
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R9,PC}
; End of function sub_27B00

off_27CAC DCD aSrcPkEccLtcEcc ; "src/pk/ecc/ltc_ecc_map.c"
off_27CB0 DCD aPNull    ; "P != NULL"
off_27CB4 DCD aModulusNull ; "modulus != NULL"
off_27CB8 DCD aMpNull   ; "mp != NULL"
off_27CBC DCD dword_4C684



; int __fastcall sub_27CC0(_DWORD *, int, _DWORD *, int, _DWORD *, int)
sub_27CC0

var_74= -0x74
ptr= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_24= -0x24
var_14= -0x14
var_4= -4
arg_0=  0x24
arg_4=  0x28

PUSH            {R4-R11,LR}
SUBS            R9, R0, #0
SUB             SP, SP, #0x74
LDR             R6, [SP,#0x74+arg_0]
LDR             R4, [SP,#0x74+arg_4]
BNE             loc_27CE8
LDR             R1, =aSrcPkEccLtcEcc_0 ; "src/pk/ecc/ltc_ecc_mul2add.c"
MOV             R2, #0x2F ; '/'
LDR             R0, =(aKaNull+1) ; "A != NULL"

loc_27CE4
BL              sub_26EB8

loc_27CE8
CMP             R2, #0
MOV             R8, R2
MOVEQ           R2, #0x30 ; '0'
LDREQ           R1, =aSrcPkEccLtcEcc_0 ; "src/pk/ecc/ltc_ecc_mul2add.c"
LDREQ           R0, =(aKbNull+1) ; "B != NULL"
BEQ             loc_27CE4
CMP             R6, #0
MOVEQ           R2, #0x31 ; '1'
LDREQ           R1, =aSrcPkEccLtcEcc_0 ; "src/pk/ecc/ltc_ecc_mul2add.c"
LDREQ           R0, =aCNull ; "C != NULL"
BEQ             loc_27CE4
CMP             R1, #0
MOV             R11, R1
MOVEQ           R2, #0x32 ; '2'
LDREQ           R1, =aSrcPkEccLtcEcc_0 ; "src/pk/ecc/ltc_ecc_mul2add.c"
LDREQ           R0, =aKaNull ; "kA != NULL"
BEQ             loc_27CE4
CMP             R3, #0
MOV             R10, R3
MOVEQ           R2, #0x33 ; '3'
LDREQ           R1, =aSrcPkEccLtcEcc_0 ; "src/pk/ecc/ltc_ecc_mul2add.c"
LDREQ           R0, =aKbNull ; "kB != NULL"
BEQ             loc_27CE4
CMP             R4, #0
MOVEQ           R2, #0x34 ; '4'
LDREQ           R1, =aSrcPkEccLtcEcc_0 ; "src/pk/ecc/ltc_ecc_mul2add.c"
LDREQ           R0, =aModulusNull ; "modulus != NULL"
BEQ             loc_27CE4
MOV             R1, #0x100 ; size
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R3, R0, #0
STR             R3, [SP,#0x74+ptr]
BEQ             loc_27D90
MOV             R1, #0x100 ; size
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R3, R0, #0
STR             R3, [SP,#0x74+var_60]
BNE             loc_27D98
LDR             R0, [SP,#0x74+ptr] ; ptr
BL              free

loc_27D90
MOV             R10, #0xD
B               loc_27E64

loc_27D98
LDR             R5, =dword_4C684
MOV             R0, R11
LDR             R3, [R5,#(off_4C6CC - 0x4C684)]
BLX             R3
LDR             R3, [R5,#(off_4C6CC - 0x4C684)]
STR             R0, [SP,#0x74+var_64]
MOV             R0, R10
BLX             R3
LDR             R1, [SP,#0x74+var_64]
STR             R0, [SP,#0x74+var_64]
CMP             R1, R0
MOVCS           R2, R1
MOVCC           R2, R0
CMP             R0, #0x100
CMPLS           R1, #0x100
STR             R2, [SP,#0x74+var_54]
MOVHI           R7, #1
MOVLS           R7, #0
MOVHI           R10, #0x10
BHI             loc_27E54
LDR             R3, [SP,#0x74+ptr]
SUB             R1, R2, R1
MOV             R0, R11
LDR             R2, [R5,#(off_4C6D0 - 0x4C684)]
ADD             R1, R3, R1
BLX             R2
LDR             R2, [SP,#0x74+var_54]
MOV             R0, R10
LDR             R3, [SP,#0x74+var_64]
ADD             R10, SP, #0x74+var_44
SUB             R1, R2, R3
LDR             R3, [SP,#0x74+var_60]
LDR             R2, [R5,#(off_4C6D0 - 0x4C684)]
ADD             R1, R3, R1
BLX             R2

loc_27E24
BL              sub_28738
CMP             R0, #0
STR             R0, [R10,R7,LSL#2]
BNE             loc_27E70
MOV             R4, R0
B               loc_27E48

loc_27E3C
LDR             R0, [R10,R4,LSL#2]
ADD             R4, R4, #1
BL              sub_2877C

loc_27E48
CMP             R4, R7
BNE             loc_27E3C
MOV             R10, #0xD

loc_27E54               ; ptr
LDR             R0, [SP,#0x74+ptr]
BL              free
LDR             R0, [SP,#0x74+var_60] ; ptr
BL              free

loc_27E64
MOV             R0, R10
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R11,PC}

loc_27E70
ADD             R7, R7, #1
CMP             R7, #0x10
BNE             loc_27E24
LDR             R3, [R5,#(off_4C714 - 0x4C684)]
ADD             R1, SP, #0x74+var_4C
MOV             R0, R4
BLX             R3
SUBS            R10, R0, #0
BNE             loc_28050
LDR             R3, [R5,#(off_4C68C - 0x4C684)]
ADD             R0, SP, #0x74+var_48
BLX             R3
SUBS            R10, R0, #0
BNE             loc_28040
LDR             R3, [R5,#(off_4C718 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0x74+var_48]
BLX             R3
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R7, [SP,#0x74+var_40]
MOV             R2, R4
LDR             R10, [R5,#(off_4C708 - 0x4C684)]
LDR             R1, [SP,#0x74+var_48]
LDR             R3, [R7]
LDR             R0, [R9]
BLX             R10
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R10, [R5,#(off_4C708 - 0x4C684)]
MOV             R2, R4
LDR             R3, [R7,#4]
LDR             R1, [SP,#0x74+var_48]
LDR             R0, [R9,#4]
BLX             R10
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R10, [R5,#(off_4C708 - 0x4C684)]
MOV             R2, R4
LDR             R3, [R7,#8]
LDR             R1, [SP,#0x74+var_48]
LDR             R0, [R9,#8]
BLX             R10
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R9, [SP,#0x74+var_34]
MOV             R2, R4
LDR             R10, [R5,#(off_4C708 - 0x4C684)]
LDR             R1, [SP,#0x74+var_48]
LDR             R3, [R9]
LDR             R0, [R8]
BLX             R10
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R5, [R5,#(off_4C708 - 0x4C684)]
MOV             R2, R4
LDR             R3, [R9,#4]
LDR             R1, [SP,#0x74+var_48]
LDR             R0, [R8,#4]
BLX             R5
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R5, =dword_4C684
MOV             R2, R4
LDR             R3, [R9,#8]
LDR             R1, [SP,#0x74+var_48]
LDR             R10, [R5,#(off_4C708 - 0x4C684)]
LDR             R0, [R8,#8]
BLX             R10
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R8, [SP,#0x74+var_3C]
MOV             R2, R4
LDR             R10, [R5,#(off_4C734 - 0x4C684)]
MOV             R0, R7
LDR             R3, [SP,#0x74+var_4C]
MOV             R1, R8
BLX             R10
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R3, [SP,#0x74+var_4C]
MOV             R1, R8
LDR             R2, [SP,#0x74+var_38]
MOV             R0, R7
STR             R3, [SP,#0x74+var_74]
MOV             R3, R4
LDR             R10, [R5,#(off_4C730 - 0x4C684)]
BLX             R10
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R7, [SP,#0x74+var_24]
MOV             R2, R4
LDR             R8, [R5,#(off_4C734 - 0x4C684)]
MOV             R0, R9
LDR             R3, [SP,#0x74+var_4C]
MOV             R1, R7
BLX             R8
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R3, [SP,#0x74+var_4C]
MOV             R0, R9
LDR             R2, [SP,#0x74+var_14]
MOV             R1, R7
STR             R3, [SP,#0x74+var_74]
MOV             R3, R4
LDR             R8, [R5,#(off_4C730 - 0x4C684)]
BLX             R8
SUBS            R10, R0, #0
ADDEQ           R8, SP, #0x74+var_40
ADDEQ           R9, SP, #0x74+var_34
ADDEQ           R10, SP, #0x74+var_44
BEQ             loc_280B0

loc_28030
LDR             R3, =dword_4C684
LDR             R0, [SP,#0x74+var_48]
LDR             R3, [R3,#(off_4C694 - 0x4C684)]
BLX             R3

loc_28040
LDR             R3, =dword_4C684
LDR             R0, [SP,#0x74+var_4C]
LDR             R3, [R3,#(off_4C720 - 0x4C684)]
BLX             R3

loc_28050
MOV             R4, #0
ADD             R5, SP, #0x74+var_44

loc_28058
LDR             R0, [R5,R4,LSL#2]
ADD             R4, R4, #1
BL              sub_2877C
CMP             R4, #0x10
BNE             loc_28058
B               loc_27E54

loc_28070
LDR             R3, [SP,#0x74+var_4C]
STR             R3, [SP,#0x74+var_74]
MOV             R3, R4
LDR             R11, [R5,#(off_4C730 - 0x4C684)]
LDR             R2, [R8,R7,LSL#4]
LDR             R1, [R10,R7,LSL#4]
LDR             R0, [R8]
BLX             R11
CMP             R0, #0
BNE             loc_28264
ADD             R7, R7, #1
CMP             R7, #4
BNE             loc_28070
ADD             R8, R8, #4
CMP             R8, R9
BEQ             loc_280B8

loc_280B0
MOV             R7, #1
B               loc_28070

loc_280B8
LDR             R3, [SP,#0x74+ptr]
MOV             R9, #1
LDR             R7, =dword_4C684
MOV             R8, #3
MOV             R5, R0
LDRB            R3, [R3]
STR             R3, [SP,#0x74+var_64]
LDR             R3, [SP,#0x74+var_60]
LDRB            R11, [R3]

loc_280DC
ADD             R8, R8, #1
CMP             R8, #4
BNE             loc_28110
LDR             R3, [SP,#0x74+var_54]
CMP             R5, R3
BEQ             loc_28254
LDR             R3, [SP,#0x74+ptr]
MOV             R8, #0
LDRB            R3, [R3,R5]
STR             R3, [SP,#0x74+var_64]
LDR             R3, [SP,#0x74+var_60]
LDRB            R11, [R3,R5]
ADD             R5, R5, #1

loc_28110
LDR             R3, [SP,#0x74+var_64]
MOV             R3, R3,LSR#6
STR             R3, [SP,#0x74+var_5C]
MOV             R3, R11,LSR#6
MOV             R11, R11,LSL#2
STR             R3, [SP,#0x74+var_5C+4]
LDR             R3, [SP,#0x74+var_64]
UXTB            R11, R11
LDR             R2, [SP,#0x74+var_5C+4]
MOV             R3, R3,LSL#2
UXTB            R3, R3
STR             R3, [SP,#0x74+var_64]
LDR             R3, [SP,#0x74+var_5C]
ORRS            R3, R3, R2
STR             R3, [SP,#0x74+var_50]
BNE             loc_281E4
CMP             R9, #1
BEQ             loc_280DC

loc_28158
LDR             R10, [R7,#(off_4C734 - 0x4C684)]
MOV             R2, R4
LDR             R3, [SP,#0x74+var_4C]
MOV             R1, R6
MOV             R0, R6
BLX             R10
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R10, [R7,#(off_4C734 - 0x4C684)]
MOV             R2, R4
LDR             R3, [SP,#0x74+var_4C]
MOV             R1, R6
MOV             R0, R6
BLX             R10
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R3, [SP,#0x74+var_50]
CMP             R3, #0
BEQ             loc_280DC
LDR             R2, [SP,#0x74+var_5C+4]
CMP             R9, #1
LDR             R3, [SP,#0x74+var_5C]
ADD             R3, R3, R2,LSL#2
ADD             R2, SP, #0x74+var_4
ADD             R3, R2, R3,LSL#2
LDR             R1, [R3,#-0x40]
BEQ             loc_281EC
LDR             R3, [SP,#0x74+var_4C]
MOV             R2, R6
MOV             R0, R6
STR             R3, [SP,#0x74+var_74]
MOV             R3, R4
LDR             R9, [R7,#(off_4C730 - 0x4C684)]
BLX             R9
B               loc_28244

loc_281E4
CMP             R9, #0
BEQ             loc_28158

loc_281EC
LDR             R2, [SP,#0x74+var_5C+4]
LDR             R3, [SP,#0x74+var_5C]
LDR             R1, [R6]
ADD             R3, R3, R2,LSL#2
ADD             R2, SP, #0x74+var_4
ADD             R3, R2, R3,LSL#2
LDR             R9, [R3,#-0x40]
LDR             R3, [R7,#(off_4C69C - 0x4C684)]
LDR             R0, [R9]
BLX             R3
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R3, [R7,#(off_4C69C - 0x4C684)]
LDR             R1, [R6,#4]
LDR             R0, [R9,#4]
BLX             R3
SUBS            R10, R0, #0
BNE             loc_28030
LDR             R3, [R7,#(off_4C69C - 0x4C684)]
LDR             R1, [R6,#8]
LDR             R0, [R9,#8]
BLX             R3

loc_28244
SUBS            R10, R0, #0
BNE             loc_28030
MOV             R9, #0
B               loc_280DC

loc_28254
LDR             R2, [SP,#0x74+var_4C]
MOV             R1, R4
MOV             R0, R6
BL              sub_27B00

loc_28264
MOV             R10, R0
B               loc_28030
; End of function sub_27CC0

off_2826C DCD aSrcPkEccLtcEcc_0 ; "src/pk/ecc/ltc_ecc_mul2add.c"
off_28270 DCD aKaNull+1 ; "A != NULL"
off_28274 DCD aKbNull+1 ; "B != NULL"
off_28278 DCD aCNull    ; "C != NULL"
off_2827C DCD aKaNull   ; "kA != NULL"
off_28280 DCD aKbNull   ; "kB != NULL"
off_28284 DCD aModulusNull ; "modulus != NULL"
off_28288 DCD dword_4C684



; int __fastcall sub_2828C(int, _DWORD *, _DWORD *, int, int)
sub_2828C

var_44= -0x44
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4
arg_0=  0x24

PUSH            {R4-R11,LR}
MOV             R4, R3
SUBS            R3, R0, #0
SUB             SP, SP, #0x44
STR             R3, [SP,#0x44+var_24]
BNE             loc_282B4
LDR             R1, =aSrcPkEccLtcEcc_1 ; "src/pk/ecc/ltc_ecc_mulmod_timing.c"
MOV             R2, #0x2B ; '+'
LDR             R0, =aKNull ; "k != NULL"

loc_282B0
BL              sub_26EB8

loc_282B4
CMP             R1, #0
MOV             R9, R1
MOVEQ           R2, #0x2C ; ','
LDREQ           R1, =aSrcPkEccLtcEcc_1 ; "src/pk/ecc/ltc_ecc_mulmod_timing.c"
LDREQ           R0, =aGNull ; "G != NULL"
BEQ             loc_282B0
CMP             R2, #0
MOV             R10, R2
MOVEQ           R2, #0x2D ; '-'
LDREQ           R1, =aSrcPkEccLtcEcc_1 ; "src/pk/ecc/ltc_ecc_mulmod_timing.c"
LDREQ           R0, =aRNull ; "R != NULL"
BEQ             loc_282B0
CMP             R4, #0
MOVEQ           R2, #0x2E ; '.'
LDREQ           R1, =aSrcPkEccLtcEcc_1 ; "src/pk/ecc/ltc_ecc_mulmod_timing.c"
LDREQ           R0, =aModulusNull ; "modulus != NULL"
BEQ             loc_282B0
LDR             R6, =dword_4C684
ADD             R1, SP, #0x44+var_14
MOV             R0, R4
LDR             R3, [R6,#(off_4C714 - 0x4C684)]
MOV             R5, R6
BLX             R3
SUBS            R11, R0, #0
BNE             loc_28338
LDR             R3, [R6,#(off_4C68C - 0x4C684)]
ADD             R0, SP, #0x44+var_18
BLX             R3
SUBS            R11, R0, #0
BEQ             loc_28344

loc_2832C
LDR             R2, [R6,#(off_4C720 - 0x4C684)]
LDR             R0, [SP,#0x44+var_14]
BLX             R2

loc_28338
MOV             R0, R11
ADD             SP, SP, #0x44 ; 'D'
POP             {R4-R11,PC}

loc_28344
LDR             R3, [R6,#(off_4C718 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0x44+var_18]
BLX             R3
SUBS            R11, R0, #0
BEQ             loc_2836C
LDR             R2, [R6,#(off_4C694 - 0x4C684)]
LDR             R0, [SP,#0x44+var_18]
BLX             R2
B               loc_2832C

loc_2836C
MOV             R6, R11
ADD             R7, SP, #0x44+var_10

loc_28374
BL              sub_28738
CMP             R0, #0
STR             R0, [R7,R6,LSL#2]
BNE             loc_283BC

loc_28384
CMP             R11, R6
BNE             loc_283AC
LDR             R3, [R5,#(off_4C694 - 0x4C684)]
MOV             R11, #0xD
LDR             R0, [SP,#0x44+var_18]
BLX             R3
LDR             R3, [R5,#(off_4C720 - 0x4C684)]
LDR             R0, [SP,#0x44+var_14]
BLX             R3
B               loc_28338

loc_283AC
LDR             R0, [R7,R11,LSL#2]
ADD             R11, R11, #1
BL              sub_2877C
B               loc_28384

loc_283BC
ADD             R6, R6, #1
CMP             R6, #3
BNE             loc_28374
BL              sub_28738
SUBS            R7, R0, #0
LDR             R6, [SP,#0x44+var_10]
LDR             R8, [SP,#0x44+var_C]
MOVEQ           R11, #0xD
BEQ             loc_286D8
LDR             R11, [R5,#(off_4C708 - 0x4C684)]
MOV             R2, R4
LDR             R3, [R7]
LDR             R1, [SP,#0x44+var_18]
LDR             R0, [R9]
BLX             R11
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R11, [R5,#(off_4C708 - 0x4C684)]
MOV             R2, R4
LDR             R3, [R7,#4]
LDR             R1, [SP,#0x44+var_18]
LDR             R0, [R9,#4]
BLX             R11
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R11, [R5,#(off_4C708 - 0x4C684)]
MOV             R2, R4
LDR             R3, [R7,#8]
LDR             R1, [SP,#0x44+var_18]
LDR             R0, [R9,#8]
BLX             R11
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R2, [R5,#(off_4C694 - 0x4C684)]
LDR             R0, [SP,#0x44+var_18]
BLX             R2
STR             R11, [SP,#0x44+var_18]
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [R6]
LDR             R0, [R7]
BLX             R3
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [R6,#4]
LDR             R0, [R7,#4]
BLX             R3
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [R6,#8]
LDR             R0, [R7,#8]
BLX             R3
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R5, [R5,#(off_4C734 - 0x4C684)]
MOV             R2, R4
LDR             R3, [SP,#0x44+var_14]
MOV             R1, R8
MOV             R0, R7
BLX             R5
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R5, =dword_4C684
LDR             R0, [SP,#0x44+var_24]
LDR             R2, [R5,#(off_4C6AC - 0x4C684)]
BLX             R2
SUB             R3, R0, #1
MOV             R1, #0
STR             R3, [SP,#0x44+var_34]
MOV             R0, #1
MOV             R3, #0
STRD            R0, R1, [SP,#0x44+var_30]
STR             R3, [SP,#0x44+var_38]

loc_284E4
LDR             R3, [SP,#0x44+var_30]
SUBS            R3, R3, #1
STR             R3, [SP,#0x44+var_30]
BNE             loc_28528

loc_284F4
LDR             R3, [SP,#0x44+var_34]
CMN             R3, #1
BEQ             loc_28670
MOV             R1, R3
LDR             R2, [R5,#(off_4C6A8 - 0x4C684)]
LDR             R0, [SP,#0x44+var_24]
BLX             R2
LDR             R3, [R5,#(dword_4C688 - 0x4C684)]
STR             R0, [SP,#0x44+var_38]
STR             R3, [SP,#0x44+var_30]
LDR             R3, [SP,#0x44+var_34]
SUB             R3, R3, #1
STR             R3, [SP,#0x44+var_34]

loc_28528
LDR             R3, [SP,#0x44+var_38]
LDR             R2, [R5,#(dword_4C688 - 0x4C684)]
LDR             R9, [SP,#0x44+var_8]
LDR             R1, [SP,#0x44+var_14]
SUB             R2, R2, #1
MOV             R2, R3,LSR R2
AND             R3, R2, #1
STR             R3, [SP,#0x44+var_28]
LDR             R3, [R5,#(off_4C730 - 0x4C684)]
MOV             R12, R3
AND             R3, R2, #1
ORRS            R3, R11, R3
STR             R3, [SP,#0x44+var_20]
BNE             loc_285B4
STR             R1, [SP,#0x44+var_44]
MOV             R3, R4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R6
BLX             R12
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R11, [R5,#(off_4C734 - 0x4C684)]
MOV             R2, R4
LDR             R3, [SP,#0x44+var_14]
MOV             R1, R9
MOV             R0, R8
BLX             R11
SUBS            R11, R0, #0
BNE             loc_286D8

loc_285A0
LDR             R3, [SP,#0x44+var_38]
STR             R11, [SP,#0x44+var_2C]
MOV             R3, R3,LSL#1
STR             R3, [SP,#0x44+var_38]
B               loc_284E4

loc_285B4
LDR             R0, [SP,#0x44+var_28]
EOR             R3, R11, #1
TST             R3, R0
BEQ             loc_2860C
STR             R1, [SP,#0x44+var_44]
MOV             R3, R4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R6
BLX             R12
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R11, [R5,#(off_4C734 - 0x4C684)]
MOV             R2, R4
LDR             R3, [SP,#0x44+var_14]
MOV             R1, R9
MOV             R0, R8
BLX             R11
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R11, [SP,#0x44+var_20]
B               loc_285A0

loc_2860C
MVN             R2, R2
ADD             R3, SP, #0x44+var_4
AND             R2, R2, #1
STR             R1, [SP,#0x44+var_44]
ADD             R2, R3, R2,LSL#2
MOV             R1, R8
MOV             R3, R4
LDR             R2, [R2,#-0xC]
MOV             R0, R6
BLX             R12
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R2, [SP,#0x44+var_28]
ADD             R3, SP, #0x44+var_4
ADD             R9, R3, R2,LSL#2
LDR             R3, [SP,#0x44+var_14]
MOV             R2, R4
LDR             R1, [R9,#-0xC]
LDR             R9, [R5,#(off_4C734 - 0x4C684)]
MOV             R0, R1
BLX             R9
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R11, [SP,#0x44+var_2C]
B               loc_285A0

loc_28670
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [R10]
LDR             R0, [R6]
BLX             R3
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [R10,#4]
LDR             R0, [R6,#4]
BLX             R3
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [R10,#8]
LDR             R0, [R6,#8]
BLX             R3
SUBS            R11, R0, #0
BNE             loc_286D8
LDR             R2, [SP,#0x44+arg_0]
CMP             R2, #0
BEQ             loc_286D8
LDR             R2, [SP,#0x44+var_14]
MOV             R1, R4
MOV             R0, R10
BL              sub_27B00
MOV             R11, R0

loc_286D8
LDR             R0, [SP,#0x44+var_18]
LDR             R4, =dword_4C684
CMP             R0, #0
BEQ             loc_286F0
LDR             R2, [R4,#(off_4C694 - 0x4C684)]
BLX             R2

loc_286F0
LDR             R2, [R4,#(off_4C720 - 0x4C684)]
LDR             R0, [SP,#0x44+var_14]
BLX             R2
MOV             R0, R7
BL              sub_2877C
LDR             R0, [SP,#0x44+var_10]
BL              sub_2877C
LDR             R0, [SP,#0x44+var_C]
BL              sub_2877C
LDR             R0, [SP,#0x44+var_8]
BL              sub_2877C
B               loc_28338
; End of function sub_2828C

off_28720 DCD aSrcPkEccLtcEcc_1 ; "src/pk/ecc/ltc_ecc_mulmod_timing.c"
off_28724 DCD aKNull    ; "k != NULL"
off_28728 DCD aGNull    ; "G != NULL"
off_2872C DCD aRNull    ; "R != NULL"
off_28730 DCD aModulusNull ; "modulus != NULL"
off_28734 DCD dword_4C684



; void *sub_28738()
sub_28738
PUSH            {R4,LR}
MOV             R1, #0xC ; size
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R4, R0, #0
BEQ             loc_28774
MOV             R3, #0
ADD             R2, R4, #8
ADD             R1, R4, #4
BL              sub_26A28
CMP             R0, #0
BEQ             loc_28774
MOV             R0, R4  ; ptr
MOV             R4, #0
BL              free

loc_28774
MOV             R0, R4
POP             {R4,PC}
; End of function sub_28738




; void __fastcall sub_2877C(int *)
sub_2877C
PUSH            {R4,LR}
SUBS            R4, R0, #0
POPEQ           {R4,PC}
MOV             R3, #0
LDM             R4, {R0-R2}
BL              sub_26ABC
MOV             R0, R4  ; ptr
POP             {R4,LR}
B               free
; End of function sub_2877C




; int __fastcall sub_287A0(_DWORD *, _DWORD *, _DWORD *, int, int)
sub_287A0

var_20= -0x20
var_1C= -0x1C
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4
arg_0=  0x20

PUSH            {R4-R10,LR}
SUBS            R10, R0, #0
SUB             SP, SP, #0x20
LDR             R7, [SP,#0x20+arg_0]
BNE             loc_287C4
LDR             R1, =aSrcPkEccLtcEcc_2 ; "src/pk/ecc/ltc_ecc_projective_add_point"...
MOV             R2, #0x26 ; '&'
LDR             R0, =aPNull ; "P != NULL"

loc_287C0
BL              sub_26EB8

loc_287C4
CMP             R1, #0
MOV             R8, R1
MOVEQ           R2, #0x27 ; '''
LDREQ           R1, =aSrcPkEccLtcEcc_2 ; "src/pk/ecc/ltc_ecc_projective_add_point"...
LDREQ           R0, =aQNull ; "Q != NULL"
BEQ             loc_287C0
CMP             R2, #0
MOV             R9, R2
MOVEQ           R2, #0x28 ; '('
LDREQ           R1, =aSrcPkEccLtcEcc_2 ; "src/pk/ecc/ltc_ecc_projective_add_point"...
LDREQ           R0, =aRNull ; "R != NULL"
BEQ             loc_287C0
CMP             R3, #0
MOV             R6, R3
MOVEQ           R2, #0x29 ; ')'
LDREQ           R1, =aSrcPkEccLtcEcc_2 ; "src/pk/ecc/ltc_ecc_projective_add_point"...
LDREQ           R0, =aModulusNull ; "modulus != NULL"
BEQ             loc_287C0
CMP             R7, #0
MOVEQ           R2, #0x2A ; '*'
LDREQ           R1, =aSrcPkEccLtcEcc_2 ; "src/pk/ecc/ltc_ecc_projective_add_point"...
LDREQ           R0, =aMpNull ; "mp != NULL"
BEQ             loc_287C0
MOV             R3, #0
ADD             R2, SP, #0x20+var_C
STR             R3, [SP,#0x20+var_1C]
ADD             R3, SP, #0x20+var_4
STR             R3, [SP,#0x20+var_20]
ADD             R1, SP, #0x20+var_10
ADD             R3, SP, #0x20+var_8
ADD             R0, SP, #0x20+var_14
BL              sub_26A28
SUBS            R4, R0, #0
BNE             loc_288F0
LDR             R5, =dword_4C684
MOV             R0, R6
LDR             R2, [SP,#0x20+var_14]
LDR             R1, [R8,#4]
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B0 - 0x4C684)]
LDR             R1, [R8]
LDR             R0, [R10]
BLX             R3
CMP             R0, #0
BNE             loc_28914
LDR             R1, [R8,#8]
CMP             R1, #0
BEQ             loc_28914
LDR             R3, [R5,#(off_4C6B0 - 0x4C684)]
LDR             R0, [R10,#8]
BLX             R3
CMP             R0, #0
BNE             loc_28914
LDR             R3, [R5,#(off_4C6B0 - 0x4C684)]
LDR             R1, [R8,#4]
LDR             R0, [R10,#4]
BLX             R3
CMP             R0, #0
BNE             loc_288FC

loc_288BC
MOV             R3, #0
LDRD            R0, R1, [SP,#0x20+var_14]
STR             R3, [SP,#0x20+var_1C]
LDR             R3, [SP,#0x20+var_4]
STR             R3, [SP,#0x20+var_20]
LDRD            R2, R3, [SP,#0x20+var_C]
BL              sub_26ABC
MOV             R3, R7
MOV             R2, R6
MOV             R1, R9
MOV             R0, R10
BL              sub_29118
MOV             R4, R0

loc_288F0
MOV             R0, R4
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R10,PC}

loc_288FC
LDR             R3, [R5,#(off_4C6B0 - 0x4C684)]
LDR             R1, [SP,#0x20+var_14]
LDR             R0, [R10,#4]
BLX             R3
CMP             R0, #0
BEQ             loc_288BC

loc_28914
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [SP,#0x20+var_C]
LDR             R0, [R10]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [SP,#0x20+var_8]
LDR             R0, [R10,#4]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [SP,#0x20+var_4]
LDR             R0, [R10,#8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R0, [R8,#8]
CMP             R0, #0
BNE             loc_289A0

loc_28968
LDR             R3, [R5,#(off_4C6F0 - 0x4C684)]
LDR             R1, [SP,#0x20+var_14]
LDR             R0, [SP,#0x20+var_4]
BLX             R3
SUBS            R4, R0, #0
BEQ             loc_28A7C

loc_28980
MOV             R3, #0
LDRD            R0, R1, [SP,#0x20+var_14]
STR             R3, [SP,#0x20+var_1C]
LDR             R3, [SP,#0x20+var_4]
STR             R3, [SP,#0x20+var_20]
LDRD            R2, R3, [SP,#0x20+var_C]
BL              sub_26ABC
B               loc_288F0

loc_289A0
LDR             R3, [R5,#(off_4C6F0 - 0x4C684)]
LDR             R1, [SP,#0x20+var_14]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_14]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_C]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R0, [SP,#0x20+var_14]
MOV             R1, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_C]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_14]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R0, [R8,#8]
MOV             R1, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_14]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_8]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R0, [SP,#0x20+var_14]
MOV             R1, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28968

loc_28A7C
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_14]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R2, [SP,#0x20+var_10]
LDR             R1, [SP,#0x20+var_14]
LDR             R0, [R8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_10]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_14]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R0, [SP,#0x20+var_4]
MOV             R1, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_14]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_14]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R0, [R8,#4]
MOV             R1, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_14]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_8]
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
LDR             R1, [SP,#0x20+var_14]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0x20+var_8]
BLX             R3
CMN             R0, #1
BEQ             loc_28F4C

loc_28B74
LDR             R2, [SP,#0x20+var_14]
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
MOV             R1, R2
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B0 - 0x4C684)]
MOV             R1, R6
LDR             R0, [SP,#0x20+var_14]
BLX             R3
CMN             R0, #1
BNE             loc_28F6C

loc_28BA8
LDR             R2, [SP,#0x20+var_14]
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
LDR             R1, [SP,#0x20+var_8]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B0 - 0x4C684)]
MOV             R1, R6
LDR             R0, [SP,#0x20+var_14]
BLX             R3
CMN             R0, #1
BNE             loc_28F8C

loc_28BDC
LDR             R2, [SP,#0x20+var_C]
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
LDR             R1, [SP,#0x20+var_10]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0x20+var_C]
BLX             R3
CMN             R0, #1
BEQ             loc_28FAC

loc_28C10
LDR             R2, [SP,#0x20+var_10]
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
MOV             R1, R2
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B0 - 0x4C684)]
MOV             R1, R6
LDR             R0, [SP,#0x20+var_10]
BLX             R3
CMN             R0, #1
BNE             loc_28FCC

loc_28C44
LDR             R2, [SP,#0x20+var_10]
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
LDR             R1, [SP,#0x20+var_C]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B0 - 0x4C684)]
MOV             R1, R6
LDR             R0, [SP,#0x20+var_10]
BLX             R3
CMN             R0, #1
BNE             loc_28FEC

loc_28C78
LDR             R1, [R8,#8]
CMP             R1, #0
BNE             loc_2900C

loc_28C84
LDR             R2, [SP,#0x20+var_4]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R1, [SP,#0x20+var_C]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_4]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_14]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R1, [SP,#0x20+var_C]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_14]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R1, [SP,#0x20+var_C]
LDR             R3, [R5,#(off_4C6F0 - 0x4C684)]
MOV             R0, R1
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_C]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_10]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R1, [SP,#0x20+var_C]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_10]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_14]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R1, [SP,#0x20+var_C]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_14]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R5, =dword_4C684
LDR             R1, [SP,#0x20+var_C]
LDR             R0, [SP,#0x20+var_8]
LDR             R3, [R5,#(off_4C6F0 - 0x4C684)]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_C]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R2, [SP,#0x20+var_C]
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
LDR             R1, [SP,#0x20+var_10]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0x20+var_C]
BLX             R3
CMN             R0, #1
BEQ             loc_29044

loc_28E04
LDR             R2, [SP,#0x20+var_10]
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
LDR             R1, [SP,#0x20+var_C]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0x20+var_10]
BLX             R3
CMN             R0, #1
BEQ             loc_29064

loc_28E38
LDR             R2, [SP,#0x20+var_10]
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
LDR             R1, [SP,#0x20+var_C]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0x20+var_10]
BLX             R3
CMN             R0, #1
BEQ             loc_29084

loc_28E6C
LDR             R2, [SP,#0x20+var_10]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
LDR             R1, [SP,#0x20+var_8]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_10]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
LDR             R2, [SP,#0x20+var_8]
LDR             R1, [SP,#0x20+var_14]
LDR             R0, [SP,#0x20+var_10]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0x20+var_8]
BLX             R3
CMN             R0, #1
BEQ             loc_290A4

loc_28ED8
LDR             R3, [R5,#(off_4C6AC - 0x4C684)]
LDR             R0, [SP,#0x20+var_8]
BLX             R3
CMP             R0, #0
BGT             loc_290C4

loc_28EEC
LDR             R1, [SP,#0x20+var_8]
LDR             R3, [R5,#(off_4C6F8 - 0x4C684)]
MOV             R0, R1
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [R9]
LDR             R0, [SP,#0x20+var_C]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [R9,#4]
LDR             R0, [SP,#0x20+var_8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C69C - 0x4C684)]
LDR             R1, [R9,#8]
LDR             R0, [SP,#0x20+var_4]
BLX             R3
MOV             R4, R0
B               loc_28980

loc_28F4C
LDR             R2, [SP,#0x20+var_8]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28B74

loc_28F6C
LDR             R2, [SP,#0x20+var_14]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28BA8

loc_28F8C
LDR             R2, [SP,#0x20+var_14]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28BDC

loc_28FAC
LDR             R2, [SP,#0x20+var_C]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28C10

loc_28FCC
LDR             R2, [SP,#0x20+var_10]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28C44

loc_28FEC
LDR             R2, [SP,#0x20+var_10]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28C78

loc_2900C
LDR             R2, [SP,#0x20+var_4]
LDR             R3, [R5,#(off_4C6E8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
LDR             R3, [R5,#(off_4C71C - 0x4C684)]
MOV             R2, R7
MOV             R1, R6
LDR             R0, [SP,#0x20+var_4]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28C84

loc_29044
LDR             R2, [SP,#0x20+var_C]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28E04

loc_29064
LDR             R2, [SP,#0x20+var_10]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28E38

loc_29084
LDR             R2, [SP,#0x20+var_10]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28E6C

loc_290A4
LDR             R2, [SP,#0x20+var_8]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28ED8

loc_290C4
LDR             R3, [R5,#(off_4C6A8 - 0x4C684)]
MOV             R1, #0
LDR             R0, [SP,#0x20+var_8]
BLX             R3
TST             R0, #1
BEQ             loc_28EEC
LDR             R2, [SP,#0x20+var_8]
MOV             R1, R6
LDR             R3, [R5,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_28980
B               loc_28EEC
; End of function sub_287A0

off_290FC DCD aSrcPkEccLtcEcc_2 ; "src/pk/ecc/ltc_ecc_projective_add_point"...
off_29100 DCD aPNull    ; "P != NULL"
off_29104 DCD aQNull    ; "Q != NULL"
off_29108 DCD aRNull    ; "R != NULL"
off_2910C DCD aModulusNull ; "modulus != NULL"
off_29110 DCD aMpNull   ; "mp != NULL"
off_29114 DCD dword_4C684



; int __fastcall sub_29118(_DWORD *, _DWORD *, int, int)
sub_29118

var_C= -0xC
var_8= -8

PUSH            {R0-R2,R4-R9,LR}
SUBS            R8, R0, #0
BNE             loc_29134
LDR             R1, =aSrcPkEccLtcEcc_3 ; "src/pk/ecc/ltc_ecc_projective_dbl_point"...
MOV             R2, #0x25 ; '%'
LDR             R0, =aPNull ; "P != NULL"

loc_29130
BL              sub_26EB8

loc_29134
CMP             R1, #0
MOV             R5, R1
MOVEQ           R2, #0x26 ; '&'
LDREQ           R1, =aSrcPkEccLtcEcc_3 ; "src/pk/ecc/ltc_ecc_projective_dbl_point"...
LDREQ           R0, =aRNull ; "R != NULL"
BEQ             loc_29130
CMP             R2, #0
MOV             R7, R2
MOVEQ           R2, #0x27 ; '''
LDREQ           R1, =aSrcPkEccLtcEcc_3 ; "src/pk/ecc/ltc_ecc_projective_dbl_point"...
LDREQ           R0, =aModulusNull ; "modulus != NULL"
BEQ             loc_29130
CMP             R3, #0
MOV             R9, R3
MOVEQ           R2, #0x28 ; '('
LDREQ           R1, =aSrcPkEccLtcEcc_3 ; "src/pk/ecc/ltc_ecc_projective_dbl_point"...
LDREQ           R0, =aMpNull ; "mp != NULL"
BEQ             loc_29130
MOV             R2, #0
ADD             R1, SP, #0xC+var_8
MOV             R0, SP
BL              sub_26A28
SUBS            R4, R0, #0
BNE             loc_291C4
CMP             R8, R5
LDR             R6, =dword_4C684
BNE             loc_291D0

loc_291A0
LDR             R3, [R6,#(off_4C6F0 - 0x4C684)]
LDR             R1, [SP,#0xC+var_C]
LDR             R0, [R5,#8]
BLX             R3
SUBS            R4, R0, #0
BEQ             loc_2921C

loc_291B8
MOV             R2, #0
LDRD            R0, R1, [SP,#0xC+var_C]
BL              sub_26ABC

loc_291C4
MOV             R0, R4
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_291D0
LDR             R3, [R6,#(off_4C69C - 0x4C684)]
LDR             R1, [R5]
LDR             R0, [R8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C69C - 0x4C684)]
LDR             R1, [R5,#4]
LDR             R0, [R8,#4]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C69C - 0x4C684)]
LDR             R1, [R5,#8]
LDR             R0, [R8,#8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_291A0

loc_2921C
LDR             R3, [R6,#(off_4C71C - 0x4C684)]
MOV             R2, R9
MOV             R1, R7
LDR             R0, [SP,#0xC+var_C]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDMIB           R5, {R1,R2}
LDR             R3, [R6,#(off_4C6E8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C71C - 0x4C684)]
MOV             R2, R9
MOV             R1, R7
LDR             R0, [R5,#8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R2, [R5,#8]
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
MOV             R1, R2
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B0 - 0x4C684)]
MOV             R1, R7
LDR             R0, [R5,#8]
BLX             R3
CMN             R0, #1
BNE             loc_295F8

loc_292A0
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
LDMFD           SP, {R1,R2}
LDR             R0, [R5]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0xC+var_8]
BLX             R3
CMN             R0, #1
BEQ             loc_29618

loc_292D0
LDR             R2, [SP,#0xC+var_C]
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
LDR             R1, [R5]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B0 - 0x4C684)]
MOV             R1, R7
LDR             R0, [SP,#0xC+var_C]
BLX             R3
CMN             R0, #1
BNE             loc_29638

loc_29304
LDR             R2, [SP,#0xC+var_8]
LDR             R3, [R6,#(off_4C6E8 - 0x4C684)]
LDR             R0, [SP,#0xC+var_C]
MOV             R1, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C71C - 0x4C684)]
MOV             R2, R9
MOV             R1, R7
LDR             R0, [SP,#0xC+var_8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R1, [SP,#0xC+var_8]
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
LDR             R2, [SP,#0xC+var_C]
MOV             R0, R1
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B0 - 0x4C684)]
MOV             R1, R7
LDR             R0, [SP,#0xC+var_C]
BLX             R3
CMN             R0, #1
BNE             loc_29658

loc_29370
LDR             R2, [SP,#0xC+var_C]
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
LDR             R1, [SP,#0xC+var_8]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B0 - 0x4C684)]
MOV             R1, R7
LDR             R0, [SP,#0xC+var_C]
BLX             R3
CMN             R0, #1
BNE             loc_29678

loc_293A4
LDR             R2, [R5,#4]
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
MOV             R1, R2
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B0 - 0x4C684)]
MOV             R1, R7
LDR             R0, [R5,#4]
BLX             R3
CMN             R0, #1
BNE             loc_29698

loc_293D8
LDR             R1, [R5,#4]
LDR             R3, [R6,#(off_4C6F0 - 0x4C684)]
MOV             R0, R1
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C71C - 0x4C684)]
MOV             R2, R9
MOV             R1, R7
LDR             R0, [R5,#4]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6F0 - 0x4C684)]
LDR             R1, [SP,#0xC+var_8]
LDR             R0, [R5,#4]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C71C - 0x4C684)]
MOV             R2, R9
MOV             R1, R7
LDR             R0, [SP,#0xC+var_8]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6AC - 0x4C684)]
LDR             R0, [SP,#0xC+var_8]
BLX             R3
CMP             R0, #0
BGT             loc_296B8

loc_29454
LDR             R1, [SP,#0xC+var_8]
LDR             R3, [R6,#(off_4C6F8 - 0x4C684)]
MOV             R0, R1
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDM             R5, {R1,R2}
LDR             R3, [R6,#(off_4C6E8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C71C - 0x4C684)]
MOV             R2, R9
MOV             R1, R7
LDR             R0, [R5,#4]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6F0 - 0x4C684)]
LDR             R1, [R5]
LDR             R0, [SP,#0xC+var_C]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C71C - 0x4C684)]
MOV             R2, R9
MOV             R1, R7
LDR             R0, [R5]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R2, [R5]
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
LDR             R1, [R5,#4]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [R5]
BLX             R3
CMN             R0, #1
BEQ             loc_296F0

loc_29508
LDR             R2, [R5]
LDR             R6, =dword_4C684
LDR             R1, [R5,#4]
MOV             R0, R2
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [R5]
BLX             R3
CMN             R0, #1
BEQ             loc_29710

loc_29540
LDM             R5, {R1,R2}
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [R5,#4]
BLX             R3
CMN             R0, #1
BEQ             loc_29730

loc_29570
LDR             R2, [R5,#4]
LDR             R3, [R6,#(off_4C6E8 - 0x4C684)]
LDR             R1, [SP,#0xC+var_C]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C71C - 0x4C684)]
MOV             R2, R9
MOV             R1, R7
LDR             R0, [R5,#4]
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R2, [R5,#4]
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
LDR             R1, [SP,#0xC+var_8]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
LDR             R3, [R6,#(off_4C6B4 - 0x4C684)]
MOV             R1, R4
LDR             R0, [R5,#4]
BLX             R3
CMN             R0, #1
BNE             loc_291B8
LDR             R2, [R5,#4]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
MOV             R4, R0
B               loc_291B8

loc_295F8
LDR             R2, [R5,#8]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_292A0

loc_29618
LDR             R2, [SP,#0xC+var_8]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_292D0

loc_29638
LDR             R2, [SP,#0xC+var_C]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_29304

loc_29658
LDR             R2, [SP,#0xC+var_C]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_29370

loc_29678
LDR             R2, [SP,#0xC+var_C]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_293A4

loc_29698
LDR             R2, [R5,#4]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6E0 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_293D8

loc_296B8
LDR             R3, [R6,#(off_4C6A8 - 0x4C684)]
MOV             R1, R4
LDR             R0, [SP,#0xC+var_8]
BLX             R3
TST             R0, #1
BEQ             loc_29454
LDR             R2, [SP,#0xC+var_8]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_29454

loc_296F0
LDR             R2, [R5]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_29508

loc_29710
LDR             R2, [R5]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_29540

loc_29730
LDR             R2, [R5,#4]
MOV             R1, R7
LDR             R3, [R6,#(off_4C6D8 - 0x4C684)]
MOV             R0, R2
BLX             R3
SUBS            R4, R0, #0
BNE             loc_291B8
B               loc_29570
; End of function sub_29118

off_29750 DCD aSrcPkEccLtcEcc_3 ; "src/pk/ecc/ltc_ecc_projective_dbl_point"...
off_29754 DCD aPNull    ; "P != NULL"
off_29758 DCD aRNull    ; "R != NULL"
off_2975C DCD aModulusNull ; "modulus != NULL"
off_29760 DCD aMpNull   ; "mp != NULL"
off_29764 DCD dword_4C684



; int __fastcall sub_29768(unsigned int, int, int, int, unsigned int *)
sub_29768

arg_0=  0x20

PUSH            {R4-R10,LR}
SUBS            R9, R1, #0
LDR             R6, [SP,#arg_0]
BNE             loc_29788
LDR             R1, =aSrcHashesHelpe ; "src/hashes/helper/hash_memory.c"
MOV             R2, #0x1F
LDR             R0, =aInNull ; "in != NULL"

loc_29784
BL              sub_26EB8

loc_29788
CMP             R3, #0
MOV             R8, R3
MOVEQ           R2, #0x20 ; ' '
LDREQ           R1, =aSrcHashesHelpe ; "src/hashes/helper/hash_memory.c"
LDREQ           R0, =aOutNull ; "out != NULL"
BEQ             loc_29784
CMP             R6, #0
MOVEQ           R2, #0x21 ; '!'
LDREQ           R1, =aSrcHashesHelpe ; "src/hashes/helper/hash_memory.c"
LDREQ           R0, =aOutlenNull ; "outlen != NULL"
BEQ             loc_29784
MOV             R4, R0
MOV             R10, R2
BL              sub_26FBC
SUBS            R5, R0, #0
BNE             loc_29850
LDR             R3, =dword_4C47C
MOV             R2, #0x68 ; 'h'
MLA             R4, R2, R4, R3
LDR             R2, [R6]
LDR             R3, [R4,#8]
CMP             R2, R3
STRCC           R3, [R6]
MOVCC           R5, #6
BCC             loc_29850
MOV             R0, #0xD0 ; size
BL              malloc
SUBS            R7, R0, #0
MOVEQ           R5, #0xD
BEQ             loc_29850
LDR             R3, [R4,#0x54]
BLX             R3
SUBS            R5, R0, #0
BNE             loc_29848
LDR             R3, [R4,#0x58]
MOV             R2, R10
MOV             R1, R9
MOV             R0, R7
BLX             R3
SUBS            R5, R0, #0
BNE             loc_29848
LDR             R3, [R4,#0x5C]
MOV             R1, R8
MOV             R0, R7
BLX             R3
LDR             R3, [R4,#8]
MOV             R5, R0
STR             R3, [R6]

loc_29848               ; ptr
MOV             R0, R7
BL              free

loc_29850
MOV             R0, R5
POP             {R4-R10,PC}
; End of function sub_29768

off_29858 DCD aSrcHashesHelpe ; "src/hashes/helper/hash_memory.c"
off_2985C DCD aInNull   ; "in != NULL"
off_29860 DCD aOutNull  ; "out != NULL"
off_29864 DCD aOutlenNull ; "outlen != NULL"
off_29868 DCD dword_4C47C



; int __fastcall sub_2986C(unsigned int)
sub_2986C
CMP             R0, #4
BHI             loc_29894
MOV             R3, #0x68 ; 'h'
MUL             R0, R3, R0
LDR             R3, =dword_4C754
LDR             R3, [R3,R0]
CMP             R3, #0
MOVEQ           R0, #0xA
MOVNE           R0, #0
BX              LR

loc_29894
MOV             R0, #0xA
BX              LR
; End of function sub_2986C

off_2989C DCD dword_4C754



; int __fastcall sub_298A0(unsigned int)
sub_298A0
CMP             R0, #4
BHI             loc_298C8
MOV             R3, #0x28 ; '('
MUL             R0, R3, R0
LDR             R3, =dword_4C95C
LDR             R3, [R3,R0]
CMP             R3, #0
MOVEQ           R0, #0xC
MOVNE           R0, #0
BX              LR

loc_298C8
MOV             R0, #0xC
BX              LR
; End of function sub_298A0

off_298D0 DCD dword_4C95C



; int __fastcall sub_298D4(_DWORD *, int)
sub_298D4
PUSH            {R4-R8,LR}
MOV             R5, R1
MOV             R6, R0
MOV             R4, R5,ASR#31
BL              sub_2EB8C
MOVW            R2, #0x2493
MOV             R0, R6
MOVT            R2, #0x9249
SMULL           R2, R3, R5, R2
ADD             R3, R5, R3
RSB             R4, R4, R3,ASR#4
ADD             R7, R4, #1
MOV             R1, R7
BL              sub_2BA48
CMP             R0, #0
POPNE           {R4-R8,PC}
RSB             R1, R4, R4,LSL#3
LDR             R12, [R6,#0xC]
MOV             LR, #1
STR             R7, [R6]
SUB             R5, R5, R1,LSL#2
MOV             R5, LR,LSL R5
STR             R5, [R12,R4,LSL#2]
POP             {R4-R8,PC}
; End of function sub_298D4




; int __fastcall sub_29934(int *, int *, int *)
sub_29934
PUSH            {R4-R8,LR}
MOV             R6, R2
LDR             R7, [R0,#8]
LDR             R8, [R1,#8]
CMP             R7, R8
BEQ             loc_29990
MOV             R4, R0
MOV             R5, R1
BL              sub_29E8C
CMN             R0, #1
BEQ             loc_29978
STR             R7, [R6,#8]
MOV             R2, R6
MOV             R1, R5
MOV             R0, R4
POP             {R4-R8,LR}
B               sub_307E4

loc_29978
STR             R8, [R6,#8]
MOV             R2, R6
MOV             R1, R4
MOV             R0, R5
POP             {R4-R8,LR}
B               sub_307E4

loc_29990
STR             R7, [R2,#8]
POP             {R4-R8,LR}
B               sub_2EC08
; End of function sub_29934




; int __fastcall sub_2999C(int *, unsigned int, int *)
sub_2999C
PUSH            {R4-R8,LR}
MOV             R5, R2
LDR             R2, [R0]
MOV             R8, R1
MOV             R4, R0
LDR             R3, [R5,#4]
ADD             R1, R2, #1
CMP             R3, R1
BLT             loc_29AE8

loc_299C0
LDR             R0, [R4,#8]
CMP             R0, #1
BEQ             loc_29A94
LDR             LR, [R5,#0xC]
CMP             R0, #0
LDR             R7, [R5]
LDR             R12, [R4,#0xC]
ADD             R0, LR, #4
BNE             loc_29ABC
LDR             R1, [R12]
ADD             R12, R12, #4
ADD             R3, R8, R1
BIC             R2, R3, #0xF0000000
MOV             R1, R3,LSR#28
STR             R2, [LR]
LDR             LR, [R4]
CMP             LR, #1
MOVGT           R6, #1
BGT             loc_29A14
B               loc_29B38

loc_29A10
MOV             R6, LR

loc_29A14
LDR             R3, [R12],#4
ADD             LR, R6, #1
ADD             R1, R1, R3
BIC             R2, R1, #0xF0000000
MOV             R1, R1,LSR#28
STR             R2, [R0],#4
LDR             R3, [R4]
CMP             R3, LR
BGT             loc_29A10
ADD             R3, R6, #2
MOV             LR, R0
ADD             R6, R6, #3

loc_29A44
STR             R1, [LR]
ADD             R0, R0, #4 ; s
LDR             R2, [R4]
ADD             R1, R2, #1
STR             R1, [R5]

loc_29A58
CMP             R3, R7
MOV             R1, #0  ; c
STR             R1, [R5,#8]
BGE             loc_29A80
ADD             R12, R7, #1
CMP             R6, R7
SUB             R2, R12, R6
MOVGT           R2, #4
MOVLE           R2, R2,LSL#2 ; n
BL              memset

loc_29A80
MOV             R0, R5
MOV             R6, #0
BL              sub_29BBC
MOV             R0, R6
POP             {R4-R8,PC}

loc_29A94
LDR             R0, [R4]
CMP             R0, #1
BGT             loc_29B00
LDR             R12, [R4,#0xC]
LDR             R3, [R12]
CMP             R3, R8
BCS             loc_29B00
LDR             LR, [R5,#0xC]
LDR             R7, [R5]
ADD             R0, LR, #4

loc_29ABC
MOV             R2, #1
STR             R2, [R5]
LDR             R3, [R4]
CMP             R3, R2
LDREQ           R2, [R12]
MOVEQ           R6, #2
MOVNE           R3, R2
MOVNE           R6, #2
SUBEQ           R8, R8, R2
STR             R8, [LR]
B               loc_29A58

loc_29AE8
MOV             R0, R5
BL              sub_2BA48
SUBS            R6, R0, #0
BEQ             loc_299C0
MOV             R0, R6
POP             {R4-R8,PC}

loc_29B00
MOV             R6, #0
MOV             R1, R8
STR             R6, [R4,#8]
MOV             R2, R5
MOV             R0, R4
BL              sub_2E7D4
MOV             R1, #1
MOV             R6, R0
STR             R1, [R5,#8]
MOV             R0, R5
STR             R1, [R4,#8]
BL              sub_29BBC
MOV             R0, R6
POP             {R4-R8,PC}

loc_29B38
MOV             LR, R0
MOV             R6, #3
MOV             R3, #2
B               loc_29A44
; End of function sub_2999C




; int __fastcall sub_29B48(int *, int *, int *, int *)
sub_29B48
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x10
MOV             R5, R0
MOV             R0, SP
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              sub_2BAD0
SUBS            R4, R0, #0
BEQ             loc_29B7C
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_29B7C
MOV             R1, R6
MOV             R0, R5
MOV             R2, SP
BL              sub_29934
SUBS            R4, R0, #0
BNE             loc_29BA8
MOV             R2, R8
MOV             R1, R7
MOV             R0, SP
BL              sub_2C470
MOV             R4, R0

loc_29BA8
MOV             R0, SP
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R8,PC}
; End of function sub_29B48




; int *__fastcall sub_29BBC(int *result)
sub_29BBC
LDR             R3, [R0]
CMP             R3, #0
BLE             loc_29D68
LDR             R2, [R0,#0xC]
SUB             R1, R3, #0xC0000001
LDR             R12, [R2,R1,LSL#2]
ADD             R2, R2, R1,LSL#2
CMP             R12, #0
BXNE            LR
SUB             R12, R3, #1
ANDS            R1, R12, #7
BEQ             loc_29CA8
MOV             R3, R12
STR             R12, [R0]
LDR             R12, [R2,#-4]!
CMP             R12, #0
BXNE            LR
CMP             R1, #1
BEQ             loc_29CA8
CMP             R1, #2
BEQ             loc_29C94
CMP             R1, #3
BEQ             loc_29C80
CMP             R1, #4
BEQ             loc_29C6C
CMP             R1, #5
BEQ             loc_29C58
CMP             R1, #6
BEQ             loc_29C44
SUB             R3, R3, #1
STR             R3, [R0]
LDR             R1, [R2,#-4]!
CMP             R1, #0
BXNE            LR

loc_29C44
SUB             R3, R3, #1
STR             R3, [R0]
LDR             R12, [R2,#-4]!
CMP             R12, #0
BXNE            LR

loc_29C58
SUB             R3, R3, #1
STR             R3, [R0]
LDR             R1, [R2,#-4]!
CMP             R1, #0
BXNE            LR

loc_29C6C
SUB             R3, R3, #1
STR             R3, [R0]
LDR             R12, [R2,#-4]!
CMP             R12, #0
BXNE            LR

loc_29C80
SUB             R3, R3, #1
STR             R3, [R0]
LDR             R1, [R2,#-4]!
CMP             R1, #0
BXNE            LR

loc_29C94
SUB             R3, R3, #1
STR             R3, [R0]
LDR             R12, [R2,#-4]!
CMP             R12, #0
BXNE            LR

loc_29CA8
PUSH            {R4-R8,LR}

loc_29CAC
SUB             R1, R3, #1
SUB             R4, R3, #3
CMP             R1, #0
SUB             R5, R3, #4
SUB             R6, R3, #5
SUB             R7, R3, #6
SUB             R8, R3, #7
SUB             R12, R3, #2
STR             R1, [R0]
SUB             R3, R3, #8
SUB             R1, R2, #4
BEQ             loc_29D5C
LDR             LR, [R2,#-4]
CMP             LR, #0
POPNE           {R4-R8,PC}
STR             R12, [R0]
LDR             R12, [R1,#-4]
CMP             R12, #0
POPNE           {R4-R8,PC}
STR             R4, [R0]
LDR             R1, [R2,#-0xC]
CMP             R1, #0
POPNE           {R4-R8,PC}
STR             R5, [R0]
LDR             R12, [R2,#-0x10]
CMP             R12, #0
POPNE           {R4-R8,PC}
STR             R6, [R0]
LDR             R1, [R2,#-0x14]
CMP             R1, #0
POPNE           {R4-R8,PC}
STR             R7, [R0]
LDR             R12, [R2,#-0x18]
CMP             R12, #0
POPNE           {R4-R8,PC}
STR             R8, [R0]
LDR             R1, [R2,#-0x1C]
CMP             R1, #0
POPNE           {R4-R8,PC}
STR             R3, [R0]
LDR             R12, [R2,#-0x20]!
CMP             R12, #0
BEQ             loc_29CAC
POP             {R4-R8,PC}

loc_29D5C
MOV             R2, #0
STR             R2, [R0,#8]
POP             {R4-R8,PC}

loc_29D68
MOVEQ           R3, #0
STREQ           R3, [R0,#8]
BX              LR
; End of function sub_29BBC




; int __fastcall sub_29D74(int result)
sub_29D74
LDR             R3, [R0,#0xC]
CMP             R3, #0
BXEQ            LR
LDR             R1, [R0,#4]
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, R3
MOV             R1, R1,LSL#2
BL              j_explicit_bzero
LDR             R0, [R4,#0xC] ; ptr
BL              free
MOV             R0, #0
STR             R0, [R4,#0xC]
STR             R0, [R4]
STR             R0, [R4,#4]
STR             R0, [R4,#8]
POP             {R4,PC}
; End of function sub_29D74




; int sub_29DB8(int result, ...)
sub_29DB8

var_4= -4
varg_r0=  8
varg_r1=  0xC
varg_r2=  0x10
varg_r3=  0x14

PUSH            {R0-R3}
PUSH            {R4,LR}
SUB             SP, SP, #8
ADD             R4, SP, #8+varg_r1
LDR             R0, [SP,#8+varg_r0]
STR             R4, [SP,#8+var_4]
CMP             R0, #0
BEQ             loc_29DF0

loc_29DD8
ADD             R4, R4, #4
BL              sub_29D74
LDR             R0, [R4,#-4]
STR             R4, [SP,#8+var_4]
CMP             R0, #0
BNE             loc_29DD8

loc_29DF0
ADD             SP, SP, #8
POP             {R4,LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_29DB8




; int __fastcall sub_29E00(int *, int *)
sub_29E00
PUSH            {LR}
LDR             R3, [R0,#8]
LDR             LR, [R1,#8]
CMP             R3, LR
BEQ             loc_29E24
CMP             R3, #1
MOVEQ           R0, #0xFFFFFFFF
MOVNE           R0, #1
POP             {PC}

loc_29E24
CMP             R3, #1
BEQ             loc_29E34
POP             {LR}
B               sub_29E8C

loc_29E34
MOV             R12, R0
POP             {LR}
MOV             R0, R1
MOV             R1, R12
B               sub_29E8C
; End of function sub_29E00




; int __fastcall sub_29E48(int, unsigned int)
sub_29E48
LDR             R3, [R0,#8]
CMP             R3, #1
BEQ             loc_29E84
LDR             R2, [R0]
CMP             R2, #1
BLE             loc_29E68

loc_29E60
MOV             R0, #1
BX              LR

loc_29E68
LDR             R12, [R0,#0xC]
LDR             R3, [R12]
CMP             R3, R1
BHI             loc_29E60
MOVCC           R0, #0xFFFFFFFF
MOVCS           R0, #0
BX              LR

loc_29E84
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_29E48




; int __fastcall sub_29E8C(int *, int *)
sub_29E8C
LDR             R12, [R0]
LDR             R3, [R1]
CMP             R12, R3
BGT             loc_2A084
BLT             loc_2A09C
PUSH            {R4,R5,LR}
SUB             R2, R12, #0xC0000001
LDR             LR, [R0,#0xC]
MOV             R3, R2,LSL#2
CMP             R12, #0
LDR             R1, [R1,#0xC]
ADD             R0, LR, R3
ADD             R3, R1, R3
BLE             loc_2A094
LDR             LR, [LR,R2,LSL#2]
LDR             R2, [R1,R2,LSL#2]
CMP             R2, LR
BCC             loc_2A07C
BHI             loc_2A08C
SUB             R1, R12, #1
ANDS            R2, R1, #7
MOV             R1, #0
BEQ             loc_29FC0
LDR             R4, [R0,#-4]!
MOV             R1, #1
LDR             LR, [R3,#-4]!
CMP             R4, LR
BHI             loc_2A07C
BCC             loc_2A08C
CMP             R2, R1
BEQ             loc_29FC0
CMP             R2, #2
BEQ             loc_29FA8
CMP             R2, #3
BEQ             loc_29F90
CMP             R2, #4
BEQ             loc_29F78
CMP             R2, #5
BEQ             loc_29F60
CMP             R2, #6
BEQ             loc_29F48
LDR             LR, [R0,#-4]!
ADD             R1, R1, R1
LDR             R2, [R3,#-4]!
CMP             LR, R2
BHI             loc_2A07C
BCC             loc_2A08C

loc_29F48
LDR             LR, [R0,#-4]!
ADD             R1, R1, #1
LDR             R2, [R3,#-4]!
CMP             LR, R2
BHI             loc_2A07C
BCC             loc_2A08C

loc_29F60
LDR             LR, [R0,#-4]!
ADD             R1, R1, #1
LDR             R2, [R3,#-4]!
CMP             LR, R2
BHI             loc_2A07C
BCC             loc_2A08C

loc_29F78
LDR             LR, [R0,#-4]!
ADD             R1, R1, #1
LDR             R2, [R3,#-4]!
CMP             LR, R2
BHI             loc_2A07C
BCC             loc_2A08C

loc_29F90
LDR             LR, [R0,#-4]!
ADD             R1, R1, #1
LDR             R2, [R3,#-4]!
CMP             LR, R2
BHI             loc_2A07C
BCC             loc_2A08C

loc_29FA8
LDR             LR, [R0,#-4]!
ADD             R1, R1, #1
LDR             R2, [R3,#-4]!
CMP             LR, R2
BHI             loc_2A07C

loc_29FBC
BCC             loc_2A08C

loc_29FC0
ADD             R1, R1, #1
CMP             R12, R1
BEQ             loc_2A094
LDR             R5, [R0,#-4]
SUB             LR, R0, #4
LDR             R4, [R3,#-4]
SUB             R2, R3, #4
CMP             R5, R4
BHI             loc_2A07C
BCC             loc_2A08C
LDR             R5, [LR,#-4]
LDR             R4, [R2,#-4]
CMP             R5, R4
BHI             loc_2A07C
BCC             loc_2A08C
LDR             R5, [R0,#-0xC]
LDR             R4, [R3,#-0xC]
CMP             R5, R4
BHI             loc_2A07C
BCC             loc_2A08C
LDR             R5, [R0,#-0x10]
LDR             R4, [R3,#-0x10]
CMP             R5, R4
BHI             loc_2A07C
BCC             loc_2A08C
LDR             R0, [R0,#-0x14]
LDR             R3, [R3,#-0x14]
CMP             R0, R3
BHI             loc_2A07C
BCC             loc_2A08C
LDR             R0, [LR,#-0x14]
LDR             R3, [R2,#-0x14]
CMP             R0, R3
BHI             loc_2A07C
BCC             loc_2A08C
LDR             R0, [LR,#-0x18]
LDR             R3, [R2,#-0x18]
CMP             R0, R3
BHI             loc_2A07C
BCC             loc_2A08C
LDR             R5, [LR,#-0x1C]
ADD             R1, R1, #7
LDR             R4, [R2,#-0x1C]
SUB             R0, LR, #0x1C
SUB             R3, R2, #0x1C
CMP             R5, R4
BLS             loc_29FBC

loc_2A07C
MOV             R0, #1
POP             {R4,R5,PC}

loc_2A084
MOV             R0, #1
BX              LR

loc_2A08C
MOV             R0, #0xFFFFFFFF
POP             {R4,R5,PC}

loc_2A094
MOV             R0, #0
POP             {R4,R5,PC}

loc_2A09C
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_29E8C




; int __fastcall sub_2A0A4(int *)
sub_2A0A4
LDR             R2, [R0]
CMP             R2, #0
BEQ             loc_2A240
LDR             R1, [R0,#0xC]
PUSH            {LR}
LDR             R3, [R1]
BLE             loc_2A254
CMP             R3, #0
BNE             loc_2A254
SUB             R12, R2, #1
MOV             R0, R3
ANDS            R12, R12, #7
BEQ             loc_2A178
LDR             R3, [R1,#4]!
MOV             R0, #1
CMP             R3, #0
BNE             loc_2A208
CMP             R12, R0
BEQ             loc_2A178
CMP             R12, #2
BEQ             loc_2A168
CMP             R12, #3
BEQ             loc_2A158
CMP             R12, #4
BEQ             loc_2A148
CMP             R12, #5
BEQ             loc_2A138
CMP             R12, #6
BEQ             loc_2A128
LDR             R3, [R1,#4]!
ADD             R0, R0, R0
CMP             R3, #0
BNE             loc_2A208

loc_2A128
LDR             R3, [R1,#4]!
ADD             R0, R0, #1
CMP             R3, #0
BNE             loc_2A208

loc_2A138
LDR             R3, [R1,#4]!
ADD             R0, R0, #1
CMP             R3, #0
BNE             loc_2A208

loc_2A148
LDR             R3, [R1,#4]!
ADD             R0, R0, #1
CMP             R3, #0
BNE             loc_2A208

loc_2A158
LDR             R3, [R1,#4]!
ADD             R0, R0, #1
CMP             R3, #0
BNE             loc_2A208

loc_2A168
LDR             R3, [R1,#4]!
ADD             R0, R0, #1
CMP             R3, #0
BNE             loc_2A208

loc_2A178
ADD             R0, R0, #1
ADD             LR, R1, #4
CMP             R2, R0
MOV             R12, R0
LDR             R3, [R1,#4]
BEQ             loc_2A248
CMP             R3, #0
BNE             loc_2A208
LDR             R3, [LR,#4]
ADD             R0, R0, #1
CMP             R3, #0
BNE             loc_2A208
LDR             R3, [R1,#0xC]
ADD             R0, R12, #2
CMP             R3, #0
BNE             loc_2A208
LDR             R3, [R1,#0x10]
ADD             R0, R12, #3
CMP             R3, #0
BNE             loc_2A208
LDR             R3, [R1,#0x14]
ADD             R0, R12, #4
CMP             R3, #0
BNE             loc_2A208
LDR             R3, [R1,#0x18]
ADD             R0, R12, #5
CMP             R3, #0
BNE             loc_2A208
LDR             R3, [R1,#0x1C]
ADD             R0, R12, #6
CMP             R3, #0
BNE             loc_2A208
LDR             R3, [R1,#0x20]!
ADD             R0, R12, #7
CMP             R3, #0
BEQ             loc_2A178

loc_2A208
RSB             R2, R0, R0,LSL#3
MOV             R2, R2,LSL#2

loc_2A210
TST             R3, #1
BNE             loc_2A238
MOV             R12, #dword_3AC70

loc_2A220
AND             R1, R3, #0xF
MOV             R3, R3,LSR#4
LDR             R0, [R12,R1,LSL#2]
CMP             R1, #0
ADD             R2, R2, R0
BEQ             loc_2A220

loc_2A238
MOV             R0, R2
POP             {PC}

loc_2A240
MOV             R0, R2
BX              LR

loc_2A248
RSB             R0, R2, R2,LSL#3
MOV             R2, R0,LSL#2
B               loc_2A210

loc_2A254
MOV             R2, #0
B               loc_2A210
; End of function sub_2A0A4




; int __fastcall sub_2A25C(int *, int *)
sub_2A25C
CMP             R0, R1
BEQ             loc_2A308
PUSH            {R4-R6,LR}
MOV             R4, R1
LDR             R3, [R4,#4]
MOV             R5, R0
LDR             R1, [R0]
CMP             R3, R1
BLT             loc_2A2F0

loc_2A280
CMP             R1, #0
LDR             R0, [R5,#0xC]
LDR             R2, [R4,#0xC]
MOVLE           R3, #0
BLE             loc_2A2B4
SUB             R12, R0, #4
MOV             R3, #0

loc_2A29C
LDR             R1, [R12,#4]!
ADD             R3, R3, #1
STR             R1, [R2],#4
LDR             R1, [R5]
CMP             R1, R3
BGT             loc_2A29C

loc_2A2B4
LDR             R0, [R4]
CMP             R0, R3
BLE             loc_2A2DC
MOV             R12, #0

loc_2A2C4
STR             R12, [R2],#4
ADD             R3, R3, #1
LDR             R1, [R4]
CMP             R1, R3
BGT             loc_2A2C4
LDR             R1, [R5]

loc_2A2DC
LDR             R2, [R5,#8]
MOV             R0, #0
STR             R1, [R4]
STR             R2, [R4,#8]
POP             {R4-R6,PC}

loc_2A2F0
MOV             R0, R4
BL              sub_2BA48
CMP             R0, #0
POPNE           {R4-R6,PC}
LDR             R1, [R5]
B               loc_2A280

loc_2A308
MOV             R0, #0
BX              LR
; End of function sub_2A25C




; int __fastcall sub_2A310(int *)
sub_2A310
MOV             R3, R0
LDR             R0, [R0]
CMP             R0, #0
BXEQ            LR
LDR             R1, [R3,#0xC]
SUB             R2, R0, #0xC0000001
SUB             R0, R0, #1
RSB             R12, R0, R0,LSL#3
LDR             R3, [R1,R2,LSL#2]
MOV             R0, R12,LSL#2
CMP             R3, #0
BXEQ            LR

loc_2A340
MOVS            R3, R3,LSR#1
ADD             R0, R0, #1
BNE             loc_2A340
BX              LR
; End of function sub_2A310




; int __fastcall sub_2A350(int *, int *)
sub_2A350
PUSH            {R4-R10,LR}
MOV             R5, R1
LDR             R3, [R5,#4]
MOV             R6, R0
LDR             R1, [R0]
CMP             R3, R1
BLT             loc_2A588

loc_2A36C
SUB             R7, R1, #0xC0000001
LDR             R9, [R6,#0xC]
LDR             R10, [R5,#0xC]
MOV             R0, R7,LSL#2
SUBS            R4, R1, #1
LDR             R2, [R5]
ADD             R9, R9, R0
STR             R1, [R5]
ADD             R7, R10, R0
BMI             loc_2A554
SUB             R12, R1, #2
CMP             R12, #6
BLE             loc_2A5A0
SUB             R1, R1, #9
SUB             R12, R9, #0x20 ; ' '
AND             R8, R1, #7
SUB             R3, R7, #0x20 ; ' '
MOV             R1, #0

loc_2A3B4
LDR             LR, [R12,#0x20]
MOV             R0, R1,LSL#27
PLD             [R12,#-0x2C]
SUB             R4, R4, #8
CMP             R8, R4
PLD             [R3,#-0x2C]
MOV             R9, R12
MOV             R7, R3
ORR             R1, R0, LR,LSR#1
MOV             LR, LR,LSL#27
STR             R1, [R3,#0x20]
AND             R0, LR, #0x8000000
LDR             R1, [R12,#0x1C]
SUB             R3, R3, #0x20 ; ' '
SUB             R12, R12, #0x20 ; ' '
ORR             LR, R0, R1,LSR#1
MOV             R0, R1,LSL#27
STR             LR, [R3,#0x3C]
AND             LR, R0, #0x8000000
LDR             R1, [R12,#0x38]
ORR             R0, LR, R1,LSR#1
MOV             LR, R1,LSL#27
STR             R0, [R3,#0x38]
AND             R0, LR, #0x8000000
LDR             R1, [R12,#0x34]
ORR             LR, R0, R1,LSR#1
MOV             R0, R1,LSL#27
STR             LR, [R3,#0x34]
AND             LR, R0, #0x8000000
LDR             R1, [R12,#0x30]
ORR             R0, LR, R1,LSR#1
MOV             LR, R1,LSL#27
STR             R0, [R3,#0x30]
AND             R0, LR, #0x8000000
LDR             R1, [R12,#0x2C]
ORR             LR, R0, R1,LSR#1
MOV             R0, R1,LSL#27
STR             LR, [R3,#0x2C]
AND             LR, R0, #0x8000000
LDR             R1, [R12,#0x28]
ORR             R0, LR, R1,LSR#1
MOV             LR, R1,LSL#27
STR             R0, [R3,#0x28]
AND             R0, LR, #0x8000000
LDR             R1, [R12,#0x24]
ORR             LR, R0, R1,LSR#1
AND             R1, R1, #1
STR             LR, [R3,#0x24]
BNE             loc_2A3B4

loc_2A478
ADD             R0, R4, #1
ANDS            R12, R0, #3
BEQ             loc_2A4E4
CMP             R12, #1
BEQ             loc_2A4C4
CMP             R12, #2
BEQ             loc_2A4AC
LDR             LR, [R9],#-4
SUB             R4, R4, #1
MOV             R3, LR,LSR#1
ORR             R0, R3, R1,LSL#27
AND             R1, LR, #1
STR             R0, [R7],#-4

loc_2A4AC
LDR             R12, [R9],#-4
SUB             R4, R4, #1
MOV             LR, R12,LSR#1
ORR             R3, LR, R1,LSL#27
AND             R1, R12, #1
STR             R3, [R7],#-4

loc_2A4C4
LDR             R0, [R9],#-4
SUB             R4, R4, #1
CMN             R4, #1
MOV             R12, R0,LSR#1
ORR             LR, R12, R1,LSL#27
AND             R1, R0, #1
STR             LR, [R7],#-4
BEQ             loc_2A550

loc_2A4E4
MOV             R0, R9
MOV             LR, R7
LDR             R3, [R0],#-4
SUB             R4, R4, #4
CMN             R4, #1
SUB             R7, R7, #0x10
SUB             R9, R9, #0x10
AND             R8, R3, #1
MOV             R12, R3,LSR#1
ORR             R1, R12, R1,LSL#27
STR             R1, [LR],#-4
LDR             R3, [R9,#0xC]
AND             R12, R3, #1
MOV             R1, R3,LSR#1
ORR             R3, R1, R8,LSL#27
STR             R3, [LR]
LDR             LR, [R0,#-4]
AND             R0, LR, #1
MOV             R1, LR,LSR#1
ORR             R12, R1, R12,LSL#27
STR             R12, [R7,#8]
LDR             R3, [R9,#4]
AND             R1, R3, #1
MOV             LR, R3,LSR#1
ORR             R0, LR, R0,LSL#27
STR             R0, [R7,#4]
BNE             loc_2A4E4

loc_2A550
LDR             R1, [R5]

loc_2A554
CMP             R2, R1
BLE             loc_2A570
SUB             R2, R2, R1
ADD             R0, R10, R1,LSL#2 ; s
MOV             R2, R2,LSL#2 ; n
MOV             R1, #0  ; c
BL              memset

loc_2A570
LDR             R1, [R6,#8]
MOV             R0, R5
STR             R1, [R5,#8]
BL              sub_29BBC
MOV             R0, #0
POP             {R4-R10,PC}

loc_2A588
MOV             R0, R5
BL              sub_2BA48
CMP             R0, #0
POPNE           {R4-R10,PC}
LDR             R1, [R6]
B               loc_2A36C

loc_2A5A0
MOV             R1, #0
B               loc_2A478
; End of function sub_2A350




; int __fastcall sub_2A5A8(int *, int *, int *, int *)
sub_2A5A8

var_80= -0x80
var_7C= -0x7C
var_78= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_54= -0x54
var_48= -0x48
var_44= -0x44
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_18= -0x18
var_14= -0x14
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x84
LDR             LR, [R1]
CMP             LR, #0
BEQ             loc_2A694
MOV             R8, R1
MOV             R5, R0
MOV             R4, R3
MOV             R6, R2
BL              sub_29E8C
CMN             R0, #1
BNE             loc_2A610
CMP             R4, #0
MOVEQ           R7, R4
BEQ             loc_2A5F4
MOV             R1, R4
MOV             R0, R5
BL              sub_2A25C
MOV             R7, R0

loc_2A5F4
CMP             R6, #0
BEQ             loc_2A604
MOV             R0, R6
BL              sub_2EB8C

loc_2A604
MOV             R0, R7
ADD             SP, SP, #0x84
POP             {R4-R11,PC}

loc_2A610
LDR             R1, [R5]
ADD             R0, SP, #0x84+var_54
ADD             R1, R1, #2
BL              sub_2BB58
SUBS            R7, R0, #0
BNE             loc_2A604
LDR             R3, [R5]
ADD             R0, SP, #0x84+var_24
ADD             R2, R3, #2
STR             R2, [SP,#0x84+var_54]
BL              sub_2BAD0
SUBS            R7, R0, #0
BEQ             loc_2A658

loc_2A644
ADD             R0, SP, #0x84+var_54
BL              sub_29D74
MOV             R0, R7
ADD             SP, SP, #0x84
POP             {R4-R11,PC}

loc_2A658
ADD             R0, SP, #0x84+var_14
BL              sub_2BAD0
SUBS            R7, R0, #0
BEQ             loc_2A674

loc_2A668
ADD             R0, SP, #0x84+var_24
BL              sub_29D74
B               loc_2A644

loc_2A674
MOV             R1, R5
ADD             R0, SP, #0x84+var_44
BL              sub_2BB10
SUBS            R7, R0, #0
BEQ             loc_2A69C

loc_2A688
ADD             R0, SP, #0x84+var_14
BL              sub_29D74
B               loc_2A668

loc_2A694
MOV             R7, #0xFFFFFFFD
B               loc_2A604

loc_2A69C
MOV             R1, R8
ADD             R0, SP, #0x84+var_34
BL              sub_2BB10
SUBS            R7, R0, #0
BEQ             loc_2A6BC

loc_2A6B0
ADD             R0, SP, #0x84+var_44
BL              sub_29D74
B               loc_2A688

loc_2A6BC
LDR             R9, [R8,#8]
MOVW            R11, #0x2493
LDR             R10, [R5,#8]
ADD             R0, SP, #0x84+var_34
MOVT            R11, #0x9249
STR             R7, [SP,#0x84+var_2C]
STR             R9, [SP,#0x84+var_78]
STR             R7, [SP,#0x84+var_3C]
STR             R10, [SP,#0x84+var_7C]
BL              sub_2A310
SMULL           R2, R3, R0, R11
MOV             R12, R0,ASR#31
ADD             R1, R0, R3
RSB             R3, R12, R1,ASR#4
RSB             R2, R3, R3,LSL#3
SUB             R0, R0, R2,LSL#2
CMP             R0, #0x1B
BEQ             loc_2A748
RSB             R8, R0, #0x1B
ADD             R2, SP, #0x84+var_44
MOV             R1, R8
MOV             R0, R2
BL              sub_2CA58
SUBS            R7, R0, #0
BEQ             loc_2A72C

loc_2A720
ADD             R0, SP, #0x84+var_34
BL              sub_29D74
B               loc_2A6B0

loc_2A72C
ADD             R2, SP, #0x84+var_34
MOV             R1, R8
MOV             R0, R2
BL              sub_2CA58
SUBS            R7, R0, #0
BNE             loc_2A720
MOV             R7, R8

loc_2A748
LDR             LR, [SP,#0x84+var_34]
ADD             R0, SP, #0x84+var_34
LDR             R11, [SP,#0x84+var_44]
SUB             R10, LR, #1
STR             LR, [SP,#0x84+var_80]
SUB             R9, R11, #1
STR             R10, [SP,#0x84+var_74]
SUB             R10, R9, R10
MOV             R1, R10
BL              sub_2C160
CMP             R0, #0
MOVEQ           R8, R10,LSL#2
BEQ             loc_2A7A0

loc_2A77C
MOV             R7, R0
B               loc_2A720

loc_2A784
LDR             LR, [SP,#0x84+var_48]
LDR             R3, [LR,R8]
ADD             R12, R3, #1
STR             R12, [LR,R8]
BL              sub_2E764
CMP             R0, #0
BNE             loc_2A77C

loc_2A7A0
ADD             R1, SP, #0x84+var_34
ADD             R0, SP, #0x84+var_44
BL              sub_29E00
CMN             R0, #1
ADD             R2, SP, #0x84+var_44
ADD             R1, SP, #0x84+var_34
MOV             R0, R2
BNE             loc_2A784
MOV             R1, R10
ADD             R0, SP, #0x84+var_34
BL              sub_2E5A0
LDR             R3, [SP,#0x84+var_80]
CMP             R3, R9
LDRGT           R3, [SP,#0x84+var_44]
BGT             loc_2AA08
LDR             R8, [SP,#0x84+var_74]
MOV             R1, #0xFFFFFFFC
LDR             R2, [SP,#0x84+var_80]
MOV             R10, R9,LSL#2
SUB             R11, R11, #2
STR             R7, [SP,#0x84+var_64]
STR             R6, [SP,#0x84+var_60]
MOV             R12, R8,LSL#2
SUB             LR, R2, #2
MUL             R0, R1, R2
STR             LR, [SP,#0x84+var_6C]
ADD             R3, R12, R1
MOV             R9, R12
STR             R3, [SP,#0x84+var_74]
LDR             R3, [SP,#0x84+var_44]
STR             R0, [SP,#0x84+var_68]
STRD            R4, R5, [SP,#0x84+var_5C]

loc_2A820
ADD             R4, R11, #1
CMP             R3, R4
SUBLT           R6, R10, #4
SUBLT           R7, R11, #1
BLT             loc_2A9E8
LDR             R7, [SP,#0x84+var_38]
SUB             R6, R10, #4
LDR             R8, [SP,#0x84+var_28]
LDR             R5, [SP,#0x84+var_68]
LDR             R0, [R7,R10]
LDR             R2, [R8,R9]
ADD             R4, R5, R10
LDR             R5, [SP,#0x84+var_48]
CMP             R0, R2
MOVEQ           R7, #0xFFFFFFF
ADD             R8, R5, R4
STREQ           R7, [R5,R4]
BEQ             loc_2A894
LDR             R12, [R7,R6]
MOV             R1, R0,LSR#4
MOV             R3, #0
ORR             R0, R12, R0,LSL#28
BLX             sub_34E18
MOV             R3, #0
MOV             R2, #0xFFFFFFF
CMP             R1, R3
CMPEQ           R0, R2
MOVHI           R0, R2
STR             R0, [R8]

loc_2A894
LDR             R1, [R8]
SUB             LR, R10, #8
MOV             R2, R5
STR             LR, [SP,#0x84+var_70]
SUB             R7, R11, #1
LDR             R5, [SP,#0x84+var_6C]
ADD             R0, R1, #1
BIC             R12, R0, #0xF0000000
STR             R12, [R8]
MOV             R8, #3
B               loc_2A91C

loc_2A8C0
CMP             R7, #0
LDR             R12, [SP,#0x84+var_38]
LDRGE           R3, [SP,#0x84+var_70]
LDRGE           R2, [R12,R3]
CMP             R11, #0
LDR             R3, [SP,#0x84+var_8]
ADDGE           R1, SP, #0x84+var_14
ADDGE           R0, SP, #0x84+var_24
ADDLT           R1, SP, #0x84+var_14
ADDLT           R0, SP, #0x84+var_24
STR             R2, [R3]
MOVLT           R2, #0
LDRGE           R2, [R12,R6]
STRLT           R2, [R3,#4]
LDRLT           R2, [R12,R10]
STRGE           R2, [R3,#4]
LDRGE           R2, [R12,R10]
STR             R8, [SP,#0x84+var_14]
STR             R2, [R3,#8]
BL              sub_29E8C
CMP             R0, #1
BNE             loc_2A984
LDR             R2, [SP,#0x84+var_48]

loc_2A91C
LDR             R3, [R2,R4]
ADD             R0, SP, #0x84+var_24
SUB             R1, R3, #1
BIC             LR, R1, #0xF0000000
STR             LR, [R2,R4]
BL              sub_2EB8C
CMP             R5, #0
LDR             R1, [SP,#0x84+var_28]
LDRGE           R2, [SP,#0x84+var_74]
MOVLT           R0, #0
LDR             R3, [SP,#0x84+var_18]
MOV             LR, #2
LDR             R12, [SP,#0x84+var_48]
LDRGE           R0, [R1,R2]
ADD             R2, SP, #0x84+var_24
STR             R0, [R3]
MOV             R0, R2
LDR             R1, [R1,R9]
STR             LR, [SP,#0x84+var_24]
STR             R1, [R3,#4]
LDR             R1, [R12,R4]
BL              sub_2CBE4
SUBS            R2, R0, #0
BEQ             loc_2A8C0
MOV             R7, R2
B               loc_2A720

loc_2A984
LDR             R10, [SP,#0x84+var_48]
ADD             R2, SP, #0x84+var_24
ADD             R0, SP, #0x84+var_34
LDR             R1, [R10,R4]
BL              sub_2CBE4
CMP             R0, #0
BNE             loc_2A77C
LDR             R5, [SP,#0x84+var_80]
ADD             R0, SP, #0x84+var_24
RSB             R8, R5, #1
ADD             R10, R8, R11
MOV             R1, R10
BL              sub_2C160
CMP             R0, #0
BNE             loc_2A77C
ADD             R2, SP, #0x84+var_44
ADD             R1, SP, #0x84+var_24
MOV             R0, R2
BL              sub_2E764
CMP             R0, #0
BNE             loc_2A77C
LDR             R0, [SP,#0x84+var_3C]
CMP             R0, #1
BEQ             loc_2AA7C

loc_2A9E4
LDR             R3, [SP,#0x84+var_44]

loc_2A9E8
LDR             R4, [SP,#0x84+var_80]
MOV             R10, R6
CMP             R4, R11
MOVLE           R11, R7
BLE             loc_2A820
LDR             R7, [SP,#0x84+var_64]
LDR             R6, [SP,#0x84+var_60]
LDRD            R4, R5, [SP,#0x84+var_5C]

loc_2AA08
CMP             R3, #0
LDRNE           R3, [R5,#8]
CMP             R6, #0
STR             R3, [SP,#0x84+var_3C]
BEQ             loc_2AA44
ADD             R0, SP, #0x84+var_54
BL              sub_29BBC
MOV             R1, R6
ADD             R0, SP, #0x84+var_54
BL              sub_2AAD4
LDR             R0, [SP,#0x84+var_7C]
LDR             R1, [SP,#0x84+var_78]
SUBS            R12, R0, R1
MOVNE           R12, #1
STR             R12, [R6,#8]

loc_2AA44
CMP             R4, #0
MOVEQ           R7, R4
BEQ             loc_2A720
ADD             R2, SP, #0x84+var_44
MOV             R1, R7
MOV             R3, #0
MOV             R0, R2
BL              sub_329D0
SUBS            R7, R0, #0
BNE             loc_2A720
MOV             R1, R4
ADD             R0, SP, #0x84+var_44
BL              sub_2AAD4
B               loc_2A720

loc_2AA7C
ADD             R1, SP, #0x84+var_24
ADD             R0, SP, #0x84+var_34
BL              sub_2A25C
CMP             R0, #0
BNE             loc_2A77C
MOV             R1, R10
ADD             R0, SP, #0x84+var_24
BL              sub_2C160
CMP             R0, #0
BNE             loc_2A77C
ADD             R2, SP, #0x84+var_44
ADD             R1, SP, #0x84+var_24
MOV             R0, R2
BL              sub_29934
CMP             R0, #0
BNE             loc_2A77C
LDR             R1, [SP,#0x84+var_48]
LDR             LR, [R1,R4]
SUB             R2, LR, #1
BIC             R12, R2, #0xF0000000
STR             R12, [R1,R4]
B               loc_2A9E4
; End of function sub_2A5A8




; int __fastcall sub_2AAD4(int *, int *)
sub_2AAD4
PUSH            {R4,LR}
MOV             R12, R1
MOV             R4, R0
SUB             SP, SP, #0x10
MOV             LR, SP
LDM             R0, {R0-R3}
STM             LR, {R0-R3}
LDM             R12, {R0-R3}
STM             R4, {R0-R3}
LDM             LR, {R0-R3}
STM             R12, {R0-R3}
ADD             SP, SP, #0x10
POP             {R4,PC}
; End of function sub_2AAD4




; int __fastcall sub_2AB08(int *, int *, int, int *)
sub_2AB08

var_28= -0x28
var_20= -0x20
var_10= -0x10

LDR             R12, [R2,#8]
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x28
CMP             R12, #1
BEQ             loc_2AC44
MOV             R8, R3
LDR             R3, [R1,#8]
MOV             R5, R1
MOV             R7, R0
MOV             R4, R2
CMP             R3, #1
BEQ             loc_2ABD8
MOV             R0, R2
BL              sub_2E444
CMP             R0, #1
BEQ             loc_2ABB0
MOV             R0, R4
BL              sub_32FCC
CMP             R0, #0
BEQ             loc_2AB80

loc_2AB58
STR             R0, [SP,#0x28+var_28]
MOV             R3, R8
MOV             R2, R4
MOV             R1, R5
MOV             R0, R7
BL              sub_2AC78
MOV             R6, R0

loc_2AB74
MOV             R0, R6
ADD             SP, SP, #0x28 ; '('
POP             {R4-R8,PC}

loc_2AB80
MOV             R0, R4
BL              sub_2E1FC
LDR             R1, [R4]
MOV             R0, R0,LSL#1
CMP             R1, #0
BLE             loc_2ABA8
LDR             R2, [R4,#0xC]
LDR             R6, [R2]
TST             R6, #1
BNE             loc_2AB58

loc_2ABA8
CMP             R0, #0
BNE             loc_2AB58

loc_2ABB0
STR             R0, [SP,#0x28+var_28]
MOV             R3, R8
MOV             R2, R4
MOV             R1, R5
MOV             R0, R7
BL              sub_2F1F4
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0x28 ; '('
POP             {R4-R8,PC}

loc_2ABD8
ADD             R0, SP, #0x28+var_20
BL              sub_2BAD0
SUBS            R6, R0, #0
BNE             loc_2AB74
MOV             R0, R7
ADD             R2, SP, #0x28+var_20
MOV             R1, R4
BL              sub_2BBA8
SUBS            R6, R0, #0
BNE             loc_2AC38
ADD             R0, SP, #0x28+var_10
BL              sub_2BAD0
SUBS            R6, R0, #0
BNE             loc_2AC38
MOV             R0, R5
ADD             R1, SP, #0x28+var_10
BL              sub_329A8
SUBS            R6, R0, #0
BEQ             loc_2AC4C
ADD             R1, SP, #0x28+var_10
ADD             R0, SP, #0x28+var_20
MOV             R2, #0
BL              sub_29DB8
B               loc_2AB74

loc_2AC38
ADD             R0, SP, #0x28+var_20
BL              sub_29D74
B               loc_2AB74

loc_2AC44
MOV             R6, #0xFFFFFFFD
B               loc_2AB74

loc_2AC4C
MOV             R2, R4
ADD             R1, SP, #0x28+var_10
MOV             R3, R8
ADD             R0, SP, #0x28+var_20
BL              sub_2AB08
ADD             R1, SP, #0x28+var_10
MOV             R6, R0
MOV             R2, #0
ADD             R0, SP, #0x28+var_20
BL              sub_29DB8
B               loc_2AB74
; End of function sub_2AB08




; int __fastcall sub_2AC78(int *, int *, int *, int *, int)
sub_2AC78

var_1038= -0x1038
var_1034= -0x1034
var_1030= -0x1030
var_102C= -0x102C
var_1028= -0x1028
var_1024= -0x1024
var_1020= -0x1020
var_1018= -0x1018
var_1014= -0x1014
var_1004= -0x1004
var_FF4= -0xFF4
var_s4=  4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1000
SUB             SP, SP, #0x3C
MOV             R6, R2
STR             R0, [SP,#0x103C+var_1038]
MOV             R0, R1
STR             R1, [SP,#0x103C+var_1030]
STR             R3, [SP,#0x103C+var_102C]
BL              sub_2A310
CMP             R0, #7
BLE             loc_2ACCC
CMP             R0, #0x24 ; '$'
BGT             loc_2AD0C
MOV             R7, #0x40 ; '@'
MOV             R4, #2
MOV             R5, #3
MOV             R8, #4
MOV             R11, #8
STR             R7, [SP,#0x103C+var_1034]
STRD            R4, R5, [SP,#0x103C+var_1028]
B               loc_2ACE8

loc_2ACCC
MOV             R11, #4
MOV             R8, #2
MOV             R9, #0x20 ; ' '
MOV             R10, #1
STR             R8, [SP,#0x103C+var_1024]
STR             R9, [SP,#0x103C+var_1034]
STR             R10, [SP,#0x103C+var_1028]

loc_2ACE8
LDR             R1, [R6,#4]
ADD             R0, SP, #0x103C+var_FF4
BL              sub_2BB58
SUBS            R5, R0, #0
BEQ             loc_2AD4C

loc_2ACFC
MOV             R0, R5
ADD             SP, SP, #0x1000
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}

loc_2AD0C
CMP             R0, #0x8C
BLE             loc_2B1BC
MOVW            R3, #0x1C2
CMP             R0, R3
BLE             loc_2B2F8
MOVW            R1, #0x517
CMP             R0, R1
BGT             loc_2B318
MOV             R0, #0x200
MOV             R4, #5
MOV             R5, #6
MOV             R8, #0x20 ; ' '
MOV             R11, #0x40 ; '@'
STR             R0, [SP,#0x103C+var_1034]
STRD            R4, R5, [SP,#0x103C+var_1028]
B               loc_2ACE8

loc_2AD4C
MOV             R12, R8,LSL#4
SUB             LR, R11, R8
ADD             R1, SP, #0x103C+var_1004
ANDS            R3, LR, #7
ADD             R7, R1, R12
STR             R12, [SP,#0x103C+var_1020]
MOV             R10, R8
MOV             R4, R7
BEQ             loc_2AE6C
CMP             R3, #1
BEQ             loc_2AE48
CMP             R3, #2
BEQ             loc_2AE2C
CMP             R3, #3
BEQ             loc_2AE10
CMP             R3, #4
BEQ             loc_2ADF4
CMP             R3, #5
BEQ             loc_2ADD8
CMP             R3, #6
BEQ             loc_2ADBC
LDR             R1, [R6,#4]
MOV             R0, R7
BL              sub_2BB58
SUBS            R5, R0, #0
BNE             loc_2B0AC
ADD             R10, R8, #1
ADD             R4, R7, #0x10

loc_2ADBC
LDR             R1, [R6,#4]
MOV             R0, R4
BL              sub_2BB58
SUBS            R5, R0, #0
BNE             loc_2B0AC
ADD             R10, R10, #1
ADD             R4, R4, #0x10

loc_2ADD8
LDR             R1, [R6,#4]
MOV             R0, R4
BL              sub_2BB58
SUBS            R5, R0, #0
BNE             loc_2B0AC
ADD             R10, R10, #1
ADD             R4, R4, #0x10

loc_2ADF4
LDR             R1, [R6,#4]
MOV             R0, R4
BL              sub_2BB58
SUBS            R5, R0, #0
BNE             loc_2B0AC
ADD             R10, R10, #1
ADD             R4, R4, #0x10

loc_2AE10
LDR             R1, [R6,#4]
MOV             R0, R4
BL              sub_2BB58
SUBS            R5, R0, #0
BNE             loc_2B0AC
ADD             R10, R10, #1
ADD             R4, R4, #0x10

loc_2AE2C
LDR             R1, [R6,#4]
MOV             R0, R4
BL              sub_2BB58
SUBS            R5, R0, #0
BNE             loc_2B0AC
ADD             R10, R10, #1
ADD             R4, R4, #0x10

loc_2AE48
LDR             R1, [R6,#4]
MOV             R0, R4
BL              sub_2BB58
SUBS            R5, R0, #0
BNE             loc_2B0AC
ADD             R10, R10, #1
ADD             R4, R4, #0x10
CMP             R11, R10
BEQ             loc_2AF40

loc_2AE6C
LDR             R1, [R6,#4]
MOV             R0, R4
BL              sub_2BB58
SUBS            R5, R0, #0
ADD             R9, R4, #0x10
MOV             R0, R9
BNE             loc_2B0AC
LDR             R1, [R6,#4]
ADD             R10, R10, #1
BL              sub_2BB58
SUBS            R5, R0, #0
ADD             R0, R9, #0x10
MOV             R9, R10
BNE             loc_2B0AC
LDR             R1, [R6,#4]
ADD             R10, R10, #1
BL              sub_2BB58
SUBS            R5, R0, #0
ADD             R0, R4, #0x30 ; '0'
BNE             loc_2B0AC
LDR             R1, [R6,#4]
ADD             R10, R9, #2
BL              sub_2BB58
SUBS            R5, R0, #0
ADD             R0, R4, #0x40 ; '@'
BNE             loc_2B0AC
LDR             R1, [R6,#4]
ADD             R10, R9, #3
BL              sub_2BB58
SUBS            R5, R0, #0
ADD             R0, R4, #0x50 ; 'P'
BNE             loc_2B0AC
LDR             R1, [R6,#4]
ADD             R10, R9, #4
BL              sub_2BB58
SUBS            R5, R0, #0
ADD             R0, R4, #0x60 ; '`'
BNE             loc_2B0AC
LDR             R1, [R6,#4]
ADD             R10, R9, #5
BL              sub_2BB58
SUBS            R5, R0, #0
ADD             R0, R4, #0x70 ; 'p'
ADD             R4, R4, #0x80
BNE             loc_2B0AC
LDR             R1, [R6,#4]
ADD             R10, R9, #6
BL              sub_2BB58
SUBS            R5, R0, #0
BNE             loc_2B0AC
ADD             R10, R9, #7
CMP             R11, R10
BNE             loc_2AE6C

loc_2AF40
ADD             R2, SP, #0x103C+var_s4
ADD             R0, R2, #0x20 ; ' '
LDR             R7, [R0]
CMP             R7, #0
BEQ             loc_2B1DC
ADD             R12, SP, #0x103C+var_s4
ADD             R9, SP, #0x103C+var_1004
ADD             LR, R12, #0x20 ; ' '
LDR             R3, [LR]
ADD             R1, SP, #0x103C+var_1018
MOV             R0, R6
CMP             R3, #1
BEQ             loc_2B248
BL              sub_2E168
SUBS            R5, R0, #0
BNE             loc_2AFA0
ADD             R7, SP, #0x103C+var_1014
LDR             R1, [R6,#4]
MOV             R0, R7
BL              sub_2BB58
SUBS            R5, R0, #0
MOVEQ           R10, #sub_2E030
BEQ             loc_2B26C

loc_2AFA0
ADD             R0, SP, #0x103C+var_FF4
BL              sub_29D74
CMP             R11, R8
BLE             loc_2ACFC
LDR             R7, [SP,#0x103C+var_1020]
ADD             R10, SP, #0x103C+var_1004
ADD             R11, R10, R11,LSL#4
ADD             R9, R10, R7
SUB             R8, R11, R9
SUB             R6, R8, #0x10
MOV             R1, R6,LSR#4
ADD             R0, R1, #1
ANDS            R2, R0, #7
BEQ             loc_2B058
CMP             R2, #1
BEQ             loc_2B044
CMP             R2, #2
BEQ             loc_2B038
CMP             R2, #3
BEQ             loc_2B02C
CMP             R2, #4
BEQ             loc_2B020
CMP             R2, #5
BEQ             loc_2B014
CMP             R2, #6
BNE             loc_2B358

loc_2B008
MOV             R0, R9
ADD             R9, R9, #0x10
BL              sub_29D74

loc_2B014
MOV             R0, R9
ADD             R9, R9, #0x10
BL              sub_29D74

loc_2B020
MOV             R0, R9
ADD             R9, R9, #0x10
BL              sub_29D74

loc_2B02C
MOV             R0, R9
ADD             R9, R9, #0x10
BL              sub_29D74

loc_2B038
MOV             R0, R9
ADD             R9, R9, #0x10
BL              sub_29D74

loc_2B044
MOV             R0, R9
ADD             R9, R9, #0x10
BL              sub_29D74
CMP             R11, R9
BEQ             loc_2ACFC

loc_2B058
MOV             R0, R9
ADD             R4, R9, #0x10
BL              sub_29D74
MOV             R0, R4
BL              sub_29D74
ADD             R0, R9, #0x20 ; ' '
BL              sub_29D74
ADD             R0, R9, #0x30 ; '0'
BL              sub_29D74
ADD             R0, R9, #0x40 ; '@'
BL              sub_29D74
ADD             R0, R9, #0x50 ; 'P'
BL              sub_29D74
ADD             R0, R9, #0x60 ; '`'
BL              sub_29D74
ADD             R0, R9, #0x70 ; 'p'
ADD             R9, R9, #0x80
BL              sub_29D74
CMP             R11, R9
BNE             loc_2B058
B               loc_2ACFC

loc_2B0AC
CMP             R10, R8
BLE             loc_2B1A4
ADD             LR, SP, #0x103C+var_1004
ADD             R10, LR, R10,LSL#4
SUB             R12, R10, R7
SUB             R3, R12, #0x10
MOV             R11, R3,LSR#4
ADD             R8, R11, #1
ANDS            R6, R8, #7
BEQ             loc_2B154
CMP             R6, #1
BEQ             loc_2B140
CMP             R6, #2
BEQ             loc_2B134
CMP             R6, #3
BEQ             loc_2B128
CMP             R6, #4
BEQ             loc_2B11C
CMP             R6, #5
BEQ             loc_2B110
CMP             R6, #6
BNE             loc_2B368

loc_2B104
MOV             R0, R7
ADD             R7, R7, #0x10
BL              sub_29D74

loc_2B110
MOV             R0, R7
ADD             R7, R7, #0x10
BL              sub_29D74

loc_2B11C
MOV             R0, R7
ADD             R7, R7, #0x10
BL              sub_29D74

loc_2B128
MOV             R0, R7
ADD             R7, R7, #0x10
BL              sub_29D74

loc_2B134
MOV             R0, R7
ADD             R7, R7, #0x10
BL              sub_29D74

loc_2B140
MOV             R0, R7
ADD             R7, R7, #0x10
BL              sub_29D74
CMP             R7, R10
BEQ             loc_2B1A4

loc_2B154
MOV             R0, R7
ADD             R9, R7, #0x10
BL              sub_29D74
MOV             R0, R9
BL              sub_29D74
ADD             R0, R7, #0x20 ; ' '
BL              sub_29D74
ADD             R0, R7, #0x30 ; '0'
BL              sub_29D74
ADD             R0, R7, #0x40 ; '@'
BL              sub_29D74
ADD             R0, R7, #0x50 ; 'P'
BL              sub_29D74
ADD             R0, R7, #0x60 ; '`'
BL              sub_29D74
ADD             R0, R7, #0x70 ; 'p'
ADD             R7, R7, #0x80
BL              sub_29D74
CMP             R7, R10
BNE             loc_2B154

loc_2B1A4
ADD             R0, SP, #0x103C+var_FF4
BL              sub_29D74
MOV             R0, R5
ADD             SP, SP, #0x1000
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}

loc_2B1BC
MOV             R5, #0x80
MOV             R4, #3
STR             R5, [SP,#0x103C+var_1034]
MOV             R5, #4
MOV             R8, #8
MOV             R11, #0x10
STRD            R4, R5, [SP,#0x103C+var_1028]
B               loc_2ACE8

loc_2B1DC
ADD             R1, SP, #0x103C+var_1018
MOV             R0, R6
BL              sub_2C930
SUBS            R5, R0, #0
BNE             loc_2AFA0
LDR             R4, [R6]
LDR             R1, [R6,#4]
MOV             R5, R4,LSL#1
ADD             R2, R5, #1
CMP             R4, #0xFF
CMPLE           R2, #0x200
BLT             loc_2B398
ADD             R7, SP, #0x103C+var_1014
MOV             R0, R7
BL              sub_2BB58
SUBS            R5, R0, #0
BNE             loc_2AFA0
MOV             R10, #0x2C7D0

loc_2B228
MOV             R1, R6
MOV             R0, R7
BL              sub_2C528
SUBS            R5, R0, #0
BEQ             loc_2B378

loc_2B23C
MOV             R0, R7
BL              sub_29D74
B               loc_2AFA0

loc_2B248
SUB             R7, R9, #0x10
BL              sub_33640
MOV             R0, R7
LDR             R1, [R6,#4]
BL              sub_2BB58
SUBS            R5, R0, #0
MOVEQ           R10, #sub_33110
BNE             loc_2AFA0

loc_2B26C
MOV             R1, #1
MOV             R0, R7
BL              sub_2E630
ADD             R2, SP, #0x103C+var_FF4
MOV             R1, R6
LDR             R0, [SP,#0x103C+var_1038]
BL              sub_2C470
SUBS            R5, R0, #0
BNE             loc_2B23C

loc_2B290
LDR             R0, [SP,#0x103C+var_1034]
ADD             R1, SP, #0x103C+var_1004
ADD             R4, R1, R0
ADD             R0, SP, #0x103C+var_FF4
MOV             R1, R4
BL              sub_2A25C
SUBS            R5, R0, #0
BNE             loc_2B23C
LDR             R9, [SP,#0x103C+var_1028]
B               loc_2B2D0

loc_2B2B8
LDR             R2, [SP,#0x103C+var_1018]
BLX             R10
CMP             R0, #0
BNE             loc_2B68C
CMP             R9, R5
BLE             loc_2B3B8

loc_2B2D0
MOV             R1, R4
MOV             R0, R4
BL              sub_2E6C0
SUBS            R12, R0, #0
ADD             R5, R5, #1
MOV             R1, R6
MOV             R0, R4
BEQ             loc_2B2B8

loc_2B2F0
MOV             R5, R12
B               loc_2B23C

loc_2B2F8
MOV             R4, #0x100
MOV             R5, #5
STR             R4, [SP,#0x103C+var_1034]
MOV             R4, #4
MOV             R8, #0x10
MOV             R11, #0x20 ; ' '
STRD            R4, R5, [SP,#0x103C+var_1028]
B               loc_2ACE8

loc_2B318
MOVW            R2, #0xDC9
CMP             R0, R2
MOVGT           R2, #0x800
MOVLE           R2, #0x400
STR             R2, [SP,#0x103C+var_1034]
MOVGT           R2, #7
MOVLE           R2, #6
MOVGT           R8, #0x80
STR             R2, [SP,#0x103C+var_1028]
MOVGT           R2, #8
MOVLE           R2, #7
MOVLE           R8, #0x40 ; '@'
MOVGT           R11, #0x100
MOVLE           R11, #0x80
STR             R2, [SP,#0x103C+var_1024]
B               loc_2ACE8

loc_2B358
MOV             R0, R9
ADD             R9, R9, #0x10
BL              sub_29D74
B               loc_2B008

loc_2B368
MOV             R0, R7
ADD             R7, R7, #0x10
BL              sub_29D74
B               loc_2B104

loc_2B378
LDR             R0, [SP,#0x103C+var_1038]
ADD             R3, SP, #0x103C+var_FF4
MOV             R2, R6
MOV             R1, R7
BL              sub_2CCE0
SUBS            R5, R0, #0
BNE             loc_2B23C
B               loc_2B290

loc_2B398
ADD             R7, SP, #0x103C+var_1014
MOV             R0, R7
BL              sub_2BB58
SUBS            R5, R0, #0
MOVEQ           R10, #sub_310B4
BEQ             loc_2B228
B               loc_2AFA0

loc_2B3B8
ADD             R4, R8, #1
CMP             R11, R4
BLE             loc_2B58C
SUB             R12, R11, R4
LDR             R3, [SP,#0x103C+var_1020]
ANDS            R5, R12, #3
ADD             LR, SP, #0x103C+var_1004
ADD             R9, LR, R3
BEQ             loc_2B49C
CMP             R5, #1
BEQ             loc_2B45C
CMP             R5, #2
BEQ             loc_2B424
MOV             R0, R9
ADD             R9, R9, #0x10
MOV             R2, R9
ADD             R1, SP, #0x103C+var_FF4
BL              sub_2CB6C
SUBS            R5, R0, #0
BNE             loc_2B23C
LDR             R2, [SP,#0x103C+var_1018]
MOV             R1, R6
MOV             R0, R9
BLX             R10
SUBS            R5, R0, #0
BNE             loc_2B23C
ADD             R4, R4, #1

loc_2B424
MOV             R0, R9
ADD             R9, R9, #0x10
MOV             R2, R9
ADD             R1, SP, #0x103C+var_FF4
BL              sub_2CB6C
SUBS            R5, R0, #0
BNE             loc_2B23C
LDR             R2, [SP,#0x103C+var_1018]
MOV             R1, R6
MOV             R0, R9
BLX             R10
SUBS            R5, R0, #0
BNE             loc_2B23C
ADD             R4, R4, #1

loc_2B45C
MOV             R0, R9
ADD             R9, R9, #0x10
MOV             R2, R9
ADD             R1, SP, #0x103C+var_FF4
BL              sub_2CB6C
SUBS            R5, R0, #0
BNE             loc_2B23C
LDR             R2, [SP,#0x103C+var_1018]
MOV             R1, R6
MOV             R0, R9
BLX             R10
SUBS            R5, R0, #0
BNE             loc_2B23C
ADD             R4, R4, #1
CMP             R11, R4
BLE             loc_2B58C

loc_2B49C
MOV             R5, R4
STR             R8, [SP,#0x103C+var_1038]
STR             R7, [SP,#0x103C+var_1034]

loc_2B4A8
ADD             R7, R9, #0x10
ADD             R1, SP, #0x103C+var_FF4
MOV             R0, R9
MOV             R2, R7
BL              sub_2CB6C
SUBS            R12, R0, #0
ADD             R8, R9, #0x30 ; '0'
ADD             R4, R9, #0x20 ; ' '
ADD             R5, R5, #4
ADD             R9, R9, #0x40 ; '@'
MOV             R1, R6
MOV             R0, R7
BNE             loc_2B694
LDR             R2, [SP,#0x103C+var_1018]
BLX             R10
SUBS            R12, R0, #0
MOV             R2, R4
ADD             R1, SP, #0x103C+var_FF4
MOV             R0, R7
BNE             loc_2B694
BL              sub_2CB6C
SUBS            R12, R0, #0
MOV             R1, R6
MOV             R0, R4
BNE             loc_2B694
LDR             R2, [SP,#0x103C+var_1018]
BLX             R10
SUBS            R12, R0, #0
MOV             R2, R8
ADD             R1, SP, #0x103C+var_FF4
MOV             R0, R4
BNE             loc_2B694
BL              sub_2CB6C
SUBS            R12, R0, #0
MOV             R1, R6
MOV             R0, R8
BNE             loc_2B694
LDR             R2, [SP,#0x103C+var_1018]
BLX             R10
SUBS            R12, R0, #0
MOV             R2, R9
ADD             R1, SP, #0x103C+var_FF4
MOV             R0, R8
BNE             loc_2B694
BL              sub_2CB6C
SUBS            R12, R0, #0
MOV             R1, R6
MOV             R0, R9
BNE             loc_2B694
LDR             R2, [SP,#0x103C+var_1018]
BLX             R10
SUBS            R12, R0, #0
BNE             loc_2B694
CMP             R11, R5
BGT             loc_2B4A8
LDR             R8, [SP,#0x103C+var_1038]
LDR             R7, [SP,#0x103C+var_1034]

loc_2B58C
LDR             R2, [SP,#0x103C+var_1030]
MOV             R0, #0
MOV             R3, #1
MOV             R5, R0
STR             R3, [SP,#0x103C+var_1038]
MOV             R4, R0
LDR             LR, [R2]
MOV             R3, R0
SUB             R9, LR, #1
STR             R9, [SP,#0x103C+var_1034]
MOV             R9, R8
MOV             R8, R6
MOV             R6, R0

loc_2B5C0
LDR             R12, [SP,#0x103C+var_1038]
SUBS            R2, R12, #1
STR             R2, [SP,#0x103C+var_1038]
BNE             loc_2B5F8

loc_2B5D0
LDR             LR, [SP,#0x103C+var_1034]
CMN             LR, #1
BEQ             loc_2B724
LDR             R4, [SP,#0x103C+var_1030]
MOV             R0, #0x1C
SUB             R12, LR, #1
STR             R0, [SP,#0x103C+var_1038]
STR             R12, [SP,#0x103C+var_1034]
LDR             R1, [R4,#0xC]
LDR             R4, [R1,LR,LSL#2]

loc_2B5F8
MOV             R2, R4,LSR#27
MOV             R4, R4,LSL#1
AND             LR, R2, #1
ORRS            R1, R3, LR
BEQ             loc_2B6A4
MVN             R0, R2
CMP             R3, #1
MOVNE           R3, #0
ANDEQ           R3, R0, #1
CMP             R3, #0
BNE             loc_2B6AC
LDR             R12, [SP,#0x103C+var_1024]
ADD             R6, R6, #1
CMP             R12, R6
SUB             R2, R12, R6
ORR             R5, R5, LR,LSL R2
MOVNE           R3, #2
BNE             loc_2B5C0
MOV             R6, R3
B               loc_2B664

loc_2B648
LDR             R2, [SP,#0x103C+var_1018]
BLX             R10
SUBS            R12, R0, #0
BNE             loc_2B684
LDR             R3, [SP,#0x103C+var_1024]
CMP             R3, R6
BLE             loc_2B6E0

loc_2B664
MOV             R1, R7
MOV             R0, R7
BL              sub_2E6C0
SUBS            R12, R0, #0
ADD             R6, R6, #1
MOV             R1, R8
MOV             R0, R7
BEQ             loc_2B648

loc_2B684
MOV             R8, R9
B               loc_2B2F0

loc_2B68C
MOV             R5, R0
B               loc_2B23C

loc_2B694
LDR             R8, [SP,#0x103C+var_1038]
MOV             R5, R12
LDR             R7, [SP,#0x103C+var_1034]
B               loc_2B23C

loc_2B6A4
MOV             R3, R1
B               loc_2B5C0

loc_2B6AC
MOV             R1, R7
MOV             R0, R7
BL              sub_2E6C0
SUBS            R12, R0, #0
BNE             loc_2B684
LDR             R2, [SP,#0x103C+var_1018]
MOV             R1, R8
MOV             R0, R7
BLX             R10
SUBS            R12, R0, #0
BNE             loc_2B684
MOV             R3, #1
B               loc_2B5C0

loc_2B6E0
ADD             LR, SP, #0x103C+var_1004
MOV             R2, R7
ADD             R1, LR, R5,LSL#4
MOV             R0, R7
BL              sub_2CB6C
SUBS            R12, R0, #0
BNE             loc_2B684
LDR             R2, [SP,#0x103C+var_1018]
MOV             R1, R8
MOV             R0, R7
BLX             R10
SUBS            R12, R0, #0
BNE             loc_2B684
MOV             R5, R12
MOV             R3, #1
MOV             R6, R12
B               loc_2B5C0

loc_2B724
SUB             R1, R3, #2
MOV             R4, R6
CLZ             R0, R1
CMP             R4, #0
MOV             R2, R0,LSR#5
MOVLE           R2, #0
STR             R6, [SP,#0x103C+var_1034]
MOV             R6, R8
CMP             R2, #0
MOV             R8, R9
MOV             R9, R5
BEQ             loc_2B7D8
LDR             R4, [SP,#0x103C+var_1038]
B               loc_2B768

loc_2B75C
LDR             LR, [SP,#0x103C+var_1034]
CMP             LR, R4
BLE             loc_2B7D8

loc_2B768
MOV             R1, R7
MOV             R0, R7
BL              sub_2E6C0
SUBS            R5, R0, #0
MOV             R9, R9,LSL#1
ADD             R4, R4, #1
MOV             R1, R6
MOV             R0, R7
BNE             loc_2B23C
LDR             R2, [SP,#0x103C+var_1018]
BLX             R10
SUBS            R5, R0, #0
BNE             loc_2B23C
TST             R11, R9
BEQ             loc_2B75C
ADD             R1, SP, #0x103C+var_FF4
MOV             R2, R7
MOV             R0, R7
BL              sub_2CB6C
SUBS            R5, R0, #0
MOV             R1, R6
MOV             R0, R7
BNE             loc_2B23C
LDR             R2, [SP,#0x103C+var_1018]
BLX             R10
SUBS            R5, R0, #0
BEQ             loc_2B75C
B               loc_2B23C

loc_2B7D8
ADD             R12, SP, #0x103C+var_s4
ADD             R5, R12, #0x20 ; ' '
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_2B804
MOV             R1, R6
LDR             R2, [SP,#0x103C+var_1018]
MOV             R0, R7
BLX             R10
SUBS            R5, R0, #0
BNE             loc_2B23C

loc_2B804
LDR             R1, [SP,#0x103C+var_102C]
MOV             R0, R7
BL              sub_2AAD4
MOV             R5, #0
B               loc_2B23C
; End of function sub_2AC78




; int __fastcall sub_2B818(int *, int *, int *)
sub_2B818

var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4-R8,LR}
MOV             R5, R1
LDR             R1, [R0]
SUB             SP, SP, #0x20
MOV             R6, R2
CMP             R1, #0
BEQ             loc_2B878
LDR             R2, [R5]
CMP             R2, #0
BEQ             loc_2B860
MOV             R1, R0
MOV             R0, SP
BL              sub_2BB10
SUBS            R4, R0, #0
BEQ             loc_2B894
MOV             R0, R4
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R8,PC}

loc_2B860
MOV             R1, R6
BL              sub_329A8
MOV             R4, R0
MOV             R0, R4
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R8,PC}

loc_2B878
MOV             R1, R2
MOV             R0, R5
BL              sub_329A8
MOV             R4, R0
MOV             R0, R4
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R8,PC}

loc_2B894
MOV             R1, R5
ADD             R0, SP, #0x20+var_10
BL              sub_2BB10
SUBS            R4, R0, #0
BEQ             loc_2B8BC

loc_2B8A8
ADD             R0, SP, #0x20+var_10
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R8,PC}

loc_2B8BC
MOV             R0, SP
STR             R4, [SP,#0x20+var_8]
STR             R4, [SP,#0x20+var_18]
BL              sub_2A0A4
MOV             R5, R0
ADD             R0, SP, #0x20+var_10
BL              sub_2A0A4
CMP             R5, R0
MOV             R7, R0
MOVLT           R8, R5
MOVGE           R8, R0
CMP             R8, #0
BGT             loc_2B990

loc_2B8F0
CMP             R5, R7
BGT             loc_2B9CC

loc_2B8F8
CMP             R5, R7
BGE             loc_2B940
B               loc_2B9EC

loc_2B904
ADD             R2, SP, #0x20+var_10
MOV             R1, SP
MOV             R0, R2
BL              sub_307E4
SUBS            R4, R0, #0
ADD             R0, SP, #0x20+var_10
BNE             loc_2B984
BL              sub_2A0A4
ADD             R2, SP, #0x20+var_10
MOV             R3, R4
MOV             R1, R0
MOV             R0, R2
BL              sub_329D0
SUBS            R4, R0, #0
BNE             loc_2B984

loc_2B940
LDR             R3, [SP,#0x20+var_10]
ADD             R1, SP, #0x20+var_10
MOV             R0, SP
CMP             R3, #0
BEQ             loc_2B970
BL              sub_29E8C
CMP             R0, #1
BNE             loc_2B904
ADD             R1, SP, #0x20+var_10
MOV             R0, SP
BL              sub_2AAD4
B               loc_2B904

loc_2B970
MOV             R1, R8
MOV             R2, R6
BL              sub_2CA58
SUBS            R4, R0, #0
STREQ           R4, [R6,#8]

loc_2B984
MOV             R0, SP
BL              sub_29D74
B               loc_2B8A8

loc_2B990
MOV             R3, R4
MOV             R2, SP
MOV             R1, R8
MOV             R0, SP
BL              sub_329D0
SUBS            R4, R0, #0
BNE             loc_2B984
ADD             R2, SP, #0x20+var_10
MOV             R3, R4
MOV             R1, R8
MOV             R0, R2
BL              sub_329D0
SUBS            R4, R0, #0
BNE             loc_2B984
B               loc_2B8F0

loc_2B9CC
MOV             R3, #0
MOV             R2, SP
SUB             R1, R5, R8
MOV             R0, SP
BL              sub_329D0
SUBS            R4, R0, #0
BNE             loc_2B984
B               loc_2B8F8

loc_2B9EC
ADD             R2, SP, #0x20+var_10
SUB             R1, R7, R8
MOV             R3, #0
MOV             R0, R2
BL              sub_329D0
SUBS            R4, R0, #0
BNE             loc_2B984
B               loc_2B940
; End of function sub_2B818


loc_2BA0C
LDR             R3, [R0]
CMP             R3, #0
BEQ             loc_2BA40
LDR             R2, [R0,#0xC]
CMP             R3, #2
MOVLT           R0, R3
MOVGE           R0, #2
CMP             R0, #2
SUB             R0, R0, #1
LDR             R0, [R2,R0,LSL#2]
LDRPL           R3, [R2]
ORRPL           R0, R3, R0,LSL#28
BX              LR

loc_2BA40
MOV             R0, R3
BX              LR



; int __fastcall sub_2BA48(int, int)
sub_2BA48
LDR             R3, [R0,#4]
CMP             R3, R1
BLT             loc_2BA5C
MOV             R0, #0
BX              LR

loc_2BA5C
PUSH            {R4-R6,LR}
MOV             R4, R0
RSBS            R0, R1, #0
AND             R5, R1, #0x1F
AND             R2, R0, #0x1F
RSBPL           R5, R2, #0
LDR             R0, [R4,#0xC] ; ptr
RSB             R12, R5, #0x40 ; '@'
ADD             R5, R12, R1
MOV             R1, R5,LSL#2 ; size
BL              realloc
CMP             R0, #0
BEQ             loc_2BAC8
LDR             R3, [R4,#4]
STR             R0, [R4,#0xC]
STR             R5, [R4,#4]
CMP             R5, R3
BLE             loc_2BAC0
ADD             LR, R0, R3,LSL#2
MOV             R1, #0

loc_2BAAC
STR             R1, [LR],#4
ADD             R3, R3, #1
LDR             R0, [R4,#4]
CMP             R0, R3
BGT             loc_2BAAC

loc_2BAC0
MOV             R0, #0
POP             {R4-R6,PC}

loc_2BAC8
MOV             R0, #0xFFFFFFFE
POP             {R4-R6,PC}
; End of function sub_2BA48




; int __fastcall sub_2BAD0(int)
sub_2BAD0
PUSH            {R4,LR}
MOV             R1, #1  ; size
MOV             R4, R0
MOV             R0, #0x80 ; nmemb
BL              calloc
CMP             R0, #0
STR             R0, [R4,#0xC]
BEQ             loc_2BB08
MOV             R3, #0
MOV             R2, #0x20 ; ' '
STR             R3, [R4]
MOV             R0, R3
STRD            R2, R3, [R4,#4]
POP             {R4,PC}

loc_2BB08
MOV             R0, #0xFFFFFFFE
POP             {R4,PC}
; End of function sub_2BAD0




; int __fastcall sub_2BB10(int *, int *)
sub_2BB10
PUSH            {R4-R6,LR}
MOV             R5, R1
LDR             R1, [R1]
MOV             R6, R0
BL              sub_2BB58
SUBS            R4, R0, #0
BEQ             loc_2BB34

loc_2BB2C
MOV             R0, R4
POP             {R4-R6,PC}

loc_2BB34
MOV             R0, R5
MOV             R1, R6
BL              sub_2A25C
SUBS            R4, R0, #0
BEQ             loc_2BB2C
MOV             R0, R6
BL              sub_29D74
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_2BB10




; int __fastcall sub_2BB58(_DWORD *, int)
sub_2BB58
RSBS            R2, R1, #0
PUSH            {R4-R6,LR}
MOV             R5, R0
AND             R0, R2, #0x1F
AND             R4, R1, #0x1F
RSBPL           R4, R0, #0
MOV             R3, R1
RSB             R12, R4, #0x40 ; '@'
ADD             R4, R12, R3
MOV             R1, #1  ; size
MOV             R0, R4,LSL#2 ; nmemb
BL              calloc
CMP             R0, #0
STR             R0, [R5,#0xC]
MOVNE           R3, #0
MOVNE           R0, R3
STMNE           R5, {R3,R4}
STRNE           R3, [R5,#8]
MOVEQ           R0, #0xFFFFFFFE
POP             {R4-R6,PC}
; End of function sub_2BB58




; int __fastcall sub_2BBA8(int *, int, int *)
sub_2BBA8

var_14= -0x14

LDR             R3, [R1,#8]
CMP             R3, #1
BEQ             loc_2BC28
LDR             R12, [R1]
CMP             R12, #0
BEQ             loc_2BC28
PUSH            {R4,R5,LR}
MOV             R5, R0
SUB             SP, SP, #0xC
MOV             R4, R1
BLE             loc_2BBE4
LDR             R0, [R1,#0xC]
LDR             R1, [R0]
TST             R1, #1
BNE             loc_2BBF8

loc_2BBE4
MOV             R1, R4
MOV             R0, R5
ADD             SP, SP, #0xC
POP             {R4,R5,LR}
B               sub_2BC30

loc_2BBF8
MOV             R1, #1
MOV             R0, R4
STR             R2, [SP,#0x18+var_14]
BL              sub_29E48
CMP             R0, #0
LDR             R2, [SP,#0x18+var_14]
BEQ             loc_2BBE4
MOV             R1, R4
MOV             R0, R5
ADD             SP, SP, #0xC
POP             {R4,R5,LR}
B               sub_30DC0

loc_2BC28
MOV             R0, #0xFFFFFFFD
BX              LR
; End of function sub_2BBA8




; int __fastcall sub_2BC30(int *, int *, int *)
sub_2BC30

var_9C= -0x9C
var_98= -0x98
var_94= -0x94
var_90= -0x90
var_8C= -0x8C
var_84= -0x84
var_78= -0x78
var_74= -0x74
var_68= -0x68
var_64= -0x64
var_58= -0x58
var_54= -0x54
var_48= -0x48
var_44= -0x44
var_38= -0x38
var_34= -0x34
var_28= -0x28
var_24= -0x24
var_18= -0x18
var_14= -0x14
var_8= -8

LDR             R3, [R1,#8]
PUSH            {R4-R7,LR}
SUB             SP, SP, #0x9C
CMP             R3, #1
BEQ             loc_2BF18
LDR             R4, [R1]
CMP             R4, #0
BEQ             loc_2BF18
MOV             R12, #0
ADD             R6, SP, #0x9C+var_14
STR             R12, [SP,#0x9C+var_8C]
ADD             LR, SP, #0x9C+var_24
STR             R6, [SP,#0x9C+var_90]
ADD             R12, SP, #0x9C+var_34
ADD             R6, SP, #0x9C+var_44
MOV             R7, R2
STR             R6, [SP,#0x9C+var_9C]
MOV             R5, R0
MOV             R4, R1
ADD             R3, SP, #0x9C+var_54
ADD             R2, SP, #0x9C+var_64
ADD             R1, SP, #0x9C+var_74
ADD             R0, SP, #0x9C+var_84
STR             LR, [SP,#0x9C+var_94]
STR             R12, [SP,#0x9C+var_98]
BL              sub_33654
SUBS            R6, R0, #0
BEQ             loc_2BCAC

loc_2BCA0
MOV             R0, R6
ADD             SP, SP, #0x9C
POP             {R4-R7,PC}

loc_2BCAC
MOV             R0, R5
ADD             R2, SP, #0x9C+var_84
MOV             R1, R4
BL              sub_2C470
SUBS            R6, R0, #0
BEQ             loc_2BD0C

loc_2BCC4
ADD             R0, SP, #0x9C+var_24
ADD             R2, SP, #0x9C+var_34
ADD             R1, SP, #0x9C+var_44
MOV             R4, #0
ADD             R7, SP, #0x9C+var_14
STR             R0, [SP,#0x9C+var_94]
STR             R2, [SP,#0x9C+var_98]
ADD             R0, SP, #0x9C+var_84
STR             R1, [SP,#0x9C+var_9C]
ADD             R3, SP, #0x9C+var_54
STR             R7, [SP,#0x9C+var_90]
ADD             R2, SP, #0x9C+var_64
ADD             R1, SP, #0x9C+var_74
STR             R4, [SP,#0x9C+var_8C]
BL              sub_29DB8
MOV             R0, R6
ADD             SP, SP, #0x9C
POP             {R4-R7,PC}

loc_2BD0C
ADD             R1, SP, #0x9C+var_74
MOV             R0, R4
BL              sub_2A25C
SUBS            R6, R0, #0
BNE             loc_2BCC4
LDR             R0, [SP,#0x9C+var_84]
CMP             R0, #0
BLE             loc_2BD60
LDR             R1, [SP,#0x9C+var_78]
LDR             R2, [R1]
TST             R2, #1
BNE             loc_2BD60
LDR             R3, [SP,#0x9C+var_74]
CMP             R3, #0
BLE             loc_2BD60
LDR             R5, [SP,#0x9C+var_68]
LDR             LR, [R5]
TST             LR, #1
BNE             loc_2BD60

loc_2BD58
MOV             R6, #0xFFFFFFFD
B               loc_2BCC4

loc_2BD60
ADD             R1, SP, #0x9C+var_64
ADD             R0, SP, #0x9C+var_84
BL              sub_2A25C
SUBS            R6, R0, #0
BNE             loc_2BCC4
ADD             R1, SP, #0x9C+var_54
ADD             R0, SP, #0x9C+var_74
BL              sub_2A25C
SUBS            R6, R0, #0
BNE             loc_2BCC4
MOV             R1, #1
ADD             R0, SP, #0x9C+var_44
BL              sub_2E630
MOV             R1, #1
ADD             R0, SP, #0x9C+var_14
BL              sub_2E630
LDR             R1, [SP,#0x9C+var_64]

loc_2BDA4
CMP             R1, #0
BLE             loc_2BEBC

loc_2BDAC
LDR             R12, [SP,#0x9C+var_58]
LDR             R6, [R12]
TST             R6, #1
BNE             loc_2BEBC
ADD             R1, SP, #0x9C+var_64
MOV             R0, R1
BL              sub_2A350
SUBS            R6, R0, #0
BNE             loc_2BCC4
LDR             R3, [SP,#0x9C+var_44]
CMP             R3, #0
BLE             loc_2BF20
LDR             R1, [SP,#0x9C+var_38]
LDR             R5, [R1]
TST             R5, #1
BEQ             loc_2BF20

loc_2BDEC
ADD             R2, SP, #0x9C+var_44
ADD             R1, SP, #0x9C+var_74
MOV             R0, R2
BL              sub_29934
SUBS            R6, R0, #0
BNE             loc_2BCC4
ADD             R2, SP, #0x9C+var_34
ADD             R1, SP, #0x9C+var_84
MOV             R0, R2
BL              sub_2E764
SUBS            R6, R0, #0
BNE             loc_2BCC4

loc_2BE1C
ADD             R1, SP, #0x9C+var_44
MOV             R0, R1
BL              sub_2A350
SUBS            R6, R0, #0
BNE             loc_2BCC4
ADD             R1, SP, #0x9C+var_34
MOV             R0, R1
BL              sub_2A350
SUBS            R6, R0, #0
BNE             loc_2BCC4
LDR             R1, [SP,#0x9C+var_64]
CMP             R1, #0
BGT             loc_2BDAC
B               loc_2BEBC

loc_2BE54
LDR             LR, [SP,#0x9C+var_18]
LDR             R12, [LR]
TST             R12, #1
BEQ             loc_2BEF8

loc_2BE64
ADD             R2, SP, #0x9C+var_24
ADD             R1, SP, #0x9C+var_74
MOV             R0, R2
BL              sub_29934
SUBS            R6, R0, #0
BNE             loc_2BCC4
ADD             R2, SP, #0x9C+var_14
ADD             R1, SP, #0x9C+var_84
MOV             R0, R2
BL              sub_2E764
SUBS            R6, R0, #0
BNE             loc_2BCC4

loc_2BE94
ADD             R1, SP, #0x9C+var_24
MOV             R0, R1
BL              sub_2A350
SUBS            R6, R0, #0
BNE             loc_2BCC4
ADD             R1, SP, #0x9C+var_14
MOV             R0, R1
BL              sub_2A350
SUBS            R6, R0, #0
BNE             loc_2BCC4

loc_2BEBC
LDR             R0, [SP,#0x9C+var_54]
ADD             R1, SP, #0x9C+var_54
CMP             R0, #0
BLE             loc_2BF40
LDR             R2, [SP,#0x9C+var_48]
LDR             R3, [R2]
TST             R3, #1
BNE             loc_2BF40
MOV             R0, R1
BL              sub_2A350
SUBS            R6, R0, #0
BNE             loc_2BCC4
LDR             R5, [SP,#0x9C+var_24]
CMP             R5, #0
BGT             loc_2BE54

loc_2BEF8
LDR             R6, [SP,#0x9C+var_14]
CMP             R6, #0
BLE             loc_2BE94
LDR             R0, [SP,#0x9C+var_8]
LDR             R2, [R0]
TST             R2, #1
BEQ             loc_2BE94
B               loc_2BE64

loc_2BF18
MOV             R6, #0xFFFFFFFD
B               loc_2BCA0

loc_2BF20
LDR             LR, [SP,#0x9C+var_34]
CMP             LR, #0
BLE             loc_2BE1C
LDR             R12, [SP,#0x9C+var_28]
LDR             R6, [R12]
TST             R6, #1
BEQ             loc_2BE1C
B               loc_2BDEC

loc_2BF40
ADD             R0, SP, #0x9C+var_64
BL              sub_29E00
CMN             R0, #1
BEQ             loc_2C028
ADD             R2, SP, #0x9C+var_64
ADD             R1, SP, #0x9C+var_54
MOV             R0, R2
BL              sub_2E764
SUBS            R6, R0, #0
BNE             loc_2BCC4
ADD             R2, SP, #0x9C+var_44
ADD             R1, SP, #0x9C+var_24
MOV             R0, R2
BL              sub_2E764
SUBS            R6, R0, #0
BNE             loc_2BCC4
ADD             R2, SP, #0x9C+var_34
ADD             R1, SP, #0x9C+var_14
MOV             R0, R2
BL              sub_2E764
SUBS            R6, R0, #0
BNE             loc_2BCC4

loc_2BF98
LDR             R1, [SP,#0x9C+var_64]
CMP             R1, #0
BNE             loc_2BDA4
MOV             R1, #1
ADD             R0, SP, #0x9C+var_54
BL              sub_29E48
CMP             R0, #0
BNE             loc_2BD58
B               loc_2BFC8

loc_2BFBC
BL              sub_29934
SUBS            R6, R0, #0
BNE             loc_2BCC4

loc_2BFC8
MOV             R1, #0
ADD             R0, SP, #0x9C+var_24
BL              sub_29E48
CMN             R0, #1
ADD             R2, SP, #0x9C+var_24
MOV             R1, R4
MOV             R0, R2
BEQ             loc_2BFBC
B               loc_2BFF8

loc_2BFEC
BL              sub_2E764
SUBS            R6, R0, #0
BNE             loc_2BCC4

loc_2BFF8
MOV             R1, R4
ADD             R0, SP, #0x9C+var_24
BL              sub_29E8C
CMN             R0, #1
ADD             R2, SP, #0x9C+var_24
MOV             R1, R4
MOV             R0, R2
BNE             loc_2BFEC
MOV             R1, R7
MOV             R6, #0
BL              sub_2AAD4
B               loc_2BCC4

loc_2C028
ADD             R2, SP, #0x9C+var_54
ADD             R1, SP, #0x9C+var_64
MOV             R0, R2
BL              sub_2E764
SUBS            R6, R0, #0
BNE             loc_2BCC4
ADD             R2, SP, #0x9C+var_24
ADD             R1, SP, #0x9C+var_44
MOV             R0, R2
BL              sub_2E764
SUBS            R6, R0, #0
BNE             loc_2BCC4
ADD             R2, SP, #0x9C+var_14
ADD             R1, SP, #0x9C+var_34
MOV             R0, R2
BL              sub_2E764
SUBS            R6, R0, #0
BEQ             loc_2BF98
B               loc_2BCC4
; End of function sub_2BC30




; int __fastcall sub_2C074(int *, int *, int *, int)
sub_2C074

var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x24
MOV             R6, R0
MOV             R5, R1
MOV             R7, R2
ADD             R1, SP, #0x24+var_14
MOV             R0, SP
MOV             R2, #0
BL              sub_33654
SUBS            R4, R0, #0
BEQ             loc_2C0AC
MOV             R0, R4
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}

loc_2C0AC
MOV             R2, SP
MOV             R1, R5
MOV             R0, R6
BL              sub_2B818
SUBS            R4, R0, #0
BEQ             loc_2C0E0

loc_2C0C4
MOV             R0, SP
ADD             R1, SP, #0x24+var_14
MOV             R2, #0
BL              sub_29DB8
MOV             R0, R4
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}

loc_2C0E0
MOV             R1, R5
MOV             R0, R6
BL              sub_29E8C
CMN             R0, #1
MOV             R3, R4
BEQ             loc_2C130
MOV             R0, R5
ADD             R2, SP, #0x24+var_14
MOV             R1, SP
BL              sub_2A5A8
SUBS            R4, R0, #0
BNE             loc_2C0C4
MOV             R0, R6
MOV             R2, R7
ADD             R1, SP, #0x24+var_14
BL              sub_2CB6C
MOV             R4, R0

loc_2C124
MOV             R3, #0
STR             R3, [R7,#8]
B               loc_2C0C4

loc_2C130
MOV             R0, R6
ADD             R2, SP, #0x24+var_14
MOV             R1, SP
BL              sub_2A5A8
SUBS            R4, R0, #0
BNE             loc_2C0C4
MOV             R0, R5
MOV             R2, R7
ADD             R1, SP, #0x24+var_14
BL              sub_2CB6C
MOV             R4, R0
B               loc_2C124
; End of function sub_2C074




; int __fastcall sub_2C160(int *, int)
sub_2C160
PUSH            {R4-R8,LR}
SUBS            R5, R1, #0
BLE             loc_2C450
LDM             R0, {R1,R3}
MOV             R4, R0
ADD             R1, R5, R1
CMP             R3, R1
BLT             loc_2C458

loc_2C180               ; s
LDR             R0, [R4,#0xC]
SUB             R2, R1, #1
SUB             R3, R1, R5
CMP             R5, R2
SUB             LR, R3, #0xC0000001
SUB             R12, R1, #0xC0000001
STR             R1, [R4]
ADD             R3, R0, LR,LSL#2
ADD             R12, R0, R12,LSL#2
BGT             loc_2C444
ADD             R6, R5, #6
SUB             LR, R5, #1
SUB             R4, R1, #2
CMN             LR, #0x80000008
CMPLE           R6, R4
BGE             loc_2C344
PLD             [R3,#-0x74]
SUB             R3, R3, #0x20 ; ' '
SUB             R2, R2, R6
SUB             R12, R12, #0x20 ; ' '
SUB             R8, R2, #2
SUB             R7, R1, #0xA
LDR             R4, [R3,#0x20]
CMP             R6, R7
UBFX            R7, R8, #3, #1
SUB             LR, R3, #0x20 ; ' '
SUB             R2, R1, #9
STR             R4, [R12,#0x20]
SUB             R4, R12, #0x20 ; ' '
LDR             R8, [R3,#0x1C]
STR             R8, [R12,#0x1C]
LDR             R8, [R3,#0x18]
STR             R8, [R12,#0x18]
LDR             R8, [R3,#0x14]
STR             R8, [R12,#0x14]
LDR             R8, [R3,#0x10]
STR             R8, [R12,#0x10]
LDR             R8, [R3,#0xC]
STR             R8, [R12,#0xC]
LDR             R8, [R3,#8]
STR             R8, [R12,#8]
LDR             R8, [R3,#4]
STR             R8, [R12,#4]
BGE             loc_2C344
CMP             R7, #0
BEQ             loc_2C29C
LDR             R12, [LR,#0x20]
SUB             R2, R1, #0x12
PLD             [R3,#-0x74]
CMP             R6, R2
SUB             R2, R1, #0x11
MOV             R3, LR
STR             R12, [R4,#0x20]
SUB             LR, LR, #0x20 ; ' '
LDR             R1, [LR,#0x3C]
MOV             R12, R4
SUB             R4, R4, #0x20 ; ' '
STR             R1, [R4,#0x3C]
LDR             R1, [LR,#0x38]
STR             R1, [R4,#0x38]
LDR             R1, [LR,#0x34]
STR             R1, [R4,#0x34]
LDR             R1, [LR,#0x30]
STR             R1, [R4,#0x30]
LDR             R1, [LR,#0x2C]
STR             R1, [R4,#0x2C]
LDR             R1, [LR,#0x28]
STR             R1, [R4,#0x28]
LDR             R1, [LR,#0x24]
STR             R1, [R4,#0x24]
BGE             loc_2C344

loc_2C29C
LDR             R7, [LR,#0x20]
SUB             R3, LR, #0x20 ; ' '
PLD             [LR,#-0x54]
SUB             R12, R4, #0x20 ; ' '
PLD             [LR,#-0x74]
STR             R7, [R4,#0x20]
SUB             R7, R2, #0x11
LDR             R1, [LR,#0x1C]
CMP             R6, R7
SUB             R2, R2, #0x10
STR             R1, [R4,#0x1C]
LDR             R1, [LR,#0x18]
STR             R1, [R4,#0x18]
LDR             R1, [LR,#0x14]
STR             R1, [R4,#0x14]
LDR             R1, [LR,#0x10]
STR             R1, [R4,#0x10]
LDR             R1, [LR,#0xC]
STR             R1, [R4,#0xC]
LDR             R1, [LR,#8]
STR             R1, [R4,#8]
LDR             R1, [LR,#4]
SUB             LR, R3, #0x20 ; ' '
STR             R1, [R4,#4]
SUB             R4, R12, #0x20 ; ' '
LDR             R1, [R3,#0x20]
STR             R1, [R12,#0x20]
LDR             R1, [R3,#0x1C]
STR             R1, [R12,#0x1C]
LDR             R1, [R3,#0x18]
STR             R1, [R12,#0x18]
LDR             R1, [R3,#0x14]
STR             R1, [R12,#0x14]
LDR             R1, [R3,#0x10]
STR             R1, [R12,#0x10]
LDR             R1, [R3,#0xC]
STR             R1, [R12,#0xC]
LDR             R1, [R3,#8]
STR             R1, [R12,#8]
LDR             R1, [R3,#4]
STR             R1, [R12,#4]
BLT             loc_2C29C

loc_2C344
SUB             LR, R2, #1
LDR             R1, [R3],#-4
CMP             R5, LR
SUB             R2, R2, R5
AND             R2, R2, #7
STR             R1, [R12]
BGT             loc_2C444
CMP             R2, #0
BEQ             loc_2C3F0
CMP             R2, #1
BEQ             loc_2C3DC
CMP             R2, #2
BEQ             loc_2C3D0
CMP             R2, #3
BEQ             loc_2C3C4
CMP             R2, #4
BEQ             loc_2C3B8
CMP             R2, #5
BEQ             loc_2C3AC
CMP             R2, #6
LDRNE           R2, [R3],#-4
SUBNE           LR, LR, #1
SUB             LR, LR, #1
STRNE           R2, [R12,#-4]!
LDR             R1, [R3],#-4
STR             R1, [R12,#-4]!

loc_2C3AC
LDR             R2, [R3],#-4
SUB             LR, LR, #1
STR             R2, [R12,#-4]!

loc_2C3B8
LDR             R1, [R3],#-4
SUB             LR, LR, #1
STR             R1, [R12,#-4]!

loc_2C3C4
LDR             R2, [R3],#-4
SUB             LR, LR, #1
STR             R2, [R12,#-4]!

loc_2C3D0
LDR             R1, [R3],#-4
SUB             LR, LR, #1
STR             R1, [R12,#-4]!

loc_2C3DC
SUB             LR, LR, #1
LDR             R2, [R3],#-4
CMP             R5, LR
STR             R2, [R12,#-4]!
BGT             loc_2C444

loc_2C3F0
MOV             R2, R3
SUB             R3, R3, #0x20 ; ' '
LDR             R1, [R2],#-4
SUB             LR, LR, #8
CMP             R5, LR
STR             R1, [R12,#-4]
LDR             R2, [R2]
STR             R2, [R12,#-8]
LDR             R1, [R3,#0x18]
STR             R1, [R12,#-0xC]
LDR             R2, [R3,#0x14]
STR             R2, [R12,#-0x10]
LDR             R1, [R3,#0x10]
STR             R1, [R12,#-0x14]
LDR             R2, [R3,#0xC]
STR             R2, [R12,#-0x18]
LDR             R1, [R3,#8]
STR             R1, [R12,#-0x1C]
LDR             R2, [R3,#4]
STR             R2, [R12,#-0x20]!
BLE             loc_2C3F0

loc_2C444               ; n
MOV             R2, R5,LSL#2
MOV             R1, #0  ; c
BL              memset

loc_2C450
MOV             R0, #0
POP             {R4-R8,PC}

loc_2C458
BL              sub_2BA48
CMP             R0, #0
POPNE           {R4-R8,PC}
LDR             R1, [R4]
ADD             R1, R5, R1
B               loc_2C180
; End of function sub_2C160




; int __fastcall sub_2C470(int *, int *, int *)
sub_2C470

var_14= -0x14
var_C= -0xC

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x14
MOV             R5, R1
MOV             R6, R0
MOV             R0, SP
MOV             R7, R2
LDR             R1, [R1]
BL              sub_2BB58
SUBS            R4, R0, #0
BEQ             loc_2C4A4
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_2C4A4
MOV             R2, R4
MOV             R0, R6
MOV             R3, SP
MOV             R1, R5
BL              sub_2A5A8
SUBS            R4, R0, #0
BNE             loc_2C4F0
LDR             R3, [SP,#0x14+var_14]
CMP             R3, #0
BEQ             loc_2C504
LDR             R2, [SP,#0x14+var_C]
LDR             R0, [R5,#8]
CMP             R2, R0
BEQ             loc_2C504
MOV             R2, R7
MOV             R0, R5
MOV             R1, SP
BL              sub_29934
MOV             R4, R0

loc_2C4F0
MOV             R0, SP
BL              sub_29D74

loc_2C4F8
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_2C504
MOV             R0, SP
MOV             R1, R7
BL              sub_2AAD4
MOV             R0, SP
BL              sub_29D74
B               loc_2C4F8
; End of function sub_2C470




; int __fastcall sub_2C51C(int, unsigned int, int *)
sub_2C51C
MOV             R3, R2
MOV             R2, #0
B               sub_32D70
; End of function sub_2C51C




; int __fastcall sub_2C528(int *, int *)
sub_2C528
PUSH            {R4-R10,LR}
MOV             R6, R1
MOV             R4, R0
MOV             R0, R1
BL              sub_2A310
LDR             R3, [R6]
CMP             R3, #1
BLE             loc_2C79C
MOVW            R8, #0x2493
MOV             R5, R0
MOVT            R8, #0x9249
MOV             R2, R5,ASR#31
SMULL           R8, R9, R5, R8
SUB             R0, R3, #1
RSB             R7, R0, R0,LSL#3
MOV             R0, R4
ADD             R1, R5, R9
RSB             R12, R2, R1,ASR#4
RSB             LR, R12, R12,LSL#3
SUB             R5, R5, LR,LSL#2
ADD             R3, R5, R7,LSL#2
SUB             R1, R3, #1
BL              sub_298D4
SUBS            R7, R0, #0
SUBEQ           R5, R5, #1
BNE             loc_2C748

loc_2C590
RSB             R0, R5, #0x1C
ANDS            R7, R0, #3
BEQ             loc_2C668
CMP             R7, #1
BEQ             loc_2C61C
CMP             R7, #2
BEQ             loc_2C5F0
MOV             R1, R4
MOV             R0, R4
BL              sub_2C98C
SUBS            R7, R0, #0
BNE             loc_2C748
MOV             R1, R6
MOV             R0, R4
BL              sub_29E8C
CMN             R0, #1
BEQ             loc_2C5EC
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BL              sub_307E4
CMP             R0, #0
BNE             loc_2C768

loc_2C5EC
ADD             R5, R5, #1

loc_2C5F0
MOV             R1, R4
MOV             R0, R4
BL              sub_2C98C
SUBS            R7, R0, #0
BNE             loc_2C748
MOV             R1, R6
MOV             R0, R4
BL              sub_29E8C
CMN             R0, #1
BNE             loc_2C7B0
ADD             R5, R5, #1

loc_2C61C
MOV             R1, R4
MOV             R0, R4
BL              sub_2C98C
SUBS            R7, R0, #0
BNE             loc_2C748
MOV             R1, R6
MOV             R0, R4
BL              sub_29E8C
CMN             R0, #1
BEQ             loc_2C65C
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BL              sub_307E4
CMP             R0, #0
BNE             loc_2C768

loc_2C65C
ADD             R5, R5, #1
CMP             R5, #0x1C
BEQ             loc_2C748

loc_2C668
MOV             R1, R4
MOV             R0, R4
BL              sub_2C98C
SUBS            R7, R0, #0
BNE             loc_2C748
MOV             R1, R6
MOV             R0, R4
BL              sub_29E8C
CMN             R0, #1
BEQ             loc_2C6A8
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BL              sub_307E4
CMP             R0, #0
BNE             loc_2C768

loc_2C6A8
MOV             R1, R4
MOV             R0, R4
BL              sub_2C98C
SUBS            R7, R0, #0
ADD             R5, R5, #1
BNE             loc_2C748
MOV             R1, R6
MOV             R0, R4
BL              sub_29E8C
CMN             R0, #1
BEQ             loc_2C6EC
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BL              sub_307E4
CMP             R0, #0
BNE             loc_2C768

loc_2C6EC
MOV             R1, R4
MOV             R0, R4
BL              sub_2C98C
SUBS            R7, R0, #0
BNE             loc_2C748
MOV             R1, R6
MOV             R0, R4
BL              sub_29E8C
CMN             R0, #1
BNE             loc_2C750

loc_2C714
MOV             R1, R4
MOV             R0, R4
BL              sub_2C98C
SUBS            R7, R0, #0
BNE             loc_2C748
MOV             R1, R6
MOV             R0, R4
BL              sub_29E8C
CMN             R0, #1
BNE             loc_2C774
ADD             R5, R5, #3
CMP             R5, #0x1C
BNE             loc_2C668

loc_2C748
MOV             R0, R7
POP             {R4-R10,PC}

loc_2C750
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BL              sub_307E4
CMP             R0, #0
BEQ             loc_2C714

loc_2C768
MOV             R7, R0
MOV             R0, R7
POP             {R4-R10,PC}

loc_2C774
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BL              sub_307E4
CMP             R0, #0
BNE             loc_2C768
ADD             R5, R5, #3
CMP             R5, #0x1C
BNE             loc_2C668
B               loc_2C748

loc_2C79C
MOV             R1, #1
MOV             R0, R4
MOV             R5, #0
BL              sub_2E630
B               loc_2C590

loc_2C7B0
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BL              sub_307E4
CMP             R0, #0
BNE             loc_2C768
ADD             R5, R5, #1
B               loc_2C61C
; End of function sub_2C528




; int __fastcall sub_2C7D0(int *, int *, int)
sub_2C7D0

var_C= -0xC
var_8= -8

LDR             R3, [R1]
PUSH            {R4-R11,LR}
SUB             SP, SP, #0xC
MOV             R4, R3,LSL#1
ADD             R5, R4, #1
CMP             R3, #0xFF
CMPLE           R5, #0x200
BLT             loc_2C924
MOV             R6, R1
LDR             R1, [R0,#4]
MOV             R7, R0
STR             R2, [SP,#0xC+var_C]
CMP             R1, R5
BLT             loc_2C90C

loc_2C808
STR             R5, [R7]
LDR             R10, [R6]
CMP             R10, #0
BLE             loc_2C8C0
LDR             R0, [R6,#0xC]
MOV             LR, #0
STR             R0, [SP,#0xC+var_8]
LDR             R0, [R7,#0xC]

loc_2C828
LDR             R9, [R0]
CMP             R10, #0
LDR             R2, [SP,#0xC+var_C]
MOV             R3, R0
ADD             R0, R0, #4
MUL             R10, R9, R2
BIC             R1, R10, #0xF0000000
BLE             loc_2C8C0
LDR             R2, [SP,#0xC+var_8]
MOV             R4, #0
MOV             R12, R4

loc_2C854
LDR             R11, [R2],#4
MOV             R5, #0
LDR             R8, [R3]
ADD             R12, R12, #1
UMLAL           R4, R5, R1, R11
ADDS            R4, R4, R8
BIC             R10, R4, #0xF0000000
ADC             R5, R5, #0
STR             R10, [R3],#4
MOV             R9, R4,LSR#28
LDR             R10, [R6]
MOV             R11, R5
ORR             R4, R9, R11,LSL#4
CMP             R10, R12
BGT             loc_2C854
CMP             R4, #0
BEQ             loc_2C8B4

loc_2C898
LDR             R1, [R3]
ADD             R2, R4, R1
MOVS            R4, R2,LSR#28
BIC             R12, R2, #0xF0000000
STR             R12, [R3],#4
BNE             loc_2C898
LDR             R10, [R6]

loc_2C8B4
ADD             LR, LR, #1
CMP             LR, R10
BLT             loc_2C828

loc_2C8C0
MOV             R0, R7
BL              sub_29BBC
LDR             R1, [R6]
MOV             R0, R7
BL              sub_2E5A0
MOV             R1, R6
MOV             R0, R7
BL              sub_29E8C
CMN             R0, #1
BEQ             loc_2C900
MOV             R1, R6
MOV             R2, R7
MOV             R0, R7
ADD             SP, SP, #0xC
POP             {R4-R11,LR}
B               sub_307E4

loc_2C900
MOV             R0, #0
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2C90C
MOV             R1, R5
BL              sub_2BA48
CMP             R0, #0
BEQ             loc_2C808
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2C924
ADD             SP, SP, #0xC
POP             {R4-R11,LR}
B               sub_310B4
; End of function sub_2C7D0




; int __fastcall sub_2C930(int, int *)
sub_2C930
LDR             R3, [R0,#0xC]
LDR             R3, [R3]
TST             R3, #1
BEQ             loc_2C984
ADD             R2, R3, #2
MOV             R0, #0
MOV             R12, R2,LSL#1
AND             R2, R12, #8
ADD             R2, R2, R3
MUL             R12, R2, R3
RSB             R12, R12, #2
MUL             R2, R2, R12
MUL             R12, R2, R3
RSB             R12, R12, #2
MUL             R2, R2, R12
MUL             R3, R2, R3
SUB             R12, R3, #2
MUL             R2, R12, R2
BIC             R3, R2, #0xF0000000
STR             R3, [R1]
BX              LR

loc_2C984
MOV             R0, #0xFFFFFFFD
BX              LR
; End of function sub_2C930




; int __fastcall sub_2C98C(int *, int *)
sub_2C98C
LDR             R3, [R0]
LDR             R2, [R1,#4]
PUSH            {R4-R8,LR}
MOV             R7, R1
ADD             R1, R3, #1
MOV             R6, R0
CMP             R2, R1
BLT             loc_2CA40

loc_2C9AC
LDR             R2, [R7]
STR             R3, [R7]
LDR             R1, [R6]
LDR             R5, [R6,#0xC]
LDR             R0, [R7,#0xC]
CMP             R1, #0
BLE             loc_2CA14
MOV             LR, #0
MOV             R4, R0
MOV             R1, LR

loc_2C9D4
LDR             R12, [R5],#4
ADD             R1, R1, #1
ORR             R3, LR, R12,LSL#1
MOV             LR, R12,LSR#27
BIC             R12, R3, #0xF0000000
STR             R12, [R4],#4
LDR             R3, [R6]
CMP             R3, R1
BGT             loc_2C9D4
CMP             LR, #0
MOVNE           R3, #1
LDREQ           R3, [R7]
STRNE           R3, [R4]
LDRNE           R3, [R7]
ADDNE           R3, R3, #1
STRNE           R3, [R7]

loc_2CA14
CMP             R2, R3
BLE             loc_2CA30
SUB             LR, R2, R3
ADD             R0, R0, R3,LSL#2 ; s
MOV             R2, LR,LSL#2 ; n
MOV             R1, #0  ; c
BL              memset

loc_2CA30
LDR             R2, [R6,#8]
MOV             R0, #0
STR             R2, [R7,#8]
POP             {R4-R8,PC}

loc_2CA40
MOV             R0, R7
BL              sub_2BA48
CMP             R0, #0
POPNE           {R4-R8,PC}
LDR             R3, [R6]
B               loc_2C9AC
; End of function sub_2C98C




; int __fastcall sub_2CA58(int *, int, int *)
sub_2CA58
CMP             R2, R0
PUSH            {R4-R10,LR}
MOV             R5, R2
MOV             R4, R1
BEQ             loc_2CA7C
MOV             R1, R2
BL              sub_2A25C
CMP             R0, #0
POPNE           {R4-R10,PC}

loc_2CA7C
MOVW            R2, #0x2493
MOV             R6, R4,ASR#31
MOVT            R2, #0x9249
LDR             R1, [R5]
SMULL           R8, R9, R4, R2
LDR             R0, [R5,#4]
ADD             R7, R4, R9
RSB             R7, R6, R7,ASR#4
ADD             R3, R7, R1
ADD             R1, R3, #1
CMP             R0, R1
BLT             loc_2CB58

loc_2CAAC
CMP             R4, #0x1B
BGT             loc_2CB40

loc_2CAB4
MOV             R12, #0x92492493
SMULL           R2, R3, R4, R12
ADD             LR, R4, R3
RSB             R2, R6, LR,ASR#4
RSB             R1, R2, R2,LSL#3
SUBS            R4, R4, R1,LSL#2
BEQ             loc_2CB30
LDR             R0, [R5]
RSB             R6, R4, #0x1C
LDR             R7, [R5,#0xC]
CMP             R0, #0
BLE             loc_2CB30
MOV             R3, #0xFFFFFFFF
MOV             R2, #0
MVN             LR, R3,LSL R4
MOV             R12, R2
MOV             R1, R7

loc_2CAFC
LDR             R0, [R1]
ADD             R2, R2, #1
ORR             R3, R12, R0,LSL R4
AND             R12, LR, R0,LSR R6
BIC             R0, R3, #0xF0000000
STR             R0, [R1],#4
LDR             R3, [R5]
CMP             R3, R2
BGT             loc_2CAFC
CMP             R12, #0
ADDNE           R2, R3, #1
STRNE           R2, [R5]
STRNE           R12, [R7,R3,LSL#2]

loc_2CB30
MOV             R0, R5
BL              sub_29BBC
MOV             R0, #0
POP             {R4-R10,PC}

loc_2CB40
MOV             R1, R7
MOV             R0, R5
BL              sub_2C160
CMP             R0, #0
BEQ             loc_2CAB4
POP             {R4-R10,PC}

loc_2CB58
MOV             R0, R5
BL              sub_2BA48
CMP             R0, #0
BEQ             loc_2CAAC
POP             {R4-R10,PC}
; End of function sub_2CA58




; int __fastcall sub_2CB6C(int *, int *, int *)
sub_2CB6C
PUSH            {R4-R8,LR}
MOV             LR, R0
LDR             R12, [R0]
MOV             R7, R1
MOV             R4, R2
LDR             R8, [R1]
LDR             R5, [R0,#8]
LDR             R6, [R1,#8]
ADD             R3, R12, R8
ADD             R3, R3, #1
CMP             R3, #0x200
BGE             loc_2CBAC
CMP             R12, R8
MOVGE           R12, R8
CMP             R12, #0x100
BLE             loc_2CBDC

loc_2CBAC
MOV             R1, R7
MOV             R0, LR
MOV             R2, R4
BL              sub_2FCC8

loc_2CBBC
LDR             R1, [R4]
CMP             R1, #0
MOVLE           R5, #0
BLE             loc_2CBD4
SUBS            R5, R5, R6
MOVNE           R5, #1

loc_2CBD4
STR             R5, [R4,#8]
POP             {R4-R8,PC}

loc_2CBDC
BL              sub_31AE4
B               loc_2CBBC
; End of function sub_2CB6C




; int __fastcall sub_2CBE4(int *, unsigned int, int *)
sub_2CBE4
LDR             R3, [R0]
PUSH            {R4-R8,R10,R11,LR}
MOV             R7, R2
LDR             R2, [R2,#4]
MOV             R8, R1
ADD             R1, R3, #1
MOV             R6, R0
CMP             R2, R1
BLT             loc_2CCB8

loc_2CC08
LDR             R0, [R6,#8]
CMP             R3, #0
LDR             R1, [R6,#0xC]
LDR             R12, [R7]
STR             R0, [R7,#8]
LDR             R0, [R7,#0xC]
BLE             loc_2CCD0
MOV             R3, #0
MOV             R4, R3
B               loc_2CC34

loc_2CC30
MOV             R3, R2

loc_2CC34
LDR             R10, [R1],#4
MOV             R5, #0
ADD             R2, R3, #1
UMLAL           R4, R5, R8, R10
BIC             LR, R4, #0xF0000000
MOV             R10, R4
STR             LR, [R0],#4
MOV             R4, R4,LSR#28
LDR             LR, [R6]
MOV             R11, R5
ORR             R4, R4, R5,LSL#4
CMP             LR, R2
BGT             loc_2CC30
ADD             R1, R3, #2
ADD             LR, R3, #3

loc_2CC70
CMP             R12, R1
STR             R4, [R0]
BLE             loc_2CC9C
ADD             R3, R12, #1
CMP             R12, LR
SUB             R2, R3, LR
ADD             R0, R0, #4 ; s
MOV             R1, #0  ; c
MOVGE           R2, R2,LSL#2
MOVLT           R2, #4  ; n
BL              memset

loc_2CC9C
LDR             R12, [R6]
MOV             R0, R7
ADD             R1, R12, #1
STR             R1, [R7]
BL              sub_29BBC
MOV             R0, #0
POP             {R4-R8,R10,R11,PC}

loc_2CCB8
MOV             R0, R7
BL              sub_2BA48
CMP             R0, #0
POPNE           {R4-R8,R10,R11,PC}
LDR             R3, [R6]
B               loc_2CC08

loc_2CCD0
MOV             LR, #2
MOV             R1, #1
MOV             R4, #0
B               loc_2CC70
; End of function sub_2CBE4




; int __fastcall sub_2CCE0(int *, int *, int *, int *)
sub_2CCE0
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x10
MOV             R6, R0
MOV             R7, R1
MOV             R0, SP
MOV             R5, R2
LDR             R1, [R2]
MOV             R8, R3
BL              sub_2BB58
SUBS            R4, R0, #0
BEQ             loc_2CD18
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_2CD18
MOV             R1, R7
MOV             R0, R6
MOV             R2, SP
BL              sub_2CB6C
SUBS            R4, R0, #0
BNE             loc_2CD44
MOV             R2, R8
MOV             R1, R5
MOV             R0, SP
BL              sub_2C470
MOV             R4, R0

loc_2CD44
MOV             R0, SP
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R8,PC}
; End of function sub_2CCE0




; int __fastcall sub_2CD58(int *, int *)
sub_2CD58
CMP             R0, R1
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
BEQ             loc_2CD78
BL              sub_2A25C
CMP             R0, #0
POPNE           {R4-R6,PC}

loc_2CD78
LDR             R0, [R4]
CMP             R0, #0
BNE             loc_2CD8C
STR             R0, [R4,#8]
POP             {R4-R6,PC}

loc_2CD8C
LDR             R3, [R5,#8]
MOV             R0, #0
CLZ             R1, R3
MOV             R2, R1,LSR#5
STR             R2, [R4,#8]
POP             {R4-R6,PC}
; End of function sub_2CD58




; int __fastcall sub_2CDA4(int *, int, _DWORD *)
sub_2CDA4

var_18= -0x18
var_14= -0x14

SUB             R12, R1, #1
MOV             R3, #0
CMP             R12, #0xFF
PUSH            {R4-R11,LR}
STR             R3, [R2]
SUB             SP, SP, #0x1C
BHI             loc_2D07C
MOVW            R8, #:lower16:off_3ACB0
MOV             R4, R0
MOVT            R8, #:upper16:off_3ACB0
MOV             R10, R2
MOV             R9, R1
ADD             R11, R8, #0x400
MOV             R5, R8

loc_2CDDC
MOV             R7, R5
MOV             R0, R4
LDR             R1, [R7],#4
BL              sub_29E48
SUBS            R6, R0, #0
MOV             R0, R4
BEQ             loc_2D068
LDR             R1, [R5,#4]
BL              sub_29E48
SUBS            R6, R0, #0
MOV             R0, R4
BEQ             loc_2D068
LDR             R1, [R7,#4]
BL              sub_29E48
SUBS            R6, R0, #0
MOV             R0, R4
BEQ             loc_2D068
LDR             R1, [R5,#0xC]
BL              sub_29E48
SUBS            R6, R0, #0
MOV             R0, R4
BEQ             loc_2D068
LDR             R1, [R5,#0x10]
BL              sub_29E48
SUBS            R6, R0, #0
MOV             R0, R4
BEQ             loc_2D068
LDR             R1, [R5,#0x14]
BL              sub_29E48
SUBS            R6, R0, #0
MOV             R0, R4
BEQ             loc_2D068
LDR             R1, [R5,#0x18]
BL              sub_29E48
SUBS            R6, R0, #0
MOV             R0, R4
BEQ             loc_2D068
LDR             R1, [R5,#0x1C]
ADD             R5, R5, #0x20 ; ' '
BL              sub_29E48
SUBS            R6, R0, #0
BEQ             loc_2D068
CMP             R11, R5
BNE             loc_2CDDC
MOV             R0, R4
ADD             R1, SP, #0x1C+var_18
BL              sub_33A60
SUBS            R6, R0, #0
BNE             loc_2D070
LDR             R0, [SP,#0x1C+var_18]
CMP             R0, #1
BEQ             loc_2D070
ADD             R0, SP, #0x1C+var_14
BL              sub_2BAD0
SUBS            R6, R0, #0
BNE             loc_2D070
ANDS            R1, R9, #3
BEQ             loc_2CF78
CMP             R1, #1
BEQ             loc_2CF3C
CMP             R1, #2
BEQ             loc_2CF08
LDR             R1, [R8],#4
ADD             R0, SP, #0x1C+var_14
BL              sub_2E630
ADD             R2, SP, #0x1C+var_18
ADD             R1, SP, #0x1C+var_14
MOV             R0, R4
BL              sub_2D094
SUBS            R2, R0, #0
BNE             loc_2D08C
LDR             R2, [SP,#0x1C+var_18]
CMP             R2, #0
BEQ             loc_2D084
MOV             R6, #1

loc_2CF08
LDR             R1, [R8],#4
ADD             R0, SP, #0x1C+var_14
BL              sub_2E630
ADD             R2, SP, #0x1C+var_18
ADD             R1, SP, #0x1C+var_14
MOV             R0, R4
BL              sub_2D094
SUBS            R2, R0, #0
BNE             loc_2D08C
LDR             LR, [SP,#0x1C+var_18]
CMP             LR, #0
BEQ             loc_2D084
ADD             R6, R6, #1

loc_2CF3C
LDR             R1, [R8],#4
ADD             R0, SP, #0x1C+var_14
BL              sub_2E630
ADD             R2, SP, #0x1C+var_18
ADD             R1, SP, #0x1C+var_14
MOV             R0, R4
BL              sub_2D094
SUBS            R2, R0, #0
BNE             loc_2D08C
LDR             R12, [SP,#0x1C+var_18]
CMP             R12, #0
BEQ             loc_2D084
ADD             R6, R6, #1
CMP             R9, R6
BEQ             loc_2D050

loc_2CF78
MOV             R11, R8
ADD             R0, SP, #0x1C+var_14
LDR             R1, [R11],#4
ADD             R7, R8, #0xC
BL              sub_2E630
ADD             R2, SP, #0x1C+var_18
ADD             R1, SP, #0x1C+var_14
MOV             R0, R4
ADD             R6, R6, #4
BL              sub_2D094
SUBS            R2, R0, #0
ADD             R8, R8, #0x10
ADD             R0, SP, #0x1C+var_14
BNE             loc_2D08C
LDR             R3, [SP,#0x1C+var_18]
CMP             R3, #0
BEQ             loc_2D084
LDR             R1, [R11]
BL              sub_2E630
ADD             R2, SP, #0x1C+var_18
ADD             R1, SP, #0x1C+var_14
MOV             R0, R4
BL              sub_2D094
SUBS            R2, R0, #0
ADD             R0, SP, #0x1C+var_14
BNE             loc_2D08C
LDR             R5, [SP,#0x1C+var_18]
CMP             R5, #0
BEQ             loc_2D084
LDR             R1, [R11,#4]
BL              sub_2E630
ADD             R2, SP, #0x1C+var_18
ADD             R1, SP, #0x1C+var_14
MOV             R0, R4
BL              sub_2D094
SUBS            R2, R0, #0
ADD             R0, SP, #0x1C+var_14
BNE             loc_2D08C
LDR             R1, [SP,#0x1C+var_18]
CMP             R1, #0
BEQ             loc_2D084
LDR             R1, [R7]
BL              sub_2E630
ADD             R2, SP, #0x1C+var_18
ADD             R1, SP, #0x1C+var_14
MOV             R0, R4
BL              sub_2D094
SUBS            R2, R0, #0
BNE             loc_2D08C
LDR             R0, [SP,#0x1C+var_18]
CMP             R0, #0
BEQ             loc_2D084
CMP             R9, R6
BNE             loc_2CF78

loc_2D050
MOV             R6, #0
MOV             R4, #1
STR             R4, [R10]

loc_2D05C
ADD             R0, SP, #0x1C+var_14
BL              sub_29D74
B               loc_2D070

loc_2D068
MOV             R9, #1
STR             R9, [R10]

loc_2D070
MOV             R0, R6
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_2D07C
MOV             R6, #0xFFFFFFFD
B               loc_2D070

loc_2D084
MOV             R6, #0
B               loc_2D05C

loc_2D08C
MOV             R6, R2
B               loc_2D05C
; End of function sub_2CDA4




; int __fastcall sub_2D094(int *, int *, _DWORD *)
sub_2D094

var_24= -0x24
var_14= -0x14

MOV             R3, #0
PUSH            {R4-R9,LR}
MOV             R6, R1
SUB             SP, SP, #0x34
MOV             R8, R0
MOV             R0, R1
STR             R3, [R2]
MOV             R1, #1
MOV             R7, R2
BL              sub_29E48
CMP             R0, #1
BNE             loc_2D15C
MOV             R5, R0
MOV             R1, R8
MOV             R0, SP
BL              sub_2BB10
SUBS            R4, R0, #0
BEQ             loc_2D0E8

loc_2D0DC
MOV             R0, R4
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R9,PC}

loc_2D0E8
MOV             R2, SP
MOV             R1, R5
MOV             R0, SP
BL              sub_2E7D4
SUBS            R4, R0, #0
BEQ             loc_2D114

loc_2D100
MOV             R0, SP
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R9,PC}

loc_2D114
MOV             R1, SP
ADD             R0, SP, #0x34+var_14
BL              sub_2BB10
SUBS            R4, R0, #0
BNE             loc_2D100
ADD             R0, SP, #0x34+var_14
BL              sub_2A0A4
ADD             R2, SP, #0x34+var_14
MOV             R3, R4
MOV             R1, R0
MOV             R9, R0
MOV             R0, R2
BL              sub_329D0
SUBS            R4, R0, #0
BEQ             loc_2D164

loc_2D150
ADD             R0, SP, #0x34+var_14
BL              sub_29D74
B               loc_2D100

loc_2D15C
MOV             R4, #0xFFFFFFFD
B               loc_2D0DC

loc_2D164
ADD             R0, SP, #0x34+var_24
BL              sub_2BAD0
SUBS            R4, R0, #0
BNE             loc_2D150
MOV             R0, R6
ADD             R3, SP, #0x34+var_24
MOV             R2, R8
ADD             R1, SP, #0x34+var_14
BL              sub_2AB08
SUBS            R4, R0, #0
BEQ             loc_2D19C

loc_2D190
ADD             R0, SP, #0x34+var_24
BL              sub_29D74
B               loc_2D150

loc_2D19C
MOV             R1, R5
ADD             R0, SP, #0x34+var_24
BL              sub_29E48
CMP             R0, #0
BNE             loc_2D1BC

loc_2D1B0
MOV             R0, #1
STR             R0, [R7]
B               loc_2D190

loc_2D1BC
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_29E00
CMP             R0, #0
BEQ             loc_2D1B0
SUB             R9, R9, #1
CMP             R9, #0
BLE             loc_2D42C
SUB             R2, R9, #1
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
AND             R6, R2, #3
BL              sub_29E00
CMP             R0, #0
BEQ             loc_2D42C
ADD             R2, SP, #0x34+var_24
MOV             R1, R8
MOV             R0, R2
BL              sub_2E6F8
CMP             R0, #0
BNE             loc_2D444
MOV             R1, #1
ADD             R0, SP, #0x34+var_24
BL              sub_29E48
CMP             R0, #0
BEQ             loc_2D190
MOV             R5, #2
CMP             R5, R9
BGT             loc_2D42C
CMP             R6, #0
BEQ             loc_2D31C
CMP             R6, #1
BEQ             loc_2D2D0
CMP             R6, R5
BEQ             loc_2D28C
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_29E00
CMP             R0, #0
BEQ             loc_2D42C
ADD             R2, SP, #0x34+var_24
MOV             R1, R8
MOV             R0, R2
BL              sub_2E6F8
CMP             R0, #0
BNE             loc_2D444
MOV             R1, #1
ADD             R0, SP, #0x34+var_24
BL              sub_29E48
CMP             R0, #0
BEQ             loc_2D190
ADD             R5, R5, #1

loc_2D28C
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_29E00
CMP             R0, #0
BEQ             loc_2D42C
ADD             R2, SP, #0x34+var_24
MOV             R1, R8
MOV             R0, R2
BL              sub_2E6F8
CMP             R0, #0
BNE             loc_2D444
MOV             R1, #1
ADD             R0, SP, #0x34+var_24
BL              sub_29E48
CMP             R0, #0
BEQ             loc_2D190
ADD             R5, R5, #1

loc_2D2D0
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_29E00
CMP             R0, #0
BEQ             loc_2D42C
ADD             R2, SP, #0x34+var_24
MOV             R1, R8
MOV             R0, R2
BL              sub_2E6F8
CMP             R0, #0
BNE             loc_2D444
MOV             R1, #1
ADD             R0, SP, #0x34+var_24
BL              sub_29E48
CMP             R0, #0
BEQ             loc_2D190
ADD             R5, R5, #1
CMP             R5, R9
BGT             loc_2D42C

loc_2D31C
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_29E00
CMP             R0, #0
BEQ             loc_2D42C
ADD             R2, SP, #0x34+var_24
MOV             R1, R8
MOV             R0, R2
BL              sub_2E6F8
CMP             R0, #0
BNE             loc_2D444
MOV             R1, #1
ADD             R0, SP, #0x34+var_24
BL              sub_29E48
CMP             R0, #0
BEQ             loc_2D190
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_29E00
CMP             R0, #0
ADD             R5, R5, #1
BEQ             loc_2D42C
ADD             R2, SP, #0x34+var_24
MOV             R1, R8
MOV             R0, R2
BL              sub_2E6F8
CMP             R0, #0
BNE             loc_2D444
MOV             R1, #1
ADD             R0, SP, #0x34+var_24
BL              sub_29E48
CMP             R0, #0
BEQ             loc_2D190
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_29E00
CMP             R0, #0
BEQ             loc_2D42C
ADD             R2, SP, #0x34+var_24
MOV             R1, R8
MOV             R0, R2
BL              sub_2E6F8
CMP             R0, #0
BNE             loc_2D444
MOV             R1, #1
ADD             R0, SP, #0x34+var_24
BL              sub_29E48
CMP             R0, #0
BEQ             loc_2D190
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_29E00
CMP             R0, #0
BEQ             loc_2D42C
ADD             R2, SP, #0x34+var_24
MOV             R1, R8
MOV             R0, R2
BL              sub_2E6F8
CMP             R0, #0
BNE             loc_2D444
MOV             R1, #1
ADD             R0, SP, #0x34+var_24
BL              sub_29E48
CMP             R0, #0
BEQ             loc_2D190
ADD             R5, R5, #3
CMP             R5, R9
BLE             loc_2D31C

loc_2D42C
MOV             R1, SP
ADD             R0, SP, #0x34+var_24
BL              sub_29E00
CMP             R0, #0
BNE             loc_2D190
B               loc_2D1B0

loc_2D444
MOV             R4, R0
B               loc_2D190
; End of function sub_2D094




; int __fastcall sub_2D44C(int, int, int)
sub_2D44C

var_424= -0x424
var_420= -0x420
var_418= -0x418
var_414= -0x414
var_404= -0x404
var_400= -0x400
var_3FC= -0x3FC
var_3F8= -0x3F8
var_3F4= -0x3F4
var_14= -0x14

SUB             R12, R1, #1
PUSH            {R4-R11,LR}
CMP             R12, #0xFF
SUB             SP, SP, #0x420
SUB             SP, SP, #4
MOV             R3, #0
STR             R3, [SP,#0x424+var_418]
BHI             loc_2DB00
MOVW            R7, #:lower16:off_3ACB0
MOV             R9, R1
MOVT            R7, #:upper16:off_3ACB0
STR             R3, [R0,#8]
LDR             R1, [R7,#(dword_3B0AC - 0x3ACB0)]
MOV             R5, R0
MOV             R6, R2
BL              sub_29E48
CMN             R0, #1
BEQ             loc_2D738

loc_2D494
CMP             R6, #1
BEQ             loc_2D714
LDR             R6, [R5]
CMP             R6, #0
BLE             loc_2D4B8
LDR             R10, [R5,#0xC]
LDR             R1, [R10]
TST             R1, #1
BEQ             loc_2D91C

loc_2D4B8
MOV             R4, #2
MOV             R3, #0xFFFFFFE
STR             R3, [SP,#0x424+var_424]

loc_2D4C4
LDR             R10, =dword_3B0AC
ADD             R2, SP, #0x424+var_400
MOV             R0, R5
LDR             R1, [R10,#(dword_3ACB4 - 0x3B0AC)]
BL              sub_2C51C
SUBS            R1, R0, #0
BNE             loc_2D704
LDR             R1, [R10,#(dword_3ACB8 - 0x3B0AC)]
ADD             R2, SP, #0x424+var_3FC
MOV             R0, R5
BL              sub_2C51C
SUBS            R1, R0, #0
BNE             loc_2D704
MOV             R6, R10
ADD             R2, SP, #0x424+var_3F8
LDR             R1, [R6,#(dword_3ACBC - 0x3B0AC)]!
MOV             R0, R5
BL              sub_2C51C
SUBS            R1, R0, #0
BNE             loc_2D704
ADD             R8, SP, #0x424+var_3F4

loc_2D518
MOV             R2, R8
LDR             R1, [R6,#4]
MOV             R0, R5
ADD             R11, R8, #4
BL              sub_2C51C
SUBS            R1, R0, #0
MOV             R2, R11
MOV             R0, R5
BNE             loc_2D704
LDR             R1, [R6,#8]
BL              sub_2C51C
SUBS            R1, R0, #0
ADD             R2, R8, #8
MOV             R0, R5
BNE             loc_2D704
LDR             R1, [R6,#0xC]
BL              sub_2C51C
SUBS            R1, R0, #0
ADD             R2, R8, #0xC
MOV             R0, R5
BNE             loc_2D704
LDR             R1, [R6,#0x10]
BL              sub_2C51C
SUBS            R1, R0, #0
ADD             R2, R8, #0x10
MOV             R0, R5
BNE             loc_2D704
LDR             R1, [R6,#0x14]
BL              sub_2C51C
SUBS            R1, R0, #0
ADD             R2, R8, #0x14
MOV             R0, R5
BNE             loc_2D704
LDR             R1, [R6,#0x18]
BL              sub_2C51C
SUBS            R1, R0, #0
ADD             R2, R8, #0x18
MOV             R0, R5
ADD             R8, R8, #0x1C
BNE             loc_2D704
LDR             R1, [R6,#0x1C]!
BL              sub_2C51C
SUBS            R1, R0, #0
BNE             loc_2D704
CMP             R6, R10
BNE             loc_2D518
ADD             R0, SP, #0x424+var_414
BL              sub_2BAD0
SUBS            R1, R0, #0
BNE             loc_2D704
LDR             R11, [SP,#0x424+var_424]
ADD             LR, SP, #0x424+var_14
ADD             R6, LR, #0xC

loc_2D5EC
MOV             R1, #0

loc_2D5F0
ADD             R1, R1, R4
ADD             LR, SP, #0x424+var_404
MOV             R8, R7
MOV             R2, #0

loc_2D600
LDR             R0, [LR,#4]
ADD             R12, R8, #4
LDR             R10, [R8,#4]
ADD             R3, LR, #4
ADD             R8, R4, R0
LDR             R0, [R12,#4]
CMP             R10, R8
STR             R8, [LR,#4]
SUBLS           R8, R8, R10
STRLS           R8, [LR,#4]
CMP             R8, #0
LDR             LR, [R3,#4]
MOVEQ           R2, #1
ADD             R10, R4, LR
CMP             R0, R10
STR             R10, [R3,#4]
SUBLS           R10, R10, R0
STRLS           R10, [R3,#4]
LDR             R8, [R3,#8]
CMP             R10, #0
LDR             LR, [R12,#8]
MOVEQ           R2, #1
LDR             R10, [R3,#0xC]
ADD             R0, R4, R8
LDR             R8, [R12,#0xC]
CMP             LR, R0
STR             R0, [R3,#8]
SUBLS           R0, R0, LR
ADD             LR, R4, R10
STRLS           R0, [R3,#8]
CMP             R0, #0
LDR             R0, [R3,#0x10]
MOVEQ           R2, #1
LDR             R10, [R12,#0x10]
CMP             R8, LR
STR             LR, [R3,#0xC]
SUBLS           LR, LR, R8
STRLS           LR, [R3,#0xC]
ADD             R8, R12, #0x10
CMP             LR, #0
ADD             R12, R4, R0
MOVEQ           R2, #1
CMP             R10, R12
STR             R12, [R3,#0x10]
SUBLS           R12, R12, R10
ADD             LR, R3, #0x10
STRLS           R12, [R3,#0x10]
CMP             R12, #0
MOVEQ           R2, #1
CMP             R6, LR
BNE             loc_2D600
CMP             R2, #1
BNE             loc_2D938
CMP             R1, R11
BCC             loc_2D5F0
MOV             R2, R5
MOV             R0, R5
BL              sub_2999C
SUBS            R1, R0, #0
BEQ             loc_2D5EC

loc_2D6F0
MOV             R2, R1

loc_2D6F4
ADD             R0, SP, #0x424+var_414
STR             R2, [SP,#0x424+var_424]
BL              sub_29D74
LDR             R1, [SP,#0x424+var_424]

loc_2D704
MOV             R0, R1
ADD             SP, SP, #0x420
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2D714
LDR             R12, [R5,#0xC]
LDR             R2, [R12]
AND             R11, R2, #3
CMP             R11, #3
BNE             loc_2D900

loc_2D728
MOV             R0, #0xFFFFFFC
MOV             R4, #4
STR             R0, [SP,#0x424+var_424]
B               loc_2D4C4

loc_2D738
ADD             R4, R7, #0x3FC
MOV             R8, R4

loc_2D740
LDR             R1, [R4,#-4]
MOV             R0, R5
BL              sub_29E48
CMN             R0, #1
SUB             R10, R4, #4
BEQ             loc_2D8C8
CMP             R6, #1
LDR             R1, [R10,#4]
BNE             loc_2D8AC
AND             R1, R1, #3
CMP             R1, #3
BEQ             loc_2D8C8
SUB             R2, R8, R4
UBFX            R11, R2, #2, #3
CMP             R11, #0
BEQ             loc_2D820
LDR             R1, [R4,#4]!
AND             R0, R1, #3
CMP             R0, #3
BEQ             loc_2D8AC
CMP             R11, #1
BEQ             loc_2D820
CMP             R11, #2
BEQ             loc_2D810
CMP             R11, #3
BEQ             loc_2D800
CMP             R11, #4
BEQ             loc_2D7F0
CMP             R11, #5
BEQ             loc_2D7E0
CMP             R11, #6
BEQ             loc_2D7D0
LDR             R1, [R4,#4]!
AND             LR, R1, #3
CMP             LR, #3
BEQ             loc_2D8AC

loc_2D7D0
LDR             R1, [R4,#4]!
AND             R3, R1, #3
CMP             R3, #3
BEQ             loc_2D8AC

loc_2D7E0
LDR             R1, [R4,#4]!
AND             R12, R1, #3
CMP             R12, #3
BEQ             loc_2D8AC

loc_2D7F0
LDR             R1, [R4,#4]!
AND             R2, R1, #3
CMP             R2, #3
BEQ             loc_2D8AC

loc_2D800
LDR             R1, [R4,#4]!
AND             R11, R1, #3
CMP             R11, #3
BEQ             loc_2D8AC

loc_2D810
LDR             R1, [R4,#4]!
AND             R0, R1, #3
CMP             R0, #3
BEQ             loc_2D8AC

loc_2D820
CMP             R4, R8
ADD             LR, R4, #4
BEQ             loc_2D8C8
LDR             R1, [R4,#4]
AND             R12, R1, #3
CMP             R12, #3
BEQ             loc_2D8AC
LDR             R1, [LR,#4]
AND             LR, R1, #3
CMP             LR, #3
BEQ             loc_2D8AC
LDR             R1, [R4,#0xC]
AND             R3, R1, #3
CMP             R3, #3
BEQ             loc_2D8AC
LDR             R1, [R4,#0x10]
AND             R0, R1, #3
CMP             R0, #3
BEQ             loc_2D8AC
LDR             R1, [R4,#0x14]
AND             R11, R1, #3
CMP             R11, #3
BEQ             loc_2D8AC
LDR             R1, [R4,#0x18]
AND             R2, R1, #3
CMP             R2, #3
BEQ             loc_2D8AC
LDR             R1, [R4,#0x1C]
AND             R12, R1, #3
CMP             R12, #3
BEQ             loc_2D8AC
LDR             R1, [R4,#0x20]!
AND             LR, R1, #3
CMP             LR, #3
BNE             loc_2D820

loc_2D8AC
MOV             R0, R5
BL              sub_2E630
MOV             R1, #0
MOV             R0, R1
ADD             SP, SP, #0x420
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2D8C8
CMP             R7, R10
MOV             R4, R10
BNE             loc_2D740
MOV             R1, #1
MOV             R0, R5
BL              sub_29E48
SUBS            R8, R0, #0
BNE             loc_2D494
MOV             R1, #2
MOV             R0, R5
STR             R8, [SP,#0x424+var_424]
BL              sub_2E630
LDR             R1, [SP,#0x424+var_424]
B               loc_2D704

loc_2D900
ADD             R1, R11, #1
MOV             R2, R5
MOV             R0, R5
BL              sub_2E7D4
SUBS            R1, R0, #0
BEQ             loc_2D728
B               loc_2D704

loc_2D91C
MOV             R1, #1
MOV             R2, R5
MOV             R0, R5
BL              sub_2E7D4
SUBS            R1, R0, #0
BEQ             loc_2D4B8
B               loc_2D704

loc_2D938
MOV             R2, R5
MOV             R0, R5
BL              sub_2999C
SUBS            R10, R0, #0
BNE             loc_2DB10
ANDS            R1, R9, #3
MOV             R8, R7
BEQ             loc_2DA0C
CMP             R1, #1
BEQ             loc_2D9D0
CMP             R1, #2
BEQ             loc_2D99C
ADD             R0, SP, #0x424+var_414
LDR             R1, [R8],#4
BL              sub_2E630
ADD             R1, SP, #0x424+var_414
ADD             R2, SP, #0x424+var_418
MOV             R0, R5
BL              sub_2D094
SUBS            R1, R0, #0
BNE             loc_2D6F0
LDR             R2, [SP,#0x424+var_418]
CMP             R2, #0
BEQ             loc_2D5EC
MOV             R10, #1

loc_2D99C
LDR             R1, [R8],#4
ADD             R0, SP, #0x424+var_414
BL              sub_2E630
ADD             R1, SP, #0x424+var_414
ADD             R2, SP, #0x424+var_418
MOV             R0, R5
BL              sub_2D094
SUBS            R1, R0, #0
BNE             loc_2D6F0
LDR             R3, [SP,#0x424+var_418]
CMP             R3, #0
BEQ             loc_2D5EC
ADD             R10, R10, #1

loc_2D9D0
LDR             R1, [R8],#4
ADD             R0, SP, #0x424+var_414
BL              sub_2E630
ADD             R1, SP, #0x424+var_414
ADD             R2, SP, #0x424+var_418
MOV             R0, R5
BL              sub_2D094
SUBS            R1, R0, #0
BNE             loc_2D6F0
LDR             R0, [SP,#0x424+var_418]
CMP             R0, #0
BEQ             loc_2D5EC
ADD             R10, R10, #1
CMP             R9, R10
BEQ             loc_2DAF4

loc_2DA0C
STR             R4, [SP,#0x424+var_424]

loc_2DA10
MOV             R4, R8
ADD             R0, SP, #0x424+var_414
LDR             R1, [R4],#4
ADD             R10, R10, #4
BL              sub_2E630
ADD             R1, SP, #0x424+var_414
ADD             R2, SP, #0x424+var_418
MOV             R0, R5
BL              sub_2D094
SUBS            R1, R0, #0
ADD             R12, R8, #0xC
ADD             R0, SP, #0x424+var_414
STR             R12, [SP,#0x424+var_420]
ADD             R8, R8, #0x10
BNE             loc_2D6F0
LDR             LR, [SP,#0x424+var_418]
CMP             LR, #0
BEQ             loc_2DB08
LDR             R1, [R4]
BL              sub_2E630
ADD             R1, SP, #0x424+var_414
ADD             R2, SP, #0x424+var_418
MOV             R0, R5
BL              sub_2D094
SUBS            R1, R0, #0
ADD             R0, SP, #0x424+var_414
BNE             loc_2D6F0
LDR             R1, [SP,#0x424+var_418]
CMP             R1, #0
BEQ             loc_2DB08
LDR             R1, [R4,#4]
BL              sub_2E630
ADD             R1, SP, #0x424+var_414
ADD             R2, SP, #0x424+var_418
MOV             R0, R5
BL              sub_2D094
SUBS            R1, R0, #0
ADD             R0, SP, #0x424+var_414
BNE             loc_2D6F0
LDR             R2, [SP,#0x424+var_418]
CMP             R2, #0
BEQ             loc_2DB08
LDR             R3, [SP,#0x424+var_420]
LDR             R1, [R3]
BL              sub_2E630
ADD             R1, SP, #0x424+var_414
ADD             R2, SP, #0x424+var_418
MOV             R0, R5
BL              sub_2D094
SUBS            R1, R0, #0
BNE             loc_2D6F0
LDR             R0, [SP,#0x424+var_418]
CMP             R0, #0
BEQ             loc_2DB08
CMP             R9, R10
BNE             loc_2DA10
LDR             R4, [SP,#0x424+var_424]

loc_2DAF4
CMP             R0, #1
BNE             loc_2D5EC
B               loc_2D6F0

loc_2DB00
MOV             R1, #0xFFFFFFFD
B               loc_2D704

loc_2DB08
LDR             R4, [SP,#0x424+var_424]
B               loc_2D5EC

loc_2DB10
MOV             R2, R10
B               loc_2D6F4
; End of function sub_2D44C

off_2DB18 DCD dword_3B0AC



; int __fastcall sub_2DB1C(int *, int)
sub_2DB1C
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R0
BL              sub_2EB8C
CMP             R5, #0
BLE             loc_2DCC4

loc_2DB34
BL              rand
BICS            R1, R0, #0xF0000000
BEQ             loc_2DB34
MOV             R2, R4
MOV             R0, R4
BL              sub_2999C
SUBS            R2, R0, #0
BNE             loc_2DBF0
SUB             R3, R5, #1
ANDS            R6, R3, #3
BEQ             loc_2DCB0
MOV             R1, #1
MOV             R0, R4
MOV             R5, R3
BL              sub_2C160
SUBS            R2, R0, #0
BNE             loc_2DBF0
BL              rand
MOV             R2, R4
BIC             R1, R0, #0xF0000000
MOV             R0, R4
BL              sub_2999C
SUBS            R2, R0, #0
BNE             loc_2DBF0
CMP             R6, #1
BEQ             loc_2DCB0
CMP             R6, #2
BEQ             loc_2DBD8
MOV             R1, #1
MOV             R0, R4
BL              sub_2C160
SUBS            R2, R0, #0
SUB             R5, R5, #1
BNE             loc_2DBF0
BL              rand
MOV             R2, R4
BIC             R1, R0, #0xF0000000
MOV             R0, R4
BL              sub_2999C
SUBS            R2, R0, #0
BNE             loc_2DBF0

loc_2DBD8
MOV             R1, #1
MOV             R0, R4
BL              sub_2C160
SUBS            R2, R0, #0
SUB             R5, R5, #1
BEQ             loc_2DC94

loc_2DBF0
MOV             R0, R2
POP             {R4-R6,PC}

loc_2DBF8
BL              sub_2C160
SUBS            R2, R0, #0
BNE             loc_2DBF0
BL              rand
MOV             R2, R4
BIC             R1, R0, #0xF0000000
MOV             R0, R4
BL              sub_2999C
SUBS            R2, R0, #0
MOV             R1, #1
MOV             R0, R4
BNE             loc_2DBF0
BL              sub_2C160
SUBS            R2, R0, #0
BNE             loc_2DBF0
BL              rand
MOV             R2, R4
BIC             R1, R0, #0xF0000000
MOV             R0, R4
BL              sub_2999C
SUBS            R2, R0, #0
MOV             R1, #1
MOV             R0, R4
BNE             loc_2DBF0
BL              sub_2C160
SUBS            R2, R0, #0
BNE             loc_2DBF0
BL              rand
MOV             R2, R4
BIC             R1, R0, #0xF0000000
MOV             R0, R4
BL              sub_2999C
SUBS            R2, R0, #0
MOV             R1, #1
MOV             R0, R4
BNE             loc_2DBF0
BL              sub_2C160
SUBS            R2, R0, #0
BNE             loc_2DBF0

loc_2DC94
BL              rand
MOV             R2, R4
BIC             R1, R0, #0xF0000000
MOV             R0, R4
BL              sub_2999C
SUBS            R2, R0, #0
BNE             loc_2DBF0

loc_2DCB0
MOV             R1, #1
MOV             R0, R4
CMP             R5, R1
SUB             R5, R5, #4
BNE             loc_2DBF8

loc_2DCC4
MOV             R2, #0
MOV             R0, R2
POP             {R4-R6,PC}
; End of function sub_2DB1C




; int __fastcall sub_2DCD0(int *, _BYTE *, signed int)
sub_2DCD0
PUSH            {R4-R10,LR}
MOV             R7, R2
MOV             R8, R1
MOV             R6, R0
BL              sub_2EB8C
SUB             R3, R7, #2
CMP             R3, #0x3E ; '>'
BHI             loc_2DE28
LDRB            R0, [R8]
CMP             R0, #0x2D ; '-'
MOV             R0, R6
ADDEQ           R8, R8, #1
MOVEQ           R10, #1
MOVNE           R10, #0
BL              sub_2EB8C
LDRB            R5, [R8]
CMP             R5, #0
BEQ             loc_2DDCC
MOV             R9, #off_4C440 ; "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabc"...

loc_2DD20
CMP             R7, #0x24 ; '$'
BGT             loc_2DD34
BL              __ctype_toupper_loc
LDR             R1, [R0]
LDRB            R5, [R1,R5,LSL#2]

loc_2DD34
LDR             R2, [R9] ; "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabc"... ...
MOV             R4, #0
SUB             R12, R2, #1

loc_2DD40
LDRB            LR, [R12,#1]
CMP             LR, R5
BEQ             loc_2DDE0
LDRB            R3, [R12,#2]
ADD             R4, R4, #1
MOV             R0, R4
CMP             R3, R5
BEQ             loc_2DDE0
LDRB            R1, [R12,#3]
ADD             R4, R4, #1
CMP             R1, R5
BEQ             loc_2DDE0
LDRB            R2, [R12,#4]
ADD             R4, R0, #2
CMP             R2, R5
BEQ             loc_2DDE0
LDRB            LR, [R12,#5]
ADD             R4, R0, #3
CMP             LR, R5
BEQ             loc_2DDE0
LDRB            R3, [R12,#6]
ADD             R4, R0, #4
CMP             R3, R5
BEQ             loc_2DDE0
LDRB            R1, [R12,#7]
ADD             R4, R0, #5
CMP             R1, R5
BEQ             loc_2DDE0
LDRB            R2, [R12,#8]!
ADD             R4, R0, #6
CMP             R2, R5
BEQ             loc_2DDE0
ADD             R4, R0, #7
CMP             R4, #0x40 ; '@'
BNE             loc_2DD40

loc_2DDCC
LDR             R0, [R6]
CMP             R0, #0
STRNE           R10, [R6,#8]
MOVNE           R0, #0
POP             {R4-R10,PC}

loc_2DDE0
CMP             R7, R4
BLE             loc_2DDCC
MOV             R2, R6
MOV             R1, R7
MOV             R0, R6
BL              sub_2CBE4
CMP             R0, #0
POPNE           {R4-R10,PC}
MOV             R1, R4
MOV             R2, R6
MOV             R0, R6
BL              sub_2999C
CMP             R0, #0
POPNE           {R4-R10,PC}
LDRB            R5, [R8,#1]!
CMP             R5, #0
BNE             loc_2DD20
B               loc_2DDCC

loc_2DE28
MOV             R0, #0xFFFFFFFD
POP             {R4-R10,PC}
; End of function sub_2DCD0




; int __fastcall sub_2DE30(int, unsigned __int8 *, int)
sub_2DE30
LDR             R3, [R0,#4]
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, R1
MOV             R6, R2
CMP             R3, #1
BLE             loc_2E018

loc_2DE4C
MOV             R0, R4
BL              sub_2EB8C
CMP             R6, #0
BLE             loc_2E004
ANDS            R0, R6, #3
ADD             R6, R5, R6
BEQ             loc_2DF14
CMP             R0, #1
BEQ             loc_2DEE8
CMP             R0, #2
BEQ             loc_2DEB0
MOV             R2, R4
MOV             R1, #8
MOV             R0, R4
BL              sub_2CA58
SUBS            R12, R0, #0
BNE             loc_2E010
LDR             R2, [R4,#0xC]
LDRB            R1, [R5],#1
LDR             R12, [R2]
ORR             LR, R12, R1
STR             LR, [R2]
LDR             R3, [R4]
ADD             R0, R3, #1
STR             R0, [R4]

loc_2DEB0
MOV             R2, R4
MOV             R1, #8
MOV             R0, R4
BL              sub_2CA58
SUBS            R12, R0, #0
BNE             loc_2E010
LDR             R2, [R4,#0xC]
LDRB            R1, [R5],#1
LDR             R12, [R2]
ORR             LR, R12, R1
STR             LR, [R2]
LDR             R3, [R4]
ADD             R0, R3, #1
STR             R0, [R4]

loc_2DEE8
MOV             R2, R4
MOV             R1, #8
MOV             R0, R4
BL              sub_2CA58
SUBS            R12, R0, #0
BNE             loc_2E010
LDR             R0, [R4,#0xC]
LDRB            R1, [R5],#1
LDR             R2, [R0]
CMP             R6, R5
B               loc_2DFEC

loc_2DF14
MOV             R2, R4
MOV             R1, #8
MOV             R0, R4
MOV             R7, R5
BL              sub_2CA58
SUBS            R12, R0, #0
MOV             R2, R4
MOV             R1, #8
MOV             R0, R4
BNE             loc_2E010
LDR             R12, [R4,#0xC]
LDRB            LR, [R7],#1
LDR             R3, [R12]
ORR             LR, R3, LR
STR             LR, [R12]
LDR             R12, [R4]
ADD             R3, R12, #1
STR             R3, [R4]
BL              sub_2CA58
SUBS            R12, R0, #0
MOV             R2, R4
MOV             R1, #8
MOV             R0, R4
BNE             loc_2E010
LDR             R12, [R4,#0xC]
LDRB            LR, [R7]
LDR             R3, [R12]
ORR             LR, R3, LR
STR             LR, [R12]
LDR             R12, [R4]
ADD             R3, R12, #1
STR             R3, [R4]
BL              sub_2CA58
SUBS            R12, R0, #0
MOV             R2, R4
MOV             R1, #8
MOV             R0, R4
BNE             loc_2E010
LDR             R12, [R4,#0xC]
ADD             R5, R5, #4
LDRB            LR, [R5,#-2]
LDR             R3, [R12]
ORR             LR, R3, LR
STR             LR, [R12]
LDR             R12, [R4]
ADD             R3, R12, #1
STR             R3, [R4]
BL              sub_2CA58
SUBS            R12, R0, #0
BNE             loc_2E010
LDR             R0, [R4,#0xC]
CMP             R6, R5
LDRB            R1, [R5,#-1]
LDR             R2, [R0]

loc_2DFEC
ORR             R1, R2, R1
STR             R1, [R0]
LDR             R2, [R4]
ADD             R12, R2, #1
STR             R12, [R4]
BNE             loc_2DF14

loc_2E004
MOV             R0, R4
BL              sub_29BBC
MOV             R12, #0

loc_2E010
MOV             R0, R12
POP             {R4-R8,PC}

loc_2E018
MOV             R1, #2
BL              sub_2BA48
SUBS            R12, R0, #0
BEQ             loc_2DE4C
MOV             R0, R12
POP             {R4-R8,PC}
; End of function sub_2DE30




; int __fastcall sub_2E030(int *, int *, unsigned int)
sub_2E030
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x10
MOV             R4, R0
MOV             R0, SP
MOV             R6, R1
MOV             R7, R2
BL              sub_2BAD0
SUBS            R5, R0, #0
BEQ             loc_2E060
MOV             R0, R5
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_2E060
MOV             R0, R6
BL              sub_2A310
CMP             R7, #1
MOV             R8, R0
BNE             loc_2E0C8
B               loc_2E13C

loc_2E078
BL              sub_2CBE4
SUBS            R5, R0, #0
MOV             R2, R4
MOV             R1, SP
MOV             R0, R4
BNE             loc_2E0F0
BL              sub_2EC08
SUBS            R5, R0, #0
MOV             R1, R6
MOV             R0, R4
BNE             loc_2E0F0
BL              sub_29E8C
CMN             R0, #1
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BEQ             loc_2E0F0
BL              sub_307E4
SUBS            R5, R0, #0
BNE             loc_2E0F0

loc_2E0C8
MOV             R2, SP
MOV             R1, R8
MOV             R3, R4
MOV             R0, R4
BL              sub_329D0
SUBS            R5, R0, #0
MOV             R2, SP
MOV             R1, R7
MOV             R0, SP
BEQ             loc_2E078

loc_2E0F0
MOV             R0, SP
BL              sub_29D74
MOV             R0, R5
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_2E104
BL              sub_2EC08
SUBS            R5, R0, #0
MOV             R1, R6
MOV             R0, R4
BNE             loc_2E0F0
BL              sub_29E8C
CMN             R0, #1
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BEQ             loc_2E0F0
BL              sub_307E4
SUBS            R5, R0, #0
BNE             loc_2E0F0

loc_2E13C
MOV             R2, SP
MOV             R1, R8
MOV             R3, R4
MOV             R0, R4
BL              sub_329D0
SUBS            R5, R0, #0
MOV             R2, R4
MOV             R1, SP
MOV             R0, R4
BEQ             loc_2E104
B               loc_2E0F0
; End of function sub_2E030




; int __fastcall sub_2E168(int *, _DWORD *)
sub_2E168

var_4= -4

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x10
MOV             R5, R0
MOV             R0, SP
MOV             R6, R1
BL              sub_2BAD0
SUBS            R4, R0, #0
BEQ             loc_2E194
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_2E194
MOV             R0, R5
BL              sub_2A310
MOV             R1, R0
MOV             R0, SP
BL              sub_298D4
SUBS            R4, R0, #0
BNE             loc_2E1E8
MOV             R1, R5
MOV             R2, SP
MOV             R0, SP
BL              sub_307E4
SUBS            R4, R0, #0
BNE             loc_2E1E8
LDR             R3, [SP,#0x10+var_4]
MOV             R0, SP
LDR             R1, [R3]
STR             R1, [R6]
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_2E1E8
MOV             R0, SP
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}
; End of function sub_2E168




; int __fastcall sub_2E1FC(int *)
sub_2E1FC
LDR             R2, [R0]
CMP             R2, #0
BEQ             loc_2E218
CMP             R2, #1
BGT             loc_2E220
MOV             R0, #1
BX              LR

loc_2E218
MOV             R0, #0
BX              LR

loc_2E220
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_2A310
CMP             R0, #0x1C
BLE             loc_2E43C
LDR             R12, [R4,#0xC]
LDR             R4, [R12,#4]
TST             R4, #1
BEQ             loc_2E344
RSB             R1, R0, #0x1C
MOV             LR, #0x1C
MVN             R2, R1
MOV             R3, #2
ANDS            R1, R2, #7
MOV             R2, #1
BEQ             loc_2E430
TST             R4, #2
MOV             LR, #0x1D
BEQ             loc_2E344
CMP             R1, #1
MOV             R3, #4
BEQ             loc_2E430
CMP             R1, #2
BEQ             loc_2E334
CMP             R1, #3
BEQ             loc_2E314
CMP             R1, R3
BEQ             loc_2E2F4
CMP             R1, #5
BEQ             loc_2E2D4
CMP             R1, #6
BEQ             loc_2E2B4
LDR             R1, [R12,R2,LSL#2]
ADD             LR, LR, #1
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1

loc_2E2B4
LDR             R1, [R12,R2,LSL#2]
ADD             LR, LR, #1
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1

loc_2E2D4
LDR             R1, [R12,R2,LSL#2]
ADD             LR, LR, #1
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1

loc_2E2F4
LDR             R1, [R12,R2,LSL#2]
ADD             LR, LR, #1
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1

loc_2E314
LDR             R1, [R12,R2,LSL#2]
ADD             LR, LR, #1
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1

loc_2E334
LDR             R1, [R12,R2,LSL#2]
ADD             LR, LR, #1
TST             R3, R1
BNE             loc_2E420

loc_2E344
MOV             R0, #0
POP             {R4,PC}

loc_2E34C
LDR             R1, [R12,R2,LSL#2]
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1
LDRHI           R1, [R12,R2,LSL#2]
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1
LDRHI           R1, [R12,R2,LSL#2]
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1
LDRHI           R1, [R12,R2,LSL#2]
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1
LDRHI           R1, [R12,R2,LSL#2]
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1
LDRHI           R1, [R12,R2,LSL#2]
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1
LDRHI           R1, [R12,R2,LSL#2]
TST             R3, R1
BEQ             loc_2E344
MOV             R3, R3,LSL#1
ADD             LR, LR, #7
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1
LDRHI           R1, [R12,R2,LSL#2]
TST             R3, R1
BEQ             loc_2E344

loc_2E420
MOV             R3, R3,LSL#1
CMN             R3, #0xF0000001
ADDHI           R2, R2, #1
MOVHI           R3, #1

loc_2E430
ADD             LR, LR, #1
CMP             R0, LR
BNE             loc_2E34C

loc_2E43C
MOV             R0, #1
POP             {R4,PC}
; End of function sub_2E1FC




; int __fastcall sub_2E444(int *)
sub_2E444
MOV             R3, R0
LDR             R0, [R0]
CMP             R0, #0
BXEQ            LR
CMP             R0, #1
BXEQ            LR
BLE             loc_2E588
LDR             R3, [R3,#0xC]
MOV             R1, #0
ADD             R12, R3, R0,LSL#2
SUB             R2, R12, R3
SUB             R2, R2, #4
MOV             R2, R2,LSR#2
ADD             R2, R2, #1
ANDS            R2, R2, #7
BEQ             loc_2E504
CMP             R2, #1
BEQ             loc_2E4F0
CMP             R2, #2
BEQ             loc_2E4E4
CMP             R2, #3
BEQ             loc_2E4D8
CMP             R2, #4
BEQ             loc_2E4CC
CMP             R2, #5
BEQ             loc_2E4C0
CMP             R2, #6
BNE             loc_2E590

loc_2E4B4
LDR             R2, [R3],#4
CMN             R2, #0xF0000001
ADDEQ           R1, R1, #1

loc_2E4C0
LDR             R2, [R3],#4
CMN             R2, #0xF0000001
ADDEQ           R1, R1, #1

loc_2E4CC
LDR             R2, [R3],#4
CMN             R2, #0xF0000001
ADDEQ           R1, R1, #1

loc_2E4D8
LDR             R2, [R3],#4
CMN             R2, #0xF0000001
ADDEQ           R1, R1, #1

loc_2E4E4
LDR             R2, [R3],#4
CMN             R2, #0xF0000001
ADDEQ           R1, R1, #1

loc_2E4F0
LDR             R2, [R3],#4
CMN             R2, #0xF0000001
BEQ             loc_2E568

loc_2E4FC
CMP             R3, R12
BEQ             loc_2E570

loc_2E504
LDR             R2, [R3],#4
CMN             R2, #0xF0000001
LDR             R2, [R3]
ADDEQ           R1, R1, #1
CMN             R2, #0xF0000001
BEQ             loc_2E580

loc_2E51C
LDR             R2, [R3,#4]
ADD             R3, R3, #0x1C
CMN             R2, #0xF0000001
LDR             R2, [R3,#-0x14]
ADDEQ           R1, R1, #1
CMN             R2, #0xF0000001
LDR             R2, [R3,#-0x10]
ADDEQ           R1, R1, #1
CMN             R2, #0xF0000001
LDR             R2, [R3,#-0xC]
ADDEQ           R1, R1, #1
CMN             R2, #0xF0000001
LDR             R2, [R3,#-8]
ADDEQ           R1, R1, #1
CMN             R2, #0xF0000001
LDR             R2, [R3,#-4]
ADDEQ           R1, R1, #1
CMN             R2, #0xF0000001
BNE             loc_2E4FC

loc_2E568
ADD             R1, R1, #1
B               loc_2E4FC

loc_2E570
CMP             R1, R0,ASR#1
MOVGE           R0, #1
MOVLT           R0, #0
BX              LR

loc_2E580
ADD             R1, R1, #1
B               loc_2E51C

loc_2E588
MOV             R0, #0
BX              LR

loc_2E590
LDR             R2, [R3],#4
CMN             R2, #0xF0000001
MOVEQ           R1, #1
B               loc_2E4B4
; End of function sub_2E444




; int *__fastcall sub_2E5A0(int *result, int)
sub_2E5A0
CMP             R1, #0
BXLE            LR
LDR             R3, [R0]
MOV             R12, R0
CMP             R3, R1
BLE             loc_2E624
SUB             R2, R3, R1
PUSH            {R4,LR}
CMP             R2, #0
LDR             R0, [R0,#0xC]
MOV             LR, R1,LSL#2
BLE             loc_2E628
SUB             R4, LR, #4
MOV             R3, #0
ADD             LR, R0, R4

loc_2E5DC
LDR             R2, [LR,#4]!
ADD             R3, R3, #1
STR             R2, [R0],#4
LDR             R4, [R12]
SUB             R2, R4, R1
CMP             R2, R3
BGT             loc_2E5DC
CMP             R4, R3
BLE             loc_2E61C

loc_2E600
MOV             LR, #0

loc_2E604
STR             LR, [R0],#4
ADD             R3, R3, #1
LDR             R2, [R12]
CMP             R2, R3
BGT             loc_2E604
SUB             R2, R2, R1

loc_2E61C
STR             R2, [R12]
POP             {R4,PC}

loc_2E624
B               sub_2EB8C

loc_2E628
MOV             R3, #0
B               loc_2E600
; End of function sub_2E5A0




; _DWORD *__fastcall sub_2E630(int, int)
sub_2E630
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
BL              sub_2EB8C
BIC             R1, R4, #0xF0000000
LDR             R2, [R5,#0xC]
MOVS            R3, R1
MOVNE           R3, #1
STR             R1, [R2]
STR             R3, [R5]
POP             {R4-R6,PC}
; End of function sub_2E630




; int __fastcall sub_2E65C(int *, unsigned int)
sub_2E65C
PUSH            {R4-R8,LR}
MOV             R6, #8
MOV             R5, R1
MOV             R4, R0
BL              sub_2EB8C

loc_2E670
MOV             R2, R4
MOV             R1, #4
MOV             R0, R4
BL              sub_2CA58
SUBS            R7, R0, #0
BNE             loc_2E6B8
LDR             R2, [R4,#0xC]
SUBS            R6, R6, #1
LDR             R3, [R2]
ORR             R0, R3, R5,LSR#28
MOV             R5, R5,LSL#4
STR             R0, [R2]
LDR             R1, [R4]
ADD             R12, R1, #1
STR             R12, [R4]
BNE             loc_2E670
MOV             R0, R4
BL              sub_29BBC

loc_2E6B8
MOV             R0, R7
POP             {R4-R8,PC}
; End of function sub_2E65C




; int __fastcall sub_2E6C0(int *, int *)
sub_2E6C0
LDR             R2, [R0]
PUSH            {R4,LR}
MOV             R4, R1
MOV             R3, R2,LSL#1
ADD             R12, R3, #1
CMP             R2, #0x7F
CMPLE           R12, #0x200
BLT             loc_2E6F0
BL              sub_3020C

loc_2E6E4
MOV             R1, #0
STR             R1, [R4,#8]
POP             {R4,PC}

loc_2E6F0
BL              sub_32018
B               loc_2E6E4
; End of function sub_2E6C0




; int __fastcall sub_2E6F8(int *, int *, int *)
sub_2E6F8
PUSH            {R4-R7,LR}
SUB             SP, SP, #0x14
MOV             R5, R0
MOV             R0, SP
MOV             R6, R1
MOV             R7, R2
BL              sub_2BAD0
SUBS            R4, R0, #0
BEQ             loc_2E728
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_2E728
MOV             R0, R5
MOV             R1, SP
BL              sub_2E6C0
SUBS            R4, R0, #0
BNE             loc_2E750
MOV             R2, R7
MOV             R1, R6
MOV             R0, SP
BL              sub_2C470
MOV             R4, R0

loc_2E750
MOV             R0, SP
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x14
POP             {R4-R7,PC}
; End of function sub_2E6F8




; int __fastcall sub_2E764(int *, int *, int *)
sub_2E764
PUSH            {R4-R8,LR}
MOV             R7, R2
LDR             R4, [R0,#8]
LDR             R3, [R1,#8]
CMP             R4, R3
BEQ             loc_2E788
STR             R4, [R2,#8]
POP             {R4-R8,LR}
B               sub_2EC08

loc_2E788
MOV             R6, R0
MOV             R5, R1
BL              sub_29E8C
CMN             R0, #1
BEQ             loc_2E7B4
STR             R4, [R7,#8]
MOV             R2, R7
MOV             R1, R5
MOV             R0, R6
POP             {R4-R8,LR}
B               sub_307E4

loc_2E7B4
CLZ             R0, R4
MOV             R2, R7
MOV             R8, R0,LSR#5
MOV             R1, R6
MOV             R0, R5
STR             R8, [R7,#8]
POP             {R4-R8,LR}
B               sub_307E4
; End of function sub_2E764




; int __fastcall sub_2E7D4(int *, unsigned int, int *)
sub_2E7D4
PUSH            {R4-R8,LR}
MOV             R5, R2
LDR             R2, [R0]
MOV             R7, R1
MOV             R4, R0
LDR             R3, [R5,#4]
ADD             R1, R2, #1
CMP             R3, R1
BLT             loc_2E8EC
LDR             R8, [R4,#8]
CMP             R8, #1
BEQ             loc_2E908

loc_2E804
LDR             LR, [R4]
LDR             R1, [R5,#0xC]
LDR             R6, [R5]
CMP             LR, #1
LDR             R12, [R4,#0xC]
ADD             R0, R1, #4 ; s
BEQ             loc_2E878
CMP             LR, #0
STREQ           R7, [R1]
BNE             loc_2E884

loc_2E82C
MOV             R2, #1
MOV             R12, #2
MOV             R1, R2
STR             R2, [R5,#8]
STR             R2, [R5]

loc_2E840
CMP             R6, R1
BLE             loc_2E864
ADD             R1, R6, #1
CMP             R6, R12
SUB             R2, R1, R12
MOV             R1, #0  ; c
MOVGE           R2, R2,LSL#2
MOVLT           R2, #4  ; n
BL              memset

loc_2E864
MOV             R0, R5
MOV             R6, #0
BL              sub_29BBC

loc_2E870
MOV             R0, R6
POP             {R4-R8,PC}

loc_2E878
LDR             R2, [R12]
CMP             R2, R7
BLS             loc_2E93C

loc_2E884
MOV             R3, #0
STR             LR, [R5]
STR             R3, [R5,#8]
ADD             LR, R12, #4
LDR             R2, [R12]
SUB             R3, R2, R7
BIC             R2, R3, #0xF0000000
MOV             R3, R3,LSR#31
STR             R2, [R1]
LDR             R1, [R4]
CMP             R1, #1
MOVGT           R12, #1
BGT             loc_2E8C0
B               loc_2E948

loc_2E8BC
MOV             R12, R1

loc_2E8C0
LDR             R2, [LR],#4
ADD             R1, R12, #1
SUB             R3, R2, R3
BIC             R2, R3, #0xF0000000
MOV             R3, R3,LSR#31
STR             R2, [R0],#4
LDR             R2, [R4]
CMP             R2, R1
BGT             loc_2E8BC
ADD             R12, R12, #2
B               loc_2E840

loc_2E8EC
MOV             R0, R5
BL              sub_2BA48
SUBS            R6, R0, #0
BNE             loc_2E870
LDR             R8, [R4,#8]
CMP             R8, #1
BNE             loc_2E804

loc_2E908
MOV             R0, #0
MOV             R1, R7
STR             R0, [R4,#8]
MOV             R2, R5
MOV             R0, R4
BL              sub_2999C
STR             R8, [R5,#8]
MOV             R6, R0
STR             R8, [R4,#8]
MOV             R0, R5
BL              sub_29BBC
MOV             R0, R6
POP             {R4-R8,PC}

loc_2E93C
SUB             R3, R7, R2
STR             R3, [R1]
B               loc_2E82C

loc_2E948
MOV             R12, #2
MOV             R1, #1
B               loc_2E840
; End of function sub_2E7D4




; int __fastcall sub_2E954(int *, int *, int *, int *)
sub_2E954
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x10
MOV             R5, R0
MOV             R0, SP
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              sub_2BAD0
SUBS            R4, R0, #0
BEQ             loc_2E988
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_2E988
MOV             R1, R6
MOV             R0, R5
MOV             R2, SP
BL              sub_2E764
SUBS            R4, R0, #0
BNE             loc_2E9B4
MOV             R2, R8
MOV             R1, R7
MOV             R0, SP
BL              sub_2C470
MOV             R4, R0

loc_2E9B4
MOV             R0, SP
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R8,PC}
; End of function sub_2E954




; int __fastcall sub_2E9C8(int *, _BYTE *, unsigned int)
sub_2E9C8

var_14= -0x14
var_10= -0x10
var_8= -8

SUB             R3, R2, #2
PUSH            {R4-R8,LR}
CMP             R3, #0x3E ; '>'
SUB             SP, SP, #0x18
BHI             loc_2EAC4
LDR             R4, [R0]
MOV             R5, R1
CMP             R4, #0
BNE             loc_2EA04
MOV             R7, #0x30 ; '0'
STRB            R4, [R1,#1]
STRB            R7, [R1]

loc_2E9F8
MOV             R0, R4
ADD             SP, SP, #0x18
POP             {R4-R8,PC}

loc_2EA04
MOV             R1, R0
ADD             R0, SP, #0x18+var_10
MOV             R7, R2
BL              sub_2BB10
SUBS            R4, R0, #0
BNE             loc_2E9F8
LDR             R0, [SP,#0x18+var_8]
LDR             R1, [SP,#0x18+var_10]
CMP             R0, #1
MOVEQ           R0, #0x2D ; '-'
STREQ           R4, [SP,#0x18+var_8]
STRBEQ          R0, [R5]
ADDEQ           R5, R5, #1
CMP             R1, #0
BEQ             loc_2EA9C
MOVW            R8, #:lower16:off_4C440 ; "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabc"...
MOV             R6, R5
MOVT            R8, #:upper16:off_4C440 ; "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabc"...
B               loc_2EA70

loc_2EA50
LDR             R12, [R8] ; "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabc"... ...
LDR             LR, [SP,#0x18+var_14]
LDR             R2, [SP,#0x18+var_10]
LDRB            R3, [R12,LR]
CMP             R2, #0
STRB            R3, [R6],#1
SUB             R1, R6, R5
BEQ             loc_2EAA0

loc_2EA70
ADD             R2, SP, #0x18+var_10
MOV             R1, R7
ADD             R3, SP, #0x18+var_14
MOV             R0, R2
BL              sub_32D70
SUBS            R1, R0, #0
BEQ             loc_2EA50
ADD             R0, SP, #0x18+var_10
MOV             R4, R1
BL              sub_29D74
B               loc_2E9F8

loc_2EA9C
MOV             R6, R5

loc_2EAA0
MOV             R0, R5
MOV             R5, #0
BL              sub_2EBC4
ADD             R0, SP, #0x18+var_10
STRB            R5, [R6]
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x18
POP             {R4-R8,PC}

loc_2EAC4
MOV             R4, #0xFFFFFFFD
B               loc_2E9F8
; End of function sub_2E9C8




; int __fastcall sub_2EACC(int *, _BYTE *)
sub_2EACC

var_10= -0x10
var_4= -4

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x10
MOV             R6, R1
MOV             R1, R0
MOV             R0, SP
BL              sub_2BB10
SUBS            R4, R0, #0
SUBEQ           R5, R6, #1
BEQ             loc_2EB10
B               loc_2EB44

loc_2EAF4
LDR             LR, [SP,#0x10+var_4]
ADD             R4, R4, #1
LDR             R12, [LR]
STRB            R12, [R5,#1]!
BL              sub_329D0
SUBS            R3, R0, #0
BNE             loc_2EB50

loc_2EB10
LDR             R12, [SP,#0x10+var_10]
MOV             R3, #0
MOV             R2, SP
MOV             R1, #8
MOV             R0, SP
CMP             R12, R3
BNE             loc_2EAF4
MOV             R1, R4
MOV             R0, R6
MOV             R4, R12
BL              sub_2EBC4
MOV             R0, SP
BL              sub_29D74

loc_2EB44
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_2EB50
MOV             R0, SP
MOV             R4, R3
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}
; End of function sub_2EACC




; int __fastcall sub_2EB68(int *)
sub_2EB68
PUSH            {R4,LR}
BL              sub_2A310
ANDS            R3, R0, #7
ADD             R2, R0, #7
MOVNE           R3, #1
CMP             R0, #0
MOVLT           R0, R2
ADD             R0, R3, R0,ASR#3
POP             {R4,PC}
; End of function sub_2EB68




; _DWORD *__fastcall sub_2EB8C(_DWORD *result)
sub_2EB8C
LDR             R2, [R0,#4]
MOV             R3, #0
STR             R3, [R0,#8]
STR             R3, [R0]
CMP             R2, R3
LDR             R2, [R0,#0xC]
BXLE            LR
MOV             R12, R3

loc_2EBAC
STR             R12, [R2],#4
ADD             R3, R3, #1
LDR             R1, [R0,#4]
CMP             R1, R3
BGT             loc_2EBAC
BX              LR
; End of function sub_2EB8C




; _BYTE *__fastcall sub_2EBC4(_BYTE *result, int)
sub_2EBC4
SUB             R3, R1, #1
CMP             R3, #0
BXLE            LR
SUB             R12, R0, #1
MOV             R3, #0
ADD             R0, R0, R1
PUSH            {R4,LR}

loc_2EBE0
ADD             R3, R3, #1
LDRB            LR, [R12,#1]!
MVN             R2, R3
LDRB            R4, [R0,#-1]!
ADD             R2, R2, R1
CMP             R3, R2
STRB            R4, [R12]
STRB            LR, [R0]
BLT             loc_2EBE0
POP             {R4,PC}
; End of function sub_2EBC4




; int __fastcall sub_2EC08(int *, int *, int *)
sub_2EC08

var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x14
LDR             R6, [R0]
MOV             R4, R0
MOV             R5, R1
MOV             R7, R2
LDR             R8, [R1]
CMP             R6, R8
MOVLE           R3, R8
MOVLE           R8, R6
MOVLE           R6, R3
LDR             R3, [R2,#4]
ADD             R9, R6, #1
STRLE           R1, [SP,#0x14+var_C]
STRGT           R0, [SP,#0x14+var_C]
CMP             R3, R9
BLT             loc_2F19C

loc_2EC4C
LDR             R3, [R7]
CMP             R8, #0
LDR             LR, [R4,#0xC]
LDR             R4, [R5,#0xC]
MOVLE           R5, #0
STR             R3, [SP,#0x14+var_10]
MOVLE           R3, R5
STR             R9, [R7]
LDR             R0, [R7,#0xC]
BLE             loc_2EEC0
SUB             R9, R8, #7
MOV             R5, #0
CMP             R9, #1
BLE             loc_2F1DC
ADD             R2, LR, #0x20 ; ' '
ADD             R1, R4, #0x20 ; ' '
MOV             R3, R5
ADD             R12, R0, #0x20 ; ' '
STR             R6, [SP,#0x14+var_8]

loc_2EC98
LDR             R11, [R1,#-0x20]
ADD             R10, R2, #0x20 ; ' '
LDR             LR, [R2,#-0x20]
ADD             R6, R1, #0x20 ; ' '
PLD             [R10]
ADD             R4, R5, #9
PLD             [R6]
CMP             R9, R4
ADD             LR, LR, R11
MOV             R4, R1
ADD             R3, LR, R3
MOV             LR, R2
BIC             R11, R3, #0xF0000000
ADD             R5, R5, #8
STR             R11, [R12,#-0x20]
LDR             R11, [R2,#-0x1C]
LDR             R2, [R1,#-0x1C]
ADD             R1, R11, R2
ADD             R3, R1, R3,LSR#28
BIC             R11, R3, #0xF0000000
STR             R11, [R12,#-0x1C]
MOV             R11, R12
LDR             R1, [R4,#-0x18]
ADD             R12, R12, #0x20 ; ' '
LDR             R2, [LR,#-0x18]
ADD             R2, R2, R1
ADD             R3, R2, R3,LSR#28
BIC             R1, R3, #0xF0000000
STR             R1, [R12,#-0x38]
LDR             R1, [R4,#-0x14]
LDR             R2, [LR,#-0x14]
ADD             R2, R2, R1
ADD             R1, R2, R3,LSR#28
BIC             R3, R1, #0xF0000000
STR             R3, [R12,#-0x34]
LDR             R3, [R4,#-0x10]
LDR             R2, [LR,#-0x10]
ADD             R2, R2, R3
ADD             R3, R2, R1,LSR#28
BIC             R1, R3, #0xF0000000
STR             R1, [R12,#-0x30]
LDR             R1, [R4,#-0xC]
LDR             R2, [LR,#-0xC]
ADD             R2, R2, R1
ADD             R1, R2, R3,LSR#28
BIC             R3, R1, #0xF0000000
STR             R3, [R12,#-0x2C]
LDR             R3, [R4,#-8]
LDR             R2, [LR,#-8]
ADD             R2, R2, R3
ADD             R3, R2, R1,LSR#28
MOV             R2, R10
BIC             R1, R3, #0xF0000000
STR             R1, [R12,#-0x28]
MOV             R1, R6
LDR             R10, [R4,#-4]
LDR             R6, [LR,#-4]
ADD             R10, R6, R10
ADD             R3, R10, R3,LSR#28
BIC             R6, R3, #0xF0000000
MOV             R3, R3,LSR#28
STR             R6, [R12,#-0x24]
BGT             loc_2EC98
LDR             R6, [SP,#0x14+var_8]
MOV             R9, R11

loc_2ED9C
LDR             R11, [LR],#4
ADD             R12, R5, #1
LDR             R2, [R4],#4
MVN             R5, R5
CMP             R8, R12
ADD             R1, R5, R8
ADD             R10, R11, R2
AND             R11, R1, #3
ADD             R3, R10, R3
BIC             R2, R3, #0xF0000000
MOV             R3, R3,LSR#28
STR             R2, [R9],#4
BLE             loc_2EEB8
CMP             R11, #0
BEQ             loc_2EE30
CMP             R11, #1
BEQ             loc_2EE08
CMP             R11, #2
BNE             loc_2F1B8

loc_2EDE8
LDR             R5, [LR],#4
ADD             R12, R12, #1
LDR             R1, [R4],#4
ADD             R10, R5, R1
ADD             R11, R10, R3
MOV             R3, R11,LSR#28
BIC             R2, R11, #0xF0000000
STR             R2, [R9],#4

loc_2EE08
LDR             R5, [LR],#4
ADD             R12, R12, #1
LDR             R1, [R4],#4
CMP             R8, R12
ADD             R10, R5, R1
ADD             R3, R10, R3
BIC             R11, R3, #0xF0000000
MOV             R3, R3,LSR#28
STR             R11, [R9],#4
BLE             loc_2EEB8

loc_2EE30
MOV             R11, LR
MOV             R10, R4
LDR             R2, [R10],#4
MOV             R5, R9
LDR             R1, [R11],#4
ADD             LR, LR, #0x10
ADD             R4, R4, #0x10
ADD             R12, R12, #4
CMP             R8, R12
ADD             R9, R9, #0x10
ADD             R1, R1, R2
ADD             R3, R1, R3
BIC             R2, R3, #0xF0000000
STR             R2, [R5],#4
LDR             R11, [R11]
LDR             R10, [R10]
ADD             R1, R11, R10
ADD             R11, R1, R3,LSR#28
BIC             R3, R11, #0xF0000000
STR             R3, [R5]
LDR             R5, [LR,#-8]
LDR             R2, [R4,#-8]
ADD             R10, R5, R2
ADD             R11, R10, R11,LSR#28
BIC             R1, R11, #0xF0000000
STR             R1, [R9,#-8]
LDR             R3, [LR,#-4]
LDR             R5, [R4,#-4]
ADD             R2, R3, R5
ADD             R10, R2, R11,LSR#28
BIC             R11, R10, #0xF0000000
MOV             R3, R10,LSR#28
STR             R11, [R9,#-4]
BGT             loc_2EE30

loc_2EEB8
ADD             R0, R0, R8,LSL#2
MOV             R5, R8

loc_2EEC0
CMP             R8, R6
BEQ             loc_2F160
CMP             R6, R5
BLE             loc_2F160
SUB             R8, R6, #7
ADD             R4, R5, #1
LDR             LR, [SP,#0x14+var_C]
CMP             R4, R8
LDR             R9, [LR,#0xC]
BGE             loc_2F1E8
ADD             R12, R5, #0x13
ADD             R2, R0, #0x20 ; ' '
ADD             R12, R9, R12,LSL#2
MOV             LR, R5

loc_2EEF8
LDR             R1, [R12,#-0x4C]
ADD             R11, LR, #9
PLD             [R12]
CMP             R8, R11
PLD             [R2,#0x2C]
MOV             R4, R2
ADD             R3, R3, R1
ADD             LR, LR, #8
BIC             R1, R3, #0xF0000000
ADD             R12, R12, #0x20 ; ' '
STR             R1, [R2,#-0x20]
ADD             R2, R2, #0x20 ; ' '
LDR             R10, [R12,#-0x68]
ADD             R11, R10, R3,LSR#28
BIC             R3, R11, #0xF0000000
STR             R3, [R2,#-0x3C]
LDR             R1, [R12,#-0x64]
ADD             R10, R1, R11,LSR#28
BIC             R11, R10, #0xF0000000
STR             R11, [R2,#-0x38]
LDR             R3, [R12,#-0x60]
ADD             R10, R3, R10,LSR#28
BIC             R1, R10, #0xF0000000
STR             R1, [R2,#-0x34]
LDR             R11, [R12,#-0x5C]
ADD             R3, R11, R10,LSR#28
BIC             R10, R3, #0xF0000000
STR             R10, [R2,#-0x30]
LDR             R1, [R12,#-0x58]
ADD             R11, R1, R3,LSR#28
BIC             R3, R11, #0xF0000000
STR             R3, [R2,#-0x2C]
LDR             R10, [R12,#-0x54]
ADD             R1, R10, R11,LSR#28
BIC             R11, R1, #0xF0000000
STR             R11, [R2,#-0x28]
LDR             R3, [R12,#-0x50]
ADD             R10, R3, R1,LSR#28
BIC             R1, R10, #0xF0000000
MOV             R3, R10,LSR#28
STR             R1, [R2,#-0x24]
BGT             loc_2EEF8

loc_2EFA0
ADD             R8, R9, LR,LSL#2
ADD             R2, LR, #1
MVN             R11, LR
LDR             R9, [R8],#4
CMP             R6, R2
ADD             R12, R11, R6
AND             R10, R12, #7
ADD             R3, R3, R9
BIC             R1, R3, #0xF0000000
MOV             R3, R3,LSR#28
STR             R1, [R4],#4
BLE             loc_2F158
CMP             R10, #0
BEQ             loc_2F0B8
CMP             R10, #1
BEQ             loc_2F098
CMP             R10, #2
BEQ             loc_2F080
CMP             R10, #3
BEQ             loc_2F068
CMP             R10, #4
BEQ             loc_2F050
CMP             R10, #5
BEQ             loc_2F038
CMP             R10, #6
BEQ             loc_2F020
LDR             LR, [R8],#4
ADD             R2, R2, #1
ADD             R9, R3, LR
MOV             R3, R9,LSR#28
BIC             R11, R9, #0xF0000000
STR             R11, [R4],#4

loc_2F020
LDR             R12, [R8],#4
ADD             R2, R2, #1
ADD             R10, R3, R12
MOV             R3, R10,LSR#28
BIC             R1, R10, #0xF0000000
STR             R1, [R4],#4

loc_2F038
LDR             LR, [R8],#4
ADD             R2, R2, #1
ADD             R9, R3, LR
MOV             R3, R9,LSR#28
BIC             R11, R9, #0xF0000000
STR             R11, [R4],#4

loc_2F050
LDR             R12, [R8],#4
ADD             R2, R2, #1
ADD             R10, R3, R12
MOV             R3, R10,LSR#28
BIC             R1, R10, #0xF0000000
STR             R1, [R4],#4

loc_2F068
LDR             LR, [R8],#4
ADD             R2, R2, #1
ADD             R9, R3, LR
MOV             R3, R9,LSR#28
BIC             R11, R9, #0xF0000000
STR             R11, [R4],#4

loc_2F080
LDR             R12, [R8],#4
ADD             R2, R2, #1
ADD             R10, R3, R12
MOV             R3, R10,LSR#28
BIC             R1, R10, #0xF0000000
STR             R1, [R4],#4

loc_2F098
LDR             LR, [R8],#4
ADD             R2, R2, #1
CMP             R6, R2
ADD             R3, R3, LR
BIC             R9, R3, #0xF0000000
MOV             R3, R3,LSR#28
STR             R9, [R4],#4
BLE             loc_2F158

loc_2F0B8
MOV             R11, R8
MOV             R12, R4
LDR             R10, [R11],#4
ADD             R2, R2, #8
CMP             R6, R2
ADD             R4, R4, #0x20 ; ' '
ADD             R8, R8, #0x20 ; ' '
ADD             LR, R3, R10
BIC             R1, LR, #0xF0000000
STR             R1, [R12],#4
LDR             R3, [R8,#-0x1C]
ADD             R9, R3, LR,LSR#28
BIC             R10, R9, #0xF0000000
STR             R10, [R12]
LDR             R11, [R11,#4]
ADD             R12, R11, R9,LSR#28
BIC             LR, R12, #0xF0000000
STR             LR, [R4,#-0x18]
LDR             R1, [R8,#-0x14]
ADD             R3, R1, R12,LSR#28
BIC             R9, R3, #0xF0000000
STR             R9, [R4,#-0x14]
LDR             R10, [R8,#-0x10]
ADD             R11, R10, R3,LSR#28
BIC             R12, R11, #0xF0000000
STR             R12, [R4,#-0x10]
LDR             LR, [R8,#-0xC]
ADD             R1, LR, R11,LSR#28
BIC             R3, R1, #0xF0000000
STR             R3, [R4,#-0xC]
LDR             R9, [R8,#-8]
ADD             R10, R9, R1,LSR#28
BIC             R11, R10, #0xF0000000
STR             R11, [R4,#-8]
LDR             R12, [R8,#-4]
ADD             LR, R12, R10,LSR#28
BIC             R1, LR, #0xF0000000
MOV             R3, LR,LSR#28
STR             R1, [R4,#-4]
BGT             loc_2F0B8

loc_2F158
SUB             R4, R6, R5
ADD             R0, R0, R4,LSL#2

loc_2F160
STR             R3, [R0]
LDR             R2, [SP,#0x14+var_10]
LDR             R8, [R7]
CMP             R2, R8
BLE             loc_2F188
SUB             R5, R2, R8
ADD             R0, R0, #4 ; s
MOV             R2, R5,LSL#2 ; n
MOV             R1, #0  ; c
BL              memset

loc_2F188
MOV             R0, R7
BL              sub_29BBC
MOV             R0, #0
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_2F19C
MOV             R1, R9
MOV             R0, R2
BL              sub_2BA48
CMP             R0, #0
BEQ             loc_2EC4C
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_2F1B8
LDR             R5, [LR],#4
ADD             R12, R12, #1
LDR             R1, [R4],#4
ADD             R10, R5, R1
ADD             R11, R10, R3
BIC             R2, R11, #0xF0000000
MOV             R3, R11,LSR#28
STR             R2, [R9],#4
B               loc_2EDE8

loc_2F1DC
MOV             R9, R0
MOV             R3, R5
B               loc_2ED9C

loc_2F1E8
MOV             LR, R5
MOV             R4, R0
B               loc_2EFA0
; End of function sub_2EC08




; int __fastcall sub_2F1F4(int *, int *, int *, int *, int)
sub_2F1F4

var_1040= -0x1040
var_103C= -0x103C
var_1038= -0x1038
var_1034= -0x1034
var_1030= -0x1030
var_102C= -0x102C
var_1028= -0x1028
var_1024= -0x1024
var_1014= -0x1014
var_1004= -0x1004
var_FF4= -0xFF4
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1040
SUB             SP, SP, #4
MOV             R7, R1
STR             R0, [SP,#0x1044+var_103C]
MOV             R0, R1
STR             R2, [SP,#0x1044+var_1040]
STR             R3, [SP,#0x1044+var_1034]
BL              sub_2A310
CMP             R0, #7
BLE             loc_2F480
CMP             R0, #0x24 ; '$'
BGT             loc_2F4BC
MOV             R0, #2
MOV             R1, #3
STRD            R0, R1, [SP,#0x1044+var_1030]
MOV             R8, #0x40 ; '@'
ADD             R0, SP, #0x1044+var_FF4
STR             R8, [SP,#0x1044+var_1038]
BL              sub_2BAD0
SUBS            R11, R0, #0
MOV             R4, #4
MOV             R6, #8
BNE             loc_2F4AC

loc_2F254
MOV             R11, R4,LSL#4
SUB             R12, R6, R4
ADD             R3, SP, #0x1044+var_1004
ANDS            LR, R12, #7
ADD             R5, R3, R11
STR             R11, [SP,#0x1044+var_1028]
MOV             R9, R4
MOV             R10, R5
BEQ             loc_2F358
CMP             LR, #1
BEQ             loc_2F338
CMP             LR, #2
BEQ             loc_2F320
CMP             LR, #3
BEQ             loc_2F308
CMP             LR, #4
BEQ             loc_2F2F0
CMP             LR, #5
BEQ             loc_2F2D8
CMP             LR, #6
BEQ             loc_2F2C0
MOV             R0, R5
BL              sub_2BAD0
SUBS            R11, R0, #0
BNE             loc_2F4FC
ADD             R9, R4, #1
ADD             R10, R5, #0x10

loc_2F2C0
MOV             R0, R10
BL              sub_2BAD0
SUBS            R11, R0, #0
BNE             loc_2F4FC
ADD             R9, R9, #1
ADD             R10, R10, #0x10

loc_2F2D8
MOV             R0, R10
BL              sub_2BAD0
SUBS            R11, R0, #0
BNE             loc_2F4FC
ADD             R9, R9, #1
ADD             R10, R10, #0x10

loc_2F2F0
MOV             R0, R10
BL              sub_2BAD0
SUBS            R11, R0, #0
BNE             loc_2F4FC
ADD             R9, R9, #1
ADD             R10, R10, #0x10

loc_2F308
MOV             R0, R10
BL              sub_2BAD0
SUBS            R11, R0, #0
BNE             loc_2F4FC
ADD             R9, R9, #1
ADD             R10, R10, #0x10

loc_2F320
MOV             R0, R10
BL              sub_2BAD0
SUBS            R11, R0, #0
BNE             loc_2F4FC
ADD             R9, R9, #1
ADD             R10, R10, #0x10

loc_2F338
MOV             R0, R10
BL              sub_2BAD0
SUBS            R11, R0, #0
BNE             loc_2F4FC
ADD             R9, R9, #1
ADD             R10, R10, #0x10
CMP             R6, R9
BEQ             loc_2F40C

loc_2F358
MOV             R0, R10
ADD             R8, R10, #0x10
BL              sub_2BAD0
SUBS            R11, R0, #0
MOV             R0, R8
BNE             loc_2F4FC
BL              sub_2BAD0
SUBS            R11, R0, #0
ADD             R9, R9, #1
ADD             R0, R8, #0x10
MOV             R8, R9
BNE             loc_2F4FC
BL              sub_2BAD0
SUBS            R11, R0, #0
ADD             R9, R9, #1
ADD             R0, R10, #0x30 ; '0'
BNE             loc_2F4FC
BL              sub_2BAD0
SUBS            R11, R0, #0
ADD             R9, R8, #2
ADD             R0, R10, #0x40 ; '@'
BNE             loc_2F4FC
BL              sub_2BAD0
SUBS            R11, R0, #0
ADD             R9, R8, #3
ADD             R0, R10, #0x50 ; 'P'
BNE             loc_2F4FC
BL              sub_2BAD0
SUBS            R11, R0, #0
ADD             R9, R8, #4
ADD             R0, R10, #0x60 ; '`'
BNE             loc_2F4FC
BL              sub_2BAD0
SUBS            R11, R0, #0
ADD             R9, R8, #5
ADD             R0, R10, #0x70 ; 'p'
ADD             R10, R10, #0x80
BNE             loc_2F4FC
BL              sub_2BAD0
SUBS            R11, R0, #0
ADD             R9, R8, #6
BNE             loc_2F4FC
ADD             R9, R8, #7
CMP             R6, R9
BNE             loc_2F358

loc_2F40C
ADD             R0, SP, #0x1044+var_1014
BL              sub_2BAD0
SUBS            R11, R0, #0
BNE             loc_2F62C
ADD             R1, SP, #0x1044+var_4
ADD             R2, R1, #0x28 ; '('
LDR             R0, [R2]
CMP             R0, #0
BNE             loc_2F75C
LDR             R1, [SP,#0x1044+var_1040]
ADD             R0, SP, #0x1044+var_1014
BL              sub_33E88
SUBS            R11, R0, #0
MOVEQ           R10, #0x33D10
BNE             loc_2F464

loc_2F44C
LDR             R0, [SP,#0x1044+var_103C]
ADD             R2, SP, #0x1044+var_FF4
LDR             R1, [SP,#0x1044+var_1040]
BL              sub_2C470
SUBS            R11, R0, #0
BEQ             loc_2F800

loc_2F464
ADD             R0, SP, #0x1044+var_1014
BL              sub_29D74
ADD             R0, SP, #0x1044+var_FF4
BL              sub_29D74
CMP             R6, R4
BGT             loc_2F634
B               loc_2F4AC

loc_2F480
MOV             R6, #4
MOV             R4, #2
MOV             R9, #0x20 ; ' '
MOV             R10, #1
STR             R9, [SP,#0x1044+var_1038]
STR             R4, [SP,#0x1044+var_102C]
STR             R10, [SP,#0x1044+var_1030]

loc_2F49C
ADD             R0, SP, #0x1044+var_FF4
BL              sub_2BAD0
SUBS            R11, R0, #0
BEQ             loc_2F254

loc_2F4AC
MOV             R0, R11
ADD             SP, SP, #0x1040
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2F4BC
CMP             R0, #0x8C
BLE             loc_2F60C
MOVW            R3, #0x1C2
CMP             R0, R3
BLE             loc_2F77C
MOVW            R1, #0x517
CMP             R0, R1
BGT             loc_2F79C
MOV             R0, #0x200
MOV             R1, #6
STR             R0, [SP,#0x1044+var_1038]
MOV             R0, #5
MOV             R4, #0x20 ; ' '
MOV             R6, #0x40 ; '@'
STRD            R0, R1, [SP,#0x1044+var_1030]
B               loc_2F49C

loc_2F4FC
CMP             R9, R4
BLE             loc_2F5F4
ADD             R6, SP, #0x1044+var_1004
ADD             R10, R6, R9,LSL#4
SUB             LR, R10, R5
SUB             R0, LR, #0x10
MOV             R12, R0,LSR#4
ADD             R1, R12, #1
ANDS            R8, R1, #7
BEQ             loc_2F5A4
CMP             R8, #1
BEQ             loc_2F590
CMP             R8, #2
BEQ             loc_2F584
CMP             R8, #3
BEQ             loc_2F578
CMP             R8, #4
BEQ             loc_2F56C
CMP             R8, #5
BEQ             loc_2F560
CMP             R8, #6
BNE             loc_2F7DC

loc_2F554
MOV             R0, R5
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F560
MOV             R0, R5
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F56C
MOV             R0, R5
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F578
MOV             R0, R5
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F584
MOV             R0, R5
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F590
MOV             R0, R5
ADD             R5, R5, #0x10
BL              sub_29D74
CMP             R10, R5
BEQ             loc_2F5F4

loc_2F5A4
MOV             R0, R5
ADD             R9, R5, #0x10
BL              sub_29D74
MOV             R0, R9
BL              sub_29D74
ADD             R0, R5, #0x20 ; ' '
BL              sub_29D74
ADD             R0, R5, #0x30 ; '0'
BL              sub_29D74
ADD             R0, R5, #0x40 ; '@'
BL              sub_29D74
ADD             R0, R5, #0x50 ; 'P'
BL              sub_29D74
ADD             R0, R5, #0x60 ; '`'
BL              sub_29D74
ADD             R0, R5, #0x70 ; 'p'
ADD             R5, R5, #0x80
BL              sub_29D74
CMP             R10, R5
BNE             loc_2F5A4

loc_2F5F4
ADD             R0, SP, #0x1044+var_FF4
BL              sub_29D74
MOV             R0, R11
ADD             SP, SP, #0x1040
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2F60C
MOV             R6, #0x80
MOV             R10, #3
MOV             R11, #4
STR             R6, [SP,#0x1044+var_1038]
MOV             R4, #8
MOV             R6, #0x10
STRD            R10, R11, [SP,#0x1044+var_1030]
B               loc_2F49C

loc_2F62C
ADD             R0, SP, #0x1044+var_FF4
BL              sub_29D74

loc_2F634
LDR             R1, [SP,#0x1044+var_1028]
ADD             R10, SP, #0x1044+var_1004
MVN             R3, R4
ADD             R4, R4, #1
ADD             R2, R3, R6
ADD             R8, R10, R1
AND             R9, R2, #7
MOV             R0, R8
ADD             R5, R8, #0x10
BL              sub_29D74
CMP             R6, R4
BLE             loc_2F4AC
CMP             R9, #0
BEQ             loc_2F704
CMP             R9, #1
BEQ             loc_2F6EC
CMP             R9, #2
BEQ             loc_2F6DC
CMP             R9, #3
BEQ             loc_2F6CC
CMP             R9, #4
BEQ             loc_2F6BC
CMP             R9, #5
BEQ             loc_2F6AC
CMP             R9, #6
BNE             loc_2F7EC

loc_2F69C
MOV             R0, R5
ADD             R4, R4, #1
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F6AC
MOV             R0, R5
ADD             R4, R4, #1
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F6BC
MOV             R0, R5
ADD             R4, R4, #1
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F6CC
MOV             R0, R5
ADD             R4, R4, #1
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F6DC
MOV             R0, R5
ADD             R4, R4, #1
ADD             R5, R5, #0x10
BL              sub_29D74

loc_2F6EC
MOV             R0, R5
ADD             R4, R4, #1
BL              sub_29D74
CMP             R6, R4
ADD             R5, R5, #0x10
BLE             loc_2F4AC

loc_2F704
MOV             R0, R5
ADD             R7, R5, #0x10
BL              sub_29D74
MOV             R0, R7
ADD             R4, R4, #8
BL              sub_29D74
ADD             R0, R5, #0x20 ; ' '
BL              sub_29D74
ADD             R0, R5, #0x30 ; '0'
BL              sub_29D74
ADD             R0, R5, #0x40 ; '@'
BL              sub_29D74
ADD             R0, R5, #0x50 ; 'P'
BL              sub_29D74
ADD             R0, R5, #0x60 ; '`'
BL              sub_29D74
ADD             R0, R5, #0x70 ; 'p'
ADD             R5, R5, #0x80
BL              sub_29D74
CMP             R6, R4
BGT             loc_2F704
B               loc_2F4AC

loc_2F75C
ADD             R1, SP, #0x1044+var_1014
LDR             R0, [SP,#0x1044+var_1040]
BL              sub_33C9C
SUBS            R11, R0, #0
BNE             loc_2F464
MOV             R10, #sub_33BD0
B               loc_2F44C

loc_2F77C
MOV             R5, #0x100
MOV             R8, #4
MOV             R9, #5
MOV             R4, #0x10
STR             R5, [SP,#0x1044+var_1038]
MOV             R6, #0x20 ; ' '
STRD            R8, R9, [SP,#0x1044+var_1030]
B               loc_2F49C

loc_2F79C
MOVW            R2, #0xDC9
CMP             R0, R2
MOVGT           R2, #0x800
MOVLE           R2, #0x400
STR             R2, [SP,#0x1044+var_1038]
MOVGT           R2, #7
MOVLE           R2, #6
MOVGT           R4, #0x80
STR             R2, [SP,#0x1044+var_1030]
MOVGT           R2, #8
MOVLE           R2, #7
MOVLE           R4, #0x40 ; '@'
MOVGT           R6, #0x100
MOVLE           R6, #0x80
STR             R2, [SP,#0x1044+var_102C]
B               loc_2F49C

loc_2F7DC
MOV             R0, R5
ADD             R5, R5, #0x10
BL              sub_29D74
B               loc_2F554

loc_2F7EC
MOV             R0, R5
ADD             R4, R4, #1
ADD             R5, R5, #0x10
BL              sub_29D74
B               loc_2F69C

loc_2F800
LDR             R12, [SP,#0x1044+var_1038]
ADD             R5, SP, #0x1044+var_1004
ADD             R0, SP, #0x1044+var_FF4
ADD             R9, R5, R12
MOV             R1, R9
BL              sub_2A25C
SUBS            R11, R0, #0
BNE             loc_2F464
LDR             R8, [SP,#0x1044+var_1030]
LDR             R5, [SP,#0x1044+var_1040]

loc_2F828
MOV             R1, R9
MOV             R0, R9
BL              sub_2E6C0
SUBS            R12, R0, #0
ADD             R11, R11, #1
ADD             R2, SP, #0x1044+var_1014
MOV             R1, R5
MOV             R0, R9
BNE             loc_2FB10
BLX             R10
CMP             R0, #0
BNE             loc_2FB18
CMP             R8, R11
BGT             loc_2F828
ADD             R5, R4, #1
CMP             R6, R5
BLE             loc_2FA34
SUB             LR, R6, R5
LDR             R11, [SP,#0x1044+var_1028]
ANDS            R1, LR, #3
ADD             R3, SP, #0x1044+var_1004
ADD             R8, R3, R11
BEQ             loc_2F944
CMP             R1, #1
BEQ             loc_2F904
CMP             R1, #2
BEQ             loc_2F8CC
MOV             R0, R8
ADD             R8, R8, #0x10
MOV             R2, R8
ADD             R1, SP, #0x1044+var_FF4
BL              sub_2CB6C
SUBS            R11, R0, #0
BNE             loc_2F464
ADD             R2, SP, #0x1044+var_1014
LDR             R1, [SP,#0x1044+var_1040]
MOV             R0, R8
BLX             R10
SUBS            R11, R0, #0
BNE             loc_2F464
ADD             R5, R5, #1

loc_2F8CC
MOV             R0, R8
ADD             R8, R8, #0x10
MOV             R2, R8
ADD             R1, SP, #0x1044+var_FF4
BL              sub_2CB6C
SUBS            R11, R0, #0
BNE             loc_2F464
ADD             R2, SP, #0x1044+var_1014
LDR             R1, [SP,#0x1044+var_1040]
MOV             R0, R8
BLX             R10
SUBS            R11, R0, #0
BNE             loc_2F464
ADD             R5, R5, #1

loc_2F904
MOV             R0, R8
ADD             R8, R8, #0x10
MOV             R2, R8
ADD             R1, SP, #0x1044+var_FF4
BL              sub_2CB6C
SUBS            R11, R0, #0
BNE             loc_2F464
ADD             R2, SP, #0x1044+var_1014
LDR             R1, [SP,#0x1044+var_1040]
MOV             R0, R8
BLX             R10
SUBS            R11, R0, #0
BNE             loc_2F464
ADD             R5, R5, #1
CMP             R6, R5
BLE             loc_2FA34

loc_2F944
MOV             R11, R7
STR             R4, [SP,#0x1044+var_103C]

loc_2F94C
ADD             R7, R8, #0x10
ADD             R1, SP, #0x1044+var_FF4
MOV             R2, R7
MOV             R0, R8
BL              sub_2CB6C
SUBS            R12, R0, #0
ADD             R9, R8, #0x30 ; '0'
ADD             R4, R8, #0x20 ; ' '
ADD             R5, R5, #4
ADD             R8, R8, #0x40 ; '@'
ADD             R2, SP, #0x1044+var_1014
LDR             R1, [SP,#0x1044+var_1040]
MOV             R0, R7
BNE             loc_2FB0C
BLX             R10
SUBS            R12, R0, #0
MOV             R2, R4
ADD             R1, SP, #0x1044+var_FF4
MOV             R0, R7
BNE             loc_2FB0C
BL              sub_2CB6C
SUBS            R12, R0, #0
ADD             R2, SP, #0x1044+var_1014
LDR             R1, [SP,#0x1044+var_1040]
MOV             R0, R4
BNE             loc_2FB0C
BLX             R10
SUBS            R12, R0, #0
MOV             R2, R9
ADD             R1, SP, #0x1044+var_FF4
MOV             R0, R4
BNE             loc_2FB0C
BL              sub_2CB6C
LDR             R7, [SP,#0x1044+var_1040]
SUBS            R12, R0, #0
ADD             R2, SP, #0x1044+var_1014
MOV             R0, R9
MOV             R1, R7
BNE             loc_2FB0C
BLX             R10
SUBS            R12, R0, #0
MOV             R2, R8
ADD             R1, SP, #0x1044+var_FF4
MOV             R0, R9
BNE             loc_2FB0C
BL              sub_2CB6C
SUBS            R12, R0, #0
ADD             R2, SP, #0x1044+var_1014
MOV             R1, R7
MOV             R0, R8
BNE             loc_2FB0C
BLX             R10
SUBS            R12, R0, #0
BNE             loc_2FB0C
CMP             R6, R5
BGT             loc_2F94C
LDR             R4, [SP,#0x1044+var_103C]
MOV             R7, R11

loc_2FA34
ADD             R0, SP, #0x1044+var_1024
BL              sub_2BAD0
SUBS            R11, R0, #0
BNE             loc_2F464
MOV             R1, #1
ADD             R0, SP, #0x1044+var_1024
BL              sub_2E630
LDR             R2, [R7]
MOV             R9, #0
MOV             R3, R6
MOV             R1, R11
MOV             R5, R11
SUB             R0, R2, #1
STR             R11, [SP,#0x1044+var_103C]
MOV             R6, R11
STR             R0, [SP,#0x1044+var_1038]
MOV             R8, R4
MOV             R11, R3
BNE             loc_2FAA8

loc_2FA84
LDR             LR, [SP,#0x1044+var_1038]
CMN             LR, #1
BEQ             loc_2FBF0
LDR             R4, [R7,#0xC]
MOV             R9, #0x1C
SUB             R2, LR, #1
STR             R2, [SP,#0x1044+var_1038]
LDR             R12, [R4,LR,LSL#2]
STR             R12, [SP,#0x1044+var_103C]

loc_2FAA8
LDR             R3, [SP,#0x1044+var_103C]
MOV             LR, R3,LSR#27
AND             R4, LR, #1
ORRS            R0, R1, R4
BEQ             loc_2FB20
MVN             R12, LR
CMP             R1, #1
MOVNE           R12, #0
ANDEQ           R12, R12, #1
CMP             R12, #0
BNE             loc_2FB28
LDR             R3, [SP,#0x1044+var_102C]
ADD             R5, R5, #1
SUB             R1, R3, R5
CMP             R5, R3
ORR             R4, R6, R4,LSL R1
LDRNE           R3, [SP,#0x1044+var_103C]
MOVNE           R1, #2
MOVNE           R6, R4
BEQ             loc_2FB6C

loc_2FAF8
MOV             R2, R3,LSL#1
SUBS            R9, R9, #1
STR             R2, [SP,#0x1044+var_103C]
BNE             loc_2FAA8
B               loc_2FA84

loc_2FB0C
LDR             R4, [SP,#0x1044+var_103C]

loc_2FB10
MOV             R11, R12
B               loc_2F464

loc_2FB18
MOV             R11, R0
B               loc_2F464

loc_2FB20
MOV             R1, R0
B               loc_2FAF8

loc_2FB28
ADD             R1, SP, #0x1044+var_1024
MOV             R0, R1
BL              sub_2E6C0
CMP             R0, #0
BNE             loc_2FB54
ADD             R2, SP, #0x1044+var_1014
LDR             R1, [SP,#0x1044+var_1040]
ADD             R0, SP, #0x1044+var_1024
BLX             R10
CMP             R0, #0
BEQ             loc_2FBE4

loc_2FB54
MOV             R6, R11
MOV             R4, R8
MOV             R11, R0

loc_2FB60
ADD             R0, SP, #0x1044+var_1024
BL              sub_29D74
B               loc_2F464

loc_2FB6C
MOV             R5, R12

loc_2FB70
ADD             R1, SP, #0x1044+var_1024
ADD             R5, R5, #1
MOV             R0, R1
BL              sub_2E6C0
SUBS            R6, R0, #0
ADD             R2, SP, #0x1044+var_1014
LDR             R1, [SP,#0x1044+var_1040]
ADD             R0, SP, #0x1044+var_1024
BNE             loc_2FC80
BLX             R10
SUBS            R6, R0, #0
BNE             loc_2FC80
LDR             R6, [SP,#0x1044+var_102C]
CMP             R5, R6
BLT             loc_2FB70
ADD             R2, SP, #0x1044+var_1024
ADD             R1, SP, #0x1044+var_1004
ADD             R1, R1, R4,LSL#4
MOV             R0, R2
BL              sub_2CB6C
SUBS            R6, R0, #0
BNE             loc_2FC80
ADD             R2, SP, #0x1044+var_1014
LDR             R1, [SP,#0x1044+var_1040]
ADD             R0, SP, #0x1044+var_1024
BLX             R10
SUBS            R6, R0, #0
BNE             loc_2FC80
MOV             R5, R6

loc_2FBE4
MOV             R1, #1
LDR             R3, [SP,#0x1044+var_103C]
B               loc_2FAF8

loc_2FBF0
SUB             R0, R1, #2
MOV             R4, R8
CLZ             R12, R0
MOV             R8, R5
CMP             R8, #0
MOV             R5, R12,LSR#5
MOVLE           R5, #0
CMP             R5, #0
MOV             LR, R6
MOV             R6, R11
BEQ             loc_2FC6C
MOV             R5, R9
LDR             R9, [SP,#0x1044+var_1040]
MOV             R7, LR

loc_2FC28
ADD             R1, SP, #0x1044+var_1024
MOV             R7, R7,LSL#1
MOV             R0, R1
BL              sub_2E6C0
SUBS            R11, R0, #0
ADD             R5, R5, #1
ADD             R2, SP, #0x1044+var_1014
MOV             R1, R9
ADD             R0, SP, #0x1044+var_1024
BNE             loc_2FB60
BLX             R10
SUBS            R11, R0, #0
BNE             loc_2FB60
TST             R6, R7
BNE             loc_2FC94

loc_2FC64
CMP             R8, R5
BGT             loc_2FC28

loc_2FC6C
LDR             R1, [SP,#0x1044+var_1034]
ADD             R0, SP, #0x1044+var_1024
BL              sub_2AAD4
MOV             R11, #0
B               loc_2FB60

loc_2FC80
MOV             R10, R11
MOV             R4, R8
MOV             R11, R6
MOV             R6, R10
B               loc_2FB60

loc_2FC94
ADD             R2, SP, #0x1044+var_1024
ADD             R1, SP, #0x1044+var_FF4
MOV             R0, R2
BL              sub_2CB6C
SUBS            R11, R0, #0
ADD             R2, SP, #0x1044+var_1014
MOV             R1, R9
ADD             R0, SP, #0x1044+var_1024
BNE             loc_2FB60
BLX             R10
SUBS            R11, R0, #0
BEQ             loc_2FC64
B               loc_2FB60
; End of function sub_2F1F4




; int __fastcall sub_2FCC8(int *, int *, int *, int)
sub_2FCC8

var_64= -0x64
var_58= -0x58
var_54= -0x54
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_8= -8

CMP             R3, #0x200
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x64
MOV             R4, R0
STR             R3, [SP,#0x64+var_34]
STR             R1, [SP,#0x64+var_2C]
STR             R2, [SP,#0x64+var_1C]
BGE             loc_2FD00
LDR             R5, [R1]
LDR             LR, [R0]
CMP             R5, LR
MOVGE           R5, LR
CMP             R5, #0xFF
BLE             loc_301F8

loc_2FD00
LDR             R6, [SP,#0x64+var_34]
ADD             R0, SP, #0x64+var_14
MOV             R1, R6
BL              sub_2BB58
SUBS            R2, R0, #0
STR             R2, [SP,#0x64+var_20]
BNE             loc_301C4
LDR             R3, [R4]
STR             R6, [SP,#0x64+var_14]
CMP             R3, #0
STR             R3, [SP,#0x64+var_28]
BLE             loc_301A8
LDR             R1, [SP,#0x64+var_2C]
MOV             R5, R2
LDR             R0, [R4,#0xC]
LDR             R8, [SP,#0x64+var_8]
LDR             R7, [R1,#0xC]
SUB             R9, R0, #4
STR             R2, [SP,#0x64+var_44]
STR             R8, [SP,#0x64+var_40]
ADD             R10, R7, #0x20 ; ' '
STR             R7, [SP,#0x64+var_18]
STR             R9, [SP,#0x64+var_30]
STR             R10, [SP,#0x64+var_24]

loc_2FD60
LDR             R11, [SP,#0x64+var_2C]
LDR             LR, [SP,#0x64+var_44]
LDR             R12, [SP,#0x64+var_34]
LDR             R4, [R11]
LDR             R2, [SP,#0x64+var_30]
SUB             R6, R12, LR
LDR             R0, [SP,#0x64+var_40]
CMP             R6, R4
LDR             LR, [R2,#4]!
MOVGE           R6, R4
CMP             R6, #0
MOV             R1, R0
STR             R6, [SP,#0x64+var_3C]
STR             LR, [SP,#0x64+var_38]
STR             R2, [SP,#0x64+var_30]
BLE             loc_301D0
SUB             R7, R6, #7
CMP             R7, #1
STR             R7, [SP,#0x64+var_48]
BLE             loc_301DC
LDR             R2, [SP,#0x64+var_24]
ADD             R11, R0, #0x20 ; ' '
MOV             R6, #0
STR             R6, [SP,#0x64+var_58]

loc_2FDC0
LDR             R9, [R11,#-0x20]
ADD             R1, R11, #0x20 ; ' '
LDR             R4, [R2,#-0x20]
MOV             R10, #0
PLD             [R1]
ADD             R12, R2, #0x20 ; ' '
ADDS            R0, R6, R9
STR             R1, [SP,#0x64+var_4C]
ADC             R1, R10, #0
PLD             [R12]
UMLAL           R0, R1, LR, R4
LDR             R6, [R11,#-0x1C]
MOV             R7, #0
LDR             R9, [R11,#-0x18]
BIC             R8, R0, #0xF0000000
MOV             R0, R0,LSR#28
STR             R8, [R11,#-0x20]
LDR             R10, [R2,#-0x1C]
ORR             R8, R0, R1,LSL#4
MOV             R0, R9
MOV             R1, #0
UMLAL           R6, R7, R10, LR
STRD            R6, R7, [SP,#0x64+var_64]
MOV             R7, #0
LDR             R6, [R11,#-0x14]
STRD            R6, R7, [SP,#0x64+var_54]
LDR             R7, [SP,#0x64+var_64]
ADDS            R9, R7, R8
LDR             R8, [SP,#0x64+var_64+4]
BIC             R6, R9, #0xF0000000
MOV             R10, R9,LSR#28
STR             R6, [R11,#-0x1C]
LDR             R9, [R2,#-0x18]
ADC             R3, R8, R5
LDR             R7, [R11,#-0x10]
ORR             R10, R10, R3,LSL#4
UMLAL           R0, R1, R9, LR
MOV             R8, R0
MOV             R9, R1
MOV             R0, R7
MOV             R1, #0
STRD            R0, R1, [SP,#0x64+var_64]
ADDS            R1, R8, R10
BIC             R0, R1, #0xF0000000
ADC             R4, R9, R5
STR             R0, [R11,#-0x18]
MOV             R3, R1,LSR#28
LDR             R10, [R2,#-0x14]
MOV             R1, #0
LDRD            R8, R9, [SP,#0x64+var_54]
ORR             R3, R3, R4,LSL#4
LDR             R0, [R11,#-0xC]
UMLAL           R8, R9, R10, LR
STRD            R0, R1, [SP,#0x64+var_54]
LDR             R0, [R11,#-8]
ADDS            R8, R8, R3
MOV             R4, R8,LSR#28
BIC             R1, R8, #0xF0000000
ADC             R9, R9, R5
STR             R1, [R11,#-0x14]
ORR             R3, R4, R9,LSL#4
LDR             R10, [R2,#-0x10]
LDRD            R8, R9, [SP,#0x64+var_64]
MOV             R1, #0
STRD            R0, R1, [SP,#0x64+var_64]
UMLAL           R8, R9, R10, LR
ADDS            R6, R8, R3
BIC             R8, R6, #0xF0000000
ADC             R7, R9, R5
STR             R8, [R11,#-0x10]
MOV             R10, R6,LSR#28
LDR             R1, [R2,#-0xC]
LDRD            R8, R9, [SP,#0x64+var_54]
ORR             R3, R10, R7,LSL#4
LDR             R6, [R11,#-4]
UMLAL           R8, R9, R1, LR
MOV             R0, R8
MOV             R7, R9
MOV             R8, R6
MOV             R9, #0
STRD            R8, R9, [SP,#0x64+var_54]
ADDS            R1, R0, R3
LDR             R10, [SP,#0x64+var_58]
BIC             R6, R1, #0xF0000000
STR             R6, [R11,#-0xC]
ADC             R4, R7, R5
LDR             R0, [R2,#-8]
MOV             R3, R1,LSR#28
ADD             R6, R10, #8
STR             R6, [SP,#0x64+var_58]
ORR             R8, R3, R4,LSL#4
LDRD            R6, R7, [SP,#0x64+var_64]
ADD             R3, R10, #9
MOV             R10, R2
UMLAL           R6, R7, R0, LR
ADDS            R4, R6, R8
MOV             R6, R4,LSR#28
BIC             R2, R4, #0xF0000000
ADC             R9, R7, R5
STR             R2, [R11,#-8]
ORR             R1, R6, R9,LSL#4
LDR             R8, [R10,#-4]
LDRD            R6, R7, [SP,#0x64+var_54]
MOV             R2, R12
LDR             R4, [SP,#0x64+var_48]
MOV             R12, R11
UMLAL           R6, R7, R8, LR
ADDS            R11, R6, R1
ADC             R7, R7, R5
MOV             R0, R11,LSR#28
CMP             R4, R3
BIC             R3, R11, #0xF0000000
ORR             R6, R0, R7,LSL#4
STR             R3, [R12,#-4]
LDR             R11, [SP,#0x64+var_4C]
BGT             loc_2FDC0
LDR             R7, [SP,#0x64+var_58]
MOV             LR, R6

loc_2FF98
LDR             R0, [R12]
MOV             R9, #0
LDR             R4, [R10],#4
ADD             R1, R7, #1
LDR             R2, [SP,#0x64+var_38]
MVN             R8, R7
ADDS            R6, LR, R0
LDR             R3, [SP,#0x64+var_3C]
ADC             R7, R9, #0
UMLAL           R6, R7, R2, R4
CMP             R3, R1
ADD             R11, R8, R3
AND             LR, R11, #3
MOV             R4, R6,LSR#28
BIC             R0, R6, #0xF0000000
STR             R0, [R12]
ORR             R2, R4, R7,LSL#4
BLE             loc_30164
CMP             LR, #0
BEQ             loc_300A4
CMP             LR, #1
BEQ             loc_30060
CMP             LR, #2
BEQ             loc_30028
LDR             R9, [R12,#4]!
MOV             R7, #0
LDR             R6, [R10],#4
ADD             R1, R1, #1
LDR             R8, [SP,#0x64+var_38]
ADDS            R2, R2, R9
ADC             R3, R7, #0
UMLAL           R2, R3, R8, R6
MOV             LR, R2,LSR#28
BIC             R4, R2, #0xF0000000
STR             R4, [R12]
ORR             R2, LR, R3,LSL#4

loc_30028
LDR             R0, [R12,#4]!
MOV             R9, #0
LDR             R7, [R10],#4
ADD             R1, R1, #1
LDR             R6, [SP,#0x64+var_38]
ADDS            R2, R2, R0
ADC             R3, R9, #0
UMLAL           R2, R3, R6, R7
MOV             R11, R3
MOV             R3, R2,LSR#28
MOV             R8, R2
ORR             R2, R3, R11,LSL#4
BIC             LR, R8, #0xF0000000
STR             LR, [R12]

loc_30060
LDR             R4, [R12,#4]!
MOV             R0, #0
LDR             R9, [R10],#4
ADD             R1, R1, #1
LDR             R6, [SP,#0x64+var_38]
ADDS            R2, R2, R4
LDR             R7, [SP,#0x64+var_3C]
ADC             R3, R0, #0
UMLAL           R2, R3, R6, R9
CMP             R7, R1
MOV             R8, R2
MOV             R11, R3
MOV             R3, R2,LSR#28
BIC             LR, R8, #0xF0000000
STR             LR, [R12]
ORR             R2, R3, R11,LSL#4
BLE             loc_30164

loc_300A4
LDR             R7, [SP,#0x64+var_3C]
MOV             R4, R1
LDR             R6, [SP,#0x64+var_38]

loc_300B0
MOV             R11, R10
LDR             R9, [R12,#4]
LDR             R8, [R11],#4
MOV             R1, #0
ADD             R10, R10, #0x10
ADD             R4, R4, #4
ADDS            R0, R2, R9
LDR             R2, [R12,#8]
ADC             R1, R1, #0
UMLAL           R0, R1, R6, R8
BIC             R9, R0, #0xF0000000
MOV             LR, R0,LSR#28
STR             R9, [R12,#4]
MOV             R0, #0
LDR             R11, [R11]
ORR             R8, LR, R1,LSL#4
ADDS            R2, R8, R2
ADC             R3, R0, #0
MOV             R0, #0
UMLAL           R2, R3, R6, R11
LDR             R11, [R12,#0xC]
MOV             R9, R2,LSR#28
BIC             R8, R2, #0xF0000000
STR             R8, [R12,#8]
ORR             R8, R9, R3,LSL#4
LDR             R1, [R10,#-8]
ADDS            R2, R8, R11
ADC             R3, R0, #0
UMLAL           R2, R3, R6, R1
MOV             R1, #0
MOV             R9, R2,LSR#28
BIC             R8, R2, #0xF0000000
STR             R8, [R12,#0xC]
LDR             R11, [R12,#0x10]!
ORR             R0, R9, R3,LSL#4
LDR             R2, [R10,#-4]
ADDS            R8, R0, R11
ADC             R9, R1, #0
CMP             R7, R4
UMLAL           R8, R9, R6, R2
MOV             R0, R8,LSR#28
BIC             R3, R8, #0xF0000000
STR             R3, [R12]
ORR             R2, R0, R9,LSL#4
BGT             loc_300B0

loc_30164
LDR             R10, [SP,#0x64+var_3C]
LDR             R12, [SP,#0x64+var_40]
LDR             R7, [SP,#0x64+var_44]
ADD             R1, R12, R10,LSL#2
ADD             R3, R10, R7

loc_30178
LDR             R6, [SP,#0x64+var_34]
LDR             R4, [SP,#0x64+var_44]
LDR             R8, [SP,#0x64+var_40]
CMP             R6, R3
STRGT           R2, [R1]
ADD             R9, R4, #1
LDR             R2, [SP,#0x64+var_28]
ADD             R11, R8, #4
STR             R9, [SP,#0x64+var_44]
STR             R11, [SP,#0x64+var_40]
CMP             R2, R9
BNE             loc_2FD60

loc_301A8
ADD             R0, SP, #0x64+var_14
BL              sub_29BBC
ADD             R0, SP, #0x64+var_14
LDR             R1, [SP,#0x64+var_1C]
BL              sub_2AAD4
ADD             R0, SP, #0x64+var_14
BL              sub_29D74

loc_301C4
LDR             R0, [SP,#0x64+var_20]
ADD             SP, SP, #0x64 ; 'd'
POP             {R4-R11,PC}

loc_301D0
LDR             R3, [SP,#0x64+var_44]
MOV             R2, #0
B               loc_30178

loc_301DC
MOV             R2, #0
MOV             R12, R0
STR             R2, [SP,#0x64+var_58]
MOV             LR, R2
LDR             R10, [SP,#0x64+var_18]
MOV             R7, R2
B               loc_2FF98

loc_301F8
BL              sub_31AE4
STR             R0, [SP,#0x64+var_20]
LDR             R0, [SP,#0x64+var_20]
ADD             SP, SP, #0x64 ; 'd'
POP             {R4-R11,PC}
; End of function sub_2FCC8




; int __fastcall sub_3020C(int *, int *)
sub_3020C

var_50= -0x50
var_4C= -0x4C
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x54
LDR             R6, [R0]
MOV             R5, R0
ADD             R0, SP, #0x54+var_14
STR             R1, [SP,#0x54+var_18]
STR             R6, [SP,#0x54+var_40]
MOV             R4, R6,LSL#1
ADD             R7, R4, #1
MOV             R1, R7
BL              sub_2BB58
SUBS            R11, R0, #0
STR             R11, [SP,#0x54+var_1C]
BNE             loc_307D0
CMP             R6, #0
STR             R7, [SP,#0x54+var_14]
BLE             loc_307B4
LDR             R1, [R5,#0xC]
SUB             R0, R6, #7
LDR             R3, [SP,#0x54+var_8]
STR             R0, [SP,#0x54+var_20]
SUB             R0, R1, #4
STR             R1, [SP,#0x54+var_24]
MOV             R1, R0
ADD             R2, R3, #0x10
ADD             R8, R3, R6,LSL#2
STR             R11, [SP,#0x54+var_3C]
STR             R11, [SP,#0x54+var_50]
STR             R2, [SP,#0x54+var_38]
STR             R8, [SP,#0x54+var_34]

loc_30284
LDR             LR, [SP,#0x54+var_38]
MOV             R5, #0
LDR             R10, [R1,#4]
ADD             R7, R1, #4
LDR             R9, [SP,#0x54+var_3C]
LDR             R4, [LR,#-0x10]
SUB             R8, LR, #0xC
LDR             R12, [SP,#0x54+var_40]
ADD             R9, R9, #1
PLD             [LR]
STR             R9, [SP,#0x54+var_3C]
UMLAL           R4, R5, R10, R10
CMP             R12, R9
STR             R7, [SP,#0x54+var_30]
MOV             R11, R4,LSR#28
BIC             R4, R4, #0xF0000000
STR             R4, [LR,#-0x10]
ORR             R2, R11, R5,LSL#4
LDR             R5, [R1,#4]
BLE             loc_30758
LDR             R10, [SP,#0x54+var_20]
ADD             R6, R9, #1
MOV             R3, #0
STR             R5, [SP,#0x54+var_2C]
STR             R3, [SP,#0x54+var_28]
CMP             R10, R6
BLE             loc_307DC
ADDS            R7, R5, R5
ADD             R0, R1, #0x40 ; '@'
ADC             R12, R3, R3
ADD             R1, LR, #0x14
STR             R10, [SP,#0x54+var_44]

loc_30304
LDR             R8, [R0,#-0x38]
MOV             R5, #0
PLD             [R0]
ADD             R0, R0, #0x20 ; ' '
PLD             [R1,#0x18]
LDR             LR, [SP,#0x54+var_50]
UMULL           R10, R11, R8, R7
MOV             R6, LR
STRD            R10, R11, [SP,#0x54+var_4C]
LDR             R11, [R1,#-0x20]
ADDS            R3, R2, R11
LDR             R2, [SP,#0x54+var_4C+4]
LDR             R11, [SP,#0x54+var_4C]
ADC             R5, R5, #0
MLA             R4, R8, R12, R2
LDR             R8, [R1,#-0x1C]
ADDS            R3, R3, R11
BIC             R2, R3, #0xF0000000
STR             R4, [SP,#0x54+var_4C+4]
MOV             R4, R3,LSR#28
LDR             R10, [SP,#0x54+var_4C+4]
STR             R2, [R1,#-0x20]
ADC             R11, R5, R10
LDR             R5, [R0,#-0x54]
ORR             R4, R4, R11,LSL#4
UMULL           R2, R3, R5, R7
MLA             R3, R5, R12, R3
ADDS            R8, R2, R8
ADC             R10, R3, #0
ADDS            R11, R8, R4
BIC             R5, R11, #0xF0000000
MOV             R4, R11,LSR#28
STR             R5, [R1,#-0x1C]
ADC             LR, R10, LR
LDR             R8, [R0,#-0x50]
ORR             LR, R4, LR,LSL#4
LDR             R10, [R1,#-0x18]
MOV             R4, R6
UMULL           R2, R3, R8, R7
MLA             R11, R8, R12, R3
LDR             R8, [R1,#-0xC]
ADDS            R3, R2, R10
ADC             R5, R11, #0
ADDS            LR, R3, LR
BIC             R11, LR, #0xF0000000
ADC             R6, R5, R6
STR             R11, [R1,#-0x18]
MOV             R10, LR,LSR#28
LDR             R5, [R0,#-0x4C]
MOV             LR, R4
ORR             R6, R10, R6,LSL#4
LDR             R10, [R1,#-0x14]
UMULL           R2, R3, R5, R7
MLA             R11, R5, R12, R3
ADDS            R3, R2, R10
ADC             R5, R11, #0
ADDS            R6, R3, R6
BIC             R11, R6, #0xF0000000
ADC             R4, R5, R4
STR             R11, [R1,#-0x14]
MOV             R10, R6,LSR#28
LDR             R5, [R0,#-0x48]
ORR             R6, R10, R4,LSL#4
LDR             R10, [R1,#-0x10]
MOV             R4, LR
UMULL           R2, R3, R5, R7
MLA             R11, R5, R12, R3
ADDS            R3, R2, R10
ADC             R5, R11, #0
ADDS            R6, R3, R6
BIC             R11, R6, #0xF0000000
ADC             LR, R5, LR
STR             R11, [R1,#-0x10]
MOV             R10, R6,LSR#28
LDR             R5, [R0,#-0x44]
ORR             R6, R10, LR,LSL#4
MOV             LR, R4
UMULL           R2, R3, R5, R7
MLA             R11, R5, R12, R3
ADDS            R3, R2, R8
MOV             R2, LR
ADC             R8, R11, #0
ADDS            R10, R3, R6
BIC             R5, R10, #0xF0000000
ADC             R4, R8, R4
STR             R5, [R1,#-0xC]
MOV             R6, R10,LSR#28
LDR             R8, [R0,#-0x40]
ADD             R3, R9, #9
ORR             R6, R6, R4,LSL#4
LDR             R10, [R1,#-8]
ADD             R9, R9, #8
UMULL           R4, R5, R8, R7
MLA             R5, R8, R12, R5
ADDS            R4, R4, R10
ADC             R5, R5, #0
ADDS            R6, R4, R6
BIC             R8, R6, #0xF0000000
ADC             LR, R5, LR
STR             R8, [R1,#-8]
MOV             R10, R6,LSR#28
LDR             R11, [R0,#-0x3C]
MOV             R8, R1
LDR             R6, [R1,#-4]
ORR             LR, R10, LR,LSL#4
ADD             R1, R1, #0x20 ; ' '
UMULL           R4, R5, R11, R7
MLA             R11, R11, R12, R5
MOV             R10, R4
ADDS            R4, R10, R6
LDR             R10, [SP,#0x54+var_44]
ADC             R5, R11, #0
ADDS            LR, R4, LR
ADC             R6, R5, R2
MOV             R2, LR,LSR#28
CMP             R10, R3
BIC             R3, LR, #0xF0000000
ORR             R2, R2, R6,LSL#4
STR             R3, [R1,#-0x24]
BGT             loc_30304
LDR             R6, [SP,#0x54+var_2C]

loc_304E8
LDR             R11, [SP,#0x54+var_24]
ADDS            R6, R6, R6
LDR             R12, [R8]
MOV             R1, R8
LDR             R7, [SP,#0x54+var_28]
MOV             R8, #0
LDR             R0, [R11,R9,LSL#2]
MVN             R3, R9
LDR             LR, [SP,#0x54+var_40]
ADC             R10, R7, R7
ADDS            R2, R2, R12
ADD             R7, R9, #1
ADD             R9, R11, R9,LSL#2
UMULL           R4, R5, R6, R0
ADD             R11, R3, LR
AND             R12, R11, #3
STRD            R4, R5, [SP,#0x54+var_4C]
ADC             R5, R8, #0
LDR             R8, [SP,#0x54+var_4C+4]
MOV             R4, R2
LDR             R2, [SP,#0x54+var_4C]
MLA             R0, R0, R10, R8
ADDS            R11, R4, R2
MOV             R4, R11,LSR#28
STR             R0, [SP,#0x54+var_4C+4]
LDR             R3, [SP,#0x54+var_4C+4]
ADC             R8, R5, R3
CMP             LR, R7
BIC             LR, R11, #0xF0000000
ORR             R2, R4, R8,LSL#4
STR             LR, [R1],#4
ADD             LR, R9, #4
BLE             loc_30754
CMP             R12, #0
BEQ             loc_3063C
CMP             R12, #1
BEQ             loc_305F8
CMP             R12, #2
BEQ             loc_305C0
LDR             R0, [R9,#4]
MOV             R9, #0
LDR             R12, [R1]
ADD             LR, LR, #4
ADD             R7, R7, #1
UMULL           R4, R5, R6, R0
ADDS            R2, R2, R12
ADC             R11, R9, #0
MLA             R5, R0, R10, R5
ADDS            R3, R2, R4
MOV             R8, R3,LSR#28
BIC             R0, R3, #0xF0000000
ADC             R4, R11, R5
STR             R0, [R1],#4
ORR             R2, R8, R4,LSL#4

loc_305C0
LDR             R11, [LR],#4
MOV             R9, #0
LDR             R12, [R1]
ADD             R7, R7, #1
UMULL           R4, R5, R6, R11
ADDS            R2, R2, R12
ADC             R8, R9, #0
MLA             R5, R11, R10, R5
ADDS            R3, R2, R4
MOV             R4, R3,LSR#28
BIC             R11, R3, #0xF0000000
ADC             R0, R8, R5
STR             R11, [R1],#4
ORR             R2, R4, R0,LSL#4

loc_305F8
LDR             R0, [LR],#4
MOV             R9, #0
LDR             R12, [R1]
ADD             R7, R7, #1
UMULL           R4, R5, R6, R0
ADDS            R2, R2, R12
ADC             R8, R9, #0
MLA             R5, R0, R10, R5
LDR             R0, [SP,#0x54+var_40]
ADDS            R4, R2, R4
MOV             R11, R4,LSR#28
BIC             R9, R4, #0xF0000000
ADC             R3, R8, R5
STR             R9, [R1],#4
CMP             R0, R7
ORR             R2, R11, R3,LSL#4
BLE             loc_30754

loc_3063C
MOV             R9, R7
STR             R10, [SP,#0x54+var_4C]

loc_30644
MOV             R8, LR
LDR             R10, [R1]
LDR             R7, [R8],#4
MOV             R12, #0
LDR             R3, [SP,#0x54+var_4C]
MOV             R0, R1
ADDS            R2, R2, R10
ADD             R9, R9, #4
ADC             R11, R12, #0
ADD             R1, R1, #0x10
UMULL           R4, R5, R6, R7
ADD             LR, LR, #0x10
ADDS            R4, R2, R4
MLA             R5, R7, R3, R5
BIC             R7, R4, #0xF0000000
MOV             R2, R4,LSR#28
STR             R7, [R0],#4
LDR             R12, [LR,#-0xC]
ADC             R3, R11, R5
ORR             R10, R2, R3,LSL#4
LDR             R3, [SP,#0x54+var_4C]
LDR             R11, [R1,#-0xC]
MOV             R2, #0
STR             R12, [SP,#0x54+var_44]
UMULL           R4, R5, R6, R12
LDR             R12, [SP,#0x54+var_44]
ADDS            R10, R10, R11
LDR             R7, [R0,#4]
ADC             R11, R2, #0
MLA             R5, R12, R3, R5
ADDS            R4, R10, R4
BIC             R12, R4, #0xF0000000
MOV             R2, R4,LSR#28
STR             R12, [R0]
ADC             R0, R11, R5
LDR             R8, [R8,#4]
ORR             R5, R2, R0,LSL#4
LDR             R12, [SP,#0x54+var_4C]
MOV             R3, #0
ADDS            R10, R5, R7
LDR             R0, [R1,#-4]
MOV             R7, R10
ADC             R11, R3, #0
UMULL           R4, R5, R6, R8
MOV             R10, R11
MLA             R8, R8, R12, R5
ADDS            R4, R7, R4
BIC             R5, R4, #0xF0000000
MOV             R11, R4,LSR#28
STR             R5, [R1,#-8]
ADC             R7, R10, R8
LDR             R10, [LR,#-4]
ORR             R12, R11, R7,LSL#4
MOV             R8, #0
ADDS            R2, R12, R0
LDR             R0, [SP,#0x54+var_4C]
LDR             R12, [SP,#0x54+var_40]
ADC             R3, R8, #0
UMULL           R4, R5, R6, R10
MLA             R5, R10, R0, R5
ADDS            R4, R2, R4
MOV             R2, R4,LSR#28
ADC             R8, R3, R5
CMP             R12, R9
BIC             R3, R4, #0xF0000000
ORR             R2, R2, R8,LSL#4
STR             R3, [R1,#-4]
BGT             loc_30644

loc_30754
LDR             R8, [SP,#0x54+var_34]

loc_30758
CMP             R2, #0
BEQ             loc_30788

loc_30760
LDR             R6, [R8]
MOV             R1, #0
ADDS            R9, R2, R6
ADD             R7, R6, R2
MOV             R0, R9,LSR#28
ADC             R11, R1, #0
BIC             R5, R7, #0xF0000000
ORRS            R2, R0, R11,LSL#4
STR             R5, [R8],#4
BNE             loc_30760

loc_30788
LDR             R10, [SP,#0x54+var_40]
LDR             R4, [SP,#0x54+var_3C]
LDR             R2, [SP,#0x54+var_38]
LDR             R3, [SP,#0x54+var_34]
CMP             R10, R4
LDR             R1, [SP,#0x54+var_30]
ADD             R12, R2, #8
ADD             R8, R3, #4
STR             R12, [SP,#0x54+var_38]
STR             R8, [SP,#0x54+var_34]
BNE             loc_30284

loc_307B4
ADD             R0, SP, #0x54+var_14
BL              sub_29BBC
ADD             R0, SP, #0x54+var_14
LDR             R1, [SP,#0x54+var_18]
BL              sub_2AAD4
ADD             R0, SP, #0x54+var_14
BL              sub_29D74

loc_307D0
LDR             R0, [SP,#0x54+var_1C]
ADD             SP, SP, #0x54 ; 'T'
POP             {R4-R11,PC}

loc_307DC
MOV             R6, R5
B               loc_304E8
; End of function sub_3020C




; int __fastcall sub_307E4(int *, int *, int *)
sub_307E4

s= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R4, R0
LDR             R7, [R0]
SUB             SP, SP, #0x14
MOV             R6, R2
MOV             R9, R1
LDR             R3, [R2,#4]
LDR             R5, [R1]
CMP             R3, R7
BLT             loc_30D60

loc_3080C
LDR             R0, [R6]
CMP             R5, #0
LDR             R3, [R6,#0xC]
MOVLE           R5, #0
LDR             R8, [R4,#0xC]
LDR             LR, [R9,#0xC]
STR             R3, [SP,#0x14+s]
MOVLE           R3, R5
STR             R0, [SP,#0x14+var_C]
STR             R7, [R6]
BLE             loc_30A94
SUB             R9, R5, #7
CMP             R9, #1
BLE             loc_30DA0
MOV             R10, R3
MOV             R4, #0
ADD             R1, LR, #0x20 ; ' '
MOV             R3, R4
ADD             R2, R8, #0x20 ; ' '
ADD             R0, R10, #0x20 ; ' '
STR             R8, [SP,#0x14+var_8]

loc_30860
LDR             R11, [R1,#-0x20]
ADD             R10, R2, #0x20 ; ' '
LDR             R12, [R2,#-0x20]
ADD             R8, R1, #0x20 ; ' '
PLD             [R10]
ADD             LR, R4, #9
PLD             [R8]
CMP             R9, LR
SUB             R12, R12, R11
MOV             LR, R1
SUB             R3, R12, R3
MOV             R12, R2
BIC             R11, R3, #0xF0000000
ADD             R4, R4, #8
STR             R11, [R0,#-0x20]
LDR             R11, [R2,#-0x1C]
LDR             R2, [R1,#-0x1C]
SUB             R1, R11, R2
SUB             R3, R1, R3,LSR#31
BIC             R11, R3, #0xF0000000
STR             R11, [R0,#-0x1C]
MOV             R11, R0
LDR             R1, [LR,#-0x18]
ADD             R0, R0, #0x20 ; ' '
LDR             R2, [R12,#-0x18]
SUB             R2, R2, R1
SUB             R3, R2, R3,LSR#31
BIC             R1, R3, #0xF0000000
STR             R1, [R0,#-0x38]
LDR             R1, [LR,#-0x14]
LDR             R2, [R12,#-0x14]
SUB             R2, R2, R1
SUB             R1, R2, R3,LSR#31
BIC             R3, R1, #0xF0000000
STR             R3, [R0,#-0x34]
LDR             R3, [LR,#-0x10]
LDR             R2, [R12,#-0x10]
SUB             R2, R2, R3
SUB             R3, R2, R1,LSR#31
BIC             R1, R3, #0xF0000000
STR             R1, [R0,#-0x30]
LDR             R1, [LR,#-0xC]
LDR             R2, [R12,#-0xC]
SUB             R2, R2, R1
SUB             R1, R2, R3,LSR#31
BIC             R3, R1, #0xF0000000
STR             R3, [R0,#-0x2C]
LDR             R3, [LR,#-8]
LDR             R2, [R12,#-8]
SUB             R2, R2, R3
SUB             R3, R2, R1,LSR#31
MOV             R2, R10
BIC             R1, R3, #0xF0000000
STR             R1, [R0,#-0x28]
MOV             R1, R8
LDR             R10, [LR,#-4]
LDR             R8, [R12,#-4]
SUB             R10, R8, R10
SUB             R3, R10, R3,LSR#31
BIC             R8, R3, #0xF0000000
MOV             R3, R3,LSR#31
STR             R8, [R0,#-0x24]
BGT             loc_30860
LDR             R8, [SP,#0x14+var_8]
MOV             R9, R11

loc_30964
LDR             R2, [LR],#4
ADD             R0, R4, #1
LDR             R11, [R12],#4
MVN             R1, R4
CMP             R5, R0
ADD             R10, R1, R5
AND             R4, R10, #3
SUB             R11, R11, R2
SUB             R3, R11, R3
BIC             R2, R3, #0xF0000000
MOV             R3, R3,LSR#31
STR             R2, [R9],#4
BLE             loc_30A80
CMP             R4, #0
BEQ             loc_309F8
CMP             R4, #1
BEQ             loc_309D0
CMP             R4, #2
BNE             loc_30D7C

loc_309B0
LDR             R10, [R12],#4
ADD             R0, R0, #1
LDR             R1, [LR],#4
SUB             R11, R10, R1
SUB             R4, R11, R3
MOV             R3, R4,LSR#31
BIC             R2, R4, #0xF0000000
STR             R2, [R9],#4

loc_309D0
LDR             R10, [R12],#4
ADD             R0, R0, #1
LDR             R1, [LR],#4
CMP             R5, R0
SUB             R11, R10, R1
SUB             R3, R11, R3
BIC             R4, R3, #0xF0000000
MOV             R3, R3,LSR#31
STR             R4, [R9],#4
BLE             loc_30A80

loc_309F8
MOV             R11, R12
MOV             R10, LR
LDR             R2, [R10],#4
MOV             R4, R9
LDR             R1, [R11],#4
ADD             R12, R12, #0x10
ADD             LR, LR, #0x10
ADD             R0, R0, #4
CMP             R5, R0
ADD             R9, R9, #0x10
SUB             R1, R1, R2
SUB             R3, R1, R3
BIC             R2, R3, #0xF0000000
STR             R2, [R4],#4
LDR             R11, [R11]
LDR             R10, [R10]
SUB             R1, R11, R10
SUB             R11, R1, R3,LSR#31
BIC             R3, R11, #0xF0000000
STR             R3, [R4]
LDR             R4, [R12,#-8]
LDR             R2, [LR,#-8]
SUB             R10, R4, R2
SUB             R11, R10, R11,LSR#31
BIC             R1, R11, #0xF0000000
STR             R1, [R9,#-8]
LDR             R3, [R12,#-4]
LDR             R4, [LR,#-4]
SUB             R2, R3, R4
SUB             R10, R2, R11,LSR#31
BIC             R11, R10, #0xF0000000
MOV             R3, R10,LSR#31
STR             R11, [R9,#-4]
BGT             loc_309F8

loc_30A80
MOV             LR, R5,LSL#2
LDR             R12, [SP,#0x14+s]
ADD             R8, R8, LR
ADD             R9, R12, LR
STR             R9, [SP,#0x14+s]

loc_30A94
CMP             R7, R5
BLE             loc_30D28
SUB             R4, R7, #7
ADD             R0, R5, #1
CMP             R0, R4
BGE             loc_30DB4
LDR             R1, [SP,#0x14+s]
ADD             R2, R8, #0x20 ; ' '
MOV             R12, R5
ADD             R0, R1, #0x20 ; ' '

loc_30ABC
LDR             R10, [R2,#-0x20]
ADD             LR, R12, #9
PLD             [R2,#0x30]
CMP             R4, LR
MOV             R8, R2
MOV             LR, R0
SUB             R3, R10, R3
ADD             R12, R12, #8
BIC             R9, R3, #0xF0000000
ADD             R2, R2, #0x20 ; ' '
STR             R9, [R0,#-0x20]
ADD             R0, R0, #0x20 ; ' '
LDR             R1, [R2,#-0x3C]
SUB             R10, R1, R3,LSR#31
BIC             R11, R10, #0xF0000000
STR             R11, [R0,#-0x3C]
LDR             R3, [R2,#-0x38]
SUB             R9, R3, R10,LSR#31
BIC             R1, R9, #0xF0000000
STR             R1, [R0,#-0x38]
LDR             R10, [R2,#-0x34]
SUB             R11, R10, R9,LSR#31
BIC             R3, R11, #0xF0000000
STR             R3, [R0,#-0x34]
LDR             R9, [R2,#-0x30]
SUB             R10, R9, R11,LSR#31
BIC             R1, R10, #0xF0000000
STR             R1, [R0,#-0x30]
LDR             R11, [R2,#-0x2C]
SUB             R9, R11, R10,LSR#31
BIC             R3, R9, #0xF0000000
STR             R3, [R0,#-0x2C]
LDR             R10, [R2,#-0x28]
SUB             R1, R10, R9,LSR#31
BIC             R11, R1, #0xF0000000
STR             R11, [R0,#-0x28]
LDR             R9, [R2,#-0x24]
SUB             R3, R9, R1,LSR#31
BIC             R10, R3, #0xF0000000
MOV             R3, R3,LSR#31
STR             R10, [R0,#-0x24]
BGT             loc_30ABC

loc_30B64
LDR             R4, [R8],#4
ADD             R2, R12, #1
MVN             R1, R12
CMP             R7, R2
ADD             R11, R1, R7
SUB             R9, R4, R3
AND             R10, R11, #7
BIC             R0, R9, #0xF0000000
MOV             R3, R9,LSR#31
STR             R0, [LR],#4
BLE             loc_30D18
CMP             R10, #0
BEQ             loc_30C78
CMP             R10, #1
BEQ             loc_30C58
CMP             R10, #2
BEQ             loc_30C40
CMP             R10, #3
BEQ             loc_30C28
CMP             R10, #4
BEQ             loc_30C10
CMP             R10, #5
BEQ             loc_30BF8
CMP             R10, #6
BEQ             loc_30BE0
LDR             R12, [R8],#4
ADD             R2, R2, #1
SUB             R4, R12, R3
MOV             R3, R4,LSR#31
BIC             R1, R4, #0xF0000000
STR             R1, [LR],#4

loc_30BE0
LDR             R11, [R8],#4
ADD             R2, R2, #1
SUB             R9, R11, R3
MOV             R3, R9,LSR#31
BIC             R10, R9, #0xF0000000
STR             R10, [LR],#4

loc_30BF8
LDR             R0, [R8],#4
ADD             R2, R2, #1
SUB             R12, R0, R3
MOV             R3, R12,LSR#31
BIC             R4, R12, #0xF0000000
STR             R4, [LR],#4

loc_30C10
LDR             R1, [R8],#4
ADD             R2, R2, #1
SUB             R11, R1, R3
MOV             R3, R11,LSR#31
BIC             R9, R11, #0xF0000000
STR             R9, [LR],#4

loc_30C28
LDR             R10, [R8],#4
ADD             R2, R2, #1
SUB             R0, R10, R3
MOV             R3, R0,LSR#31
BIC             R12, R0, #0xF0000000
STR             R12, [LR],#4

loc_30C40
LDR             R4, [R8],#4
ADD             R2, R2, #1
SUB             R1, R4, R3
MOV             R3, R1,LSR#31
BIC             R11, R1, #0xF0000000
STR             R11, [LR],#4

loc_30C58
LDR             R9, [R8],#4
ADD             R2, R2, #1
CMP             R7, R2
SUB             R3, R9, R3
BIC             R10, R3, #0xF0000000
MOV             R3, R3,LSR#31
STR             R10, [LR],#4
BLE             loc_30D18

loc_30C78
MOV             R12, R8
MOV             R0, LR
LDR             R4, [R12],#4
ADD             R8, R8, #0x20 ; ' '
ADD             R2, R2, #8
ADD             LR, LR, #0x20 ; ' '
CMP             R7, R2
SUB             R11, R4, R3
BIC             R1, R11, #0xF0000000
STR             R1, [R0],#4
LDR             R9, [R12]
SUB             R10, R9, R11,LSR#31
BIC             R3, R10, #0xF0000000
STR             R3, [R0]
LDR             R12, [R8,#-0x18]
SUB             R0, R12, R10,LSR#31
BIC             R4, R0, #0xF0000000
STR             R4, [LR,#-0x18]
LDR             R11, [R8,#-0x14]
SUB             R9, R11, R0,LSR#31
BIC             R1, R9, #0xF0000000
STR             R1, [LR,#-0x14]
LDR             R10, [R8,#-0x10]
SUB             R3, R10, R9,LSR#31
BIC             R12, R3, #0xF0000000
STR             R12, [LR,#-0x10]
LDR             R0, [R8,#-0xC]
SUB             R4, R0, R3,LSR#31
BIC             R11, R4, #0xF0000000
STR             R11, [LR,#-0xC]
LDR             R9, [R8,#-8]
SUB             R1, R9, R4,LSR#31
BIC             R10, R1, #0xF0000000
STR             R10, [LR,#-8]
LDR             R3, [R8,#-4]
SUB             R12, R3, R1,LSR#31
BIC             R0, R12, #0xF0000000
MOV             R3, R12,LSR#31
STR             R0, [LR,#-4]
BGT             loc_30C78

loc_30D18
LDR             LR, [SP,#0x14+s]
SUB             R8, R7, R5
ADD             R2, LR, R8,LSL#2
STR             R2, [SP,#0x14+s]

loc_30D28
LDR             R5, [R6]
LDR             R7, [SP,#0x14+var_C]
CMP             R7, R5
BLE             loc_30D4C
SUB             R4, R7, R5
LDR             R0, [SP,#0x14+s] ; s
MOV             R2, R4,LSL#2 ; n
MOV             R1, #0  ; c
BL              memset

loc_30D4C
MOV             R0, R6
BL              sub_29BBC
MOV             R0, #0
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_30D60
MOV             R1, R7
MOV             R0, R2
BL              sub_2BA48
CMP             R0, #0
BEQ             loc_3080C
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_30D7C
LDR             R10, [R12],#4
ADD             R0, R0, #1
LDR             R1, [LR],#4
SUB             R11, R10, R1
SUB             R4, R11, R3
BIC             R2, R4, #0xF0000000
MOV             R3, R4,LSR#31
STR             R2, [R9],#4
B               loc_309B0

loc_30DA0
MOV             R4, #0
MOV             R9, R3
MOV             R12, R8
MOV             R3, R4
B               loc_30964

loc_30DB4
MOV             R12, R5
LDR             LR, [SP,#0x14+s]
B               loc_30B64
; End of function sub_307E4




; int __fastcall sub_30DC0(int *, int, int *)
sub_30DC0

var_74= -0x74
var_70= -0x70
var_6C= -0x6C
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_38= -0x38
var_34= -0x34
var_28= -0x28
var_24= -0x24
var_18= -0x18
var_14= -0x14
var_C= -0xC
var_8= -8

LDR             R3, [R1]
PUSH            {R4-R7,LR}
SUB             SP, SP, #0x74
CMP             R3, #0
BLE             loc_30DE4
LDR             R4, [R1,#0xC]
LDR             R5, [R4]
TST             R5, #1
BEQ             loc_30FB4

loc_30DE4
MOV             R12, #0
ADD             LR, SP, #0x74+var_14
ADD             R5, SP, #0x74+var_24
MOV             R7, R2
STR             R5, [SP,#0x74+var_74]
MOV             R6, R0
MOV             R4, R1
ADD             R3, SP, #0x74+var_34
ADD             R2, SP, #0x74+var_44
ADD             R1, SP, #0x74+var_54
ADD             R0, SP, #0x74+var_64
STR             R12, [SP,#0x74+var_6C]
STR             LR, [SP,#0x74+var_70]
BL              sub_33654
SUBS            R5, R0, #0
BEQ             loc_30E30

loc_30E24
MOV             R0, R5
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R7,PC}

loc_30E30
ADD             R1, SP, #0x74+var_64
MOV             R0, R4
BL              sub_2A25C
SUBS            R5, R0, #0
BEQ             loc_30E7C

loc_30E44
MOV             LR, #0
ADD             R4, SP, #0x74+var_14
ADD             R6, SP, #0x74+var_24
ADD             R0, SP, #0x74+var_64
STR             R4, [SP,#0x74+var_70]
ADD             R3, SP, #0x74+var_34
STR             R6, [SP,#0x74+var_74]
ADD             R2, SP, #0x74+var_44
ADD             R1, SP, #0x74+var_54
STR             LR, [SP,#0x74+var_6C]
BL              sub_29DB8
MOV             R0, R5
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R7,PC}

loc_30E7C
ADD             R2, SP, #0x74+var_54
MOV             R1, R4
MOV             R0, R6
BL              sub_2C470
SUBS            R5, R0, #0
BNE             loc_30E44
ADD             R1, SP, #0x74+var_44
ADD             R0, SP, #0x74+var_64
BL              sub_2A25C
SUBS            R5, R0, #0
BNE             loc_30E44
ADD             R1, SP, #0x74+var_34
ADD             R0, SP, #0x74+var_54
BL              sub_2A25C
SUBS            R5, R0, #0
BNE             loc_30E44
MOV             R1, #1
ADD             R0, SP, #0x74+var_14
BL              sub_2E630
LDR             R5, [SP,#0x74+var_44]

loc_30ECC
CMP             R5, #0
BLE             loc_30F64

loc_30ED4
LDR             R0, [SP,#0x74+var_38]
LDR             R1, [R0]
TST             R1, #1
BNE             loc_30F64
ADD             R1, SP, #0x74+var_44
MOV             R0, R1
BL              sub_2A350
SUBS            R5, R0, #0
BNE             loc_30E44
LDR             R3, [SP,#0x74+var_24]
CMP             R3, #0
BLE             loc_30F14
LDR             R12, [SP,#0x74+var_18]
LDR             R5, [R12]
TST             R5, #1
BNE             loc_31098

loc_30F14
ADD             R1, SP, #0x74+var_24
MOV             R0, R1
BL              sub_2A350
SUBS            R5, R0, #0
BNE             loc_30E44
LDR             R5, [SP,#0x74+var_44]
CMP             R5, #0
BGT             loc_30ED4
B               loc_30F64

loc_30F38
ADD             R2, SP, #0x74+var_14
ADD             R1, SP, #0x74+var_64
MOV             R0, R2
BL              sub_2E764
SUBS            R5, R0, #0
BNE             loc_30E44

loc_30F50
ADD             R1, SP, #0x74+var_14
MOV             R0, R1
BL              sub_2A350
SUBS            R5, R0, #0
BNE             loc_30E44

loc_30F64
LDR             R2, [SP,#0x74+var_34]
ADD             R1, SP, #0x74+var_34
MOV             R0, R1
CMP             R2, #0
BLE             loc_30FBC
LDR             R3, [SP,#0x74+var_28]
LDR             R12, [R3]
TST             R12, #1
BNE             loc_30FBC
BL              sub_2A350
SUBS            R5, R0, #0
BNE             loc_30E44
LDR             R0, [SP,#0x74+var_14]
CMP             R0, #0
BLE             loc_30F50
LDR             R1, [SP,#0x74+var_8]
LDR             R2, [R1]
TST             R2, #1
BEQ             loc_30F50
B               loc_30F38

loc_30FB4
MOV             R5, #0xFFFFFFFD
B               loc_30E24

loc_30FBC
ADD             R1, SP, #0x74+var_34
ADD             R0, SP, #0x74+var_44
BL              sub_29E00
CMN             R0, #1
BEQ             loc_31064
ADD             R2, SP, #0x74+var_44
ADD             R1, SP, #0x74+var_34
MOV             R0, R2
BL              sub_2E764
SUBS            R5, R0, #0
BNE             loc_30E44
ADD             R2, SP, #0x74+var_24
ADD             R1, SP, #0x74+var_14
MOV             R0, R2
BL              sub_2E764
SUBS            R5, R0, #0
BNE             loc_30E44

loc_31000
LDR             R5, [SP,#0x74+var_44]
CMP             R5, #0
BNE             loc_30ECC
MOV             R1, #1
ADD             R0, SP, #0x74+var_34
BL              sub_29E48
CMP             R0, #0
LDREQ           R6, [R6,#8]
BEQ             loc_31038
MOV             R5, #0xFFFFFFFD
B               loc_30E44

loc_3102C
BL              sub_29934
SUBS            R5, R0, #0
BNE             loc_30E44

loc_31038
LDR             LR, [SP,#0x74+var_C]
ADD             R2, SP, #0x74+var_14
MOV             R1, R4
MOV             R0, R2
CMP             LR, #1
BEQ             loc_3102C
MOV             R1, R7
MOV             R5, #0
BL              sub_2AAD4
STR             R6, [R7,#8]
B               loc_30E44

loc_31064
ADD             R2, SP, #0x74+var_34
ADD             R1, SP, #0x74+var_44
MOV             R0, R2
BL              sub_2E764
SUBS            R5, R0, #0
BNE             loc_30E44
ADD             R2, SP, #0x74+var_14
ADD             R1, SP, #0x74+var_24
MOV             R0, R2
BL              sub_2E764
SUBS            R5, R0, #0
BEQ             loc_31000
B               loc_30E44

loc_31098
ADD             R2, SP, #0x74+var_24
ADD             R1, SP, #0x74+var_64
MOV             R0, R2
BL              sub_2E764
SUBS            R5, R0, #0
BEQ             loc_30F14
B               loc_30E44
; End of function sub_30DC0




; int __fastcall sub_310B4(int *, int *, int)
sub_310B4

var_103C= -0x103C
var_1038= -0x1038
var_1034= -0x1034
var_1030= -0x1030
var_102C= -0x102C
var_1028= -0x1028
var_1024= -0x1024
var_1020= -0x1020
s= -0x101C
var_1018= -0x1018
var_1014= -0x1014
var_1010= -0x1010
var_100C= -0x100C
var_1008= -0x1008
var_1004= -0x1004
var_FC4= -0xFC4
var_F84= -0xF84
var_F44= -0xF44
var_F3C= -0xF3C
var_F1C= -0xF1C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1000
SUB             SP, SP, #0x3C
STR             R1, [SP,#0x103C+var_102C]
STR             R2, [SP,#0x103C+var_103C]
LDR             R1, [R1]
LDRD            R2, R3, [R0]
STR             R0, [SP,#0x103C+var_1014]
STR             R2, [SP,#0x103C+var_100C]
ADD             R2, R1, #1
CMP             R3, R2
STR             R2, [SP,#0x103C+var_1018]
STR             R2, [SP,#0x103C+var_1020]
BLT             loc_31A28
LDR             R3, [SP,#0x103C+var_1014]
MOV             R11, R1
LDR             R1, [SP,#0x103C+var_100C]
LDR             R7, [R3,#0xC]
CMP             R1, #0
STR             R7, [SP,#0x103C+s]
BLE             loc_31A6C

loc_31108
SUB             R6, R1, #7
CMP             R6, #1
BLE             loc_31AD0
ADD             R2, R7, #0x20 ; ' '
LDR             R9, [R2,#-0x20]
LDR             R10, [R2,#-0x18]
ADD             R3, SP, #0x103C+var_FC4
PLD             [SP,#0x103C+var_F3C]
CMP             R6, #9
PLD             [SP,#0x103C+var_F1C]
MOV             R12, #0
LDR             LR, [R2,#-0x1C]
SUB             R0, R1, #9
LDR             R4, [R2,#-0x14]
UBFX            R5, R0, #3, #1
LDR             R8, [R2,#-0x10]
ADD             R0, SP, #0x103C+var_F84
STR             R9, [R3,#-0x40]
LDR             R7, [R2,#-0xC]
LDR             R9, [R2,#-8]
STR             R10, [R3,#-0x30]
LDR             R10, [R2,#-4]
STR             LR, [R3,#-0x38]
ADD             LR, R2, #0x20 ; ' '
STR             R4, [R3,#-0x28]
MOV             R4, #8
STR             R8, [R3,#-0x20]
STR             R7, [R3,#-0x18]
STR             R9, [R3,#-0x10]
STR             R10, [R3,#-8]
STR             R12, [R3,#-0x3C]
STR             R12, [R3,#-0x34]
STR             R12, [R3,#-0x2C]
STR             R12, [R3,#-0x24]
STR             R12, [R3,#-0x1C]
STR             R12, [R3,#-0x14]
STR             R12, [R3,#-0xC]
STR             R12, [R3,#-4]
BLE             loc_3131C
CMP             R5, #0
BEQ             loc_31230
LDR             R4, [LR,#-0x1C]
CMP             R6, #0x11
LDR             R5, [LR,#-0x18]
MOV             R3, R0
LDR             R2, [LR,#-0x20]
LDR             R7, [LR,#-0x14]
LDR             R9, [LR,#-0x10]
STR             R4, [R0,#-0x38]
LDR             R10, [LR,#-0xC]
LDR             R4, [LR,#-8]
STR             R5, [R0,#-0x30]
LDR             R5, [LR,#-4]
STR             R2, [R0,#-0x40]
MOV             R2, LR
STR             R4, [R0,#-0x10]
ADD             LR, LR, #0x20 ; ' '
PLD             [R0,#0x88]
MOV             R4, #0x10
PLD             [R0,#0xA8]
STR             R12, [R0,#-0x3C]
STR             R12, [R0,#-0x34]
STR             R12, [R0,#-0x2C]
STR             R12, [R0,#-0x24]
STR             R12, [R0,#-0x1C]
STR             R12, [R0,#-0x14]
STR             R12, [R0,#-0xC]
STR             R12, [R0,#-4]
STR             R7, [R0,#-0x28]
STR             R9, [R0,#-0x20]
STR             R10, [R0,#-0x18]
STR             R5, [R0,#-8]
ADD             R0, SP, #0x103C+var_F44
BLE             loc_3131C

loc_31230
LDR             R8, [LR,#-0x20]
ADD             R2, LR, #0x20 ; ' '
LDR             R7, [LR,#-0x1C]
ADD             R9, R4, #0x11
LDR             R5, [LR,#-0x18]
CMP             R6, R9
STR             R8, [R0,#-0x40]
ADD             R10, R0, #0x40 ; '@'
LDR             R8, [LR,#-0x10]
ADD             R4, R4, #0x10
STR             R7, [R0,#-0x38]
STR             R5, [R0,#-0x30]
STR             R8, [R0,#-0x20]
LDR             R7, [LR,#-0x14]
LDR             R3, [R2,#-0x20]
LDR             R5, [LR,#-0xC]
LDR             R9, [R2,#-0x1C]
LDMDB           LR, {R8,LR}
STR             R7, [R0,#-0x28]
PLD             [R0,#0x88]
STR             R8, [R0,#-0x10]
STR             LR, [R0,#-8]
ADD             LR, R2, #0x20 ; ' '
PLD             [R0,#0xA8]
STR             R12, [R0,#-0x3C]
STR             R12, [R0,#-0x34]
STR             R12, [R0,#-0x2C]
STR             R12, [R0,#-0x24]
STR             R12, [R0,#-0x1C]
STR             R12, [R0,#-0x14]
STR             R12, [R0,#-0xC]
STR             R12, [R0,#-4]
PLD             [R0,#0xC8]
PLD             [R0,#0xE8]
STR             R5, [R0,#-0x18]
STR             R3, [R10,#-0x40]
MOV             R3, R10
STR             R12, [R10,#-0x3C]
STR             R9, [R10,#-0x38]
LDR             R8, [R2,#-0x18]
LDR             R7, [R2,#-0x14]
LDR             R0, [R2,#-0x10]
STR             R8, [R10,#-0x30]
STR             R7, [R10,#-0x28]
LDR             R8, [R2,#-0xC]
STR             R0, [R10,#-0x20]
LDMDB           R2, {R0,R7}
STR             R12, [R10,#-0x34]
STR             R12, [R10,#-0x2C]
STR             R0, [R10,#-0x10]
ADD             R0, R10, #0x40 ; '@'
STR             R12, [R10,#-0x24]
STR             R12, [R10,#-0x1C]
STR             R12, [R10,#-0x14]
STR             R12, [R10,#-0xC]
STR             R12, [R10,#-4]
STR             R8, [R10,#-0x18]
STR             R7, [R10,#-8]
BGT             loc_31230

loc_3131C
ADD             R6, SP, #0x103C+var_1004
STR             R6, [SP,#0x103C+var_1030]

loc_31324
ADD             R0, R4, #1
LDR             LR, [R2],#4
MVN             R12, R4
CMP             R1, R0
ADD             R4, R12, R1
MOV             R12, #0
STR             LR, [R3],#8
AND             R10, R4, #7
STR             R12, [R3,#-4]
BLE             loc_31474
CMP             R10, #0
BEQ             loc_313F8
CMP             R10, #1
BEQ             loc_313E0
CMP             R10, #2
BEQ             loc_313D0
CMP             R10, #3
BEQ             loc_313C0
CMP             R10, #4
BEQ             loc_313B0
CMP             R10, #5
BEQ             loc_313A0
CMP             R10, #6
LDRNE           LR, [R2],#4
ADDNE           R0, R0, #1
ADD             R0, R0, #1
LDR             R5, [R2],#4
STRNE           LR, [R3],#8
STRNE           R12, [R3,#-4]
STR             R5, [R3],#8
STR             R12, [R3,#-4]

loc_313A0
LDR             R9, [R2],#4
ADD             R0, R0, #1
STR             R9, [R3],#8
STR             R12, [R3,#-4]

loc_313B0
LDR             R7, [R2],#4
ADD             R0, R0, #1
STR             R7, [R3],#8
STR             R12, [R3,#-4]

loc_313C0
LDR             R6, [R2],#4
ADD             R0, R0, #1
STR             R6, [R3],#8
STR             R12, [R3,#-4]

loc_313D0
LDR             LR, [R2],#4
ADD             R0, R0, #1
STR             LR, [R3],#8
STR             R12, [R3,#-4]

loc_313E0
ADD             R0, R0, #1
LDR             R4, [R2],#4
CMP             R1, R0
STR             R4, [R3],#8
STR             R12, [R3,#-4]
BLE             loc_31474

loc_313F8
MOV             R8, R2
LDR             R5, [R2,#0xC]
LDR             R10, [R8],#4
MOV             LR, R3
LDR             R9, [R2,#8]
ADD             R2, R2, #0x20 ; ' '
LDR             R6, [R2,#-0xC]
ADD             R0, R0, #8
LDR             R7, [R8]
CMP             R1, R0
STR             R10, [LR],#8
ADD             R4, R3, #0x30 ; '0'
STR             R12, [LR,#-4]
ADD             R10, R3, #0x28 ; '('
STR             R7, [LR],#8
LDR             R8, [R2,#-0x10]
LDR             R7, [R2,#-8]
STR             R12, [LR,#-4]
STR             R5, [R3,#0x18]
LDR             R5, [R2,#-4]
STR             R9, [R3,#0x10]
ADD             R9, R3, #0x38 ; '8'
STR             R12, [R3,#0x14]
ADD             R3, R3, #0x40 ; '@'
STR             R12, [R3,#-0x24]
STR             R8, [R3,#-0x20]
STR             R12, [R10,#-4]
STMDB           R4, {R6,R12}
STMDB           R9, {R7,R12}
STMDB           R3, {R5,R12}
BGT             loc_313F8

loc_31474
LDR             R2, [SP,#0x103C+var_1030]
ADD             R0, R2, R1,LSL#3 ; s

loc_3147C
MOV             R12, R11,LSL#1
ADD             R6, R12, #1
CMP             R1, R6
STR             R6, [SP,#0x103C+var_1010]
BGE             loc_314A0
SUB             R1, R6, R1
MOV             R2, R1,LSL#3 ; n
MOV             R1, #0  ; c
BL              memset

loc_314A0
CMP             R11, #0
MOV             R0, R11
BLE             loc_31AB4
LDR             R9, [SP,#0x103C+var_102C]
MOV             R8, R11,LSL#3
LDR             R3, [SP,#0x103C+var_1030]
SUB             LR, R0, #7
MOV             R6, R0
STR             R8, [SP,#0x103C+var_1008]
LDR             R2, [R9,#0xC]
MOV             R11, R3
ADD             R12, R3, R8
STR             R12, [SP,#0x103C+var_1034]
STR             R2, [SP,#0x103C+var_1038]

loc_314D8
LDR             R1, [R11]
CMP             LR, #1
LDR             R0, [SP,#0x103C+var_103C]
MOV             R8, R11
MUL             R7, R1, R0
BIC             R7, R7, #0xF0000000
BLE             loc_31A1C
LDR             R10, [SP,#0x103C+var_1038]
ADD             R3, R11, #0x40 ; '@'
MOV             R1, #0
ADD             R2, R10, #0x20 ; ' '

loc_31504
ADD             R4, R1, #9
LDR             R10, [R2,#-0x20]
LDRD            R8, R9, [R3,#-0x40]
CMP             LR, R4
LDR             R0, [R2,#-0x1C]
ADD             R1, R1, #8
LDRD            R4, R5, [R3,#-0x38]
LDR             R12, [R2,#-0x18]
UMLAL           R8, R9, R7, R10
LDR             R10, [R2,#-0xC]
PLD             [R3,#0x48]
PLD             [R3,#0x68]
UMLAL           R4, R5, R7, R0
LDR             R0, [R2,#-0x14]
STRD            R8, R9, [R3,#-0x40]
LDRD            R8, R9, [R3,#-0x30]
STRD            R4, R5, [R3,#-0x38]
LDRD            R4, R5, [R3,#-0x28]
UMLAL           R8, R9, R7, R12
LDR             R12, [R2,#-0x10]
UMLAL           R4, R5, R7, R0
LDR             R0, [R2,#-8]
STRD            R8, R9, [R3,#-0x30]
LDRD            R8, R9, [R3,#-0x20]
STRD            R4, R5, [R3,#-0x28]
LDRD            R4, R5, [R3,#-0x18]
UMLAL           R8, R9, R7, R12
LDR             R12, [R2,#-4]
UMLAL           R4, R5, R7, R10
MOV             R10, R2
ADD             R2, R2, #0x20 ; ' '
STRD            R8, R9, [R3,#-0x20]
LDRD            R8, R9, [R3,#-0x10]
STRD            R4, R5, [R3,#-0x18]
LDRD            R4, R5, [R3,#-8]
UMLAL           R8, R9, R7, R0
UMLAL           R4, R5, R7, R12
STRD            R8, R9, [R3,#-0x10]
MOV             R8, R3
ADD             R3, R3, #0x40 ; '@'
STRD            R4, R5, [R3,#-0x48]
BGT             loc_31504

loc_315AC
MOV             R9, R10
LDRD            R2, R3, [R8],#8
LDR             R5, [R9],#4
ADD             R10, R1, #1
MVN             R0, R1
CMP             R6, R10
ADD             R4, R0, R6
AND             R12, R4, #7
UMLAL           R2, R3, R7, R5
STRD            R2, R3, [R8,#-8]
BLE             loc_31760
CMP             R12, #0
BEQ             loc_31690
CMP             R12, #1
BEQ             loc_31674
CMP             R12, #2
BEQ             loc_31660
CMP             R12, #3
BEQ             loc_3164C
CMP             R12, #4
BEQ             loc_31638
CMP             R12, #5
BEQ             loc_31624
CMP             R12, #6
BNE             loc_319F4

loc_31610
LDRD            R0, R1, [R8],#8
ADD             R10, R10, #1
LDR             R5, [R9],#4
UMLAL           R0, R1, R7, R5
STRD            R0, R1, [R8,#-8]

loc_31624
LDRD            R2, R3, [R8],#8
ADD             R10, R10, #1
LDR             R4, [R9],#4
UMLAL           R2, R3, R7, R4
STRD            R2, R3, [R8,#-8]

loc_31638
LDRD            R0, R1, [R8],#8
ADD             R10, R10, #1
LDR             R12, [R9],#4
UMLAL           R0, R1, R7, R12
STRD            R0, R1, [R8,#-8]

loc_3164C
LDRD            R4, R5, [R8],#8
ADD             R10, R10, #1
LDR             R1, [R9],#4
UMLAL           R4, R5, R7, R1
STRD            R4, R5, [R8,#-8]

loc_31660
LDRD            R2, R3, [R8],#8
ADD             R10, R10, #1
LDR             R5, [R9],#4
UMLAL           R2, R3, R7, R5
STRD            R2, R3, [R8,#-8]

loc_31674
LDRD            R0, R1, [R8],#8
ADD             R10, R10, #1
LDR             R12, [R9],#4
CMP             R6, R10
UMLAL           R0, R1, R7, R12
STRD            R0, R1, [R8,#-8]
BLE             loc_31760

loc_31690
STR             R11, [SP,#0x103C+var_1024]
MOV             R11, R10
MOV             R10, R6
STR             LR, [SP,#0x103C+var_1028]

loc_316A0
MOV             R5, R8
MOV             R6, R9
LDRD            R2, R3, [R5],#8
ADD             R0, R8, #0x20 ; ' '
LDR             R1, [R6],#4
ADD             LR, R8, #0x18
ADD             R4, R8, #0x28 ; '('
ADD             R9, R9, #0x20 ; ' '
ADD             R11, R11, #8
LDR             R12, [R6]
CMP             R10, R11
UMLAL           R2, R3, R7, R1
MOV             R1, R5
LDR             R6, [R9,#-0x18]
STRD            R2, R3, [R5,#-8]
ADD             R5, R8, #0x30 ; '0'
LDRD            R2, R3, [R1],#8
UMLAL           R2, R3, R7, R12
LDR             R12, [R9,#-0x10]
STRD            R2, R3, [R1,#-8]
ADD             R1, R8, #0x38 ; '8'
LDRD            R2, R3, [R8,#0x10]
ADD             R8, R8, #0x40 ; '@'
UMLAL           R2, R3, R7, R6
LDR             R6, [R9,#-8]
STRD            R2, R3, [LR,#-8]
LDR             LR, [R9,#-0x14]
LDRD            R2, R3, [R0,#-8]
UMLAL           R2, R3, R7, LR
LDR             LR, [R9,#-0xC]
STRD            R2, R3, [R0,#-8]
LDRD            R2, R3, [R4,#-8]
LDR             R0, [R9,#-4]
UMLAL           R2, R3, R7, R12
STRD            R2, R3, [R4,#-8]
LDRD            R2, R3, [R5,#-8]
UMLAL           R2, R3, R7, LR
STRD            R2, R3, [R5,#-8]
LDRD            R4, R5, [R1,#-8]
UMLAL           R4, R5, R7, R6
STRD            R4, R5, [R1,#-8]
LDRD            R2, R3, [R8,#-8]
UMLAL           R2, R3, R7, R0
STRD            R2, R3, [R8,#-8]
BGT             loc_316A0
LDR             LR, [SP,#0x103C+var_1028]
MOV             R6, R10
LDR             R11, [SP,#0x103C+var_1024]

loc_31760
PLD             [R11,#0x18]
LDR             R7, [R11],#8
LDR             R2, [SP,#0x103C+var_1034]
LDR             R9, [R11,#-4]
MOV             R3, R7,LSR#28
LDR             R10, [R11]
LDR             R5, [R11,#4]
ORR             R12, R3, R9,LSL#4
MOV             R1, R9,LSR#28
ADDS            R0, R10, R12
ADC             R4, R5, R1
CMP             R2, R11
STR             R0, [R11]
STR             R4, [R11,#4]
BNE             loc_314D8
LDR             LR, [SP,#0x103C+var_1008]
LDR             R6, [SP,#0x103C+var_1030]
LDR             R7, [SP,#0x103C+var_1018]
LDR             R4, [SP,#0x103C+var_1030]
ADD             R5, LR, #8
ADD             R10, R6, LR

loc_317B4
LDR             R11, [SP,#0x103C+var_1010]
ADD             R3, R4, R5
CMP             R11, R7
BLT             loc_31930
LDR             R9, [R10],#8
ADD             R1, R7, #1
LDRD            R4, R5, [R3],#8
SUB             R7, R11, R7
AND             R0, R7, #3
LDR             R2, [R10,#-4]
MOV             R12, R9,LSR#28
ORR             R6, R12, R2,LSL#4
MOV             LR, R2,LSR#28
ADDS            R12, R4, R6
ADC             LR, R5, LR
CMP             R1, R11
STMDB           R3, {R12,LR}
BGT             loc_31930
CMP             R0, #0
BEQ             loc_31A7C
CMP             R0, #1
BEQ             loc_3183C
CMP             R0, #2
BNE             loc_31A88

loc_31814
LDR             R6, [R10],#8
ADD             R1, R1, #1
LDRD            R4, R5, [R3],#8
LDR             LR, [R10,#-4]
MOV             R9, R6,LSR#28
ORR             R7, R9, LR,LSL#4
MOV             R2, LR,LSR#28
ADDS            R0, R4, R7
ADC             R12, R5, R2
STMDB           R3, {R0,R12}

loc_3183C
LDR             R0, [R10],#8
ADD             R6, R1, #1
LDRD            R4, R5, [R3],#8
LDR             R12, [R10,#-4]
MOV             R1, R0,LSR#28
ORR             LR, R1, R12,LSL#4
MOV             R9, R12,LSR#28
ADDS            R0, R4, LR
ADC             R12, R5, R9
LDR             R5, [SP,#0x103C+var_1010]
STMDB           R3, {R0,R12}
CMP             R6, R5
MOVLE           R8, R5
MOVLE           R11, R6
BGT             loc_31930

loc_31878
MOV             R2, R10
MOV             R6, R3
LDR             R4, [R2],#8
ADD             R7, R10, #0x18
LDRD            R0, R1, [R6],#8
ADD             R10, R10, #0x20 ; ' '
ADD             R11, R11, #4
LDR             R12, [R2,#-4]
MOV             R9, R4,LSR#28
MOV             LR, R6
ORR             R4, R9, R12,LSL#4
MOV             R5, R12,LSR#28
ADDS            R4, R0, R4
ADC             R5, R1, R5
STRD            R4, R5, [R6,#-8]
ADD             R6, R3, #0x18
LDR             R0, [R2],#8
ADD             R3, R3, #0x20 ; ' '
LDRD            R4, R5, [LR],#8
LDR             R1, [R2,#-4]
MOV             R2, R0,LSR#28
ORR             R12, R2, R1,LSL#4
MOV             R9, R1,LSR#28
ADDS            R0, R4, R12
ADC             R1, R5, R9
STRD            R0, R1, [LR,#-8]
LDMDB           R7, {R1,LR}
LDMDB           R6, {R0,R12}
MOV             R7, R1,LSR#28
MOV             R4, LR,LSR#28
ORR             LR, R7, LR,LSL#4
ADDS            R5, R0, LR
ADC             R0, R12, R4
STR             R5, [R6,#-8]
STR             R0, [R6,#-4]
LDMDB           R10, {R1,LR}
LDMDB           R3, {R0,R12}
MOV             R6, R1,LSR#28
MOV             R2, LR,LSR#28
ORR             R1, R6, LR,LSL#4
ADDS            R9, R0, R1
ADC             R12, R12, R2
CMP             R11, R8
STR             R9, [R3,#-8]
STR             R12, [R3,#-4]
BLE             loc_31878

loc_31930
LDR             R8, [SP,#0x103C+var_1018]
MOV             R5, #0
LDR             R10, [SP,#0x103C+var_1030]
LDR             R11, [SP,#0x103C+var_1008]
CMP             R8, #0
ADD             R7, R10, R11
BLE             loc_3197C
LDR             R4, [SP,#0x103C+s]
LDR             LR, [SP,#0x103C+var_102C]

loc_31954
LDR             R3, [R7],#8
ADD             R5, R5, #1
BIC             R0, R3, #0xF0000000
STR             R0, [R4],#4
LDR             R6, [LR]
ADD             R2, R6, #1
CMP             R2, R5
BGT             loc_31954
STR             R2, [SP,#0x103C+var_1020]
STR             R4, [SP,#0x103C+s]

loc_3197C
LDR             R1, [SP,#0x103C+var_100C]
CMP             R1, R5
BLE             loc_319AC
SUB             R9, R1, R5
LDR             R0, [SP,#0x103C+s] ; s
MOV             R2, R9,LSL#2 ; n
MOV             R1, #0  ; c
BL              memset
LDR             R12, [SP,#0x103C+var_102C]
LDR             R8, [R12]
ADD             R10, R8, #1
STR             R10, [SP,#0x103C+var_1020]

loc_319AC
LDR             R11, [SP,#0x103C+var_1014]
LDR             R4, [SP,#0x103C+var_1020]
MOV             R0, R11
STR             R4, [R11]
BL              sub_29BBC
LDR             R5, [SP,#0x103C+var_102C]
MOV             R0, R11
MOV             R1, R5
BL              sub_29E8C
CMN             R0, #1
BEQ             loc_31A0C
MOV             R1, R5
MOV             R2, R11
MOV             R0, R11
ADD             SP, SP, #0x1000
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,LR}
B               sub_307E4

loc_319F4
LDRD            R2, R3, [R8],#8
ADD             R10, R10, #1
LDR             R1, [R9],#4
UMLAL           R2, R3, R7, R1
STRD            R2, R3, [R8,#-8]
B               loc_31610

loc_31A0C
MOV             R0, #0

loc_31A10
ADD             SP, SP, #0x1000
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}

loc_31A1C
LDR             R10, [SP,#0x103C+var_1038]
MOV             R1, #0
B               loc_315AC

loc_31A28
MOV             R1, R2
BL              sub_2BA48
CMP             R0, #0
BNE             loc_31A10
LDR             R5, [SP,#0x103C+var_1014]
LDR             R0, [SP,#0x103C+var_102C]
LDR             R1, [R5]
MOV             R3, R5
LDR             R4, [R0]
LDR             R7, [R3,#0xC]
CMP             R1, #0
ADD             R6, R4, #1
MOV             R11, R4
STR             R6, [SP,#0x103C+var_1018]
STR             R6, [SP,#0x103C+var_1020]
STR             R7, [SP,#0x103C+s]
BGT             loc_31108

loc_31A6C
ADD             R0, SP, #0x103C+var_1004
MOV             R1, #0
STR             R0, [SP,#0x103C+var_1030]
B               loc_3147C

loc_31A7C
MOV             R8, R11
MOV             R11, R1
B               loc_31878

loc_31A88
LDR             R9, [R10],#8
ADD             R1, R1, #1
LDRD            R4, R5, [R3],#8
LDR             R7, [R10,#-4]
MOV             R0, R9,LSR#28
ORR             R2, R0, R7,LSL#4
MOV             R12, R7,LSR#28
ADDS            R0, R4, R2
ADC             R12, R5, R12
STMDB           R3, {R0,R12}
B               loc_31814

loc_31AB4
LDR             R10, [SP,#0x103C+var_1030]
MOV             LR, R11,LSL#3
MOV             R7, #1
STR             LR, [SP,#0x103C+var_1008]
MOV             R5, #8
MOV             R4, R10
B               loc_317B4

loc_31AD0
ADD             R3, SP, #0x103C+var_1004
MOV             R2, R7
STR             R3, [SP,#0x103C+var_1030]
MOV             R4, #0
B               loc_31324
; End of function sub_310B4




; int __fastcall sub_31AE4(int *, _DWORD *, int *, int)
sub_31AE4

var_83C= -0x83C
var_834= -0x834
var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
src= -0x804

PUSH            {R4-R11,LR}
MOV             R4, R3
LDR             R3, [R2,#4]
SUB             SP, SP, #0x830
SUB             SP, SP, #0xC
MOV             R6, R0
STR             R2, [SP,#0x83C+var_808]
MOV             R5, R1
CMP             R3, R4
BLT             loc_31FF8

loc_31B0C
LDR             R0, [R6]
LDR             R2, [R5]
STR             R0, [SP,#0x83C+var_81C]
ADD             R1, R0, R2
CMP             R1, R4
MOVGE           R1, R4
CMP             R1, #0
STR             R1, [SP,#0x83C+var_820]
BLE             loc_31F84
LDR             R9, [R5,#0xC]
SUB             R8, R2, #1
LDR             R7, [R6,#0xC]
ADD             R10, SP, #0x83C+src
STR             R8, [SP,#0x83C+var_810]
MOV             R8, #0
STR             R9, [SP,#0x83C+var_814]
MOV             R9, #0
MOV             R11, #0
STR             R7, [SP,#0x83C+var_818]
STR             R10, [SP,#0x83C+var_824]
STR             R11, [SP,#0x83C+var_828]

loc_31B60
LDR             LR, [SP,#0x83C+var_810]
LDR             R12, [SP,#0x83C+var_828]
LDR             R3, [SP,#0x83C+var_81C]
LDR             R0, [SP,#0x83C+var_818]
CMP             R12, LR
LDR             R2, [SP,#0x83C+var_814]
MOVLT           LR, R12
SUB             R4, R12, LR
ADD             R6, LR, #1
SUB             R5, R3, R4
ADD             R10, R0, R4,LSL#2
CMP             R6, R5
ADD             R3, R2, LR,LSL#2
MOVLT           R11, R6
MOVGE           R11, R5
CMP             R11, #0
BLE             loc_31F48
SUB             R1, R11, #7
CMP             R1, #1
STR             R1, [SP,#0x83C+var_82C]
BLE             loc_31FF0
SUB             R3, R3, #0x20 ; ' '
LDR             R6, [R10,#4]
LDR             R12, [R3,#0x1C]
ADD             R7, R10, #0x20 ; ' '
LDR             LR, [R7,#-0x20]
LDR             R4, [R3,#0x20]
LDR             R2, [R10,#8]
UMULL           R0, R1, R12, R6
LDR             R5, [R3,#0x18]
PLD             [R10,#0x5C]
MOV             R10, R7
LDR             R12, [R10,#-0x14]
LDR             R7, [R3,#0x14]
LDR             R6, [R3,#0x10]
UMLAL           R0, R1, R4, LR
LDR             R4, [R10,#-0x10]
LDR             LR, [R3,#0xC]
UMLAL           R0, R1, R2, R5
SUB             R2, R11, #9
UBFX            R2, R2, #3, #1
UMLAL           R0, R1, R12, R7
LDR             R7, [R10,#-0xC]
UMLAL           R0, R1, R4, R6
LDMIB           R3, {R6,R12}
LDRD            R4, R5, [R10,#-8]
UMLAL           R0, R1, LR, R7
ADD             LR, R10, #0x20 ; ' '
SUB             R7, R3, #0x20 ; ' '
UMLAL           R0, R1, R12, R4
MOV             R12, #8
UMLAL           R0, R1, R6, R5
ADDS            R8, R8, R0
LDR             R0, [SP,#0x83C+var_82C]
ADC             R9, R9, R1
CMP             R0, #9
BLE             loc_31DF8
CMP             R2, #0
BEQ             loc_31CD8
LDR             R5, [LR,#-0x1C]
MOV             R3, R7
LDR             R1, [R7,#0x1C]
SUB             R7, R7, #0x20 ; ' '
LDR             R12, [LR,#-0x20]
LDR             R6, [R7,#0x40]
LDR             R2, [R7,#0x38]
UMULL           R0, R1, R1, R5
LDR             R5, [LR,#-0x18]
LDR             R4, [LR,#-0x14]
PLD             [R10,#0x5C]
MOV             R10, LR
ADD             LR, LR, #0x20 ; ' '
UMLAL           R0, R1, R6, R12
LDR             R12, [R7,#0x34]
LDR             R6, [R7,#0x2C]
UMLAL           R0, R1, R5, R2
LDR             R2, [R7,#0x30]
LDR             R5, [LR,#-0x30]
UMLAL           R0, R1, R4, R12
LDR             R4, [LR,#-0x2C]
LDR             R12, [R7,#0x28]
UMLAL           R0, R1, R5, R2
LDR             R5, [LR,#-0x28]
LDR             R2, [R7,#0x24]
UMLAL           R0, R1, R6, R4
LDR             R4, [LR,#-0x24]
UMLAL           R0, R1, R12, R5
MOV             R12, #0x10
UMLAL           R0, R1, R2, R4
ADDS            R8, R8, R0
LDR             R0, [SP,#0x83C+var_82C]
ADC             R9, R9, R1
CMP             R0, #0x11
BLE             loc_31DF8

loc_31CD8
STR             R11, [SP,#0x83C+var_80C]

loc_31CDC
LDR             R6, [R7,#0x1C]
ADD             R10, LR, #0x20 ; ' '
LDR             R5, [LR,#-0x1C]
SUB             R3, R7, #0x20 ; ' '
LDR             R0, [R3,#0x1C]
ADD             R11, R12, #8
LDR             R1, [R10,#-0x1C]
LDR             R12, [LR,#-0x20]
UMULL           R4, R5, R6, R5
LDR             R2, [R7,#0x20]
LDR             R6, [R10,#-0x20]
PLD             [LR,#0x3C]
UMULL           R0, R1, R0, R1
PLD             [LR,#0x5C]
UMLAL           R4, R5, R2, R12
LDR             R2, [R3,#0x20]
LDR             R12, [R7,#0x18]
UMLAL           R0, R1, R2, R6
LDR             R6, [LR,#-0x18]
LDR             R2, [R3,#0x18]
UMLAL           R4, R5, R6, R12
LDR             R12, [R10,#-0x18]
LDR             R6, [R7,#0x14]
UMLAL           R0, R1, R12, R2
LDR             R12, [LR,#-0x14]
LDR             R2, [R3,#0x14]
UMLAL           R4, R5, R12, R6
LDR             R12, [R10,#-0x14]
LDR             R6, [R7,#0x10]
UMLAL           R0, R1, R12, R2
LDR             R12, [LR,#-0x10]
LDR             R2, [R3,#0x10]
UMLAL           R4, R5, R12, R6
LDR             R12, [R10,#-0x10]
LDR             R6, [LR,#-0xC]
UMLAL           R0, R1, R12, R2
LDR             R2, [R7,#0xC]
LDR             R12, [R10,#-0xC]
UMLAL           R4, R5, R2, R6
LDR             R6, [R3,#0xC]
LDR             R2, [LR,#-4]
UMLAL           R0, R1, R6, R12
LDR             R6, [R10,#-8]
STRD            R4, R5, [SP,#0x83C+var_83C]
LDR             R5, [LR,#-8]
LDR             R4, [R7,#8]
STRD            R0, R1, [SP,#0x83C+var_834]
LDR             R12, [R7,#4]
LDRD            R0, R1, [SP,#0x83C+var_83C]
LDR             R7, [R3,#8]
LDR             LR, [R10,#-4]
UMLAL           R0, R1, R4, R5
MOV             R4, R0
MOV             R5, R1
LDRD            R0, R1, [SP,#0x83C+var_834]
UMLAL           R4, R5, R12, R2
ADD             R2, R11, #9
ADD             R12, R11, #8
UMLAL           R0, R1, R7, R6
LDR             R6, [R3,#4]
ADDS            R8, R8, R4
SUB             R7, R3, #0x20 ; ' '
ADC             R9, R9, R5
UMLAL           R0, R1, R6, LR
ADD             LR, R10, #0x20 ; ' '
ADDS            R8, R8, R0
ADC             R9, R9, R1
LDR             R1, [SP,#0x83C+var_82C]
CMP             R1, R2
BGT             loc_31CDC
LDR             R11, [SP,#0x83C+var_80C]

loc_31DF8
LDR             LR, [R10],#4
ADD             R1, R12, #1
LDR             R0, [R3],#-4
MVN             R12, R12
CMP             R11, R1
ADD             R6, R12, R11
AND             R2, R6, #7
UMLAL           R8, R9, R0, LR
BLE             loc_31F48
CMP             R2, #0
BEQ             loc_31EC8
CMP             R2, #1
BEQ             loc_31EB0
CMP             R2, #2
BEQ             loc_31EA0
CMP             R2, #3
BEQ             loc_31E90
CMP             R2, #4
BEQ             loc_31E80
CMP             R2, #5
BEQ             loc_31E70
CMP             R2, #6
LDRNE           R2, [R10],#4
ADDNE           R1, R1, #1
LDRNE           R0, [R3],#-4
ADD             R1, R1, #1
LDR             R4, [R10],#4
LDR             R5, [R3],#-4
UMLALNE         R8, R9, R0, R2
UMLAL           R8, R9, R5, R4

loc_31E70
LDR             R7, [R10],#4
ADD             R1, R1, #1
LDR             LR, [R3],#-4
UMLAL           R8, R9, LR, R7

loc_31E80
LDR             R12, [R10],#4
ADD             R1, R1, #1
LDR             R0, [R3],#-4
UMLAL           R8, R9, R0, R12

loc_31E90
LDR             R6, [R10],#4
ADD             R1, R1, #1
LDR             R2, [R3],#-4
UMLAL           R8, R9, R2, R6

loc_31EA0
LDR             R4, [R10],#4
ADD             R1, R1, #1
LDR             R5, [R3],#-4
UMLAL           R8, R9, R5, R4

loc_31EB0
LDR             R7, [R10],#4
ADD             R1, R1, #1
LDR             LR, [R3],#-4
CMP             R11, R1
UMLAL           R8, R9, LR, R7
BLE             loc_31F48

loc_31EC8
MOV             R6, R1

loc_31ECC
MOV             R12, R10
MOV             R0, R3
LDR             R2, [R12],#4
ADD             R10, R10, #0x20 ; ' '
LDR             R4, [R0],#-4
SUB             R3, R3, #0x20 ; ' '
LDR             R1, [R10,#-0x18]
ADD             R6, R6, #8
LDR             LR, [R12]
CMP             R11, R6
LDR             R12, [R0]
UMLAL           R8, R9, R4, R2
LDR             R0, [R3,#0x18]
LDR             R5, [R10,#-0x14]
LDR             R7, [R3,#0x14]
LDR             R2, [R10,#-0x10]
LDR             R4, [R3,#0x10]
UMLAL           R8, R9, R12, LR
LDR             R12, [R10,#-0xC]
UMLAL           R8, R9, R0, R1
LDR             R0, [R3,#0xC]
LDR             R1, [R10,#-8]
UMLAL           R8, R9, R7, R5
LDR             R5, [R3,#8]
LDR             R7, [R10,#-4]
LDR             LR, [R3,#4]
UMLAL           R8, R9, R4, R2
UMLAL           R8, R9, R0, R12
UMLAL           R8, R9, R5, R1
UMLAL           R8, R9, LR, R7
BGT             loc_31ECC

loc_31F48
LDR             R3, [SP,#0x83C+var_828]
MOV             R6, R8,LSR#28
LDR             R4, [SP,#0x83C+var_820]
MOV             R12, R9,LSR#28
LDR             R1, [SP,#0x83C+var_824]
ORR             R9, R6, R9,LSL#4
ADD             R2, R3, #1
CMP             R4, R2
BIC             R0, R8, #0xF0000000
STR             R0, [R1],#4
MOV             R8, R9
STR             R2, [SP,#0x83C+var_828]
MOV             R9, R12
STR             R1, [SP,#0x83C+var_824]
BNE             loc_31B60

loc_31F84
LDR             R8, [SP,#0x83C+var_820]
LDR             R7, [SP,#0x83C+var_808]
ADD             R11, R8, #1
CMP             R11, #0
LDR             R5, [R7]
LDR             R10, [R7,#0xC]
MOVLE           R11, #0
STR             R8, [R7]
BLE             loc_31FBC
MOV             R2, R11,LSL#2 ; n
MOV             R0, R10 ; dest
ADD             R1, SP, #0x83C+src ; src
ADD             R10, R10, R2
BL              memcpy

loc_31FBC
CMP             R5, R11
BLE             loc_31FD8
SUB             LR, R5, R11
MOV             R0, R10 ; s
MOV             R2, LR,LSL#2 ; n
MOV             R1, #0  ; c
BL              memset

loc_31FD8
LDR             R0, [SP,#0x83C+var_808]
BL              sub_29BBC
MOV             R0, #0
ADD             SP, SP, #0x830
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_31FF0
MOV             R12, #0
B               loc_31DF8

loc_31FF8
MOV             R0, R2
MOV             R1, R4
BL              sub_2BA48
CMP             R0, #0
BEQ             loc_31B0C
ADD             SP, SP, #0x830
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_31AE4




; int __fastcall sub_32018(int *, int *)
sub_32018

var_844= -0x844
var_83C= -0x83C
var_834= -0x834
var_830= -0x830
var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
s= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
var_800= -0x800
var_7FC= -0x7FC
var_7F8= -0x7F8
var_7F4= -0x7F4
var_7F0= -0x7F0
var_7EC= -0x7EC
var_7E8= -0x7E8
var_790= -0x790
var_770= -0x770
var_750= -0x750

LDR             R2, [R0]
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x840
LDR             R6, [R1,#4]
SUB             SP, SP, #4
MOV             R4, R0
MOV             R5, R2,LSL#1
STR             R1, [SP,#0x844+var_814]
STR             R2, [SP,#0x844+var_824]
CMP             R6, R5
STR             R5, [SP,#0x844+var_830]
MOVGE           R6, R5
STRGE           R6, [SP,#0x844+var_808]
BLT             loc_3295C

loc_32050
LDR             R1, [SP,#0x844+var_814]
CMP             R6, #0
LDR             R7, [R1]
LDR             R8, [R1,#0xC]
STR             R7, [SP,#0x844+var_80C]
STR             R8, [SP,#0x844+s]
BLE             loc_32990
LDR             R12, [R4,#0xC]
MOV             R10, #0
LDR             R4, [SP,#0x844+var_824]
ADD             LR, SP, #0x844+var_804
MOV             R3, #0
STR             LR, [SP,#0x844+var_82C]
STR             R12, [SP,#0x844+var_828]
SUB             R2, R4, #1
STR             R2, [SP,#0x844+var_820]
MOV             R2, #0
STRD            R2, R3, [SP,#0x844+var_844]

loc_32098
LDR             R5, [SP,#0x844+var_820]
LDR             R1, [SP,#0x844+var_824]
LDR             R12, [SP,#0x844+var_828]
CMP             R5, R10
MOVGE           R5, R10
SUB             R3, R10, R5
ADD             R0, R5, #1
SUB             R6, R5, R3
SUB             R7, R1, R3
ADD             R8, R6, #1
CMP             R0, R7
MOV             R9, R8,ASR#1
MOVGE           R0, R7
ADD             R2, R12, R3,LSL#2
ADD             R3, R12, R5,LSL#2
CMP             R9, R0
MOVLT           R11, R9
MOVGE           R11, R0
CMP             R11, #0
BLE             loc_324CC
SUB             LR, R11, #7
CMP             LR, #1
STR             LR, [SP,#0x844+var_834]
BLE             loc_32940
SUB             R3, R3, #0x20 ; ' '
LDR             R5, [R2,#4]
LDR             R0, [R3,#0x1C]
ADD             R6, R2, #0x20 ; ' '
LDR             R8, [R6,#-0x20]
CMP             LR, #9
LDR             R9, [R3,#0x20]
SUB             R4, R11, #9
LDR             R7, [R3,#0x18]
UBFX            R4, R4, #3, #1
UMULL           R0, R1, R5, R0
LDR             R5, [R6,#-0x18]
PLD             [R2,#0x5C]
MOV             R2, R6
LDR             R12, [R2,#-0x14]
ADD             R6, R6, #0x20 ; ' '
LDR             LR, [R3,#0x14]
UMLAL           R0, R1, R9, R8
LDR             R9, [R2,#-0x10]
LDR             R8, [R3,#0xC]
UMLAL           R0, R1, R7, R5
LDR             R5, [R3,#0x10]
UMLAL           R0, R1, LR, R12
LDR             LR, [R2,#-0xC]
SUB             R12, R3, #0x20 ; ' '
UMLAL           R0, R1, R5, R9
LDMDB           R2, {R7,R9}
LDR             R5, [R3,#8]
UMLAL           R0, R1, R8, LR
LDR             R8, [R3,#4]
MOV             LR, #8
UMLAL           R0, R1, R5, R7
UMLAL           R0, R1, R8, R9
STRD            R0, R1, [SP,#0x844+var_83C]
BLE             loc_32950
CMP             R4, #0
BEQ             loc_32228
LDR             R0, [R6,#-0x1C]
MOV             R3, R12
LDR             R1, [R12,#0x1C]
SUB             R12, R12, #0x20 ; ' '
LDR             R9, [R6,#-0x20]
LDR             R4, [R12,#0x40]
LDR             R5, [R6,#-0x18]
UMULL           R0, R1, R0, R1
LDR             R7, [R12,#0x38]
LDR             LR, [R6,#-0x14]
LDR             R8, [R12,#0x34]
PLD             [R2,#0x5C]
MOV             R2, R6
ADD             R6, R6, #0x20 ; ' '
UMLAL           R0, R1, R4, R9
LDR             R9, [R6,#-0x30]
LDR             R4, [R6,#-0x2C]
UMLAL           R0, R1, R7, R5
LDR             R5, [R12,#0x30]
LDR             R7, [R6,#-0x28]
UMLAL           R0, R1, R8, LR
LDR             R8, [R12,#0x2C]
LDR             LR, [R12,#0x28]
UMLAL           R0, R1, R5, R9
LDR             R9, [R6,#-0x24]
LDR             R5, [R12,#0x24]
UMLAL           R0, R1, R8, R4
LDR             R4, [SP,#0x844+var_83C]
LDR             R8, [SP,#0x844+var_83C+4]
UMLAL           R0, R1, LR, R7
LDR             R7, [SP,#0x844+var_834]
MOV             LR, #0x10
UMLAL           R0, R1, R5, R9
ADDS            R0, R4, R0
ADC             R1, R8, R1
CMP             R7, #0x11
STR             R0, [SP,#0x844+var_83C]
STR             R1, [SP,#0x844+var_83C+4]
BLE             loc_32988

loc_32228
STR             R11, [SP,#0x844+var_81C]
STR             R10, [SP,#0x844+var_818]
LDRD            R10, R11, [SP,#0x844+var_83C]

loc_32234
LDR             R9, [R6,#-0x1C]
SUB             R3, R12, #0x20 ; ' '
LDR             R5, [R12,#0x1C]
ADD             R2, R6, #0x20 ; ' '
LDR             R0, [R2,#-0x1C]
ADD             LR, LR, #8
LDR             R1, [R3,#0x1C]
LDR             R7, [R6,#-0x20]
UMULL           R4, R5, R9, R5
LDR             R8, [R12,#0x20]
LDR             R9, [R2,#-0x20]
STR             LR, [SP,#0x844+var_83C]
UMULL           R0, R1, R0, R1
LDR             LR, [R3,#0x20]
PLD             [R6,#0x3C]
PLD             [R6,#0x5C]
UMLAL           R4, R5, R8, R7
LDR             R7, [R6,#-0x18]
LDR             R8, [R12,#0x18]
UMLAL           R0, R1, LR, R9
LDR             LR, [R3,#0x18]
LDR             R9, [R2,#-0x18]
UMLAL           R4, R5, R8, R7
LDR             R7, [R6,#-0x14]
LDR             R8, [R12,#0x14]
UMLAL           R0, R1, LR, R9
LDR             LR, [R3,#0x14]
LDR             R9, [R2,#-0x14]
UMLAL           R4, R5, R8, R7
LDR             R7, [R6,#-0x10]
LDR             R8, [R12,#0x10]
UMLAL           R0, R1, LR, R9
LDR             LR, [R3,#0x10]
LDR             R9, [R2,#-0x10]
UMLAL           R4, R5, R8, R7
LDR             R7, [R6,#-0xC]
LDR             R8, [R12,#0xC]
UMLAL           R0, R1, LR, R9
LDR             LR, [R6,#-4]
LDR             R9, [R3,#0xC]
UMLAL           R4, R5, R8, R7
LDR             R8, [R6,#-8]
LDR             R6, [R2,#-0xC]
LDR             R7, [R12,#8]
LDR             R12, [R12,#4]
UMLAL           R0, R1, R9, R6
LDR             R6, [R2,#-8]
UMLAL           R4, R5, R7, R8
LDR             R8, [R3,#8]
LDR             R7, [R2,#-4]
LDR             R9, [R3,#4]
UMLAL           R0, R1, R8, R6
ADD             R6, R2, #0x20 ; ' '
UMLAL           R4, R5, R12, LR
LDR             LR, [SP,#0x844+var_83C]
SUB             R12, R3, #0x20 ; ' '
UMLAL           R0, R1, R9, R7
ADD             R8, LR, #9
ADD             LR, LR, #8
STRD            R4, R5, [SP,#0x844+var_83C]
ADDS            R10, R10, R4
LDR             R5, [SP,#0x844+var_83C+4]
ADC             R11, R11, R5
ADDS            R10, R10, R0
LDR             R0, [SP,#0x844+var_834]
ADC             R11, R11, R1
CMP             R0, R8
BGT             loc_32234
STRD            R10, R11, [SP,#0x844+var_83C]
LDRD            R4, R5, [SP,#0x844+var_83C]
LDR             R10, [SP,#0x844+var_818]
LDR             R11, [SP,#0x844+var_81C]

loc_32354
LDR             R1, [R2],#4
ADD             R12, LR, #1
LDR             R6, [R3],#-4
MVN             R7, LR
CMP             R11, R12
ADD             R9, R7, R11
AND             LR, R9, #7
UMLAL           R4, R5, R1, R6
MOV             R0, R4
MOV             R1, R5
BLE             loc_324AC
CMP             LR, #0
BEQ             loc_3242C
CMP             LR, #1
BEQ             loc_32414
CMP             LR, #2
BEQ             loc_32404
CMP             LR, #3
BEQ             loc_323F4
CMP             LR, #4
BEQ             loc_323E4
CMP             LR, #5
BEQ             loc_323D4
CMP             LR, #6
LDRNE           R4, [R3],#-4
ADDNE           R12, R12, #1
LDRNE           LR, [R2],#4
ADD             R12, R12, #1
LDR             R8, [R3],#-4
UMLALNE         R0, R1, LR, R4
LDR             R4, [R2],#4
UMLAL           R0, R1, R4, R8

loc_323D4
LDR             R5, [R3],#-4
ADD             R12, R12, #1
LDR             R6, [R2],#4
UMLAL           R0, R1, R6, R5

loc_323E4
LDR             R7, [R3],#-4
ADD             R12, R12, #1
LDR             R9, [R2],#4
UMLAL           R0, R1, R9, R7

loc_323F4
LDR             R8, [R3],#-4
ADD             R12, R12, #1
LDR             LR, [R2],#4
UMLAL           R0, R1, LR, R8

loc_32404
LDR             R4, [R3],#-4
ADD             R12, R12, #1
LDR             R5, [R2],#4
UMLAL           R0, R1, R5, R4

loc_32414
LDR             R6, [R3],#-4
ADD             R12, R12, #1
LDR             R7, [R2],#4
CMP             R11, R12
UMLAL           R0, R1, R7, R6
BLE             loc_324AC

loc_3242C
MOV             R8, R12

loc_32430
MOV             R9, R2
MOV             LR, R3
LDR             R6, [R9],#4
SUB             R3, R3, #0x20 ; ' '
LDR             R7, [LR],#-4
ADD             R2, R2, #0x20 ; ' '
LDR             R12, [R3,#0x18]
ADD             R8, R8, #8
LDR             R4, [R9]
CMP             R11, R8
LDR             R5, [LR]
UMLAL           R0, R1, R6, R7
LDR             LR, [R2,#-0x18]
LDR             R7, [R3,#0x14]
LDR             R9, [R2,#-0x14]
LDR             R6, [R3,#0x10]
UMLAL           R0, R1, R4, R5
LDR             R5, [R2,#-0x10]
LDR             R4, [R3,#0xC]
UMLAL           R0, R1, LR, R12
LDR             LR, [R2,#-0xC]
LDR             R12, [R3,#8]
UMLAL           R0, R1, R9, R7
LDR             R7, [R2,#-8]
LDR             R9, [R3,#4]
UMLAL           R0, R1, R5, R6
LDR             R6, [R2,#-4]
UMLAL           R0, R1, LR, R4
UMLAL           R0, R1, R7, R12
UMLAL           R0, R1, R6, R9
BGT             loc_32430

loc_324AC
ADDS            R3, R0, R0
LDR             R0, [SP,#0x844+var_844]
LDR             R8, [SP,#0x844+var_844+4]
ADC             R2, R1, R1
ADDS            R1, R0, R3
ADC             R5, R8, R2
STR             R1, [SP,#0x844+var_844]
STR             R5, [SP,#0x844+var_844+4]

loc_324CC
TST             R10, #1
BNE             loc_32904
LDR             R4, [SP,#0x844+var_828]
MOV             R0, R10,ASR#1
MOV             R2, #0
LDR             R5, [SP,#0x844+var_830]
MOV             R3, #0
LDR             R9, [SP,#0x844+var_82C]
LDR             LR, [R4,R0,LSL#2]
ADD             R10, R10, #1
LDRD            R0, R1, [SP,#0x844+var_844]
CMP             R5, R10
STRD            R2, R3, [SP,#0x844+var_844]
UMLAL           R0, R1, LR, LR
MOV             R12, R0,LSR#28
MOV             R2, R1,LSR#28
STR             R12, [SP,#0x844+var_844]
BIC             R7, R0, #0xF0000000
LDR             R6, [SP,#0x844+var_844]
STR             R7, [R9],#4
STR             R2, [SP,#0x844+var_844+4]
STR             R9, [SP,#0x844+var_82C]
ORR             R3, R6, R1,LSL#4
STR             R3, [SP,#0x844+var_844]
BNE             loc_32098

loc_32530
LDR             R11, [SP,#0x844+var_830]
LDR             R3, [SP,#0x844+var_814]
LDR             R1, [SP,#0x844+var_808]
SUB             R10, R11, #7
CMP             R10, #1
STR             R1, [R3]
MOVLE           R0, #0
LDRLE           R3, [SP,#0x844+s]
BLE             loc_32750
LDR             R0, [SP,#0x844+s]
ADD             R8, SP, #0x844+var_790
LDR             R5, [SP,#0x844+var_804]
CMP             R10, #9
PLD             [R8]
ADD             R2, SP, #0x844+var_770
ADD             R3, R0, #0x20 ; ' '
LDR             R4, [SP,#0x844+var_830]
BIC             R12, R5, #0xF0000000
ADD             R1, R3, #0x20 ; ' '
STR             R12, [R3,#-0x20]
MOV             R0, #8
LDR             R9, [SP,#0x844+var_800]
SUB             LR, R4, #9
UBFX            R7, LR, #3, #1
BIC             R6, R9, #0xF0000000
STR             R6, [R3,#-0x1C]
LDR             R11, [SP,#0x844+var_7FC]
BIC             R8, R11, #0xF0000000
STR             R8, [R3,#-0x18]
LDR             R5, [SP,#0x844+var_7F8]
BIC             R4, R5, #0xF0000000
STR             R4, [R3,#-0x14]
LDR             LR, [SP,#0x844+var_7F4]
BIC             R12, LR, #0xF0000000
STR             R12, [R3,#-0x10]
LDR             R9, [SP,#0x844+var_7F0]
BIC             R6, R9, #0xF0000000
STR             R6, [R3,#-0xC]
LDR             R11, [SP,#0x844+var_7EC]
BIC             R8, R11, #0xF0000000
STR             R8, [R3,#-8]
LDR             R5, [SP,#0x844+var_7E8]
BIC             R4, R5, #0xF0000000
STR             R4, [R3,#-4]
BLE             loc_32750
CMP             R7, #0
BEQ             loc_32668
LDR             R7, [R2,#-0x74]
CMP             R10, #0x11
PLD             [R2]
MOV             R3, R1
MOV             R0, #0x10
ADD             R1, R1, #0x20 ; ' '
BIC             LR, R7, #0xF0000000
STR             LR, [R1,#-0x40]
LDR             R12, [R2,#-0x70]
BIC             R9, R12, #0xF0000000
STR             R9, [R1,#-0x3C]
LDR             R6, [R2,#-0x6C]
BIC             R11, R6, #0xF0000000
STR             R11, [R1,#-0x38]
LDR             R8, [R2,#-0x68]
BIC             R5, R8, #0xF0000000
STR             R5, [R1,#-0x34]
LDR             R4, [R2,#-0x64]
BIC             R7, R4, #0xF0000000
STR             R7, [R1,#-0x30]
LDR             LR, [R2,#-0x60]
BIC             R12, LR, #0xF0000000
STR             R12, [R1,#-0x2C]
LDR             R9, [R2,#-0x5C]
BIC             R6, R9, #0xF0000000
STR             R6, [R1,#-0x28]
LDR             R11, [R2,#-0x58]
ADD             R2, SP, #0x844+var_750
BIC             R8, R11, #0xF0000000
STR             R8, [R1,#-0x24]
BLE             loc_32750

loc_32668
LDR             R5, [R2,#-0x74]
ADD             R7, R2, #0x20 ; ' '
PLD             [R2]
ADD             R12, R0, #0x11
PLD             [R7]
CMP             R10, R12
BIC             R4, R5, #0xF0000000
ADD             R3, R1, #0x20 ; ' '
STR             R4, [R1,#-0x20]
ADD             R0, R0, #0x10
LDR             LR, [R2,#-0x70]
ADD             R2, R2, #0x40 ; '@'
BIC             R9, LR, #0xF0000000
STR             R9, [R1,#-0x1C]
LDR             R6, [R2,#-0xAC]
BIC             R11, R6, #0xF0000000
STR             R11, [R1,#-0x18]
LDR             R8, [R2,#-0xA8]
BIC             R5, R8, #0xF0000000
STR             R5, [R1,#-0x14]
LDR             R4, [R2,#-0xA4]
BIC             LR, R4, #0xF0000000
STR             LR, [R1,#-0x10]
LDR             R12, [R2,#-0xA0]
BIC             R9, R12, #0xF0000000
STR             R9, [R1,#-0xC]
LDR             R6, [R2,#-0x9C]
BIC             R11, R6, #0xF0000000
STR             R11, [R1,#-8]
LDR             R8, [R2,#-0x98]
BIC             R5, R8, #0xF0000000
STR             R5, [R1,#-4]
ADD             R1, R3, #0x20 ; ' '
LDR             R4, [R7,#-0x74]
BIC             LR, R4, #0xF0000000
STR             LR, [R3,#-0x20]
LDR             R12, [R7,#-0x70]
BIC             R9, R12, #0xF0000000
STR             R9, [R3,#-0x1C]
LDR             R6, [R7,#-0x6C]
BIC             R11, R6, #0xF0000000
STR             R11, [R3,#-0x18]
LDR             R8, [R7,#-0x68]
BIC             R5, R8, #0xF0000000
STR             R5, [R3,#-0x14]
LDR             R4, [R7,#-0x64]
BIC             LR, R4, #0xF0000000
STR             LR, [R3,#-0x10]
LDR             R12, [R7,#-0x60]
BIC             R9, R12, #0xF0000000
STR             R9, [R3,#-0xC]
LDR             R6, [R7,#-0x5C]
BIC             R11, R6, #0xF0000000
STR             R11, [R3,#-8]
LDR             R7, [R7,#-0x58]
BIC             R8, R7, #0xF0000000
STR             R8, [R3,#-4]
BGT             loc_32668

loc_32750
ADD             R10, SP, #0x844+var_804
LDR             R4, [SP,#0x844+var_830]
ADD             R2, R10, R0,LSL#2
ADD             R1, R0, #1
MVN             R0, R0
LDR             R5, [R2],#4
CMP             R4, R1
ADD             LR, R0, R4
MOVLE           R2, R4
AND             R9, LR, #7
BIC             R12, R5, #0xF0000000
STR             R12, [R3],#4
BLE             loc_328BC
CMP             R9, #0
BEQ             loc_32838
CMP             R9, #1
BEQ             loc_32818
CMP             R9, #2
BEQ             loc_32808
CMP             R9, #3
BEQ             loc_327F8
CMP             R9, #4
BEQ             loc_327E8
CMP             R9, #5
BEQ             loc_327D8
CMP             R9, #6
LDRNE           R9, [R2],#4
ADDNE           R1, R1, #1
ADD             R1, R1, #1
LDR             R6, [R2],#4
BICNE           R9, R9, #0xF0000000
STRNE           R9, [R3],#4
BIC             R11, R6, #0xF0000000
STR             R11, [R3],#4

loc_327D8
LDR             R7, [R2],#4
ADD             R1, R1, #1
BIC             R8, R7, #0xF0000000
STR             R8, [R3],#4

loc_327E8
LDR             R10, [R2],#4
ADD             R1, R1, #1
BIC             R0, R10, #0xF0000000
STR             R0, [R3],#4

loc_327F8
LDR             R5, [R2],#4
ADD             R1, R1, #1
BIC             R4, R5, #0xF0000000
STR             R4, [R3],#4

loc_32808
LDR             LR, [R2],#4
ADD             R1, R1, #1
BIC             R9, LR, #0xF0000000
STR             R9, [R3],#4

loc_32818
LDR             R12, [SP,#0x844+var_830]
ADD             R1, R1, #1
LDR             R6, [R2],#4
CMP             R12, R1
BIC             R11, R6, #0xF0000000
MOVLE           R2, R12
STR             R11, [R3],#4
BLE             loc_328BC

loc_32838
MOV             R7, R2
LDR             LR, [R2,#4]
LDR             R8, [R7],#4
MOV             R9, R3
LDR             R5, [R2,#0xC]
ADD             R1, R1, #8
BIC             R12, LR, #0xF0000000
LDR             R10, [SP,#0x844+var_830]
BIC             R6, R8, #0xF0000000
LDR             R0, [R7,#4]
STR             R6, [R9],#4
BIC             R11, R5, #0xF0000000
STR             R12, [R9]
CMP             R10, R1
LDR             R4, [R2,#0x10]
BIC             R7, R0, #0xF0000000
LDR             R8, [R2,#0x14]
ADD             R3, R3, #0x20 ; ' '
LDR             R9, [R2,#0x18]
ADD             R2, R2, #0x20 ; ' '
LDR             R5, [R2,#-4]
BIC             R10, R4, #0xF0000000
BIC             LR, R8, #0xF0000000
STR             R7, [R3,#-0x18]
BIC             R6, R9, #0xF0000000
STR             R11, [R3,#-0x14]
STR             R10, [R3,#-0x10]
BIC             R0, R5, #0xF0000000
STR             LR, [R3,#-0xC]
STR             R6, [R3,#-8]
STR             R0, [R3,#-4]
BGT             loc_32838
LDR             R2, [SP,#0x844+var_830]

loc_328BC
LDR             R3, [SP,#0x844+s]
MOV             R11, R2
ADD             R1, R3, R2,LSL#2
STR             R1, [SP,#0x844+s]

loc_328CC
LDR             R4, [SP,#0x844+var_80C]
CMP             R11, R4
BGE             loc_328EC
SUB             R12, R4, R11
LDR             R0, [SP,#0x844+s] ; s
MOV             R2, R12,LSL#2 ; n
MOV             R1, #0  ; c
BL              memset

loc_328EC
LDR             R0, [SP,#0x844+var_814]
BL              sub_29BBC
MOV             R0, #0

loc_328F8
ADD             SP, SP, #0x840
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_32904
LDRD            R0, R1, [SP,#0x844+var_844]
ADD             R10, R10, #1
LDR             R12, [SP,#0x844+var_830]
LDR             R8, [SP,#0x844+var_82C]
MOV             LR, R0,LSR#28
MOV             R9, R1,LSR#28
ORR             R3, LR, R1,LSL#4
CMP             R12, R10
BIC             R1, R0, #0xF0000000
STR             R9, [SP,#0x844+var_844+4]
STR             R1, [R8],#4
STR             R3, [SP,#0x844+var_844]
STR             R8, [SP,#0x844+var_82C]
BNE             loc_32098
B               loc_32530

loc_32940
MOV             LR, #0
MOV             R0, #0
MOV             R1, #0
STRD            R0, R1, [SP,#0x844+var_83C]

loc_32950
MOV             R4, R0
MOV             R5, R1
B               loc_32354

loc_3295C
MOV             R0, R1
MOV             R1, R5
BL              sub_2BA48
CMP             R0, #0
BNE             loc_328F8
LDR             R3, [R4]
LDR             R6, [SP,#0x844+var_830]
STR             R3, [SP,#0x844+var_824]
MOV             R0, R3,LSL#1
STR             R0, [SP,#0x844+var_808]
B               loc_32050

loc_32988
LDRD            R4, R5, [SP,#0x844+var_83C]
B               loc_32354

loc_32990
LDR             R9, [SP,#0x844+var_814]
MOV             R11, #0
LDR             R10, [SP,#0x844+var_808]
STR             R11, [SP,#0x844+var_830]
STR             R10, [R9]
B               loc_328CC
; End of function sub_32018




; int __fastcall sub_329A8(int *, int *)
sub_329A8
CMP             R1, R0
PUSH            {R4,LR}
MOV             R4, R1
BEQ             loc_329C4
BL              sub_2A25C
CMP             R0, #0
POPNE           {R4,PC}

loc_329C4
MOV             R0, #0
STR             R0, [R4,#8]
POP             {R4,PC}
; End of function sub_329A8




; int __fastcall sub_329D0(int *, int, int *, int *)
sub_329D0

var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUBS            R4, R1, #0
SUB             SP, SP, #0x14
MOV             R11, R2
MOV             R5, R3
BLE             loc_32D1C
MOV             R1, R2
MOV             R6, R0
BL              sub_2A25C
SUBS            R3, R0, #0
STR             R3, [SP,#0x14+var_10]
BNE             loc_32A24
CMP             R5, #0
BEQ             loc_32A30
MOV             R2, R5
MOV             R0, R6
MOV             R1, R4
BL              sub_33984
CMP             R0, #0
BEQ             loc_32A30
STR             R0, [SP,#0x14+var_10]

loc_32A24
LDR             R0, [SP,#0x14+var_10]
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_32A30
CMP             R4, #0x1B
MOVLE           R5, R4,ASR#31
BGT             loc_32D44

loc_32A3C
MOV             R0, #0x92492493
SMULL           R2, R3, R4, R0
ADD             R7, R4, R3
RSB             R8, R5, R7,ASR#4
RSB             R9, R8, R8,LSL#3
SUBS            R1, R4, R9,LSL#2
BEQ             loc_32D08
LDR             R12, [R11]
RSB             R4, R1, #0x1C
LDR             LR, [R11,#0xC]
SUBS            R10, R12, #1
SUB             R6, R12, #0xC0000001
ADD             R0, LR, R6,LSL#2
BMI             loc_32D08
SUB             R3, R12, #2
CMP             R3, #6
MOV             R2, #0xFFFFFFFF
MVN             LR, R2,LSL R1
BLE             loc_32D68
SUB             R5, R12, #9
MOV             R2, #0
SUB             R3, R0, #0x20 ; ' '
AND             R0, R5, #7
STR             R0, [SP,#0x14+var_C]
STR             R11, [SP,#0x14+var_8]

loc_32AA4
LDR             R8, [R3,#0x1C]
MOV             R2, R2,LSL R4
LDR             R0, [R3,#0x20]
SUB             R10, R10, #8
LDR             R11, [SP,#0x14+var_C]
LDR             R7, [R3,#0x18]
LDR             R6, [R3,#0x14]
CMP             R11, R10
AND             R11, LR, R8
MOV             R8, R8,LSR R1
ORR             R2, R2, R0,LSR R1
LDR             R5, [R3,#0x10]
MOV             R9, R7,LSR R1
AND             R0, R0, LR
LDR             R12, [R3,#8]
ORR             R0, R8, R0,LSL R4
ORR             R11, R9, R11,LSL R4
LDR             R8, [R3,#4]
MOV             R9, R6,LSR R1
STR             R0, [R3,#0x1C]
AND             R7, R7, LR
LDR             R0, [R3,#0xC]
ORR             R7, R9, R7,LSL R4
STR             R2, [R3,#0x20]
MOV             R2, R5,LSR R1
LDR             R9, [R3,#0xC]
AND             R6, R6, LR
STR             R11, [R3,#0x18]
ORR             R6, R2, R6,LSL R4
MOV             R11, R0,LSR R1
MOV             R2, R12,LSR R1
MOV             R0, R8,LSR R1
STR             R7, [R3,#0x14]
AND             R5, R5, LR
PLD             [R3,#-0x30]
AND             R7, LR, R9
AND             R12, R12, LR
ORR             R5, R11, R5,LSL R4
ORR             R12, R0, R12,LSL R4
ORR             R11, R2, R7,LSL R4
STR             R6, [R3,#0x10]
STR             R5, [R3,#0xC]
MOV             R0, R3
STR             R11, [R3,#8]
AND             R2, LR, R8
STR             R12, [R3,#4]
SUB             R3, R3, #0x20 ; ' '
BNE             loc_32AA4
LDR             R11, [SP,#0x14+var_8]

loc_32B68
ADD             R8, R10, #1
ANDS            R9, R8, #7
BEQ             loc_32C54
CMP             R9, #1
BEQ             loc_32C34
CMP             R9, #2
BEQ             loc_32C1C
CMP             R9, #3
BEQ             loc_32C04
CMP             R9, #4
BEQ             loc_32BEC
CMP             R9, #5
BEQ             loc_32BD4
CMP             R9, #6
BEQ             loc_32BBC
LDR             R7, [R0]
SUB             R10, R10, #1
MOV             R6, R7,LSR R1
ORR             R5, R6, R2,LSL R4
AND             R2, LR, R7
STR             R5, [R0],#-4

loc_32BBC
LDR             R12, [R0]
SUB             R10, R10, #1
MOV             R3, R12,LSR R1
ORR             R8, R3, R2,LSL R4
AND             R2, LR, R12
STR             R8, [R0],#-4

loc_32BD4
LDR             R9, [R0]
SUB             R10, R10, #1
MOV             R7, R9,LSR R1
ORR             R6, R7, R2,LSL R4
AND             R2, LR, R9
STR             R6, [R0],#-4

loc_32BEC
LDR             R5, [R0]
SUB             R10, R10, #1
MOV             R12, R5,LSR R1
ORR             R3, R12, R2,LSL R4
AND             R2, LR, R5
STR             R3, [R0],#-4

loc_32C04
LDR             R8, [R0]
SUB             R10, R10, #1
MOV             R9, R8,LSR R1
ORR             R7, R9, R2,LSL R4
AND             R2, LR, R8
STR             R7, [R0],#-4

loc_32C1C
LDR             R6, [R0]
SUB             R10, R10, #1
MOV             R5, R6,LSR R1
ORR             R12, R5, R2,LSL R4
AND             R2, LR, R6
STR             R12, [R0],#-4

loc_32C34
LDR             R8, [R0]
SUB             R10, R10, #1
CMN             R10, #1
MOV             R3, R8,LSR R1
ORR             R9, R3, R2,LSL R4
AND             R2, LR, R8
STR             R9, [R0],#-4
BEQ             loc_32D08

loc_32C54
LDR             R7, [R0]
MOV             R12, R0
SUB             R10, R10, #8
SUB             R0, R0, #0x20 ; ' '
CMN             R10, #1
AND             R5, LR, R7
MOV             R6, R7,LSR R1
ORR             R8, R6, R2,LSL R4
STR             R8, [R12],#-4
LDR             R3, [R0,#0x1C]
AND             R9, LR, R3
MOV             R2, R3,LSR R1
ORR             R7, R2, R5,LSL R4
STR             R7, [R0,#0x1C]
LDR             R5, [R12,#-4]
AND             R8, LR, R5
MOV             R6, R5,LSR R1
ORR             R3, R6, R9,LSL R4
STR             R3, [R12,#-4]
LDR             R9, [R0,#0x14]
LDR             R5, [R0,#0x10]
LDR             R12, [R0,#0xC]
LDR             R2, [R0,#8]
LDR             R3, [R0,#4]
MOV             R7, R9,LSR R1
MOV             R6, R5,LSR R1
AND             R9, R9, LR
ORR             R8, R7, R8,LSL R4
AND             R5, R5, LR
ORR             R7, R6, R9,LSL R4
MOV             R9, R12,LSR R1
STR             R8, [R0,#0x14]
MOV             R6, R3,LSR R1
MOV             R8, R2,LSR R1
AND             R12, R12, LR
AND             R2, R2, LR
STR             R7, [R0,#0x10]
ORR             R5, R9, R5,LSL R4
ORR             R7, R6, R2,LSL R4
ORR             R12, R8, R12,LSL R4
STR             R5, [R0,#0xC]
AND             R2, LR, R3
STR             R12, [R0,#8]
STR             R7, [R0,#4]
BNE             loc_32C54

loc_32D08
MOV             R0, R11
BL              sub_29BBC
LDR             R0, [SP,#0x14+var_10]
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_32D1C
MOV             R1, R2
BL              sub_2A25C
CMP             R5, #0
STR             R0, [SP,#0x14+var_10]
BEQ             loc_32A24
MOV             R0, R5
BL              sub_2EB8C
LDR             R0, [SP,#0x14+var_10]
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_32D44
MOVW            R2, #0x2493
MOV             R5, R4,ASR#31
MOVT            R2, #0x9249
SMULL           R2, R3, R4, R2
MOV             R0, R11
ADD             R1, R4, R3
RSB             R1, R5, R1,ASR#4
BL              sub_2E5A0
B               loc_32A3C

loc_32D68
MOV             R2, #0
B               loc_32B68
; End of function sub_329D0




; int __fastcall sub_32D70(int, unsigned int, int *, int *)
sub_32D70

var_24= -0x24
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUBS            R6, R1, #0
SUB             SP, SP, #0x24
BEQ             loc_32FC4
CMP             R6, #1
MOV             R4, R3
MOV             R5, R2
MOV             R7, R0
BEQ             loc_32DA0
LDR             R1, [R0]
CMP             R1, #0
BNE             loc_32DD0

loc_32DA0
CMP             R4, #0
MOVNE           R3, #0
STRNE           R3, [R4]
CMP             R5, #0
BEQ             loc_32E98
MOV             R1, R5
MOV             R0, R7
BL              sub_2A25C
MOV             R8, R0

loc_32DC4
MOV             R0, R8
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_32DD0
SUB             R3, R6, #1
ANDS            R8, R3, R6
MOVEQ           R2, #1
BNE             loc_32EA8

loc_32DE0
ADD             R8, R8, #1
CMP             R8, #0x1C
MOV             R0, R8
BEQ             loc_32EA8
CMP             R6, R2,LSL R8
BEQ             loc_32E58
ADD             R8, R8, #1
CMP             R6, R2,LSL R8
BEQ             loc_32E58
ADD             R8, R0, #2
CMP             R6, R2,LSL R8
BEQ             loc_32E58
ADD             R8, R0, #3
CMP             R6, R2,LSL R8
BEQ             loc_32E58
ADD             R8, R0, #4
CMP             R6, R2,LSL R8
BEQ             loc_32E58
ADD             R8, R0, #5
CMP             R6, R2,LSL R8
BEQ             loc_32E58
ADD             R8, R0, #6
CMP             R6, R2,LSL R8
BEQ             loc_32E58
ADD             R8, R0, #7
CMP             R6, R2,LSL R8
BEQ             loc_32E58
ADD             R8, R0, #8
CMP             R6, R2,LSL R8
BNE             loc_32DE0

loc_32E58
CMP             R4, #0
BEQ             loc_32E74
LDR             R11, [R7,#0xC]
MOV             R9, #0xFFFFFFFF
LDR             R2, [R11]
BIC             R10, R2, R9,LSL R8
STR             R10, [R4]

loc_32E74
CMP             R5, #0
BEQ             loc_32E98
MOV             R1, R8
MOV             R2, R5
MOV             R0, R7
MOV             R3, #0
BL              sub_329D0
MOV             R8, R0
B               loc_32DC4

loc_32E98
MOV             R8, #0
MOV             R0, R8
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_32EA8
CMP             R6, #3
BEQ             loc_32F98
ADD             R0, SP, #0x24+var_14
BL              sub_2BB58
SUBS            R8, R0, #0
BNE             loc_32DC4
LDR             R10, [R7]
LDR             R1, [R7,#8]
CMP             R10, #1
STR             R10, [SP,#0x24+var_14]
STR             R1, [SP,#0x24+var_C]
MOVMI           R6, #0
BMI             loc_32F68
LDR             R11, [R7,#0xC]
MOV             R2, R10,LSL#2
LDR             R12, [SP,#0x24+var_8]
MOV             R0, R6
MOV             R1, #0
STR             R5, [SP,#0x24+var_1C]
STR             R4, [SP,#0x24+var_18]
MOV             R6, #0
MOV             R7, #0
ADD             R9, R11, R2
ADD             R10, R12, R2
MOV             R4, R0
MOV             R5, R1
STRD            R0, R1, [SP,#0x24+var_24]

loc_32F14
LDR             LR, [R9,#-4]!
MOV             R7, R7,LSL#28
MOV             R2, R4
ORR             R7, R7, R6,LSR#4
MOV             R3, R5
ORR             R6, LR, R6,LSL#28
CMP             R7, R5
MOV             R1, R7
CMPEQ           R6, R4
MOV             R0, R6
BCC             loc_32FB0
BLX             sub_34E18
UMULL           R2, R3, R0, R4
STR             R0, [R10,#-4]!
MLA             R0, R0, R5, R3
SUBS            R6, R6, R2
SBC             R7, R7, R0
CMP             R9, R11
BNE             loc_32F14

loc_32F60
LDR             R5, [SP,#0x24+var_1C]
LDR             R4, [SP,#0x24+var_18]

loc_32F68
CMP             R4, #0
STRNE           R6, [R4]
CMP             R5, #0
BEQ             loc_32F8C
ADD             R0, SP, #0x24+var_14
BL              sub_29BBC
MOV             R1, R5
ADD             R0, SP, #0x24+var_14
BL              sub_2AAD4

loc_32F8C
ADD             R0, SP, #0x24+var_14
BL              sub_29D74
B               loc_32DC4

loc_32F98
MOV             R2, R4
MOV             R1, R5
MOV             R0, R7
BL              sub_34968
MOV             R8, R0
B               loc_32DC4

loc_32FB0
CMP             R9, R11
MOV             R3, #0
STR             R3, [R10,#-4]!
BNE             loc_32F14
B               loc_32F60

loc_32FC4
MOV             R8, #0xFFFFFFFD
B               loc_32DC4
; End of function sub_32D70




; int __fastcall sub_32FCC(int *)
sub_32FCC
LDR             R12, [R0]
CMP             R12, #1
BLE             loc_33108
SUB             R2, R12, #1
LDR             R3, [R0,#0xC]
ANDS            R0, R2, #7
MOV             R1, #1
BEQ             loc_33094
CMP             R0, R1
BEQ             loc_3307C
CMP             R0, #2
BEQ             loc_3306C
CMP             R0, #3
BEQ             loc_3305C
CMP             R0, #4
BEQ             loc_3304C
CMP             R0, #5
BEQ             loc_3303C
CMP             R0, #6
BEQ             loc_3302C
LDR             R1, [R3,#4]!
CMN             R1, #0xF0000001
BNE             loc_33108
MOV             R1, #2

loc_3302C
LDR             R2, [R3,#4]!
CMN             R2, #0xF0000001
BNE             loc_33108
ADD             R1, R1, #1

loc_3303C
LDR             R0, [R3,#4]!
CMN             R0, #0xF0000001
BNE             loc_33108
ADD             R1, R1, #1

loc_3304C
LDR             R2, [R3,#4]!
CMN             R2, #0xF0000001
BNE             loc_33108
ADD             R1, R1, #1

loc_3305C
LDR             R0, [R3,#4]!
CMN             R0, #0xF0000001
BNE             loc_33108
ADD             R1, R1, #1

loc_3306C
LDR             R2, [R3,#4]!
CMN             R2, #0xF0000001
BNE             loc_33108
ADD             R1, R1, #1

loc_3307C
LDR             R0, [R3,#4]!
CMN             R0, #0xF0000001
BNE             loc_33108
ADD             R1, R1, #1
CMP             R12, R1
BEQ             loc_33100

loc_33094
LDR             R2, [R3,#4]
ADD             R1, R1, #8
CMN             R2, #0xF0000001
BNE             loc_33108
LDR             R0, [R3,#8]
CMN             R0, #0xF0000001
BNE             loc_33108
LDR             R2, [R3,#0xC]
CMN             R2, #0xF0000001
BNE             loc_33108
LDR             R0, [R3,#0x10]
CMN             R0, #0xF0000001
BNE             loc_33108
LDR             R2, [R3,#0x14]
CMN             R2, #0xF0000001
BNE             loc_33108
LDR             R0, [R3,#0x18]
CMN             R0, #0xF0000001
BNE             loc_33108
LDR             R2, [R3,#0x1C]
CMN             R2, #0xF0000001
BNE             loc_33108
LDR             R0, [R3,#0x20]!
CMN             R0, #0xF0000001
BNE             loc_33108
CMP             R12, R1
BNE             loc_33094

loc_33100
MOV             R0, #1
BX              LR

loc_33108
MOV             R0, #0
BX              LR
; End of function sub_32FCC




; int __fastcall sub_33110(int *, int *, unsigned int)
sub_33110

var_44= -0x44
var_38= -0x38
var_34= -0x34
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x44
STR             R1, [SP,#0x44+var_14]
MOV             R6, R2
LDR             R1, [R1]
LDR             R3, [R0,#4]
STR             R0, [SP,#0x44+var_1C]
STR             R1, [SP,#0x44+var_20]
MOV             R1, R1,LSL#1
CMP             R3, R1
BLT             loc_3362C

loc_3313C
LDR             R0, [SP,#0x44+var_20]
MOV             R7, #0
STR             R6, [SP,#0x44+var_24]
SUB             R2, R0, #7
ADD             R5, R0, #1
CMP             R0, #0x80000007
CMPGE           R2, #1
MOV             R4, R0,LSL#2
STR             R2, [SP,#0x44+var_28]
MOVGT           R2, #1
MOVLE           R2, #0
STR             R4, [SP,#0x44+var_10]
STR             R2, [SP,#0x44+var_8]
STR             R5, [SP,#0x44+var_C]

loc_33174
LDR             R8, [SP,#0x44+var_1C]
LDR             R9, [SP,#0x44+var_20]
LDR             R10, [SP,#0x44+var_10]
LDR             R12, [R8,#0xC]
CMP             R9, #0
ADD             LR, R12, R10
STR             LR, [SP,#0x44+var_18]
BLE             loc_33600
LDR             R11, [SP,#0x44+var_8]
CMP             R11, #0
BEQ             loc_3360C
ADD             R2, LR, #0x20 ; ' '
LDR             LR, [SP,#0x44+var_24]
MOV             R0, #0
ADD             R11, R12, #0x20 ; ' '
MOV             R4, R0
STR             R0, [SP,#0x44+var_38]

loc_331B8
LDR             R1, [R11,#-0x20]
MOV             R0, R4
LDR             R4, [R2,#-0x20]
MOV             R6, #0
ADD             R12, R2, #0x20 ; ' '
ADD             R3, R11, #0x20 ; ' '
ADDS            R0, R0, R1
PLD             [R12]
ADC             R1, R6, #0
PLD             [R3]
UMLAL           R0, R1, LR, R4
LDR             R5, [R11,#-0x1C]
LDR             R9, [R11,#-0x18]
STR             R3, [SP,#0x44+var_2C]
MOV             R4, R5
MOV             R5, #0
BIC             R8, R0, #0xF0000000
MOV             R0, R0,LSR#28
STR             R8, [R11,#-0x20]
LDR             R10, [R2,#-0x1C]
ORR             R8, R0, R1,LSL#4
MOV             R0, R9
MOV             R1, #0
UMLAL           R4, R5, R10, LR
STRD            R4, R5, [SP,#0x44+var_44]
MOV             R5, #0
LDR             R4, [R11,#-0x14]
STRD            R4, R5, [SP,#0x44+var_34]
LDR             R4, [SP,#0x44+var_44]
ADDS            R5, R4, R8
LDR             R8, [SP,#0x44+var_44+4]
BIC             R9, R5, #0xF0000000
MOV             R10, R5,LSR#28
STR             R9, [R11,#-0x1C]
LDR             R4, [R2,#-0x18]
ADC             R3, R8, R7
LDR             R5, [R11,#-0x10]
ORR             R10, R10, R3,LSL#4
UMLAL           R0, R1, R4, LR
MOV             R8, R0
MOV             R9, R1
MOV             R0, R5
MOV             R1, #0
STRD            R0, R1, [SP,#0x44+var_44]
ADDS            R1, R8, R10
BIC             R0, R1, #0xF0000000
ADC             R6, R9, R7
STR             R0, [R11,#-0x18]
MOV             R3, R1,LSR#28
LDR             R10, [R2,#-0x14]
MOV             R1, #0
LDRD            R8, R9, [SP,#0x44+var_34]
ORR             R3, R3, R6,LSL#4
LDR             R0, [R11,#-0xC]
UMLAL           R8, R9, R10, LR
STRD            R0, R1, [SP,#0x44+var_34]
LDR             R0, [R11,#-8]
ADDS            R8, R8, R3
MOV             R6, R8,LSR#28
BIC             R1, R8, #0xF0000000
ADC             R9, R9, R7
STR             R1, [R11,#-0x14]
ORR             R3, R6, R9,LSL#4
LDR             R10, [R2,#-0x10]
LDRD            R8, R9, [SP,#0x44+var_44]
MOV             R1, #0
STRD            R0, R1, [SP,#0x44+var_44]
UMLAL           R8, R9, R10, LR
ADDS            R4, R8, R3
BIC             R8, R4, #0xF0000000
ADC             R5, R9, R7
STR             R8, [R11,#-0x10]
MOV             R10, R4,LSR#28
LDR             R1, [R2,#-0xC]
LDRD            R8, R9, [SP,#0x44+var_34]
ORR             R3, R10, R5,LSL#4
LDR             R4, [R11,#-4]
UMLAL           R8, R9, R1, LR
MOV             R0, R8
MOV             R5, R9
MOV             R8, R4
MOV             R9, #0
STRD            R8, R9, [SP,#0x44+var_34]
ADDS            R3, R0, R3
LDR             R10, [SP,#0x44+var_38]
BIC             R4, R3, #0xF0000000
STR             R4, [R11,#-0xC]
ADC             R6, R5, R7
LDR             R1, [R2,#-8]
MOV             R0, R3,LSR#28
ADD             R4, R10, #8
STR             R4, [SP,#0x44+var_38]
ORR             R8, R0, R6,LSL#4
LDRD            R4, R5, [SP,#0x44+var_44]
ADD             R3, R10, #9
MOV             R10, R2
UMLAL           R4, R5, R1, LR
ADDS            R6, R4, R8
MOV             R4, R6,LSR#28
BIC             R2, R6, #0xF0000000
ADC             R9, R5, R7
STR             R2, [R11,#-8]
ORR             R8, R4, R9,LSL#4
LDR             R1, [R10,#-4]
LDRD            R4, R5, [SP,#0x44+var_34]
MOV             R2, R12
LDR             R6, [SP,#0x44+var_28]
MOV             R12, R11
UMLAL           R4, R5, R1, LR
ADDS            R11, R4, R8
ADC             R5, R5, R7
MOV             R0, R11,LSR#28
CMP             R6, R3
BIC             R3, R11, #0xF0000000
ORR             R4, R0, R5,LSL#4
STR             R3, [R12,#-4]
LDR             R11, [SP,#0x44+var_2C]
BGT             loc_331B8
LDR             R9, [SP,#0x44+var_38]

loc_33394
LDR             R8, [R10],#4
MOV             R5, #0
LDR             R3, [SP,#0x44+var_24]
ADD             LR, R9, #1
LDR             R11, [R12]
MVN             R2, R9
LDR             R1, [SP,#0x44+var_20]
UMLAL           R4, R5, R3, R8
ADD             R0, R2, R1
AND             R6, R0, #3
ADDS            R4, R4, R11
ADC             R5, R5, #0
MOV             R8, R4,LSR#28
CMP             R1, LR
BIC             R9, R4, #0xF0000000
ORR             R2, R8, R5,LSL#4
STR             R9, [R12],#4
BLE             loc_33574
CMP             R6, #0
BEQ             loc_335F0
CMP             R6, #1
BEQ             loc_33458
CMP             R6, #2
BEQ             loc_33424
LDR             R1, [R10],#4
MOV             R8, R2
MOV             R9, #0
LDR             R2, [R12]
ADD             LR, LR, #1
UMLAL           R8, R9, R3, R1
ADDS            R6, R8, R2
MOV             R4, R6,LSR#28
ADC             R11, R9, #0
BIC             R3, R6, #0xF0000000
ORR             R2, R4, R11,LSL#4
STR             R3, [R12],#4

loc_33424
LDR             R9, [R10],#4
MOV             R4, R2
LDR             R0, [SP,#0x44+var_24]
MOV             R5, #0
LDR             R8, [R12]
ADD             LR, LR, #1
UMLAL           R4, R5, R0, R9
ADDS            R6, R4, R8
MOV             R1, R6,LSR#28
BIC             R2, R6, #0xF0000000
ADC             R5, R5, #0
STR             R2, [R12],#4
ORR             R2, R1, R5,LSL#4

loc_33458
LDR             R11, [R10],#4
MOV             R0, R2
LDR             R4, [SP,#0x44+var_24]
MOV             R1, #0
LDR             R3, [R12]
ADD             LR, LR, #1
UMLAL           R0, R1, R4, R11
ADDS            R9, R0, R3
LDR             R0, [SP,#0x44+var_20]
ADC             R8, R1, #0
MOV             R6, R9,LSR#28
BIC             R5, R9, #0xF0000000
CMP             R0, LR
STR             R5, [R12],#4
ORR             R2, R6, R8,LSL#4
BLE             loc_33574
LDR             R6, [SP,#0x44+var_20]
LDR             R4, [SP,#0x44+var_24]
STR             R10, [SP,#0x44+var_44]

loc_334A4
LDR             R9, [SP,#0x44+var_44]
MOV             R0, R2
MOV             R1, #0
LDR             R11, [R12]
MOV             R3, R12
ADD             LR, LR, #4
LDR             R10, [R9],#4
ADD             R12, R12, #0x10
UMLAL           R0, R1, R4, R10
ADDS            R8, R0, R11
BIC             R0, R8, #0xF0000000
MOV             R10, R8,LSR#28
STR             R0, [R3],#4
ADC             R5, R1, #0
LDR             R11, [R9]
ORR             R8, R10, R5,LSL#4
MOV             R9, #0
LDR             R5, [R12,#-0xC]
LDR             R1, [R3,#4]
LDR             R10, [SP,#0x44+var_44]
UMLAL           R8, R9, R4, R11
ADD             R11, R10, #0x10
ADDS            R8, R8, R5
BIC             R0, R8, #0xF0000000
MOV             R5, R8,LSR#28
STR             R0, [R3]
ADC             R9, R9, #0
LDR             R3, [SP,#0x44+var_44]
ORR             R2, R5, R9,LSL#4
STR             R11, [SP,#0x44+var_44]
LDR             R5, [R12,#-4]
LDR             R8, [R3,#8]
MOV             R3, #0
UMLAL           R2, R3, R4, R8
ADDS            R2, R2, R1
ADC             R8, R3, #0
LDR             R3, [SP,#0x44+var_44]
BIC             R1, R2, #0xF0000000
MOV             R0, R2,LSR#28
STR             R1, [R12,#-8]
MOV             R1, #0
LDR             R9, [R3,#-4]
ORR             R0, R0, R8,LSL#4
UMLAL           R0, R1, R4, R9
ADDS            R10, R0, R5
ADC             R11, R1, #0
MOV             R5, R10,LSR#28
CMP             R6, LR
BIC             R2, R10, #0xF0000000
STR             R2, [R12,#-4]
ORR             R2, R5, R11,LSL#4
BGT             loc_334A4

loc_33574
LDR             R12, [SP,#0x44+var_18]

loc_33578
LDR             R6, [SP,#0x44+var_1C]
ADD             LR, R12, #4
STR             R2, [R12]
LDR             R8, [SP,#0x44+var_C]
LDR             R4, [R6]
CMP             R4, R8
BLE             loc_335AC
MOV             R0, R8

loc_33598
STR             R7, [LR],#4
ADD             R0, R0, #1
LDR             R1, [R6]
CMP             R1, R0
BGT             loc_33598

loc_335AC
LDR             R9, [SP,#0x44+var_1C]
MOV             R0, R9
BL              sub_29BBC
LDR             R10, [SP,#0x44+var_14]
MOV             R0, R9
MOV             R1, R10
BL              sub_29E8C
CMN             R0, #1
BEQ             loc_33620
MOV             R2, R9
MOV             R1, R10
MOV             R0, R9
BL              sub_307E4
CMP             R0, #0
BEQ             loc_33174
ADD             SP, SP, #0x44 ; 'D'
POP             {R4-R11,PC}

loc_335F0
MOV             R4, R3
LDR             R6, [SP,#0x44+var_20]
STR             R10, [SP,#0x44+var_44]
B               loc_334A4

loc_33600
STR             R12, [SP,#0x44+var_18]
MOV             R2, #0
B               loc_33578

loc_3360C
LDR             R9, [SP,#0x44+var_8]
MOV             R10, LR
MOV             R4, R9
STR             R9, [SP,#0x44+var_38]
B               loc_33394

loc_33620
MOV             R0, #0
ADD             SP, SP, #0x44 ; 'D'
POP             {R4-R11,PC}

loc_3362C
BL              sub_2BA48
CMP             R0, #0
BEQ             loc_3313C
ADD             SP, SP, #0x44 ; 'D'
POP             {R4-R11,PC}
; End of function sub_33110




; int __fastcall sub_33640(int, _DWORD *)
sub_33640
LDR             R3, [R0,#0xC]
LDR             R0, [R3]
RSB             R2, R0, #0x10000000
STR             R2, [R1]
BX              LR
; End of function sub_33640




; int __fastcall sub_33654(int, int, int, int, int, int, int, int, int, char, int, int, int, char, int, int, int, char)
sub_33654

var_8= -8
var_4= -4
varg_r0=  0x18
varg_r1=  0x1C
varg_r2=  0x20
varg_r3=  0x24
arg_0=  0x28
arg_4=  0x2C
arg_8=  0x30
arg_C=  0x34
arg_10=  0x38
arg_14=  0x3C
arg_24=  0x4C
arg_34=  0x5C

PUSH            {R0-R3}
PUSH            {R4-R8,LR}
SUB             SP, SP, #8
ADD             R3, SP, #8+varg_r1
LDR             R8, [SP,#8+varg_r0]
STR             R3, [SP,#8+var_8]
CMP             R8, #0
BEQ             loc_33970
MOV             R0, R8
MOV             R5, #0
B               loc_3369C

loc_33680
LDR             R1, [SP,#8+var_8]
ADD             R5, R5, #1
LDR             R0, [R1]
ADD             R2, R1, #4
STR             R2, [SP,#8+var_8]
CMP             R0, #0
BEQ             loc_33970

loc_3369C
BL              sub_2BAD0
CMP             R0, #0
BEQ             loc_33680
CMP             R5, #0
ADD             R0, SP, #8+varg_r1
STR             R0, [SP,#8+var_4]
SUB             R7, R5, #1
BEQ             loc_3395C
CMP             R7, #7
MOV             R4, R0
BLE             loc_337E0
SUB             R4, R5, #9
ADD             R6, SP, #8+arg_14
TST             R4, #8
BNE             loc_33738
MOV             R0, R8
PLD             [SP,#8+arg_24]
BL              sub_29D74
LDR             R0, [R6,#-0x20]
SUB             R7, R5, #9
BL              sub_29D74
LDR             R0, [R6,#-0x1C]
MOV             R4, R6
BL              sub_29D74
LDR             R0, [R6,#-0x18]
BL              sub_29D74
LDR             R0, [R6,#-0x14]
BL              sub_29D74
LDR             R0, [R6,#-0x10]
BL              sub_29D74
LDR             R0, [R6,#-0xC]
BL              sub_29D74
LDR             R0, [R6,#-8]
BL              sub_29D74
CMP             R7, #7
STR             R6, [SP,#8+var_4]
LDR             R8, [R6,#-4]
ADD             R6, SP, #8+arg_34
BLS             loc_337E0

loc_33738
MOV             R0, R8
PLD             [R6,#0x10]
BL              sub_29D74
LDR             R0, [R6,#-0x20]
ADD             R4, R6, #0x20 ; ' '
BL              sub_29D74
LDR             R0, [R6,#-0x1C]
SUB             R7, R7, #0x10
BL              sub_29D74
LDR             R0, [R6,#-0x18]
BL              sub_29D74
LDR             R0, [R6,#-0x14]
BL              sub_29D74
LDR             R0, [R6,#-0x10]
BL              sub_29D74
LDR             R0, [R6,#-0xC]
BL              sub_29D74
LDR             R0, [R6,#-8]
BL              sub_29D74
LDR             R0, [R6,#-4]
STR             R6, [SP,#8+var_4]
BL              sub_29D74
LDR             R0, [R4,#-0x20]
PLD             [R6,#0x30]
ADD             R6, R4, #0x20 ; ' '
BL              sub_29D74
LDR             R0, [R4,#-0x1C]
BL              sub_29D74
LDR             R0, [R4,#-0x18]
BL              sub_29D74
LDR             R0, [R4,#-0x14]
BL              sub_29D74
LDR             R0, [R4,#-0x10]
BL              sub_29D74
LDR             R0, [R4,#-0xC]
BL              sub_29D74
LDR             R0, [R4,#-8]
BL              sub_29D74
CMP             R7, #7
STR             R4, [SP,#8+var_4]
LDR             R8, [R4,#-4]
BHI             loc_33738

loc_337E0
ADD             R12, R7, #1
ANDS            LR, R12, #7
BEQ             loc_338CC
CMP             LR, #1
BEQ             loc_338AC
CMP             LR, #2
BEQ             loc_33894
CMP             LR, #3
BEQ             loc_3387C
CMP             LR, #4
BEQ             loc_33864
CMP             LR, #5
BEQ             loc_3384C
CMP             LR, #6
BEQ             loc_33834
MOV             R0, R8
ADD             R4, R4, #4
BL              sub_29D74
LDR             R8, [R4,#-4]
SUB             R7, R7, #1
STR             R4, [SP,#8+var_4]

loc_33834
MOV             R0, R8
ADD             R4, R4, #4
BL              sub_29D74
LDR             R8, [R4,#-4]
SUB             R7, R7, #1
STR             R4, [SP,#8+var_4]

loc_3384C
MOV             R0, R8
ADD             R4, R4, #4
BL              sub_29D74
LDR             R8, [R4,#-4]
SUB             R7, R7, #1
STR             R4, [SP,#8+var_4]

loc_33864
MOV             R0, R8
ADD             R4, R4, #4
BL              sub_29D74
LDR             R8, [R4,#-4]
SUB             R7, R7, #1
STR             R4, [SP,#8+var_4]

loc_3387C
MOV             R0, R8
ADD             R4, R4, #4
BL              sub_29D74
LDR             R8, [R4,#-4]
SUB             R7, R7, #1
STR             R4, [SP,#8+var_4]

loc_33894
MOV             R0, R8
ADD             R4, R4, #4
BL              sub_29D74
LDR             R8, [R4,#-4]
SUB             R7, R7, #1
STR             R4, [SP,#8+var_4]

loc_338AC
MOV             R0, R8
SUB             R7, R7, #1
BL              sub_29D74
CMN             R7, #1
ADD             R4, R4, #4
STR             R4, [SP,#8+var_4]
LDR             R8, [R4,#-4]
BEQ             loc_3395C

loc_338CC
ADD             R5, R4, #4
MOV             R0, R8
BL              sub_29D74
LDR             R0, [R5,#-4]
ADD             R8, R4, #0x14
STR             R5, [SP,#8+var_4]
ADD             R6, R4, #0x18
BL              sub_29D74
ADD             R3, R4, #8
LDR             R0, [R3,#-4]
STR             R3, [SP,#8+var_4]
SUB             R7, R7, #8
BL              sub_29D74
ADD             R1, R4, #0xC
LDR             R0, [R4,#8]
STR             R1, [SP,#8+var_4]
BL              sub_29D74
ADD             R2, R4, #0x10
LDR             R0, [R4,#0xC]
STR             R2, [SP,#8+var_4]
BL              sub_29D74
LDR             R0, [R4,#0x10]
STR             R8, [SP,#8+var_4]
BL              sub_29D74
LDR             R0, [R4,#0x14]
STR             R6, [SP,#8+var_4]
BL              sub_29D74
ADD             R12, R4, #0x1C
LDR             R0, [R12,#-4]
STR             R12, [SP,#8+var_4]
ADD             R4, R4, #0x20 ; ' '
BL              sub_29D74
CMN             R7, #1
STR             R4, [SP,#8+var_4]
LDR             R8, [R4,#-4]
BNE             loc_338CC

loc_3395C
MOV             R0, #0xFFFFFFFE
ADD             SP, SP, #8
POP             {R4-R8,LR}
ADD             SP, SP, #0x10
BX              LR

loc_33970
MOV             R0, #0
ADD             SP, SP, #8
POP             {R4-R8,LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_33654




; int __fastcall sub_33984(int *, int, int *)
sub_33984
PUSH            {R4-R6,R8,R9,LR}
SUBS            R5, R1, #0
MOV             R4, R2
BLE             loc_33A4C
LDR             R1, [R0]
RSB             R2, R1, R1,LSL#3
MOV             R1, R4
CMP             R5, R2,LSL#2
BGE             loc_33A44
BL              sub_2A25C
SUBS            R6, R0, #0
BNE             loc_33A3C
MOVW            R0, #0x2493
MOV             R12, R5,ASR#31
MOVT            R0, #0x9249
LDR             R8, [R4]
SMULL           R2, R3, R5, R0
LDR             LR, [R4,#0xC]
ADD             R9, R5, R3
RSB             R12, R12, R9,ASR#4
RSB             R3, R12, R12,LSL#3
MOV             R1, R3,LSL#2
CMP             R1, R5
MOVEQ           R9, R12
ADDNE           R9, R12, #1
CMP             R9, R8
BGE             loc_33A0C
ADD             R2, LR, R9,LSL#2
MOV             R0, R6

loc_339F8
STR             R0, [R2],#4
ADD             R9, R9, #1
LDR             R8, [R4]
CMP             R8, R9
BGT             loc_339F8

loc_33A0C
MOV             R2, R5,LSR#2
MOV             R3, #0x24924925
LDR             R1, [LR,R12,LSL#2]
UMULL           R8, R9, R2, R3
MOV             R2, #0xFFFFFFFF
MOV             R0, R4
RSB             R3, R9, R9,LSL#3
SUB             R5, R5, R3,LSL#2
BIC             R5, R1, R2,LSL R5
STR             R5, [LR,R12,LSL#2]
BL              sub_29BBC

loc_33A3C
MOV             R0, R6
POP             {R4-R6,R8,R9,PC}

loc_33A44
POP             {R4-R6,R8,R9,LR}
B               sub_2A25C

loc_33A4C
MOV             R0, R2
MOV             R6, #0
BL              sub_2EB8C
MOV             R0, R6
POP             {R4-R6,R8,R9,PC}
; End of function sub_33984




; int __fastcall sub_33A60(int, _DWORD *)
sub_33A60

var_8= -8

PUSH            {R4-R9,LR}
MOV             R4, #off_3ACB0
SUB             SP, SP, #0xC
MOV             R5, R0
ADD             R8, R4, #0x400
MOV             R7, R1
MOV             R3, #0
STR             R3, [R1]

loc_33A84
MOV             R6, R4
ADD             R2, SP, #0xC+var_8
LDR             R1, [R6],#4
MOV             R0, R5
BL              sub_2C51C
CMP             R0, #0
BNE             loc_33BB8
LDR             R1, [SP,#0xC+var_8]
CMP             R1, #0
BEQ             loc_33BC0
ADD             R2, SP, #0xC+var_8
LDR             R1, [R6]
MOV             R0, R5
BL              sub_2C51C
CMP             R0, #0
BNE             loc_33BB8
LDR             R2, [SP,#0xC+var_8]
CMP             R2, #0
BEQ             loc_33BC0
ADD             R2, SP, #0xC+var_8
LDR             R1, [R6,#4]
MOV             R0, R5
BL              sub_2C51C
CMP             R0, #0
BNE             loc_33BB8
LDR             R9, [SP,#0xC+var_8]
CMP             R9, #0
BEQ             loc_33BC0
LDR             R1, [R4,#0xC]
ADD             R2, SP, #0xC+var_8
MOV             R0, R5
BL              sub_2C51C
CMP             R0, #0
BNE             loc_33BB8
LDR             R12, [SP,#0xC+var_8]
CMP             R12, #0
BEQ             loc_33BC0
LDR             R1, [R4,#0x10]
ADD             R2, SP, #0xC+var_8
MOV             R0, R5
ADD             R4, R4, #0x14
BL              sub_2C51C
CMP             R0, #0
BNE             loc_33BB8
LDR             LR, [SP,#0xC+var_8]
CMP             LR, #0
BEQ             loc_33BC0
LDR             R1, [R4]
ADD             R2, SP, #0xC+var_8
MOV             R0, R5
BL              sub_2C51C
CMP             R0, #0
BNE             loc_33BB8
LDR             R3, [SP,#0xC+var_8]
CMP             R3, #0
BEQ             loc_33BC0
ADD             R2, SP, #0xC+var_8
LDR             R1, [R6,#0x14]
MOV             R0, R5
BL              sub_2C51C
CMP             R0, #0
BNE             loc_33BB8
LDR             R1, [SP,#0xC+var_8]
CMP             R1, #0
BEQ             loc_33BC0
ADD             R2, SP, #0xC+var_8
LDR             R1, [R6,#0x18]
MOV             R0, R5
ADD             R4, R6, #0x1C
BL              sub_2C51C
CMP             R0, #0
BNE             loc_33BB8
LDR             R6, [SP,#0xC+var_8]
CMP             R6, #0
BEQ             loc_33BC0
CMP             R4, R8
BNE             loc_33A84

loc_33BB8
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_33BC0
MOV             R5, #1
STR             R5, [R7]
ADD             SP, SP, #0xC
POP             {R4-R9,PC}
; End of function sub_33A60




; int __fastcall sub_33BD0(int *, int *, int *)
sub_33BD0
PUSH            {R4-R8,LR}
SUB             SP, SP, #0x10
MOV             R4, R0
MOV             R0, SP
MOV             R6, R1
MOV             R7, R2
BL              sub_2BAD0
SUBS            R5, R0, #0
BEQ             loc_33C00
MOV             R0, R5
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_33C00
MOV             R0, R6
BL              sub_2A310
MOV             R8, R0
B               loc_33C60

loc_33C10
BL              sub_2CB6C
SUBS            R5, R0, #0
MOV             R2, R4
MOV             R1, SP
MOV             R0, R4
BNE             loc_33C88
BL              sub_2EC08
SUBS            R5, R0, #0
MOV             R1, R6
MOV             R0, R4
BNE             loc_33C88
BL              sub_29E8C
CMN             R0, #1
MOV             R2, R4
MOV             R1, R6
MOV             R0, R4
BEQ             loc_33C88
BL              sub_307E4
SUBS            R5, R0, #0
BNE             loc_33C88

loc_33C60
MOV             R2, SP
MOV             R1, R8
MOV             R3, R4
MOV             R0, R4
BL              sub_329D0
SUBS            R5, R0, #0
MOV             R2, SP
MOV             R1, R7
MOV             R0, SP
BEQ             loc_33C10

loc_33C88
MOV             R0, SP
BL              sub_29D74
MOV             R0, R5
ADD             SP, SP, #0x10
POP             {R4-R8,PC}
; End of function sub_33BD0




; int __fastcall sub_33C9C(int *, int *)
sub_33C9C
PUSH            {R4-R6,LR}
SUB             SP, SP, #0x10
MOV             R5, R0
MOV             R0, SP
MOV             R6, R1
BL              sub_2BAD0
SUBS            R4, R0, #0
BEQ             loc_33CC8
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_33CC8
MOV             R0, R5
BL              sub_2A310
MOV             R1, R0
MOV             R0, SP
BL              sub_298D4
SUBS            R4, R0, #0
BEQ             loc_33CF8

loc_33CE4
MOV             R0, SP
BL              sub_29D74
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_33CF8
MOV             R2, R6
MOV             R1, R5
MOV             R0, SP
BL              sub_307E4
MOV             R4, R0
B               loc_33CE4
; End of function sub_33C9C




; int __fastcall sub_33D10(int *, int *, int *)
sub_33D10
PUSH            {R4-R8,LR}
MOV             R6, R0
SUB             SP, SP, #0x10
MOV             R7, R1
MOV             R0, SP
MOV             R1, R6
MOV             R8, R2
LDR             R4, [R7]
BL              sub_2BB10
SUBS            R5, R0, #0
BEQ             loc_33D48
MOV             R0, R5
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_33D48
SUB             R1, R4, #1
MOV             R0, SP
BL              sub_2E5A0
CMP             R4, #0x8000000
MOV             R1, R8
BHI             loc_33DB8
MOV             R3, R4
MOV             R2, SP
MOV             R0, SP
BL              sub_33EC0
SUBS            R5, R0, #0
BNE             loc_33DA4

loc_33D78
ADD             R8, R4, #1
MOV             R0, SP
MOV             R1, R8
BL              sub_2E5A0
RSB             R1, R8, R8,LSL#3
MOV             R2, R6
MOV             R0, R6
MOV             R1, R1,LSL#2
BL              sub_33984
SUBS            R5, R0, #0
BEQ             loc_33DD0

loc_33DA4
MOV             R0, SP
BL              sub_29D74
MOV             R0, R5
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_33DB8
MOV             R2, SP
MOV             R0, SP
BL              sub_2CB6C
SUBS            R5, R0, #0
BNE             loc_33DA4
B               loc_33D78

loc_33DD0
MOV             R3, R8
MOV             R2, SP
MOV             R1, R7
MOV             R0, SP
BL              sub_2FCC8
SUBS            R5, R0, #0
BNE             loc_33DA4
MOV             R2, R6
MOV             R1, SP
MOV             R0, R6
BL              sub_2E764
SUBS            R5, R0, #0
BNE             loc_33DA4
MOV             R1, R5
MOV             R0, R6
BL              sub_29E48
CMN             R0, #1
BEQ             loc_33E4C

loc_33E18
MOV             R1, R7
MOV             R0, R6
BL              sub_29E00
CMN             R0, #1
MOV             R2, R6
MOV             R1, R7
MOV             R0, R6
BEQ             loc_33DA4
BL              sub_307E4
CMP             R0, #0
BEQ             loc_33E18

loc_33E44
MOV             R5, R0
B               loc_33DA4

loc_33E4C
MOV             R1, #1
MOV             R0, SP
BL              sub_2E630
MOV             R1, R8
MOV             R0, SP
BL              sub_2C160
CMP             R0, #0
BNE             loc_33E44
MOV             R2, R6
MOV             R1, SP
MOV             R0, R6
BL              sub_29934
CMP             R0, #0
BNE             loc_33E44
B               loc_33E18
; End of function sub_33D10




; int __fastcall sub_33E88(int *, int *)
sub_33E88
PUSH            {R4-R6,LR}
MOV             R4, R1
LDR             R1, [R1]
MOV             R5, R0
RSB             R2, R1, R1,LSL#3
MOV             R1, R2,LSL#3
BL              sub_298D4
SUBS            R3, R0, #0
POPNE           {R4-R6,PC}
MOV             R1, R4
MOV             R2, R5
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_2A5A8
; End of function sub_33E88




; int __fastcall sub_33EC0(int *, int *, int *, int)
sub_33EC0

var_5C= -0x5C
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x5C
LDR             LR, [R0]
MOV             R5, R0
MOV             R4, R1
MOV             R6, R3
LDR             R7, [R1]
STR             R2, [SP,#0x5C+var_1C]
ADD             R12, LR, R7
ADD             R8, R12, #1
CMP             R8, #0x200
BGE             loc_33F00
CMP             LR, R7
MOVGE           LR, R7
CMP             LR, #0xFF
BLE             loc_343EC

loc_33F00
MOV             R1, R8
ADD             R0, SP, #0x5C+var_14
BL              sub_2BB58
SUBS            R9, R0, #0
STR             R9, [SP,#0x5C+var_20]
BNE             loc_343CC
LDR             R2, [R5]
LDR             R10, [R4]
CMP             R2, #0
ADD             R3, R2, R10
STR             R10, [SP,#0x5C+var_3C]
ADD             R0, R3, #1
STR             R0, [SP,#0x5C+var_14]
BLE             loc_343B0
LDR             R11, [SP,#0x5C+var_8]
MOV             R7, R6,LSL#2
LDR             R5, [R5,#0xC]
SUB             R12, R10, R6
LDR             R1, [R4,#0xC]
MOV             R4, R10
ADD             LR, R11, R7
STR             R6, [SP,#0x5C+var_38]
ADD             R8, LR, R12,LSL#2
SUB             R6, R6, R2
ADD             R10, R1, R7
STR             LR, [SP,#0x5C+var_18]
SUB             R2, R5, #4
ADD             R3, LR, #0x20 ; ' '
MOV             R5, R9
SUB             R9, R4, #7
STR             R6, [SP,#0x5C+var_28]
STR             R8, [SP,#0x5C+var_30]
STR             R2, [SP,#0x5C+var_2C]
STR             R10, [SP,#0x5C+var_34]
STR             R3, [SP,#0x5C+var_24]
STR             R9, [SP,#0x5C+var_44]

loc_33F90
LDR             R7, [SP,#0x5C+var_2C]
LDR             R11, [SP,#0x5C+var_38]
LDR             R0, [SP,#0x5C+var_3C]
LDR             LR, [R7,#4]!
LDR             R1, [SP,#0x5C+var_34]
CMP             R0, R11
STR             R11, [SP,#0x5C+var_54]
STR             LR, [SP,#0x5C+var_40]
STR             R7, [SP,#0x5C+var_2C]
MOV             R10, R1
BLE             loc_343D8
LDR             R12, [SP,#0x5C+var_44]
ADD             R6, R11, #1
CMP             R0, #0x80000007
CMPGE           R12, R6
MOVGT           R6, #1
MOVLE           R6, #0
BLE             loc_343E4
LDR             R11, [SP,#0x5C+var_24]
MOV             R0, #0
ADD             R2, R1, #0x20 ; ' '
MOV             R6, R0

loc_33FE8
LDR             R8, [R11,#-0x20]
MOV             R3, #0
LDR             R9, [R2,#-0x20]
ADD             R7, R11, #0x20 ; ' '
ADD             R12, R2, #0x20 ; ' '
PLD             [R7]
ADDS            R0, R6, R8
PLD             [R12]
ADC             R1, R3, #0
LDR             R6, [R11,#-0x1C]
UMLAL           R0, R1, LR, R9
STR             R7, [SP,#0x5C+var_50]
MOV             R7, #0
LDR             R10, [R11,#-0x18]
BIC             R4, R0, #0xF0000000
MOV             R8, R0,LSR#28
STR             R4, [R11,#-0x20]
MOV             R0, R10
LDR             R9, [R2,#-0x1C]
ORR             R8, R8, R1,LSL#4
MOV             R1, #0
UMLAL           R6, R7, LR, R9
STRD            R6, R7, [SP,#0x5C+var_5C]
MOV             R7, #0
LDR             R6, [R11,#-0x14]
STRD            R6, R7, [SP,#0x5C+var_4C]
LDR             R6, [SP,#0x5C+var_5C]
ADDS            R7, R6, R8
LDR             R8, [SP,#0x5C+var_5C+4]
BIC             R4, R7, #0xF0000000
MOV             R9, R7,LSR#28
STR             R4, [R11,#-0x1C]
LDR             R6, [R2,#-0x18]
ADC             R3, R8, R5
LDR             R7, [R11,#-0x10]
ORR             R4, R9, R3,LSL#4
UMLAL           R0, R1, R6, LR
MOV             R8, R0
MOV             R9, R1
MOV             R0, R7
MOV             R1, #0
STRD            R0, R1, [SP,#0x5C+var_5C]
ADDS            R1, R8, R4
BIC             R0, R1, #0xF0000000
ADC             R10, R9, R5
STR             R0, [R11,#-0x18]
MOV             R3, R1,LSR#28
LDR             R7, [R2,#-0x14]
MOV             R1, #0
LDRD            R8, R9, [SP,#0x5C+var_4C]
ORR             R3, R3, R10,LSL#4
LDR             R0, [R11,#-0xC]
UMLAL           R8, R9, R7, LR
STRD            R0, R1, [SP,#0x5C+var_4C]
LDR             R0, [R11,#-8]
ADDS            R4, R8, R3
MOV             R7, R4,LSR#28
BIC             R8, R4, #0xF0000000
ADC             R9, R9, R5
STR             R8, [R11,#-0x14]
ORR             R3, R7, R9,LSL#4
LDR             R1, [R2,#-0x10]
LDRD            R8, R9, [SP,#0x5C+var_5C]
UMLAL           R8, R9, R1, LR
MOV             R1, #0
STRD            R0, R1, [SP,#0x5C+var_5C]
ADDS            R6, R8, R3
BIC             R8, R6, #0xF0000000
ADC             R10, R9, R5
STR             R8, [R11,#-0x10]
MOV             R3, R6,LSR#28
LDR             R7, [R2,#-0xC]
LDRD            R8, R9, [SP,#0x5C+var_4C]
ORR             R3, R3, R10,LSL#4
LDR             R6, [R11,#-4]
UMLAL           R8, R9, R7, LR
MOV             R0, R8
MOV             R7, R9
MOV             R8, R6
MOV             R9, #0
STRD            R8, R9, [SP,#0x5C+var_4C]
ADDS            R10, R0, R3
LDR             R8, [SP,#0x5C+var_54]
BIC             R6, R10, #0xF0000000
STR             R6, [R11,#-0xC]
ADC             R4, R7, R5
LDR             R0, [R2,#-8]
MOV             R3, R10,LSR#28
ADD             R6, R8, #8
STR             R6, [SP,#0x5C+var_54]
ORR             R1, R3, R4,LSL#4
LDRD            R6, R7, [SP,#0x5C+var_5C]
MOV             R10, R2
ADD             R3, R8, #9
UMLAL           R6, R7, R0, LR
ADDS            R4, R6, R1
MOV             R6, R4,LSR#28
BIC             R2, R4, #0xF0000000
ADC             R9, R7, R5
STR             R2, [R11,#-8]
ORR             R8, R6, R9,LSL#4
LDR             R1, [R10,#-4]
LDRD            R6, R7, [SP,#0x5C+var_4C]
MOV             R2, R12
LDR             R4, [SP,#0x5C+var_44]
MOV             R12, R11
UMLAL           R6, R7, R1, LR
ADDS            R11, R6, R8
ADC             R7, R7, R5
MOV             R0, R11,LSR#28
CMP             R4, R3
BIC             R3, R11, #0xF0000000
ORR             R6, R0, R7,LSL#4
STR             R3, [R12,#-4]
LDR             R11, [SP,#0x5C+var_50]
BGT             loc_33FE8

loc_341B8
LDR             LR, [R12]
MOV             R9, #0
LDR             R4, [R10],#4
LDR             R11, [SP,#0x5C+var_40]
ADDS            R6, R6, LR
LDR             R8, [SP,#0x5C+var_54]
ADC             R7, R9, #0
LDR             R0, [SP,#0x5C+var_3C]
UMLAL           R6, R7, R11, R4
ADD             R1, R8, #1
MVN             R2, R8
CMP             R0, R1
ADD             R3, R2, R0
AND             LR, R3, #3
MOV             R4, R6,LSR#28
BIC             R6, R6, #0xF0000000
STR             R6, [R12]
ORR             R2, R4, R7,LSL#4
BLE             loc_34378
CMP             LR, #0
BEQ             loc_342B8
CMP             LR, #1
BEQ             loc_3427C
CMP             LR, #2
BEQ             loc_3424C
LDR             R9, [R12,#4]!
MOV             R7, #0
LDR             R8, [R10],#4
ADD             R1, R1, #1
LDR             R0, [SP,#0x5C+var_40]
ADDS            R2, R2, R9
ADC             R3, R7, #0
UMLAL           R2, R3, R0, R8
MOV             LR, R2,LSR#28
BIC             R4, R2, #0xF0000000
STR             R4, [R12]
ORR             R2, LR, R3,LSL#4

loc_3424C
LDR             R9, [R12,#4]!
MOV             R6, #0
LDR             R7, [R10],#4
ADD             R1, R1, #1
LDR             R8, [SP,#0x5C+var_40]
ADDS            R2, R2, R9
ADC             R3, R6, #0
UMLAL           R2, R3, R8, R7
MOV             R0, R2,LSR#28
BIC             LR, R2, #0xF0000000
STR             LR, [R12]
ORR             R2, R0, R3,LSL#4

loc_3427C
LDR             R4, [R12,#4]!
MOV             R9, #0
LDR             R6, [R10],#4
ADD             R1, R1, #1
LDR             R8, [SP,#0x5C+var_40]
ADDS            R2, R2, R4
LDR             R7, [SP,#0x5C+var_3C]
ADC             R3, R9, #0
UMLAL           R2, R3, R8, R6
CMP             R7, R1
MOV             R0, R2,LSR#28
BIC             LR, R2, #0xF0000000
STR             LR, [R12]
ORR             R2, R0, R3,LSL#4
BLE             loc_34378

loc_342B8
LDR             R6, [SP,#0x5C+var_3C]
MOV             R4, R1
LDR             R7, [SP,#0x5C+var_40]

loc_342C4
MOV             R11, R10
LDR             R9, [R12,#4]
LDR             R8, [R11],#4
MOV             R1, #0
MOV             LR, #0
ADD             R10, R10, #0x10
ADDS            R0, R2, R9
LDR             R2, [R12,#8]
ADC             R1, R1, #0
ADD             R4, R4, #4
UMLAL           R0, R1, R7, R8
MOV             R9, R0,LSR#28
BIC             R0, R0, #0xF0000000
STR             R0, [R12,#4]
LDR             R11, [R11]
ORR             R8, R9, R1,LSL#4
ADDS            R2, R8, R2
ADC             R3, LR, #0
MOV             LR, #0
UMLAL           R2, R3, R7, R11
LDR             R11, [R12,#0xC]
MOV             R9, R2,LSR#28
BIC             R8, R2, #0xF0000000
STR             R8, [R12,#8]
ORR             R8, R9, R3,LSL#4
LDR             R1, [R10,#-8]
ADDS            R2, R8, R11
ADC             R3, LR, #0
UMLAL           R2, R3, R7, R1
MOV             R1, #0
MOV             R9, R2,LSR#28
BIC             R8, R2, #0xF0000000
STR             R8, [R12,#0xC]
LDR             R11, [R12,#0x10]!
ORR             R0, R9, R3,LSL#4
LDR             R2, [R10,#-4]
ADDS            R8, R0, R11
ADC             R9, R1, #0
CMP             R6, R4
UMLAL           R8, R9, R7, R2
MOV             R0, R8,LSR#28
BIC             R3, R8, #0xF0000000
STR             R3, [R12]
ORR             R2, R0, R9,LSL#4
BGT             loc_342C4

loc_34378
LDR             R4, [SP,#0x5C+var_30]

loc_3437C
LDR             R10, [SP,#0x5C+var_38]
LDR             R6, [SP,#0x5C+var_28]
LDR             R7, [SP,#0x5C+var_30]
LDR             R9, [SP,#0x5C+var_34]
SUB             R12, R10, #1
CMP             R12, R6
STR             R2, [R4]
ADD             R4, R7, #4
STR             R12, [SP,#0x5C+var_38]
SUB             R8, R9, #4
STR             R4, [SP,#0x5C+var_30]
STR             R8, [SP,#0x5C+var_34]
BNE             loc_33F90

loc_343B0
ADD             R0, SP, #0x5C+var_14
BL              sub_29BBC
ADD             R0, SP, #0x5C+var_14
LDR             R1, [SP,#0x5C+var_1C]
BL              sub_2AAD4
ADD             R0, SP, #0x5C+var_14
BL              sub_29D74

loc_343CC
LDR             R0, [SP,#0x5C+var_20]
ADD             SP, SP, #0x5C ; '\'
POP             {R4-R11,PC}

loc_343D8
LDR             R4, [SP,#0x5C+var_18]
MOV             R2, #0
B               loc_3437C

loc_343E4
LDR             R12, [SP,#0x5C+var_18]
B               loc_341B8

loc_343EC
BL              sub_34400
STR             R0, [SP,#0x5C+var_20]
LDR             R0, [SP,#0x5C+var_20]
ADD             SP, SP, #0x5C ; '\'
POP             {R4-R11,PC}
; End of function sub_33EC0




; int __fastcall sub_34400(int *, int *, int *, int)
sub_34400

var_84C= -0x84C
var_848= -0x848
var_844= -0x844
var_83C= -0x83C
var_834= -0x834
var_830= -0x830
var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
dest= -0x814
var_810= -0x810
var_80C= -0x80C
src= -0x808
var_804= -0x804

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x840
SUB             SP, SP, #0xC
MOV             R5, R0
MOV             R4, R1
MOV             R0, R2
LDR             R1, [R5]
MOV             R11, R3
STR             R2, [SP,#0x84C+var_818]
LDR             R2, [R4]
LDR             R3, [R0,#4]
STR             R1, [SP,#0x84C+var_82C]
ADD             R1, R1, R2
CMP             R3, R1
STR             R1, [SP,#0x84C+var_830]
BLT             loc_3492C

loc_34440
LDR             R6, [R0,#0xC]
MOV             R7, R11,LSL#2
LDR             R8, [R0]
CMP             R11, R1
STR             R11, [SP,#0x84C+var_80C]
ADD             R9, R6, R7
STR             R8, [SP,#0x84C+var_810]
STR             R9, [SP,#0x84C+dest]
BGE             loc_34954
LDR             LR, [R5,#0xC]
MOV             R8, #0
LDR             R5, [R4,#0xC]
MOV             R9, #0
ADD             R4, SP, #0x84C+var_804
SUB             R2, R2, #1
ADD             R3, R4, R7
STR             LR, [SP,#0x84C+var_828]
STR             R5, [SP,#0x84C+var_824]
STR             R3, [SP,#0x84C+src]
STR             R2, [SP,#0x84C+var_820]
STR             R3, [SP,#0x84C+var_834]
STR             R11, [SP,#0x84C+var_848]

loc_34498
LDR             R6, [SP,#0x84C+var_820]
LDR             R1, [SP,#0x84C+var_848]
LDR             R10, [SP,#0x84C+var_82C]
LDR             R12, [SP,#0x84C+var_828]
CMP             R1, R6
LDR             R5, [SP,#0x84C+var_824]
MOVLT           R6, R1
SUB             R7, R1, R6
ADD             R0, R6, #1
SUB             LR, R10, R7
ADD             R10, R12, R7,LSL#2
CMP             R0, LR
ADD             R3, R5, R6,LSL#2
MOVLT           R11, R0
MOVGE           R11, LR
CMP             R11, #0
BLE             loc_34880
SUB             R4, R11, #7
CMP             R4, #1
STR             R4, [SP,#0x84C+var_84C]
BLE             loc_34924
SUB             R3, R3, #0x20 ; ' '
LDR             R2, [R10,#4]
LDR             R1, [R3,#0x1C]
ADD             R6, R10, #0x20 ; ' '
LDR             R7, [R6,#-0x20]
LDR             LR, [R3,#0x20]
LDR             R4, [R10,#8]
UMULL           R0, R1, R1, R2
LDR             R5, [R3,#0x18]
LDR             R12, [R6,#-0x14]
PLD             [R10,#0x5C]
MOV             R10, R6
LDR             R6, [R3,#0x14]
LDR             R2, [R10,#-0x10]
UMLAL           R0, R1, LR, R7
LDR             R7, [R3,#0x10]
LDR             LR, [R3,#0xC]
UMLAL           R0, R1, R4, R5
LDRD            R4, R5, [R10,#-8]
UMLAL           R0, R1, R6, R12
LDR             R12, [R10,#-0xC]
SUB             R6, R11, #9
UMLAL           R0, R1, R7, R2
UBFX            R2, R6, #3, #1
SUB             R7, R3, #0x20 ; ' '
UMLAL           R0, R1, LR, R12
LDMIB           R3, {R6,R12}
ADD             LR, R10, #0x20 ; ' '
UMLAL           R0, R1, R12, R4
MOV             R12, #8
UMLAL           R0, R1, R6, R5
ADDS            R8, R8, R0
LDR             R0, [SP,#0x84C+var_84C]
ADC             R9, R9, R1
CMP             R0, #9
BLE             loc_34730
CMP             R2, #0
BEQ             loc_34610
LDR             R5, [LR,#-0x1C]
MOV             R3, R7
LDR             R1, [R7,#0x1C]
SUB             R7, R7, #0x20 ; ' '
LDR             R12, [LR,#-0x20]
LDR             R4, [R7,#0x40]
LDR             R6, [R7,#0x38]
UMULL           R0, R1, R1, R5
LDR             R2, [LR,#-0x18]
LDR             R5, [R7,#0x30]
PLD             [R10,#0x5C]
MOV             R10, LR
ADD             LR, LR, #0x20 ; ' '
UMLAL           R0, R1, R4, R12
LDR             R12, [LR,#-0x34]
LDR             R4, [R7,#0x34]
UMLAL           R0, R1, R2, R6
LDR             R2, [LR,#-0x30]
LDR             R6, [R7,#0x2C]
UMLAL           R0, R1, R4, R12
LDR             R4, [LR,#-0x2C]
LDR             R12, [R7,#0x28]
UMLAL           R0, R1, R5, R2
LDR             R5, [LR,#-0x28]
LDR             R2, [R7,#0x24]
UMLAL           R0, R1, R6, R4
LDR             R4, [LR,#-0x24]
UMLAL           R0, R1, R12, R5
MOV             R12, #0x10
UMLAL           R0, R1, R2, R4
ADDS            R8, R8, R0
LDR             R0, [SP,#0x84C+var_84C]
ADC             R9, R9, R1
CMP             R0, #0x11
BLE             loc_34730

loc_34610
STR             R11, [SP,#0x84C+var_81C]

loc_34614
LDR             R6, [R7,#0x1C]
ADD             R10, LR, #0x20 ; ' '
LDR             R5, [LR,#-0x1C]
SUB             R3, R7, #0x20 ; ' '
LDR             R0, [R3,#0x1C]
ADD             R11, R12, #8
LDR             R1, [R10,#-0x1C]
LDR             R12, [LR,#-0x20]
UMULL           R4, R5, R6, R5
LDR             R2, [R7,#0x20]
LDR             R6, [R10,#-0x20]
PLD             [LR,#0x3C]
UMULL           R0, R1, R0, R1
PLD             [LR,#0x5C]
UMLAL           R4, R5, R2, R12
LDR             R2, [R3,#0x20]
LDR             R12, [R7,#0x18]
UMLAL           R0, R1, R2, R6
LDR             R6, [LR,#-0x18]
LDR             R2, [R3,#0x18]
UMLAL           R4, R5, R6, R12
LDR             R12, [R10,#-0x18]
LDR             R6, [LR,#-0x14]
UMLAL           R0, R1, R12, R2
LDR             R12, [R7,#0x14]
LDR             R2, [R10,#-0x14]
UMLAL           R4, R5, R12, R6
LDR             R12, [R3,#0x14]
LDR             R6, [LR,#-0x10]
UMLAL           R0, R1, R12, R2
LDR             R12, [R7,#0x10]
LDR             R2, [R10,#-0x10]
UMLAL           R4, R5, R12, R6
LDR             R12, [R3,#0x10]
LDR             R6, [LR,#-0xC]
UMLAL           R0, R1, R12, R2
LDR             R2, [R7,#0xC]
LDR             R12, [R10,#-0xC]
UMLAL           R4, R5, R2, R6
LDR             R6, [R3,#0xC]
LDR             R2, [LR,#-4]
UMLAL           R0, R1, R6, R12
LDR             R6, [R10,#-8]
STRD            R4, R5, [SP,#0x84C+var_844]
LDR             R5, [LR,#-8]
LDR             R4, [R7,#8]
STRD            R0, R1, [SP,#0x84C+var_83C]
LDR             R12, [R7,#4]
LDRD            R0, R1, [SP,#0x84C+var_844]
LDR             R7, [R3,#8]
LDR             LR, [R10,#-4]
UMLAL           R0, R1, R4, R5
MOV             R4, R0
MOV             R5, R1
LDRD            R0, R1, [SP,#0x84C+var_83C]
UMLAL           R4, R5, R12, R2
ADD             R2, R11, #9
ADD             R12, R11, #8
UMLAL           R0, R1, R7, R6
LDR             R6, [R3,#4]
ADDS            R8, R8, R4
SUB             R7, R3, #0x20 ; ' '
ADC             R9, R9, R5
UMLAL           R0, R1, R6, LR
ADD             LR, R10, #0x20 ; ' '
ADDS            R8, R8, R0
ADC             R9, R9, R1
LDR             R1, [SP,#0x84C+var_84C]
CMP             R1, R2
BGT             loc_34614
LDR             R11, [SP,#0x84C+var_81C]

loc_34730
LDR             LR, [R10],#4
ADD             R1, R12, #1
LDR             R0, [R3],#-4
MVN             R12, R12
CMP             R11, R1
ADD             R6, R12, R11
AND             R2, R6, #7
UMLAL           R8, R9, R0, LR
BLE             loc_34880
CMP             R2, #0
BEQ             loc_34800
CMP             R2, #1
BEQ             loc_347E8
CMP             R2, #2
BEQ             loc_347D8
CMP             R2, #3
BEQ             loc_347C8
CMP             R2, #4
BEQ             loc_347B8
CMP             R2, #5
BEQ             loc_347A8
CMP             R2, #6
LDRNE           R2, [R10],#4
ADDNE           R1, R1, #1
LDRNE           R0, [R3],#-4
ADD             R1, R1, #1
LDR             R4, [R10],#4
LDR             R5, [R3],#-4
UMLALNE         R8, R9, R0, R2
UMLAL           R8, R9, R5, R4

loc_347A8
LDR             R7, [R10],#4
ADD             R1, R1, #1
LDR             LR, [R3],#-4
UMLAL           R8, R9, LR, R7

loc_347B8
LDR             R12, [R10],#4
ADD             R1, R1, #1
LDR             R0, [R3],#-4
UMLAL           R8, R9, R0, R12

loc_347C8
LDR             R6, [R10],#4
ADD             R1, R1, #1
LDR             R2, [R3],#-4
UMLAL           R8, R9, R2, R6

loc_347D8
LDR             R4, [R10],#4
ADD             R1, R1, #1
LDR             R5, [R3],#-4
UMLAL           R8, R9, R5, R4

loc_347E8
LDR             R7, [R10],#4
ADD             R1, R1, #1
LDR             LR, [R3],#-4
CMP             R11, R1
UMLAL           R8, R9, LR, R7
BLE             loc_34880

loc_34800
MOV             R6, R1

loc_34804
MOV             R12, R10
MOV             R0, R3
LDR             R2, [R12],#4
ADD             R10, R10, #0x20 ; ' '
LDR             R4, [R0],#-4
SUB             R3, R3, #0x20 ; ' '
LDR             R1, [R10,#-0x18]
ADD             R6, R6, #8
LDR             LR, [R12]
CMP             R11, R6
LDR             R12, [R0]
UMLAL           R8, R9, R4, R2
LDR             R0, [R3,#0x18]
LDR             R5, [R10,#-0x14]
LDR             R7, [R3,#0x14]
LDR             R2, [R10,#-0x10]
LDR             R4, [R3,#0x10]
UMLAL           R8, R9, R12, LR
LDR             R12, [R10,#-0xC]
UMLAL           R8, R9, R0, R1
LDR             R0, [R3,#0xC]
LDR             R1, [R10,#-8]
UMLAL           R8, R9, R7, R5
LDR             R5, [R3,#8]
LDR             R7, [R10,#-4]
LDR             LR, [R3,#4]
UMLAL           R8, R9, R4, R2
UMLAL           R8, R9, R0, R12
UMLAL           R8, R9, R5, R1
UMLAL           R8, R9, LR, R7
BGT             loc_34804

loc_34880
LDR             R3, [SP,#0x84C+var_848]
MOV             R6, R8,LSR#28
LDR             R4, [SP,#0x84C+var_830]
MOV             R12, R9,LSR#28
LDR             R1, [SP,#0x84C+var_834]
ORR             R9, R6, R9,LSL#4
ADD             R2, R3, #1
CMP             R2, R4
BIC             R0, R8, #0xF0000000
STR             R0, [R1],#4
MOV             R8, R9
STR             R2, [SP,#0x84C+var_848]
MOV             R9, R12
STR             R1, [SP,#0x84C+var_834]
BNE             loc_34498
LDR             R11, [SP,#0x84C+var_848]
LDR             R8, [SP,#0x84C+var_80C]
LDR             LR, [SP,#0x84C+dest]
LDR             R7, [SP,#0x84C+var_818]
SUB             R5, R11, R8
LDR             R1, [SP,#0x84C+src] ; src
MOV             R2, R5,LSL#2 ; n
MOV             R0, LR  ; dest
STR             R11, [R7]
ADD             R3, LR, R2
STR             R3, [SP,#0x84C+dest]
BL              memcpy
LDR             R0, [SP,#0x84C+var_810]

loc_348F0
CMP             R11, R0
BGE             loc_3490C
SUB             R11, R0, R11
MOV             R1, #0  ; c
LDR             R0, [SP,#0x84C+dest] ; s
MOV             R2, R11,LSL#2 ; n
BL              memset

loc_3490C
LDR             R0, [SP,#0x84C+var_818]
BL              sub_29BBC
MOV             R0, #0

loc_34918
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_34924
MOV             R12, #0
B               loc_34730

loc_3492C
BL              sub_2BA48
CMP             R0, #0
BNE             loc_34918
LDR             R0, [R5]
LDR             R2, [R4]
STR             R0, [SP,#0x84C+var_82C]
ADD             R1, R0, R2
LDR             R0, [SP,#0x84C+var_818]
STR             R1, [SP,#0x84C+var_830]
B               loc_34440

loc_34954
LDR             R10, [SP,#0x84C+var_818]
MOV             R0, R8
LDR             R12, [SP,#0x84C+var_830]
STR             R12, [R10]
B               loc_348F0
; End of function sub_34400




; int __fastcall sub_34968(int *, int *, _DWORD *)
sub_34968

var_34= -0x34
var_30= -0x30
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R4, R0
SUB             SP, SP, #0x34
ADD             R0, SP, #0x34+var_14
STR             R1, [SP,#0x34+var_24]
LDR             R1, [R4]
STR             R2, [SP,#0x34+var_20]
BL              sub_2BB58
SUBS            R3, R0, #0
STR             R3, [SP,#0x34+var_28]
BNE             loc_34B80
LDR             R9, [R4]
LDR             R0, [R4,#8]
CMP             R9, #1
STR             R9, [SP,#0x34+var_14]
STR             R0, [SP,#0x34+var_C]
BMI             loc_34B48
LDR             R11, [R4,#0xC]
MOV             R1, R9,LSL#2
LDR             R2, [SP,#0x34+var_8]
MOV             R10, #0x5555555
MOV             R4, #0
MOV             R5, #0
ADD             R8, R11, R1
ADD             R9, R2, R1
B               loc_349E0

loc_349D4
CMP             R11, R8
STR             R6, [R9,#-4]!
BEQ             loc_34B4C

loc_349E0
LDR             R7, [R8,#-4]!
MOV             R5, R5,LSL#28
ORR             R5, R5, R4,LSR#4
ORR             R4, R7, R4,LSL#28
CMP             R5, #0
CMPEQ           R4, #2
MOVLS           R6, #0
BLS             loc_349D4
UMULL           R2, R3, R4, R10
MLA             R12, R10, R5, R3
MOV             R6, R2,LSR#28
ORR             R6, R6, R12,LSL#4
MOV             R7, R12,LSR#28
ADDS            LR, R6, R6
ADC             R0, R7, R7
ADDS            R3, LR, R6
ADC             R1, R0, R7
SUBS            R4, R4, R3
SBC             R5, R5, R1
CMP             R5, #0
CMPEQ           R4, #2
BLS             loc_349D4
SUBS            R0, R4, #3
MOV             R2, #3
SBC             R1, R5, #0
MOV             R3, #0
STR             R0, [SP,#0x34+var_1C]
STR             R1, [SP,#0x34+var_18]
BLX             sub_34E18
ADDS            R2, R0, #1
MOV             R0, #0
AND             R12, R2, #7
STR             R0, [SP,#0x34+var_30]
STR             R12, [SP,#0x34+var_34]
LDRD            R2, R3, [SP,#0x34+var_34]
ORRS            R1, R2, R3
BEQ             loc_34B28
CMP             R3, #0
CMPEQ           R2, #1
BEQ             loc_34B0C
CMP             R3, #0
CMPEQ           R2, #2
BEQ             loc_34AFC
CMP             R3, #0
CMPEQ           R2, #3
BEQ             loc_34AEC
CMP             R3, #0
CMPEQ           R2, #4
BEQ             loc_34ADC
CMP             R3, #0
CMPEQ           R2, #5
BEQ             loc_34ACC
CMP             R3, #0
CMPEQ           R2, #6
BNE             loc_34B8C

loc_34ABC
ADDS            R6, R6, #1
ADC             R7, R7, #0
SUBS            R4, R4, #3
SBC             R5, R5, #0

loc_34ACC
ADDS            R6, R6, #1
ADC             R7, R7, #0
SUBS            R4, R4, #3
SBC             R5, R5, #0

loc_34ADC
ADDS            R6, R6, #1
ADC             R7, R7, #0
SUBS            R4, R4, #3
SBC             R5, R5, #0

loc_34AEC
ADDS            R6, R6, #1
ADC             R7, R7, #0
SUBS            R4, R4, #3
SBC             R5, R5, #0

loc_34AFC
ADDS            R6, R6, #1
ADC             R7, R7, #0
SUBS            R4, R4, #3
SBC             R5, R5, #0

loc_34B0C
ADDS            R6, R6, #1
ADC             R7, R7, #0
SUBS            R4, R4, #3
SBC             R5, R5, #0
CMP             R5, #0
CMPEQ           R4, #2
BLS             loc_349D4

loc_34B28
ADDS            R6, R6, #8
ADC             R7, R7, #0
SUBS            R4, R4, #0x18
SBC             R5, R5, #0
CMP             R5, #0
CMPEQ           R4, #2
BHI             loc_34B28
B               loc_349D4

loc_34B48
MOV             R4, #0

loc_34B4C
LDR             R11, [SP,#0x34+var_20]
LDR             R10, [SP,#0x34+var_24]
CMP             R11, #0
STRNE           R4, [R11]
CMP             R10, #0
BEQ             loc_34B78
ADD             R0, SP, #0x34+var_14
BL              sub_29BBC
MOV             R1, R10
ADD             R0, SP, #0x34+var_14
BL              sub_2AAD4

loc_34B78
ADD             R0, SP, #0x34+var_14
BL              sub_29D74

loc_34B80
LDR             R0, [SP,#0x34+var_28]
ADD             SP, SP, #0x34 ; '4'
POP             {R4-R11,PC}

loc_34B8C
ADDS            R6, R6, #1
LDR             R4, [SP,#0x34+var_1C]
ADC             R7, R7, #0
LDR             R5, [SP,#0x34+var_18]
B               loc_34ABC
; End of function sub_34968

CODE16



; unsigned int __fastcall sub_34BA0(unsigned int result, unsigned int)
sub_34BA0
SUBS            R2, R1, #1
IT EQ
BXEQ            LR
BCC.W           loc_34DF2
CMP             R0, R1
BLS.W           loc_34DDC
TST             R1, R2
BEQ.W           loc_34DE4
CLZ.W           R3, R0
CLZ.W           R2, R1
SUB.W           R3, R2, R3
RSB.W           R3, R3, #0x1F
ADR             R2, loc_34BD8
ADD.W           R3, R2, R3,LSL#4
MOV.W           R2, #0
MOV             PC, R3
ALIGN 8

loc_34BD8
CMP.W           R0, R1,LSL#31
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#31
CMP.W           R0, R1,LSL#30
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#30
CMP.W           R0, R1,LSL#29
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#29
CMP.W           R0, R1,LSL#28
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#28
CMP.W           R0, R1,LSL#27
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#27
CMP.W           R0, R1,LSL#26
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#26
CMP.W           R0, R1,LSL#25
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#25
CMP.W           R0, R1,LSL#24
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#24
CMP.W           R0, R1,LSL#23
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#23
CMP.W           R0, R1,LSL#22
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#22
CMP.W           R0, R1,LSL#21
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#21
CMP.W           R0, R1,LSL#20
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#20
CMP.W           R0, R1,LSL#19
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#19
CMP.W           R0, R1,LSL#18
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#18
CMP.W           R0, R1,LSL#17
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#17
CMP.W           R0, R1,LSL#16
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#16
CMP.W           R0, R1,LSL#15
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#15
CMP.W           R0, R1,LSL#14
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#14
CMP.W           R0, R1,LSL#13
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#13
CMP.W           R0, R1,LSL#12
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#12
CMP.W           R0, R1,LSL#11
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#11
CMP.W           R0, R1,LSL#10
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#10
CMP.W           R0, R1,LSL#9
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#9
CMP.W           R0, R1,LSL#8
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#8
CMP.W           R0, R1,LSL#7
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#7
CMP.W           R0, R1,LSL#6
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#6
CMP.W           R0, R1,LSL#5
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#5
CMP.W           R0, R1,LSL#4
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#4
CMP.W           R0, R1,LSL#3
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#3
CMP.W           R0, R1,LSL#2
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#2
CMP.W           R0, R1,LSL#1
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#1
CMP.W           R0, R1
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1
MOV             R0, R2
BX              LR

loc_34DDC
ITE EQ
MOVEQ           R0, #1
MOVNE           R0, #0
BX              LR

loc_34DE4
CLZ.W           R2, R1
RSB.W           R2, R2, #0x1F
LSR.W           R0, R0, R2
BX              LR

loc_34DF2
CBZ             R0, loc_34DF8
MOV.W           R0, #0xFFFFFFFF

loc_34DF8
B.W             loc_34E48
; End of function sub_34BA0




; unsigned int __fastcall sub_34DFC(unsigned int, unsigned int)
sub_34DFC
CMP             R1, #0
BEQ             loc_34DF2
PUSH.W          {R0,R1,LR}
BL              sub_34BA0
POP.W           {R1,R2,LR}
MUL             R3, R2, R0
SUB.W           R1, R1, R3
BX              LR
; End of function sub_34DFC

ALIGN 4



; int __fastcall sub_34E18(unsigned __int64, unsigned __int64)
sub_34E18

var_10= -0x10
var_C= -0xC
var_8= -8

CBNZ            R3, loc_34E30
CBNZ            R2, loc_34E30
CMP             R1, #0
IT EQ
CMPEQ           R0, #0
ITT NE
MOVNE.W         R1, #0xFFFFFFFF
MOVNE.W         R0, #0xFFFFFFFF
B.W             loc_34E48

loc_34E30
SUB.W           R12, SP, #8
STRD.W          R12, LR, [SP,#var_10]!
BL              sub_34E54
LDR.W           LR, [SP,#0x10+var_C]
LDRD.W          R2, R3, [SP,#0x10+var_8]
ADD             SP, SP, #0x10
BX              LR

loc_34E48
PUSH            {R1,LR}
MOV.W           R0, #8  ; sig
BLX             raise
POP             {R1,PC}
; End of function sub_34E18




; int __fastcall sub_34E54(unsigned __int64, unsigned __int64, unsigned __int64 *)
sub_34E54

arg_0=  0x24

CMP             R1, R3
PUSH.W          {R4-R11,LR}
IT EQ
CMPEQ           R0, R2
MOV             R4, R0
IT CC
MOVCC           R0, #0
MOV             R5, R1
LDR.W           LR, [SP,#arg_0]
IT CC
MOVCC           R1, R0
BCC             loc_34F42
MOV             R10, R2
MOV             R11, R3
CLZ.W           R12, R3
CMP             R3, #0
BEQ             loc_34F58
CLZ.W           R1, R5
CMP             R5, #0
BEQ             loc_34F50

loc_34E84
SUB.W           R12, R12, R1
SUB.W           R8, R12, #0x20 ; ' '
LSL.W           R7, R11, R12
LSL.W           R1, R10, R8
RSB.W           R9, R12, #0x20 ; ' '
LSR.W           R3, R10, R9
LSL.W           R6, R10, R12
ORRS            R7, R1
ORRS            R7, R3
CMP             R5, R7
IT EQ
CMPEQ           R4, R6
ITT CC
MOVCC           R0, #0
MOVCC           R1, R0
BCC             loc_34EC8
MOVS            R0, #1
SUBS            R4, R4, R6
LSL.W           R1, R0, R8
LSR.W           R3, R0, R9
LSL.W           R0, R0, R12
SBC.W           R5, R5, R7
ORRS            R1, R3

loc_34EC8
CMP.W           R12, #0
BEQ             loc_34F42
LSRS            R7, R7, #1
MOV.W           R6, R6,RRX
MOV             R2, R12
B               loc_34EEE

loc_34ED8
SUBS            R3, R4, R6
SBC.W           R10, R5, R7
ADDS            R3, R3, R3
ADC.W           R10, R10, R10
ADDS            R4, R3, #1
ADC.W           R5, R10, #0
SUBS            R2, #1
BEQ             loc_34EFE

loc_34EEE
CMP             R5, R7
IT EQ
CMPEQ           R4, R6
BCS             loc_34ED8
ADDS            R4, R4, R4
ADCS            R5, R5
SUBS            R2, #1
BNE             loc_34EEE

loc_34EFE
LSR.W           R3, R4, R12
LSL.W           R9, R5, R9
LSR.W           R2, R5, R12
LSR.W           R8, R5, R8
ADDS            R0, R0, R4
ORR.W           R3, R3, R9
ORR.W           R4, R3, R8
ADC.W           R1, R5, R1
MOV             R5, R2
SUB.W           R2, R12, #0x20 ; ' '
LSL.W           R3, R5, R12
LSL.W           R6, R4, R12
LSL.W           R2, R4, R2
RSB.W           R12, R12, #0x20 ; ' '
LSR.W           R12, R4, R12
ORRS            R3, R2
SUBS            R0, R0, R6
ORR.W           R3, R3, R12
SBC.W           R1, R1, R3

loc_34F42
CMP.W           LR, #0
BEQ             locret_34F4C
STRD.W          R4, R5, [LR]

locret_34F4C
POP.W           {R4-R11,PC}

loc_34F50
CLZ.W           R1, R4
ADDS            R1, #0x20 ; ' '
B               loc_34E84

loc_34F58
CLZ.W           R12, R2
CLZ.W           R1, R5
ADD.W           R12, R12, #0x20 ; ' '
CMP             R5, #0
BNE             loc_34E84
B               loc_34F50
; End of function sub_34E54

ALIGN 4



; int __fastcall init(int, int, int)
init
PUSH.W          {R3-R9,LR}
MOV             R7, R0
LDR             R6, =(off_4BF04 - 0x34F7E)
MOV             R8, R1
MOV             R9, R2
LDR             R5, =(off_4BF00 - 0x34F84)
ADD             R6, PC  ; off_4BF04
BLX             .init_proc
ADD             R5, PC  ; off_4BF00
SUBS            R6, R6, R5
ASRS            R6, R6, #2
BEQ             locret_34F9C
MOVS            R4, #0

loc_34F8A
ADDS            R4, #1
LDR.W           R3, [R5],#4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R7
BLX             R3
CMP             R6, R4
BNE             loc_34F8A

locret_34F9C
POP.W           {R3-R9,PC}
; End of function init

off_34FA0 DCD off_4BF04 - 0x34F7E
off_34FA4 DCD off_4BF00 - 0x34F84
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_3]
ALIGN 4



; int sub_34FAC()
sub_34FAC
MOV             R2, R1
MOV             R1, R0
MOVS            R0, #3
B.W             sub_11F04
; End of function sub_34FAC

ALIGN 4
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x34FB8
CODE32



; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY, ALIGN=3
; ORG 0x34FC0
DCB    1
DCB    0
DCB    2
DCB    0
; const char s2[]
s2 DCB "dropbear",0
aDropbearkey DCB "dropbearkey",0
aDropbearconver DCB "dropbearconvert",0
; const char format[]
format DCB "Dropbear SSH multi-purpose v%s",0xA
DCB "Make a symlink pointing at this bi"
DCB "nary with one of the",0xA
DCB "following names or run 'dropbearmu"
DCB "lti <command>'.",0xA
DCB "'dropbear' - the Dropbear server",0xA
DCB "'dropbearkey' - the key generator",0xA
DCB "'dropbearconvert' - the key conver"
DCB "ter",0xA,0
aMemAllocError DCB "Mem alloc error",0
aBufSizeTooBig DCB "buf->size too big",0
aBadBufSetlen DCB "Bad buf_setlen",0
aBadBufIncrlen DCB "Bad buf_incrlen",0
aBadBufSetpos DCB "Bad buf_setpos",0
aBadBufIncrwrit DCB "Bad buf_incrwritepos",0
aBadBufIncrpos DCB "Bad buf_incrpos",0
aBadBufGetbyte DCB "Bad buf_getbyte",0
aBadBufGetptr DCB "Bad buf_getptr",0
aBadBufGetwrite DCB "Bad buf_getwriteptr",0
aStringTooLong DCB "String too long",0
aMpNull DCB "mp != NULL",0
aNegativeBignum DCB "negative bignum",0
aMpintError DCB "mpint error",0
aBadCbufSize DCB "Bad cbuf size",0
aCircbufferC DCB "circbuffer.c",0
aCbufUsedCbufSi DCB "cbuf->used <= cbuf->size",0
a2CbufSizeCbufW DCB "((2*cbuf->size)+cbuf->writepos-cbu"
DCB "f->readpos)%cbuf->size == cbuf->us"
DCB "ed%cbuf->size",0
a2CbufSizeCbufR DCB "((2*cbuf->size)+cbuf->readpos-cbuf"
DCB "->writepos)%cbuf->size == (cbuf->s"
DCB "ize-cbuf->used)%cbuf->size",0
aBadCbufWrite DCB "Bad cbuf write",0
aCbufUsedLen DCB "cbuf->used >= len",0
unk_352C0 DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0x97
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB 0xC4
DCB    4
DCB    0
DCB 0xC0
DCB 0x9A
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB 0xC4
DCB    4
DCB    0
DCB 0xB8
DCB 0x97
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x24 ; $
DCB 0xC4
DCB    4
DCB    0
DCB 0x34 ; 4
DCB 0x97
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB 0x5C ; \
DCB    3
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0x97
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB 0x5C ; \
DCB    3
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xA4
DCB 0x95
DCB    3
DCB    0
unk_35338 DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0x97
DCB    3
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB 0xA4
DCB 0x95
DCB    3
DCB    0
DCB 0x14
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB    0
DCB    0
DCB    0
DCB 0x84
DCB 0x2C ; ,
DCB    1
DCB    0
DCB 0x54 ; T
DCB 0x72 ; r
DCB    2
DCB    0
DCB 0xF8
DCB 0x71 ; q
DCB    2
DCB    0
off_35368 DCD sub_12C50
DCD sub_12C58
DCD sub_12C58
unk_35374 DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
unk_35380 DCB 0xEC
DCB 0x94
DCB    3
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0xEC
DCB 0x94
DCB    3
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
; const char aKexguess2MattU[]
aKexguess2MattU DCB "kexguess2@matt.ucc.asn.au",0
aTooManyAlgorit DCB "Too many algorithms '%s'",0
aThisDropbearPr DCB "This Dropbear program does not sup"
DCB "port '%s' %s algorithm",0
aCurve25519Sha2 DCB "curve25519-sha256",0
aCurve25519Sha2_0 DCB "curve25519-sha256@libssh.org",0
aEcdhSha2Nistp5 DCB "ecdh-sha2-nistp521",0
aEcdhSha2Nistp3 DCB "ecdh-sha2-nistp384",0
aEcdhSha2Nistp2 DCB "ecdh-sha2-nistp256",0
aDiffieHellmanG DCB "diffie-hellman-group14-sha256",0
aDiffieHellmanG_0 DCB "diffie-hellman-group14-sha1",0
aEcdsaSha2Nistp DCB "ecdsa-sha2-nistp256",0
aEcdsaSha2Nistp_0 DCB "ecdsa-sha2-nistp384",0
aEcdsaSha2Nistp_1 DCB "ecdsa-sha2-nistp521",0
aSshRsa DCB "ssh-rsa",0
; const char aNone[]
aNone DCB "none",0
aHmacSha1 DCB "hmac-sha1",0
aHmacSha2256 DCB "hmac-sha2-256",0
aAes256Ctr DCB "aes256-ctr",0
; const char function[]
function DCB "writechannel_writev",0
aSForUnknownCha DCB "%s for unknown channel %d",0
aUnknownChannel DCB "Unknown channel %d",0
; const char file[]
file DCB "common-channel.c",0
aChannelSentClo DCB "!channel->sent_close",0
aFd0 DCB "fd >= 0",0
; const char assertion[]
assertion DCB "moredata",0
aChannelRecvwin DCB "channel->recvwindow <= opts.recv_w"
DCB "indow",0
aChannelRecvwin_0 DCB "channel->recvwindow <= cbuf_getava"
DCB "il(channel->writebuf)",0
aChannelExtrabu DCB "channel->extrabuf == NULL || chann"
DCB "el->recvwindow <= cbuf_getavail(ch"
DCB "annel->extrabuf)",0
aEof DCB "EOF",0
aClose DCB "Close",0
aReceivedDataAf DCB "Received data after eof",0
aOversizedPacke DCB "Oversized packet",0
aChannelRecvwin_1 DCB "channel->recvwindow >= datalen",0
aUnexpectedChan DCB "Unexpected channel reply",0
ALIGN 4
unk_356AC DCB    6
DCB    0
DCB    0
DCB    0
off_356B0 DCD aAbrt     ; "ABRT"
DCB  0xE
DCB    0
DCB    0
DCB    0
DCB 0x21 ; !
DCB 0x57 ; W
DCB    3
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB 0x26 ; &
DCB 0x57 ; W
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x2A ; *
DCB 0x57 ; W
DCB    3
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB 0x33 ; 3
DCB 0x57 ; W
DCB    3
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x2E ; .
DCB 0x57 ; W
DCB    3
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0x32 ; 2
DCB 0x57 ; W
DCB    3
DCB    0
DCB  0xD
DCB    0
DCB    0
DCB    0
DCB 0x37 ; 7
DCB 0x57 ; W
DCB    3
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x3C ; <
DCB 0x57 ; W
DCB    3
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB 0x41 ; A
DCB 0x57 ; W
DCB    3
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x46 ; F
DCB 0x57 ; W
DCB    3
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0x4B ; K
DCB 0x57 ; W
DCB    3
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x57 ; W
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aAbrt DCB "ABRT",0
aAlrm DCB "ALRM",0
aFpe DCB "FPE",0
aHup DCB "HUP",0
aInt DCB "INT",0
aKill_0 DCB "KILL",0
aPipe_0 DCB "PIPE",0
aQuit DCB "QUIT",0
aSegv DCB "SEGV",0
aTerm DCB "TERM",0
aUsr1 DCB "USR1",0
aUsr2 DCB "USR2",0
aCryptoError DCB "Crypto error",0
aUnexpectedNewk DCB "Unexpected newkeys message",0
aKex DCB "kex",0
aCompSC DCB "comp s->c",0
aHostkey DCB "hostkey",0
aEncCS DCB "enc c->s",0
aEncSC DCB "enc s->c",0
aMacCS DCB "mac c->s",0
aMacSC DCB "mac s->c",0
aCompCS DCB "comp c->s",0
aNoMatchingAlgo DCB "No matching algo %s",0
aSsh20Dropbear2 DCB "SSH-2.0-dropbear_2018.76",0
aDiffieHellmanE DCB "Diffie-Hellman error",0
aEccError DCB "ECC error",0
aBadCurve25519 DCB "Bad curve25519",0
; const char aHelp[]
aHelp DCB "help",0
aAvailableCiphe DCB "Available ciphers:",0xA
DCB "%s",0xA,0
aNoneAes128Ctr DCB "none,aes128-ctr",0
aCipher DCB "cipher",0
aNoValidCiphers DCB "No valid ciphers specified for '-c"
DCB "'",0
aAvailableMacsS DCB "Available MACs:",0xA
DCB "%s",0xA,0
aMac DCB "MAC",0
aNoValidMacsSpe DCB "No valid MACs specified for '-m'",0
; const char aDropbearVS[]
aDropbearVS DCB "Dropbear v%s",0xA,0
aKeepaliveOpens DCB "keepalive@openssh.com",0
aTimeoutBeforeA DCB "Timeout before auth",0
aKeepaliveTimeo DCB "Keepalive timeout",0
aIdleTimeout DCB "Idle timeout",0
aCommonSessionC DCB "common-session.c",0
aSesPayloadNull DCB "ses.payload == NULL",0
aTerminatedBySi DCB "Terminated by signal",0
aErrorInSelect DCB "Error in select",0
aSsh DCB "SSH-",0
; const char aSsh2[]
aSsh2 DCB "SSH-2.",0
; const char aSsh199[]
aSsh199 DCB "SSH-1.99-",0
aIncompatibleRe DCB "Incompatible remote version '%s'",0
aSsh20Dropbear2_0 DCB "SSH-2.0-dropbear_2018.76",0xD,0xA,0
aBinSh DCB "/bin/sh",0
asc_359A7 DCB "!!",0
aSignalPipeFail DCB "Signal pipe failed",0
ALIGN 0x10
off_359C0 DCD off_395A4 ; "sha1"
DCD off_39734           ; "sha256"
DCD off_397B8           ; "sha384"
DCD off_39AC0           ; "sha512"
dword_359D0 DCD 0
aErrorRegisteri DCB "Error registering crypto",0
aWarningReading DCB "Warning: Reading the randomness so"
DCB "urce '%s' seems to have blocked.",0xA
DCB "You may need to find a better entr"
DCB "opy source.",0
aSeedrandomNotD DCB "seedrandom not done",0
aDevUrandom DCB "/dev/urandom",0
aFailureReading DCB "Failure reading random device %s",0
aProcTimerList DCB "/proc/timer_list",0
aProcInterrupts DCB "/proc/interrupts",0
aProcLoadavg DCB "/proc/loadavg",0
aProcSysKernelR DCB "/proc/sys/kernel/random/entropy_av"
DCB "ail",0
aProcNetNetstat DCB "/proc/net/netstat",0
aProcNetDev DCB "/proc/net/dev",0
aProcNetTcp DCB "/proc/net/tcp",0
aProcNetRtCache DCB "/proc/net/rt_cache",0
aProcVmstat DCB "/proc/vmstat",0
; const char aExitedS[]
aExitedS DCB "Exited: %s",0
aFailedAssertio DCB "Failed assertion (%s:%d): `%s'",0
aErrorClosingFd DCB "Error closing fd %d, %s",0
aMMallocFailed DCB "m_malloc failed",0
aC DCB "-c",0
aSignalError DCB "signal() error",0
aMStrdupFailed DCB "m_strdup failed",0
aMReallocFailed DCB "m_realloc failed",0
aCouldnTSetNonb DCB "Couldn't set nonblocking",0
aChildDup2Failu DCB "Child dup2() failure",0
; const char aSS[]
aSS DCB "%s/%s",0
aClockBroke DCB "Clock broke",0
ALIGN 4
dword_35C0C DCD 2
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xC9
DCB  0xF
DCB 0xDA
DCB 0xA2
DCB 0x21 ; !
DCB 0x68 ; h
DCB 0xC2
DCB 0x34 ; 4
DCB 0xC4
DCB 0xC6
DCB 0x62 ; b
DCB 0x8B
DCB 0x80
DCB 0xDC
DCB 0x1C
DCB 0xD1
DCB 0x29 ; )
DCB    2
DCB 0x4E ; N
DCB    8
DCB 0x8A
DCB 0x67 ; g
DCB 0xCC
DCB 0x74 ; t
DCB    2
DCB  0xB
DCB 0xBE
DCB 0xA6
DCB 0x3B ; ;
DCB 0x13
DCB 0x9B
DCB 0x22 ; "
DCB 0x51 ; Q
DCB 0x4A ; J
DCB    8
DCB 0x79 ; y
DCB 0x8E
DCB 0x34 ; 4
DCB    4
DCB 0xDD
DCB 0xEF
DCB 0x95
DCB 0x19
DCB 0xB3
DCB 0xCD
DCB 0x3A ; :
DCB 0x43 ; C
DCB 0x1B
DCB 0x30 ; 0
DCB 0x2B ; +
DCB  0xA
DCB 0x6D ; m
DCB 0xF2
DCB 0x5F ; _
DCB 0x14
DCB 0x37 ; 7
DCB 0x4F ; O
DCB 0xE1
DCB 0x35 ; 5
DCB 0x6D ; m
DCB 0x6D ; m
DCB 0x51 ; Q
DCB 0xC2
DCB 0x45 ; E
DCB 0xE4
DCB 0x85
DCB 0xB5
DCB 0x76 ; v
DCB 0x62 ; b
DCB 0x5E ; ^
DCB 0x7E ; ~
DCB 0xC6
DCB 0xF4
DCB 0x4C ; L
DCB 0x42 ; B
DCB 0xE9
DCB 0xA6
DCB 0x37 ; 7
DCB 0xED
DCB 0x6B ; k
DCB  0xB
DCB 0xFF
DCB 0x5C ; \
DCB 0xB6
DCB 0xF4
DCB    6
DCB 0xB7
DCB 0xED
DCB 0xEE
DCB 0x38 ; 8
DCB 0x6B ; k
DCB 0xFB
DCB 0x5A ; Z
DCB 0x89
DCB 0x9F
DCB 0xA5
DCB 0xAE
DCB 0x9F
DCB 0x24 ; $
DCB 0x11
DCB 0x7C ; |
DCB 0x4B ; K
DCB 0x1F
DCB 0xE6
DCB 0x49 ; I
DCB 0x28 ; (
DCB 0x66 ; f
DCB 0x51 ; Q
DCB 0xEC
DCB 0xE4
DCB 0x5B ; [
DCB 0x3D ; =
DCB 0xC2
DCB    0
DCB 0x7C ; |
DCB 0xB8
DCB 0xA1
DCB 0x63 ; c
DCB 0xBF
DCB    5
DCB 0x98
DCB 0xDA
DCB 0x48 ; H
DCB 0x36 ; 6
DCB 0x1C
DCB 0x55 ; U
DCB 0xD3
DCB 0x9A
DCB 0x69 ; i
DCB 0x16
DCB 0x3F ; ?
DCB 0xA8
DCB 0xFD
DCB 0x24 ; $
DCB 0xCF
DCB 0x5F ; _
DCB 0x83
DCB 0x65 ; e
DCB 0x5D ; ]
DCB 0x23 ; #
DCB 0xDC
DCB 0xA3
DCB 0xAD
DCB 0x96
DCB 0x1C
DCB 0x62 ; b
DCB 0xF3
DCB 0x56 ; V
DCB 0x20
DCB 0x85
DCB 0x52 ; R
DCB 0xBB
DCB 0x9E
DCB 0xD5
DCB 0x29 ; )
DCB    7
DCB 0x70 ; p
DCB 0x96
DCB 0x96
DCB 0x6D ; m
DCB 0x67 ; g
DCB  0xC
DCB 0x35 ; 5
DCB 0x4E ; N
DCB 0x4A ; J
DCB 0xBC
DCB 0x98
DCB    4
DCB 0xF1
DCB 0x74 ; t
DCB 0x6C ; l
DCB    8
DCB 0xCA
DCB 0x18
DCB 0x21 ; !
DCB 0x7C ; |
DCB 0x32 ; 2
DCB 0x90
DCB 0x5E ; ^
DCB 0x46 ; F
DCB 0x2E ; .
DCB 0x36 ; 6
DCB 0xCE
DCB 0x3B ; ;
DCB 0xE3
DCB 0x9E
DCB 0x77 ; w
DCB 0x2C ; ,
DCB 0x18
DCB  0xE
DCB 0x86
DCB    3
DCB 0x9B
DCB 0x27 ; '
DCB 0x83
DCB 0xA2
DCB 0xEC
DCB    7
DCB 0xA2
DCB 0x8F
DCB 0xB5
DCB 0xC5
DCB 0x5D ; ]
DCB 0xF0
DCB 0x6F ; o
DCB 0x4C ; L
DCB 0x52 ; R
DCB 0xC9
DCB 0xDE
DCB 0x2B ; +
DCB 0xCB
DCB 0xF6
DCB 0x95
DCB 0x58 ; X
DCB 0x17
DCB 0x18
DCB 0x39 ; 9
DCB 0x95
DCB 0x49 ; I
DCB 0x7C ; |
DCB 0xEA
DCB 0x95
DCB 0x6A ; j
DCB 0xE5
DCB 0x15
DCB 0xD2
DCB 0x26 ; &
DCB 0x18
DCB 0x98
DCB 0xFA
DCB    5
DCB 0x10
DCB 0x15
DCB 0x72 ; r
DCB 0x8E
DCB 0x5A ; Z
DCB 0x8A
DCB 0xAC
DCB 0xAA
DCB 0x68 ; h
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
aAllArgumentsMu DCB "All arguments must be specified",0xA
DCB 0
aInvalidInputKe DCB "Invalid input key type",0xA,0
; const char s[]
s DCB "Invalid output key type",0xA,0
aErrorReadingKe DCB "Error reading key from '%s'",0xA,0
; const char aKeyIsASKey[]
aKeyIsASKey DCB "Key is a %s key",0xA,0
; const char aErrorWritingKe[]
aErrorWritingKe DCB "Error writing key to '%s'",0xA,0
; const char aWroteKeyToS[]
aWroteKeyToS DCB "Wrote key to '%s'",0xA,0
; const char aUsageSInputtyp[]
aUsageSInputtyp DCB "Usage: %s <inputtype> <outputtype>"
DCB " <inputfile> <outputfile>",0xA
DCB 0xA
DCB "CAUTION: This program is for conve"
DCB "nience only, and is not secure if "
DCB "used on",0xA
DCB "untrusted input files, ie it could"
DCB " allow arbitrary code execution.",0xA
DCB "All parameters must be specified i"
DCB "n order.",0xA
DCB 0xA
DCB "The input and output types are one"
DCB " of:",0xA
DCB "openssh",0xA
DCB "dropbear",0xA
DCB 0xA
DCB "Example:",0xA
DCB "dropbearconvert openssh dropbear /"
DCB "etc/ssh/ssh_host_rsa_key /etc/drop"
DCB "bear_rsa_host_key",0xA,0
; const char aUsageSTTypeFFi[]
aUsageSTTypeFFi DCB "Usage: %s -t <type> -f <filename> "
DCB "[-s bits]",0xA
DCB "-t type",9,"Type of key to generat"
DCB "e. One of:",0xA
DCB 9,9,"rsa",0xA
DCB 9,9,"ecdsa",0xA
DCB "-f filename    Use filename for th"
DCB "e secret key.",0xA
DCB "               ~/.ssh/id_dropbear "
DCB "is recommended for client keys.",0xA
DCB "-s bits",9,"Key size in bits, shou"
DCB "ld be a multiple of 8 (optional)",0xA
DCB "           ECDSA has sizes 256 384"
DCB " 521 ",0xA
DCB "-y",9,9,"Just print the publickey "
DCB "and fingerprint for the",0xA
DCB 9,9,"private key in <filename>.",0xA
DCB 0
; const char aBase64Failed[]
aBase64Failed DCB "base64 failed",0
; const char aPublicKeyPorti[]
aPublicKeyPorti DCB "Public key portion is:",0xA
DCB "%s %s %s@%s",0xA
DCB "Fingerprint: %s",0xA,0
; const char aFailedReadingS[]
aFailedReadingS DCB "Failed reading '%s'",0xA,0
; const char aBadKeyInS[]
aBadKeyInS DCB "Bad key in '%s'",0xA,0
; const char aUnknownArgumen[]
aUnknownArgumen DCB "Unknown argument %s",0xA,0
aMustSpecifyAKe DCB "Must specify a key filename",0xA,0
; const char aMustSpecifyKey[]
aMustSpecifyKey DCB "Must specify key type",0xA,0
; const char aEcdsa[]
aEcdsa DCB "ecdsa",0
aUnknownKeyType DCB "Unknown key type '%s'",0xA,0
; const char aBitsMustBeAnIn[]
aBitsMustBeAnIn DCB "Bits must be an integer",0xA,0
aBitsMustSatisf DCB "Bits must satisfy 512 <= bits <= 4"
DCB "096, and be a multiple of 8",0xA,0
; const char aGeneratingUBit[]
aGeneratingUBit DCB "Generating %u bit %s key, this may"
DCB " take a while...",0xA,0
aFailedToGenera DCB "Failed to generate key.",0xA,0
; const char aCurveForDp[]
aCurveForDp DCB "curve_for_dp",0
aMissingEccPara DCB "Missing ECC params %s",0
; const char aEccC[]
aEccC DCB "ecc.c",0
; const char aCurve[]
aCurve DCB "*curve",0
aDropbearDoesnT DCB "Dropbear doesn't support ECC point"
DCB " compression",0
aKeySizeDIsnTVa DCB "Key size %d isn't valid. Try 256 3"
DCB "84 521 ",0
; const char aEcdsaSha2S[]
aEcdsaSha2S DCB "ecdsa-sha2-%s",0
; const char aRsaGenerationF[]
aRsaGenerationF DCB "RSA generation failed",0xA,0
aBitsMustSatisf_0 DCB "Bits must satisfy 512 <= bits <= 4"
DCB "096, and be a multiple of 8",0
aInternalError DCB "Internal error",0
; const char aSTmpD[]
aSTmpD DCB "%s.tmp%d",0
aCouldnTCreateN DCB "Couldn't create new file %s: %s",0
aFailedWritingF DCB "Failed writing file %s: %s",0
aFsyncOfSFailed DCB "fsync of %s failed: %s",0
aFailedMovingKe DCB "Failed moving key file to %s: %s",0
unk_363C8 DCB 0x2A ; *
DCB 0x86
DCB 0x48 ; H
DCB 0xCE
DCB 0x3D ; =
DCB    3
DCB    1
DCB    7
unk_363D0 DCB 0x2B ; +
DCB 0x81
DCB    4
DCB    0
DCB 0x22 ; "
unk_363D5 DCB 0x2B ; +
DCB 0x81
DCB    4
DCB    0
DCB 0x23 ; #
aCiphersOtherTh DCB "Ciphers other than DES-EDE3-CBC no"
DCB "t supported",0
aExpected16Digi DCB "Expected 16-digit iv in DEK-Info",0
aUnableToOpenKe DCB "Unable to open key file",0
aKeyBodyNotPres DCB "Key body not present",0
aUnrecognisedKe DCB "Unrecognised key type",0
aUnexpectedEndO DCB "Unexpected end of file",0
aHeaderFoundInB DCB "Header found in body of key data",0
aProcTypeIsNot4 DCB "Proc-Type is not 4 (only 4 is supp"
DCB "orted)",0
aErrorDecodingB DCB "Error decoding base64",0
aFileDoesNotBeg DCB "File does not begin with OpenSSH k"
DCB "ey header",0
aEncryptedKeyBl DCB "Encrypted key blob is not a multip"
DCB "le of cipher block size",0
; const char aBegin[]
aBegin DCB "-----BEGIN ",0
; const char aBeginRsaPrivat[]
aBeginRsaPrivat DCB "-----BEGIN RSA PRIVATE KEY-----",0xA
DCB 0
; const char aBeginDsaPrivat[]
aBeginDsaPrivat DCB "-----BEGIN DSA PRIVATE KEY-----",0xA
DCB 0
; const char aBeginEcPrivate[]
aBeginEcPrivate DCB "-----BEGIN EC PRIVATE KEY-----",0xA
DCB 0
; const char aEnd[]
aEnd DCB "-----END ",0
; const char aProcType[]
aProcType DCB "Proc-Type",0
; const char aEncrypted[]
aEncrypted DCB "ENCRYPTED",0xA,0
; const char aDesEde3Cbc[]
aDesEde3Cbc DCB "DES-EDE3-CBC,",0
a2x DCB "%2x",0
; const char aErrorS[]
aErrorS DCB "Error: %s",0xA,0
; const char aNegativeAsn1Le[]
aNegativeAsn1Le DCB "Negative ASN.1 length",0
aErrorParsingEc DCB "Error parsing ECC key",0
aUnableToCreate DCB "unable to create key structure",0
aVersionNumberM DCB "Version number mismatch",0
aAsn1DecodingFa DCB "ASN.1 decoding failure",0
aUnknownEccKeyT DCB "Unknown ECC key type",0
aEncryptedKeysN DCB "encrypted keys not supported curre"
DCB "ntly",0
aEndRsaPrivateK DCB "-----END RSA PRIVATE KEY-----",0xA
DCB 0
aEndEcPrivateKe DCB "-----END EC PRIVATE KEY-----",0xA,0
; const char aPre033Dropbear[]
aPre033Dropbear DCB "Pre-0.33 Dropbear keys cannot be c"
DCB "onverted to OpenSSH keys.",0xA,0
aBignumErrorFor DCB "Bignum error for p-1",0xA,0
aBignumErrorFor_0 DCB "Bignum error for dmp1",0xA,0
aBignumErrorFor_1 DCB "Bignum error for q-1",0xA,0
aBignumErrorFor_2 DCB "Bignum error for dmq1",0xA,0
aBignumErrorFor_3 DCB "Bignum error for iqmp",0xA,0
aKeyimportC DCB "keyimport.c",0
aKSizeCurveSize DCB "k_size <= curve_size",0
aPosLen DCB "pos == len",0
; const char aEncryptedKeysA[]
aEncryptedKeysA DCB "Encrypted keys aren't supported cu"
DCB "rrently",0xA,0
aWb DCB "wb",0
aFailedOpeningO DCB "Failed opening output file",0xA,0
; const char aDev[]
aDev DCB "/dev/",0
aLoginInitEntry DCB "login_init_entry: Cannot find user"
DCB " ",0x22,"%s",0x22,0
aSysloginPerfor DCB "syslogin_perform_login: couldn't m"
DCB "alloc()",0
aSysloginPerfor_0 DCB "syslogin_perform_logout: logout(%s"
DCB ") returned an error: %s",0
aSysloginWriteE DCB "syslogin_write_entry: Invalid type"
DCB " field",0
ALIGN 4
off_368C8 DCD aDropbearPrng ; "dropbear_prng"
ALIGN 0x10
DCD sub_1C5C8
DCD sub_1C5D0
DCD sub_1C64C
DCD sub_1C610
DCD sub_1C654
DCD sub_1C5E0
DCD sub_1C644
DCD sub_1C5D8
aLtcPrngC DCB "ltc_prng.c",0
aOutlenNull DCB "outlen != NULL",0
aOutNull DCB "out != NULL",0
aDropbearPrng DCB "dropbear_prng",0
; const char aErrorResolving[]
aErrorResolving DCB "Error resolving '%s' port '%s'. %s"
DCB 0
aNetioC DCB "netio.c",0
aLen0 DCB "len > 0",0
aCSock1 DCB "c->sock == -1",0
; const char aErrorResolving_0[]
aErrorResolving_0 DCB "Error resolving bind address '%s' "
DCB "(port %s). %s",0
aErrorBindingLo DCB "Error binding local address '%s' ("
DCB "port %s). %s",0
aUnexpectedFail DCB "unexpected failure",0
aCouldnTSetSoPr DCB "Couldn't set SO_PRIORITY (%s)",0
; const char aErrorResolving_1[]
aErrorResolving_1 DCB "Error resolving: %s",0
aCouldnTSetIpv6 DCB "Couldn't set IPV6_V6ONLY",0
; const char aErrorListening[]
aErrorListening DCB "Error listening: %s",0
aFailedLookupS DCB "Failed lookup: %s",0
aFailedSocketAd DCB "Failed socket address: %s",0
aHmacError DCB "HMAC error",0
aPacketC DCB "packet.c",0
aIsemptySesWrit DCB "!isempty(&ses.writequeue)",0
aErrorWritingS DCB "Error writing: %s",0
aErrorDecryptin DCB "Error decrypting",0
aIntegrityError DCB "Integrity error",0
aBadPacketSizeU DCB "Bad packet size %u",0
aErrorReadingS DCB "Error reading: %s",0
aIntegrityError_0 DCB "Integrity error (bad packet size %"
DCB "u)",0
aErrorEncryptin DCB "Error encrypting",0
aDisconnectRece DCB "Disconnect received",0
aUnexpectedPack DCB "Unexpected packet type %d, expecte"
DCB "d %d",0
aReceivedMessag DCB "Received message %d before useraut"
DCB "h",0
aQueueC DCB "queue.c",0
aIsemptyQueue DCB "!isempty(queue)",0
unk_36B95 DCB    0
DCB 0x30 ; 0
DCB 0x21 ; !
DCB 0x30 ; 0
DCB    9
DCB    6
DCB    5
DCB 0x2B ; +
DCB  0xE
DCB    3
DCB    2
DCB 0x1A
DCB    5
DCB    0
DCB    4
DCB 0x14
aRsaC DCB "rsa.c",0
aRsaEmPosRsaEmS DCB "rsa_EM->pos == rsa_EM->size",0
aRsaKeyTooShort DCB "RSA key too short",0
aRsaKeyBadE DCB "RSA key bad e",0
aRsaError DCB "RSA error",0
aSsizeNsize DCB "ssize <= nsize",0
off_36C00 DCD aSshRsa   ; "ssh-rsa"
DCD aEcdsaSha2Nistp     ; "ecdsa-sha2-nistp256"
DCD aEcdsaSha2Nistp_0   ; "ecdsa-sha2-nistp384"
DCD aEcdsaSha2Nistp_1   ; "ecdsa-sha2-nistp521"
; const char src[]
src DCB "sha1!! ",0
aBadKeyTypeD DCB "Bad key type %d",0
aBadKeyTypesInB DCB "Bad key types in buf_put_pub_key",0
aBadKeyTypesInP DCB "Bad key types in put pub key",0
aNonMatchingSig DCB "Non-matching signing type",0
aNoRsaKeyToVeri DCB "No RSA key to verify signature",0
aPtyAllocateOpe DCB "pty_allocate: openpty: %.100s",0
aTtynameFailsFo DCB "ttyname fails for openpty device",0
aChown100s00Fai DCB "chown %.100s 0 0 failed: %.100s",0
aChmod100s0666F DCB "chmod %.100s 0666 failed: %.100s",0
aDevTty DCB "/dev/tty",0
aSetsid100s DCB "setsid: %.100s",0
aFailedToDiscon DCB "Failed to disconnect from controll"
DCB "ing tty.",0xA,0
aIoctlTiocsctty DCB "ioctl(TIOCSCTTY): %.100s",0
a100s100s DCB "%.100s: %.100s",0
aOpenDevTtyFail DCB "open /dev/tty failed - could not s"
DCB "et controlling tty: %.100s",0
aPtySetownerSta DCB "pty_setowner: stat(%.101s) failed:"
DCB " %.100s",0
aChown100sUUFai DCB "chown(%.100s, %u, %u) failed: %.10"
DCB "0s",0
aChmod100s0OFai DCB "chmod(%.100s, 0%o) failed: %.100s",0
ALIGN 4
unk_36E3C DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xAB
DCB 0x6E ; n
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aFailedToSetEui DCB "Failed to set euid",0
aTmpDropbear8x DCB "/tmp/dropbear-%.8x",0
; const char aAuth8xD[]
aAuth8xD DCB "auth-%.8x-%d",0
aFailedToRevert DCB "Failed to revert euid",0
aSshAuthSock DCB "SSH_AUTH_SOCK",0
aAuthAgentOpens DCB "auth-agent@openssh.com",0
aIsInvalid DCB "is invalid",0
aPublickey DCB "publickey",0
aPassword DCB "password",0
aMaxAuthTriesRe DCB "Max auth tries reached - user '%s'"
DCB " from %s",0
; const char aSshConnection[]
aSshConnection DCB "ssh-connection",0
aUnknownService DCB "unknown service in auth",0
aAttemptedUsern DCB "Attempted username with a null byt"
DCB "e from %s",0
aClientTryingMu DCB "Client trying multiple usernames f"
DCB "rom %s",0
aLoginAttemptFo DCB "Login attempt for nonexistent user"
DCB " from %s",0
aLoginAttemptWi DCB "Login attempt with wrong user %s f"
DCB "rom %s",0
aRootLoginRejec DCB "root login rejected",0
aTooManyGroupsF DCB "Too many groups for user '%s'",0
aLoginsAreRestr DCB "Logins are restricted to the group"
DCB " %s but user '%s' is not a member",0
aUserSHasInvali DCB "User '%s' has invalid shell, rejec"
DCB "ted",0
aAuthSucceededW DCB "Auth succeeded with blank password"
DCB " for '%s' from %s",0
aUserAccountSIs DCB "User account '%s' is locked",0
aUserSHasBlankP DCB "User '%s' has blank password, reje"
DCB "cted",0
aPasswordAuthSu DCB "Password auth succeeded for '%s' f"
DCB "rom %s",0
aBadPasswordAtt DCB "Bad password attempt for '%s' from"
DCB " %s",0
; const char aSvrAuthPubkey[]
aSvrAuthPubkey DCB "svr_auth_pubkey",0
aSMustBeOwnedBy DCB "%s must be owned by user or root, "
DCB "and not writable by others",0
aPubkeyAuthAtte DCB "Pubkey auth attempt with unknown a"
DCB "lgo for '%s' from %s",0
; const char aSsh_0[]
aSsh_0 DCB "/.ssh",0
; const char aSSshAuthorized[]
aSSshAuthorized DCB "%s/.ssh/authorized_keys",0
; const char aSvrAuthpubkeyC[]
aSvrAuthpubkeyC DCB "svr-authpubkey.c",0
; const char aSesPayloadBegi[]
aSesPayloadBegi DCB "ses.payload_beginning <= ses.paylo"
DCB "ad->pos",0
aPubkeyAuthSucc DCB "Pubkey auth succeeded for '%s' wit"
DCB "h key %s from %s",0
aPubkeyAuthBadS DCB "Pubkey auth bad signature for '%s'"
DCB " with key %s from %s",0
aNoPortForwardi DCB "no-port-forwarding",0
aPortForwarding DCB "Port forwarding disabled.",0
aNoAgentForward DCB "no-agent-forwarding",0
aAgentForwardin DCB "Agent forwarding disabled.",0
aNoX11Forwardin DCB "no-X11-forwarding",0
aX11ForwardingD DCB "X11 forwarding disabled.",0
; const char aNoPty[]
aNoPty DCB "no-pty",0
aPtyAllocationD DCB "Pty allocation disabled.",0
; const char aCommand[]
aCommand DCB "command=",0x22,0
aForcedCommandS DCB "Forced command '%s'",0
aBadlyFormatted DCB "Badly formatted command= authorize"
DCB "d_keys option",0
aBadPublicKeyOp DCB "Bad public key options at %s:%d",0
DCB    0
DCB    0
DCB    0
unk_3739C DCB    0
DCB    0
DCB    0
DCB    0
DCD aSession            ; "session"
DCD sub_209D0
DCD sub_20868
DCD sub_21430
DCD sub_20A54
aSvrChansession DCB "svr-chansession.c",0
aChannelTypedat DCB "channel->typedata == NULL",0
aChansessExitEx DCB "chansess->exit.exitsignal == -1",0
aExitStatus DCB "exit-status",0
aSvrSesChildpid DCB "svr_ses.childpids[i].pid > 0",0
aExitSignal DCB "exit-signal",0
aEnvironError DCB "environ error",0
aErrorChangingU DCB "Error changing user group",0
aErrorChangingU_0 DCB "Error changing user",0
aCouldnTChangeU DCB "Couldn't",9,"change user as non-ro"
DCB "ot",0
aUser DCB "USER",0
aLogname DCB "LOGNAME",0
aHome DCB "HOME",0
aShell DCB "SHELL",0
aBinSbinUsrBinU DCB "/bin:/sbin:/usr/bin:/usr/sbin",0
aPath DCB "PATH",0
aSshTty DCB "SSH_TTY",0
aSshConnection_0 DCB "SSH_CONNECTION",0
aSshClient DCB "SSH_CLIENT",0
aSshOriginalCom DCB "SSH_ORIGINAL_COMMAND",0
aErrorChangingD DCB "Error changing directory",0
aChildFailed DCB "Child failed",0
; const char aSftp[]
aSftp DCB "sftp",0
aUsrLibexecSftp DCB "/usr/libexec/sftp-server",0
; const char aSSSS[]
aSSSS DCB "%s %s %s %s",0
aNoPtyWasAlloca DCB "No pty was allocated, couldn't exe"
DCB "cute",0
aChansessNull DCB "chansess != NULL",0
; const char aWindowChange[]
aWindowChange DCB "window-change",0
; const char aShell_0[]
aShell_0 DCB "shell",0
; const char aPtyReq[]
aPtyReq DCB "pty-req",0
aMultiplePtyReq DCB "Multiple pty requests",0
aOutOfMemory DCB "Out of memory",0
aGetpwnamFailed DCB "getpwnam failed after succeeding p"
DCB "reviously",0
aBadTermModeStr DCB "Bad term mode string",0
aErrorSettingTe DCB "Error setting terminal attributes",0
; const char aExec[]
aExec DCB "exec",0
; const char aSubsystem[]
aSubsystem DCB "subsystem",0
; const char aX11Req[]
aX11Req DCB "x11-req",0
; const char aAuthAgentReqOp[]
aAuthAgentReqOp DCB "auth-agent-req@openssh.com",0
aSession DCB "session",0
aEtcDropbearDro_0 DCB "/etc/dropbear/dropbear_rsa_host_ke"
DCB "y",0
aEtcDropbearDro DCB "/etc/dropbear/dropbear_ecdsa_host_"
DCB "key",0
aPrematureKexdh DCB "Premature kexdh_init message recei"
DCB "ved",0
aBadKexValue DCB "Bad kex value",0
aSvrKexC DCB "svr-kex.c",0
aCouldnTReadOrG DCB "Couldn't read or generate hostkey "
DCB "%s",0
aGeneratedHostk DCB "Generated hostkey %s, fingerprint "
DCB "is %s",0
; const char aAieeSegfaultYo[]
aAieeSegfaultYo DCB "Aiee, segfault! You should probabl"
DCB "y report this as a bug to the deve"
DCB "loper",0xA,0
aFailedListenin DCB "Failed listening on '%s': %s",0
aNoListeningPor DCB "No listening ports available.",0
aFailedToDaemon DCB "Failed to daemonize: %s",0
aRunningInBackg DCB "Running in background",0
aNotBackgroundi DCB "Not backgrounding",0
; const char aD[]
aD DCB "%d",0xA,0
aListeningSocke DCB "Listening socket error",0
aErrorForkingS DCB "Error forking: %s",0
aChildConnectio DCB "Child connection from %s:%s",0
aSetsidS DCB "setsid: %s",0
aOnlyOneSKeyCan DCB "Only one %s key can be specified",0
; const char aDropbearServer[]
aDropbearServer DCB "Dropbear server v%s https://matt.u"
DCB "cc.asn.au/dropbear/dropbear.html",0xA
DCB "Usage: %s [options]",0xA
DCB "-b bannerfile",9,"Display the cont"
DCB "ents of bannerfile before user log"
DCB "in",0xA
DCB 9,9,"(default: none)",0xA
DCB "-r keyfile  Specify hostkeys (repe"
DCB "atable)",0xA
DCB 9,9,"defaults: ",0xA
DCB 9,9,"rsa %s",0xA
DCB 9,9,"ecdsa %s",0xA
DCB "-R",9,9,"Create hostkeys as requir"
DCB "ed",0xA
DCB "-F",9,9,"Don't fork into backgroun"
DCB "d",0xA
DCB "-E",9,9,"Log to stderr rather than"
DCB " syslog",0xA
DCB "-w",9,9,"Disallow root logins",0xA
DCB "-G",9,9,"Restrict logins to member"
DCB "s of specified group",0xA
DCB "-s",9,9,"Disable password logins",0xA
DCB "-g",9,9,"Disable password logins f"
DCB "or root",0xA
DCB "-B",9,9,"Allow blank password logi"
DCB "ns",0xA
DCB "-T",9,9,"Maximum authentication tr"
DCB "ies (default %d)",0xA
DCB "-j",9,9,"Disable local port forwar"
DCB "ding",0xA
DCB "-k",9,9,"Disable remote port forwa"
DCB "rding",0xA
DCB "-a",9,9,"Allow connections to forw"
DCB "arded ports from any host",0xA
DCB "-c command",9,"Force executed comm"
DCB "and",0xA
DCB "-p [address:]port",0xA
DCB 9,9,"Listen on specified tcp port ("
DCB "and optionally address),",0xA
DCB 9,9,"up to %d can be specified",0xA
DCB 9,9,"(default port is %s if none sp"
DCB "ecified)",0xA
DCB "-P PidFile",9,"Create pid file Pid"
DCB "File",0xA
DCB 9,9,"(default %s)",0xA
DCB "-i",9,9,"Start for inetd",0xA
DCB "-W <receive_window_buffer> (defaul"
DCB "t %d, larger may be faster, max 1M"
DCB "B)",0xA
DCB "-K <keepalive>  (0 is never, defau"
DCB "lt %d, in seconds)",0xA
DCB "-I <idle_timeout>  (0 is never, de"
DCB "fault %d, in seconds)",0xA
DCB "-V    Version",0xA,0
aVarRunDropbear DCB "/var/run/dropbear.pid",0
aFailedLoadingS DCB "Failed loading %s",0
aRsa DCB "RSA",0
aEcdsa256 DCB "ECDSA256",0
aEcdsa384 DCB "ECDSA384",0
aEcdsa521 DCB "ECDSA521",0
aInvalidArgumen DCB "Invalid argument: %s",0
; const char aInvalidOptionC[]
aInvalidOptionC DCB "Invalid option -%c",0xA,0
aMissingArgumen DCB "Missing argument",0
aBadListenAddre DCB "Bad listen address",0
aMissingPort DCB "Missing port",0
aBadPort DCB "Bad port",0
aInvalidNullArg DCB "Invalid null argument",0
aTooManyHostkey DCB "Too many hostkeys",0
aErrorOpeningBa DCB "Error opening banner file '%s'",0
aBannerFileTooL DCB "Banner file too large, max is %d b"
DCB "ytes",0
aErrorReadingBa DCB "Error reading banner file '%s'",0
aCannotRestrict DCB "Cannot restrict logins to group '%"
DCB "s' as the group does not exist",0
aBadRecvWindowS DCB "Bad recv window '%s'",0
aBadMaxauthtrie DCB "Bad maxauthtries '%s'",0
aBadKeepaliveS DCB "Bad keepalive '%s'",0
aBadIdleTimeout DCB "Bad idle_timeout '%s'",0
aForcedCommandS_0 DCB "Forced command set to '%s'",0
aNoHostkeysAvai DCB "No hostkeys available. 'dropbear -"
DCB "R' may be useful or run dropbearke"
DCB "y.",0
; const char s1[]
s1 DCB "ssh-userauth",0
aRequestForConn DCB "Request for connection before auth"
DCB 0
aUnrecognisedSs DCB "Unrecognised SSH_MSG_SERVICE_REQUE"
DCB "ST",0
asc_37F68 DCB "^",0
ALIGN 4
DCD sub_14188
DCB 0x5D ; ]
DCB    0
DCB    0
DCB    0
DCB 0xA0
DCB 0x41 ; A
DCB    1
DCB    0
DCB 0x32 ; 2
DCB    0
DCB    0
DCB    0
DCB 0xA8
DCB 0xF7
DCB    1
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB 0x9C
DCB 0x2D ; -
DCB    2
DCB    0
DCB 0x14
DCB    0
DCB    0
DCB    0
DCB 0xA4
DCB 0x4D ; M
DCB    1
DCB    0
DCB 0x1E
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x18
DCB    2
DCB    0
DCB 0x15
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB 0x4D ; M
DCB    1
DCB    0
DCB 0x50 ; P
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0x33 ; 3
DCB    2
DCB    0
DCB 0x62 ; b
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB 0x43 ; C
DCB    1
DCB    0
DCB 0x5A ; Z
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0x41 ; A
DCB    1
DCB    0
DCB 0x60 ; `
DCB    0
DCB    0
DCB    0
DCB 0xD4
DCB 0x3F ; ?
DCB    1
DCB    0
DCB 0x61 ; a
DCB    0
DCB    0
DCB    0
DCB 0xF4
DCB 0x3F ; ?
DCB    1
DCB    0
DCB 0x63 ; c
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB 0x60 ; `
DCB    1
DCB    0
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB 0x60 ; `
DCB    1
DCB    0
DCB 0x52 ; R
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB 0x60 ; `
DCB    1
DCB    0
DCB 0x51 ; Q
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB 0x60 ; `
DCB    1
DCB    0
DCB 0x5B ; [
DCB    0
DCB    0
DCB    0
DCB 0x90
DCB 0x44 ; D
DCB    1
DCB    0
DCB 0x5C ; \
DCB    0
DCB    0
DCB    0
DCB 0x2C ; ,
DCB 0x45 ; E
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aExitedNormally DCB "Exited normally",0
aEarlyExitS DCB "Early exit: %s",0
; const char aExitSS[]
aExitSS DCB "Exit (%s): %s",0
; const char aExitBeforeAuth[]
aExitBeforeAuth DCB "Exit before auth (user '%s', %u fa"
DCB "ils): %s",0
; const char aExitBeforeAuth_0[]
aExitBeforeAuth_0 DCB "Exit before auth: %s",0
; const char aBDHMS[]
aBDHMS DCB "%b %d %H:%M:%S",0
; const char aDSS[]
aDSS DCB "[%d] %s %s",0xA,0
unk_38088 DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0x80
DCB    3
DCB    0
DCB 0x2C ; ,
DCB 0x3B ; ;
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_380A0 DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD7
DCB 0x80
DCB    3
DCB    0
DCB 0x24 ; $
DCB 0x32 ; 2
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; const char aLocalhost[]
aLocalhost DCB "localhost",0
; const char aCancelTcpipFor[]
aCancelTcpipFor DCB "cancel-tcpip-forward",0
aDirectTcpip DCB "direct-tcpip",0
aForwardedTcpip DCB "forwarded-tcpip",0
unk_380F4 DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x8D
DCB 0x81
DCB    3
DCB    0
DCB 0xA0
DCB 0x35 ; 5
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aBadXauthReques DCB "Bad xauth request",0
aFailedToBindX1 DCB "Failed to bind x11 socket",0
; const char aLocalhostDU[]
aLocalhostDU DCB "localhost:%d.%u",0
aDisplay DCB "DISPLAY",0
; const char aUnixDU[]
aUnixDU DCB "unix:%d.%u",0
; const char command[]
command DCB "/usr/bin/xauth -q",0
; const char aAddSSS[]
aAddSSS DCB "add %s %s %s",0xA,0
; const char aFailedToRunS[]
aFailedToRunS DCB "Failed to run %s",0xA,0
aX11 DCB "x11",0
aTcpAcceptC DCB "tcp-accept.c",0
aTcpinfoTcpType DCB "tcpinfo->tcp_type == forwarded",0
aTcpForwardFail DCB "TCP forward failed: %s",0
unk_381D4 DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB  0xE
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xD
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
; unsigned __int8 byte_384C4[4096]
byte_384C4 DCB 0x63, 0x63, 0x63, 0x63, 0x7C, 0x7C, 0x7C
DCB 0x7C, 0x77, 0x77, 0x77, 0x77, 0x7B, 0x7B
DCB 0x7B, 0x7B, 0xF2, 0xF2, 0xF2, 0xF2, 0x6B
DCB 0x6B, 0x6B, 0x6B, 0x6F, 0x6F, 0x6F, 0x6F
DCB 0xC5, 0xC5, 0xC5, 0xC5, 0x30, 0x30, 0x30
DCB 0x30, 1, 1, 1, 1, 0x67, 0x67, 0x67, 0x67
DCB 0x2B, 0x2B, 0x2B, 0x2B, 0xFE, 0xFE, 0xFE
DCB 0xFE, 0xD7, 0xD7, 0xD7, 0xD7, 0xAB, 0xAB
DCB 0xAB, 0xAB, 0x76, 0x76, 0x76, 0x76, 0xCA
DCB 0xCA, 0xCA, 0xCA, 0x82, 0x82, 0x82, 0x82
DCB 0xC9, 0xC9, 0xC9, 0xC9, 0x7D, 0x7D, 0x7D
DCB 0x7D, 0xFA, 0xFA, 0xFA, 0xFA, 0x59, 0x59
DCB 0x59, 0x59, 0x47, 0x47, 0x47, 0x47, 0xF0
DCB 0xF0, 0xF0, 0xF0, 0xAD, 0xAD, 0xAD, 0xAD
DCB 0xD4, 0xD4, 0xD4, 0xD4, 0xA2, 0xA2, 0xA2
DCB 0xA2, 0xAF, 0xAF, 0xAF, 0xAF, 0x9C, 0x9C
DCB 0x9C, 0x9C, 0xA4, 0xA4, 0xA4, 0xA4, 0x72
DCB 0x72, 0x72, 0x72, 0xC0, 0xC0, 0xC0, 0xC0
DCB 0xB7, 0xB7, 0xB7, 0xB7, 0xFD, 0xFD, 0xFD
DCB 0xFD, 0x93, 0x93, 0x93, 0x93, 0x26, 0x26
DCB 0x26, 0x26, 0x36, 0x36, 0x36, 0x36, 0x3F
DCB 0x3F, 0x3F, 0x3F, 0xF7, 0xF7, 0xF7, 0xF7
DCB 0xCC, 0xCC, 0xCC, 0xCC, 0x34, 0x34, 0x34
DCB 0x34, 0xA5, 0xA5, 0xA5, 0xA5, 0xE5, 0xE5
DCB 0xE5, 0xE5, 0xF1, 0xF1, 0xF1, 0xF1, 0x71
DCB 0x71, 0x71, 0x71, 0xD8, 0xD8, 0xD8, 0xD8
DCB 0x31, 0x31, 0x31, 0x31, 0x15, 0x15, 0x15
DCB 0x15, 4, 4, 4, 4, 0xC7, 0xC7, 0xC7, 0xC7
DCB 0x23, 0x23, 0x23, 0x23, 0xC3, 0xC3, 0xC3
DCB 0xC3, 0x18, 0x18, 0x18, 0x18, 0x96, 0x96
DCB 0x96, 0x96, 5, 5, 5, 5, 0x9A, 0x9A, 0x9A
DCB 0x9A, 7, 7, 7, 7, 0x12, 0x12, 0x12, 0x12
DCB 0x80, 0x80, 0x80, 0x80, 0xE2, 0xE2, 0xE2
DCB 0xE2, 0xEB, 0xEB, 0xEB, 0xEB, 0x27, 0x27
DCB 0x27, 0x27, 0xB2, 0xB2, 0xB2, 0xB2, 0x75
DCB 0x75, 0x75, 0x75, 9, 9, 9, 9, 0x83, 0x83
DCB 0x83, 0x83, 0x2C, 0x2C, 0x2C, 0x2C, 0x1A
DCB 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B
DCB 0x6E, 0x6E, 0x6E, 0x6E, 0x5A, 0x5A, 0x5A
DCB 0x5A, 0xA0, 0xA0, 0xA0, 0xA0, 0x52, 0x52
DCB 0x52, 0x52, 0x3B, 0x3B, 0x3B, 0x3B, 0xD6
DCB 0xD6, 0xD6, 0xD6, 0xB3, 0xB3, 0xB3, 0xB3
DCB 0x29, 0x29, 0x29, 0x29, 0xE3, 0xE3, 0xE3
DCB 0xE3, 0x2F, 0x2F, 0x2F, 0x2F, 0x84, 0x84
DCB 0x84, 0x84, 0x53, 0x53, 0x53, 0x53, 0xD1
DCB 0xD1, 0xD1, 0xD1, 0, 0, 0, 0, 0xED, 0xED
DCB 0xED, 0xED, 0x20, 0x20, 0x20, 0x20, 0xFC
DCB 0xFC, 0xFC, 0xFC, 0xB1, 0xB1, 0xB1, 0xB1
DCB 0x5B, 0x5B, 0x5B, 0x5B, 0x6A, 0x6A, 0x6A
DCB 0x6A, 0xCB, 0xCB, 0xCB, 0xCB, 0xBE, 0xBE
DCB 0xBE, 0xBE, 0x39, 0x39, 0x39, 0x39, 0x4A
DCB 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C
DCB 0x58, 0x58, 0x58, 0x58, 0xCF, 0xCF, 0xCF
DCB 0xCF, 0xD0, 0xD0, 0xD0, 0xD0, 0xEF, 0xEF
DCB 0xEF, 0xEF, 0xAA, 0xAA, 0xAA, 0xAA, 0xFB
DCB 0xFB, 0xFB, 0xFB, 0x43, 0x43, 0x43, 0x43
DCB 0x4D, 0x4D, 0x4D, 0x4D, 0x33, 0x33, 0x33
DCB 0x33, 0x85, 0x85, 0x85, 0x85, 0x45, 0x45
DCB 0x45, 0x45, 0xF9, 0xF9, 0xF9, 0xF9, 2
DCB 2, 2, 2, 0x7F, 0x7F, 0x7F, 0x7F, 0x50
DCB 0x50, 0x50, 0x50, 0x3C, 0x3C, 0x3C, 0x3C
DCB 0x9F, 0x9F, 0x9F, 0x9F, 0xA8, 0xA8, 0xA8
DCB 0xA8, 0x51, 0x51, 0x51, 0x51, 0xA3, 0xA3
DCB 0xA3, 0xA3, 0x40, 0x40, 0x40, 0x40, 0x8F
DCB 0x8F, 0x8F, 0x8F, 0x92, 0x92, 0x92, 0x92
DCB 0x9D, 0x9D, 0x9D, 0x9D, 0x38, 0x38, 0x38
DCB 0x38, 0xF5, 0xF5, 0xF5, 0xF5, 0xBC, 0xBC
DCB 0xBC, 0xBC, 0xB6, 0xB6, 0xB6, 0xB6, 0xDA
DCB 0xDA, 0xDA, 0xDA, 0x21, 0x21, 0x21, 0x21
DCB 0x10, 0x10, 0x10, 0x10, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xF3, 0xF3, 0xF3, 0xF3, 0xD2, 0xD2
DCB 0xD2, 0xD2, 0xCD, 0xCD, 0xCD, 0xCD, 0xC
DCB 0xC, 0xC, 0xC, 0x13, 0x13, 0x13, 0x13
DCB 0xEC, 0xEC, 0xEC, 0xEC, 0x5F, 0x5F, 0x5F
DCB 0x5F, 0x97, 0x97, 0x97, 0x97, 0x44, 0x44
DCB 0x44, 0x44, 0x17, 0x17, 0x17, 0x17, 0xC4
DCB 0xC4, 0xC4, 0xC4, 0xA7, 0xA7, 0xA7, 0xA7
DCB 0x7E, 0x7E, 0x7E, 0x7E, 0x3D, 0x3D, 0x3D
DCB 0x3D, 0x64, 0x64, 0x64, 0x64, 0x5D, 0x5D
DCB 0x5D, 0x5D, 0x19, 0x19, 0x19, 0x19, 0x73
DCB 0x73, 0x73, 0x73, 0x60, 0x60, 0x60, 0x60
DCB 0x81, 0x81, 0x81, 0x81, 0x4F, 0x4F, 0x4F
DCB 0x4F, 0xDC, 0xDC, 0xDC, 0xDC, 0x22, 0x22
DCB 0x22, 0x22, 0x2A, 0x2A, 0x2A, 0x2A, 0x90
DCB 0x90, 0x90, 0x90, 0x88, 0x88, 0x88, 0x88
DCB 0x46, 0x46, 0x46, 0x46, 0xEE, 0xEE, 0xEE
DCB 0xEE, 0xB8, 0xB8, 0xB8, 0xB8, 0x14, 0x14
DCB 0x14, 0x14, 0xDE, 0xDE, 0xDE, 0xDE, 0x5E
DCB 0x5E, 0x5E, 0x5E, 0xB, 0xB, 0xB, 0xB
DCB 0xDB, 0xDB, 0xDB, 0xDB, 0xE0, 0xE0, 0xE0
DCB 0xE0, 0x32, 0x32, 0x32, 0x32, 0x3A, 0x3A
DCB 0x3A, 0x3A, 0xA, 0xA, 0xA, 0xA, 0x49
DCB 0x49, 0x49, 0x49, 6, 6, 6, 6, 0x24, 0x24
DCB 0x24, 0x24, 0x5C, 0x5C, 0x5C, 0x5C, 0xC2
DCB 0xC2, 0xC2, 0xC2, 0xD3, 0xD3, 0xD3, 0xD3
DCB 0xAC, 0xAC, 0xAC, 0xAC, 0x62, 0x62, 0x62
DCB 0x62, 0x91, 0x91, 0x91, 0x91, 0x95, 0x95
DCB 0x95, 0x95, 0xE4, 0xE4, 0xE4, 0xE4, 0x79
DCB 0x79, 0x79, 0x79, 0xE7, 0xE7, 0xE7, 0xE7
DCB 0xC8, 0xC8, 0xC8, 0xC8, 0x37, 0x37, 0x37
DCB 0x37, 0x6D, 0x6D, 0x6D, 0x6D, 0x8D, 0x8D
DCB 0x8D, 0x8D, 0xD5, 0xD5, 0xD5, 0xD5, 0x4E
DCB 0x4E, 0x4E, 0x4E, 0xA9, 0xA9, 0xA9, 0xA9
DCB 0x6C, 0x6C, 0x6C, 0x6C, 0x56, 0x56, 0x56
DCB 0x56, 0xF4, 0xF4, 0xF4, 0xF4, 0xEA, 0xEA
DCB 0xEA, 0xEA, 0x65, 0x65, 0x65, 0x65, 0x7A
DCB 0x7A, 0x7A, 0x7A, 0xAE, 0xAE, 0xAE, 0xAE
DCB 8, 8, 8, 8, 0xBA, 0xBA, 0xBA, 0xBA, 0x78
DCB 0x78, 0x78, 0x78, 0x25, 0x25, 0x25, 0x25
DCB 0x2E, 0x2E, 0x2E, 0x2E, 0x1C, 0x1C, 0x1C
DCB 0x1C, 0xA6, 0xA6, 0xA6, 0xA6, 0xB4, 0xB4
DCB 0xB4, 0xB4, 0xC6, 0xC6, 0xC6, 0xC6, 0xE8
DCB 0xE8, 0xE8, 0xE8, 0xDD, 0xDD, 0xDD, 0xDD
DCB 0x74, 0x74, 0x74, 0x74, 0x1F, 0x1F, 0x1F
DCB 0x1F, 0x4B, 0x4B, 0x4B, 0x4B, 0xBD, 0xBD
DCB 0xBD, 0xBD, 0x8B, 0x8B, 0x8B, 0x8B, 0x8A
DCB 0x8A, 0x8A, 0x8A, 0x70, 0x70, 0x70, 0x70
DCB 0x3E, 0x3E, 0x3E, 0x3E, 0xB5, 0xB5, 0xB5
DCB 0xB5, 0x66, 0x66, 0x66, 0x66, 0x48, 0x48
DCB 0x48, 0x48, 3, 3, 3, 3, 0xF6, 0xF6, 0xF6
DCB 0xF6, 0xE, 0xE, 0xE, 0xE, 0x61, 0x61
DCB 0x61, 0x61, 0x35, 0x35, 0x35, 0x35, 0x57
DCB 0x57, 0x57, 0x57, 0xB9, 0xB9, 0xB9, 0xB9
DCB 0x86, 0x86, 0x86, 0x86, 0xC1, 0xC1, 0xC1
DCB 0xC1, 0x1D, 0x1D, 0x1D, 0x1D, 0x9E, 0x9E
DCB 0x9E, 0x9E, 0xE1, 0xE1, 0xE1, 0xE1, 0xF8
DCB 0xF8, 0xF8, 0xF8, 0x98, 0x98, 0x98, 0x98
DCB 0x11, 0x11, 0x11, 0x11, 0x69, 0x69, 0x69
DCB 0x69, 0xD9, 0xD9, 0xD9, 0xD9, 0x8E, 0x8E
DCB 0x8E, 0x8E, 0x94, 0x94, 0x94, 0x94, 0x9B
DCB 0x9B, 0x9B, 0x9B, 0x1E, 0x1E, 0x1E, 0x1E
DCB 0x87, 0x87, 0x87, 0x87, 0xE9, 0xE9, 0xE9
DCB 0xE9, 0xCE, 0xCE, 0xCE, 0xCE, 0x55, 0x55
DCB 0x55, 0x55, 0x28, 0x28, 0x28, 0x28, 0xDF
DCB 0xDF, 0xDF, 0xDF, 0x8C, 0x8C, 0x8C, 0x8C
DCB 0xA1, 0xA1, 0xA1, 0xA1, 0x89, 0x89, 0x89
DCB 0x89, 0xD, 0xD, 0xD, 0xD, 0xBF, 0xBF
DCB 0xBF, 0xBF, 0xE6, 0xE6, 0xE6, 0xE6, 0x42
DCB 0x42, 0x42, 0x42, 0x68, 0x68, 0x68, 0x68
DCB 0x41, 0x41, 0x41, 0x41, 0x99, 0x99, 0x99
DCB 0x99, 0x2D, 0x2D, 0x2D, 0x2D, 0xF, 0xF
DCB 0xF, 0xF, 0xB0, 0xB0, 0xB0, 0xB0, 0x54
DCB 0x54, 0x54, 0x54, 0xBB, 0xBB, 0xBB, 0xBB
DCB 0x16, 0x16, 0x16, 0x16, 0x50, 0xA7, 0xF4
DCB 0x51, 0x53, 0x65, 0x41, 0x7E, 0xC3, 0xA4
DCB 0x17, 0x1A, 0x96, 0x5E, 0x27, 0x3A, 0xCB
DCB 0x6B, 0xAB, 0x3B, 0xF1, 0x45, 0x9D, 0x1F
DCB 0xAB, 0x58, 0xFA, 0xAC, 0x93, 3, 0xE3
DCB 0x4B, 0x55, 0xFA, 0x30, 0x20, 0xF6, 0x6D
DCB 0x76, 0xAD, 0x91, 0x76, 0xCC, 0x88, 0x25
DCB 0x4C, 2, 0xF5, 0xFC, 0xD7, 0xE5, 0x4F
DCB 0xD7, 0xCB, 0x2A, 0xC5, 0x80, 0x44, 0x35
DCB 0x26, 0x8F, 0xA3, 0x62, 0xB5, 0x49, 0x5A
DCB 0xB1, 0xDE, 0x67, 0x1B, 0xBA, 0x25, 0x98
DCB 0xE, 0xEA, 0x45, 0xE1, 0xC0, 0xFE, 0x5D
DCB 2, 0x75, 0x2F, 0xC3, 0x12, 0xF0, 0x4C
DCB 0x81, 0xA3, 0x97, 0x46, 0x8D, 0xC6, 0xF9
DCB 0xD3, 0x6B, 0xE7, 0x5F, 0x8F, 3, 0x95
DCB 0x9C, 0x92, 0x15, 0xEB, 0x7A, 0x6D, 0xBF
DCB 0xDA, 0x59, 0x52, 0x95, 0x2D, 0x83, 0xBE
DCB 0xD4, 0xD3, 0x21, 0x74, 0x58, 0x29, 0x69
DCB 0xE0, 0x49, 0x44, 0xC8, 0xC9, 0x8E, 0x6A
DCB 0x89, 0xC2, 0x75, 0x78, 0x79, 0x8E, 0xF4
DCB 0x6B, 0x3E, 0x58, 0x99, 0xDD, 0x71, 0xB9
DCB 0x27, 0xB6, 0x4F, 0xE1, 0xBE, 0x17, 0xAD
DCB 0x88, 0xF0, 0x66, 0xAC, 0x20, 0xC9, 0xB4
DCB 0x3A, 0xCE, 0x7D, 0x18, 0x4A, 0xDF, 0x63
DCB 0x82, 0x31, 0x1A, 0xE5, 0x60, 0x33, 0x51
DCB 0x97, 0x45, 0x7F, 0x53, 0x62, 0xE0, 0x77
DCB 0x64, 0xB1, 0x84, 0xAE, 0x6B, 0xBB, 0x1C
DCB 0xA0, 0x81, 0xFE, 0x94, 0x2B, 8, 0xF9
DCB 0x58, 0x68, 0x48, 0x70, 0x19, 0xFD, 0x45
DCB 0x8F, 0x87, 0x6C, 0xDE, 0x94, 0xB7, 0xF8
DCB 0x7B, 0x52, 0x23, 0xD3, 0x73, 0xAB, 0xE2
DCB 2, 0x4B, 0x72, 0x57, 0x8F, 0x1F, 0xE3
DCB 0x2A, 0xAB, 0x55, 0x66, 7, 0x28, 0xEB
DCB 0xB2, 3, 0xC2, 0xB5, 0x2F, 0x9A, 0x7B
DCB 0xC5, 0x86, 0xA5, 8, 0x37, 0xD3, 0xF2
DCB 0x87, 0x28, 0x30, 0xB2, 0xA5, 0xBF, 0x23
DCB 0xBA, 0x6A, 3, 2, 0x5C, 0x82, 0x16, 0xED
DCB 0x2B, 0x1C, 0xCF, 0x8A, 0x92, 0xB4, 0x79
DCB 0xA7, 0xF0, 0xF2, 7, 0xF3, 0xA1, 0xE2
DCB 0x69, 0x4E, 0xCD, 0xF4, 0xDA, 0x65, 0xD5
DCB 0xBE, 5, 6, 0x1F, 0x62, 0x34, 0xD1, 0x8A
DCB 0xFE, 0xA6, 0xC4, 0x9D, 0x53, 0x2E, 0x34
DCB 0xA0, 0x55, 0xF3, 0xA2, 0x32, 0xE1, 0x8A
DCB 5, 0x75, 0xEB, 0xF6, 0xA4, 0x39, 0xEC
DCB 0x83, 0xB, 0xAA, 0xEF, 0x60, 0x40, 6
DCB 0x9F, 0x71, 0x5E, 0x51, 0x10, 0x6E, 0xBD
DCB 0xF9, 0x8A, 0x21, 0x3E, 0x3D, 6, 0xDD
DCB 0x96, 0xAE, 5, 0x3E, 0xDD, 0x46, 0xBD
DCB 0xE6, 0x4D, 0xB5, 0x8D, 0x54, 0x91, 5
DCB 0x5D, 0xC4, 0x71, 0x6F, 0xD4, 6, 4, 0xFF
DCB 0x15, 0x50, 0x60, 0x24, 0xFB, 0x98, 0x19
DCB 0x97, 0xE9, 0xBD, 0xD6, 0xCC, 0x43, 0x40
DCB 0x89, 0x77, 0x9E, 0xD9, 0x67, 0xBD, 0x42
DCB 0xE8, 0xB0, 0x88, 0x8B, 0x89, 7, 0x38
DCB 0x5B, 0x19, 0xE7, 0xDB, 0xEE, 0xC8, 0x79
DCB 0x47, 0xA, 0x7C, 0xA1, 0xE9, 0xF, 0x42
DCB 0x7C, 0xC9, 0x1E, 0x84, 0xF8, 0, 0, 0
DCB 0, 0x83, 0x86, 0x80, 9, 0x48, 0xED, 0x2B
DCB 0x32, 0xAC, 0x70, 0x11, 0x1E, 0x4E, 0x72
DCB 0x5A, 0x6C, 0xFB, 0xFF, 0xE, 0xFD, 0x56
DCB 0x38, 0x85, 0xF, 0x1E, 0xD5, 0xAE, 0x3D
DCB 0x27, 0x39, 0x2D, 0x36, 0x64, 0xD9, 0xF
DCB 0xA, 0x21, 0xA6, 0x5C, 0x68, 0xD1, 0x54
DCB 0x5B, 0x9B, 0x3A, 0x2E, 0x36, 0x24, 0xB1
DCB 0x67, 0xA, 0xC, 0xF, 0xE7, 0x57, 0x93
DCB 0xD2, 0x96, 0xEE, 0xB4, 0x9E, 0x91, 0x9B
DCB 0x1B, 0x4F, 0xC5, 0xC0, 0x80, 0xA2, 0x20
DCB 0xDC, 0x61, 0x69, 0x4B, 0x77, 0x5A, 0x16
DCB 0x1A, 0x12, 0x1C, 0xA, 0xBA, 0x93, 0xE2
DCB 0xE5, 0x2A, 0xA0, 0xC0, 0x43, 0xE0, 0x22
DCB 0x3C, 0x1D, 0x17, 0x1B, 0x12, 0xB, 0xD
DCB 9, 0xE, 0xAD, 0xC7, 0x8B, 0xF2, 0xB9
DCB 0xA8, 0xB6, 0x2D, 0xC8, 0xA9, 0x1E, 0x14
DCB 0x85, 0x19, 0xF1, 0x57, 0x4C, 7, 0x75
DCB 0xAF, 0xBB, 0xDD, 0x99, 0xEE, 0xFD, 0x60
DCB 0x7F, 0xA3, 0x9F, 0x26, 1, 0xF7, 0xBC
DCB 0xF5, 0x72, 0x5C, 0xC5, 0x3B, 0x66, 0x44
DCB 0x34, 0x7E, 0xFB, 0x5B, 0x76, 0x29, 0x43
DCB 0x8B, 0xDC, 0xC6, 0x23, 0xCB, 0x68, 0xFC
DCB 0xED, 0xB6, 0x63, 0xF1, 0xE4, 0xB8, 0xCA
DCB 0xDC, 0x31, 0xD7, 0x10, 0x85, 0x63, 0x42
DCB 0x40, 0x22, 0x97, 0x13, 0x20, 0x11, 0xC6
DCB 0x84, 0x7D, 0x24, 0x4A, 0x85, 0xF8, 0x3D
DCB 0xBB, 0xD2, 0x11, 0x32, 0xF9, 0xAE, 0x6D
DCB 0xA1, 0x29, 0xC7, 0x4B, 0x2F, 0x9E, 0x1D
DCB 0xF3, 0x30, 0xB2, 0xDC, 0xEC, 0x52, 0x86
DCB 0xD, 0xD0, 0xE3, 0xC1, 0x77, 0x6C, 0x16
DCB 0xB3, 0x2B, 0x99, 0xB9, 0x70, 0xA9, 0xFA
DCB 0x48, 0x94, 0x11, 0x22, 0x64, 0xE9, 0x47
DCB 0xC4, 0x8C, 0xFC, 0xA8, 0x1A, 0x3F, 0xF0
DCB 0xA0, 0xD8, 0x2C, 0x7D, 0x56, 0xEF, 0x90
DCB 0x33, 0x22, 0xC7, 0x4E, 0x49, 0x87, 0xC1
DCB 0xD1, 0x38, 0xD9, 0xFE, 0xA2, 0xCA, 0x8C
DCB 0x36, 0xB, 0xD4, 0x98, 0xCF, 0x81, 0xF5
DCB 0xA6, 0x28, 0xDE, 0x7A, 0xA5, 0x26, 0x8E
DCB 0xB7, 0xDA, 0xA4, 0xBF, 0xAD, 0x3F, 0xE4
DCB 0x9D, 0x3A, 0x2C, 0xD, 0x92, 0x78, 0x50
DCB 0x9B, 0xCC, 0x5F, 0x6A, 0x62, 0x46, 0x7E
DCB 0x54, 0xC2, 0x13, 0x8D, 0xF6, 0xE8, 0xB8
DCB 0xD8, 0x90, 0x5E, 0xF7, 0x39, 0x2E, 0xF5
DCB 0xAF, 0xC3, 0x82, 0xBE, 0x80, 0x5D, 0x9F
DCB 0x7C, 0x93, 0xD0, 0x69, 0xA9, 0x2D, 0xD5
DCB 0x6F, 0xB3, 0x12, 0x25, 0xCF, 0x3B, 0x99
DCB 0xAC, 0xC8, 0xA7, 0x7D, 0x18, 0x10, 0x6E
DCB 0x63, 0x9C, 0xE8, 0x7B, 0xBB, 0x3B, 0xDB
DCB 9, 0x78, 0x26, 0xCD, 0xF4, 0x18, 0x59
DCB 0x6E, 1, 0xB7, 0x9A, 0xEC, 0xA8, 0x9A
DCB 0x4F, 0x83, 0x65, 0x6E, 0x95, 0xE6, 0x7E
DCB 0xE6, 0xFF, 0xAA, 8, 0xCF, 0xBC, 0x21
DCB 0xE6, 0xE8, 0x15, 0xEF, 0xD9, 0x9B, 0xE7
DCB 0xBA, 0xCE, 0x36, 0x6F, 0x4A, 0xD4, 9
DCB 0x9F, 0xEA, 0xD6, 0x7C, 0xB0, 0x29, 0xAF
DCB 0xB2, 0xA4, 0x31, 0x31, 0x23, 0x3F, 0x2A
DCB 0x30, 0x94, 0xA5, 0xC6, 0xC0, 0x66, 0xA2
DCB 0x35, 0x37, 0xBC, 0x4E, 0x74, 0xA6, 0xCA
DCB 0x82, 0xFC, 0xB0, 0xD0, 0x90, 0xE0, 0x15
DCB 0xD8, 0xA7, 0x33, 0x4A, 0x98, 4, 0xF1
DCB 0xF7, 0xDA, 0xEC, 0x41, 0xE, 0x50, 0xCD
DCB 0x7F, 0x2F, 0xF6, 0x91, 0x17, 0x8D, 0xD6
DCB 0x4D, 0x76, 0x4D, 0xB0, 0xEF, 0x43, 0x54
DCB 0x4D, 0xAA, 0xCC, 0xDF, 4, 0x96, 0xE4
DCB 0xE3, 0xB5, 0xD1, 0x9E, 0x1B, 0x88, 0x6A
DCB 0x4C, 0xB8, 0x1F, 0x2C, 0xC1, 0x7F, 0x51
DCB 0x65, 0x46, 4, 0xEA, 0x5E, 0x9D, 0x5D
DCB 0x35, 0x8C, 1, 0x73, 0x74, 0x87, 0xFA
DCB 0x2E, 0x41, 0xB, 0xFB, 0x5A, 0x1D, 0x67
DCB 0xB3, 0x52, 0xD2, 0xDB, 0x92, 0x33, 0x56
DCB 0x10, 0xE9, 0x13, 0x47, 0xD6, 0x6D, 0x8C
DCB 0x61, 0xD7, 0x9A, 0x7A, 0xC, 0xA1, 0x37
DCB 0x8E, 0x14, 0xF8, 0x59, 0x89, 0x3C, 0x13
DCB 0xEB, 0xEE, 0x27, 0xA9, 0xCE, 0x35, 0xC9
DCB 0x61, 0xB7, 0xED, 0xE5, 0x1C, 0xE1, 0x3C
DCB 0xB1, 0x47, 0x7A, 0x59, 0xDF, 0xD2, 0x9C
DCB 0x3F, 0x73, 0xF2, 0x55, 0x79, 0xCE, 0x14
DCB 0x18, 0xBF, 0x37, 0xC7, 0x73, 0xEA, 0xCD
DCB 0xF7, 0x53, 0x5B, 0xAA, 0xFD, 0x5F, 0x14
DCB 0x6F, 0x3D, 0xDF, 0x86, 0xDB, 0x44, 0x78
DCB 0x81, 0xF3, 0xAF, 0xCA, 0x3E, 0xC4, 0x68
DCB 0xB9, 0x2C, 0x34, 0x24, 0x38, 0x5F, 0x40
DCB 0xA3, 0xC2, 0x72, 0xC3, 0x1D, 0x16, 0xC
DCB 0x25, 0xE2, 0xBC, 0x8B, 0x49, 0x3C, 0x28
DCB 0x41, 0x95, 0xD, 0xFF, 0x71, 1, 0xA8
DCB 0x39, 0xDE, 0xB3, 0xC, 8, 0x9C, 0xE4
DCB 0xB4, 0xD8, 0x90, 0xC1, 0x56, 0x64, 0x61
DCB 0x84, 0xCB, 0x7B, 0x70, 0xB6, 0x32, 0xD5
DCB 0x74, 0x5C, 0x6C, 0x48, 0x42, 0x57, 0xB8
DCB 0xD0, 0xA5, 0x63, 0x63, 0xC6, 0x84, 0x7C
DCB 0x7C, 0xF8, 0x99, 0x77, 0x77, 0xEE, 0x8D
DCB 0x7B, 0x7B, 0xF6, 0xD, 0xF2, 0xF2, 0xFF
DCB 0xBD, 0x6B, 0x6B, 0xD6, 0xB1, 0x6F, 0x6F
DCB 0xDE, 0x54, 0xC5, 0xC5, 0x91, 0x50, 0x30
DCB 0x30, 0x60, 3, 1, 1, 2, 0xA9, 0x67, 0x67
DCB 0xCE, 0x7D, 0x2B, 0x2B, 0x56, 0x19, 0xFE
DCB 0xFE, 0xE7, 0x62, 0xD7, 0xD7, 0xB5, 0xE6
DCB 0xAB, 0xAB, 0x4D, 0x9A, 0x76, 0x76, 0xEC
DCB 0x45, 0xCA, 0xCA, 0x8F, 0x9D, 0x82, 0x82
DCB 0x1F, 0x40, 0xC9, 0xC9, 0x89, 0x87, 0x7D
DCB 0x7D, 0xFA, 0x15, 0xFA, 0xFA, 0xEF, 0xEB
DCB 0x59, 0x59, 0xB2, 0xC9, 0x47, 0x47, 0x8E
DCB 0xB, 0xF0, 0xF0, 0xFB, 0xEC, 0xAD, 0xAD
DCB 0x41, 0x67, 0xD4, 0xD4, 0xB3, 0xFD, 0xA2
DCB 0xA2, 0x5F, 0xEA, 0xAF, 0xAF, 0x45, 0xBF
DCB 0x9C, 0x9C, 0x23, 0xF7, 0xA4, 0xA4, 0x53
DCB 0x96, 0x72, 0x72, 0xE4, 0x5B, 0xC0, 0xC0
DCB 0x9B, 0xC2, 0xB7, 0xB7, 0x75, 0x1C, 0xFD
DCB 0xFD, 0xE1, 0xAE, 0x93, 0x93, 0x3D, 0x6A
DCB 0x26, 0x26, 0x4C, 0x5A, 0x36, 0x36, 0x6C
DCB 0x41, 0x3F, 0x3F, 0x7E, 2, 0xF7, 0xF7
DCB 0xF5, 0x4F, 0xCC, 0xCC, 0x83, 0x5C, 0x34
DCB 0x34, 0x68, 0xF4, 0xA5, 0xA5, 0x51, 0x34
DCB 0xE5, 0xE5, 0xD1, 8, 0xF1, 0xF1, 0xF9
DCB 0x93, 0x71, 0x71, 0xE2, 0x73, 0xD8, 0xD8
DCB 0xAB, 0x53, 0x31, 0x31, 0x62, 0x3F, 0x15
DCB 0x15, 0x2A, 0xC, 4, 4, 8, 0x52, 0xC7
DCB 0xC7, 0x95, 0x65, 0x23, 0x23, 0x46, 0x5E
DCB 0xC3, 0xC3, 0x9D, 0x28, 0x18, 0x18, 0x30
DCB 0xA1, 0x96, 0x96, 0x37, 0xF, 5, 5, 0xA
DCB 0xB5, 0x9A, 0x9A, 0x2F, 9, 7, 7, 0xE
DCB 0x36, 0x12, 0x12, 0x24, 0x9B, 0x80, 0x80
DCB 0x1B, 0x3D, 0xE2, 0xE2, 0xDF, 0x26, 0xEB
DCB 0xEB, 0xCD, 0x69, 0x27, 0x27, 0x4E, 0xCD
DCB 0xB2, 0xB2, 0x7F, 0x9F, 0x75, 0x75, 0xEA
DCB 0x1B, 9, 9, 0x12, 0x9E, 0x83, 0x83, 0x1D
DCB 0x74, 0x2C, 0x2C, 0x58, 0x2E, 0x1A, 0x1A
DCB 0x34, 0x2D, 0x1B, 0x1B, 0x36, 0xB2, 0x6E
DCB 0x6E, 0xDC, 0xEE, 0x5A, 0x5A, 0xB4, 0xFB
DCB 0xA0, 0xA0, 0x5B, 0xF6, 0x52, 0x52, 0xA4
DCB 0x4D, 0x3B, 0x3B, 0x76, 0x61, 0xD6, 0xD6
DCB 0xB7, 0xCE, 0xB3, 0xB3, 0x7D, 0x7B, 0x29
DCB 0x29, 0x52, 0x3E, 0xE3, 0xE3, 0xDD, 0x71
DCB 0x2F, 0x2F, 0x5E, 0x97, 0x84, 0x84, 0x13
DCB 0xF5, 0x53, 0x53, 0xA6, 0x68, 0xD1, 0xD1
DCB 0xB9, 0, 0, 0, 0, 0x2C, 0xED, 0xED, 0xC1
DCB 0x60, 0x20, 0x20, 0x40, 0x1F, 0xFC, 0xFC
DCB 0xE3, 0xC8, 0xB1, 0xB1, 0x79, 0xED, 0x5B
DCB 0x5B, 0xB6, 0xBE, 0x6A, 0x6A, 0xD4, 0x46
DCB 0xCB, 0xCB, 0x8D, 0xD9, 0xBE, 0xBE, 0x67
DCB 0x4B, 0x39, 0x39, 0x72, 0xDE, 0x4A, 0x4A
DCB 0x94, 0xD4, 0x4C, 0x4C, 0x98, 0xE8, 0x58
DCB 0x58, 0xB0, 0x4A, 0xCF, 0xCF, 0x85, 0x6B
DCB 0xD0, 0xD0, 0xBB, 0x2A, 0xEF, 0xEF, 0xC5
DCB 0xE5, 0xAA, 0xAA, 0x4F, 0x16, 0xFB, 0xFB
DCB 0xED, 0xC5, 0x43, 0x43, 0x86, 0xD7, 0x4D
DCB 0x4D, 0x9A, 0x55, 0x33, 0x33, 0x66, 0x94
DCB 0x85, 0x85, 0x11, 0xCF, 0x45, 0x45, 0x8A
DCB 0x10, 0xF9, 0xF9, 0xE9, 6, 2, 2, 4, 0x81
DCB 0x7F, 0x7F, 0xFE, 0xF0, 0x50, 0x50, 0xA0
DCB 0x44, 0x3C, 0x3C, 0x78, 0xBA, 0x9F, 0x9F
DCB 0x25, 0xE3, 0xA8, 0xA8, 0x4B, 0xF3, 0x51
DCB 0x51, 0xA2, 0xFE, 0xA3, 0xA3, 0x5D, 0xC0
DCB 0x40, 0x40, 0x80, 0x8A, 0x8F, 0x8F, 5
DCB 0xAD, 0x92, 0x92, 0x3F, 0xBC, 0x9D, 0x9D
DCB 0x21, 0x48, 0x38, 0x38, 0x70, 4, 0xF5
DCB 0xF5, 0xF1, 0xDF, 0xBC, 0xBC, 0x63, 0xC1
DCB 0xB6, 0xB6, 0x77, 0x75, 0xDA, 0xDA, 0xAF
DCB 0x63, 0x21, 0x21, 0x42, 0x30, 0x10, 0x10
DCB 0x20, 0x1A, 0xFF, 0xFF, 0xE5, 0xE, 0xF3
DCB 0xF3, 0xFD, 0x6D, 0xD2, 0xD2, 0xBF, 0x4C
DCB 0xCD, 0xCD, 0x81, 0x14, 0xC, 0xC, 0x18
DCB 0x35, 0x13, 0x13, 0x26, 0x2F, 0xEC, 0xEC
DCB 0xC3, 0xE1, 0x5F, 0x5F, 0xBE, 0xA2, 0x97
DCB 0x97, 0x35, 0xCC, 0x44, 0x44, 0x88, 0x39
DCB 0x17, 0x17, 0x2E, 0x57, 0xC4, 0xC4, 0x93
DCB 0xF2, 0xA7, 0xA7, 0x55, 0x82, 0x7E, 0x7E
DCB 0xFC, 0x47, 0x3D, 0x3D, 0x7A, 0xAC, 0x64
DCB 0x64, 0xC8, 0xE7, 0x5D, 0x5D, 0xBA, 0x2B
DCB 0x19, 0x19, 0x32, 0x95, 0x73, 0x73, 0xE6
DCB 0xA0, 0x60, 0x60, 0xC0, 0x98, 0x81, 0x81
DCB 0x19, 0xD1, 0x4F, 0x4F, 0x9E, 0x7F, 0xDC
DCB 0xDC, 0xA3, 0x66, 0x22, 0x22, 0x44, 0x7E
DCB 0x2A, 0x2A, 0x54, 0xAB, 0x90, 0x90, 0x3B
DCB 0x83, 0x88, 0x88, 0xB, 0xCA, 0x46, 0x46
DCB 0x8C, 0x29, 0xEE, 0xEE, 0xC7, 0xD3, 0xB8
DCB 0xB8, 0x6B, 0x3C, 0x14, 0x14, 0x28, 0x79
DCB 0xDE, 0xDE, 0xA7, 0xE2, 0x5E, 0x5E, 0xBC
DCB 0x1D, 0xB, 0xB, 0x16, 0x76, 0xDB, 0xDB
DCB 0xAD, 0x3B, 0xE0, 0xE0, 0xDB, 0x56, 0x32
DCB 0x32, 0x64, 0x4E, 0x3A, 0x3A, 0x74, 0x1E
DCB 0xA, 0xA, 0x14, 0xDB, 0x49, 0x49, 0x92
DCB 0xA, 6, 6, 0xC, 0x6C, 0x24, 0x24, 0x48
DCB 0xE4, 0x5C, 0x5C, 0xB8, 0x5D, 0xC2, 0xC2
DCB 0x9F, 0x6E, 0xD3, 0xD3, 0xBD, 0xEF, 0xAC
DCB 0xAC, 0x43, 0xA6, 0x62, 0x62, 0xC4, 0xA8
DCB 0x91, 0x91, 0x39, 0xA4, 0x95, 0x95, 0x31
DCB 0x37, 0xE4, 0xE4, 0xD3, 0x8B, 0x79, 0x79
DCB 0xF2, 0x32, 0xE7, 0xE7, 0xD5, 0x43, 0xC8
DCB 0xC8, 0x8B, 0x59, 0x37, 0x37, 0x6E, 0xB7
DCB 0x6D, 0x6D, 0xDA, 0x8C, 0x8D, 0x8D, 1
DCB 0x64, 0xD5, 0xD5, 0xB1, 0xD2, 0x4E, 0x4E
DCB 0x9C, 0xE0, 0xA9, 0xA9, 0x49, 0xB4, 0x6C
DCB 0x6C, 0xD8, 0xFA, 0x56, 0x56, 0xAC, 7
DCB 0xF4, 0xF4, 0xF3, 0x25, 0xEA, 0xEA, 0xCF
DCB 0xAF, 0x65, 0x65, 0xCA, 0x8E, 0x7A, 0x7A
DCB 0xF4, 0xE9, 0xAE, 0xAE, 0x47, 0x18, 8
DCB 8, 0x10, 0xD5, 0xBA, 0xBA, 0x6F, 0x88
DCB 0x78, 0x78, 0xF0, 0x6F, 0x25, 0x25, 0x4A
DCB 0x72, 0x2E, 0x2E, 0x5C, 0x24, 0x1C, 0x1C
DCB 0x38, 0xF1, 0xA6, 0xA6, 0x57, 0xC7, 0xB4
DCB 0xB4, 0x73, 0x51, 0xC6, 0xC6, 0x97, 0x23
DCB 0xE8, 0xE8, 0xCB, 0x7C, 0xDD, 0xDD, 0xA1
DCB 0x9C, 0x74, 0x74, 0xE8, 0x21, 0x1F, 0x1F
DCB 0x3E, 0xDD, 0x4B, 0x4B, 0x96, 0xDC, 0xBD
DCB 0xBD, 0x61, 0x86, 0x8B, 0x8B, 0xD, 0x85
DCB 0x8A, 0x8A, 0xF, 0x90, 0x70, 0x70, 0xE0
DCB 0x42, 0x3E, 0x3E, 0x7C, 0xC4, 0xB5, 0xB5
DCB 0x71, 0xAA, 0x66, 0x66, 0xCC, 0xD8, 0x48
DCB 0x48, 0x90, 5, 3, 3, 6, 1, 0xF6, 0xF6
DCB 0xF7, 0x12, 0xE, 0xE, 0x1C, 0xA3, 0x61
DCB 0x61, 0xC2, 0x5F, 0x35, 0x35, 0x6A, 0xF9
DCB 0x57, 0x57, 0xAE, 0xD0, 0xB9, 0xB9, 0x69
DCB 0x91, 0x86, 0x86, 0x17, 0x58, 0xC1, 0xC1
DCB 0x99, 0x27, 0x1D, 0x1D, 0x3A, 0xB9, 0x9E
DCB 0x9E, 0x27, 0x38, 0xE1, 0xE1, 0xD9, 0x13
DCB 0xF8, 0xF8, 0xEB, 0xB3, 0x98, 0x98, 0x2B
DCB 0x33, 0x11, 0x11, 0x22, 0xBB, 0x69, 0x69
DCB 0xD2, 0x70, 0xD9, 0xD9, 0xA9, 0x89, 0x8E
DCB 0x8E, 7, 0xA7, 0x94, 0x94, 0x33, 0xB6
DCB 0x9B, 0x9B, 0x2D, 0x22, 0x1E, 0x1E, 0x3C
DCB 0x92, 0x87, 0x87, 0x15, 0x20, 0xE9, 0xE9
DCB 0xC9, 0x49, 0xCE, 0xCE, 0x87, 0xFF, 0x55
DCB 0x55, 0xAA, 0x78, 0x28, 0x28, 0x50, 0x7A
DCB 0xDF, 0xDF, 0xA5, 0x8F, 0x8C, 0x8C, 3
DCB 0xF8, 0xA1, 0xA1, 0x59, 0x80, 0x89, 0x89
DCB 9, 0x17, 0xD, 0xD, 0x1A, 0xDA, 0xBF
DCB 0xBF, 0x65, 0x31, 0xE6, 0xE6, 0xD7, 0xC6
DCB 0x42, 0x42, 0x84, 0xB8, 0x68, 0x68, 0xD0
DCB 0xC3, 0x41, 0x41, 0x82, 0xB0, 0x99, 0x99
DCB 0x29, 0x77, 0x2D, 0x2D, 0x5A, 0x11, 0xF
DCB 0xF, 0x1E, 0xCB, 0xB0, 0xB0, 0x7B, 0xFC
DCB 0x54, 0x54, 0xA8, 0xD6, 0xBB, 0xBB, 0x6D
DCB 0x3A, 0x16, 0x16, 0x2C, 0x52, 0x52, 0x52
DCB 0x52, 9, 9, 9, 9, 0x6A, 0x6A, 0x6A, 0x6A
DCB 0xD5, 0xD5, 0xD5, 0xD5, 0x30, 0x30, 0x30
DCB 0x30, 0x36, 0x36, 0x36, 0x36, 0xA5, 0xA5
DCB 0xA5, 0xA5, 0x38, 0x38, 0x38, 0x38, 0xBF
DCB 0xBF, 0xBF, 0xBF, 0x40, 0x40, 0x40, 0x40
DCB 0xA3, 0xA3, 0xA3, 0xA3, 0x9E, 0x9E, 0x9E
DCB 0x9E, 0x81, 0x81, 0x81, 0x81, 0xF3, 0xF3
DCB 0xF3, 0xF3, 0xD7, 0xD7, 0xD7, 0xD7, 0xFB
DCB 0xFB, 0xFB, 0xFB, 0x7C, 0x7C, 0x7C, 0x7C
DCB 0xE3, 0xE3, 0xE3, 0xE3, 0x39, 0x39, 0x39
DCB 0x39, 0x82, 0x82, 0x82, 0x82, 0x9B, 0x9B
DCB 0x9B, 0x9B, 0x2F, 0x2F, 0x2F, 0x2F, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0x87, 0x87
DCB 0x34, 0x34, 0x34, 0x34, 0x8E, 0x8E, 0x8E
DCB 0x8E, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44
DCB 0x44, 0x44, 0xC4, 0xC4, 0xC4, 0xC4, 0xDE
DCB 0xDE, 0xDE, 0xDE, 0xE9, 0xE9, 0xE9, 0xE9
DCB 0xCB, 0xCB, 0xCB, 0xCB, 0x54, 0x54, 0x54
DCB 0x54, 0x7B, 0x7B, 0x7B, 0x7B, 0x94, 0x94
DCB 0x94, 0x94, 0x32, 0x32, 0x32, 0x32, 0xA6
DCB 0xA6, 0xA6, 0xA6, 0xC2, 0xC2, 0xC2, 0xC2
DCB 0x23, 0x23, 0x23, 0x23, 0x3D, 0x3D, 0x3D
DCB 0x3D, 0xEE, 0xEE, 0xEE, 0xEE, 0x4C, 0x4C
DCB 0x4C, 0x4C, 0x95, 0x95, 0x95, 0x95, 0xB
DCB 0xB, 0xB, 0xB, 0x42, 0x42, 0x42, 0x42
DCB 0xFA, 0xFA, 0xFA, 0xFA, 0xC3, 0xC3, 0xC3
DCB 0xC3, 0x4E, 0x4E, 0x4E, 0x4E, 8, 8, 8
DCB 8, 0x2E, 0x2E, 0x2E, 0x2E, 0xA1, 0xA1
DCB 0xA1, 0xA1, 0x66, 0x66, 0x66, 0x66, 0x28
DCB 0x28, 0x28, 0x28, 0xD9, 0xD9, 0xD9, 0xD9
DCB 0x24, 0x24, 0x24, 0x24, 0xB2, 0xB2, 0xB2
DCB 0xB2, 0x76, 0x76, 0x76, 0x76, 0x5B, 0x5B
DCB 0x5B, 0x5B, 0xA2, 0xA2, 0xA2, 0xA2, 0x49
DCB 0x49, 0x49, 0x49, 0x6D, 0x6D, 0x6D, 0x6D
DCB 0x8B, 0x8B, 0x8B, 0x8B, 0xD1, 0xD1, 0xD1
DCB 0xD1, 0x25, 0x25, 0x25, 0x25, 0x72, 0x72
DCB 0x72, 0x72, 0xF8, 0xF8, 0xF8, 0xF8, 0xF6
DCB 0xF6, 0xF6, 0xF6, 0x64, 0x64, 0x64, 0x64
DCB 0x86, 0x86, 0x86, 0x86, 0x68, 0x68, 0x68
DCB 0x68, 0x98, 0x98, 0x98, 0x98, 0x16, 0x16
DCB 0x16, 0x16, 0xD4, 0xD4, 0xD4, 0xD4, 0xA4
DCB 0xA4, 0xA4, 0xA4, 0x5C, 0x5C, 0x5C, 0x5C
DCB 0xCC, 0xCC, 0xCC, 0xCC, 0x5D, 0x5D, 0x5D
DCB 0x5D, 0x65, 0x65, 0x65, 0x65, 0xB6, 0xB6
DCB 0xB6, 0xB6, 0x92, 0x92, 0x92, 0x92, 0x6C
DCB 0x6C, 0x6C, 0x6C, 0x70, 0x70, 0x70, 0x70
DCB 0x48, 0x48, 0x48, 0x48, 0x50, 0x50, 0x50
DCB 0x50, 0xFD, 0xFD, 0xFD, 0xFD, 0xED, 0xED
DCB 0xED, 0xED, 0xB9, 0xB9, 0xB9, 0xB9, 0xDA
DCB 0xDA, 0xDA, 0xDA, 0x5E, 0x5E, 0x5E, 0x5E
DCB 0x15, 0x15, 0x15, 0x15, 0x46, 0x46, 0x46
DCB 0x46, 0x57, 0x57, 0x57, 0x57, 0xA7, 0xA7
DCB 0xA7, 0xA7, 0x8D, 0x8D, 0x8D, 0x8D, 0x9D
DCB 0x9D, 0x9D, 0x9D, 0x84, 0x84, 0x84, 0x84
DCB 0x90, 0x90, 0x90, 0x90, 0xD8, 0xD8, 0xD8
DCB 0xD8, 0xAB, 0xAB, 0xAB, 0xAB, 0, 0, 0
DCB 0, 0x8C, 0x8C, 0x8C, 0x8C, 0xBC, 0xBC
DCB 0xBC, 0xBC, 0xD3, 0xD3, 0xD3, 0xD3, 0xA
DCB 0xA, 0xA, 0xA, 0xF7, 0xF7, 0xF7, 0xF7
DCB 0xE4, 0xE4, 0xE4, 0xE4, 0x58, 0x58, 0x58
DCB 0x58, 5, 5, 5, 5, 0xB8, 0xB8, 0xB8, 0xB8
DCB 0xB3, 0xB3, 0xB3, 0xB3, 0x45, 0x45, 0x45
DCB 0x45, 6, 6, 6, 6, 0xD0, 0xD0, 0xD0, 0xD0
DCB 0x2C, 0x2C, 0x2C, 0x2C, 0x1E, 0x1E, 0x1E
DCB 0x1E, 0x8F, 0x8F, 0x8F, 0x8F, 0xCA, 0xCA
DCB 0xCA, 0xCA, 0x3F, 0x3F, 0x3F, 0x3F, 0xF
DCB 0xF, 0xF, 0xF, 2, 2, 2, 2, 0xC1, 0xC1
DCB 0xC1, 0xC1, 0xAF, 0xAF, 0xAF, 0xAF, 0xBD
DCB 0xBD, 0xBD, 0xBD, 3, 3, 3, 3, 1, 1, 1
DCB 1, 0x13, 0x13, 0x13, 0x13, 0x8A, 0x8A
DCB 0x8A, 0x8A, 0x6B, 0x6B, 0x6B, 0x6B, 0x3A
DCB 0x3A, 0x3A, 0x3A, 0x91, 0x91, 0x91, 0x91
DCB 0x11, 0x11, 0x11, 0x11, 0x41, 0x41, 0x41
DCB 0x41, 0x4F, 0x4F, 0x4F, 0x4F, 0x67, 0x67
DCB 0x67, 0x67, 0xDC, 0xDC, 0xDC, 0xDC, 0xEA
DCB 0xEA, 0xEA, 0xEA, 0x97, 0x97, 0x97, 0x97
DCB 0xF2, 0xF2, 0xF2, 0xF2, 0xCF, 0xCF, 0xCF
DCB 0xCF, 0xCE, 0xCE, 0xCE, 0xCE, 0xF0, 0xF0
DCB 0xF0, 0xF0, 0xB4, 0xB4, 0xB4, 0xB4, 0xE6
DCB 0xE6, 0xE6, 0xE6, 0x73, 0x73, 0x73, 0x73
DCB 0x96, 0x96, 0x96, 0x96, 0xAC, 0xAC, 0xAC
DCB 0xAC, 0x74, 0x74, 0x74, 0x74, 0x22, 0x22
DCB 0x22, 0x22, 0xE7, 0xE7, 0xE7, 0xE7, 0xAD
DCB 0xAD, 0xAD, 0xAD, 0x35, 0x35, 0x35, 0x35
DCB 0x85, 0x85, 0x85, 0x85, 0xE2, 0xE2, 0xE2
DCB 0xE2, 0xF9, 0xF9, 0xF9, 0xF9, 0x37, 0x37
DCB 0x37, 0x37, 0xE8, 0xE8, 0xE8, 0xE8, 0x1C
DCB 0x1C, 0x1C, 0x1C, 0x75, 0x75, 0x75, 0x75
DCB 0xDF, 0xDF, 0xDF, 0xDF, 0x6E, 0x6E, 0x6E
DCB 0x6E, 0x47, 0x47, 0x47, 0x47, 0xF1, 0xF1
DCB 0xF1, 0xF1, 0x1A, 0x1A, 0x1A, 0x1A, 0x71
DCB 0x71, 0x71, 0x71, 0x1D, 0x1D, 0x1D, 0x1D
DCB 0x29, 0x29, 0x29, 0x29, 0xC5, 0xC5, 0xC5
DCB 0xC5, 0x89, 0x89, 0x89, 0x89, 0x6F, 0x6F
DCB 0x6F, 0x6F, 0xB7, 0xB7, 0xB7, 0xB7, 0x62
DCB 0x62, 0x62, 0x62, 0xE, 0xE, 0xE, 0xE
DCB 0xAA, 0xAA, 0xAA, 0xAA, 0x18, 0x18, 0x18
DCB 0x18, 0xBE, 0xBE, 0xBE, 0xBE, 0x1B, 0x1B
DCB 0x1B, 0x1B, 0xFC, 0xFC, 0xFC, 0xFC, 0x56
DCB 0x56, 0x56, 0x56, 0x3E, 0x3E, 0x3E, 0x3E
DCB 0x4B, 0x4B, 0x4B, 0x4B, 0xC6, 0xC6, 0xC6
DCB 0xC6, 0xD2, 0xD2, 0xD2, 0xD2, 0x79, 0x79
DCB 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x9A
DCB 0x9A, 0x9A, 0x9A, 0xDB, 0xDB, 0xDB, 0xDB
DCB 0xC0, 0xC0, 0xC0, 0xC0, 0xFE, 0xFE, 0xFE
DCB 0xFE, 0x78, 0x78, 0x78, 0x78, 0xCD, 0xCD
DCB 0xCD, 0xCD, 0x5A, 0x5A, 0x5A, 0x5A, 0xF4
DCB 0xF4, 0xF4, 0xF4, 0x1F, 0x1F, 0x1F, 0x1F
DCB 0xDD, 0xDD, 0xDD, 0xDD, 0xA8, 0xA8, 0xA8
DCB 0xA8, 0x33, 0x33, 0x33, 0x33, 0x88, 0x88
DCB 0x88, 0x88, 7, 7, 7, 7, 0xC7, 0xC7, 0xC7
DCB 0xC7, 0x31, 0x31, 0x31, 0x31, 0xB1, 0xB1
DCB 0xB1, 0xB1, 0x12, 0x12, 0x12, 0x12, 0x10
DCB 0x10, 0x10, 0x10, 0x59, 0x59, 0x59, 0x59
DCB 0x27, 0x27, 0x27, 0x27, 0x80, 0x80, 0x80
DCB 0x80, 0xEC, 0xEC, 0xEC, 0xEC, 0x5F, 0x5F
DCB 0x5F, 0x5F, 0x60, 0x60, 0x60, 0x60, 0x51
DCB 0x51, 0x51, 0x51, 0x7F, 0x7F, 0x7F, 0x7F
DCB 0xA9, 0xA9, 0xA9, 0xA9, 0x19, 0x19, 0x19
DCB 0x19, 0xB5, 0xB5, 0xB5, 0xB5, 0x4A, 0x4A
DCB 0x4A, 0x4A, 0xD, 0xD, 0xD, 0xD, 0x2D
DCB 0x2D, 0x2D, 0x2D, 0xE5, 0xE5, 0xE5, 0xE5
DCB 0x7A, 0x7A, 0x7A, 0x7A, 0x9F, 0x9F, 0x9F
DCB 0x9F, 0x93, 0x93, 0x93, 0x93, 0xC9, 0xC9
DCB 0xC9, 0xC9, 0x9C, 0x9C, 0x9C, 0x9C, 0xEF
DCB 0xEF, 0xEF, 0xEF, 0xA0, 0xA0, 0xA0, 0xA0
DCB 0xE0, 0xE0, 0xE0, 0xE0, 0x3B, 0x3B, 0x3B
DCB 0x3B, 0x4D, 0x4D, 0x4D, 0x4D, 0xAE, 0xAE
DCB 0xAE, 0xAE, 0x2A, 0x2A, 0x2A, 0x2A, 0xF5
DCB 0xF5, 0xF5, 0xF5, 0xB0, 0xB0, 0xB0, 0xB0
DCB 0xC8, 0xC8, 0xC8, 0xC8, 0xEB, 0xEB, 0xEB
DCB 0xEB, 0xBB, 0xBB, 0xBB, 0xBB, 0x3C, 0x3C
DCB 0x3C, 0x3C, 0x83, 0x83, 0x83, 0x83, 0x53
DCB 0x53, 0x53, 0x53, 0x99, 0x99, 0x99, 0x99
DCB 0x61, 0x61, 0x61, 0x61, 0x17, 0x17, 0x17
DCB 0x17, 0x2B, 0x2B, 0x2B, 0x2B, 4, 4, 4
DCB 4, 0x7E, 0x7E, 0x7E, 0x7E, 0xBA, 0xBA
DCB 0xBA, 0xBA, 0x77, 0x77, 0x77, 0x77, 0xD6
DCB 0xD6, 0xD6, 0xD6, 0x26, 0x26, 0x26, 0x26
DCB 0xE1, 0xE1, 0xE1, 0xE1, 0x69, 0x69, 0x69
DCB 0x69, 0x14, 0x14, 0x14, 0x14, 0x63, 0x63
DCB 0x63, 0x63, 0x55, 0x55, 0x55, 0x55, 0x21
DCB 0x21, 0x21, 0x21, 0xC, 0xC, 0xC, 0xC
DCB 0x7D, 0x7D, 0x7D, 0x7D
; _DWORD dword_394C4[10]
dword_394C4 DCD 0x1000000, 0x2000000, 0x4000000, 0x8000000
DCD 0x10000000, 0x20000000, 0x40000000, 0x80000000
DCD 0x1B000000, 0x36000000
off_394EC DCD aAes      ; "aes"
DCB    6
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0x7C ; |
DCB 0x43 ; C
DCB    2
DCB    0
DCB 0xB4
DCB 0x3C ; <
DCB    2
DCB    0
DCB 0xC8
DCB 0x3F ; ?
DCB    2
DCB    0
DCB 0xA8
DCB 0x3C ; <
DCB    2
DCB    0
DCB 0xB0
DCB 0x3C ; <
DCB    2
DCB    0
DCB 0x20
DCB 0x43 ; C
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aSrcCiphersAesA DCB "src/ciphers/aes/aes.c",0
aPtNull DCB "pt != NULL",0
aCtNull DCB "ct != NULL",0
aSkeyNull DCB "skey != NULL",0
aKeysizeNull DCB "keysize != NULL",0
aAes DCB "aes",0
ALIGN 4
off_395A4 DCD aDiffieHellmanG_0+0x17 ; "sha1"
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB  0xE
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x1A
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    6
DCB    0
DCB    0
DCB    0
DCB    8
DCB 0x4A ; J
DCB    2
DCB    0
DCB 0x78 ; x
DCB 0x4A ; J
DCB    2
DCB    0
DCB 0xD4
DCB 0x48 ; H
DCB    2
DCB    0
DCB 0xBC
DCB 0x46 ; F
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aSrcHashesSha1C DCB "src/hashes/sha1.c",0
aMdNull DCB "md != NULL",0
aInNull DCB "in != NULL",0
; _DWORD dword_39634[64]
dword_39634 DCD 0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5
DCD 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5
DCD 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3
DCD 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174
DCD 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC
DCD 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA
DCD 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7
DCD 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967
DCD 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13
DCD 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85
DCD 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3
DCD 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070
DCD 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5
DCD 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3
DCD 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208
DCD 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
off_39734 DCD aDiffieHellmanG+0x17 ; "sha256"
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0x48 ; H
DCB    3
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0xA0
DCB 0x4E ; N
DCB    2
DCB    0
DCB 0x3C ; <
DCB 0x4F ; O
DCB    2
DCB    0
DCB 0x6C ; l
DCB 0x4D ; M
DCB    2
DCB    0
DCB 0xC4
DCB 0x4B ; K
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aSrcHashesSha2S_1 DCB "src/hashes/sha2/sha256.c",0
ALIGN 4
off_397B8 DCD aSha384   ; "sha384"
DCB    4
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0x48 ; H
DCB    3
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0x90
DCB 0x50 ; P
DCB    2
DCB    0
DCB 0x60 ; `
DCB 0x58 ; X
DCB    2
DCB    0
DCB 0x70 ; p
DCB 0x51 ; Q
DCB    2
DCB    0
DCB 0x88
DCB 0x50 ; P
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aSrcHashesSha2S DCB "src/hashes/sha2/sha384.c",0
aSha384 DCB "sha384",0
unk_39840 DCB 0x22 ; "
DCB 0xAE
DCB 0x28 ; (
DCB 0xD7
DCB 0x98
DCB 0x2F ; /
DCB 0x8A
DCB 0x42 ; B
DCB 0xCD
DCB 0x65 ; e
DCB 0xEF
DCB 0x23 ; #
DCB 0x91
DCB 0x44 ; D
DCB 0x37 ; 7
DCB 0x71 ; q
DCB 0x2F ; /
DCB 0x3B ; ;
DCB 0x4D ; M
DCB 0xEC
DCB 0xCF
DCB 0xFB
DCB 0xC0
DCB 0xB5
DCB 0xBC
DCB 0xDB
DCB 0x89
DCB 0x81
DCB 0xA5
DCB 0xDB
DCB 0xB5
DCB 0xE9
DCB 0x38 ; 8
DCB 0xB5
DCB 0x48 ; H
DCB 0xF3
DCB 0x5B ; [
DCB 0xC2
DCB 0x56 ; V
DCB 0x39 ; 9
DCB 0x19
DCB 0xD0
DCB    5
DCB 0xB6
DCB 0xF1
DCB 0x11
DCB 0xF1
DCB 0x59 ; Y
DCB 0x9B
DCB 0x4F ; O
DCB 0x19
DCB 0xAF
DCB 0xA4
DCB 0x82
DCB 0x3F ; ?
DCB 0x92
DCB 0x18
DCB 0x81
DCB 0x6D ; m
DCB 0xDA
DCB 0xD5
DCB 0x5E ; ^
DCB 0x1C
DCB 0xAB
DCB 0x42 ; B
DCB    2
DCB    3
DCB 0xA3
DCB 0x98
DCB 0xAA
DCB    7
DCB 0xD8
DCB 0xBE
DCB 0x6F ; o
DCB 0x70 ; p
DCB 0x45 ; E
DCB    1
DCB 0x5B ; [
DCB 0x83
DCB 0x12
DCB 0x8C
DCB 0xB2
DCB 0xE4
DCB 0x4E ; N
DCB 0xBE
DCB 0x85
DCB 0x31 ; 1
DCB 0x24 ; $
DCB 0xE2
DCB 0xB4
DCB 0xFF
DCB 0xD5
DCB 0xC3
DCB 0x7D ; }
DCB  0xC
DCB 0x55 ; U
DCB 0x6F ; o
DCB 0x89
DCB 0x7B ; {
DCB 0xF2
DCB 0x74 ; t
DCB 0x5D ; ]
DCB 0xBE
DCB 0x72 ; r
DCB 0xB1
DCB 0x96
DCB 0x16
DCB 0x3B ; ;
DCB 0xFE
DCB 0xB1
DCB 0xDE
DCB 0x80
DCB 0x35 ; 5
DCB 0x12
DCB 0xC7
DCB 0x25 ; %
DCB 0xA7
DCB    6
DCB 0xDC
DCB 0x9B
DCB 0x94
DCB 0x26 ; &
DCB 0x69 ; i
DCB 0xCF
DCB 0x74 ; t
DCB 0xF1
DCB 0x9B
DCB 0xC1
DCB 0xD2
DCB 0x4A ; J
DCB 0xF1
DCB 0x9E
DCB 0xC1
DCB 0x69 ; i
DCB 0x9B
DCB 0xE4
DCB 0xE3
DCB 0x25 ; %
DCB 0x4F ; O
DCB 0x38 ; 8
DCB 0x86
DCB 0x47 ; G
DCB 0xBE
DCB 0xEF
DCB 0xB5
DCB 0xD5
DCB 0x8C
DCB 0x8B
DCB 0xC6
DCB 0x9D
DCB 0xC1
DCB  0xF
DCB 0x65 ; e
DCB 0x9C
DCB 0xAC
DCB 0x77 ; w
DCB 0xCC
DCB 0xA1
DCB  0xC
DCB 0x24 ; $
DCB 0x75 ; u
DCB    2
DCB 0x2B ; +
DCB 0x59 ; Y
DCB 0x6F ; o
DCB 0x2C ; ,
DCB 0xE9
DCB 0x2D ; -
DCB 0x83
DCB 0xE4
DCB 0xA6
DCB 0x6E ; n
DCB 0xAA
DCB 0x84
DCB 0x74 ; t
DCB 0x4A ; J
DCB 0xD4
DCB 0xFB
DCB 0x41 ; A
DCB 0xBD
DCB 0xDC
DCB 0xA9
DCB 0xB0
DCB 0x5C ; \
DCB 0xB5
DCB 0x53 ; S
DCB 0x11
DCB 0x83
DCB 0xDA
DCB 0x88
DCB 0xF9
DCB 0x76 ; v
DCB 0xAB
DCB 0xDF
DCB 0x66 ; f
DCB 0xEE
DCB 0x52 ; R
DCB 0x51 ; Q
DCB 0x3E ; >
DCB 0x98
DCB 0x10
DCB 0x32 ; 2
DCB 0xB4
DCB 0x2D ; -
DCB 0x6D ; m
DCB 0xC6
DCB 0x31 ; 1
DCB 0xA8
DCB 0x3F ; ?
DCB 0x21 ; !
DCB 0xFB
DCB 0x98
DCB 0xC8
DCB 0x27 ; '
DCB    3
DCB 0xB0
DCB 0xE4
DCB  0xE
DCB 0xEF
DCB 0xBE
DCB 0xC7
DCB 0x7F ; 
DCB 0x59 ; Y
DCB 0xBF
DCB 0xC2
DCB 0x8F
DCB 0xA8
DCB 0x3D ; =
DCB 0xF3
DCB  0xB
DCB 0xE0
DCB 0xC6
DCB 0x25 ; %
DCB 0xA7
DCB  0xA
DCB 0x93
DCB 0x47 ; G
DCB 0x91
DCB 0xA7
DCB 0xD5
DCB 0x6F ; o
DCB 0x82
DCB    3
DCB 0xE0
DCB 0x51 ; Q
DCB 0x63 ; c
DCB 0xCA
DCB    6
DCB 0x70 ; p
DCB 0x6E ; n
DCB  0xE
DCB  0xA
DCB 0x67 ; g
DCB 0x29 ; )
DCB 0x29 ; )
DCB 0x14
DCB 0xFC
DCB 0x2F ; /
DCB 0xD2
DCB 0x46 ; F
DCB 0x85
DCB  0xA
DCB 0xB7
DCB 0x27 ; '
DCB 0x26 ; &
DCB 0xC9
DCB 0x26 ; &
DCB 0x5C ; \
DCB 0x38 ; 8
DCB 0x21 ; !
DCB 0x1B
DCB 0x2E ; .
DCB 0xED
DCB 0x2A ; *
DCB 0xC4
DCB 0x5A ; Z
DCB 0xFC
DCB 0x6D ; m
DCB 0x2C ; ,
DCB 0x4D ; M
DCB 0xDF
DCB 0xB3
DCB 0x95
DCB 0x9D
DCB 0x13
DCB  0xD
DCB 0x38 ; 8
DCB 0x53 ; S
DCB 0xDE
DCB 0x63 ; c
DCB 0xAF
DCB 0x8B
DCB 0x54 ; T
DCB 0x73 ; s
DCB  0xA
DCB 0x65 ; e
DCB 0xA8
DCB 0xB2
DCB 0x77 ; w
DCB 0x3C ; <
DCB 0xBB
DCB  0xA
DCB 0x6A ; j
DCB 0x76 ; v
DCB 0xE6
DCB 0xAE
DCB 0xED
DCB 0x47 ; G
DCB 0x2E ; .
DCB 0xC9
DCB 0xC2
DCB 0x81
DCB 0x3B ; ;
DCB 0x35 ; 5
DCB 0x82
DCB 0x14
DCB 0x85
DCB 0x2C ; ,
DCB 0x72 ; r
DCB 0x92
DCB 0x64 ; d
DCB    3
DCB 0xF1
DCB 0x4C ; L
DCB 0xA1
DCB 0xE8
DCB 0xBF
DCB 0xA2
DCB    1
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0xBC
DCB 0x4B ; K
DCB 0x66 ; f
DCB 0x1A
DCB 0xA8
DCB 0x91
DCB 0x97
DCB 0xF8
DCB 0xD0
DCB 0x70 ; p
DCB 0x8B
DCB 0x4B ; K
DCB 0xC2
DCB 0x30 ; 0
DCB 0xBE
DCB 0x54 ; T
DCB    6
DCB 0xA3
DCB 0x51 ; Q
DCB 0x6C ; l
DCB 0xC7
DCB 0x18
DCB 0x52 ; R
DCB 0xEF
DCB 0xD6
DCB 0x19
DCB 0xE8
DCB 0x92
DCB 0xD1
DCB 0x10
DCB 0xA9
DCB 0x65 ; e
DCB 0x55 ; U
DCB 0x24 ; $
DCB    6
DCB 0x99
DCB 0xD6
DCB 0x2A ; *
DCB 0x20
DCB 0x71 ; q
DCB 0x57 ; W
DCB 0x85
DCB 0x35 ; 5
DCB  0xE
DCB 0xF4
DCB 0xB8
DCB 0xD1
DCB 0xBB
DCB 0x32 ; 2
DCB 0x70 ; p
DCB 0xA0
DCB 0x6A ; j
DCB 0x10
DCB 0xC8
DCB 0xD0
DCB 0xD2
DCB 0xB8
DCB 0x16
DCB 0xC1
DCB 0xA4
DCB 0x19
DCB 0x53 ; S
DCB 0xAB
DCB 0x41 ; A
DCB 0x51 ; Q
DCB    8
DCB 0x6C ; l
DCB 0x37 ; 7
DCB 0x1E
DCB 0x99
DCB 0xEB
DCB 0x8E
DCB 0xDF
DCB 0x4C ; L
DCB 0x77 ; w
DCB 0x48 ; H
DCB 0x27 ; '
DCB 0xA8
DCB 0x48 ; H
DCB 0x9B
DCB 0xE1
DCB 0xB5
DCB 0xBC
DCB 0xB0
DCB 0x34 ; 4
DCB 0x63 ; c
DCB 0x5A ; Z
DCB 0xC9
DCB 0xC5
DCB 0xB3
DCB  0xC
DCB 0x1C
DCB 0x39 ; 9
DCB 0xCB
DCB 0x8A
DCB 0x41 ; A
DCB 0xE3
DCB 0x4A ; J
DCB 0xAA
DCB 0xD8
DCB 0x4E ; N
DCB 0x73 ; s
DCB 0xE3
DCB 0x63 ; c
DCB 0x77 ; w
DCB 0x4F ; O
DCB 0xCA
DCB 0x9C
DCB 0x5B ; [
DCB 0xA3
DCB 0xB8
DCB 0xB2
DCB 0xD6
DCB 0xF3
DCB 0x6F ; o
DCB 0x2E ; .
DCB 0x68 ; h
DCB 0xFC
DCB 0xB2
DCB 0xEF
DCB 0x5D ; ]
DCB 0xEE
DCB 0x82
DCB 0x8F
DCB 0x74 ; t
DCB 0x60 ; `
DCB 0x2F ; /
DCB 0x17
DCB 0x43 ; C
DCB 0x6F ; o
DCB 0x63 ; c
DCB 0xA5
DCB 0x78 ; x
DCB 0x72 ; r
DCB 0xAB
DCB 0xF0
DCB 0xA1
DCB 0x14
DCB 0x78 ; x
DCB 0xC8
DCB 0x84
DCB 0xEC
DCB 0x39 ; 9
DCB 0x64 ; d
DCB 0x1A
DCB    8
DCB    2
DCB 0xC7
DCB 0x8C
DCB 0x28 ; (
DCB 0x1E
DCB 0x63 ; c
DCB 0x23 ; #
DCB 0xFA
DCB 0xFF
DCB 0xBE
DCB 0x90
DCB 0xE9
DCB 0xBD
DCB 0x82
DCB 0xDE
DCB 0xEB
DCB 0x6C ; l
DCB 0x50 ; P
DCB 0xA4
DCB 0x15
DCB 0x79 ; y
DCB 0xC6
DCB 0xB2
DCB 0xF7
DCB 0xA3
DCB 0xF9
DCB 0xBE
DCB 0x2B ; +
DCB 0x53 ; S
DCB 0x72 ; r
DCB 0xE3
DCB 0xF2
DCB 0x78 ; x
DCB 0x71 ; q
DCB 0xC6
DCB 0x9C
DCB 0x61 ; a
DCB 0x26 ; &
DCB 0xEA
DCB 0xCE
DCB 0x3E ; >
DCB 0x27 ; '
DCB 0xCA
DCB    7
DCB 0xC2
DCB 0xC0
DCB 0x21 ; !
DCB 0xC7
DCB 0xB8
DCB 0x86
DCB 0xD1
DCB 0x1E
DCB 0xEB
DCB 0xE0
DCB 0xCD
DCB 0xD6
DCB 0x7D ; }
DCB 0xDA
DCB 0xEA
DCB 0x78 ; x
DCB 0xD1
DCB 0x6E ; n
DCB 0xEE
DCB 0x7F ; 
DCB 0x4F ; O
DCB 0x7D ; }
DCB 0xF5
DCB 0xBA
DCB 0x6F ; o
DCB 0x17
DCB 0x72 ; r
DCB 0xAA
DCB 0x67 ; g
DCB 0xF0
DCB    6
DCB 0xA6
DCB 0x98
DCB 0xC8
DCB 0xA2
DCB 0xC5
DCB 0x7D ; }
DCB 0x63 ; c
DCB  0xA
DCB 0xAE
DCB  0xD
DCB 0xF9
DCB 0xBE
DCB    4
DCB 0x98
DCB 0x3F ; ?
DCB 0x11
DCB 0x1B
DCB 0x47 ; G
DCB 0x1C
DCB 0x13
DCB 0x35 ; 5
DCB  0xB
DCB 0x71 ; q
DCB 0x1B
DCB 0x84
DCB 0x7D ; }
DCB    4
DCB 0x23 ; #
DCB 0xF5
DCB 0x77 ; w
DCB 0xDB
DCB 0x28 ; (
DCB 0x93
DCB 0x24 ; $
DCB 0xC7
DCB 0x40 ; @
DCB 0x7B ; {
DCB 0xAB
DCB 0xCA
DCB 0x32 ; 2
DCB 0xBC
DCB 0xBE
DCB 0xC9
DCB 0x15
DCB  0xA
DCB 0xBE
DCB 0x9E
DCB 0x3C ; <
DCB 0x4C ; L
DCB  0xD
DCB 0x10
DCB 0x9C
DCB 0xC4
DCB 0x67 ; g
DCB 0x1D
DCB 0x43 ; C
DCB 0xB6
DCB 0x42 ; B
DCB 0x3E ; >
DCB 0xCB
DCB 0xBE
DCB 0xD4
DCB 0xC5
DCB 0x4C ; L
DCB 0x2A ; *
DCB 0x7E ; ~
DCB 0x65 ; e
DCB 0xFC
DCB 0x9C
DCB 0x29 ; )
DCB 0x7F ; 
DCB 0x59 ; Y
DCB 0xEC
DCB 0xFA
DCB 0xD6
DCB 0x3A ; :
DCB 0xAB
DCB 0x6F ; o
DCB 0xCB
DCB 0x5F ; _
DCB 0x17
DCB 0x58 ; X
DCB 0x47 ; G
DCB 0x4A ; J
DCB 0x8C
DCB 0x19
DCB 0x44 ; D
DCB 0x6C ; l
off_39AC0 DCD aSha512   ; "sha512"
DCB    5
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0x48 ; H
DCB    3
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0x84
DCB 0x57 ; W
DCB    2
DCB    0
DCB 0x60 ; `
DCB 0x58 ; X
DCB    2
DCB    0
DCB 0x30 ; 0
DCB 0x56 ; V
DCB    2
DCB    0
DCB    8
DCB 0x52 ; R
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aSrcHashesSha2S_0 DCB "src/hashes/sha2/sha512.c",0
aSha512 DCB "sha512",0
aSrcMacHmacHmac DCB "src/mac/hmac/hmac_done.c",0
aHmacNull DCB "hmac != NULL",0
aSrcMacHmacHmac_0 DCB "src/mac/hmac/hmac_init.c",0
aSrcMacHmacHmac_1 DCB "src/mac/hmac/hmac_process.c",0
ALIGN 4
; _DWORD dword_39BA4[3]
dword_39BA4 DCD 0, 0, 0xFFFFFFFE
DCD 0xD
DCB 0xFD
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCD 0x10
; char byte_39BBC[4]
byte_39BBC DCB 0xFF, 0, 1, 0
off_39BC0 DCD aLibtommath ; "LibTomMath"
DCB 0x1C
DCB    0
DCB    0
DCB    0
DCB 0x98
DCB 0x69 ; i
DCB    2
DCB    0
DCB 0xF8
DCB 0x69 ; i
DCB    2
DCB    0
DCB 0x64 ; d
DCB 0x69 ; i
DCB    2
DCB    0
DCB 0x1C
DCB 0x69 ; i
DCB    2
DCB    0
DCB 0xD4
DCB 0x68 ; h
DCB    2
DCB    0
DCB 0xA4
DCB 0x68 ; h
DCB    2
DCB    0
DCB 0x7C ; |
DCB 0x68 ; h
DCB    2
DCB    0
DCB 0x74 ; t
DCB 0x5D ; ]
DCB    2
DCB    0
DCB 0x48 ; H
DCB 0x5D ; ]
DCB    2
DCB    0
DCB 0x20
DCB 0x68 ; h
DCB    2
DCB    0
DCB 0xD8
DCB 0x67 ; g
DCB    2
DCB    0
DCB 0xB0
DCB 0x67 ; g
DCB    2
DCB    0
DCB 0x88
DCB 0x67 ; g
DCB    2
DCB    0
DCB 0x58 ; X
DCB 0x67 ; g
DCB    2
DCB    0
DCB 0x10
DCB 0x67 ; g
DCB    2
DCB    0
DCB 0xC8
DCB 0x66 ; f
DCB    2
DCB    0
DCB 0xA0
DCB 0x66 ; f
DCB    2
DCB    0
DCB 0x58 ; X
DCB 0x66 ; f
DCB    2
DCB    0
DCB 0x10
DCB 0x66 ; f
DCB    2
DCB    0
DCB 0xB0
DCB 0x65 ; e
DCB    2
DCB    0
DCB 0x68 ; h
DCB 0x65 ; e
DCB    2
DCB    0
DCB    8
DCB 0x65 ; e
DCB    2
DCB    0
DCB 0xC0
DCB 0x64 ; d
DCB    2
DCB    0
DCB 0x60 ; `
DCB 0x64 ; d
DCB    2
DCB    0
DCB 0x18
DCB 0x64 ; d
DCB    2
DCB    0
DCB 0xD0
DCB 0x63 ; c
DCB    2
DCB    0
DCB 0x88
DCB 0x63 ; c
DCB    2
DCB    0
DCB 0x40 ; @
DCB 0x63 ; c
DCB    2
DCB    0
DCB 0xE0
DCB 0x62 ; b
DCB    2
DCB    0
DCB 0x80
DCB 0x62 ; b
DCB    2
DCB    0
DCB 0x20
DCB 0x62 ; b
DCB    2
DCB    0
DCB 0xA8
DCB 0x61 ; a
DCB    2
DCB    0
DCB 0x48 ; H
DCB 0x61 ; a
DCB    2
DCB    0
DCB 0xE8
DCB 0x60 ; `
DCB    2
DCB    0
DCB 0x64 ; d
DCB 0x60 ; `
DCB    2
DCB    0
DCB 0x1C
DCB 0x60 ; `
DCB    2
DCB    0
DCB 0xB8
DCB 0x5F ; _
DCB    2
DCB    0
DCB 0x44 ; D
DCB 0x5D ; ]
DCB    2
DCB    0
DCB 0x40 ; @
DCB 0x5F ; _
DCB    2
DCB    0
DCB 0xD8
DCB 0x5E ; ^
DCB    2
DCB    0
DCB 0x8C
DCB 0x82
DCB    2
DCB    0
DCB 0xA0
DCB 0x87
DCB    2
DCB    0
DCB 0x18
DCB 0x91
DCB    2
DCB    0
DCB    0
DCB 0x7B ; {
DCB    2
DCB    0
DCB 0xC0
DCB 0x7C ; |
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB 0x5E ; ^
DCB    2
DCB    0
DCB 0xE8
DCB 0x5D ; ]
DCB    2
DCB    0
DCB 0xB8
DCB 0x5D ; ]
DCB    2
DCB    0
aSrcMathLtmDesc DCB "src/math/ltm_desc.c",0
aANull DCB "a != NULL",0
aBNull DCB "b != NULL",0
aLibtommath DCB "LibTomMath",0
; unsigned __int8 byte_39CC3[256]
byte_39CC3 DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0x3E, 0xFF, 0xFF, 0xFF, 0x3F, 0x34
DCB 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B
DCB 0x3C, 0x3D, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF
DCB 0xFF, 0xFF, 0, 1, 2, 3, 4, 5, 6, 7, 8
DCB 9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10
DCB 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
DCB 0x18, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
DCB 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26
DCB 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D
DCB 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
DCB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
aSrcMiscBase64B DCB "src/misc/base64/base64_decode.c",0
aSrcMiscBase64B_0 DCB "src/misc/base64/base64_encode.c",0
aAbcdefghijklmn DCB "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgh"
DCB "ijklmnopqrstuvwxyz0123456789+/",0
; const char aLtcArgchkSFail[]
aLtcArgchkSFail DCB "LTC_ARGCHK '%s' failure on line %d"
DCB " of file %s",0xA,0
aSrcMiscCryptCr DCB "src/misc/crypt/crypt_find_cipher.c"
DCB 0
aSrcMiscCryptCr_0 DCB "src/misc/crypt/crypt_find_hash.c",0
aSrcMiscCryptCr_1 DCB "src/misc/crypt/crypt_register_ciph"
DCB "er.c",0
aCipherNull DCB "cipher != NULL",0
aSrcMiscCryptCr_2 DCB "src/misc/crypt/crypt_register_hash"
DCB ".c",0
aHashNull DCB "hash != NULL",0
aSrcMiscCryptCr_3 DCB "src/misc/crypt/crypt_register_prng"
DCB ".c",0
aPrngNull DCB "prng != NULL",0
aSrcModesCtrCtr_0 DCB "src/modes/ctr/ctr_decrypt.c",0
aCtrNull DCB "ctr != NULL",0
aSrcModesCtrCtr_1 DCB "src/modes/ctr/ctr_encrypt.c",0
aSrcModesCtrCtr DCB "src/modes/ctr/ctr_start.c",0
aIvNull DCB "IV != NULL",0
ALIGN 4
; _DWORD dword_39FBC[79]
dword_39FBC DCD 0xE, 0x3A0B8, 0x3A0C2, 0x3A0DF, 0x3A0FC
DCD 0x3A119, 0x3A136, 0x10, 0x3A153, 0x3A15D
DCD 0x3A17E, 0x3A19F, 0x3A1C0, 0x3A1E1, 0x14
DCD 0x3A202, 0x3A20C, 0x3A235, 0x3A25E, 0x3A289
DCD 0x3A2B2, 0x18, 0x3A2DB, 0x3A2E3, 0x3A314
DCD 0x3A345, 0x3A376, 0x3A3A7, 0x1C, 0x3A3D7
DCD 0x3A3DF, 0x3A418, 0x3A451, 0x3A48A, 0x3A4C3
DCD 0x20, 0x3A4FC, 0x3A504, 0x3A545, 0x3A586
DCD 0x3A5C7, 0x3A608, 0x30, 0x3A649, 0x3A651
DCD 0x3A6B2, 0x3A713, 0x3A774, 0x3A7D5, 0x42
DCD 0x3A836, 0x3A83E, 0x3A8C2, 0x3A945, 0x3A9C9
DCD 0x3AA4C, 0, 0, 0, 0, 0, 0, 0, 0x50434553
DCD 0x52323131, 0x42440031, 0x41324337, 0x32364642
DCD 0x45353345, 0x30383636, 0x45423637, 0x30324441
DCD 0x36004238, 0x46453935, 0x30414238, 0x31393334
DCD 0x44454536, 0x31393845, 0x32303731
DCB 0x42 ; B
; const char a22[]
a22 DCB "22",0
DCB 0x44 ; D
DCB 0x42 ; B
DCB 0x37 ; 7
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x41 ; A
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x36 ; 6
DCB 0x32 ; 2
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x35 ; 5
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x44 ; D
DCB 0x46 ; F
DCB 0x41 ; A
DCB 0x43 ; C
DCB 0x36 ; 6
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x31 ; 1
DCB 0x43 ; C
DCB 0x35 ; 5
DCB    0
DCB 0x30 ; 0
DCB 0x39 ; 9
DCB 0x34 ; 4
DCB 0x38 ; 8
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x35 ; 5
DCB 0x41 ; A
DCB 0x35 ; 5
DCB 0x45 ; E
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x35 ; 5
DCB 0x35 ; 5
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB    0
DCB 0x41 ; A
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x35 ; 5
DCB 0x41 ; A
DCB 0x46 ; F
DCB 0x38 ; 8
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x34 ; 4
DCB 0x43 ; C
DCB 0x30 ; 0
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x30 ; 0
DCB 0x45 ; E
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x37 ; 7
DCB 0x37 ; 7
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB    0
DCB 0x53 ; S
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x50 ; P
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x52 ; R
DCB 0x31 ; 1
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x44 ; D
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB    0
DCB 0x45 ; E
DCB 0x38 ; 8
DCB 0x37 ; 7
DCB 0x35 ; 5
DCB 0x37 ; 7
DCB 0x39 ; 9
DCB 0x43 ; C
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB 0x30 ; 0
DCB 0x37 ; 7
DCB 0x39 ; 9
DCB 0x46 ; F
DCB 0x34 ; 4
DCB 0x33 ; 3
DCB 0x44 ; D
DCB 0x44 ; D
DCB 0x38 ; 8
DCB 0x32 ; 2
DCB 0x34 ; 4
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x33 ; 3
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x45 ; E
DCB 0x35 ; 5
DCB 0x45 ; E
DCB 0x44 ; D
DCB 0x33 ; 3
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x37 ; 7
DCB 0x35 ; 5
DCB 0x41 ; A
DCB 0x33 ; 3
DCB 0x30 ; 0
DCB 0x44 ; D
DCB 0x31 ; 1
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x30 ; 0
DCB 0x33 ; 3
DCB 0x38 ; 8
DCB 0x41 ; A
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB 0x35 ; 5
DCB    0
DCB 0x31 ; 1
DCB 0x36 ; 6
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x37 ; 7
DCB 0x35 ; 5
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x42 ; B
DCB 0x32 ; 2
DCB 0x44 ; D
DCB 0x30 ; 0
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x36 ; 6
DCB 0x30 ; 0
DCB 0x37 ; 7
DCB 0x43 ; C
DCB 0x41 ; A
DCB 0x35 ; 5
DCB 0x32 ; 2
DCB 0x43 ; C
DCB 0x35 ; 5
DCB 0x42 ; B
DCB 0x38 ; 8
DCB 0x36 ; 6
DCB    0
DCB 0x43 ; C
DCB 0x46 ; F
DCB 0x35 ; 5
DCB 0x41 ; A
DCB 0x43 ; C
DCB 0x38 ; 8
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x35 ; 5
DCB 0x42 ; B
DCB 0x41 ; A
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x43 ; C
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x44 ; D
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x32 ; 2
DCB 0x44 ; D
DCB 0x44 ; D
DCB 0x45 ; E
DCB 0x44 ; D
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x38 ; 8
DCB 0x33 ; 3
DCB    0
DCB 0x53 ; S
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x50 ; P
DCB 0x31 ; 1
DCB 0x36 ; 6
DCB 0x30 ; 0
DCB 0x52 ; R
DCB 0x31 ; 1
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x37 ; 7
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB    0
DCB 0x31 ; 1
DCB 0x43 ; C
DCB 0x39 ; 9
DCB 0x37 ; 7
DCB 0x42 ; B
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x43 ; C
DCB 0x35 ; 5
DCB 0x34 ; 4
DCB 0x42 ; B
DCB 0x44 ; D
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x36 ; 6
DCB 0x35 ; 5
DCB 0x41 ; A
DCB 0x43 ; C
DCB 0x46 ; F
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x46 ; F
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x34 ; 4
DCB 0x44 ; D
DCB 0x34 ; 4
DCB 0x41 ; A
DCB 0x44 ; D
DCB 0x43 ; C
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x35 ; 5
DCB 0x46 ; F
DCB 0x41 ; A
DCB 0x34 ; 4
DCB 0x35 ; 5
DCB    0
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x34 ; 4
DCB 0x43 ; C
DCB 0x38 ; 8
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x32 ; 2
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x45 ; E
DCB 0x44 ; D
DCB 0x33 ; 3
DCB 0x43 ; C
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x35 ; 5
DCB 0x32 ; 2
DCB 0x32 ; 2
DCB 0x35 ; 5
DCB 0x37 ; 7
DCB    0
DCB 0x34 ; 4
DCB 0x41 ; A
DCB 0x39 ; 9
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x35 ; 5
DCB 0x37 ; 7
DCB 0x33 ; 3
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x34 ; 4
DCB 0x36 ; 6
DCB 0x36 ; 6
DCB 0x34 ; 4
DCB 0x36 ; 6
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x36 ; 6
DCB 0x38 ; 8
DCB 0x43 ; C
DCB 0x33 ; 3
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x43 ; C
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x43 ; C
DCB 0x38 ; 8
DCB 0x32 ; 2
DCB    0
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x41 ; A
DCB 0x36 ; 6
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x35 ; 5
DCB 0x35 ; 5
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB 0x36 ; 6
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x34 ; 4
DCB 0x37 ; 7
DCB 0x44 ; D
DCB 0x35 ; 5
DCB 0x39 ; 9
DCB 0x44 ; D
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x39 ; 9
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x30 ; 0
DCB 0x34 ; 4
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x35 ; 5
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x37 ; 7
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x43 ; C
DCB 0x35 ; 5
DCB 0x46 ; F
DCB 0x42 ; B
DCB 0x33 ; 3
DCB 0x32 ; 2
DCB    0
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x2D ; -
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x32 ; 2
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB    0
DCB 0x36 ; 6
DCB 0x34 ; 4
DCB 0x32 ; 2
DCB 0x31 ; 1
DCB 0x30 ; 0
DCB 0x35 ; 5
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x45 ; E
DCB 0x35 ; 5
DCB 0x39 ; 9
DCB 0x43 ; C
DCB 0x38 ; 8
DCB 0x30 ; 0
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x39 ; 9
DCB 0x41 ; A
DCB 0x42 ; B
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x32 ; 2
DCB 0x34 ; 4
DCB 0x33 ; 3
DCB 0x30 ; 0
DCB 0x34 ; 4
DCB 0x39 ; 9
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x38 ; 8
DCB 0x44 ; D
DCB 0x45 ; E
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x31 ; 1
DCB 0x34 ; 4
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x42 ; B
DCB 0x31 ; 1
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x44 ; D
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x38 ; 8
DCB 0x33 ; 3
DCB 0x36 ; 6
DCB 0x31 ; 1
DCB 0x34 ; 4
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x43 ; C
DCB 0x39 ; 9
DCB 0x42 ; B
DCB 0x31 ; 1
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x44 ; D
DCB 0x32 ; 2
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB    0
DCB 0x31 ; 1
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x44 ; D
DCB 0x41 ; A
DCB 0x38 ; 8
DCB 0x30 ; 0
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x30 ; 0
DCB 0x33 ; 3
DCB 0x30 ; 0
DCB 0x39 ; 9
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x36 ; 6
DCB 0x37 ; 7
DCB 0x43 ; C
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x32 ; 2
DCB 0x30 ; 0
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x33 ; 3
DCB 0x41 ; A
DCB 0x31 ; 1
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x34 ; 4
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x41 ; A
DCB 0x46 ; F
DCB 0x44 ; D
DCB 0x38 ; 8
DCB 0x32 ; 2
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x31 ; 1
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB    0
DCB 0x37 ; 7
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x32 ; 2
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x35 ; 5
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x43 ; C
DCB 0x38 ; 8
DCB 0x44 ; D
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x38 ; 8
DCB 0x36 ; 6
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB 0x45 ; E
DCB 0x44 ; D
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x32 ; 2
DCB 0x34 ; 4
DCB 0x43 ; C
DCB 0x44 ; D
DCB 0x44 ; D
DCB 0x35 ; 5
DCB 0x37 ; 7
DCB 0x33 ; 3
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x37 ; 7
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x39 ; 9
DCB 0x34 ; 4
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB    0
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x2D ; -
DCB 0x32 ; 2
DCB 0x32 ; 2
DCB 0x34 ; 4
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB    0
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x30 ; 0
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB 0x41 ; A
DCB 0x38 ; 8
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB 0x43 ; C
DCB 0x30 ; 0
DCB 0x34 ; 4
DCB 0x42 ; B
DCB 0x33 ; 3
DCB 0x41 ; A
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x35 ; 5
DCB 0x34 ; 4
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x32 ; 2
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB 0x34 ; 4
DCB 0x34 ; 4
DCB 0x42 ; B
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0x37 ; 7
DCB 0x44 ; D
DCB 0x37 ; 7
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x44 ; D
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x37 ; 7
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x34 ; 4
DCB 0x33 ; 3
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x35 ; 5
DCB 0x35 ; 5
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x42 ; B
DCB 0x34 ; 4
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x31 ; 1
DCB 0x36 ; 6
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x45 ; E
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0x38 ; 8
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x44 ; D
DCB 0x44 ; D
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x34 ; 4
DCB 0x35 ; 5
DCB 0x35 ; 5
DCB 0x43 ; C
DCB 0x35 ; 5
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x41 ; A
DCB 0x33 ; 3
DCB 0x44 ; D
DCB    0
DCB 0x42 ; B
DCB 0x37 ; 7
DCB 0x30 ; 0
DCB 0x45 ; E
DCB 0x30 ; 0
DCB 0x43 ; C
DCB 0x42 ; B
DCB 0x44 ; D
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x37 ; 7
DCB 0x46 ; F
DCB 0x33 ; 3
DCB 0x32 ; 2
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x34 ; 4
DCB 0x41 ; A
DCB 0x30 ; 0
DCB 0x33 ; 3
DCB 0x43 ; C
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x33 ; 3
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x34 ; 4
DCB 0x33 ; 3
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x30 ; 0
DCB 0x44 ; D
DCB 0x36 ; 6
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB 0x35 ; 5
DCB 0x43 ; C
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x32 ; 2
DCB 0x31 ; 1
DCB    0
DCB 0x42 ; B
DCB 0x44 ; D
DCB 0x33 ; 3
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x33 ; 3
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x35 ; 5
DCB 0x46 ; F
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x46 ; F
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x32 ; 2
DCB 0x44 ; D
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x36 ; 6
DCB 0x43 ; C
DCB 0x44 ; D
DCB 0x34 ; 4
DCB 0x33 ; 3
DCB 0x37 ; 7
DCB 0x35 ; 5
DCB 0x41 ; A
DCB 0x30 ; 0
DCB 0x35 ; 5
DCB 0x41 ; A
DCB 0x30 ; 0
DCB 0x37 ; 7
DCB 0x34 ; 4
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x34 ; 4
DCB 0x34 ; 4
DCB 0x34 ; 4
DCB 0x44 ; D
DCB 0x35 ; 5
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x34 ; 4
DCB    0
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x2D ; -
DCB 0x32 ; 2
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB    0
DCB 0x35 ; 5
DCB 0x41 ; A
DCB 0x43 ; C
DCB 0x36 ; 6
DCB 0x33 ; 3
DCB 0x35 ; 5
DCB 0x44 ; D
DCB 0x38 ; 8
DCB 0x41 ; A
DCB 0x41 ; A
DCB 0x33 ; 3
DCB 0x41 ; A
DCB 0x39 ; 9
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x42 ; B
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x42 ; B
DCB 0x44 ; D
DCB 0x35 ; 5
DCB 0x35 ; 5
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x43 ; C
DCB 0x36 ; 6
DCB 0x35 ; 5
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x30 ; 0
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x30 ; 0
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x35 ; 5
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x36 ; 6
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x43 ; C
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x32 ; 2
DCB 0x37 ; 7
DCB 0x44 ; D
DCB 0x32 ; 2
DCB 0x36 ; 6
DCB 0x30 ; 0
DCB 0x34 ; 4
DCB 0x42 ; B
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x42 ; B
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x36 ; 6
DCB 0x46 ; F
DCB 0x41 ; A
DCB 0x41 ; A
DCB 0x44 ; D
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x31 ; 1
DCB 0x37 ; 7
DCB 0x39 ; 9
DCB 0x45 ; E
DCB 0x38 ; 8
DCB 0x34 ; 4
DCB 0x46 ; F
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x43 ; C
DCB 0x41 ; A
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x46 ; F
DCB 0x43 ; C
DCB 0x36 ; 6
DCB 0x33 ; 3
DCB 0x32 ; 2
DCB 0x35 ; 5
DCB 0x35 ; 5
DCB 0x31 ; 1
DCB    0
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x31 ; 1
DCB 0x37 ; 7
DCB 0x44 ; D
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x32 ; 2
DCB 0x45 ; E
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x43 ; C
DCB 0x34 ; 4
DCB 0x32 ; 2
DCB 0x34 ; 4
DCB 0x37 ; 7
DCB 0x46 ; F
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x36 ; 6
DCB 0x45 ; E
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x33 ; 3
DCB 0x41 ; A
DCB 0x34 ; 4
DCB 0x34 ; 4
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x32 ; 2
DCB 0x37 ; 7
DCB 0x37 ; 7
DCB 0x30 ; 0
DCB 0x33 ; 3
DCB 0x37 ; 7
DCB 0x44 ; D
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x44 ; D
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x33 ; 3
DCB 0x33 ; 3
DCB 0x41 ; A
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x34 ; 4
DCB 0x41 ; A
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x34 ; 4
DCB 0x35 ; 5
DCB 0x44 ; D
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x36 ; 6
DCB    0
DCB 0x34 ; 4
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x34 ; 4
DCB 0x32 ; 2
DCB 0x45 ; E
DCB 0x32 ; 2
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x31 ; 1
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x42 ; B
DCB 0x38 ; 8
DCB 0x45 ; E
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x43 ; C
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x45 ; E
DCB 0x31 ; 1
DCB 0x36 ; 6
DCB 0x32 ; 2
DCB 0x42 ; B
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x33 ; 3
DCB 0x35 ; 5
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB 0x35 ; 5
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x42 ; B
DCB 0x42 ; B
DCB 0x36 ; 6
DCB 0x34 ; 4
DCB 0x30 ; 0
DCB 0x36 ; 6
DCB 0x38 ; 8
DCB 0x33 ; 3
DCB 0x37 ; 7
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x35 ; 5
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x35 ; 5
DCB    0
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x2D ; -
DCB 0x33 ; 3
DCB 0x38 ; 8
DCB 0x34 ; 4
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB    0
DCB 0x42 ; B
DCB 0x33 ; 3
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x46 ; F
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x34 ; 4
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x45 ; E
DCB 0x30 ; 0
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x46 ; F
DCB 0x38 ; 8
DCB 0x32 ; 2
DCB 0x44 ; D
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x31 ; 1
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x39 ; 9
DCB 0x43 ; C
DCB 0x36 ; 6
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x34 ; 4
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x30 ; 0
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB 0x34 ; 4
DCB 0x30 ; 0
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x46 ; F
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x38 ; 8
DCB 0x37 ; 7
DCB 0x35 ; 5
DCB 0x41 ; A
DCB 0x43 ; C
DCB 0x36 ; 6
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB 0x44 ; D
DCB 0x38 ; 8
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x45 ; E
DCB 0x44 ; D
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x44 ; D
DCB 0x32 ; 2
DCB 0x41 ; A
DCB 0x38 ; 8
DCB 0x35 ; 5
DCB 0x43 ; C
DCB 0x38 ; 8
DCB 0x45 ; E
DCB 0x44 ; D
DCB 0x44 ; D
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x41 ; A
DCB 0x45 ; E
DCB 0x46 ; F
DCB    0
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x43 ; C
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x33 ; 3
DCB 0x34 ; 4
DCB 0x44 ; D
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x34 ; 4
DCB 0x33 ; 3
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x44 ; D
DCB 0x44 ; D
DCB 0x46 ; F
DCB 0x35 ; 5
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x41 ; A
DCB 0x30 ; 0
DCB 0x44 ; D
DCB 0x42 ; B
DCB 0x32 ; 2
DCB 0x34 ; 4
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x30 ; 0
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x36 ; 6
DCB 0x41 ; A
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x35 ; 5
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x37 ; 7
DCB 0x33 ; 3
DCB    0
DCB 0x41 ; A
DCB 0x41 ; A
DCB 0x38 ; 8
DCB 0x37 ; 7
DCB 0x43 ; C
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x32 ; 2
DCB 0x42 ; B
DCB 0x45 ; E
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x30 ; 0
DCB 0x35 ; 5
DCB 0x33 ; 3
DCB 0x37 ; 7
DCB 0x38 ; 8
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x31 ; 1
DCB 0x43 ; C
DCB 0x37 ; 7
DCB 0x31 ; 1
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x33 ; 3
DCB 0x32 ; 2
DCB 0x30 ; 0
DCB 0x41 ; A
DCB 0x44 ; D
DCB 0x37 ; 7
DCB 0x34 ; 4
DCB 0x36 ; 6
DCB 0x45 ; E
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x36 ; 6
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x39 ; 9
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB 0x35 ; 5
DCB 0x39 ; 9
DCB 0x46 ; F
DCB 0x37 ; 7
DCB 0x34 ; 4
DCB 0x31 ; 1
DCB 0x45 ; E
DCB 0x30 ; 0
DCB 0x38 ; 8
DCB 0x32 ; 2
DCB 0x35 ; 5
DCB 0x34 ; 4
DCB 0x32 ; 2
DCB 0x41 ; A
DCB 0x33 ; 3
DCB 0x38 ; 8
DCB 0x35 ; 5
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x46 ; F
DCB 0x32 ; 2
DCB 0x35 ; 5
DCB 0x44 ; D
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x35 ; 5
DCB 0x35 ; 5
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x36 ; 6
DCB 0x43 ; C
DCB 0x33 ; 3
DCB 0x41 ; A
DCB 0x35 ; 5
DCB 0x34 ; 4
DCB 0x35 ; 5
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x38 ; 8
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x30 ; 0
DCB 0x41 ; A
DCB 0x42 ; B
DCB 0x37 ; 7
DCB    0
DCB 0x33 ; 3
DCB 0x36 ; 6
DCB 0x31 ; 1
DCB 0x37 ; 7
DCB 0x44 ; D
DCB 0x45 ; E
DCB 0x34 ; 4
DCB 0x41 ; A
DCB 0x39 ; 9
DCB 0x36 ; 6
DCB 0x32 ; 2
DCB 0x36 ; 6
DCB 0x32 ; 2
DCB 0x43 ; C
DCB 0x36 ; 6
DCB 0x46 ; F
DCB 0x35 ; 5
DCB 0x44 ; D
DCB 0x39 ; 9
DCB 0x45 ; E
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x32 ; 2
DCB 0x44 ; D
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x46 ; F
DCB 0x38 ; 8
DCB 0x46 ; F
DCB 0x34 ; 4
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x42 ; B
DCB 0x44 ; D
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x41 ; A
DCB 0x31 ; 1
DCB 0x34 ; 4
DCB 0x37 ; 7
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x39 ; 9
DCB 0x44 ; D
DCB 0x41 ; A
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x35 ; 5
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0x38 ; 8
DCB 0x43 ; C
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x41 ; A
DCB 0x36 ; 6
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0x31 ; 1
DCB 0x43 ; C
DCB 0x45 ; E
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x44 ; D
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x34 ; 4
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x37 ; 7
DCB 0x43 ; C
DCB 0x39 ; 9
DCB 0x30 ; 0
DCB 0x45 ; E
DCB 0x41 ; A
DCB 0x30 ; 0
DCB 0x45 ; E
DCB 0x35 ; 5
DCB 0x46 ; F
DCB    0
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x2D ; -
DCB 0x35 ; 5
DCB 0x32 ; 2
DCB 0x31 ; 1
DCB    0
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB    0
DCB 0x35 ; 5
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x35 ; 5
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x36 ; 6
DCB 0x31 ; 1
DCB 0x38 ; 8
DCB 0x45 ; E
DCB 0x31 ; 1
DCB 0x43 ; C
DCB 0x39 ; 9
DCB 0x41 ; A
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x31 ; 1
DCB 0x41 ; A
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0x36 ; 6
DCB 0x38 ; 8
DCB 0x35 ; 5
DCB 0x34 ; 4
DCB 0x30 ; 0
DCB 0x45 ; E
DCB 0x45 ; E
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x44 ; D
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x35 ; 5
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x42 ; B
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB 0x35 ; 5
DCB 0x46 ; F
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x31 ; 1
DCB 0x38 ; 8
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x31 ; 1
DCB 0x30 ; 0
DCB 0x39 ; 9
DCB 0x45 ; E
DCB 0x31 ; 1
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x31 ; 1
DCB 0x39 ; 9
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x35 ; 5
DCB 0x31 ; 1
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x39 ; 9
DCB 0x33 ; 3
DCB 0x37 ; 7
DCB 0x42 ; B
DCB 0x31 ; 1
DCB 0x36 ; 6
DCB 0x35 ; 5
DCB 0x32 ; 2
DCB 0x43 ; C
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0x44 ; D
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x42 ; B
DCB 0x31 ; 1
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x37 ; 7
DCB 0x33 ; 3
DCB 0x35 ; 5
DCB 0x37 ; 7
DCB 0x33 ; 3
DCB 0x44 ; D
DCB 0x46 ; F
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x33 ; 3
DCB 0x44 ; D
DCB 0x32 ; 2
DCB 0x43 ; C
DCB 0x33 ; 3
DCB 0x34 ; 4
DCB 0x46 ; F
DCB 0x31 ; 1
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x34 ; 4
DCB 0x35 ; 5
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x44 ; D
DCB 0x34 ; 4
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB 0x33 ; 3
DCB 0x46 ; F
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB    0
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x41 ; A
DCB 0x35 ; 5
DCB 0x31 ; 1
DCB 0x38 ; 8
DCB 0x36 ; 6
DCB 0x38 ; 8
DCB 0x37 ; 7
DCB 0x38 ; 8
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x32 ; 2
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x36 ; 6
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x37 ; 7
DCB 0x46 ; F
DCB 0x43 ; C
DCB 0x43 ; C
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x34 ; 4
DCB 0x38 ; 8
DCB 0x46 ; F
DCB 0x37 ; 7
DCB 0x30 ; 0
DCB 0x39 ; 9
DCB 0x41 ; A
DCB 0x35 ; 5
DCB 0x44 ; D
DCB 0x30 ; 0
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x42 ; B
DCB 0x35 ; 5
DCB 0x43 ; C
DCB 0x39 ; 9
DCB 0x42 ; B
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x43 ; C
DCB 0x34 ; 4
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x45 ; E
DCB 0x42 ; B
DCB 0x42 ; B
DCB 0x36 ; 6
DCB 0x46 ; F
DCB 0x42 ; B
DCB 0x37 ; 7
DCB 0x31 ; 1
DCB 0x45 ; E
DCB 0x39 ; 9
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x38 ; 8
DCB 0x36 ; 6
DCB 0x34 ; 4
DCB 0x30 ; 0
DCB 0x39 ; 9
DCB    0
DCB 0x43 ; C
DCB 0x36 ; 6
DCB 0x38 ; 8
DCB 0x35 ; 5
DCB 0x38 ; 8
DCB 0x45 ; E
DCB 0x30 ; 0
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x37 ; 7
DCB 0x30 ; 0
DCB 0x34 ; 4
DCB 0x30 ; 0
DCB 0x34 ; 4
DCB 0x45 ; E
DCB 0x39 ; 9
DCB 0x43 ; C
DCB 0x44 ; D
DCB 0x39 ; 9
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x43 ; C
DCB 0x42 ; B
DCB 0x36 ; 6
DCB 0x36 ; 6
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x35 ; 5
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x34 ; 4
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x43 ; C
DCB 0x36 ; 6
DCB 0x34 ; 4
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x30 ; 0
DCB 0x35 ; 5
DCB 0x33 ; 3
DCB 0x46 ; F
DCB 0x42 ; B
DCB 0x35 ; 5
DCB 0x32 ; 2
DCB 0x31 ; 1
DCB 0x46 ; F
DCB 0x38 ; 8
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x41 ; A
DCB 0x46 ; F
DCB 0x36 ; 6
DCB 0x30 ; 0
DCB 0x36 ; 6
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x44 ; D
DCB 0x33 ; 3
DCB 0x44 ; D
DCB 0x42 ; B
DCB 0x41 ; A
DCB 0x41 ; A
DCB 0x31 ; 1
DCB 0x34 ; 4
DCB 0x42 ; B
DCB 0x35 ; 5
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x35 ; 5
DCB 0x39 ; 9
DCB 0x32 ; 2
DCB 0x38 ; 8
DCB 0x46 ; F
DCB 0x45 ; E
DCB 0x31 ; 1
DCB 0x44 ; D
DCB 0x43 ; C
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x46 ; F
DCB 0x46 ; F
DCB 0x41 ; A
DCB 0x38 ; 8
DCB 0x44 ; D
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x33 ; 3
DCB 0x34 ; 4
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x33 ; 3
DCB 0x43 ; C
DCB 0x31 ; 1
DCB 0x38 ; 8
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x41 ; A
DCB 0x34 ; 4
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x42 ; B
DCB 0x46 ; F
DCB 0x39 ; 9
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x33 ; 3
DCB 0x31 ; 1
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x45 ; E
DCB 0x35 ; 5
DCB 0x42 ; B
DCB 0x44 ; D
DCB 0x36 ; 6
DCB 0x36 ; 6
DCB    0
DCB 0x31 ; 1
DCB 0x31 ; 1
DCB 0x38 ; 8
DCB 0x33 ; 3
DCB 0x39 ; 9
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x36 ; 6
DCB 0x41 ; A
DCB 0x37 ; 7
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x41 ; A
DCB 0x33 ; 3
DCB 0x42 ; B
DCB 0x43 ; C
DCB 0x30 ; 0
DCB 0x30 ; 0
DCB 0x34 ; 4
DCB 0x35 ; 5
DCB 0x43 ; C
DCB 0x38 ; 8
DCB 0x41 ; A
DCB 0x35 ; 5
DCB 0x46 ; F
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x32 ; 2
DCB 0x43 ; C
DCB 0x37 ; 7
DCB 0x44 ; D
DCB 0x31 ; 1
DCB 0x42 ; B
DCB 0x44 ; D
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x38 ; 8
DCB 0x46 ; F
DCB 0x35 ; 5
DCB 0x34 ; 4
DCB 0x34 ; 4
DCB 0x34 ; 4
DCB 0x39 ; 9
DCB 0x35 ; 5
DCB 0x37 ; 7
DCB 0x39 ; 9
DCB 0x42 ; B
DCB 0x34 ; 4
DCB 0x34 ; 4
DCB 0x36 ; 6
DCB 0x38 ; 8
DCB 0x31 ; 1
DCB 0x37 ; 7
DCB 0x41 ; A
DCB 0x46 ; F
DCB 0x42 ; B
DCB 0x44 ; D
DCB 0x31 ; 1
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x37 ; 7
DCB 0x33 ; 3
DCB 0x45 ; E
DCB 0x36 ; 6
DCB 0x36 ; 6
DCB 0x32 ; 2
DCB 0x43 ; C
DCB 0x39 ; 9
DCB 0x37 ; 7
DCB 0x45 ; E
DCB 0x45 ; E
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x39 ; 9
DCB 0x39 ; 9
DCB 0x35 ; 5
DCB 0x45 ; E
DCB 0x46 ; F
DCB 0x34 ; 4
DCB 0x32 ; 2
DCB 0x36 ; 6
DCB 0x34 ; 4
DCB 0x30 ; 0
DCB 0x43 ; C
DCB 0x35 ; 5
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB 0x42 ; B
DCB 0x39 ; 9
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x46 ; F
DCB 0x41 ; A
DCB 0x44 ; D
DCB 0x30 ; 0
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x31 ; 1
DCB 0x33 ; 3
DCB 0x35 ; 5
DCB 0x33 ; 3
DCB 0x43 ; C
DCB 0x37 ; 7
DCB 0x30 ; 0
DCB 0x38 ; 8
DCB 0x36 ; 6
DCB 0x41 ; A
DCB 0x32 ; 2
DCB 0x37 ; 7
DCB 0x32 ; 2
DCB 0x43 ; C
DCB 0x32 ; 2
DCB 0x34 ; 4
DCB 0x30 ; 0
DCB 0x38 ; 8
DCB 0x38 ; 8
DCB 0x42 ; B
DCB 0x45 ; E
DCB 0x39 ; 9
DCB 0x34 ; 4
DCB 0x37 ; 7
DCB 0x36 ; 6
DCB 0x39 ; 9
DCB 0x46 ; F
DCB 0x44 ; D
DCB 0x31 ; 1
DCB 0x36 ; 6
DCB 0x36 ; 6
DCB 0x35 ; 5
DCB 0x30 ; 0
DCB    0
aSrcPkEccEccAns DCB "src/pk/ecc/ecc_ansi_x963_export.c",0
aSrcPkEccEccFre DCB "src/pk/ecc/ecc_free.c",0
aSrcPkEccEccMak DCB "src/pk/ecc/ecc_make_key.c",0
aLtcMpNameNull DCB "ltc_mp.name != NULL",0
aDpNull DCB "dp != NULL",0
aSrcPkEccLtcEcc DCB "src/pk/ecc/ltc_ecc_map.c",0
aPNull DCB "P != NULL",0
aModulusNull DCB "modulus != NULL",0
aSrcPkEccLtcEcc_0 DCB "src/pk/ecc/ltc_ecc_mul2add.c",0
aCNull DCB "C != NULL",0
aKaNull DCB "kA != NULL",0
aKbNull DCB "kB != NULL",0
aSrcPkEccLtcEcc_1 DCB "src/pk/ecc/ltc_ecc_mulmod_timing.c"
DCB 0
aKNull DCB "k != NULL",0
aGNull DCB "G != NULL",0
aRNull DCB "R != NULL",0
aSrcPkEccLtcEcc_2 DCB "src/pk/ecc/ltc_ecc_projective_add_"
DCB "point.c",0
aQNull DCB "Q != NULL",0
aSrcPkEccLtcEcc_3 DCB "src/pk/ecc/ltc_ecc_projective_dbl_"
DCB "point.c",0
aSrcHashesHelpe DCB "src/hashes/helper/hash_memory.c",0
; _DWORD dword_3AC70[16]
dword_3AC70 DCD 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2
DCD 0, 1, 0
off_3ACB0 DCD 2
dword_3ACB4 DCD 3
dword_3ACB8 DCD 5
dword_3ACBC DCD 7
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB  0xD
DCB    0
DCB    0
DCB    0
DCB 0x11
DCB    0
DCB    0
DCB    0
DCB 0x13
DCB    0
DCB    0
DCB    0
DCB 0x17
DCB    0
DCB    0
DCB    0
DCB 0x1D
DCB    0
DCB    0
DCB    0
DCB 0x1F
DCB    0
DCB    0
DCB    0
DCB 0x25 ; %
DCB    0
DCB    0
DCB    0
DCB 0x29 ; )
DCB    0
DCB    0
DCB    0
DCB 0x2B ; +
DCB    0
DCB    0
DCB    0
DCB 0x2F ; /
DCB    0
DCB    0
DCB    0
DCB 0x35 ; 5
DCB    0
DCB    0
DCB    0
DCB 0x3B ; ;
DCB    0
DCB    0
DCB    0
DCB 0x3D ; =
DCB    0
DCB    0
DCB    0
DCB 0x43 ; C
DCB    0
DCB    0
DCB    0
DCB 0x47 ; G
DCB    0
DCB    0
DCB    0
DCB 0x49 ; I
DCB    0
DCB    0
DCB    0
DCB 0x4F ; O
DCB    0
DCB    0
DCB    0
DCB 0x53 ; S
DCB    0
DCB    0
DCB    0
DCB 0x59 ; Y
DCB    0
DCB    0
DCB    0
DCB 0x61 ; a
DCB    0
DCB    0
DCB    0
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB 0x67 ; g
DCB    0
DCB    0
DCB    0
DCB 0x6B ; k
DCB    0
DCB    0
DCB    0
DCB 0x6D ; m
DCB    0
DCB    0
DCB    0
DCB 0x71 ; q
DCB    0
DCB    0
DCB    0
DCB 0x7F ; 
DCB    0
DCB    0
DCB    0
DCB 0x83
DCB    0
DCB    0
DCB    0
DCB 0x89
DCB    0
DCB    0
DCB    0
DCB 0x8B
DCB    0
DCB    0
DCB    0
DCB 0x95
DCB    0
DCB    0
DCB    0
DCB 0x97
DCB    0
DCB    0
DCB    0
DCB 0x9D
DCB    0
DCB    0
DCB    0
DCB 0xA3
DCB    0
DCB    0
DCB    0
DCB 0xA7
DCB    0
DCB    0
DCB    0
DCB 0xAD
DCB    0
DCB    0
DCB    0
DCB 0xB3
DCB    0
DCB    0
DCB    0
DCB 0xB5
DCB    0
DCB    0
DCB    0
DCB 0xBF
DCB    0
DCB    0
DCB    0
DCB 0xC1
DCB    0
DCB    0
DCB    0
DCB 0xC5
DCB    0
DCB    0
DCB    0
DCB 0xC7
DCB    0
DCB    0
DCB    0
DCB 0xD3
DCB    0
DCB    0
DCB    0
DCB 0xDF
DCB    0
DCB    0
DCB    0
DCB 0xE3
DCB    0
DCB    0
DCB    0
DCB 0xE5
DCB    0
DCB    0
DCB    0
DCB 0xE9
DCB    0
DCB    0
DCB    0
DCB 0xEF
DCB    0
DCB    0
DCB    0
DCB 0xF1
DCB    0
DCB    0
DCB    0
DCB 0xFB
DCB    0
DCB    0
DCB    0
DCB    1
DCB    1
DCB    0
DCB    0
DCB    7
DCB    1
DCB    0
DCB    0
DCB  0xD
DCB    1
DCB    0
DCB    0
DCB  0xF
DCB    1
DCB    0
DCB    0
DCB 0x15
DCB    1
DCB    0
DCB    0
DCB 0x19
DCB    1
DCB    0
DCB    0
DCB 0x1B
DCB    1
DCB    0
DCB    0
DCB 0x25 ; %
DCB    1
DCB    0
DCB    0
DCB 0x33 ; 3
DCB    1
DCB    0
DCB    0
DCB 0x37 ; 7
DCB    1
DCB    0
DCB    0
DCB 0x39 ; 9
DCB    1
DCB    0
DCB    0
DCB 0x3D ; =
DCB    1
DCB    0
DCB    0
DCB 0x4B ; K
DCB    1
DCB    0
DCB    0
DCB 0x51 ; Q
DCB    1
DCB    0
DCB    0
DCB 0x5B ; [
DCB    1
DCB    0
DCB    0
DCB 0x5D ; ]
DCB    1
DCB    0
DCB    0
DCB 0x61 ; a
DCB    1
DCB    0
DCB    0
DCB 0x67 ; g
DCB    1
DCB    0
DCB    0
DCB 0x6F ; o
DCB    1
DCB    0
DCB    0
DCB 0x75 ; u
DCB    1
DCB    0
DCB    0
DCB 0x7B ; {
DCB    1
DCB    0
DCB    0
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB 0x85
DCB    1
DCB    0
DCB    0
DCB 0x8D
DCB    1
DCB    0
DCB    0
DCB 0x91
DCB    1
DCB    0
DCB    0
DCB 0x99
DCB    1
DCB    0
DCB    0
DCB 0xA3
DCB    1
DCB    0
DCB    0
DCB 0xA5
DCB    1
DCB    0
DCB    0
DCB 0xAF
DCB    1
DCB    0
DCB    0
DCB 0xB1
DCB    1
DCB    0
DCB    0
DCB 0xB7
DCB    1
DCB    0
DCB    0
DCB 0xBB
DCB    1
DCB    0
DCB    0
DCB 0xC1
DCB    1
DCB    0
DCB    0
DCB 0xC9
DCB    1
DCB    0
DCB    0
DCB 0xCD
DCB    1
DCB    0
DCB    0
DCB 0xCF
DCB    1
DCB    0
DCB    0
DCB 0xD3
DCB    1
DCB    0
DCB    0
DCB 0xDF
DCB    1
DCB    0
DCB    0
DCB 0xE7
DCB    1
DCB    0
DCB    0
DCB 0xEB
DCB    1
DCB    0
DCB    0
DCB 0xF3
DCB    1
DCB    0
DCB    0
DCB 0xF7
DCB    1
DCB    0
DCB    0
DCB 0xFD
DCB    1
DCB    0
DCB    0
DCB    9
DCB    2
DCB    0
DCB    0
DCB  0xB
DCB    2
DCB    0
DCB    0
DCB 0x1D
DCB    2
DCB    0
DCB    0
DCB 0x23 ; #
DCB    2
DCB    0
DCB    0
DCB 0x2D ; -
DCB    2
DCB    0
DCB    0
DCB 0x33 ; 3
DCB    2
DCB    0
DCB    0
DCB 0x39 ; 9
DCB    2
DCB    0
DCB    0
DCB 0x3B ; ;
DCB    2
DCB    0
DCB    0
DCB 0x41 ; A
DCB    2
DCB    0
DCB    0
DCB 0x4B ; K
DCB    2
DCB    0
DCB    0
DCB 0x51 ; Q
DCB    2
DCB    0
DCB    0
DCB 0x57 ; W
DCB    2
DCB    0
DCB    0
DCB 0x59 ; Y
DCB    2
DCB    0
DCB    0
DCB 0x5F ; _
DCB    2
DCB    0
DCB    0
DCB 0x65 ; e
DCB    2
DCB    0
DCB    0
DCB 0x69 ; i
DCB    2
DCB    0
DCB    0
DCB 0x6B ; k
DCB    2
DCB    0
DCB    0
DCB 0x77 ; w
DCB    2
DCB    0
DCB    0
DCB 0x81
DCB    2
DCB    0
DCB    0
DCB 0x83
DCB    2
DCB    0
DCB    0
DCB 0x87
DCB    2
DCB    0
DCB    0
DCB 0x8D
DCB    2
DCB    0
DCB    0
DCB 0x93
DCB    2
DCB    0
DCB    0
DCB 0x95
DCB    2
DCB    0
DCB    0
DCB 0xA1
DCB    2
DCB    0
DCB    0
DCB 0xA5
DCB    2
DCB    0
DCB    0
DCB 0xAB
DCB    2
DCB    0
DCB    0
DCB 0xB3
DCB    2
DCB    0
DCB    0
DCB 0xBD
DCB    2
DCB    0
DCB    0
DCB 0xC5
DCB    2
DCB    0
DCB    0
DCB 0xCF
DCB    2
DCB    0
DCB    0
DCB 0xD7
DCB    2
DCB    0
DCB    0
DCB 0xDD
DCB    2
DCB    0
DCB    0
DCB 0xE3
DCB    2
DCB    0
DCB    0
DCB 0xE7
DCB    2
DCB    0
DCB    0
DCB 0xEF
DCB    2
DCB    0
DCB    0
DCB 0xF5
DCB    2
DCB    0
DCB    0
DCB 0xF9
DCB    2
DCB    0
DCB    0
DCB    1
DCB    3
DCB    0
DCB    0
DCB    5
DCB    3
DCB    0
DCB    0
DCB 0x13
DCB    3
DCB    0
DCB    0
DCB 0x1D
DCB    3
DCB    0
DCB    0
DCB 0x29 ; )
DCB    3
DCB    0
DCB    0
DCB 0x2B ; +
DCB    3
DCB    0
DCB    0
DCB 0x35 ; 5
DCB    3
DCB    0
DCB    0
DCB 0x37 ; 7
DCB    3
DCB    0
DCB    0
DCB 0x3B ; ;
DCB    3
DCB    0
DCB    0
DCB 0x3D ; =
DCB    3
DCB    0
DCB    0
DCB 0x47 ; G
DCB    3
DCB    0
DCB    0
DCB 0x55 ; U
DCB    3
DCB    0
DCB    0
DCB 0x59 ; Y
DCB    3
DCB    0
DCB    0
DCB 0x5B ; [
DCB    3
DCB    0
DCB    0
DCB 0x5F ; _
DCB    3
DCB    0
DCB    0
DCB 0x6D ; m
DCB    3
DCB    0
DCB    0
DCB 0x71 ; q
DCB    3
DCB    0
DCB    0
DCB 0x73 ; s
DCB    3
DCB    0
DCB    0
DCB 0x77 ; w
DCB    3
DCB    0
DCB    0
DCB 0x8B
DCB    3
DCB    0
DCB    0
DCB 0x8F
DCB    3
DCB    0
DCB    0
DCB 0x97
DCB    3
DCB    0
DCB    0
DCB 0xA1
DCB    3
DCB    0
DCB    0
DCB 0xA9
DCB    3
DCB    0
DCB    0
DCB 0xAD
DCB    3
DCB    0
DCB    0
DCB 0xB3
DCB    3
DCB    0
DCB    0
DCB 0xB9
DCB    3
DCB    0
DCB    0
DCB 0xC7
DCB    3
DCB    0
DCB    0
DCB 0xCB
DCB    3
DCB    0
DCB    0
DCB 0xD1
DCB    3
DCB    0
DCB    0
DCB 0xD7
DCB    3
DCB    0
DCB    0
DCB 0xDF
DCB    3
DCB    0
DCB    0
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB 0xF1
DCB    3
DCB    0
DCB    0
DCB 0xF5
DCB    3
DCB    0
DCB    0
DCB 0xFB
DCB    3
DCB    0
DCB    0
DCB 0xFD
DCB    3
DCB    0
DCB    0
DCB    7
DCB    4
DCB    0
DCB    0
DCB    9
DCB    4
DCB    0
DCB    0
DCB  0xF
DCB    4
DCB    0
DCB    0
DCB 0x19
DCB    4
DCB    0
DCB    0
DCB 0x1B
DCB    4
DCB    0
DCB    0
DCB 0x25 ; %
DCB    4
DCB    0
DCB    0
DCB 0x27 ; '
DCB    4
DCB    0
DCB    0
DCB 0x2D ; -
DCB    4
DCB    0
DCB    0
DCB 0x3F ; ?
DCB    4
DCB    0
DCB    0
DCB 0x43 ; C
DCB    4
DCB    0
DCB    0
DCB 0x45 ; E
DCB    4
DCB    0
DCB    0
DCB 0x49 ; I
DCB    4
DCB    0
DCB    0
DCB 0x4F ; O
DCB    4
DCB    0
DCB    0
DCB 0x55 ; U
DCB    4
DCB    0
DCB    0
DCB 0x5D ; ]
DCB    4
DCB    0
DCB    0
DCB 0x63 ; c
DCB    4
DCB    0
DCB    0
DCB 0x69 ; i
DCB    4
DCB    0
DCB    0
DCB 0x7F ; 
DCB    4
DCB    0
DCB    0
DCB 0x81
DCB    4
DCB    0
DCB    0
DCB 0x8B
DCB    4
DCB    0
DCB    0
DCB 0x93
DCB    4
DCB    0
DCB    0
DCB 0x9D
DCB    4
DCB    0
DCB    0
DCB 0xA3
DCB    4
DCB    0
DCB    0
DCB 0xA9
DCB    4
DCB    0
DCB    0
DCB 0xB1
DCB    4
DCB    0
DCB    0
DCB 0xBD
DCB    4
DCB    0
DCB    0
DCB 0xC1
DCB    4
DCB    0
DCB    0
DCB 0xC7
DCB    4
DCB    0
DCB    0
DCB 0xCD
DCB    4
DCB    0
DCB    0
DCB 0xCF
DCB    4
DCB    0
DCB    0
DCB 0xD5
DCB    4
DCB    0
DCB    0
DCB 0xE1
DCB    4
DCB    0
DCB    0
DCB 0xEB
DCB    4
DCB    0
DCB    0
DCB 0xFD
DCB    4
DCB    0
DCB    0
DCB 0xFF
DCB    4
DCB    0
DCB    0
DCB    3
DCB    5
DCB    0
DCB    0
DCB    9
DCB    5
DCB    0
DCB    0
DCB  0xB
DCB    5
DCB    0
DCB    0
DCB 0x11
DCB    5
DCB    0
DCB    0
DCB 0x15
DCB    5
DCB    0
DCB    0
DCB 0x17
DCB    5
DCB    0
DCB    0
DCB 0x1B
DCB    5
DCB    0
DCB    0
DCB 0x27 ; '
DCB    5
DCB    0
DCB    0
DCB 0x29 ; )
DCB    5
DCB    0
DCB    0
DCB 0x2F ; /
DCB    5
DCB    0
DCB    0
DCB 0x51 ; Q
DCB    5
DCB    0
DCB    0
DCB 0x57 ; W
DCB    5
DCB    0
DCB    0
DCB 0x5D ; ]
DCB    5
DCB    0
DCB    0
DCB 0x65 ; e
DCB    5
DCB    0
DCB    0
DCB 0x77 ; w
DCB    5
DCB    0
DCB    0
DCB 0x81
DCB    5
DCB    0
DCB    0
DCB 0x8F
DCB    5
DCB    0
DCB    0
DCB 0x93
DCB    5
DCB    0
DCB    0
DCB 0x95
DCB    5
DCB    0
DCB    0
DCB 0x99
DCB    5
DCB    0
DCB    0
DCB 0x9F
DCB    5
DCB    0
DCB    0
DCB 0xA7
DCB    5
DCB    0
DCB    0
DCB 0xAB
DCB    5
DCB    0
DCB    0
DCB 0xAD
DCB    5
DCB    0
DCB    0
DCB 0xB3
DCB    5
DCB    0
DCB    0
DCB 0xBF
DCB    5
DCB    0
DCB    0
DCB 0xC9
DCB    5
DCB    0
DCB    0
DCB 0xCB
DCB    5
DCB    0
DCB    0
DCB 0xCF
DCB    5
DCB    0
DCB    0
DCB 0xD1
DCB    5
DCB    0
DCB    0
DCB 0xD5
DCB    5
DCB    0
DCB    0
DCB 0xDB
DCB    5
DCB    0
DCB    0
DCB 0xE7
DCB    5
DCB    0
DCB    0
DCB 0xF3
DCB    5
DCB    0
DCB    0
DCB 0xFB
DCB    5
DCB    0
DCB    0
DCB    7
DCB    6
DCB    0
DCB    0
DCB  0xD
DCB    6
DCB    0
DCB    0
DCB 0x11
DCB    6
DCB    0
DCB    0
DCB 0x17
DCB    6
DCB    0
DCB    0
DCB 0x1F
DCB    6
DCB    0
DCB    0
DCB 0x23 ; #
DCB    6
DCB    0
DCB    0
DCB 0x2B ; +
DCB    6
DCB    0
DCB    0
DCB 0x2F ; /
DCB    6
DCB    0
DCB    0
DCB 0x3D ; =
DCB    6
DCB    0
DCB    0
DCB 0x41 ; A
DCB    6
DCB    0
DCB    0
DCB 0x47 ; G
DCB    6
DCB    0
DCB    0
DCB 0x49 ; I
DCB    6
DCB    0
DCB    0
DCB 0x4D ; M
DCB    6
DCB    0
DCB    0
dword_3B0AC DCD 0x653
a0123456789abcd DCB "0123456789ABCDEFGHIJKLMNOPQRSTUVWX"
DCB "YZabcdefghijklmnopqrstuvwxyz+/",0
ALIGN 4
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x3B0F4
unk_3B0F4 DCB 0x7C ; |
DCB 0x6F ; o
DCB 0xFD
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x3B0FC
ALIGN 0x10
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x4BF00
off_4BF00 DCD sub_1212C+1
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x4BF04
off_4BF04 DCD sub_12114+1
; .fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x4BF08
stru_4BF08 Elf32_Dyn <1, <1>> ; DT_NEEDED libutil.so.1
Elf32_Dyn <1, <0x70>>   ; DT_NEEDED libcrypt.so.1
Elf32_Dyn <1, <0x84>>   ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x1192C>> ; DT_INIT
Elf32_Dyn <0xD, <0x34FB8>> ; DT_FINI
Elf32_Dyn <0x19, <0x4BF00>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x4BF04>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x101B4>> ; DT_HASH
Elf32_Dyn <5, <0x10EA4>> ; DT_STRTAB
Elf32_Dyn <6, <0x105F4>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0x4A8>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x4C000>> ; DT_PLTGOT
Elf32_Dyn <2, <0x428>>  ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x11504>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x114E4>> ; DT_REL
Elf32_Dyn <0x12, <0x20>> ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x11464>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <3>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x1134C>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x40
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x4C000
_GLOBAL_OFFSET_TABLE_ DCD stru_4BF08
DCD 0
off_4C008 DCD 0
calloc_ptr DCD __imp_calloc
login_ptr DCD __imp_login
raise_ptr DCD __imp_raise
getpwnam_ptr DCD __imp_getpwnam
fsync_ptr DCD __imp_fsync
strcmp_ptr DCD __imp_strcmp
getpwuid_ptr DCD __imp_getpwuid
setsockopt_ptr DCD __imp_setsockopt
clearenv_ptr DCD __imp_clearenv
printf_ptr DCD __imp_printf
getusershell_ptr DCD __imp_getusershell
setrlimit64_ptr DCD __imp_setrlimit64
read_ptr DCD __imp_read
getuid_ptr DCD __imp_getuid
getspnam_ptr DCD __imp_getspnam
memmove_ptr DCD __imp_memmove
free_ptr DCD __imp_free
gai_strerror_ptr DCD __imp_gai_strerror
fgets_ptr DCD __imp_fgets
_exit_ptr DCD __imp__exit
memcpy_ptr DCD __imp_memcpy
endusershell_ptr DCD __imp_endusershell
signal_ptr DCD __imp_signal
time_ptr DCD __imp_time
rmdir_ptr DCD __imp_rmdir
memcmp_ptr DCD __imp_memcmp
inet_ntoa_ptr DCD __imp_inet_ntoa
select_ptr DCD __imp_select
strdup_ptr DCD __imp_strdup
unlink_ptr DCD __imp_unlink
dup2_ptr DCD __imp_dup2
realloc_ptr DCD __imp_realloc
initgroups_ptr DCD __imp_initgroups
chdir_ptr DCD __imp_chdir
geteuid_ptr DCD __imp_geteuid
accept_ptr DCD __imp_accept
seteuid_ptr DCD __imp_seteuid
sigaction_ptr DCD __imp_sigaction
fwrite_ptr DCD __imp_fwrite
strcat_ptr DCD __imp_strcat
getsockopt_ptr DCD __imp_getsockopt
ioctl_ptr DCD __imp_ioctl
usleep_ptr DCD __imp_usleep
waitpid_ptr DCD __imp_waitpid
tcsetattr_ptr DCD __imp_tcsetattr
strcpy_ptr DCD __imp_strcpy
gettimeofday_ptr DCD __imp_gettimeofday
daemon_ptr DCD __imp_daemon
gethostname_ptr DCD __imp_gethostname
open64_ptr DCD __imp_open64
puts_ptr DCD __imp_puts
setgid_ptr DCD __imp_setgid
malloc_ptr DCD __imp_malloc
__libc_start_main_ptr DCD __imp___libc_start_main
strerror_ptr DCD __imp_strerror
strftime_ptr DCD __imp_strftime
localtime_ptr DCD __imp_localtime
dirname_ptr DCD __imp_dirname
__ctype_toupper_loc_ptr DCD __imp___ctype_toupper_loc
__gmon_start___ptr DCD __imp___gmon_start__
openpty_ptr DCD __imp_openpty
clock_ptr DCD __imp_clock
kill_ptr DCD __imp_kill
__ctype_b_loc_ptr DCD __imp___ctype_b_loc
getpid_ptr DCD __imp_getpid
exit_ptr DCD __imp_exit
syscall_ptr DCD __imp_syscall
strtoul_ptr DCD __imp_strtoul
ttyname_ptr DCD __imp_ttyname
strlen_ptr DCD __imp_strlen
setsid_ptr DCD __imp_setsid
strchr_ptr DCD __imp_strchr
atol_ptr DCD __imp_atol
fprintf_ptr DCD __imp_fprintf
chown_ptr DCD __imp_chown
fcntl_ptr DCD __imp_fcntl
execv_ptr DCD __imp_execv
__errno_location_ptr DCD __imp___errno_location
strncasecmp_ptr DCD __imp_strncasecmp
snprintf_ptr DCD __imp_snprintf
__isoc99_sscanf_ptr DCD __imp___isoc99_sscanf
mkdir_ptr DCD __imp_mkdir
bind_ptr DCD __imp_bind
getgid_ptr DCD __imp_getgid
getgrouplist_ptr DCD __imp_getgrouplist
memset_ptr DCD __imp_memset
strncpy_ptr DCD __imp_strncpy
__xpg_basename_ptr DCD __imp___xpg_basename
setusershell_ptr DCD __imp_setusershell
fgetc_ptr DCD __imp_fgetc
link_ptr DCD __imp_link
write_ptr DCD __imp_write
rand_ptr DCD __imp_rand
setegid_ptr DCD __imp_setegid
writev_ptr DCD __imp_writev
fclose_ptr DCD __imp_fclose
pipe_ptr DCD __imp_pipe
shutdown_ptr DCD __imp_shutdown
sigemptyset_ptr DCD __imp_sigemptyset
popen_ptr DCD __imp_popen
logout_ptr DCD __imp_logout
fork_ptr DCD __imp_fork
putenv_ptr DCD __imp_putenv
getnameinfo_ptr DCD __imp_getnameinfo
strrchr_ptr DCD __imp_strrchr
listen_ptr DCD __imp_listen
crypt_ptr DCD __imp_crypt
fputc_ptr DCD __imp_fputc
syslog_ptr DCD __imp_syslog
setuid_ptr DCD __imp_setuid
openlog_ptr DCD __imp_openlog
getsockname_ptr DCD __imp_getsockname
vsnprintf_ptr DCD __imp_vsnprintf
atoi_ptr DCD __imp_atoi
fopen64_ptr DCD __imp_fopen64
getpeername_ptr DCD __imp_getpeername
explicit_bzero_ptr DCD __imp_explicit_bzero
freeaddrinfo_ptr DCD __imp_freeaddrinfo
getaddrinfo_ptr DCD __imp_getaddrinfo
socket_ptr DCD __imp_socket
umask_ptr DCD __imp_umask
chmod_ptr DCD __imp_chmod
__xstat64_ptr DCD __imp___xstat64
fputs_ptr DCD __imp_fputs
strncmp_ptr DCD __imp_strncmp
abort_ptr DCD __imp_abort
logwtmp_ptr DCD __imp_logwtmp
close_ptr DCD __imp_close
connect_ptr DCD __imp_connect
getgrnam_ptr DCD __imp_getgrnam
__assert_fail_ptr DCD __imp___assert_fail
tcgetattr_ptr DCD __imp_tcgetattr
pclose_ptr DCD __imp_pclose
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x4C224
ALIGN 8
DCB    0
DCB    0
DCB    0
DCB    0
off_4C22C DCD aCurve25519Sha2 ; "curve25519-sha256"
DCB    0
DCB    0
DCB    0
DCB    0
off_4C234 DCD unk_352C0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x16
DCB 0x54 ; T
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC0
DCB 0x52 ; R
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x33 ; 3
DCB 0x54 ; T
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD4
DCB 0x52 ; R
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x46 ; F
DCB 0x54 ; T
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x52 ; R
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x59 ; Y
DCB 0x54 ; T
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x52 ; R
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x6C ; l
DCB 0x54 ; T
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB 0x53 ; S
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x8A
DCB 0x54 ; T
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x24 ; $
DCB 0x53 ; S
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x98
DCB 0x53 ; S
DCB    3
DCB    0
DCB 0x63 ; c
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_4C2E0 DCD aEcdsaSha2Nistp ; "ecdsa-sha2-nistp256"
byte_4C2E4 DCB 1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBA
DCB 0x54 ; T
DCB    3
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xCE
DCB 0x54 ; T
DCB    3
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE2
DCB 0x54 ; T
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_4C344 DCD aNone     ; "none"
ALIGN 0x10
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_4C36C DCD aHmacSha1 ; "hmac-sha1"
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x53 ; S
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF9
DCB 0x54 ; T
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0x53 ; S
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_4C3A8 DCD aNoneAes128Ctr+5 ; "aes128-ctr"
ALIGN 0x10
DCD unk_35380
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x5C ; \
DCB 0x53 ; S
DCB    3
DCB    0
DCB    7
DCB 0x55 ; U
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x8C
DCB 0x53 ; S
DCB    3
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x5C ; \
DCB 0x53 ; S
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
dword_4C3E4 DCD 0xFFFFFFFF
; int (__fastcall *off_4C3E8)(int a1, char *format, __gnuc_va_list arg)
off_4C3E8 DCD sub_18430
; void (__fastcall __noreturn *off_4C3EC)(int a1, const char *a2, void *a3)
off_4C3EC DCD sub_183E4
dword_4C3F0 DCD 0xFFFFFFFE
off_4C3F4 DCD unk_4C424
DCD unk_4C414
DCD unk_4C404
DCB    0
DCB    0
DCB    0
DCB    0
unk_4C404 DCB 0x42 ; B
DCB    0
DCB    0
DCB    0
dword_4C408 DCD 0
DCD off_39AC0           ; "sha512"
DCD aEcdsaSha2Nistp_1+0xB ; "nistp521"
unk_4C414 DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
dword_4C418 DCD 0
DCD off_397B8           ; "sha384"
DCD aEcdsaSha2Nistp_0+0xB ; "nistp384"
unk_4C424 DCB 0x20
DCB    0
DCB    0
DCB    0
dword_4C428 DCD 0
DCD off_39734           ; "sha256"
DCD aEcdsaSha2Nistp+0xB ; "nistp256"
off_4C434 DCD unk_3739C
DCD unk_380A0
ALIGN 0x10
off_4C440 DCD a0123456789abcd ; "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabc"...
; .data ends


; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x4C444
unk_4C444 % 1
% 1
% 1
% 1
; LOAD ends


; Segment type: Uninitialized
AREA .bss, DATA, ALIGN=3
; ORG 0x4C448
EXPORT stderr
stderr % 4              ; Copy of shared data
ALIGN 0x10
EXPORT stdin
stdin % 4               ; Copy of shared data
EXPORT stdout
stdout % 4              ; Copy of shared data
byte_4C458 % 1
ALIGN 4
dword_4C45C % 4
; char byte_4C460[20]
byte_4C460 % 0x14
dword_4C474 % 4
dword_4C478 % 4
; _DWORD dword_4C47C[130]
dword_4C47C % 0x208
dword_4C684 % 4
dword_4C688 % 4
; int (__fastcall *off_4C68C)(_DWORD)
off_4C68C % 4
% 1
% 1
% 1
% 1
; int (__fastcall *off_4C694)(_DWORD)
off_4C694 % 4
% 1
% 1
% 1
% 1
; int (__fastcall *off_4C69C)(_DWORD, _DWORD)
off_4C69C % 4
; int (__fastcall *off_4C6A0)(_DWORD, _DWORD)
off_4C6A0 % 4
ALIGN 8
; int (__fastcall *off_4C6A8)(_DWORD, _DWORD)
off_4C6A8 % 4
; int (__fastcall *off_4C6AC)(_DWORD)
off_4C6AC % 4
; int (__fastcall *off_4C6B0)(_DWORD, _DWORD)
off_4C6B0 % 4
; int (__fastcall *off_4C6B4)(_DWORD)
off_4C6B4 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; int (__fastcall *off_4C6C4)(_DWORD, _DWORD, _DWORD)
off_4C6C4 % 4
% 1
% 1
% 1
% 1
; int (__fastcall *off_4C6CC)(_DWORD)
off_4C6CC % 4
; int (__fastcall *off_4C6D0)(_DWORD, _DWORD)
off_4C6D0 % 4
; int (__fastcall *off_4C6D4)(_DWORD, _DWORD, _DWORD)
off_4C6D4 % 4
; int (__fastcall *off_4C6D8)(_DWORD, _DWORD)
off_4C6D8 % 4
ALIGN 0x10
; int (__fastcall *off_4C6E0)(_DWORD, _DWORD)
off_4C6E0 % 4
ALIGN 8
; int (__fastcall *off_4C6E8)(_DWORD, _DWORD)
off_4C6E8 % 4
ALIGN 0x10
; int (__fastcall *off_4C6F0)(_DWORD, _DWORD)
off_4C6F0 % 4
; int (__fastcall *off_4C6F4)(_DWORD, _DWORD, _DWORD)
off_4C6F4 % 4
; int (__fastcall *off_4C6F8)(_DWORD)
off_4C6F8 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; int (__fastcall *off_4C708)(_DWORD, _DWORD, _DWORD, _DWORD)
off_4C708 % 4
ALIGN 0x10
; int (__fastcall *off_4C710)(_DWORD, _DWORD)
off_4C710 % 4
; int (__fastcall *off_4C714)(_DWORD, _DWORD)
off_4C714 % 4
; int (__fastcall *off_4C718)(_DWORD, _DWORD)
off_4C718 % 4
; int (__fastcall *off_4C71C)(_DWORD, _DWORD, _DWORD)
off_4C71C % 4
; int (__fastcall *off_4C720)(_DWORD)
off_4C720 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; int (__fastcall *off_4C72C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD)
off_4C72C % 4
; int (__fastcall *off_4C730)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD)
off_4C730 % 4
; int (__fastcall *off_4C734)(_DWORD, _DWORD, _DWORD, _DWORD)
off_4C734 % 4
; int (__fastcall *off_4C738)(_DWORD, _DWORD, _DWORD)
off_4C738 % 4
off_4C73C % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; _DWORD dword_4C754[130]
dword_4C754 % 0x208
; _DWORD dword_4C95C[50]
dword_4C95C % 0xC8
dword_4CA24 % 4
dword_4CA28 % 4
dword_4CA2C % 4
dword_4CA30 % 4
dword_4CA34 % 4
dword_4CA38 % 4
dword_4CA3C % 4
byte_4CA40 % 1
ALIGN 4
dword_4CA44 % 4
dword_4CA48 % 4
dword_4CA4C % 4
dword_4CA50 % 4
dword_4CA54 % 4
dword_4CA58 % 4
; int dword_4CA5C[3]
dword_4CA5C % 0xC
dword_4CA68 % 4
dword_4CA6C % 4
dword_4CA70 % 4
dword_4CA74 % 4
dword_4CA78 % 4
dword_4CA7C % 4
dword_4CA80 % 4
byte_4CA84 % 1
byte_4CA85 % 1
byte_4CA86 % 1
byte_4CA87 % 1
; int pipedes[2]
pipedes % 4
dword_4CA8C % 4
dword_4CA90 % 4
dword_4CA94 % 4
% 1
% 1
% 1
% 1
dword_4CA9C % 4
dword_4CAA0 % 4
dword_4CAA4 % 4
dword_4CAA8 % 4
byte_4CAAC % 1
ALIGN 0x10
dword_4CAB0 % 4
dword_4CAB4 % 4
dword_4CAB8 % 4
dword_4CABC % 4
dword_4CAC0 % 4
dword_4CAC4 % 4
dword_4CAC8 % 4
dword_4CACC % 4
dword_4CAD0 % 4
dword_4CAD4 % 4
dword_4CAD8 % 4
dword_4CADC % 4
dword_4CAE0 % 4
; int (*off_4CAE4)(void)
off_4CAE4 % 4
off_4CAE8 % 4
off_4CAEC % 4
dword_4CAF0 % 4
byte_4CAF4 % 1
ALIGN 4
dword_4CAF8 % 4
dword_4CAFC % 4
dword_4CB00 % 4
dword_4CB04 % 4
dword_4CB08 % 4
dword_4CB0C % 4
dword_4CB10 % 4
dword_4CB14 % 4
dword_4CB18 % 4
dword_4CB1C % 4
dword_4CB20 % 4
dword_4CB24 % 4
dword_4CB28 % 4
dword_4CB2C % 4
dword_4CB30 % 4
dword_4CB34 % 4
dword_4CB38 % 4
dword_4CB3C % 4
dword_4CB40 % 4
dword_4CB44 % 4
dword_4CB48 % 4
; int dword_4CB4C[]
dword_4CB4C % 4
dword_4CB50 % 4
dword_4CB54 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_4CB78 % 1
% 1
% 1
% 1
dword_4CB7C % 4
dword_4CB80 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_4CBA8 % 4
dword_4CBAC % 4
dword_4CBB0 % 4
dword_4CBB4 % 4
dword_4CBB8 % 4
dword_4CBBC % 4
dword_4CBC0 % 4
dword_4CBC4 % 4
dword_4CBC8 % 4
dword_4CBCC % 4
dword_4CBD0 % 4
dword_4CBD4 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_4CBE4 % 4
dword_4CBE8 % 4
dword_4CBEC % 4
dword_4CBF0 % 4
dword_4CBF4 % 4
dword_4CBF8 % 4
dword_4CBFC % 4
dword_4CC00 % 4
algn_4CC04 ALIGN 0x10
dword_4CC10 % 4
dword_4CC14 % 4
; .bss ends


; Segment type: Externs
; void *calloc(size_t nmemb, size_t size)
IMPORT __imp_calloc
; void login(const struct utmp *entry)
IMPORT __imp_login
; int raise(int sig)
IMPORT __imp_raise
; struct passwd *getpwnam(const char *name)
IMPORT __imp_getpwnam
; int fsync(int fd)
IMPORT __imp_fsync
; int strcmp(const char *s1, const char *s2)
IMPORT __imp_strcmp
; struct passwd *getpwuid(__uid_t uid)
IMPORT __imp_getpwuid
; int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen)
IMPORT __imp_setsockopt
; int clearenv(void)
IMPORT __imp_clearenv
; int printf(const char *format, ...)
IMPORT __imp_printf
; char *getusershell(void)
IMPORT __imp_getusershell
IMPORT __imp_setrlimit64
; ssize_t read(int fd, void *buf, size_t nbytes)
IMPORT __imp_read
; __uid_t getuid(void)
IMPORT __imp_getuid
; struct spwd *getspnam(const char *name)
IMPORT __imp_getspnam
; void *memmove(void *dest, const void *src, size_t n)
IMPORT __imp_memmove
; void free(void *ptr)
IMPORT __imp_free
; const char *gai_strerror(int ecode)
IMPORT __imp_gai_strerror
; char *fgets(char *s, int n, FILE *stream)
IMPORT __imp_fgets
; void _exit(int status)
IMPORT __imp__exit
; void *memcpy(void *dest, const void *src, size_t n)
IMPORT __imp_memcpy
; void endusershell(void)
IMPORT __imp_endusershell
; __sighandler_t signal(int sig, __sighandler_t handler)
IMPORT __imp_signal
; time_t time(time_t *timer)
IMPORT __imp_time
; int rmdir(const char *path)
IMPORT __imp_rmdir
; int memcmp(const void *s1, const void *s2, size_t n)
IMPORT __imp_memcmp
; char *inet_ntoa(struct in_addr in)
IMPORT __imp_inet_ntoa
; int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)
IMPORT __imp_select
; char *strdup(const char *s)
IMPORT __imp_strdup
; int unlink(const char *name)
IMPORT __imp_unlink
; int dup2(int fd, int fd2)
IMPORT __imp_dup2
; void *realloc(void *ptr, size_t size)
IMPORT __imp_realloc
; int initgroups(const char *, __gid_t group)
IMPORT __imp_initgroups
; int chdir(const char *path)
IMPORT __imp_chdir
; __uid_t geteuid(void)
IMPORT __imp_geteuid
; int accept(int fd, struct sockaddr *addr, socklen_t *addr_len)
IMPORT __imp_accept
; int seteuid(__uid_t uid)
IMPORT __imp_seteuid
; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
IMPORT __imp_sigaction
; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
IMPORT __imp_fwrite
; char *strcat(char *dest, const char *src)
IMPORT __imp_strcat
; int getsockopt(int fd, int level, int optname, void *optval, socklen_t *optlen)
IMPORT __imp_getsockopt
; int ioctl(int fd, unsigned int request, ...)
IMPORT __imp_ioctl
; int usleep(__useconds_t useconds)
IMPORT __imp_usleep
; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
IMPORT __imp_waitpid
; int tcsetattr(int fd, int optional_actions, const struct termios *termios_p)
IMPORT __imp_tcsetattr
; char *strcpy(char *dest, const char *src)
IMPORT __imp_strcpy
; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
IMPORT __imp_gettimeofday
; int daemon(int nochdir, int noclose)
IMPORT __imp_daemon
; int gethostname(char *name, size_t len)
IMPORT __imp_gethostname
IMPORT __imp_open64
; int puts(const char *s)
IMPORT __imp_puts
; int setgid(__gid_t gid)
IMPORT __imp_setgid
; void *malloc(size_t size)
IMPORT __imp_malloc
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; char *strerror(int errnum)
IMPORT __imp_strerror
; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
IMPORT __imp_strftime
; struct tm *localtime(const time_t *timer)
IMPORT __imp_localtime
; char *dirname(char *path)
IMPORT __imp_dirname
; const __int32_t **__ctype_toupper_loc(void)
IMPORT __imp___ctype_toupper_loc
; int openpty(int *amaster, int *aslave, char *name, struct termios *termp, struct winsize *winp)
IMPORT __imp_openpty
; clock_t clock(void)
IMPORT __imp_clock
; int kill(__pid_t pid, int sig)
IMPORT __imp_kill
; const unsigned __int16 **__ctype_b_loc(void)
IMPORT __imp___ctype_b_loc
; __pid_t getpid(void)
IMPORT __imp_getpid
; void exit(int status)
IMPORT __imp_exit
; int syscall(int sysno, ...)
IMPORT __imp_syscall
; unsigned int strtoul(const char *nptr, char **endptr, int base)
IMPORT __imp_strtoul
; char *ttyname(int fd)
IMPORT __imp_ttyname
; size_t strlen(const char *s)
IMPORT __imp_strlen
; __pid_t setsid(void)
IMPORT __imp_setsid
; char *strchr(const char *s, int c)
IMPORT __imp_strchr
; int atol(const char *nptr)
IMPORT __imp_atol
; int fprintf(FILE *stream, const char *format, ...)
IMPORT __imp_fprintf
; int chown(const char *file, __uid_t owner, __gid_t group)
IMPORT __imp_chown
; int fcntl(int fd, int cmd, ...)
IMPORT __imp_fcntl
; int execv(const char *path, char *const argv[])
IMPORT __imp_execv
; int *__errno_location(void)
IMPORT __imp___errno_location
; int strncasecmp(const char *s1, const char *s2, size_t n)
IMPORT __imp_strncasecmp
; int snprintf(char *s, size_t maxlen, const char *format, ...)
IMPORT __imp_snprintf
IMPORT __imp___isoc99_sscanf
; int mkdir(const char *path, __mode_t mode)
IMPORT __imp_mkdir
; int bind(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_bind
; __gid_t getgid(void)
IMPORT __imp_getgid
; int getgrouplist(const char *, __gid_t group, __gid_t *groups, int *ngroups)
IMPORT __imp_getgrouplist
; void *memset(void *s, int c, size_t n)
IMPORT __imp_memset
; char *strncpy(char *dest, const char *src, size_t n)
IMPORT __imp_strncpy
; char *__xpg_basename(char *path)
IMPORT __imp___xpg_basename
; void setusershell(void)
IMPORT __imp_setusershell
; int fgetc(FILE *stream)
IMPORT __imp_fgetc
; int link(const char *from, const char *to)
IMPORT __imp_link
; ssize_t write(int fd, const void *buf, size_t n)
IMPORT __imp_write
; int rand(void)
IMPORT __imp_rand
; int setegid(__gid_t gid)
IMPORT __imp_setegid
; ssize_t writev(int fd, const struct iovec *iovec, int count)
IMPORT __imp_writev
; int fclose(FILE *stream)
IMPORT __imp_fclose
; int pipe(int pipedes[2])
IMPORT __imp_pipe
; int shutdown(int fd, int how)
IMPORT __imp_shutdown
; int sigemptyset(sigset_t *set)
IMPORT __imp_sigemptyset
; FILE *popen(const char *command, const char *modes)
IMPORT __imp_popen
; int logout(const char *ut_line)
IMPORT __imp_logout
; __pid_t fork(void)
IMPORT __imp_fork
; int putenv(char *string)
IMPORT __imp_putenv
; int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, socklen_t hostlen, char *serv, socklen_t servlen, unsigned int flags)
IMPORT __imp_getnameinfo
; char *strrchr(const char *s, int c)
IMPORT __imp_strrchr
; int listen(int fd, int n)
IMPORT __imp_listen
; char *crypt(const char *key, const char *salt)
IMPORT __imp_crypt
; int fputc(int c, FILE *stream)
IMPORT __imp_fputc
; void syslog(int pri, const char *fmt, ...)
IMPORT __imp_syslog
; int setuid(__uid_t uid)
IMPORT __imp_setuid
; void openlog(const char *ident, int option, int facility)
IMPORT __imp_openlog
; int getsockname(int fd, struct sockaddr *addr, socklen_t *len)
IMPORT __imp_getsockname
; int vsnprintf(char *s, size_t maxlen, const char *format, __gnuc_va_list arg)
IMPORT __imp_vsnprintf
; int atoi(const char *nptr)
IMPORT __imp_atoi
IMPORT __imp_fopen64
; int getpeername(int fd, struct sockaddr *addr, socklen_t *len)
IMPORT __imp_getpeername
IMPORT __imp_explicit_bzero
; void freeaddrinfo(struct addrinfo *ai)
IMPORT __imp_freeaddrinfo
; int getaddrinfo(const char *name, const char *service, const struct addrinfo *req, struct addrinfo **pai)
IMPORT __imp_getaddrinfo
; int socket(int domain, int type, int protocol)
IMPORT __imp_socket
; __mode_t umask(__mode_t mask)
IMPORT __imp_umask
; int chmod(const char *file, __mode_t mode)
IMPORT __imp_chmod
IMPORT __imp___xstat64
; int fputs(const char *s, FILE *stream)
IMPORT __imp_fputs
; int strncmp(const char *s1, const char *s2, size_t n)
IMPORT __imp_strncmp
; void abort(void)
IMPORT __imp_abort
; void logwtmp(const char *ut_line, const char *ut_name, const char *ut_host)
IMPORT __imp_logwtmp
; int close(int fd)
IMPORT __imp_close
; int connect(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_connect
; struct group *getgrnam(const char *name)
IMPORT __imp_getgrnam
; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
IMPORT __imp___assert_fail
; int tcgetattr(int fd, struct termios *termios_p)
IMPORT __imp_tcgetattr
; int pclose(FILE *stream)
IMPORT __imp_pclose
IMPORT _ITM_deregisterTMCloneTable, WEAK
IMPORT __imp___gmon_start__, WEAK
IMPORT _ITM_registerTMCloneTable, WEAK

END start

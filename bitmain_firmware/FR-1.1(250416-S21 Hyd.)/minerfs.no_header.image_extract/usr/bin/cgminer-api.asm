;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 1B89C0E8E557F2426B4BDC8895D1395689128AA353B880D0680864BDCB53510E
; Input MD5    : 6AE07F00748B0A8134B423CE1F7EF6A4
; Input CRC32  : 3BA5A233
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/hashsource_antminer_S21x/bitmain_firmware/FR-1.1(250416-S21 Hyd.)/minerfs.no_header.image_extract/usr/bin/cgminer-api
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD start+1             ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x2194              ; SHT file offset
DCD 0x5000400           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 9                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x1A                ; Number of entries in SHT
DCW 0x19                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0xFC8               ; File offset
DCD unk_10FC8           ; Virtual address
DCD 0x10FC8             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x154               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x10154             ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0xFD4               ; Size in file image
DCD 0xFD4               ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0x1F10              ; File offset
DCD off_21F10           ; Virtual address
DCD 0x21F10             ; Physical address
DCD 0x164               ; Size in file image
DCD 0x174               ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0x1F18              ; File offset
DCD stru_21F18          ; Virtual address
DCD 0x21F18             ; Physical address
DCD 0xE8                ; Size in file image
DCD 0xE8                ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x170               ; File offset
DCD dword_10170         ; Virtual address
DCD 0x10170             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHT Entry 8
DCD 0x6474E552          ; Type: RO-AFTER
DCD 0x1F10              ; File offset
DCD off_21F10           ; Virtual address
DCD 0x21F10             ; Physical address
DCD 0xF0                ; Size in file image
DCD 0xF0                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10154
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10170 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 3, 2, 0          ; ABI: Linux 3.2.0
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0xFD, 0x57, 0xCE, 0x5E, 0x68, 0x3A, 0xF1 ; Desc
DCB 0x36, 0x2D, 0x39, 0x2F, 0xEC, 0xB0, 0x8A
DCB 0x2D, 0x41, 0xCA, 0x76, 0x52, 0x8C
; ELF Hash Table
elf_hash_nbucket DCD 0x11
elf_hash_nchain DCD 0x19
elf_hash_bucket DCD 0x11, 0, 0x12, 0x16, 0xE, 0, 0x15, 0xA
DCD 0x18, 0, 0x17, 0, 0xB, 0xF, 0x10, 0xC
DCD 0
elf_hash_chain DCD 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 6
DCD 5, 8, 3, 0, 2, 7, 0xD, 9, 0x13, 0, 0x14
DCD 0
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aStrcmp - byte_103F4, 0, 0, \ ; "strcmp"
           0x12, 0, 0>
Elf32_Sym <aStrtol - byte_103F4, 0, 0, \ ; "strtol"
           0x12, 0, 0>
Elf32_Sym <aSetsockopt - byte_103F4, 0, \ ; "setsockopt"
           0, 0x12, 0, 0>
Elf32_Sym <aFprintf+1 - byte_103F4, 0, \ ; "printf"
           0, 0x12, 0, 0>
Elf32_Sym <aRealloc - byte_103F4, 0, 0, \ ; "realloc"
           0x12, 0, 0>
Elf32_Sym <aRawmemchr - byte_103F4, 0, \ ; "__rawmemchr"
           0, 0x12, 0, 0>
Elf32_Sym <aStderr - byte_103F4, stderr,\ ; "stderr"
           4, 0x11, 0, 0x17>
Elf32_Sym <aPuts - byte_103F4, 0, 0, \ ; "puts"
           0x12, 0, 0>
Elf32_Sym <aMalloc - byte_103F4, 0, 0, \ ; "malloc"
           0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_103F4, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrerror - byte_103F4, 0, 0,\ ; "strerror"
           0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_103F4, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aCtypeBLoc - byte_103F4, 0, \ ; "__ctype_b_loc"
           0, 0x12, 0, 0>
Elf32_Sym <aStrlen - byte_103F4, 0, 0, \ ; "strlen"
           0x12, 0, 0>
Elf32_Sym <aStrchr - byte_103F4, 0, 0, \ ; "strchr"
           0x12, 0, 0>
Elf32_Sym <aFprintf - byte_103F4, 0, 0, \ ; "fprintf"
           0x12, 0, 0>
Elf32_Sym <aErrnoLocation - byte_103F4, \ ; "__errno_location"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSocket - byte_103F4, 0, 0, \ ; "socket"
           0x12, 0, 0>
Elf32_Sym <aGethostbyname - byte_103F4, \ ; "gethostbyname"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aAbort - byte_103F4, 0, 0, \ ; "abort"
           0x12, 0, 0>
Elf32_Sym <aRecv - byte_103F4, 0, 0, \ ; "recv"
           0x12, 0, 0>
Elf32_Sym <aClose - byte_103F4, 0, 0, \ ; "close"
           0x12, 0, 0>
Elf32_Sym <aSend - byte_103F4, 0, 0, \ ; "send"
           0x12, 0, 0>
Elf32_Sym <aConnect - byte_103F4, 0, 0, \ ; "connect"
           0x12, 0, 0>
; ELF String Table
byte_103F4 DCB 0
aLibcSo6 DCB "libc.so.6",0
aSocket DCB "socket",0
aRawmemchr DCB "__rawmemchr",0
aConnect DCB "connect",0
aPuts DCB "puts",0
aRealloc DCB "realloc",0
aAbort DCB "abort",0
aStrtol DCB "strtol",0
aStrlen DCB "strlen",0
aSend DCB "send",0
aErrnoLocation DCB "__errno_location",0
aRecv DCB "recv",0
aSetsockopt DCB "setsockopt",0
aMalloc DCB "malloc",0
aCtypeBLoc DCB "__ctype_b_loc",0
aStderr DCB "stderr",0
aGethostbyname DCB "gethostbyname",0
aClose DCB "close",0
aStrchr DCB "strchr",0
aFprintf DCB "fprintf",0
aStrcmp DCB "strcmp",0
aStrerror DCB "strerror",0
aLibcStartMain DCB "__libc_start_main",0
aGmonStart DCB "__gmon_start__",0
aGlibc24 DCB "GLIBC_2.4",0
DCB 0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; strcmp@@GLIBC_2.4
DCW 2                   ; strtol@@GLIBC_2.4
DCW 2                   ; setsockopt@@GLIBC_2.4
DCW 2                   ; printf@@GLIBC_2.4
DCW 2                   ; realloc@@GLIBC_2.4
DCW 2                   ; __rawmemchr@@GLIBC_2.4
DCW 2                   ; stderr@@GLIBC_2.4
DCW 2                   ; puts@@GLIBC_2.4
DCW 2                   ; malloc@@GLIBC_2.4
DCW 2                   ; __libc_start_main@@GLIBC_2.4
DCW 2                   ; strerror@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 2                   ; __ctype_b_loc@@GLIBC_2.4
DCW 2                   ; strlen@@GLIBC_2.4
DCW 2                   ; strchr@@GLIBC_2.4
DCW 2                   ; fprintf@@GLIBC_2.4
DCW 2                   ; __errno_location@@GLIBC_2.4
DCW 2                   ; socket@@GLIBC_2.4
DCW 2                   ; gethostbyname@@GLIBC_2.4
DCW 2                   ; abort@@GLIBC_2.4
DCW 2                   ; recv@@GLIBC_2.4
DCW 2                   ; close@@GLIBC_2.4
DCW 2                   ; send@@GLIBC_2.4
DCW 2                   ; connect@@GLIBC_2.4
DCW 0
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libc.so.6"
               aLibcSo6 - byte_103F4, \
               0x10, 0>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_103F4, 0>
; ELF REL Relocation Table
Elf32_Rel <0x22068, 0xC15> ; R_ARM_GLOB_DAT __gmon_start__
Elf32_Rel <0x22078, 0x714> ; R_ARM_COPY stderr
; ELF JMPREL Relocation Table
Elf32_Rel <0x2200C, 0x116> ; R_ARM_JUMP_SLOT strcmp
Elf32_Rel <0x22010, 0x216> ; R_ARM_JUMP_SLOT strtol
Elf32_Rel <0x22014, 0x316> ; R_ARM_JUMP_SLOT setsockopt
Elf32_Rel <0x22018, 0x416> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x2201C, 0x516> ; R_ARM_JUMP_SLOT realloc
Elf32_Rel <0x22020, 0x616> ; R_ARM_JUMP_SLOT __rawmemchr
Elf32_Rel <0x22024, 0x816> ; R_ARM_JUMP_SLOT puts
Elf32_Rel <0x22028, 0x916> ; R_ARM_JUMP_SLOT malloc
Elf32_Rel <0x2202C, 0xA16> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x22030, 0xB16> ; R_ARM_JUMP_SLOT strerror
Elf32_Rel <0x22034, 0xC16> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x22038, 0xD16> ; R_ARM_JUMP_SLOT __ctype_b_loc
Elf32_Rel <0x2203C, 0xE16> ; R_ARM_JUMP_SLOT strlen
Elf32_Rel <0x22040, 0xF16> ; R_ARM_JUMP_SLOT strchr
Elf32_Rel <0x22044, 0x1016> ; R_ARM_JUMP_SLOT fprintf
Elf32_Rel <0x22048, 0x1116> ; R_ARM_JUMP_SLOT __errno_location
Elf32_Rel <0x2204C, 0x1216> ; R_ARM_JUMP_SLOT socket
Elf32_Rel <0x22050, 0x1316> ; R_ARM_JUMP_SLOT gethostbyname
Elf32_Rel <0x22054, 0x1416> ; R_ARM_JUMP_SLOT abort
Elf32_Rel <0x22058, 0x1516> ; R_ARM_JUMP_SLOT recv
Elf32_Rel <0x2205C, 0x1616> ; R_ARM_JUMP_SLOT close
Elf32_Rel <0x22060, 0x1716> ; R_ARM_JUMP_SLOT send
Elf32_Rel <0x22064, 0x1816> ; R_ARM_JUMP_SLOT connect
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x105F8
CODE32



; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              sub_108F0
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x10604
CODE32



; void sub_10604()
sub_10604
PUSH            {LR}
LDR             LR, =(_GLOBAL_OFFSET_TABLE_ - 0x10614)
ADD             LR, PC, LR ; _GLOBAL_OFFSET_TABLE_
LDR             PC, [LR,#(off_22008 - 0x22000)]!
; End of function sub_10604

off_10614 DCD _GLOBAL_OFFSET_TABLE_ - 0x10614
; [0000000C BYTES: COLLAPSED FUNCTION strcmp]
; [0000000C BYTES: COLLAPSED FUNCTION strtol]
; [0000000C BYTES: COLLAPSED FUNCTION setsockopt]
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION realloc]
; [0000000C BYTES: COLLAPSED FUNCTION __rawmemchr]
; [0000000C BYTES: COLLAPSED FUNCTION puts]
; [0000000C BYTES: COLLAPSED FUNCTION malloc]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION strerror]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION __ctype_b_loc]
; [0000000C BYTES: COLLAPSED FUNCTION strlen]
; [0000000C BYTES: COLLAPSED FUNCTION strchr]
; [0000000C BYTES: COLLAPSED FUNCTION fprintf]
; [0000000C BYTES: COLLAPSED FUNCTION __errno_location]
; [0000000C BYTES: COLLAPSED FUNCTION socket]
; [0000000C BYTES: COLLAPSED FUNCTION gethostbyname]
; [0000000C BYTES: COLLAPSED FUNCTION abort]
; [0000000C BYTES: COLLAPSED FUNCTION recv]
; [0000000C BYTES: COLLAPSED FUNCTION close]
; [0000000C BYTES: COLLAPSED FUNCTION send]
; [0000000C BYTES: COLLAPSED FUNCTION connect]

; Segment type: Pure code
AREA .text, CODE
; ORG 0x1072C
CODE32



; int main(int, char **, char **)
main
CMP             R0, #1
PUSH            {R4-R8,LR}
BLE             loc_10840
LDR             R5, [R1,#4]
MOV             R4, R1
MOV             R6, R0
LDRB            R3, [R5]
CMP             R3, #0x2D ; '-'
BEQ             loc_107E0

loc_10750
MOVW            R1, #:lower16:aHelp ; "--help"
MOV             R0, R5  ; s1
MOVT            R1, #:upper16:aHelp ; "--help"
BL              strcmp
CMP             R0, #0
BEQ             loc_10878

loc_10768
MOV             R5, #1

loc_1076C
LDR             R0, [R4,R5,LSL#2]
ADD             R8, R5, #1
BL              sub_10980
LDRB            R3, [R0]
MOV             R7, #aSummary ; "summary"
MOV             R1, R5,LSL#2
CMP             R3, #0
MOVNE           R7, R0
CMP             R6, R8
BLE             loc_108B0
ADD             R4, R4, R1
ADD             R8, R5, #2
LDR             R0, [R4,#4]
MOVW            R5, #:lower16:a127001 ; "127.0.0.1"
BL              sub_10980
LDRB            R3, [R0]
MOVT            R5, #:upper16:a127001 ; "127.0.0.1"
CMP             R3, #0
MOVNE           R5, R0
CMP             R6, R8
BLE             loc_107D8
LDR             R0, [R4,#8]
BL              sub_10980
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_1089C

loc_107D8
MOVW            R2, #0xFBC
B               loc_10854

loc_107E0
LDRB            R7, [R5,#1]
CMP             R7, #0x3F ; '?'
BNE             loc_10864
LDRB            R3, [R5,#2]
CMP             R3, #0
BEQ             loc_10878

loc_107F8
MOVW            R1, #:lower16:aHelp ; "--help"
MOV             R0, R5  ; s1
MOVT            R1, #:upper16:aHelp ; "--help"
BL              strcmp
CMP             R0, #0
BEQ             loc_10878
CMP             R7, #0x6F ; 'o'
BNE             loc_10768
LDRB            R3, [R5,#2]
CMP             R3, #0
BNE             loc_10768
CMP             R6, #2
MOV             R3, #dword_22080
MOV             R2, #1
STR             R2, [R3]
MOVNE           R5, #2
BNE             loc_1076C

loc_10840
MOVW            R5, #:lower16:a127001 ; "127.0.0.1"
MOVW            R7, #:lower16:aSummary ; "summary"
MOVT            R5, #:upper16:a127001 ; "127.0.0.1"
MOVT            R7, #:upper16:aSummary ; "summary"
MOVW            R2, #0xFBC

loc_10854               ; name
MOV             R1, R5
MOV             R0, R7  ; int
POP             {R4-R8,LR}
B               sub_10B84

loc_10864
CMP             R7, #0x68 ; 'h'
BNE             loc_107F8
LDRB            R3, [R5,#2]
CMP             R3, #0
BNE             loc_10750

loc_10878
MOVW            R3, #:lower16:stderr
MOVW            R1, #:lower16:aUsageSCommandI ; "usAge: %s [command [ip/host [port]]]\n"
MOVT            R3, #:upper16:stderr
LDR             R2, [R4]
LDR             R0, [R3] ; stream
MOVT            R1, #:upper16:aUsageSCommandI ; "usAge: %s [command [ip/host [port]]]\n"
BL              fprintf
MOV             R0, #1
POP             {R4-R8,PC}

loc_1089C               ; base
MOV             R2, #0xA
MOV             R1, #0  ; endptr
BL              strtol
SXTH            R2, R0
B               loc_10854

loc_108B0
MOVW            R5, #:lower16:a127001 ; "127.0.0.1"
MOVW            R2, #0xFBC
MOVT            R5, #:upper16:a127001 ; "127.0.0.1"
B               loc_10854
; End of function main

CODE16


; Attributes: noreturn

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT start
start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(nullsub_1+1)
PUSH.W          {R12}   ; fini
LDR             R0, =main ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function start

off_108E4 DCD nullsub_1+1
off_108E8 DCD main
off_108EC DCD init+1
CODE32



; int sub_108F0()
sub_108F0
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x10900)
LDR             R2, =(__gmon_start___ptr_0 - 0x22000)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function sub_108F0

off_1090C DCD _GLOBAL_OFFSET_TABLE_ - 0x10900
off_10910 DCD __gmon_start___ptr_0 - 0x22000
CODE16



; void *sub_10914()
sub_10914
MOVW            R0, #:lower16:unk_22074
MOVW            R3, #:lower16:unk_22074
MOVT            R0, #:upper16:unk_22074
MOVT            R3, #:upper16:unk_22074
CMP             R3, R0
BEQ             locret_10934
MOV             R3, #0
CBZ             R3, locret_10934
BX              R3

locret_10934
BX              LR
; End of function sub_10914

ALIGN 4



; __int64 sub_10938()
sub_10938
MOVW            R0, #:lower16:unk_22074
MOVW            R1, #:lower16:unk_22074
MOVT            R0, #:upper16:unk_22074
MOVT            R1, #:upper16:unk_22074
SUBS            R1, R1, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_10960
MOV             R3, #0
CBZ             R3, locret_10960
BX              R3

locret_10960
BX              LR
; End of function sub_10938

ALIGN 4



; void *sub_10964()
sub_10964
PUSH            {R4,LR}
MOV             R4, #byte_2207C
LDRB            R3, [R4]
CBNZ            R3, locret_1097A
BL              sub_10914
MOVS            R3, #1
STRB            R3, [R4]

locret_1097A
POP             {R4,PC}
; End of function sub_10964



; Attributes: thunk

sub_1097C
B               sub_10938
; End of function sub_1097C

ALIGN 0x10
CODE32



; unsigned __int8 *__fastcall sub_10980(unsigned __int8 *)
sub_10980
PUSH            {R4-R6,LR}
MOV             R4, R0
BL              __ctype_b_loc
MOV             R6, R0
LDR             R2, [R0]
MOV             R0, R4

loc_10998
LDRB            R3, [R0]
MOV             R5, R0
ADD             R0, R0, #1
MOV             R3, R3,LSL#1
LDRH            R1, [R2,R3]
ANDS            R4, R1, #0x2000
BNE             loc_10998
MOV             R1, R4
MOV             R0, R5
BL              __rawmemchr
MOV             R1, R4
B               loc_109E0

loc_109C8
LDRB            R3, [R0,#-1]!
LDR             R2, [R6]
MOV             R3, R3,LSL#1
LDRH            R3, [R2,R3]
TST             R3, #0x2000
STRBNE          R1, [R0]

loc_109E0
CMP             R5, R0
BCC             loc_109C8
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_10980




; char *__fastcall sub_109F0(char *result)
sub_109F0

format= -8

PUSH            {R4-R11,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0xC
BEQ             loc_10A54
MOVW            R9, #:lower16:(aCouldnTGetHost+0x1C) ; ""
MOVW            R8, #:lower16:aSS ; "[%s%s] =>\n(\n"
MOVW            R3, #:lower16:aDS ; "   [%d] => %s\n"
MOVT            R9, #:upper16:(aCouldnTGetHost+0x1C) ; ""
MOVT            R8, #:upper16:aSS ; "[%s%s] =>\n(\n"
MOVT            R3, #:upper16:aDS ; "   [%d] => %s\n"
STR             R3, [SP,#0xC+format]

loc_10A1C               ; c
MOV             R1, #0x7C ; '|'
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_10A5C
MOV             R3, #0
ADD             R7, R0, #1
STRB            R3, [R0]
LDRB            R3, [R4]
CMP             R3, #0
MOVEQ           R4, R7
BNE             loc_10A6C

loc_10A4C
CMP             R7, #0
BNE             loc_10A1C

loc_10A54
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_10A5C
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_10A54
MOV             R7, R0

loc_10A6C
MOV             R6, #0
B               loc_10B10

loc_10A74
MOV             R3, #0
ADD             R5, R0, #1
STRB            R3, [R0]
LDRB            R3, [R4]
CMP             R3, #0
MOVEQ           R4, R5
BEQ             loc_10B04

loc_10A90               ; c
MOV             R1, #0x3D ; '='
MOV             R0, R4  ; s
BL              strchr
SUBS            R11, R0, #0
BEQ             loc_10B68
CMP             R6, #0
MOV             R3, #0
STRB            R3, [R11]
ADD             R10, R11, #1
BNE             loc_10B48
CMP             R10, R3
BEQ             loc_10B70
BL              __ctype_b_loc
LDRB            R2, [R11,#1]
MOV             R1, R4
LDR             R12, [R0]
MOV             R0, R8  ; format
MOV             R2, R2,LSL#1
LDRH            R2, [R12,R2]
TST             R2, #0x800
MOVNE           R2, R10
MOVEQ           R2, R9
BL              printf

loc_10AEC
MOV             R1, R4
MOVW            R0, #:lower16:aSS_0 ; "   [%s] => %s\n"
MOV             R4, R5
MOV             R2, R10
MOVT            R0, #:upper16:aSS_0 ; "   [%s] => %s\n"
BL              printf

loc_10B04
CMP             R5, #0
ADD             R6, R6, #1
BEQ             loc_10B34

loc_10B10               ; c
MOV             R1, #0x2C ; ','
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
BNE             loc_10A74
LDRB            R3, [R4]
CMP             R3, #0
MOVNE           R5, R0
BNE             loc_10A90

loc_10B34
MOVW            R0, #:lower16:asc_10ED8 ; ")"
MOV             R4, R7
MOVT            R0, #:upper16:asc_10ED8 ; ")"
BL              puts
B               loc_10A4C

loc_10B48
CMP             R10, #0
BNE             loc_10AEC

loc_10B50
MOV             R2, R4
MOV             R1, R6
LDR             R0, [SP,#0xC+format] ; format
MOV             R4, R5
BL              printf
B               loc_10B04

loc_10B68
CMP             R6, #0
BNE             loc_10B50

loc_10B70
MOV             R2, R9
MOV             R1, R4
MOV             R0, R8  ; format
BL              printf
B               loc_10B50
; End of function sub_109F0




; int __fastcall sub_10B84(const char *, char *name, unsigned int)
sub_10B84

optlen= -0x28
optval= -0x1C
var_18= -0x18
var_14= -0x14
addr= -0x10

PUSH            {R4-R10,LR}
MOV             R8, R0
SUB             SP, SP, #0x28
MOV             R0, R1  ; name
MOV             R4, R1
MOV             R5, R2
BL              gethostbyname
SUBS            R6, R0, #0
BEQ             loc_10D3C
MOV             R2, #0  ; protocol
MOV             R1, #1  ; type
MOV             R0, #2  ; domain
BL              socket
CMN             R0, #1
MOV             R7, R0
BEQ             loc_10D5C
MOV             R4, #0
REV16           R5, R5
STR             R4, [SP,#0x28+addr.sa_data+4]
MOV             R9, #2
STR             R4, [SP,#0x28+addr.sa_data+8]
MOV             R2, #0x10 ; len
STRH            R4, [SP,#0x28+addr.sa_data+0xC]
ADD             R1, SP, #0x28+addr ; addr
LDR             R3, [R6,#0x10]
STR             R4, [SP,#0x28+addr.sa_data]
STRH            R9, [SP,#0x28+addr]
LDR             R3, [R3]
LDR             R3, [R3]
STRH            R5, [SP,#0x28+addr.sa_data]
STR             R3, [SP,#0x28+addr.sa_data+2]
BL              connect
CMP             R0, R4
BLT             loc_10D88
MOV             R6, #4
MOV             R5, #1
MOV             R1, R5  ; level
ADD             R3, SP, #0x28+optval ; optval
MOV             R10, #5
MOV             R2, #9  ; optname
STR             R6, [SP,#0x28+optlen] ; optlen
MOV             R0, R7  ; fd
STR             R9, [SP,#0x28+var_14]
STR             R5, [SP,#0x28+optval]
STR             R10, [SP,#0x28+var_18]
BL              setsockopt
ADD             R3, SP, #0x28+optval ; optval
MOV             R2, R5  ; optname
MOV             R1, #6  ; level
STR             R6, [SP,#0x28+optlen] ; optlen
MOV             R0, R7  ; fd
BL              setsockopt
MOV             R2, #6  ; optname
ADD             R3, SP, #0x28+optval ; optval
MOV             R1, R2  ; level
STR             R6, [SP,#0x28+optlen] ; optlen
MOV             R0, R7  ; fd
BL              setsockopt
MOV             R2, R6  ; optname
ADD             R3, SP, #0x28+var_18 ; optval
MOV             R1, #6  ; level
STR             R6, [SP,#0x28+optlen] ; optlen
MOV             R0, R7  ; fd
BL              setsockopt
MOV             R2, R10 ; optname
ADD             R3, SP, #0x28+var_14 ; optval
MOV             R1, #6  ; level
STR             R6, [SP,#0x28+optlen] ; optlen
MOV             R0, R7  ; fd
BL              setsockopt
MOV             R0, R8  ; s
BL              strlen
MOV             R3, R4  ; flags
MOV             R2, R0  ; n
MOV             R1, R8  ; buf
MOV             R0, R7  ; fd
BL              send
CMP             R0, #0
BLT             loc_10E0C
MOV             R0, #0x10000 ; size
BL              malloc
SUBS            R9, R0, #0
MOVWNE          R6, #0xFFFF
MOVNE           R10, R6
BEQ             loc_10E48

loc_10CD8
ADD             R8, R9, R4
SUB             R2, R6, R4 ; n
MOV             R3, #0  ; flags
MOV             R1, R8  ; buf
MOV             R0, R7  ; fd
BL              recv
SUBS            R5, R0, #0
ADD             R4, R4, R5
BLT             loc_10DB4
BEQ             loc_10DD4
CMP             R6, R4
BNE             loc_10CD8
ADD             R5, R6, #0x10000
MOV             R0, R9  ; ptr
MOV             R1, R5  ; size
ADD             R6, R6, R10
BL              realloc
SUBS            R9, R0, #0
BNE             loc_10CD8
MOVW            R0, #:lower16:aErrOomD ; "Err: OOM (%d)\n"
MOV             R1, R5
MOVT            R0, #:upper16:aErrOomD ; "Err: OOM (%d)\n"
MOV             R5, #1
BL              printf
B               loc_10D50

loc_10D3C
MOVW            R0, #:lower16:aCouldnTGetHost ; "Couldn't get hostname: '%s'\n"
MOV             R1, R4
MOVT            R0, #:upper16:aCouldnTGetHost ; "Couldn't get hostname: '%s'\n"
MOV             R5, #1
BL              printf

loc_10D50
MOV             R0, R5
ADD             SP, SP, #0x28 ; '('
POP             {R4-R10,PC}

loc_10D5C
BL              __errno_location
LDR             R0, [R0] ; errnum
MOV             R5, #1
BL              strerror
MOV             R1, R0
MOV             R0, #aSocketInitiali ; "Socket initialisation failed: %s\n"
BL              printf
MOV             R0, R5
ADD             SP, SP, #0x28 ; '('
POP             {R4-R10,PC}

loc_10D88
BL              __errno_location
LDR             R0, [R0] ; errnum
MOV             R5, #1
BL              strerror
MOV             R1, R0
MOV             R0, #aSocketConnectF ; "Socket connect failed: %s\n"
BL              printf
MOV             R0, R5
ADD             SP, SP, #0x28 ; '('
POP             {R4-R10,PC}

loc_10DB4
BL              __errno_location
LDR             R0, [R0] ; errnum
MOV             R5, #1
BL              strerror
MOV             R1, R0
MOV             R0, #aRecvFailedS ; "Recv failed: %s\n"
BL              printf

loc_10DD4
MOVW            R3, #:lower16:dword_22080
MOV             R2, #0
MOVT            R3, #:upper16:dword_22080
STRB            R2, [R8]
LDR             R3, [R3]
CMP             R3, R2
BEQ             loc_10E2C
MOV             R0, R9  ; s
BL              puts

loc_10DF8               ; fd
MOV             R0, R7
BL              close
MOV             R0, R5
ADD             SP, SP, #0x28 ; '('
POP             {R4-R10,PC}

loc_10E0C
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R1, R0
MOV             R0, #aSendFailedS ; "Send failed: %s\n"
BL              printf
B               loc_10DF8

loc_10E2C
MOVW            R0, #:lower16:aReplyWasS ; "Reply was '%s'\n"
MOV             R1, R9
MOVT            R0, #:upper16:aReplyWasS ; "Reply was '%s'\n"
BL              printf
MOV             R0, R9
BL              sub_109F0
B               loc_10DF8

loc_10E48
MOVW            R0, #:lower16:aErrOomD ; "Err: OOM (%d)\n"
MOV             R1, #0x10000
MOVT            R0, #:upper16:aErrOomD ; "Err: OOM (%d)\n"
BL              printf
B               loc_10D50
; End of function sub_10B84

CODE16



; int __fastcall init(int, int, int)
init
PUSH.W          {R3-R9,LR}
MOV             R7, R0
LDR             R6, =(off_21F14 - 0x10E6E)
MOV             R8, R1
MOV             R9, R2
LDR             R5, =(off_21F10 - 0x10E74)
ADD             R6, PC  ; off_21F14
BLX             .init_proc
ADD             R5, PC  ; off_21F10
SUBS            R6, R6, R5
ASRS            R6, R6, #2
BEQ             locret_10E8C
MOVS            R4, #0

loc_10E7A
ADDS            R4, #1
LDR.W           R3, [R5],#4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R7
BLX             R3
CMP             R6, R4
BNE             loc_10E7A

locret_10E8C
POP.W           {R3-R9,PC}
; End of function init

off_10E90 DCD off_21F14 - 0x10E6E
off_10E94 DCD off_21F10 - 0x10E74
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
ALIGN 4
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x10E9C
CODE32



; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY
; ORG 0x10EA4
DCB    1
DCB    0
DCB    2
DCB    0
aSS DCB "[%s%s] =>",0xA
DCB "(",0xA,0
ALIGN 4
aSS_0 DCB "   [%s] => %s",0xA,0
ALIGN 4
aDS DCB "   [%d] => %s",0xA,0
ALIGN 4
asc_10ED8 DCB ")",0
ALIGN 4
aCouldnTGetHost DCB "Couldn't get hostname: '%s'",0xA,0
ALIGN 4
aSocketInitiali DCB "Socket initialisation failed: %s",0xA
DCB 0
ALIGN 0x10
aSocketConnectF DCB "Socket connect failed: %s",0xA,0
ALIGN 4
aSendFailedS DCB "Send failed: %s",0xA,0
ALIGN 0x10
aErrOomD DCB "Err: OOM (%d)",0xA,0
ALIGN 0x10
aRecvFailedS DCB "Recv failed: %s",0xA,0
ALIGN 4
aReplyWasS DCB "Reply was '%s'",0xA,0
aSummary DCB "summary",0
a127001 DCB "127.0.0.1",0
ALIGN 4
aHelp DCB "--help",0
ALIGN 0x10
aUsageSCommandI DCB "usAge: %s [command [ip/host [port]"
DCB "]]",0xA,0
ALIGN 4
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x10FC8
unk_10FC8 DCB 0xF8
DCB 0xF8
DCB 0xFF
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x10FD0
DCB    0
DCB    0
DCB    0
DCB    0
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x21F10
off_21F10 DCD sub_1097C+1
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x21F14
off_21F14 DCD sub_10964+1
; .fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x21F18
stru_21F18 Elf32_Dyn <1, <1>> ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x105F8>> ; DT_INIT
Elf32_Dyn <0xD, <0x10E9C>> ; DT_FINI
Elf32_Dyn <0x19, <0x21F10>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x21F14>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x101B4>> ; DT_HASH
Elf32_Dyn <5, <0x103F4>> ; DT_STRTAB
Elf32_Dyn <6, <0x10264>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0xE7>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x22000>> ; DT_PLTGOT
Elf32_Dyn <2, <0xB8>>   ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x10540>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x10530>> ; DT_REL
Elf32_Dyn <0x12, <0x10>> ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x10510>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <1>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x104DC>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x40
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x22000
_GLOBAL_OFFSET_TABLE_ DCD stru_21F18
DCD 0
off_22008 DCD 0
strcmp_ptr DCD __imp_strcmp
strtol_ptr DCD __imp_strtol
setsockopt_ptr DCD __imp_setsockopt
printf_ptr DCD __imp_printf
realloc_ptr DCD __imp_realloc
__rawmemchr_ptr DCD __imp___rawmemchr
puts_ptr DCD __imp_puts
malloc_ptr DCD __imp_malloc
__libc_start_main_ptr DCD __imp___libc_start_main
strerror_ptr DCD __imp_strerror
__gmon_start___ptr DCD __imp___gmon_start__
__ctype_b_loc_ptr DCD __imp___ctype_b_loc
strlen_ptr DCD __imp_strlen
strchr_ptr DCD __imp_strchr
fprintf_ptr DCD __imp_fprintf
__errno_location_ptr DCD __imp___errno_location
socket_ptr DCD __imp_socket
gethostbyname_ptr DCD __imp_gethostbyname
abort_ptr DCD __imp_abort
recv_ptr DCD __imp_recv
close_ptr DCD __imp_close
send_ptr DCD __imp_send
connect_ptr DCD __imp_connect
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x2206C
ALIGN 0x10
DCB    0
DCB    0
DCB    0
DCB    0
; .data ends


; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x22074
unk_22074 % 1
% 1
% 1
% 1
; LOAD ends


; Segment type: Uninitialized
AREA .bss, DATA, ALIGN=3
; ORG 0x22078
EXPORT stderr
stderr % 4              ; Copy of shared data
byte_2207C % 1
ALIGN 0x10
dword_22080 % 4
; .bss ends


; Segment type: Externs
; int strcmp(const char *s1, const char *s2)
IMPORT __imp_strcmp
; int strtol(const char *nptr, char **endptr, int base)
IMPORT __imp_strtol
; int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen)
IMPORT __imp_setsockopt
; int printf(const char *format, ...)
IMPORT __imp_printf
; void *realloc(void *ptr, size_t size)
IMPORT __imp_realloc
IMPORT __imp___rawmemchr
; int puts(const char *s)
IMPORT __imp_puts
; void *malloc(size_t size)
IMPORT __imp_malloc
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; char *strerror(int errnum)
IMPORT __imp_strerror
; const unsigned __int16 **__ctype_b_loc(void)
IMPORT __imp___ctype_b_loc
; size_t strlen(const char *s)
IMPORT __imp_strlen
; char *strchr(const char *s, int c)
IMPORT __imp_strchr
; int fprintf(FILE *stream, const char *format, ...)
IMPORT __imp_fprintf
; int *__errno_location(void)
IMPORT __imp___errno_location
; int socket(int domain, int type, int protocol)
IMPORT __imp_socket
; struct hostent *gethostbyname(const char *name)
IMPORT __imp_gethostbyname
; void abort(void)
IMPORT __imp_abort
; ssize_t recv(int fd, void *buf, size_t n, int flags)
IMPORT __imp_recv
; int close(int fd)
IMPORT __imp_close
; ssize_t send(int fd, const void *buf, size_t n, int flags)
IMPORT __imp_send
; int connect(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_connect
IMPORT __imp___gmon_start__, WEAK

END start

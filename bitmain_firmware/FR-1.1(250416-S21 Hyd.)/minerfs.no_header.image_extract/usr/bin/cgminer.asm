;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : FCB46E93052AB555E7C3A1C0CB2B36D3C6D8AF0622B97D45D7F0D8ACE0486DF8
; Input MD5    : 3BD8577667553627B7A06BD35B67ED1A
; Input CRC32  : B0673EE1
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/hashsource_antminer_S21x/bitmain_firmware/FR-1.1(250416-S21 Hyd.)/minerfs.no_header.image_extract/usr/bin/cgminer
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libpthread.so.0'
; Needed Library 'libm.so.6'
; Needed Library 'librt.so.1'
; Needed Library 'libz.so.1'
; Needed Library 'libssl.so.1.1'
; Needed Library 'libcrypto.so.1.1'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD start+1             ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x486AC             ; SHT file offset
DCD 0x5000400           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 9                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x1A                ; Number of entries in SHT
DCW 0x19                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0x46C18             ; File offset
DCD unk_56C18           ; Virtual address
DCD 0x56C18             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x154               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x10154             ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0x46C24             ; Size in file image
DCD 0x46C24             ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0x46EE0             ; File offset
DCD off_66EE0           ; Virtual address
DCD 0x66EE0             ; Physical address
DCD 0x16AC              ; Size in file image
DCD 0x10E60             ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0x46EE8             ; File offset
DCD stru_66EE8          ; Virtual address
DCD 0x66EE8             ; Physical address
DCD 0x118               ; Size in file image
DCD 0x118               ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x170               ; File offset
DCD dword_10170         ; Virtual address
DCD 0x10170             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHT Entry 8
DCD 0x6474E552          ; Type: RO-AFTER
DCD 0x46EE0             ; File offset
DCD off_66EE0           ; Virtual address
DCD 0x66EE0             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10154
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10170 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 3, 2, 0          ; ABI: Linux 3.2.0
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0x92, 0x34, 0xF3, 0xB4, 0xF7, 3, 0x51 ; Desc
DCB 9, 0xA0, 0x71, 0x37, 0, 0xE7, 0x93, 0x5D
DCB 0xF5, 0xC4, 0x64, 0xAF, 0x15
; ELF Hash Table
elf_hash_nbucket DCD 0x83
elf_hash_nchain DCD 0xC3
elf_hash_bucket DCD 0x2C, 0x6D, 0xBE, 0xA8, 0x1D, 0, 0x87
DCD 0x78, 0xB2, 0xBC, 0x11, 0xAB, 0xA9, 0x7D
DCD 0x65, 0, 0x9A, 0, 0x68, 0x7F, 0, 0, 0xC1
DCD 0x90, 0xB6, 0, 0xB9, 0, 0x59, 0xC0, 0x35
DCD 0, 0, 0x6B, 0x76, 0x7A, 0x62, 0x42, 0x3F
DCD 0x8B, 0xAA, 0x28, 0xB7, 0xA6, 0x95, 0x21
DCD 0, 0, 0, 0, 0, 0, 0x17, 0xAF, 0xBB, 0x93
DCD 0x88, 0x98, 0x73, 0xF, 0xB3, 0x9E, 0xA4
DCD 0x91, 0xB4, 0, 0xA2, 0, 0xA3, 0, 0x56
DCD 0, 0, 0, 0xB0, 0x9B, 0, 0x2A, 0, 0x6C
DCD 0xB5, 0xB8, 0xC2, 0xAC, 0, 0x8C, 0x16
DCD 0, 0x71, 0x86, 0x92, 0x97, 0x31, 0x7E
DCD 0x34, 0, 0, 0xB1, 0x69, 0x72, 0, 0, 0x77
DCD 0xAE, 0xA7, 0, 0xBA, 0xBF, 0x9F, 0x33
DCD 0xD, 0x5F, 0x4F, 0x9D, 0xBD, 0x44, 0xAD
DCD 0x7C, 0x52, 0x99, 0x81, 0x4C, 0x84, 0x6E
DCD 0x1C, 0, 0xA1, 0x7B, 0x51, 0x5B, 0x22
elf_hash_chain DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0xA
DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x13, 0x10
DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x15, 6
DCD 0x18, 0x26, 0, 0, 0, 0x14, 0, 0, 0xC
DCD 0, 0, 0x1F, 0, 0, 0, 8, 0x2F, 0x1E, 0x25
DCD 0x32, 0, 0x2E, 0, 0x47, 0x36, 0x20, 0x30
DCD 0, 0x40, 0, 7, 0x3C, 0, 0, 0x41, 0, 0
DCD 0, 0, 0, 0x54, 0, 0, 0, 0, 0, 0, 0, 0x60
DCD 0, 0x43, 0, 0x4D, 0x2B, 0, 0x3D, 0, 0x24
DCD 0x27, 0, 3, 0x66, 0x67, 0, 0, 0x1A, 0x3E
DCD 0x49, 0, 0, 0x6A, 0x61, 0x5C, 0x6F, 0x50
DCD 0x79, 0x46, 0, 0x12, 0x70, 1, 0x38, 0x5D
DCD 0x4E, 0x2D, 0x58, 0x3A, 0, 0x5A, 0x23
DCD 2, 0, 0x39, 0x57, 0x45, 0x29, 0, 0x63
DCD 0x48, 0x74, 0, 0x8F, 0, 0, 0, 0, 0x80
DCD 0, 0, 0x3B, 0x4A, 4, 0, 0xA0, 0x85, 0x55
DCD 0xE, 0x8D, 0x75, 0x8A, 0x96, 0x83, 5
DCD 0, 0x37, 0, 0x82, 0xB, 0, 0, 0x53, 0x4B
DCD 0x94, 0x8E, 0, 0x89, 0, 0xA5, 0x9C, 0
DCD 0x64, 0x19, 0x1B, 0, 0, 0x5E
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aGetnameinfo - byte_11304, 0,\ ; "getnameinfo"
           0, 0x12, 0, 0>
Elf32_Sym <aPthreadRwlockU - byte_11304,\ ; "pthread_rwlock_unlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aX509CheckHost - byte_11304, \ ; "X509_check_host"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aQsort - byte_11304, 0, 0, \ ; "qsort"
           0x12, 0, 0>
Elf32_Sym <aSigemptyset - byte_11304, 0,\ ; "sigemptyset"
           0, 0x12, 0, 0>
Elf32_Sym <aStrerror - byte_11304, 0, 0,\ ; "strerror"
           0x12, 0, 0>
Elf32_Sym <aFileno - byte_11304, 0, 0, \ ; "fileno"
           0x12, 0, 0>
Elf32_Sym <aInetNtop - byte_11304, 0, 0,\ ; "inet_ntop"
           0x12, 0, 0>
Elf32_Sym <aMkdir - byte_11304, 0, 0, \ ; "mkdir"
           0x12, 0, 0>
Elf32_Sym <aSigsetjmp - byte_11304, 0, \ ; "__sigsetjmp"
           0, 0x12, 0, 0>
Elf32_Sym <aAbort - byte_11304, 0, 0, \ ; "abort"
           0x12, 0, 0>
Elf32_Sym <aSslConnect+4 - byte_11304, \ ; "connect"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aTlsClientMetho - byte_11304,\ ; "TLS_client_method"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aLocaltime - byte_11304, 0, \ ; "localtime"
           0, 0x12, 0, 0>
Elf32_Sym <aPthreadRwlockR - byte_11304,\ ; "pthread_rwlock_rdlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aMemcmp - byte_11304, 0, 0, \ ; "memcmp"
           0x12, 0, 0>
Elf32_Sym <aSslCtxFree - byte_11304, 0, \ ; "SSL_CTX_free"
           0, 0x12, 0, 0>
Elf32_Sym <aSysconf - byte_11304, 0, 0, \ ; "sysconf"
           0x12, 0, 0>
Elf32_Sym <aSyslog - byte_11304, 0, 0, \ ; "syslog"
           0x12, 0, 0>
Elf32_Sym <aClockGettime - byte_11304, \ ; "clock_gettime"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_11304, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadCondSig+0xD - byte_11304,\ ; "signal"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_11304, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aSslGetCurrentC - byte_11304,\ ; "SSL_get_current_cipher"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSchedYield - byte_11304, \ ; "sched_yield"
           sched_yield, 0, 0x12, 0, 0>
Elf32_Sym <aIsoc99Sscanf - byte_11304, \ ; "__isoc99_sscanf"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aVsnprintf - byte_11304, 0, \ ; "vsnprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aInetAddr - byte_11304, 0, 0,\ ; "inet_addr"
           0x12, 0, 0>
Elf32_Sym <aStrncpy - byte_11304, 0, 0, \ ; "strncpy"
           0x12, 0, 0>
Elf32_Sym <aFclose - byte_11304, 0, 0, \ ; "fclose"
           0x12, 0, 0>
Elf32_Sym <aFgets - byte_11304, 0, 0, \ ; "fgets"
           0x12, 0, 0>
Elf32_Sym <aRecv - byte_11304, 0, 0, \ ; "recv"
           0x12, 0, 0>
Elf32_Sym <aGetenv - byte_11304, 0, 0, \ ; "getenv"
           0x12, 0, 0>
Elf32_Sym <aStrtod - byte_11304, 0, 0, \ ; "strtod"
           0x12, 0, 0>
Elf32_Sym <aStrchr - byte_11304, 0, 0, \ ; "strchr"
           0x12, 0, 0>
Elf32_Sym <aStrcasecmp - byte_11304, 0, \ ; "strcasecmp"
           0, 0x12, 0, 0>
Elf32_Sym <aDirname - byte_11304, 0, 0, \ ; "dirname"
           0x12, 0, 0>
Elf32_Sym <aSetlogmask - byte_11304, 0, \ ; "setlogmask"
           0, 0x12, 0, 0>
Elf32_Sym <aPclose - byte_11304, 0, 0, \ ; "pclose"
           0x12, 0, 0>
Elf32_Sym <aListen - byte_11304, 0, 0, \ ; "listen"
           0x12, 0, 0>
Elf32_Sym <aCalloc - byte_11304, 0, 0, \ ; "calloc"
           0x12, 0, 0>
Elf32_Sym <aSslWrite - byte_11304, 0, 0,\ ; "SSL_write"
           0x12, 0, 0>
Elf32_Sym <aPthreadCondWai - byte_11304,\ ; "pthread_cond_wait"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSemInit - byte_11304, 0, 0, \ ; "sem_init"
           0x12, 0, 0>
Elf32_Sym <aStpcpy - byte_11304, 0, 0, \ ; "stpcpy"
           0x12, 0, 0>
Elf32_Sym <aMemset - byte_11304, 0, 0, \ ; "memset"
           0x12, 0, 0>
Elf32_Sym <aSemDestroy - byte_11304, 0, \ ; "sem_destroy"
           0, 0x12, 0, 0>
Elf32_Sym <aPthreadCondTim - byte_11304,\ ; "pthread_cond_timedwait"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFreeaddrinfo - byte_11304, \ ; "freeaddrinfo"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPerror - byte_11304, 0, 0, \ ; "perror"
           0x12, 0, 0>
Elf32_Sym <aSslSetFd - byte_11304, 0, 0,\ ; "SSL_set_fd"
           0x12, 0, 0>
Elf32_Sym <aStrtoll - byte_11304, 0, 0, \ ; "strtoll"
           0x12, 0, 0>
Elf32_Sym <aFloor - byte_11304, 0, 0, \ ; "floor"
           0x12, 0, 0>
Elf32_Sym <aAssertFail - byte_11304, 0, \ ; "__assert_fail"
           0, 0x12, 0, 0>
Elf32_Sym <aExp - byte_11304, 0, 0, \ ; "exp"
           0x12, 0, 0>
Elf32_Sym <aPthreadCondBro - byte_11304,\ ; "pthread_cond_broadcast"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aItmDeregistert - byte_11304,\ ; "_ITM_deregisterTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aSslCipherGetNa - byte_11304,\ ; "SSL_CIPHER_get_name"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aUsleep - byte_11304, 0, 0, \ ; "usleep"
           0x12, 0, 0>
Elf32_Sym <aPthreadMutexTr - byte_11304,\ ; "pthread_mutex_trylock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aX509Free+5 - byte_11304, \ ; "free"
           free, 0, 0x12, 0, 0>
Elf32_Sym <aSslRead+4 - byte_11304, 0, \ ; "read"
           0, 0x12, 0, 0>
Elf32_Sym <aSslWrite+4 - byte_11304, 0, \ ; "write"
           0, 0x12, 0, 0>
Elf32_Sym <aSslNew - byte_11304, 0, 0, \ ; "SSL_new"
           0x12, 0, 0>
Elf32_Sym <aAccess - byte_11304, 0, 0, \ ; "access"
           0x12, 0, 0>
Elf32_Sym <aOpenlog - byte_11304, 0, 0, \ ; "openlog"
           0x12, 0, 0>
Elf32_Sym <aItmRegistertmc - byte_11304,\ ; "_ITM_registerTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aGettimeofday - byte_11304, \ ; "gettimeofday"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSemTrywait - byte_11304, 0, \ ; "sem_trywait"
           0, 0x12, 0, 0>
Elf32_Sym <aAccept - byte_11304, 0, 0, \ ; "accept"
           0x12, 0, 0>
Elf32_Sym <aResInit - byte_11304, 0, 0, \ ; "__res_init"
           0x12, 0, 0>
Elf32_Sym <aPthreadMutexUn - byte_11304,\ ; "pthread_mutex_unlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSslRead - byte_11304, 0, 0, \ ; "SSL_read"
           0x12, 0, 0>
Elf32_Sym <aRound - byte_11304, 0, 0, \ ; "round"
           0x12, 0, 0>
Elf32_Sym <aBioNew - byte_11304, 0, 0, \ ; "BIO_new"
           0x12, 0, 0>
Elf32_Sym <aSocket - byte_11304, 0, 0, \ ; "socket"
           0x12, 0, 0>
Elf32_Sym <aExecl - byte_11304, 0, 0, \ ; "execl"
           0x12, 0, 0>
Elf32_Sym <aGetaddrinfo - byte_11304, 0,\ ; "getaddrinfo"
           0, 0x12, 0, 0>
Elf32_Sym <aFflush - byte_11304, 0, 0, \ ; "fflush"
           0x12, 0, 0>
Elf32_Sym <aIoctl - byte_11304, 0, 0, \ ; "ioctl"
           0x12, 0, 0>
Elf32_Sym <aIsatty - byte_11304, 0, 0, \ ; "isatty"
           0x12, 0, 0>
Elf32_Sym <aSslCtxGetCertS - byte_11304,\ ; "SSL_CTX_get_cert_store"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadMutexLo - byte_11304,\ ; "pthread_mutex_lock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrlen - byte_11304, 0, 0, \ ; "strlen"
           0x12, 0, 0>
Elf32_Sym <aIsoc99Sscanf+9 - byte_11304,\ ; "sscanf"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadCreate - byte_11304, \ ; "pthread_create"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aExecv - byte_11304, 0, 0, \ ; "execv"
           0x12, 0, 0>
Elf32_Sym <aLldiv - byte_11304, 0, 0, \ ; "lldiv"
           0x12, 0, 0>
Elf32_Sym <aMemcpy - byte_11304, 0, 0, \ ; "memcpy"
           0x12, 0, 0>
Elf32_Sym <aFopen64 - byte_11304, 0, 0, \ ; "fopen64"
           0x12, 0, 0>
Elf32_Sym <aPthreadCondSig - byte_11304,\ ; "pthread_cond_signal"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aCtypeTolowerLo - byte_11304,\ ; "__ctype_tolower_loc"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aLocaleconv - byte_11304, 0, \ ; "localeconv"
           0, 0x12, 0, 0>
Elf32_Sym <aBioSMem - byte_11304, 0, 0, \ ; "BIO_s_mem"
           0x12, 0, 0>
Elf32_Sym <aFgetc - byte_11304, fgetc, \ ; "fgetc"
           0, 0x12, 0, 0>
Elf32_Sym <aStrtol - byte_11304, 0, 0, \ ; "strtol"
           0x12, 0, 0>
Elf32_Sym <aStrcpy - byte_11304, 0, 0, \ ; "strcpy"
           0x12, 0, 0>
Elf32_Sym <aSemPost - byte_11304, 0, 0, \ ; "sem_post"
           0x12, 0, 0>
Elf32_Sym <aPthreadCondDes - byte_11304,\ ; "pthread_cond_destroy"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrncat - byte_11304, 0, 0, \ ; "strncat"
           0x12, 0, 0>
Elf32_Sym <aX509StoreAddCe - byte_11304,\ ; "X509_STORE_add_cert"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSettimeofday - byte_11304, \ ; "settimeofday"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadMutexDe - byte_11304,\ ; "pthread_mutex_destroy"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSslConnect - byte_11304, 0, \ ; "SSL_connect"
           0, 0x12, 0, 0>
Elf32_Sym <aVfprintf+2 - byte_11304, 0, \ ; "printf"
           0, 0x12, 0, 0>
Elf32_Sym <aFopen64+1 - byte_11304, 0, \ ; "open64"
           0, 0x12, 0, 0>
Elf32_Sym <aRaise - byte_11304, 0, 0, \ ; "raise"
           0x12, 0, 0>
Elf32_Sym <aErrx - byte_11304, 0, 0, \ ; "errx"
           0x12, 0, 0>
Elf32_Sym <aStrtof - byte_11304, 0, 0, \ ; "strtof"
           0x12, 0, 0>
Elf32_Sym <aPthreadMutexIn - byte_11304,\ ; "pthread_mutex_init"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSslShutdown+4 - byte_11304, \ ; "shutdown"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aBind - byte_11304, 0, 0, \ ; "bind"
           0x12, 0, 0>
Elf32_Sym <aFdopen - byte_11304, 0, 0, \ ; "fdopen"
           0x12, 0, 0>
Elf32_Sym <aStrstr - byte_11304, 0, 0, \ ; "strstr"
           0x12, 0, 0>
Elf32_Sym <aNice - byte_11304, 0, 0, \ ; "nice"
           0x12, 0, 0>
Elf32_Sym <aSelect - byte_11304, 0, 0, \ ; "select"
           0x12, 0, 0>
Elf32_Sym <aFclose+1 - byte_11304, 0, 0,\ ; "close"
           0x12, 0, 0>
Elf32_Sym <aSslFree - byte_11304, 0, 0, \ ; "SSL_free"
           0x12, 0, 0>
Elf32_Sym <aFwrite - byte_11304, 0, 0, \ ; "fwrite"
           0x12, 0, 0>
Elf32_Sym <aPthreadAttrSet - byte_11304,\ ; "pthread_attr_setstacksize"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrncasecmp - byte_11304, 0,\ ; "strncasecmp"
           0, 0x12, 0, 0>
Elf32_Sym <aLocaltime+5 - byte_11304, 0,\ ; "time"
           0, 0x12, 0, 0>
Elf32_Sym <aLog10 - byte_11304, 0, 0, \ ; "log10"
           0x12, 0, 0>
Elf32_Sym <aCtypeBLoc - byte_11304, 0, \ ; "__ctype_b_loc"
           0, 0x12, 0, 0>
Elf32_Sym <aVfprintf+1 - byte_11304, 0, \ ; "fprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aBioWrite - byte_11304, 0, 0,\ ; "BIO_write"
           0x12, 0, 0>
Elf32_Sym <aMalloc - byte_11304, malloc,\ ; "malloc"
           0, 0x12, 0, 0>
Elf32_Sym <aSigaction - byte_11304, 0, \ ; "sigaction"
           0, 0x12, 0, 0>
Elf32_Sym <aSemTimedwait - byte_11304, \ ; "sem_timedwait"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadAttrIni - byte_11304,\ ; "pthread_attr_init"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSslGetPeerCert - byte_11304,\ ; "SSL_get_peer_certificate"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSslGetVerifyRe - byte_11304,\ ; "SSL_get_verify_result"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFputc - byte_11304, 0, 0, \ ; "fputc"
           0x12, 0, 0>
Elf32_Sym <aStdin - byte_11304, stdin, \ ; "stdin"
           4, 0x11, 0, 0x17>
Elf32_Sym <aStrtok - byte_11304, 0, 0, \ ; "strtok"
           0x12, 0, 0>
Elf32_Sym <aOpensslInitSsl - byte_11304,\ ; "OPENSSL_init_ssl"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadRwlockW - byte_11304,\ ; "pthread_rwlock_wrlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aClockNanosleep+0xA - byte_11304,\ ; "sleep"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSend - byte_11304, 0, 0, \ ; "send"
           0x12, 0, 0>
Elf32_Sym <aSslShutdown - byte_11304, 0,\ ; "SSL_shutdown"
           0, 0x12, 0, 0>
Elf32_Sym <aPthreadRwlockD - byte_11304,\ ; "pthread_rwlock_destroy"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrcat - byte_11304, 0, 0, \ ; "strcat"
           0x12, 0, 0>
Elf32_Sym <aMemmove - byte_11304, 0, 0, \ ; "memmove"
           0x12, 0, 0>
Elf32_Sym <aPthreadTestcan - byte_11304,\ ; "pthread_testcancel"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPopen - byte_11304, 0, 0, \ ; "popen"
           0x12, 0, 0>
Elf32_Sym <aX509VerifyCert - byte_11304,\ ; "X509_verify_cert_error_string"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aDup2 - byte_11304, 0, 0, \ ; "dup2"
           0x12, 0, 0>
Elf32_Sym <aPuts - byte_11304, 0, 0, \ ; "puts"
           0x12, 0, 0>
Elf32_Sym <aStdout - byte_11304, stdout,\ ; "stdout"
           4, 0x11, 0, 0x17>
Elf32_Sym <aGetpid - byte_11304, 0, 0, \ ; "getpid"
           0x12, 0, 0>
Elf32_Sym <aPrctl - byte_11304, 0, 0, \ ; "prctl"
           0x12, 0, 0>
Elf32_Sym <aFcntl - byte_11304, 0, 0, \ ; "fcntl"
           0x12, 0, 0>
Elf32_Sym <aFork - byte_11304, 0, 0, \ ; "fork"
           0x12, 0, 0>
Elf32_Sym <aPemReadBioX509 - byte_11304,\ ; "PEM_read_bio_X509"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSslCtxNew - byte_11304, 0, \ ; "SSL_CTX_new"
           0, 0x12, 0, 0>
Elf32_Sym <aStderr - byte_11304, stderr,\ ; "stderr"
           4, 0x11, 0, 0x17>
Elf32_Sym <aPthreadRegiste - byte_11304,\ ; "__pthread_register_cancel"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadUnregis - byte_11304,\ ; "__pthread_unregister_cancel"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aBioFree - byte_11304, 0, 0, \ ; "BIO_free"
           0x12, 0, 0>
Elf32_Sym <aVfprintf - byte_11304, 0, 0,\ ; "vfprintf"
           0x12, 0, 0>
Elf32_Sym <aVsnprintf+1 - byte_11304, 0,\ ; "snprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aOpensslInitCry - byte_11304,\ ; "OPENSSL_init_crypto"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrcspn - byte_11304, 0, 0, \ ; "strcspn"
           0x12, 0, 0>
Elf32_Sym <aFread - byte_11304, 0, 0, \ ; "fread"
           0x12, 0, 0>
Elf32_Sym <aPthreadCondIni - byte_11304,\ ; "pthread_cond_init"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrncmp - byte_11304, 0, 0, \ ; "strncmp"
           0x12, 0, 0>
Elf32_Sym <aKill - byte_11304, 0, 0, \ ; "kill"
           0x12, 0, 0>
Elf32_Sym <aClockNanosleep+6 - byte_11304,\ ; "nanosleep"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadDetach - byte_11304, \ ; "pthread_detach"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aRealloc - byte_11304, 0, 0, \ ; "realloc"
           0x12, 0, 0>
Elf32_Sym <aPthreadRwlockT - byte_11304,\ ; "pthread_rwlock_trywrlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadSetcanc - byte_11304,\ ; "pthread_setcancelstate"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSysinfo - byte_11304, 0, 0, \ ; "sysinfo"
           0x12, 0, 0>
Elf32_Sym <aX509Free - byte_11304, 0, 0,\ ; "X509_free"
           0x12, 0, 0>
Elf32_Sym <aGetsockopt - byte_11304, 0, \ ; "getsockopt"
           0, 0x12, 0, 0>
Elf32_Sym <aPipe - byte_11304, 0, 0, \ ; "pipe"
           0x12, 0, 0>
Elf32_Sym <aStrdup - byte_11304, 0, 0, \ ; "__strdup"
           0x12, 0, 0>
Elf32_Sym <aSetsockopt - byte_11304, 0, \ ; "setsockopt"
           0, 0x12, 0, 0>
Elf32_Sym <aStrpbrk - byte_11304, 0, 0, \ ; "strpbrk"
           0x12, 0, 0>
Elf32_Sym <aSslGetError - byte_11304, 0,\ ; "SSL_get_error"
           0, 0x12, 0, 0>
Elf32_Sym <aSemWait - byte_11304, 0, 0, \ ; "sem_wait"
           0x12, 0, 0>
Elf32_Sym <aMemchr - byte_11304, 0, 0, \ ; "memchr"
           0x12, 0, 0>
Elf32_Sym <aMemmem - byte_11304, memmem,\ ; "memmem"
           0x2E8, 0x12, 0, 0xD>
Elf32_Sym <aStrcmp - byte_11304, 0, 0, \ ; "strcmp"
           0x12, 0, 0>
Elf32_Sym <aExit - byte_11304, 0, 0, \ ; "exit"
           0x12, 0, 0>
Elf32_Sym <aPthreadSetcanc_0 - byte_11304,\ ; "pthread_setcanceltype"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aClockNanosleep - byte_11304,\ ; "clock_nanosleep"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadRwlockI - byte_11304,\ ; "pthread_rwlock_init"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadUnwindN - byte_11304,\ ; "__pthread_unwind_next"
           0, 0, 0x22, 0, 0>
Elf32_Sym <aErrnoLocation - byte_11304, \ ; "__errno_location"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadSelf - byte_11304, 0,\ ; "pthread_self"
           0, 0x12, 0, 0>
Elf32_Sym <aPthreadCancel - byte_11304, \ ; "pthread_cancel"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSprintf - byte_11304, 0, 0, \ ; "sprintf"
           0x12, 0, 0>
Elf32_Sym <aPthreadJoin - byte_11304, 0,\ ; "pthread_join"
           0, 0x12, 0, 0>
; ELF String Table
byte_11304 DCB 0
aLibpthreadSo0 DCB "libpthread.so.0",0
aItmDeregistert DCB "_ITM_deregisterTMCloneTable",0
aItmRegistertmc DCB "_ITM_registerTMCloneTable",0
aSemPost DCB "sem_post",0
aSigaction DCB "sigaction",0
aPthreadAttrIni DCB "pthread_attr_init",0
aSemTrywait DCB "sem_trywait",0
aSemInit DCB "sem_init",0
aPthreadMutexUn DCB "pthread_mutex_unlock",0
aPthreadRwlockR DCB "pthread_rwlock_rdlock",0
aPthreadJoin DCB "pthread_join",0
aPthreadCreate DCB "pthread_create",0
aPthreadCancel DCB "pthread_cancel",0
aPthreadAttrSet DCB "pthread_attr_setstacksize",0
aPthreadSetcanc DCB "pthread_setcancelstate",0
aPthreadRwlockW DCB "pthread_rwlock_wrlock",0
aErrnoLocation DCB "__errno_location",0
aPthreadUnwindN DCB "__pthread_unwind_next",0
aSend DCB "send",0
aPthreadCondSig DCB "pthread_cond_signal",0
aPthreadMutexLo DCB "pthread_mutex_lock",0
aPthreadRegiste DCB "__pthread_register_cancel",0
aPthreadSelf DCB "pthread_self",0
aPthreadMutexTr DCB "pthread_mutex_trylock",0
aPthreadRwlockI DCB "pthread_rwlock_init",0
aPthreadMutexDe DCB "pthread_mutex_destroy",0
aPthreadCondWai DCB "pthread_cond_wait",0
aAccept DCB "accept",0
aSemTimedwait DCB "sem_timedwait",0
aPthreadCondDes DCB "pthread_cond_destroy",0
aPthreadRwlockU DCB "pthread_rwlock_unlock",0
aPthreadCondTim DCB "pthread_cond_timedwait",0
aPthreadDetach DCB "pthread_detach",0
aPthreadSetcanc_0 DCB "pthread_setcanceltype",0
aSemWait DCB "sem_wait",0
aRecv DCB "recv",0
aPthreadUnregis DCB "__pthread_unregister_cancel",0
aPthreadRwlockT DCB "pthread_rwlock_trywrlock",0
aPthreadCondIni DCB "pthread_cond_init",0
aSemDestroy DCB "sem_destroy",0
aPthreadRwlockD DCB "pthread_rwlock_destroy",0
aPthreadCondBro DCB "pthread_cond_broadcast",0
aPthreadTestcan DCB "pthread_testcancel",0
aFcntl DCB "fcntl",0
aPthreadMutexIn DCB "pthread_mutex_init",0
aLibmSo6 DCB "libm.so.6",0
aGmonStart DCB "__gmon_start__",0
aFloor DCB "floor",0
aRound DCB "round",0
aLog10 DCB "log10",0
aExp DCB "exp",0
aLibrtSo1 DCB "librt.so.1",0
aClockGettime DCB "clock_gettime",0
aClockNanosleep DCB "clock_nanosleep",0
aLibzSo1 DCB "libz.so.1",0
aLibsslSo11 DCB "libssl.so.1.1",0
aSslConnect DCB "SSL_connect",0
aOpensslInitSsl DCB "OPENSSL_init_ssl",0
aSslGetPeerCert DCB "SSL_get_peer_certificate",0
aSslFree DCB "SSL_free",0
aSslCtxNew DCB "SSL_CTX_new",0
aSslGetVerifyRe DCB "SSL_get_verify_result",0
aSslRead DCB "SSL_read",0
aSslSetFd DCB "SSL_set_fd",0
aSslGetCurrentC DCB "SSL_get_current_cipher",0
aSslCipherGetNa DCB "SSL_CIPHER_get_name",0
aSslNew DCB "SSL_new",0
aSslWrite DCB "SSL_write",0
aSslCtxGetCertS DCB "SSL_CTX_get_cert_store",0
aTlsClientMetho DCB "TLS_client_method",0
aSslShutdown DCB "SSL_shutdown",0
aSslGetError DCB "SSL_get_error",0
aSslCtxFree DCB "SSL_CTX_free",0
aLibcryptoSo11 DCB "libcrypto.so.1.1",0
aBioFree DCB "BIO_free",0
aBioSMem DCB "BIO_s_mem",0
aBioNew DCB "BIO_new",0
aPemReadBioX509 DCB "PEM_read_bio_X509",0
aX509VerifyCert DCB "X509_verify_cert_error_string",0
aOpensslInitCry DCB "OPENSSL_init_crypto",0
aBioWrite DCB "BIO_write",0
aX509CheckHost DCB "X509_check_host",0
aX509Free DCB "X509_free",0
aX509StoreAddCe DCB "X509_STORE_add_cert",0
aRaise DCB "raise",0
aLibcSo6 DCB "libc.so.6",0
aSocket DCB "socket",0
aResInit DCB "__res_init",0
aFflush DCB "fflush",0
aStrcpy DCB "strcpy",0
aExit DCB "exit",0
aExecl DCB "execl",0
aExecv DCB "execv",0
aSprintf DCB "sprintf",0
aStrncmp DCB "strncmp",0
aPipe DCB "pipe",0
aStrdup DCB "__strdup",0
aPerror DCB "perror",0
aIsoc99Sscanf DCB "__isoc99_sscanf",0
aInetNtop DCB "inet_ntop",0
aStrncpy DCB "strncpy",0
aPuts DCB "puts",0
aFork DCB "fork",0
aListen DCB "listen",0
aSelect DCB "select",0
aMkdir DCB "mkdir",0
aRealloc DCB "realloc",0
aAbort DCB "abort",0
aStdin DCB "stdin",0
aStrtoll DCB "strtoll",0
aMemchr DCB "memchr",0
aStrpbrk DCB "strpbrk",0
aPopen DCB "popen",0
aGetpid DCB "getpid",0
aKill DCB "kill",0
aAssertFail DCB "__assert_fail",0
aStrtod DCB "strtod",0
aStrtof DCB "strtof",0
aStrtok DCB "strtok",0
aStrtol DCB "strtol",0
aIsatty DCB "isatty",0
aSchedYield DCB "sched_yield",0
aSyslog DCB "syslog",0
aFgetc DCB "fgetc",0
aFgets DCB "fgets",0
aCalloc DCB "calloc",0
aStrlen DCB "strlen",0
aPrctl DCB "prctl",0
aSetlogmask DCB "setlogmask",0
aSigemptyset DCB "sigemptyset",0
aOpenlog DCB "openlog",0
aGetaddrinfo DCB "getaddrinfo",0
aMemset DCB "memset",0
aDirname DCB "dirname",0
aLocaleconv DCB "localeconv",0
aStrstr DCB "strstr",0
aStrcspn DCB "strcspn",0
aBind DCB "bind",0
aMemcmp DCB "memcmp",0
aGetnameinfo DCB "getnameinfo",0
aGetsockopt DCB "getsockopt",0
aDup2 DCB "dup2",0
aVsnprintf DCB "vsnprintf",0
aSigsetjmp DCB "__sigsetjmp",0
aStdout DCB "stdout",0
aFputc DCB "fputc",0
aInetAddr DCB "inet_addr",0
aMemcpy DCB "memcpy",0
aFclose DCB "fclose",0
aSetsockopt DCB "setsockopt",0
aMalloc DCB "malloc",0
aStrcat DCB "strcat",0
aStrcasecmp DCB "strcasecmp",0
aCtypeBLoc DCB "__ctype_b_loc",0
aGetenv DCB "getenv",0
aNice DCB "nice",0
aStderr DCB "stderr",0
aIoctl DCB "ioctl",0
aSettimeofday DCB "settimeofday",0
aStrncasecmp DCB "strncasecmp",0
aStrncat DCB "strncat",0
aFileno DCB "fileno",0
aPclose DCB "pclose",0
aUsleep DCB "usleep",0
aFwrite DCB "fwrite",0
aFread DCB "fread",0
aGettimeofday DCB "gettimeofday",0
aLldiv DCB "lldiv",0
aLocaltime DCB "localtime",0
aStrchr DCB "strchr",0
aFdopen DCB "fdopen",0
aQsort DCB "qsort",0
aCtypeTolowerLo DCB "__ctype_tolower_loc",0
aFreeaddrinfo DCB "freeaddrinfo",0
aErrx DCB "errx",0
aMemmove DCB "memmove",0
aFopen64 DCB "fopen64",0
aAccess DCB "access",0
aMemmem DCB "memmem",0
aSysinfo DCB "sysinfo",0
aStrcmp DCB "strcmp",0
aStrerror DCB "strerror",0
aLibcStartMain DCB "__libc_start_main",0
aStpcpy DCB "stpcpy",0
aVfprintf DCB "vfprintf",0
aSysconf DCB "sysconf",0
aGlibc24 DCB "GLIBC_2.4",0
aOpenssl110 DCB "OPENSSL_1_1_0",0
aGlibc27 DCB "GLIBC_2.7",0
DCB 0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; getnameinfo@@GLIBC_2.4
DCW 3                   ; pthread_rwlock_unlock@@GLIBC_2.4
DCW 4                   ; X509_check_host@@OPENSSL_1_1_0
DCW 2                   ; qsort@@GLIBC_2.4
DCW 2                   ; sigemptyset@@GLIBC_2.4
DCW 2                   ; strerror@@GLIBC_2.4
DCW 2                   ; fileno@@GLIBC_2.4
DCW 2                   ; inet_ntop@@GLIBC_2.4
DCW 2                   ; mkdir@@GLIBC_2.4
DCW 2                   ; __sigsetjmp@@GLIBC_2.4
DCW 2                   ; abort@@GLIBC_2.4
DCW 3                   ; connect@@GLIBC_2.4
DCW 5                   ; TLS_client_method@@OPENSSL_1_1_0
DCW 2                   ; localtime@@GLIBC_2.4
DCW 3                   ; pthread_rwlock_rdlock@@GLIBC_2.4
DCW 2                   ; memcmp@@GLIBC_2.4
DCW 5                   ; SSL_CTX_free@@OPENSSL_1_1_0
DCW 2                   ; sysconf@@GLIBC_2.4
DCW 2                   ; syslog@@GLIBC_2.4
DCW 6                   ; clock_gettime@@GLIBC_2.4
DCW 2                   ; __libc_start_main@@GLIBC_2.4
DCW 2                   ; signal@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 5                   ; SSL_get_current_cipher@@OPENSSL_1_1_0
DCW 2                   ; sched_yield@@GLIBC_2.4
DCW 7                   ; __isoc99_sscanf@@GLIBC_2.7
DCW 2                   ; vsnprintf@@GLIBC_2.4
DCW 2                   ; inet_addr@@GLIBC_2.4
DCW 2                   ; strncpy@@GLIBC_2.4
DCW 2                   ; fclose@@GLIBC_2.4
DCW 2                   ; fgets@@GLIBC_2.4
DCW 3                   ; recv@@GLIBC_2.4
DCW 2                   ; getenv@@GLIBC_2.4
DCW 2                   ; strtod@@GLIBC_2.4
DCW 2                   ; strchr@@GLIBC_2.4
DCW 2                   ; strcasecmp@@GLIBC_2.4
DCW 2                   ; dirname@@GLIBC_2.4
DCW 2                   ; setlogmask@@GLIBC_2.4
DCW 2                   ; pclose@@GLIBC_2.4
DCW 2                   ; listen@@GLIBC_2.4
DCW 2                   ; calloc@@GLIBC_2.4
DCW 5                   ; SSL_write@@OPENSSL_1_1_0
DCW 3                   ; pthread_cond_wait@@GLIBC_2.4
DCW 3                   ; sem_init@@GLIBC_2.4
DCW 2                   ; stpcpy@@GLIBC_2.4
DCW 2                   ; memset@@GLIBC_2.4
DCW 3                   ; sem_destroy@@GLIBC_2.4
DCW 3                   ; pthread_cond_timedwait@@GLIBC_2.4
DCW 2                   ; freeaddrinfo@@GLIBC_2.4
DCW 2                   ; perror@@GLIBC_2.4
DCW 5                   ; SSL_set_fd@@OPENSSL_1_1_0
DCW 2                   ; strtoll@@GLIBC_2.4
DCW 8                   ; floor@@GLIBC_2.4
DCW 2                   ; __assert_fail@@GLIBC_2.4
DCW 8                   ; exp@@GLIBC_2.4
DCW 3                   ; pthread_cond_broadcast@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_deregisterTMCloneTable
DCW 5                   ; SSL_CIPHER_get_name@@OPENSSL_1_1_0
DCW 2                   ; usleep@@GLIBC_2.4
DCW 3                   ; pthread_mutex_trylock@@GLIBC_2.4
DCW 2                   ; free@@GLIBC_2.4
DCW 3                   ; read@@GLIBC_2.4
DCW 3                   ; write@@GLIBC_2.4
DCW 5                   ; SSL_new@@OPENSSL_1_1_0
DCW 2                   ; access@@GLIBC_2.4
DCW 2                   ; openlog@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_registerTMCloneTable
DCW 2                   ; gettimeofday@@GLIBC_2.4
DCW 3                   ; sem_trywait@@GLIBC_2.4
DCW 3                   ; accept@@GLIBC_2.4
DCW 2                   ; __res_init@@GLIBC_2.4
DCW 3                   ; pthread_mutex_unlock@@GLIBC_2.4
DCW 5                   ; SSL_read@@OPENSSL_1_1_0
DCW 8                   ; round@@GLIBC_2.4
DCW 4                   ; BIO_new@@OPENSSL_1_1_0
DCW 2                   ; socket@@GLIBC_2.4
DCW 2                   ; execl@@GLIBC_2.4
DCW 2                   ; getaddrinfo@@GLIBC_2.4
DCW 2                   ; fflush@@GLIBC_2.4
DCW 2                   ; ioctl@@GLIBC_2.4
DCW 2                   ; isatty@@GLIBC_2.4
DCW 5                   ; SSL_CTX_get_cert_store@@OPENSSL_1_1_0
DCW 3                   ; pthread_mutex_lock@@GLIBC_2.4
DCW 2                   ; strlen@@GLIBC_2.4
DCW 2                   ; sscanf@@GLIBC_2.4
DCW 3                   ; pthread_create@@GLIBC_2.4
DCW 2                   ; execv@@GLIBC_2.4
DCW 2                   ; lldiv@@GLIBC_2.4
DCW 2                   ; memcpy@@GLIBC_2.4
DCW 2                   ; fopen64@@GLIBC_2.4
DCW 3                   ; pthread_cond_signal@@GLIBC_2.4
DCW 2                   ; __ctype_tolower_loc@@GLIBC_2.4
DCW 2                   ; localeconv@@GLIBC_2.4
DCW 4                   ; BIO_s_mem@@OPENSSL_1_1_0
DCW 2                   ; fgetc@@GLIBC_2.4
DCW 2                   ; strtol@@GLIBC_2.4
DCW 2                   ; strcpy@@GLIBC_2.4
DCW 3                   ; sem_post@@GLIBC_2.4
DCW 3                   ; pthread_cond_destroy@@GLIBC_2.4
DCW 2                   ; strncat@@GLIBC_2.4
DCW 4                   ; X509_STORE_add_cert@@OPENSSL_1_1_0
DCW 2                   ; settimeofday@@GLIBC_2.4
DCW 3                   ; pthread_mutex_destroy@@GLIBC_2.4
DCW 5                   ; SSL_connect@@OPENSSL_1_1_0
DCW 2                   ; printf@@GLIBC_2.4
DCW 3                   ; open64@@GLIBC_2.4
DCW 3                   ; raise@@GLIBC_2.4
DCW 2                   ; errx@@GLIBC_2.4
DCW 2                   ; strtof@@GLIBC_2.4
DCW 3                   ; pthread_mutex_init@@GLIBC_2.4
DCW 2                   ; shutdown@@GLIBC_2.4
DCW 2                   ; bind@@GLIBC_2.4
DCW 2                   ; fdopen@@GLIBC_2.4
DCW 2                   ; strstr@@GLIBC_2.4
DCW 2                   ; nice@@GLIBC_2.4
DCW 2                   ; select@@GLIBC_2.4
DCW 3                   ; close@@GLIBC_2.4
DCW 5                   ; SSL_free@@OPENSSL_1_1_0
DCW 2                   ; fwrite@@GLIBC_2.4
DCW 3                   ; pthread_attr_setstacksize@@GLIBC_2.4
DCW 2                   ; strncasecmp@@GLIBC_2.4
DCW 2                   ; time@@GLIBC_2.4
DCW 8                   ; log10@@GLIBC_2.4
DCW 2                   ; __ctype_b_loc@@GLIBC_2.4
DCW 2                   ; fprintf@@GLIBC_2.4
DCW 4                   ; BIO_write@@OPENSSL_1_1_0
DCW 2                   ; malloc@@GLIBC_2.4
DCW 3                   ; sigaction@@GLIBC_2.4
DCW 3                   ; sem_timedwait@@GLIBC_2.4
DCW 3                   ; pthread_attr_init@@GLIBC_2.4
DCW 5                   ; SSL_get_peer_certificate@@OPENSSL_1_1_0
DCW 5                   ; SSL_get_verify_result@@OPENSSL_1_1_0
DCW 2                   ; fputc@@GLIBC_2.4
DCW 2                   ; stdin@@GLIBC_2.4
DCW 2                   ; strtok@@GLIBC_2.4
DCW 5                   ; OPENSSL_init_ssl@@OPENSSL_1_1_0
DCW 3                   ; pthread_rwlock_wrlock@@GLIBC_2.4
DCW 2                   ; sleep@@GLIBC_2.4
DCW 3                   ; send@@GLIBC_2.4
DCW 5                   ; SSL_shutdown@@OPENSSL_1_1_0
DCW 3                   ; pthread_rwlock_destroy@@GLIBC_2.4
DCW 2                   ; strcat@@GLIBC_2.4
DCW 2                   ; memmove@@GLIBC_2.4
DCW 3                   ; pthread_testcancel@@GLIBC_2.4
DCW 2                   ; popen@@GLIBC_2.4
DCW 4                   ; X509_verify_cert_error_string@@OPENSSL_1_1_0
DCW 2                   ; dup2@@GLIBC_2.4
DCW 2                   ; puts@@GLIBC_2.4
DCW 2                   ; stdout@@GLIBC_2.4
DCW 2                   ; getpid@@GLIBC_2.4
DCW 2                   ; prctl@@GLIBC_2.4
DCW 3                   ; fcntl@@GLIBC_2.4
DCW 2                   ; fork@@GLIBC_2.4
DCW 4                   ; PEM_read_bio_X509@@OPENSSL_1_1_0
DCW 5                   ; SSL_CTX_new@@OPENSSL_1_1_0
DCW 2                   ; stderr@@GLIBC_2.4
DCW 3                   ; __pthread_register_cancel@@GLIBC_2.4
DCW 3                   ; __pthread_unregister_cancel@@GLIBC_2.4
DCW 4                   ; BIO_free@@OPENSSL_1_1_0
DCW 2                   ; vfprintf@@GLIBC_2.4
DCW 2                   ; snprintf@@GLIBC_2.4
DCW 4                   ; OPENSSL_init_crypto@@OPENSSL_1_1_0
DCW 2                   ; strcspn@@GLIBC_2.4
DCW 2                   ; fread@@GLIBC_2.4
DCW 3                   ; pthread_cond_init@@GLIBC_2.4
DCW 2                   ; strncmp@@GLIBC_2.4
DCW 2                   ; kill@@GLIBC_2.4
DCW 3                   ; nanosleep@@GLIBC_2.4
DCW 3                   ; pthread_detach@@GLIBC_2.4
DCW 2                   ; realloc@@GLIBC_2.4
DCW 3                   ; pthread_rwlock_trywrlock@@GLIBC_2.4
DCW 3                   ; pthread_setcancelstate@@GLIBC_2.4
DCW 2                   ; sysinfo@@GLIBC_2.4
DCW 4                   ; X509_free@@OPENSSL_1_1_0
DCW 2                   ; getsockopt@@GLIBC_2.4
DCW 2                   ; pipe@@GLIBC_2.4
DCW 2                   ; __strdup@@GLIBC_2.4
DCW 2                   ; setsockopt@@GLIBC_2.4
DCW 2                   ; strpbrk@@GLIBC_2.4
DCW 5                   ; SSL_get_error@@OPENSSL_1_1_0
DCW 3                   ; sem_wait@@GLIBC_2.4
DCW 2                   ; memchr@@GLIBC_2.4
DCW 1                   ; global symbol: memmem
DCW 2                   ; strcmp@@GLIBC_2.4
DCW 2                   ; exit@@GLIBC_2.4
DCW 3                   ; pthread_setcanceltype@@GLIBC_2.4
DCW 6                   ; clock_nanosleep@@GLIBC_2.4
DCW 3                   ; pthread_rwlock_init@@GLIBC_2.4
DCW 3                   ; __pthread_unwind_next@@GLIBC_2.4
DCW 3                   ; __errno_location@@GLIBC_2.4
DCW 3                   ; pthread_self@@GLIBC_2.4
DCW 3                   ; pthread_cancel@@GLIBC_2.4
DCW 2                   ; sprintf@@GLIBC_2.4
DCW 3                   ; pthread_join@@GLIBC_2.4
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libm.so.6"
               aLibmSo6 - byte_11304, \
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 8, \ ; "GLIBC_2.4"
               aGlibc24 - byte_11304, 0>
Elf32_Verneed <1, 1, \  ; "librt.so.1"
               aLibrtSo1 - byte_11304, \
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 6, \ ; "GLIBC_2.4"
               aGlibc24 - byte_11304, 0>
Elf32_Verneed <1, 1, \  ; "libssl.so.1.1"
               aLibsslSo11 - byte_11304,\
               0x10, 0x20>
Elf32_Vernaux <0x66D1F10, 0, 5, \ ; "OPENSSL_1_1_0"
               aOpenssl110 - byte_11304,\
               0>
Elf32_Verneed <1, 1, \  ; "libcrypto.so.1.1"
               aLibcryptoSo11 - byte_11304,\
               0x10, 0x20>
Elf32_Vernaux <0x66D1F10, 0, 4, \ ; "OPENSSL_1_1_0"
               aOpenssl110 - byte_11304,\
               0>
Elf32_Verneed <1, 1, \  ; "libpthread.so.0"
               aLibpthreadSo0 - byte_11304,\
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 3, \ ; "GLIBC_2.4"
               aGlibc24 - byte_11304, 0>
Elf32_Verneed <1, 2, \  ; "libc.so.6"
               aLibcSo6 - byte_11304, \
               0x10, 0>
Elf32_Vernaux <0xD696917, 0, 7, \ ; "GLIBC_2.7"
               aGlibc27 - byte_11304, \
               0x10>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_11304, 0>
; ELF REL Relocation Table
Elf32_Rel <0x672FC, 0x1715> ; R_ARM_GLOB_DAT __gmon_start__
Elf32_Rel <0x68590, 0x8614> ; R_ARM_COPY stdin
Elf32_Rel <0x68594, 0x9514> ; R_ARM_COPY stdout
Elf32_Rel <0x68598, 0x9C14> ; R_ARM_COPY stderr
; ELF JMPREL Relocation Table
Elf32_Rel <0x6700C, 0x116> ; R_ARM_JUMP_SLOT getnameinfo
Elf32_Rel <0x67010, 0x216> ; R_ARM_JUMP_SLOT pthread_rwlock_unlock
Elf32_Rel <0x67014, 0x316> ; R_ARM_JUMP_SLOT X509_check_host
Elf32_Rel <0x67018, 0x416> ; R_ARM_JUMP_SLOT qsort
Elf32_Rel <0x6701C, 0x516> ; R_ARM_JUMP_SLOT sigemptyset
Elf32_Rel <0x67020, 0x616> ; R_ARM_JUMP_SLOT strerror
Elf32_Rel <0x67024, 0x716> ; R_ARM_JUMP_SLOT fileno
Elf32_Rel <0x67028, 0x816> ; R_ARM_JUMP_SLOT inet_ntop
Elf32_Rel <0x6702C, 0x916> ; R_ARM_JUMP_SLOT mkdir
Elf32_Rel <0x67030, 0xA16> ; R_ARM_JUMP_SLOT __sigsetjmp
Elf32_Rel <0x67034, 0xB16> ; R_ARM_JUMP_SLOT abort
Elf32_Rel <0x67038, 0xC16> ; R_ARM_JUMP_SLOT connect
Elf32_Rel <0x6703C, 0xD16> ; R_ARM_JUMP_SLOT TLS_client_method
Elf32_Rel <0x67040, 0xE16> ; R_ARM_JUMP_SLOT localtime
Elf32_Rel <0x67044, 0xF16> ; R_ARM_JUMP_SLOT pthread_rwlock_rdlock
Elf32_Rel <0x67048, 0x1016> ; R_ARM_JUMP_SLOT memcmp
Elf32_Rel <0x6704C, 0x1116> ; R_ARM_JUMP_SLOT SSL_CTX_free
Elf32_Rel <0x67050, 0x1216> ; R_ARM_JUMP_SLOT sysconf
Elf32_Rel <0x67054, 0x1316> ; R_ARM_JUMP_SLOT syslog
Elf32_Rel <0x67058, 0x1416> ; R_ARM_JUMP_SLOT clock_gettime
Elf32_Rel <0x6705C, 0x1516> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x67060, 0x1616> ; R_ARM_JUMP_SLOT signal
Elf32_Rel <0x67064, 0x1716> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x67068, 0x1816> ; R_ARM_JUMP_SLOT SSL_get_current_cipher
Elf32_Rel <0x6706C, 0x1916> ; R_ARM_JUMP_SLOT sched_yield
Elf32_Rel <0x67070, 0x1A16> ; R_ARM_JUMP_SLOT __isoc99_sscanf
Elf32_Rel <0x67074, 0x1B16> ; R_ARM_JUMP_SLOT vsnprintf
Elf32_Rel <0x67078, 0x1C16> ; R_ARM_JUMP_SLOT inet_addr
Elf32_Rel <0x6707C, 0x1D16> ; R_ARM_JUMP_SLOT strncpy
Elf32_Rel <0x67080, 0x1E16> ; R_ARM_JUMP_SLOT fclose
Elf32_Rel <0x67084, 0x1F16> ; R_ARM_JUMP_SLOT fgets
Elf32_Rel <0x67088, 0x2016> ; R_ARM_JUMP_SLOT recv
Elf32_Rel <0x6708C, 0x2116> ; R_ARM_JUMP_SLOT getenv
Elf32_Rel <0x67090, 0x2216> ; R_ARM_JUMP_SLOT strtod
Elf32_Rel <0x67094, 0x2316> ; R_ARM_JUMP_SLOT strchr
Elf32_Rel <0x67098, 0x2416> ; R_ARM_JUMP_SLOT strcasecmp
Elf32_Rel <0x6709C, 0x2516> ; R_ARM_JUMP_SLOT dirname
Elf32_Rel <0x670A0, 0x2616> ; R_ARM_JUMP_SLOT setlogmask
Elf32_Rel <0x670A4, 0x2716> ; R_ARM_JUMP_SLOT pclose
Elf32_Rel <0x670A8, 0x2816> ; R_ARM_JUMP_SLOT listen
Elf32_Rel <0x670AC, 0x2916> ; R_ARM_JUMP_SLOT calloc
Elf32_Rel <0x670B0, 0x2A16> ; R_ARM_JUMP_SLOT SSL_write
Elf32_Rel <0x670B4, 0x2B16> ; R_ARM_JUMP_SLOT pthread_cond_wait
Elf32_Rel <0x670B8, 0x2C16> ; R_ARM_JUMP_SLOT sem_init
Elf32_Rel <0x670BC, 0x2D16> ; R_ARM_JUMP_SLOT stpcpy
Elf32_Rel <0x670C0, 0x2E16> ; R_ARM_JUMP_SLOT memset
Elf32_Rel <0x670C4, 0x2F16> ; R_ARM_JUMP_SLOT sem_destroy
Elf32_Rel <0x670C8, 0x3016> ; R_ARM_JUMP_SLOT pthread_cond_timedwait
Elf32_Rel <0x670CC, 0x3116> ; R_ARM_JUMP_SLOT freeaddrinfo
Elf32_Rel <0x670D0, 0x3216> ; R_ARM_JUMP_SLOT perror
Elf32_Rel <0x670D4, 0x3316> ; R_ARM_JUMP_SLOT SSL_set_fd
Elf32_Rel <0x670D8, 0x3416> ; R_ARM_JUMP_SLOT strtoll
Elf32_Rel <0x670DC, 0x3516> ; R_ARM_JUMP_SLOT floor
Elf32_Rel <0x670E0, 0x3616> ; R_ARM_JUMP_SLOT __assert_fail
Elf32_Rel <0x670E4, 0x3716> ; R_ARM_JUMP_SLOT exp
Elf32_Rel <0x670E8, 0x3816> ; R_ARM_JUMP_SLOT pthread_cond_broadcast
Elf32_Rel <0x670EC, 0x3A16> ; R_ARM_JUMP_SLOT SSL_CIPHER_get_name
Elf32_Rel <0x670F0, 0x3B16> ; R_ARM_JUMP_SLOT usleep
Elf32_Rel <0x670F4, 0x3C16> ; R_ARM_JUMP_SLOT pthread_mutex_trylock
Elf32_Rel <0x670F8, 0x3D16> ; R_ARM_JUMP_SLOT free
Elf32_Rel <0x670FC, 0x3E16> ; R_ARM_JUMP_SLOT read
Elf32_Rel <0x67100, 0x3F16> ; R_ARM_JUMP_SLOT write
Elf32_Rel <0x67104, 0x4016> ; R_ARM_JUMP_SLOT SSL_new
Elf32_Rel <0x67108, 0x4116> ; R_ARM_JUMP_SLOT access
Elf32_Rel <0x6710C, 0x4216> ; R_ARM_JUMP_SLOT openlog
Elf32_Rel <0x67110, 0x4416> ; R_ARM_JUMP_SLOT gettimeofday
Elf32_Rel <0x67114, 0x4516> ; R_ARM_JUMP_SLOT sem_trywait
Elf32_Rel <0x67118, 0x4616> ; R_ARM_JUMP_SLOT accept
Elf32_Rel <0x6711C, 0x4716> ; R_ARM_JUMP_SLOT __res_init
Elf32_Rel <0x67120, 0x4816> ; R_ARM_JUMP_SLOT pthread_mutex_unlock
Elf32_Rel <0x67124, 0x4916> ; R_ARM_JUMP_SLOT SSL_read
Elf32_Rel <0x67128, 0x4A16> ; R_ARM_JUMP_SLOT round
Elf32_Rel <0x6712C, 0x4B16> ; R_ARM_JUMP_SLOT BIO_new
Elf32_Rel <0x67130, 0x4C16> ; R_ARM_JUMP_SLOT socket
Elf32_Rel <0x67134, 0x4D16> ; R_ARM_JUMP_SLOT execl
Elf32_Rel <0x67138, 0x4E16> ; R_ARM_JUMP_SLOT getaddrinfo
Elf32_Rel <0x6713C, 0x4F16> ; R_ARM_JUMP_SLOT fflush
Elf32_Rel <0x67140, 0x5016> ; R_ARM_JUMP_SLOT ioctl
Elf32_Rel <0x67144, 0x5116> ; R_ARM_JUMP_SLOT isatty
Elf32_Rel <0x67148, 0x5216> ; R_ARM_JUMP_SLOT SSL_CTX_get_cert_store
Elf32_Rel <0x6714C, 0x5316> ; R_ARM_JUMP_SLOT pthread_mutex_lock
Elf32_Rel <0x67150, 0x5416> ; R_ARM_JUMP_SLOT strlen
Elf32_Rel <0x67154, 0x5516> ; R_ARM_JUMP_SLOT sscanf
Elf32_Rel <0x67158, 0x5616> ; R_ARM_JUMP_SLOT pthread_create
Elf32_Rel <0x6715C, 0x5716> ; R_ARM_JUMP_SLOT execv
Elf32_Rel <0x67160, 0x5816> ; R_ARM_JUMP_SLOT lldiv
Elf32_Rel <0x67164, 0x5916> ; R_ARM_JUMP_SLOT memcpy
Elf32_Rel <0x67168, 0x5A16> ; R_ARM_JUMP_SLOT fopen64
Elf32_Rel <0x6716C, 0x5B16> ; R_ARM_JUMP_SLOT pthread_cond_signal
Elf32_Rel <0x67170, 0x5C16> ; R_ARM_JUMP_SLOT __ctype_tolower_loc
Elf32_Rel <0x67174, 0x5D16> ; R_ARM_JUMP_SLOT localeconv
Elf32_Rel <0x67178, 0x5E16> ; R_ARM_JUMP_SLOT BIO_s_mem
Elf32_Rel <0x6717C, 0x5F16> ; R_ARM_JUMP_SLOT fgetc
Elf32_Rel <0x67180, 0x6016> ; R_ARM_JUMP_SLOT strtol
Elf32_Rel <0x67184, 0x6116> ; R_ARM_JUMP_SLOT strcpy
Elf32_Rel <0x67188, 0x6216> ; R_ARM_JUMP_SLOT sem_post
Elf32_Rel <0x6718C, 0x6316> ; R_ARM_JUMP_SLOT pthread_cond_destroy
Elf32_Rel <0x67190, 0x6416> ; R_ARM_JUMP_SLOT strncat
Elf32_Rel <0x67194, 0x6516> ; R_ARM_JUMP_SLOT X509_STORE_add_cert
Elf32_Rel <0x67198, 0x6616> ; R_ARM_JUMP_SLOT settimeofday
Elf32_Rel <0x6719C, 0x6716> ; R_ARM_JUMP_SLOT pthread_mutex_destroy
Elf32_Rel <0x671A0, 0x6816> ; R_ARM_JUMP_SLOT SSL_connect
Elf32_Rel <0x671A4, 0x6916> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x671A8, 0x6A16> ; R_ARM_JUMP_SLOT open64
Elf32_Rel <0x671AC, 0x6B16> ; R_ARM_JUMP_SLOT raise
Elf32_Rel <0x671B0, 0x6C16> ; R_ARM_JUMP_SLOT errx
Elf32_Rel <0x671B4, 0x6D16> ; R_ARM_JUMP_SLOT strtof
Elf32_Rel <0x671B8, 0x6E16> ; R_ARM_JUMP_SLOT pthread_mutex_init
Elf32_Rel <0x671BC, 0x6F16> ; R_ARM_JUMP_SLOT shutdown
Elf32_Rel <0x671C0, 0x7016> ; R_ARM_JUMP_SLOT bind
Elf32_Rel <0x671C4, 0x7116> ; R_ARM_JUMP_SLOT fdopen
Elf32_Rel <0x671C8, 0x7216> ; R_ARM_JUMP_SLOT strstr
Elf32_Rel <0x671CC, 0x7316> ; R_ARM_JUMP_SLOT nice
Elf32_Rel <0x671D0, 0x7416> ; R_ARM_JUMP_SLOT select
Elf32_Rel <0x671D4, 0x7516> ; R_ARM_JUMP_SLOT close
Elf32_Rel <0x671D8, 0x7616> ; R_ARM_JUMP_SLOT SSL_free
Elf32_Rel <0x671DC, 0x7716> ; R_ARM_JUMP_SLOT fwrite
Elf32_Rel <0x671E0, 0x7816> ; R_ARM_JUMP_SLOT pthread_attr_setstacksize
Elf32_Rel <0x671E4, 0x7916> ; R_ARM_JUMP_SLOT strncasecmp
Elf32_Rel <0x671E8, 0x7A16> ; R_ARM_JUMP_SLOT time
Elf32_Rel <0x671EC, 0x7B16> ; R_ARM_JUMP_SLOT log10
Elf32_Rel <0x671F0, 0x7C16> ; R_ARM_JUMP_SLOT __ctype_b_loc
Elf32_Rel <0x671F4, 0x7D16> ; R_ARM_JUMP_SLOT fprintf
Elf32_Rel <0x671F8, 0x7E16> ; R_ARM_JUMP_SLOT BIO_write
Elf32_Rel <0x671FC, 0x7F16> ; R_ARM_JUMP_SLOT malloc
Elf32_Rel <0x67200, 0x8016> ; R_ARM_JUMP_SLOT sigaction
Elf32_Rel <0x67204, 0x8116> ; R_ARM_JUMP_SLOT sem_timedwait
Elf32_Rel <0x67208, 0x8216> ; R_ARM_JUMP_SLOT pthread_attr_init
Elf32_Rel <0x6720C, 0x8316> ; R_ARM_JUMP_SLOT SSL_get_peer_certificate
Elf32_Rel <0x67210, 0x8416> ; R_ARM_JUMP_SLOT SSL_get_verify_result
Elf32_Rel <0x67214, 0x8516> ; R_ARM_JUMP_SLOT fputc
Elf32_Rel <0x67218, 0x8716> ; R_ARM_JUMP_SLOT strtok
Elf32_Rel <0x6721C, 0x8816> ; R_ARM_JUMP_SLOT OPENSSL_init_ssl
Elf32_Rel <0x67220, 0x8916> ; R_ARM_JUMP_SLOT pthread_rwlock_wrlock
Elf32_Rel <0x67224, 0x8A16> ; R_ARM_JUMP_SLOT sleep
Elf32_Rel <0x67228, 0x8B16> ; R_ARM_JUMP_SLOT send
Elf32_Rel <0x6722C, 0x8C16> ; R_ARM_JUMP_SLOT SSL_shutdown
Elf32_Rel <0x67230, 0x8D16> ; R_ARM_JUMP_SLOT pthread_rwlock_destroy
Elf32_Rel <0x67234, 0x8E16> ; R_ARM_JUMP_SLOT strcat
Elf32_Rel <0x67238, 0x8F16> ; R_ARM_JUMP_SLOT memmove
Elf32_Rel <0x6723C, 0x9016> ; R_ARM_JUMP_SLOT pthread_testcancel
Elf32_Rel <0x67240, 0x9116> ; R_ARM_JUMP_SLOT popen
Elf32_Rel <0x67244, 0x9216> ; R_ARM_JUMP_SLOT X509_verify_cert_error_string
Elf32_Rel <0x67248, 0x9316> ; R_ARM_JUMP_SLOT dup2
Elf32_Rel <0x6724C, 0x9416> ; R_ARM_JUMP_SLOT puts
Elf32_Rel <0x67250, 0x9616> ; R_ARM_JUMP_SLOT getpid
Elf32_Rel <0x67254, 0x9716> ; R_ARM_JUMP_SLOT prctl
Elf32_Rel <0x67258, 0x9816> ; R_ARM_JUMP_SLOT fcntl
Elf32_Rel <0x6725C, 0x9916> ; R_ARM_JUMP_SLOT fork
Elf32_Rel <0x67260, 0x9A16> ; R_ARM_JUMP_SLOT PEM_read_bio_X509
Elf32_Rel <0x67264, 0x9B16> ; R_ARM_JUMP_SLOT SSL_CTX_new
Elf32_Rel <0x67268, 0x9D16> ; R_ARM_JUMP_SLOT __pthread_register_cancel
Elf32_Rel <0x6726C, 0x9E16> ; R_ARM_JUMP_SLOT __pthread_unregister_cancel
Elf32_Rel <0x67270, 0x9F16> ; R_ARM_JUMP_SLOT BIO_free
Elf32_Rel <0x67274, 0xA016> ; R_ARM_JUMP_SLOT vfprintf
Elf32_Rel <0x67278, 0xA116> ; R_ARM_JUMP_SLOT snprintf
Elf32_Rel <0x6727C, 0xA216> ; R_ARM_JUMP_SLOT OPENSSL_init_crypto
Elf32_Rel <0x67280, 0xA316> ; R_ARM_JUMP_SLOT strcspn
Elf32_Rel <0x67284, 0xA416> ; R_ARM_JUMP_SLOT fread
Elf32_Rel <0x67288, 0xA516> ; R_ARM_JUMP_SLOT pthread_cond_init
Elf32_Rel <0x6728C, 0xA616> ; R_ARM_JUMP_SLOT strncmp
Elf32_Rel <0x67290, 0xA716> ; R_ARM_JUMP_SLOT kill
Elf32_Rel <0x67294, 0xA816> ; R_ARM_JUMP_SLOT nanosleep
Elf32_Rel <0x67298, 0xA916> ; R_ARM_JUMP_SLOT pthread_detach
Elf32_Rel <0x6729C, 0xAA16> ; R_ARM_JUMP_SLOT realloc
Elf32_Rel <0x672A0, 0xAB16> ; R_ARM_JUMP_SLOT pthread_rwlock_trywrlock
Elf32_Rel <0x672A4, 0xAC16> ; R_ARM_JUMP_SLOT pthread_setcancelstate
Elf32_Rel <0x672A8, 0xAD16> ; R_ARM_JUMP_SLOT sysinfo
Elf32_Rel <0x672AC, 0xAE16> ; R_ARM_JUMP_SLOT X509_free
Elf32_Rel <0x672B0, 0xAF16> ; R_ARM_JUMP_SLOT getsockopt
Elf32_Rel <0x672B4, 0xB016> ; R_ARM_JUMP_SLOT pipe
Elf32_Rel <0x672B8, 0xB116> ; R_ARM_JUMP_SLOT __strdup
Elf32_Rel <0x672BC, 0xB216> ; R_ARM_JUMP_SLOT setsockopt
Elf32_Rel <0x672C0, 0xB316> ; R_ARM_JUMP_SLOT strpbrk
Elf32_Rel <0x672C4, 0xB416> ; R_ARM_JUMP_SLOT SSL_get_error
Elf32_Rel <0x672C8, 0xB516> ; R_ARM_JUMP_SLOT sem_wait
Elf32_Rel <0x672CC, 0xB616> ; R_ARM_JUMP_SLOT memchr
Elf32_Rel <0x672D0, 0xB816> ; R_ARM_JUMP_SLOT strcmp
Elf32_Rel <0x672D4, 0xB916> ; R_ARM_JUMP_SLOT exit
Elf32_Rel <0x672D8, 0xBA16> ; R_ARM_JUMP_SLOT pthread_setcanceltype
Elf32_Rel <0x672DC, 0xBB16> ; R_ARM_JUMP_SLOT clock_nanosleep
Elf32_Rel <0x672E0, 0xBC16> ; R_ARM_JUMP_SLOT pthread_rwlock_init
Elf32_Rel <0x672E4, 0xBD16> ; R_ARM_JUMP_SLOT __pthread_unwind_next
Elf32_Rel <0x672E8, 0xBE16> ; R_ARM_JUMP_SLOT __errno_location
Elf32_Rel <0x672EC, 0xBF16> ; R_ARM_JUMP_SLOT pthread_self
Elf32_Rel <0x672F0, 0xC016> ; R_ARM_JUMP_SLOT pthread_cancel
Elf32_Rel <0x672F4, 0xC116> ; R_ARM_JUMP_SLOT sprintf
Elf32_Rel <0x672F8, 0xC216> ; R_ARM_JUMP_SLOT pthread_join
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x123FC
CODE32



; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              sub_16608
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x12408
CODE32



; void sub_12408()
sub_12408
PUSH            {LR}
LDR             LR, =(_GLOBAL_OFFSET_TABLE_ - 0x12418)
ADD             LR, PC, LR ; _GLOBAL_OFFSET_TABLE_
LDR             PC, [LR,#(off_67008 - 0x67000)]!
; End of function sub_12408

off_12418 DCD _GLOBAL_OFFSET_TABLE_ - 0x12418
; [0000000C BYTES: COLLAPSED FUNCTION getnameinfo]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_unlock]
; [0000000C BYTES: COLLAPSED FUNCTION X509_check_host]
; [0000000C BYTES: COLLAPSED FUNCTION qsort]
; [0000000C BYTES: COLLAPSED FUNCTION sigemptyset]
; [0000000C BYTES: COLLAPSED FUNCTION strerror]
; [0000000C BYTES: COLLAPSED FUNCTION fileno]
; [0000000C BYTES: COLLAPSED FUNCTION inet_ntop]
; [0000000C BYTES: COLLAPSED FUNCTION mkdir]
; [0000000C BYTES: COLLAPSED FUNCTION __sigsetjmp]
; [0000000C BYTES: COLLAPSED FUNCTION abort]
; [0000000C BYTES: COLLAPSED FUNCTION connect]
; [0000000C BYTES: COLLAPSED FUNCTION TLS_client_method]
; [0000000C BYTES: COLLAPSED FUNCTION localtime]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_rdlock]
; [0000000C BYTES: COLLAPSED FUNCTION memcmp]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_CTX_free]
; [0000000C BYTES: COLLAPSED FUNCTION sysconf]
; [0000000C BYTES: COLLAPSED FUNCTION syslog]
; [0000000C BYTES: COLLAPSED FUNCTION clock_gettime]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION signal]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_get_current_cipher]
; [0000000C BYTES: COLLAPSED FUNCTION sched_yield]
; [0000000C BYTES: COLLAPSED FUNCTION __isoc99_sscanf]
; [0000000C BYTES: COLLAPSED FUNCTION vsnprintf]
; [0000000C BYTES: COLLAPSED FUNCTION inet_addr]
; [0000000C BYTES: COLLAPSED FUNCTION strncpy]
; [0000000C BYTES: COLLAPSED FUNCTION fclose]
; [0000000C BYTES: COLLAPSED FUNCTION fgets]
; [0000000C BYTES: COLLAPSED FUNCTION recv]
; [0000000C BYTES: COLLAPSED FUNCTION getenv]
; [0000000C BYTES: COLLAPSED FUNCTION strtod]
; [0000000C BYTES: COLLAPSED FUNCTION strchr]
; [0000000C BYTES: COLLAPSED FUNCTION strcasecmp]
; [0000000C BYTES: COLLAPSED FUNCTION dirname]
; [0000000C BYTES: COLLAPSED FUNCTION setlogmask]
; [0000000C BYTES: COLLAPSED FUNCTION pclose]
; [0000000C BYTES: COLLAPSED FUNCTION listen]
; [0000000C BYTES: COLLAPSED FUNCTION calloc]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_write]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_wait]
; [0000000C BYTES: COLLAPSED FUNCTION sem_init]
; [0000000C BYTES: COLLAPSED FUNCTION stpcpy]
; [0000000C BYTES: COLLAPSED FUNCTION memset]
; [0000000C BYTES: COLLAPSED FUNCTION sem_destroy]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_timedwait]
; [0000000C BYTES: COLLAPSED FUNCTION freeaddrinfo]
; [0000000C BYTES: COLLAPSED FUNCTION perror]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_set_fd]
; [0000000C BYTES: COLLAPSED FUNCTION strtoll]
; [0000000C BYTES: COLLAPSED FUNCTION floor]
; [0000000C BYTES: COLLAPSED FUNCTION __assert_fail]
; [0000000C BYTES: COLLAPSED FUNCTION exp]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_broadcast]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_CIPHER_get_name]
; [0000000C BYTES: COLLAPSED FUNCTION usleep]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_trylock]
; [0000000C BYTES: COLLAPSED FUNCTION free]
; [0000000C BYTES: COLLAPSED FUNCTION read]
; [0000000C BYTES: COLLAPSED FUNCTION write]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_new]
; [0000000C BYTES: COLLAPSED FUNCTION access]
; [0000000C BYTES: COLLAPSED FUNCTION openlog]
; [0000000C BYTES: COLLAPSED FUNCTION gettimeofday]
; [0000000C BYTES: COLLAPSED FUNCTION sem_trywait]
; [0000000C BYTES: COLLAPSED FUNCTION accept]
; [0000000C BYTES: COLLAPSED FUNCTION __res_init]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_unlock]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_read]
; [0000000C BYTES: COLLAPSED FUNCTION round]
; [0000000C BYTES: COLLAPSED FUNCTION BIO_new]
; [0000000C BYTES: COLLAPSED FUNCTION socket]
; [0000000C BYTES: COLLAPSED FUNCTION execl]
; [0000000C BYTES: COLLAPSED FUNCTION getaddrinfo]
; [0000000C BYTES: COLLAPSED FUNCTION fflush]
; [0000000C BYTES: COLLAPSED FUNCTION ioctl]
; [0000000C BYTES: COLLAPSED FUNCTION isatty]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_CTX_get_cert_store]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_lock]
; [0000000C BYTES: COLLAPSED FUNCTION strlen]
; [0000000C BYTES: COLLAPSED FUNCTION sscanf]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_create]
; [0000000C BYTES: COLLAPSED FUNCTION execv]
; [0000000C BYTES: COLLAPSED FUNCTION lldiv]
; [0000000C BYTES: COLLAPSED FUNCTION memcpy]
; [0000000C BYTES: COLLAPSED FUNCTION fopen64]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_signal]
; [0000000C BYTES: COLLAPSED FUNCTION __ctype_tolower_loc]
; [0000000C BYTES: COLLAPSED FUNCTION localeconv]
; [0000000C BYTES: COLLAPSED FUNCTION BIO_s_mem]
; [0000000C BYTES: COLLAPSED FUNCTION fgetc]
; [0000000C BYTES: COLLAPSED FUNCTION strtol]
; [0000000C BYTES: COLLAPSED FUNCTION strcpy]
; [0000000C BYTES: COLLAPSED FUNCTION sem_post]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_destroy]
; [0000000C BYTES: COLLAPSED FUNCTION strncat]
; [0000000C BYTES: COLLAPSED FUNCTION X509_STORE_add_cert]
; [0000000C BYTES: COLLAPSED FUNCTION settimeofday]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_destroy]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_connect]
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION open64]
; [0000000C BYTES: COLLAPSED FUNCTION raise]
; [0000000C BYTES: COLLAPSED FUNCTION errx]
; [0000000C BYTES: COLLAPSED FUNCTION strtof]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_init]
; [0000000C BYTES: COLLAPSED FUNCTION shutdown]
; [0000000C BYTES: COLLAPSED FUNCTION bind]
; [0000000C BYTES: COLLAPSED FUNCTION fdopen]
; [0000000C BYTES: COLLAPSED FUNCTION strstr]
; [0000000C BYTES: COLLAPSED FUNCTION nice]
; [0000000C BYTES: COLLAPSED FUNCTION select]
; [0000000C BYTES: COLLAPSED FUNCTION close]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_free]
; [0000000C BYTES: COLLAPSED FUNCTION fwrite]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_attr_setstacksize]
; [0000000C BYTES: COLLAPSED FUNCTION strncasecmp]
; [0000000C BYTES: COLLAPSED FUNCTION time]
; [0000000C BYTES: COLLAPSED FUNCTION log10]
; [0000000C BYTES: COLLAPSED FUNCTION __ctype_b_loc]
; [0000000C BYTES: COLLAPSED FUNCTION fprintf]
; [0000000C BYTES: COLLAPSED FUNCTION BIO_write]
; [0000000C BYTES: COLLAPSED FUNCTION malloc]
; [0000000C BYTES: COLLAPSED FUNCTION sigaction]
; [0000000C BYTES: COLLAPSED FUNCTION sem_timedwait]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_attr_init]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_get_peer_certificate]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_get_verify_result]
; [0000000C BYTES: COLLAPSED FUNCTION fputc]
; [0000000C BYTES: COLLAPSED FUNCTION strtok]
; [0000000C BYTES: COLLAPSED FUNCTION OPENSSL_init_ssl]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_wrlock]
; [0000000C BYTES: COLLAPSED FUNCTION sleep]
; [0000000C BYTES: COLLAPSED FUNCTION send]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_shutdown]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_destroy]
; [0000000C BYTES: COLLAPSED FUNCTION strcat]
; [0000000C BYTES: COLLAPSED FUNCTION memmove]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_testcancel]
; [0000000C BYTES: COLLAPSED FUNCTION popen]
; [0000000C BYTES: COLLAPSED FUNCTION X509_verify_cert_error_string]
; [0000000C BYTES: COLLAPSED FUNCTION dup2]
; [0000000C BYTES: COLLAPSED FUNCTION puts]
; [0000000C BYTES: COLLAPSED FUNCTION getpid]
; [0000000C BYTES: COLLAPSED FUNCTION prctl]
; [0000000C BYTES: COLLAPSED FUNCTION fcntl]
; [0000000C BYTES: COLLAPSED FUNCTION fork]
; [0000000C BYTES: COLLAPSED FUNCTION PEM_read_bio_X509]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_CTX_new]
; [0000000C BYTES: COLLAPSED FUNCTION __pthread_register_cancel]
; [0000000C BYTES: COLLAPSED FUNCTION __pthread_unregister_cancel]
; [0000000C BYTES: COLLAPSED FUNCTION BIO_free]
; [0000000C BYTES: COLLAPSED FUNCTION vfprintf]
; [0000000C BYTES: COLLAPSED FUNCTION snprintf]
; [0000000C BYTES: COLLAPSED FUNCTION OPENSSL_init_crypto]
; [0000000C BYTES: COLLAPSED FUNCTION strcspn]
; [0000000C BYTES: COLLAPSED FUNCTION fread]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_init]
; [0000000C BYTES: COLLAPSED FUNCTION strncmp]
; [0000000C BYTES: COLLAPSED FUNCTION kill]
; [0000000C BYTES: COLLAPSED FUNCTION nanosleep]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_detach]
; [0000000C BYTES: COLLAPSED FUNCTION realloc]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_trywrlock]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_setcancelstate]
; [0000000C BYTES: COLLAPSED FUNCTION sysinfo]
; [0000000C BYTES: COLLAPSED FUNCTION X509_free]
; [0000000C BYTES: COLLAPSED FUNCTION getsockopt]
; [0000000C BYTES: COLLAPSED FUNCTION pipe]
; [0000000C BYTES: COLLAPSED FUNCTION __strdup]
; [0000000C BYTES: COLLAPSED FUNCTION setsockopt]
; [0000000C BYTES: COLLAPSED FUNCTION strpbrk]
; [0000000C BYTES: COLLAPSED FUNCTION SSL_get_error]
; [0000000C BYTES: COLLAPSED FUNCTION sem_wait]
; [0000000C BYTES: COLLAPSED FUNCTION memchr]
; [0000000C BYTES: COLLAPSED FUNCTION strcmp]
; [0000000C BYTES: COLLAPSED FUNCTION exit]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_setcanceltype]
; [0000000C BYTES: COLLAPSED FUNCTION clock_nanosleep]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_init]
; [0000000C BYTES: COLLAPSED FUNCTION __pthread_unwind_next]
; [0000000C BYTES: COLLAPSED FUNCTION __errno_location]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_self]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cancel]
; [0000000C BYTES: COLLAPSED FUNCTION sprintf]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_join]

; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x12CEC
CODE32
ALIGN 0x10
; LOAD ends


; Segment type: Pure code
AREA .text, CODE, ALIGN=3
; ORG 0x12CF0
CODE32


; Attributes: bp-based frame fpd=0xFFFFFFD0

; int main(int, char **, char **)
main

var_2A3C= -0x2A3C
var_2A38= -0x2A38
var_2A34= -0x2A34
var_2A2C= -0x2A2C
var_1A24= -0x1A24
var_A2C= -0xA2C
var_A1C= -0xA1C
var_A18= -0xA18
var_A14= -0xA14
var_A10= -0xA10
var_A0C= -0xA0C
var_A08= -0xA08
var_A04= -0xA04
var_A00= -0xA00
var_9FC= -0x9FC
var_9F8= -0x9F8
var_9F4= -0x9F4
var_9F0= -0x9F0
var_9EC= -0x9EC
format= -0x9E8
var_9E4= -0x9E4
var_9E0= -0x9E0
var_9D8= -0x9D8
var_9D0= -0x9D0
var_9B0= -0x9B0
s= -0x990
var_980= -0x980
var_90C= -0x90C
var_904= -0x904
var_900= -0x900
var_804= -0x804

PUSH            {R4-R11,LR}
MOVW            R3, #:lower16:byte_685B8
VPUSH           {D8-D9}
ADD             R11, SP, #0x30
SUB             SP, SP, #0xA20
MOV             R4, #0
SUB             SP, SP, #0xC
STR             R0, [R11,#-0x30+var_9E0]
SUB             R0, R11, #-(-0x30+var_9B0)
MOV             R5, R3
SUB             R0, R0, #4 ; attr
MOV             R6, R1
STR             R1, [R11,#-0x30+var_9E4]
STR             R4, [R11,#-0x30+var_9D8]
BL              pthread_attr_init
MOV             R3, R5
SUB             R0, R11, #-(-0x30+var_9B0)
MOVT            R3, #:upper16:byte_685B8
MOV             R1, #0x200000 ; stacksize
SUB             R0, R0, #4 ; attr
MOV             R5, R3
STR             R3, [R11,#-0x30+var_9F4]
BL              pthread_attr_setstacksize
SUB             R0, R11, #-(-0x30+var_900)
MOV             R1, R4  ; c
MOV             R2, #0x100 ; n
STRB            R4, [R5]
SUB             R0, R0, #4 ; s
LDR             R7, [R6]
BL              memset
MOV             R1, R4  ; c
MOV             R2, #0x40 ; '@' ; n
SUB             R0, R11, #-(-0x30+s) ; s
BL              memset
MOVW            R2, #:lower16:aPidofS ; "pidof %s"
MOV             R3, R7
MOVT            R2, #:upper16:aPidofS ; "pidof %s"
MOV             R1, #0x40 ; '@' ; maxlen
SUB             R0, R11, #-(-0x30+s) ; s
BL              snprintf
MOVW            R1, #:lower16:(aMiner+4) ; "r"
SUB             R0, R11, #-(-0x30+s) ; command
MOVT            R1, #:upper16:(aMiner+4) ; modes
BL              popen
SUBS            R8, R0, #0
BEQ             loc_130C8
MOVW            R6, #:lower16:byte_686E1
MOVW            R9, #:lower16:byte_72D90
MOVW            R10, #:lower16:aStrlenIsD ; "strlen is: %d\n"
MOVT            R6, #:upper16:byte_686E1
MOVT            R9, #:upper16:byte_72D90
MOVT            R10, #:upper16:aStrlenIsD ; "strlen is: %d\n"

loc_12DC0
SUB             R0, R11, #-(-0x30+var_900)
MOV             R2, R8  ; stream
MOV             R1, #0x100 ; n
SUB             R0, R0, #4 ; s
BL              fgets
CMP             R0, #0
BEQ             loc_12ED4
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_12DC0
LDRB            R3, [R9]
CMP             R3, #0
BNE             loc_12E1C
MOV             R3, #byte_686E0
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_12E1C
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_12E78

loc_12E1C
SUB             R4, R11, #-(-0x30+var_804+4)
SUB             R3, R11, #-(-0x30+var_900)
SUB             R4, R4, #4
SUB             R3, R3, #4
MOVW            R2, #:lower16:aPidofSCommandR ; "pidof %s command result is: %s\n"
STR             R3, [SP,#0xA2C+var_A2C]
MOVT            R2, #:upper16:aPidofSCommandR ; "pidof %s command result is: %s\n"
MOV             R3, R7
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_12DC0
LDRB            R3, [R9]
CMP             R3, #0
MOVEQ           R3, #byte_686E0
BNE             loc_12EA0

loc_12E78
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_12E98
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_12DC0

loc_12E98
SUB             R4, R11, #-(-0x30+var_804+4)
SUB             R4, R4, #4

loc_12EA0
SUB             R0, R11, #-(-0x30+var_900)
SUB             R0, R0, #4 ; s
BL              strlen
MOV             R2, R10 ; format
MOV             R3, R0
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_12DC0

loc_12ED4
MOVW            R3, #:lower16:aParsedProcIdIs ; "Parsed proc id is: %d\n"
MOV             R5, R0
MOV             R4, R3
MOV             R0, R8  ; stream
BL              pclose
MOV             R3, R4
MOVW            R9, #:lower16:byte_686E1
MOVW            R10, #:lower16:byte_72D90
MOVT            R3, #:upper16:aParsedProcIdIs ; "Parsed proc id is: %d\n"
SUB             R6, R11, #-(-0x30+var_900)
MOV             R8, R5
MOVT            R9, #:upper16:byte_686E1
MOVT            R10, #:upper16:byte_72D90
STR             R3, [R11,#-0x30+format]
SUB             R6, R6, #4
MOV             R4, #1
B               loc_12F1C

loc_12F18
ADD             R4, R4, #1

loc_12F1C
SUB             R0, R11, #-(-0x30+var_900)
SUB             R0, R0, #4 ; s
BL              strlen
CMP             R0, R4
BCC             loc_1301C
SUB             R0, R11, #-(-0x30+var_9D0)
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
SUB             R0, R0, #4 ; s
BL              memset
BL              __ctype_b_loc
LDRB            R3, [R6],#1
LDR             R2, [R0]
MOV             R3, R3,LSL#1
LDRH            R3, [R2,R3]
TST             R3, #0x2000
BEQ             loc_12F18
SUB             R3, R11, #-(-0x30+var_900)
SUB             R2, R4, R5
SUB             R3, R3, #4
SUB             R0, R11, #-(-0x30+var_9D0)
ADD             R1, R3, R5 ; src
SUB             R2, R2, #1 ; n
SUB             R0, R0, #4 ; dest
BL              strncpy
SUB             R0, R11, #-(-0x30+var_9D0)
MOV             R2, #0xA ; base
SUB             R0, R0, #4 ; nptr
MOV             R1, #0  ; endptr
BL              strtol
SUBS            R3, R0, #0
BLE             loc_13014
LDRB            R2, [R9]
ADD             R8, R8, #1
CMP             R2, #0
BEQ             loc_13014
LDRB            R2, [R10]
CMP             R2, #0
BNE             loc_12FCC
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_13000

loc_12FCC
SUB             R2, R11, #-(-0x30+var_804+4)
MOV             R1, #0x800 ; maxlen
SUB             R2, R2, #4
MOV             R5, R4
STR             R2, [R11,#-0x30+var_9EC]
MOV             R0, R2  ; s
LDR             R2, [R11,#-0x30+format] ; format
BL              snprintf
LDR             R1, [R11,#-0x30+var_9EC]
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_12F18

loc_13000
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BGT             loc_12FCC

loc_13014
MOV             R5, R4
B               loc_12F18

loc_1301C
CMP             R8, #0
BEQ             loc_13148
MOV             R10, #byte_72D90
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_1304C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_13F60

loc_1304C
SUB             R9, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aDInstanceOfSIs ; " %d instance of %s is  already Running "...
SUB             R9, R9, #4
MOVT            R2, #:upper16:aDInstanceOfSIs ; " %d instance of %s is  already Running "...
MOV             R1, #0x800 ; maxlen
STR             R7, [SP,#0xA2C+var_A2C]
MOV             R0, R9  ; s
MOV             R3, R8
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_13080
CMP             R8, #1
BEQ             loc_13148
LDR             R3, [R11,#-0x30+var_9E4]
MOVW            R2, #:lower16:aSIsForbiddenTo ; "%s is forbidden to start twice, will ex"...
SUB             R0, R11, #-(-0x30+var_804+4)
MOVT            R2, #:upper16:aSIsForbiddenTo ; "%s is forbidden to start twice, will ex"...
MOV             R1, #0x800 ; maxlen
SUB             R0, R0, #4 ; s
LDR             R3, [R3]
BL              snprintf
SUB             R1, R11, #-(-0x30+var_804+4)
MOV             R0, #3
SUB             R1, R1, #4
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #0
MOV             R0, #0xFFFFFFFF
BL              sub_2C230

loc_130C8
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_13148
MOV             R10, #byte_72D90
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_13118
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_13118
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_13148

loc_13118
SUB             R9, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aAppServiceSNot ; " app-service:%s Not Found!!!"
SUB             R9, R9, #4
MOVT            R2, #:upper16:aAppServiceSNot ; " app-service:%s Not Found!!!"
MOV             R1, #0x800 ; maxlen
MOV             R3, R7
MOV             R0, R9  ; s
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_13148
MOVW            R3, #:lower16:aBmminerLog ; "bmminer.log"
MOVW            LR, #:lower16:word_540E4
MOVT            R3, #:upper16:aBmminerLog ; "bmminer.log"
MOVT            LR, #:upper16:word_540E4
LDM             R3!, {R0-R2} ; "bmminer.log"
MOVW            R12, #:lower16:dword_685E0
MOVW            R5, #:lower16:word_685C0
MOVT            R12, #:upper16:dword_685E0
LDRB            R3, [LR,#(byte_540E6 - 0x540E4)]
MOVT            R5, #:upper16:word_685C0
LDRH            R4, [LR]
STR             R2, [R12,#(dword_685E8 - 0x685E0)]
STRB            R3, [R5,#(byte_685C2 - 0x685C0)]
STR             R0, [R12]
MOV             R0, #0x54 ; 'T' ; name
STR             R1, [R12,#(dword_685E4 - 0x685E0)]
STRH            R4, [R5]
MOVW            R4, #:lower16:byte_686E8
STR             R5, [R11,#-0x30+var_9F8]
MOVT            R4, #:upper16:byte_686E8
BL              sysconf
CMP             R0, #1
LDR             R0, [R11,#-0x30+var_9E0]
MOVWEQ          R3, #:lower16:off_67964
MOVWEQ          R2, #:lower16:sched_yield
MOVTEQ          R3, #:upper16:off_67964
MOVTEQ          R2, #:upper16:sched_yield
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, R0, #1
STREQ           R2, [R3]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2F4B
LDR             R2, =aMain ; "main"
MOV             R0, R0,LSL#2
STR             R4, [R11,#-0x30+format]
BL              sub_1F828
LDR             R3, [R11,#-0x30+var_9E0]
MOV             R5, R0
STR             R0, [R4,#(dword_68B64 - 0x686E8)]
CMP             R3, #0
BLE             loc_13218
LDR             R3, [R11,#-0x30+var_9E4]
SUB             R6, R0, #4
MOV             R4, #0
SUB             R7, R3, #4

loc_131FC               ; s
LDR             R0, [R7,#4]!
ADD             R4, R4, #1
BL              __strdup
STR             R0, [R6,#4]!
LDR             R3, [R11,#-0x30+var_9E0]
CMP             R3, R4
BGT             loc_131FC

loc_13218
MOV             R4, #0
MOVW            R0, #:lower16:stru_72ED8
STR             R4, [R5,R3,LSL#2]
MOVT            R0, #:upper16:stru_72ED8
MOVW            R3, #:lower16:byte_6A6E0
MOVW            R2, #0x2F54
LDR             R1, =aMain ; "main"
MOV             R5, R3
BL              sub_2CA10
MOVW            R0, #:lower16:stru_76018
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_76018
MOVW            R2, #0x2F55
BL              sub_2CA10
MOVW            R0, #:lower16:stru_74FE4
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_74FE4
MOVW            R2, #0x2F56
BL              sub_2CA10
MOVW            R0, #:lower16:stru_76148
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_76148
MOVW            R2, #0x2F57
BL              sub_2CABC
MOVW            R0, #:lower16:stru_72D94
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_72D94
MOVW            R2, #0x2F58
BL              sub_2CA10
MOV             R3, R5
LDR             R1, =aMain ; "main"
MOVT            R3, #:upper16:byte_6A6E0
MOVW            R2, #0x2F59
LDR             R0, =stru_68C7C
MOV             R5, R3
STR             R3, [R11,#-0x30+var_9EC]
BL              sub_2CA10
MOVW            R0, #:lower16:stru_76110
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_76110
MOVW            R2, #0x2F5A
BL              sub_2CABC
LDR             R1, =aMain ; "main"
MOVW            R2, #0x2F5B
LDR             R0, =stru_68C54
BL              sub_2CA10
SUB             R0, R5, #0x530
LDR             R1, =aMain ; "main"
MOVW            R2, #0x2F5C
BL              sub_2CA94
MOVW            R0, #:lower16:stru_72E9C
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_72E9C
MOVW            R2, #0x2F5D
BL              sub_2CA94
MOVW            R0, #:lower16:stru_74F90
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_74F90
MOVW            R2, #0x2F5E
BL              sub_2CA94
MOVW            R0, #:lower16:stru_74FC0
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_74FC0
MOVW            R2, #0x2F5F
BL              sub_2CA94
LDR             R1, =aMain ; "main"
MOVW            R2, #0x2F61
LDR             R0, =mutex
BL              sub_2CA10
MOV             R1, R4  ; cond_attr
LDR             R0, =cond ; cond
BL              pthread_cond_init
SUBS            R5, R0, #0
BNE             loc_14008
MOVW            R0, #:lower16:stru_74F6C
MOVW            R2, #0x2F68
MOVT            R0, #:upper16:stru_74F6C
LDR             R1, =aMain ; "main"
BL              sub_2CA10
MOVW            R0, #:lower16:stru_76198
MOV             R1, R5  ; cond_attr
MOVT            R0, #:upper16:stru_76198 ; cond
BL              pthread_cond_init
SUBS            R4, R0, #0
BNE             loc_145BC
MOVW            R0, #:lower16:stru_72E68
MOV             R1, R4  ; cond_attr
MOVT            R0, #:upper16:stru_72E68 ; cond
BL              pthread_cond_init
SUBS            R5, R0, #0
BNE             loc_14654
BL              sub_1FFFC
MOVW            R3, #:lower16:dword_74F60
CMP             R0, #0
MOVT            R3, #:upper16:dword_74F60
MOV             R4, R0
STR             R0, [R3]
BEQ             loc_14448
LDR             R12, [R11,#-0x30+format]
MOVW            R1, #:lower16:a10 ; "1.0."
ADD             R4, R0, #0xC
MOVT            R1, #:upper16:a10 ; "1.0."
MOVW            R3, #:lower16:aCgminer_0 ; "cgminer"
MOVW            R2, #:lower16:aSS ; "%s %s"
STR             R1, [SP,#0xA2C+var_A2C]
MOVT            R3, #:upper16:aCgminer_0 ; "cgminer"
STR             R4, [R12,#(dword_68B20 - 0x686E8)]
MOV             R1, #0x100 ; maxlen
MOVT            R2, #:upper16:aSS ; "%s %s"
LDR             R0, =s  ; s
BL              snprintf
SUB             R2, R11, #-(-0x30+var_980)
MOVW            R3, #:lower16:sub_2C30C
SUB             R2, R2, #4
MOVT            R3, #:upper16:sub_2C30C
SUB             R0, R2, #8 ; set
STR             R3, [R11,#-0x30+s]
STR             R5, [R11,#-0x30+var_90C]
MOVW            R4, #:lower16:dword_76230
BL              sigemptyset
MOVW            R2, #:lower16:stru_72DD0
SUB             R1, R11, #-(-0x30+s) ; act
MOVT            R2, #:upper16:stru_72DD0 ; oact
MOV             R0, #0xF ; sig
BL              sigaction
MOVW            R2, #:lower16:stru_76084
SUB             R1, R11, #-(-0x30+s) ; act
MOVT            R2, #:upper16:stru_76084 ; oact
MOV             R0, #2  ; sig
BL              sigaction
MOVW            R2, #:lower16:stru_76238
SUB             R1, R11, #-(-0x30+s) ; act
MOVT            R2, #:upper16:stru_76238 ; oact
MOV             R0, #6  ; sig
BL              sigaction
MOVW            R3, #:lower16:aUsrBin ; "/usr/bin"
SUB             SP, SP, #0x1000
MOVT            R3, #:upper16:aUsrBin ; "/usr/bin"
SUB             SP, SP, #8
LDM             R3, {R0-R2} ; "/usr/bin"
ADD             R12, SP, #0x1A34+var_1A24
MOV             R3, R12
SUB             SP, SP, #0x1000
SUB             SP, SP, #8
MOVW            R5, #:lower16:dword_76070
ADD             LR, SP, #0x2A3C+var_2A2C
MOVT            R4, #:upper16:dword_76230
STM             R3!, {R0,R1}
MOVT            R5, #:upper16:dword_76070
LDR             R1, [R11,#-0x30+var_9E4]
MOVW            R8, #:lower16:(aBmminer+8) ; "/"
STR             R12, [R4]
MOVT            R8, #:upper16:(aBmminer+8) ; "/"
STR             LR, [R5]
STRB            R2, [R3]
LDR             R0, [R1] ; s
STR             R4, [R11,#-0x30+var_A00]
MOV             R4, #0x24 ; '$'
STR             R8, [R11,#-0x30+var_9FC]
BL              __strdup
LDR             R7, [R5]
MOV             R6, R0
BL              dirname
MOV             R1, R0  ; src
MOV             R0, R7  ; dest
BL              strcpy
MOV             R0, R6  ; ptr
BL              free
LDR             R5, [R5]
MOV             R0, R5  ; s
BL              strlen
LDRH            R3, [R8] ; "/"
MOVW            R1, #0x2F97
LDR             LR, [R11,#-0x30+var_9EC]
MOV             R12, #9
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
STRH            R3, [R5,R0]
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
STR             R12, [LR,#(dword_6A45C - 0x6A6E0)]
MOV             R0, #0x68 ; 'h'
LDR             R3, =aMain ; "main"
STR             R1, [SP,#0x2A3C+var_2A3C]
MOV             R1, #1
BL              sub_1F8B0
MOVW            R3, #:lower16:word_55C44
MOV             R5, R0
MOVT            R3, #:upper16:word_55C44
LDRH            R6, [R3]

loc_13508               ; s
MOV             R0, R5
BL              strlen
SUBS            R4, R4, #1
STRH            R6, [R5,R0]
BNE             loc_13508
ADD             R10, R0, #1
MOVW            R12, #0x79B9
CMP             R10, #0xB
MOVW            R6, #0xBEEF
MOVT            R12, #0x9E37
STR             R10, [R11,#-0x30+var_9F0]
MOVT            R6, #0xFEED
MOV             R3, R12
BLS             loc_145B0
ADD             R9, R5, #0xC

loc_13544
LDRB            R0, [R9,#-6]
SUB             R10, R10, #0xC
LDRB            R2, [R9,#-2]
CMP             R10, #0xB
LDRB            R1, [R9,#-0xA]
LDRB            R4, [R9,#-7]
LDRB            LR, [R9,#-3]
MOV             R0, R0,LSL#16
LDRB            R7, [R9,#-0xB]
MOV             R2, R2,LSL#16
MOV             R1, R1,LSL#16
LDRB            R8, [R9,#-5]
ADD             R0, R0, R4,LSL#8
LDRB            R4, [R9,#-8]
ADD             R2, R2, LR,LSL#8
LDRB            LR, [R9,#-0xC]
ADD             R1, R1, R7,LSL#8
LDRB            R7, [R9,#-4]
ADD             R0, R0, R4
LDRB            R4, [R9,#-9]
ADD             R1, R1, LR
LDRB            LR, [R9,#-1]
ADD             R0, R0, R8,LSL#24
ADD             R2, R2, R7
ADD             R1, R1, R4,LSL#24
ADD             R12, R0, R12
ADD             R2, R2, LR,LSL#24
MOV             R0, R9
SUB             R1, R1, R12
ADD             R2, R2, R6
ADD             R9, R9, #0xC
SUB             R1, R1, R2
SUB             R12, R12, R2
ADD             R3, R1, R3
EOR             R3, R3, R2,LSR#13
SUB             R1, R12, R3
SUB             R2, R2, R3
EOR             R1, R1, R3,LSL#8
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#13
SUB             R3, R3, R2
SUB             R1, R1, R2
EOR             R3, R3, R2,LSR#12
SUB             R1, R1, R3
SUB             R2, R2, R3
EOR             R1, R1, R3,LSL#16
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#5
SUB             R3, R3, R2
SUB             R12, R1, R2
EOR             R3, R3, R2,LSR#3
SUB             R12, R12, R3
SUB             R2, R2, R3
EOR             R12, R12, R3,LSL#10
SUB             R2, R2, R12
EOR             R6, R2, R12,LSR#15
BHI             loc_13544

loc_13630
LDR             R2, [R11,#-0x30+var_9F0]
SUB             R10, R10, #1
ADD             R6, R2, R6
CMP             R10, #0xA ; switch 11 cases
LDRLS           PC, [PC,R10,LSL#2] ; switch jump
B               def_13640 ; jumptable 00013640 default case
jpt_13640 DCD loc_136C4 ; jump table for switch statement
DCD loc_136BC
DCD loc_136B4
DCD loc_136AC
DCD loc_136A4
DCD loc_1369C
DCD loc_13694
DCD loc_1368C
DCD loc_13684
DCD loc_1367C
DCD loc_13674

loc_13674               ; jumptable 00013640 case 10
LDRB            R2, [R0,#0xA]
ADD             R6, R6, R2,LSL#24

loc_1367C               ; jumptable 00013640 case 9
LDRB            R2, [R0,#9]
ADD             R6, R6, R2,LSL#16

loc_13684               ; jumptable 00013640 case 8
LDRB            R2, [R0,#8]
ADD             R6, R6, R2,LSL#8

loc_1368C               ; jumptable 00013640 case 7
LDRB            R2, [R0,#7]
ADD             R12, R12, R2,LSL#24

loc_13694               ; jumptable 00013640 case 6
LDRB            R2, [R0,#6]
ADD             R12, R12, R2,LSL#16

loc_1369C               ; jumptable 00013640 case 5
LDRB            R2, [R0,#5]
ADD             R12, R12, R2,LSL#8

loc_136A4               ; jumptable 00013640 case 4
LDRB            R2, [R0,#4]
ADD             R12, R12, R2

loc_136AC               ; jumptable 00013640 case 3
LDRB            R2, [R0,#3]
ADD             R3, R3, R2,LSL#24

loc_136B4               ; jumptable 00013640 case 2
LDRB            R2, [R0,#2]
ADD             R3, R3, R2,LSL#16

loc_136BC               ; jumptable 00013640 case 1
LDRB            R2, [R0,#1]
ADD             R3, R3, R2,LSL#8

loc_136C4               ; jumptable 00013640 case 0
LDRB            R2, [R0]
ADD             R3, R3, R2

def_13640               ; jumptable 00013640 default case
SUB             R3, R3, R12
SUB             R12, R12, R6
SUB             R3, R3, R6
STR             R5, [R5,#0x58]
EOR             R3, R3, R6,LSR#13
MOV             R0, R5  ; s
SUB             R12, R12, R3
SUB             R6, R6, R3
EOR             R12, R12, R3,LSL#8
SUB             R2, R6, R12
SUB             R3, R3, R12
EOR             R2, R2, R12,LSR#13
SUB             R3, R3, R2
SUB             R1, R12, R2
EOR             R3, R3, R2,LSR#12
SUB             R1, R1, R3
SUB             R2, R2, R3
EOR             R1, R1, R3,LSL#16
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#5
SUB             R3, R3, R2
SUB             R1, R1, R2
EOR             R3, R3, R2,LSR#3
SUB             R4, R1, R3
SUB             R2, R2, R3
EOR             R3, R4, R3,LSL#10
SUB             R4, R2, R3
EOR             R4, R4, R3,LSR#15
STR             R4, [R5,#0x60]
BL              strlen
LDR             R3, [R11,#-0x30+var_9EC]
STR             R0, [R5,#0x5C]
LDR             R6, [R3,#(dword_6A1D0 - 0x6A6E0)]
CMP             R6, #0
BEQ             loc_1448C
LDR             R3, [R6,#0x44]
MOV             R2, #0
STR             R2, [R5,#0x4C]
ADD             R7, R5, #0x44 ; 'D'
STR             R3, [R5,#0x44]
LDR             R2, [R6,#0x44]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R5,#0x48]
LDR             R3, [R6,#0x44]
LDR             R3, [R3,#0x10]
STR             R5, [R3,#8]
LDR             R3, [R6,#0x44]
STR             R7, [R3,#0x10]

loc_13798
LDR             R3, [R11,#-0x30+var_9EC]
MOV             R0, #0xC
MOV             R1, #0
LDR             R3, [R3,#(dword_6A1D0 - 0x6A6E0)]
LDR             R12, [R3,#0x44]
LDR             R2, [R12,#0xC]
ADD             R2, R2, #1
STR             R2, [R12,#0xC]
LDR             R2, [R3,#0x44]
LDM             R2, {R2,R12}
SUB             R12, R12, #1
AND             R4, R4, R12
MUL             R4, R0, R4
ADD             R2, R2, R4
LDR             R0, [R2,#4]
ADD             R0, R0, #1
STR             R0, [R2,#4]
LDR             R2, [R3,#0x44]
LDR             R2, [R2]
LDR             R2, [R2,R4]
STR             R1, [R5,#0x50]
STR             R2, [R5,#0x54]
LDR             R2, [R3,#0x44]
LDR             R1, [R2]
LDR             R1, [R1,R4]
CMP             R1, #0
STRNE           R7, [R1,#0xC]
LDRNE           R2, [R3,#0x44]
LDR             R1, [R2]
MOV             R2, #0xA
STR             R7, [R1,R4]
LDR             R3, [R3,#0x44]
LDR             R3, [R3]
ADD             R4, R3, R4
LDR             R1, [R4,#8]
LDR             R3, [R4,#4]
MLA             R2, R1, R2, R2
CMP             R3, R2
BCC             loc_139C8
LDR             R3, [R5,#0x44]
LDR             R2, [R3,#0x24]
CMP             R2, #1
BEQ             loc_139C8
LDR             R3, [R3,#4]
MOV             R0, #0x18
MOV             R1, #1  ; size
MUL             R0, R0, R3 ; nmemb
BL              calloc
SUBS            R7, R0, #0
BEQ             loc_144AC
LDR             R2, [R5,#0x44]
MOV             R1, #0
MOV             R9, R1
STR             R1, [R11,#-0x30+var_9F0]
LDR             R3, [R2,#4]
LDR             R0, [R2,#0xC]
LDR             R12, [R2,#8]
MOV             R3, R3,LSL#1
ADD             R12, R12, #1
SUB             R3, R3, #1
TST             R3, R0
MOVNE           R3, #1
MOVEQ           R3, R1
ADD             R0, R3, R0,LSR R12
STR             R0, [R2,#0x18]
LDR             R2, [R5,#0x44]
STR             R1, [R2,#0x1C]
LDR             R2, [R5,#0x44]

loc_138A8               ; ptr
LDM             R2, {R0,R3}
LDR             R1, [R11,#-0x30+var_9F0]
CMP             R3, R1
BLS             loc_13968
LDR             R1, [R11,#-0x30+var_9F0]
MOV             R3, #0xC
MUL             R3, R3, R1
LDR             R6, [R0,R3]
CMP             R6, #0
BEQ             loc_13958

loc_138D0
LDR             R4, [R2,#4]
LDR             R3, [R6,#0x1C]
LDR             R8, [R6,#0x10]
MOV             R4, R4,LSL#1
SUB             R4, R4, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
ADD             R10, R7, R4,LSL#2
LDR             R3, [R10,#4]
ADD             R3, R3, #1
STR             R3, [R10,#4]
LDR             R2, [R5,#0x44]
LDR             R1, [R2,#0x18]
CMP             R3, R1
BLS             loc_1392C
LDR             R3, [R2,#0x1C]
ADD             R3, R3, #1
STR             R3, [R2,#0x1C]
LDR             R3, [R5,#0x44]
LDR             R0, [R10,#4]
LDR             R1, [R3,#0x18]
BLX             sub_4A2D0
STR             R0, [R10,#8]

loc_1392C
STR             R9, [R6,#0xC]
LDR             R3, [R7,R4,LSL#2]
STR             R3, [R6,#0x10]
LDR             R3, [R7,R4,LSL#2]
CMP             R3, #0
STRNE           R6, [R3,#0xC]
CMP             R8, #0
STR             R6, [R7,R4,LSL#2]
MOV             R6, R8
LDR             R2, [R5,#0x44]
BNE             loc_138D0

loc_13958
LDR             R3, [R11,#-0x30+var_9F0]
ADD             R3, R3, #1
STR             R3, [R11,#-0x30+var_9F0]
B               loc_138A8

loc_13968
BL              free
LDR             R2, [R5,#0x44]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R5,#0x44]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R5,#0x44]
STR             R7, [R3]
LDR             R3, [R5,#0x44]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R5,#0x44]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]

loc_139C8
MOVW            R0, #:lower16:byte_761E4
MOV             R1, R5  ; src
MOVT            R0, #:upper16:byte_761E4 ; dest
BL              strcpy
MOVW            R3, #:lower16:dword_72F0C
MOVW            R1, #:lower16:aOptionsForBoth ; "Options for both config file and comman"...
MOVW            R0, #:lower16:off_67A68 ; "--version-file"
MOVT            R3, #:upper16:dword_72F0C
MOVT            R1, #:upper16:aOptionsForBoth ; "Options for both config file and comman"...
MOVT            R0, #:upper16:off_67A68 ; "--version-file"
STR             R3, [R3]
STR             R3, [R3,#(dword_72F10 - 0x72F0C)]
BL              sub_3EE68
MOVW            R1, #:lower16:aOptionsForComm ; "Options for command line only"
LDR             R0, =off_68204 ; "--config|-c"
MOVT            R1, #:upper16:aOptionsForComm ; "Options for command line only"
BL              sub_3EE68
MOVW            R2, #:lower16:sub_28370
LDR             R1, [R11,#-0x30+var_9E4]
SUB             R0, R11, #-(-0x30+var_9E0)
MOVT            R2, #:upper16:sub_28370
BL              sub_3EF3C
LDR             R3, [R11,#-0x30+var_9E0]
CMP             R3, #1
BNE             loc_13F78
LDR             R3, [R11,#-0x30+format]
LDRB            R3, [R3,#(byte_68A10 - 0x686E8)]
CMP             R3, #0
BEQ             loc_1464C

loc_13A3C
LDR             LR, [R11,#-0x30+var_9EC]
MOV             R12, #8
MOVW            R3, #0x2FBB
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x2A3C+var_2A3C]
MOV             R0, R12
STR             R12, [LR,#(dword_6A460 - 0x6A6E0)]
MOVW            LR, #:lower16:dword_72DC0
MOV             R4, LR
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, =aMain ; "main"
MOV             R1, #0x40 ; '@'
BL              sub_1F8B0
MOV             LR, R4
MOV             R12, R0
MOVT            LR, #:upper16:dword_72DC0
ADD             R3, R0, #0x40 ; '@'
STR             R12, [LR]
MOVW            R2, #:lower16:sub_29BFC
LDR             R12, [R11,#-0x30+format]
SUB             R1, R11, #-(-0x30+var_9B0)
MOV             R0, R3
MOVT            R2, #:upper16:sub_29BFC
MOV             R4, #1
SUB             R1, R1, #4
STR             LR, [R11,#-0x30+var_A08]
STR             R4, [R12,#(dword_68B70 - 0x686E8)]
BL              sub_22F54
SUBS            R3, R0, #0
STR             R3, [R11,#-0x30+var_A0C]
BNE             loc_14608
LDR             R3, [R11,#-0x30+format]
LDRB            R3, [R3,#(byte_68C50 - 0x686E8)]
CMP             R3, #0
MOV             R3, #dword_72DB0
STR             R3, [R11,#-0x30+var_A04]
BNE             loc_13AE0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_13BE4

loc_13AE0
BL              sub_3003C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOV             R5, R0
MOVW            R3, #0x2FCC
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMain ; "main"
MOV             R0, #0xFF
BL              sub_1F828
LDR             R3, [R11,#-0x30+var_A04]
MOV             R2, R0
STR             R0, [R5,#0xA4]
LDR             R3, [R3]
CMP             R3, #0
MOVWNE          R3, #0x4228
MOVWEQ          R3, #0x4234
MOVTNE          R3, #5
MOVTEQ          R3, #5
LDM             R3!, {R0,R1}
LDRH            R3, [R3]
STR             R0, [R2]
ADD             R0, R5, #0x30 ; '0' ; dest
STR             R1, [R2,#4]
MOVW            R1, #:lower16:asc_54240 ; "?"
STRH            R3, [R2,#8]
MOVT            R1, #:upper16:asc_54240 ; src
LDR             R3, [R5,#0xA4]
MOV             R2, #7  ; n
STR             R3, [R5,#0xAC]
STR             R3, [R5,#0xB0]
STR             R3, [R5,#0xA8]
STR             R3, [R5,#0x268]
BL              strncpy
LDR             R3, [R5,#0x64]
MOV             R2, #0
STRB            R2, [R5,#0x37]
CMP             R3, #1
BNE             loc_14530

loc_13B74
LDR             R8, =unk_68CA0
MOV             R4, #0
MOVW            R7, #:lower16:a000000029c6bf4 ; "000000029c6bf469abe4ad37605c097a860cff3"...
MOVW            R6, #:lower16:a00000002c01f50 ; "00000002c01f502cb3e9fdb053230ec12a4954c"...
MOVW            R3, #:lower16:byte_686E2
STRB            R4, [R5,#0x61]
MOVT            R7, #:upper16:a000000029c6bf4 ; "000000029c6bf469abe4ad37605c097a860cff3"...
MOVT            R6, #:upper16:a00000002c01f50 ; "00000002c01f502cb3e9fdb053230ec12a4954c"...
ADD             R5, R8, #0xA00
MOVT            R3, #:upper16:byte_686E2
MOV             R2, #1
STRB            R2, [R3]

loc_13BA4
MOV             R2, #0xA0
ADD             R1, R7, R4
MOV             R0, R8
ADD             R8, R8, R2
BL              sub_1FB44
ADD             R1, R6, R4
MOV             R0, R5
MOV             R2, #0xA0
ADD             R4, R4, #0x144
BL              sub_1FB44
CMP             R4, #0x1440
ADD             R5, R5, #0xA0
BNE             loc_13BA4
VLDR            D0, =32.0
LDR             R0, =unk_6A464
BL              sub_2B4D0

loc_13BE4
LDR             R3, [R11,#-0x30+format]
LDR             R3, [R3,#(dword_688F8 - 0x686E8)]
CMP             R3, #0
BEQ             loc_13BF8
BL              sub_3DA90

loc_13BF8
LDR             R4, [R11,#-0x30+format]
LDR             R1, [R4,#(dword_688E8 - 0x686E8)] ; src
CMP             R1, #0
BEQ             loc_1408C
LDR             R2, [R11,#-0x30+var_9F4]
MOVW            R0, #:lower16:dword_685E0
MOV             R3, #1
MOVT            R0, #:upper16:dword_685E0 ; dest
STRB            R3, [R2]
BL              strcpy
LDR             R1, [R4,#(dword_688F4 - 0x686E8)] ; src
CMP             R1, #0
BEQ             loc_13C38
MOV             R0, #word_685C0 ; dest
BL              strcpy

loc_13C38
MOV             R10, #byte_72D90
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_14050
MOV             R3, #byte_686E0
STR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14050
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #2
BGT             loc_14050
LDR             R3, [R11,#-0x30+format]
LDR             R4, [R3,#(dword_688F0 - 0x686E8)]
CMP             R4, #0
BNE             loc_1409C

loc_13C88
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_143E0
LDR             R3, [R11,#-0x30+format]
LDR             R3, [R3,#(dword_68A08 - 0x686E8)]
CMP             R3, #0
BEQ             loc_13D84

loc_13CA4
LDR             R2, [R2]
CMP             R2, #4
BLE             loc_14988
SUB             R9, R11, #-(-0x30+var_804+4)
SUB             R9, R9, #4

loc_13CB8
MOVW            R2, #:lower16:aLoadedConfigur ; "Loaded configuration file %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aLoadedConfigur ; "Loaded configuration file %s"
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #5
BL              sub_1DD60
LDR             R3, [R11,#-0x30+format]
LDR             R3, [R3,#(dword_68ADC - 0x686E8)]
CMN             R3, #1
BEQ             loc_14770

loc_13CEC
CMP             R3, #0
BNE             loc_13D70
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_1470C
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1470C
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_1470C

loc_13D24
LDR             R3, [R2]
CMP             R3, #3
SUBGT           R9, R11, #-(-0x30+var_804+4)
SUBGT           R9, R9, #4
BLE             loc_13D70

loc_13D38
MOVW            R12, #:lower16:aConfigurationF ; "Configuration file could not be used."
MOV             LR, R9
MOVT            R12, #:upper16:aConfigurationF ; "Configuration file could not be used."
LDM             R12!, {R0-R3} ; "Configuration file could not be used."
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "le could not be used."
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "used."
STR             R0, [LR],#4
MOV             R0, #4
STRH            R1, [LR]
MOV             R1, R9
BL              sub_1DD60

loc_13D70
LDR             R4, [R11,#-0x30+format]
LDR             R0, [R4,#(dword_68A08 - 0x686E8)] ; ptr
BL              free
MOV             R3, #0
STR             R3, [R4,#(dword_68A08 - 0x686E8)]

loc_13D84
LDR             R3, [R11,#-0x30+var_A00]
LDR             R4, [R3]
MOV             R0, R4  ; s
BL              strlen
LDR             R3, [R11,#-0x30+var_9FC]
LDRH            R2, [R3] ; "/"
MOV             R3, #byte_76014
STRH            R2, [R4,R0]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1468C
LDR             R2, [R11,#-0x30+var_9E4]
MOV             R3, #1
STRB            R3, [R2]

loc_13DC0               ; mask
MOV             R0, #0xFF
BL              setlogmask

loc_13DC8
MOVW            R3, #:lower16:off_67A68 ; "--version-file"
MOVW            R1, #:lower16:unk_72C98
MOVT            R3, #:upper16:off_67A68 ; "--version-file"
MOVT            R1, #:upper16:unk_72C98
LDR             R2, [R3,#(dword_681F4 - 0x67A68)]
MOVW            R6, #:lower16:unk_72C20
MOV             R0, R1
MOVT            R6, #:upper16:unk_72C20
MOVW            R5, #:lower16:unk_72D10
MOVW            R4, #:lower16:unk_684F0
CMP             R2, #0
MOVT            R5, #:upper16:unk_72D10
MOVLT           R2, #0x3C ; '<'
MOVT            R4, #:upper16:unk_684F0
STRLT           R2, [R3,#(dword_681F4 - 0x67A68)]
MOVW            R7, #:lower16:dword_76228
BL              sub_3C3EC
MOV             R0, R6
MOVT            R7, #:upper16:dword_76228
BL              sub_3C3EC
MOV             R0, R5
MOVW            R8, #:lower16:dword_74FE0
BL              sub_3C3EC
MOV             R0, R4
STR             R7, [R11,#-0x30+var_9F0]
BL              sub_3C3EC
MOV             R0, #0
LDR             R3, [R1,#0xC]
BLX             R3
LDR             R3, [R6,#(off_72C2C - 0x72C20)]
MOV             R0, #0
BLX             R3
LDR             R3, [R5,#(off_72D1C - 0x72D10)]
MOV             R0, #0
BLX             R3
MOV             R5, #0
LDR             R3, [R4,#(off_684FC - 0x684F0)] ; sub_437A0
MOV             R0, #0
MOVW            R6, #:lower16:dword_74F68
BLX             R3      ; sub_437A0
MOVT            R8, #:upper16:dword_74FE0
STR             R5, [R7]
MOVT            R6, #:upper16:dword_74F68
B               loc_13E88

loc_13E78
LDR             R3, [R6]
LDR             R0, [R3,R5,LSL#2]
ADD             R5, R5, #1
BL              sub_3C634

loc_13E88
LDR             R4, [R8]
CMP             R4, R5
BGT             loc_13E78
CMP             R4, #0
BEQ             loc_1488C
LDR             R3, [R11,#-0x30+format]
LDR             R0, [R3,#(dword_68AE8 - 0x686E8)] ; s
LDR             R3, [R11,#-0x30+var_9EC]
CMP             R0, #0
STR             R4, [R3,#(dword_6A238 - 0x6A6E0)]
BEQ             loc_149E4
MOV             R4, #0
MOVW            R6, #:lower16:stru_74FC0
MOVW            R7, #:lower16:dword_74F68
MOVW            R9, #:lower16:off_67964
MOVW            R1, #:lower16:word_51D00
MOVT            R6, #:upper16:stru_74FC0
MOV             R5, R4
MOVT            R7, #:upper16:dword_74F68
MOVT            R9, #:upper16:off_67964
MOVT            R1, #:upper16:word_51D00 ; delim
BL              strtok

loc_13EE0
CMP             R0, #0
BEQ             loc_14F70
LDR             R3, [R8]
CMP             R3, R4
BLE             loc_14DEC
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
BL              strtol
CMP             R0, #0xC8
MOV             R5, R0
BHI             loc_14E38
MOV             R0, R6  ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_15358
LDR             R3, [R7]
MOV             R0, R6  ; rwlock
LDR             R3, [R3,R4,LSL#2]
STR             R5, [R3,#0xB8]
BL              pthread_rwlock_unlock
SUBS            R3, R0, #0
BNE             loc_153C4
LDR             R2, [R9] ; sub_1EAA0
ADD             R4, R4, #1
STR             R3, [R11,#-0x30+var_9F4]
BLX             R2      ; sub_1EAA0
LDR             R3, [R11,#-0x30+var_9F4]
MOV             R1, #word_51D00 ; delim
MOV             R0, R3  ; s
BL              strtok
B               loc_13EE0

loc_13F60
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #2
BGT             loc_1304C
B               loc_13080

loc_13F78
MOVW            LR, #:lower16:aUnexpectedExtr ; "Unexpected extra commandline arguments"
SUB             R12, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aUnexpectedExtr ; "Unexpected extra commandline arguments"
SUB             R12, R12, #4
LDM             LR!, {R0-R3} ; "Unexpected extra commandline arguments"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " commandline arguments"
STM             R12!, {R0-R3}
MOV             R2, #1
LDM             LR, {R0,R1} ; "uments"
STR             R0, [R12],#4
MOV             R0, #3
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
STRB            R3, [R12]
BL              sub_1DD60
MOV             R1, #0
MOV             R0, #1
BL              sub_2C230
ALIGN 0x10
dbl_13FD0 DCFD 32.0
off_13FD8 DCD stru_68C7C
off_13FDC DCD stru_68C54
off_13FE0 DCD mutex
off_13FE4 DCD cond
off_13FE8 DCD off_68204 ; "--config|-c"
off_13FEC DCD unk_68CA0
off_13FF0 DCD unk_6A464
off_13FF4 DCD dword_6A48C
off_13FF8 DCD byte_6A590
off_13FFC DCD s
off_14000 DCD aLoadTempCutoff ; "load_temp_cutoffs"
off_14004 DCD aMain     ; "main"

loc_14008
MOVW            R12, #:lower16:aFailedToPthrea_0 ; "Failed to pthread_cond_init lp_cond"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aFailedToPthrea_0 ; "Failed to pthread_cond_init lp_cond"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Failed to pthread_cond_init lp_cond"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "d_cond_init lp_cond"
LDR             R12, [R12] ; "ond"
STM             LR!, {R0-R3}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
MOV             R0, #3
MOV             R2, #1
STR             R12, [LR]
BL              sub_1DD60
MOV             R1, R4
MOV             R0, #1
BL              sub_2C230

loc_14050
LDR             R1, [R11,#-0x30+var_9F8]
SUB             R9, R11, #-(-0x30+var_804+4)
SUB             R9, R9, #4
MOVW            R3, #:lower16:dword_685E0
MOVW            R2, #:lower16:aLogFilePathSOp ; "Log file path: %s Open flag: %s"
MOV             R0, R9  ; s
STR             R1, [SP,#0x2A3C+var_2A3C]
MOVT            R2, #:upper16:aLogFilePathSOp ; "Log file path: %s Open flag: %s"
MOV             R1, #0x800 ; maxlen
MOVT            R3, #:upper16:dword_685E0
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_1408C
LDR             R3, [R11,#-0x30+format]
LDR             R4, [R3,#(dword_688F0 - 0x686E8)]
CMP             R4, #0
BEQ             loc_146A8

loc_1409C
SUB             R0, R11, #-(-0x30+var_900)
MOV             R2, #0x100 ; n
MOV             R1, #0  ; c
SUB             R0, R0, #4 ; s
BL              memset
LDR             R3, [R11,#-0x30+format]
LDR             R0, [R3,#(dword_688EC - 0x686E8)] ; nptr
CMP             R0, #0
BEQ             loc_1453C
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_146CC
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
BL              strtol
SUB             R3, R0, #0x20 ; ' '
LDR             R2, [R11,#-0x30+var_9EC]
BIC             R3, R3, #0x20 ; ' '
CMP             R0, #1
CMPNE           R3, #0
STR             R0, [R2,#(dword_6A484 - 0x6A6E0)]
BNE             loc_1499C
MOV             R10, #byte_72D90
LDRB            R3, [R10]
CMP             R3, #0
MOV             R3, #byte_686E0
STR             R3, [R11,#-0x30+var_9E4]
BNE             loc_14134
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14134
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_14170

loc_14134
LDR             R3, [R11,#-0x30+format]
SUB             R9, R11, #-(-0x30+var_804+4)
SUB             R9, R9, #4
MOV             R2, #aLogWorkPathSAs ; "Log work path: %s Asic num: %s"
MOV             R0, R9  ; s
LDR             R1, [R3,#(dword_688EC - 0x686E8)]
LDR             R3, [R3,#(dword_688F0 - 0x686E8)]
STR             R1, [SP,#0x2A3C+var_2A3C]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_14170
LDR             R3, [R11,#-0x30+format]
MOVW            R1, #:lower16:aSTxt ; "%s.txt"
SUB             R0, R11, #-(-0x30+var_900)
MOVT            R1, #:upper16:aSTxt ; "%s.txt"
SUB             R0, R0, #4 ; s
LDR             R2, [R3,#(dword_688F0 - 0x686E8)]
BL              sprintf
MOVW            R1, #:lower16:word_540E4
SUB             R0, R11, #-(-0x30+var_900)
SUB             R0, R0, #4
MOVT            R1, #:upper16:word_540E4
BL              fopen64
LDRB            R3, [R10]
LDR             R2, [R11,#-0x30+var_9EC]
CMP             R3, #0
STR             R0, [R2,#(dword_6A488 - 0x6A6E0)]
BNE             loc_141D8
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_141D8
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_1420C

loc_141D8
SUB             R9, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aLogWorkOpenFil ; "Log work open file %s"
SUB             R9, R9, #4
SUB             R3, R11, #-(-0x30+var_900)
MOVT            R2, #:upper16:aLogWorkOpenFil ; "Log work open file %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
SUB             R3, R3, #4
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_1420C
LDR             R3, [R11,#-0x30+var_9EC]
LDR             R3, [R3,#(dword_6A484 - 0x6A6E0)]
CMP             R3, #1
BEQ             loc_148DC
SUB             R3, R3, #0x20 ; ' '
BICS            R3, R3, #0x20 ; ' '
BNE             loc_142F4
MOVW            R6, #:lower16:aS02d02dTxt ; "%s%02d_%02d.txt"
MOVW            R7, #:lower16:word_540E4
LDR             R8, =dword_6A48C
MOV             R4, R3
MOVT            R6, #:upper16:aS02d02dTxt ; "%s%02d_%02d.txt"
MOVT            R7, #:upper16:word_540E4
LDR             R9, [R11,#-0x30+var_9EC]
B               loc_142E8

loc_14248
LDR             R2, [R11,#-0x30+format]
SUB             R0, R11, #-(-0x30+var_900)
STR             R4, [SP,#0x2A3C+var_2A3C]
MOV             R1, R6  ; format
SUB             R0, R0, #4 ; s
LDR             R2, [R2,#(dword_688F0 - 0x686E8)]
BL              sprintf
SUB             R0, R11, #-(-0x30+var_900)
MOV             R1, R7
SUB             R0, R0, #4
BL              fopen64
LDRB            R3, [R10]
STR             R0, [R8,R4,LSL#2]
CMP             R3, #0
BNE             loc_142A8
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_142A8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_142E4

loc_142A8
SUB             R5, R11, #-(-0x30+var_804+4)
SUB             R3, R11, #-(-0x30+var_900)
SUB             R5, R5, #4
SUB             R3, R3, #4
MOVW            R2, #:lower16:aLogWorkOpenAsi ; "Log work open asic %d file %s"
STR             R3, [SP,#0x2A3C+var_2A3C]
MOVT            R2, #:upper16:aLogWorkOpenAsi ; "Log work open asic %d file %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
LDR             R3, [R9,#(dword_6A484 - 0x6A6E0)]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_142E4
ADD             R4, R4, #1

loc_142E8
LDR             R3, [R9,#(dword_6A484 - 0x6A6E0)]
CMP             R3, R4
BGE             loc_14248

loc_142F4
LDR             R3, [R11,#-0x30+var_9EC]
LDRB            R3, [R3,#(byte_6A590 - 0x6A6E0)]
CMP             R3, #0
BEQ             loc_143C4
MOVW            R9, #:lower16:aLogWorkOpenDif ; "Log work open diff file %s"
LDR             R6, =byte_6A590
MOVT            R9, #:upper16:aLogWorkOpenDif ; "Log work open diff file %s"
MOVW            R8, #:lower16:aSDiff02dTxt ; "%s_diff_%02d.txt"
STR             R9, [R11,#-0x30+var_9F0]
MOVW            R7, #:lower16:word_540E4
LDR             R9, [R11,#-0x30+format]
MOVT            R8, #:upper16:aSDiff02dTxt ; "%s_diff_%02d.txt"
MOVT            R7, #:upper16:word_540E4
MOV             R4, #0

loc_1432C
SUB             R0, R11, #-(-0x30+var_900)
MOV             R3, R4
LDR             R2, [R9,#(dword_688F0 - 0x686E8)]
MOV             R1, R8  ; format
SUB             R0, R0, #4 ; s
BL              sprintf
SUB             R0, R11, #-(-0x30+var_900)
MOV             R1, R7
SUB             R0, R0, #4
BL              fopen64
LDRB            R3, [R10]
STR             R0, [R6,#4]!
CMP             R3, #0
BNE             loc_14388
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14388
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_143B8

loc_14388
SUB             R5, R11, #-(-0x30+var_804+4)
SUB             R3, R11, #-(-0x30+var_900)
SUB             R5, R5, #4
LDR             R2, [R11,#-0x30+var_9F0] ; format
MOV             R1, #0x800 ; maxlen
SUB             R3, R3, #4
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_143B8
ADD             R4, R4, #1
CMP             R4, #0x41 ; 'A'
BNE             loc_1432C

loc_143C4
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_143E0
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_146C0

loc_143E0
SUB             R9, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aStartedS ; "Started %s"
SUB             R9, R9, #4
LDR             R3, =s
MOVT            R2, #:upper16:aStartedS ; "Started %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
LDR             R3, [R11,#-0x30+format]
LDR             R3, [R3,#(dword_68A08 - 0x686E8)]
CMP             R3, #0
BEQ             loc_13D84
LDRB            R2, [R10]
CMP             R2, #0
BNE             loc_13CB8
LDR             R2, [R11,#-0x30+var_9E4]
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_13CB8
MOV             R2, #dword_67840
B               loc_13CA4

loc_14448
MOVW            R12, #:lower16:aFailedToCreate_2 ; "Failed to create getq"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aFailedToCreate_2 ; "Failed to create getq"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Failed to create getq"
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1} ; " getq"
STR             R0, [LR],#4
MOV             R0, #3
STRH            R1, [LR]

loc_14474
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
BL              sub_1DD60
MOV             R1, R4
MOV             R0, #1
BL              sub_2C230

loc_1448C
STR             R6, [R5,#0x4C]
MOV             R0, #0x2C ; ',' ; size
STR             R6, [R5,#0x48]
STR             R5, [R3,#(dword_6A1D0 - 0x6A6E0)]
BL              malloc
CMP             R0, #0
STR             R0, [R5,#0x44]
BNE             loc_144B4

loc_144AC               ; status
MOV             R0, #0xFFFFFFFF
BL              exit

loc_144B4               ; n
MOV             R2, #0x2C ; ','
MOV             R1, R6  ; c
MOV             R7, R5
BL              memset
LDR             R3, [R7,#0x44]!
MOV             R12, #0x20 ; ' '
MOV             R1, #5
MOV             R2, #0x44 ; 'D'
MOV             R0, #0x180 ; size
STR             R7, [R3,#0x10]
LDR             R3, [R5,#0x44]
STR             R12, [R3,#4]
LDR             R3, [R5,#0x44]
STR             R1, [R3,#8]
LDR             R3, [R5,#0x44]
STR             R2, [R3,#0x14]
LDR             R8, [R5,#0x44]
BL              malloc
STR             R0, [R8]
LDR             R3, [R5,#0x44]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_144AC
MOV             R2, #0x180 ; n
MOV             R1, R6  ; c
BL              memset
LDR             R2, [R5,#0x44]
MOV             R3, #0xA0111FE1
STR             R3, [R2,#0x28]
B               loc_13798

loc_14530
ADD             R0, R5, #0x64 ; 'd'
BL              sub_28F90
B               loc_13B74

loc_1453C
MOV             R10, #byte_72D90
LDRB            R3, [R10]
CMP             R3, #0
MOV             R3, #byte_686E0
STR             R3, [R11,#-0x30+var_9E4]
BNE             loc_1457C
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1457C
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_14170

loc_1457C
SUB             R9, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aLogWorkPathS ; "Log work path: %s"
SUB             R9, R9, #4
MOV             R3, R4
MOV             R0, R9  ; s
MOVT            R2, #:upper16:aLogWorkPathS ; "Log work path: %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
B               loc_14170

loc_145B0
MOV             R0, R5
LDR             R10, [R11,#-0x30+var_9F0]
B               loc_13630

loc_145BC
MOVW            LR, #:lower16:aFailedToPthrea_1 ; "Failed to pthread_cond_init restart_con"...
SUB             R12, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aFailedToPthrea_1 ; "Failed to pthread_cond_init restart_con"...
SUB             R12, R12, #4
LDM             LR!, {R0-R3} ; "Failed to pthread_cond_init restart_con"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "d_cond_init restart_cond"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "art_cond"
STM             R12!, {R0,R1}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
STRB            R2, [R12]
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, R5
MOV             R0, #1
BL              sub_2C230

loc_14608
MOVW            LR, #:lower16:aApiThreadCreat ; "API thread create failed"
SUB             R12, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aApiThreadCreat ; "API thread create failed"
SUB             R12, R12, #4
LDM             LR!, {R0-R3} ; "API thread create failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "e failed"
STM             R12!, {R0,R1}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
STRB            R2, [R12]
MOV             R0, #3
MOV             R2, R4
BL              sub_1DD60
MOV             R0, R4
MOV             R1, #0
BL              sub_2C230

loc_1464C
BL              sub_2B46C
B               loc_13A3C

loc_14654
MOVW            R12, #:lower16:aFailedToPthrea_2 ; "Failed to pthread_cond_init gws_cond"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aFailedToPthrea_2 ; "Failed to pthread_cond_init gws_cond"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Failed to pthread_cond_init gws_cond"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "d_cond_init gws_cond"
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1} ; "cond"
STR             R0, [LR],#4
MOV             R0, #3
STRB            R1, [LR]
B               loc_14474

loc_1468C
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_13DC0
MOV             R0, #0x3F ; '?' ; mask
BL              setlogmask
B               loc_13DC8

loc_146A8
MOVW            R3, #:lower16:byte_686E0
MOVW            R10, #:lower16:byte_72D90
MOVT            R3, #:upper16:byte_686E0
MOVT            R10, #:upper16:byte_72D90
STR             R3, [R11,#-0x30+var_9E4]
B               loc_143C4

loc_146C0
MOV             R2, #dword_67840
B               loc_13C88

loc_146CC
MOVW            R12, #:lower16:aLogWorkAsicNum_0 ; "Log work asic num empty"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aLogWorkAsicNum_0 ; "Log work asic num empty"
SUB             LR, LR, #4

loc_146DC
LDM             R12!, {R0-R3}
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1}
STM             LR, {R0,R1}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4

loc_146F8
MOV             R0, #3
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_1470C
MOVW            R12, #:lower16:aFatalJsonError ; "Fatal JSON error in configuration file."
SUB             R9, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aFatalJsonError ; "Fatal JSON error in configuration file."
SUB             R9, R9, #4
LDM             R12!, {R0-R3} ; "Fatal JSON error in configuration file."
MOV             LR, R9
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " in configuration file."
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "n file."
STM             LR, {R0,R1}
MOV             R1, R9
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_13D38
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
MOVEQ           R2, #dword_67840
BNE             loc_13D38
B               loc_13D24

loc_14770
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_14810

loc_1477C
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14808
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_14808
MOV             R4, #byte_7607A
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_13D70

loc_147B4
LDR             R3, [R2]
CMP             R3, #3
SUBGT           R9, R11, #-(-0x30+var_804+4)
SUBGT           R9, R9, #4
BLE             loc_13D70

loc_147C8
MOVW            R12, #:lower16:aStartCgminerWi ; "Start cgminer with -T to see what faile"...
MOV             LR, R9
MOVT            R12, #:upper16:aStartCgminerWi ; "Start cgminer with -T to see what faile"...
LDM             R12!, {R0-R3} ; "Start cgminer with -T to see what faile"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "th -T to see what failed to load."
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "t failed to load."
LDR             R12, [R12] ; "."
STM             LR!, {R0-R3}
MOV             R1, R9
MOV             R2, #0
MOV             R0, #4
STRH            R12, [LR]
BL              sub_1DD60
B               loc_13D70

loc_14808
SUB             R9, R11, #-(-0x30+var_804+4)
SUB             R9, R9, #4

loc_14810
MOVW            LR, #:lower16:aErrorInConfigu ; "Error in configuration file, partially "...
MOV             R12, R9
MOVT            LR, #:upper16:aErrorInConfigu ; "Error in configuration file, partially "...
MOVW            R4, #:lower16:byte_7607A
LDM             LR!, {R0-R3} ; "Error in configuration file, partially "...
MOVT            R4, #:upper16:byte_7607A
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "ration file, partially loaded."
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "tially loaded."
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R1, R9
MOV             R0, #4
STRB            LR, [R12]
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_13D70
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_147C8
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_147C8
MOV             R2, #dword_67840
B               loc_147B4

loc_1488C
MOVW            LR, #:lower16:aAllDevicesDisa ; "All devices disabled, cannot mint!"
SUB             R12, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aAllDevicesDisa ; "All devices disabled, cannot mint!"
SUB             R12, R12, #4
LDM             LR!, {R0-R3} ; "All devices disabled, cannot mint!"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "bled, cannot mint!"
LDR             LR, [LR] ; "t!"
STM             R12!, {R0-R3}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
MOV             R0, #3
MOV             R2, #1
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60
MOV             R1, R4
MOV             R0, #1
BL              sub_2C230

loc_148DC
LDR             R2, [R11,#-0x30+format]
MOVW            R1, #:lower16:aS02dTxt ; "%s%02d.txt"
SUB             R0, R11, #-(-0x30+var_900)
MOVT            R1, #:upper16:aS02dTxt ; "%s%02d.txt"
SUB             R0, R0, #4 ; s
LDR             R2, [R2,#(dword_688F0 - 0x686E8)]
BL              sprintf
MOVW            R1, #:lower16:word_540E4
SUB             R0, R11, #-(-0x30+var_900)
SUB             R0, R0, #4
MOVT            R1, #:upper16:word_540E4
BL              fopen64
LDRB            R3, [R10]
LDR             R2, [R11,#-0x30+var_9EC]
CMP             R3, #0
STR             R0, [R2,#(dword_6A48C - 0x6A6E0)]
BNE             loc_14944
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14944
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_142F4

loc_14944
SUB             R3, R11, #-(-0x30+var_900)
SUB             R9, R11, #-(-0x30+var_804+4)
SUB             R3, R3, #4
SUB             R9, R9, #4
STR             R3, [SP,#0x2A3C+var_2A3C]
MOVW            R2, #:lower16:aLogWorkOpenAsi ; "Log work open asic %d file %s"
LDR             R3, [R11,#-0x30+var_9EC]
MOV             R0, R9  ; s
MOVT            R2, #:upper16:aLogWorkOpenAsi ; "Log work open asic %d file %s"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R3,#(dword_6A484 - 0x6A6E0)]
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
B               loc_142F4

loc_14988
LDR             R3, [R11,#-0x30+format]
LDR             R3, [R3,#(dword_68ADC - 0x686E8)]
CMN             R3, #1
BNE             loc_13CEC
B               loc_1477C

loc_1499C
MOVW            R12, #:lower16:aLogWorkAsicNum ; "Log work asic num must be 1, 32, 64"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aLogWorkAsicNum ; "Log work asic num must be 1, 32, 64"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Log work asic num must be 1, 32, 64"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "m must be 1, 32, 64"
LDR             R12, [R12] ; " 64"
STM             LR!, {R0-R3}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
MOV             R0, #3
MOV             R2, #1
STR             R12, [LR]
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_149E4               ; rwlock
MOV             R0, #stru_74FC0
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_153B8
MOVW            R3, #:lower16:dword_74F68
LDR             R12, [R8]
MOVT            R3, #:upper16:dword_74F68
MOV             LR, #0x5F ; '_'
STR             R3, [R11,#-0x30+var_9F4]
LDR             R1, [R3]
B               loc_14A28

loc_14A14
LDR             R3, [R1,R0,LSL#2]
ADD             R0, R0, #1
LDR             R2, [R3,#0xB8]
CMP             R2, #0
STREQ           LR, [R3,#0xB8]

loc_14A28
CMP             R0, R12
BLT             loc_14A14
MOVW            R0, #:lower16:stru_74FC0
MOVW            R2, #0x579
MOVT            R0, #:upper16:stru_74FC0
LDR             R1, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_2D708

loc_14A44
LDR             R3, [R11,#-0x30+var_9F4]
MOVW            R1, #:lower16:0x5F5E0FF
LDR             R0, [R8]
MOVT            R1, #:upper16:0x5F5E0FF
LDR             R12, [R3]
MOV             R3, #0
B               loc_14A6C

loc_14A60
LDR             R2, [R12,R3,LSL#2]
ADD             R3, R3, #1
STR             R1, [R2,#0x138]

loc_14A6C
CMP             R0, R3
BGT             loc_14A60
MOVW            R3, #:lower16:byte_76078
MOVW            R7, #:lower16:dword_72E60
MOVT            R3, #:upper16:byte_76078
MOVW            R5, #:lower16:dword_72F04
LDRB            R3, [R3]
SUB             R9, R11, #-(-0x30+var_804+4)
STR             R8, [R11,#-0x30+var_9FC]
MOVT            R7, #:upper16:dword_72E60
MOVT            R5, #:upper16:dword_72F04
SUB             R9, R9, #4
CMP             R3, #0
LDREQ           R1, [R11,#-0x30+var_9EC]
LDREQ           R3, [R1,#(dword_6A45C - 0x6A6E0)]
LDREQ           R2, [R1,#(dword_6A238 - 0x6A6E0)]
ADDEQ           R3, R3, R2
MOVW            R2, #:lower16:dword_67840
STREQ           R3, [R1,#-0x284]
MOV             R3, #byte_686E1
MOVT            R2, #:upper16:dword_67840
MOV             R8, R3
STR             R2, [R11,#-0x30+var_9F8]

loc_14ACC
MOV             R6, #0
MOV             R4, R6
B               loc_14B70

loc_14AD8
LDR             R3, [R5]
LDR             R3, [R3,R4,LSL#2]
LDR             R2, [R3,#0xA4]
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_14B6C
LDR             R3, [R3,#0xAC]
LDRB            R3, [R3]
CMP             R3, #0
ADDNE           R6, R6, #1
BNE             loc_14B6C
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_14B6C
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_14B3C
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14B3C
LDR             R3, [R11,#-0x30+var_9F8]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_14B6C

loc_14B3C
MOVW            R12, #:lower16:aBlankWorkerExi ; "Blank worker exists.\n"
MOV             LR, R9
MOVT            R12, #:upper16:aBlankWorkerExi ; "Blank worker exists.\n"
LDM             R12!, {R0-R3} ; "Blank worker exists.\n"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "sts.\n"
STR             R0, [LR],#4
MOV             R0, #7
STRH            R1, [LR]
MOV             R1, R9
BL              sub_1DD60

loc_14B6C
ADD             R4, R4, #1

loc_14B70
LDR             R3, [R7]
CMP             R4, R3
BLT             loc_14AD8
CMP             R6, #0
BNE             loc_14C78
LDR             R3, [R11,#-0x30+var_9EC]
LDR             R3, [R3,#(dword_6A698 - 0x6A6E0)]
CMP             R3, #0
BNE             loc_14C04
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_14BC0
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14BC0
LDR             R3, [R11,#-0x30+var_9F8]
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_14BF8

loc_14BC0
MOVW            LR, #:lower16:aNoValidPoolsPl ; "No valid pools, please configure them f"...
MOV             R12, R9
MOVT            LR, #:upper16:aNoValidPoolsPl ; "No valid pools, please configure them f"...
LDM             LR!, {R0-R3} ; "No valid pools, please configure them f"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "please configure them first!\n"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " them first!\n"
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             R1, R9
MOV             R0, #5
STRH            R3, [R12]
BL              sub_1DD60

loc_14BF8
LDR             R2, [R11,#-0x30+var_9EC]
MOV             R3, #1
STR             R3, [R2,#(dword_6A698 - 0x6A6E0)]

loc_14C04
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_14C6C
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_14C3C
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14C3C
LDR             R3, [R11,#-0x30+var_9F8]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_14C6C

loc_14C3C
MOVW            LR, #:lower16:aCheckNoPoolAnd ; "check no pool and user retry!"
MOV             R12, R9
MOVT            LR, #:upper16:aCheckNoPoolAnd ; "check no pool and user retry!"
LDM             LR!, {R0-R3} ; "check no pool and user retry!"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "d user retry!"
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
STRH            R3, [R12]
BL              sub_1DD60

loc_14C6C               ; seconds
MOV             R0, #1
BL              sleep
B               loc_14ACC

loc_14C78
CMP             R3, #0
LDR             R8, [R11,#-0x30+var_9FC]
BNE             loc_14D24
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_14CB4
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14CB4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_14CEC

loc_14CB4
MOVW            LR, #:lower16:aNeedToSpecifyA ; "Need to specify at least one pool serve"...
MOV             R12, R9
MOVT            LR, #:upper16:aNeedToSpecifyA ; "Need to specify at least one pool serve"...
LDM             LR!, {R0-R3} ; "Need to specify at least one pool serve"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "at least one pool server."
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "l server."
STM             R12!, {R0,R1}
MOV             R1, R9
STRH            R2, [R12]
MOV             R0, #4
MOV             R2, #0
BL              sub_1DD60

loc_14CEC
MOVW            R12, #:lower16:aPoolSetupFaile ; "Pool setup failed"
MOV             LR, R9
MOVT            R12, #:upper16:aPoolSetupFaile ; "Pool setup failed"
LDM             R12!, {R0-R3} ; "Pool setup failed"
LDR             R12, [R12] ; "d"
STM             LR!, {R0-R3}
MOV             R1, R9
MOV             R0, #3
MOV             R2, #1
STRH            R12, [LR]
BL              sub_1DD60
MOV             R1, #0
MOV             R0, #1
BL              sub_2C230

loc_14D24
MOVW            R3, #:lower16:dword_72F04
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
MOVT            R3, #:upper16:dword_72F04
MOVW            R6, #0xE0FF
STR             R3, [R11,#-0x30+var_9F8]
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
MOV             R3, #0
STR             R8, [R11,#-0x30+var_A00]
MOVT            R6, #0x5F5
STR             R2, [R11,#-0x30+var_9FC]
MOV             R8, R3
B               loc_14D58

loc_14D54
ADD             R8, R8, #1

loc_14D58
LDR             R2, [R7]
LDR             R3, [R11,#-0x30+var_9F8]
CMP             R2, R8
LDR             R3, [R3]
BLE             loc_14E54
LDR             R4, [R3,R8,LSL#2]
LDR             R3, [R4,#0xA8]
STR             R6, [R4,#0x194]
STR             R6, [R4,#0x1B8]
CMP             R3, #0
BNE             loc_14D54
LDR             R3, [R4,#0xB0]
CMP             R3, #0
BEQ             loc_153A4

loc_14D90               ; s
LDR             R0, [R4,#0xAC]
CMP             R0, #0
BEQ             loc_15364
BL              strlen
MOV             R5, R0
LDR             R0, [R4,#0xB0] ; s
BL              strlen
ADD             R5, R5, R0
LDR             R1, [R11,#-0x30+var_9FC]
ADD             R5, R5, #2
MOVW            R3, #0x30E0
LDR             R2, =aMain ; "main"
MOV             R0, R5
BL              sub_1F828
LDR             R3, [R4,#0xB0]
MOVW            R2, #:lower16:(aFailedToConnec+0x20) ; "%s:%s"
STR             R0, [R4,#0xA8]
MOV             R1, R5  ; maxlen
MOVT            R2, #:upper16:(aFailedToConnec+0x20) ; format
STR             R3, [SP,#0x2A3C+var_2A3C]
LDR             R3, [R4,#0xAC]
BL              snprintf
B               loc_14D54

loc_14DEC
MOVW            LR, #:lower16:aTooManyValuesP ; "Too many values passed to set temp cuto"...
SUB             R12, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aTooManyValuesP ; "Too many values passed to set temp cuto"...
SUB             R12, R12, #4
LDM             LR!, {R0-R3} ; "Too many values passed to set temp cuto"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "passed to set temp cutoff"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "mp cutoff"
STM             R12!, {R0,R1}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
STRH            R2, [R12]
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_14E38
MOVW            R12, #:lower16:aInvalidValuePa ; "Invalid value passed to set temp cutoff"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aInvalidValuePa ; "Invalid value passed to set temp cutoff"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Invalid value passed to set temp cutoff"
STM             LR!, {R0-R3}
B               loc_146DC

loc_14E54
LDRB            R2, [R10]
LDR             R3, [R3]
LDR             R8, [R11,#-0x30+var_A00]
CMP             R2, #0
LDR             R2, [R11,#-0x30+format]
STR             R3, [R2,#(dword_68B74 - 0x686E8)]
BEQ             loc_14E84
MOVW            R0, #:lower16:aCgminer_0 ; "cgminer"
MOV             R2, #8  ; facility
MOVT            R0, #:upper16:aCgminer_0 ; "cgminer"
MOV             R1, #1  ; option
BL              openlog

loc_14E84
LDR             R3, [R11,#-0x30+var_9EC]
LDR             R3, [R3,#(dword_6A69C - 0x6A6E0)]
CMP             R3, #0
BEQ             loc_14F88
MOV             R0, R9  ; pipedes
BL              pipe
CMP             R0, #0
BLT             loc_154D0
MOV             R3, #stderr
LDR             R0, [R3] ; stream
BL              fflush
MOV             R1, #2  ; fd2
LDR             R0, [R11,#-0x30+var_804+4] ; fd
BL              dup2
CMP             R0, #0
BLT             loc_154F8
LDR             R0, [R11,#-0x30+var_804+4] ; fd
BL              close
CMP             R0, #0
BLT             loc_154E4
MOV             R1, #1  ; handler
MOV             R0, #0xD ; sig
BL              signal
MOV             R1, #1  ; handler
MOV             R4, R0
MOV             R0, #0xD ; sig
BL              signal
CMN             R4, #1
CMNNE           R0, #1
BEQ             loc_154A8
BL              fork
LDR             R3, [R11,#-0x30+format]
CMP             R0, #0
MOV             R4, R0
STR             R0, [R3,#(dword_68B0C - 0x686E8)]
BLT             loc_15494
LDR             R0, [R11,#-0x30+var_804] ; fd
BNE             loc_15410
MOV             R1, R4  ; fd2
BL              dup2
CMP             R0, #0
BLT             loc_154BC
LDR             R0, [R11,#-0x30+var_804] ; fd
BL              close
LDR             R3, [R11,#-0x30+var_9EC]
MOV             R1, #aBinBash ; "/bin/bash"
MOVW            R2, #:lower16:aC ; "-c"
STR             R4, [SP,#0x2A3C+var_2A3C]
MOV             R0, R1  ; path
LDR             R3, [R3,#(dword_6A69C - 0x6A6E0)]
MOVT            R2, #:upper16:aC ; "-c"
BL              execl
MOV             R0, #aExeclInChildFa ; "execl - in child failed to exec user sp"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_14F70
CMP             R4, #1
BLE             loc_15430
MOV             R3, #dword_74F68
STR             R3, [R11,#-0x30+var_9F4]
B               loc_14A44

loc_14F88
LDR             R0, [R11,#-0x30+var_9F0]
MOV             R12, #dword_73F20
MOVW            R3, #0x30F1
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x2A3C+var_2A3C]
MOV             R4, R12
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, =aMain ; "main"
MOV             R1, #4
LDR             R0, [R0]
MOVW            R6, #:lower16:aCgminerC ; "cgminer.c"
STR             R12, [R11,#-0x30+var_A10]
MOVT            R6, #:upper16:aCgminerC ; "cgminer.c"
BL              sub_1F8B0
STR             R0, [R4]
MOV             R4, #0
B               loc_14FFC

loc_14FD0
LDR             R3, [R11,#-0x30+var_A10]
MOVW            R2, #0x30F5
MOV             R1, #0x40 ; '@'
MOV             R0, #1
LDR             R5, [R3]
STR             R2, [SP,#0x2A3C+var_2A3C]
MOV             R2, R6
LDR             R3, =aMain ; "main"
BL              sub_1F8B0
STR             R0, [R5,R4,LSL#2]
ADD             R4, R4, #1

loc_14FFC
LDR             R3, [R11,#-0x30+var_9F0]
LDR             R3, [R3]
CMP             R3, R4
BGT             loc_14FD0
MOVW            R2, #:lower16:byte_686E1
MOV             R3, #0
MOVT            R2, #:upper16:byte_686E1
STR             R3, [R11,#-0x30+var_9FC]
STR             R3, [R11,#-0x30+var_A00]
STR             R2, [R11,#-0x30+var_A18]
STR             R10, [R11,#-0x30+var_A14]
STR             R7, [R11,#-0x30+var_A1C]

loc_1502C
LDR             R3, [R8]
LDR             R2, [R11,#-0x30+var_9FC]
CMP             R3, R2
BLE             loc_151E0
LDR             R3, [R11,#-0x30+var_9F4]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R12, [R11,#-0x30+var_9FC]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMain ; "main"
MOVW            R7, #:lower16:sub_28E2C
LDR             R0, [R3]
MOVW            R3, #0x30FE
MOVT            R7, #:upper16:sub_28E2C
MOV             R10, R8
MOV             R8, R7
MOV             R4, #0
LDR             R5, [R0,R12,LSL#2]
LDR             R0, [R5,#0x94]
ADD             R0, R0, #1
MOV             R0, R0,LSL#2
BL              sub_1F828
LDR             R2, [R5,#0x94]
MOV             R3, #4
STR             R0, [R5,#0x98]
STR             R4, [R0,R2,LSL#2]
STR             R3, [R5,#0x60]

loc_15094
LDR             R2, [R5,#0x94]
LDR             R3, [R11,#-0x30+var_A00]
CMP             R2, R4
ADD             R7, R3, R4
BLE             loc_15194
MOV             R0, R7
BL              sub_2F688
STR             R7, [R0]
MOV             R6, R0
STR             R5, [R0,#0x24]
STR             R4, [R0,#4]
LDR             R3, [R5,#4]
LDR             R3, [R3,#0x2C]
BLX             R3
CMP             R0, #0
BEQ             loc_1518C
SUB             R1, R11, #-(-0x30+var_9B0)
MOV             R3, R6
MOV             R2, R8
SUB             R1, R1, #4
MOV             R0, R6
BL              sub_22F54
CMP             R0, #0
BNE             loc_151AC
LDR             R3, [R5,#0x98]
STR             R6, [R3,R4,LSL#2]
LDR             R3, [R5,#0x20]
CMP             R3, #1
BEQ             loc_1518C
LDR             R3, [R11,#-0x30+var_A18]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_15174
LDR             R3, [R11,#-0x30+var_A14]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1514C
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1514C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_15174

loc_1514C
MOVW            R2, #:lower16:aPushingSemPost ; "Pushing sem post to thread %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPushingSemPost ; "Pushing sem post to thread %d"
LDR             R3, [R6]
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_1DD60

loc_15174
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, R6, #0x10
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x311A
LDR             R2, =aMain ; "main"
BL              sub_22F9C

loc_1518C
ADD             R4, R4, #1
B               loc_15094

loc_15194
LDR             R3, [R11,#-0x30+var_9FC]
MOV             R8, R10
STR             R7, [R11,#-0x30+var_A00]
ADD             R3, R3, #1
STR             R3, [R11,#-0x30+var_9FC]
B               loc_1502C

loc_151AC
MOVW            R2, #:lower16:aThreadDCreateF ; "thread %d create failed"
LDR             R3, [R6]
MOVT            R2, #:upper16:aThreadDCreateF ; "thread %d create failed"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
MOV             R1, R9
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #0
MOV             R0, #1
BL              sub_2C230

loc_151E0
LDR             R3, [R11,#-0x30+format]
LDR             R10, [R11,#-0x30+var_A14]
LDR             R7, [R11,#-0x30+var_A1C]
LDRB            R3, [R3,#(byte_68C50 - 0x686E8)]
CMP             R3, #0
BNE             loc_15208
LDR             R3, [R11,#-0x30+var_A04]
LDR             R6, [R3]
CMP             R6, #0
BEQ             loc_1550C

loc_15208
LDR             R0, =unk_68BA0
MOV             R1, #dbl_72D88
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R1]
ADD             R1, R0, #0x60 ; '`'

loc_15224
STRD            R2, R3, [R0],#8
CMP             R1, R0
BNE             loc_15224
LDR             R2, [R11,#-0x30+var_9F4]
MOV             R3, #0
LDR             R12, [R8]
LDR             R1, [R11,#-0x30+var_A0C]
LDR             R0, [R2]
LDR             R2, [R11,#-0x30+format]
STR             R3, [R2,#(dword_68C00 - 0x686E8)]
MOV             R2, #0
MOV             R3, #0
B               loc_15268

loc_15258
LDR             LR, [R0,R1,LSL#2]
ADD             R1, R1, #1
STRD            R2, R3, [LR,#0x50]
STRD            R2, R3, [LR,#0x30]

loc_15268
CMP             R12, R1
BGT             loc_15258
LDR             R0, =dword_68B30
MOV             R4, #3
BL              sub_206A0
LDR             R0, =dword_68B28
BL              sub_206A0
LDR             R0, =dword_68B94
BL              sub_206A0
LDR             R2, =dword_68B30
MOV             R1, #0x28 ; '('
ADD             R0, R2, #8
BL              sub_2A1B0
LDR             R3, [R11,#-0x30+var_A08]
MOVW            R2, #:lower16:sub_32050
LDR             R0, [R11,#-0x30+format]
SUB             R1, R11, #-(-0x30+var_9B0)
MOVT            R2, #:upper16:sub_32050
SUB             R1, R1, #4
LDR             R5, [R3]
MOV             R3, #0
STR             R4, [R0,#(dword_68B68 - 0x686E8)]
ADD             R0, R5, #0xC0
BL              sub_22F54
SUBS            R6, R0, #0
BNE             loc_16158
LDR             R0, [R5,#0xCC] ; th
BL              pthread_detach
LDR             R3, [R11,#-0x30+var_A08]
MOVW            R2, #:lower16:sub_36338
LDR             LR, [R11,#-0x30+format]
SUB             R1, R11, #-(-0x30+var_9B0)
MOV             R12, #4
SUB             R1, R1, #4
LDR             R5, [R3]
MOVT            R2, #:upper16:sub_36338
MOV             R3, R6
STR             R12, [LR,#(dword_68B6C - 0x686E8)]
ADD             R0, R5, #0x100
BL              sub_22F54
SUBS            R8, R0, #0
BNE             loc_156E4
LDR             R0, [R5,#0x10C] ; th
BL              pthread_detach
LDR             R3, [R11,#-0x30+var_9EC]
LDR             R3, [R3,#(dword_6A460 - 0x6A6E0)]
CMP             R3, #8
BEQ             loc_15720
MOVW            R2, #:lower16:aIncorrectTotal ; "incorrect total_control_threads (%d) sh"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aIncorrectTotal ; "incorrect total_control_threads (%d) sh"...
MOV             R0, R9  ; s
BL              snprintf
MOV             R1, R9
MOV             R0, R4
MOV             R2, #1
BL              sub_1DD60
MOV             R1, R8
MOV             R0, #1
BL              sub_2C230

loc_15358
MOVW            R1, #0x569
LDR             R0, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_2DCC0

loc_15364
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aNoLoginCredent ; "No login credentials supplied for pool "...
MOV             R5, R0
MOV             R3, R8
MOVT            R2, #:upper16:aNoLoginCredent ; "No login credentials supplied for pool "...
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x2A3C+var_2A3C]
MOV             R0, R9  ; s
BL              snprintf
MOV             R1, R9
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, R5
MOV             R0, #1
BL              sub_2C230

loc_153A4               ; size
MOV             R1, #1
MOV             R0, R1  ; nmemb
BL              calloc
STR             R0, [R4,#0xB0]
B               loc_14D90

loc_153B8
MOV             R1, #0x570
LDR             R0, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_2DCC0

loc_153C4
BL              __errno_location
LDR             R1, =aLoadTempCutoff ; "load_temp_cutoffs"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x56B
STR             R3, [SP,#0x2A3C+var_2A3C]
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x2A3C+var_2A38]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#0x2A3C+var_2A34]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
SUB             R0, R11, #-(-0x30+var_804+4)
SUB             R0, R0, #4 ; s
BL              snprintf
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4

loc_15408
MOV             R2, #1
B               loc_146F8

loc_15410
BL              close
CMP             R0, #0
BGE             loc_14F88
MOV             R0, #aCloseFailedToC ; "close - failed to close read end of pip"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_15430               ; rwlock
MOV             R0, #stru_74FC0
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_15488
MOVW            R3, #:lower16:dword_74F68
LDR             R2, [R8]
MOVT            R3, #:upper16:dword_74F68
STR             R3, [R11,#-0x30+var_9F4]
LDR             R3, [R3]
B               loc_15468

loc_1545C
LDR             R1, [R3,R4,LSL#2]
ADD             R4, R4, #1
STR             R5, [R1,#0xB8]

loc_15468
CMP             R4, R2
BLT             loc_1545C
MOVW            R0, #:lower16:stru_74FC0
MOVW            R2, #0x586
MOVT            R0, #:upper16:stru_74FC0
LDR             R1, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_2D708
B               loc_14A44

loc_15488
MOV             R1, #0x580
LDR             R0, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_2DCC0

loc_15494
MOV             R0, #aForkFailedToFo ; "fork - failed to fork child process for"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_154A8
MOV             R0, #aSignalFailedTo ; "signal - failed to edit signal mask for"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_154BC
MOV             R0, #aDup2InChildFai ; "dup2 - in child, failed to alias read e"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_154D0
MOV             R0, #aPipeFailedToCr ; "pipe - failed to create pipe for --moni"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_154E4
MOV             R0, #aCloseFailedToC_0 ; "close - failed to close write end of pi"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_154F8
MOV             R0, #aDup2FailedToAl ; "dup2 - failed to alias stderr to write "...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_1550C
LDR             R4, =unk_6A240
MOV             R5, #1
SUB             R0, R4, #4 ; mutex
BL              pthread_mutex_lock
STR             R9, [R11,#-0x30+var_9FC]
MOV             R9, R8
MOV             R8, R4

loc_15528
LDR             R3, [R7]
CMP             R3, R6
BLE             loc_15560
LDR             R3, [R11,#-0x30+var_9F8]
LDR             R3, [R3]
LDR             R4, [R3,R6,LSL#2]
LDR             R3, [R4,#0x64]
ADD             R0, R4, #0x64 ; 'd'
CMP             R3, #1
BEQ             loc_15554
BL              sub_28F90

loc_15554
ADD             R6, R6, #1
STRB            R5, [R4,#0x61]
B               loc_15528

loc_15560
LDR             R3, [R11,#-0x30+format]
MOV             R4, R8
MOV             R8, R9
LDR             R9, [R11,#-0x30+var_9FC]
LDR             R3, [R3,#(dword_688F8 - 0x686E8)]
CMP             R3, #0
BEQ             loc_15580
BL              sub_3DA90

loc_15580
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_155B0
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_155B0
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #4
BLE             loc_155E0

loc_155B0
MOVW            LR, #:lower16:aProbingForAnAl ; "Probing for an alive pool"
MOV             R12, R9
MOVT            LR, #:upper16:aProbingForAnAl ; "Probing for an alive pool"
LDM             LR!, {R0-R3} ; "Probing for an alive pool"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "live pool"
STM             R12!, {R0,R1}
MOV             R1, R9
STRH            R2, [R12]
MOV             R0, #5
MOV             R2, #0
BL              sub_1DD60

loc_155E0
BL              sub_28CFC
SUB             R0, R4, #4 ; mutex
MOV             R5, #0
BL              pthread_mutex_unlock

loc_155F0               ; seconds
MOV             R0, #1
ADD             R5, R5, R0
BL              sleep
LDR             R3, [R11,#-0x30+format]
LDRB            R3, [R3,#(byte_68A04 - 0x686E8)]
EOR             R3, R3, #1
CMP             R5, #0xB4
MOVEQ           R3, #0
ANDNE           R3, R3, #1
CMP             R3, #0
BNE             loc_155F0
STR             R8, [R11,#-0x30+var_A00]
MOVW            R6, #:lower16:dword_67840
LDR             R8, [R11,#-0x30+var_9E4]
MOVW            R2, #:lower16:byte_686E1
MOVT            R6, #:upper16:dword_67840
MOVT            R2, #:upper16:byte_686E1
STR             R2, [R11,#-0x30+var_9FC]

loc_15638
LDR             R2, [R11,#-0x30+format]
LDRB            R2, [R2,#(byte_68A04 - 0x686E8)]
CMP             R2, #0
BNE             loc_16468
CMP             R3, #0
BEQ             loc_16224
MOV             R4, #byte_7607A

loc_15658
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_156D4

loc_15664
LDR             R3, [R11,#-0x30+var_9FC]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_156D4
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_15698
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_15698
LDR             R3, [R6]
CMP             R3, #6
BLE             loc_156D4

loc_15698
MOVW            LR, #:lower16:aNoServersCould ; "No servers could be used! Exiting."
MOV             R12, R9
MOVT            LR, #:upper16:aNoServersCould ; "No servers could be used! Exiting."
LDM             LR!, {R0-R3} ; "No servers could be used! Exiting."
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " be used! Exiting."
LDR             LR, [LR] ; "g."
STM             R12!, {R0-R3}
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60

loc_156D4
MOV             R0, #0x1F4
BL              sub_208D4
MOV             R3, #1
B               loc_15638

loc_156E4
MOVW            LR, #:lower16:aWatchdogThread ; "watchdog thread create failed"
MOV             R12, R9
MOVT            LR, #:upper16:aWatchdogThread ; "watchdog thread create failed"
LDM             LR!, {R0-R3} ; "watchdog thread create failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "create failed"
STM             R12!, {R0-R2}
MOV             R1, R9
MOV             R0, R4
MOV             R2, #1
STRH            R3, [R12]
BL              sub_1DD60
MOV             R1, R6
MOV             R0, #1
BL              sub_2C230

loc_15720               ; inc
MOV             R0, #0xFFFFFFF6
BL              nice
CMP             R0, #0
BNE             loc_157AC
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_157AC
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_15774
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15774
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_157AC

loc_15774
MOVW            R12, #:lower16:aUnableToSetThr ; "Unable to set thread to high priority"
MOV             LR, R9
MOVT            R12, #:upper16:aUnableToSetThr ; "Unable to set thread to high priority"
LDM             R12!, {R0-R3} ; "Unable to set thread to high priority"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "read to high priority"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "ority"
STR             R0, [LR],#4
MOV             R0, #7
STRH            R1, [LR]
MOV             R1, R9
BL              sub_1DD60

loc_157AC
VLDR            D9, =32.0
MOVW            R3, #:lower16:byte_76068
VLDR            D8, =0.0
MOVW            R2, #:lower16:byte_74F65
LDR             R5, [R11,#-0x30+var_9F8]
MOVT            R3, #:upper16:byte_76068
MOVT            R2, #:upper16:byte_74F65
LDR             R4, [R11,#-0x30+var_9EC]
STR             R3, [R11,#-0x30+var_A00]
STR             R2, [R11,#-0x30+var_9FC]
STR             R10, [R11,#-0x30+var_9EC]

loc_157D8
LDR             R3, [R11,#-0x30+var_A00]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16084

loc_157E8
LDR             R2, [R11,#-0x30+format]
MOV             R3, #0
LDR             R0, [R2,#(dword_68B20 - 0x686E8)] ; mutex
LDR             R2, [R11,#-0x30+var_A00]
STRB            R3, [R2]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_16060
LDR             R3, [R11,#-0x30+format]
LDR             R3, [R3,#(dword_68C04 - 0x686E8)]
CMP             R3, #0
BEQ             loc_15828
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0xC]
CMP             R3, #1
BGT             loc_1619C

loc_15828
LDR             R3, [R11,#-0x30+format]
LDR             R0, [R3,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_16020
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0

loc_1584C
LDR             R3, [R11,#-0x30+var_9D8]
CMP             R3, #0
BEQ             loc_15878
SUB             R0, R11, #-(-0x30+var_9D0)
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
SUB             R0, R0, #4
MOVW            R3, #0x31FF
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMain ; "main"
SUB             R0, R0, #4
BL              sub_2AA08

loc_15878
LDR             R3, =unk_6A240
MOV             R6, #byte_686E1
STR             R3, [R11,#-0x30+var_9F4]
MOV             R3, #aSelectingPoolD ; "Selecting pool %d for work"
STR             R3, [R11,#-0x30+var_9F8]
BL              sub_2D914
STR             R0, [R11,#-0x30+var_9D8]
B               loc_159E0

loc_158A0
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_15904

loc_158AC
LDR             R3, [R11,#-0x30+var_9EC]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_158E0
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_158E0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_15904

loc_158E0               ; format
LDR             R2, [R11,#-0x30+var_9F8]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R8]
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_1DD60

loc_15904
LDRB            R3, [R8,#0x61]
CMP             R3, #0
BNE             loc_1591C
LDR             R3, [R8,#0x64]
CMP             R3, #1
BEQ             loc_15C9C

loc_1591C
MOV             R0, #0
BL              sub_31A9C
BL              sub_2FB78
LDR             R3, [R11,#-0x30+format]
MOV             R8, R0
LDR             R3, [R3,#(dword_68AE4 - 0x686E8)]
CMP             R3, #4
BEQ             loc_15EB8
CMP             R3, #3
LDREQ           R1, [R7]
MOVEQ           R3, #0
LDREQ           R0, [R5]
BEQ             loc_15B28

loc_15950
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_159B4

loc_1595C
LDR             R3, [R11,#-0x30+var_9EC]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15990
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15990
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_159B4

loc_15990               ; format
LDR             R2, [R11,#-0x30+var_9F8]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R8]
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_1DD60

loc_159B4
LDRB            R3, [R8,#0x61]
CMP             R3, #0
BNE             loc_159CC
LDR             R3, [R8,#0x64]
CMP             R3, #1
BEQ             loc_15E7C

loc_159CC
LDR             R3, [R11,#-0x30+var_9F4]
SUB             R0, R3, #4 ; mutex
BL              pthread_mutex_unlock
MOV             R0, #0xB
BL              sub_208D4

loc_159E0
LDR             R3, [R11,#-0x30+var_9F4]
SUB             R0, R3, #4 ; mutex
BL              pthread_mutex_lock
BL              sub_2FB78
LDR             R3, [R11,#-0x30+format]
MOV             R8, R0
LDR             R3, [R3,#(dword_68AE4 - 0x686E8)]
CMP             R3, #4
BEQ             loc_15EC4
CMP             R3, #3
LDREQ           R1, [R7]
MOVEQ           R3, #0
LDREQ           R0, [R5]
BNE             loc_158A0
B               loc_15A34

loc_15A1C
LDR             R2, [R0,R3,LSL#2]
LDR             R12, [R2,#0x40]
LDR             R2, [R2,#0x3C]
CMP             R12, R2
BLT             loc_15A70
ADD             R3, R3, #1

loc_15A34
CMP             R3, R1
BLT             loc_15A1C
MOV             R3, #0
MOV             R2, R3
B               loc_15A54

loc_15A48
LDR             R12, [R0,R3,LSL#2]
ADD             R3, R3, #1
STR             R2, [R12,#0x40]

loc_15A54
CMP             R1, R3
BGT             loc_15A48
LDR             R3, [R4,#(dword_6A6A0 - 0x6A6E0)]
ADD             R3, R3, #1
CMP             R1, R3
MOVLE           R3, #0
STR             R3, [R4,#(dword_6A6A0 - 0x6A6E0)]

loc_15A70
MOV             R3, #0
MOV             R10, R5
B               loc_15A9C

loc_15A7C
LDR             R3, [R4,#(dword_6A6A0 - 0x6A6E0)]
LDR             R1, [R7]
ADD             R3, R3, #1
CMP             R3, R1
STR             R3, [R4,#(dword_6A6A0 - 0x6A6E0)]
MOVGE           R3, #0
STRGE           R3, [R4,#(dword_6A6A0 - 0x6A6E0)]
MOV             R3, R5

loc_15A9C
LDR             R1, [R7]
ADD             R5, R3, #1
CMP             R3, R1
BGE             loc_15C40
LDR             R3, [R10]
LDR             R1, [R4,#(dword_6A6A0 - 0x6A6E0)]
LDR             R1, [R3,R1,LSL#2]
LDR             R3, [R1,#0x40]
LDR             R12, [R1,#0x3C]
ADD             R0, R3, #1
CMP             R3, R12
STR             R0, [R1,#0x40]
BGE             loc_15A7C
LDRB            R3, [R1,#0x61]
CMP             R3, #0
BNE             loc_15AE8
LDR             R3, [R1,#0x64]
CMP             R3, #1
BEQ             loc_15E04

loc_15AE8
LDR             R3, [R11,#-0x30+var_9FC]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_15A7C
MOV             R0, #0
BL              sub_290E8
LDR             R3, [R0,#0x40]
SUB             R3, R3, #1
STR             R3, [R0,#0x40]
B               loc_15A7C

loc_15B10
LDR             R2, [R0,R3,LSL#2]
LDR             R12, [R2,#0x40]
LDR             R2, [R2,#0x3C]
CMP             R12, R2
BLT             loc_15B64
ADD             R3, R3, #1

loc_15B28
CMP             R3, R1
BLT             loc_15B10
MOV             R3, #0
MOV             R2, R3
B               loc_15B48

loc_15B3C
LDR             R12, [R0,R3,LSL#2]
ADD             R3, R3, #1
STR             R2, [R12,#0x40]

loc_15B48
CMP             R1, R3
BGT             loc_15B3C
LDR             R3, [R4,#(dword_6A6A0 - 0x6A6E0)]
ADD             R3, R3, #1
CMP             R1, R3
MOVLE           R3, #0
STR             R3, [R4,#(dword_6A6A0 - 0x6A6E0)]

loc_15B64
MOV             R3, #0
MOV             R10, R5
B               loc_15BCC
dbl_15B70 DCFD 32.0
dbl_15B78 DCFD 0.0
off_15B80 DCD unk_68BA0
off_15B84 DCD dword_68B30
off_15B88 DCD dword_68B28
off_15B8C DCD dword_68B94
off_15B90 DCD aLoadTempCutoff ; "load_temp_cutoffs"
off_15B94 DCD unk_6A240
off_15B98 DCD aGetBenchmarkWo ; "get_benchmark_work"
off_15B9C DCD unk_6A464
off_15BA0 DCD dword_68AF4
off_15BA4 DCD aMain     ; "main"
off_15BA8 DCD aSignalWorkUpda ; "signal_work_update"

loc_15BAC
LDR             R3, [R4,#(dword_6A6A0 - 0x6A6E0)]
LDR             R1, [R7]
ADD             R3, R3, #1
CMP             R3, R1
STR             R3, [R4,#(dword_6A6A0 - 0x6A6E0)]
MOVGE           R3, #0
STRGE           R3, [R4,#(dword_6A6A0 - 0x6A6E0)]
MOV             R3, R5

loc_15BCC
LDR             R1, [R7]
ADD             R5, R3, #1
CMP             R3, R1
BGE             loc_15E20
LDR             R3, [R10]
LDR             R1, [R4,#(dword_6A6A0 - 0x6A6E0)]
LDR             R1, [R3,R1,LSL#2]
LDR             R3, [R1,#0x40]
LDR             R12, [R1,#0x3C]
ADD             R0, R3, #1
CMP             R3, R12
STR             R0, [R1,#0x40]
BGE             loc_15BAC
LDRB            R3, [R1,#0x61]
CMP             R3, #0
BNE             loc_15C18
LDR             R3, [R1,#0x64]
CMP             R3, #1
BEQ             loc_15E9C

loc_15C18
LDR             R3, [R11,#-0x30+var_9FC]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_15BAC
MOV             R0, #0
BL              sub_290E8
LDR             R3, [R0,#0x40]
SUB             R3, R3, #1
STR             R3, [R0,#0x40]
B               loc_15BAC

loc_15C40
MOV             R5, R10
MOV             R10, #0
B               loc_15C50

loc_15C4C
ADD             R10, R10, #1

loc_15C50
LDR             R3, [R7]
CMP             R10, R3
BGE             loc_158A0
MOV             R0, R10
BL              sub_290E8
LDRB            R3, [R0,#0x61]
MOV             R1, R0
CMP             R3, #0
BNE             loc_15C4C
LDR             R3, [R0,#0x64]
CMP             R3, #1
BNE             loc_15C4C
BL              sub_28FB0
CMP             R0, #0
BNE             loc_15C4C
MOV             R8, R1

loc_15C90
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_158AC

loc_15C9C
MOV             R0, R8
BL              sub_28FB0
CMP             R0, #0
BNE             loc_1591C
LDR             R2, [R11,#-0x30+var_9F4]
STR             R0, [R4,#(dword_6A258 - 0x6A6E0)]
STR             R0, [R11,#-0x30+var_9F8]
SUB             R10, R2, #4
MOV             R0, R10 ; mutex
BL              pthread_mutex_unlock
MOV             R0, R10 ; mutex
BL              pthread_mutex_lock
LDR             R2, [R4,#(dword_6A258 - 0x6A6E0)]
LDR             R3, [R11,#-0x30+var_9F8]
CMP             R2, #1
BEQ             loc_15ED0
LDRB            R3, [R8,#0x290]
CMP             R3, #0
BNE             loc_15F7C
MOV             R0, R10 ; mutex
BL              pthread_mutex_unlock
LDR             R3, [R11,#-0x30+var_A04]
LDR             R3, [R3]
CMP             R3, #0
STR             R3, [R11,#-0x30+var_9F4]
BNE             loc_15EE0

loc_15D04
LDR             R3, [R11,#-0x30+format]
LDRB            R3, [R3,#(byte_68C50 - 0x686E8)]
CMP             R3, #0
BEQ             loc_157D8
LDR             R8, [R11,#-0x30+var_9D8]
MOVW            R1, #0x10E9
LDR             R12, =aGetBenchmarkWo ; "get_benchmark_work"
MOV             R3, #aCgminerC ; "cgminer.c"
MOV             R2, #0x20 ; ' '
VSTR            D9, [R8,#0x178]
ADD             R0, R8, #0xA0
STR             R12, [SP,#0x2A3C+var_2A3C]
ADD             R10, R8, #0x190
STR             R1, [SP,#0x2A3C+var_2A38]
LDR             R1, =unk_6A464
BL              sub_232EC
LDR             R1, [R11,#-0x30+var_9F4]
MOV             R2, #1
LDR             R3, [R5]
MOV             R0, R10
STRB            R2, [R8,#0x11A]
STR             R1, [R8,#0xF4]
LDR             R3, [R3]
STR             R3, [R8,#0x104]
BL              sub_206A0
MOV             R1, R10
ADD             R0, R8, #0x198
BL              sub_235FC
LDRB            R3, [R6]
MOV             R2, #0x42 ; 'B'
STRB            R2, [R8,#0x1B8]
CMP             R3, #0
BEQ             loc_15DF0
LDR             R3, [R11,#-0x30+var_9EC]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15DC0
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15DC0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_15DF0

loc_15DC0
MOVW            LR, #:lower16:aGeneratedBench ; "Generated benchmark work"
MOV             R12, R9
MOVT            LR, #:upper16:aGeneratedBench ; "Generated benchmark work"

loc_15DCC
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR, {R0-R2}
STM             R12!, {R0,R1}
MOV             R1, R9
STRB            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_1DD60

loc_15DF0
LDR             R0, [R11,#-0x30+var_9D8]
BL              sub_3B058
MOV             R3, #0
STR             R3, [R11,#-0x30+var_9D8]
B               loc_157D8

loc_15E04
MOV             R0, R1
BL              sub_28FB0
CMP             R0, #0
BNE             loc_15AE8
MOV             R5, R10
MOV             R8, R1
B               loc_15C90

loc_15E20
MOV             R5, R10
MOV             R10, #0
B               loc_15E30

loc_15E2C
ADD             R10, R10, #1

loc_15E30
LDR             R3, [R7]
CMP             R10, R3
BGE             loc_15950
MOV             R0, R10
BL              sub_290E8
LDRB            R3, [R0,#0x61]
MOV             R1, R0
CMP             R3, #0
BNE             loc_15E2C
LDR             R3, [R0,#0x64]
CMP             R3, #1
BNE             loc_15E2C
BL              sub_28FB0
CMP             R0, #0
BNE             loc_15E2C
MOV             R8, R1

loc_15E70
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_1595C

loc_15E7C
MOV             R0, R8
BL              sub_28FB0
CMP             R0, #0
BNE             loc_159CC
LDR             R3, [R11,#-0x30+var_9F4]
SUB             R0, R3, #4 ; mutex
BL              pthread_mutex_unlock
B               loc_159E0

loc_15E9C
MOV             R0, R1
BL              sub_28FB0
CMP             R0, #0
BNE             loc_15C18
MOV             R5, R10
MOV             R8, R1
B               loc_15E70

loc_15EB8
BL              sub_28FD4
MOV             R8, R0
B               loc_15950

loc_15EC4
BL              sub_28FD4
MOV             R8, R0
B               loc_158A0

loc_15ED0               ; mutex
MOV             R0, R10
STR             R3, [R4,#(dword_6A258 - 0x6A6E0)]
BL              pthread_mutex_unlock
B               loc_157D8

loc_15EE0
LDR             R10, [R11,#-0x30+var_9D8]
MOV             R0, R10
ADD             R8, R10, #0x190
BL              sub_2C5A8
LDR             R3, [R5]
MOV             R2, #1
STRB            R2, [R10,#0x11A]
MOV             R0, R8
LDR             R3, [R3]
STR             R3, [R10,#0x104]
BL              sub_206A0
MOV             R1, R8
ADD             R0, R10, #0x198
BL              sub_235FC
MOV             R3, #0x42 ; 'B'
MOV             R0, R10
STRB            R3, [R10,#0x1B8]
VMOV.F64        D0, D8
BL              sub_28A90
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_15DF0
LDR             R3, [R11,#-0x30+var_9EC]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15F6C
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15F6C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_15DF0

loc_15F6C
MOVW            LR, #:lower16:aGeneratedBench_0 ; "Generated benchfile work"
MOV             R12, R9
MOVT            LR, #:upper16:aGeneratedBench_0 ; "Generated benchfile work"
B               loc_15DCC

loc_15F7C
MOV             R0, R8
LDR             R1, [R11,#-0x30+var_9D8]
BL              sub_335C8
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_16000
LDR             R3, [R11,#-0x30+var_9EC]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15FC8
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15FC8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_16000

loc_15FC8
MOVW            LR, #:lower16:aGeneratedStrat ; "Generated stratum work"
MOV             R12, R9
MOVT            LR, #:upper16:aGeneratedStrat ; "Generated stratum work"
LDM             LR!, {R0-R3} ; "Generated stratum work"
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1} ; "m work"
STR             R0, [R12],#4
MOV             R0, #7
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R9
STRB            R3, [R12]
BL              sub_1DD60

loc_16000
LDR             R0, [R11,#-0x30+var_9D8]
BL              sub_3B058
LDR             R3, [R11,#-0x30+var_9F4]
SUB             R0, R3, #4 ; mutex
MOV             R3, #0
STR             R3, [R11,#-0x30+var_9D8]
BL              pthread_mutex_unlock
B               loc_157D8

loc_16020
BL              __errno_location
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R1, =aMain ; "main"
MOVW            R12, #0x31EB
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x2A3C+var_2A38]

loc_16040               ; maxlen
MOV             R1, #0x800
STR             R3, [SP,#0x2A3C+var_2A3C]
STR             R12, [SP,#0x2A3C+var_2A34]

loc_1604C
LDR             R3, [R0]
MOV             R0, R9  ; s
BL              snprintf
MOV             R1, R9
B               loc_15408

loc_16060
BL              __errno_location
LDR             R1, =aMain ; "main"
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R12, #0x31E0
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP,#0x2A3C+var_2A38]
B               loc_16040

loc_16084
LDR             R3, [R11,#-0x30+var_9EC]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_160B8
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_160B8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_160E8

loc_160B8
MOVW            LR, #:lower16:aWorkUpdateMess ; "Work update message received"
MOV             R12, R9
MOVT            LR, #:upper16:aWorkUpdateMess ; "Work update message received"
LDM             LR!, {R0-R3} ; "Work update message received"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "age received"
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             R1, R9
MOV             R0, #6
STRB            R3, [R12]
BL              sub_1DD60

loc_160E8
LDR             R0, =dword_68AF4
BL              sub_206A0
MOV             R0, #stru_74F90 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_16410
LDR             R3, [R11,#-0x30+var_9F0]
MOV             R2, #1
LDR             R1, [R3]
LDR             R3, [R11,#-0x30+var_A10]
LDR             R3, [R3]
B               loc_16128

loc_1611C
LDR             R12, [R3,R0,LSL#2]
ADD             R0, R0, #1
STRB            R2, [R12,#0x3F]

loc_16128
CMP             R0, R1
BLT             loc_1611C
MOV             R0, #stru_74F90 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1643C
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
B               loc_157E8

loc_16158
MOVW            LR, #:lower16:aWatchpoolThrea ; "watchpool thread create failed"
MOV             R12, R9
MOVT            LR, #:upper16:aWatchpoolThrea ; "watchpool thread create failed"
LDM             LR!, {R0-R3} ; "watchpool thread create failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " create failed"
STM             R12!, {R0-R2}
MOV             R1, R9
MOV             LR, R3,LSR#16
MOV             R0, R4
MOV             R2, #1
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_1DD60
MOV             R1, #0
MOV             R0, #1
BL              sub_2C230

loc_1619C
LDR             R6, [R11,#-0x30+format]
MOV             R0, #stru_72E68 ; cond
LDR             R1, [R6,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_cond_wait
LDR             R3, [R6,#(dword_68C04 - 0x686E8)]
CMP             R3, #0
BEQ             loc_15828
LDR             R3, [R3,#0x158]
LDR             R0, [R6,#(dword_68B20 - 0x686E8)] ; mutex
LDR             R6, [R3,#0xC]
BL              pthread_mutex_unlock
SUBS            R8, R0, #0
BNE             loc_16020
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R6, #1
BLE             loc_1584C
MOV             R0, R8
BL              sub_32BF8
CMP             R0, #0
STR             R0, [R11,#-0x30+var_9D8]
BEQ             loc_157D8
SUB             R0, R11, #-(-0x30+var_9D0)
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
SUB             R0, R0, #4
MOVW            R3, #0x31F7
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMain ; "main"
SUB             R0, R0, #4
BL              sub_2AA08
B               loc_157D8

loc_16224
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_16248
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_16248
LDR             R3, [R6]
CMP             R3, #2
BLE             loc_163F4

loc_16248
MOVW            LR, #:lower16:aNoServersWereF ; "No servers were found that could be use"...
MOV             R12, R9
MOVT            LR, #:upper16:aNoServersWereF ; "No servers were found that could be use"...
LDM             LR!, {R0-R3} ; "No servers were found that could be use"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "found that could be used to get work fr"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " be used to get work from."
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "work from."
STM             R12!, {R0,R1}
MOV             R1, R9
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #3
STRB            R3, [R12]
MOV             R2, #0
BL              sub_1DD60
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_162A8
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_163F4

loc_162A8
MOVW            R1, #:lower16:aPleaseCheckThe ; "Please check the details from the list "...
MOV             R2, #0x4B ; 'K' ; n
MOVT            R1, #:upper16:aPleaseCheckThe ; "Please check the details from the list "...
MOV             R0, R9  ; dest
BL              memcpy
MOV             R2, #0
MOV             R1, R9
MOV             R0, #3
BL              sub_1DD60
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_162E4
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_16400

loc_162E4
MOVW            R1, #:lower16:aMostLikelyYouH ; "Most likely you have input the wrong UR"...
MOV             R2, #0x5E ; '^' ; n
MOVT            R1, #:upper16:aMostLikelyYouH ; "Most likely you have input the wrong UR"...
MOV             R0, R9  ; dest
BL              memcpy
MOV             R2, #0
MOV             R1, R9
MOV             R0, #3
BL              sub_1DD60

loc_16308
MOVW            R5, #:lower16:aPoolDUrlSUserS ; "Pool: %d  URL: %s  User: %s  Password: "...
MOV             R4, #0
MOVT            R5, #:upper16:aPoolDUrlSUserS ; "Pool: %d  URL: %s  User: %s  Password: "...
B               loc_16388

loc_16318
LDR             R3, [R11,#-0x30+var_9F8]
LDRB            R2, [R10]
LDR             R3, [R3]
CMP             R2, #0
LDR             R12, [R3,R4,LSL#2]
BNE             loc_16348
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_16348
LDR             R3, [R6]
CMP             R3, #3
BLE             loc_16384

loc_16348
LDR             R0, [R12,#0xB0]
MOV             R2, R5  ; format
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
STR             R0, [SP,#0x2A3C+var_2A34]
MOV             R0, R9  ; s
LDR             LR, [R12,#0xAC]
STR             LR, [SP,#0x2A3C+var_2A38]
LDR             R12, [R12,#0xA4]
STR             R12, [SP,#0x2A3C+var_2A3C]
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #4
BL              sub_1DD60

loc_16384
ADD             R4, R4, #1

loc_16388
LDR             R3, [R7]
CMP             R3, R4
BGT             loc_16318
MOV             R4, #byte_7607A
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_15664
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_163CC
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_163CC
LDR             R3, [R6]
CMP             R3, #2
BLE             loc_156D4

loc_163CC
MOVW            R1, #:lower16:aPressAnyKeyToE ; "Press any key to exit, or cgminer will "...
MOV             R2, #0x4C ; 'L' ; n
MOVT            R1, #:upper16:aPressAnyKeyToE ; "Press any key to exit, or cgminer will "...
MOV             R0, R9  ; dest
BL              memcpy
MOV             R2, #0
MOV             R1, R9
MOV             R0, #3
BL              sub_1DD60
B               loc_15658

loc_163F4
LDR             R3, [R6]
CMP             R3, #2
BGT             loc_162A8

loc_16400
LDR             R3, [R6]
CMP             R3, #2
BGT             loc_162E4
B               loc_16308

loc_16410
BL              __errno_location
LDR             R12, =aSignalWorkUpda ; "signal_work_update"
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x15C2
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP,#0x2A3C+var_2A34]
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
MOV             R1, #0x800
B               loc_1604C

loc_1643C
BL              __errno_location
LDR             R12, =aSignalWorkUpda ; "signal_work_update"
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x15C9
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x2A3C+var_2A34]
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOV             R1, #0x800
B               loc_1604C

loc_16468
LDRB            R3, [R10]
MOVW            R2, #0x6F67
LDR             R8, [R11,#-0x30+var_A00]
STR             R2, [R11,#-0x30+var_904]
CMP             R3, #0
BNE             loc_164A4
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_164A4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_164D0

loc_164A4
MOVW            R2, #:lower16:aCheckSuccessSe ; "check success, send %s"
SUB             R3, R11, #-(-0x30+var_900)
MOVT            R2, #:upper16:aCheckSuccessSe ; "check success, send %s"
MOV             R1, #0x800 ; maxlen
SUB             R3, R3, #4
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #5
BL              sub_1DD60

loc_164D0
MOVW            R6, #:lower16:aBitmainFlushAp ; "bitmain_flush_api fail: send %s, times="...
MOVW            R5, #:lower16:dword_67840
MOVT            R6, #:upper16:aBitmainFlushAp ; "bitmain_flush_api fail: send %s, times="...
MOVT            R5, #:upper16:dword_67840
MOV             R4, #0

loc_164E4
SUB             R0, R11, #-(-0x30+var_900)
SUB             R0, R0, #4 ; s
BL              strlen
MOV             R1, R0
SUB             R0, R11, #-(-0x30+var_900)
SUB             R0, R0, #4
BL              sub_42680
CMP             R0, #0
LDRB            R3, [R10]
BEQ             loc_16578
CMP             R3, #0
BNE             loc_16530
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16530
LDR             R3, [R5]
CMP             R3, #4
BLE             loc_16560

loc_16530
SUB             R3, R11, #-(-0x30+var_900)
STR             R0, [SP,#0x2A3C+var_2A38]
MOV             R2, R6  ; format
MOV             R1, #0x800 ; maxlen
SUB             R3, R3, #4
STR             R4, [SP,#0x2A3C+var_2A3C]
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #5
BL              sub_1DD60

loc_16560
ADD             R4, R4, #1
MOV             R0, #0x3E8
BL              sub_208D4
CMP             R4, #8
BNE             loc_164E4
B               loc_15208

loc_16578
CMP             R3, #0
BNE             loc_165A4
LDR             R3, [R11,#-0x30+var_9E4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_165A4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_15208

loc_165A4
SUB             R3, R11, #-(-0x30+var_900)
MOVW            R2, #:lower16:aCheckSuccessSe_0 ; "check success, send %s, times=%d"
STR             R4, [SP,#0x2A3C+var_2A3C]
SUB             R3, R3, #4
MOVT            R2, #:upper16:aCheckSuccessSe_0 ; "check success, send %s, times=%d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #5
BL              sub_1DD60
B               loc_15208
; End of function main

CODE16


; Attributes: noreturn

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT start
start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(nullsub_9+1)
PUSH.W          {R12}   ; fini
LDR             R0, =main ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function start

off_165FC DCD nullsub_9+1
off_16600 DCD main
off_16604 DCD init+1
CODE32



; int sub_16608()
sub_16608
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x16618)
LDR             R2, =(__gmon_start___ptr_0 - 0x67000)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function sub_16608

off_16624 DCD _GLOBAL_OFFSET_TABLE_ - 0x16618
off_16628 DCD __gmon_start___ptr_0 - 0x67000
CODE16



; void *sub_1662C()
sub_1662C
MOVW            R0, #:lower16:unk_6858C
MOVW            R3, #:lower16:unk_6858C
MOVT            R0, #:upper16:unk_6858C
MOVT            R3, #:upper16:unk_6858C
CMP             R3, R0
BEQ             locret_1664C
MOV             R3, #0
CBZ             R3, locret_1664C
BX              R3

locret_1664C
BX              LR
; End of function sub_1662C

ALIGN 0x10



; __int64 sub_16650()
sub_16650
MOVW            R0, #:lower16:unk_6858C
MOVW            R1, #:lower16:unk_6858C
MOVT            R0, #:upper16:unk_6858C
MOVT            R1, #:upper16:unk_6858C
SUBS            R1, R1, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_16678
MOV             R3, #0
CBZ             R3, locret_16678
BX              R3

locret_16678
BX              LR
; End of function sub_16650

ALIGN 4



; void *sub_1667C()
sub_1667C
PUSH            {R4,LR}
MOV             R4, #byte_6859C
LDRB            R3, [R4]
CBNZ            R3, locret_16692
BL              sub_1662C
MOVS            R3, #1
STRB            R3, [R4]

locret_16692
POP             {R4,PC}
; End of function sub_1667C



; Attributes: thunk

sub_16694
B               sub_16650
; End of function sub_16694

ALIGN 4
CODE32



; int __fastcall sub_16698(const char *, char *, socklen_t)
sub_16698

var_15= -0x15
af= -0x14
var_10= -0x10
cp= -0xC

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x24
MOV             R6, R1
MOV             R7, R2
MOV             R5, R0
BL              strlen
CMP             R0, #0xF
BHI             loc_167DC
MOV             R1, #2  ; type
MOV             R2, #0  ; protocol
MOV             R0, R1  ; domain
BL              socket
CMN             R0, #1
MOV             R4, R0
BEQ             loc_16804
MOV             R1, R5  ; src
MOV             R2, #0xF ; n
MOV             R0, SP  ; dest
MOV             R5, #0
BL              strncpy
MOV             R2, SP
MOVW            R1, #0x8915 ; request
MOV             R0, R4  ; fd
STRB            R5, [SP,#0x24+var_15]
BL              ioctl
CMN             R0, #1
BEQ             loc_16740

loc_16704               ; af
LDRH            R0, [SP,#0x24+af]
CMP             R0, #2
BEQ             loc_16798
CMP             R0, #0xA
BNE             loc_167AC
MOV             R3, R7  ; len
MOV             R2, R6  ; buf
ADD             R1, SP, #0x24+cp ; cp
BL              inet_ntop

loc_16728               ; fd
MOV             R0, R4
MOV             R4, #0
BL              close

loc_16734
MOV             R0, R4
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}

loc_16740               ; fd
MOV             R0, R4
BL              close
MOV             R2, R5  ; protocol
MOV             R1, #2  ; type
MOV             R0, #0xA ; domain
BL              socket
CMN             R0, #1
MOV             R4, R0
BEQ             loc_16814
MOV             R2, SP
MOVW            R1, #0x8915 ; request
BL              ioctl
CMN             R0, #1
MOV             R5, R0
BNE             loc_16704
MOV             R0, #aIoctlFailedToG ; "IOCTL failed to get IP address"
BL              perror
MOV             R0, R4  ; fd
MOV             R4, R5
BL              close
B               loc_16734

loc_16798               ; len
MOV             R3, R7
MOV             R2, R6  ; buf
ADD             R1, SP, #0x24+var_10 ; cp
BL              inet_ntop
B               loc_16728

loc_167AC
MOVW            R3, #:lower16:stderr
MOVW            R0, #:lower16:aUnknownAddress ; "Unknown address family.\n"
MOVT            R3, #:upper16:stderr
MOV             R2, #0x18 ; n
LDR             R3, [R3] ; s
MOV             R1, #1  ; size
MOVT            R0, #:upper16:aUnknownAddress ; "Unknown address family.\n"
BL              fwrite
MOV             R0, R4  ; fd
MOV             R4, #0xFFFFFFFF
BL              close
B               loc_16734

loc_167DC
MOVW            R3, #:lower16:stderr
MOVW            R1, #:lower16:aErrorInterface ; "Error: Interface name '%s' is too long."...
MOVT            R3, #:upper16:stderr
MOV             R2, R5
LDR             R0, [R3] ; stream
MOVT            R1, #:upper16:aErrorInterface ; "Error: Interface name '%s' is too long."...
MOV             R3, #0xF
MOV             R4, #0xFFFFFFFF
BL              fprintf
B               loc_16734

loc_16804
MOV             R0, #aFailedToCreate_3 ; "Failed to create socket for IPv4"
BL              perror
B               loc_16734

loc_16814
MOV             R0, #aFailedToCreate_4 ; "Failed to create socket for IPv6"
BL              perror
B               loc_16734
; End of function sub_16698




; int __fastcall sub_16824(const char *, char *, socklen_t)
sub_16824
PUSH            {R4-R6,LR}
MOV             R6, R0
MOV             R4, R1
BL              sub_16698
SUBS            R5, R0, #0
BNE             loc_16878
MOV             R0, R4  ; s
BL              strlen
CMP             R0, #0
BEQ             loc_16870
SUB             R1, R4, #1
MOV             R2, #0x58 ; 'X'
ADD             R0, R1, R0

loc_16858
LDRB            R3, [R1,#1]!
CMP             R3, #0x2E ; '.'
CMPNE           R3, #0x3A ; ':'
STRBEQ          R2, [R1]
CMP             R1, R0
BNE             loc_16858

loc_16870
MOV             R0, R5
POP             {R4-R6,PC}

loc_16878
MOVW            R3, #:lower16:stderr
MOVW            R1, #:lower16:aFailedToGetIpA ; "Failed to get IP address from interface"...
MOVT            R3, #:upper16:stderr
MOV             R2, R6
LDR             R0, [R3] ; stream
MOVT            R1, #:upper16:aFailedToGetIpA ; "Failed to get IP address from interface"...
MOV             R5, #0xFFFFFFFF
BL              fprintf
B               loc_16870
; End of function sub_16824




; int __fastcall sub_1689C(char *, socklen_t)
sub_1689C
MOV             R2, R1
MOV             R1, R0
MOVW            R0, #:lower16:aEth0 ; "eth0"
PUSH            {R4,LR}
MOVT            R0, #:upper16:aEth0 ; "eth0"
BL              sub_16824
CMP             R0, #0
POPEQ           {R4,PC}
MOVW            R3, #:lower16:stderr
MOVW            R0, #:lower16:aFailedToRetrie_0 ; "Failed to retrieve and modify IP addres"...
MOVT            R3, #:upper16:stderr
MOV             R2, #0x33 ; '3' ; n
LDR             R3, [R3] ; s
MOV             R1, #1  ; size
MOVT            R0, #:upper16:aFailedToRetrie_0 ; "Failed to retrieve and modify IP addres"...
BL              fwrite
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_1689C

ALIGN 8



; void *__fastcall sub_168E8(_DWORD *)
sub_168E8

s= -0x84
var_44= -0x44

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC4
MOV             R5, R0
MOV             R2, #0x40 ; '@' ; n
MOV             R1, #0  ; c
MOV             R0, SP  ; s
BL              memset
MOV             R2, #0x40 ; '@' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0xC4+s ; s
BL              memset
ADD             R0, SP, #0xC4+var_44 ; s
MOV             R2, #0x40 ; '@' ; n
MOV             R1, #0  ; c
BL              memset
CMP             R5, #0
BEQ             loc_16A04
BL              sub_48A70
MOVW            R3, #:lower16:byte_6A6D0
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOVT            R3, #:upper16:byte_6A6D0
MOV             R4, R0
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x40 ; '@' ; maxlen
MOV             R0, SP  ; s
BL              snprintf
MOV             R0, SP
BL              sub_49004
MOVW            R1, #:lower16:aMinerVersion ; "miner_version"
MOV             R2, R0
MOVT            R1, #:upper16:aMinerVersion ; "miner_version"
MOV             R0, R4
BL              sub_49894
MOV             R1, #0x40 ; '@' ; maxlen
MOVW            R3, #:lower16:byte_6A25C
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOVT            R3, #:upper16:byte_6A25C
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
ADD             R0, SP, R1 ; s
BL              snprintf
ADD             R0, SP, #0xC4+s
BL              sub_49004
MOVW            R1, #:lower16:aCompiletime ; "CompileTime"
MOV             R2, R0
MOVT            R1, #:upper16:aCompiletime ; "CompileTime"
MOV             R0, R4
BL              sub_49894
MOVW            R3, #:lower16:byte_6A35C
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOVT            R3, #:upper16:byte_6A35C
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x40 ; '@' ; maxlen
ADD             R0, SP, #0xC4+var_44 ; s
BL              snprintf
MOV             R3, #unk_76318
LDRB            R2, [R3,#(byte_76324 - 0x76318)]
CMP             R2, #0
BNE             loc_16A0C

loc_169D4
ADD             R0, SP, #0xC4+var_44
BL              sub_49004
MOVW            R1, #:lower16:aType ; "type"
MOV             R2, R0
MOVT            R1, #:upper16:aType ; "type"
MOV             R0, R4
BL              sub_49894
MOVW            R1, #:lower16:aInfo ; "INFO"
MOV             R2, R4
MOV             R0, R5
MOVT            R1, #:upper16:aInfo ; "INFO"
BL              sub_49894

loc_16A04
ADD             SP, SP, #0xC4
POP             {R4,R5,PC}

loc_16A0C
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
ADD             R3, R3, #0xC
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x40 ; '@' ; maxlen
ADD             R0, SP, #0xC4+var_44 ; s
BL              snprintf
B               loc_169D4
; End of function sub_168E8




; void *__fastcall sub_16A28(_DWORD *, int, int, const char *)
sub_16A28

var_38= -0x38
s= -0x34
var_4= -4

PUSH            {R4-R9,LR}
MOV             R12, #0
SUB             SP, SP, #0x3C
MOV             R4, R0
MOV             R5, R3
MOV             R7, R1
MOV             R8, R2
MOV             R1, R12 ; c
ADD             R0, SP, #0x3C+s ; s
MOV             R2, #0x30 ; '0' ; n
STRH            R12, [SP,#0x3C+var_38]
BL              memset
CMP             R5, #0
CMPNE           R4, #0
BNE             loc_16A6C

loc_16A64
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R9,PC}

loc_16A6C
BL              sub_48E00
MOV             R9, R0
BL              sub_48A70
CMP             R7, #0
MOV             R6, R0
MOVEQ           R3, #0x45 ; 'E'
MOVNE           R3, #0x53 ; 'S'
ADD             R0, SP, #0x3C+var_4
STRH            R3, [R0,#-0x34]!
BL              sub_49004
MOVW            R1, #:lower16:aStatus ; "STATUS"
MOV             R2, R0
MOVT            R1, #:upper16:aStatus ; "STATUS"
MOV             R0, R6
BL              sub_49894
MOV             R3, #dword_685A0
LDR             R0, [R3]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aWhen ; "When"
MOV             R2, R0
MOVT            R1, #:upper16:aWhen ; "When"
MOV             R0, R6
BL              sub_49894
MOV             R1, R8,ASR#31
MOV             R0, R8
BL              sub_49250
MOVW            R1, #:lower16:aCode ; "Code"
MOV             R2, R0
MOVT            R1, #:upper16:aCode ; "Code"
MOV             R0, R6
BL              sub_49894
CMP             R8, #7
ADD             R0, SP, #0x3C+s ; s
MOVWEQ          R3, #0x2E60
MOVWNE          R2, #0xCF10
MOVTEQ          R3, #7
MOVEQ           R2, R5
MOVEQ           R1, #0x30 ; '0'
LDREQ           R3, [R3]
MOVNE           R3, R5
MOVTNE          R2, #4  ; format
MOVNE           R1, #0x30 ; '0' ; maxlen
BL              snprintf
ADD             R0, SP, #0x3C+s
BL              sub_49004
MOVW            R1, #:lower16:aMsg ; "Msg"
MOV             R2, R0
MOVT            R1, #:upper16:aMsg ; "Msg"
MOV             R0, R6
BL              sub_49894
MOV             R3, #off_682C0
LDR             R0, [R3] ; unk_55C38
BL              sub_49004
MOVW            R1, #:lower16:aDescription ; "Description"
MOV             R2, R0
MOVT            R1, #:upper16:aDescription ; "Description"
MOV             R0, R6
BL              sub_49894
MOV             R1, R6
MOV             R0, R9
BL              sub_49D54
MOVW            R1, #:lower16:aStatus ; "STATUS"
MOV             R2, R9
MOV             R0, R4
MOVT            R1, #:upper16:aStatus ; "STATUS"
BL              sub_49894
CMP             R7, #0
BNE             loc_16A64
MOV             R1, #0
MOV             R0, #1
BL              sub_49250
MOVW            R1, #:lower16:aId ; "id"
MOV             R2, R0
MOVT            R1, #:upper16:aId ; "id"
MOV             R0, R4
BL              sub_49894
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R9,PC}
; End of function sub_16A28

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x840
MOV             R4, R0
MOV             R5, R1
MOV             R0, SP
MOV             R2, #0x40 ; '@'
MOV             R1, #0
BL              memset
CMP             R4, #0
CMPNE           R5, #0
BNE             loc_16C54
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16C1C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16C1C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0x80000002
BLE             loc_16C4C

loc_16C1C
MOVW            R3, #:lower16:aGetVersionOld ; "get_version_old"
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
MOVT            R3, #:upper16:aGetVersionOld ; "get_version_old"
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800
ADD             R0, SP, #0x40 ; '@'
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x40 ; '@'
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0x80000002

loc_16C4C
ADD             SP, SP, #0x840
POP             {R4-R6,PC}

loc_16C54
LDR             R3, [R5,#8]
MOV             R2, #0x16
MOV             R1, #1
MOV             R0, R4
BL              sub_16A28
BL              sub_48E00
MOV             R6, R0
BL              sub_48A70
MOV             R5, R0
MOV             R0, #a10 ; "1.0."
BL              sub_49004
MOVW            R1, #:lower16:aBmminer_0 ; "BMMiner"
MOV             R2, R0
MOVT            R1, #:upper16:aBmminer_0 ; "BMMiner"
MOV             R0, R5
BL              sub_49894
MOV             R0, #a31 ; "3.1"
BL              sub_49004
MOVW            R1, #:lower16:aApi ; "API"
MOV             R2, R0
MOVT            R1, #:upper16:aApi ; "API"
MOV             R0, R5
BL              sub_49894
MOV             R0, #byte_6A6D0
BL              sub_49004
MOVW            R1, #:lower16:aMiner ; "Miner"
MOV             R2, R0
MOVT            R1, #:upper16:aMiner ; "Miner"
MOV             R0, R5
BL              sub_49894
MOV             R0, #byte_6A25C
BL              sub_49004
MOVW            R1, #:lower16:aCompiletime ; "CompileTime"
MOV             R2, R0
MOVT            R1, #:upper16:aCompiletime ; "CompileTime"
MOV             R0, R5
BL              sub_49894
MOVW            R3, #:lower16:byte_6A35C
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOVT            R3, #:upper16:byte_6A35C
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R1, #0x40 ; '@'
MOV             R0, SP
BL              snprintf
MOV             R3, #unk_76318
LDRB            R2, [R3,#(byte_76324 - 0x76318)]
CMP             R2, #0
BNE             loc_16D90

loc_16D28
MOV             R0, SP
BL              sub_49004
MOVW            R1, #:lower16:aType_0 ; "Type"
MOV             R2, R0
MOVT            R1, #:upper16:aType_0 ; "Type"
MOV             R0, R5
BL              sub_49894
MOV             R1, R5
MOV             R0, R6
BL              sub_49D54
MOVW            R1, #:lower16:aVersion ; "VERSION"
MOV             R2, R6
MOV             R0, R4
MOVT            R1, #:upper16:aVersion ; "VERSION"
BL              sub_49894
MOV             R1, #0
MOV             R0, #1
BL              sub_49250
MOVW            R1, #:lower16:aId ; "id"
MOV             R2, R0
MOVT            R1, #:upper16:aId ; "id"
MOV             R0, R4
BL              sub_49894
MOV             R0, #0
ADD             SP, SP, #0x840
POP             {R4-R6,PC}

loc_16D90
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
ADD             R3, R3, #0xC
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R1, #0x40 ; '@'
MOV             R0, SP
BL              snprintf
B               loc_16D28



; int __fastcall sub_16DAC(int result, const char **)
sub_16DAC

var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

CMP             R1, #0
CMPNE           R0, #0
PUSH            {R4-R6,LR}
MOV             R3, #0
SUB             SP, SP, #0x20
STR             R3, [SP,#0x20+var_1C]
STR             R3, [SP,#0x20+var_20]
STR             R3, [SP,#0x20+var_18]
STR             R3, [SP,#0x20+var_14]
STR             R3, [SP,#0x20+var_10]
STR             R3, [SP,#0x20+var_C]
STR             R3, [SP,#0x20+var_8]
STR             R3, [SP,#0x20+var_4]
BNE             loc_16DEC
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R6,PC}

loc_16DEC
MOV             R4, R1
MOV             R5, R0
BL              sub_48A70
MOV             R6, R0
MOV             R0, #(aPools+4) ; "S"
BL              sub_49004
MOVW            R1, #:lower16:aStatus ; "STATUS"
MOV             R2, R0
MOVT            R1, #:upper16:aStatus ; "STATUS"
MOV             R0, R6
BL              sub_49894
MOV             R3, #dword_685A0
LDR             R0, [R3]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aWhen_0 ; "when"
MOV             R2, R0
MOVT            R1, #:upper16:aWhen_0 ; "when"
MOV             R0, R6
BL              sub_49894
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
LDR             R3, [R4]
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x10 ; maxlen
MOV             R0, SP  ; s
BL              snprintf
MOV             R0, SP
BL              sub_49004
MOVW            R1, #:lower16:aMsg ; "Msg"
MOV             R2, R0
MOVT            R1, #:upper16:aMsg ; "Msg"
MOV             R0, R6
BL              sub_49894
MOV             R1, #0x10 ; maxlen
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
LDR             R3, [R4,#4]
ADD             R0, SP, R1 ; s
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
BL              snprintf
ADD             R0, SP, #0x20+var_10
BL              sub_49004
MOVW            R1, #:lower16:aApiVersion ; "api_version"
MOV             R2, R0
MOVT            R1, #:upper16:aApiVersion ; "api_version"
MOV             R0, R6
BL              sub_49894
MOVW            R1, #:lower16:aStatus ; "STATUS"
MOV             R2, R6
MOV             R0, R5
MOVT            R1, #:upper16:aStatus ; "STATUS"
BL              sub_49894
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R6,PC}
; End of function sub_16DAC




; int __fastcall sub_16EC8(_DWORD *, const char **)
sub_16EC8

var_82C= -0x82C
var_824= -0x824
var_81C= -0x81C
var_814= -0x814
var_808= -0x808
s= -0x804

PUSH            {R4-R9,LR}
MOV             R3, #0
CLZ             R4, R0
CMP             R1, R3
MOV             R4, R4,LSR#5
MOVEQ           R4, #1
SUB             SP, SP, #0x820
CMP             R4, R3
SUB             SP, SP, #0xC
STRH            R3, [SP,#0x82C+var_808]
BEQ             loc_16F6C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16F34
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16F34
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0x80000002
BLE             loc_16F60

loc_16F34
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
LDR             R3, =aGetStats ; "get_stats"
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x82C+s ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x82C+s
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0x80000002

loc_16F60
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_16F6C
MOV             R6, R0
MOV             R5, R1
ADD             R0, SP, #0x82C+var_808
MOV             R1, #1
BL              sub_42680
MOV             R1, R5
MOV             R0, R6
MOVW            R5, #:lower16:dword_74FE0
BL              sub_16DAC
MOVT            R5, #:upper16:dword_74FE0
MOV             R0, R6
BL              sub_168E8
BL              sub_48E00
LDR             R3, [R5]
MOV             R7, R0
CMP             R3, #0
BLE             loc_16FF8

loc_16FB0
MOV             R0, R4
ADD             R4, R4, #1
BL              sub_2DFF4
SUBS            R3, R0, #0
BEQ             loc_16FEC
LDR             R3, [R3,#4]
CMP             R3, #0
BEQ             loc_16FEC
LDR             R3, [R3,#0x1C]
CMP             R3, #0
BEQ             loc_16FEC
BLX             R3
MOV             R1, R0
MOV             R0, R7
BL              sub_49D54

loc_16FEC
LDR             R3, [R5]
CMP             R3, R4
BGT             loc_16FB0

loc_16FF8
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_170AC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_17048
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_17048
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_170AC

loc_17048
MOVW            R0, #:lower16:dword_681D8
MOVW            R2, #:lower16:dbl_681C0
MOVT            R0, #:upper16:dword_681D8
MOVT            R2, #:upper16:dbl_681C0
LDRD            R8, R9, [R0]
MOVW            R1, #:lower16:dword_72ED0
LDRD            R4, R5, [R2]
MOVW            R3, #:lower16:dbl_72D88
MOVT            R1, #:upper16:dword_72ED0
MOVT            R3, #:upper16:dbl_72D88
STRD            R8, R9, [SP,#0x82C+var_814]
MOVW            R2, #:lower16:aTotalMhashesDo ; "total_mhashes_done = %lf\n new_total_mh"...
STRD            R4, R5, [SP,#0x82C+var_81C]
MOVT            R2, #:upper16:aTotalMhashesDo ; "total_mhashes_done = %lf\n new_total_mh"...
LDRD            R8, R9, [R1]
ADD             R0, SP, #0x82C+s ; s
LDRD            R4, R5, [R3]
MOV             R1, #0x800 ; maxlen
STRD            R8, R9, [SP,#0x82C+var_824]
STRD            R4, R5, [SP,#0x82C+var_82C]
BL              snprintf
ADD             R1, SP, #0x82C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_170AC
MOVW            R1, #:lower16:aStats ; "STATS"
MOV             R2, R7
MOV             R0, R6
MOVT            R1, #:upper16:aStats ; "STATS"
BL              sub_49894
MOV             R0, #0
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R9,PC}
; End of function sub_16EC8

off_170D0 DCD aGetStats ; "get_stats"



; int __fastcall sub_170D4(_DWORD *, const char **)
sub_170D4

var_954= -0x954
var_950= -0x950
var_94C= -0x94C
var_948= -0x948
var_944= -0x944
var_940= -0x940
var_93C= -0x93C
var_938= -0x938
var_930= -0x930
var_92C= -0x92C
var_928= -0x928
var_924= -0x924
var_91C= -0x91C
var_918= -0x918
var_914= -0x914
var_910= -0x910
var_90C= -0x90C
var_908= -0x908
s= -0x904
var_884= -0x884
var_804= -0x804

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x950
SUB             SP, SP, #4
MOV             R5, R0
MOV             R4, R1
MOV             R2, #0x80 ; n
STR             R0, [SP,#0x954+var_944]
MOV             R1, #0  ; c
ADD             R0, SP, #0x954+s ; s
ADD             R6, SP, #0x954+var_924
BL              memset
ADD             R0, SP, #0x954+var_884 ; s
MOV             R2, #0x80 ; n
MOV             R1, #0  ; c
BL              memset
CMP             R5, #0
CMPNE           R4, #0
MOV             R3, #0
STR             R3, [R6],#-4
STR             R3, [SP,#0x954+var_928]
STR             R3, [R6,#8]
STR             R3, [SP,#0x954+var_930]
STR             R3, [SP,#0x954+var_91C]
STR             R3, [SP,#0x954+var_92C]
STR             R3, [SP,#0x954+var_918]
STR             R3, [SP,#0x954+var_914]
STR             R3, [SP,#0x954+var_910]
STR             R3, [SP,#0x954+var_90C]
STR             R3, [SP,#0x954+var_908]
BNE             loc_171C4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1718C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1718C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0x80000002
BLE             loc_171B8

loc_1718C
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
LDR             R3, =aGetPools ; "get_pools"
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x954+var_804 ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x954+var_804
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0x80000002

loc_171B8
ADD             SP, SP, #0x950
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_171C4
MOV             R1, R4
LDR             R4, [SP,#0x954+var_944]
MOV             R10, #dword_72E60
MOV             R0, R4
BL              sub_16DAC
MOV             R0, R4
BL              sub_168E8
BL              sub_48E00
LDR             R3, [R10]
STR             R0, [SP,#0x954+var_948]
CMP             R3, #0
BLE             loc_175E8
MOVW            R3, #:lower16:dword_72F04
MOVW            R2, #:lower16:aIndex ; "index"
MOVW            R1, #0xB3C5
MOVW            R0, #0x8889
MOVT            R3, #:upper16:dword_72F04
MOVT            R2, #:upper16:aIndex ; "index"
MOVT            R1, #0x91A2
MOVT            R0, #0x8888
MOV             R5, #0
STR             R3, [SP,#0x954+var_94C]
STR             R2, [SP,#0x954+var_940]
MOV             R11, R5
STR             R1, [SP,#0x954+var_93C]
STR             R0, [SP,#0x954+var_938]
B               loc_174D4

loc_17234
BCC             loc_1760C
CMP             R2, #2
BNE             loc_17628
MOVW            R2, #:lower16:aRejecting ; "Rejecting"
MOV             R3, R6
MOVT            R2, #:upper16:aRejecting ; "Rejecting"
LDM             R2, {R0-R2} ; "Rejecting"
STM             R3!, {R0,R1}
STRH            R2, [R3]

loc_17258
MOV             R0, R6
MOV             R9, #0
BL              sub_49004
MOVW            R1, #:lower16:aStatus_0 ; "status"
MOV             R2, R0
MOVT            R1, #:upper16:aStatus_0 ; "status"
MOV             R0, R4
BL              sub_49894
LDR             R0, [R8,#4]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:(aUnableToSetThr_0+0x1C) ; "priority"
MOV             R2, R0
MOVT            R1, #:upper16:(aUnableToSetThr_0+0x1C) ; "priority"
MOV             R0, R4
BL              sub_49894
MOV             R1, R9
LDR             R0, [R8,#0x74]
BL              sub_49250
MOVW            R1, #:lower16:aGetworks ; "getworks"
MOV             R2, R0
MOVT            R1, #:upper16:aGetworks ; "getworks"
MOV             R0, R4
BL              sub_49894
LDRD            R0, R1, [R8,#8]
BL              sub_49250
MOVW            R1, #:lower16:aAccepted ; "accepted"
MOV             R2, R0
MOVT            R1, #:upper16:aAccepted ; "accepted"
MOV             R0, R4
BL              sub_49894
LDRD            R0, R1, [R8,#0x10]
BL              sub_49250
MOVW            R1, #:lower16:aRejected ; "rejected"
MOV             R2, R0
MOVT            R1, #:upper16:aRejected ; "rejected"
MOV             R0, R4
BL              sub_49894
MOV             R1, R9
LDR             R0, [R8,#0x7C]
BL              sub_49250
MOVW            R1, #:lower16:aDiscarded ; "discarded"
MOV             R2, R0
MOVT            R1, #:upper16:aDiscarded ; "discarded"
MOV             R0, R4
BL              sub_49894
MOV             R1, R9
LDR             R0, [R8,#0x78]
BL              sub_49250
MOVW            R1, #:lower16:(aDonTSubmitShar+0x2C) ; "stale"
MOV             R2, R0
MOVT            R1, #:upper16:(aDonTSubmitShar+0x2C) ; "stale"
MOV             R0, R4
BL              sub_49894
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
ADD             R3, R8, #0x30 ; '0'
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #8  ; maxlen
ADD             R0, SP, #0x954+var_930 ; s
STR             R9, [SP,#0x954+var_930]
STR             R9, [SP,#0x954+var_92C]
BL              snprintf
ADD             R0, SP, #0x954+var_930
BL              sub_49004
MOVW            R1, #:lower16:aDiff ; "diff"
MOV             R2, R0
MOVT            R1, #:upper16:aDiff ; "diff"
MOV             R0, R4
BL              sub_49894
LDRD            R0, R1, [R8,#0x28]
BL              sub_49250
MOVW            R1, #:lower16:aDiff1 ; "diff1"
MOV             R2, R0
MOVT            R1, #:upper16:aDiff1 ; "diff1"
MOV             R0, R4
BL              sub_49894
LDRD            R0, R1, [R8,#0x48]
BLX             sub_4ABAC
BL              sub_49250
MOVW            R1, #:lower16:aDiffa ; "diffa"
MOV             R2, R0
MOVT            R1, #:upper16:aDiffa ; "diffa"
MOV             R0, R4
BL              sub_49894
LDRD            R0, R1, [R8,#0x50]
BLX             sub_4ABAC
BL              sub_49250
MOVW            R1, #:lower16:aDiffr ; "diffr"
MOV             R2, R0
MOVT            R1, #:upper16:aDiffr ; "diffr"
MOV             R0, R4
BL              sub_49894
LDRD            R0, R1, [R8,#0x58]
BLX             sub_4ABAC
BL              sub_49250
MOVW            R1, #:lower16:aDiffs ; "diffs"
MOV             R2, R0
MOVT            R1, #:upper16:aDiffs ; "diffs"
MOV             R0, R4
BL              sub_49894
ADD             R1, R8, #0x168
LDRD            R0, R1, [R1]
BLX             sub_4ABAC
BL              sub_49250
MOVW            R1, #:lower16:aLsdiff ; "lsdiff"
MOV             R2, R0
MOVT            R1, #:upper16:aLsdiff ; "lsdiff"
MOV             R0, R4
BL              sub_49894
LDR             R3, [R8,#0x160]
STR             R9, [SP,#0x954+var_91C]
STR             R9, [SP,#0x954+var_918]
CMP             R3, R9
STR             R9, [SP,#0x954+var_914]
MOVLE           R3, #0x30 ; '0'
STR             R9, [SP,#0x954+var_910]
STR             R9, [SP,#0x954+var_90C]
STR             R9, [SP,#0x954+var_908]
STRHLE          R3, [SP,#0x954+var_91C]
BLE             loc_17494
MOV             R0, R9  ; timer
BL              time
LDR             LR, [R8,#0x160]
MOVW            R2, #:lower16:aD02d02d ; "%d:%02d:%02d"
LDR             R3, [SP,#0x954+var_93C]
MOVT            R2, #:upper16:aD02d02d ; "%d:%02d:%02d"
MOV             R1, #0x18 ; maxlen
SUB             LR, R0, LR
ADD             R0, SP, #0x954+var_91C ; s
BIC             LR, LR, LR,ASR#31
UMULL           R8, R9, LR, R3
MOV             R8, #0xE10
MOV             R12, R9,LSR#11
MOV             R3, R12
MLS             R12, R8, R12, LR
LDR             LR, [SP,#0x954+var_938]
UMULL           R8, R9, R12, LR
MOV             LR, R9,LSR#5
RSB             R8, LR, LR,LSL#4
STR             LR, [SP,#0x954+var_954]
SUB             R12, R12, R8,LSL#2
STR             R12, [SP,#0x954+var_950]
BL              snprintf

loc_17494
ADD             R0, SP, #0x954+var_91C
BL              sub_49004
MOVW            R1, #:lower16:aLstime ; "lstime"
MOV             R2, R0
MOVT            R1, #:upper16:aLstime ; "lstime"
MOV             R0, R4
BL              sub_49894
MOV             R1, R4
LDR             R0, [SP,#0x954+var_948]
BL              sub_49D54

loc_174BC
LDR             R3, [R10]
ADDS            R5, R5, #1
ADD             R7, R7, #1
ADC             R11, R11, #0
CMP             R3, R7
BLE             loc_175E8

loc_174D4
LDR             R3, [SP,#0x954+var_94C]
MOV             R7, R5
LDR             R3, [R3]
LDR             R8, [R3,R5,LSL#2]
CMP             R8, #0
BEQ             loc_174BC
BL              sub_48A70
MOV             R1, R11
MOV             R4, R0
MOV             R0, R5
BL              sub_49250
LDR             R1, [SP,#0x954+var_940]
MOV             R2, R0
MOV             R0, R4
BL              sub_49894
MOV             R2, #0x80 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x954+s ; s
BL              memset
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
LDR             R3, [R8,#0xA4]
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x80 ; maxlen
ADD             R0, SP, #0x954+s ; s
BL              snprintf
ADD             R0, SP, #0x954+s
BL              sub_49004
MOVW            R1, #:lower16:aUrl ; "url"
MOV             R2, R0
MOVT            R1, #:upper16:aUrl ; "url"
MOV             R0, R4
BL              sub_49894
MOV             R2, #0x80 ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x954+var_884 ; s
BL              memset
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
LDR             R3, [R8,#0xAC]
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x80 ; maxlen
ADD             R0, SP, #0x954+var_884 ; s
BL              snprintf
ADD             R0, SP, #0x954+var_884
BL              sub_49004
MOVW            R1, #:lower16:aUser ; "user"
MOV             R2, R0
MOVT            R1, #:upper16:aUser ; "user"
MOV             R0, R4
BL              sub_49894
LDR             R2, [R8,#0x64]
MOV             R3, #0
STR             R3, [R6]
STR             R3, [R6,#4]
CMP             R2, #1
STR             R3, [R6,#8]
BNE             loc_17234
LDRB            R3, [R8,#0x61]
CMP             R3, #0
MOVWNE          R3, #0xB158
MOVWEQ          R3, #0xB160
MOVTNE          R3, #4
MOVTEQ          R3, #4
LDMNE           R3, {R0,R1}
LDMEQ           R3, {R0,R1}
STRNE           R0, [R6]
STREQ           R0, [R6]
STRBNE          R1, [SP,#0x954+var_924]
STRHEQ          R1, [SP,#0x954+var_924]
B               loc_17258

loc_175E8
MOVW            R1, #:lower16:aPools ; "POOLS"
LDR             R2, [SP,#0x954+var_948]
LDR             R0, [SP,#0x954+var_944]
MOVT            R1, #:upper16:aPools ; "POOLS"
BL              sub_49894
MOV             R0, #0
ADD             SP, SP, #0x950
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_1760C
MOVW            R2, #:lower16:aDisabled ; "Disabled"
MOV             R3, R6
MOVT            R2, #:upper16:aDisabled ; "Disabled"
LDM             R2, {R0-R2} ; "Disabled"
STM             R3!, {R0,R1}
STRB            R2, [R3]
B               loc_17258

loc_17628
MOV             R3, #aUnknown ; "Unknown"
LDM             R3, {R0,R1} ; "Unknown"
STM             R6, {R0,R1}
B               loc_17258
; End of function sub_170D4

off_1763C DCD aGetPools ; "get_pools"



; int __fastcall sub_17640(_DWORD *, int)
sub_17640

var_964= -0x964
var_960= -0x960
format= -0x95C
var_958= -0x958
var_954= -0x954
var_950= -0x950
var_94C= -0x94C
var_944= -0x944
var_940= -0x940
var_93C= -0x93C
var_938= -0x938
var_930= -0x930
var_92C= -0x92C
var_928= -0x928
var_924= -0x924
var_91C= -0x91C
var_918= -0x918
var_914= -0x914
var_910= -0x910
var_90C= -0x90C
var_908= -0x908
s= -0x904
var_884= -0x884
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R2, #0x80 ; n
VPUSH           {D8-D9}
SUB             SP, SP, #0x960
SUB             SP, SP, #4
MOV             R4, R0
STR             R0, [SP,#0x964+var_958]
MOV             R5, R1
ADD             R0, SP, #0x964+s ; s
MOV             R1, #0  ; c
BL              memset
ADD             R0, SP, #0x964+var_884 ; s
MOV             R2, #0x80 ; n
MOV             R1, #0  ; c
ADD             R6, SP, #0x964+var_924
BL              memset
CMP             R4, #0
CMPNE           R5, #0
MOV             R3, #0
STR             R3, [R6],#-4
STR             R3, [SP,#0x964+var_928]
STR             R3, [R6,#8]
STR             R3, [SP,#0x964+var_930]
STR             R3, [SP,#0x964+var_91C]
STR             R3, [SP,#0x964+var_92C]
STR             R3, [SP,#0x964+var_918]
STR             R3, [SP,#0x964+var_914]
STR             R3, [SP,#0x964+var_910]
STR             R3, [SP,#0x964+var_90C]
STR             R3, [SP,#0x964+var_908]
BNE             loc_17740
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_176FC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_176FC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R4, #0x80000002
BLE             loc_17728

loc_176FC
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
ADD             R0, SP, #0x964+var_804 ; s
LDR             R3, =aGetPoolsOld ; "get_pools_old"
MOV             R4, #0x80000002
BL              snprintf
ADD             R1, SP, #0x964+var_804
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_17728
MOV             R0, R4
ADD             SP, SP, #0x960
ADD             SP, SP, #4
VPOP            {D8-D9}
POP             {R4-R11,PC}
off_1773C DCD aGetPoolsOld ; "get_pools_old"

loc_17740
MOV             R10, #dword_72E60
LDR             R4, [R10]
CMP             R4, #0
BEQ             loc_17E6C
LDR             R3, [R5,#8]
MOV             R2, #7
MOV             R1, #1
LDR             R0, [SP,#0x964+var_958]
BL              sub_16A28
BL              sub_48E00
LDR             R3, [R10]
STR             R0, [SP,#0x964+var_944]
CMP             R3, #0
BLE             loc_17E2C
VLDR            D8, =100.0
MOV             R11, #0
VLDR            D9, =0.0
MOVW            R3, #:lower16:dword_72F04
MOVW            R2, #:lower16:aPool ; "POOL"
MOVW            R1, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOVW            R0, #0xB3C5
MOVW            R12, #0x8889
STR             R10, [SP,#0x964+var_950]
MOV             R9, R11
MOV             R10, R6
MOVT            R3, #:upper16:dword_72F04
MOVT            R2, #:upper16:aPool ; "POOL"
MOVT            R1, #:upper16:(aReceivedFromPr+0x1C) ; "%s"
MOVT            R0, #0x91A2
MOVT            R12, #0x8888
STR             R3, [SP,#0x964+var_954]
STR             R2, [SP,#0x964+var_940]
STR             R1, [SP,#0x964+format]
STR             R0, [SP,#0x964+var_93C]
STR             R12, [SP,#0x964+var_938]

loc_177D0
LDR             R3, [SP,#0x964+var_954]
MOV             R8, R11
LDR             R3, [R3]
LDR             R4, [R3,R11,LSL#2]
LDRB            R6, [R4,#0x69]
CMP             R6, #0
BNE             loc_17E10
BL              sub_48A70
MOV             R1, R9
MOV             R5, R0
MOV             R0, R11
BL              sub_49250
LDR             R1, [SP,#0x964+var_940]
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
MOV             R2, #0x80 ; n
MOV             R1, R6  ; c
ADD             R0, SP, #0x964+s ; s
BL              memset
LDR             R3, [R4,#0xA4]
MOV             R1, #0x80 ; maxlen
LDR             R2, [SP,#0x964+format] ; format
ADD             R0, SP, #0x964+s ; s
BL              snprintf
ADD             R0, SP, #0x964+s
BL              sub_49004
MOVW            R1, #:lower16:(aStratumUrl+8) ; "URL"
MOV             R2, R0
MOVT            R1, #:upper16:(aStratumUrl+8) ; "URL"
MOV             R0, R5
BL              sub_49894
LDR             R3, [R4,#0x64]
STR             R6, [R10]
STR             R6, [R10,#4]
CMP             R3, #1
STR             R6, [R10,#8]
BEQ             loc_17F10
BCC             loc_17EF4
CMP             R3, #2
BEQ             loc_17E88
MOV             R3, #aUnknown ; "Unknown"
LDM             R3, {R0,R1} ; "Unknown"
STM             R10, {R0,R1}

loc_17884
MOV             R0, R10
MOV             R6, #0
BL              sub_49004
MOVW            R1, #:lower16:aStatus_1 ; "Status"
MOV             R2, R0
MOVT            R1, #:upper16:aStatus_1 ; "Status"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#4]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aPriority ; "Priority"
MOV             R2, R0
MOVT            R1, #:upper16:aPriority ; "Priority"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x38]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aQuota ; "Quota"
MOV             R2, R0
MOVT            R1, #:upper16:aQuota ; "Quota"
MOV             R0, R5
BL              sub_49894
LDR             R3, [R4,#0x6C]
CMP             R3, #0
MOVWNE          R0, #0xB230
MOVWEQ          R0, #0xB240
MOVTNE          R0, #4
MOVTEQ          R0, #4
BL              sub_49004
MOVW            R1, #:lower16:aLongPoll ; "Long Poll"
MOV             R2, R0
MOVT            R1, #:upper16:aLongPoll ; "Long Poll"
MOV             R0, R5
BL              sub_49894
MOV             R1, R6
LDR             R0, [R4,#0x74]
BL              sub_49250
MOVW            R1, #:lower16:aGetworks_0 ; "Getworks"
MOV             R2, R0
MOVT            R1, #:upper16:aGetworks_0 ; "Getworks"
MOV             R0, R5
BL              sub_49894
LDRD            R0, R1, [R4,#8]
BL              sub_49250
MOVW            R1, #:lower16:aAccepted_0 ; "Accepted"
MOV             R2, R0
MOVT            R1, #:upper16:aAccepted_0 ; "Accepted"
MOV             R0, R5
BL              sub_49894
LDRD            R0, R1, [R4,#0x10]
BL              sub_49250
MOVW            R1, #:lower16:aRejected_0 ; "Rejected"
MOV             R2, R0
MOVT            R1, #:upper16:aRejected_0 ; "Rejected"
MOV             R0, R5
BL              sub_49894
MOV             R1, R6
LDR             R0, [R4,#0x7C]
BL              sub_49250
MOVW            R1, #:lower16:aDiscarded_0 ; "Discarded"
MOV             R2, R0
MOVT            R1, #:upper16:aDiscarded_0 ; "Discarded"
MOV             R0, R5
BL              sub_49894
MOV             R1, R6
LDR             R0, [R4,#0x78]
BL              sub_49250
MOVW            R1, #:lower16:aStale_0 ; "Stale"
MOV             R2, R0
MOVT            R1, #:upper16:aStale_0 ; "Stale"
MOV             R0, R5
BL              sub_49894
MOV             R1, R6
LDR             R0, [R4,#0x80]
BL              sub_49250
MOVW            R1, #:lower16:aGetFailures ; "Get Failures"
MOV             R2, R0
MOVT            R1, #:upper16:aGetFailures ; "Get Failures"
MOV             R0, R5
BL              sub_49894
MOV             R1, R6
LDR             R0, [R4,#0x84]
BL              sub_49250
MOVW            R1, #:lower16:aRemoteFailures ; "Remote Failures"
MOV             R2, R0
MOVT            R1, #:upper16:aRemoteFailures ; "Remote Failures"
MOV             R0, R5
BL              sub_49894
MOV             R1, R6  ; c
MOV             R2, #0x80 ; n
ADD             R0, SP, #0x964+var_884 ; s
BL              memset
LDR             R3, [R4,#0xAC]
MOV             R1, #0x80 ; maxlen
LDR             R2, [SP,#0x964+format] ; format
ADD             R0, SP, #0x964+var_884 ; s
BL              snprintf
ADD             R0, SP, #0x964+var_884
BL              sub_49004
MOVW            R1, #:lower16:aUser_0 ; "User"
MOV             R2, R0
MOVT            R1, #:upper16:aUser_0 ; "User"
MOV             R0, R5
BL              sub_49894
LDR             R3, [R4,#0x160]
STR             R6, [SP,#0x964+var_91C]
STR             R6, [SP,#0x964+var_918]
CMP             R3, R6
STR             R6, [SP,#0x964+var_914]
MOVLE           R3, #0x30 ; '0'
STR             R6, [SP,#0x964+var_910]
STR             R6, [SP,#0x964+var_90C]
STR             R6, [SP,#0x964+var_908]
STRHLE          R3, [SP,#0x964+var_91C]
BLE             loc_17AD8
MOV             R0, R6  ; timer
MOV             R6, #0xE10
BL              time
LDR             LR, [R4,#0x160]
MOVW            R2, #:lower16:aD02d02d ; "%d:%02d:%02d"
LDR             R3, [SP,#0x964+var_93C]
MOVT            R2, #:upper16:aD02d02d ; "%d:%02d:%02d"
SUB             LR, R0, LR
BIC             LR, LR, LR,ASR#31
UMULL           R0, R1, LR, R3
ADD             R3, SP, #0x964+var_91C
STRD            R0, R1, [SP,#0x964+var_94C]
MOV             R0, R3  ; s
LDR             R3, [SP,#0x964+var_94C+4]
MOV             R1, #0x18 ; maxlen
MOV             R12, R3,LSR#11
MOV             R3, R12
MLS             R12, R6, R12, LR
LDR             LR, [SP,#0x964+var_938]
UMULL           R6, R7, R12, LR
MOV             LR, R7,LSR#5
RSB             R6, LR, LR,LSL#4
STR             LR, [SP,#0x964+var_964]
SUB             R12, R12, R6,LSL#2
STR             R12, [SP,#0x964+var_960]
BL              snprintf
B               loc_17AD8
ALIGN 8
dbl_17AC8 DCFD 100.0
dbl_17AD0 DCFD 0.0

loc_17AD8
ADD             R0, SP, #0x964+var_91C
BL              sub_49004
MOVW            R1, #:lower16:aLastShareTime ; "Last Share Time"
MOV             R2, R0
MOVT            R1, #:upper16:aLastShareTime ; "Last Share Time"
MOV             R0, R5
BL              sub_49894
MOV             R12, #0
ADD             R3, R4, #0x30 ; '0'
LDR             R2, [SP,#0x964+format] ; format
MOV             R1, #8  ; maxlen
ADD             R0, SP, #0x964+var_930 ; s
STR             R12, [SP,#0x964+var_930]
STR             R12, [SP,#0x964+var_92C]
BL              snprintf
ADD             R0, SP, #0x964+var_930
BL              sub_49004
MOVW            R1, #:lower16:aDiff_0 ; "Diff"
MOV             R2, R0
MOVT            R1, #:upper16:aDiff_0 ; "Diff"
MOV             R0, R5
BL              sub_49894
LDRD            R0, R1, [R4,#0x28]
BL              sub_49250
MOVW            R1, #:lower16:aDiff1Shares ; "Diff1 Shares"
MOV             R2, R0
MOVT            R1, #:upper16:aDiff1Shares ; "Diff1 Shares"
MOV             R0, R5
BL              sub_49894
LDR             R3, [R4,#0xB8]
CMP             R3, #0
BEQ             loc_17EC8
LDR             R0, [R4,#0xB4]
BL              sub_1F9D4
BL              sub_49004
MOVW            R1, #:lower16:aProxyType ; "Proxy Type"
MOV             R2, R0
MOVT            R1, #:upper16:aProxyType ; "Proxy Type"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0xB8]

loc_17B7C
BL              sub_49004
MOVW            R1, #:lower16:aProxy ; "Proxy"
MOV             R2, R0
MOVT            R1, #:upper16:aProxy ; "Proxy"
MOV             R0, R5
BL              sub_49894
VLDR            D7, [R4,#0x48]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aDifficultyAcce ; "Difficulty Accepted"
MOV             R2, R0
MOVT            R1, #:upper16:aDifficultyAcce ; "Difficulty Accepted"
MOV             R0, R5
BL              sub_49894
VLDR            D7, [R4,#0x50]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aDifficultyReje ; "Difficulty Rejected"
MOV             R2, R0
MOVT            R1, #:upper16:aDifficultyReje ; "Difficulty Rejected"
MOV             R0, R5
BL              sub_49894
VLDR            D7, [R4,#0x58]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aDifficultyStal ; "Difficulty Stale"
MOV             R2, R0
MOVT            R1, #:upper16:aDifficultyStal ; "Difficulty Stale"
MOV             R0, R5
BL              sub_49894
VLDR            D7, [R4,#0x168]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aLastShareDiffi ; "Last Share Difficulty"
MOV             R2, R0
MOVT            R1, #:upper16:aLastShareDiffi ; "Last Share Difficulty"
MOV             R0, R5
BL              sub_49894
LDRB            R3, [R4,#0x290]
CMP             R3, #0
BEQ             loc_17EB0
BL              sub_49408
MOV             R2, R0

loc_17C78
MOVW            R1, #:lower16:aHasStratum ; "Has Stratum"
MOV             R0, R5
MOVT            R1, #:upper16:aHasStratum ; "Has Stratum"
BL              sub_49894
LDRB            R3, [R4,#0x291]
CMP             R3, #0
BEQ             loc_17EA4
BL              sub_49408
MOV             R2, R0

loc_17C9C
MOVW            R1, #:lower16:aStratumActive ; "Stratum Active"
MOV             R0, R5
MOVT            R1, #:upper16:aStratumActive ; "Stratum Active"
BL              sub_49894
LDRB            R3, [R4,#0x291]
CMP             R3, #0
MOVWEQ          R0, #0xCF88
LDRNE           R0, [R4,#0x240]
MOVTEQ          R0, #4
BL              sub_49004
MOVW            R1, #:lower16:aStratumUrl ; "Stratum URL"
MOV             R2, R0
MOVT            R1, #:upper16:aStratumUrl ; "Stratum URL"
MOV             R0, R5
BL              sub_49894
LDRB            R3, [R4,#0x2F0]
CMP             R3, #0
BEQ             loc_17EBC
BL              sub_49408
MOV             R2, R0

loc_17CEC
MOVW            R1, #:lower16:aHasGbt ; "Has GBT"
MOV             R0, R5
MOVT            R1, #:upper16:aHasGbt ; "Has GBT"
BL              sub_49894
LDR             R3, [R4,#0x170]
LDR             R1, [R4,#0x174]
ADDS            R2, R3, R3
ADC             R12, R1, R1
ADDS            R2, R2, R3
ADC             R12, R12, R1
MOV             R0, R2,LSL#5
MOV             LR, R12,LSL#5
ADDS            R0, R2, R0
ORR             LR, LR, R2,LSR#27
ADC             R12, R12, LR
ADDS            R0, R0, R3
ADC             R1, R12, R1
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aBestShare ; "Best Share"
MOV             R2, R0
MOVT            R1, #:upper16:aBestShare ; "Best Share"
MOV             R0, R5
BL              sub_49894
VLDR            D5, [R4,#0x50]
VLDR            D7, [R4,#0x48]
VLDR            D6, [R4,#0x58]
VADD.F64        D7, D5, D7
VADD.F64        D7, D7, D6
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
VMOVEQ.F64      D0, D9
BEQ             loc_17D94
VDIV.F64        D6, D5, D7
VMUL.F64        D7, D6, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8

loc_17D94
BL              sub_492D4
MOVW            R1, #:lower16:aPoolRejected ; "Pool Rejected%"
MOV             R2, R0
MOVT            R1, #:upper16:aPoolRejected ; "Pool Rejected%"
MOV             R0, R5
BL              sub_49894
VLDR            D6, [R4,#0x48]
VLDR            D7, [R4,#0x50]
VLDR            D5, [R4,#0x58]
VADD.F64        D7, D6, D7
VADD.F64        D7, D7, D5
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
VMOVEQ.F64      D0, D9
BEQ             loc_17DEC
VDIV.F64        D6, D5, D7
VMUL.F64        D7, D6, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8

loc_17DEC
BL              sub_492D4
MOVW            R1, #:lower16:aPoolStale ; "Pool Stale%%"
MOV             R2, R0
MOVT            R1, #:upper16:aPoolStale ; "Pool Stale%%"
MOV             R0, R5
BL              sub_49894
MOV             R1, R5
LDR             R0, [SP,#0x964+var_944]
BL              sub_49D54

loc_17E10
LDR             R3, [SP,#0x964+var_950]
ADDS            R11, R11, #1
ADD             R8, R8, #1
ADC             R9, R9, #0
LDR             R3, [R3]
CMP             R3, R8
BGT             loc_177D0

loc_17E2C
LDR             R5, [SP,#0x964+var_958]
MOVW            R1, #:lower16:aPools ; "POOLS"
LDR             R2, [SP,#0x964+var_944]
MOVT            R1, #:upper16:aPools ; "POOLS"
MOV             R4, #0
MOV             R0, R5
BL              sub_49894
MOV             R1, #0
MOV             R0, #1
BL              sub_49250
MOVW            R1, #:lower16:aId ; "id"
MOV             R2, R0
MOVT            R1, #:upper16:aId ; "id"
MOV             R0, R5
BL              sub_49894
B               loc_17728

loc_17E6C
MOVW            R3, #:lower16:aNoPools ; "No pools"
LDR             R0, [SP,#0x964+var_958]
MOVT            R3, #:upper16:aNoPools ; "No pools"
MOV             R2, #8
MOV             R1, R4
BL              sub_16A28
B               loc_17728

loc_17E88
MOVW            R2, #:lower16:aRejecting ; "Rejecting"
MOV             R3, R10
MOVT            R2, #:upper16:aRejecting ; "Rejecting"
LDM             R2, {R0-R2} ; "Rejecting"
STM             R3!, {R0,R1}
STRH            R2, [R3]
B               loc_17884

loc_17EA4
BL              sub_49414
MOV             R2, R0
B               loc_17C9C

loc_17EB0
BL              sub_49414
MOV             R2, R0
B               loc_17C78

loc_17EBC
BL              sub_49414
MOV             R2, R0
B               loc_17CEC

loc_17EC8
MOV             R0, #(asc_4CF84+4) ; ""
BL              sub_49004
MOVW            R1, #:lower16:aProxyType ; "Proxy Type"
MOV             R2, R0
MOVT            R1, #:upper16:aProxyType ; "Proxy Type"
MOV             R0, R5
BL              sub_49894
MOV             R0, #(asc_4CF84+4) ; ""
B               loc_17B7C

loc_17EF4
MOVW            R2, #:lower16:aDisabled ; "Disabled"
MOV             R3, R10
MOVT            R2, #:upper16:aDisabled ; "Disabled"
LDM             R2, {R0-R2} ; "Disabled"
STM             R3!, {R0,R1}
STRB            R2, [R3]
B               loc_17884

loc_17F10
LDRB            R3, [R4,#0x61]
CMP             R3, #0
MOVWNE          R3, #0xB20C
MOVWEQ          R3, #0xB160
MOVTNE          R3, #4
MOVTEQ          R3, #4
LDMNE           R3, {R0,R1}
LDMEQ           R3, {R0,R1}
STRNE           R0, [R10]
STREQ           R0, [R10]
STRBNE          R1, [SP,#0x964+var_924]
STRHEQ          R1, [SP,#0x964+var_924]
B               loc_17884
; End of function sub_17640




; int sub_17F44()
sub_17F44

var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
MOV             R4, #byte_686E1
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_17FB4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_17F8C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_18070

loc_17F8C
MOVW            R2, #:lower16:aExecSStart ; "<<<<<<<<<<<<<<<<<<<<exec %s start>>>>>>"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aExecSStart ; "<<<<<<<<<<<<<<<<<<<<exec %s start>>>>>>"...
ADD             R0, SP, #0x80C+s ; s
LDR             R3, =aEnterSleep ; "enter_sleep"
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_17FB4
MOVW            R1, #:lower16:a127001 ; "127.0.0.1"
LDR             R0, =s1 ; s1
MOVT            R1, #:upper16:a127001 ; "127.0.0.1"
BL              strcmp
SUBS            R5, R0, #0
BNE             loc_18088
MOV             R3, #aSleep ; "sleep"
LDM             R3, {R0,R1} ; "sleep"
STR             R0, [SP,#0x80C+var_80C]
MOV             R0, SP
STRH            R1, [SP,#0x80C+var_80C+4]
MOV             R1, #5
BL              sub_42680
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_18048
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_18020
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_18058

loc_18020
MOVW            R2, #:lower16:aExecSEnd ; "<<<<<<<<<<<<<<<<<<<<exec %s end>>>>>>>>"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aExecSEnd ; "<<<<<<<<<<<<<<<<<<<<exec %s end>>>>>>>>"...
LDR             R3, =aEnterSleep ; "enter_sleep"
ADD             R0, SP, #0x80C+s ; s
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_18048
MOV             R0, R5
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_18058
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_18020
B               loc_18048

loc_18070
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_17FB4
B               loc_17F8C

loc_18088
MOV             R5, #0x80000005
B               loc_18048
; End of function sub_17F44

off_18090 DCD aEnterSleep ; "enter_sleep"
off_18094 DCD s1



; int __fastcall sub_18098(_DWORD *, const char **)
sub_18098

var_B3C= -0xB3C
var_B38= -0xB38
var_B30= -0xB30
var_B2C= -0xB2C
var_B28= -0xB28
var_B20= -0xB20
var_B1C= -0xB1C
var_B18= -0xB18
var_B14= -0xB14
var_B10= -0xB10
var_B0C= -0xB0C
s= -0xB04
var_A84= -0xA84
var_A04= -0xA04
var_804= -0x804

PUSH            {R4-R11,LR}
SUB             SP, SP, #0xB30
SUB             SP, SP, #0xC
MOV             R4, #0
MOV             R7, R0
MOV             R8, R1
MOV             R2, #0x80 ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0xB3C+s ; s
ADD             R6, SP, #0xB3C+var_A84
STR             R4, [SP,#0xB3C+var_B1C]
STRH            R4, [SP,#0xB3C+var_B18]
STR             R4, [SP,#0xB3C+var_B20]
BL              memset
MOV             R1, R4  ; c
MOV             R2, #0x80 ; n
MOV             R0, R6  ; s
BL              memset
MOV             R1, R4  ; c
ADD             R0, SP, #0xB3C+var_A04 ; s
MOV             R2, #0x200 ; n
STR             R4, [SP,#0xB3C+var_B0C]
STR             R4, [SP,#0xB3C+var_B14]
STR             R4, [SP,#0xB3C+var_B10]
STR             R4, [SP,#0xB3C+var_B0C+3]
BL              memset
CMP             R7, R4
CMPNE           R8, R4
BNE             loc_18184
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, R4
BNE             loc_1814C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R4
BNE             loc_1814C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0x80000002
BLE             loc_18178

loc_1814C
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
LDR             R3, =aGetWarning ; "get_warning"
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0xB3C+var_804 ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0xB3C+var_804
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0x80000002

loc_18178
ADD             SP, SP, #0xB30
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_18184
MOV             R1, R8
MOV             R0, R7
BL              sub_16DAC
MOV             R0, R7
BL              sub_168E8
MOVW            R1, #:lower16:(aMiner+4) ; "r"
MOVW            R0, #:lower16:aTmpWarningLog ; "/tmp/warning.log"
MOVT            R1, #:upper16:(aMiner+4) ; "r"
MOVT            R0, #:upper16:aTmpWarningLog ; "/tmp/warning.log"
BL              fopen64
SUBS            R8, R0, #0
BEQ             loc_1831C
MOVW            R10, #:lower16:aS ; "%[^;]; %[^;]; %[^;]; %s"
MOVW            R9, #:lower16:(aApiMcastCode+0xC) ; "code"
MOVW            R11, #:lower16:aCause ; "cause"
ADD             R5, SP, #0xB3C+var_B14
BL              sub_48E00
MOVT            R10, #:upper16:aS ; "%[^;]; %[^;]; %[^;]; %s"
STR             R7, [SP,#0xB3C+var_B2C]
MOVT            R9, #:upper16:(aApiMcastCode+0xC) ; "code"
MOVT            R11, #:upper16:aCause ; "cause"
STR             R0, [SP,#0xB3C+var_B30]
MOV             R7, R0
B               loc_182BC

loc_181E4
STR             R4, [SP,#0xB3C+var_B20]
STR             R4, [SP,#0xB3C+var_B1C]
STRH            R4, [SP,#0xB3C+var_B18]
BL              memset
MOV             R1, R4  ; c
MOV             R2, #0x80 ; n
MOV             R0, R6  ; s
BL              memset
ADD             R3, SP, #0xB3C+s
STR             R5, [SP,#0xB3C+var_B38]
STR             R6, [SP,#0xB3C+var_B3C]
ADD             R2, SP, #0xB3C+var_B20
STR             R4, [R5,#8]
MOV             R1, R10 ; format
STR             R4, [R5]
ADD             R0, SP, #0xB3C+var_A04 ; s
STR             R4, [R5,#4]
STR             R4, [R5,#0xB]
BL              sscanf
MOV             R1, R4  ; c
MOV             R2, #0x200 ; n
ADD             R0, SP, #0xB3C+var_A04 ; s
BL              memset
BL              sub_48A70
MOV             R4, R0
ADD             R0, SP, #0xB3C+var_B20
BL              sub_49004
MOV             R1, R9
MOV             R2, R0
MOV             R0, R4
BL              sub_49894
ADD             R0, SP, #0xB3C+s
BL              sub_49004
MOV             R1, R11
MOV             R2, R0
MOV             R0, R4
BL              sub_49894
MOV             R0, R6
BL              sub_49004
MOVW            R1, #:lower16:aSuggestion ; "suggestion"
MOV             R2, R0
MOVT            R1, #:upper16:aSuggestion ; "suggestion"
MOV             R0, R4
BL              sub_49894
MOV             R0, R5
BL              sub_49004
MOVW            R1, #:lower16:aTimestamp ; "timestamp"
MOV             R2, R0
MOVT            R1, #:upper16:aTimestamp ; "timestamp"
MOV             R0, R4
BL              sub_49894
MOV             R1, R4
MOV             R0, R7
BL              sub_49D54

loc_182BC               ; stream
MOV             R2, R8
MOV             R1, #0x200 ; n
ADD             R0, SP, #0xB3C+var_A04 ; s
MOV             R4, #0
BL              fgets
SUBS            R3, R0, #0
MOV             R2, #0x80 ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0xB3C+s ; s
BNE             loc_181E4
LDR             R7, [SP,#0xB3C+var_B2C]
MOV             R0, R8  ; stream
STR             R3, [SP,#0xB3C+var_B28]
BL              fclose
MOVW            R1, #:lower16:aWarning ; "WARNING"
LDR             R2, [SP,#0xB3C+var_B30]
MOV             R0, R7
MOVT            R1, #:upper16:aWarning ; "WARNING"
BL              sub_49894
LDR             R3, [SP,#0xB3C+var_B28]
MOV             R0, R3
ADD             SP, SP, #0xB30
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_1831C
MOV             R0, #0x80000001
B               loc_18178
; End of function sub_18098

off_18324 DCD aGetWarning ; "get_warning"



; int *__fastcall sub_18328(int *result)
sub_18328
LDR             R2, [R0]
MOV             R3, #dword_685A0
MOV             R1, #1
STRB            R1, [R3,#(byte_685B4 - 0x685A0)]
CMN             R2, #1
BXEQ            LR
PUSH            {R4,LR}
MOV             R1, #2  ; how
MOV             R4, R0
MOV             R0, R2  ; fd
BL              shutdown
LDR             R0, [R4] ; fd
BL              close
MOV             R3, #0xFFFFFFFF
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_18328




; int __fastcall sub_1836C(_DWORD *, const char *, unsigned int)
sub_1836C

dest= -0x78
var_74= -0x74
var_70= -0x70
var_6C= -0x6C
s= -0x68

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x7C
MOV             R6, R0
MOV             R8, R1
MOV             R4, R2
ADD             R0, SP, #0x7C+s ; s
MOV             R2, #0x64 ; 'd' ; n
MOV             R1, #0  ; c
BL              memset
CMP             R6, #0
BEQ             loc_183A0
CMP             R4, #2
BLS             loc_183AC

loc_183A0
MOV             R0, #0x80000002

loc_183A4
ADD             SP, SP, #0x7C ; '|'
POP             {R4-R9,PC}

loc_183AC               ; s
MOV             R0, R8
MOV             R5, #0
BL              strlen
SUB             R3, R0, #1
STR             R5, [SP,#0x7C+var_74]
CMP             R3, #0xF
STR             R5, [SP,#0x7C+dest]
STR             R5, [SP,#0x7C+var_70]
STR             R5, [SP,#0x7C+var_6C]
BHI             loc_184F4
MOV             R2, R0  ; n
MOV             R1, R8  ; src
ADD             R0, SP, #0x7C+dest ; dest
MOVW            R7, #:lower16:off_67308 ; "summary"
BL              strncpy
CMP             R4, #0
MOVT            R7, #:upper16:off_67308 ; "summary"
BEQ             loc_18438
LDR             R1, [R7] ; "summary" ...
CMP             R1, #0
BNE             loc_18414
B               loc_184D8

loc_18404
ADD             R5, R5, #1
LDR             R1, [R7,R5,LSL#4] ; s2
CMP             R1, #0
BEQ             loc_184D8

loc_18414               ; s1
ADD             R0, SP, #0x7C+dest
BL              strcmp
CMP             R0, #0
BNE             loc_18404
ADD             R1, R7, R5,LSL#4
MOV             R0, R6
LDR             R3, [R1,#0xC]
BLX             R3
B               loc_183A4

loc_18438
LDR             R1, [R7,#(off_67368 - 0x67308)] ; "summary"
CMP             R1, #0
BEQ             loc_184BC
ADD             R5, R7, #0x60 ; '`'
MOV             R9, R5
B               loc_18460

loc_18450               ; s2
LDR             R1, [R9,#0xC]!
ADD             R4, R4, #1
CMP             R1, #0
BEQ             loc_184BC

loc_18460               ; s1
ADD             R0, SP, #0x7C+dest
BL              strcmp
CMP             R0, #0
BNE             loc_18450
ADD             R4, R4, R4,LSL#1
MOV             R0, R6
MOV             R1, R4,LSL#2
ADD             R7, R7, R1
ADD             R1, R5, R1
LDR             R3, [R7,#0x68]
BLX             R3
CMP             R0, #0
BGE             loc_183A4
CMP             R0, #0x80000002
BEQ             loc_184FC

loc_1849C
ADD             R0, SP, #0x7C+s
BL              sub_49004
MOVW            R1, #:lower16:aErrorMessage ; "error_message"
MOV             R2, R0
MOVT            R1, #:upper16:aErrorMessage ; "error_message"
MOV             R0, R6
BL              sub_49894
B               loc_183A4

loc_184BC
MOVW            R2, #:lower16:aNotSupportS ; "not support (%s)"
MOV             R3, R8
MOVT            R2, #:upper16:aNotSupportS ; "not support (%s)"
MOV             R1, #0x64 ; 'd' ; maxlen
ADD             R0, SP, #0x7C+s ; s
BL              snprintf
B               loc_1849C

loc_184D8
MOVW            R3, #:lower16:aInvalidCommand ; "Invalid command"
MOV             R0, R6
MOVT            R3, #:upper16:aInvalidCommand ; "Invalid command"
MOV             R2, #0xE
MOV             R1, #0
BL              sub_16A28
B               loc_183A4

loc_184F4
CMP             R4, R5
BNE             loc_183A4

loc_184FC
MOVW            R2, #:lower16:(aSBadParam+4) ; "bad param"
ADD             R3, SP, #0x7C+s
MOVT            R2, #:upper16:(aSBadParam+4) ; "bad param"
LDM             R2, {R0-R2} ; "bad param"
STM             R3!, {R0,R1}
STRH            R2, [R3]
B               loc_1849C
; End of function sub_1836C




; char *__fastcall sub_18518(char *, int *)
sub_18518

var_10C= -0x10C
s= -0x104
var_100= -0x100

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x10C
MOV             R4, R1
MOV             R5, R0
MOV             R2, #0x100 ; n
ADD             R0, SP, #0x10C+s ; s
MOV             R1, #0  ; c
BL              memset
CMP             R4, #0
BEQ             loc_18578
LDR             R3, [R4]
CMP             R3, #6
BEQ             loc_18580
CMP             R3, #5
BEQ             loc_18598
CMP             R3, #3
BEQ             loc_185B0
CMP             R3, #4
BEQ             loc_185D4
CMP             R3, #2
BEQ             loc_185F8

loc_1856C               ; src
ADD             R1, SP, #0x10C+s
MOV             R0, R5  ; dest
BL              strcat

loc_18578
ADD             SP, SP, #0x10C
POP             {R4,R5,PC}

loc_18580
MOV             R3, #aFalse ; "false"
LDM             R3, {R0,R1} ; "false"
STR             R0, [SP,#0x10C+s]
STRH            R1, [SP,#0x10C+var_100]
B               loc_1856C

loc_18598
MOV             R3, #aTrue ; "true"
LDM             R3, {R0,R1} ; "true"
STR             R0, [SP,#0x10C+s]
STRB            R1, [SP,#0x10C+var_100]
B               loc_1856C

loc_185B0
MOV             R0, R4
BL              sub_49284
MOVW            R2, #:lower16:(aShareSubmissio_0+0x14) ; "%lld"
STRD            R0, R1, [SP,#0x10C+var_10C]
MOVT            R2, #:upper16:(aShareSubmissio_0+0x14) ; format
MOV             R1, #0x100 ; maxlen
ADD             R0, SP, #0x10C+s ; s
BL              snprintf
B               loc_1856C

loc_185D4
MOV             R0, R4
BL              sub_49330
MOVW            R2, #:lower16:a2lf ; "%.2lf"
VSTR            D0, [SP,#0x10C+var_10C]
MOVT            R2, #:upper16:a2lf ; "%.2lf"
MOV             R1, #0x100 ; maxlen
ADD             R0, SP, #0x10C+s ; s
BL              snprintf
B               loc_1856C

loc_185F8
MOV             R0, R4
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x100 ; maxlen
ADD             R0, SP, #0x10C+s ; s
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
BL              snprintf
B               loc_1856C
; End of function sub_18518




; int __fastcall sub_1861C(int result, _DWORD *, int)
sub_1861C
PUSH            {R4-R6,LR}
LDR             R4, [R1,#8]
CMP             R4, #0
POPLE           {R4-R6,PC}
LDR             R12, [R1,#0x10]
LDR             R3, [R12]
CMP             R2, R3
MOVNE           R3, #0
BEQ             loc_186CC

loc_18640
ADD             R3, R3, #1
CMP             R3, R4
MOV             R5, R3,LSL#2
POPEQ           {R4-R6,PC}
LDR             LR, [R12,#4]!
CMP             LR, R2
BNE             loc_18640

loc_1865C
LDR             R3, [R1,#0xC]
MOV             R6, R0
MOV             R4, R1
LDR             R0, [R3,R5]
BL              sub_49004
MOVW            R1, #:lower16:aStatus_0 ; "status"
MOV             R2, R0
MOVT            R1, #:upper16:aStatus_0 ; "status"
MOV             R0, R6
BL              sub_49894
LDR             R3, [R4,#0x10]
LDR             R0, [R3,R5]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:(aApiMcastCode+0xC) ; "code"
MOV             R2, R0
MOVT            R1, #:upper16:(aApiMcastCode+0xC) ; "code"

loc_186A0
MOV             R0, R6
BL              sub_49894
LDR             R3, [R4,#0x14]
LDR             R0, [R3,R5]
BL              sub_49004
MOVW            R1, #:lower16:aMsg_0 ; "msg"
MOV             R2, R0
MOVT            R1, #:upper16:aMsg_0 ; "msg"
MOV             R0, R6
POP             {R4-R6,LR}
B               sub_49894

loc_186CC
MOV             R5, #0
B               loc_1865C
; End of function sub_1861C




; int __fastcall sub_186D4(int result, _DWORD *)
sub_186D4
CMP             R0, #0
BXEQ            LR
LDR             R3, =unk_77318
LDRB            R2, [R3,#(dword_77D20 - 0x77318)]
TST             R2, #4
SBFXEQ          R2, R2, #1, #1
MOVNE           R2, #0xFFFFFFFE
CMP             R1, #0
BXEQ            LR
B               sub_1861C
; End of function sub_186D4

off_186FC DCD unk_77318



; int __fastcall sub_18700(int result, _DWORD *)
sub_18700
CMP             R0, #0
BXEQ            LR
CMP             R1, #0
BXEQ            LR
LDR             R3, =unk_77318
LDRB            R2, [R3,#(dword_77D20 - 0x77318)]
SBFX            R2, R2, #0, #1
B               sub_1861C
; End of function sub_18700

off_18720 DCD unk_77318



; int __fastcall sub_18724(int result, _DWORD *)
sub_18724

var_14= -0x14
var_C= -0xC

PUSH            {R4,R5,LR}
SUBS            R5, R0, #0
SUB             SP, SP, #0x14
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [SP,#0x14+var_14]
STRD            R2, R3, [SP,#0x14+var_C]
BEQ             loc_187A0
MOV             R4, R1
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
MOV             R2, SP
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
LDR             R0, =byte_76434 ; s
BL              sscanf
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x14+var_C
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
LDR             R0, =byte_76454 ; s
BL              sscanf
VLDR            D7, [SP,#0x14+var_C]
VLDR            D5, =0.95
VLDR            D6, [SP,#0x14+var_14]
VMUL.F64        D7, D7, D5
VCMPE.F64       D7, D6
VMRS            APSR_nzcv, FPSCR
MOVGT           R2, #0xFFFFFFFF
LDRLE           R3, =unk_77318
LDRBLE          R2, [R3,#(dword_77D20 - 0x77318)]
SBFXLE          R2, R2, #3, #1
CMP             R4, #0
BNE             loc_187A8

loc_187A0
ADD             SP, SP, #0x14
POP             {R4,R5,PC}

loc_187A8
MOV             R1, R4
MOV             R0, R5
BL              sub_1861C
ADD             SP, SP, #0x14
POP             {R4,R5,PC}
; End of function sub_18724

ALIGN 0x10
dbl_187C0 DCFD 0.95
off_187C8 DCD byte_76434
off_187CC DCD byte_76454
off_187D0 DCD unk_77318



; int sub_187D4()
sub_187D4
PUSH            {R4,R5,LR}
MOV             R4, #byte_686E1
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_18844
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1881C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_188E4

loc_1881C
MOVW            R2, #:lower16:aExecSStart ; "<<<<<<<<<<<<<<<<<<<<exec %s start>>>>>>"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aExecSStart ; "<<<<<<<<<<<<<<<<<<<<exec %s start>>>>>>"...
MOV             R0, SP  ; s
LDR             R3, =aReloadConfig ; "reload_config"
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_18844
MOVW            R1, #:lower16:a127001 ; "127.0.0.1"
LDR             R0, =s1 ; s1
MOVT            R1, #:upper16:a127001 ; "127.0.0.1"
BL              strcmp
SUBS            R5, R0, #0
BNE             loc_188FC
BL              sub_3DDB0
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_188BC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_18894
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_188CC

loc_18894
MOVW            R2, #:lower16:aExecSEnd ; "<<<<<<<<<<<<<<<<<<<<exec %s end>>>>>>>>"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aExecSEnd ; "<<<<<<<<<<<<<<<<<<<<exec %s end>>>>>>>>"...
MOV             R0, SP  ; s
LDR             R3, =aReloadConfig ; "reload_config"
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_188BC
MOV             R0, R5
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_188CC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_18894
B               loc_188BC

loc_188E4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_18844
B               loc_1881C

loc_188FC
MOV             R5, #0x80000005
B               loc_188BC
; End of function sub_187D4

off_18904 DCD aReloadConfig ; "reload_config"
off_18908 DCD s1



; int __fastcall sub_1890C(int result, _DWORD *)
sub_1890C
PUSH            {R4-R8,LR}
SUBS            R7, R0, #0
POPEQ           {R4-R8,PC}
MOVW            R0, #:lower16:unk_6A23C
MOV             R6, R1
MOVT            R0, #:upper16:unk_6A23C ; mutex
BL              pthread_mutex_trylock
SUBS            R8, R0, #0
BNE             loc_189C4
MOV             R3, #dword_72E60
LDR             R5, [R3]
CMP             R5, #0
BLE             loc_18980
MOVW            R2, #:lower16:dword_72F04
MOV             R3, R8
MOVT            R2, #:upper16:dword_72F04
LDR             LR, [R2]
SUB             LR, LR, #4

loc_18958
LDR             R12, [LR,#4]!
ADD             R3, R3, #1
LDR             R4, [R12,#0x64]
CMP             R4, #0
BEQ             loc_18978
LDRB            R1, [R12,#0x61]
CMP             R1, #0
BEQ             loc_189AC

loc_18978
CMP             R3, R5
BNE             loc_18958

loc_18980
MOVW            R0, #:lower16:unk_6A23C
MOV             R8, #0xFFFFFFFF
MOVT            R0, #:upper16:unk_6A23C ; mutex
BL              pthread_mutex_unlock

loc_18990
CMP             R6, #0
POPEQ           {R4-R8,PC}

loc_18998
MOV             R2, R8
MOV             R1, R6
MOV             R0, R7
POP             {R4-R8,LR}
B               sub_1861C

loc_189AC               ; mutex
MOV             R0, #unk_6A23C
BL              pthread_mutex_unlock
CMP             R6, #0
POPEQ           {R4-R8,PC}
B               loc_18998

loc_189C4
MOV             R8, #0
B               loc_18990
; End of function sub_1890C




; void __fastcall sub_189CC(int *, char *s)
sub_189CC

timeout= -0x8AC
var_8A8= -0x8A8
var_8A4= -0x8A4
var_898= -0x898
var_894= -0x894
var_890= -0x890
var_88C= -0x88C
writefds= -0x884
s= -0x804
var_C= -0xC

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x8A0
SUB             SP, SP, #0xC
MOV             R7, R0
MOV             R8, #0
MOV             R0, R1  ; s
MOV             R6, R1
MOV             R4, R8
BL              strlen
ADD             R9, SP, #0x8AC+var_88C
MOVW            R3, #:lower16:byte_686E1
MOVW            R2, #:lower16:byte_72D90
ADD             R5, R0, #1
MOVT            R3, #:upper16:byte_686E1
MOVT            R2, #:upper16:byte_72D90
STR             R5, [SP,#0x8AC+var_898]
STR             R3, [SP,#0x8AC+var_894]
STR             R2, [SP,#0x8AC+var_890]

loc_18A14
ADD             R3, SP, #0x8AC+var_88C.tv_usec
ADD             R2, SP, #0x8AC+writefds.__fds_bits+0x7C
MOVW            R1, #0xC350
STR             R4, [SP,#0x8AC+var_88C]
STR             R1, [SP,#0x8AC+var_88C.tv_usec]

loc_18A28
STR             R4, [R3,#4]!
CMP             R3, R2
BNE             loc_18A28
LDR             R0, [R7]
MOV             R3, #0  ; exceptfds
STR             R9, [SP,#0x8AC+timeout] ; timeout
MOV             R10, #1
MOV             R1, R3  ; readfds
CMP             R0, R3
ADD             R12, R0, #0x1F
MOVGE           R12, R0
SUBS            R2, R3, R0
AND             R2, R2, #0x1F
AND             LR, R0, #0x1F
MOV             R12, R12,ASR#5
RSBPL           LR, R2, #0
ADD             R2, SP, #0x8AC+var_C
ADD             R2, R2, #8
ADD             R0, R0, R10 ; nfds
ADD             R12, R2, R12,LSL#2
ADD             R2, SP, #0x8AC+writefds ; writefds
LDR             R11, [R12,#-0x880]
ORR             LR, R11, R10,LSL LR
STR             LR, [R12,#-0x880]
BL              select
CMP             R0, #0
BLE             loc_18BE0
MOV             R3, #0  ; flags
MOV             R2, R5  ; n
MOV             R1, R6  ; buf
LDR             R0, [R7] ; fd
BL              send
CMP             R0, #0
BLT             loc_18AE8
SUB             R5, R5, R0
ADD             R6, R6, R0
BNE             loc_18AC0

loc_18ABC
ADD             R8, R8, #1

loc_18AC0
CMP             R8, #2
MOVLE           R3, #0
MOVGT           R3, #1
CMP             R5, #0
ORRLE           R3, R3, #1
CMP             R3, #0
BEQ             loc_18A14

loc_18ADC
ADD             SP, SP, #0x8A0
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_18AE8
BL              __errno_location
LDR             R0, [R0] ; errnum
CMP             R0, #0xB
BEQ             loc_18B80
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_18B34
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_18B34
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_18ADC

loc_18B34
LDR             R4, [SP,#0x8AC+var_898]
BL              strerror
MOVW            R2, #:lower16:aSSendDDFailedS ; "%s: send (%d:%d) failed %s"
STR             R0, [SP,#0x8AC+var_8A4]
SUB             R5, R4, R5
LDR             R3, =aSendApiResult ; "send_api_result"
MOVT            R2, #:upper16:aSSendDDFailedS ; "%s: send (%d:%d) failed %s"
STR             R5, [SP,#0x8AC+var_8A8]
ADD             R0, SP, #0x8AC+s ; s
STR             R4, [SP,#0x8AC+timeout]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x8AC+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
ADD             SP, SP, #0x8A0
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_18B80
LDR             R3, [SP,#0x8AC+var_894]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_18ABC
LDR             R3, [SP,#0x8AC+var_890]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_18BB4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_18C54

loc_18BB4
MOVW            R2, #:lower16:aSSendEagain ; "%s: send EAGAIN "
ADD             R0, SP, #0x8AC+s ; s
MOVT            R2, #:upper16:aSSendEagain ; "%s: send EAGAIN "
LDR             R3, =aSendApiResult ; "send_api_result"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x8AC+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_18ABC

loc_18BE0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_18C1C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_18C1C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_18ADC

loc_18C1C
MOVW            R2, #:lower16:aSSendSelectFai ; "%s: send select failed, ret = %d"
STR             R0, [SP,#0x8AC+timeout]
LDR             R3, =aSendApiResult ; "send_api_result"
ADD             R0, SP, #0x8AC+s ; s
MOVT            R2, #:upper16:aSSendSelectFai ; "%s: send select failed, ret = %d"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x8AC+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
ADD             SP, SP, #0x8A0
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_18C54
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_18ABC
B               loc_18BB4
; End of function sub_189CC

off_18C6C DCD aSendApiResult ; "send_api_result"



; int __fastcall sub_18C70(_DWORD *, int)
sub_18C70

var_9EC= -0x9EC
var_9E0= -0x9E0
var_9DC= -0x9DC
var_9D4= -0x9D4
var_9D0= -0x9D0
var_9CC= -0x9CC
var_9C4= -0x9C4
var_9C0= -0x9C0
var_9BC= -0x9BC
var_9B8= -0x9B8
var_9B4= -0x9B4
var_9B0= -0x9B0
var_9AC= -0x9AC
var_9A8= -0x9A8
format= -0x9A4
var_9A0= -0x9A0
var_998= -0x998
var_994= -0x994
var_98C= -0x98C
var_984= -0x984
var_97C= -0x97C
var_974= -0x974
var_970= -0x970
var_96C= -0x96C
var_968= -0x968
s= -0x964
var_944= -0x944
var_904= -0x904
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R4, #0
VPUSH           {D8}
SUB             SP, SP, #0x9F0
SUB             SP, SP, #4
MOV             R6, #0
MOV             R7, #0
MOV             R8, R0
STR             R0, [SP,#0x9F4+var_9A0]
MOV             R5, R1
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x9F4+s ; s
ADD             R10, SP, #0x9F4+var_904
STRD            R6, R7, [SP,#0x9F4+var_994]
STRD            R6, R7, [SP,#0x9F4+var_98C]
STRD            R6, R7, [SP,#0x9F4+var_984]
STRD            R6, R7, [SP,#0x9F4+var_97C]
STR             R4, [SP,#0x9F4+var_974]
STR             R4, [SP,#0x9F4+var_970]
STR             R4, [SP,#0x9F4+var_96C]
STR             R4, [SP,#0x9F4+var_968]
BL              memset
MOV             R1, R4  ; c
MOV             R2, #0x100 ; n
MOV             R0, R10 ; s
BL              memset
MOV             R1, R4  ; c
ADD             R0, SP, #0x9F4+var_944 ; s
MOV             R2, #0x40 ; '@' ; n
STRH            R4, [SP,#0x9F4+var_998]
BL              memset
CMP             R8, R4
CMPNE           R5, R4
BNE             loc_18D7C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, R4
BNE             loc_18D3C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R4
BNE             loc_18D3C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0x80000002
BLE             loc_18D68

loc_18D3C
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
LDR             R3, =aGetStatsOld ; "get_stats_old"
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x9F4+var_804 ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x9F4+var_804
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0x80000002

loc_18D68
ADD             SP, SP, #0x9F0
ADD             SP, SP, #4
VPOP            {D8}
POP             {R4-R11,PC}
off_18D78 DCD aGetStatsOld ; "get_stats_old"

loc_18D7C
MOV             R1, #1
ADD             R0, SP, #0x9F4+var_998
BL              sub_42680
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_19D50

loc_18D9C
LDR             R3, [R5,#8]
MOV             R2, #0x46 ; 'F'
MOV             R1, #1
LDR             R0, [SP,#0x9F4+var_9A0]
BL              sub_16A28
BL              sub_48E00
STR             R0, [SP,#0x9F4+var_9BC]
MOVW            R11, #:lower16:unk_76318
BL              sub_48A70
MOV             R4, R0
MOV             R0, #a10 ; "1.0."
MOVT            R11, #:upper16:unk_76318
BL              sub_49004
MOVW            R1, #:lower16:aBmminer_0 ; "BMMiner"
MOV             R2, R0
MOVT            R1, #:upper16:aBmminer_0 ; "BMMiner"
MOV             R0, R4
BL              sub_49894
MOV             R0, #byte_6A6D0
BL              sub_49004
MOVW            R1, #:lower16:aMiner ; "Miner"
MOV             R2, R0
MOVT            R1, #:upper16:aMiner ; "Miner"
MOV             R0, R4
BL              sub_49894
MOV             R0, #byte_6A25C
BL              sub_49004
MOVW            R1, #:lower16:aCompiletime ; "CompileTime"
MOV             R2, R0
MOVT            R1, #:upper16:aCompiletime ; "CompileTime"
MOV             R0, R4
BL              sub_49894
MOVW            R3, #:lower16:byte_6A35C
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOVT            R3, #:upper16:byte_6A35C
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x40 ; '@' ; maxlen
ADD             R0, SP, #0x9F4+var_944 ; s
BL              snprintf
LDRB            R3, [R11,#(byte_76324 - 0x76318)]
CMP             R3, #0
BNE             loc_19D34

loc_18E50
MOVW            R3, #:lower16:dword_74FE0
ADD             R0, SP, #0x9F4+var_944
MOV             R5, R3
BL              sub_49004
MOV             R3, R5
MOVW            R1, #:lower16:aType_0 ; "Type"
MOVT            R3, #:upper16:dword_74FE0
MOV             R2, R0
MOVT            R1, #:upper16:aType_0 ; "Type"
MOV             R0, R4
MOV             R5, R3
STR             R3, [SP,#0x9F4+var_9B8]
BL              sub_49894
MOV             R1, R4
LDR             R0, [SP,#0x9F4+var_9BC]
BL              sub_49D54
LDR             R3, [R5]
CMP             R3, #0
BLE             loc_19ADC
VLDR            D8, =100.0
MOVW            R2, #:lower16:dbl_681C0
MOVW            R1, #:lower16:dword_68298
MOVW            R0, #:lower16:dword_76060
MOVW            R12, #:lower16:aStats ; "STATS"
MOVW            LR, #:lower16:aBtmSocD ; "BTM_SOC%d"
MOVW            R4, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
MOVW            R5, #:lower16:aTempD ; "temp%d"
MOV             R3, #0
MOVT            R2, #:upper16:dbl_681C0
MOVT            R1, #:upper16:dword_68298
MOVT            R0, #:upper16:dword_76060
MOVT            R12, #:upper16:aStats ; "STATS"
MOVT            LR, #:upper16:aBtmSocD ; "BTM_SOC%d"
MOVT            R4, #:upper16:(aTotalMhashesDo+0x5C) ; "%lf"
MOVT            R5, #:upper16:aTempD ; "temp%d"
STR             R3, [SP,#0x9F4+var_9D0]
STR             R3, [SP,#0x9F4+var_9E0]
STR             R2, [SP,#0x9F4+var_9B0]
STR             R1, [SP,#0x9F4+var_9B4]
STR             R0, [SP,#0x9F4+var_9AC]
STR             R12, [SP,#0x9F4+var_9A8]
STR             LR, [SP,#0x9F4+format]
STR             R4, [SP,#0x9F4+var_9C4]
STR             R5, [SP,#0x9F4+var_9C0]
STR             R3, [SP,#0x9F4+var_9DC]
STR             R3, [SP,#0x9F4+var_9DC+4]

loc_18F08
LDR             R6, [SP,#0x9F4+var_9DC]
MOV             R0, R6
BL              sub_2DFF4
MOV             R4, R0
BL              sub_48A70
LDR             R1, [SP,#0x9F4+var_9DC+4]
MOV             R5, R0
MOV             R0, R6
BL              sub_49250
LDR             R1, [SP,#0x9F4+var_9A8]
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
MOV             R3, R6
LDR             R2, [SP,#0x9F4+format] ; format
MOV             R1, #0x10 ; maxlen
ADD             R0, SP, #0x9F4+var_974 ; s
BL              snprintf
ADD             R0, SP, #0x9F4+var_974
BL              sub_49004
MOVW            R1, #:lower16:aId_0 ; "ID"
MOV             R2, R0
MOVT            R1, #:upper16:aId_0 ; "ID"
MOV             R0, R5
BL              sub_49894
LDR             R3, [SP,#0x9F4+var_9B0]
LDRD            R0, R1, [R3]
BLX             sub_4ABAC
BL              sub_49250
MOVW            R1, #:lower16:aElapsed ; "Elapsed"
MOV             R2, R0
MOVT            R1, #:upper16:aElapsed ; "Elapsed"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x124]
MOV             R1, #0
BL              sub_49250
MOVW            R1, #:lower16:aCalls ; "Calls"
MOV             R2, R0
MOVT            R1, #:upper16:aCalls ; "Calls"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x128]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aWait ; "Wait"
MOV             R2, R0
MOVT            R1, #:upper16:aWait ; "Wait"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x130]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aMax ; "Max"
MOV             R2, R0
MOVT            R1, #:upper16:aMax ; "Max"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x138]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aMin ; "Min"
MOV             R2, R0
MOVT            R1, #:upper16:aMin ; "Min"
MOV             R0, R5
BL              sub_49894
LDR             R4, [SP,#0x9F4+var_9C4]
ADD             R2, SP, #0x9F4+var_994
LDR             R0, =byte_76424 ; s
MOV             R1, R4  ; format
BL              sscanf
VLDR            D7, [SP,#0x9F4+var_994]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aGhs5s ; "GHS 5s"
MOV             R2, R0
MOVT            R1, #:upper16:aGhs5s ; "GHS 5s"
MOV             R0, R5
BL              sub_49894
ADD             R2, SP, #0x9F4+var_984
MOV             R1, R4  ; format
LDR             R0, =(byte_76434+0x10) ; s
BL              sscanf
VLDR            D7, [SP,#0x9F4+var_984]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aGhsAv ; "GHS av"
MOV             R2, R0
MOVT            R1, #:upper16:aGhsAv ; "GHS av"
MOV             R0, R5
BL              sub_49894
ADD             R2, SP, #0x9F4+var_98C
MOV             R1, R4  ; format
LDR             R0, =byte_76434 ; s
BL              sscanf
VLDR            D7, [SP,#0x9F4+var_98C]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRate30m ; "rate_30m"
MOV             R2, R0
MOVT            R1, #:upper16:aRate30m ; "rate_30m"
MOV             R0, R5
BL              sub_49894
LDR             R3, [SP,#0x9F4+var_9B4]
LDR             R0, [R3]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aMode ; "Mode"
MOV             R2, R0
MOVT            R1, #:upper16:aMode ; "Mode"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R11,#(dword_7631C - 0x76318)]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aMinerCount ; "miner_count"
MOV             R2, R0
MOVT            R1, #:upper16:aMinerCount ; "miner_count"
MOV             R0, R5
BL              sub_49894
LDR             R1, [R11,#(dword_7631C - 0x76318)]
CMP             R1, #0
BLE             loc_19D2C
LDR             R0, [SP,#0x9F4+var_9E0]
MOVW            R2, #:lower16:unk_76318
MOV             R3, #0
MOVT            R2, #:upper16:unk_76318

loc_19140
LDR             R12, [R2,#0x16C]
ADD             R3, R3, #1
CMP             R3, R1
ADD             R2, R2, #0x610
ADD             R0, R0, R12
BEQ             loc_19160
CMP             R3, #4
BNE             loc_19140

loc_19160
STR             R0, [SP,#0x9F4+var_9E0]

loc_19164
LDR             R0, [SP,#0x9F4+var_9E0]
BLX             sub_4A548
MOV             R3, R0,ASR#31
MOV             R2, R0
STR             R0, [SP,#0x9F4+var_9E0]
MOV             R1, R3
STRD            R2, R3, [SP,#0x9F4+var_9CC]
BL              sub_49250
MOVW            R1, #:lower16:aFrequency ; "frequency"
MOV             R2, R0
MOVT            R1, #:upper16:aFrequency ; "frequency"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R11,#(byte_76454+0x18 - 0x76318)]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aFanNum ; "fan_num"
MOV             R2, R0
MOVT            R1, #:upper16:aFanNum ; "fan_num"
MOV             R0, R5
BL              sub_49894
LDR             R3, [R11,#(byte_76454+0x18 - 0x76318)]
CMP             R3, #0
BLE             loc_19224
LDR             R6, =(byte_76454+0x1C)
MOV             R7, #aFanD ; "fan%d"
MOV             R4, #0

loc_191D4
ADD             R4, R4, #1
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
BL              memset
MOV             R3, R4
MOV             R2, R7  ; format
MOV             R1, #0x20 ; ' ' ; maxlen
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R0, [R6],#4
MOV             R1, R0,ASR#31
BL              sub_49250
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
LDR             R3, [R11,#(byte_76454+0x18 - 0x76318)]
CMP             R4, R3
BLT             loc_191D4

loc_19224
LDR             R0, [R11,#(dword_7631C - 0x76318)]
MOV             R3, #aTemp2D ; "temp2_%d"
MOV             R7, #0
STR             R3, [SP,#0x9F4+var_9D4]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aTempNum ; "temp_num"
MOV             R2, R0
MOVT            R1, #:upper16:aTempNum ; "temp_num"
MOV             R0, R5
BL              sub_49894

loc_19254
LDR             R3, [R11,#(dword_7631C - 0x76318)]
ADD             R8, R7, #1
CMP             R3, #0
MOVWGT          R4, #:lower16:unk_76318
MOVGT           R6, #0
MOVTGT          R4, #:upper16:unk_76318
BLE             loc_192BC

loc_19270
LDR             R3, [R4,#0x168]
ADD             R6, R6, #1
CMP             R3, R7
BEQ             loc_19C04
B               loc_192AC
ALIGN 8
dbl_19288 DCFD 100.0
off_19290 DCD byte_76424
off_19294 DCD byte_76434+0x10
off_19298 DCD byte_76434
off_1929C DCD byte_76454+0x1C
off_192A0 DCD byte_76454
off_192A4 DCD byte_77CF8
off_192A8 DCD aGetStatsOld ; "get_stats_old"

loc_192AC
LDR             R3, [R11,#(dword_7631C - 0x76318)]
ADD             R4, R4, #0x610
CMP             R3, R6
BGT             loc_19270

loc_192BC
CMP             R8, #4
MOV             R7, R8
BNE             loc_19254
MOVW            R7, #:lower16:aTempPcbD ; "temp_pcb%d"
MOV             R4, #0
MOVT            R7, #:upper16:aTempPcbD ; "temp_pcb%d"

loc_192D4               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
ADD             R6, R4, #1
BL              memset
MOV             R2, #0x100 ; n
MOV             R1, #0  ; c
MOV             R0, R10 ; s
BL              memset
MOV             R1, #0x20 ; ' ' ; maxlen
MOV             R3, R6
MOV             R2, R7  ; format
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R1, [R11,#(dword_7631C - 0x76318)]
CMP             R1, #0
BLE             loc_19BE8
LDR             R3, [R11,#(byte_76454+0x2C - 0x76318)]
CMP             R3, R4
BEQ             loc_19CEC
MOVW            R2, #:lower16:unk_76318
MOV             R3, #0
MOVT            R2, #:upper16:unk_76318

loc_19330
ADD             R3, R3, #1
ADD             R2, R2, #0x610
CMP             R1, R3
BEQ             loc_19BE8
CMP             R3, #4
BEQ             loc_19BE0
LDR             R0, [R2,#0x168]
CMP             R0, R4
BNE             loc_19330

loc_19354
MOV             R12, #0x610
MOVW            R2, #:lower16:aDDDD ; "%d-%d-%d-%d"
MLA             R12, R12, R3, R11
MOVT            R2, #:upper16:aDDDD ; "%d-%d-%d-%d"
MOV             R1, #0x100 ; maxlen
MOV             R0, R10 ; s
LDR             R3, [R12,#0x2A4]
LDR             R4, [R12,#0x2B0]
LDR             LR, [R12,#0x2AC]
LDR             R12, [R12,#0x2A8]
STR             R4, [SP,#0x9F4+var_9EC]
STMEA           SP, {R12,LR}
BL              snprintf

loc_19388
MOV             R0, R10
MOV             R4, R6
BL              sub_49004
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
CMP             R6, #4
BNE             loc_192D4
MOVW            R7, #:lower16:aTempChipD ; "temp_chip%d"
MOV             R4, #0
MOVT            R7, #:upper16:aTempChipD ; "temp_chip%d"

loc_193B8               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
ADD             R6, R4, #1
BL              memset
MOV             R2, #0x100 ; n
MOV             R1, #0  ; c
MOV             R0, R10 ; s
BL              memset
MOV             R1, #0x20 ; ' ' ; maxlen
MOV             R3, R6
MOV             R2, R7  ; format
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R1, [R11,#(dword_7631C - 0x76318)]
CMP             R1, #0
BLE             loc_19BCC
LDR             R3, [R11,#(byte_76454+0x2C - 0x76318)]
CMP             R3, R4
BEQ             loc_19D0C
MOVW            R2, #:lower16:unk_76318
MOV             R3, #0
MOVT            R2, #:upper16:unk_76318

loc_19414
ADD             R3, R3, #1
ADD             R2, R2, #0x610
CMP             R1, R3
BEQ             loc_19BCC
CMP             R3, #4
BEQ             loc_19BC4
LDR             R0, [R2,#0x168]
CMP             R0, R4
BNE             loc_19414

loc_19438
MOV             R12, #0x610
MOVW            R2, #:lower16:aDDDD ; "%d-%d-%d-%d"
MLA             R12, R12, R3, R11
MOVT            R2, #:upper16:aDDDD ; "%d-%d-%d-%d"
MOV             R1, #0x100 ; maxlen
MOV             R0, R10 ; s
LDR             R3, [R12,#0x2B4]
LDR             R4, [R12,#0x2C0]
LDR             LR, [R12,#0x2BC]
LDR             R12, [R12,#0x2B8]
STR             R4, [SP,#0x9F4+var_9EC]
STMEA           SP, {R12,LR}
BL              snprintf

loc_1946C
MOV             R0, R10
MOV             R4, R6
BL              sub_49004
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
CMP             R6, #4
BNE             loc_193B8
MOVW            R7, #:lower16:aTempPicD ; "temp_pic%d"
MOV             R4, #0
MOVT            R7, #:upper16:aTempPicD ; "temp_pic%d"

loc_1949C               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
ADD             R6, R4, #1
BL              memset
MOV             R2, #0x100 ; n
MOV             R1, #0  ; c
MOV             R0, R10 ; s
BL              memset
MOV             R1, #0x20 ; ' ' ; maxlen
MOV             R3, R6
MOV             R2, R7  ; format
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R1, [R11,#(dword_7631C - 0x76318)]
CMP             R1, #0
BLE             loc_19BB0
LDR             R3, [R11,#(byte_76454+0x2C - 0x76318)]
CMP             R3, R4
BEQ             loc_19D04
MOVW            R2, #:lower16:unk_76318
MOV             R3, #0
MOVT            R2, #:upper16:unk_76318

loc_194F8
ADD             R3, R3, #1
ADD             R2, R2, #0x610
CMP             R1, R3
BEQ             loc_19BB0
CMP             R3, #4
BEQ             loc_19BA8
LDR             R0, [R2,#0x168]
CMP             R0, R4
BNE             loc_194F8

loc_1951C
MOV             R12, #0x610
MOVW            R2, #:lower16:aDDDD ; "%d-%d-%d-%d"
MLA             R12, R12, R3, R11
MOVT            R2, #:upper16:aDDDD ; "%d-%d-%d-%d"
MOV             R1, #0x100 ; maxlen
MOV             R0, R10 ; s
LDR             R3, [R12,#0x294]
LDR             R4, [R12,#0x2A0]
LDR             LR, [R12,#0x29C]
LDR             R12, [R12,#0x298]
STR             R4, [SP,#0x9F4+var_9EC]
STMEA           SP, {R12,LR}
BL              snprintf

loc_19550
MOV             R0, R10
MOV             R4, R6
BL              sub_49004
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
CMP             R6, #4
BNE             loc_1949C
ADD             R2, SP, #0x9F4+var_97C
LDR             R1, [SP,#0x9F4+var_9C4] ; format
LDR             R0, =byte_76454 ; s
BL              sscanf
VLDR            D7, [SP,#0x9F4+var_97C]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aTotalRateideal ; "total_rateideal"
MOV             R2, R0
MOVT            R1, #:upper16:aTotalRateideal ; "total_rateideal"
MOV             R0, R5
BL              sub_49894
MOV             R0, #aGh ; "GH"
BL              sub_49004
MOVW            R1, #:lower16:aRateUnit ; "rate_unit"
MOV             R2, R0
MOVT            R1, #:upper16:aRateUnit ; "rate_unit"
MOV             R0, R5
BL              sub_49894
LDRD            R0, R1, [SP,#0x9F4+var_9CC]
BL              sub_49250
MOVW            R1, #:lower16:aTotalFreqavg ; "total_freqavg"
MOV             R2, R0
MOVT            R1, #:upper16:aTotalFreqavg ; "total_freqavg"
MOV             R0, R5
BL              sub_49894
LDR             R12, [R11,#(dword_7631C - 0x76318)]
CMP             R12, #0
BLE             loc_19640
LDR             R1, [SP,#0x9F4+var_9D0]
MOVW            R2, #:lower16:unk_76318
MOV             R3, #0
MOVT            R2, #:upper16:unk_76318

loc_19610
ADD             R3, R3, #1
LDR             R0, [R2,#0x190]
CMP             R12, R3
ADD             R2, R2, #0x610
MOVGT           LR, #1
MOVLE           LR, #0
CMP             R3, #3
ADD             R1, R1, R0
MOVGT           LR, #0
CMP             LR, #0
BNE             loc_19610
STR             R1, [SP,#0x9F4+var_9D0]

loc_19640
LDR             R0, [SP,#0x9F4+var_9D0]
MOV             R7, #aChainAcnD ; "chain_acn%d"
MOV             R4, #0
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aTotalAcn ; "total_acn"
MOV             R2, R0
MOVT            R1, #:upper16:aTotalAcn ; "total_acn"
MOV             R0, R5
BL              sub_49894
VLDR            D7, [SP,#0x9F4+var_984]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aTotalRate ; "total rate"
MOV             R2, R0
MOVT            R1, #:upper16:aTotalRate ; "total rate"
MOV             R0, R5
BL              sub_49894
MOV             R1, #0
MOV             R0, #0
BL              sub_49250
MOVW            R1, #:lower16:aTempMax ; "temp_max"
MOV             R2, R0
MOVT            R1, #:upper16:aTempMax ; "temp_max"
MOV             R0, R5
BL              sub_49894
LDR             R3, [SP,#0x9F4+var_9AC]
LDR             R0, [R3]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aNoMatchingWork ; "no_matching_work"
MOV             R2, R0
MOVT            R1, #:upper16:aNoMatchingWork ; "no_matching_work"
MOV             R0, R5
BL              sub_49894

loc_196E4               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
ADD             R6, R4, #1
BL              memset
MOV             R1, #0x20 ; ' ' ; maxlen
MOV             R3, R6
MOV             R2, R7  ; format
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R1, [R11,#(dword_7631C - 0x76318)]
CMP             R1, #0
BLE             loc_19B9C
LDR             R3, [R11,#(byte_76454+0x2C - 0x76318)]
CMP             R3, R4
BEQ             loc_19CFC
MOVW            R2, #:lower16:unk_76318
MOV             R3, #0
MOVT            R2, #:upper16:unk_76318

loc_19730
ADD             R3, R3, #1
ADD             R2, R2, #0x610
CMP             R1, R3
BEQ             loc_19B9C
CMP             R3, #4
BEQ             loc_19B94
LDR             R0, [R2,#0x168]
CMP             R0, R4
BNE             loc_19730

loc_19754
MOV             R2, #0x610
MLA             R3, R2, R3, R11
LDR             R0, [R3,#0x190]
MOV             R1, R0,ASR#31

loc_19764
MOV             R4, R6
BL              sub_49250
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
CMP             R6, #4
BNE             loc_196E4
MOV             R4, #0
MOVW            R7, #:lower16:aChainAcsD ; "chain_acs%d"
MOV             R8, R4
MOVT            R7, #:upper16:aChainAcsD ; "chain_acs%d"

loc_19794               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
ADD             R6, R4, #1
BL              memset
MOV             R2, #0x100 ; n
MOV             R1, #0  ; c
MOV             R0, R10 ; s
BL              memset
MOV             R1, #0x20 ; ' ' ; maxlen
MOV             R3, R6
MOV             R2, R7  ; format
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R1, [R11,#(dword_7631C - 0x76318)]
CMP             R1, #0
BLE             loc_19B8C
LDR             R3, [R11,#(byte_76454+0x2C - 0x76318)]
CMP             R3, R4
MOVWNE          R2, #:lower16:unk_76318
MOVNE           R3, #0
MOVTNE          R2, #:upper16:unk_76318
BEQ             loc_19CF4

loc_197F0
ADD             R3, R3, #1
ADD             R2, R2, #0x610
CMP             R3, R1
BEQ             loc_19B8C
CMP             R3, #4
BEQ             loc_19B84
LDR             R0, [R2,#0x168]
CMP             R0, R4
BNE             loc_197F0
MOV             R2, #0x610
MUL             R3, R2, R3
ADD             R3, R3, #0x194

loc_19820
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
ADD             R3, R11, R3
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x100 ; maxlen
MOV             R0, R10 ; s
BL              snprintf

loc_19838
MOV             R0, R10
MOV             R4, R6
BL              sub_49004
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
CMP             R6, #4
BNE             loc_19794
MOVW            R7, #:lower16:aChainHwD ; "chain_hw%d"
MOV             R4, #0
MOVT            R7, #:upper16:aChainHwD ; "chain_hw%d"

loc_19868               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
ADD             R6, R4, #1
BL              memset
MOV             R1, #0x20 ; ' ' ; maxlen
MOV             R3, R6
MOV             R2, R7  ; format
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R1, [R11,#(dword_7631C - 0x76318)]
CMP             R1, #0
BLE             loc_19B78
LDR             R3, [R11,#(byte_76454+0x2C - 0x76318)]
CMP             R3, R4
BEQ             loc_19D14
MOVW            R2, #:lower16:unk_76318
MOV             R3, #0
MOVT            R2, #:upper16:unk_76318

loc_198B4
ADD             R3, R3, #1
ADD             R2, R2, #0x610
CMP             R1, R3
BEQ             loc_19B78
CMP             R3, #4
BEQ             loc_19B70
LDR             R0, [R2,#0x168]
CMP             R0, R4
BNE             loc_198B4

loc_198D8
MOV             R2, #0x610
MLA             R3, R2, R3, R11
LDR             R0, [R3,#0x2C4]
MOV             R1, R0,ASR#31

loc_198E8
MOV             R4, R6
BL              sub_49250
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
CMP             R6, #4
BNE             loc_19868
MOVW            R7, #:lower16:aChainRateD ; "chain_rate%d"
MOVW            R8, #:lower16:(asc_4CF84+4) ; ""
MOVT            R7, #:upper16:aChainRateD ; "chain_rate%d"
MOVT            R8, #:upper16:(asc_4CF84+4) ; ""
MOV             R4, #0

loc_1991C               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
ADD             R6, R4, #1
BL              memset
MOV             R1, #0x20 ; ' ' ; maxlen
MOV             R3, R6
MOV             R2, R7  ; format
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R1, [R11,#(dword_7631C - 0x76318)]
CMP             R1, #0
BLE             loc_19BFC
LDR             R3, [R11,#(byte_76454+0x2C - 0x76318)]
CMP             R3, R4
MOVWNE          R2, #:lower16:unk_76318
MOVNE           R3, #0
MOVTNE          R2, #:upper16:unk_76318
BEQ             loc_19D24

loc_19968
ADD             R3, R3, #1
ADD             R2, R2, #0x610
CMP             R3, R1
BEQ             loc_19BFC
CMP             R3, #4
BEQ             loc_19B60
LDR             R0, [R2,#0x168]
CMP             R0, R4
BNE             loc_19968
MOV             R0, #0x610
MUL             R3, R0, R3
ADD             R0, R3, #0x180

loc_19998
ADD             R0, R11, R0

loc_1999C
BL              sub_49004
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
MOV             R4, R6
BL              sub_49894
CMP             R6, #4
BNE             loc_1991C
MOVW            R7, #:lower16:aFreqD ; "freq%d"
MOV             R4, #0
MOVT            R7, #:upper16:aFreqD ; "freq%d"

loc_199C8               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
ADD             R6, R4, #1
BL              memset
MOV             R1, #0x20 ; ' ' ; maxlen
MOV             R3, R6
MOV             R2, R7  ; format
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R1, [R11,#(dword_7631C - 0x76318)]
CMP             R1, #0
BLE             loc_19B54
LDR             R3, [R11,#(byte_76454+0x2C - 0x76318)]
CMP             R3, R4
BEQ             loc_19D1C
MOVW            R2, #:lower16:unk_76318
MOV             R3, #0
MOVT            R2, #:upper16:unk_76318

loc_19A14
ADD             R3, R3, #1
ADD             R2, R2, #0x610
CMP             R3, R1
BEQ             loc_19B54
CMP             R3, #4
BEQ             loc_19B4C
LDR             R0, [R2,#0x168]
CMP             R0, R4
BNE             loc_19A14

loc_19A38
MOV             R2, #0x610
MLA             R3, R2, R3, R11
LDR             R0, [R3,#0x16C]
MOV             R1, R0,ASR#31

loc_19A48
MOV             R4, R6
BL              sub_49250
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
CMP             R6, #4
BNE             loc_199C8
MOV             R0, #byte_6A6D0
BL              sub_49004
MOVW            R1, #:lower16:aMinerVersion ; "miner_version"
MOV             R2, R0
MOVT            R1, #:upper16:aMinerVersion ; "miner_version"
MOV             R0, R5
BL              sub_49894
LDR             R0, =byte_77CF8
BL              sub_49004
MOVW            R1, #:lower16:aMinerId ; "miner_id"
MOV             R2, R0
MOVT            R1, #:upper16:aMinerId ; "miner_id"
MOV             R0, R5
BL              sub_49894
MOV             R1, R5
LDR             R0, [SP,#0x9F4+var_9BC]
BL              sub_49D54
LDR             R1, [SP,#0x9F4+var_9DC]
LDR             R3, [SP,#0x9F4+var_9B8]
LDR             R2, [R3]
ADD             R3, R1, #1
ADDS            R1, R1, #1
STR             R1, [SP,#0x9F4+var_9DC]
LDR             R1, [SP,#0x9F4+var_9DC+4]
ADC             R1, R1, #0
CMP             R2, R3
STR             R1, [SP,#0x9F4+var_9DC+4]
BGT             loc_18F08

loc_19ADC
LDR             R4, [SP,#0x9F4+var_9A0]
MOVW            R1, #:lower16:aStats ; "STATS"
LDR             R2, [SP,#0x9F4+var_9BC]
MOVT            R1, #:upper16:aStats ; "STATS"
MOV             R0, R4
BL              sub_49894
MOV             R1, #0
MOV             R0, #1
BL              sub_49250
MOVW            R1, #:lower16:aId ; "id"
MOV             R2, R0
MOVT            R1, #:upper16:aId ; "id"
MOV             R0, R4
BL              sub_49894
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_19DA0

loc_19B28
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, #0
ADD             SP, SP, #0x9F0
ADD             SP, SP, #4
VPOP            {D8}
POP             {R4-R11,PC}

loc_19B4C
CMP             R1, #4
BGT             loc_19A38

loc_19B54
MOV             R0, #0
MOV             R1, #0
B               loc_19A48

loc_19B60
CMP             R1, #4
BLE             loc_19BFC
MOV             R0, #0x19C0
B               loc_19998

loc_19B70
CMP             R1, #4
BGT             loc_198D8

loc_19B78
MOV             R0, #0
MOV             R1, #0
B               loc_198E8

loc_19B84
CMP             R1, #4
BGT             loc_19CE4

loc_19B8C
STRB            R8, [SP,#0x9F4+var_904]
B               loc_19838

loc_19B94
CMP             R1, #4
BGT             loc_19754

loc_19B9C
MOV             R0, #0
MOV             R1, #0
B               loc_19764

loc_19BA8
CMP             R1, #4
BGT             loc_1951C

loc_19BB0
MOV             R3, #a0000_0 ; "0-0-0-0"
LDM             R3, {R0,R1} ; "0-0-0-0"
STM             R10, {R0,R1}
B               loc_19550

loc_19BC4
CMP             R1, #4
BGT             loc_19438

loc_19BCC
MOV             R3, #a0000_0 ; "0-0-0-0"
LDM             R3, {R0,R1} ; "0-0-0-0"
STM             R10, {R0,R1}
B               loc_1946C

loc_19BE0
CMP             R1, #4
BGT             loc_19354

loc_19BE8
MOV             R3, #a0000_0 ; "0-0-0-0"
LDM             R3, {R0,R1} ; "0-0-0-0"
STM             R10, {R0,R1}
B               loc_19388

loc_19BFC
MOV             R0, R8
B               loc_1999C

loc_19C04               ; n
MOV             R2, #0x20 ; ' '
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
MOV             R9, #0xFFFFFF01
BL              memset
MOV             R3, R8
LDR             R2, [SP,#0x9F4+var_9C0] ; format
MOV             R1, #0x20 ; ' ' ; maxlen
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R3, [R4,#0x2A8]
LDR             R1, [R4,#0x2A4]
LDR             R2, [R4,#0x2AC]
LDR             R0, [R4,#0x2B0]
CMP             R3, R1
MOVLT           R3, R1
CMP             R3, R9
MOVLT           R3, R9
CMP             R3, R2
MOVLT           R3, R2
CMP             R3, R0
MOVGE           R0, R3
MOV             R1, R0,ASR#31
BL              sub_49250
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x9F4+s ; s
BL              memset
MOV             R3, R8
LDR             R2, [SP,#0x9F4+var_9D4] ; format
MOV             R1, #0x20 ; ' ' ; maxlen
ADD             R0, SP, #0x9F4+s ; s
BL              snprintf
LDR             R3, [R4,#0x2B8]
LDR             R1, [R4,#0x2B4]
LDR             R2, [R4,#0x2BC]
LDR             R0, [R4,#0x2C0]
CMP             R3, R1
MOVLT           R3, R1
CMP             R3, R9
MOVLT           R3, R9
CMP             R3, R2
MOVLT           R3, R2
CMP             R3, R0
MOVGE           R0, R3
MOV             R1, R0,ASR#31
BL              sub_49250
ADD             R1, SP, #0x9F4+s
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
B               loc_192AC

loc_19CE4
MOVW            R3, #0x19D4
B               loc_19820

loc_19CEC
MOV             R3, #0
B               loc_19354

loc_19CF4
MOV             R3, #0x194
B               loc_19820

loc_19CFC
MOV             R3, #0
B               loc_19754

loc_19D04
MOV             R3, #0
B               loc_1951C

loc_19D0C
MOV             R3, #0
B               loc_19438

loc_19D14
MOV             R3, #0
B               loc_198D8

loc_19D1C
MOV             R3, #0
B               loc_19A38

loc_19D24
MOV             R0, #0x180
B               loc_19998

loc_19D2C
MOVEQ           R1, #1
B               loc_19164

loc_19D34
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
ADD             R3, R11, #0xC
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x40 ; '@' ; maxlen
ADD             R0, SP, #0x9F4+var_944 ; s
BL              snprintf
B               loc_18E50

loc_19D50
BL              __errno_location
LDR             LR, =aGetStatsOld ; "get_stats_old"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
MOVW            R12, #0x3D3
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x9F4+var_9EC]
ADD             R0, SP, #0x9F4+var_804 ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x9F4+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_18D9C

loc_19DA0
BL              __errno_location
LDR             LR, =aGetStatsOld ; "get_stats_old"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
MOVW            R12, #0x4E6
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x9F4+var_9EC]
ADD             R0, SP, #0x9F4+var_804 ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x9F4+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_18C70



; Attributes: thunk

sub_19DEC
B               loc_19B28
; End of function sub_19DEC




; int __fastcall sub_19DF0(_DWORD *, int)
sub_19DF0

var_82C= -0x82C
var_828= -0x828
var_824= -0x824
rwlock= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R11,LR}
CMP             R0, #0
CMPNE           R1, #0
VPUSH           {D8-D10}
SUB             SP, SP, #0x820
SUB             SP, SP, #0xC
STR             R0, [SP,#0x82C+var_814]
BNE             loc_19E8C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_19E50
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_19E50
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0x80000002
BLE             loc_19E7C

loc_19E50
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
LDR             R3, =aGetDevsOld ; "get_devs_old"
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x82C+s ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x82C+s
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0x80000002

loc_19E7C
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
VPOP            {D8-D10}
POP             {R4-R11,PC}

loc_19E8C
MOVW            R0, #:lower16:stru_74FC0
MOV             R4, R1
MOVT            R0, #:upper16:stru_74FC0 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_1A674

loc_19EA4
MOV             R3, #dword_74FE0
LDR             R1, [R3]
STR             R3, [SP,#0x82C+var_80C]
CMP             R1, #0
BLE             loc_1A4A8
MOVW            R3, #:lower16:dword_74F68
MOV             R7, #0
MOVT            R3, #:upper16:dword_74F68
LDR             R3, [R3]
ADD             R1, R3, R1,LSL#2

loc_19ED0
LDR             R2, [R3],#4
LDR             R2, [R2,#4]
LDR             R2, [R2]
CMP             R2, #2
BEQ             loc_19EEC
CMP             R2, #3
BNE             loc_19EF0

loc_19EEC
ADD             R7, R7, #1

loc_19EF0
CMP             R1, R3
BNE             loc_19ED0
MOV             R0, #stru_74FC0 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1A5CC

loc_19F0C
MOV             R11, #off_67964
LDR             R3, [R11] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R7, #0
BEQ             loc_1A4CC
MOVW            R12, #:lower16:dword_681D0
VLDR            D8, =100.0
VLDR            D10, =0.0
MOV             R2, #9
LDR             R3, [R4,#8]
MOV             R1, #1
LDR             R0, [SP,#0x82C+var_814]
MOV             R4, R12
MOV             R6, #0
MOVW            R10, #:lower16:stru_74FC0
BL              sub_16A28
MOV             R8, R6
MOV             R12, R4
ADD             R9, SP, #0x82C+s
MOVT            R12, #:upper16:dword_681D0
MOVT            R10, #:upper16:stru_74FC0
STR             R12, [SP,#0x82C+var_808]
BL              sub_48E00
STRD            R10, R11, [SP,#0x82C+rwlock]
STR             R0, [SP,#0x82C+var_810]

loc_19F74
BL              sub_48A70
MOV             R5, R0
LDR             R0, [SP,#0x82C+rwlock] ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_1A520

loc_19F8C
LDR             R3, [SP,#0x82C+var_80C]
ADD             R12, R6, #1
LDR             R0, [R3]
CMP             R0, #0
BLE             loc_1A4FC
MOVW            R3, #:lower16:dword_74F68
MOV             R2, #0
MOVT            R3, #:upper16:dword_74F68
MOV             R4, R2
LDR             R1, [R3]
LDRD            R10, R11, [SP,#0x82C+rwlock]
SUB             R1, R1, #4
B               loc_19FE8
dbl_19FC0 DCFD 100.0
dbl_19FC8 DCFD 0.0
off_19FD0 DCD aGetDevsOld ; "get_devs_old"
off_19FD4 DCD aAscdevice ; "ascdevice"
off_19FD8 DCD aNumascs  ; "numascs"

loc_19FDC
ADD             R4, R4, #1
CMP             R4, R0
BEQ             loc_1A4F8

loc_19FE8
LDR             R3, [R1,#4]!
LDR             R3, [R3,#4]
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_1A004
CMP             R3, #3
BNE             loc_1A008

loc_1A004
ADD             R2, R2, #1

loc_1A008
CMP             R2, R12
BNE             loc_19FDC
MOV             R0, R10 ; rwlock
STRD            R10, R11, [SP,#0x82C+rwlock]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1A620

loc_1A024
LDR             R3, [SP,#0x82C+var_818]
LDR             R3, [R3]
BLX             R3

loc_1A030
MOV             R0, R4
BL              sub_2DFF4
MOV             R1, R8
MOV             R4, R0
MOV             R0, R6
BL              sub_49250
MOVW            R1, #:lower16:aAsc ; "ASC"
MOV             R2, R0
MOVT            R1, #:upper16:aAsc ; "ASC"
MOV             R0, R5
BL              sub_49894
LDR             R3, [R4,#4]
LDR             R0, [R3,#8]
BL              sub_49004
MOVW            R1, #:lower16:aName ; "Name"
MOV             R2, R0
MOVT            R1, #:upper16:aName ; "Name"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#8]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aId_0 ; "ID"
MOV             R2, R0
MOVT            R1, #:upper16:aId_0 ; "ID"
MOV             R0, R5
BL              sub_49894
LDR             R3, [R4,#0x20]
CMP             R3, #1
MOVWNE          R0, #0xB230
MOVWEQ          R0, #0xB240
MOVTNE          R0, #4
MOVTEQ          R0, #4
BL              sub_49004
MOVW            R1, #:lower16:aEnabled ; "Enabled"
MOV             R2, R0
MOVT            R1, #:upper16:aEnabled ; "Enabled"
MOV             R0, R5
BL              sub_49894
MOV             R0, #aAlive ; "Alive"
BL              sub_49004
MOVW            R1, #:lower16:aStatus_1 ; "Status"
MOV             R2, R0
MOVT            R1, #:upper16:aStatus_1 ; "Status"
MOV             R0, R5
BL              sub_49894
VLDR            D7, [R4,#0xB0]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aTenperature ; "Tenperature"
MOV             R2, R0
MOVT            R1, #:upper16:aTenperature ; "Tenperature"
MOV             R0, R5
BL              sub_49894
VLDR            D9, [R4,#0x50]
MOV             R0, R4
BL              sub_2A7A0
VDIV.F64        D0, D9, D0
VMUL.F64        D7, D0, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aMhsAv ; "MHS av"
MOV             R2, R0
MOVT            R1, #:upper16:aMhsAv ; "MHS av"
MOV             R0, R5
BL              sub_49894
LDR             R3, [SP,#0x82C+var_808]
MOV             R2, #aMhsDs ; "MHS %ds"
MOV             R1, #0x18 ; maxlen
MOV             R0, R9  ; s
LDR             R3, [R3]
BL              snprintf
VLDR            D7, [R4,#0x30]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOV             R1, R9
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x24]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aAccepted_0 ; "Accepted"
MOV             R2, R0
MOVT            R1, #:upper16:aAccepted_0 ; "Accepted"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x28]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aRejected_0 ; "Rejected"
MOV             R2, R0
MOVT            R1, #:upper16:aRejected_0 ; "Rejected"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x2C]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aHardwareErrors_0 ; "Hardware Errors"
MOV             R2, R0
MOVT            R1, #:upper16:aHardwareErrors_0 ; "Hardware Errors"
MOV             R0, R5
BL              sub_49894
VLDR            D7, [R4,#0x58]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aUtility ; "Utility"
MOV             R2, R0
MOVT            R1, #:upper16:aUtility ; "Utility"
MOV             R0, R5
BL              sub_49894
LDR             R3, [R4,#0xDC]
CMP             R3, #0
LDRGT           R0, [R4,#0xD8]
MOVLE           R1, #0xFFFFFFFF
MOVLE           R0, #0xFFFFFFFF
MOVGT           R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aLastSharePool ; "Last Share Pool"
MOV             R2, R0
MOVT            R1, #:upper16:aLastSharePool ; "Last Share Pool"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0xDC]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aLastShareTime ; "Last Share Time"
MOV             R2, R0
MOVT            R1, #:upper16:aLastShareTime ; "Last Share Time"
MOV             R0, R5
BL              sub_49894
VLDR            D7, [R4,#0x50]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aTotalMh ; "Total MH"
MOV             R2, R0
MOVT            R1, #:upper16:aTotalMh ; "Total MH"
MOV             R0, R5
BL              sub_49894
LDRD            R0, R1, [R4,#0xC0]
BL              sub_49250
MOVW            R1, #:lower16:aDiff1Work ; "Diff1 Work"
MOV             R2, R0
MOVT            R1, #:upper16:aDiff1Work ; "Diff1 Work"
MOV             R0, R5
BL              sub_49894
LDRD            R0, R1, [R4,#0xC8]
BLX             sub_4ABAC
BL              sub_49250
MOVW            R1, #:lower16:aDifficultyAcce ; "Difficulty Accepted"
MOV             R2, R0
MOVT            R1, #:upper16:aDifficultyAcce ; "Difficulty Accepted"
MOV             R0, R5
BL              sub_49894
LDRD            R0, R1, [R4,#0xD0]
BLX             sub_4ABAC
BL              sub_49250
MOVW            R1, #:lower16:aDifficultyReje ; "Difficulty Rejected"
MOV             R2, R0
MOVT            R1, #:upper16:aDifficultyReje ; "Difficulty Rejected"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0xE8]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aLastShareDiffi ; "Last Share Difficulty"
MOV             R2, R0
MOVT            R1, #:upper16:aLastShareDiffi ; "Last Share Difficulty"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0xE8]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aLastValidWork ; "Last Valid Work"
MOV             R2, R0
MOVT            R1, #:upper16:aLastValidWork ; "Last Valid Work"
MOV             R0, R5
BL              sub_49894
LDRD            R0, R1, [R4,#0xC0]
LDR             R3, [R4,#0x2C]
ADDS            R10, R0, R3
ADC             R11, R1, R3,ASR#31
MOV             R0, R10
MOV             R1, R11
ORRS            R2, R0, R1
VMOVEQ.F64      D0, D10
BEQ             loc_1A3B0
VMOV            S15, R3
VCVT.F64.S32    D9, S15
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D7, D9, D7
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8

loc_1A3B0
BL              sub_492D4
MOVW            R1, #:lower16:aDeviceHardware ; "Device Hardware%"
MOV             R2, R0
MOVT            R1, #:upper16:aDeviceHardware ; "Device Hardware%"
MOV             R0, R5
BL              sub_49894
LDRD            R0, R1, [R4,#0xC0]
ORRS            R3, R0, R1
VMOVEQ.F64      D0, D10
BEQ             loc_1A400
BLX             sub_4AB14
VLDR            D6, [R4,#0xD0]
VMOV            D7, R0, R1
VDIV.F64        D7, D6, D7
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8

loc_1A400
BL              sub_492D4
MOVW            R1, #:lower16:aDeviceRejected ; "Device Rejected%"
MOV             R2, R0
MOVT            R1, #:upper16:aDeviceRejected ; "Device Rejected%"
MOV             R0, R5
BL              sub_49894
MOV             R0, R4
BL              sub_2A7A0
VMOV            R0, R1, D0
BLX             sub_4ABAC
BL              sub_49250
MOVW            R1, #:lower16:aDeviceElapsed ; "Device Elapsed"
MOV             R2, R0
MOVT            R1, #:upper16:aDeviceElapsed ; "Device Elapsed"
MOV             R0, R5
BL              sub_49894
MOV             R1, R5
LDR             R0, [SP,#0x82C+var_810]
BL              sub_49D54
ADDS            R6, R6, #1
ADC             R8, R8, #0
CMP             R7, R6
BGT             loc_19F74
LDR             R4, [SP,#0x82C+var_814]
MOVW            R1, #:lower16:aDevs ; "DEVS"
LDR             R2, [SP,#0x82C+var_810]
MOVT            R1, #:upper16:aDevs ; "DEVS"
MOV             R0, R4
BL              sub_49894
MOV             R1, #0
MOV             R0, #1
BL              sub_49250
MOVW            R1, #:lower16:aId ; "id"
MOV             R2, R0
MOVT            R1, #:upper16:aId ; "id"
MOV             R0, R4
BL              sub_49894
MOV             R0, #0
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
VPOP            {D8-D10}
POP             {R4-R11,PC}

loc_1A4A8               ; rwlock
MOV             R0, #stru_74FC0
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1A5C8
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0

loc_1A4CC
MOVW            R3, #:lower16:aNoAscs ; "No ASCs"
LDR             R0, [SP,#0x82C+var_814]
MOVT            R3, #:upper16:aNoAscs ; "No ASCs"
MOV             R2, #0xA
MOV             R1, #0
BL              sub_16A28
MOV             R0, #0
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
VPOP            {D8-D10}
POP             {R4-R11,PC}

loc_1A4F8
STRD            R10, R11, [SP,#0x82C+rwlock]

loc_1A4FC               ; rwlock
LDR             R0, [SP,#0x82C+rwlock]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1A574

loc_1A50C
LDR             R3, [SP,#0x82C+var_818]
MOV             R4, #0xFFFFFFFF
LDR             R3, [R3]
BLX             R3
B               loc_1A030

loc_1A520
BL              __errno_location
LDR             R12, =aAscdevice ; "ascdevice"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R0, #0x4FF
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP,#0x82C+var_82C]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R12, [SP,#0x82C+var_828]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x82C+var_824]
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R9
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_19F8C

loc_1A574
BL              __errno_location
LDR             R12, =aAscdevice ; "ascdevice"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R0, #0x507
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x82C+var_82C]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#0x82C+var_828]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x82C+var_824]
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R9
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1A50C

loc_1A5C8
MOV             R7, #0

loc_1A5CC
BL              __errno_location
LDR             LR, =aNumascs ; "numascs"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
MOVW            R12, #0x4F7
ADD             R9, SP, #0x82C+s
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
MOV             R0, R9  ; s
STR             R12, [SP,#0x82C+var_824]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R9
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_19F0C

loc_1A620
BL              __errno_location
LDR             R12, =aAscdevice ; "ascdevice"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R0, #0x50C
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x82C+var_82C]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#0x82C+var_828]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x82C+var_824]
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R9
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1A024

loc_1A674
BL              __errno_location
LDR             LR, =aNumascs ; "numascs"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
MOVW            R12, #0x4F2
ADD             R9, SP, #0x82C+s
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
MOV             R0, R9  ; s
STR             R12, [SP,#0x82C+var_824]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R9
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_19DF0



; Attributes: thunk

sub_1A6C4
B               loc_19EA4
; End of function sub_1A6C4




; int __fastcall sub_1A6C8(_DWORD *, const char **)
sub_1A6C8

var_84C= -0x84C
var_848= -0x848
var_844= -0x844
var_83C= -0x83C
var_838= -0x838
var_834= -0x834
format= -0x830
var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_820= -0x820
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R11,LR}
SUBS            R4, R1, #0
SUB             SP, SP, #0x840
MOV             R3, #0
SUB             SP, SP, #0xC
STR             R0, [SP,#0x84C+var_834]
STR             R3, [SP,#0x84C+var_808]
STR             R3, [SP,#0x84C+var_814]
STR             R3, [SP,#0x84C+var_810]
STR             R3, [SP,#0x84C+var_80C]
STRH            R3, [SP,#0x84C+var_818]
BNE             loc_1A770
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1A738
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1A738
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0x80000002
BLE             loc_1A764

loc_1A738
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
LDR             R3, =aGetRate ; "get_rate"
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x84C+s ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x84C+s
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0x80000002

loc_1A764
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_1A770
MOV             R1, #1
ADD             R0, SP, #0x84C+var_818
BL              sub_42680
MOV             R1, R4
LDR             R4, [SP,#0x84C+var_834]
MOV             R0, R4
BL              sub_16DAC
MOV             R0, R4
BL              sub_168E8
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1A9E4

loc_1A7A8
LDR             R3, =unk_77318
LDR             R4, [R3,#(dword_77D1C - 0x77318)]
CMP             R4, #0x18
STR             R4, [SP,#0x84C+var_838]
MOVLT           R6, R4
MOVGE           R6, #0x18
BL              sub_48E00
STR             R0, [SP,#0x84C+var_820]
BL              sub_48A70
MOVW            R2, #:lower16:aSS_0 ; "%s/s"
LDR             R3, =(byte_76454+0x10)
MOVT            R2, #:upper16:aSS_0 ; "%s/s"
MOV             R1, #8  ; maxlen
MOV             R5, R0
STR             R0, [SP,#0x84C+var_824]
ADD             R0, SP, #0x84C+var_80C ; s
BL              snprintf
ADD             R0, SP, #0x84C+var_80C
BL              sub_49004
MOVW            R1, #:lower16:aUnit ; "unit"
MOV             R2, R0
MOVT            R1, #:upper16:aUnit ; "unit"
MOV             R0, R5
BL              sub_49894
BL              sub_48E00
CMP             R4, #0
MOV             R8, R0
BLE             loc_1A86C
MOV             R4, #0
MOVW            R9, #:lower16:aDmin ; "%dmin"
MOV             R7, R4
MOVT            R9, #:upper16:aDmin ; "%dmin"
MOV             R5, #0xF

loc_1A82C
MOV             R3, R5
MOV             R2, R9  ; format
MOV             R1, #8  ; maxlen
ADD             R0, SP, #0x84C+var_814 ; s
STR             R7, [SP,#0x84C+var_814]
ADD             R4, R4, #1
STR             R7, [SP,#0x84C+var_810]
ADD             R5, R5, #0xF
BL              snprintf
ADD             R0, SP, #0x84C+var_814
BL              sub_49004
MOV             R1, R0
MOV             R0, R8
BL              sub_49D54
CMP             R4, R6
BLT             loc_1A82C

loc_1A86C
MOVW            R1, #:lower16:aXaxis ; "xAxis"
MOVW            R10, #:lower16:unk_76318
MOV             R2, R8
MOVT            R1, #:upper16:aXaxis ; "xAxis"
LDR             R0, [SP,#0x84C+var_824]
MOVT            R10, #:upper16:unk_76318
BL              sub_49894
BL              sub_48E00
LDR             R3, [R10,#(dword_7631C - 0x76318)]
STR             R0, [SP,#0x84C+var_83C]
CMP             R3, #0
BLE             loc_1A974
MOVW            R3, #:lower16:aChainD ; "chain%d"
MOVW            R2, #:lower16:aName_0 ; "name"
MOVW            R1, #:lower16:aData ; "data"
ADD             R7, R10, #0x2C4
MOV             R9, #0
MOVT            R3, #:upper16:aChainD ; "chain%d"
MOVT            R2, #:upper16:aName_0 ; "name"
MOVT            R1, #:upper16:aData ; "data"
STR             R3, [SP,#0x84C+format]
STR             R2, [SP,#0x84C+var_82C]
STR             R1, [SP,#0x84C+var_828]

loc_1A8C8
BL              sub_48A70
MOV             R4, #0
LDR             R3, [R7,#-0x15C]
LDR             R2, [SP,#0x84C+format] ; format
MOV             R1, #8  ; maxlen
MOV             R8, R0
ADD             R0, SP, #0x84C+var_814 ; s
STR             R4, [SP,#0x84C+var_814]
STR             R4, [SP,#0x84C+var_810]
BL              snprintf
ADD             R0, SP, #0x84C+var_814
BL              sub_49004
LDR             R1, [SP,#0x84C+var_82C]
MOV             R2, R0
MOV             R0, R8
BL              sub_49894
BL              sub_48E00
LDR             R3, [SP,#0x84C+var_838]
MOV             R5, R0
CMP             R3, R4
BLE             loc_1A944
MOV             R11, R7

loc_1A920
LDR             R0, [R11,#4]!
ADD             R4, R4, #1
MOV             R1, R0,ASR#31
BL              sub_49250
MOV             R1, R0
MOV             R0, R5
BL              sub_49D54
CMP             R6, R4
BGT             loc_1A920

loc_1A944
MOV             R2, R5
LDR             R1, [SP,#0x84C+var_828]
MOV             R0, R8
ADD             R9, R9, #1
BL              sub_49894
MOV             R1, R8
LDR             R0, [SP,#0x84C+var_83C]
BL              sub_49D54
LDR             R3, [R10,#(dword_7631C - 0x76318)]
ADD             R7, R7, #0x610
CMP             R3, R9
BGT             loc_1A8C8

loc_1A974
LDR             R4, [SP,#0x84C+var_824]
MOVW            R1, #:lower16:aSeries ; "series"
LDR             R2, [SP,#0x84C+var_83C]
MOVT            R1, #:upper16:aSeries ; "series"
MOV             R0, R4
BL              sub_49894
MOV             R1, R4
LDR             R4, [SP,#0x84C+var_820]
MOV             R0, R4
BL              sub_49D54
MOVW            R1, #:lower16:aRate ; "RATE"
MOV             R2, R4
MOVT            R1, #:upper16:aRate ; "RATE"
LDR             R0, [SP,#0x84C+var_834]
BL              sub_49894
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1AA38

loc_1A9C4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, #0
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_1A9E4
BL              __errno_location
LDR             R12, =aGetRate ; "get_rate"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R0, #0x271
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP,#0x84C+var_84C]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R12, [SP,#0x84C+var_848]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x84C+var_844]
ADD             R0, SP, #0x84C+s ; s
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x84C+s
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1A7A8

loc_1AA38
BL              __errno_location
LDR             R12, =aGetRate ; "get_rate"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOV             R0, #0x298
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x84C+var_84C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x84C+var_848]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x84C+var_844]
ADD             R0, SP, #0x84C+s ; s
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1A6C8

B               loc_1A9C4
off_1AA8C DCD aGetRate  ; "get_rate"
off_1AA90 DCD unk_77318
off_1AA94 DCD byte_76454+0x10



; int __fastcall sub_1AA98(_DWORD *, const char **)
sub_1AA98

var_840= -0x840
var_83C= -0x83C
var_838= -0x838
var_82C= -0x82C
var_828= -0x828
var_820= -0x820
var_818= -0x818
var_810= -0x810
var_808= -0x808
var_804= -0x804
s= -0x800

PUSH            {R4-R10,LR}
SUBS            R4, R1, #0
VPUSH           {D8}
MOV             R2, #0
SUB             SP, SP, #0x840
MOV             R3, #0
MOV             R1, #0
STRD            R2, R3, [SP,#0x840+var_828]
STR             R1, [SP,#0x840+var_804]
STR             R1, [SP,#0x840+var_808]
STRH            R1, [SP,#0x840+var_82C]
STRD            R2, R3, [SP,#0x840+var_820]
STRD            R2, R3, [SP,#0x840+var_818]
STRD            R2, R3, [SP,#0x840+var_810]
BNE             loc_1AB4C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1AB14
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1AB14
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0x80000002
BLE             loc_1AB40

loc_1AB14
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
LDR             R3, =aGetSummary ; "get_summary"
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x840+s ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x840+s
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0x80000002

loc_1AB40
ADD             SP, SP, #0x840
VPOP            {D8}
POP             {R4-R10,PC}

loc_1AB4C
MOV             R7, R0
MOV             R1, #1
ADD             R0, SP, #0x840+var_82C
BL              sub_42680
MOV             R1, R4
MOV             R0, R7
BL              sub_16DAC
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1AE6C

loc_1AB7C
MOV             R0, R7
BL              sub_168E8
BL              sub_48E00
MOV             R10, R0
BL              sub_48A70
MOVW            R3, #:lower16:unk_76318
MOV             R6, R0
MOVT            R3, #:upper16:unk_76318
LDR             R3, [R3,#(dword_76320 - 0x76318)]
CMP             R3, #1
BLE             loc_1AE50
MOV             R3, #dbl_681C0
LDRD            R0, R1, [R3]
BLX             sub_4ABAC

loc_1ABB8
BL              sub_49250
MOVW            R1, #:lower16:aElapsed_0 ; "elapsed"
MOV             R2, R0
MOVT            R1, #:upper16:aElapsed_0 ; "elapsed"
MOV             R0, R6
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x840+var_828
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
LDR             R0, =byte_76424 ; s
BL              sscanf
VLDR            D8, =100.0
VLDR            D7, [SP,#0x840+var_828]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRate5s ; "rate_5s"
MOV             R2, R0
MOVT            R1, #:upper16:aRate5s ; "rate_5s"
MOV             R0, R6
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x840+var_820
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
LDR             R0, =byte_76434 ; s
BL              sscanf
VLDR            D7, [SP,#0x840+var_820]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRate30m ; "rate_30m"
MOV             R2, R0
MOVT            R1, #:upper16:aRate30m ; "rate_30m"
MOV             R0, R6
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x840+var_818
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
LDR             R0, =(byte_76434+0x10) ; s
BL              sscanf
VLDR            D7, [SP,#0x840+var_818]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRateAvg ; "rate_avg"
MOV             R2, R0
MOVT            R1, #:upper16:aRateAvg ; "rate_avg"
MOV             R0, R6
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x840+var_810
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
LDR             R0, =byte_76454 ; s
BL              sscanf
VLDR            D7, [SP,#0x840+var_810]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRateIdeal ; "rate_ideal"
MOV             R2, R0
MOVT            R1, #:upper16:aRateIdeal ; "rate_ideal"
MOV             R0, R6
BL              sub_49894
MOVW            R2, #:lower16:aSS_0 ; "%s/s"
LDR             R3, =(byte_76454+0x10)
MOVT            R2, #:upper16:aSS_0 ; "%s/s"
MOV             R1, #8  ; maxlen
ADD             R0, SP, #0x840+var_808 ; s
BL              snprintf
ADD             R0, SP, #0x840+var_808
BL              sub_49004
MOVW            R1, #:lower16:aRateUnit ; "rate_unit"
MOV             R2, R0
MOVT            R1, #:upper16:aRateUnit ; "rate_unit"
MOV             R0, R6
BL              sub_49894
MOV             R3, #dword_76060
LDR             R0, [R3]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aHwAll ; "hw_all"
MOV             R2, R0
MOVT            R1, #:upper16:aHwAll ; "hw_all"
MOV             R0, R6
BL              sub_49894
MOV             R3, #qword_68B00
LDRD            R0, R1, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aBestshare ; "bestshare"
MOV             R2, R0
MOVT            R1, #:upper16:aBestshare ; "bestshare"
MOV             R0, R6
BL              sub_49894
BL              sub_48E00
SUBS            R8, R0, #0
BEQ             loc_1ADE8
MOV             R4, #off_67308 ; "summary"
LDR             R3, [R4,#(off_673C8 - 0x67308)] ; "rate"
CMP             R3, #0
BEQ             loc_1ADE8
MOVW            R9, #:lower16:aType ; "type"
ADD             R4, R4, #0xC0
MOVT            R9, #:upper16:aType ; "type"

loc_1ADA0
BL              sub_48A70
MOV             R5, R0
LDR             R0, [R4]
BL              sub_49004
MOV             R1, R9
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
LDR             R3, [R4,#4]
MOV             R1, R4
MOV             R0, R5
BLX             R3
MOV             R1, R5
MOV             R0, R8
BL              sub_49D54
LDR             R3, [R4,#0x18]!
CMP             R3, #0
BNE             loc_1ADA0

loc_1ADE8
MOVW            R1, #:lower16:aStatus_0 ; "status"
MOV             R2, R8
MOVT            R1, #:upper16:aStatus_0 ; "status"
MOV             R0, R6
BL              sub_49894
MOV             R1, R6
MOV             R0, R10
BL              sub_49D54
MOVW            R1, #:lower16:aSummary ; "SUMMARY"
MOV             R2, R10
MOVT            R1, #:upper16:aSummary ; "SUMMARY"
MOV             R0, R7
BL              sub_49894
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1AEC0

loc_1AE30
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, #0
ADD             SP, SP, #0x840
VPOP            {D8}
POP             {R4-R10,PC}

loc_1AE50
MOVNE           R0, #0
MOVNE           R1, #0
BNE             loc_1ABB8
BL              sub_3D190
MOV             R0, #0
MOV             R1, #0
B               loc_1ABB8

loc_1AE6C
BL              __errno_location
LDR             R12, =aGetSummary ; "get_summary"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R0, #0x159
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP,#0x840+var_840]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R12, [SP,#0x840+var_83C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x840+var_838]
ADD             R0, SP, #0x840+s ; s
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x840+s
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1AB7C

loc_1AEC0
BL              __errno_location
LDR             R12, =aGetSummary ; "get_summary"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R0, #0x18E
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x840+var_840]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x840+var_83C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x840+var_838]
ADD             R0, SP, #0x840+s ; s
BL              snprintf
ADD             R1, SP, #0x840+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1AA98

B               loc_1AE30
ALIGN 8
dbl_1AF18 DCFD 100.0
off_1AF20 DCD aGetSummary ; "get_summary"
off_1AF24 DCD byte_76424
off_1AF28 DCD byte_76434
off_1AF2C DCD byte_76434+0x10
off_1AF30 DCD byte_76454
off_1AF34 DCD byte_76454+0x10



; int __fastcall sub_1AF38(_DWORD *, int)
sub_1AF38

var_83C= -0x83C
var_838= -0x838
var_834= -0x834
var_82C= -0x82C
var_828= -0x828
var_820= -0x820
var_81C= -0x81C
var_814= -0x814
var_80C= -0x80C
s= -0x804

PUSH            {R4-R11,LR}
CMP             R0, #0
CMPNE           R1, #0
VPUSH           {D8-D9}
SUB             SP, SP, #0x830
SUB             SP, SP, #0xC
MOV             R2, #0
MOV             R3, #0
MOV             R12, #0
STRD            R2, R3, [SP,#0x83C+var_81C]
STRD            R2, R3, [SP,#0x83C+var_814]
STRD            R2, R3, [SP,#0x83C+var_80C]
STRH            R12, [SP,#0x83C+var_820]
BNE             loc_1AFF4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, R12
BNE             loc_1AFB0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R12
BNE             loc_1AFB0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0x80000002
BLE             loc_1AFDC

loc_1AFB0
MOVW            R2, #:lower16:aSInputBadApiPa ; "%s: input bad api param\n"
LDR             R3, =aGetSummaryOld ; "get_summary_old"
MOVT            R2, #:upper16:aSInputBadApiPa ; "%s: input bad api param\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x83C+s
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0x80000002

loc_1AFDC
ADD             SP, SP, #0x830
ADD             SP, SP, #0xC
VPOP            {D8-D9}
POP             {R4-R11,PC}
off_1AFEC DCD aGetSummaryOld ; "get_summary_old"
off_1AFF0 DCD byte_76424

loc_1AFF4
MOV             R4, R1
MOV             R9, R0
MOV             R1, #1
ADD             R0, SP, #0x83C+var_820
BL              sub_42680
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1B798

loc_1B01C
MOV             R2, #0xB
MOV             R1, #1
LDR             R3, [R4,#8]
MOV             R0, R9
BL              sub_16A28
MOVW            R10, #:lower16:dbl_681C0
MOVW            R3, #:lower16:qword_72EF0
MOV             R5, R3
MOVT            R10, #:upper16:dbl_681C0
BL              sub_48E00
STR             R0, [SP,#0x83C+var_828]
MOVW            R11, #:lower16:dword_76060
BL              sub_48A70
MOV             R4, R0
LDRD            R0, R1, [R10]
BLX             sub_4ABAC
BL              sub_49250
MOV             R3, R5
MOVW            R1, #:lower16:aElapsed ; "Elapsed"
MOVT            R3, #:upper16:qword_72EF0
MOV             R2, R0
MOVT            R1, #:upper16:aElapsed ; "Elapsed"
MOV             R0, R4
STR             R3, [SP,#0x83C+var_82C]
MOVT            R11, #:upper16:dword_76060
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x83C+var_81C
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
LDR             R0, =byte_76424 ; s
BL              sscanf
VLDR            D8, =100.0
MOVW            R7, #:lower16:dbl_74F28
VLDR            D7, [SP,#0x83C+var_81C]
MOVW            R5, #:lower16:dbl_74FB0
MOVT            R7, #:upper16:dbl_74F28
MOVT            R5, #:upper16:dbl_74FB0
MOVW            R6, #:lower16:dbl_72EF8
MOVW            R8, #:lower16:qword_72DC8
MOVT            R6, #:upper16:dbl_72EF8
MOVT            R8, #:upper16:qword_72DC8
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aGhs5s ; "GHS 5s"
MOV             R2, R0
MOVT            R1, #:upper16:aGhs5s ; "GHS 5s"
MOV             R0, R4
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x83C+var_80C
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
LDR             R0, =(byte_76434+0x10) ; s
BL              sscanf
VLDR            D7, [SP,#0x83C+var_80C]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aGhsAv ; "GHS av"
MOV             R2, R0
MOVT            R1, #:upper16:aGhsAv ; "GHS av"
MOV             R0, R4
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x83C+var_814
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
LDR             R0, =byte_76434 ; s
BL              sscanf
VLDR            D7, [SP,#0x83C+var_814]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aGhs30m ; "GHS 30m"
MOV             R2, R0
MOVT            R1, #:upper16:aGhs30m ; "GHS 30m"
MOV             R0, R4
BL              sub_49894
MOVW            R3, #:lower16:dword_76074
MOV             R1, #0
MOVT            R3, #:upper16:dword_76074
VLDR            D8, =100.0
LDR             R0, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aFoundBlocks ; "Found Blocks"
MOV             R2, R0
MOVT            R1, #:upper16:aFoundBlocks ; "Found Blocks"
MOV             R0, R4
BL              sub_49894
MOV             R3, #dword_74F88
LDRD            R0, R1, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aGetwork ; "Getwork"
MOV             R2, R0
MOVT            R1, #:upper16:aGetwork ; "Getwork"
MOV             R0, R4
BL              sub_49894
LDR             R3, [SP,#0x83C+var_82C]
LDRD            R0, R1, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aAccepted_0 ; "Accepted"
MOV             R2, R0
MOVT            R1, #:upper16:aAccepted_0 ; "Accepted"
MOV             R0, R4
BL              sub_49894
MOV             R3, #qword_74FB8
LDRD            R0, R1, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aRejected_0 ; "Rejected"
MOV             R2, R0
MOVT            R1, #:upper16:aRejected_0 ; "Rejected"
MOV             R0, R4
BL              sub_49894
LDR             R0, [R11]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aHardwareErrors_0 ; "Hardware Errors"
MOV             R2, R0
MOVT            R1, #:upper16:aHardwareErrors_0 ; "Hardware Errors"
MOV             R0, R4
BL              sub_49894
VLDR            D5, [R5]
VLDR            D7, [R7]
VLDR            D6, [R6]
VADD.F64        D7, D7, D5
VADD.F64        D7, D7, D6
VMOV            R0, R1, D7
BLX             sub_4ABAC
LDR             R3, [SP,#0x83C+var_82C]
STRD            R0, R1, [R8]
LDRD            R0, R1, [R3]
BLX             sub_4AB14
VLDR            D6, [R10]
VMOV            D7, R0, R1
VCMP.F64        D6, #0.0
VMRS            APSR_nzcv, FPSCR
VDIVNE.F64      D7, D7, D6
VLDR            D6, =60.0
VMUL.F64        D7, D7, D6
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D7, D7, D8
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aUtility ; "Utility"
MOV             R2, R0
MOVT            R1, #:upper16:aUtility ; "Utility"
MOV             R0, R4
BL              sub_49894
MOV             R3, #qword_75008
LDRD            R0, R1, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aDiscarded_0 ; "Discarded"
MOV             R2, R0
MOVT            R1, #:upper16:aDiscarded_0 ; "Discarded"
MOV             R0, R4
BL              sub_49894
MOV             R3, #qword_762C8
LDRD            R0, R1, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aStale_0 ; "Stale"
MOV             R2, R0
MOVT            R1, #:upper16:aStale_0 ; "Stale"
MOV             R0, R4
BL              sub_49894
MOVW            R3, #:lower16:dword_72F08
MOV             R1, #0
MOVT            R3, #:upper16:dword_72F08
LDR             R0, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aGetFailures ; "Get Failures"
MOV             R2, R0
MOVT            R1, #:upper16:aGetFailures ; "Get Failures"
MOV             R0, R4
BL              sub_49894
MOVW            R3, #:lower16:dword_72F14
MOV             R1, #0
MOVT            R3, #:upper16:dword_72F14
LDR             R0, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aLocalWork ; "Local Work"
MOV             R2, R0
MOVT            R1, #:upper16:aLocalWork ; "Local Work"
MOV             R0, R4
BL              sub_49894
MOVW            R3, #:lower16:dword_72DAC
MOV             R1, #0
MOVT            R3, #:upper16:dword_72DAC
LDR             R0, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aRemoteFailures ; "Remote Failures"
MOV             R2, R0
MOVT            R1, #:upper16:aRemoteFailures ; "Remote Failures"
MOV             R0, R4
BL              sub_49894
MOVW            R3, #:lower16:dword_761D8
MOV             R1, #0
MOVT            R3, #:upper16:dword_761D8
LDR             R0, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aNetworkBlocks ; "Network Blocks"
MOV             R2, R0
MOVT            R1, #:upper16:aNetworkBlocks ; "Network Blocks"
MOV             R0, R4
BL              sub_49894
MOV             R3, #dbl_72D88
VLDR            D7, [R3]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aTotalMh ; "Total MH"
MOV             R2, R0
MOVT            R1, #:upper16:aTotalMh ; "Total MH"
MOV             R0, R4
BL              sub_49894
LDRD            R0, R1, [R8]
BLX             sub_4AB14
VLDR            D6, [R10]
VMOV            D7, R0, R1
VLDR            D8, =100.0
VCMP.F64        D6, #0.0
VMRS            APSR_nzcv, FPSCR
VDIVNE.F64      D7, D7, D6
VLDR            D6, =60.0
VMUL.F64        D7, D7, D6
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aWorkUtility ; "Work Utility"
MOV             R2, R0
MOVT            R1, #:upper16:aWorkUtility ; "Work Utility"
MOV             R0, R4
BL              sub_49894
VLDR            D7, [R7]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aDifficultyAcce ; "Difficulty Accepted"
MOV             R2, R0
MOVT            R1, #:upper16:aDifficultyAcce ; "Difficulty Accepted"
B               loc_1B488
dbl_1B470 DCFD 100.0
dbl_1B478 DCFD 60.0
off_1B480 DCD byte_76434+0x10
off_1B484 DCD byte_76434

loc_1B488
MOV             R0, R4
BL              sub_49894
VLDR            D7, [R5]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aDifficultyReje ; "Difficulty Rejected"
MOV             R2, R0
MOVT            R1, #:upper16:aDifficultyReje ; "Difficulty Rejected"
MOV             R0, R4
BL              sub_49894
VLDR            D7, [R6]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aDifficultyStal ; "Difficulty Stale"
MOV             R2, R0
MOVT            R1, #:upper16:aDifficultyStal ; "Difficulty Stale"
MOV             R0, R4
BL              sub_49894
MOV             R3, #qword_68B00
LDRD            R0, R1, [R3]
BL              sub_49250
MOVW            R1, #:lower16:aBestShare ; "Best Share"
MOV             R2, R0
MOVT            R1, #:upper16:aBestShare ; "Best Share"
MOV             R0, R4
BL              sub_49894
LDR             R3, [R11]
LDRD            R0, R1, [R8]
ADDS            R10, R0, R3
ADC             R11, R1, R3,ASR#31
ORRS            R2, R10, R11
BNE             loc_1B6F4
VLDR            D0, =0.0

loc_1B538
BL              sub_492D4
MOVW            R1, #:lower16:aDeviceHardware ; "Device Hardware%"
MOV             R2, R0
MOVT            R1, #:upper16:aDeviceHardware ; "Device Hardware%"
MOV             R0, R4
BL              sub_49894
LDRD            R0, R1, [R8]
ORRS            R3, R0, R1
BEQ             loc_1B73C
BLX             sub_4AB14
VLDR            D6, [R5]
VMOV            D7, R0, R1
VLDR            D8, =100.0
VDIV.F64        D7, D6, D7
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8

loc_1B588
BL              sub_492D4
MOVW            R1, #:lower16:aDeviceRejected ; "Device Rejected%"
MOV             R2, R0
MOVT            R1, #:upper16:aDeviceRejected ; "Device Rejected%"
MOV             R0, R4
BL              sub_49894
VLDR            D6, [R5]
VLDR            D7, [R7]
VLDR            D5, [R6]
VADD.F64        D7, D6, D7
VADD.F64        D7, D7, D5
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
BEQ             loc_1B734
VDIV.F64        D5, D6, D7
VLDR            D8, =100.0
VMUL.F64        D7, D5, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8

loc_1B5E0
BL              sub_492D4
MOVW            R1, #:lower16:aPoolRejected ; "Pool Rejected%"
MOV             R2, R0
MOVT            R1, #:upper16:aPoolRejected ; "Pool Rejected%"
MOV             R0, R4
BL              sub_49894
VLDR            D7, [R7]
VLDR            D5, [R5]
VLDR            D6, [R6]
VADD.F64        D7, D7, D5
VADD.F64        D7, D7, D6
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
BEQ             loc_1B72C
VDIV.F64        D5, D6, D7
VLDR            D8, =100.0
VMUL.F64        D7, D5, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8

loc_1B638
BL              sub_492D4
MOVW            R1, #:lower16:aPoolStale_0 ; "Pool Stale%"
MOV             R2, R0
MOVT            R1, #:upper16:aPoolStale_0 ; "Pool Stale%"
MOV             R0, R4
BL              sub_49894
MOV             R3, #dword_76080
LDR             R0, [R3]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aLastGetwork ; "Last getwork"
MOV             R2, R0
MOVT            R1, #:upper16:aLastGetwork ; "Last getwork"
MOV             R0, R4
BL              sub_49894
MOV             R1, R4
LDR             R4, [SP,#0x83C+var_828]
MOV             R0, R4
BL              sub_49D54
MOVW            R1, #:lower16:aSummary ; "SUMMARY"
MOV             R2, R4
MOVT            R1, #:upper16:aSummary ; "SUMMARY"
MOV             R0, R9
BL              sub_49894
MOV             R1, #0
MOV             R0, #1
BL              sub_49250
MOVW            R1, #:lower16:aId ; "id"
MOV             R2, R0
MOVT            R1, #:upper16:aId ; "id"
MOV             R0, R9
BL              sub_49894
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1B744

loc_1B6D0
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, #0
ADD             SP, SP, #0x830
ADD             SP, SP, #0xC
VPOP            {D8-D9}
POP             {R4-R11,PC}

loc_1B6F4
VMOV            S15, R3
MOV             R0, R10
VCVT.F64.S32    D9, S15
MOV             R1, R11
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D7, D9, D7
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
B               loc_1B538

loc_1B72C
VLDR            D0, =0.0
B               loc_1B638

loc_1B734
VLDR            D0, =0.0
B               loc_1B5E0

loc_1B73C
VLDR            D0, =0.0
B               loc_1B588

loc_1B744
BL              __errno_location
LDR             R12, =aGetSummaryOld ; "get_summary_old"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R0, #0x335
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x83C+var_83C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x83C+var_838]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x83C+var_834]
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
ADD             R1, SP, #0x83C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1B6D0

loc_1B798
BL              __errno_location
LDR             R12, =aGetSummaryOld ; "get_summary_old"
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVW            R0, #0x2ED
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP,#0x83C+var_83C]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R12, [SP,#0x83C+var_838]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x83C+var_834]
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x83C+s
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1AF38

B               loc_1B01C
ALIGN 0x10
dbl_1B7F0 DCFD 0.0
dbl_1B7F8 DCFD 100.0
off_1B800 DCD aGetSummaryOld ; "get_summary_old"



; int sub_1B804()
sub_1B804

optlen= -0xAD64
servlen= -0xAD60
flags= -0xAD5C
var_AD50= -0xAD50
protocol= -0xAD4C
var_AD48= -0xAD48
var_AD44= -0xAD44
var_AD40= -0xAD40
var_AD3C= -0xAD3C
var_AD38= -0xAD38
var_AD34= -0xAD34
var_AD30= -0xAD30
var_AD2C= -0xAD2C
var_AD28= -0xAD28
var_AD24= -0xAD24
var_AD20= -0xAD20
var_AD1C= -0xAD1C
fd= -0xAD18
addr_len= -0xAD14
var_AD10= -0xAD10
var_AD0C= -0xAD0C
var_AD08= -0xAD08
pai= -0xAD04
optval= -0xAD00
var_ACFC= -0xACFC
var_ACF8= -0xACF8
service= -0xACF4
var_ACE8= -0xACE8
var_ACE4= -0xACE4
var_ACE0= -0xACE0
var_ACDC= -0xACDC
s1= -0xACD8
var_ACD4= -0xACD4
var_ACD0= -0xACD0
var_ACCC= -0xACCC
var_ACC8= -0xACC8
var_ACC4= -0xACC4
var_ACB0= -0xACB0
addr= -0xAC94
var_AC14= -0xAC14
var_AC04= -0xAC04
var_AB18= -0xAB18
src= -0xAA1C
var_AA14= -0xAA14
var_A924= -0xA924
s= -0xA804
var_A004= -0xA004
var_9824= -0x9824
var_9804= -0x9804
var_9024= -0x9024
var_8824= -0x8824
var_8024= -0x8024
var_7824= -0x7824
var_7024= -0x7024
var_6864= -0x6864
var_6064= -0x6064
var_5864= -0x5864
var_5064= -0x5064
var_4864= -0x4864
var_4064= -0x4064
var_3864= -0x3864
var_3064= -0x3064
var_2064= -0x2064

PUSH            {R4-R11,LR}
SUB             SP, SP, #0xAD00
SUB             SP, SP, #0x64
MOV             R3, #0xFFFFFFFF
ADD             R0, SP, #0xAD64+var_2064
MOV             R2, #0x2000 ; n
MOV             R1, #0  ; c
STR             R3, [SP,#0xAD64+var_AD1C]
STR             R3, [SP,#0xAD64+fd]
ADD             R0, R0, #0x60 ; '`' ; s
MOV             R3, #2
STR             R3, [SP,#0xAD64+var_AD50]
BL              memset
ADD             R0, SP, #0xAD64+var_3064
MOV             R2, #0x1000 ; n
MOV             R1, #0  ; c
ADD             R0, R0, #0x60 ; '`' ; s
BL              memset
MOVW            R1, #:lower16:byte_72D90
MOV             R2, #0
MOVT            R1, #:upper16:byte_72D90
ADD             R3, SP, #0xAD64+var_ACE4
LDRB            R1, [R1]
STR             R2, [R3],#-4
STR             R2, [SP,#0xAD64+var_ACE8]
CMP             R1, R2
STR             R2, [R3,#8]
STR             R2, [R3,#0xC]
BNE             loc_1B88C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R2
BEQ             loc_1C05C

loc_1B88C
MOVW            R2, #:lower16:aStartSFunction ; "Start %s function\n"
LDR             R3, =aApi_0 ; "api"
MOVT            R2, #:upper16:aStartSFunction ; "Start %s function\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0xAD64+s ; s
BL              snprintf
MOVW            R3, #:lower16:sub_18328
ADD             R1, SP, #0xAD64+s
MOV             R4, R3
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60
MOV             R3, R4
MOVT            R3, #:upper16:sub_18328
STR             R3, [SP,#0xAD64+var_AD3C]

loc_1B8C8
ADD             R0, SP, #0xAD64+var_A924
MOV             R1, #0  ; savemask
ADD             R0, R0, #8 ; env
BL              __sigsetjmp
SUBS            R4, R0, #0
BNE             loc_1CA00
ADD             R0, SP, #0xAD64+var_A924
ADD             R6, SP, #0xAD64+var_A004
ADD             R0, R0, #8 ; buf
MOV             R7, #1
BL              __pthread_register_cancel
MOVW            R1, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
MOVW            R2, #0xFBC
MOVT            R1, #:upper16:(aStaleSubmissio_0+0x30) ; format
ADD             R0, SP, #0xAD64+service ; s
BL              sprintf
ADD             R12, SP, #0xAD64+var_ACB0
ADD             R3, SP, #0xAD64+var_AC04
MOVW            R0, #:lower16:a0000 ; "0.0.0.0"
STR             R4, [SP,#0xAD64+var_ACB0]
SUB             R2, R3, #0xB0 ; req
ADD             R1, SP, #0xAD64+service ; service
ADD             R3, SP, #0xAD64+pai ; pai
MOVT            R0, #:upper16:a0000 ; "0.0.0.0"
STR             R4, [R12,#4]
STR             R4, [R12,#8]
STR             R4, [R12,#0xC]
STR             R4, [R12,#0x10]
STR             R4, [R12,#0x14]
STR             R4, [R12,#0x18]
STR             R7, [R6,#-0xCB0]
BL              getaddrinfo
SUBS            R3, R0, #0
STR             R3, [SP,#0xAD64+protocol]
BNE             loc_1BF64
LDR             R4, [R6,#-0xD00]
CMP             R4, #0
BEQ             loc_1CA20
MOV             R3, R4
LDR             R8, [SP,#0xAD64+protocol]
B               loc_1B97C

loc_1B96C
LDR             R4, [R4,#0x1C]
CMP             R4, #0
BEQ             loc_1C0DC
LDR             R3, [R6,#-0xD00]

loc_1B97C               ; domain
LDR             R0, [R3,#4]
MOV             R2, R8  ; protocol
MOV             R1, R7  ; type
BL              socket
CMP             R0, #0
BLE             loc_1B96C
MOV             R5, R0

loc_1B998
MOV             R0, #1
MOV             R3, #4
MOV             R1, R0  ; level
STR             R3, [SP,#0xAD64+optlen] ; optlen
MOV             R2, #2  ; optname
ADD             R3, SP, #0xAD64+optval ; optval
STR             R0, [SP,#0xAD64+optval]
MOV             R0, R5  ; fd
BL              setsockopt
MOVW            R6, #:lower16:byte_72D90
MOV             R0, #0  ; timer
BL              time
MOVT            R6, #:upper16:byte_72D90
MOV             R7, R0
LDR             R8, =aApiInitSocket ; "api_init_socket"
B               loc_1BA70

loc_1B9D8
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R9, R0
MOV             R0, #0  ; timer
BL              time
SUB             R0, R0, R7
CMP             R0, #0x3D ; '='
BGT             loc_1C8C8
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_1BA30
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1BA30
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_1BA68

loc_1BA30
MOVW            R3, #0xFBC
MOVW            R2, #:lower16:aSApiBindToPort ; "%s: api bind to port %d failed, trying "...
ADD             R0, SP, #0xAD64+var_5064
STR             R3, [SP,#0xAD64+optlen]
MOVT            R2, #:upper16:aSApiBindToPort ; "%s: api bind to port %d failed, trying "...
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x60 ; '`' ; s
MOV             R3, R8
BL              snprintf
ADD             R1, SP, #0xAD64+var_5064
MOV             R2, #0
ADD             R1, R1, #0x60 ; '`'
MOV             R0, #4
BL              sub_1DD60

loc_1BA68               ; seconds
MOV             R0, #0x1E
BL              sleep

loc_1BA70               ; len
LDR             R2, [R4,#0x10]
MOV             R0, R5  ; fd
LDR             R1, [R4,#0x14] ; addr
BL              bind
CMP             R0, #0
BLT             loc_1B9D8
LDR             R0, [SP,#0xAD64+pai] ; ai
BL              freeaddrinfo
MOV             R1, #0x64 ; 'd' ; n
MOV             R0, R5  ; fd
BL              listen
CMP             R0, #0
BLT             loc_1CA40
CMP             R5, #0x80000006
BEQ             loc_1C0B0
MOVW            R3, #:lower16:aGetVersionOld ; "get_version_old"
MOVW            R2, #:lower16:asc_4BB00 ; "="
MOVT            R3, #:upper16:aGetVersionOld ; "get_version_old"
MOVW            R10, #:lower16:dword_685A0
MOVT            R2, #:upper16:asc_4BB00 ; "="
STR             R3, [SP,#0xAD64+var_AD48]
STR             R5, [SP,#0xAD64+var_AD1C]
ADD             R11, R3, #0xCC
MOVT            R10, #:upper16:dword_685A0
STR             R2, [SP,#0xAD64+var_AD40]
B               loc_1BAF0

loc_1BAD8
ADD             R2, SP, #0xAD64+var_2064
MOV             R3, #0
ADD             R2, R2, #0x60 ; '`'
STRB            R3, [R2]

loc_1BAE8               ; fd
LDR             R0, [SP,#0xAD64+fd]
BL              close

loc_1BAF0
LDRB            R6, [R10,#0x14]
CMP             R6, #0
BNE             loc_1C69C
MOV             R3, #0x80
LDR             R0, [SP,#0xAD64+var_AD1C] ; fd
ADD             R1, SP, #0xAD64+addr ; addr
ADD             R2, SP, #0xAD64+addr_len ; addr_len
STR             R3, [SP,#0xAD64+addr_len]
BL              accept
CMP             R0, #0
STR             R0, [SP,#0xAD64+fd]
BLT             loc_1C620
MOV             R4, #4
MOV             R5, #1
MOV             R12, #2
MOV             R1, R5  ; level
ADD             R3, SP, #0xAD64+var_AD10 ; optval
MOV             R7, #5
MOV             R2, #9  ; optname
STR             R4, [SP,#0xAD64+optlen] ; optlen
STR             R12, [SP,#0xAD64+var_AD08]
STR             R5, [SP,#0xAD64+var_AD10]
STR             R7, [SP,#0xAD64+var_AD0C]
BL              setsockopt
ADD             R3, SP, #0xAD64+var_AD10 ; optval
MOV             R2, R5  ; optname
MOV             R1, #6  ; level
LDR             R0, [SP,#0xAD64+fd] ; fd
STR             R4, [SP,#0xAD64+optlen] ; optlen
BL              setsockopt
MOV             R2, #6  ; optname
ADD             R3, SP, #0xAD64+var_AD10 ; optval
MOV             R1, R2  ; level
LDR             R0, [SP,#0xAD64+fd] ; fd
STR             R4, [SP,#0xAD64+optlen] ; optlen
BL              setsockopt
MOV             R2, R4  ; optname
ADD             R3, SP, #0xAD64+var_AD0C ; optval
MOV             R1, #6  ; level
LDR             R0, [SP,#0xAD64+fd] ; fd
STR             R4, [SP,#0xAD64+optlen] ; optlen
BL              setsockopt
MOV             R2, R7  ; optname
ADD             R3, SP, #0xAD64+var_AD08 ; optval
MOV             R1, #6  ; level
LDR             R0, [SP,#0xAD64+fd] ; fd
STR             R4, [SP,#0xAD64+optlen] ; optlen
BL              setsockopt
MOV             R2, #8
MOV             R12, #0xA
STR             R2, [SP,#0xAD64+optlen] ; optlen
MOV             R1, R5  ; level
LDR             R0, [SP,#0xAD64+fd] ; fd
ADD             R3, SP, #0xAD64+var_ACFC ; optval
MOV             R2, #0x15 ; optname
STR             R6, [SP,#0xAD64+var_ACF8]
STR             R12, [SP,#0xAD64+var_ACFC]
BL              setsockopt
CMP             R0, #0
BEQ             loc_1BC54
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1BC1C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1BC1C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1BC4C

loc_1BC1C
MOVW            R2, #:lower16:aSSetsocketSoSn ; "%s:setsocket SO_SNDTIMEO failed\n"
ADD             R0, SP, #0xAD64+var_8824
MOVT            R2, #:upper16:aSSetsocketSoSn ; "%s:setsocket SO_SNDTIMEO failed\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x20 ; ' ' ; s
MOV             R3, R11
BL              snprintf
ADD             R1, SP, #0xAD64+var_8824
MOV             R2, #0
ADD             R1, R1, #0x20 ; ' '
MOV             R0, #3
BL              sub_1DD60

loc_1BC4C               ; fd
LDR             R0, [SP,#0xAD64+fd]
BL              close

loc_1BC54
MOV             R2, #8
LDR             R0, [SP,#0xAD64+fd] ; fd
STR             R2, [SP,#0xAD64+optlen] ; optlen
ADD             R3, SP, #0xAD64+var_ACFC ; optval
MOV             R2, #0x14 ; optname
MOV             R1, #1  ; level
BL              setsockopt
CMP             R0, #0
BEQ             loc_1BCEC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1BCB4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1BCB4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1BCE4

loc_1BCB4
MOVW            R2, #:lower16:aSSetsocketSoRc ; "%s:setsocket SO_RCVTIMEO failed\n"
ADD             R0, SP, #0xAD64+var_8024
MOVT            R2, #:upper16:aSSetsocketSoRc ; "%s:setsocket SO_RCVTIMEO failed\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x20 ; ' ' ; s
MOV             R3, R11
BL              snprintf
ADD             R1, SP, #0xAD64+var_8024
MOV             R2, #0
ADD             R1, R1, #0x20 ; ' '
MOV             R0, #3
BL              sub_1DD60

loc_1BCE4               ; fd
LDR             R0, [SP,#0xAD64+fd]
BL              close

loc_1BCEC
ADD             R1, SP, #0xAD64+var_2064
MOV             R3, #0  ; flags
ADD             R1, R1, #0x60 ; '`' ; buf
LDR             R0, [SP,#0xAD64+fd] ; fd
MOVW            R2, #0xFFF ; n
BL              recv
SUBS            R3, R0, #0
BLE             loc_1BAD8
MOV             R4, #0
ADD             R2, SP, #0xAD64+var_2064
ADD             R2, R2, #0x60 ; '`'
MOV             R0, R4  ; timer
STR             R4, [R10,#4]
ADD             R5, R10, #4
STR             R4, [R10,#8]
STR             R4, [R10,#0xC]
STR             R4, [R10,#0x10]
STRB            R4, [R2,R3]
STR             R4, [SP,#0xAD64+var_ACE8]
STR             R4, [SP,#0xAD64+var_ACE4]
STR             R4, [SP,#0xAD64+var_ACE0]
STR             R4, [SP,#0xAD64+var_ACDC]
BL              time
MOV             R3, #1
STR             R0, [R10]
MOV             R2, R5  ; host
STR             R3, [SP,#0xAD64+flags] ; flags
STR             R4, [SP,#0xAD64+servlen] ; servlen
MOV             R3, #0x10 ; hostlen
STR             R4, [SP,#0xAD64+optlen] ; serv
ADD             R0, SP, #0xAD64+addr ; sa
MOV             R1, #0x80 ; salen
BL              getnameinfo
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, R4
BEQ             loc_1BDF0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, R4
BNE             loc_1BDC0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R4
BNE             loc_1BDC0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1BDF0

loc_1BDC0
MOVW            R2, #:lower16:aConnectAddrS ; "connect_addr: %s"
ADD             R0, SP, #0xAD64+var_7824
MOVT            R2, #:upper16:aConnectAddrS ; "connect_addr: %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x20 ; ' ' ; s
ADD             R3, R10, #4
BL              snprintf
ADD             R1, SP, #0xAD64+var_7824
MOV             R2, #0
ADD             R1, R1, #0x20 ; ' '
MOV             R0, #7
BL              sub_1DD60

loc_1BDF0
MOV             R3, #0
ADD             R0, SP, #0xAD64+var_2064
ADD             R12, SP, #0xAD64+var_ACD4
MOV             R1, R3
ADD             R2, SP, #0xAD64+var_AC14
ADD             R0, R0, #0x60 ; '`'
STR             R3, [R12],#-4
STR             R3, [SP,#0xAD64+s1]
STR             R3, [R12,#8]
STR             R3, [R12,#0xC]
BL              sub_47C50
SUBS            R5, R0, #0
BEQ             loc_1BE88
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_1BE88
MOV             R1, #(aInvalidCommand+8) ; "command"
BL              sub_48AF4
SUBS            R6, R0, #0
BEQ             loc_1BE50
LDR             R7, [R6]
CMP             R7, #1
BEQ             loc_1C430

loc_1BE50
LDR             R3, [R5,#4]
CMN             R3, #1
BEQ             loc_1BE88
ADD             R3, R5, #4
DMB             ISH

loc_1BE64
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_1BE64
CMP             R2, #0
BNE             loc_1BE88
MOV             R0, R5
BL              sub_4942C

loc_1BE88
BL              sub_48A70
MOV             R4, R0
ADD             R0, SP, #0xAD64+var_2064
ADD             R0, R0, #0x60 ; '`'
ADD             R2, SP, #0xAD64+var_AB18
MOV             R1, #0
BL              sub_47C50
SUBS            R5, R0, #0
BEQ             loc_1BEB8
LDR             R3, [R5]
CMP             R3, #0
BEQ             loc_1C328

loc_1BEB8
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
ADD             R3, SP, #0xAD64+var_2064
MOV             R12, #2
ADD             R3, R3, #0x60 ; '`'
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R1, #0x10 ; maxlen
ADD             R0, SP, #0xAD64+var_ACE8 ; s
STR             R12, [SP,#0xAD64+var_AD50]
BL              snprintf

loc_1BEDC
LDR             R2, [SP,#0xAD64+var_AD50]
ADD             R1, SP, #0xAD64+var_ACE8
MOV             R0, R4
BL              sub_1836C

loc_1BEEC
LDR             R3, [SP,#0xAD64+var_AD50]
CMP             R3, #2
BEQ             loc_1C158
MOV             R1, #0x6000
MOV             R0, R4
BL              sub_45A6C
SUBS            R5, R0, #0
BEQ             loc_1BF18
MOV             R1, R5  ; s
ADD             R0, SP, #0xAD64+fd ; int
BL              sub_189CC

loc_1BF18
CMP             R4, #0
BEQ             loc_1BF58
LDR             R3, [R4,#4]
CMN             R3, #1
BEQ             loc_1BF58
ADD             R3, R4, #4
DMB             ISH

loc_1BF34
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_1BF34
CMP             R2, #0
BNE             loc_1BF58
MOV             R0, R4
BL              sub_4942C

loc_1BF58               ; ptr
MOV             R0, R5
BL              free
B               loc_1BAE8

loc_1BF64
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C080
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C080
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_1C080

loc_1BFA0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1C004

loc_1BFB4
MOVW            R2, #:lower16:aSInitSocketFai ; "%s: init socket failed"
LDR             R3, =aApi_0 ; "api"
MOVT            R2, #:upper16:aSInitSocketFai ; "%s: init socket failed"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0xAD64+var_A004 ; s
BL              snprintf
ADD             R1, SP, #0xAD64+var_A004
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C018
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C018

loc_1C004
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1C040

loc_1C018
MOVW            R3, #:lower16:aCgminerRestart ; "cgminer restart"
ADD             R12, SP, #0xAD64+var_9824
MOVT            R3, #:upper16:aCgminerRestart ; "cgminer restart"
ADD             R12, R12, #0x20 ; ' '
LDM             R3, {R0-R3} ; "cgminer restart"
STM             R12, {R0-R3}
MOV             R1, R12
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_1C040
MOVW            R1, #:lower16:aApiNewC ; "api_new.c"
MOVW            R0, #:lower16:word_55C44
MOVT            R1, #:upper16:aApiNewC ; "api_new.c"
MOVT            R0, #:upper16:word_55C44 ; assertion
LDR             R3, =function ; "api"
MOVW            R2, #0x741 ; line
BL              __assert_fail

loc_1C05C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_1B88C
MOV             R3, #sub_18328
STR             R3, [SP,#0xAD64+var_AD3C]
B               loc_1B8C8

loc_1C080
MOVW            R2, #:lower16:aSExecGetaddrin ; "%s: exec getaddrinfo() failed\n"
ADD             R0, SP, #0xAD64+var_6064
MOVT            R2, #:upper16:aSExecGetaddrin ; "%s: exec getaddrinfo() failed\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x60 ; '`' ; s
LDR             R3, =aApiInitSocket ; "api_init_socket"
BL              snprintf
ADD             R1, SP, #0xAD64+var_6064
MOV             R2, #0
ADD             R1, R1, #0x60 ; '`'
MOV             R0, #3
BL              sub_1DD60

loc_1C0B0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1BFB4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1BFB4
B               loc_1BFA0

loc_1C0DC
CMN             R0, #1
MOV             R5, R0
BNE             loc_1B998
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C124
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C124
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1BFA0

loc_1C124
ADD             R0, SP, #0xAD64+var_5864
MOV             R2, #aSExecSocketFai ; "%s: exec socket() failed\n"
LDR             R3, =aApiInitSocket ; "api_init_socket"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x60 ; '`' ; s
BL              snprintf
ADD             R1, SP, #0xAD64+var_5864
MOV             R2, #0
ADD             R1, R1, #0x60 ; '`'
MOV             R0, #3
BL              sub_1DD60
B               loc_1C0B0

loc_1C158
ADD             R5, SP, #0xAD64+var_3064
MOV             R2, #0x1000 ; n
ADD             R5, R5, #0x60 ; '`'
MOV             R1, #0  ; c
MOV             R0, R5  ; s
BL              memset
CMP             R4, #0
BEQ             loc_1C2D4
MOVW            R1, #:lower16:aStatus ; "STATUS"
MOV             R0, R4
MOVT            R1, #:upper16:aStatus ; "STATUS"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_1C2D4
LDR             R3, [R3]
CMP             R3, #1
BNE             loc_1C2D4
MOV             R1, #0
BL              sub_48E7C
SUBS            R8, R0, #0
BEQ             loc_1C2D4
LDR             R3, [R8]
CMP             R3, #0
BNE             loc_1C2D4
BL              sub_48D5C
BL              sub_48DDC
SUBS            R6, R0, #0
BEQ             loc_1C24C
MOVW            R7, #:lower16:word_51D00
STR             R4, [SP,#0xAD64+var_AD38]
MOVT            R7, #:upper16:word_51D00
LDR             R9, [SP,#0xAD64+var_AD40]
B               loc_1C234

loc_1C1DC               ; s
MOV             R0, R5
BL              strlen
MOV             R1, R6
ADD             R0, R5, R0
BL              stpcpy
LDRH            R3, [R9]
MOV             R1, R4
STRH            R3, [R0]
MOV             R0, R5
BL              sub_18518
MOV             R0, R5  ; s
BL              strlen
LDRH            R3, [R7]
STRH            R3, [R5,R0]
MOV             R0, R6
BL              sub_48DF4
MOV             R1, R0
MOV             R0, R8
BL              sub_48DA8
BL              sub_48DDC
SUBS            R6, R0, #0
BEQ             loc_1C248

loc_1C234
MOV             R0, R6
BL              sub_48DF4
BL              sub_48DE8
SUBS            R4, R0, #0
BNE             loc_1C1DC

loc_1C248
LDR             R4, [SP,#0xAD64+var_AD38]

loc_1C24C
ADD             R0, SP, #0xAD64+var_3064
ADD             R6, SP, #0xAD64+var_ACC8
ADD             R0, R0, #0x60 ; '`' ; s
BL              strlen
ADD             R3, SP, #0xAD64+var_3064
MOV             R2, #0x7C ; '|'
ADD             R3, R3, #0x5F ; '_'
MOV             R1, #0  ; c
STRB            R2, [R3,R0]
ADD             R0, SP, #0xAD64+var_AA14
MOV             R2, #0x100 ; n
SUB             R0, R0, #8 ; s
BL              memset
LDR             R3, [SP,#0xAD64+var_AD48]
ADD             R12, SP, #0xAD64+var_ACC4
LDR             R5, [SP,#0xAD64+protocol]
SUB             R12, R12, #4
ADD             LR, R3, #0xF4
LDM             LR!, {R0-R3}
LDR             LR, [LR]
STM             R12!, {R0-R3}
STR             LR, [R12]

loc_1C2A4
LDR             R7, [R6],#4
MOV             R0, R4
MOV             R1, R7
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_1C2C8
LDR             R3, [R0]
CMP             R3, #1
BEQ             loc_1C734

loc_1C2C8
ADD             R5, R5, #1
CMP             R5, #5
BNE             loc_1C2A4

loc_1C2D4
ADD             R1, SP, #0xAD64+var_3064
ADD             R0, SP, #0xAD64+fd ; int
ADD             R1, R1, #0x60 ; '`' ; s
BL              sub_189CC
CMP             R4, #0
BEQ             loc_1BAE8
LDR             R3, [R4,#4]
CMN             R3, #1
BEQ             loc_1BAE8
ADD             R3, R4, #4
DMB             ISH

loc_1C300
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_1C300
CMP             R2, #0
BNE             loc_1BAE8
MOV             R0, R4
BL              sub_4942C
B               loc_1BAE8

loc_1C328
MOV             R1, #(aInvalidCommand+8) ; "command"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_1C348
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_1C970

loc_1C348
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C5C4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C5C4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_1C5C4
LDR             R3, [R5,#4]
CMN             R3, #1
BEQ             loc_1C608

loc_1C390
ADD             R3, R5, #4
DMB             ISH

loc_1C398
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_1C398
CMP             R2, #0
BNE             loc_1C3BC
MOV             R0, R5
BL              sub_4942C

loc_1C3BC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C3E4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1C608

loc_1C3E4
MOVW            R2, #:lower16:aSInputInvaildP ; "%s: input invaild param format"
ADD             R0, SP, #0xAD64+var_7024
MOVT            R2, #:upper16:aSInputInvaildP ; "%s: input invaild param format"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x20 ; ' ' ; s
MOV             R3, R11
BL              snprintf
ADD             R1, SP, #0xAD64+var_7024
MOV             R2, #0
ADD             R1, R1, #0x20 ; ' '
MOV             R0, #3
BL              sub_1DD60

loc_1C414
MOVW            R3, #:lower16:aMissingJsonCom ; "Missing JSON 'command'"
MOV             R2, #0x18
MOVT            R3, #:upper16:aMissingJsonCom ; "Missing JSON 'command'"
MOV             R1, #0
MOV             R0, R4
BL              sub_16A28
B               loc_1BEEC

loc_1C430
MOVW            R1, #:lower16:aNewApi ; "new_api"
MOV             R0, R5
MOVT            R1, #:upper16:aNewApi ; "new_api"
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_1C454
LDR             R7, [R0]
SUBS            R7, R7, #5
MOVNE           R7, #1

loc_1C454
LDR             R4, [SP,#0xAD64+protocol]
MOV             R9, #(aReceivedFromPr+0x1C) ; "%s"
STR             R4, [SP,#0xAD64+var_AD44]
BL              sub_48A70
MOV             R8, R0
B               loc_1C474

loc_1C470
ADD             R4, R4, #1

loc_1C474
MOV             R0, R6
BL              sub_48E60
CMP             R0, R4
BLS             loc_1C520
MOV             R1, R4
MOV             R0, R6
BL              sub_48E7C
CMP             R0, #0
CMPNE           R4, #0xB
MOV             R3, R0
MOVEQ           R2, #1
MOVNE           R2, #0
BEQ             loc_1C520
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_1C470
STR             R2, [SP,#0xAD64+s1]
STR             R2, [SP,#0xAD64+var_ACD4]
STR             R2, [SP,#0xAD64+var_ACD0]
STR             R2, [SP,#0xAD64+var_ACCC]
BL              sub_49028
MOV             R2, R9  ; format
MOV             R3, R0
MOV             R1, #0x10 ; maxlen
ADD             R0, SP, #0xAD64+s1 ; s
BL              snprintf
MOVW            R1, #:lower16:aReload ; "reload"
ADD             R0, SP, #0xAD64+s1 ; s1
MOVT            R1, #:upper16:aReload ; "reload"
BL              strcmp
ORRS            R3, R0, R7
BEQ             loc_1C8A4
BL              sub_48A70
MOV             R2, R7
ADD             R1, SP, #0xAD64+s1
STR             R0, [SP,#0xAD64+var_AD34]
BL              sub_1836C
LDR             R3, [SP,#0xAD64+var_AD34]
ADD             R1, SP, #0xAD64+s1
MOV             R0, R8
MOV             R2, R3
BL              sub_49894
B               loc_1C470

loc_1C520
MOV             R1, #0x6000
MOV             R0, R8
BL              sub_45A6C
SUBS            R4, R0, #0
BNE             loc_1C894

loc_1C534               ; ptr
MOV             R0, R4
BL              free
LDR             R3, [SP,#0xAD64+var_AD44]
CMP             R3, #1
BEQ             loc_1C8B0

loc_1C548
CMP             R8, #0
BEQ             loc_1C588
LDR             R3, [R8,#4]
CMN             R3, #1
BEQ             loc_1C588
ADD             R3, R8, #4
DMB             ISH

loc_1C564
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_1C564
CMP             R2, #0
BNE             loc_1C588
MOV             R0, R8
BL              sub_4942C

loc_1C588
LDR             R3, [R5,#4]
CMN             R3, #1
BEQ             loc_1BAE8
ADD             R3, R5, #4
DMB             ISH

loc_1C59C
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_1C59C
CMP             R2, #0
BNE             loc_1BAE8
MOV             R0, R5
BL              sub_4942C
B               loc_1BAE8

loc_1C5C4
LDR             R3, [SP,#0xAD64+var_AD48]
MOVW            R2, #:lower16:aSErrorFormatEr ; "%s error: format error about command\n"
ADD             R0, SP, #0xAD64+var_3864
MOVT            R2, #:upper16:aSErrorFormatEr ; "%s error: format error about command\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x60 ; '`' ; s
ADD             R3, R3, #0xE4
BL              snprintf
ADD             R1, SP, #0xAD64+var_3864
MOV             R2, #0
ADD             R1, R1, #0x60 ; '`'
MOV             R0, #3
BL              sub_1DD60
LDR             R3, [R5,#4]
CMN             R3, #1
BNE             loc_1C390
B               loc_1C3BC

loc_1C608
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1C414
B               loc_1C3E4

loc_1C620
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C65C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C65C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1C69C

loc_1C65C
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOVW            R2, #:lower16:aSExecAcceptFai ; "%s: exec accept failed (%s)"
STR             R0, [SP,#0xAD64+optlen]
ADD             R0, SP, #0xAD64+var_9024
MOVT            R2, #:upper16:aSExecAcceptFai ; "%s: exec accept failed (%s)"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x20 ; ' ' ; s
LDR             R3, =aApi_0 ; "api"
BL              snprintf
ADD             R1, SP, #0xAD64+var_9024
MOV             R2, #0
ADD             R1, R1, #0x20 ; ' '
MOV             R0, #3
BL              sub_1DD60

loc_1C69C
ADD             R0, SP, #0xAD64+var_A924
ADD             R0, R0, #8 ; buf
BL              __pthread_unregister_cancel
LDR             R3, [SP,#0xAD64+var_AD3C]
ADD             R0, SP, #0xAD64+var_AD1C
BLX             R3      ; sub_18328
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C6F0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C6F0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_1C720

loc_1C6F0
MOVW            R2, #:lower16:aEndSFunction ; "End %s function !!!"
ADD             R0, SP, #0xAD64+var_6864
MOVT            R2, #:upper16:aEndSFunction ; "End %s function !!!"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x60 ; '`' ; s
LDR             R3, =aApi_0 ; "api"
BL              snprintf
ADD             R1, SP, #0xAD64+var_6864
MOV             R2, #0
ADD             R1, R1, #0x60 ; '`'
MOV             R0, #5
BL              sub_1DD60

loc_1C720               ; fd
LDR             R0, [SP,#0xAD64+var_AD1C]
BL              close
ADD             SP, SP, #0xAD00
ADD             SP, SP, #0x64 ; 'd'
POP             {R4-R11,PC}

loc_1C734
BICS            R3, R5, #4
MOV             R8, R0
BEQ             loc_1C944

loc_1C740
MOV             R0, R8
BL              sub_48E60
SUBS            R9, R0, #0
BLE             loc_1C2D4
LDR             R6, [SP,#0xAD64+protocol]
MOV             R3, #word_51D00
STR             R4, [SP,#0xAD64+var_AD30]
STR             R3, [SP,#0xAD64+var_AD28]
STR             R10, [SP,#0xAD64+var_AD2C]

loc_1C768
MOV             R1, R6
MOV             R0, R8
BL              sub_48E7C
SUBS            R7, R0, #0
BEQ             loc_1C788
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_1C7A0

loc_1C788
ADD             R6, R6, #1
CMP             R9, R6
BNE             loc_1C768
LDR             R4, [SP,#0xAD64+var_AD30]
LDR             R10, [SP,#0xAD64+var_AD2C]
B               loc_1C2D4

loc_1C7A0
BL              sub_48D5C
BL              sub_48DDC
SUBS            R5, R0, #0
BEQ             loc_1C840
ADD             R4, SP, #0xAD64+var_3064
STR             R6, [SP,#0xAD64+var_AD20]
ADD             R4, R4, #0x60 ; '`'
STR             R8, [SP,#0xAD64+var_AD24]
LDR             R6, [SP,#0xAD64+var_AD28]
LDR             R10, [SP,#0xAD64+var_AD40]
B               loc_1C824

loc_1C7CC               ; s
MOV             R0, R4
BL              strlen
MOV             R1, R5
ADD             R0, R4, R0
BL              stpcpy
LDRH            R3, [R10]
MOV             R1, R8
STRH            R3, [R0]
MOV             R0, R4
BL              sub_18518
MOV             R0, R4  ; s
BL              strlen
LDRH            R3, [R6]
STRH            R3, [R4,R0]
MOV             R0, R5
BL              sub_48DF4
MOV             R1, R0
MOV             R0, R7
BL              sub_48DA8
BL              sub_48DDC
SUBS            R5, R0, #0
BEQ             loc_1C838

loc_1C824
MOV             R0, R5
BL              sub_48DF4
BL              sub_48DE8
SUBS            R8, R0, #0
BNE             loc_1C7CC

loc_1C838
LDR             R8, [SP,#0xAD64+var_AD24]
LDR             R6, [SP,#0xAD64+var_AD20]

loc_1C840
ADD             R0, SP, #0xAD64+var_3064
ADD             R0, R0, #0x60 ; '`' ; s
BL              strlen
SUB             R3, R9, #1
ADD             R2, SP, #0xAD64+var_3064
CMP             R3, R6
ADD             R2, R2, #0x5F ; '_'
MOV             R3, #0x7C ; '|'
STRB            R3, [R2,R0]
BEQ             loc_1C788
ADD             R0, SP, #0xAD64+var_3064
ADD             R0, R0, #0x60 ; '`' ; s
BL              strlen
ADD             R2, SP, #0xAD64+var_3064
MOV             R3, #0x2C ; ','
ADD             R2, R2, #0x60 ; '`'
STRB            R3, [R2,R0]
B               loc_1C788
off_1C888 DCD aApi_0    ; "api"
off_1C88C DCD function  ; "api"
off_1C890 DCD aApiInitSocket ; "api_init_socket"

loc_1C894               ; s
MOV             R1, R4
ADD             R0, SP, #0xAD64+fd ; int
BL              sub_189CC
B               loc_1C534

loc_1C8A4
MOV             R3, #1
STR             R3, [SP,#0xAD64+var_AD44]
B               loc_1C470

loc_1C8B0
MOVW            R1, #:lower16:aReload ; "reload"
MOV             R2, #0
MOVT            R1, #:upper16:aReload ; "reload"
MOV             R0, R8
BL              sub_1836C
B               loc_1C548

loc_1C8C8               ; ai
LDR             R0, [SP,#0xAD64+pai]
BL              freeaddrinfo
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C90C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1C90C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1BFA0

loc_1C90C
ADD             R0, SP, #0xAD64+var_4864
MOVW            R2, #:lower16:aApiBindToPortD ; "api bind to port %d, failed (%s)"
STR             R9, [SP,#0xAD64+optlen]
MOVT            R2, #:upper16:aApiBindToPortD ; "api bind to port %d, failed (%s)"
MOVW            R3, #0xFBC
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x60 ; '`' ; s
BL              snprintf
ADD             R1, SP, #0xAD64+var_4864
MOV             R2, #0
ADD             R1, R1, #0x60 ; '`'
MOV             R0, #3
BL              sub_1DD60
B               loc_1C0B0

loc_1C944
MOVW            R2, #:lower16:aS_3 ; "%s,"
MOV             R3, R7
ADD             R0, SP, #0xAD64+src ; s
MOVT            R2, #:upper16:aS_3 ; format
MOV             R1, #0x100 ; maxlen
BL              snprintf
ADD             R0, SP, #0xAD64+var_3064
ADD             R1, SP, #0xAD64+src ; src
ADD             R0, R0, #0x60 ; '`' ; dest
BL              strcat
B               loc_1C740

loc_1C970
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
ADD             R0, SP, #0xAD64+var_ACE8 ; s
BL              snprintf
MOVW            R1, #:lower16:aNewApi ; "new_api"
MOV             R0, R5
MOVT            R1, #:upper16:aNewApi ; "new_api"
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_1CA18
LDR             R3, [R0]
CMP             R3, #5
LDR             R3, [R5,#4]
BEQ             loc_1CA28

loc_1C9B4
CMN             R3, #1
MOVEQ           R3, #1
STREQ           R3, [SP,#0xAD64+var_AD50]
BEQ             loc_1BEDC
MOV             R2, #1

loc_1C9C8
ADD             R3, R5, #4
DMB             ISH

loc_1C9D0
LDREX           R1, [R3]
SUB             R1, R1, #1
STREX           R0, R1, [R3]
CMP             R0, #0
BNE             loc_1C9D0
CMP             R1, #0
STRNE           R2, [SP,#0xAD64+var_AD50]
BNE             loc_1BEDC
MOV             R0, R5
STR             R2, [SP,#0xAD64+var_AD50]
BL              sub_4942C
B               loc_1BEDC

loc_1CA00
ADD             R0, SP, #0xAD64+var_AD1C
LDR             R3, [SP,#0xAD64+var_AD3C]
BLX             R3      ; sub_18328
ADD             R0, SP, #0xAD64+var_A924
ADD             R0, R0, #8 ; buf
BL              __pthread_unwind_next

loc_1CA18
LDR             R3, [R5,#4]
B               loc_1C9B4

loc_1CA20
MOV             R5, R4
B               loc_1B998

loc_1CA28
CMN             R3, #1
LDRNE           R2, [SP,#0xAD64+protocol]
BNE             loc_1C9C8
LDR             R3, [SP,#0xAD64+protocol]
STR             R3, [SP,#0xAD64+var_AD50]
B               loc_1BEDC

loc_1CA40
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1CA7C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1CA7C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1CABC

loc_1CA7C
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOVW            R2, #:lower16:aSExecListenFai ; "%s: exec listen() failed (%s)"
STR             R0, [SP,#0xAD64+optlen]
ADD             R0, SP, #0xAD64+var_4064
MOVT            R2, #:upper16:aSExecListenFai ; "%s: exec listen() failed (%s)"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x60 ; '`' ; s
LDR             R3, =aApiInitSocket ; "api_init_socket"
BL              snprintf
ADD             R1, SP, #0xAD64+var_4064
MOV             R2, #0
ADD             R1, R1, #0x60 ; '`'
MOV             R0, #3
BL              sub_1DD60

loc_1CABC               ; fd
MOV             R0, R5
BL              close
B               loc_1C0B0
; End of function sub_1B804

CMP             R1, #0
BLE             loc_1CB10
PUSH            {LR}
MOVW            LR, #:lower16:unk_67440
ADD             R1, R0, R1
MOVT            LR, #:upper16:unk_67440
MOV             R3, #0

loc_1CAE4
LDRB            R12, [R0],#1
MOV             R2, R3,LSL#8
UXTH            R2, R2
CMP             R0, R1
EOR             R3, R12, R3,LSR#8
LDR             R3, [LR,R3,LSL#2]
UXTH            R3, R3
EOR             R3, R3, R2
BNE             loc_1CAE4
MOV             R0, R3
POP             {PC}

loc_1CB10
MOV             R3, #0
MOV             R0, R3
BX              LR



; void *__fastcall sub_1CB1C(const char **, const char *, const char *, int)
sub_1CB1C

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

PUSH            {R4-R8,LR}
MOV             R4, R0
LDRB            R0, [R0,#4]
SUB             SP, SP, #0x820
CMP             R0, #0
BNE             loc_1CD34

loc_1CB34
LDR             R3, [R4,#0x28]
CMP             R3, #0
BLE             loc_1CD2C
LDR             R2, [R4,#0x18]
CMP             R3, R2
BLE             loc_1CC98
LDR             R6, [R4,#0x24]
ADD             R1, R2, R6
CMP             R3, R1
SUBLT           R6, R3, R2

loc_1CB5C
LDR             R1, [R4,#0x30]
LDR             R0, [R4,#0x34] ; ptr
ADD             R1, R1, #1
STR             R1, [R4,#0x30]
MOV             R1, R1,LSL#2 ; size
BL              realloc
CMP             R0, #0
STR             R0, [R4,#0x34]
BEQ             loc_1CD98

loc_1CB80               ; size
MOV             R1, #0x10
MOV             R0, R6  ; nmemb
BL              calloc
SUBS            R5, R0, #0
BEQ             loc_1CDF0

loc_1CB94
LDR             R3, [R4,#0x30]
CMP             R6, #2
LDR             R2, [R4,#0x34]
MOV             R0, #0
SUB             R3, R3, #0xC0000001
STR             R5, [R2,R3,LSL#2]
ADD             R2, R5, #0x10
LDR             R3, [R4,#0x18]
LDR             R1, [R4]
STR             R6, [R4,#0x1C]
ADD             R3, R3, R6
STR             R6, [R4,#0x20]
STR             R3, [R4,#0x18]
STR             R1, [R5]
STMIB           R5, {R0,R2}
BLE             loc_1CBF4
ADD             R0, R5, R6,LSL#4
ADD             R3, R5, #0x20 ; ' '

loc_1CBDC
SUB             R2, R3, #0x20 ; ' '
STR             R1, [R3,#-0x10]
STRD            R2, R3, [R3,#-0xC]
ADD             R3, R3, #0x10
CMP             R3, R0
BNE             loc_1CBDC

loc_1CBF4
SUB             R6, R6, #0xF0000001
LDRB            R0, [R4,#0x2C]
MOV             R3, R6,LSL#4
STR             R1, [R5,R6,LSL#4]
MOVW            R7, #:lower16:aKAllocItems ; "k_alloc_items"
STR             R5, [R4,#0xC]
MOVW            R6, #:lower16:aKlistC ; "klist.c"
MOVW            R8, #:lower16:aListSDataMemor ; "List %s data_memory failed to realloc c"...
MOV             R1, #0
SUB             R2, R3, #0x10
MOVT            R7, #:upper16:aKAllocItems ; "k_alloc_items"
MOVT            R6, #:upper16:aKlistC ; "klist.c"
MOVT            R8, #:upper16:aListSDataMemor ; "List %s data_memory failed to realloc c"...
ADD             R3, R5, R3
CMP             R0, R1
ADD             R2, R5, R2
STR             R2, [R3,#4]
STR             R1, [R3,#8]
STRNE           R3, [R4,#0x10]

loc_1CC40
LDR             R1, [R4,#0x38]
LDR             R0, [R4,#0x3C] ; ptr
ADD             R1, R1, #1
STR             R1, [R4,#0x38]
MOV             R1, R1,LSL#2 ; size
BL              realloc
CMP             R0, #0
STR             R0, [R4,#0x3C]
BEQ             loc_1CCA0

loc_1CC64               ; size
LDR             R1, [R4,#0x14]
MOV             R0, #1  ; nmemb
BL              calloc
CMP             R0, #0
STR             R0, [R5,#0xC]
BEQ             loc_1CCE4

loc_1CC7C
LDR             R3, [R4,#0x38]
LDR             R2, [R4,#0x3C]
SUB             R3, R3, #0xC0000001
STR             R0, [R2,R3,LSL#2]
LDR             R5, [R5,#8]
CMP             R5, #0
BNE             loc_1CC40

loc_1CC98
ADD             SP, SP, #0x820
POP             {R4-R8,PC}

loc_1CCA0
LDR             R2, [R4,#0x38]
MOV             R1, #0x45 ; 'E'
LDR             R3, [R4]
ADD             R0, SP, #0x820+s ; s
STR             R1, [SP,#0x820+var_814]
MOV             R1, #0x800 ; maxlen
STMEA           SP, {R2,R6}
MOV             R2, R8  ; format
STR             R7, [SP,#0x820+var_818]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1CC64

loc_1CCE4
MOV             R1, #0x49 ; 'I'
MOVW            R2, #:lower16:aListSFailedToC ; "List %s failed to calloc item data in %"...
LDR             R3, [R4]
MOVT            R2, #:upper16:aListSFailedToC ; "List %s failed to calloc item data in %"...
STR             R1, [SP,#0x820+var_818]
ADD             R0, SP, #0x820+s ; s
MOV             R1, #0x800 ; maxlen
STR             R7, [SP,#0x820+var_81C]
STR             R6, [SP,#0x820+var_820]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
LDR             R0, [R5,#0xC]
B               loc_1CC7C

loc_1CD2C
LDR             R6, [R4,#0x24]
B               loc_1CB5C

loc_1CD34
LDR             R5, [R4]
MOVW            R0, #:lower16:aKAllocItems ; "k_alloc_items"
MOVW            R12, #:lower16:aKlistC ; "klist.c"
STRD            R2, R3, [SP,#0x820+var_818]
MOVT            R12, #:upper16:aKlistC ; "klist.c"
MOV             LR, #0x13
MOVT            R0, #:upper16:aKAllocItems ; "k_alloc_items"
MOVW            R2, #:lower16:aListSStoreCanT ; "List %s store can't %s() - from %s %s()"...
STR             R1, [SP,#0x820+var_81C]
MOV             R3, R5
STR             R0, [SP,#0x820+var_80C]
MOVT            R2, #:upper16:aListSStoreCanT ; "List %s store can't %s() - from %s %s()"...
STR             R0, [SP,#0x820+var_820]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x820+var_810]
ADD             R0, SP, #0x820+s ; s
STR             LR, [SP,#0x820+var_808]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1CB34

loc_1CD98
LDR             R0, [R4,#0x30]
MOV             R2, #aKAllocItems ; "k_alloc_items"
MOVW            R1, #:lower16:aKlistC ; "klist.c"
LDR             R3, [R4]
MOV             R12, #0x21 ; '!'
STR             R2, [SP,#0x820+var_818]
MOVT            R1, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aListSItemMemor ; "List %s item_memory failed to realloc c"...
STRD            R0, R1, [SP,#0x820+var_820]
STR             R12, [SP,#0x820+var_814]
ADD             R0, SP, #0x820+s ; s
MOVT            R2, #:upper16:aListSItemMemor ; "List %s item_memory failed to realloc c"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1CB80

loc_1CDF0
LDR             R12, [R4,#0x28]
MOVW            R1, #:lower16:aKAllocItems ; "k_alloc_items"
LDR             R0, [R4,#0x18]
MOVW            R2, #:lower16:aKlistC ; "klist.c"
MOVT            R1, #:upper16:aKAllocItems ; "k_alloc_items"
MOVT            R2, #:upper16:aKlistC ; "klist.c"
LDR             R3, [R4]
STR             R1, [SP,#0x820+var_810]
MOV             R1, #0x26 ; '&'
STR             R2, [SP,#0x820+var_814]
MOVW            R2, #:lower16:aListSFailedToC_0 ; "List %s failed to calloc %d new items -"...
STR             R12, [SP,#0x820+var_818]
MOVT            R2, #:upper16:aListSFailedToC_0 ; "List %s failed to calloc %d new items -"...
STR             R0, [SP,#0x820+var_81C]
ADD             R0, SP, #0x820+s ; s
STR             R1, [SP,#0x820+var_80C]
MOV             R1, #0x800 ; maxlen
STR             R6, [SP,#0x820+var_820]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1CB1C



; Attributes: thunk

sub_1CE54
B               loc_1CB94
; End of function sub_1CE54




; _DWORD *__fastcall sub_1CE58(int)
sub_1CE58

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
MOV             R5, R0
SUB             SP, SP, #4
MOV             R1, #0x40 ; '@' ; size
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R4, R0, #0
LDR             R3, [R5]
BEQ             loc_1CEAC

loc_1CE80
LDR             R12, [R5,#8]
MOV             R2, #1
LDRB            R1, [R5,#0x2C]
MOV             R0, R4
STR             R3, [R4]
STR             R12, [R4,#8]
STRB            R1, [R4,#0x2C]
STRB            R2, [R4,#4]
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_1CEAC
LDR             R0, =aKNewStore ; "k_new_store"
MOVW            R1, #:lower16:aKlistC ; "klist.c"
MOV             R12, #0x55 ; 'U'
MOVT            R1, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aFailedToCalloc_0 ; "Failed to calloc store for %s in %s %s("...
STR             R12, [SP,#0x814+var_80C]
STR             R1, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aFailedToCalloc_0 ; "Failed to calloc store for %s in %s %s("...
STR             R0, [SP,#0x814+var_810]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1CE58

LDR             R3, [R5]
B               loc_1CE80
off_1CEFC DCD aKNewStore ; "k_new_store"



; _BYTE *__fastcall sub_1CF00(const char *, int, int, int, char, const char *, const char *, int)
sub_1CF00

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x20
arg_4=  0x24
arg_8=  0x28
arg_C=  0x2C

PUSH            {R4-R10,LR}
SUBS            R8, R2, #0
SUB             SP, SP, #0x810
MOV             R7, R0
MOV             R10, R1
MOV             R6, R3
LDRB            R9, [SP,#0x810+arg_0]
BLE             loc_1CFBC
CMP             R6, #0
BLT             loc_1D014

loc_1CF28               ; size
MOV             R1, #0x40 ; '@'
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R4, R0, #0
BEQ             loc_1D0BC

loc_1CF3C
MOV             R3, #0
MOV             R1, #0x38 ; '8' ; size
STRB            R3, [R4,#4]
MOV             R0, #1  ; nmemb
BL              calloc
CMP             R0, #0
MOV             R5, R0
STR             R0, [R4,#8]
BEQ             loc_1D068

loc_1CF60               ; mutexattr
MOV             R1, #0
MOV             R0, R5  ; mutex
BL              pthread_mutex_init
CMP             R0, #0
BNE             loc_1D15C

loc_1CF74               ; rwlock
ADD             R0, R5, #0x18
MOV             R1, #0  ; attr
BL              pthread_rwlock_init
CMP             R0, #0
BNE             loc_1D10C

loc_1CF88
MOV             R0, R4
STR             R7, [R4]
LDR             R3, [SP,#0x810+arg_C]
STR             R10, [R4,#0x14]
LDR             R2, [SP,#0x810+arg_8]
STR             R8, [R4,#0x24]
LDR             R1, [SP,#0x810+arg_4]
STR             R6, [R4,#0x28]
STRB            R9, [R4,#0x2C]
BL              sub_1CB1C
MOV             R0, R4
ADD             SP, SP, #0x810
POP             {R4-R10,PC}

loc_1CFBC
LDR             R12, =aKNewList ; "_k_new_list"
MOV             R3, #aKlistC ; "klist.c"
MOV             R1, #0x64 ; 'd'
MOVW            R2, #:lower16:aInvalidNewList ; "Invalid new list %s with allocate %d mu"...
STR             R3, [SP,#0x810+var_80C]
STR             R12, [SP,#0x810+var_808]
MOV             R3, R7
MOVT            R2, #:upper16:aInvalidNewList ; "Invalid new list %s with allocate %d mu"...
STR             R1, [SP,#0x810+var_804]
STR             R8, [SP,#0x810+var_810]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x810+s ; s
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
CMP             R6, #0
BGE             loc_1CF28

loc_1D014
LDR             R12, =aKNewList ; "_k_new_list"
MOV             R3, #aKlistC ; "klist.c"
MOV             R1, #0x67 ; 'g'
MOVW            R2, #:lower16:aInvalidNewList_0 ; "Invalid new list %s with limit %d must "...
STR             R3, [SP,#0x810+var_80C]
STR             R12, [SP,#0x810+var_808]
MOV             R3, R7
STR             R1, [SP,#0x810+var_804]
MOVT            R2, #:upper16:aInvalidNewList_0 ; "Invalid new list %s with limit %d must "...
STR             R6, [SP,#0x810+var_810]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1CF28

loc_1D068
LDR             R12, =aKNewList ; "_k_new_list"
MOV             R3, #aKlistC ; "klist.c"
MOV             R1, #0x71 ; 'q'
MOVW            R2, #:lower16:aFailedToCalloc_1 ; "Failed to calloc lock for list %s in %s"...
STR             R3, [SP,#0x810+var_810]
STR             R12, [SP,#0x810+var_80C]
MOV             R3, R7
MOVT            R2, #:upper16:aFailedToCalloc_1 ; "Failed to calloc lock for list %s in %s"...
STR             R1, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
LDR             R5, [R4,#8]
B               loc_1CF60

loc_1D0BC
LDR             R12, =aKNewList ; "_k_new_list"
MOV             R3, #aKlistC ; "klist.c"
MOV             R1, #0x6B ; 'k'
MOVW            R2, #:lower16:aFailedToCalloc_2 ; "Failed to calloc list %s in %s %s():%d"
STR             R3, [SP,#0x810+var_810]
STR             R12, [SP,#0x810+var_80C]
MOV             R3, R7
STR             R1, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aFailedToCalloc_2 ; "Failed to calloc list %s in %s %s():%d"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1CF3C

loc_1D10C
BL              __errno_location
LDR             LR, =aKNewList ; "_k_new_list"
MOVW            R1, #:lower16:aKlistC ; "klist.c"
MOV             R12, #0x73 ; 's'
MOVT            R1, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1CF88

loc_1D15C
BL              __errno_location
LDR             LR, =aKNewList ; "_k_new_list"
MOVW            R1, #:lower16:aKlistC ; "klist.c"
MOV             R12, #0x73 ; 's'
MOVT            R1, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1CF00

B               loc_1CF74
off_1D1AC DCD aKNewList ; "_k_new_list"



; int __fastcall sub_1D1B0(int, const char *, const char *, int)
sub_1D1B0
PUSH            {R4,LR}
MOV             R4, R0
LDR             R12, [R0,#0xC]
CMP             R12, #0
BEQ             loc_1D1FC

loc_1D1C4
LDR             R3, [R12,#8]
CMP             R3, #0
STR             R3, [R4,#0xC]
BEQ             loc_1D214
MOV             R2, #0
STR             R2, [R3,#4]

loc_1D1DC
MOV             R3, #0
MOV             R0, R12
STR             R3, [R12,#8]
STR             R3, [R12,#4]
LDR             R3, [R4,#0x1C]
SUB             R3, R3, #1
STR             R3, [R4,#0x1C]
POP             {R4,PC}

loc_1D1FC
LDRB            R12, [R0,#4]
CMP             R12, #0
BEQ             loc_1D224

loc_1D208
MOV             R12, #0
MOV             R0, R12
POP             {R4,PC}

loc_1D214
LDRB            R2, [R4,#0x2C]
CMP             R2, #0
STRNE           R3, [R4,#0x10]
B               loc_1D1DC

loc_1D224
BL              sub_1CB1C
LDR             R12, [R4,#0xC]
CMP             R12, #0
BNE             loc_1D1C4
B               loc_1D208
; End of function sub_1D1B0




; int __fastcall sub_1D238(int, const char *, const char *, int)
sub_1D238
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_1D1B0
SUBS            R4, R0, #0
BEQ             loc_1D25C
LDR             R2, [R5,#0x14] ; n
MOV             R1, #0  ; c
LDR             R0, [R4,#0xC] ; s
BL              memset

loc_1D25C
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_1D238




; int __fastcall sub_1D264(int, const char *, const char *, int)
sub_1D264

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
MOV             R4, R0
LDRB            R0, [R0,#0x2C]
SUB             SP, SP, #0x820
SUB             SP, SP, #4
CMP             R0, #0
BEQ             loc_1D2C8

loc_1D280
LDR             R0, [R4,#0x10]
CMP             R0, #0
BEQ             loc_1D2BC
LDR             R3, [R0,#4]
CMP             R3, #0
STR             R3, [R4,#0x10]
MOVNE           R2, #0
STREQ           R3, [R4,#0xC]
STRNE           R2, [R3,#8]
MOV             R3, #0
STR             R3, [R0,#8]
STR             R3, [R0,#4]
LDR             R3, [R4,#0x1C]
SUB             R3, R3, #1
STR             R3, [R4,#0x1C]

loc_1D2BC
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_1D2C8
LDR             R5, [R4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKUnlinkTail ; "_k_unlink_tail"
MOV             LR, #0xB5
STRD            R2, R3, [SP,#0x824+var_81C]
MOVT            R0, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R1, [SP,#0x824+var_820]
STR             R0, [SP,#0x824+var_814]
MOV             R3, R5
STR             R12, [SP,#0x824+var_810]
MOVT            R2, #:upper16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R12, [SP,#0x824+var_824]
ADD             R0, SP, #0x824+s ; s
STR             LR, [SP,#0x824+var_80C]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1D264

B               loc_1D280
off_1D328 DCD aKUnlinkTail ; "_k_unlink_tail"



; const char *__fastcall sub_1D32C(int, int, const char *, const char *, int)
sub_1D32C

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x10

PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
LDR             R0, [R1]
SUB             SP, SP, #0x820
LDR             R1, [R4]
CMP             R0, R1
BEQ             loc_1D3AC
LDR             R6, [SP,#0x820+arg_0]
MOVW            R12, #:lower16:aKlistC ; "klist.c"
LDR             LR, =aKAddHead ; "_k_add_head"
MOVT            R12, #:upper16:aKlistC ; "klist.c"
STRD            R2, R3, [SP,#0x820+var_818]
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R6, [SP,#0x820+var_810]
MOV             R6, #0xCD
MOV             R3, R1
STR             R0, [SP,#0x820+var_81C]
STR             R12, [SP,#0x820+var_80C]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             LR, [SP,#0x820+var_808]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R6, [SP,#0x820+var_804]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x820+s
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC

loc_1D3AC
MOV             R3, #0
STR             R3, [R5,#4]
LDR             R3, [R4,#0xC]
STR             R3, [R5,#8]
LDR             R3, [R4,#0xC]
CMP             R3, #0
STRNE           R5, [R3,#4]
LDRB            R3, [R4,#0x2C]
STR             R5, [R4,#0xC]
CMP             R3, #0
BEQ             loc_1D3E4
LDR             R3, [R4,#0x10]
CMP             R3, #0
STREQ           R5, [R4,#0x10]

loc_1D3E4
LDRD            R2, R3, [R4,#0x1C]
ADD             R2, R2, #1
ADD             R3, R3, #1
STRD            R2, R3, [R4,#0x1C]
ADD             SP, SP, #0x820
POP             {R4-R6,PC}
; End of function sub_1D32C

off_1D3FC DCD aKAddHead ; "_k_add_head"



; const char **__fastcall sub_1D400(const char **result, int, const char *, const char *, int)
sub_1D400

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804
arg_0=  0x14

PUSH            {R4-R7,LR}
MOV             R5, R1
MOV             R6, R2
LDR             R1, [R1]
SUB             SP, SP, #0x820
MOV             R4, R0
LDR             R2, [R0]
SUB             SP, SP, #4
MOV             R7, R3
CMP             R1, R2
BEQ             loc_1D490
LDR             R3, [SP,#0x824+arg_0]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKAddTail ; "_k_add_tail"
MOV             LR, #0xEC
MOVT            R0, #:upper16:aKlistC ; "klist.c"
STR             R1, [SP,#0x824+var_820]
STR             R3, [SP,#0x824+var_814]
MOV             R3, R2
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R0, [SP,#0x824+var_810]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R12, [SP,#0x824+var_80C]
STR             R12, [SP,#0x824+var_824]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x824+var_808]
ADD             R0, SP, #0x824+s ; s
STR             R7, [SP,#0x824+var_818]
STR             R6, [SP,#0x824+var_81C]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x824+s
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC

loc_1D490
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
BEQ             loc_1D4E4

loc_1D49C
LDR             R3, [R4,#0x10]
MOV             R2, #0
STR             R2, [R5,#8]
STR             R3, [R5,#4]
LDR             R3, [R4,#0x10]
CMP             R3, R2
STRNE           R5, [R3,#8]
LDR             R3, [R4,#0xC]
STR             R5, [R4,#0x10]
CMP             R3, #0
LDRD            R2, R3, [R4,#0x1C]
STREQ           R5, [R4,#0xC]
ADD             R2, R2, #1
ADD             R3, R3, #1
STRD            R2, R3, [R4,#0x1C]
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_1D4E4
LDR             R2, [SP,#0x824+arg_0]
MOVW            R1, #:lower16:aKlistC ; "klist.c"
LDR             R0, =aKAddTail ; "_k_add_tail"
MOV             R12, #0xF1
LDR             R3, [R4]
MOVT            R1, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x824+var_818]
MOVW            R2, #:lower16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R1, [SP,#0x824+var_814]
MOVT            R2, #:upper16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R0, [SP,#0x824+var_810]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x824+var_824]
ADD             R0, SP, #0x824+s ; s
STR             R12, [SP,#0x824+var_80C]
STR             R7, [SP,#0x824+var_81C]
STR             R6, [SP,#0x824+var_820]
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1D400

B               loc_1D49C
off_1D548 DCD aKAddTail ; "_k_add_tail"



; const char **__fastcall sub_1D54C(const char **result, int, int, const char *, const char *, int)
sub_1D54C

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804
arg_0=  0x14
arg_4=  0x18

PUSH            {R4-R7,LR}
MOV             R6, R1
MOV             R5, R2
LDR             R1, [R1]
SUB             SP, SP, #0x820
MOV             R4, R0
LDR             R2, [R0]
SUB             SP, SP, #4
MOV             R7, R3
CMP             R1, R2
BEQ             loc_1D5E0
LDR             R3, [SP,#0x824+arg_4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKInsertBefore ; "_k_insert_before"
MOVW            LR, #0x106
MOVT            R0, #:upper16:aKlistC ; "klist.c"
STR             R1, [SP,#0x824+var_820]
STR             R3, [SP,#0x824+var_814]
MOV             R1, #0x800 ; maxlen
LDR             R3, [SP,#0x824+arg_0]
STR             R0, [SP,#0x824+var_810]
ADD             R0, SP, #0x824+s ; s
STR             R12, [SP,#0x824+var_80C]
STR             R3, [SP,#0x824+var_818]
MOV             R3, R2
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R12, [SP,#0x824+var_824]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             LR, [SP,#0x824+var_808]
STR             R7, [SP,#0x824+var_81C]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x824+s
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC

loc_1D5E0
CMP             R5, #0
BEQ             loc_1D624

loc_1D5E8
STR             R5, [R6,#8]
LDR             R3, [R5,#4]
STR             R3, [R6,#4]
LDR             R3, [R5,#4]
CMP             R3, #0
STRNE           R6, [R3,#8]
STREQ           R6, [R4,#0xC]
STR             R6, [R5,#4]
LDRD            R2, R3, [R4,#0x1C]
ADD             R2, R2, #1
ADD             R3, R3, #1
STRD            R2, R3, [R4,#0x1C]
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_1D624
LDR             R2, [SP,#0x824+arg_4]
MOVW            R3, #:lower16:aKlistC ; "klist.c"
LDR             LR, [R4]
MOVW            R12, #0x10B
LDR             R0, [SP,#0x824+arg_0]
MOVT            R3, #:upper16:aKlistC ; "klist.c"
LDR             R1, =aKInsertBefore ; "_k_insert_before"
STR             R2, [SP,#0x824+var_818]
MOVW            R2, #:lower16:aSSCanTBeforeAN ; "%s() (%s) can't before a null item - fr"...
STR             R0, [SP,#0x824+var_81C]
MOVT            R2, #:upper16:aSSCanTBeforeAN ; "%s() (%s) can't before a null item - fr"...
STR             R3, [SP,#0x824+var_814]
ADD             R0, SP, #0x824+s ; s
MOV             R3, R1
STR             R1, [SP,#0x824+var_810]
STR             LR, [SP,#0x824+var_824]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x824+var_80C]
STR             R7, [SP,#0x824+var_820]
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1D54C

B               loc_1D5E8
off_1D690 DCD aKInsertBefore ; "_k_insert_before"



; const char **__fastcall sub_1D694(const char **result, int, int, const char *, const char *, int)
sub_1D694

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804
arg_0=  0x14
arg_4=  0x18

PUSH            {R4-R7,LR}
MOV             R6, R1
MOV             R5, R2
LDR             R1, [R1]
SUB             SP, SP, #0x820
MOV             R4, R0
LDR             R2, [R0]
SUB             SP, SP, #4
MOV             R7, R3
CMP             R1, R2
BEQ             loc_1D728
LDR             R3, [SP,#0x824+arg_4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKInsertAfter ; "_k_insert_after"
MOVW            LR, #0x11E
MOVT            R0, #:upper16:aKlistC ; "klist.c"
STR             R1, [SP,#0x824+var_820]
STR             R3, [SP,#0x824+var_814]
MOV             R1, #0x800 ; maxlen
LDR             R3, [SP,#0x824+arg_0]
STR             R0, [SP,#0x824+var_810]
ADD             R0, SP, #0x824+s ; s
STR             R12, [SP,#0x824+var_80C]
STR             R3, [SP,#0x824+var_818]
MOV             R3, R2
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R12, [SP,#0x824+var_824]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             LR, [SP,#0x824+var_808]
STR             R7, [SP,#0x824+var_81C]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x824+s
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC

loc_1D728
CMP             R5, #0
BEQ             loc_1D778

loc_1D730
STR             R5, [R6,#4]
LDR             R3, [R5,#8]
STR             R3, [R6,#8]
LDR             R3, [R5,#8]
CMP             R3, #0
STRNE           R6, [R3,#4]
BNE             loc_1D758
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
STRNE           R6, [R4,#0x10]

loc_1D758
STR             R6, [R5,#8]
LDRD            R2, R3, [R4,#0x1C]
ADD             R2, R2, #1
ADD             R3, R3, #1
STRD            R2, R3, [R4,#0x1C]
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_1D778
LDR             R2, [SP,#0x824+arg_4]
MOVW            R3, #:lower16:aKlistC ; "klist.c"
LDR             LR, [R4]
MOVW            R12, #0x123
LDR             R0, [SP,#0x824+arg_0]
MOVT            R3, #:upper16:aKlistC ; "klist.c"
LDR             R1, =aKInsertAfter ; "_k_insert_after"
STR             R2, [SP,#0x824+var_818]
MOVW            R2, #:lower16:aSSCanTAfterANu ; "%s() (%s) can't after a null item - fro"...
STR             R0, [SP,#0x824+var_81C]
MOVT            R2, #:upper16:aSSCanTAfterANu ; "%s() (%s) can't after a null item - fro"...
STR             R3, [SP,#0x824+var_814]
ADD             R0, SP, #0x824+s ; s
MOV             R3, R1
STR             R1, [SP,#0x824+var_810]
STR             LR, [SP,#0x824+var_824]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x824+var_80C]
STR             R7, [SP,#0x824+var_820]
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1D694

B               loc_1D730
off_1D7E4 DCD aKInsertAfter ; "_k_insert_after"



; const char *__fastcall sub_1D7E8(int, int, const char *, const char *, int)
sub_1D7E8

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x10

PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
LDR             R0, [R1]
SUB             SP, SP, #0x820
LDR             R1, [R5]
CMP             R0, R1
BEQ             loc_1D868
LDR             R6, [SP,#0x820+arg_0]
MOVW            R12, #:lower16:aKlistC ; "klist.c"
LDR             LR, =aKUnlinkItem ; "_k_unlink_item"
MOVT            R12, #:upper16:aKlistC ; "klist.c"
STRD            R2, R3, [SP,#0x820+var_818]
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R6, [SP,#0x820+var_810]
MOV             R6, #0x138
MOV             R3, R1
STR             R0, [SP,#0x820+var_81C]
STR             R12, [SP,#0x820+var_80C]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             LR, [SP,#0x820+var_808]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R6, [SP,#0x820+var_804]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x820+s
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC

loc_1D868
LDRD            R2, R3, [R4,#4]
CMP             R2, #0
STRNE           R3, [R2,#8]
LDRNE           R3, [R4,#8]
CMP             R3, #0
LDRNE           R2, [R4,#4]
STRNE           R2, [R3,#4]
LDR             R3, [R5,#0xC]
CMP             R3, R4
LDREQ           R3, [R4,#8]
STREQ           R3, [R5,#0xC]
LDRB            R3, [R5,#0x2C]
CMP             R3, #0
BEQ             loc_1D8B0
LDR             R3, [R5,#0x10]
CMP             R3, R4
LDREQ           R3, [R4,#4]
STREQ           R3, [R5,#0x10]

loc_1D8B0
MOV             R3, #0
STR             R3, [R4,#8]
STR             R3, [R4,#4]
LDR             R3, [R5,#0x1C]
SUB             R3, R3, #1
STR             R3, [R5,#0x1C]
ADD             SP, SP, #0x820
POP             {R4-R6,PC}
; End of function sub_1D7E8

off_1D8D0 DCD aKUnlinkItem ; "_k_unlink_item"



; const char *__fastcall sub_1D8D4(const char **, int, const char *, const char *, int)
sub_1D8D4

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, R1
LDR             R0, [R0]
SUB             SP, SP, #0x820
MOV             R6, R2
LDR             R1, [R1]
MOV             R7, R3
CMP             R0, R1
BEQ             loc_1D960
LDR             LR, =aKListTransferT ; "_k_list_transfer_to_head"
MOVW            R12, #:lower16:aKlistC ; "klist.c"
LDR             R3, [SP,#0x820+arg_0]
MOVT            R12, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x820+var_818]
MOVW            R8, #0x152
MOVW            R2, #:lower16:aListSCanTSToAS ; "List %s can't %s() to a %s list - from "...
STR             R1, [SP,#0x820+var_81C]
STR             R3, [SP,#0x820+var_810]
MOVT            R2, #:upper16:aListSCanTSToAS ; "List %s can't %s() to a %s list - from "...
MOV             R3, R0
STR             R12, [SP,#0x820+var_80C]
STR             LR, [SP,#0x820+var_808]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R7, [SP,#0x820+var_814]
STR             R8, [SP,#0x820+var_804]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x820+s
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC

loc_1D960
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
BEQ             loc_1D9DC

loc_1D96C
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_1D9D4
LDR             R2, [R5,#0xC]
LDR             R3, [R4,#0x10]
CMP             R2, #0
STRNE           R3, [R2,#4]
STREQ           R3, [R5,#0x10]
MOV             R3, #0
LDRNE           R2, [R5,#0xC]
LDR             R1, [R4,#0x10]
STR             R2, [R1,#8]
LDR             R2, [R4,#0xC]
STR             R2, [R5,#0xC]
STR             R3, [R4,#0x10]
LDR             R1, [R4,#0x1C]
STR             R3, [R4,#0xC]
LDR             R2, [R5,#0x1C]
ADD             R2, R2, R1
STR             R2, [R5,#0x1C]
STR             R3, [R4,#0x1C]
LDR             R1, [R4,#0x20]
LDR             R2, [R5,#0x20]
ADD             R2, R2, R1
STR             R2, [R5,#0x20]
STR             R3, [R4,#0x20]

loc_1D9D4
ADD             SP, SP, #0x820
POP             {R4-R8,PC}

loc_1D9DC
LDR             R2, [SP,#0x820+arg_0]
MOVW            R1, #:lower16:aKlistC ; "klist.c"
LDR             R0, =aKListTransferT ; "_k_list_transfer_to_head"
MOVW            R12, #0x157
LDR             R3, [R4]
MOVT            R1, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x820+var_814]
MOVW            R2, #:lower16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R1, [SP,#0x820+var_810]
MOVT            R2, #:upper16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R0, [SP,#0x820+var_80C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R12, [SP,#0x820+var_808]
STR             R7, [SP,#0x820+var_818]
STR             R6, [SP,#0x820+var_81C]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1D8D4

B               loc_1D96C
off_1DA40 DCD aKListTransferT ; "_k_list_transfer_to_head"



; const char *__fastcall sub_1DA44(const char **, int, const char *, const char *, int)
sub_1DA44

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, R1
LDR             R0, [R0]
SUB             SP, SP, #0x820
MOV             R6, R2
LDR             R1, [R1]
MOV             R7, R3
CMP             R0, R1
BEQ             loc_1DAD0
LDR             LR, =aKListTransferT_0 ; "_k_list_transfer_to_tail"
MOVW            R12, #:lower16:aKlistC ; "klist.c"
LDR             R3, [SP,#0x820+arg_0]
MOVT            R12, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x820+var_818]
MOV             R8, #0x170
MOVW            R2, #:lower16:aListSCanTSToAS ; "List %s can't %s() to a %s list - from "...
STR             R1, [SP,#0x820+var_81C]
STR             R3, [SP,#0x820+var_810]
MOVT            R2, #:upper16:aListSCanTSToAS ; "List %s can't %s() to a %s list - from "...
MOV             R3, R0
STR             R12, [SP,#0x820+var_80C]
STR             LR, [SP,#0x820+var_808]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R7, [SP,#0x820+var_814]
STR             R8, [SP,#0x820+var_804]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x820+s
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC

loc_1DAD0
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
BEQ             loc_1DB48

loc_1DADC
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_1DB40
LDR             R2, [R5,#0x10]
CMP             R2, #0
STRNE           R3, [R2,#8]
STREQ           R3, [R5,#0xC]
MOV             R3, #0
LDRNE           R2, [R5,#0x10]
LDR             R1, [R4,#0xC]
STR             R2, [R1,#4]
LDR             R2, [R4,#0x10]
STR             R2, [R5,#0x10]
STR             R3, [R4,#0x10]
LDR             R1, [R4,#0x1C]
STR             R3, [R4,#0xC]
LDR             R2, [R5,#0x1C]
ADD             R2, R2, R1
STR             R2, [R5,#0x1C]
STR             R3, [R4,#0x1C]
LDR             R1, [R4,#0x20]
LDR             R2, [R5,#0x20]
ADD             R2, R2, R1
STR             R2, [R5,#0x20]
STR             R3, [R4,#0x20]

loc_1DB40
ADD             SP, SP, #0x820
POP             {R4-R8,PC}

loc_1DB48
LDR             R2, [SP,#0x820+arg_0]
MOVW            R1, #:lower16:aKlistC ; "klist.c"
LDR             R0, =aKListTransferT_0 ; "_k_list_transfer_to_tail"
MOVW            R12, #0x175
LDR             R3, [R4]
MOVT            R1, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x820+var_814]
MOVW            R2, #:lower16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R1, [SP,#0x820+var_810]
MOVT            R2, #:upper16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R0, [SP,#0x820+var_80C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R12, [SP,#0x820+var_808]
STR             R7, [SP,#0x820+var_818]
STR             R6, [SP,#0x820+var_81C]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1DA44

B               loc_1DADC
off_1DBAC DCD aKListTransferT_0 ; "_k_list_transfer_to_tail"



; int __fastcall sub_1DBB0(const char **, const char *, const char *, int)
sub_1DBB0

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
MOV             R4, R0
LDRB            R0, [R0,#4]
SUB             SP, SP, #0x820
SUB             SP, SP, #4
CMP             R0, #0
BNE             loc_1DC68

loc_1DBCC
LDR             R3, [R4,#0x30]
CMP             R3, #0
BLE             loc_1DBF8
MOV             R5, #0

loc_1DBDC
LDR             R3, [R4,#0x34]
LDR             R0, [R3,R5,LSL#2] ; ptr
ADD             R5, R5, #1
BL              free
LDR             R3, [R4,#0x30]
CMP             R3, R5
BGT             loc_1DBDC

loc_1DBF8               ; ptr
LDR             R0, [R4,#0x34]
BL              free
LDR             R3, [R4,#0x38]
CMP             R3, #0
BLE             loc_1DC2C
MOV             R5, #0

loc_1DC10
LDR             R3, [R4,#0x3C]
LDR             R0, [R3,R5,LSL#2] ; ptr
ADD             R5, R5, #1
BL              free
LDR             R3, [R4,#0x38]
CMP             R3, R5
BGT             loc_1DC10

loc_1DC2C               ; ptr
LDR             R0, [R4,#0x3C]
BL              free
LDR             R5, [R4,#8]
ADD             R0, R5, #0x18 ; rwlock
BL              pthread_rwlock_destroy
MOV             R0, R5  ; mutex
BL              pthread_mutex_destroy
LDR             R0, [R4,#8] ; ptr
BL              free
MOV             R0, R4  ; ptr
BL              free
MOV             R0, #0
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_1DC68
LDR             R5, [R4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKFreeList ; "_k_free_list"
MOV             LR, #0x190
STRD            R2, R3, [SP,#0x824+var_81C]
MOVT            R0, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aListSCanTSASto ; "List %s can't %s() a store - from %s %s"...
STR             R1, [SP,#0x824+var_820]
STR             R0, [SP,#0x824+var_814]
MOV             R3, R5
STR             R12, [SP,#0x824+var_810]
MOVT            R2, #:upper16:aListSCanTSASto ; "List %s can't %s() a store - from %s %s"...
STR             R12, [SP,#0x824+var_824]
ADD             R0, SP, #0x824+s ; s
STR             LR, [SP,#0x824+var_80C]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1DBB0

B               loc_1DBCC
off_1DCC8 DCD aKFreeList ; "_k_free_list"



; int __fastcall sub_1DCCC(const char **ptr, const char *, const char *, int)
sub_1DCCC

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
MOV             R4, R0
LDRB            R0, [R0,#4]
SUB             SP, SP, #0x820
SUB             SP, SP, #4
CMP             R0, #0
BNE             loc_1DD44
LDR             R5, [R4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKFreeStore ; "_k_free_store"
MOV             LR, #0x1A8
STRD            R2, R3, [SP,#0x824+var_81C]
MOVT            R0, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aStoreSCanTSThe ; "Store %s can't %s() the list - from %s "...
STR             R1, [SP,#0x824+var_820]
STR             R0, [SP,#0x824+var_814]
MOV             R3, R5
STR             R12, [SP,#0x824+var_810]
MOVT            R2, #:upper16:aStoreSCanTSThe ; "Store %s can't %s() the list - from %s "...
STR             R12, [SP,#0x824+var_824]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x824+var_80C]
ADD             R0, SP, #0x824+s ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x824+s
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC

loc_1DD44               ; ptr
MOV             R0, R4
BL              free
MOV             R0, #0
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_1DCCC

off_1DD5C DCD aKFreeStore ; "_k_free_store"



; void __fastcall sub_1DD60(int, const char *, int)
sub_1DD60

var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_54= -0x54
timer= -0x4C
var_48= -0x48
var_44= -0x44
s= -0x40

MOVW            R3, #:lower16:byte_72D90
PUSH            {R4-R8,R10,R11,LR}
MOVT            R3, #:upper16:byte_72D90
SUB             SP, SP, #0x68
MOV             R7, R0
MOV             R6, R1
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1DEE0
ADD             R0, SP, #0x68+var_48
MOV             R8, R2
STR             R3, [SP,#0x68+var_48]
MOVW            R10, #0x4DD3
STR             R3, [SP,#0x68+var_44]
MOVT            R10, #0x1062
BL              sub_206A0
LDR             R3, [SP,#0x68+var_44]
ADD             R0, SP, #0x68+timer ; timer
LDR             R2, [SP,#0x68+var_48]
MOV             R5, #stderr
SMULL           R10, R11, R3, R10
MOV             R3, R3,ASR#31
STR             R2, [SP,#0x68+timer]
RSB             R4, R3, R11,ASR#6
BL              localtime
MOV             R12, R0
ADD             R0, SP, #0x68+s ; s
LDR             R3, [R12,#0x14]
STR             R4, [SP,#0x68+var_54]
LDR             R2, [R12]
ADD             R3, R3, #0x760
ADD             R3, R3, #0xC
STR             R2, [SP,#0x68+var_58]
MOVW            R2, #:lower16:aD02d02d02d02d0 ; " [%d-%02d-%02d %02d:%02d:%02d.%03d] "
LDR             R1, [R12,#4]
MOVT            R2, #:upper16:aD02d02d02d02d0 ; " [%d-%02d-%02d %02d:%02d:%02d.%03d] "
STR             R1, [SP,#0x68+var_5C]
MOV             R1, #0x40 ; '@' ; maxlen
LDR             LR, [R12,#8]
STR             LR, [SP,#0x68+var_60]
LDR             LR, [R12,#0xC]
STR             LR, [SP,#0x68+var_64]
LDR             R12, [R12,#0x10]
ADD             R12, R12, #1
STR             R12, [SP,#0x68+var_68]
BL              snprintf
LDR             R0, [R5] ; stream
BL              fileno
BL              isatty
CMP             R0, #0
BEQ             loc_1DEFC

loc_1DE30
MOV             R4, #byte_685B8
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_1DEA8
LDR             R5, [R4,#(dword_685BC - 0x685B8)]
CMP             R5, #0
BEQ             loc_1DF20

loc_1DE50               ; s
ADD             R0, SP, #0x68+s
BL              strlen
MOV             R3, R5  ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
ADD             R0, SP, #0x68+s ; ptr
BL              fwrite
MOV             R0, R6  ; s
BL              strlen
LDR             R3, [R4,#(dword_685BC - 0x685B8)] ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
MOV             R0, R6  ; ptr
BL              fwrite
MOV             R2, #1  ; n
MOVW            R0, #:lower16:word_4C1E4
MOV             R1, R2  ; size
MOVT            R0, #:upper16:word_4C1E4 ; ptr
LDR             R3, [R4,#(dword_685BC - 0x685B8)] ; s
BL              fwrite
LDR             R0, [R4,#(dword_685BC - 0x685B8)] ; stream
BL              fflush

loc_1DEA8
MOV             R3, #byte_76234
LDRB            R3, [R3]
CMP             R7, #3
MOVEQ           R7, #0
ANDNE           R7, R3, #1
CMP             R7, #0
BNE             loc_1DED8
MOV             R2, R8
MOV             R1, R6
ADD             R0, SP, #0x68+s
BL              sub_1E04C

loc_1DED8
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R8,R10,R11,PC}

loc_1DEE0
MOVW            R1, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R2, R6
ORR             R0, R0, #0x80 ; pri
MOVT            R1, #:upper16:(aReceivedFromPr+0x1C) ; fmt
BL              syslog
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R8,R10,R11,PC}

loc_1DEFC
MOVW            R1, #:lower16:aSS_1 ; "%s%s\n"
MOV             R3, R6
MOVT            R1, #:upper16:aSS_1 ; "%s%s\n"
ADD             R2, SP, #0x68+s
LDR             R0, [R5] ; stream
BL              fprintf
LDR             R0, [R5] ; stream
BL              fflush
B               loc_1DE30

loc_1DF20
ADD             R1, R4, #8
ADD             R0, R4, #0x28 ; '('
BL              fopen64
CMP             R0, #0
MOV             R5, R0
STR             R0, [R4,#(dword_685BC - 0x685B8)]
BEQ             loc_1DEA8
B               loc_1DE50
; End of function sub_1DD60




; int __fastcall sub_1DF40(int)
sub_1DF40

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

PUSH            {R4,LR}
MOV             R4, R0
MOVW            R0, #:lower16:stru_74FE4
SUB             SP, SP, #0x810
MOVT            R0, #:upper16:stru_74FE4 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1DF68
ADD             SP, SP, #0x810
POP             {R4,PC}

loc_1DF68
BL              __errno_location
MOVW            R1, #:lower16:aLoggingC ; "logging.c"
LDR             R3, [R0]
MOVW            R0, #:lower16:aMyLogCurses ; "my_log_curses"
MOVT            R1, #:upper16:aLoggingC ; "logging.c"
MOVT            R0, #:upper16:aMyLogCurses ; "my_log_curses"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0x810+var_80C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x810+var_810]
ADD             R0, SP, #0x810+s ; s
STR             R4, [SP,#0x810+var_808]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1DF40




; void __fastcall sub_1DFB8(int, int, int, int, int, int)
sub_1DFB8
ADD             SP, SP, #0x810
POP             {R4,PC}
; End of function sub_1DFB8




; int sub_1DFC0()
sub_1DFC0

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {LR}
MOVW            R0, #:lower16:stru_74FE4
SUB             SP, SP, #0x810
MOVT            R0, #:upper16:stru_74FE4 ; mutex
SUB             SP, SP, #4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1DFEC
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {PC}

loc_1DFEC
BL              __errno_location
MOVW            R1, #:lower16:aLoggingC ; "logging.c"
LDR             R3, [R0]
MOVW            R0, #:lower16:aMyLogCurses ; "my_log_curses"
MOV             R12, #0x34 ; '4'
MOVT            R0, #:upper16:aMyLogCurses ; "my_log_curses"
MOVT            R1, #:upper16:aLoggingC ; "logging.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R12, [SP,#0x814+var_80C]
STR             R0, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP,#0x814+var_814]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1DFC0




; void __fastcall sub_1E040(int, int, int, int, int)
sub_1E040
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {PC}
; End of function sub_1E040




; int __fastcall sub_1E04C(const char *, const char *, int)
sub_1E04C
CMP             R2, #0
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R6, R1
BNE             loc_1E09C
MOV             R4, #off_67964

loc_1E068
BL              sub_1DFC0
MOVW            R3, #:lower16:asc_4C1D0 ; "                    "
MOVW            R0, #:lower16:(aXDSSS_0+4) ; "%s%s%s"
MOV             R2, R6
MOV             R1, R5
MOVT            R3, #:upper16:asc_4C1D0 ; "                    "
MOVT            R0, #:upper16:(aXDSSS_0+4) ; format
BL              printf
MOV             R0, #0x36 ; '6'
BL              sub_1DF40
LDR             R3, [R4] ; sub_1EAA0
POP             {R4-R6,LR}
BX              R3      ; sub_1EAA0

loc_1E09C
MOVW            R0, #:lower16:stru_74FE4
MOVW            R4, #:lower16:off_67964
MOVT            R0, #:upper16:stru_74FE4 ; mutex
MOVT            R4, #:upper16:off_67964
BL              pthread_mutex_trylock
MOV             R0, #0x29 ; ')'
BL              sub_1DF40
LDR             R3, [R4] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
B               loc_1E068
; End of function sub_1E04C




; void __fastcall sub_1E0C4(int, const char *, int)
sub_1E0C4
MOVW            R3, #:lower16:byte_72D90
PUSH            {R4-R8,LR}
MOVT            R3, #:upper16:byte_72D90
MOV             R5, R1
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1E13C
MOVW            R6, #:lower16:stderr
MOV             R4, R0
MOVT            R6, #:upper16:stderr
MOV             R7, R2
LDR             R0, [R6] ; stream
BL              fileno
BL              isatty
CMP             R0, #0
BEQ             loc_1E154

loc_1E104
MOV             R3, #byte_76234
LDRB            R0, [R3]
CMP             R4, #3
MOVEQ           R0, #0
ANDNE           R0, R0, #1
CMP             R0, #0
POPNE           {R4-R8,PC}
MOVW            R0, #:lower16:(asc_4CF84+4) ; ""
MOV             R2, R7
MOV             R1, R5
MOVT            R0, #:upper16:(asc_4CF84+4) ; ""
POP             {R4-R8,LR}
B               sub_1E04C

loc_1E13C
MOVW            R1, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R2, R5
ORR             R0, R0, #0x80
MOVT            R1, #:upper16:(aReceivedFromPr+0x1C) ; "%s"
POP             {R4-R8,LR}
B               syslog

loc_1E154
MOVW            R1, #:lower16:(aPidofSCommandR+0x1C) ; "%s\n"
MOV             R2, R5
MOVT            R1, #:upper16:(aPidofSCommandR+0x1C) ; format
LDR             R0, [R6] ; stream
BL              fprintf
LDR             R0, [R6] ; stream
BL              fflush
B               loc_1E104
; End of function sub_1E0C4

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R6, R0
MOV             R7, R1
MOV             R0, #1
MOV             R1, #0x20 ; ' '
MOVW            R5, #:lower16:aDupalloc ; "dupalloc"
BL              calloc
SUBS            R4, R0, #0
MOVT            R5, #:upper16:aDupalloc ; "dupalloc"
BEQ             loc_1E1FC

loc_1E1A4
MOVW            R3, #:lower16:aNoncedupC ; "noncedup.c"
MOV             R2, #0x27 ; '''
MOVT            R3, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R1, #1
MOVW            R0, #:lower16:aNonces ; "Nonces"
STR             R7, [R4]
MOVT            R0, #:upper16:aNonces ; "Nonces"
STR             R3, [SP,#4]
STR             R2, [SP,#0xC]
MOV             R3, #0
MOV             R2, #0x400
STR             R1, [SP]
STR             R5, [SP,#8]
MOV             R1, #0x10
BL              sub_1CF00
STR             R0, [R4,#4]
BL              sub_1CE58
STR             R4, [R6,#0x18]
STR             R0, [R4,#8]
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_1E1FC
MOV             R1, #0x24 ; '$'
MOVW            R3, #:lower16:aNoncedupC ; "noncedup.c"
MOVW            R2, #:lower16:aFailedToCalloc_3 ; "Failed to calloc dupdata in %s %s():%d"
STR             R1, [SP,#4]
MOVT            R3, #:upper16:aNoncedupC ; "noncedup.c"
STR             R5, [SP]
ADD             R0, SP, #0x10
MOVT            R2, #:upper16:aFailedToCalloc_3 ; "Failed to calloc dupdata in %s %s():%d"
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x10
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1E1A4



; __int64 __fastcall sub_1E240(int, _QWORD *, _QWORD *)
sub_1E240
LDR             R3, [R0,#0x18]
MOV             R12, R1
CMP             R3, #0
BEQ             loc_1E264
LDRD            R0, R1, [R3,#0x10]
STRD            R0, R1, [R12]
LDRD            R0, R1, [R3,#0x18]
STRD            R0, R1, [R2]
BX              LR

loc_1E264
MOV             R0, #0
MOV             R1, #0
STRD            R0, R1, [R12]
STRD            R0, R1, [R2]
BX              LR
; End of function sub_1E240

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x820
LDR             R4, [R0,#0x18]
SUB             SP, SP, #4
CMP             R4, #0
MOVEQ           R6, R4
BEQ             loc_1E504
STR             R0, [SP,#0x10]
ADD             R0, SP, #0x18
MOV             R9, R2
MOV             R8, R1
BL              sub_206A0
LDR             R3, [R4,#0x10]
LDR             R2, [R4,#0x14]
LDR             R1, [R4,#4]
ADDS            R3, R3, #1
ADC             R2, R2, #0
STR             R3, [R4,#0x10]
STR             R2, [R4,#0x14]
LDR             R5, [R1,#8]
MOV             R0, R5
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1E524

loc_1E2D8
ADD             R0, R5, #0x18
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_1E578

loc_1E2E8
LDR             R3, [R4,#8]
MOVW            R11, #:lower16:byte_72D90
MOVW            R10, #:lower16:aSDDuplicateNon ; "%s%d: Duplicate nonce %08x"
MOVW            R2, #:lower16:byte_686E0
MOVT            R11, #:upper16:byte_72D90
MOVT            R10, #:upper16:aSDDuplicateNon ; "%s%d: Duplicate nonce %08x"
LDR             R5, [R3,#0x10]
MOV             R7, #1
MOVT            R2, #:upper16:byte_686E0
STR             R2, [SP,#0x14]

loc_1E310
CMP             R5, #0
MOVEQ           R6, #0
ANDNE           R6, R7, #1
CMP             R6, #0
BEQ             loc_1E3B4
LDR             R3, [R5,#0xC]
MOV             R7, R6
LDR             R2, [R8,#0x154]
LDR             R1, [R3]
CMP             R1, R2
BEQ             loc_1E344

loc_1E33C
LDR             R5, [R5,#4]
B               loc_1E310

loc_1E344
LDR             R3, [R3,#4]
CMP             R3, R9
BNE             loc_1E33C
LDRB            R3, [R11]
MOV             R2, R10
MOV             R1, #0x800
ADD             R0, SP, #0x20 ; ' '
CMP             R3, #0
BNE             loc_1E380
LDR             R12, [SP,#0x14]
MOV             R3, #dword_67840
LDRB            R7, [R12]
CMP             R7, #0
BEQ             loc_1E514

loc_1E380
LDR             R12, [SP,#0x10]
MOV             R7, #0
LDR             R3, [R12,#4]
LDR             R12, [R12,#8]
LDR             R3, [R3,#8]
STR             R9, [SP,#4]
STR             R12, [SP]
BL              snprintf
MOV             R2, R7
ADD             R1, SP, #0x20 ; ' '
MOV             R0, #4
BL              sub_1DD60
B               loc_1E310

loc_1E3B4
CMP             R7, #0
BEQ             loc_1E420
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
MOV             R3, #0x51 ; 'Q'
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
LDR             R2, =aIsdupnonce ; "isdupnonce"
LDR             R0, [R4,#4]
BL              sub_1D1B0
LDR             R1, [R8,#0x154]
ADD             LR, SP, #0x18
LDR             R3, [R0,#0xC]
MOV             R12, R0
MOV             R8, #0x55 ; 'U'
MOV             R2, #aNoncedupC ; "noncedup.c"
STR             R1, [R3]
LDR             R1, [R0,#0xC]
LDR             R3, =aIsdupnonce ; "isdupnonce"
STR             R9, [R1,#4]
LDR             R5, [R0,#0xC]
LDM             LR!, {R0,R1}
STR             R1, [R5,#0xC]
MOV             R1, R12
STR             R0, [R5,#8]
LDR             R0, [R4,#8]
STR             R8, [SP]
BL              sub_1D32C

loc_1E420
LDR             R3, [R4,#8]
LDR             R3, [R3,#0x10]
CMP             R3, #0
BEQ             loc_1E4A8
MOVW            R5, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R8, =aIsdupnonce ; "isdupnonce"
MOVT            R5, #:upper16:aNoncedupC ; "noncedup.c"
B               loc_1E478

loc_1E440
LDR             R0, [R4,#8]
BL              sub_1D264
LDR             R12, [R4,#4]
MOV             R3, #0x5A ; 'Z'
MOV             R1, R0
STR             R3, [SP]
MOV             R2, R5
MOV             R3, R8
MOV             R0, R12
BL              sub_1D32C
LDR             R3, [R4,#8]
LDR             R3, [R3,#0x10]
CMP             R3, #0
BEQ             loc_1E4A8

loc_1E478
LDR             R0, [R3,#0xC]
ADD             R1, SP, #0x18
ADD             R0, R0, #8
BL              sub_209CC
VLDR            S15, [R4]
MOV             R3, #0x59 ; 'Y'
MOV             R2, R8
MOV             R1, R5
VCVT.F64.S32    D7, S15
VCMPE.F64       D0, D7
VMRS            APSR_nzcv, FPSCR
BGT             loc_1E440

loc_1E4A8
LDR             R3, [R4,#4]
LDR             R5, [R3,#8]
ADD             R0, R5, #0x18
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1E620

loc_1E4C0
MOV             R0, R5
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1E5CC

loc_1E4D0
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R7, #0
BNE             loc_1E504
LDR             R3, [R4,#0x18]
MOV             R6, #1
LDR             R2, [R4,#0x1C]
ADDS            R3, R3, R6
ADC             R2, R2, #0
STR             R3, [R4,#0x18]
STR             R2, [R4,#0x1C]

loc_1E504
MOV             R0, R6
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_1E514
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_1E310
B               loc_1E380

loc_1E524
BL              __errno_location
LDR             R12, =aIsdupnonce ; "isdupnonce"
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R0, #0x46 ; 'F'
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R12, [SP,#4]
MOV             R1, #0x800
STR             R0, [SP,#8]
ADD             R0, SP, #0x20 ; ' '
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x20 ; ' '
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1E2D8

loc_1E578
BL              __errno_location
LDR             R12, =aIsdupnonce ; "isdupnonce"
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R0, #0x46 ; 'F'
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R12, [SP,#4]
MOV             R1, #0x800
STR             R0, [SP,#8]
ADD             R0, SP, #0x20 ; ' '
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x20 ; ' '
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1E2E8

loc_1E5CC
BL              __errno_location
LDR             R12, =aIsdupnonce ; "isdupnonce"
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R0, #0x5D ; ']'
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#4]
MOV             R1, #0x800
STR             R0, [SP,#8]
ADD             R0, SP, #0x20 ; ' '
BL              snprintf
ADD             R1, SP, #0x20 ; ' '
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1E4D0

loc_1E620
BL              __errno_location
LDR             R12, =aIsdupnonce ; "isdupnonce"
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R0, #0x5D ; ']'
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#4]
MOV             R1, #0x800
STR             R0, [SP,#8]
ADD             R0, SP, #0x20 ; ' '
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x20 ; ' '
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_1E4C0
off_1E674 DCD aIsdupnonce ; "isdupnonce"



; int __fastcall sub_1E678(int result, unsigned __int8 *, int)
sub_1E678

var_168= -0x168
var_164= -0x164
var_160= -0x160
var_15C= -0x15C
var_158= -0x158
var_154= -0x154
var_150= -0x150
var_14C= -0x14C
var_148= -0x148
var_144= -0x144
var_140= -0x140
var_13C= -0x13C
var_138= -0x138
var_134= -0x134
var_130= -0x130
var_12C= -0x12C
var_128= -0x128
var_EC= -0xEC
var_68= -0x68

CMP             R2, #0
BXLE            LR
MOVW            R3, #:lower16:dword_67844
PUSH            {R4-R11,LR}
MOVT            R3, #:upper16:dword_67844
SUB             SP, SP, #0x144
ADD             R2, R1, R2,LSL#6
STR             R3, [SP,#0x168+var_168]
ADD             R3, R0, #0x88
STR             R3, [SP,#0x168+var_150]
ADD             R3, R0, #0xA8
STR             R1, [SP,#0x168+var_164]
STR             R2, [SP,#0x168+var_154]
STR             R3, [SP,#0x168+var_14C]

loc_1E6B0
LDR             R0, [SP,#0x168+var_164]
ADD             LR, SP, #0x168+var_12C
ADD             R12, SP, #0x168+var_128

loc_1E6BC
LDRB            R3, [R0,#1]
LDRB            R4, [R0,#2]
LDRB            R1, [R0,#3]
LDRB            R2, [R0],#4
MOV             R3, R3,LSL#16
ORR             R3, R3, R4,LSL#8
ORR             R3, R3, R1
ORR             R3, R3, R2,LSL#24
STR             R3, [LR,#4]!
ADD             R3, SP, #0x168+var_EC
CMP             R3, LR
BNE             loc_1E6BC

loc_1E6EC
LDR             LR, [R12,#0x38]
MOV             R3, R12
LDR             R0, [R12,#4]!
ADD             R2, SP, #0x168+var_68
LDR             R1, [R3,#0x24]
LDR             R4, [R3]
MOV             R3, LR,ROR#19
CMP             R2, R12
MOV             R2, R0,ROR#18
EOR             R3, R3, LR,ROR#17
ADD             R1, R1, R4
EOR             R2, R2, R0,ROR#7
EOR             R3, R3, LR,LSR#10
EOR             R2, R2, R0,LSR#3
ADD             R3, R3, R1
ADD             R3, R3, R2
STR             R3, [R12,#0x3C]
BNE             loc_1E6EC
LDR             R0, [SP,#0x168+var_14C]
ADD             R3, SP, #0x168+var_14C
LDR             R2, [SP,#0x168+var_150]
STR             R3, [SP,#0x168+var_15C]
STR             R2, [SP,#0x168+var_158]

loc_1E748
LDR             R1, [R2],#4
CMP             R0, R2
STR             R1, [R3,#4]!
BNE             loc_1E748
STR             R2, [SP,#0x168+var_160]
MOV             R6, #0
LDR             R3, [SP,#0x168+var_12C]
LDR             R4, [SP,#0x168+var_138]
LDR             R10, [SP,#0x168+var_134]
LDR             R9, [SP,#0x168+var_130]
LDR             R5, [SP,#0x168+var_148]
LDR             R8, [SP,#0x168+var_144]
LDR             R7, [SP,#0x168+var_140]
LDR             R11, [SP,#0x168+var_13C]
B               loc_1E79C

loc_1E784
MOV             R7, R8
MOV             R9, R10
MOV             R8, R5
MOV             R10, R4
MOV             R5, R1
MOV             R4, LR

loc_1E79C
MOV             R0, R4,ROR#11
AND             R12, R10, R4
BIC             R2, R9, R4
MOV             R1, R5,ROR#13
EOR             R0, R0, R4,ROR#6
EOR             R2, R2, R12
ADD             R12, SP, #0x168+var_128
EOR             R1, R1, R5,ROR#2
EOR             R0, R0, R4,ROR#25
LDR             LR, [R12,R6,LSL#2]
EOR             R1, R1, R5,ROR#22
ADD             R2, R0, R2
LDR             R0, [SP,#0x168+var_168]
ADD             R2, R2, LR
LDR             R12, [R0,R6,LSL#2]
EOR             R0, R7, R8
ADD             R6, R6, #1
AND             R0, R0, R5
CMP             R6, #0x40 ; '@'
ADD             R2, R2, R12
AND             R12, R7, R8
EOR             R0, R0, R12
ADD             R3, R2, R3
ADD             R1, R1, R0
ADD             LR, R11, R3
ADD             R1, R1, R3
MOV             R11, R7
MOV             R3, R9
BNE             loc_1E784
STR             R1, [SP,#0x168+var_148]
LDR             R12, [SP,#0x168+var_160]
LDR             R1, [SP,#0x168+var_15C]
LDR             R3, [SP,#0x168+var_158]
STR             R9, [SP,#0x168+var_12C]
STR             LR, [SP,#0x168+var_138]
STR             R4, [SP,#0x168+var_134]
STR             R10, [SP,#0x168+var_130]
STR             R5, [SP,#0x168+var_144]
STR             R8, [SP,#0x168+var_140]
STR             R7, [SP,#0x168+var_13C]

loc_1E83C
LDR             R0, [R3]
LDR             R2, [R1,#4]!
ADD             R2, R2, R0
STR             R2, [R3],#4
CMP             R12, R3
BNE             loc_1E83C
LDR             R3, [SP,#0x168+var_164]
LDR             R2, [SP,#0x168+var_154]
ADD             R3, R3, #0x40 ; '@'
CMP             R2, R3
STR             R3, [SP,#0x168+var_164]
BNE             loc_1E6B0
ADD             SP, SP, #0x144
POP             {R4-R11,PC}
; End of function sub_1E678




; _DWORD *__fastcall sub_1E874(_DWORD *result)
sub_1E874
LDR             R2, =unk_67940
ADD             R3, R0, #0x88
ADD             R12, R0, #0xA8

loc_1E880
LDR             R1, [R2,#4]!
STR             R1, [R3],#4
CMP             R3, R12
BNE             loc_1E880
MOV             R3, #0
STR             R3, [R0,#4]
STR             R3, [R0]
BX              LR
; End of function sub_1E874

off_1E8A0 DCD unk_67940



; void *__fastcall sub_1E8A4(unsigned __int8 *, char *, size_t n)
sub_1E8A4
PUSH            {R4-R10,LR}
MOV             R4, R0
LDR             R0, [R0,#4]
MOV             R5, R2
MOV             R7, R1
RSB             R2, R0, #0x40 ; '@'
ADD             R0, R0, #8
CMP             R2, R5
ADD             R0, R4, R0 ; dest
MOVCC           R6, R2
MOVCS           R6, R5
MOV             R2, R6  ; n
BL              memcpy
LDR             R3, [R4,#4]
ADD             R3, R5, R3
CMP             R3, #0x3F ; '?'
BHI             loc_1E8F0
STR             R3, [R4,#4]
POP             {R4-R10,PC}

loc_1E8F0
SUB             R5, R5, R6
ADD             R9, R4, #8
ADD             R6, R7, R6
MOV             R7, R5,LSR#6
MOV             R1, R9
MOV             R2, #1
MOV             R0, R4
BL              sub_1E678
AND             R8, R5, #0x3F ; '?'
MOV             R2, R7
MOV             R1, R6
MOV             R0, R4
BIC             R5, R5, #0x3F ; '?'
ADD             R7, R7, #1
BL              sub_1E678
MOV             R0, R9  ; dest
ADD             R1, R6, R5 ; src
MOV             R2, R8  ; n
BL              memcpy
LDR             R3, [R4]
STR             R8, [R4,#4]
ADD             R7, R3, R7,LSL#6
STR             R7, [R4]
POP             {R4-R10,PC}
; End of function sub_1E8A4




; int __fastcall sub_1E950(_DWORD *, _BYTE *)
sub_1E950

var_8= -8

PUSH            {R4-R11,LR}
MOV             R6, R0
LDR             R3, [R0,#4]
MOV             R5, R0
SUB             SP, SP, #0xC
MOV             R4, R1
LDR             R7, [R6],#8
MOV             R1, #0  ; c
AND             R2, R3, #0x3F ; '?'
CMP             R2, #0x38 ; '8'
MOVCC           R2, #0x40 ; '@'
MOVCS           R2, #0x80
ADD             R7, R3, R7
SUB             R2, R2, R3 ; n
ADD             R0, R6, R3 ; s
MOVCC           R3, #0x3C ; '<'
MOVCS           R3, #0x7C ; '|'
MOV             R7, R7,LSL#3
MOVCC           R8, #0x3D ; '='
STR             R3, [SP,#0xC+var_8]
MOVCS           R8, #0x7D ; '}'
MOVCC           R9, #0x3E ; '>'
MOVCS           R9, #0x7E ; '~'
MOVCC           R10, #0x3F ; '?'
MOVCS           R10, #0x7F
MOVCC           R11, #1
MOVCS           R11, #2
BL              memset
LDR             R1, [R5,#4]
MOV             LR, R7,LSR#8
MOV             R12, R7,LSR#16
MOV             R0, #0xFFFFFF80
MOV             R3, R7,LSR#24
MOV             R2, R11
ADD             R1, R5, R1
STRB            R0, [R1,#8]
MOV             R0, R5
STRB            R7, [R6,R10]
MOV             R1, R6
STRB            LR, [R6,R9]
STRB            R12, [R6,R8]
LDR             R12, [SP,#0xC+var_8]
STRB            R3, [R6,R12]
BL              sub_1E678
ADD             R3, R5, #0x88
ADD             R5, R5, #0xA8

loc_1EA08
LDR             R2, [R3]
STRB            R2, [R4,#3]
LDR             R2, [R3],#4
CMP             R5, R3
MOV             R2, R2,LSR#8
STRB            R2, [R4,#2]
LDRH            R2, [R3,#-2]
STRB            R2, [R4,#1]
LDRB            R2, [R3,#-1]
STRB            R2, [R4],#4
BNE             loc_1EA08
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_1E950




; int __fastcall sub_1EA3C(char *, size_t n, _BYTE *)
sub_1EA3C

var_A8= -0xA8
var_24= -0x24
var_4= -4

LDR             R3, =unk_67940
PUSH            {R4,R5,LR}
SUB             SP, SP, #0xAC
MOV             R5, R2
ADD             R2, SP, #0xAC+var_24
ADD             LR, R3, #0x20 ; ' '

loc_1EA54
LDR             R12, [R3,#4]!
CMP             R3, LR
STR             R12, [R2],#4
BNE             loc_1EA54
MOV             R3, #0
ADD             R4, SP, #0xAC+var_4
STR             R3, [R4,#-0xA8]!
MOV             R2, R1  ; n
MOV             R1, R0  ; int
MOV             R0, R4  ; int
STR             R3, [SP,#0xAC+var_A8]
BL              sub_1E8A4
MOV             R1, R5
MOV             R0, R4
BL              sub_1E950
ADD             SP, SP, #0xAC
POP             {R4,R5,PC}
; End of function sub_1EA3C

off_1EA98 DCD unk_67940
ALIGN 0x10



; int sub_1EAA0()
sub_1EAA0
MOV             R0, #0
BX              LR
; End of function sub_1EAA0




; int __fastcall sub_1EAA8(int, const char *, int)
sub_1EAA8

timeout= -0x82C
var_820= -0x820
s= -0x81C
n= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
writefds= -0x804
var_C= -0xC

MOVW            R3, #:lower16:byte_72EC8
PUSH            {R4-R11,LR}
MOVT            R3, #:upper16:byte_72EC8
SUB             SP, SP, #0x820
SUB             SP, SP, #0xC
MOV             R11, R0
LDRB            R3, [R3]
MOV             R4, R2
STR             R1, [SP,#0x82C+s]
LDR             R8, [R0,#0x24C]
CMP             R3, #0
BEQ             loc_1EAEC
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1EC8C

loc_1EAEC
LDR             R5, [SP,#0x82C+s]
ADD             R3, R4, #1
MOV             R4, R3
STR             R3, [SP,#0x82C+n]
MOV             R0, R5  ; s
BL              strlen
MOVW            R3, #:lower16:word_4C1E4
CMP             R4, #0
MOVT            R3, #:upper16:word_4C1E4
LDRH            R3, [R3]
STRH            R3, [R5,R0]
BLE             loc_1ED2C
CMP             R8, #0
ADD             R3, R8, #0x1F
MOVGE           R3, R8
RSBS            R2, R8, #0
AND             R2, R2, #0x1F
AND             R9, R8, #0x1F
MOV             R3, R3,ASR#5
RSBPL           R9, R2, #0
MOV             R2, #1
ADD             R6, SP, #0x82C+writefds
MOV             R9, R2,LSL R9
MOV             R3, R3,LSL#2
ADD             R8, R8, R2
ADD             R5, R6, #0x7C ; '|'
STR             R2, [SP,#0x82C+var_814]
ADD             R10, SP, #0x82C+var_80C
MOV             R4, #0
STR             R3, [SP,#0x82C+var_810]
STR             R4, [SP,#0x82C+var_820]

loc_1EB68
LDR             R2, [SP,#0x82C+var_810]
ADD             R3, SP, #0x82C+var_C
ADD             R3, R3, #8
STR             R4, [SP,#0x82C+var_80C.tv_usec]
ADD             R7, R3, R2
LDR             R3, [SP,#0x82C+var_814]
STR             R3, [SP,#0x82C+var_80C]

loc_1EB84
SUB             R3, R6, #4

loc_1EB88
STR             R4, [R3,#4]!
CMP             R5, R3
BNE             loc_1EB88
LDR             R12, [R7,#-0x800]
MOV             R3, #0  ; exceptfds
STR             R10, [SP,#0x82C+timeout] ; timeout
MOV             R1, R3  ; readfds
MOV             R2, R6  ; writefds
MOV             R0, R8  ; nfds
ORR             R12, R12, R9
STR             R12, [R7,#-0x800]
BL              select
CMP             R0, #0
BGT             loc_1EBE0
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_1EB84
MOV             R0, #1

loc_1EBD4
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_1EBE0
LDRB            R3, [R11,#0x250]
LDR             R2, [SP,#0x82C+s]
LDR             R1, [SP,#0x82C+var_820]
CMP             R3, #0
ADD             R1, R2, R1 ; buf
BEQ             loc_1ECE4
LDR             R2, [SP,#0x82C+n]
LDR             R0, [R11,#0x254]
BL              SSL_write
CMP             R0, #0
BLT             loc_1ECFC

loc_1EC0C
LDR             R3, [SP,#0x82C+n]
LDR             R2, [SP,#0x82C+var_820]
SUB             R3, R3, R0
CMP             R3, #0
ADD             R2, R2, R0
STR             R3, [SP,#0x82C+n]
STR             R2, [SP,#0x82C+var_820]
BGT             loc_1EB68
LDR             R2, [SP,#0x82C+var_820]
MOV             R3, R2,ASR#31

loc_1EC34
LDR             R1, [R11,#0x1F0]
MOV             R0, #0
LDR             LR, [R11,#0x1F4]
LDR             R12, [R11,#0x1F8]
ADDS            R1, R1, #1
LDR             R4, [R11,#0x1FC]
ADC             LR, LR, R0
STR             R1, [R11,#0x1F0]
LDR             R1, [R11,#0x200]
ADDS            R12, R12, R2
STR             LR, [R11,#0x1F4]
ADC             R4, R4, R3
LDR             LR, [R11,#0x204]
ADDS            R1, R1, R2
STR             R12, [R11,#0x1F8]
STR             R4, [R11,#0x1FC]
ADC             R3, LR, R3
STR             R1, [R11,#0x200]
STR             R3, [R11,#0x204]
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_1EC8C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1ECB4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1ED14

loc_1ECB4
ADD             R6, SP, #0x82C+writefds
MOVW            R2, #:lower16:aSendS ; "SEND: %s"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:aSendS ; "SEND: %s"
LDR             R3, [SP,#0x82C+s]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_1EAEC

loc_1ECE4               ; flags
MOV             R3, #0x4000
LDR             R2, [SP,#0x82C+n] ; n
LDR             R0, [R11,#0x24C] ; fd
BL              send
CMP             R0, #0
BGE             loc_1EC0C

loc_1ECFC
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #0xB
BEQ             loc_1EB68
MOV             R0, #2
B               loc_1EBD4

loc_1ED14
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1EAEC
B               loc_1ECB4

loc_1ED2C
MOV             R2, #0
MOV             R3, #0
B               loc_1EC34
; End of function sub_1EAA8




; int __fastcall sub_1ED38(const char **, int, int)
sub_1ED38

var_C10= -0xC10
var_C0C= -0xC0C
var_C08= -0xC08
s= -0xC00
var_BFF= -0xBFF
var_BFE= -0xBFE
var_BFD= -0xBFD
buf= -0x800
var_s0=  0

CMP             R2, #0
PUSH            {R4-R10,LR}
MOV             R8, R0
SUB             SP, SP, #0xC10
MOV             R6, R1
ADD             R4, SP, #0xC10+s
LDR             R0, [R0,#0x268]
LDR             R1, [R8,#0x248]
BEQ             loc_1EF5C
MOVW            R2, #:lower16:aConnectSSHttp1 ; "CONNECT %s:%s HTTP/1.0\r\n\r\n"
STR             R1, [SP,#0xC10+var_C10]
MOV             R3, R0
MOVT            R2, #:upper16:aConnectSSHttp1 ; "CONNECT %s:%s HTTP/1.0\r\n\r\n"
MOV             R0, R4  ; s
MOV             R1, #0x400 ; maxlen
BL              snprintf

loc_1ED78
MOV             R9, #byte_686E1
LDRB            R3, [R9]
CMP             R3, #0
BEQ             loc_1EDEC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1EDB4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1F138

loc_1EDB4
LDR             R1, [R8,#0x270]
ADD             R5, SP, #0xC10+buf
MOVW            R2, #:lower16:aSendingProxySS ; "Sending proxy %s:%s - %s"
LDR             R3, [R8,#0x26C]
MOVT            R2, #:upper16:aSendingProxySS ; "Sending proxy %s:%s - %s"
STR             R4, [SP,#0xC10+var_C0C]
STR             R1, [SP,#0xC10+var_C10]
MOV             R0, R5  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_1EDEC               ; s
MOV             R0, R4
BL              strlen
MOV             R3, #0  ; flags
MOV             R2, R0  ; n
MOV             R1, R4  ; buf
MOV             R0, R6  ; fd
BL              send
MOV             R3, #0  ; flags
MOV             R2, #0xC ; n
MOV             R1, R4  ; buf
MOV             R0, R6  ; fd
BL              recv
CMP             R0, #0
BLE             loc_1F0AC
LDRB            R3, [R9]
ADD             R2, SP, #0xC10+var_s0
ADD             R0, R2, R0
MOV             R2, #0
STRB            R2, [R0,#-0xC00]
CMP             R3, R2
BEQ             loc_1EEA0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, R2
BNE             loc_1EE68
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R2
BEQ             loc_1F150

loc_1EE68
LDR             R1, [R8,#0x270]
ADD             R5, SP, #0xC10+buf
MOVW            R2, #:lower16:aReceivedFromPr ; "Received from proxy %s:%s - %s"
LDR             R3, [R8,#0x26C]
MOVT            R2, #:upper16:aReceivedFromPr ; "Received from proxy %s:%s - %s"
STR             R4, [SP,#0xC10+var_C0C]
STR             R1, [SP,#0xC10+var_C10]
MOV             R0, R5  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_1EEA0
MOVW            R1, #:lower16:aHttp11200 ; "HTTP/1.1 200"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aHttp11200 ; "HTTP/1.1 200"
BL              strcmp
SUBS            R7, R0, #0
BNE             loc_1EF84

loc_1EEB8
ADD             R5, SP, #0xC10+buf

loc_1EEBC               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R5  ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_1F09C
LDRB            R3, [SP,#0xC10+buf]
CMP             R3, #0xFF
STRB            R3, [R4,R7]
ADD             R7, R7, #1
BEQ             loc_1F020
CMP             R7, #4
BNE             loc_1EEBC
MOV             R7, #asc_4CF84 ; "\r\n\r\n"

loc_1EEFC               ; n
MOV             R2, #4
MOV             R1, R7  ; s2
MOV             R0, R4  ; s1
BL              strncmp
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
CMP             R0, R3
MOV             R1, R5  ; buf
MOV             R0, R6  ; fd
BEQ             loc_1F168
LDRB            R10, [SP,#0xC10+var_BFF]
LDRB            LR, [SP,#0xC10+var_BFE]
LDRB            R12, [SP,#0xC10+var_BFD]
STRB            R10, [SP,#0xC10+s]
STRB            LR, [SP,#0xC10+var_BFF]
STRB            R12, [SP,#0xC10+var_BFE]
BL              recv
CMN             R0, #1
BEQ             loc_1F01C
LDRB            R3, [SP,#0xC10+buf]
CMP             R3, #0xFF
STRB            R3, [SP,#0xC10+var_BFD]
BNE             loc_1EEFC
B               loc_1F020

loc_1EF5C
MOVW            R2, #:lower16:aConnectSSHttp1_0 ; "CONNECT %s:%s HTTP/1.1\r\nHost: %s:%s\r"...
STR             R1, [SP,#0xC10+var_C08]
MOV             R3, R0
STR             R0, [SP,#0xC10+var_C0C]
STR             R1, [SP,#0xC10+var_C10]
MOV             R0, R4  ; s
MOVT            R2, #:upper16:aConnectSSHttp1_0 ; "CONNECT %s:%s HTTP/1.1\r\nHost: %s:%s\r"...
MOV             R1, #0x400 ; maxlen
BL              snprintf
B               loc_1ED78

loc_1EF84
MOVW            R1, #:lower16:aHttp10200 ; "HTTP/1.0 200"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aHttp10200 ; "HTTP/1.0 200"
BL              strcmp
SUBS            R7, R0, #0
BEQ             loc_1EEB8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1EFD8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1EFD8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_1F0E8

loc_1EFD8
LDR             R1, [R8,#0x270]
MOVW            R2, #:lower16:aHttpErrorFromP ; "HTTP Error from proxy %s:%s - %s"
LDR             R3, [R8,#0x26C]
ADD             R0, SP, #0xC10+buf ; s
STR             R4, [SP,#0xC10+var_C0C]
MOVT            R2, #:upper16:aHttpErrorFromP ; "HTTP Error from proxy %s:%s - %s"
STR             R1, [SP,#0xC10+var_C10]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0xC10+buf
MOV             R4, R2
MOV             R0, #4
BL              sub_1DD60
MOV             R0, R4
ADD             SP, SP, #0xC10
POP             {R4-R10,PC}

loc_1F01C
STRB            R0, [SP,#0xC10+var_BFD]

loc_1F020
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F05C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F05C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_1F0E8

loc_1F05C
LDR             R12, [R8,#0x270]
MOVW            R2, #:lower16:aCouldnTReadHtt ; "Couldn't read HTTP byte from proxy %s:%"...
LDR             R3, [R8,#0x26C]
MOVT            R2, #:upper16:aCouldnTReadHtt ; "Couldn't read HTTP byte from proxy %s:%"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STR             R12, [SP,#0xC10+var_C10]
MOV             R4, #0
BL              snprintf
MOV             R1, R5
MOV             R2, R4
MOV             R0, #4
BL              sub_1DD60

loc_1F090
MOV             R0, R4
ADD             SP, SP, #0xC10
POP             {R4-R10,PC}

loc_1F09C
ADD             R3, SP, #0xC10+var_s0
ADD             R7, R3, R7
STRB            R0, [R7,#-0xC00]
B               loc_1F020

loc_1F0AC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F0F8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F0F8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_1F0F8

loc_1F0E8
MOV             R4, #0
MOV             R0, R4
ADD             SP, SP, #0xC10
POP             {R4-R10,PC}

loc_1F0F8
LDR             R12, [R8,#0x270]
MOVW            R2, #:lower16:aCouldnTReadFro ; "Couldn't read from proxy %s:%s after se"...
LDR             R3, [R8,#0x26C]
MOV             R4, #0
ADD             R0, SP, #0xC10+buf ; s
MOVT            R2, #:upper16:aCouldnTReadFro ; "Couldn't read from proxy %s:%s after se"...
STR             R12, [SP,#0xC10+var_C10]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0xC10+buf
MOV             R2, R4
MOV             R0, #4
BL              sub_1DD60
MOV             R0, R4
ADD             SP, SP, #0xC10
POP             {R4-R10,PC}

loc_1F138
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1EDEC
B               loc_1EDB4

loc_1F150
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1EEA0
B               loc_1EE68

loc_1F168
LDRB            R4, [R9]
CMP             R4, #0
MOVEQ           R4, #1
BEQ             loc_1F090
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F1A0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1F1D4

loc_1F1A0
LDR             R12, [R8,#0x270]
MOVW            R2, #:lower16:aSuccessNegotia ; "Success negotiating with %s:%s HTTP pro"...
LDR             R3, [R8,#0x26C]
MOVT            R2, #:upper16:aSuccessNegotia ; "Success negotiating with %s:%s HTTP pro"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STR             R12, [SP,#0xC10+var_C10]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_1F090

loc_1F1D4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_1F1A0
B               loc_1F090
; End of function sub_1ED38




; int __fastcall sub_1F1EC(int)
sub_1F1EC
PUSH            {R4,LR}
MOV             R4, R0
LDR             R3, [R0,#0x260]
CMP             R3, #0
MOVNE           R2, #0
STRBNE          R2, [R3]
MOV             R3, #0
LDR             R0, [R0,#0x24C] ; fd
STRB            R3, [R4,#0x293]
STRB            R3, [R4,#0x291]
CMP             R0, R3
BEQ             loc_1F22C
LDRB            R3, [R4,#0x250]
CMP             R3, #0
BNE             loc_1F238

loc_1F228
BL              close

loc_1F22C
MOV             R3, #0
STR             R3, [R4,#0x24C]
POP             {R4,PC}

loc_1F238
LDR             R3, [R4,#0x254]
CMP             R3, #0
BEQ             loc_1F228
MOV             R0, R3
BL              SSL_shutdown
LDR             R0, [R4,#0x25C]
BL              X509_free
LDR             R0, [R4,#0x258]
BL              SSL_CTX_free
LDR             R0, [R4,#0x254]
BL              SSL_free
LDR             R0, [R4,#0x24C]
B               loc_1F228
; End of function sub_1F1EC




; int __fastcall sub_1F26C(int)
sub_1F26C
PUSH            {R4,LR}
MOV             R2, #0
MOV             R4, R0
MOV             R1, #3  ; cmd
BL              fcntl
MOV             R1, #4  ; cmd
BIC             R2, R0, #0x800
MOV             R0, R4  ; fd
POP             {R4,LR}
B               fcntl
; End of function sub_1F26C




; bool __fastcall sub_1F294(int, int)
sub_1F294

timeout= -0x90
var_88= -0x88
readfds= -0x80
var_s0=  0

PUSH            {R4,LR}
BIC             R1, R1, R1,ASR#31
SUB             SP, SP, #0x90
ADD             R3, SP, #0x90+var_88.tv_usec
ADD             R12, SP, #0x90+readfds.__fds_bits+0x7C
MOV             R2, #0

loc_1F2AC
STR             R2, [R3,#4]!
CMP             R12, R3
BNE             loc_1F2AC
CMP             R0, #0
ADD             R12, R0, #0x1F
MOVGE           R12, R0
STR             R2, [SP,#0x90+var_88.tv_usec]
MOV             R12, R12,ASR#5
ADD             R2, SP, #0x90+var_s0
RSBS            R3, R0, #0
STR             R1, [SP,#0x90+var_88]
ADD             R12, R2, R12,LSL#2
AND             R3, R3, #0x1F
AND             R4, R0, #0x1F
LDR             LR, [R12,#-0x80]
RSBPL           R4, R3, #0
MOV             R2, #1
ADD             R3, SP, #0x90+var_88
STR             R3, [SP,#0x90+timeout] ; timeout
MOV             R3, #0  ; exceptfds
ADD             R0, R0, R2 ; nfds
ADD             R1, SP, #0x90+readfds ; readfds
ORR             LR, LR, R2,LSL R4
MOV             R2, R3  ; writefds
STR             LR, [R12,#-0x80]
BL              select
CMP             R0, #0
MOVLE           R0, #0
MOVGT           R0, #1
ADD             SP, SP, #0x90
POP             {R4,PC}
; End of function sub_1F294




; _DWORD *__fastcall sub_1F328(_DWORD *, unsigned int)
sub_1F328
SUBS            R3, R0, #0
BEQ             loc_1F384
LDR             R2, [R3]
CMP             R2, #1
BNE             loc_1F384
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R3
BL              sub_48E60
CMP             R0, R5
BCC             loc_1F37C
MOV             R1, R5
MOV             R0, R4
BL              sub_48E7C
SUBS            R3, R0, #0
BEQ             loc_1F37C
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_1F37C
POP             {R4-R6,LR}
B               sub_49028

loc_1F37C
MOV             R0, #0
POP             {R4-R6,PC}

loc_1F384
MOV             R0, #0
BX              LR
; End of function sub_1F328




; char *__fastcall sub_1F38C(_DWORD *, unsigned int)
sub_1F38C
PUSH            {R4,LR}
BL              sub_1F328
CMP             R0, #0
POPEQ           {R4,PC}
POP             {R4,LR}
B               __strdup
; End of function sub_1F38C



; Attributes: noreturn

; void __fastcall __noreturn sub_1F3A4(const void *, const char *, const char *, int)
sub_1F3A4

var_814= -0x814
var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R6, R2
MOV             R7, R3
MOV             R4, R0
BL              __errno_location
MOVW            R2, #:lower16:aFailedToSemPos ; "Failed to sem_post errno=%d cgsem=0x%p "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToSemPos ; "Failed to sem_post errno=%d cgsem=0x%p "...
STR             R7, [SP,#0x814+var_808]
STR             R6, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
STRD            R4, R5, [SP,#0x814+var_814]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1F3A4




; void __fastcall sub_1F400(int, int, int, int, int, int, int, int, int)
sub_1F400
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}
; End of function sub_1F400




; int __fastcall sub_1F40C(const char *, const char *, int)
sub_1F40C

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

PUSH            {R4-R6,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0x810
MOV             R6, R1
MOV             R5, R2
BEQ             loc_1F4F8
BL              strlen
CMP             R0, #0
BEQ             loc_1F4EC
LDRB            R3, [R4]
MOV             LR, #dword_4C28C
LDR             R2, [LR,R3,LSL#2]
CMP             R2, #0
MOVGE           R2, R4
SUBGE           R3, R2, #1
ADDGE           R0, R3, R0
BLT             loc_1F46C

loc_1F454
CMP             R2, R0
BEQ             loc_1F4EC
LDRB            R3, [R2,#1]!
LDR             R12, [LR,R3,LSL#2]
CMP             R12, #0
BGE             loc_1F454

loc_1F46C
MOV             R2, #byte_72D90
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_1F4A8
MOV             R2, #byte_686E0
LDRB            R0, [R2]
CMP             R0, #0
BNE             loc_1F4A8
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #2
BLE             loc_1F4E4

loc_1F4A8
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aInvalidChar0xX ; "Invalid char 0x%x passed to valid_hex f"...
MOVT            R1, #:upper16:aUtilC ; "util.c"
STR             R5, [SP,#0x810+var_808]
STR             R1, [SP,#0x810+var_810]
ADD             R0, SP, #0x810+s ; s
STR             R6, [SP,#0x810+var_80C]
MOVT            R2, #:upper16:aInvalidChar0xX ; "Invalid char 0x%x passed to valid_hex f"...
MOV             R1, #0x800 ; maxlen
BL              snprintf

loc_1F4D0
MOV             R0, #3
ADD             R1, SP, #0x810+s
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0

loc_1F4E4
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_1F4EC
MOV             R0, #1
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_1F4F8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F534
MOV             R3, #byte_686E0
LDRB            R0, [R3]
CMP             R0, #0
BNE             loc_1F534
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1F4E4

loc_1F534
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aNullStringPass ; "Null string passed to valid_hex from in"...
STR             R5, [SP,#0x810+var_80C]
ADD             R0, SP, #0x810+s ; s
STR             R6, [SP,#0x810+var_810]
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVT            R2, #:upper16:aNullStringPass ; "Null string passed to valid_hex from in"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
B               loc_1F4D0
; End of function sub_1F40C




; int __fastcall sub_1F55C(pthread_rwlock_t *, const char *, int)
sub_1F55C

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R1
MOV             R5, R2
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_1F588
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_1F588
BL              __errno_location
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP,#0x814+var_814]
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1F55C




; void __fastcall sub_1F5CC(int, int, int, int, int, int, int)
sub_1F5CC
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_1F5CC




; int __fastcall sub_1F5D8(pthread_rwlock_t *, const char *, int)
sub_1F5D8

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R1
MOV             R5, R2
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1F604
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_1F604
BL              __errno_location
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x814+var_814]
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1F5D8




; void __fastcall sub_1F648(int, int, int, int, int, int, int)
sub_1F648
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_1F648




; int __fastcall sub_1F654(pthread_mutex_t *, const char *, int)
sub_1F654

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R1
MOV             R5, R2
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1F680
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_1F680
BL              __errno_location
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x814+var_814]
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1F654




; void __fastcall sub_1F6C4(int, int, int, int, int, int, int)
sub_1F6C4
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_1F6C4



; Attributes: noreturn

; void __fastcall __noreturn sub_1F6D0(const char *, int)
sub_1F6D0

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1F6D0




; void __fastcall sub_1F728(int, int, int, int, int, int, int)
sub_1F728
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_1F728




; int __fastcall sub_1F734(int)
sub_1F734
PUSH            {R4-R6,LR}
ADD             R5, R0, #0x2D0
MOV             R4, R0
MOV             R0, R5  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BEQ             loc_1F764
B               loc_1F7B0

loc_1F754               ; buf
LDR             R1, [R4,#0x260]
BL              recv
CMP             R0, #0
BLE             loc_1F77C

loc_1F764
LDR             R1, [R4,#0x24C]
MOV             R3, #0  ; flags
MOVW            R2, #0x1FFC ; n
CMP             R1, R3
MOV             R0, R1  ; fd
BNE             loc_1F754

loc_1F77C
MOVW            R2, #0x705
MOV             R0, R5
LDR             R1, =aClearSock ; "clear_sock"
BL              sub_1F654
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [R4,#0x260]
CMP             R3, #0
MOVNE           R2, #0
STRBNE          R2, [R3]
POP             {R4-R6,PC}

loc_1F7B0
MOVW            R1, #0x6FC
LDR             R0, =aClearSock ; "clear_sock"
BL              sub_1F6D0
; End of function sub_1F734

B               loc_1F764
off_1F7C0 DCD aClearSock ; "clear_sock"



; int __fastcall sub_1F7C4(int, char)
sub_1F7C4
PUSH            {R4-R6,LR}
ADD             R5, R0, #0xC
MOV             R4, R0
MOV             R0, R5  ; mutex
MOV             R6, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1F814

loc_1F7E4
STRB            R6, [R4,#8]
ADD             R0, R4, #0x28 ; '(' ; cond
BL              pthread_cond_signal
MOV             R0, R5
MOVW            R2, #0x455
LDR             R1, =aTqFreezethaw ; "tq_freezethaw"
BL              sub_1F654
MOVW            R3, #:lower16:off_67964
POP             {R4-R6,LR}
MOVT            R3, #:upper16:off_67964
LDR             R3, [R3] ; sub_1EAA0
BX              R3      ; sub_1EAA0

loc_1F814
MOVW            R1, #0x452
LDR             R0, =aTqFreezethaw ; "tq_freezethaw"
BL              sub_1F6D0
; End of function sub_1F7C4

B               loc_1F7E4
off_1F824 DCD aTqFreezethaw ; "tq_freezethaw"



; void *__fastcall sub_1F828(size_t, const char *, const char *, int)
sub_1F828

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

TST             R0, #3
PUSH            {R4-R8,LR}
MOV             R4, R0
BICNE           R4, R0, #3
ADDNE           R4, R4, #4
SUB             SP, SP, #0x810
MOV             R0, R4  ; size
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              malloc
SUBS            R5, R0, #0
BEQ             loc_1F868
MOV             R0, R5
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_1F868
MOVW            R2, #:lower16:aFailedToMalloc ; "Failed to malloc size %d from %s %s:%d"
MOV             R3, R4
STR             R8, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
STR             R7, [SP,#0x810+var_80C]
MOVT            R2, #:upper16:aFailedToMalloc ; "Failed to malloc size %d from %s %s:%d"
STR             R6, [SP,#0x810+var_810]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1F828




; void __fastcall sub_1F8A4(int, int, int, int, int, int, int, int, int, int)
sub_1F8A4
MOV             R0, R5
ADD             SP, SP, #0x810
POP             {R4-R8,PC}
; End of function sub_1F8A4




; void *__fastcall sub_1F8B0(size_t, size_t, const char *, const char *, int)
sub_1F8B0

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x18

TST             R1, #3
PUSH            {R4-R8,LR}
MOV             R4, R1
BICNE           R4, R1, #3
ADDNE           R4, R4, #4
SUB             SP, SP, #0x810
MOV             R1, R4  ; size
MOV             R5, R0
MOV             R7, R2
MOV             R8, R3
BL              calloc
SUBS            R6, R0, #0
BEQ             loc_1F8F0
MOV             R0, R6
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_1F8F0
LDR             R3, [SP,#0x810+arg_0]
MOVW            R2, #:lower16:aFailedToCalloc_4 ; "Failed to calloc memb %d size %d from %"...
STR             R8, [SP,#0x810+var_808]
MOVT            R2, #:upper16:aFailedToCalloc_4 ; "Failed to calloc memb %d size %d from %"...
STR             R7, [SP,#0x810+var_80C]
ADD             R0, SP, #0x810+s ; s
STR             R3, [SP,#0x810+var_804]
MOV             R1, #0x800 ; maxlen
MOV             R3, R5
STR             R4, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1F8B0




; void __fastcall sub_1F934(int, int, int, int, int, int, int, int, int, int)
sub_1F934
MOV             R0, R6
ADD             SP, SP, #0x810
POP             {R4-R8,PC}
; End of function sub_1F934




; void *__fastcall sub_1F940(void *, size_t, const char *, const char *, int)
sub_1F940

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804
arg_0=  0x14

TST             R1, #3
PUSH            {R4-R7,LR}
MOV             R4, R1
BICNE           R4, R1, #3
ADDNE           R4, R4, #4
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R1, R4  ; size
MOV             R6, R2
MOV             R7, R3
BL              realloc
SUBS            R5, R0, #0
BEQ             loc_1F984
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_1F984
LDR             R3, [SP,#0x814+arg_0]
MOVW            R2, #:lower16:aFailedToReallo ; "Failed to realloc size %d from %s %s:%d"
STR             R7, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
STR             R6, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aFailedToReallo ; "Failed to realloc size %d from %s %s:%d"
STR             R3, [SP,#0x814+var_80C]
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_1F940




; void __fastcall sub_1F9C4(int, int, int, int, int, int, int, int, int)
sub_1F9C4
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}
; End of function sub_1F9C4




; char *__fastcall sub_1F9D4(char *)
sub_1F9D4
SUBS            R1, R0, #0
BEQ             loc_1FA10
LDR             R3, =off_4C6A8 ; "http:"
MOV             R0, #aHttp0 ; "http0:"

loc_1F9E8
ADD             R3, R3, #8
LDR             R2, [R3,#4]
CMP             R2, R1
BXEQ            LR
LDR             R0, [R3,#8]
CMP             R0, #0
BNE             loc_1F9E8
MOV             R0, #(aPoolUSlowDownO+0x28) ; "invalid"
BX              LR

loc_1FA10
MOV             R0, #aHttp ; "http:"
BX              LR
; End of function sub_1F9D4

off_1FA1C DCD off_4C6A8 ; "http:"



; _BYTE *__fastcall sub_1FA20(_BYTE *result, int, int)
sub_1FA20
CMP             R2, #0
BLE             loc_1FA84
PUSH            {R4,LR}
ADD             R4, R1, R2
MOVW            LR, #:lower16:dword_4C28C
SUB             R4, R4, #1
SUB             R1, R1, #1
MOVT            LR, #:upper16:dword_4C28C
ADD             R12, R0, #2

loc_1FA44
LDRB            R3, [R1,#1]!
ADD             R12, R12, #2
CMP             R1, R4
ADD             R3, LR, R3,LSR#4
LDRB            R3, [R3,#0x454]
STRB            R3, [R12,#-4]
LDRB            R3, [R1]
AND             R3, R3, #0xF
ADD             R3, LR, R3
LDRB            R3, [R3,#0x454]
STRB            R3, [R12,#-3]
BNE             loc_1FA44
ADD             R0, R0, R2,LSL#1
MOV             R3, #0
STRB            R3, [R0]
POP             {R4,PC}

loc_1FA84
MOV             R3, #0
STRB            R3, [R0]
BX              LR
; End of function sub_1FA20




; _BYTE *__fastcall sub_1FA90(int, int)
sub_1FA90

var_8= -8

PUSH            {R4-R6,LR}
MOV             R5, R1,LSL#1
MOV             R4, R0
ADD             R0, R5, #1
MOV             R6, R1
RSBS            R1, R0, #0
AND             R12, R0, #3
AND             R1, R1, #3
SUB             SP, SP, #8
RSBPL           R12, R1, #0
MOVW            R3, #0x313
RSB             R12, R12, #4
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#8+var_8]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aBin2hex ; "bin2hex"
MOV             R1, #1
ADD             R0, R12, R0
BL              sub_1F8B0
CMP             R6, #0
MOVLE           R5, R0
BLE             loc_1FB30
SUB             R2, R4, #1
MOVW            LR, #:lower16:dword_4C28C
ADD             R1, R2, R6
MOVT            LR, #:upper16:dword_4C28C
ADD             R12, R0, #2

loc_1FAFC
LDRB            R3, [R2,#1]!
ADD             R12, R12, #2
CMP             R2, R1
ADD             R3, LR, R3,LSR#4
LDRB            R3, [R3,#0x454]
STRB            R3, [R12,#-4]
LDRB            R3, [R2]
AND             R3, R3, #0xF
ADD             R3, LR, R3
LDRB            R3, [R3,#0x454]
STRB            R3, [R12,#-3]
BNE             loc_1FAFC
ADD             R5, R0, R5

loc_1FB30
MOV             R3, #0
STRB            R3, [R5]
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_1FA90

off_1FB40 DCD aBin2hex  ; "bin2hex"



; int __fastcall sub_1FB44(_BYTE *, unsigned __int8 *, int)
sub_1FB44

var_804= -0x804

PUSH            {R4,R5,LR}
MOV             R5, R0
LDRB            R0, [R1]
SUB             SP, SP, #0x800
SUB             SP, SP, #4
CMP             R0, #0
BEQ             loc_1FCC8
CMP             R2, #0
BEQ             loc_1FCE0
LDRB            R3, [R1,#1]
CMP             R3, #0
BEQ             loc_1FC4C
MOV             LR, #dword_4C28C
LDR             R3, [LR,R3,LSL#2]
LDR             R12, [LR,R0,LSL#2]
MOV             R0, R3,LSR#31
ORRS            R0, R0, R12,LSR#31
ADDEQ           R1, R1, #4
BNE             loc_1FBD4

loc_1FB94
ORR             R3, R3, R12,LSL#4
SUB             R2, R2, #1
STRB            R3, [R5],#1
LDRB            R3, [R1,#-2]
CMP             R3, #0
BEQ             loc_1FCC8
CMP             R2, #0
BEQ             loc_1FC40
LDRB            R4, [R1,#-1]
ADD             R1, R1, #2
CMP             R4, #0
BEQ             loc_1FC4C
LDR             R12, [LR,R3,LSL#2]
LDR             R3, [LR,R4,LSL#2]
ORRS            R4, R12, R3
BPL             loc_1FB94

loc_1FBD4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1FC10
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1FC10
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1FCB8

loc_1FC10
MOVW            R12, #:lower16:aHex2binScanFai ; "hex2bin scan failed"
MOV             LR, SP
MOVT            R12, #:upper16:aHex2binScanFai ; "hex2bin scan failed"
LDM             R12!, {R0-R3} ; "hex2bin scan failed"
LDR             R12, [R12] ; "led"
STM             LR!, {R0-R3}
MOV             R0, #3
MOV             R1, SP
MOV             R2, #0
STR             R12, [LR]
BL              sub_1DD60
MOV             R0, #0

loc_1FC40
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_1FC4C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1FC88
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1FC88
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1FCB8

loc_1FC88
MOVW            R12, #:lower16:aHex2binStrTrun ; "hex2bin str truncated"
MOV             LR, SP
MOVT            R12, #:upper16:aHex2binStrTrun ; "hex2bin str truncated"
LDM             R12!, {R0-R3} ; "hex2bin str truncated"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "cated"
STR             R0, [LR],#4
MOV             R0, #3
STRH            R1, [LR]
MOV             R1, SP
BL              sub_1DD60

loc_1FCB8
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_1FCC8
CMP             R2, #0
MOVEQ           R0, #1
BNE             loc_1FCB8
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_1FCE0
MOV             R0, R2
B               loc_1FC40
; End of function sub_1FB44




; size_t __fastcall sub_1FCE8(_BYTE *, char *s)
sub_1FCE8

var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4-R8,LR}
MOV             R4, #0
SUB             SP, SP, #0x20
MOV             R5, R0
MOV             R0, R1  ; s
MOV             R7, R1
STR             R4, [SP,#0x20+var_18]
STR             R4, [SP,#0x20+var_1C]
STR             R4, [SP,#0x20+var_14]
STR             R4, [SP,#0x20+var_10]
STR             R4, [SP,#0x20+var_C]
STR             R4, [SP,#0x20+var_8]
STR             R4, [SP,#0x20+var_4]
BL              strlen
CMP             R0, #0
MOVEQ           R1, R0
BEQ             loc_1FD94
SUB             R7, R7, #1
MOVW            R8, #:lower16:dword_4C28C
MOV             R12, R4
ADD             R6, R7, R0
MOVT            R8, #:upper16:dword_4C28C
MOV             R4, SP
MOV             LR, #0x3A ; ':'

loc_1FD48
LDRB            R3, [R7,#1]!
ADD             R2, SP, #0x20+var_4
ADD             R3, R8, R3,LSL#2
LDR             R3, [R3,#0x46C]
B               loc_1FD60

loc_1FD5C
LDR             R12, [R2]

loc_1FD60
MOV             R0, R3
MOV             R1, #0
UMLAL           R0, R1, LR, R12
STR             R0, [R2],#-4
CMP             R4, R2
MOV             R3, R1
BNE             loc_1FD5C
CMP             R6, R7
LDRNE           R12, [SP,#0x20+var_4]
BNE             loc_1FD48
LDR             R0, [SP,#0x20+var_18]
LDRB            R1, [SP,#0x20+var_1C]
REV             R0, R0

loc_1FD94
ADD             R3, R5, #1
ADD             R2, SP, #0x20+var_18
STRB            R1, [R5],#0x19
B               loc_1FDAC

loc_1FDA4
LDR             R0, [R2,#4]!
REV             R0, R0

loc_1FDAC
STR             R0, [R3],#4
CMP             R3, R5
BNE             loc_1FDA4
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R8,PC}
; End of function sub_1FCE8




; int __fastcall sub_1FDC0(int, int)
sub_1FDC0
CMP             R1, #0x7F
MOV             R3, R0
MOVLE           R2, #1
MOVLE           R0, #2
BLE             loc_1FE00
MOVW            R2, #0x407F
CMP             R1, R2
MOVLE           R0, #3
MOVLE           R2, #2
BLE             loc_1FE00
MOVT            R2, #0x20 ; ' '
CMP             R1, R2
MOVGT           R0, #5
MOVLE           R0, #4
MOVGT           R2, #4
MOVLE           R2, #3

loc_1FE00
STR             R1, [R3,#1]
STRB            R2, [R3]
BX              LR
; End of function sub_1FDC0




; int __fastcall sub_1FE0C(unsigned int *, unsigned int *)
sub_1FE0C

var_84C= -0x84C
var_848= -0x848
var_844= -0x844
var_840= -0x840
var_83C= -0x83C
var_838= -0x838
var_834= -0x834
var_830= -0x830
var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x840
SUB             SP, SP, #0xC
ADD             R3, R0, #0x20 ; ' '
ADD             R2, R1, #0x20 ; ' '

loc_1FE20
LDR             LR, [R3,#-4]!
LDR             R12, [R2,#-4]!
CMP             LR, R12
BHI             loc_1FFDC
BCC             loc_1FE3C
CMP             R0, R3
BNE             loc_1FE20

loc_1FE3C
MOV             R5, #1

loc_1FE40
MOV             R4, #byte_686E1
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_1FE64
MOV             R0, R5
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_1FE64
LDR             R6, [R0,#0x18]
MOV             R3, R0
LDR             R7, [R0,#0x1C]
MOV             R2, R1
LDR             LR, [R3,#0x14]
MOV             R1, #0x20 ; ' '
LDR             R12, [R3,#0x10]
REV             R6, R6
STR             R6, [SP,#0x84C+var_840]
REV             R7, R7
LDR             R6, [R3,#8]
REV             LR, LR
REV             R12, R12
STR             R7, [SP,#0x84C+var_844]
STR             LR, [SP,#0x84C+var_83C]
ADD             R0, SP, #0x84C+var_844
LDR             R7, [R3,#0xC]
STR             R12, [SP,#0x84C+var_838]
LDM             R3, {R12,LR}
REV             R3, R6
STR             R3, [SP,#0x84C+var_830]
REV             R7, R7
LDR             R3, [R2,#0x1C]
REV             LR, LR
REV             R12, R12
STR             LR, [SP,#0x84C+var_82C]
REV             R3, R3
LDR             LR, [R2,#0x18]
STR             R12, [SP,#0x84C+var_828]
STR             R3, [SP,#0x84C+var_824]
LDR             R12, [R2,#0x14]
REV             LR, LR
LDR             R3, [R2,#0x10]
LDR             R6, [R2,#0xC]
REV             R12, R12
STR             LR, [SP,#0x84C+var_820]
REV             R3, R3
LDR             LR, [R2,#8]
STR             R12, [SP,#0x84C+var_81C]
REV             R6, R6
STR             R3, [SP,#0x84C+var_818]
LDM             R2, {R3,R12}
REV             LR, LR
STR             R7, [SP,#0x84C+var_834]
STR             R6, [SP,#0x84C+var_814]
REV             R3, R3
REV             R2, R12
STRD            R2, R3, [SP,#0x84C+var_80C]
STR             LR, [SP,#0x84C+var_810]
BL              sub_1FA90
MOV             R1, #0x20 ; ' '
MOV             R7, R0
ADD             R0, SP, #0x84C+var_824
BL              sub_1FA90
LDRB            R3, [R4]
MOV             R6, R0
CMP             R3, #0
BEQ             loc_1FFBC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1FF74
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1FFE4

loc_1FF74
MOVW            R2, #:lower16:aNoFalsePositiv ; "no (false positive; hash > target)"
CMP             R5, #0
MOVT            R2, #:upper16:aNoFalsePositiv ; "no (false positive; hash > target)"
MOV             R3, #aYesHashTarget ; "YES (hash <= target)"
MOVEQ           R3, R2
MOVW            R2, #:lower16:aProofSTargetST ; " Proof: %s\nTarget: %s\nTrgVal? %s"
STR             R3, [SP,#0x84C+var_848]
MOVT            R2, #:upper16:aProofSTargetST ; " Proof: %s\nTarget: %s\nTrgVal? %s"
MOV             R1, #0x800 ; maxlen
STR             R6, [SP,#0x84C+var_84C]
ADD             R0, SP, #0x84C+s ; s
MOV             R3, R7
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_1FFBC               ; ptr
MOV             R0, R7
BL              free
MOV             R0, R6  ; ptr
BL              free
MOV             R0, R5
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_1FFDC
MOV             R5, #0
B               loc_1FE40

loc_1FFE4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1FFBC
B               loc_1FF74
; End of function sub_1FE0C




; char *sub_1FFFC()
sub_1FFFC

var_8= -8

PUSH            {R4,LR}
MOVW            R3, #0x433
SUB             SP, SP, #8
MOV             R2, #aUtilC ; "util.c"
MOV             R1, #0x58 ; 'X'
STR             R3, [SP,#8+var_8]
MOV             R0, #1
LDR             R3, =aTqNew ; "tq_new"
BL              sub_1F8B0
MOV             R4, R0
MOV             R1, #0  ; mutexattr
STR             R0, [R4]
ADD             R0, R0, #0xC ; mutex
STR             R4, [R4,#4]
BL              pthread_mutex_init
ADD             R0, R4, #0x28 ; '(' ; cond
MOV             R1, #0  ; cond_attr
BL              pthread_cond_init
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_1FFFC

off_20054 DCD aTqNew    ; "tq_new"



; void __fastcall sub_20058(char *)
sub_20058
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
POPEQ           {R4-R6,PC}
LDR             R0, [R5]
LDR             R2, [R0]
CMP             R5, R0
SUB             R0, R0, #4 ; ptr
SUB             R4, R2, #4
BEQ             loc_200A4

loc_2007C
LDR             R3, [R0,#8]
STR             R3, [R2,#4]
STR             R2, [R3]
BL              free
MOV             R3, R4
MOV             R0, R4
LDR             R2, [R3,#4]!
CMP             R3, R5
SUB             R4, R2, #4
BNE             loc_2007C

loc_200A4               ; cond
ADD             R0, R5, #0x28 ; '('
BL              pthread_cond_destroy
ADD             R0, R5, #0xC ; mutex
BL              pthread_mutex_destroy
MOV             R0, R5
POP             {R4-R6,LR}
B               free
; End of function sub_20058




; int __fastcall sub_200C0(int)
sub_200C0
MOV             R1, #1
B               sub_1F7C4
; End of function sub_200C0




; int __fastcall sub_200C8(int)
sub_200C8
MOV             R1, #0
B               sub_1F7C4
; End of function sub_200C8




; int __fastcall sub_200D0(int, int)
sub_200D0

var_8= -8

PUSH            {R4-R8,LR}
MOVW            R3, #0x467
SUB             SP, SP, #8
MOVW            R2, #:lower16:aUtilC ; "util.c"
MOV             R5, R0
MOV             R8, R1
STR             R3, [SP,#8+var_8]
MOV             R1, #0xC
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aTqPush ; "tq_push"
MOV             R0, #1
ADD             R7, R5, R1
BL              sub_1F8B0
MOV             R6, R0
MOV             R0, R7  ; mutex
MOV             R4, R6
STR             R8, [R4],#4
STR             R4, [R6,#4]
STR             R4, [R6,#8]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_20190

loc_20128
LDRB            R3, [R5,#8]
CMP             R3, #0
BNE             loc_20180
LDR             R3, [R5,#4]
MOV             R8, #1
STR             R4, [R5,#4]
STR             R5, [R6,#4]
STR             R3, [R6,#8]
STR             R4, [R3]

loc_2014C               ; cond
ADD             R0, R5, #0x28 ; '('
BL              pthread_cond_signal
MOV             R0, R7
MOVW            R2, #0x478
LDR             R1, =aTqPush ; "tq_push"
BL              sub_1F654
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R8
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_20180               ; ptr
MOV             R0, R6
MOV             R8, #0
BL              free
B               loc_2014C

loc_20190
MOVW            R1, #0x46B
LDR             R0, =aTqPush ; "tq_push"
BL              sub_1F6D0
; End of function sub_200D0

B               loc_20128
off_201A0 DCD aTqPush   ; "tq_push"



; int __fastcall sub_201A4(int, const struct timespec *)
sub_201A4
PUSH            {R4-R8,LR}
ADD             R6, R0, #0xC
MOV             R5, R0
MOV             R0, R6  ; mutex
MOV             R7, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_20260

loc_201C4
LDR             R4, [R5]
CMP             R5, R4
BEQ             loc_20220

loc_201D0
LDR             R2, [R4,#4]
MOV             R3, #0
LDR             R1, [R4]
SUB             R0, R4, #4 ; ptr
LDR             R5, [R4,#-4]
STR             R2, [R1,#4]
STR             R1, [R2]
STR             R3, [R4]
STR             R3, [R4,#4]
BL              free

loc_201F8
MOV             R0, R6
MOVW            R2, #0x49E
LDR             R1, =aTqPop ; "tq_pop"
BL              sub_1F654
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R5
POP             {R4-R8,PC}

loc_20220
CMP             R7, #0
ADD             R0, R5, #0x28 ; '(' ; cond
BEQ             loc_20254
MOV             R2, R7  ; abstime
MOV             R1, R6  ; mutex
BL              pthread_cond_timedwait

loc_20238
CMP             R0, #0
BNE             loc_20270
LDR             R3, [R5]
CMP             R4, R3
BEQ             loc_20278
MOV             R4, R3
B               loc_201D0

loc_20254               ; mutex
MOV             R1, R6
BL              pthread_cond_wait
B               loc_20238

loc_20260
MOVW            R1, #0x484
LDR             R0, =aTqPop ; "tq_pop"
BL              sub_1F6D0
B               loc_201C4

loc_20270
MOV             R5, #0
B               loc_201F8

loc_20278
MOV             R5, R0
B               loc_201F8
; End of function sub_201A4

off_20280 DCD aTqPop    ; "tq_pop"



; int __fastcall sub_20284(int result)
sub_20284
PUSH            {R4,LR}
SUBS            R4, R0, #0
POPEQ           {R4,PC}
LDR             R0, [R4,#0xC] ; th
CMP             R0, #0
BNE             loc_202A8
ADD             R0, R4, #0x10 ; sem
POP             {R4,LR}
B               sem_destroy

loc_202A8
BL              pthread_cancel
MOV             R3, #0
ADD             R0, R4, #0x10 ; sem
STR             R3, [R4,#0xC]
POP             {R4,LR}
B               sem_destroy
; End of function sub_20284




; _DWORD *__fastcall sub_202C0(_DWORD *result, int *)
sub_202C0
LDM             R1, {R3,R12}
LDR             R2, [R0]
SUB             R2, R2, R3
STR             R2, [R1]
LDR             R3, [R0,#4]
SUB             R3, R3, R12
CMP             R3, #0
STR             R3, [R1,#4]
ADDLT           R3, R3, #0xF4000
SUBLT           R2, R2, #1
ADDLT           R3, R3, #0x240
STRDLT          R2, R3, [R1]
BX              LR
; End of function sub_202C0




; _DWORD *__fastcall sub_202F4(_DWORD *result, int *)
sub_202F4
LDR             R2, [R0]
MOVW            R12, #0x423F
LDR             R3, [R1]
MOVT            R12, #0xF
PUSH            {LR}
LDR             LR, [R1,#4]
ADD             R2, R2, R3
STR             R2, [R1]
LDR             R3, [R0,#4]
ADD             R3, R3, LR
CMP             R3, R12
STR             R3, [R1,#4]
SUBGT           R3, R3, #0xF4000
ADDGT           R2, R2, #1
SUBGT           R3, R3, #0x240
STRDGT          R2, R3, [R1]
POP             {PC}
; End of function sub_202F4




; bool __fastcall sub_20338(_DWORD *, _DWORD *)
sub_20338
LDR             R2, [R0]
LDR             R3, [R1]
CMP             R2, R3
BEQ             loc_20354
MOVGT           R0, #1
MOVLE           R0, #0
BX              LR

loc_20354
LDR             R0, [R0,#4]
LDR             R3, [R1,#4]
CMP             R0, R3
MOVLE           R0, #0
MOVGT           R0, #1
BX              LR
; End of function sub_20338




; bool __fastcall sub_2036C(_DWORD *, _DWORD *)
sub_2036C
LDR             R2, [R0]
LDR             R3, [R1]
CMP             R2, R3
BEQ             loc_20388
MOVLT           R0, #1
MOVGE           R0, #0
BX              LR

loc_20388
LDR             R0, [R0,#4]
LDR             R3, [R1,#4]
CMP             R0, R3
MOVGE           R0, #0
MOVLT           R0, #1
BX              LR
; End of function sub_2036C




; _DWORD *__fastcall sub_203A0(_DWORD *result, _DWORD *)
sub_203A0
LDR             R3, [R1]
PUSH            {R4,R5}
MOV             R4, #0x10624DD3
STR             R3, [R0]
LDR             R3, [R1,#4]
SMULL           R4, R5, R3, R4
MOV             R3, R3,ASR#31
RSB             R3, R3, R5,ASR#6
POP             {R4,R5}
STR             R3, [R0,#4]
BX              LR
; End of function sub_203A0




; _DWORD *__fastcall sub_203D0(_DWORD *result, _DWORD *)
sub_203D0
LDR             R2, [R1]
MOV             R3, #0x3E8
STR             R2, [R0]
LDR             R2, [R1,#4]
MUL             R3, R3, R2
STR             R3, [R0,#4]
BX              LR
; End of function sub_203D0




; int __fastcall sub_203EC(_QWORD *)
sub_203EC

var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4,R6,R7,LR}
MOVW            R6, #0x4240
SUB             SP, SP, #0x18
MOVT            R6, #0xF
MOV             R7, #0
MOV             R4, R0
STRD            R6, R7, [SP,#0x18+var_18]
ADD             R0, SP, #0x18+var_10
BL              lldiv
LDR             R2, [SP,#0x18+var_10]
LDR             R3, [SP,#0x18+var_8]
STRD            R2, R3, [R4]
ADD             SP, SP, #0x18
POP             {R4,R6,R7,PC}
; End of function sub_203EC




; int __fastcall sub_20424(_QWORD *)
sub_20424

var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4,R6,R7,LR}
MOVW            R6, #0x4240
SUB             SP, SP, #0x18
MOVT            R6, #0xF
MOV             R7, #0
MOV             R4, R0
STRD            R6, R7, [SP,#0x18+var_18]
ADD             R0, SP, #0x18+var_10
BL              lldiv
LDR             R1, [SP,#0x18+var_8]
MOV             R3, #0x3E8
LDR             R2, [SP,#0x18+var_10]
MUL             R3, R3, R1
STRD            R2, R3, [R4]
ADD             SP, SP, #0x18
POP             {R4,R6,R7,PC}
; End of function sub_20424




; int __fastcall sub_20464(_QWORD *)
sub_20464

var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4,R6,R7,LR}
MOV             R6, #0x3E8
SUB             SP, SP, #0x18
MOV             R7, #0
MOV             R4, R0
ADD             R0, SP, #0x18+var_10
STRD            R6, R7, [SP,#0x18+var_18]
BL              lldiv
LDR             R1, [SP,#0x18+var_8]
MOV             R3, #0xF4240
LDR             R2, [SP,#0x18+var_10]
MUL             R3, R3, R1
STRD            R2, R3, [R4]
ADD             SP, SP, #0x18
POP             {R4,R6,R7,PC}
; End of function sub_20464




; int __fastcall sub_204A4(_QWORD *)
sub_204A4

var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4,R6,R7,LR}
MOV             R6, #0x3E8
SUB             SP, SP, #0x18
MOV             R7, #0
MOV             R4, R0
ADD             R0, SP, #0x18+var_10
STRD            R6, R7, [SP,#0x18+var_18]
BL              lldiv
LDR             R1, [SP,#0x18+var_8]
MOV             R3, #0x3E8
LDR             R2, [SP,#0x18+var_10]
MUL             R3, R3, R1
STRD            R2, R3, [R4]
ADD             SP, SP, #0x18
POP             {R4,R6,R7,PC}
; End of function sub_204A4




; _DWORD *__fastcall sub_204E0(_DWORD *result, _DWORD *)
sub_204E0
PUSH            {LR}
MOVW            R12, #0xC9FF
LDR             LR, [R1]
MOVT            R12, #0x3B9A
LDR             R2, [R0]
LDR             R3, [R0,#4]
ADD             R2, R2, LR
STR             R2, [R0]
LDR             R1, [R1,#4]
ADD             R3, R3, R1
CMP             R3, R12
STR             R3, [R0,#4]
BLE             loc_20544
MOV             R1, #0x3600
ADD             LR, R2, #1
MOVT            R1, #0xC465
ADD             R1, R3, R1
CMP             R1, R12
MOVGT           R1, #0x6C00
ADDGT           LR, R2, #2
MOVTGT          R1, #0x88CA
STR             LR, [R0]
ADDGT           R1, R3, R1
STR             R1, [R0,#4]
POP             {PC}

loc_20544
CMP             R3, #0
POPGE           {PC}
MOV             R1, #0x3B9ACA00

loc_20554
ADDS            R3, R3, R1
SUB             R2, R2, #1
BMI             loc_20554
STRD            R2, R3, [R0]
POP             {PC}
; End of function sub_204E0

CMP             R1, #0
CMPNE           R0, #0
BEQ             loc_20650
PUSH            {R4-R9,R11,LR}
MOV             R5, R1
ADD             R11, SP, #0x1C
MOV             R6, R0
BL              strlen
MOV             R9, R0
MOV             R0, R5
BL              strlen
CLZ             R3, R0
CMP             R9, #0
MOV             R3, R3,LSR#5
MOVEQ           R4, #1
MOV             R8, R0
MOVNE           R4, R3
CMP             R4, #0
BNE             loc_20644
ADD             R2, R9, #0xE
ADD             R3, R0, #0xE
BIC             R2, R2, #7
BIC             R3, R3, #7
SUB             SP, SP, R2
MOV             R7, SP
SUB             SP, SP, R3
BL              __ctype_tolower_loc
MOV             R3, R4
LDR             R12, [R0]
MOV             R1, SP
SUB             R0, R7, #1
SUB             R2, R6, #1

loc_205E8
LDRB            LR, [R2,#1]!
ADD             R3, R3, #1
CMP             R3, R9
LDR             LR, [R12,LR,LSL#2]
STRB            LR, [R0,#1]!
BLT             loc_205E8
SUB             R2, R5, #1
SUB             R0, R1, #1
MOV             R3, #0

loc_2060C
LDRB            LR, [R2,#1]!
ADD             R3, R3, #1
CMP             R3, R8
LDR             LR, [R12,LR,LSL#2]
STRB            LR, [R0,#1]!
BLT             loc_2060C
MOV             R0, R7
BL              strstr
CMP             R0, #0
BEQ             loc_20644
SUB             R0, R0, R7
ADD             R0, R6, R0
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}

loc_20644
MOV             R0, #0
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}

loc_20650
MOV             R0, #0
BX              LR



; const char *__fastcall sub_20658(const char **, const char *)
sub_20658
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, [R0]
CMP             R4, #0
BEQ             loc_20690
MOV             R0, R4  ; s
BL              strpbrk
CMP             R0, #0
MOVNE           R3, #0
STRBNE          R3, [R0],#1
STRNE           R0, [R5]
BEQ             loc_20690
MOV             R0, R4
POP             {R4-R6,PC}

loc_20690
MOV             R3, #0
MOV             R0, R4
STR             R3, [R5]
POP             {R4-R6,PC}
; End of function sub_20658




; __int64 __fastcall sub_206A0(__time_t *)
sub_206A0

var_8= -8
var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R0
MOV             R1, SP  ; tp
MOV             R0, #1  ; clock_id
BL              clock_gettime
LDR             R3, [SP,#8+var_4]
MOV             R0, #0x10624DD3
LDR             R2, [SP,#8+var_8]
SMULL           R0, R1, R3, R0
MOV             R3, R3,ASR#31
STR             R2, [R4]
RSB             R3, R3, R1,ASR#6
STR             R3, [R4,#4]
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_206A0




; int __fastcall sub_206E4(_DWORD *)
sub_206E4
PUSH            {R4,R5}
MOVW            R4, #0xDE83
LDR             R3, [R0,#4]
MOVT            R4, #0x431B
LDR             R2, [R0]
MOV             R0, #0x3E8
SMULL           R4, R5, R3, R4
MOV             R3, R3,ASR#31
RSB             R3, R3, R5,ASR#18
POP             {R4,R5}
MLA             R0, R0, R2, R3
BX              LR
; End of function sub_206E4




; int __fastcall sub_20714(_DWORD *, _DWORD *, int *)
sub_20714
LDR             R3, [R0]
LDR             R12, [R1]
SUB             R3, R3, R12
STR             R3, [R2]
LDR             R1, [R1,#4]
LDR             R0, [R0,#4]
SUBS            R0, R0, R1
MOVMI           R1, #0xCA00
SUBMI           R3, R3, #1
MOVTMI          R1, #0x3B9A
STRPL           R0, [R2,#4]
ADDMI           R1, R0, R1
STRMI           R3, [R2]
STRMI           R1, [R2,#4]
BX              LR
; End of function sub_20714




; int __fastcall sub_20750(struct timespec *tp)
sub_20750
MOV             R1, R0  ; tp
MOV             R0, #1  ; clock_id
B               clock_gettime
; End of function sub_20750




; int __fastcall sub_2075C(int *)
sub_2075C

var_8= -8
var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R0
MOV             R2, R1
MOV             R3, R1,ASR#31
MOV             R0, SP
BL              sub_20464
LDR             R3, [SP,#8+var_4]
MOVW            R0, #0xC9FF
LDR             R12, [R4,#4]
MOVT            R0, #0x3B9A
LDR             R2, [SP,#8+var_8]
LDR             R1, [R4]
ADD             R3, R3, R12
CMP             R3, R0
STR             R3, [SP,#8+var_4]
ADD             R2, R2, R1
STR             R2, [SP,#8+var_8]
BLE             loc_207F8
MOV             R1, #0x3600
ADD             R12, R2, #1
MOVT            R1, #0xC465
ADD             R1, R3, R1
CMP             R1, R0
MOVGT           R1, #0x6C00
ADDGT           R12, R2, #2
MOVTGT          R1, #0x88CA
STR             R12, [SP,#8+var_8]
ADDGT           R1, R3, R1
STR             R1, [SP,#8+var_4]

loc_207D4               ; flags
MOV             R1, #1
MOV             R3, #0  ; rem
MOV             R0, R1  ; clock_id
MOV             R2, SP  ; req
BL              clock_nanosleep
CMP             R0, #4
BEQ             loc_207D4
ADD             SP, SP, #8
POP             {R4,PC}

loc_207F8
CMP             R3, #0
BGE             loc_207D4
MOV             R1, #0x3B9ACA00

loc_20808
ADDS            R3, R3, R1
SUB             R2, R2, #1
BMI             loc_20808
STRD            R2, R3, [SP,#8+var_8]
B               loc_207D4
; End of function sub_2075C




; int __fastcall sub_2081C(int *)
sub_2081C

var_8= -8
var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R0
MOV             R0, SP
BL              sub_20424
LDR             R3, [SP,#8+var_4]
MOVW            R0, #0xC9FF
LDR             R12, [R4,#4]
MOVT            R0, #0x3B9A
LDR             R2, [SP,#8+var_8]
LDR             R1, [R4]
ADD             R3, R3, R12
CMP             R3, R0
STR             R3, [SP,#8+var_4]
ADD             R2, R2, R1
STR             R2, [SP,#8+var_8]
BLE             loc_208B0
MOV             R1, #0x3600
ADD             R12, R2, #1
MOVT            R1, #0xC465
ADD             R1, R3, R1
CMP             R1, R0
MOVGT           R1, #0x6C00
ADDGT           R12, R2, #2
MOVTGT          R1, #0x88CA
STR             R12, [SP,#8+var_8]
ADDGT           R1, R3, R1
STR             R1, [SP,#8+var_4]

loc_2088C               ; flags
MOV             R1, #1
MOV             R3, #0  ; rem
MOV             R0, R1  ; clock_id
MOV             R2, SP  ; req
BL              clock_nanosleep
CMP             R0, #4
BEQ             loc_2088C
ADD             SP, SP, #8
POP             {R4,PC}

loc_208B0
CMP             R3, #0
BGE             loc_2088C
MOV             R1, #0x3B9ACA00

loc_208C0
ADDS            R3, R3, R1
SUB             R2, R2, #1
BMI             loc_208C0
STRD            R2, R3, [SP,#8+var_8]
B               loc_2088C
; End of function sub_2081C




; int sub_208D4()
sub_208D4

var_8= -8

PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R0
MOV             R1, SP  ; tp
MOV             R0, #1  ; clock_id
BL              clock_gettime
MOV             R1, R4
MOV             R0, SP
BL              sub_2075C
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_208D4

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R5, R1
MOV             R0, #1
MOV             R1, SP
BL              clock_gettime
MOV             R2, R4
MOV             R3, R5
MOV             R0, SP
BL              sub_2081C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}



; int __fastcall sub_20934(int result, _DWORD *)
sub_20934
LDR             R2, [R1]
LDR             R3, [R0]
SUB             R3, R3, R2
CMP             R3, #0x3C ; '<'
LDRLE           R2, [R0,#4]
MOVWLE          R0, #0x4240
LDRLE           R1, [R1,#4]
MOVTLE          R0, #0xF
SUBLE           R2, R2, R1
MLALE           R3, R0, R3, R2
VMOVLE          S0, R3
VCVTLE.F64.S32  D0, S0
VLDRGT          D0, =6.0e7
BX              LR
; End of function sub_20934

ALIGN 0x10
dbl_20970 DCFD 6.0e7
LDR             R2, [R0]
LDR             R3, [R1]
SUB             R2, R2, R3
CMP             R2, #0xE10
BGT             loc_209C0
PUSH            {R4,R5}
MOVW            R4, #0x4DD3
LDR             R3, [R0,#4]
MOVT            R4, #0x1062
MOV             R0, #0x3E8
LDR             R1, [R1,#4]
SUB             R3, R3, R1
SMULL           R4, R5, R3, R4
MOV             R3, R3,ASR#31
RSB             R3, R3, R5,ASR#6
POP             {R4,R5}
MLA             R0, R0, R2, R3
BX              LR

loc_209C0
MOV             R0, #0x36EE80
BX              LR



; void sub_209CC()
sub_209CC
LDR             R12, [R1,#4]
LDR             R2, [R0,#4]
VLDR            D5, =1000000.0
LDR             R3, [R0]
SUB             R2, R2, R12
LDR             R1, [R1]
VMOV            S15, R2
SUB             R3, R3, R1
VCVT.F64.S32    D7, S15
VMOV            S0, R3
VCVT.F64.S32    D0, S0
VDIV.F64        D6, D7, D5
VADD.F64        D0, D6, D0
BX              LR
; End of function sub_209CC

ALIGN 8
dbl_20A08 DCFD 1000000.0



; int __fastcall sub_20A10(const char *, _DWORD *, char **)
sub_20A10

var_114= -0x114
var_10C= -0x10C
s= -0x104

PUSH            {R4-R9,LR}
MOV             R8, R1
MOVW            R1, #:lower16:(aStratumTcp+0xC) ; "//"
SUB             SP, SP, #0x114
MOVT            R1, #:upper16:(aStratumTcp+0xC) ; needle
MOV             R4, R0
STR             R0, [R8]
MOV             R9, R2
BL              strstr
CMP             R0, #0
MOV             R1, #0x5B ; '[' ; c
ADDNE           R4, R0, #2
MOV             R0, R4  ; s
BL              strchr
MOV             R1, #0x5D ; ']' ; c
MOV             R6, R0
MOV             R0, R4  ; s
BL              strchr
MOVS            R5, R0
MOV             R1, #0x3A ; ':' ; c
MOVNE           R5, #1
CMP             R6, #0
MOVEQ           R5, #0
CMP             R6, R0
MOVCS           R5, #0
ANDCC           R5, R5, #1
CMP             R5, #0
MOVEQ           R0, R4  ; s
BL              strchr
MOV             R6, R0
MOV             R0, R4  ; s
BL              strlen
CMP             R6, #0
BEQ             loc_20B78
SUB             R3, R6, R4
MVN             R7, R3
ADD             R7, R7, R0
CMP             R7, #0
ADDGT           R6, R6, #1
BLE             loc_20B68

loc_20AB0
CMP             R3, #0
BLE             loc_20B68
CMP             R5, #0
MOVW            R2, #:lower16:aS_0 ; "%.*s"
ADDNE           R4, R4, #1
SUBNE           R3, R3, #2
STR             R4, [SP,#0x114+var_114]
ADD             R0, SP, #0x114+s ; s
MOVT            R2, #:upper16:aS_0 ; "%.*s"
MOV             R1, #0xFE ; maxlen
BL              snprintf
CMP             R7, #0
BNE             loc_20B28
MOVW            R3, #:lower16:dword_4D190
ADD             R4, SP, #0x114+var_10C
MOVT            R3, #:upper16:dword_4D190
LDR             R3, [R3]
STRH            R3, [SP,#0x114+var_10C]
MOV             R3, R3,LSR#16
STRB            R3, [SP,#0x114+var_10C+2]

loc_20B00               ; s
MOV             R0, R4
BL              __strdup
STR             R0, [R9]
ADD             R0, SP, #0x114+s ; s
BL              __strdup
MOV             R3, #1
STR             R0, [R8]
MOV             R0, R3
ADD             SP, SP, #0x114
POP             {R4-R9,PC}

loc_20B28
ADD             R4, SP, #0x114+var_10C
MOVW            R2, #:lower16:aS_0 ; "%.*s"
MOV             R3, R7
MOVT            R2, #:upper16:aS_0 ; "%.*s"
MOV             R1, #6  ; maxlen
STR             R6, [SP,#0x114+var_114]
MOV             R0, R4  ; s
BL              snprintf
MOVW            R1, #:lower16:asc_4D18C ; "/#"
MOV             R0, R4  ; s
MOVT            R1, #:upper16:asc_4D18C ; "/#"
BL              strpbrk
CMP             R0, #0
MOVNE           R3, #0
STRBNE          R3, [R0]
B               loc_20B00

loc_20B68
MOV             R3, #0
MOV             R0, R3
ADD             SP, SP, #0x114
POP             {R4-R9,PC}

loc_20B78
MOV             R3, R0
MOV             R7, R6
B               loc_20AB0
; End of function sub_20A10




; char *__fastcall sub_20B84(char *s1, int)
sub_20B84
PUSH            {R4-R10,LR}
MOV             R3, #0
MOVW            R4, #:lower16:aHttp ; "http:"
LDR             R8, =off_4C6A8 ; "http:"
MOV             R7, R0
MOV             R5, R3
MOVT            R4, #:upper16:aHttp ; "http:"
MOV             R6, #5
MOV             R9, R1
STR             R3, [R1,#0xB8]
B               loc_20BCC

loc_20BB0
ADD             R5, R5, #1
LDR             R4, [R8,R5,LSL#3]
CMP             R4, #0
MOV             R0, R4  ; s
BEQ             loc_20C50
BL              strlen
MOV             R6, R0

loc_20BCC               ; s2
MOV             R1, R4
MOV             R2, R6  ; n
MOV             R0, R7  ; s1
BL              strncmp
SUBS            R4, R0, #0
BNE             loc_20BB0
MOV             R1, #0x7C ; '|' ; c
MOV             R0, R7  ; s
BL              strchr
SUBS            R10, R0, #0
BEQ             loc_20C50
MOVW            R8, #:lower16:dword_4C28C
SUB             R3, R10, R7
MOVT            R8, #:upper16:dword_4C28C
RSB             R0, R6, #1
MOVW            R1, #:lower16:aUtilC ; "util.c"
ADD             R2, R8, #0x670
ADD             R0, R0, R3
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOV             R3, #0x2EC
STRB            R4, [R10]
BL              sub_1F828
ADD             R5, R8, R5,LSL#3
ADD             R1, R7, R6 ; src
STR             R0, [R9,#0xB8]
ADD             R7, R10, #1
BL              strcpy
ADD             R2, R9, #0x270
ADD             R1, R9, #0x26C
LDR             R0, [R9,#0xB8]
BL              sub_20A10
LDR             R3, [R5,#0x420]
STR             R3, [R9,#0xB4]

loc_20C50
MOV             R0, R7
POP             {R4-R10,PC}
; End of function sub_20B84

off_20C58 DCD off_4C6A8 ; "http:"



; bool __fastcall sub_20C5C(int)
sub_20C5C
LDR             R3, [R0,#0x260]
LDRB            R1, [R3]
CMP             R1, #0
BEQ             loc_20C74
MOV             R0, #1
BX              LR

loc_20C74
LDR             R0, [R0,#0x24C]
B               sub_1F294
; End of function sub_20C5C




; void **__fastcall sub_20C7C(void **result, unsigned int, size_t, const char *, const char *, int)
sub_20C7C

var_C= -0xC
arg_0=  0x14
arg_4=  0x18

CMP             R2, R1
PUSH            {R4-R7,LR}
SUB             SP, SP, #0xC
LDR             R7, [SP,#0xC+arg_0]
LDR             LR, [SP,#0xC+arg_4]
BEQ             loc_20CC8
MOV             R12, R3
MOV             R5, R2
MOV             R6, R0
MOV             R4, R1
LDR             R0, [R0]
MOV             R3, R7
STR             LR, [SP,#0xC+var_C]
MOV             R2, R12
MOV             R1, R5
BL              sub_1F940
CMP             R5, R4
STR             R0, [R6]
BHI             loc_20CD0

loc_20CC8
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_20CD0
SUB             R2, R5, R4
ADD             R0, R0, R4
MOV             R1, #0
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
B               memset
; End of function sub_20C7C




; int __fastcall sub_20CE8(int, int *)
sub_20CE8

var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_s0=  0

MOV             R12, #0
PUSH            {R4-R6,LR}
MOV             R3, R12
MOV             R2, R12
MOV             LR, #1
SUB             SP, SP, #0x18
STR             R12, [SP,#0x18+var_8]
STR             R12, [SP,#0x18+var_18]
STR             R12, [SP,#0x18+var_14]
STR             R12, [SP,#0x18+var_10]
STR             R12, [SP,#0x18+var_C]
STR             R12, [SP,#0x18+var_8+3]

loc_20D18
ANDS            R12, R0, LR,LSL R3
ADD             R12, SP, #0x18+var_s0
ADD             R12, R12, R2
STRBNE          R3, [R12,#-0x18]
ADDNE           R2, R2, #1
ADD             R3, R3, #1
CMP             R3, #0x1F
CMPLS           R2, #0x16
MOVLS           R12, #1
MOVHI           R12, #0
BLS             loc_20D18
CMP             R2, #0
LDR             R6, [R1]
BEQ             loc_20D98
CMP             R6, #0
BLE             loc_20DA0
MOV             R3, SP
MOV             R0, R12
ADD             R4, R3, R2
ADD             R5, R3, R6
MOV             LR, #1
B               loc_20D78

loc_20D70
CMP             R5, R3
BEQ             loc_20D88

loc_20D78
LDRB            R12, [R3],#1
CMP             R4, R3
ORR             R0, R0, LR,LSL R12
BNE             loc_20D70

loc_20D88
CMP             R6, R2
STRHI           R2, [R1]
ADD             SP, SP, #0x18
POP             {R4-R6,PC}

loc_20D98
MOV             R0, R2
B               loc_20D88

loc_20DA0
MOV             R0, R12
B               loc_20D88
; End of function sub_20CE8




; int __fastcall sub_20DA8(int, char *s)
sub_20DA8

var_820= -0x820
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_804= -0x804
s= -0x800

LDR             R2, =a000000000 ; "000000000"
PUSH            {R4-R6,LR}
MOV             R6, R1
MOV             R4, R0
SUB             SP, SP, #0x820
ADD             R3, SP, #0x820+var_80C
LDM             R2, {R0-R2} ; "000000000"
STM             R3!, {R0,R1}
MOV             R0, R6  ; s
STRB            R2, [R3]
BL              strlen
CMP             R0, #0
MOV             R2, #0
MOV             R3, #8
STRD            R2, R3, [SP,#0x820+var_814]
BEQ             loc_20E0C
RSB             R1, R0, #7
SUB             R2, R6, #1
ADD             R3, SP, #0x820+var_80C
ADD             R0, R2, R0
ADD             R1, R3, R1

loc_20DFC
LDRB            R12, [R2,#1]!
CMP             R2, R0
STRB            R12, [R1,#1]!
BNE             loc_20DFC

loc_20E0C
MOVW            R5, #:lower16:byte_72D90
MOV             R3, #0
ADD             R1, SP, #0x820+var_80C
ADD             R0, SP, #0x820+var_814
MOVT            R5, #:upper16:byte_72D90
MOV             R2, #4
STRB            R3, [SP,#0x820+var_804]
BL              sub_1FB44
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_20E4C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_20FC8

loc_20E4C
LDR             R12, [SP,#0x820+var_814]
MOV             R2, #aMaskReturnedBy ; "mask returned by pool is %s, swaped = 0"...
MOV             R1, #0x800 ; maxlen
MOV             R3, R6
ADD             R0, SP, #0x820+s ; s
STR             R12, [SP,#0x820+var_820]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x820+s
MOV             R0, #6
BL              sub_1DD60

loc_20E7C
LDR             R3, [SP,#0x820+var_814]
MOV             R2, #0xE0FF1F
ADD             R1, SP, #0x820+var_810
AND             R2, R2, R3
MOV             R3, R2,LSR#8
MOV             R0, R2,LSL#8
AND             R3, R3, #0xFF00
AND             R0, R0, #0xFF0000
ORR             R3, R3, R0
ORR             R3, R3, R2,LSL#24
MOV             R0, R3
STR             R3, [SP,#0x820+var_814]
BL              sub_20CE8
LDRB            R3, [R5]
STR             R0, [SP,#0x820+var_814]
CMP             R3, #0
BNE             loc_20ED8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_20F9C

loc_20ED8
LDR             R12, [SP,#0x820+var_810]
MOVW            R2, #:lower16:aRealMask0xXBit ; "real mask = 0x%x, bit_num = %d"
MOV             R3, R0
MOVT            R2, #:upper16:aRealMask0xXBit ; "real mask = 0x%x, bit_num = %d"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x820+s ; s
STR             R12, [SP,#0x820+var_820]
BL              snprintf
MOV             R0, #5
MOV             R2, #0
ADD             R1, SP, #0x820+s
BL              sub_1DD60
LDR             R0, [SP,#0x820+var_814]
CMP             R0, #0
BNE             loc_20F7C
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_20F34
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_20FE0

loc_20F34
MOVW            R2, #:lower16:aPoolDRollingMa ; "Pool %d rolling mask do not match!"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPoolDRollingMa ; "Pool %d rolling mask do not match!"
LDR             R3, [R4]
ADD             R0, SP, #0x820+s ; s
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_20F5C
LDR             R0, [SP,#0x820+var_814]
MOV             R2, #0
MOV             R3, #1
STRB            R2, [R4,#0x294]
STR             R3, [R4,#0x298]
STR             R0, [R4,#0x29C]
ADD             SP, SP, #0x820
POP             {R4-R6,PC}

loc_20F7C
LDR             R2, [SP,#0x820+var_810]
MOV             R3, #1
STRB            R3, [R4,#0x294]
STR             R0, [R4,#0x29C]
MOV             R3, R3,LSL R2
STR             R3, [R4,#0x298]
ADD             SP, SP, #0x820
POP             {R4-R6,PC}

loc_20F9C
MOV             R3, #dword_67840
LDR             R2, [R3]
CMP             R2, #4
BGT             loc_20ED8
CMP             R0, #0
BNE             loc_20F7C

loc_20FB8
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_20F34
B               loc_20F5C

loc_20FC8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_20E7C
B               loc_20E4C

loc_20FE0
MOV             R3, #dword_67840
B               loc_20FB8
; End of function sub_20DA8

off_20FEC DCD a000000000 ; "000000000"



; int __fastcall sub_20FF0(_DWORD *, int)
sub_20FF0

var_914= -0x914
s2= -0x908
var_900= -0x900
var_8A4= -0x8A4
s= -0x804

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x910
SUB             SP, SP, #4
MOV             R10, R0
ADD             R2, SP, #0x914+var_900
MOV             R0, R1
MOV             R1, #0
BL              sub_47C50
SUBS            R5, R0, #0
BEQ             loc_210AC
MOV             R1, #aResult ; "result"
BL              sub_48AF4
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R7, R0
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R5
BL              sub_48AF4
CMP             R7, #0
BEQ             loc_21060
LDR             R3, [R7]
CMP             R3, #7
BEQ             loc_21060
CMP             R0, #0
BEQ             loc_21130
LDR             R3, [R0]
CMP             R3, #7
BEQ             loc_21130

loc_21060
MOV             R6, #0

loc_21064
LDR             R3, [R5,#4]
CMN             R3, #1
BEQ             loc_2109C
ADD             R3, R5, #4
DMB             ISH

loc_21078
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_21078
CMP             R2, #0
BNE             loc_2109C
MOV             R0, R5
BL              sub_4942C

loc_2109C
MOV             R0, R6
ADD             SP, SP, #0x910
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_210AC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_210D4
MOV             R3, #byte_686E0
LDRB            R6, [R3]
CMP             R6, #0
BEQ             loc_21118

loc_210D4
ADD             R1, SP, #0x914+var_8A4
MOVW            R2, #:lower16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
LDR             R3, [SP,#0x914+var_900]
MOV             R6, #0
STR             R1, [SP,#0x914+var_914]
ADD             R0, SP, #0x914+s ; s
MOVT            R2, #:upper16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x914+s
MOV             R2, R6
MOV             R0, #6
BL              sub_1DD60
MOV             R0, R6
ADD             SP, SP, #0x910
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_21118
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2109C
B               loc_210D4

loc_21130
MOV             R0, R7
BL              sub_48D5C
BL              sub_48DDC
SUBS            R4, R0, #0
BEQ             loc_21060
MOVW            R3, #:lower16:aVersionRolling ; "version-rolling.mask"
MOVW            R8, #:lower16:aVersionRolling_0 ; "version-rolling"
MOVW            R11, #:lower16:byte_72D90
MOVT            R3, #:upper16:aVersionRolling ; "version-rolling.mask"
MOVT            R8, #:upper16:aVersionRolling_0 ; "version-rolling"
STR             R3, [SP,#0x914+s2]
MOVT            R11, #:upper16:byte_72D90
MOV             R6, #0
B               loc_21208

loc_21168               ; s2
LDR             R1, [SP,#0x914+s2]
MOV             R0, R4  ; s1
BL              strcasecmp
CMP             R0, #0
BNE             loc_2118C
MOV             R0, R4  ; s
BL              strlen
CMP             R0, #0x14
BEQ             loc_212AC

loc_2118C
LDRB            R3, [R11]
CMP             R3, #0
BNE             loc_211C0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_211C0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_211E8

loc_211C0
MOVW            R2, #:lower16:aJsonRpcUnexpec ; "JSON-RPC unexpected mining.configure va"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aJsonRpcUnexpec ; "JSON-RPC unexpected mining.configure va"...
ADD             R0, SP, #0x914+s ; s
MOV             R3, R4
BL              snprintf
ADD             R1, SP, #0x914+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_211E8
MOV             R0, R4
BL              sub_48DF4
MOV             R1, R0
MOV             R0, R7
BL              sub_48DA8
BL              sub_48DDC
SUBS            R4, R0, #0
BEQ             loc_21064

loc_21208
MOV             R0, R4
BL              sub_48DF4
BL              sub_48DE8
SUBS            R9, R0, #0
BEQ             loc_21064
MOV             R1, R8  ; s2
MOV             R0, R4  ; s1
BL              strcasecmp
CMP             R0, #0
BNE             loc_21168
MOV             R0, R4  ; s
BL              strlen
CMP             R0, #0xF
BNE             loc_21168
LDR             R3, [R9]
LDRB            R2, [R11]
CMP             R3, #5
BNE             loc_212C8
CMP             R2, #0
BNE             loc_21280
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21280
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_211E8

loc_21280
MOVW            R2, #:lower16:aPoolDSupportAb ; "POOL %d support ab mode!"
ADD             R0, SP, #0x914+s ; s
MOVT            R2, #:upper16:aPoolDSupportAb ; "POOL %d support ab mode!"
LDR             R3, [R10]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x914+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60
B               loc_211E8

loc_212AC
MOV             R0, R9
MOV             R6, #1
BL              sub_49028
MOV             R1, R0  ; s
MOV             R0, R10 ; int
BL              sub_20DA8
B               loc_211E8

loc_212C8
CMP             R2, #0
BNE             loc_212F8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_212F8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_21320

loc_212F8
MOVW            R2, #:lower16:aPoolDDonTSuppo ; "Pool %d don't support ab!"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPoolDDonTSuppo ; "Pool %d don't support ab!"
ADD             R0, SP, #0x914+s ; s
LDR             R3, [R10]
BL              snprintf
ADD             R1, SP, #0x914+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_21320
MOV             R3, #1
MOV             R2, #0
STRB            R2, [R10,#0x294]
MOV             R6, R3
STR             R3, [R10,#0x298]
B               loc_21064
; End of function sub_20FF0




; int __fastcall sub_21338(pthread_mutex_t *)
sub_21338

var_80C= -0x80C
s= -0x804

MOVW            R3, #:lower16:byte_72D90
PUSH            {R4,R5,LR}
MOVT            R3, #:upper16:byte_72D90
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21370
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_213E0

loc_21370
MOVW            R2, #:lower16:aClosingSocketF ; "Closing socket for stratum pool %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aClosingSocketF ; "Closing socket for stratum pool %d"
ADD             R0, SP, #0x814+s ; s
LDR             R3, [R4]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_21398
ADD             R5, R4, #0x2D0
MOV             R0, R5  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_21448

loc_213AC
MOV             R0, R4
BL              sub_1F1EC
MOV             R0, R5  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_213F8

loc_213C4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_213E0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_21398
B               loc_21370

loc_213F8
BL              __errno_location
LDR             LR, =aSuspendStratum ; "suspend_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0xCF3
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_213C4

loc_21448
BL              __errno_location
LDR             LR, =aSuspendStratum ; "suspend_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0xCF1
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_21338

B               loc_213AC
off_21498 DCD aSuspendStratum ; "suspend_stratum"



; int __fastcall sub_2149C(pthread_mutex_t *, const char *, int)
sub_2149C

var_80C= -0x80C
s= -0x804

MOVW            R3, #:lower16:byte_72EC8
PUSH            {R4-R7,LR}
MOVT            R3, #:upper16:byte_72EC8
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R0
LDRB            R3, [R3]
MOV             R4, R1
MOV             R7, R2
CMP             R3, #0
BEQ             loc_214DC
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21560

loc_214DC
ADD             R6, R5, #0x2D0
MOV             R0, R6  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_217B4

loc_214F0
LDRB            R3, [R5,#0x291]
CMP             R3, #0
BNE             loc_21660
MOV             R0, R6  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
MOVNE           R4, #3
BEQ             loc_215C8

loc_21510
BL              __errno_location
LDR             LR, =aStratumSend ; "stratum_send"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x6B5
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_21684

loc_21560
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2159C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2159C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_214DC

loc_2159C
MOVW            R2, #:lower16:aSendS ; "SEND: %s"
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aSendS ; "SEND: %s"
MOV             R3, R4
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_214DC

loc_215C8
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0

loc_215D8
MOV             R3, #byte_686E1
LDRB            R0, [R3]
CMP             R0, #0
BEQ             loc_21654
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21614
MOV             R3, #byte_686E0
LDRB            R0, [R3]
CMP             R0, #0
BEQ             loc_21834

loc_21614
MOVW            R12, #:lower16:aStratumSendFai ; "Stratum send failed due to no pool stra"...
ADD             LR, SP, #0x814+s
MOVT            R12, #:upper16:aStratumSendFai ; "Stratum send failed due to no pool stra"...
LDM             R12!, {R0-R3} ; "Stratum send failed due to no pool stra"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "led due to no pool stratum_active"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ol stratum_active"
LDR             R12, [R12] ; "e"
STM             LR!, {R0-R3}
MOV             R0, #7
ADD             R1, SP, #0x814+s
MOV             R2, #0
STRH            R12, [LR]
BL              sub_1DD60
MOV             R0, #0

loc_21654
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_21660
MOV             R1, R4
MOV             R2, R7
MOV             R0, R5
BL              sub_1EAA8
MOV             R4, R0
MOV             R0, R6  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_21510

loc_21684
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R4, #2
BEQ             loc_21730
CMP             R4, #3
BEQ             loc_215D8
CMP             R4, #1
CLZNE           R0, R4
MOVNE           R0, R0,LSR#5
BNE             loc_21654
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_21718
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_216F0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_21804

loc_216F0
MOVW            R2, #:lower16:aWriteSelectFai ; "Write select failed on pool %d sock"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aWriteSelectFai ; "Write select failed on pool %d sock"
ADD             R0, SP, #0x814+s ; s
LDR             R3, [R5]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_21718
MOV             R0, R5
BL              sub_21338
MOV             R0, #0

loc_21724
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_21730
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_21718
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2176C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2181C

loc_2176C
MOVW            LR, #:lower16:aFailedToSendIn ; "Failed to send in stratum_send"
ADD             R12, SP, #0x814+s
MOVT            LR, #:upper16:aFailedToSendIn ; "Failed to send in stratum_send"
LDM             LR!, {R0-R3} ; "Failed to send in stratum_send"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "n stratum_send"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x814+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #7
STRB            LR, [R12]
BL              sub_1DD60
MOV             R0, R5
BL              sub_21338
MOV             R0, #0
B               loc_21724

loc_217B4
BL              __errno_location
LDR             LR, =aStratumSend ; "stratum_send"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x6AF
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_214F0

loc_21804
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_216F0
B               loc_21718

loc_2181C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_2176C
B               loc_21718

loc_21834
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_21614
B               loc_21654
; End of function sub_2149C

off_2184C DCD aStratumSend ; "stratum_send"



; char *__fastcall sub_21850(int)
sub_21850

var_2814= -0x2814
var_2808= -0x2808
tp= -0x2804
s= -0x2004
var_2000= -0x2000

PUSH            {R4-R11,LR}
MOV             R1, #0xA ; c
VPUSH           {D8}
SUB             SP, SP, #0x2800
SUB             SP, SP, #0x14
MOV             R4, R0
LDR             R9, [R0,#0x260]
MOV             R0, R9  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_219CC

loc_2187C               ; s
MOV             R0, R9
BL              strlen
MOVW            R1, #:lower16:word_4C1E4
MOV             R6, R0
MOVT            R1, #:upper16:word_4C1E4 ; delim
MOV             R0, R9  ; s
BL              strtok
CMP             R0, #0
BEQ             loc_21B80
BL              __strdup
MOV             R5, R0
BL              strlen
ADD             R1, R0, #1
MOV             R7, R0
CMP             R1, R6
BLT             loc_219B4
LDR             R3, [R4,#0x260]
MOV             R2, #0
STRB            R2, [R3]

loc_218C8
LDR             R1, [R4,#0x208]
MOV             R12, #0
LDR             R6, [R4,#0x20C]
LDR             R2, [R4,#0x210]
ADDS            R1, R1, #1
LDR             LR, [R4,#0x214]
ADC             R6, R6, R12
LDR             R3, [R4,#0x218]
ADDS            R2, R2, R7
STR             R1, [R4,#0x208]
STR             R2, [R4,#0x210]
MOVW            R2, #:lower16:byte_72EC8
ADC             R1, LR, R12
MOVT            R2, #:upper16:byte_72EC8
STR             R1, [R4,#0x214]
ADDS            R0, R3, R7
LDRB            R1, [R2]
LDR             R2, [R4,#0x21C]
STR             R6, [R4,#0x20C]
STR             R0, [R4,#0x218]
ADC             R3, R2, R12
CMP             R1, R12
STR             R3, [R4,#0x21C]
BEQ             loc_219A0
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_219A0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21978
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21978
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_219A0

loc_21978
MOVW            R2, #:lower16:aRecvdS ; "RECVD: %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aRecvdS ; "RECVD: %s"
ADD             R0, SP, #0x2814+s ; s
MOV             R3, R5
BL              snprintf
ADD             R1, SP, #0x2814+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_219A0
MOV             R0, R5
ADD             SP, SP, #0x2800
ADD             SP, SP, #0x14
VPOP            {D8}
POP             {R4-R11,PC}

loc_219B4               ; dest
LDR             R0, [R4,#0x260]
SUB             R2, R6, R7
ADD             R2, R2, #1 ; n
ADD             R1, R0, R1 ; src
BL              memmove
B               loc_218C8

loc_219CC               ; tp
ADD             R1, SP, #0x2814+s
MOV             R0, #1  ; clock_id
BL              clock_gettime
LDR             R5, [SP,#0x2814+var_2000]
MOV             R6, #0x10624DD3
MOV             R1, #0x3C ; '<'
LDR             R0, [R4,#0x24C]
LDR             R7, [SP,#0x2814+s]
SMULL           R2, R3, R5, R6
MOV             R5, R5,ASR#31
RSB             R5, R5, R3,ASR#6
BL              sub_1F294
CMP             R0, #0
BEQ             loc_21D40
MOV             R3, #0xE000
VLDR            D8, =1000000.0
MOVT            R3, #0xFFFF
STR             R3, [SP,#0x2814+var_2808]
B               loc_21AC4

loc_21A1C
LDR             R0, [R4,#0x254]
BL              SSL_read
MOV             R9, R0

loc_21A28
CMP             R9, #0
BEQ             loc_21CB0
ADD             R1, SP, #0x2814+tp ; tp
MOV             R0, #1  ; clock_id
BL              clock_gettime
LDR             R3, [SP,#0x2814+tp.tv_nsec]
CMP             R9, #0
LDR             R2, [SP,#0x2814+tp]
SMULL           R0, R1, R3, R6
MOV             R3, R3,ASR#31
SUB             R2, R2, R7
VMOV            S14, R2
VCVT.F64.S32    D5, S14
RSB             R3, R3, R1,ASR#6
SUB             R3, R3, R5
VMOV            S15, R3
VCVT.F64.S32    D7, S15
VDIV.F64        D6, D7, D8
VADD.F64        D6, D6, D5
VCVT.S32.F64    S15, D6
VMOV            R9, S15
BGE             loc_21AF8
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #0xB
BNE             loc_21C1C
RSB             R1, R9, #0x3C ; '<'
LDR             R0, [R4,#0x24C]
BL              sub_1F294
CMP             R0, #0
BEQ             loc_21C1C

loc_21AA4
CMP             R9, #0x3B ; ';'
LDR             R9, [R4,#0x260]
BGT             loc_2187C
MOV             R1, #0xA ; c
MOV             R0, R9  ; s
BL              strchr
CMP             R0, #0
BNE             loc_2187C

loc_21AC4               ; n
MOV             R2, #0x2000
MOV             R1, #0  ; c
ADD             R0, SP, #0x2814+s ; s
BL              memset
LDRB            R3, [R4,#0x250] ; flags
MOVW            R2, #0x1FFC ; n
ADD             R1, SP, #0x2814+s ; buf
CMP             R3, #0
BNE             loc_21A1C
LDR             R0, [R4,#0x24C] ; fd
BL              recv
MOV             R9, R0
B               loc_21A28

loc_21AF8               ; s
ADD             R0, SP, #0x2814+s
BL              strlen
LDR             R8, [R4,#0x260]
MOV             R11, R0
MOV             R0, R8  ; s
BL              strlen
LDR             R2, [R4,#0x264]
MOV             R10, R0
ADD             R0, R11, R0
ADD             R0, R0, #1
CMP             R0, R2
BCC             loc_21B70
LDR             R3, [SP,#0x2814+var_2808]
MOVW            R12, #0x722
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R12, [SP,#0x2814+var_2814]
MOVT            R2, #:upper16:aUtilC ; "util.c"
AND             R0, R0, R3
LDR             R3, =aRecallocSock ; "recalloc_sock"
ADD             R11, R0, #0x2000
MOV             R0, R8
MOV             R1, R11
BL              sub_1F940
SUB             R2, R11, R10 ; n
STR             R0, [R4,#0x260]
MOV             R1, #0  ; c
ADD             R0, R0, R10 ; s
BL              memset
LDR             R8, [R4,#0x260]
STR             R11, [R4,#0x264]

loc_21B70               ; dest
MOV             R0, R8
ADD             R1, SP, #0x2814+s ; src
BL              strcat
B               loc_21AA4

loc_21B80
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_21C0C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21BD0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21BD0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_21C0C

loc_21BD0
MOVW            R12, #:lower16:aFailedToParseA ; "Failed to parse a \\n terminated string"...
ADD             LR, SP, #0x2814+s
MOVT            R12, #:upper16:aFailedToParseA ; "Failed to parse a \\n terminated string"...
LDM             R12!, {R0-R3} ; "Failed to parse a \\n terminated string"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "a \\n terminated string in recv_line"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "string in recv_line"
LDR             R12, [R12] ; "ine"
STM             LR!, {R0-R3}
ADD             R1, SP, #0x2814+s
MOV             R2, #0
MOV             R0, #7
STR             R12, [LR]
BL              sub_1DD60

loc_21C0C
MOV             R0, R4
MOV             R5, #0
BL              sub_1F734
B               loc_219A0

loc_21C1C
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_21CA0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21C6C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21C6C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_21CA0

loc_21C6C
MOVW            R12, #:lower16:aFailedToRecvSo ; "Failed to recv sock in recv_line"
ADD             LR, SP, #0x2814+tp
MOVT            R12, #:upper16:aFailedToRecvSo ; "Failed to recv sock in recv_line"
LDM             R12!, {R0-R3} ; "Failed to recv sock in recv_line"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ock in recv_line"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x2814+tp
MOV             R2, #0
MOV             R0, #7
STRB            R12, [LR]
BL              sub_1DD60

loc_21CA0
MOV             R0, R4
BL              sub_21338
LDR             R9, [R4,#0x260]
B               loc_2187C

loc_21CB0
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_21CA0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21D00
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21D00
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_21CA0

loc_21D00
MOVW            LR, #:lower16:aSocketClosedWa ; "Socket closed waiting in recv_line"
ADD             R12, SP, #0x2814+tp
MOVT            LR, #:upper16:aSocketClosedWa ; "Socket closed waiting in recv_line"
LDM             LR!, {R0-R3} ; "Socket closed waiting in recv_line"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "iting in recv_line"
LDR             LR, [LR] ; "ne"
STM             R12!, {R0-R3}
ADD             R1, SP, #0x2814+tp
MOV             R2, #0
MOV             R0, #7
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60
B               loc_21CA0

loc_21D40
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_21C0C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21D90
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21D90
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_21C0C

loc_21D90
MOVW            LR, #:lower16:aTimedOutWaitin ; "Timed out waiting for data on socket_fu"...
ADD             R12, SP, #0x2814+s
MOVT            LR, #:upper16:aTimedOutWaitin ; "Timed out waiting for data on socket_fu"...
LDM             LR!, {R0-R3} ; "Timed out waiting for data on socket_fu"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "g for data on socket_full"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "cket_full"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x2814+s
STRH            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_1DD60
B               loc_21C0C
; End of function sub_21850

ALIGN 0x10
dbl_21DD0 DCFD 1000000.0
off_21DD8 DCD aRecallocSock ; "recalloc_sock"



; int __fastcall sub_21DDC(_DWORD *)
sub_21DDC

var_292C= -0x292C
var_2928= -0x2928
var_2924= -0x2924
var_291C= -0x291C
mutex= -0x2918
var_2914= -0x2914
s2= -0x2910
var_290C= -0x290C
var_2908= -0x2908
var_2900= -0x2900
var_28A4= -0x28A4
s= -0x2804
var_200C= -0x200C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x2900
MOV             R4, R0
SUB             SP, SP, #0x2C
BL              sub_1F734
LDR             R0, [R4,#0x28C]
CMP             R0, #0
BEQ             loc_22318
MOVW            R6, #:lower16:dword_72DBC
MOVW            R12, #:lower16:byte_6A25C
MOVT            R6, #:upper16:dword_72DBC
ADD             R5, SP, #0x292C+var_200C
LDR             R2, [R6]
MOVT            R12, #:upper16:byte_6A25C
ADD             R5, R5, #8
MOVW            R3, #:lower16:byte_6A35C
MOVW            R1, #:lower16:aIdDMethodMinin ; "{\"id\": %d, \"method\": \"mining.subsc"...
STR             R0, [SP,#0x292C+var_2928]
ADD             LR, R2, #1
STR             R12, [SP,#0x292C+var_292C]
MOV             R0, R5  ; s
MOVT            R3, #:upper16:byte_6A35C
MOVT            R1, #:upper16:aIdDMethodMinin ; "{\"id\": %d, \"method\": \"mining.subsc"...
STR             LR, [R6]
BL              sprintf

loc_21E40
MOVW            R11, #:lower16:aResult ; "result"
MOV             R7, #0
MOVT            R11, #:upper16:aResult ; "result"
ADD             R3, SP, #0x292C+var_2900
STR             R7, [SP,#0x292C+var_291C]
STR             R3, [SP,#0x292C+mutex]

loc_21E58               ; s
MOV             R0, R5
BL              strlen
MOV             R1, R5
MOV             R2, R0
MOV             R0, R4
BL              sub_1EAA8
SUBS            R8, R0, #0
BEQ             loc_22280
MOV             R4, #byte_686E1
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_221BC

loc_21E8C
CMP             R7, #0
MOVNE           R8, #0
BNE             loc_22174
MOV             R8, R7

loc_21E9C
MOV             R0, R8
ADD             SP, SP, #0x2900
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_21EAC
CMP             R10, #0
MOV             R9, R0
STR             R8, [SP,#0x292C+var_291C]
MOV             R0, R10 ; s1
MOV             R11, R10
MOV             R8, R3
BEQ             loc_21F44
LDR             R1, [R4,#0x28C] ; s2
CMP             R1, #0
BEQ             loc_21F44
BL              strcmp
CMP             R0, #0
BNE             loc_21F44
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21F1C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21F1C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_21F44

loc_21F1C
MOVW            R2, #:lower16:aPoolDSuccessfu ; "Pool %d successfully negotiated resume "...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPoolDSuccessfu ; "Pool %d successfully negotiated resume "...
ADD             R0, SP, #0x292C+s ; s
LDR             R3, [R4]
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_21F44
ADD             R3, R4, #0xD4
MOV             R0, R3  ; mutex
STR             R3, [SP,#0x292C+mutex]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_22B94

loc_21F5C
ADD             R10, R4, #0xEC
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_22B40
LDR             R6, =aInitiateStratu_0 ; "initiate_stratum"
MOV             R5, #aUtilC ; "util.c"

loc_21F7C               ; ptr
LDR             R0, [R4,#0x274]
BL              free
LDR             R0, [R4,#0x28C] ; ptr
BL              free
LDR             R3, [SP,#0x292C+var_291C]
STR             R11, [R4,#0x28C]
MOV             R0, R3  ; s
STR             R3, [R4,#0x274]
BL              strlen
MOV             R3, R0,LSR#1
LDR             R0, [R4,#0x278] ; ptr
STR             R3, [R4,#0x62C]
BL              free
MOVW            R3, #0xDB8
MOVW            R2, #:lower16:aUtilC ; "util.c"
LDR             R0, [R4,#0x62C]
MOVT            R2, #:upper16:aUtilC ; "util.c"
STR             R3, [SP,#0x292C+var_292C]
MOV             R1, #1
LDR             R3, =aInitiateStratu_0 ; "initiate_stratum"
BL              sub_1F8B0
LDR             R2, [R4,#0x62C]
LDR             R1, [R4,#0x274]
STR             R0, [R4,#0x278]
BL              sub_1FB44
STR             R9, [R4,#0x288]
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_22AFC

loc_21FF4               ; mutex
LDR             R0, [SP,#0x292C+mutex]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_22AB8

loc_22004
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R11, #0
BEQ             loc_2209C
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2209C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2206C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2206C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2209C

loc_2206C
LDR             R12, [R4,#0x28C]
MOVW            R2, #:lower16:aPoolDStratumSe ; "Pool %d stratum session id: %s"
LDR             R3, [R4]
MOVT            R2, #:upper16:aPoolDStratumSe ; "Pool %d stratum session id: %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x292C+s ; s
STR             R12, [SP,#0x292C+var_292C]
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_2209C
LDR             R3, [R4,#0x240]
MOV             R0, #0
MOV             R1, #0
MOV             R12, #1
STRB            R12, [R4,#0x291]
CMP             R3, #0
LDREQ           R3, [R4,#0x268]
STREQ           R3, [R4,#0x240]
MOV             R3, #byte_72EC8
LDRB            R2, [R3]
ADD             R3, R4, #0x730
STRD            R0, R1, [R3,#-8]
MOV             R1, #0
MOV             R0, #0
MOVT            R1, #0x3FF0
CMP             R2, #0
STRD            R0, R1, [R3]
BEQ             loc_22174
MOV             R3, #byte_686E1
LDRB            R8, [R3]
CMP             R8, #0
MOVEQ           R8, R2
BEQ             loc_22174
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2213C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2213C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_22174

loc_2213C
LDR             R1, [R4,#0x288]
MOVW            R2, #:lower16:aPoolDConfirmed ; "Pool %d confirmed mining.subscribe with"...
LDR             R12, [R4,#0x274]
MOVT            R2, #:upper16:aPoolDConfirmed ; "Pool %d confirmed mining.subscribe with"...
LDR             R3, [R4]
ADD             R0, SP, #0x292C+s ; s
STR             R1, [SP,#0x292C+var_2928]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x292C+var_292C]
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_22174
LDR             R3, [R7,#4]
CMN             R3, #1
BEQ             loc_21E9C
ADD             R3, R7, #4
DMB             ISH

loc_22188
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_22188
CMP             R2, #0
BNE             loc_21E9C
MOV             R0, R7
BL              sub_4942C
MOV             R0, R8
ADD             SP, SP, #0x2900
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_221BC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_221F8
MOV             R3, #byte_686E0
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_221F8
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_225B4

loc_221F8
MOVW            R12, #:lower16:aFailedToSendSI ; "Failed to send s in initiate_stratum"
ADD             LR, SP, #0x292C+s
MOVT            R12, #:upper16:aFailedToSendSI ; "Failed to send s in initiate_stratum"
LDM             R12!, {R0-R3} ; "Failed to send s in initiate_stratum"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " in initiate_stratum"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "atum"
STR             R0, [LR],#4
MOV             R0, #7
STRB            R1, [LR]
ADD             R1, SP, #0x292C+s
BL              sub_1DD60

loc_22230
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_21E8C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_22BA4

loc_22250
MOVW            R12, #:lower16:aInitiateStratu ; "Initiate stratum failed"
ADD             LR, SP, #0x292C+s
MOVT            R12, #:upper16:aInitiateStratu ; "Initiate stratum failed"
LDM             R12!, {R0-R3} ; "Initiate stratum failed"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; " failed"
STM             LR, {R0,R1}
ADD             R1, SP, #0x292C+s
MOV             R0, #7
BL              sub_1DD60
B               loc_21E8C

loc_22280
MOV             R1, #0x3C ; '<'
LDR             R0, [R4,#0x24C]
BL              sub_1F294
CMP             R0, #0
BNE             loc_2235C
MOV             R4, #byte_686E1
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_21E8C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_222D0
MOV             R3, #byte_686E0
LDRB            R2, [R3]
CMP             R2, #0
BEQ             loc_225A0

loc_222D0
MOVW            LR, #:lower16:aTimedOutWaitin_0 ; "Timed out waiting for response in initi"...
ADD             R12, SP, #0x292C+s
MOVT            LR, #:upper16:aTimedOutWaitin_0 ; "Timed out waiting for response in initi"...
LDM             LR!, {R0-R3} ; "Timed out waiting for response in initi"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "g for response in initiate_stratum"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "n initiate_stratum"
LDR             LR, [LR] ; "um"
STM             R12!, {R0-R3}
ADD             R1, SP, #0x292C+s
MOV             R2, #0
MOV             R0, #7
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60
B               loc_22230

loc_22318
MOVW            R6, #:lower16:dword_72DBC
ADD             R5, SP, #0x292C+var_200C
MOVT            R6, #:upper16:dword_72DBC
MOVW            R0, #:lower16:byte_6A25C
LDR             R2, [R6]
MOVT            R0, #:upper16:byte_6A25C
ADD             R5, R5, #8
MOVW            R3, #:lower16:byte_6A35C
MOVW            R1, #:lower16:aIdDMethodMinin_0 ; "{\"id\": %d, \"method\": \"mining.subsc"...
STR             R0, [SP,#0x292C+var_292C]
ADD             R12, R2, #1
MOVT            R3, #:upper16:byte_6A35C
MOVT            R1, #:upper16:aIdDMethodMinin_0 ; "{\"id\": %d, \"method\": \"mining.subsc"...
MOV             R0, R5  ; s
STR             R12, [R6]
BL              sprintf
B               loc_21E40

loc_2235C
MOV             R0, R4
BL              sub_21850
SUBS            R9, R0, #0
BEQ             loc_22594
MOV             R1, R8
LDR             R2, [SP,#0x292C+mutex]
BL              sub_47C50
MOV             R7, R0
MOV             R0, R9  ; ptr
BL              free
CMP             R7, #0
BEQ             loc_2277C
MOV             R1, R11
MOV             R0, R7
BL              sub_48AF4
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R9, R0
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R7
BL              sub_48AF4
CMP             R9, #0
BEQ             loc_225D8
LDR             R3, [R9]
CMP             R3, #7
BEQ             loc_225D8
CMP             R0, #0
BEQ             loc_227F8
LDR             R3, [R0]
CMP             R3, #7
BEQ             loc_227F8

loc_223D4
MOV             R1, #3
BL              sub_45A6C
MOV             R8, R0

loc_223E0
MOV             R9, #byte_72D90
LDRB            R3, [R9]
CMP             R3, #0
BNE             loc_22610
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22610
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_22610

loc_2241C
LDR             R3, [SP,#0x292C+var_291C]
MOV             R0, R8  ; ptr
EOR             R3, R3, #1
STR             R3, [SP,#0x292C+var_291C]
BL              free

loc_22430
LDR             R3, [SP,#0x292C+var_291C]
CMP             R3, #0
BEQ             loc_22594
ADD             R8, R4, #0xD4
MOV             R0, R8  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2272C

loc_22450
ADD             R10, R4, #0xEC
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_226DC

loc_22464               ; ptr
LDR             R0, [R4,#0x28C]
BL              free
LDR             R0, [R4,#0x274] ; ptr
BL              free
MOV             R3, #0
MOV             R0, R10 ; rwlock
STR             R3, [R4,#0x274]
STR             R3, [R4,#0x28C]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2268C

loc_22490               ; mutex
MOV             R0, R8
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2263C

loc_224A0
MOVW            R3, #:lower16:off_67964
MOVW            R8, #:lower16:byte_686E1
MOVT            R3, #:upper16:off_67964
MOVT            R8, #:upper16:byte_686E1
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_2252C
LDRB            R3, [R9]
CMP             R3, #0
BNE             loc_224F8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_224F8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2252C

loc_224F8
MOVW            R12, #:lower16:aFailedToResume ; "Failed to resume stratum, trying afresh"
ADD             LR, SP, #0x292C+s
MOVT            R12, #:upper16:aFailedToResume ; "Failed to resume stratum, trying afresh"
LDM             R12!, {R0-R3} ; "Failed to resume stratum, trying afresh"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " stratum, trying afresh"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; " afresh"
STM             LR, {R0,R1}
ADD             R1, SP, #0x292C+s
MOV             R0, #7
BL              sub_1DD60

loc_2252C
CMP             R7, #0
BEQ             loc_2256C
LDR             R3, [R7,#4]
CMN             R3, #1
BEQ             loc_2256C
ADD             R3, R7, #4
DMB             ISH

loc_22548
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_22548
CMP             R2, #0
BNE             loc_2256C
MOV             R0, R7
BL              sub_4942C

loc_2256C
MOV             R0, R4
BL              sub_1F734
LDR             R2, [R6]
MOV             R1, #aIdDMethodMinin_1 ; "{\"id\": %d, \"method\": \"mining.subsc"...
MOV             R0, R5  ; s
ADD             R3, R2, #1
STR             R3, [R6]
BL              sprintf
B               loc_21E58

loc_22594
MOV             R4, #byte_686E1
B               loc_22230

loc_225A0
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BGT             loc_222D0

loc_225B4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22250
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_21E8C
B               loc_22250

loc_225D8
CMP             R0, #0
BNE             loc_223D4
MOV             R0, #0x11 ; size
BL              malloc
SUBS            R8, R0, #0
BEQ             loc_223E0
MOVW            R12, #:lower16:aUnknownReason ; "(unknown reason)"
MOV             LR, R8
MOVT            R12, #:upper16:aUnknownReason ; "(unknown reason)"
LDM             R12!, {R0-R3} ; "(unknown reason)"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
STRB            R12, [LR]
B               loc_223E0

loc_22610
MOVW            R2, #:lower16:aJsonRpcDecodeF ; "JSON-RPC decode failed: %s"
ADD             R0, SP, #0x292C+s ; s
MOVT            R2, #:upper16:aJsonRpcDecodeF ; "JSON-RPC decode failed: %s"
MOV             R3, R8
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_2241C

loc_2263C
BL              __errno_location
LDR             R12, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            LR, #0xDDB
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,R12}
STR             LR, [SP,#0x292C+var_2924]
ADD             R0, SP, #0x292C+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_224A0

loc_2268C
BL              __errno_location
LDR             R12, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            LR, #0xDDB
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,R12}
STR             LR, [SP,#0x292C+var_2924]
ADD             R0, SP, #0x292C+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_22490

loc_226DC
BL              __errno_location
LDR             R12, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            LR, #0xDD7
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,R12}
STR             LR, [SP,#0x292C+var_2924]
ADD             R0, SP, #0x292C+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_22464

loc_2272C
BL              __errno_location
LDR             R12, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            LR, #0xDD7
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,R12}
STR             LR, [SP,#0x292C+var_2924]
ADD             R0, SP, #0x292C+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_22450

loc_2277C
LDR             R3, [SP,#0x292C+var_291C]
MOV             R9, #byte_72D90
EOR             R3, R3, #1
STR             R3, [SP,#0x292C+var_291C]
LDRB            R3, [R9]
CMP             R3, #0
BNE             loc_227C4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_227C4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_22430

loc_227C4
ADD             R1, SP, #0x292C+var_28A4
MOVW            R2, #:lower16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
LDR             R3, [R5,#-0x8FC]
ADD             R0, SP, #0x292C+s ; s
STR             R1, [SP,#0x292C+var_292C]
MOVT            R2, #:upper16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_22430

loc_227F8
MOV             R1, #0
MOV             R0, R9
BL              sub_48E7C
SUBS            R3, R0, #0
STR             R3, [SP,#0x292C+var_2914]
BEQ             loc_22864
LDR             R3, [R3]
CMP             R3, #1
BNE             loc_22864
BL              sub_48E60
SUBS            R3, R0, #0
STR             R3, [SP,#0x292C+var_290C]
BLE             loc_22864
MOVW            R3, #:lower16:aMiningNotify ; "mining.notify"
MOV             R8, #0
MOVT            R3, #:upper16:aMiningNotify ; "mining.notify"
STR             R7, [SP,#0x292C+var_2908]
STR             R3, [SP,#0x292C+s2]

loc_22840
MOV             R1, R8
LDR             R0, [SP,#0x292C+var_2914]
BL              sub_48E7C
SUBS            R10, R0, #0
BEQ             loc_22860
LDR             R7, [R10]
CMP             R7, #1
BEQ             loc_229A4

loc_22860
LDR             R7, [SP,#0x292C+var_2908]

loc_22864
MOV             R8, #byte_686E1
LDRB            R10, [R8]
CMP             R10, #0
BEQ             loc_228EC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_228B4
MOV             R3, #byte_686E0
LDRB            R10, [R3]
CMP             R10, #0
BNE             loc_228B4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_228EC

loc_228B4
MOVW            R12, #:lower16:aFailedToGetSes ; "Failed to get sessionid in initiate_str"...
ADD             LR, SP, #0x292C+s
MOVT            R12, #:upper16:aFailedToGetSes ; "Failed to get sessionid in initiate_str"...
MOV             R10, #0
LDM             R12!, {R0-R3} ; "Failed to get sessionid in initiate_str"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ssionid in initiate_stratum"
STM             LR!, {R0-R3}
LDM             R12, {R0-R2} ; "ate_stratum"
STM             LR, {R0-R2}
ADD             R1, SP, #0x292C+s
MOV             R2, R10
MOV             R0, #7
BL              sub_1DD60

loc_228EC
MOV             R1, #1
MOV             R0, R9
BL              sub_1F38C
MOVW            R2, #0xD9D
LDR             R1, =aInitiateStratu_0 ; "initiate_stratum"
MOV             R8, R0
BL              sub_1F40C
SUBS            R3, R0, #0
BNE             loc_229DC
MOV             R9, #byte_72D90
LDRB            R3, [R9]
CMP             R3, #0
BNE             loc_2294C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2294C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2298C

loc_2294C
MOVW            LR, #:lower16:aFailedToGetVal ; "Failed to get valid nonce1 in initiate_"...
ADD             R12, SP, #0x292C+s
MOVT            LR, #:upper16:aFailedToGetVal ; "Failed to get valid nonce1 in initiate_"...
LDM             LR!, {R0-R3} ; "Failed to get valid nonce1 in initiate_"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "lid nonce1 in initiate_stratum"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "itiate_stratum"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x292C+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #6
STRB            LR, [R12]
BL              sub_1DD60

loc_2298C
LDR             R3, [SP,#0x292C+var_291C]
MOV             R0, R10 ; ptr
EOR             R3, R3, #1
STR             R3, [SP,#0x292C+var_291C]
BL              free
B               loc_22430

loc_229A4
MOV             R1, #0
BL              sub_1F328
CMP             R0, #0
MOV             R2, #0xD ; n
LDR             R1, [SP,#0x292C+s2] ; s2
BEQ             loc_229C8
BL              strncasecmp
CMP             R0, #0
BEQ             loc_22A9C

loc_229C8
LDR             R3, [SP,#0x292C+var_290C]
ADD             R8, R8, #1
CMP             R3, R8
BNE             loc_22840
B               loc_22860

loc_229DC
MOV             R1, #2
MOV             R0, R9
STR             R3, [SP,#0x292C+var_2914]
BL              sub_48E7C
BL              sub_49284
SUB             R2, R0, #2
LDR             R3, [SP,#0x292C+var_2914]
CMP             R2, #0xE
BLS             loc_21EAC
MOV             R9, #byte_72D90
LDRB            R3, [R9]
CMP             R3, #0
BNE             loc_22A3C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22A3C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_22A7C

loc_22A3C
MOVW            LR, #:lower16:aFailedToGetVal_0 ; "Failed to get valid n2size in initiate_"...
ADD             R12, SP, #0x292C+s
MOVT            LR, #:upper16:aFailedToGetVal_0 ; "Failed to get valid n2size in initiate_"...
LDM             LR!, {R0-R3} ; "Failed to get valid n2size in initiate_"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "lid n2size in initiate_stratum"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "itiate_stratum"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x292C+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #6
STRB            LR, [R12]
BL              sub_1DD60

loc_22A7C
LDR             R3, [SP,#0x292C+var_291C]
MOV             R0, R10 ; ptr
EOR             R3, R3, #1
STR             R3, [SP,#0x292C+var_291C]
BL              free
MOV             R0, R8  ; ptr
BL              free
B               loc_22430

loc_22A9C
MOV             R1, R7
MOV             R0, R10
LDR             R7, [SP,#0x292C+var_2908]
BL              sub_1F38C
SUBS            R10, R0, #0
BNE             loc_228EC
B               loc_22864

loc_22AB8
BL              __errno_location
MOVW            R3, #0xDBB
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R5,R6}
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R3, [SP,#0x292C+var_2924]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x292C+s ; s
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_22004

loc_22AFC
BL              __errno_location
MOVW            R3, #0xDBB
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R5,R6}
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R3, [SP,#0x292C+var_2924]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x292C+s ; s
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_21FF4

loc_22B40
LDR             R6, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R5, #:lower16:aUtilC ; "util.c"
BL              __errno_location
MOVT            R5, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0xDB1
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R5, [SP,#0x292C+var_292C]
STR             R6, [SP,#0x292C+var_2928]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R3, [SP,#0x292C+var_2924]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x292C+s ; s
BL              snprintf
ADD             R1, SP, #0x292C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_21F7C

loc_22B94
MOVW            R1, #0xDB1
LDR             R0, =aInitiateStratu_0 ; "initiate_stratum"
BL              sub_1F6D0
B               loc_21F5C

loc_22BA4
MOV             R3, #byte_686E0
B               loc_225B4
; End of function sub_21DDC

off_22BB0 DCD aInitiateStratu_0 ; "initiate_stratum"



; time_t __fastcall sub_22BB4(_DWORD *, int)
sub_22BB4
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
MOV             R0, #0  ; timer
BL              time
STR             R5, [R4,#0xF8]
STR             R0, [R4,#0xF4]
CMP             R5, #9  ; switch 10 cases
LDRLS           PC, [PC,R5,LSL#2] ; switch jump
B               def_22BD4 ; jumptable 00022BD4 default case
jpt_22BD4 DCD loc_22C14 ; jump table for switch statement
DCD loc_22C24
DCD loc_22C34
DCD loc_22C44
DCD loc_22C54
DCD loc_22C64
DCD loc_22C74
DCD loc_22C84
DCD loc_22C94
DCD loc_22C04

loc_22C04               ; jumptable 00022BD4 case 9
LDR             R3, [R4,#0x120]
ADD             R3, R3, #1
STR             R3, [R4,#0x120]

def_22BD4               ; jumptable 00022BD4 default case
POP             {R4-R6,PC}

loc_22C14               ; jumptable 00022BD4 case 0
LDR             R3, [R4,#0xFC]
ADD             R3, R3, #1
STR             R3, [R4,#0xFC]
POP             {R4-R6,PC}

loc_22C24               ; jumptable 00022BD4 case 1
LDR             R3, [R4,#0x100]
ADD             R3, R3, #1
STR             R3, [R4,#0x100]
POP             {R4-R6,PC}

loc_22C34               ; jumptable 00022BD4 case 2
LDR             R3, [R4,#0x104]
ADD             R3, R3, #1
STR             R3, [R4,#0x104]
POP             {R4-R6,PC}

loc_22C44               ; jumptable 00022BD4 case 3
LDR             R3, [R4,#0x108]
ADD             R3, R3, #1
STR             R3, [R4,#0x108]
POP             {R4-R6,PC}

loc_22C54               ; jumptable 00022BD4 case 4
LDR             R3, [R4,#0x10C]
ADD             R3, R3, #1
STR             R3, [R4,#0x10C]
POP             {R4-R6,PC}

loc_22C64               ; jumptable 00022BD4 case 5
LDR             R3, [R4,#0x110]
ADD             R3, R3, #1
STR             R3, [R4,#0x110]
POP             {R4-R6,PC}

loc_22C74               ; jumptable 00022BD4 case 6
LDR             R3, [R4,#0x114]
ADD             R3, R3, #1
STR             R3, [R4,#0x114]
POP             {R4-R6,PC}

loc_22C84               ; jumptable 00022BD4 case 7
LDR             R3, [R4,#0x118]
ADD             R3, R3, #1
STR             R3, [R4,#0x118]
POP             {R4-R6,PC}

loc_22C94               ; jumptable 00022BD4 case 8
LDR             R3, [R4,#0x11C]
ADD             R3, R3, #1
STR             R3, [R4,#0x11C]
POP             {R4-R6,PC}
; End of function sub_22BB4




; char *__fastcall sub_22CA4(char *, char *s)
sub_22CA4
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, R1  ; s
MOV             R6, R1
BL              strlen
CMP             R0, #0
MOVEQ           R4, R5
BEQ             loc_22D24
CMP             R5, #0
ADD             R4, R0, #1
BEQ             loc_22D2C
MOV             R0, R5  ; s
BL              strlen
ADD             R0, R0, R4
TST             R0, #3
BICNE           R0, R0, #3
MOVWNE          R1, #0xCFF0
ADDNE           R0, R0, #4
BEQ             loc_22D6C

loc_22CF0
MOVT            R1, #4
MOVW            R3, #0xE39
LDR             R2, =aReallocStrcat ; "realloc_strcat"
BL              sub_1F828
MOVW            R1, #:lower16:(aXDSS_0+4) ; "%s%s"
MOV             R4, R0
MOV             R3, R6
MOVT            R1, #:upper16:(aXDSS_0+4) ; format
MOV             R2, R5
MOV             R0, R4  ; s
BL              sprintf
MOV             R0, R5  ; ptr
BL              free

loc_22D24
MOV             R0, R4
POP             {R4-R6,PC}

loc_22D2C
TST             R4, #3
MOVW            R3, #0xE39
BICNE           R0, R4, #3
MOVWEQ          R1, #0xCFF0
MOVWNE          R1, #0xCFF0
MOVEQ           R0, R4
ADDNE           R0, R0, #4
LDR             R2, =aReallocStrcat ; "realloc_strcat"
MOVT            R1, #4
BL              sub_1F828
MOV             R4, R0
MOV             R1, R6  ; src
MOV             R0, R4  ; dest
BL              strcpy
MOV             R0, R4
POP             {R4-R6,PC}

loc_22D6C
MOVW            R1, #0xCFF0
B               loc_22CF0
; End of function sub_22CA4

off_22D74 DCD aReallocStrcat ; "realloc_strcat"



; char *__fastcall sub_22D78(const char *)
sub_22D78

var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R7,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
BEQ             loc_22E1C

loc_22D8C               ; s
MOV             R0, R4
MOVW            R6, #:lower16:a0x02x ; "0x%02x"
BL              strlen
MOV             R0, R0,LSL#2
MOV             R1, #aUtilC ; "util.c"
LDR             R2, =aStrText ; "str_text"
ADD             R0, R0, #5
MOVW            R3, #0xE57
BL              sub_1F828
SUB             R5, R4, #1
MOV             R7, R0
MOV             R4, R0
MOVT            R6, #:upper16:a0x02x ; "0x%02x"
B               loc_22DD4

loc_22DC8
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_22E08

loc_22DD4
LDRB            R2, [R5,#1]!
SUB             R3, R2, #0x20 ; ' '
CMP             R3, #0x5E ; '^'
STRBLS          R2, [R4]
ADDLS           R4, R4, #1
BLS             loc_22DC8
MOV             R0, R4  ; s
MOV             R1, R6  ; format
BL              sprintf
LDRB            R3, [R5]
ADD             R4, R4, #4
CMP             R3, #0
BNE             loc_22DD4

loc_22E08
MOV             R0, R7
STRB            R3, [R4]
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_22E1C               ; size
MOV             R0, #7
BL              malloc
SUBS            R2, R0, #0
BEQ             loc_22E4C
MOV             R3, #aNull_0 ; "(null)"
LDM             R3, {R0,R1} ; "(null)"
STR             R0, [R2]
MOV             R3, R1,LSR#16
STRH            R1, [R2,#4]
STRB            R3, [R2,#6]
B               loc_22D8C

loc_22E4C
LDR             R1, =aStrText ; "str_text"
MOVW            R0, #0xE52
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aFailedToMalloc_0 ; "Failed to malloc null in %s %s():%d"
STR             R0, [SP,#0x80C+var_808]
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R1, [SP,#0x80C+var_80C]
ADD             R0, SP, #0x80C+s ; s
MOVT            R2, #:upper16:aFailedToMalloc_0 ; "Failed to malloc null in %s %s():%d"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_22D78

B               loc_22D8C
off_22E94 DCD aStrText  ; "str_text"



; int __fastcall sub_22E98(const char *)
sub_22E98

var_1C= -0x1C
s= -0x14

PUSH            {LR}
MOVW            R2, #:lower16:aCgS ; "cg@%s"
SUB             SP, SP, #0x1C
MOV             R3, R0
MOVT            R2, #:upper16:aCgS ; "cg@%s"
ADD             R0, SP, #0x1C+s ; s
MOV             R1, #0x10 ; maxlen
BL              snprintf
MOV             R3, #0
ADD             R1, SP, #0x1C+s
STR             R3, [SP,#0x1C+var_1C]
MOV             R2, R3
MOV             R0, #0xF ; option
BL              prctl
ADD             SP, SP, #0x1C
POP             {PC}
; End of function sub_22E98




; int __fastcall sub_22ED8(sem_t *, const char *, const char *, int)
sub_22ED8

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4-R7,LR}
MOV             R6, R2
SUB             SP, SP, #0x810
MOV             R2, #0  ; value
SUB             SP, SP, #4
MOV             R5, R1
MOV             R1, R2  ; pshared
MOV             R7, R3
BL              sem_init
SUBS            R4, R0, #0
BEQ             loc_22F48
BL              __errno_location
STRD            R6, R7, [SP,#0x814+var_80C]
MOVW            R2, #:lower16:aFailedToSemIni ; "Failed to sem_init ret=%d errno=%d in %"...
STR             R5, [SP,#0x814+var_810]
MOV             R3, R4
LDR             R12, [R0]
MOVT            R2, #:upper16:aFailedToSemIni ; "Failed to sem_init ret=%d errno=%d in %"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x814+s ; s
STR             R12, [SP,#0x814+var_814]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x814+s
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC

loc_22F48
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}
; End of function sub_22ED8




; int __fastcall sub_22F54(int, const pthread_attr_t *, void *(*)(void *), void *)
sub_22F54
PUSH            {R4-R8,LR}
MOV             R5, R1
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOV             R4, R0
MOV             R6, R2
MOV             R7, R3
ADD             R0, R0, #0x10
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0x4A5
LDR             R2, =aThrInfoCreate ; "thr_info_create"
BL              sub_22ED8
MOV             R3, R7  ; arg
MOV             R2, R6  ; start_routine
MOV             R1, R5  ; attr
ADD             R0, R4, #0xC ; newthread
POP             {R4-R8,LR}
B               pthread_create
; End of function sub_22F54

off_22F98 DCD aThrInfoCreate ; "thr_info_create"



; int __fastcall sub_22F9C(sem_t *, const char *, const char *, int)
sub_22F9C
PUSH            {R4-R8,LR}
MOV             R5, R1
MOV             R6, R2
MOV             R7, R3
MOV             R4, R0
BL              sem_post
CMP             R0, #0
POPEQ           {R4-R8,PC}
MOV             R3, R7
MOV             R2, R6
MOV             R1, R5
MOV             R0, R4
POP             {R4-R8,LR}
B               sub_1F3A4
; End of function sub_22F9C




; int __fastcall sub_22FD4(int)
sub_22FD4
PUSH            {R4,LR}
MOV             R1, #0  ; oldtype
MOV             R4, R0
MOV             R0, #1  ; type
BL              pthread_setcanceltype
LDR             R3, [R4,#0x10]
LDR             R0, [R4,#0x14]
BLX             R3
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOV             R0, R4
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0xF39
LDR             R2, =aCompletionThre ; "completion_thread"
BL              sub_22F9C
MOV             R0, #0
POP             {R4,PC}
; End of function sub_22FD4

off_23014 DCD aCompletionThre ; "completion_thread"



; int __fastcall sub_23018(sem_t *sem, const char *, const char *, int)
sub_23018

var_808= -0x808
s= -0x804

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R0
MOV             R5, R1
MOV             R6, R2
MOV             R7, R3

loc_23034               ; sem
MOV             R0, R4
BL              sem_wait
CMP             R0, #0
BNE             loc_23050

loc_23044
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_23050
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_23034
MOVW            R2, #:lower16:aFailedToSemWai ; "Failed to sem_wait errno=%d cgsem=0x%p "...
STR             R7, [SP,#0x814+var_808]
STMEA           SP, {R4-R6}
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aFailedToSemWai ; "Failed to sem_wait errno=%d cgsem=0x%p "...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_23018



; Attributes: thunk

sub_23094
B               loc_23044
; End of function sub_23094




; int __fastcall sub_23098(sem_t *, int, const char *, const char *, int)
sub_23098

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_810= -0x810
abstime= -0x80C
tp= -0x804
arg_0=  0x24

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x820
SUB             SP, SP, #4
MOV             R10, R1
MOV             R9, R0
ADD             R1, SP, #0x824+tp ; tp
MOV             R0, #1  ; clock_id
STR             R2, [SP,#0x824+var_810]
MOV             R11, R3
MOVW            R6, #0xC9FF
BL              clock_gettime
LDR             R1, [SP,#0x824+tp.tv_nsec]
MOV             R2, #0x10624DD3
MOV             R5, #0x3E8
MOV             R4, #0xCA00
MOV             R7, #0x3600
MOV             R8, #0x6C00
ADD             R0, SP, #0x824+abstime
SMULL           R2, R3, R1, R2
MOV             R1, R1,ASR#31
MOV             R2, R10
MOVT            R6, #0x3B9A
MOVT            R4, #0x3B9A
MOVT            R7, #0xC465
MOVT            R8, #0x88CA
RSB             R1, R1, R3,ASR#6
MOV             R3, R10,ASR#31
LDR             R10, [SP,#0x824+tp]
MUL             R5, R5, R1
BL              sub_20464

loc_23114
LDRD            R2, R3, [SP,#0x824+abstime]
ADD             R3, R5, R3
ADD             R2, R10, R2
CMP             R3, R6
STRD            R2, R3, [SP,#0x824+abstime]
BLE             loc_23174
ADD             R1, R3, R7
ADD             R0, R2, #1
CMP             R1, R6
ADDGT           R1, R3, R8
ADDGT           R0, R2, #2
STRD            R0, R1, [SP,#0x824+abstime]

loc_23144               ; abstime
ADD             R1, SP, #0x824+abstime
MOV             R0, R9  ; sem
BL              sem_timedwait
CMP             R0, #0
BEQ             loc_23168
BL              __errno_location
LDR             R0, [R0]
CMP             R0, #0x6E ; 'n'
BNE             loc_23190

loc_23168
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_23174
CMP             R3, #0
BGE             loc_23144

loc_2317C
ADDS            R3, R3, R4
SUB             R2, R2, #1
BMI             loc_2317C
STRD            R2, R3, [SP,#0x824+abstime]
B               loc_23144

loc_23190
CMP             R0, #4
BEQ             loc_23114
LDR             R3, [SP,#0x824+arg_0]
MOVW            R2, #:lower16:aFailedToSemTim ; "Failed to sem_timedwait errno=%d cgsem="...
LDR             R1, [SP,#0x824+var_810]
MOVT            R2, #:upper16:aFailedToSemTim ; "Failed to sem_timedwait errno=%d cgsem="...
STR             R11, [SP,#0x824+var_81C]
STR             R3, [SP,#0x824+var_818]
MOV             R3, R0
STR             R1, [SP,#0x824+var_820]
ADD             R0, SP, #0x824+tp ; s
MOV             R1, #0x800 ; maxlen
STR             R9, [SP,#0x824+var_824]
BL              snprintf
ADD             R1, SP, #0x824+tp
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_23098




; void sub_231E0()
sub_231E0
MOV             R0, #0
B               loc_23168
; End of function sub_231E0




; int *__fastcall sub_231E8(sem_t *sem)
sub_231E8
PUSH            {R4,LR}
MOV             R4, R0
B               loc_231F8

locret_231F4
POPNE           {R4,PC}

loc_231F8               ; sem
MOV             R0, R4
BL              sem_trywait
CMP             R0, #0
BGE             locret_231F4
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
POPNE           {R4,PC}
B               loc_231F8
; End of function sub_231E8

; [00000004 BYTES: COLLAPSED FUNCTION j_sem_destroy]



; bool __fastcall sub_23220(int, int, int)
sub_23220

var_14= -0x14
newthread= -8

PUSH            {R4-R7,LR}
MOV             R6, R1
MOVW            R1, #:lower16:aUtilC ; "util.c"
SUB             SP, SP, #0x14
MOV             R5, R2
MOV             R7, R0
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0xF44
LDR             R2, =aCgCompletionTi ; "cg_completion_timeout"
MOV             R0, #0x18
BL              sub_1F828
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R3, #0xF45
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R2, =aCgCompletionTi ; "cg_completion_timeout"
MOV             R4, R0
BL              sub_22ED8
MOVW            R2, #:lower16:sub_22FD4
MOV             R3, R4  ; arg
MOVT            R2, #:upper16:sub_22FD4 ; start_routine
MOV             R1, #0  ; attr
STR             R7, [R4,#0x10]
ADD             R0, SP, #0x14+newthread ; newthread
STR             R6, [R4,#0x14]
BL              pthread_create
MOVW            R3, #0xF4B
MOVW            R2, #:lower16:aUtilC ; "util.c"
MOV             R1, R5
STR             R3, [SP,#0x14+var_14]
MOV             R0, R4
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aCgCompletionTi ; "cg_completion_timeout"
BL              sub_23098
SUBS            R5, R0, #0
BEQ             loc_232C4
LDR             R0, [SP,#0x14+newthread] ; th
BL              pthread_cancel
CLZ             R0, R5
MOV             R0, R0,LSR#5
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_232C4               ; thread_return
MOV             R1, R5
LDR             R0, [SP,#0x14+newthread] ; th
BL              pthread_join
MOV             R0, R4  ; ptr
BL              free
CLZ             R0, R5
MOV             R0, R0,LSR#5
ADD             SP, SP, #0x14
POP             {R4-R7,PC}
; End of function sub_23220

off_232E8 DCD aCgCompletionTi ; "cg_completion_timeout"



; void __fastcall sub_232EC(void *, const void *, size_t, int, int, int)
sub_232EC

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800
arg_0=  0x10
arg_4=  0x14

CMP             R2, #1
PUSH            {R4-R6,LR}
SUB             SP, SP, #0x810
MOV             R12, R2
MOV             R4, R3
LDR             R5, [SP,#0x810+arg_0]
LDR             R6, [SP,#0x810+arg_4]
BMI             loc_2332C
CMP             R0, #0
BEQ             loc_233A4
CMP             R1, #0
MOV             LR, R1
BEQ             loc_23400
ADD             SP, SP, #0x810
POP             {R4-R6,LR}
B               memcpy

loc_2332C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23368
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23368
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2339C

loc_23368
MOVW            R2, #:lower16:aErrAskedToMemc ; "ERR: Asked to memcpy %u bytes from %s %"...
MOV             R3, R12
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aErrAskedToMemc ; "ERR: Asked to memcpy %u bytes from %s %"...
STR             R6, [SP,#0x810+var_808]
STR             R5, [SP,#0x810+var_80C]
STR             R4, [SP,#0x810+var_810]

loc_23384               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_2339C
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_233A4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_233E0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_233E0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2339C

loc_233E0
MOVW            R2, #:lower16:aErrAskedToMemc_0 ; "ERR: Asked to memcpy %u bytes to NULL f"...
STR             R6, [SP,#0x810+var_808]
MOV             R3, R12
STR             R5, [SP,#0x810+var_80C]
ADD             R0, SP, #0x810+s
STR             R4, [SP,#0x810+var_810]
MOVT            R2, #:upper16:aErrAskedToMemc_0 ; "ERR: Asked to memcpy %u bytes to NULL f"...
B               loc_23384

loc_23400
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2343C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2343C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2339C

loc_2343C
MOVW            R2, #:lower16:aErrAskedToMemc_1 ; "ERR: Asked to memcpy %u bytes from NULL"...
STR             R6, [SP,#0x810+var_808]
MOV             R3, R12
STR             R5, [SP,#0x810+var_80C]
ADD             R0, SP, #0x810+s
STR             R4, [SP,#0x810+var_810]
MOVT            R2, #:upper16:aErrAskedToMemc_1 ; "ERR: Asked to memcpy %u bytes from NULL"...
B               loc_23384
; End of function sub_232EC

PUSH            {R4,LR}
SUB             SP, SP, #0x28 ; '('
MOV             R3, #0
MOV             R4, R0
ADD             R0, SP, #0xC
STR             R3, [SP,#0x10]
STR             R3, [SP,#0xC]
STR             R3, [SP,#0x14]
STR             R3, [SP,#0x18]
STR             R3, [SP,#0x1C]
STR             R3, [SP,#0x20]
STRB            R3, [SP,#0x24]
BL              sub_1FCE8
LDR             R12, =aAddressToPubke ; "address_to_pubkeyhash"
MOV             R3, #0x76 ; 'v'
STRB            R3, [R4]
MOV             R2, #0x14
MOV             R0, #0xFFFFFFA9
MOV             R1, #0x3C4
MOVW            R3, #:lower16:aUtilC ; "util.c"
STRB            R0, [R4,#1]
STRB            R2, [R4,#2]
ADD             R0, R4, #3
STR             R1, [SP,#4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R12, [SP]
ADD             R1, SP, #0xD
BL              sub_232EC
MOV             R2, #0xFFFFFF88
MOV             R3, #0xFFFFFFAC
STRB            R2, [R4,#0x17]
STRB            R3, [R4,#0x18]
ADD             SP, SP, #0x28 ; '('
POP             {R4,PC}
off_234E4 DCD aAddressToPubke ; "address_to_pubkeyhash"
PUSH            {R4-R8,LR}
SUB             SP, SP, #8
LDR             R6, =aSerString ; "ser_string"
MOV             R7, R1
MOV             R8, R0
BL              strlen
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOV             R4, R0
MOV             R2, R6
ADD             R0, R0, #9
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0x3E2
BL              sub_1F828
CMP             R4, #0xFC
MOV             R5, R0
BLS             loc_235C0
CMP             R4, #0x10000
BCC             loc_23578
MOV             R3, #0xFFFFFFFE
REV             R2, R4
STRB            R3, [R5]
MOVW            R0, #0x3F9
MOVW            R3, #:lower16:aUtilC ; "util.c"
STR             R2, [R5,#1]
MOV             R1, R8
MOV             R2, R4
STR             R0, [SP,#4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
ADD             R0, R5, #5
STR             R6, [SP]
ADD             R4, R4, #5
BL              sub_232EC
MOV             R0, R5
STR             R4, [R7]
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_23578
MOV             R3, #0xFFFFFFFD
REV16           R2, R4
STRB            R3, [R5]
MOVW            R0, #0x3EF
MOVW            R3, #:lower16:aUtilC ; "util.c"
STRH            R2, [R5,#1]
MOV             R1, R8
MOV             R2, R4
STR             R0, [SP,#4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
ADD             R0, R5, #3
STR             R6, [SP]
ADD             R4, R4, #3
BL              sub_232EC
MOV             R0, R5
STR             R4, [R7]
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_235C0
MOVW            R2, #0x3E6
MOVW            R3, #:lower16:aUtilC ; "util.c"
STRB            R4, [R0],#1
MOV             R1, R8
STR             R2, [SP,#4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOV             R2, R4
STR             R6, [SP]
ADD             R4, R4, #1
BL              sub_232EC
MOV             R0, R5
STR             R4, [R7]
ADD             SP, SP, #8
POP             {R4-R8,PC}
off_235F8 DCD aSerString ; "ser_string"



; void __fastcall sub_235FC(void *, const void *)
sub_235FC

var_C= -0xC
var_8= -8

LDR             R12, =aCopyTime ; "copy_time"
MOVW            R2, #0x4D2
PUSH            {LR}
MOVW            R3, #:lower16:aUtilC ; "util.c"
SUB             SP, SP, #0xC
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R2, [SP,#0xC+var_8]
MOV             R2, #8
STR             R12, [SP,#0xC+var_C]
BL              sub_232EC
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_235FC

off_2362C DCD aCopyTime ; "copy_time"


; Attributes: bp-based frame fpd=0xFFFFFFE0

; int __fastcall sub_23630(int, _DWORD *)
sub_23630

var_95C= -0x95C
var_958= -0x958
var_954= -0x954
var_950= -0x950
var_94C= -0x94C
var_948= -0x948
var_944= -0x944
var_940= -0x940
var_93C= -0x93C
var_938= -0x938
var_934= -0x934
var_930= -0x930
var_92C= -0x92C
var_928= -0x928
var_924= -0x924
var_920= -0x920
var_91C= -0x91C
var_918= -0x918
var_914= -0x914
var_910= -0x910
tv= -0x90C
var_908= -0x908
var_904= -0x904
var_900= -0x900
var_8FC= -0x8FC
s= -0x8F8
ptr= -0x8F4
var_8F0= -0x8F0
var_8E8= -0x8E8
var_8E0= -0x8E0
var_804= -0x804
var_7E0= -0x7E0
var_7DC= -0x7DC
var_7D8= -0x7D8
var_7D4= -0x7D4
var_7D0= -0x7D0
var_7CE= -0x7CE

PUSH            {R4-R11,LR}
MOV             R8, R1
ADD             R11, SP, #0x20
SUB             SP, SP, #0x950
SUB             SP, SP, #0xC
MOV             R10, R0
MOV             R1, #4
MOV             R0, R8
BL              sub_48E7C
SUBS            R5, R0, #0
BEQ             loc_23668
LDR             R3, [R5]
CMP             R3, #1
BEQ             loc_23678

loc_23668
MOV             R6, #0

loc_2366C
MOV             R0, R6
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_23678
BL              sub_48E60
SUBS            R9, R0, #0
BLE             loc_23800
MOV             R4, #0
MOV             R6, R4
B               loc_236A0

loc_23690
ADD             R4, R4, #1
BL              free
CMP             R9, R4
BEQ             loc_23804

loc_236A0
SUB             R0, R11, #-(-0x20+var_8E0)
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
SUB             R0, R0, #8 ; s
BL              memset
MOV             R1, R4
MOV             R0, R5
BL              sub_1F38C
SUBS            R7, R0, #0
SUB             R0, R11, #-(-0x20+var_8E0)
MOV             R2, #0x20 ; ' '
MOV             R1, R7
SUB             R0, R0, #8
BEQ             loc_2366C
BL              sub_1FB44
SUBS            R6, R0, #0
MOV             R0, R7  ; ptr
BNE             loc_23690
MOV             R5, #byte_72D90
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_23710
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_237E8

loc_23710
SUB             R3, R11, #-(-0x20+var_804+4)
MOVW            R2, #:lower16:aMerkleDS ; "merkle %d: %s"
SUB             R3, R3, #4
MOVT            R2, #:upper16:aMerkleDS ; "merkle %d: %s"
MOV             R1, R3
STR             R3, [R11,#-0x20+var_8F0]
MOV             R0, R1  ; s
MOV             R3, R4
STR             R7, [SP,#0x95C+var_95C]
MOV             R4, R1
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_23790
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23790
MOV             R3, #dword_67840

loc_23778
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_237DC
SUB             R3, R11, #-(-0x20+var_804+4)
SUB             R3, R3, #4
STR             R3, [R11,#-0x20+var_8F0]

loc_23790
MOVW            LR, #:lower16:aFailedToConver ; "Failed to convert merkle to merkle_bin "...
LDR             R4, [R11,#-0x20+var_8F0]
MOVT            LR, #:upper16:aFailedToConver ; "Failed to convert merkle to merkle_bin "...
LDM             LR!, {R0-R3} ; "Failed to convert merkle to merkle_bin "...
MOV             R12, R4
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "t merkle to merkle_bin in parse_notify"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "le_bin in parse_notify"
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1} ; "notify"
STR             R0, [R12],#4
MOV             R0, #3
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R4
STRB            R3, [R12]
BL              sub_1DD60

loc_237DC               ; ptr
MOV             R0, R7
BL              free
B               loc_2366C

loc_237E8
MOV             R3, #dword_67840
LDR             R2, [R3]
CMP             R2, #2
BLE             loc_23778
B               loc_23710

loc_23800
MOV             R6, #0

loc_23804
MOV             R1, #0
MOV             R0, R8
BL              sub_1F38C
MOV             R1, #1
MOV             R7, R0
MOV             R0, R8
MOVW            R4, #:lower16:byte_6A7DD
BL              sub_1F328
MOV             R1, #2
STR             R0, [R11,#-0x20+var_8FC]
MOV             R0, R8
MOVT            R4, #:upper16:byte_6A7DD
BL              sub_1F38C
MOV             R1, #3
STR             R0, [R11,#-0x20+ptr]
MOV             R0, R8
BL              sub_1F38C
MOV             R1, #5
STR             R0, [R11,#-0x20+s]
MOV             R0, R8
BL              sub_1F328
MOV             R1, #6
STR             R0, [R11,#-0x20+var_900]
MOV             R0, R8
BL              sub_1F328
MOV             R1, #7
STR             R0, [R11,#-0x20+var_904]
MOV             R0, R8
BL              sub_1F328
MOV             R2, #0x10 ; base
MOV             R1, #0  ; endptr
STR             R0, [R11,#-0x20+var_908]
BL              strtol
LDRB            R3, [R4]
EOR             R3, R3, #1
CMP             R0, #0
MOVEQ           R3, #0
ANDNE           R3, R3, #1
CMP             R3, #0
BNE             loc_23B98

loc_238A4
MOV             R1, #8
MOV             R0, R8
BL              sub_48E7C
SUBS            R4, R0, #0
STREQ           R4, [R11,#-0x20+tv]
BEQ             loc_238DC
MOV             R0, R8
MOV             R1, #8
BL              sub_48E7C
LDR             R4, [R0]
SUB             R4, R4, #5
CLZ             R4, R4
MOV             R4, R4,LSR#5
STR             R4, [R11,#-0x20+tv]

loc_238DC
CMP             R7, #0
BEQ             loc_23C70
MOV             R0, R7  ; s
BL              strlen
CMP             R0, #0
MOVNE           R2, R7
BNE             loc_23904
B               loc_23CE0

loc_238FC
CMP             R0, R12
BLE             loc_239B8

loc_23904
LDRB            R3, [R2],#1
SUB             R1, R3, #0x20 ; ' '
SUB             R12, R2, R7
CMP             R1, #0x5E ; '^'
BLS             loc_238FC
MOV             R2, #byte_72D90
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_23954
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_23954
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #2
BLE             loc_2399C

loc_23954
LDR             R0, =aParseNotify ; "parse_notify"
MOV             R1, #aUtilC ; "util.c"
MOVW            R12, #0x7EB
MOVW            R2, #:lower16:aInvalidChar0xX_0 ; "Invalid char 0x%x passed to valid_ascii"...
STR             R1, [SP,#0x95C+var_95C]
STR             R0, [SP,#0x95C+var_958]
SUB             R0, R11, #-(-0x20+var_804+4)
SUB             R0, R0, #4 ; s
STR             R12, [SP,#0x95C+var_954]
MOVT            R2, #:upper16:aInvalidChar0xX_0 ; "Invalid char 0x%x passed to valid_ascii"...
MOV             R1, #0x800 ; maxlen
BL              snprintf

loc_23988
SUB             R1, R11, #-(-0x20+var_804+4)
MOV             R2, #0
SUB             R1, R1, #4
MOV             R0, #3
BL              sub_1DD60

loc_2399C               ; ptr
MOV             R0, R7
BL              free
LDR             R0, [R11,#-0x20+ptr] ; ptr
BL              free
LDR             R0, [R11,#-0x20+s] ; ptr
BL              free
B               loc_2366C

loc_239B8
LDR             R8, =aParseNotify ; "parse_notify"
MOVW            R2, #0x7EB
LDR             R0, [R11,#-0x20+var_8FC]
MOV             R1, R8
BL              sub_1F40C
CMP             R0, #0
BEQ             loc_2399C
MOVW            R2, #0x7EB
MOV             R1, R8
LDR             R0, [R11,#-0x20+ptr]
BL              sub_1F40C
CMP             R0, #0
BEQ             loc_2399C
MOVW            R2, #0x7EC
MOV             R1, R8
LDR             R0, [R11,#-0x20+s]
BL              sub_1F40C
CMP             R0, #0
BEQ             loc_2399C
MOVW            R2, #0x7EC
MOV             R1, R8
LDR             R0, [R11,#-0x20+var_900]
BL              sub_1F40C
CMP             R0, #0
BEQ             loc_2399C
MOVW            R2, #0x7EC
MOV             R1, R8
LDR             R0, [R11,#-0x20+var_904]
BL              sub_1F40C
CMP             R0, #0
BEQ             loc_2399C
MOVW            R2, #0x7ED
MOV             R1, R8
LDR             R0, [R11,#-0x20+var_908]
BL              sub_1F40C
CMP             R0, #0
BEQ             loc_2399C
ADD             R3, R10, #0xD4
MOV             R0, R3  ; mutex
STR             R3, [R11,#-0x20+var_930]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_24730

loc_23A64
ADD             R3, R10, #0xEC
MOVW            R2, #0x7F6
MOV             R0, R3
LDR             R1, =aParseNotify ; "parse_notify"
STR             R3, [R11,#-0x20+var_934]
BL              sub_1F55C
ADD             R3, R10, #0x6C0
LDR             R0, [R10,#0x2B0] ; ptr
MOV             R6, R3
STR             R3, [R11,#-0x20+var_91C]
BL              free
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R1, #0x41 ; 'A' ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
LDR             R3, [R11,#-0x20+var_8FC]
MOV             R0, R6  ; s
STR             R7, [R10,#0x2B0]
BL              snprintf
LDR             R0, [R11,#-0x20+ptr] ; s
ADD             R6, R10, #0x700
BL              strlen
MOV             R3, R0,LSR#1
LDR             R0, [R11,#-0x20+s] ; s
STR             R3, [R11,#-0x20+var_8F0]
BL              strlen
MOV             R1, R0,LSR#1
ADD             R3, R6, #4
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
STR             R3, [R11,#-0x20+var_920]
STR             R1, [R11,#-0x20+var_910]
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R0, R3  ; s
MOV             R1, #9  ; maxlen
LDR             R3, [R11,#-0x20+var_900]
BL              snprintf
ADD             R3, R10, #0x710
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R0, R3  ; s
STR             R3, [R11,#-0x20+var_924]
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
LDR             R3, [R11,#-0x20+var_904]
MOV             R1, #9  ; maxlen
MOV             R6, R0
BL              snprintf
ADD             R3, R6, #0xC
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
STR             R3, [R11,#-0x20+var_928]
MOV             R0, R3  ; s
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
LDR             R3, [R11,#-0x20+var_908]
MOV             R1, #9  ; maxlen
BL              snprintf
ADD             R3, R10, #0x730
STRB            R4, [R10,#0x2B8]
VLDR            D7, [R3,#-8]
MOV             R4, #0
LDR             R1, [R11,#-0x20+var_8F0]
VCMPE.F64       D7, #0.0
VMRS            APSR_nzcv, FPSCR
VSTRGT          D7, [R3]
LDR             R3, [R10,#0x62C]
LDR             R2, [R10,#0x288]
ADD             R3, R1, R3
LDR             R1, [R11,#-0x20+var_910]
STR             R3, [R10,#0x638]
ADD             R2, R1, R2
ADD             R3, R2, R3
STR             R3, [R11,#-0x20+var_92C]
STR             R3, [R10,#0x634]

loc_23B78
LDR             R3, [R10,#0x6BC]
CMP             R3, R4
BLE             loc_23D48
LDR             R3, [R10,#0x2B4]
LDR             R0, [R3,R4,LSL#2] ; ptr
ADD             R4, R4, #1
BL              free
B               loc_23B78

loc_23B98
SUB             R3, R11, #-(-0x20+var_8E0)
STR             R0, [R11,#-0x20+var_8F0]
SUB             R3, R3, #4
MOV             R2, R3
MOV             R3, #0
STR             R3, [R2],#-4
MOV             R1, R3  ; tz
MOV             R0, R2  ; tv
STR             R2, [R11,#-0x20+tv]
STR             R3, [R11,#-0x20+var_8E8]
BL              gettimeofday
LDR             R1, [R11,#-0x20+var_8E8]
MOV             R3, #0
LDR             R2, [R11,#-0x20+var_8F0]
CMP             R2, R1
BLS             loc_238A4
MOV             R1, R3  ; tz
LDR             R0, [R11,#-0x20+tv] ; tv
STR             R2, [R11,#-0x20+var_8E8]
BL              settimeofday
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23C24
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23C24
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_23C64

loc_23C24
MOVW            R12, #:lower16:aSettimeNotifyN ; "settime notify.ntime successfuly"
SUB             R3, R11, #-(-0x20+var_804+4)
SUB             R3, R3, #4
MOVT            R12, #:upper16:aSettimeNotifyN ; "settime notify.ntime successfuly"
STR             R3, [R11,#-0x20+var_8F0]
MOV             LR, R3
LDM             R12!, {R0-R3} ; "settime notify.ntime successfuly"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "time successfuly"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
MOV             R2, #0
LDR             R1, [R11,#-0x20+var_8F0]
MOV             R0, #5
STRB            R12, [LR]
BL              sub_1DD60

loc_23C64
MOV             R3, #1
STRB            R3, [R4]
B               loc_238A4

loc_23C70
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23CAC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23CAC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2399C

loc_23CAC
MOVW            R0, #0x7EB
LDR             R1, =aParseNotify ; "parse_notify"
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aNullStringPass_0 ; "Null string passed to valid_ascii from "...
STR             R0, [SP,#0x95C+var_958]
SUB             R0, R11, #-(-0x20+var_804+4)
SUB             R0, R0, #4 ; s
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVT            R2, #:upper16:aNullStringPass_0 ; "Null string passed to valid_ascii from "...
STR             R1, [SP,#0x95C+var_95C]

loc_23CD4               ; maxlen
MOV             R1, #0x800
BL              snprintf
B               loc_23988

loc_23CE0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23D1C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23D1C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2399C

loc_23D1C
LDR             R1, =aParseNotify ; "parse_notify"
MOVW            R0, #0x7EB
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aZeroLengthStri ; "Zero length string passed to valid_asci"...
STR             R0, [SP,#0x95C+var_958]
SUB             R0, R11, #-(-0x20+var_804+4)
STR             R1, [SP,#0x95C+var_95C]
SUB             R0, R0, #4
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVT            R2, #:upper16:aZeroLengthStri ; "Zero length string passed to valid_asci"...
B               loc_23CD4

loc_23D48
CMP             R9, #0
BNE             loc_245C8
MOVW            R3, #:lower16:byte_72EC8
STR             R9, [R10,#0x6BC]
MOVT            R3, #:upper16:byte_72EC8
STR             R3, [R11,#-0x20+var_914]

loc_23D60
LDR             R3, [R10,#0x178]
LDR             R1, [R10,#0x17C]
ADDS            R3, R3, #1
ADC             R1, R1, #0
STR             R3, [R10,#0x178]
STR             R1, [R10,#0x17C]

loc_23D78
LDR             R3, [R11,#-0x20+tv]
CMP             R3, #0
ADDNE           R3, R10, #0x280
MOVNE           R0, #0
MOVNE           R1, #0
STRDNE          R0, R1, [R3]
LDR             R2, [R11,#-0x20+var_924]
MOV             R3, #off_68290 ; "000000800000000000000000000000000000000"...
MOV             R0, #(a00000000000000+0x38) ; "00000000"
MOVW            R1, #:lower16:a00000000000000 ; "000000000000000000000000000000000000000"...
STR             R2, [SP,#0x95C+var_950]
MOVT            R1, #:upper16:a00000000000000 ; "000000000000000000000000000000000000000"...
LDR             R12, [R3] ; "000000800000000000000000000000000000000"... ...
MOVW            R2, #:lower16:aSSSSSSS ; "%s%s%s%s%s%s%s"
LDR             R3, [R11,#-0x20+var_928]
MOVT            R2, #:upper16:aSSSSSSS ; "%s%s%s%s%s%s%s"
STR             R0, [SP,#0x95C+var_94C]
SUB             R0, R11, #-(-0x20+var_8E0)
STR             R12, [SP,#0x95C+var_948]
SUB             R0, R0, #8 ; s
STR             R3, [SP,#0x95C+var_954]
LDR             R3, [R11,#-0x20+var_91C]
STR             R1, [SP,#0x95C+var_958]
MOV             R1, #0xE1 ; maxlen
STR             R3, [SP,#0x95C+var_95C]
LDR             R3, [R11,#-0x20+var_920]
BL              snprintf
ADD             R0, R10, #0x630
SUB             R1, R11, #-(-0x20+var_8E0)
SUB             R1, R1, #8
ADD             R0, R0, #0xC
MOV             R2, #0x70 ; 'p'
BL              sub_1FB44
SUBS            R6, R0, #0
BEQ             loc_24538
LDR             R2, [R11,#-0x20+var_8F0]
LDR             R1, [R11,#-0x20+ptr]
ADD             R3, R2, #0xE
BIC             R3, R3, #7
SUB             SP, SP, R3
ADD             R4, SP, #0x95C+var_944
MOV             R0, R4
BL              sub_1FB44
SUBS            R6, R0, #0
BEQ             loc_244E8
LDR             R2, [R11,#-0x20+var_910]
LDR             R1, [R11,#-0x20+s]
ADD             R3, R2, #0xE
BIC             R3, R3, #7
SUB             SP, SP, R3
ADD             R5, SP, #0x95C+var_944
MOV             R0, R5
BL              sub_1FB44
SUBS            R6, R0, #0
BEQ             loc_243BC
LDR             R0, [R10,#0x630] ; ptr
BL              free
MOVW            R3, #0x849
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#0x95C+var_95C]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aParseNotify ; "parse_notify"
MOV             R1, #1
LDR             R0, [R11,#-0x20+var_92C]
BL              sub_1F8B0
MOVW            R2, #0x84A
MOVW            R3, #:lower16:aUtilC ; "util.c"
STR             R0, [R10,#0x630]
MOV             R1, R4
STR             R2, [SP,#0x95C+var_958]
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R8, [SP,#0x95C+var_95C]
LDR             R2, [R11,#-0x20+var_8F0]
BL              sub_232EC
LDR             R12, [R10,#0x62C]
CMP             R12, #0
BEQ             loc_23EE4
MOVW            R1, #0x84C
LDR             R0, [R10,#0x630]
STR             R1, [SP,#0x95C+var_958]
MOVW            R3, #:lower16:aUtilC ; "util.c"
LDR             R1, [R11,#-0x20+var_8F0]
MOV             R2, R12
STR             R8, [SP,#0x95C+var_95C]
MOVT            R3, #:upper16:aUtilC ; "util.c"
ADD             R0, R0, R1
LDR             R1, [R10,#0x278]
BL              sub_232EC
LDR             R12, [R10,#0x62C]

loc_23EE4
LDR             R3, [R10,#0x288]
MOVW            LR, #0x84D
LDR             R0, [R10,#0x630]
MOVW            R4, #:lower16:byte_686E1
STR             R8, [SP,#0x95C+var_95C]
MOV             R1, R5
ADD             R12, R12, R3
LDR             R3, [R11,#-0x20+var_8F0]
LDR             R2, [R11,#-0x20+var_910]
MOVT            R4, #:upper16:byte_686E1
STR             LR, [SP,#0x95C+var_958]
ADD             R12, R12, R3
MOVW            R3, #:lower16:aUtilC ; "util.c"
ADD             R0, R0, R12
MOVT            R3, #:upper16:aUtilC ; "util.c"
BL              sub_232EC
LDRB            R8, [R4]
CMP             R8, #0
BNE             loc_24440

loc_23F30
LDR             R0, [R11,#-0x20+var_934]
MOVW            R2, #0x856
LDR             R1, =aParseNotify ; "parse_notify"
BL              sub_1F5D8
LDR             R0, [R11,#-0x20+var_930]
MOVW            R2, #0x856
LDR             R1, =aParseNotify ; "parse_notify"
BL              sub_1F654
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [R11,#-0x20+var_914]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_24364
MOV             R4, #byte_686E1
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_24164
MOV             R5, #byte_72D90
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_23FC0
MOV             R3, #byte_686E0
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_23FC0
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_2401C

loc_23FC0
SUB             R3, R11, #-(-0x20+var_804+4)
MOVW            R2, #:lower16:aJobIdS ; "job_id: %s"
SUB             R3, R3, #4
MOVT            R2, #:upper16:aJobIdS ; "job_id: %s"
MOV             R1, R3
STR             R3, [R11,#-0x20+var_8F0]
MOV             R0, R1  ; s
MOV             R3, R7
MOV             R7, R1
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R7
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_241E4
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_24048
MOV             R3, #byte_686E0

loc_2401C
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_2403C
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_24094

loc_2403C
SUB             R3, R11, #-(-0x20+var_804+4)
SUB             R3, R3, #4
STR             R3, [R11,#-0x20+var_8F0]

loc_24048
LDR             R7, [R11,#-0x20+var_8F0]
MOVW            R2, #:lower16:aPrevHashS ; "prev_hash: %s"
LDR             R3, [R11,#-0x20+var_8FC]
MOVT            R2, #:upper16:aPrevHashS ; "prev_hash: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R7  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R7
MOV             R0, #7
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_2425C
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_240C0
MOV             R3, #byte_686E0

loc_24094
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_240B4
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_2410C

loc_240B4
SUB             R3, R11, #-(-0x20+var_804+4)
SUB             R3, R3, #4
STR             R3, [R11,#-0x20+var_8F0]

loc_240C0
LDR             R7, [R11,#-0x20+var_8F0]
MOVW            R2, #:lower16:aCoinbase1S ; "coinbase1: %s"
LDR             R3, [R11,#-0x20+ptr]
MOVT            R2, #:upper16:aCoinbase1S ; "coinbase1: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R7  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R7
MOV             R0, #7
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_242D4
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_24138
MOV             R3, #byte_686E0

loc_2410C
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_2412C
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_2418C

loc_2412C
SUB             R3, R11, #-(-0x20+var_804+4)
SUB             R3, R3, #4
STR             R3, [R11,#-0x20+var_8F0]

loc_24138
LDR             R5, [R11,#-0x20+var_8F0]
MOV             R2, #aCoinbase2S ; "coinbase2: %s"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R11,#-0x20+s]
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_24164
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_24364
MOV             R5, #byte_72D90
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_241AC
MOV             R3, #byte_686E0

loc_2418C
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_241AC
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_24204

loc_241AC
SUB             R3, R11, #-(-0x20+var_804+4)
MOVW            R2, #:lower16:aBbversionS ; "bbversion: %s"
SUB             R3, R3, #4
MOVT            R2, #:upper16:aBbversionS ; "bbversion: %s"
MOV             R7, R3
STR             R3, [R11,#-0x20+var_8F0]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R11,#-0x20+var_900]
MOV             R0, R7  ; s
BL              snprintf
MOV             R1, R7
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_241E4
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_24364
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_24230
MOV             R3, #byte_686E0

loc_24204
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_24224
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_2427C

loc_24224
SUB             R3, R11, #-(-0x20+var_804+4)
SUB             R3, R3, #4
STR             R3, [R11,#-0x20+var_8F0]

loc_24230
LDR             R7, [R11,#-0x20+var_8F0]
MOV             R2, #aNbitS ; "nbit: %s"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R11,#-0x20+var_904]
MOV             R0, R7  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R7
MOV             R0, #7
BL              sub_1DD60

loc_2425C
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_24364
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_242A8
MOV             R3, #byte_686E0

loc_2427C
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_2429C
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_242F4

loc_2429C
SUB             R3, R11, #-(-0x20+var_804+4)
SUB             R3, R3, #4
STR             R3, [R11,#-0x20+var_8F0]

loc_242A8
LDR             R7, [R11,#-0x20+var_8F0]
MOV             R2, #aNtimeS ; "ntime: %s"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R11,#-0x20+var_908]
MOV             R0, R7  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R7
MOV             R0, #7
BL              sub_1DD60

loc_242D4
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_24364
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_24320
MOV             R3, #byte_686E0

loc_242F4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24314
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24364

loc_24314
SUB             R3, R11, #-(-0x20+var_804+4)
SUB             R3, R3, #4
STR             R3, [R11,#-0x20+var_8F0]

loc_24320
LDR             R0, [R11,#-0x20+tv]
MOVW            R1, #:lower16:aNo ; "no"
LDR             R4, [R11,#-0x20+var_8F0]
MOVT            R1, #:upper16:aNo ; "no"
MOVW            R3, #:lower16:aYes ; "yes"
MOVW            R2, #:lower16:aCleanS ; "clean: %s"
CMP             R0, #0
MOVT            R3, #:upper16:aYes ; "yes"
MOVT            R2, #:upper16:aCleanS ; "clean: %s"
MOVEQ           R3, R1
MOV             R0, R4  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_24364               ; ptr
LDR             R0, [R11,#-0x20+ptr]
BL              free
LDR             R0, [R11,#-0x20+s] ; ptr
BL              free
MOVW            R3, #:lower16:dword_74F88
LDR             R0, [R10,#0x74]
MOVT            R3, #:upper16:dword_74F88
LDR             R2, [R3]
LDR             R1, [R3,#(dword_74F8C - 0x74F88)]
ADD             R0, R0, #1
STR             R0, [R10,#0x74]
ADDS            R2, R2, #1
ADC             R1, R1, #0
STR             R2, [R3]
STR             R1, [R3,#(dword_74F8C - 0x74F88)]
BL              sub_2FB78
CMP             R10, R0
MOVWEQ          R3, #:lower16:byte_76068
MOVEQ           R2, #1
MOVTEQ          R3, #:upper16:byte_76068
STRBEQ          R2, [R3]
B               loc_2366C

loc_243BC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_243F8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_243F8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_244E0

loc_243F8
MOVW            R12, #:lower16:unk_4DA3C
SUB             R4, R11, #-(-0x20+var_804+4)
SUB             R4, R4, #4
MOVT            R12, #:upper16:unk_4DA3C

loc_24408
LDM             R12!, {R0-R3}
MOV             LR, R4
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3}
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3}
LDR             R12, [R12]
STM             LR!, {R0-R3}
MOV             R1, R4
MOV             R2, #0
MOV             R0, #3
STRB            R12, [LR]
BL              sub_1DD60
B               loc_23F30

loc_24440
LDR             R1, [R10,#0x634]
LDR             R0, [R10,#0x630]
BL              sub_1FA90
LDRB            R3, [R4]
MOV             R5, R0
CMP             R3, #0
BEQ             loc_244D0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24498
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24498
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_244D0

loc_24498
SUB             R3, R11, #-(-0x20+var_804+4)
MOVW            R2, #:lower16:aPoolDCoinbaseS ; "Pool %d coinbase %s"
SUB             R3, R3, #4
STR             R5, [SP,#0x95C+var_95C]
MOV             R4, R3
MOV             R0, R3  ; s
MOVT            R2, #:upper16:aPoolDCoinbaseS ; "Pool %d coinbase %s"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R10]
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_244D0               ; ptr
MOV             R0, R5
MOV             R6, R8
BL              free
B               loc_23F30

loc_244E0
MOV             R6, #0
B               loc_23F30

loc_244E8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24524
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24524
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_244E0

loc_24524
MOVW            R12, #:lower16:unk_4DA08
SUB             R4, R11, #-(-0x20+var_804+4)
SUB             R4, R4, #4
MOVT            R12, #:upper16:unk_4DA08
B               loc_24408

loc_24538
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24574
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24574
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_244E0

loc_24574
MOVW            LR, #:lower16:aFailedToConver_0 ; "Failed to convert header to header_bin "...
SUB             R4, R11, #-(-0x20+var_804+4)
SUB             R4, R4, #4
MOVT            LR, #:upper16:aFailedToConver_0 ; "Failed to convert header to header_bin "...

loc_24584
LDM             LR!, {R0-R3}
MOV             R12, R4
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1}
STR             R0, [R12],#4
MOV             R0, #3
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R4
STRB            R3, [R12]
BL              sub_1DD60
B               loc_23F30

loc_245C8
MOV             R1, R9,LSL#2
MOVW            R3, #0x80B
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#0x95C+var_95C]
ADD             R1, R1, #1
LDR             R3, =aParseNotify ; "parse_notify"
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R0, [R10,#0x2B4]
BL              sub_1F940
MOVW            R4, #:lower16:byte_72EC8
MOVW            R6, #:lower16:aUtilC ; "util.c"
MOVW            R3, #:lower16:byte_686E1
MOVT            R4, #:upper16:byte_72EC8
MOVT            R6, #:upper16:aUtilC ; "util.c"
MOVT            R3, #:upper16:byte_686E1
STR             R4, [R11,#-0x20+var_914]
MOV             R4, #0
STR             R0, [R10,#0x2B4]
STR             R6, [R11,#-0x20+var_93C]
STR             R3, [R11,#-0x20+var_940]
STR             R7, [R11,#-0x20+var_918]
B               loc_24704

loc_24620
BL              sub_1F38C
MOV             R3, #0x810
MOV             R7, R0
LDR             R2, =aParseNotify ; "parse_notify"
MOV             R0, #0x20 ; ' '
LDR             R1, [R11,#-0x20+var_93C]
LDR             R6, [R10,#0x2B4]
BL              sub_1F828
LDR             R3, [R11,#-0x20+var_914]
STR             R0, [R6,R4,LSL#2]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_246D4
LDR             R3, [R11,#-0x20+var_940]
SUB             R6, R11, #-(-0x20+var_804+4)
MOVW            R12, #:lower16:byte_72D90
SUB             R6, R6, #4
MOVW            R2, #:lower16:aMerkleDS ; "merkle %d: %s"
MOVT            R12, #:upper16:byte_72D90
LDRB            R1, [R3]
MOVT            R2, #:upper16:aMerkleDS ; "merkle %d: %s"
MOV             R3, R4
MOV             R0, R6  ; s
CMP             R1, #0
MOV             R1, #0x800 ; maxlen
BEQ             loc_246D4
LDRB            R12, [R12]
MOV             LR, #byte_686E0
CMP             R12, #0
BNE             loc_246BC
LDRB            LR, [LR]
MOV             R12, #dword_67840
CMP             LR, #0
BNE             loc_246BC
LDR             R12, [R12]
CMP             R12, #6
BLE             loc_246D4

loc_246BC
STR             R7, [SP,#0x95C+var_95C]
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_246D4
LDR             R3, [R10,#0x2B4]
MOV             R2, #0x20 ; ' '
LDR             R0, [R11,#-0x20+var_938]
MOV             R1, R7
ADD             R4, R4, #1
LDR             R0, [R3,R0]
BL              sub_1FB44
MOV             R6, R0
MOV             R0, R7  ; ptr
BL              free
CMP             R6, #0
BEQ             loc_24740

loc_24704
MOV             R3, R4,LSL#2
CMP             R4, R9
MOV             R1, R4
MOV             R0, R5
STR             R3, [R11,#-0x20+var_938]
BLT             loc_24620
CMP             R9, #1
LDR             R7, [R11,#-0x20+var_918]
STR             R9, [R10,#0x6BC]
BGT             loc_23D78
B               loc_23D60

loc_24730
MOVW            R1, #0x7F6
MOV             R0, R8
BL              sub_1F6D0
B               loc_23A64

loc_24740
MOVW            R3, #:lower16:byte_72D90
LDR             R7, [R11,#-0x20+var_918]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24780
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24780
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_244E0

loc_24780
MOVW            LR, #:lower16:aFailedToConver ; "Failed to convert merkle to merkle_bin "...
SUB             R4, R11, #-(-0x20+var_804+4)
SUB             R4, R4, #4
MOVT            LR, #:upper16:aFailedToConver ; "Failed to convert merkle to merkle_bin "...
B               loc_24584
; End of function sub_23630

off_24794 DCD aParseNotify ; "parse_notify"



; int __fastcall sub_24798(const char **, int, int)
sub_24798

var_A30= -0xA30
var_A2C= -0xA2C
pai= -0xA28
var_A24= -0xA24
var_A04= -0xA04
var_A02= -0xA02
var_A01= -0xA01
var_A00= -0xA00
var_9FC= -0x9FC
flags= -0x800
var_7FC= -0x7FC
var_s0=  0

PUSH            {R4-R10,LR}
SUB             SP, SP, #0xA30
MOV             R3, #0x104
ADD             R4, SP, #0xA30+var_A00
MOV             R5, R0
MOV             R6, R1
STRH            R3, [R4,#-4]
MOV             R1, #0  ; endptr
MOV             R8, R2
LDR             R0, [R0,#0x248] ; nptr
MOV             R2, #0xA ; base
ADD             R9, SP, #0xA30+flags
BL              strtol
MOVW            R2, #:lower16:aCgminer ; "CGMINER"
STRB            R0, [SP,#0xA30+var_A01]
MOVT            R2, #:upper16:aCgminer ; "CGMINER"
UBFX            R3, R0, #8, #8
LDM             R2, {R0,R1} ; "CGMINER"
STRB            R3, [SP,#0xA30+var_A02]
STMIB           R4, {R0,R1}
LDR             R0, [R5,#0x268] ; cp
BL              inet_addr
REV             R10, R0
CMN             R10, #1
BEQ             loc_248CC

loc_247FC
MOV             R3, R10,LSR#24
MOV             R0, R10,LSR#16
MOV             R12, R10,LSR#8
STRB            R10, [SP,#0xA30+var_A00+3]
STRB            R3, [SP,#0xA30+var_A00]
SUB             R1, R4, #4 ; buf
STRB            R0, [SP,#0xA30+var_A00+1]
MOV             R3, #0  ; flags
MOV             R2, #0x10 ; n
MOV             R0, R6  ; fd
STRB            R12, [SP,#0xA30+var_A00+2]
BL              send

loc_2482C               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_24854
LDRB            R3, [SP,#0xA30+flags] ; flags
CMP             R3, #0
BEQ             loc_24984

loc_24854
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24890
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24890
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_24A28

loc_24890
LDR             R12, [R5,#0x270]
MOVW            R2, #:lower16:aBadResponseFro ; "Bad response from %s:%s SOCKS4 server"
LDR             R3, [R5,#0x26C]
MOVT            R2, #:upper16:aBadResponseFro ; "Bad response from %s:%s SOCKS4 server"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
STR             R12, [SP,#0xA30+var_A30]
BL              snprintf

loc_248B0
MOV             R0, #4
MOV             R1, R9
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0

loc_248C4
ADD             SP, SP, #0xA30
POP             {R4-R10,PC}

loc_248CC
ADD             R3, SP, #0xA30+var_A24
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
MOV             R0, R9  ; s
STR             R3, [SP,#0xA30+pai]
BL              memset
MOV             R12, #2
ADD             R3, SP, #0xA30+pai ; pai
MOV             R2, R9  ; req
MOV             R1, #0  ; service
LDR             R0, [R5,#0x268] ; name
STR             R12, [SP,#0xA30+var_7FC]
BL              getaddrinfo
CMP             R0, #0
BEQ             loc_249D0
CMP             R8, #0
BEQ             loc_249EC
LDR             R10, [R5,#0x268]
MOV             R3, #0x1000000
STR             R3, [SP,#0xA30+var_A00]
SUB             R7, R4, #4
MOV             R0, R10 ; s
BL              strlen
LDR             R3, =aSocks4Negotiat ; "socks4_negotiate"
CMP             R0, #0xFF
MOVCC           R8, R0
MOVCS           R8, #0xFF
MOVW            R12, #0xBA5
MOV             R1, R10
STR             R3, [SP,#0xA30+var_A30]
MOVW            R3, #:lower16:aUtilC ; "util.c"
ADD             R0, R4, #0xC
MOV             R2, R8
STR             R12, [SP,#0xA30+var_A2C]
MOVT            R3, #:upper16:aUtilC ; "util.c"
BL              sub_232EC
MOV             R12, #0
ADD             R3, SP, #0xA30+var_s0
ADD             LR, R3, R8
MOV             R1, R7  ; buf
ADD             R2, R8, #0x11 ; n
MOV             R3, R12 ; flags
MOV             R0, R6  ; fd
STRB            R12, [LR,#-0x9F4]
BL              send
B               loc_2482C

loc_24984               ; n
MOV             R2, #1
MOV             R1, R9  ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_24854
LDRB            R3, [SP,#0xA30+flags]
CMP             R3, #0x5A ; 'Z'
MOVEQ           R4, #6
BNE             loc_24854

loc_249AC               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R6  ; fd
BL              recv
SUBS            R4, R4, #1
BNE             loc_249AC
MOV             R0, #1
B               loc_248C4

loc_249D0               ; ai
LDR             R0, [SP,#0xA30+pai]
LDR             R3, [R0,#0x14]
LDR             R10, [R3,#4]
BL              freeaddrinfo
REV             R10, R10
CMN             R10, #1
BNE             loc_247FC

loc_249EC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24A34
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24A34
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_24A34

loc_24A28
MOV             R0, #0
ADD             SP, SP, #0xA30
POP             {R4-R10,PC}

loc_24A34
MOVW            R2, #:lower16:aInvalidIpAddre ; "Invalid IP address specified for socks4"...
LDR             R3, [R5,#0x268]
MOVT            R2, #:upper16:aInvalidIpAddre ; "Invalid IP address specified for socks4"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
B               loc_248B0
; End of function sub_24798

off_24A50 DCD aSocks4Negotiat ; "socks4_negotiate"



; int __fastcall sub_24A54(pthread_mutex_t *)
sub_24A54

timeout= -0x286C
var_2868= -0x2868
var_2864= -0x2864
var_2858= -0x2858
nfds= -0x2854
var_2850= -0x2850
service= -0x284C
name= -0x2848
var_2844= -0x2844
var_2840= -0x2840
pai= -0x2838
optlen= -0x2834
optval= -0x2830
var_282C= -0x282C
s= -0x2824
var_2808= -0x2808
writefds= -0x2804
var_200C= -0x200C
var_2004= -0x2004

PUSH            {R4-R11,LR}
ADD             R4, R0, #0x2D0
SUB             SP, SP, #0x2840
MOV             R11, R0
SUB             SP, SP, #0x2C
MOV             R0, R4  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2571C
ADD             R9, SP, #0x286C+var_200C
ADD             R9, R9, #8

loc_24A80               ; fd
LDR             R0, [R11,#0x24C]
MOV             R3, #0
STRB            R3, [R11,#0x291]
CMP             R0, R3
BEQ             loc_24AA4
LDRB            R3, [R11,#0x250]
CMP             R3, #0
BNE             loc_24E50

loc_24AA0
BL              close

loc_24AA4
MOV             R3, #0
MOV             R0, R4  ; mutex
STR             R3, [R11,#0x24C]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_25774

loc_24ABC
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R2, #0x20 ; ' ' ; n
ADD             R0, SP, #0x286C+s ; s
MOV             R1, #0  ; c
BL              memset
LDR             R3, [R11,#0xB8]
MOV             R2, #1
STR             R2, [R9,#-0x818]
CMP             R3, #0
BEQ             loc_25108

loc_24AF0
LDR             R3, [R11,#0x26C]
STR             R3, [SP,#0x286C+name]
LDR             R3, [R11,#0x270]
STR             R3, [SP,#0x286C+service]

loc_24B00               ; pai
ADD             R3, SP, #0x286C+pai
ADD             R2, SP, #0x286C+s ; req
LDR             R1, [SP,#0x286C+service] ; service
LDR             R0, [SP,#0x286C+name] ; name
BL              getaddrinfo
SUBS            R3, R0, #0
STR             R3, [SP,#0x286C+var_2844]
BEQ             loc_24BA4
LDRB            R3, [R11,#0x63]
MOV             R4, #byte_72D90
LDRB            R2, [R4]
CMP             R3, #0
BNE             loc_24D48
CMP             R2, #0
BNE             loc_24B68
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24B68
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_24B98

loc_24B68
LDR             R3, [SP,#0x286C+service]
MOV             R2, #aFailedToResolv ; "Failed to resolve (?wrong URL) %s:%s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
STR             R3, [SP,#0x286C+timeout]
LDR             R3, [SP,#0x286C+name]
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_24B98
MOV             R3, #1
STRB            R3, [R11,#0x63]
B               loc_24DA8

loc_24BA4
LDR             R6, [R9,#-0x834]
CMP             R6, #0
BEQ             loc_25B00
MOVW            R3, #:lower16:byte_686E1
MOVW            R2, #:lower16:byte_72D90
MOVT            R3, #:upper16:byte_686E1
MOVT            R2, #:upper16:byte_72D90
STR             R3, [SP,#0x286C+var_2858]
STR             R2, [SP,#0x286C+var_2850]
STR             R11, [SP,#0x286C+var_2840]

loc_24BCC               ; protocol
LDMIB           R6, {R0-R2}
BL              socket
CMN             R0, #1
MOV             R7, R0
BEQ             loc_24E84
MOV             R2, #0
MOV             R1, #3  ; cmd
BL              fcntl
MOV             R1, #4  ; cmd
ORR             R2, R0, #0x800
MOV             R0, R7  ; fd
BL              fcntl
LDR             R2, [R6,#0x10] ; len
MOV             R0, R7  ; fd
LDR             R1, [R6,#0x14] ; addr
BL              connect
CMN             R0, #1
BNE             loc_25178
MOV             R10, #1
MOV             R4, #0
STR             R10, [R9,#-0x828]
STR             R4, [R9,#-0x824]
BL              __errno_location
LDR             R3, [R0]
MOV             R11, R0
CMP             R3, #0x73 ; 's'
BEQ             loc_24F04
LDR             R4, [SP,#0x286C+var_2858]
MOV             R0, R7  ; fd
BL              close
LDRB            R3, [R4]
MOV             R5, R4
CMP             R3, #0
BEQ             loc_24CB8
LDR             R3, [SP,#0x286C+var_2850]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24C8C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24C8C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24CB8

loc_24C8C
MOVW            R12, #:lower16:aFailedSockConn ; "Failed sock connect"
MOV             LR, R9
MOVT            R12, #:upper16:aFailedSockConn ; "Failed sock connect"
LDM             R12!, {R0-R3} ; "Failed sock connect"
LDR             R12, [R12] ; "ect"
STM             LR!, {R0-R3}
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
STR             R12, [LR]
BL              sub_1DD60

loc_24CB8
LDR             R6, [R6,#0x1C]
CMP             R6, #0
BNE             loc_24BCC

loc_24CC4
LDR             R11, [SP,#0x286C+var_2840]

loc_24CC8
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_24CF0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_25160

loc_24CF0
LDR             R3, [SP,#0x286C+service]
MOV             R2, #aFailedToConnec ; "Failed to connect to stratum on %s:%s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
STR             R3, [SP,#0x286C+timeout]
LDR             R3, [SP,#0x286C+name]
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #6
BL              sub_1DD60

loc_24D20               ; ai
LDR             R0, [R9,#-0x834]
BL              freeaddrinfo
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_24DC0

loc_24D34
MOV             R4, #0
MOV             R0, R4
ADD             SP, SP, #0x2840
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_24D48
CMP             R2, #0
BNE             loc_24D78
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24D78
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_24DA8

loc_24D78
LDR             R3, [SP,#0x286C+service]
MOV             R2, #aFailedToGetadd ; "Failed to getaddrinfo for %s:%s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
STR             R3, [SP,#0x286C+timeout]
LDR             R3, [SP,#0x286C+name]
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_24DA8
MOV             R5, #byte_686E1
BL              __res_init

loc_24DB4
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_24D34

loc_24DC0
MOVW            R4, #:lower16:byte_72D90
MOV             R5, #0
MOVT            R4, #:upper16:byte_72D90

loc_24DCC
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_24E00
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24E00
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24E2C

loc_24E00
MOVW            R12, #:lower16:aInitiateStratu ; "Initiate stratum failed"
ADD             LR, SP, #0x286C+writefds
MOVT            R12, #:upper16:aInitiateStratu ; "Initiate stratum failed"
LDM             R12!, {R0-R3} ; "Initiate stratum failed"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; " failed"
STM             LR, {R0,R1}
ADD             R1, SP, #0x286C+writefds
MOV             R0, #7
BL              sub_1DD60

loc_24E2C
CMP             R5, #0
BEQ             loc_24D34

loc_24E34
MOV             R0, R11
MOV             R4, #0
BL              sub_21338

loc_24E40
MOV             R0, R4
ADD             SP, SP, #0x2840
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_24E50
LDR             R3, [R11,#0x254]
CMP             R3, #0
BEQ             loc_24AA0
MOV             R0, R3
BL              SSL_shutdown
LDR             R0, [R11,#0x25C]
BL              X509_free
LDR             R0, [R11,#0x258]
BL              SSL_CTX_free
LDR             R0, [R11,#0x254]
BL              SSL_free
LDR             R0, [R11,#0x24C]
B               loc_24AA0

loc_24E84
LDR             R5, [SP,#0x286C+var_2858]
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_24CB8
LDR             R3, [SP,#0x286C+var_2850]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24ECC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24ECC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24CB8

loc_24ECC
MOVW            R3, #:lower16:aFailedSocket ; "Failed socket"
MOV             R12, R9
MOVT            R3, #:upper16:aFailedSocket ; "Failed socket"
LDM             R3, {R0-R3} ; "Failed socket"

loc_24EDC
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
STRH            R3, [R12]
BL              sub_1DD60
LDR             R6, [R6,#0x1C]
CMP             R6, #0
BNE             loc_24BCC
B               loc_24CC4

loc_24F04
CMP             R7, #0
ADD             R8, R7, #0x1F
MOVGE           R8, R7
RSBS            R2, R7, #0
AND             R2, R2, #0x1F
MOV             R8, R8,ASR#5
AND             R3, R7, #0x1F
RSBPL           R3, R2, #0
ADD             R8, R9, R8,LSL#2
MOV             R10, R10,LSL R3
ADD             R5, SP, #0x286C+writefds.__fds_bits+0x7C
ADD             R2, R7, #1
STR             R2, [SP,#0x286C+nfds]

loc_24F38
ADD             R3, SP, #0x286C+var_2808

loc_24F3C
STR             R4, [R3,#4]!
CMP             R5, R3
BNE             loc_24F3C
LDR             R12, [R8,#-0x800]
MOV             R3, #0  ; exceptfds
ADD             R2, SP, #0x286C+var_282C
MOV             R1, R3  ; readfds
STR             R2, [SP,#0x286C+timeout] ; timeout
ADD             R2, SP, #0x286C+writefds ; writefds
ORR             R12, R12, R10
LDR             R0, [SP,#0x286C+nfds] ; nfds
STR             R12, [R8,#-0x800]
BL              select
CMP             R0, #0
BLE             loc_24FF4
LDR             R3, [R8,#-0x800]
TST             R10, R3
BNE             loc_25008

loc_24F84
LDR             R4, [SP,#0x286C+var_2858]
MOV             R0, R7  ; fd
BL              close
LDRB            R3, [R4]
MOV             R5, R4
CMP             R3, #0
BEQ             loc_24CB8
LDR             R3, [SP,#0x286C+var_2850]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24FD8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24FD8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24CB8

loc_24FD8
MOVW            LR, #:lower16:aSelectTimeoutF ; "Select timeout/failed connect"
MOV             R12, R9
MOVT            LR, #:upper16:aSelectTimeoutF ; "Select timeout/failed connect"
LDM             LR!, {R0-R3} ; "Select timeout/failed connect"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "ailed connect"
B               loc_24EDC

loc_24FF4
BEQ             loc_24F84
LDR             R3, [R11]
CMP             R3, #4
BEQ             loc_24F38
B               loc_24F84

loc_25008
MOV             R12, #4
ADD             R3, SP, #0x286C+optlen
STR             R3, [SP,#0x286C+timeout] ; optlen
MOV             R2, R12 ; optname
ADD             R3, SP, #0x286C+optval ; optval
MOV             R1, #1  ; level
MOV             R0, R7  ; fd
STR             R12, [R9,#-0x830]
BL              getsockopt
CMP             R0, #0
BNE             loc_24F84
LDR             R3, [R9,#-0x82C]
CMP             R3, #0
BNE             loc_24F84
MOVW            R5, #:lower16:byte_686E1
LDR             R11, [SP,#0x286C+var_2840]
MOVT            R5, #:upper16:byte_686E1
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_250C4
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_25094
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25094
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_250C4

loc_25094
MOVW            LR, #:lower16:aSucceededDelay ; "Succeeded delayed connect"
MOV             R12, R9
MOVT            LR, #:upper16:aSucceededDelay ; "Succeeded delayed connect"
LDM             LR!, {R0-R3} ; "Succeeded delayed connect"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "d connect"
STM             R12!, {R0,R1}
MOV             R1, R9
STRH            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_1DD60

loc_250C4
MOV             R0, R7
BL              sub_1F26C
LDR             R0, [R9,#-0x834] ; ai
BL              freeaddrinfo
LDR             R3, [R11,#0xB8]
CMP             R3, #0
BEQ             loc_252A8
LDR             R3, [R11,#0xB4]
CMP             R3, #5  ; switch 6 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_250E8 ; jumptable 000250E8 default case
jpt_250E8 DCD loc_25AF8 ; jump table for switch statement
DCD loc_25ADC
DCD loc_25AD4
DCD loc_25998
DCD loc_25974
DCD loc_25998

loc_25108
MOV             R3, #dword_6A6B0
LDR             R0, [R3]
CMP             R0, #0
BEQ             loc_25154
ADD             R2, R11, #0x270
STR             R0, [R11,#0xB8]
ADD             R1, R11, #0x26C
BL              sub_20A10
LDR             R3, [R11,#0xB8]
MOV             R2, #3
STR             R2, [R11,#0xB4]
LDR             R2, [R11,#0x268]
CMP             R3, #0
STR             R2, [SP,#0x286C+name]
BNE             loc_24AF0

loc_25148
LDR             R3, [R11,#0x248]
STR             R3, [SP,#0x286C+service]
B               loc_24B00

loc_25154
LDR             R3, [R11,#0x268]
STR             R3, [SP,#0x286C+name]
B               loc_25148

loc_25160
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_24CF0
B               loc_24D20

loc_25178
MOVW            R4, #:lower16:byte_72D90
LDR             R11, [SP,#0x286C+var_2840]
MOVT            R4, #:upper16:byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_251B8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_251B8
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_250C4

loc_251B8
MOVW            R12, #:lower16:aSucceededImmed ; "Succeeded immediate connect"
MOV             LR, R9
MOVT            R12, #:upper16:aSucceededImmed ; "Succeeded immediate connect"
LDM             R12!, {R0-R3} ; "Succeeded immediate connect"
STM             LR!, {R0-R3}
LDM             R12, {R0-R2} ; "ate connect"
STM             LR, {R0-R2}
MOV             R2, #0
MOV             R1, R9
MOV             R0, #4
BL              sub_1DD60
B               loc_250C4

loc_251E8
MOV             R4, #4

loc_251EC               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
SUBS            R4, R4, #1
BNE             loc_251EC

loc_25208               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_252A8
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_25278
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25278
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_252A8

loc_25278
LDR             R12, [R11,#0x270]
MOV             R2, #aSuccessNegotia_0 ; "Success negotiating with %s:%s SOCKS5 p"...
LDR             R3, [R11,#0x26C]
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
STR             R12, [SP,#0x286C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_1DD60

loc_252A8
LDR             R3, [R11,#0x260]
CMP             R3, #0
BEQ             loc_25C40

loc_252B4
LDRB            R3, [R11,#0x250]
STR             R7, [R11,#0x24C]
CMP             R3, #0
BEQ             loc_2547C
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_252EC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2595C

loc_252EC
MOVW            LR, #:lower16:aStartSslConnec ; "start ssl connect\n"
MOV             R12, R9
MOVT            LR, #:upper16:aStartSslConnec ; "start ssl connect\n"
LDM             LR!, {R0-R3} ; "start ssl connect\n"
LDR             LR, [LR] ; "t\n"
STM             R12!, {R0-R3}
MOV             R2, #0
MOV             R1, R9
MOV             R0, #5
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60

loc_25320
MOV             R2, #0
MOV             R1, #0
MOV             R0, #0
BL              OPENSSL_init_ssl
MOV             R2, #0
MOV             R1, #0
MOV             R0, #0xC
BL              OPENSSL_init_crypto
MOV             R0, #2
MOV             R2, #0
MOV             R1, #0
MOVT            R0, #0x20 ; ' '
BL              OPENSSL_init_ssl
BL              TLS_client_method
BL              SSL_CTX_new
MOV             R8, R0
BL              BIO_s_mem
BL              BIO_new
MOVW            R1, #:lower16:aBeginCertifica ; "-----BEGIN CERTIFICATE-----\nMIIC7zCCAd"...
MOVW            R2, #0x437
MOVT            R1, #:upper16:aBeginCertifica ; "-----BEGIN CERTIFICATE-----\nMIIC7zCCAd"...
MOV             R5, R0
BL              BIO_write
MOV             R3, #0
MOV             R0, R5
MOV             R2, R3
MOV             R1, R3
BL              PEM_read_bio_X509
SUBS            R3, R0, #0
STR             R3, [SP,#0x286C+var_2858]
BEQ             loc_258C4
MOV             R0, R8
BL              SSL_CTX_get_cert_store
LDR             R1, [SP,#0x286C+var_2858]
BL              X509_STORE_add_cert
MOV             R0, R5
BL              BIO_free
MOV             R0, R8
BL              SSL_new
LDR             R1, [R11,#0x24C]
MOV             R5, R0
BL              SSL_set_fd
MOV             R0, R5
BL              SSL_connect
CMP             R0, #1
MOV             R6, R0
LDRB            R3, [R4]
BEQ             loc_25B0C
CMP             R3, #0
BNE             loc_25CF0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25CF0
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #2
BGT             loc_25CF0

loc_25410
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_25450

loc_2541C
MOV             R1, R6
MOV             R0, R5
BL              SSL_get_error
MOVW            R2, #:lower16:aSslErrorDInAcc ; "SSL error #%d in accept,program termina"...
MOV             R3, R0
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSslErrorDInAcc ; "SSL error #%d in accept,program termina"...
MOV             R0, R9  ; s
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_25450
LDR             R0, [SP,#0x286C+var_2858]
BL              X509_free
MOV             R0, R8
BL              SSL_CTX_free
MOV             R0, R5
BL              SSL_free
B               loc_25940

loc_2546C
LDR             R3, [SP,#0x286C+var_2858]
STR             R8, [R11,#0x258]
STR             R5, [R11,#0x254]
STR             R3, [R11,#0x25C]

loc_2547C
MOV             R12, #0x2D ; '-'
MOV             R3, #0x1E
MOV             R4, #1
MOV             R2, #0
MOV             R1, #3  ; cmd
MOV             R0, R7  ; fd
STR             R12, [R9,#-0x800]
STR             R3, [R9]
STR             R4, [R9,#-0x828]
BL              fcntl
MOV             R1, #4  ; cmd
ORR             R2, R0, #0x800
MOV             R0, R7  ; fd
BL              fcntl
MOV             R2, #4
ADD             R3, SP, #0x286C+var_282C ; optval
STR             R2, [SP,#0x286C+timeout] ; optlen
MOV             R1, R4  ; level
MOV             R2, #9  ; optname
MOV             R0, R7  ; fd
BL              setsockopt
MOV             R3, #byte_762E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_254F4
MOV             R2, R4
MOV             R1, #2  ; cmd
MOV             R0, R7  ; fd
BL              fcntl

loc_254F4
MOV             R4, #4
ADD             R3, SP, #0x286C+var_282C ; optval
MOV             R2, #1  ; optname
MOV             R1, #6  ; level
STR             R4, [SP,#0x286C+timeout] ; optlen
MOV             R0, R7  ; fd
BL              setsockopt
MOV             R2, #6  ; optname
ADD             R3, SP, #0x286C+var_282C ; optval
MOV             R1, R2  ; level
STR             R4, [SP,#0x286C+timeout] ; optlen
MOV             R0, R7  ; fd
BL              setsockopt
MOV             R2, R4  ; optname
ADD             R3, SP, #0x286C+writefds ; optval
MOV             R1, #6  ; level
STR             R4, [SP,#0x286C+timeout] ; optlen
MOV             R0, R7  ; fd
BL              setsockopt
MOV             R3, R9  ; optval
STR             R4, [SP,#0x286C+timeout] ; optlen
MOV             R0, R7  ; fd
MOV             R2, #5  ; optname
MOV             R1, #6  ; level
BL              setsockopt
MOV             R3, #byte_682C4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_256DC

loc_2556C               ; s
MOV             R0, R9
BL              strlen
MOV             R1, R9
MOV             R2, R0
MOV             R0, R11
BL              sub_1EAA8
CMP             R0, #0
BEQ             loc_25630
MOV             R5, #byte_686E1
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_24E34
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_255DC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_255DC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_25628

loc_255DC
MOVW            R12, #:lower16:aFailedToSendSI ; "Failed to send s in initiate_stratum"
ADD             LR, SP, #0x286C+writefds
MOVT            R12, #:upper16:aFailedToSendSI ; "Failed to send s in initiate_stratum"
LDM             R12!, {R0-R3} ; "Failed to send s in initiate_stratum"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " in initiate_stratum"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "atum"
STR             R0, [LR],#4
MOV             R0, #7
STRB            R1, [LR]
ADD             R1, SP, #0x286C+writefds
BL              sub_1DD60

loc_25614
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_24E34
MOV             R4, #byte_72D90

loc_25628
MOV             R5, #1
B               loc_24DCC

loc_25630
MOV             R1, #0x3C ; '<'
LDR             R0, [R11,#0x24C]
BL              sub_1F294
SUBS            R4, R0, #0
BNE             loc_257C8
MOV             R5, #byte_686E1
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_24E34
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_25694
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25694
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_25628

loc_25694
MOVW            LR, #:lower16:aTimedOutWaitin_0 ; "Timed out waiting for response in initi"...
ADD             R12, SP, #0x286C+writefds
MOVT            LR, #:upper16:aTimedOutWaitin_0 ; "Timed out waiting for response in initi"...
LDM             LR!, {R0-R3} ; "Timed out waiting for response in initi"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "g for response in initiate_stratum"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "n initiate_stratum"
LDR             LR, [LR] ; "um"
STM             R12!, {R0-R3}
MOV             R2, #0
ADD             R1, SP, #0x286C+writefds
MOV             R0, #7
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60
B               loc_25614

loc_256DC
MOVW            R12, #:lower16:dword_72DBC
MOV             R3, #8
MOVT            R12, #:upper16:dword_72DBC
STR             R3, [SP,#0x286C+timeout]
LDR             R2, [R12]
MOV             R3, #0xE000
MOVW            R1, #:lower16:aIdDMethodMinin_2 ; "{\"id\":%d, \"method\":\"mining.configu"...
MOVT            R3, #0x1FFF
MOVT            R1, #:upper16:aIdDMethodMinin_2 ; "{\"id\":%d, \"method\":\"mining.configu"...
MOV             R0, R9  ; s
ADD             LR, R2, #1
STR             LR, [R12]
BL              sprintf
MOV             R3, #1
STR             R3, [R11,#0x298]
B               loc_2556C

loc_2571C
BL              __errno_location
LDR             LR, =aSetupStratumSo ; "setup_stratum_socket"
ADD             R9, SP, #0x286C+var_200C
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0xC1D
ADD             R9, R9, #8
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x286C+var_2864]
MOV             R0, R9  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R9
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_24A80

loc_25774
BL              __errno_location
LDR             R12, =aSetupStratumSo ; "setup_stratum_socket"
MOVW            R1, #:lower16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R0, #0xC2F
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x286C+timeout]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x286C+var_2868]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x286C+var_2864]
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R9
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_24ABC

loc_257C8
MOV             R0, R11
BL              sub_21850
SUBS            R5, R0, #0
MOVEQ           R5, #byte_686E1
BEQ             loc_25614
MOV             R1, R5
MOV             R0, R11
BL              sub_20FF0
MOV             R0, R5  ; ptr
BL              free
LDR             R3, [R11,#0x240]
CMP             R3, #0
BEQ             loc_258B8

loc_25800
MOVW            R3, #:lower16:byte_72EC8
MOV             R2, #1
MOVT            R3, #:upper16:byte_72EC8
STRB            R2, [R11,#0x291]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_24E40
MOV             R2, #byte_686E1
LDRB            R4, [R2]
CMP             R4, #0
MOVEQ           R4, R3
BEQ             loc_24E40
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25870
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25870
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24E40

loc_25870
LDR             R0, [R11,#0x288]
MOVW            R2, #:lower16:aPoolDConfirmed ; "Pool %d confirmed mining.subscribe with"...
LDR             R12, [R11,#0x274]
MOVT            R2, #:upper16:aPoolDConfirmed ; "Pool %d confirmed mining.subscribe with"...
LDR             R3, [R11]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x286C+var_2868]
ADD             R0, SP, #0x286C+writefds ; s
STR             R12, [SP,#0x286C+timeout]
BL              snprintf
ADD             R1, SP, #0x286C+writefds
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
MOV             R0, R4
ADD             SP, SP, #0x2840
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_258B8
LDR             R3, [R11,#0x268]
STR             R3, [R11,#0x240]
B               loc_25800

loc_258C4
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_258F8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_258F8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_25938

loc_258F8
MOVW            LR, #:lower16:aUnableToParseC ; "unable to parse certificate in memory\n"
MOV             R12, R9
MOVT            LR, #:upper16:aUnableToParseC ; "unable to parse certificate in memory\n"
LDM             LR!, {R0-R3} ; "unable to parse certificate in memory\n"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "certificate in memory\n"
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1} ; "emory\n"
STR             R0, [R12],#4
MOV             R0, #3
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R9
STRB            R3, [R12]
BL              sub_1DD60

loc_25938
MOV             R0, R5
BL              BIO_free

loc_25940               ; fd
MOV             R0, R7
MOVW            R5, #:lower16:byte_686E1
BL              close
MOV             R3, #0
MOVT            R5, #:upper16:byte_686E1
STR             R3, [R11,#0x24C]
B               loc_24DB4

loc_2595C
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #4
BLE             loc_25320
B               loc_252EC

loc_25974               ; jumptable 000250E8 case 4
MOV             R2, #1

loc_25978
MOV             R1, R7
MOV             R0, R11
BL              sub_24798
CMP             R0, #0
BNE             loc_252A8

loc_2598C
MOV             R5, #byte_686E1
B               loc_24DB4

loc_25998               ; jumptable 000250E8 cases 3,5
MOVW            R5, #:lower16:byte_686E1
MOVW            R3, #0x105
MOVT            R5, #:upper16:byte_686E1
STRH            R3, [SP,#0x286C+writefds]
LDRB            R3, [R5]
MOV             R2, #0
STRB            R2, [R9,#-0x7FE]
CMP             R3, R2
BEQ             loc_25A28
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, R2
BNE             loc_259F8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R2
BNE             loc_259F8
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_25A28

loc_259F8
LDR             R12, [R11,#0x270]
MOVW            R2, #:lower16:aAttemptingToNe ; "Attempting to negotiate with %s:%s SOCK"...
LDR             R3, [R11,#0x26C]
MOVT            R2, #:upper16:aAttemptingToNe ; "Attempting to negotiate with %s:%s SOCK"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
STR             R12, [SP,#0x286C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_1DD60

loc_25A28               ; flags
MOV             R3, #0
MOV             R2, #3  ; n
ADD             R1, SP, #0x286C+writefds ; buf
MOV             R0, R7  ; fd
BL              send
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_25A64
LDRB            R3, [R9]
CMP             R3, #5
BEQ             loc_25E38

loc_25A64
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_25AA0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25AA0
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_25D44

loc_25AA0
LDR             R3, [R11,#0x26C]
MOVW            R2, #:lower16:aBadResponseFro_0 ; "Bad response from %s:%s SOCKS5 server"
LDR             R12, [R11,#0x270]
MOVT            R2, #:upper16:aBadResponseFro_0 ; "Bad response from %s:%s SOCKS5 server"

loc_25AB0               ; maxlen
MOV             R1, #0x800
MOV             R0, R9  ; s
STR             R12, [SP,#0x286C+timeout]
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
B               loc_24DB4

loc_25AD4               ; jumptable 000250E8 case 2
MOV             R2, #0
B               loc_25978

loc_25ADC               ; jumptable 000250E8 case 1
MOV             R2, #1

loc_25AE0
MOV             R1, R7
MOV             R0, R11
BL              sub_1ED38
CMP             R0, #0
BNE             loc_252A8
B               loc_2598C

loc_25AF8               ; jumptable 000250E8 case 0
MOV             R2, #0
B               loc_25AE0

loc_25B00
MOV             R5, #byte_686E1
B               loc_24CC8

loc_25B0C
CMP             R3, #0
BNE             loc_25B3C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25B3C
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #5
BLE             loc_25B70

loc_25B3C
MOV             R0, R5
BL              SSL_get_current_cipher
BL              SSL_CIPHER_get_name
MOVW            R2, #:lower16:aConnectedWithS ; "Connected with %s encryption\n"
MOV             R3, R0
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aConnectedWithS ; "Connected with %s encryption\n"
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #6
BL              sub_1DD60

loc_25B70
MOV             R0, R5
BL              SSL_get_verify_result
SUB             R6, R0, #9
MOV             R10, R0
CMP             R0, #0
CMPNE           R6, #1
MOVHI           R6, #1
MOVLS           R6, #0
BHI             loc_25D64
MOV             R0, R5
BL              SSL_get_peer_certificate
SUBS            R10, R0, #0
BEQ             loc_25BD4
LDR             R1, [R11,#0x240]
MOV             R0, R1  ; s
STR             R1, [SP,#0x286C+nfds]
BL              strlen
LDR             R1, [SP,#0x286C+nfds]
MOV             R2, R0
STR             R6, [SP,#0x286C+timeout]
MOV             R3, R6
MOV             R0, R10
BL              X509_check_host
CMP             R0, #1
BEQ             loc_2546C

loc_25BD4
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_25C08
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25C08
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_25C34

loc_25C08
MOVW            R12, #:lower16:aCertCheckFail ; "cert check fail\n"
MOV             LR, R9
MOVT            R12, #:upper16:aCertCheckFail ; "cert check fail\n"
LDM             R12!, {R0-R3} ; "cert check fail\n"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
MOV             R1, R9
MOV             R2, #0
MOV             R0, #3
STRB            R12, [LR]
BL              sub_1DD60

loc_25C34
MOV             R0, R5
BL              SSL_shutdown
B               loc_25450

loc_25C40
MOVW            R3, #0xCB9
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#0x286C+timeout]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aSetupStratumSo ; "setup_stratum_socket"
MOV             R1, #1
MOV             R0, #0x2000
BL              sub_1F8B0
MOV             R3, #0x2000
STR             R0, [R11,#0x260]
STR             R3, [R11,#0x264]
B               loc_252B4

def_250E8               ; jumptable 000250E8 default case
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_25CB4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25CB4
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
MOVLE           R5, #byte_686E1
BLE             loc_25D44

loc_25CB4
LDR             R12, [R11,#0x270]
MOVW            R2, #:lower16:aUnsupportedPro ; "Unsupported proxy type for %s:%s"
LDR             R3, [R11,#0x26C]
MOVT            R2, #:upper16:aUnsupportedPro ; "Unsupported proxy type for %s:%s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
STR             R12, [SP,#0x286C+timeout]
MOVW            R5, #:lower16:byte_686E1
BL              snprintf
MOV             R1, R9
MOV             R2, #0
MOV             R0, #4
MOVT            R5, #:upper16:byte_686E1
BL              sub_1DD60
B               loc_24DB4

loc_25CF0
MOVW            R2, #:lower16:aUnableToConnec ; "unable to connect pool by ssl, connect "...
MOV             R3, R6
MOVT            R2, #:upper16:aUnableToConnec ; "unable to connect pool by ssl, connect "...
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #3
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2541C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2541C
MOV             R2, #dword_67840
B               loc_25410

loc_25D44
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_24D34
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_24D34
MOV             R5, #0
B               loc_24E00

loc_25D64
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_25DD8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25DD8
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #2
BGT             loc_25DD8

loc_25D98
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_25C34

loc_25DA4
MOVW            LR, #:lower16:aCertOfPoolIsVe ; "cert of pool is verify fail\n"
MOV             R12, R9
MOVT            LR, #:upper16:aCertOfPoolIsVe ; "cert of pool is verify fail\n"
LDM             LR!, {R0-R3} ; "cert of pool is verify fail\n"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "verify fail\n"
STM             R12!, {R0-R2}
MOV             R1, R9
MOV             R2, #0
MOV             R0, #3
STRB            R3, [R12]
BL              sub_1DD60
B               loc_25C34

loc_25DD8
MOV             R0, R10
BL              X509_verify_cert_error_string
MOVW            R2, #:lower16:aVerifyReturnCo ; "Verify return code: %ld (%s)\n"
MOV             R3, R10
STR             R0, [SP,#0x286C+timeout]
MOVT            R2, #:upper16:aVerifyReturnCo ; "Verify return code: %ld (%s)\n"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #3
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_25DA4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
MOVEQ           R2, #dword_67840
BEQ             loc_25D98
B               loc_25DA4

loc_25E38               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_25A64
LDRB            R3, [R9]
LDRB            R2, [R9,#-0x7FE]
CMP             R2, R3
BNE             loc_25A64
LDR             R6, [R11,#0x268]
MOV             R3, #0x3000105
STR             R3, [R9,#-0x800]
MOV             R0, R6  ; s
BL              strlen
LDR             R12, =aSocks5Negotiat ; "socks5_negotiate"
CMP             R0, #0xFF
MOVCC           R4, R0
MOVCS           R4, #0xFF
MOVW            R0, #0xB3F
MOVW            R3, #:lower16:aUtilC ; "util.c"
STR             R12, [SP,#0x286C+timeout]
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R0, [SP,#0x286C+var_2868]
MOV             R1, R6
MOV             R2, R4
ADD             R0, SP, #0x286C+writefds.__fds_bits+5
STRB            R4, [R9,#-0x7FC]
BL              sub_232EC
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
LDR             R0, [R11,#0x248] ; nptr
BL              strtol
ADD             R12, R9, R4
MOV             R1, R0
UBFX            LR, R1, #8, #8
STRB            R1, [R12,#-0x7FA]
ADD             R2, R4, #7 ; n
MOV             R3, #0  ; flags
ADD             R1, SP, #0x286C+writefds ; buf
MOV             R0, R7  ; fd
STRB            LR, [R12,#-0x7FB]
BL              send
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_25F14
LDRB            R3, [R9]
CMP             R3, #5
BEQ             loc_25F64

loc_25F14
MOV             R4, #byte_72D90
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_25F50
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25F50
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_24DB4

loc_25F50
MOVW            R2, #:lower16:aBadResponseFro_0 ; "Bad response from %s:%s SOCKS5 server"
LDR             R12, [R11,#0x270]
MOVT            R2, #:upper16:aBadResponseFro_0 ; "Bad response from %s:%s SOCKS5 server"
LDR             R3, [R11,#0x26C]
B               loc_25AB0

loc_25F64               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_25F14
LDRB            R4, [R9]
CMP             R4, #0
BNE             loc_25F14
MOV             R3, R4  ; flags
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
MOV             R3, R4  ; flags
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_25F14
LDRB            R3, [R9]
CMP             R3, #1
BEQ             loc_251E8
CMP             R3, #3
BNE             loc_25F14
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BL              recv
CMN             R0, #1
LDR             R6, [SP,#0x286C+var_2844]
LDRBNE          R4, [R9]
MOVEQ           R4, R0

loc_25FF4
CMP             R6, R4
MOV             R3, #0  ; flags
ADD             R6, R6, #1
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R7  ; fd
BGE             loc_25208
BL              recv
B               loc_25FF4
; End of function sub_24A54

off_26018 DCD aSetupStratumSo ; "setup_stratum_socket"
off_2601C DCD aSocks5Negotiat ; "socks5_negotiate"



; int __fastcall sub_26020(pthread_mutex_t *)
sub_26020
PUSH            {R4-R6,LR}
MOV             R4, R0
LDRB            R3, [R0,#0x291]
CMP             R3, #0
BNE             loc_26090

loc_26034
MOV             R0, R4
BL              sub_24A54
CMP             R0, #0
BEQ             loc_26054
MOV             R0, R4
BL              sub_21DDC
CMP             R0, #0
BNE             loc_26068

loc_26054
MOV             R0, R4
MOV             R5, #0
BL              sub_31F20

loc_26060
MOV             R0, R5
POP             {R4-R6,PC}

loc_26068
LDRB            R3, [R4,#0x244]
CMP             R3, #0
BNE             loc_26098

loc_26074
MOV             R0, R4
BL              sub_27468
SUBS            R5, R0, #0
BEQ             loc_26054
MOV             R0, R4
BL              sub_2FF84
B               loc_26060

loc_26090
BL              sub_21338
B               loc_26034

loc_26098
MOV             R0, R4
BL              sub_27070
CMP             R0, #0
BNE             loc_26074
B               loc_26054
; End of function sub_26020



; Attributes: bp-based frame fpd=0xFFFFFFE8

; int __fastcall sub_260AC(pthread_mutex_t *, _DWORD *)
sub_260AC

var_A24= -0xA24
var_A1C= -0xA1C
s= -0xA14
var_90C= -0x90C
var_908= -0x908
var_8F8= -0x8F8
var_7F8= -0x7F8

PUSH            {R4-R8,R11,LR}
ADD             R11, SP, #0x18
MOV             R4, R0
SUB             SP, SP, #0x910
SUB             R0, R11, #-(-0x18+var_8F8)
SUB             SP, SP, #0xC
MOV             R2, #0xFF ; n
MOV             R5, R1
MOV             R1, #0  ; c
SUB             R0, R0, #0xC ; s
BL              memset
MOV             R1, #0
MOV             R0, R5
BL              sub_48E7C
BL              sub_49028
SUBS            R6, R0, #0
LDREQ           R6, [R4,#0x268]
BEQ             loc_26130
LDR             R7, [R4,#0x268]
MOV             R1, #0x2E ; '.' ; c
MOV             R0, R7  ; s
BL              strchr
SUBS            R8, R0, #0
BEQ             loc_26290
MOV             R1, #0x2E ; '.' ; c
MOV             R0, R6  ; s
BL              strchr
SUBS            R1, R0, #0 ; s2
BEQ             loc_26378
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_26324

loc_26130
MOV             R1, #1
MOV             R0, R5
BL              sub_48E7C
BL              sub_49284
SUBS            R2, R0, #0
BEQ             loc_26308
SUB             SP, SP, #0x108
MOVW            R1, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
ADD             R5, SP, #0xA24+s
MOVT            R1, #:upper16:(aStaleSubmissio_0+0x30) ; format
MOV             R0, R5  ; s
BL              sprintf

loc_26160
MOVW            R2, #:lower16:(aFailedToConnec+0x20) ; "%s:%s"
SUB             R0, R11, #-(-0x18+var_8F8)
MOV             R3, R6
MOVT            R2, #:upper16:(aFailedToConnec+0x20) ; format
MOV             R1, #0xFE ; maxlen
STR             R5, [SP,#0xA24+var_A24]
SUB             R0, R0, #0xC ; s
BL              snprintf
SUB             R3, R11, #-(-0x18+var_8F8)
SUB             R2, R11, #-(-0x18+var_908)
SUB             R3, R3, #0xC
SUB             R1, R3, #8
MOV             R0, R3
BL              sub_20A10
CMP             R0, #0
BEQ             loc_262FC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_261DC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_261DC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_26218

loc_261DC
SUB             R1, R11, #-(-0x18+var_8F8)
MOVW            R2, #:lower16:aStratumReconne ; "Stratum reconnect requested from pool %"...
SUB             R1, R1, #0xC
SUB             R0, R11, #-(-0x18+var_7F8)
LDR             R3, [R4]
MOVT            R2, #:upper16:aStratumReconne ; "Stratum reconnect requested from pool %"...
STR             R1, [SP,#0xA24+var_A24]
SUB             R0, R0, #0xC ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
SUB             R1, R11, #-(-0x18+var_7F8)
MOV             R2, #0
SUB             R1, R1, #0xC
MOV             R0, #4
BL              sub_1DD60

loc_26218
MOV             R0, R4
ADD             R5, R4, #0x2D0
BL              sub_31774
MOV             R0, R5  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_263CC

loc_26234
MOV             R0, R4
BL              sub_1F1EC
LDR             R3, [R11,#-0x18+var_90C]
LDR             R0, [R4,#0x268] ; ptr
STR             R3, [R4,#0x240]
STR             R3, [R4,#0x268]
BL              free
LDR             R3, [R11,#-0x18+var_908]
LDR             R0, [R4,#0x248] ; ptr
STR             R3, [R4,#0x248]
BL              free
MOV             R0, R5  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_26424

loc_26270
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
BL              sub_26020
SUB             SP, R11, #0x18
POP             {R4-R8,R11,PC}

loc_26290
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_262CC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_262CC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_262FC

loc_262CC
MOVW            R2, #:lower16:aDeniedStratumR ; "Denied stratum reconnect request for po"...
SUB             R0, R11, #-(-0x18+var_7F8)
MOV             R3, R7
SUB             R0, R0, #0xC ; s
MOVT            R2, #:upper16:aDeniedStratumR ; "Denied stratum reconnect request for po"...

loc_262E0               ; maxlen
MOV             R1, #0x800
BL              snprintf
SUB             R1, R11, #-(-0x18+var_7F8)
MOV             R2, #0
SUB             R1, R1, #0xC
MOV             R0, #3
BL              sub_1DD60

loc_262FC
MOV             R0, #0
SUB             SP, R11, #0x18
POP             {R4-R8,R11,PC}

loc_26308
MOV             R0, R5
MOV             R1, #1
BL              sub_48E7C
BL              sub_49028
SUBS            R5, R0, #0
LDREQ           R5, [R4,#0x248]
B               loc_26160

loc_26324
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26360
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26360
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_262FC

loc_26360
MOVW            R2, #:lower16:aDeniedStratumR_0 ; "Denied stratum reconnect request to non"...
SUB             R0, R11, #-(-0x18+var_7F8)
MOV             R3, R7
SUB             R0, R0, #0xC
MOVT            R2, #:upper16:aDeniedStratumR_0 ; "Denied stratum reconnect request to non"...
B               loc_262E0

loc_26378
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_263B4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_263B4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_262FC

loc_263B4
MOVW            R2, #:lower16:aDeniedStratumR_1 ; "Denied stratum reconnect request to url"...
SUB             R0, R11, #-(-0x18+var_7F8)
MOV             R3, R6
SUB             R0, R0, #0xC
MOVT            R2, #:upper16:aDeniedStratumR_1 ; "Denied stratum reconnect request to url"...
B               loc_262E0

loc_263CC
BL              __errno_location
LDR             LR, =aParseReconnect ; "parse_reconnect"
MOVW            R1, #:lower16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVW            R12, #0x994
MOVT            R1, #:upper16:aUtilC ; "util.c"
SUB             R0, R11, #-(-0x18+var_7F8)
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0xA24+var_A1C]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOV             R1, #0x800 ; maxlen
SUB             R0, R0, #0xC ; s
BL              snprintf
SUB             R1, R11, #-(-0x18+var_7F8)
MOV             R2, #1
SUB             R1, R1, #0xC
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_26234

loc_26424
BL              __errno_location
LDR             LR, =aParseReconnect ; "parse_reconnect"
MOVW            R1, #:lower16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVW            R12, #0x99D
MOVT            R1, #:upper16:aUtilC ; "util.c"
SUB             R0, R11, #-(-0x18+var_7F8)
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0xA24+var_A1C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOV             R1, #0x800 ; maxlen
SUB             R0, R0, #0xC ; s
BL              snprintf
SUB             R1, R11, #-(-0x18+var_7F8)
MOV             R2, #1
SUB             R1, R1, #0xC
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_260AC

B               loc_26270
off_2647C DCD aParseReconnect ; "parse_reconnect"



; int __fastcall sub_26480(pthread_mutex_t *, int)
sub_26480

var_211C= -0x211C
var_2114= -0x2114
var_2108= -0x2108
var_2100= -0x2100
var_20A4= -0x20A4
s= -0x2004

PUSH            {R4-R11,LR}
MOV             R6, R0
VPUSH           {D8-D9}
SUB             SP, SP, #0x2100
SUB             SP, SP, #0x1C
MOV             R0, R1
ADD             R2, SP, #0x211C+var_2100
MOV             R1, #0
BL              sub_47C50
SUBS            R5, R0, #0
BEQ             loc_26618
MOV             R1, #aMethod ; "method"
BL              sub_48AF4
SUBS            R7, R0, #0
BEQ             loc_265D0
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R5
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
BL              sub_48AF4
MOVW            R1, #:lower16:aParams ; "params"
MOV             R4, R0
MOVT            R1, #:upper16:aParams ; "params"
MOV             R0, R5
BL              sub_48AF4
CMP             R4, #0
MOV             R8, R0
BEQ             loc_264FC
LDR             R3, [R4]
CMP             R3, #7
BNE             loc_2668C

loc_264FC
MOV             R0, R7
BL              sub_49028
SUBS            R7, R0, #0
BEQ             loc_265D0
MOVW            R1, #:lower16:aMiningMultiVer ; "mining.multi_version"
MOV             R2, #0x14 ; n
MOVT            R1, #:upper16:aMiningMultiVer ; "mining.multi_version"
BL              strncasecmp
SUBS            R4, R0, #0
BNE             loc_26708
MOVW            R3, #:lower16:byte_72D90
MOV             R2, #1
MOVT            R3, #:upper16:byte_72D90
STRB            R2, [R6,#0x294]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26568
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26568
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_265A0

loc_26568
MOVW            LR, #:lower16:aPoolSupportMul ; "Pool support multi version"
ADD             R12, SP, #0x211C+s
MOVT            LR, #:upper16:aPoolSupportMul ; "Pool support multi version"
LDM             LR!, {R0-R3} ; "Pool support multi version"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "ti version"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x211C+s
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #6
MOV             R2, #0
STRB            R3, [R12]
BL              sub_1DD60

loc_265A0
ADD             R6, R6, #0x29C

loc_265A4
MOV             R0, R8
BL              sub_48E60
CMP             R4, R0
MOV             R1, R4
MOV             R0, R8
ADD             R4, R4, #1
BCS             loc_268EC
BL              sub_48E7C
BL              sub_49284
STR             R0, [R6],#4
B               loc_265A4

loc_265D0
MOV             R4, #0

loc_265D4
LDR             R3, [R5,#4]
CMN             R3, #1
BEQ             loc_26604
ADD             R3, R5, #4
DMB             ISH

loc_265E8
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_265E8
CMP             R2, #0
BEQ             loc_266FC

loc_26604
MOV             R0, R4
ADD             SP, SP, #0x2100
ADD             SP, SP, #0x1C
VPOP            {D8-D9}
POP             {R4-R11,PC}

loc_26618
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26654
MOV             R3, #byte_686E0
LDRB            R4, [R3]
CMP             R4, #0
BNE             loc_26654
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_26604

loc_26654
ADD             R1, SP, #0x211C+var_20A4
MOVW            R2, #:lower16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
STR             R1, [SP,#0x211C+var_211C]
ADD             R0, SP, #0x211C+s ; s
LDR             R3, [SP,#0x211C+var_2100]
MOVT            R2, #:upper16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
MOV             R1, #0x800 ; maxlen
MOV             R4, #0
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, R4
MOV             R0, #6
BL              sub_1DD60
B               loc_26604

loc_2668C
MOV             R0, R4
MOV             R1, #3
BL              sub_45A6C
MOVW            R3, #:lower16:byte_72D90
MOV             R4, R0
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_266C4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_268B0

loc_266C4
MOVW            R2, #:lower16:aJsonRpcMethodD ; "JSON-RPC method decode failed: %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aJsonRpcMethodD ; "JSON-RPC method decode failed: %s"
ADD             R0, SP, #0x211C+s ; s
MOV             R3, R4
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_266EC               ; ptr
MOV             R0, R4
MOV             R4, #0
BL              free
B               loc_265D4

loc_266FC
MOV             R0, R5
BL              sub_4942C
B               loc_26604

loc_26708
MOVW            R1, #:lower16:aMiningNotify ; "mining.notify"
MOV             R2, #0xD ; n
MOVT            R1, #:upper16:aMiningNotify ; "mining.notify"
MOV             R0, R7  ; s1
BL              strncasecmp
CMP             R0, #0
BEQ             loc_268C8
MOVW            R1, #:lower16:aMiningSetVersi ; "mining.set_version_mask"
MOV             R2, #0x17 ; n
MOVT            R1, #:upper16:aMiningSetVersi ; "mining.set_version_mask"
MOV             R0, R7  ; s1
BL              strncasecmp
SUBS            R1, R0, #0
BEQ             loc_268F4
MOVW            R1, #:lower16:aMiningSetDiffi ; "mining.set_difficulty"
MOV             R2, #0x15 ; n
MOVT            R1, #:upper16:aMiningSetDiffi ; "mining.set_difficulty"
MOV             R0, R7  ; s1
BL              strncasecmp
SUBS            R1, R0, #0
BEQ             loc_26914
MOVW            R1, #:lower16:aMiningSetExtra ; "mining.set_extranonce"
MOV             R2, #0x15 ; n
MOVT            R1, #:upper16:aMiningSetExtra ; "mining.set_extranonce"
MOV             R0, R7  ; s1
BL              strncasecmp
SUBS            R1, R0, #0
BEQ             loc_26A34
MOVW            R1, #:lower16:aClientReconnec ; "client.reconnect"
MOV             R2, #0x10 ; n
MOVT            R1, #:upper16:aClientReconnec ; "client.reconnect"
MOV             R0, R7  ; s1
BL              strncasecmp
CMP             R0, #0
BEQ             loc_26AD8
MOVW            R1, #:lower16:aClientGetVersi ; "client.get_version"
MOV             R2, #0x12 ; n
MOVT            R1, #:upper16:aClientGetVersi ; "client.get_version"
MOV             R0, R7  ; s1
BL              strncasecmp
CMP             R0, #0
BEQ             loc_26AEC
MOVW            R1, #:lower16:aClientShowMess ; "client.show_message"
MOV             R2, #0x13 ; n
MOVT            R1, #:upper16:aClientShowMess ; "client.show_message"
MOV             R0, R7  ; s1
BL              strncasecmp
CMP             R0, #0
BEQ             loc_26BD0
MOVW            R1, #:lower16:aMiningPing ; "mining.ping"
MOV             R0, R7  ; s1
MOVT            R1, #:upper16:aMiningPing ; "mining.ping"
MOV             R2, #0xB ; n
BL              strncasecmp
CMP             R0, #0
BNE             loc_265D0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26824
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26824
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2684C

loc_26824
MOVW            R2, #:lower16:aPoolDPing ; "Pool %d ping"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPoolDPing ; "Pool %d ping"
ADD             R0, SP, #0x211C+s ; s
LDR             R3, [R6]
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_2684C
MOVW            R1, #:lower16:aId ; "id"
MOV             R0, R5
MOVT            R1, #:upper16:aId ; "id"
BL              sub_48AF4
CMP             R0, #0
MOVEQ           R4, R0
BEQ             loc_265D4
MOVW            R1, #:lower16:aId ; "id"
MOV             R0, R5
MOVT            R1, #:upper16:aId ; "id"
BL              sub_48AF4
BL              sub_49284
MOVW            R1, #:lower16:aIdDResultPongE ; "{\"id\": %d, \"result\": \"pong\", \"er"...
MOV             R2, R0
MOVT            R1, #:upper16:aIdDResultPongE ; "{\"id\": %d, \"result\": \"pong\", \"er"...

loc_26888               ; s
ADD             R0, SP, #0x211C+s
BL              sprintf
ADD             R0, SP, #0x211C+s ; s
BL              strlen
ADD             R1, SP, #0x211C+s
MOV             R2, R0
MOV             R0, R6
BL              sub_2149C
MOV             R4, R0
B               loc_265D4

loc_268B0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_266EC
B               loc_266C4

loc_268C8
MOV             R1, R8
MOV             R0, R6
BL              sub_23630
SUBS            R4, R0, #0
MOVNE           R3, #1
STRBNE          R3, [R6,#0x293]
BNE             loc_265D4

loc_268E4
STRB            R4, [R6,#0x293]
B               loc_265D4

loc_268EC
MOV             R4, #1
B               loc_265D4

loc_268F4
MOV             R0, R8
MOV             R4, #1
BL              sub_48E7C
BL              sub_49028
MOV             R1, R0  ; s
MOV             R0, R6  ; int
BL              sub_20DA8
B               loc_268E4

loc_26914
MOV             R0, R8
BL              sub_48E7C
BL              sub_493C0
VCMP.F64        D0, #0.0
VMRS            APSR_nzcv, FPSCR
VMOV.F64        D8, D0
BEQ             loc_265D0
ADD             R4, R6, #0xD4
MOV             R0, R4  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_26F60

loc_26944
ADD             R7, R6, #0xEC
MOV             R0, R7  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_26F0C

loc_26958
ADD             R3, R6, #0x730
MOV             R0, R7  ; rwlock
VLDR            D9, [R3,#-8]
VSTR            D8, [R3,#-8]
VCMPE.F64       D9, #0.0
VMRS            APSR_nzcv, FPSCR
VLDRLE          D9, [R3]
VSTRLE          D8, [R3]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_26EB8

loc_26984               ; mutex
MOV             R0, R4
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_26E64

loc_26994
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
VCMP.F64        D8, D9
VMRS            APSR_nzcv, FPSCR
BEQ             loc_26C50
VCVT.S32.F64    S15, D8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
VCVT.F64.S32    D6, S15
VCMP.F64        D8, D6
VMRS            APSR_nzcv, FPSCR
BNE             loc_26CD0
CMP             R3, #0
BNE             loc_26A00
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26A00
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_268EC

loc_26A00
VSTR            S15, [SP,#0x211C+var_211C]
MOVW            R2, #:lower16:aPoolDDifficult ; "Pool %d difficulty changed to %d"
LDR             R3, [R6]
ADD             R0, SP, #0x211C+s ; s
MOVT            R2, #:upper16:aPoolDDifficult ; "Pool %d difficulty changed to %d"

loc_26A14               ; maxlen
MOV             R1, #0x800
MOV             R4, #1
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60
B               loc_265D4

loc_26A34
LDR             R7, =aParseExtranonc ; "parse_extranonce"
MOV             R0, R8
BL              sub_1F38C
MOVW            R2, #0x92D
MOV             R9, R0
MOV             R1, R7
BL              sub_1F40C
SUBS            R4, R0, #0
BNE             loc_26B28
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26A94
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26A94
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_265D0

loc_26A94
MOVW            LR, #:lower16:aFailedToGetVal_1 ; "Failed to get valid nonce1 in parse_ext"...
ADD             R12, SP, #0x211C+s
MOVT            LR, #:upper16:aFailedToGetVal_1 ; "Failed to get valid nonce1 in parse_ext"...
LDM             LR!, {R0-R3} ; "Failed to get valid nonce1 in parse_ext"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "lid nonce1 in parse_extranonce"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "rse_extranonce"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x211C+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #6
STRB            LR, [R12]
BL              sub_1DD60
B               loc_265D4

loc_26AD8
MOV             R1, R8
MOV             R0, R6
BL              sub_260AC
MOV             R4, R0
B               loc_265D4

loc_26AEC
MOVW            R1, #:lower16:aId ; "id"
MOV             R0, R5
MOVT            R1, #:upper16:aId ; "id"
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_265D0
MOVW            R1, #:lower16:aId ; "id"
MOV             R0, R5
MOVT            R1, #:upper16:aId ; "id"
BL              sub_48AF4
BL              sub_49284
MOVW            R1, #:lower16:aIdDResultCgmin ; "{\"id\": %d, \"result\": \"cgminer/1.0."...
MOV             R2, R0
MOVT            R1, #:upper16:aIdDResultCgmin ; "{\"id\": %d, \"result\": \"cgminer/1.0."...
B               loc_26888

loc_26B28
MOV             R1, #1
MOV             R0, R8
BL              sub_48E7C
BL              sub_49284
SUBS            R3, R0, #0
STR             R3, [SP,#0x211C+var_2108]
BNE             loc_26D34
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26B80
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26B80
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_26BC0

loc_26B80
MOVW            LR, #:lower16:aFailedToGetVal_2 ; "Failed to get valid n2size in parse_ext"...
ADD             R12, SP, #0x211C+s
MOVT            LR, #:upper16:aFailedToGetVal_2 ; "Failed to get valid n2size in parse_ext"...
LDM             LR!, {R0-R3} ; "Failed to get valid n2size in parse_ext"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "lid n2size in parse_extranonce"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "rse_extranonce"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x211C+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #6
STRB            LR, [R12]
BL              sub_1DD60

loc_26BC0               ; ptr
MOV             R0, R9
MOV             R4, #0
BL              free
B               loc_265D4

loc_26BD0
CMP             R8, #0
BEQ             loc_265D0
LDR             R3, [R8]
CMP             R3, #1
BNE             loc_265D0
MOV             R1, #0
MOV             R0, R8
BL              sub_48E7C
BL              sub_49028
CMP             R0, #0
BEQ             loc_265D0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26C38
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26C38
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_268EC

loc_26C38
MOVW            R2, #:lower16:aPoolDMessageS ; "Pool %d message: %s"
STR             R0, [SP,#0x211C+var_211C]
MOVT            R2, #:upper16:aPoolDMessageS ; "Pool %d message: %s"
ADD             R0, SP, #0x211C+s
LDR             R3, [R6]
B               loc_26A14

loc_26C50
MOV             R3, #byte_686E1
LDRB            R4, [R3]
CMP             R4, #0
BEQ             loc_268EC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26CA0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26CA0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_268EC

loc_26CA0
MOVW            R2, #:lower16:aPoolDDifficult_0 ; "Pool %d difficulty set to %f"
VSTR            D8, [SP,#0x211C+var_211C]
ADD             R0, SP, #0x211C+s ; s
LDR             R3, [R6]
MOVT            R2, #:upper16:aPoolDDifficult_0 ; "Pool %d difficulty set to %f"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_265D4

loc_26CD0
CMP             R3, #0
BNE             loc_26D00
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26D00
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_268EC

loc_26D00
MOVW            R2, #:lower16:aPoolDDifficult_1 ; "Pool %d difficulty changed to %.1f"
VSTR            D8, [SP,#0x211C+var_211C]
ADD             R0, SP, #0x211C+s ; s
LDR             R3, [R6]
MOVT            R2, #:upper16:aPoolDDifficult_1 ; "Pool %d difficulty changed to %.1f"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #5
MOV             R4, #1
BL              sub_1DD60
B               loc_265D4

loc_26D34
ADD             R10, R6, #0xD4
MOV             R0, R10 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_27044

loc_26D48
ADD             R11, R6, #0xEC
MOVW            R8, #:lower16:aUtilC ; "util.c"
MOV             R0, R11 ; rwlock
MOVT            R8, #:upper16:aUtilC ; "util.c"
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_26FFC

loc_26D64               ; ptr
LDR             R0, [R6,#0x274]
BL              free
STR             R9, [R6,#0x274]
MOV             R0, R9  ; s
BL              strlen
MOV             R3, R0,LSR#1
LDR             R0, [R6,#0x278] ; ptr
STR             R3, [R6,#0x62C]
BL              free
MOVW            R3, #0x93E
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#0x211C+var_211C]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aParseExtranonc ; "parse_extranonce"
MOV             R1, #1
LDR             R0, [R6,#0x62C]
BL              sub_1F8B0
CMP             R0, #0
STR             R0, [R6,#0x278]
BEQ             loc_26FB8

loc_26DB4
LDR             R2, [R6,#0x62C]
LDR             R1, [R6,#0x274]
LDR             R0, [R6,#0x278]
BL              sub_1FB44
LDR             R3, [SP,#0x211C+var_2108]
MOV             R0, R11 ; rwlock
STR             R3, [R6,#0x288]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_26F70

loc_26DDC
MOV             R0, R10
MOVW            R2, #0x943
LDR             R1, =aParseExtranonc ; "parse_extranonce"
BL              sub_1F654
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26E38
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26E38
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_268EC

loc_26E38
MOVW            R2, #:lower16:aPoolDExtranonc ; "Pool %d extranonce change requested"
LDR             R3, [R6]
ADD             R0, SP, #0x211C+s ; s
MOVT            R2, #:upper16:aPoolDExtranonc ; "Pool %d extranonce change requested"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60
B               loc_265D4

loc_26E64
BL              __errno_location
LDR             R1, =aParseDiff ; "parse_diff"
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x90F
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x211C+var_2114]
STR             R1, [SP,#0x211C+var_211C+4]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R3, [SP,#0x211C+var_211C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_26994

loc_26EB8
BL              __errno_location
LDR             R1, =aParseDiff ; "parse_diff"
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x90F
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#0x211C+var_2114]
STR             R1, [SP,#0x211C+var_211C+4]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R3, [SP,#0x211C+var_211C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_26984

loc_26F0C
BL              __errno_location
LDR             R1, =aParseDiff ; "parse_diff"
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x902
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R12, [SP,#0x211C+var_2114]
STR             R1, [SP,#0x211C+var_211C+4]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R3, [SP,#0x211C+var_211C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_26958

loc_26F60
MOVW            R1, #0x902
LDR             R0, =aParseDiff ; "parse_diff"
BL              sub_1F6D0
B               loc_26944

loc_26F70
BL              __errno_location
MOVW            R3, #0x943
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R7, [SP,#0x211C+var_211C+4]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R8, [SP,#0x211C+var_211C]
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x211C+var_2114]
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_26DDC

loc_26FB8
MOV             R1, #0x940
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aFailedToCalloc_5 ; "Failed to calloc pool->nonce1bin in %s "...
STR             R1, [SP,#0x211C+var_211C+4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R7, [SP,#0x211C+var_211C]
ADD             R0, SP, #0x211C+s ; s
MOVT            R2, #:upper16:aFailedToCalloc_5 ; "Failed to calloc pool->nonce1bin in %s "...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_26DB4

loc_26FFC
BL              __errno_location
MOVW            R3, #0x939
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R8, [SP,#0x211C+var_211C]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R7, [SP,#0x211C+var_211C+4]
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x211C+var_2114]
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_26D64

loc_27044
MOVW            R1, #0x939
MOV             R0, R7
BL              sub_1F6D0
; End of function sub_26480

B               loc_26D48
off_27054 DCD aParseExtranonc ; "parse_extranonce"
off_27058 DCD aParseDiff ; "parse_diff"



; int __fastcall sub_2705C(pthread_mutex_t *, int)
sub_2705C
SUBS            R3, R1, #0
BEQ             loc_27068
B               sub_26480

loc_27068
MOV             R0, R3
BX              LR
; End of function sub_2705C




; int __fastcall sub_27070(pthread_mutex_t *)
sub_27070

var_2908= -0x2908
var_28FC= -0x28FC
s= -0x2800
var_2008= -0x2008

MOVW            R3, #:lower16:dword_72DBC
PUSH            {R4-R8,LR}
MOVT            R3, #:upper16:dword_72DBC
SUB             SP, SP, #0x2900
SUB             SP, SP, #8
MOV             R4, R0
LDR             R2, [R3]
MOVW            R1, #:lower16:aIdDMethodMinin_3 ; "{\"id\": %d, \"method\": \"mining.extra"...
ADD             R0, SP, #0x2908+var_2008
MOVT            R1, #:upper16:aIdDMethodMinin_3 ; "{\"id\": %d, \"method\": \"mining.extra"...
ADD             R0, R0, #8 ; s
ADD             R12, R2, #1
STR             R12, [R3]
BL              sprintf
ADD             R0, SP, #0x2908+var_2008
ADD             R0, R0, #8 ; s
BL              strlen
ADD             R1, SP, #0x2908+var_2008
MOV             R2, R0
ADD             R1, R1, #8
MOV             R0, R4
BL              sub_2149C
SUBS            R7, R0, #0
BNE             loc_270FC
B               loc_271A8

loc_270D4
BL              sub_21850
SUBS            R5, R0, #0
MOV             R0, R4
MOV             R1, R5
BEQ             loc_271B8
BL              sub_26480
SUBS            R1, R0, #0
MOV             R0, R5  ; ptr
BEQ             loc_271CC
BL              free

loc_270FC
MOV             R1, #2
LDR             R0, [R4,#0x24C]
BL              sub_1F294
SUBS            R6, R0, #0
MOV             R0, R4
BNE             loc_270D4
MOV             R3, #byte_686E1
LDRB            R4, [R3]
CMP             R4, #0
BEQ             loc_271A8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27168
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27168
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
MOVLE           R7, R4
BLE             loc_271A8

loc_27168
MOVW            R12, #:lower16:aTimedOutWaitin_1 ; "Timed out waiting for response extranon"...
ADD             LR, SP, #0x2908+s
MOVT            R12, #:upper16:aTimedOutWaitin_1 ; "Timed out waiting for response extranon"...
MOV             R7, R4
LDM             R12!, {R0-R3} ; "Timed out waiting for response extranon"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "g for response extranonce.subscribe"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "xtranonce.subscribe"
LDR             R12, [R12] ; "ibe"
STM             LR!, {R0-R3}
ADD             R1, SP, #0x2908+s
MOV             R2, #0
MOV             R0, #7
STR             R12, [LR]
BL              sub_1DD60

loc_271A8
MOV             R0, R7
ADD             SP, SP, #0x2900
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_271B8
MOV             R7, R5
MOV             R0, R7
ADD             SP, SP, #0x2900
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_271CC
ADD             R2, SP, #0x2908+var_28FC
BL              sub_47C50
MOV             R8, R0
MOV             R0, R5  ; ptr
BL              free
MOVW            R1, #:lower16:aResult ; "result"
MOV             R0, R8
MOVT            R1, #:upper16:aResult ; "result"
BL              sub_48AF4
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R7, R0
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R8
BL              sub_48AF4
CMP             R7, #0
MOV             R5, R0
BEQ             loc_272CC
LDR             R3, [R7]
CMP             R3, #6
BEQ             loc_272CC
CMP             R0, #0
BEQ             loc_273B8
LDR             R3, [R0]
CMP             R3, #7
BEQ             loc_273B8

loc_27230
MOV             R1, #1
MOV             R0, R5
BL              sub_1F328
SUBS            R7, R0, #0
BEQ             loc_27454

loc_27244
MOVW            R1, #:lower16:aMethodSubscrib ; "Method 'subscribe' not found for servic"...
MOV             R0, R7  ; s1
MOVT            R1, #:upper16:aMethodSubscrib ; "Method 'subscribe' not found for servic"...
BL              strcmp
CMP             R0, #0
BEQ             loc_27288
MOVW            R1, #:lower16:aUnrecognizedRe ; "Unrecognized request provided"
MOV             R0, R7  ; s1
MOVT            R1, #:upper16:aUnrecognizedRe ; "Unrecognized request provided"
BL              strcmp
CMP             R0, #0
BEQ             loc_27288

loc_27274
MOV             R0, R5
MOV             R1, #3
BL              sub_45A6C
MOV             R5, R0
B               loc_27300

loc_27288
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27424
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27424
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_27424

loc_272C4
MOV             R7, R6
B               loc_27374

loc_272CC
CMP             R5, #0
BNE             loc_27230
MOV             R0, #0x11 ; size
BL              malloc
SUBS            R5, R0, #0
BEQ             loc_27300
MOVW            R12, #:lower16:aUnknownReason ; "(unknown reason)"
MOV             LR, R5
MOVT            R12, #:upper16:aUnknownReason ; "(unknown reason)"
LDM             R12!, {R0-R3} ; "(unknown reason)"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
STRB            R12, [LR]

loc_27300
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2733C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2733C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_27368

loc_2733C
MOVW            R2, #:lower16:aPoolDJsonExtra ; "Pool %d JSON extranonce subscribe faile"...
LDR             R3, [R4]
MOVT            R2, #:upper16:aPoolDJsonExtra ; "Pool %d JSON extranonce subscribe faile"...
MOV             R1, #0x800 ; maxlen
STR             R5, [SP,#0x2908+var_2908]
ADD             R0, SP, #0x2908+s ; s
BL              snprintf
ADD             R1, SP, #0x2908+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_27368               ; ptr
MOV             R0, R5
MOV             R7, #0
BL              free

loc_27374
CMP             R8, #0
BEQ             loc_271A8
LDR             R3, [R8,#4]
CMN             R3, #1
BEQ             loc_271A8
ADD             R3, R8, #4
DMB             ISH

loc_27390
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_27390
CMP             R2, #0
BNE             loc_271A8
MOV             R0, R8
BL              sub_4942C
B               loc_271A8

loc_273B8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_273F4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_273F4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_272C4

loc_273F4
MOVW            R2, #:lower16:aStratumExtrano ; "Stratum extranonce subscribe for pool %"...
LDR             R3, [R4]
ADD             R0, SP, #0x2908+s ; s
MOVT            R2, #:upper16:aStratumExtrano ; "Stratum extranonce subscribe for pool %"...
MOV             R1, #0x800 ; maxlen
MOV             R7, R6
BL              snprintf
ADD             R1, SP, #0x2908+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_27374

loc_27424
MOVW            R2, #:lower16:aCannotSubscrib ; "Cannot subscribe to mining.extranonce f"...
LDR             R3, [R4]
ADD             R0, SP, #0x2908+s ; s
MOVT            R2, #:upper16:aCannotSubscrib ; "Cannot subscribe to mining.extranonce f"...
MOV             R1, #0x800 ; maxlen
MOV             R7, R6
BL              snprintf
ADD             R1, SP, #0x2908+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_27374

loc_27454
MOV             R0, R5
BL              sub_49028
SUBS            R7, R0, #0
BEQ             loc_27274
B               loc_27244
; End of function sub_27070




; int __fastcall sub_27468(pthread_mutex_t *)
sub_27468

var_290C= -0x290C
var_2900= -0x2900
s= -0x2804
var_200C= -0x200C

PUSH            {R4-R9,LR}
MOVW            R7, #:lower16:dword_72DBC
LDR             R3, [R0,#0xAC]
MOV             R4, R0
MOVT            R7, #:upper16:dword_72DBC
SUB             SP, SP, #0x2900
LDR             R0, [R0,#0xB0]
SUB             SP, SP, #0xC
LDR             R2, [R7]
MOV             R1, #aIdDMethodMinin_4 ; "{\"id\": %d, \"method\": \"mining.autho"...
STR             R0, [SP,#0x290C+var_290C]
ADD             R0, SP, #0x290C+var_200C
ADD             R12, R2, #1
ADD             R0, R0, #8 ; s
STR             R12, [R7]
BL              sprintf
ADD             R0, SP, #0x290C+var_200C
ADD             R0, R0, #8 ; s
BL              strlen
ADD             R1, SP, #0x290C+var_200C
MOV             R2, R0
ADD             R1, R1, #8
MOV             R0, R4
BL              sub_2149C
SUBS            R9, R0, #0
BNE             loc_274EC
B               loc_27504

loc_274D8
BL              sub_26480
SUBS            R6, R0, #0
MOV             R0, R5  ; ptr
BEQ             loc_27518
BL              free

loc_274EC
MOV             R0, R4
BL              sub_21850
SUBS            R5, R0, #0
MOV             R0, R4
MOV             R1, R5
BNE             loc_274D8

loc_27504
MOV             R6, #0

loc_27508
MOV             R0, R6
ADD             SP, SP, #0x2900
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_27518
ADD             R2, SP, #0x290C+var_2900
MOV             R1, R6
BL              sub_47C50
MOV             R8, R0
MOV             R0, R5  ; ptr
BL              free
MOVW            R1, #:lower16:aResult ; "result"
MOV             R0, R8
MOVT            R1, #:upper16:aResult ; "result"
BL              sub_48AF4
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R5, R0
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R8
BL              sub_48AF4
CMP             R5, #0
BEQ             loc_27618
LDR             R3, [R5]
CMP             R3, #6
BEQ             loc_27618
CMP             R0, #0
BEQ             loc_27680
LDR             R3, [R0]
CMP             R3, #7
BEQ             loc_27680

loc_2757C
MOV             R1, #3
BL              sub_45A6C
MOV             R5, R0

loc_27588
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27650
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27650
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_27650

loc_275C4               ; ptr
MOV             R0, R5
BL              free
MOV             R0, R4
BL              sub_21338

loc_275D4
CMP             R8, #0
BEQ             loc_27508
LDR             R3, [R8,#4]
CMN             R3, #1
BEQ             loc_27508
ADD             R3, R8, #4
DMB             ISH

loc_275F0
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_275F0
CMP             R2, #0
BNE             loc_27508
MOV             R0, R8
BL              sub_4942C
B               loc_27508

loc_27618
CMP             R0, #0
BNE             loc_2757C
MOV             R0, #0x11 ; size
BL              malloc
SUBS            R5, R0, #0
BEQ             loc_27588
MOVW            R12, #:lower16:aUnknownReason ; "(unknown reason)"
MOV             LR, R5
MOVT            R12, #:upper16:aUnknownReason ; "(unknown reason)"
LDM             R12!, {R0-R3} ; "(unknown reason)"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
STRB            R12, [LR]
B               loc_27588

loc_27650
MOVW            R2, #:lower16:aPoolDJsonStrat ; "pool %d JSON stratum auth failed: %s"
LDR             R3, [R4]
ADD             R0, SP, #0x290C+s ; s
STR             R5, [SP,#0x290C+var_290C]
MOVT            R2, #:upper16:aPoolDJsonStrat ; "pool %d JSON stratum auth failed: %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x290C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_275C4

loc_27680
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_276BC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_276BC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_276E4

loc_276BC
MOVW            R2, #:lower16:aStratumAuthori ; "Stratum authorisation success for pool "...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aStratumAuthori ; "Stratum authorisation success for pool "...
ADD             R0, SP, #0x290C+s ; s
LDR             R3, [R4]
BL              snprintf
ADD             R1, SP, #0x290C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_276E4
MOVW            R3, #:lower16:dword_761E0
MOVW            R2, #:lower16:byte_686E2
MOVT            R3, #:upper16:dword_761E0
MOV             R1, #1
LDR             R3, [R3]
MOVT            R2, #:upper16:byte_686E2
STRB            R1, [R2]
STRB            R1, [R4,#0x63]
CMP             R3, #0
MOVEQ           R6, R9
BEQ             loc_275D4
LDR             R2, [R7]
ADD             R0, SP, #0x290C+var_200C
MOVW            R1, #:lower16:aIdDMethodMinin_5 ; "{\"id\": %d, \"method\": \"mining.sugge"...
ADD             R0, R0, #8 ; s
MOVT            R1, #:upper16:aIdDMethodMinin_5 ; "{\"id\": %d, \"method\": \"mining.sugge"...
MOV             R6, R9
ADD             R12, R2, #1
STR             R12, [R7]
BL              sprintf
ADD             R0, SP, #0x290C+var_200C
ADD             R0, R0, #8 ; s
BL              strlen
ADD             R1, SP, #0x290C+var_200C
MOV             R2, R0
ADD             R1, R1, #8
MOV             R0, R4
BL              sub_2149C
B               loc_275D4
; End of function sub_27468




; int __fastcall sub_27758(int *, _DWORD *, _DWORD *)
sub_27758
LDR             R12, [R1]
LDR             R3, [R2]
CMP             R12, R3
BGT             loc_277CC
PUSH            {R4,LR}
BEQ             loc_277B4

loc_27770
SUB             R12, R3, R12
STR             R12, [R0]
LDR             R3, [R2,#4]
LDR             R2, [R1,#4]
SUB             R3, R3, R2
CMP             R3, #0
STR             R3, [R0,#4]
BLT             loc_27798
MOV             R0, #0
POP             {R4,PC}

loc_27798
ADD             R3, R3, #0xF4000
SUB             R12, R12, #1
ADD             R3, R3, #0x240
STR             R12, [R0]
STR             R3, [R0,#4]
MOV             R0, #0
POP             {R4,PC}

loc_277B4
LDR             R4, [R1,#4]
LDR             LR, [R2,#4]
CMP             R4, LR
BLE             loc_27770
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_277CC
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_27758




; _BYTE *__fastcall sub_277D4(_BYTE *result, int)
sub_277D4
CMP             R1, #1
BXEQ            LR
SUB             R12, R0, #1
MOV             R3, #0
ADD             R0, R0, R1
PUSH            {R4,LR}

loc_277EC
ADD             R3, R3, #1
LDRB            LR, [R12,#1]!
MVN             R2, R3
LDRB            R4, [R0,#-1]!
ADD             R2, R2, R1
CMP             R3, R2
STRB            R4, [R12]
STRB            LR, [R0]
BCC             loc_277EC
POP             {R4,PC}
; End of function sub_277D4




; int __fastcall sub_27814(int result, char)
sub_27814
SUB             R3, R0, #1
CMP             R3, #0x3F ; switch 64 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_2781C ; jumptable 0002781C default case, cases 2,4-6,8-14,16-30,32-62
jpt_2781C DCD locret_2795C, loc_2798C, def_2781C, loc_2799C ; jump table for switch statement
DCD def_2781C, def_2781C, def_2781C, loc_279C0
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, loc_27924
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, loc_279F0
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, def_2781C
DCD def_2781C, def_2781C, def_2781C, loc_27960

loc_27924               ; jumptable 0002781C case 15
AND             R1, R1, #0xF0
CMP             R1, #0x80
BEQ             loc_27ACC
BHI             loc_27A2C
CMP             R1, #0x40 ; '@'
BEQ             loc_27AC4
BHI             loc_27A78
CMP             R1, #0x20 ; ' '
BEQ             loc_27A24
CMP             R1, #0x30 ; '0'
BEQ             loc_27ABC
CMP             R1, #0x10
BEQ             loc_279E8

loc_27958
MOV             R0, #1

locret_2795C            ; jumptable 0002781C case 0
BX              LR

loc_27960               ; jumptable 0002781C case 63
BIC             R1, R1, #3
SUB             R1, R1, #4
UXTB            R1, R1
CMP             R1, #0xF8
BHI             loc_27958
MOVW            R3, #:lower16:dword_4C28C
MOVW            R2, #0x8C8
MOVT            R3, #:upper16:dword_4C28C
ADD             R1, R3, R1
LDRSB           R0, [R1,R2]
BX              LR

loc_2798C               ; jumptable 0002781C case 1
AND             R1, R1, #0x80
CMP             R1, #0x80
MOVNE           R0, #1
BX              LR

loc_2799C               ; jumptable 0002781C case 3
AND             R1, R1, #0xC0
CMP             R1, #0x80
BEQ             loc_27A24
CMP             R1, #0xC0
BXEQ            LR
CMP             R1, #0x40 ; '@'
MOVEQ           R0, #2
MOVNE           R0, #1
BX              LR

loc_279C0               ; jumptable 0002781C case 7
AND             R1, R1, #0xE0
CMP             R1, #0x80
BEQ             loc_27AC4
BHI             loc_27A58
CMP             R1, #0x40 ; '@'
BEQ             loc_27A24
CMP             R1, #0x60 ; '`'
BEQ             loc_27ABC
CMP             R1, #0x20 ; ' '
BNE             loc_27958

loc_279E8
MOV             R0, #2
BX              LR

loc_279F0               ; jumptable 0002781C case 31
BIC             R1, R1, #7
SUB             R1, R1, #8
UXTB            R1, R1
CMP             R1, #0xF0
BHI             loc_27958
MOVW            R3, #:lower16:dword_4C28C
MOVW            R2, #0x7D4
MOVT            R3, #:upper16:dword_4C28C
ADD             R1, R3, R1
LDRSB           R0, [R1,R2]
BX              LR

def_2781C               ; jumptable 0002781C default case, cases 2,4-6,8-14,16-30,32-62
MOV             R0, #0
BX              LR

loc_27A24
MOV             R0, #3
BX              LR

loc_27A2C
CMP             R1, #0xC0
BEQ             loc_27ADC
BLS             loc_27A94
CMP             R1, #0xE0
BEQ             loc_27AD4
CMP             R1, #0xF0
BXEQ            LR
CMP             R1, #0xD0
BNE             loc_27958
MOV             R0, #0xE
BX              LR

loc_27A58
CMP             R1, #0xC0
BEQ             loc_27AB4
CMP             R1, #0xE0
BXEQ            LR
CMP             R1, #0xA0
BNE             loc_27958

loc_27A70
MOV             R0, #6
BX              LR

loc_27A78
CMP             R1, #0x60 ; '`'
BEQ             loc_27AB4
CMP             R1, #0x70 ; 'p'
BEQ             loc_27AE4
CMP             R1, #0x50 ; 'P'
BNE             loc_27958
B               loc_27A70

loc_27A94
CMP             R1, #0xA0
BEQ             loc_27AF4
CMP             R1, #0xB0
BEQ             loc_27AEC
CMP             R1, #0x90
BNE             loc_27958
MOV             R0, #0xA
BX              LR

loc_27AB4
MOV             R0, #7
BX              LR

loc_27ABC
MOV             R0, #4
BX              LR

loc_27AC4
MOV             R0, #5
BX              LR

loc_27ACC
MOV             R0, #9
BX              LR

loc_27AD4
MOV             R0, #0xF
BX              LR

loc_27ADC
MOV             R0, #0xD
BX              LR

loc_27AE4
MOV             R0, #8
BX              LR

loc_27AEC
MOV             R0, #0xC
BX              LR

loc_27AF4
MOV             R0, #0xB
BX              LR
; End of function sub_27814




; void __fastcall sub_27AFC(int, char *, int)
sub_27AFC

var_C9C= -0xC9C
var_C98= -0xC98
var_C94= -0xC94
var_C90= -0xC90
var_C8C= -0xC8C
var_C88= -0xC88
var_C84= -0xC84
var_C80= -0xC80
ptr= -0xC7C
var_C78= -0xC78
var_C74= -0xC74
var_C70= -0xC70
var_C6C= -0xC6C
var_C65= -0xC65
var_C64= -0xC64
var_C55= -0xC55
var_C44= -0xC44
var_C38= -0xC38
var_C34= -0xC34
var_C25= -0xC25
var_C24= -0xC24
var_C15= -0xC15
s= -0xC04
var_80C= -0x80C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0xC90
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R10, R1
ADD             R0, SP, #0xC9C+s ; s
STR             R2, [SP,#0xC9C+var_C78]
MOV             R1, #0  ; c
MOV             R2, #0x400 ; n
MOV             R8, R4
BL              memset
MOV             LR, R4
ADD             R12, SP, #0xC9C+var_C64
LDR             R0, [LR,#0x80]!
MOV             R6, #0
ADD             R5, SP, #0xC9C+var_C34
STR             R6, [SP,#0xC9C+var_C38]
ADD             R7, SP, #0xC9C+var_C44
STR             R6, [R5],#-4
LDR             R1, [LR,#4]
LDR             R2, [LR,#8]
LDR             R3, [LR,#0xC]
STR             R6, [R5,#8]
STR             R6, [R5,#0xC]
STM             R12!, {R0-R3}
LDR             R0, [LR,#0x10]
LDR             R1, [LR,#0x14]
LDR             R2, [LR,#0x18]
LDR             R3, [LR,#0x1C]
MOV             LR, R7
STR             R6, [R5,#0x10]
MOV             R5, R4
ADD             R6, SP, #0xC9C+var_C24
STM             R12!, {R0-R3}
ADD             R12, SP, #0xC9C+var_C65
LDR             R0, [R8,#0x40]!
LDR             R1, [R8,#4]
LDR             R2, [R8,#8]
STM             R7!, {R0-R2}
LDR             R0, [R5,#0xC0]!
LDR             R1, [R5,#4]
LDR             R2, [R5,#8]
LDR             R3, [R5,#0xC]
STM             R6!, {R0-R3}
LDR             R0, [R5,#0x10]
LDR             R1, [R5,#0x14]
LDR             R2, [R5,#0x18]
LDR             R3, [R5,#0x1C]
ADD             R5, SP, #0xC9C+var_C55
STM             R6!, {R0-R3}

loc_27BC4
LDRB            R3, [R12,#1]!
LDRB            R2, [LR,#-1]!
CMP             R12, R5
STRB            R2, [R12]
STRB            R3, [LR]
BNE             loc_27BC4
ADD             R2, SP, #0xC9C+var_C44
ADD             R3, R2, #0xC
ADD             R12, R2, #6

loc_27BE8
LDRB            R0, [R3,#-1]!
LDRB            R1, [R2]
CMP             R12, R3
STRB            R0, [R2],#1
STRB            R1, [R3]
BNE             loc_27BE8
ADD             R3, SP, #0xC9C+var_C25
ADD             R2, SP, #0xC9C+s
ADD             R12, SP, #0xC9C+var_C15

loc_27C0C
LDRB            R1, [R3,#1]!
LDRB            R0, [R2,#-1]!
CMP             R3, R12
STRB            R0, [R3]
STRB            R1, [R2]
BNE             loc_27C0C
MOV             R1, #0x80
MOV             R0, R4
BL              sub_1FA90
MOV             R1, #0x20 ; ' '
STR             R0, [SP,#0xC9C+ptr]
ADD             R0, SP, #0xC9C+var_C64
MOVW            R5, #:lower16:aO ; "o"
BL              sub_1FA90
MOV             R1, #0xC
MOV             R8, R0
ADD             R0, SP, #0xC9C+var_C44
MOVT            R5, #:upper16:aO ; "o"
BL              sub_1FA90
MOV             R1, #4
MOV             R7, R0
MOV             R0, R10
BL              sub_1FA90
MOV             R1, #5
STR             R0, [SP,#0xC9C+var_C74]
MOV             R0, R10
BL              sub_1FA90
MOV             R1, #0x20 ; ' '
MOV             R9, R0
ADD             R0, SP, #0xC9C+var_C24
BL              sub_1FA90
MOV             R6, R0
MOV             R0, R4
BL              sub_2A954
LDR             LR, [SP,#0xC9C+var_C78]
MOV             R2, #(aAcceptedSDBenc+0x28) ; "x"
MOV             R12, R1
STR             R1, [SP,#0xC9C+var_C6C]
MOVW            R1, #:lower16:aS08xMidstateSD ; "%s %08x midstate %s data %s nonce %s ha"...
CMP             LR, #0
LDR             R3, [R4,#0x154]
MOVEQ           R5, R2
STR             R0, [SP,#0xC9C+var_C70]
STR             R0, [SP,#0xC9C+var_C8C]
MOV             R2, R5
STR             R12, [SP,#0xC9C+var_C88]
MOVT            R1, #:upper16:aS08xMidstateSD ; "%s %08x midstate %s data %s nonce %s ha"...
STR             R6, [SP,#0xC9C+var_C90]
ADD             R0, SP, #0xC9C+s ; s
STR             R9, [SP,#0xC9C+var_C94]
STR             R7, [SP,#0xC9C+var_C98]
STR             R8, [SP,#0xC9C+var_C9C]
BL              sprintf
MOVW            R3, #:lower16:dword_688F0
MOVW            R1, #:lower16:aScreen ; "screen"
MOVT            R3, #:upper16:dword_688F0
MOVT            R1, #:upper16:aScreen ; "screen"
LDR             R0, [R3] ; s1
BL              strcmp
CMP             R0, #0
MOV             R3, #byte_72D90
BNE             loc_27DC8
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27D2C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_28080

loc_27D2C
ADD             R0, SP, #0xC9C+var_80C
ADD             R2, SP, #0xC9C+s ; format
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #8 ; s
BL              snprintf
ADD             R1, SP, #0xC9C+var_80C
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #3
BL              sub_1DD60

loc_27D54
LDR             R3, [SP,#0xC9C+ptr]
CMP             R3, #0
BEQ             loc_27D68
MOV             R0, R3  ; ptr
BL              free

loc_27D68
CMP             R8, #0
BEQ             loc_27D78
MOV             R0, R8  ; ptr
BL              free

loc_27D78
CMP             R7, #0
BEQ             loc_27D88
MOV             R0, R7  ; ptr
BL              free

loc_27D88
LDR             R3, [SP,#0xC9C+var_C74]
CMP             R3, #0
BEQ             loc_27D9C
MOV             R0, R3  ; ptr
BL              free

loc_27D9C
CMP             R9, #0
BEQ             loc_27DAC
MOV             R0, R9  ; ptr
BL              free

loc_27DAC
CMP             R6, #0
BEQ             loc_27DBC
MOV             R0, R6  ; ptr
BL              free

loc_27DBC
ADD             SP, SP, #0xC90
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_27DC8
STR             R3, [SP,#0x34]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27DEC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_28098

loc_27DEC
ADD             R0, SP, #0xC9C+var_80C
ADD             R2, SP, #0xC9C+s ; format
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #8 ; s
BL              snprintf
ADD             R1, SP, #0xC9C+var_80C
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #3
BL              sub_1DD60

loc_27E14
MOV             R11, #dword_6A488
LDR             R3, [R11]
CMP             R3, #0
BEQ             loc_27D54
LDR             R12, [SP,#0xC9C+ptr]
MOVW            R1, #:lower16:aS08xWorkSMidst ; "%s %08x work %s midstate %s data %s non"...
LDR             R2, [SP,#0xC9C+var_C70]
MOVT            R1, #:upper16:aS08xWorkSMidst ; "%s %08x work %s midstate %s data %s non"...
LDR             R0, [SP,#0xC9C+var_C6C]
LDR             R3, [R4,#0x154]
STR             R12, [SP,#0xC9C+var_C9C]
STR             R2, [SP,#0xC9C+var_C84]
MOV             R2, R5
STR             R0, [SP,#0xC9C+var_C80]
ADD             R0, SP, #0xC9C+s ; s
STR             R6, [SP,#0xC9C+var_C8C]
STR             R9, [SP,#0xC9C+var_C90]
STR             R7, [SP,#0xC9C+var_C94]
STR             R8, [SP,#0xC9C+var_C98]
BL              sprintf
ADD             R0, SP, #0xC9C+s ; s
BL              strlen
LDR             R3, [R11] ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
ADD             R0, SP, #0xC9C+s ; ptr
BL              fwrite
MOV             R2, #1  ; n
MOVW            R0, #:lower16:word_4C1E4
LDR             R3, [R11] ; s
MOV             R1, R2  ; size
MOVT            R0, #:upper16:word_4C1E4 ; ptr
BL              fwrite
LDR             R0, [R11] ; stream
BL              fflush
LDR             R3, [SP,#0xC9C+var_C78]
CMP             R3, #0
BEQ             loc_27D54
MOV             R5, #dword_6A484
LDR             R4, [R5]
CMP             R4, #1
BEQ             loc_280B0
SUB             R4, R4, #0x20 ; ' '
BICS            R3, R4, #0x20 ; ' '
BNE             loc_27F48
LDR             R3, [SP,#0xC9C+var_C74]
MOVW            R1, #:lower16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
MOV             R2, R8
MOVT            R1, #:upper16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
STR             R6, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+s ; s
STR             R3, [SP,#0xC9C+var_C9C]
MOV             R3, R7
BL              sprintf
MOVW            R11, #:lower16:dword_6A48C
LDRB            R1, [R10]
LDR             R0, [R5]
MOVT            R11, #:upper16:dword_6A48C
BL              sub_27814
MOV             R4, R0
ADD             R0, SP, #0xC9C+s ; s
BL              strlen
LDR             R3, [R11,R4,LSL#2] ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
ADD             R0, SP, #0xC9C+s ; ptr
BL              fwrite
MOV             R2, #1  ; n
MOVW            R0, #:lower16:word_4C1E4
LDR             R3, [R11,R4,LSL#2] ; s
MOV             R1, R2  ; size
MOVT            R0, #:upper16:word_4C1E4 ; ptr
BL              fwrite
LDR             R0, [R11,R4,LSL#2] ; stream
BL              fflush

loc_27F48
MOV             R3, #byte_6A590
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_27D54
LDR             R2, [SP,#0xC9C+var_C70]
MOV             R4, #0
LDR             R3, [SP,#0xC9C+var_C6C]
B               loc_27F78

loc_27F6C
ADD             R4, R4, #1
CMP             R4, #0x40 ; '@'
BEQ             loc_27F88

loc_27F78
MOVS            R3, R3,LSR#1
MOV             R2, R2,RRX
ORRS            R1, R2, R3
BNE             loc_27F6C

loc_27F88
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_28014
LDR             R3, [SP,#0x34]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27FD4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27FD4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_28014

loc_27FD4
LDR             R3, [SP,#0xC9C+var_C70]
MOVW            R2, #:lower16:aWorkDiffLldDif ; "work diff %lld diffnum %d"
ADD             R0, SP, #0xC9C+var_80C
MOVT            R2, #:upper16:aWorkDiffLldDif ; "work diff %lld diffnum %d"
MOV             R1, #0x800 ; maxlen
STR             R4, [SP,#0xC9C+var_C94]
STR             R3, [SP,#0xC9C+var_C9C]
ADD             R0, R0, #8 ; s
LDR             R3, [SP,#0xC9C+var_C6C]
STR             R3, [SP,#0xC9C+var_C98]
BL              snprintf
ADD             R1, SP, #0xC9C+var_80C
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #7
BL              sub_1DD60

loc_28014
LDR             R3, [SP,#0xC9C+var_C74]
MOVW            R1, #:lower16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
MOV             R2, R8
MOVT            R1, #:upper16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
STR             R6, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+s ; s
STR             R3, [SP,#0xC9C+var_C9C]
MOVW            R5, #:lower16:unk_6A594
MOV             R3, R7
MOVT            R5, #:upper16:unk_6A594
BL              sprintf
ADD             R0, SP, #0xC9C+s ; s
BL              strlen
LDR             R3, [R5,R4,LSL#2] ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
ADD             R0, SP, #0xC9C+s ; ptr
BL              fwrite
MOV             R2, #1  ; n
MOVW            R0, #:lower16:word_4C1E4
LDR             R3, [R5,R4,LSL#2] ; s
MOV             R1, R2  ; size
MOVT            R0, #:upper16:word_4C1E4 ; ptr
BL              fwrite
LDR             R0, [R5,R4,LSL#2] ; stream
BL              fflush
B               loc_27D54

loc_28080
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_27D54
B               loc_27D2C

loc_28098
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_27E14
B               loc_27DEC

loc_280B0
LDR             R3, [SP,#0xC9C+var_C74]
MOVW            R1, #:lower16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
MOV             R2, R8
MOVT            R1, #:upper16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
STR             R6, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+s ; s
STR             R3, [SP,#0xC9C+var_C9C]
MOVW            R5, #:lower16:dword_6A48C
MOV             R3, R7
MOVT            R5, #:upper16:dword_6A48C
BL              sprintf
ADD             R0, SP, #0xC9C+s ; s
BL              strlen
LDR             R3, [R5] ; s
MOV             R1, R0  ; size
MOV             R2, R4  ; n
ADD             R0, SP, #0xC9C+s ; ptr
BL              fwrite
MOVW            R0, #:lower16:word_4C1E4
LDR             R3, [R5] ; s
MOV             R2, R4  ; n
MOV             R1, R4  ; size
MOVT            R0, #:upper16:word_4C1E4 ; ptr
BL              fwrite
LDR             R0, [R5] ; stream
BL              fflush
B               loc_27F48
; End of function sub_27AFC




; void __fastcall sub_2811C(int, char *, int)
sub_2811C
MOV             R3, #dword_688F0
LDR             R3, [R3]
CMP             R3, #0
BXEQ            LR
B               sub_27AFC
; End of function sub_2811C




; void __fastcall sub_28134(int, int, int)
sub_28134

var_10= -0x10
var_C= -0xC
var_8= -8

MOV             R3, #dword_688F0
LDR             R3, [R3]
CMP             R3, #0
BXEQ            LR
PUSH            {LR}
SUB             SP, SP, #0xC
MOV             R3, R1
ADD             R1, SP, #0x10+var_8
MOV             R12, #0
STR             R3, [R1,#-8]!
STRB            R12, [SP,#0x10+var_C]
BL              sub_27AFC
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_28134

CMP             R1, #0
BEQ             loc_281C4
SUB             R1, R1, #1
PUSH            {LR}
UXTH            R1, R1
MOV             R3, #0xFF
MOVW            LR, #:lower16:dword_4C28C
ADD             R1, R0, R1
SUB             R2, R0, #1
MOV             R12, R3
MOVT            LR, #:upper16:dword_4C28C

loc_2819C
LDRB            R0, [R2,#1]!
EOR             R3, R3, R0
CMP             R1, R2
ADD             R0, LR, R3
LDRB            R3, [R0,#0x9C4]
EOR             R3, R3, R12
LDRB            R12, [R0,#0xAC4]
BNE             loc_2819C
ORR             R0, R3, R12,LSL#8
POP             {PC}

loc_281C4
MOVW            R0, #0xFFFF
BX              LR
CMP             R1, #0
BEQ             loc_2828C
PUSH            {R4-R10,LR}
MOV             R9, #1
MOV             R4, #0
MOV             R6, R9
MOV             R2, R4
MOV             R8, R9
MOV             R5, R9
MOV             R7, R9
MOV             LR, #0x80
B               loc_2820C

loc_281FC
MOV             R6, R8
MOV             R5, R7
MOV             R8, R12
MOV             R7, R3

loc_2820C
LDRB            R3, [R0]
ADD             R2, R2, #1
UXTB            R2, R2
ADD             R4, R4, #1
UXTB            R10, R4
AND             R3, R3, LR
MOV             LR, LR,LSR#1
CMP             R3, #0
MOVEQ           R3, R9
EORNE           R3, R9, #1
UXTB            R3, R3
CMP             R2, #8
ADDEQ           R0, R0, #1
MOVEQ           R2, #0
MOVEQ           LR, #0x80
CMP             R10, R1
EOR             R12, R3, R5
UXTB            R12, R12
MOV             R9, R6
BCC             loc_281FC
CMP             R6, #0
MOVNE           R0, #0x10
MOVEQ           R0, #0
CMP             R8, #0
ORRNE           R0, R0, #8
CMP             R3, R5
ORRNE           R0, R0, #4
CMP             R7, #0
ORRNE           R0, R0, #2
CMP             R3, #0
ORRNE           R0, R0, #1
POP             {R4-R10,PC}

loc_2828C
MOV             R3, #1
MOV             R0, #0x1E
CMP             R3, #0
ORRNE           R0, R0, #1
BX              LR



; int __fastcall sub_282A4(int result, unsigned int *, unsigned int)
sub_282A4
MOVS            R2, R2,LSR#2
BXEQ            LR
ADD             R2, R1, R2,LSL#2
SUB             R0, R0, #4

loc_282B4
LDR             R3, [R1],#4
CMP             R1, R2
REV             R3, R3
STR             R3, [R0,#4]!
BNE             loc_282B4
BX              LR
; End of function sub_282A4

ALIGN 0x10



; int __fastcall sub_282D0(_DWORD *)
sub_282D0
MOV             R3, #4
STR             R3, [R0]
MOV             R0, #0
BX              LR
; End of function sub_282D0




; int __fastcall sub_282E0(_DWORD *)
sub_282E0
MOV             R3, #3
STR             R3, [R0]
MOV             R0, #0
BX              LR
; End of function sub_282E0




; int __fastcall sub_282F0(_DWORD *)
sub_282F0
MOV             R3, #1
STR             R3, [R0]
MOV             R0, #0
BX              LR
; End of function sub_282F0




; int __fastcall sub_28300(_BYTE *)
sub_28300
MOVW            R3, #:lower16:byte_686E0
MOV             R2, #1
MOVT            R3, #:upper16:byte_686E0
STRB            R2, [R0]
STRB            R2, [R3]
MOV             R0, #0
BX              LR
; End of function sub_28300




; int sub_2831C()
sub_2831C
MOV             R0, #0
BX              LR
; End of function sub_2831C

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_3]
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_1]



; int sub_2832C()
sub_2832C
MOV             R0, #1
BX              LR
; End of function sub_2832C




; __int64 sub_28334()
sub_28334
MOV             R0, #0xFFFFFFFF
MOV             R1, #0
BX              LR
; End of function sub_28334




; int sub_28340()
sub_28340
MOV             R0, #1
BX              LR
; End of function sub_28340

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_4]



; int sub_2834C()
sub_2834C
MOV             R0, #0
BX              LR
; End of function sub_2834C




; int __fastcall sub_28354(int result)
sub_28354
MOV             R2, #0
MOV             R3, #0
MOV             R1, #0
STRD            R2, R3, [R0,#0xD0]
STR             R1, [R0,#0x2C]
STRD            R2, R3, [R0,#0xC8]
BX              LR
; End of function sub_28354



; Attributes: noreturn

; void __noreturn sub_28370(const char *, ...)
sub_28370

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
MOVW            R4, #:lower16:byte_686E8
PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R12, SP, #0xC+varg_r1
MOVT            R4, #:upper16:byte_686E8
MOV             R3, R12 ; arg
MOV             R1, #0x200 ; maxlen
LDR             R2, [SP,#0xC+varg_r0] ; format
MOV             R0, R4  ; s
STR             R12, [SP,#0xC+var_8]
BL              vsnprintf
MOV             R0, #3
MOV             R1, R4
MOV             R2, #1
BL              sub_1DD60
MOV             R0, #1  ; status
BL              exit
; End of function sub_28370




; int __fastcall sub_283B8(int)
sub_283B8
PUSH            {R4,LR}
LDR             R1, =dword_688E8
BL              sub_3E5BC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_283B8

off_283CC DCD dword_688E8



; int __fastcall sub_283D0(int)
sub_283D0
PUSH            {R4,LR}
LDR             R1, =dword_688EC
BL              sub_3E5BC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_283D0

off_283E4 DCD dword_688EC



; int __fastcall sub_283E8(int)
sub_283E8
PUSH            {R4,LR}
LDR             R1, =dword_688F0
BL              sub_3E5BC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_283E8

off_283FC DCD dword_688F0



; int __fastcall sub_28400(int)
sub_28400
PUSH            {R4,LR}
LDR             R1, =dword_688F4
BL              sub_3E5BC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_28400

off_28414 DCD dword_688F4



; int __fastcall sub_28418(int)
sub_28418
PUSH            {R4,LR}
LDR             R1, =dword_688F8
BL              sub_3E5BC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_28418

off_2842C DCD dword_688F8



; int __fastcall sub_28430(int)
sub_28430
MOVW            R1, #:lower16:dword_74FFC
PUSH            {R4,LR}
MOVT            R1, #:upper16:dword_74FFC
BL              sub_3E5BC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_28430




; _BYTE *__fastcall sub_28448(const char *)
sub_28448
PUSH            {R4-R6,LR}
MOV             R4, R0
BL              strlen
MOV             R0, R0,LSL#1
MOVW            R2, #:lower16:aJsonEscape ; "json_escape"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVT            R2, #:upper16:aJsonEscape ; "json_escape"
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1767
ADD             R0, R0, #1
BL              sub_1F828
MOVW            R2, #:lower16:aJsonEscape ; "json_escape"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOV             R5, R0
MOVT            R2, #:upper16:aJsonEscape ; "json_escape"
MOVW            R3, #0x1768
MOV             R0, #8
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
BL              sub_1F828
MOVW            R3, #:lower16:byte_686E8
STR             R5, [R0]
MOVT            R3, #:upper16:byte_686E8
LDR             R2, [R3,#(dword_688FC - 0x686E8)]
STR             R0, [R3,#(dword_688FC - 0x686E8)]
STR             R2, [R0,#4]
MOV             R2, R5
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_284F0
MOV             R0, #0x5C ; '\'

loc_284C0
CMP             R3, #0x22 ; '"'
CMPNE           R3, #0x5C ; '\'
ADD             R3, R2, #1
MOV             R1, R3
STRBEQ          R0, [R2],#2
MOVNE           R3, R2
MOVNE           R2, R1
LDRB            R1, [R4],#1
STRB            R1, [R3]
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_284C0

loc_284F0
MOV             R3, #0
MOV             R0, R5
STRB            R3, [R2]
POP             {R4-R6,PC}
; End of function sub_28448

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
MOV             R3, #(asc_4CF84+4) ; ""
ADD             R1, SP, #4
MOV             R2, #0xA
STR             R3, [SP,#4]
MOV             R4, R0
BL              strtol
LDR             R3, [SP,#4]
LDRB            R3, [R3]
CMP             R0, #0
CMPGE           R3, #0
BEQ             loc_28608
LDRB            R3, [R4]
CMP             R3, #0x2D ; '-'
BNE             loc_28584
LDRB            R3, [R4,#1]
CMP             R3, #0
BNE             loc_28584
MOVW            R2, #:lower16:stdout
MOVW            R3, #:lower16:byte_686E8
MOVT            R2, #:upper16:stdout
MOVT            R3, #:upper16:byte_686E8
LDR             R2, [R2]
CMP             R2, #0
STR             R2, [R3,#(dword_68900 - 0x686E8)]
BEQ             loc_28678

loc_28574
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_28584
MOVW            R1, #:lower16:(aDiffa+4) ; "a"
MOV             R0, R4
MOVT            R1, #:upper16:(aDiffa+4) ; "a"
BL              fopen64
MOVW            R3, #:lower16:byte_686E8
CMP             R0, #0
MOVT            R3, #:upper16:byte_686E8
STR             R0, [R3,#(dword_68900 - 0x686E8)]
BNE             loc_28574
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_285D0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_286FC

loc_285D0
MOVW            R2, #:lower16:aFailedToOpenSF ; "Failed to open %s for share log"
MOV             R3, R4
MOVT            R2, #:upper16:aFailedToOpenSF ; "Failed to open %s for share log"

loc_285DC
MOV             R1, #0x800
ADD             R0, SP, #8
BL              snprintf
ADD             R1, SP, #8
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_28608
MOVW            R1, #:lower16:(aDiffa+4) ; "a"
MOV             R5, R0
MOVT            R1, #:upper16:(aDiffa+4) ; "a"
BL              fdopen
MOVW            R3, #:lower16:byte_686E8
CMP             R0, #0
MOVT            R3, #:upper16:byte_686E8
STR             R0, [R3,#(dword_68900 - 0x686E8)]
BNE             loc_28574
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28668
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28668
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_28574

loc_28668
MOVW            R2, #:lower16:aFailedToOpenFd ; "Failed to open fd %u for share log"
MOV             R3, R5
MOVT            R2, #:upper16:aFailedToOpenFd ; "Failed to open fd %u for share log"
B               loc_285DC

loc_28678
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_286B4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_286B4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_28574

loc_286B4
MOVW            R12, #:lower16:aStandardOutput ; "Standard output missing for share log"
ADD             LR, SP, #8
MOVT            R12, #:upper16:aStandardOutput ; "Standard output missing for share log"
LDM             R12!, {R0-R3} ; "Standard output missing for share log"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "missing for share log"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "e log"
STR             R0, [LR],#4
MOV             R0, #3
STRH            R1, [LR]
ADD             R1, SP, #8
BL              sub_1DD60
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_286FC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_285D0
B               loc_28574


; Attributes: noreturn

; void __fastcall __noreturn sub_28714(const char *)
sub_28714
PUSH            {R4,LR}
MOV             R4, R0
MOVW            R0, #:lower16:aSBuiltWithBitm ; "%s\nBuilt with bitmain_c5 mining suppor"...
LDR             R1, =s
MOVT            R0, #:upper16:aSBuiltWithBitm ; "%s\nBuilt with bitmain_c5 mining suppor"...
BL              printf
MOVW            R3, #:lower16:dword_762F8
MOV             R1, R4
MOVT            R3, #:upper16:dword_762F8
LDR             R0, [R3]
BL              sub_3F558
MOV             R1, R0
MOV             R0, #(aReceivedFromPr+0x1C) ; format
BL              printf
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
MOV             R0, #0  ; status
BL              exit
; End of function sub_28714

off_28768 DCD s



; time_t __fastcall sub_2876C(int)
sub_2876C
MOV             R3, #1
PUSH            {R4,LR}
STRB            R3, [R0,#0x3D]
MOV             R4, R0
ADD             R0, R0, #0x2C ; ','
BL              sub_206A0
LDR             R2, [R4,#0x24]
MOV             R3, #0
MOV             R0, R3  ; timer
STR             R3, [R2,#0x60]
LDR             R4, [R4,#0x24]
BL              time
STR             R0, [R4,#0xF0]
POP             {R4,PC}
; End of function sub_2876C




; time_t __fastcall sub_287A4(int)
sub_287A4
PUSH            {R4-R6,LR}
MOV             R5, #0
MOV             R4, R0
STRB            R5, [R0,#0x3D]
ADD             R0, R0, #0x2C ; ','
BL              sub_206A0
LDR             R3, [R4,#0x24]
MOV             R0, R5  ; timer
STR             R5, [R3,#0x60]
LDR             R4, [R4,#0x24]
BL              time
STR             R0, [R4,#0xF0]
POP             {R4-R6,PC}
; End of function sub_287A4




; int __fastcall sub_287D8(unsigned __int64, char *s, size_t maxlen, int)
sub_287D8

var_20= -0x20
var_18= -0x18
var_10= -0x10
var_4= -4
arg_0=  0x28

PUSH            {R4-R8,R10,R11,LR}
MOV             R12, #0
ADR             R11, dword_28A48
LDRD            R10, R11, [R11]
MOV             R7, R2
MOV             R8, R3
VPUSH           {D8}
SUB             SP, SP, #0x20
CMP             R1, R11
STRH            R12, [SP,#0x20+var_4]
CMPEQ           R0, R10
LDR             R6, [SP,#0x20+arg_0]
BLS             loc_288F0
ADR             R3, dword_28A50
LDRD            R2, R3, [R3]
BLX             sub_4AB70
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x45 ; 'E'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BNE             loc_288AC

loc_28838
ADD             R3, SP, #0x20+var_4
MOVW            R2, #:lower16:a3gS ; "%.3g%s"
VSTR            D8, [SP,#0x20+var_20]
MOV             R1, R8  ; maxlen
MOV             R0, R7  ; s
STR             R3, [SP,#0x20+var_18]
MOVT            R2, #:upper16:a3gS ; "%.3g%s"
BL              snprintf
ADD             SP, SP, #0x20 ; ' '
VPOP            {D8}
POP             {R4-R8,R10,R11,PC}

loc_28864
ADR             R3, dword_28A60
LDRD            R2, R3, [R3]
CMP             R1, R3
CMPEQ           R0, R2
BHI             loc_289E0
MOV             R3, #0
MOVW            R2, #0x3E7
CMP             R1, R3
VMOV            S15, R0 ; x
CMPEQ           R0, R2
VCVT.F64.S32    D8, S15
BLS             loc_28A10
VLDR            D7, =1000.0
CMP             R6, #0
MOV             R3, #0x4B ; 'K'
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D8, D7
BEQ             loc_28838

loc_288AC
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
MOVLE           R1, #3  ; x
BGT             loc_28990

loc_288BC
ADD             R12, SP, #0x20+var_4
MOVW            R2, #:lower16:aFS ; "%*.*f%s"
STR             R1, [SP,#0x20+var_20]
ADD             R3, R6, #1
VSTR            D8, [SP,#0x20+var_18]
MOV             R1, R8  ; maxlen
MOV             R0, R7  ; s
STR             R12, [SP,#0x20+var_10]
MOVT            R2, #:upper16:aFS ; "%*.*f%s"
BL              snprintf
ADD             SP, SP, #0x20 ; ' '
VPOP            {D8}
POP             {R4-R8,R10,R11,PC}

loc_288F0
ADR             R3, dword_28A68
LDRD            R2, R3, [R3]
CMP             R1, R3
CMPEQ           R0, R2
BLS             loc_28934
ADR             R3, dword_28A70
LDRD            R2, R3, [R3]
BLX             sub_4AB70
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x50 ; 'P'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BEQ             loc_28838
B               loc_288AC

loc_28934
ADR             R3, dword_28A78
LDRD            R2, R3, [R3]
CMP             R1, R3
CMPEQ           R0, R2
BHI             loc_289B0
ADR             R3, dword_28A80
LDRD            R2, R3, [R3]
CMP             R1, R3
CMPEQ           R0, R2
BLS             loc_28864
MOVW            R2, #0x4240
MOV             R3, #0
MOVT            R2, #0xF
BLX             sub_4AB70
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x47 ; 'G'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BEQ             loc_28838
B               loc_288AC

loc_28990
VMOV.F64        D0, D8
BL              log10
BL              floor
VMOV.F64        D7, #3.0
VSUB.F64        D0, D7, D0
VCVT.S32.F64    S15, D0
VMOV            R1, S15
B               loc_288BC

loc_289B0
ADR             R3, dword_28A88
LDRD            R2, R3, [R3]
BLX             sub_4AB70
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x54 ; 'T'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BEQ             loc_28838
B               loc_288AC

loc_289E0
MOV             R3, #0
MOV             R2, #0x3E8
BLX             sub_4AB70
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x4D ; 'M'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BEQ             loc_28838
B               loc_288AC

loc_28A10
CMP             R6, #0
BNE             loc_288AC
ADD             R12, SP, #0x20+var_4
MOVW            R2, #:lower16:aDS ; "%d%s"
MOV             R3, R0
MOV             R1, R8  ; maxlen
MOV             R0, R7  ; s
STR             R12, [SP,#0x20+var_20]
MOVT            R2, #:upper16:aDS ; "%d%s"
BL              snprintf
ADD             SP, SP, #0x20 ; ' '
VPOP            {D8}
POP             {R4-R8,R10,R11,PC}
; End of function sub_287D8

ALIGN 8
dword_28A48 DCD 0xA763FFFF
DCD 0xDE0B6B3
dword_28A50 DCD 0xA4C68000
DCD 0x38D7E
dbl_28A58 DCFD 1000.0
dword_28A60 DCD 0xF423F
DCD 0
dword_28A68 DCD 0xA4C67FFF
DCD 0x38D7E
dword_28A70 DCD 0xD4A51000
DCD 0xE8
dword_28A78 DCD 0xD4A50FFF
DCD 0xE8
dword_28A80 DCD 0x3B9AC9FF
DCD 0
dword_28A88 DCD 0x3B9ACA00
DCD 0



; int __fastcall sub_28A90(int)
sub_28A90

var_C= -0xC

VCMP.F64        D0, #0.0
VMRS            APSR_nzcv, FPSCR
PUSH            {R4,R5,LR}
MOV             R5, R0
VPUSH           {D8}
SUB             SP, SP, #0xC
LDR             R4, [R0,#0x104]
BEQ             loc_28B2C
VSTR            D0, [R5,#0x178]
VMOV.F64        D8, D0
BL              round
VMOV            R0, R1, D0
BLX             sub_4ABD0

loc_28AC4
VSTR            D8, [R4,#0x1E0]
MOV             R3, #0
LDR             R2, [R5,#0x104]
STR             R3, [SP,#0xC+var_C] ; int
MOV             R3, #8  ; maxlen
ADD             R2, R2, #0x30 ; '0' ; s
BL              sub_287D8
VLDR            D7, [R4,#0x1D0]
VCMP.F64        D7, D8
VMRS            APSR_nzcv, FPSCR
BNE             loc_28BA4
LDR             R3, [R4,#0x1E8]
ADD             R3, R3, #1
STR             R3, [R4,#0x1E8]

loc_28AFC
VLDR            D7, [R4,#0x1D8]
VCMP.F64        D7, D8
VMRS            APSR_nzcv, FPSCR
BEQ             loc_28BCC

loc_28B0C
VCMPE.F64       D7, D8
VMRS            APSR_nzcv, FPSCR
MOVMI           R3, #1
VSTRMI          D8, [R4,#0x1D8]
STRMI           R3, [R4,#0x1EC]
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4,R5,PC}

loc_28B2C
VLDR            D8, =6.27710174e57
LDRD            R0, R1, [R0,#0xB8]
BLX             sub_4AB04
VMOV            D7, R0, R1
LDRD            R0, R1, [R5,#0xB0]
VMUL.F64        D8, D7, D8
BLX             sub_4AB04
VLDR            D7, =3.40282367e38
VMOV            D6, R0, R1
LDRD            R0, R1, [R5,#0xA8]
VMLA.F64        D8, D6, D7
BLX             sub_4AB04
VLDR            D7, =1.84467441e19
VMOV            D6, R0, R1
LDRD            R0, R1, [R5,#0xA0]
VMLA.F64        D8, D6, D7
BLX             sub_4AB04
VMOV            D7, R0, R1
VADD.F64        D7, D7, D8
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
BEQ             loc_28C00
VLDR            D6, =2.69595353e67
VDIV.F64        D8, D6, D7
VMOV.F64        D0, D8
BL              round
VMOV            R0, R1, D0
BLX             sub_4ABD0

loc_28B9C
VSTR            D8, [R5,#0x178]
B               loc_28AC4

loc_28BA4
VCMPE.F64       D7, D8
VMRS            APSR_nzcv, FPSCR
BLE             loc_28BE4
MOV             R3, #1
VSTR            D8, [R4,#0x1D0]
STR             R3, [R4,#0x1E8]

loc_28BBC
VLDR            D7, [R4,#0x1D8]
VCMP.F64        D7, D8
VMRS            APSR_nzcv, FPSCR
BNE             loc_28B0C

loc_28BCC
LDR             R3, [R4,#0x1EC]
ADD             R3, R3, #1
STR             R3, [R4,#0x1EC]
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4,R5,PC}

loc_28BE4
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
BNE             loc_28AFC
MOV             R3, #1
VSTR            D8, [R4,#0x1D0]
STR             R3, [R4,#0x1E8]
B               loc_28BBC

loc_28C00
VLDR            D8, =2.69595353e67
MOV             R0, #0xFFFFFFFF
MOV             R1, #0xFFFFFFFF
B               loc_28B9C
; End of function sub_28A90

dbl_28C10 DCFD 6.27710174e57
dbl_28C18 DCFD 3.40282367e38
dbl_28C20 DCFD 1.84467441e19
dbl_28C28 DCFD 2.69595353e67



; int __fastcall sub_28C30(int)
sub_28C30

var_54= -0x54
var_50= -0x50
var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #0x70
MOV             R4, R0
SUB             R1, R0, #4
ADD             R2, SP, #0x70+var_54
ADD             R0, SP, #0x70+var_4

loc_28C48
LDR             R3, [R1,#4]!
REV             R3, R3
STR             R3, [R2,#4]!
CMP             R2, R0
BNE             loc_28C48
MOV             R2, SP
ADD             R0, SP, #0x70+var_50 ; int
MOV             R1, #0x50 ; 'P' ; n
BL              sub_1EA3C
MOV             R0, SP  ; int
ADD             R2, R4, #0xC0
MOV             R1, #0x20 ; ' ' ; n
BL              sub_1EA3C
ADD             SP, SP, #0x70 ; 'p'
POP             {R4,PC}
; End of function sub_28C30




; void __fastcall sub_28C84(int)
sub_28C84

var_F0= -0xF0
var_EC= -0xEC
var_E8= -0xE8
var_AC= -0xAC
var_A8= -0xA8
var_20= -0x20

PUSH            {R4,LR}
SUB             SP, SP, #0xF0
MOV             R4, R0
SUB             R1, R0, #4
ADD             R2, SP, #0xF0+var_EC
ADD             R0, SP, #0xF0+var_AC

loc_28C9C
LDR             R3, [R1,#4]!
REV             R3, R3
STR             R3, [R2,#4]!
CMP             R2, R0
BNE             loc_28C9C
ADD             R0, SP, #0xF0+var_A8
BL              sub_1E874
ADD             R0, SP, #0xF0+var_A8 ; int
ADD             R1, SP, #0xF0+var_E8 ; int
MOV             R2, #0x40 ; '@' ; n
BL              sub_1E8A4
LDR             R2, =aCalcMidstate ; "calc_midstate"
MOV             R1, #0x910
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0xF0+var_EC]
ADD             R0, R4, #0x80
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R2, [SP,#0xF0+var_F0]
ADD             R1, SP, #0xF0+var_20
MOV             R2, #0x20 ; ' '
BL              sub_232EC
ADD             SP, SP, #0xF0
POP             {R4,PC}
; End of function sub_28C84

off_28CF8 DCD aCalcMidstate ; "calc_midstate"



; void sub_28CFC()
sub_28CFC
PUSH            {R4-R9,LR}
MOV             R5, #dword_72E60
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDR             R3, [R5]
CMP             R3, #0
BLE             loc_28DFC
MOVW            R6, #:lower16:dword_72F04
MOVW            R7, #:lower16:byte_686E8
MOVW            R9, #:lower16:sub_33090
MOVW            R8, #:lower16:byte_686E1
MOVT            R6, #:upper16:dword_72F04
MOVT            R7, #:upper16:byte_686E8
MOVT            R9, #:upper16:sub_33090
MOVT            R8, #:upper16:byte_686E1
MOV             R4, #0
B               loc_28D54

loc_28D44
LDR             R3, [R5]
ADD             R4, R4, #1
CMP             R3, R4
BLE             loc_28DFC

loc_28D54
LDR             R3, [R6]
LDR             R3, [R3,R4,LSL#2] ; arg
LDRB            R2, [R3,#0x11C]
CMP             R2, #0
BNE             loc_28D44
LDRB            R1, [R7,#(byte_68A04 - 0x686E8)] ; attr
CMP             R1, #0
BNE             loc_28D44
MOV             R2, #1
ADD             R0, R3, #0x118 ; newthread
STRB            R2, [R3,#0x11C]
MOV             R2, R9  ; start_routine
BL              pthread_create
LDRB            R1, [R8]
MOVW            R12, #:lower16:byte_72D90
MOVW            R2, #:lower16:aCreateTestPool ; "create test_pool_thread pool[%d]\n"
MOVT            R12, #:upper16:byte_72D90
MOV             R3, R4
MOVT            R2, #:upper16:aCreateTestPool ; "create test_pool_thread pool[%d]\n"
CMP             R1, #0
MOV             R0, SP  ; s
MOV             R1, #0x800 ; maxlen
BEQ             loc_28D44
LDRB            R12, [R12]
MOV             LR, #byte_686E0
CMP             R12, #0
BNE             loc_28DD8
LDRB            LR, [LR]
MOV             R12, #dword_67840
CMP             LR, #0
BEQ             loc_28E08

loc_28DD8
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #7
ADD             R4, R4, #1
BL              sub_1DD60
LDR             R3, [R5]
CMP             R3, R4
BGT             loc_28D54

loc_28DFC
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4-R9,PC}

loc_28E08
LDR             R12, [R12]
CMP             R12, #6
BLE             loc_28D44
B               loc_28DD8
; End of function sub_28CFC




; int sub_28E18()
sub_28E18
PUSH            {R4,LR}
BL              pthread_self
BL              pthread_detach
MOV             R0, #0
POP             {R4,PC}
; End of function sub_28E18




; int __fastcall sub_28E2C(int)
sub_28E2C

var_800= -0x800

PUSH            {R4-R6,LR}
MOVW            R2, #:lower16:aDMiner ; "%d/Miner"
LDR             R6, [R0,#0x24]
SUB             SP, SP, #0x810
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:aDMiner ; "%d/Miner"
LDR             R3, [R0]
MOV             R4, R0
LDR             R5, [R6,#4]
MOV             R0, SP  ; s
BL              snprintf
MOV             R0, SP
BL              sub_22E98
MOV             R0, R4
BL              sub_2876C
LDR             R3, [R5,#0x34]
MOV             R0, R4
BLX             R3
SUBS            R1, R0, #0
BEQ             loc_28F38
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_28EF0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28EB8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_28F4C

loc_28EB8
MOVW            LR, #:lower16:aWaitingOnSemIn ; "Waiting on sem in miner thread"
ADD             R12, SP, #0x810+var_800
MOVT            LR, #:upper16:aWaitingOnSemIn ; "Waiting on sem in miner thread"
LDM             LR!, {R0-R3} ; "Waiting on sem in miner thread"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "n miner thread"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x810+var_800
MOV             LR, R3,LSR#16
MOV             R2, #0
MOV             R0, #7
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_1DD60

loc_28EF0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R2, =aMinerThread ; "miner_thread"
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x26A3
ADD             R0, R4, #0x10 ; sem
BL              sub_23018
MOV             R0, #0  ; timer
BL              time
STR             R0, [R6,#0xE8]
MOV             R0, R4
LDR             R3, [R5,#0x3C]
BLX             R3
MOV             R0, R4
LDR             R3, [R5,#0x58]
BLX             R3
MOV             R0, #0
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_28F38
MOV             R0, R6
BL              sub_22BB4
MOV             R0, #0
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_28F4C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_28EF0
B               loc_28EB8
; End of function sub_28E2C

off_28F64 DCD aMinerThread ; "miner_thread"


; Attributes: noreturn

; void __noreturn sub_28F68()
sub_28F68
PUSH            {R4,LR}
BL              pthread_self
BL              pthread_detach
MOV             R1, #0  ; oldtype
MOV             R0, #1  ; type
BL              pthread_setcanceltype
MOV             R0, #7  ; seconds
BL              sleep
MOV             R0, #1  ; status
BL              exit
; End of function sub_28F68




; _DWORD *__fastcall sub_28F90(_DWORD *result)
sub_28F90
MOVW            R3, #:lower16:dword_74F24
MOV             R1, #1
MOVT            R3, #:upper16:dword_74F24
LDR             R2, [R3]
ADD             R2, R2, R1
STR             R2, [R3]
STR             R1, [R0]
BX              LR
; End of function sub_28F90




; int __fastcall sub_28FB0(unsigned __int8 *)
sub_28FB0
LDRB            R3, [R0,#0x290]
CMP             R3, #0
BEQ             loc_28FCC
LDRB            R2, [R0,#0x291]
CMP             R2, #0
LDRBNE          R3, [R0,#0x293]
EORNE           R3, R3, #1

loc_28FCC
MOV             R0, R3
BX              LR
; End of function sub_28FB0




; int __fastcall sub_28FD4(int)
sub_28FD4
MOVW            R3, #:lower16:dword_72E60
PUSH            {R4-R8,LR}
MOVT            R3, #:upper16:dword_72E60
LDR             R7, [R0,#0x9C]
MOV             R5, R0
LDR             R6, [R3]
CMP             R6, #0
BLE             loc_2904C
MOV             R3, #dword_72F04
LDR             R4, [R3]
ADD             R6, R4, R6,LSL#2

loc_29004
LDR             R1, [R4],#4
LDRB            R3, [R1,#0x61]
CMP             R3, #0
BNE             loc_29040
LDR             R3, [R1,#0x64]
MOV             R0, R1
CMP             R3, #1
BNE             loc_29040
BL              sub_28FB0
CMP             R0, #0
BNE             loc_29040
LDR             R3, [R1,#0x9C]
CMP             R3, R7
MOVLT           R5, R1
MOVLT           R7, R3

loc_29040
CMP             R4, R6
BNE             loc_29004
LDR             R7, [R5,#0x9C]

loc_2904C
ADD             R7, R7, #1
MOV             R0, R5
STR             R7, [R5,#0x9C]
POP             {R4-R8,PC}
; End of function sub_28FD4




; int __fastcall sub_2905C(int)
sub_2905C
MOVW            R3, #:lower16:byte_72D90
PUSH            {R4,LR}
MOVT            R3, #:upper16:byte_72D90
SUB             SP, SP, #0x800
MOV             R4, R0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29090
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_290D0

loc_29090
MOVW            R2, #:lower16:aWtfNoPoolDFoun ; "WTF No pool %d found!"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aWtfNoPoolDFoun ; "WTF No pool %d found!"
MOV             R0, SP  ; s
MOV             R3, R4
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_290B8
MOV             R3, #dword_72F04
LDR             R3, [R3]
LDR             R0, [R3,R4,LSL#2]
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_290D0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_290B8
B               loc_29090
; End of function sub_2905C




; int __fastcall sub_290E8(int)
sub_290E8
MOVW            R3, #:lower16:dword_72E60
PUSH            {LR}
MOVT            R3, #:upper16:dword_72E60
LDR             LR, [R3]
CMP             LR, #0
BLE             loc_29140
MOV             R3, #dword_72F04
LDR             R2, [R3]
LDR             R1, [R2]
LDR             R3, [R1,#4]
CMP             R3, R0
BEQ             loc_29148
MOV             R3, #0
B               loc_29134

loc_29124
LDR             R1, [R2,#4]!
LDR             R12, [R1,#4]
CMP             R12, R0
BEQ             loc_29148

loc_29134
ADD             R3, R3, #1
CMP             R3, LR
BNE             loc_29124

loc_29140
POP             {LR}
B               sub_2905C

loc_29148
MOV             R0, R1
POP             {PC}
; End of function sub_290E8




; const char *__fastcall sub_29150(const char *)
sub_29150
PUSH            {R4,LR}
MOVW            R1, #:lower16:aDD ; "%d:%d"
LDR             R4, =dword_74F38
MOVT            R1, #:upper16:aDD ; "%d:%d"
MOV             R3, R4
ADD             R2, R4, #4
BL              sscanf
CMP             R0, #2
BEQ             loc_29180
MOV             R0, #aInvalidTimeSet ; "Invalid time set, should be HH:MM"
POP             {R4,PC}

loc_29180
LDR             R2, [R4,#(dword_74F3C - 0x74F38)]
SUB             R3, R4, #8
CMP             R2, #0x17
BHI             loc_2919C
LDR             R3, [R3,#(dword_74F38 - 0x74F30)]
CMP             R3, #0x3B ; ';'
BLS             loc_291A8

loc_2919C
MOV             R0, #aInvalidTimeSet_0 ; "Invalid time set."
POP             {R4,PC}

loc_291A8
MOV             R3, #1
MOV             R0, #0
STRB            R3, [R4,#(byte_74F30 - 0x74F38)]
POP             {R4,PC}
; End of function sub_29150

off_291B8 DCD dword_74F38



; char *__fastcall sub_291BC(char *)
sub_291BC

var_10C= -0x10C
var_100= -0x100
var_A4= -0xA4

PUSH            {R4-R7,LR}
MOV             R4, #byte_686E8
SUB             SP, SP, #0x10C
MOV             R5, R0
LDR             R3, [R4,#(dword_68A08 - 0x686E8)]
CMP             R3, #0
BEQ             loc_292A8

loc_291DC
LDR             R3, [R4,#(dword_68A0C - 0x686E8)]
ADD             R3, R3, #1
CMP             R3, #0xA
STR             R3, [R4,#(dword_68A0C - 0x686E8)]
MOVGT           R4, #aTooManyLevelsO ; "Too many levels of JSON includes (limit"...
BLE             loc_29204
MOV             R0, R4
ADD             SP, SP, #0x10C
POP             {R4-R7,PC}

loc_29204
ADD             R2, SP, #0x10C+var_100
MOV             R1, #0
MOV             R0, R5
BL              sub_47FA8
SUBS            R3, R0, #0
BEQ             loc_29228
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_29288

loc_29228
ADD             R7, SP, #0x10C+var_A4
MOV             R0, R5  ; s
BL              strlen
MOV             R6, R0
MOV             R0, R7  ; s
BL              strlen
ADD             R6, R6, R0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R6, R6, #0x23 ; '#'
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R0, R6
MOVW            R3, #0x88B
LDR             R2, =aLoadConfig ; "load_config"
BL              sub_1F828
MOVW            R2, #:lower16:(aSJsonDecodeOfF+4) ; "JSON decode of file '%s' failed\n %s"
MOV             R4, R0
STR             R7, [SP,#0x10C+var_10C]
MOV             R1, R6  ; maxlen
MOV             R3, R5
MOVT            R2, #:upper16:(aSJsonDecodeOfF+4) ; format
BL              snprintf
MOV             R0, R4
ADD             SP, SP, #0x10C
POP             {R4-R7,PC}

loc_29288
MOV             R3, #1
MOV             R1, R3
STRB            R3, [R4,#0x328] ; "arded cloned or rolled work" ...
BL              sub_292B8
MOV             R4, R0
MOV             R0, R4  ; s
ADD             SP, SP, #0x10C
POP             {R4-R7,PC}

loc_292A8
BL              __strdup
STR             R0, [R4,#(dword_68A08 - 0x686E8)]
B               loc_291DC
; End of function sub_291BC

off_292B4 DCD aLoadConfig ; "load_config"



; char *__fastcall sub_292B8(_DWORD *, int)
sub_292B8

var_824= -0x824
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R11,LR}
SUBS            R3, R1, #0
SUB             SP, SP, #0x820
MOV             R7, R0
SUB             SP, SP, #4
STR             R3, [SP,#0x824+var_818]
BEQ             loc_292EC
MOV             R3, #byte_686E8
LDR             R2, [R3,#(dword_68ADC - 0x686E8)]
CMP             R2, #0
MOVEQ           R2, #1
STREQ           R2, [R3,#(dword_68ADC - 0x686E8)]

loc_292EC
MOV             R4, #off_67A68 ; "--version-file"
LDR             R3, [R4,#(dword_67A6C - 0x67A68)]
CMP             R3, #0x10
BEQ             loc_29460
TST             R3, #8
BNE             loc_2961C
MOVW            R6, #:lower16:asc_519A4 ; "|"
MOVW            R9, #:lower16:byte_72D90
MOVW            R8, #:lower16:byte_686E8
MOVW            R11, #:lower16:aInvalidConfigO ; "Invalid config option %s: %s"
ADD             R4, R4, #0x1C
MOVT            R6, #:upper16:asc_519A4 ; "|"
MOVT            R9, #:upper16:byte_72D90
MOVT            R8, #:upper16:byte_686E8
MOVT            R11, #:upper16:aInvalidConfigO ; "Invalid config option %s: %s"
B               loc_29348

loc_29330
LDR             R3, [R4,#4]
CMP             R3, #0x10
BEQ             loc_29460

loc_2933C
TST             R3, #8
ADD             R4, R4, #0x1C
BNE             loc_2961C

loc_29348               ; s
LDR             R0, [R4,#-0x1C]
CMP             R0, #0
BEQ             loc_29330
BL              __strdup
MOV             R1, R6  ; delim
MOV             R10, R0
BL              strtok
SUBS            R5, R0, #0
BNE             loc_29384
B               loc_2944C

loc_29370               ; delim
MOV             R1, R6
MOV             R0, #0  ; s
BL              strtok
SUBS            R5, R0, #0
BEQ             loc_2944C

loc_29384
LDRB            R3, [R5,#1]
CMP             R3, #0x2D ; '-'
BNE             loc_29370
ADD             R1, R5, #2
MOV             R0, R7
BL              sub_48AF4
SUBS            R2, R0, #0
BEQ             loc_29370
LDR             R1, [R4,#-0x18]
LDR             R3, [R2]
TST             R1, #6
BEQ             loc_293C4
CMP             R3, #2
BEQ             loc_29504
CMP             R3, #1
BEQ             loc_29550

loc_293C4
SUB             R2, R3, #5
CMP             R2, #1
MOVHI           R3, #aInvalidValue ; "Invalid value"
BLS             loc_2949C

loc_293D8
LDR             R2, [SP,#0x824+var_818]
CMP             R2, #0
BEQ             loc_294C8

loc_293E4
LDRB            R2, [R9]
CMP             R2, #0
BNE             loc_29418
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_29418
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #2
BLE             loc_29440

loc_29418
STR             R3, [SP,#0x824+var_824]
MOV             R2, R11 ; format
MOV             R1, #0x800 ; maxlen
MOV             R3, R5
ADD             R0, SP, #0x824+s ; s
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_29440
MOV             R3, #0xFFFFFFFF
STR             R3, [R8,#(dword_68ADC - 0x686E8)]
B               loc_29370

loc_2944C               ; ptr
MOV             R0, R10
BL              free
LDR             R3, [R4,#4]
CMP             R3, #0x10
BNE             loc_2933C

loc_29460
MOVW            R1, #:lower16:aInclude ; "include"
MOV             R0, R7
MOVT            R1, #:upper16:aInclude ; "include"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_294F4
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_294F4
BL              sub_49028
MOV             R1, #0
BL              sub_291BC
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2949C
TST             R1, #1
LDR             R0, [R4,#-8]
BEQ             loc_29540
LDR             R3, [R4,#-0x14]
BLX             R3
MOV             R3, R0

loc_294B4
CMP             R3, #0
BEQ             loc_29370
LDR             R2, [SP,#0x824+var_818]
CMP             R2, #0
BNE             loc_293E4

loc_294C8
MOVW            R2, #:lower16:aParsingJsonOpt ; "Parsing JSON option %s: %s"
STR             R3, [SP,#0x824+var_824]
MOVT            R2, #:upper16:aParsingJsonOpt ; "Parsing JSON option %s: %s"
MOV             R3, R5
MOV             R1, #0xC8 ; maxlen
LDR             R0, =byte_68A14 ; s
BL              snprintf
LDR             R0, =byte_68A14
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_294F4
MOV             R0, #0
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_29504
BL              sub_49028
LDR             R3, [R4,#-0x10]
LDR             R1, [R4,#-8]
STR             R0, [SP,#0x824+var_814]
BLX             R3
LDR             R2, [R4,#-0x18]
MOV             R3, R0
CMP             R2, #4
BNE             loc_294B4
STR             R0, [SP,#0x824+var_810]
LDR             R1, [R4,#-8]
LDR             R0, [SP,#0x824+var_814]
BL              sub_3E5BC
LDR             R3, [SP,#0x824+var_810]
B               loc_294B4

loc_29540
CMP             R3, #5
BEQ             loc_295F0
BL              sub_3E4E8
B               loc_29370

loc_29550
MOV             R3, #0
STR             R10, [SP,#0x824+var_814]
MOV             R10, R2
STR             R5, [SP,#0x824+var_810]
MOV             R0, R10
MOV             R5, R3
BL              sub_48E60
CMP             R0, R5
BLS             loc_295B0

loc_29574
MOV             R1, R5
MOV             R0, R10
BL              sub_48E7C
SUBS            R3, R0, #0
BEQ             loc_295B0
LDR             R1, [R3]
CMP             R1, #2
BEQ             loc_295B8
CMP             R1, #0
BEQ             loc_295F8

loc_2959C
ADD             R5, R5, #1
MOV             R0, R10
BL              sub_48E60
CMP             R0, R5
BHI             loc_29574

loc_295B0
LDR             R10, [SP,#0x824+var_814]
B               loc_29370

loc_295B8
BL              sub_49028
LDR             R3, [R4,#-0x10]
LDR             R1, [R4,#-8]
STR             R0, [SP,#0x824+var_80C]
BLX             R3
LDR             R2, [R4,#-0x18]
MOV             R3, R0
CMP             R2, #4
BEQ             loc_29604

loc_295DC
CMP             R3, #0
BEQ             loc_2959C
LDR             R10, [SP,#0x824+var_814]
LDR             R5, [SP,#0x824+var_810]
B               loc_293D8

loc_295F0
BL              sub_3E4D8
B               loc_29370

loc_295F8
BL              sub_292B8
MOV             R3, R0
B               loc_295DC

loc_29604
STR             R0, [SP,#0x824+var_808]
LDR             R1, [R4,#-8]
LDR             R0, [SP,#0x824+var_80C]
BL              sub_3E5BC
LDR             R3, [SP,#0x824+var_808]
B               loc_295DC

loc_2961C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R0, #:lower16:aOptTypeOptSubt ; "!(opt->type & OPT_SUBTABLE)"
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVT            R0, #:upper16:aOptTypeOptSubt ; "!(opt->type & OPT_SUBTABLE)"
LDR             R3, =aParseConfig ; "parse_config"
MOVW            R2, #0x7E3 ; line
BL              __assert_fail
; End of function sub_292B8

off_29638 DCD byte_68A14
off_2963C DCD aParseConfig ; "parse_config"



; int sub_29640()
sub_29640

var_10= -0x10
var_C= -0xC
var_4= -4

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x14
ADD             R0, SP, #0x14+var_C
BL              sub_206A0
LDR             R3, [SP,#0x14+var_C]
ADD             R0, SP, #0x14+var_4
STR             R3, [R0,#-0xC]! ; timer
BL              localtime
MOV             R3, #byte_76030
LDRB            R12, [R3]
CMP             R12, #0
BEQ             loc_296CC
MOVW            R1, #:lower16:byte_74F30
LDR             R5, [R3,#(dword_76038 - 0x76030)]
MOVT            R1, #:upper16:byte_74F30
LDR             LR, [R3,#(dword_7603C - 0x76030)]
LDRB            R7, [R1]
LDR             R6, [R0,#4]
LDR             R4, [R0,#8]
CMP             R7, #0
BNE             loc_29710
CMP             LR, R4
BGT             loc_296C0
MOVEQ           R1, #1
MOVNE           R1, #0
CMP             R5, R6
MOVLE           R5, #0
ANDGT           R5, R1, #1
CMP             R5, #0
STRBEQ          R7, [R3]
MOVEQ           R7, R12

loc_296C0
MOV             R0, R7
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_296CC
MOVW            R3, #:lower16:byte_74F30
LDR             R12, [R0,#8]
MOVT            R3, #:upper16:byte_74F30
LDR             R1, [R3,#(dword_74F3C - 0x74F30)]
CMP             R12, R1
MOVLT           R7, #1
BLT             loc_296C0
LDR             R2, [R0,#4]
LDR             R0, [R3,#(dword_74F38 - 0x74F30)]
CMP             R2, R0
MOVGE           R7, #0
MOVLT           R7, #1
CMP             R12, R1
MOVNE           R7, #0
MOV             R0, R7
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_29710
LDR             R3, [R1,#(dword_74F3C - 0x74F30)]
LDR             R12, [R1,#(dword_74F38 - 0x74F30)]
CMP             R3, LR
BGT             loc_29780
MOVEQ           R1, #1
MOVNE           R1, #0
CMP             R12, R5
MOVLE           R1, #0
ANDGT           R1, R1, #1
CMP             R1, #0
BNE             loc_29780
CMP             LR, R4
BGT             loc_29760
MOVEQ           R1, #1
MOVNE           R1, #0
CMP             R5, R6
MOVLE           R5, #0
ANDGT           R5, R1, #1
CMP             R5, #0
BEQ             loc_296C0

loc_29760
CMP             R3, R4
BGT             loc_296C0
MOVEQ           R2, #1
MOVNE           R2, #0
CMP             R12, R6
MOVLE           R7, #0
ANDGT           R7, R2, #1
B               loc_296C0

loc_29780
CMP             R3, R4
BGT             loc_297A4
MOVEQ           R2, #1
MOVNE           R2, #0
CMP             R12, R6
MOVLE           R7, #0
ANDGT           R7, R2, #1
CMP             R7, #0
BEQ             loc_296C0

loc_297A4
CMP             LR, R4
MOVGT           R7, #0
BGT             loc_296C0
MOVEQ           R2, #1
MOVNE           R2, #0
CMP             R5, R6
MOVLE           R2, #0
ANDGT           R2, R2, #1
EOR             R7, R2, #1
B               loc_296C0
; End of function sub_29640




; char *__fastcall sub_297CC(const char *, float *)
sub_297CC
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E5C8
CMP             R0, #0
POPNE           {R4,PC}
VLDR            S15, [R4]
VLDR            S14, =100.0
VCMPE.F32       S15, S14
VMRS            APSR_nzcv, FPSCR
BMI             loc_29810
VLDR            S14, =250.0
MOV             R3, #aValueOutOfRang ; "Value out of range"
VCMP.F32        S15, S14
VMRS            APSR_nzcv, FPSCR
MOVGT           R0, R3
POP             {R4,PC}

loc_29810
MOV             R0, #aValueOutOfRang ; "Value out of range"
POP             {R4,PC}
; End of function sub_297CC

flt_2981C DCFS 100.0
flt_29820 DCFS 250.0



; char *__fastcall sub_29824(const char *, float *)
sub_29824
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E5C8
CMP             R0, #0
POPNE           {R4,PC}
VLDR            S15, [R4]
VLDR            S14, =125.0
VCMPE.F32       S15, S14
VMRS            APSR_nzcv, FPSCR
BMI             loc_29868
VLDR            S14, =500.0
MOV             R3, #aValueOutOfRang ; "Value out of range"
VCMP.F32        S15, S14
VMRS            APSR_nzcv, FPSCR
MOVGT           R0, R3
POP             {R4,PC}

loc_29868
MOV             R0, #aValueOutOfRang ; "Value out of range"
POP             {R4,PC}
; End of function sub_29824

flt_29874 DCFS 125.0
flt_29878 DCFS 500.0



; void sub_2987C()
sub_2987C

var_804= -0x804

MOVW            R0, #:lower16:byte_686E8
PUSH            {LR}
MOVT            R0, #:upper16:byte_686E8
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDR             R3, [R0,#(dword_68AE0 - 0x686E8)] ; arg
CMP             R3, #0
BEQ             loc_29918
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_298D8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_298D8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2990C

loc_298D8
MOVW            R12, #:lower16:aConfigTooFastP ; "config too fast, pool is changing, plea"...
MOV             LR, SP
MOVT            R12, #:upper16:aConfigTooFastP ; "config too fast, pool is changing, plea"...
LDM             R12!, {R0-R3} ; "config too fast, pool is changing, plea"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " pool is changing, please wait\n"
STM             LR!, {R0-R3}
LDM             R12, {R0-R3} ; "g, please wait\n"
STM             LR, {R0-R3}
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_2990C
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {PC}

loc_29918
MOVW            R2, #:lower16:sub_3D2A0
ADD             R0, R0, #0x3F8 ; newthread
MOVT            R2, #:upper16:sub_3D2A0 ; start_routine
MOV             R1, R3  ; attr
BL              pthread_create
CMP             R0, #0
BEQ             loc_2990C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29970
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29970
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2990C

loc_29970
MOVW            R12, #:lower16:aFailedToCreate_5 ; "Failed to create pool_change_thread"
MOV             LR, SP
MOVT            R12, #:upper16:aFailedToCreate_5 ; "Failed to create pool_change_thread"
LDM             R12!, {R0-R3} ; "Failed to create pool_change_thread"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " pool_change_thread"
LDR             R12, [R12] ; "ead"
STM             LR!, {R0-R3}
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
STR             R12, [LR]
BL              sub_1DD60
B               loc_2990C
; End of function sub_2987C




; int __fastcall sub_299A8(int, int, int (__fastcall **)(int))
sub_299A8

var_804= -0x804

PUSH            {R4-R7,LR}
MOV             R4, #byte_72D90
SUB             SP, SP, #0x800
SUB             SP, SP, #4
MOV             R5, R0
LDRB            R3, [R4]
MOV             R6, R1
MOV             R7, R2
CMP             R3, #0
BNE             loc_299E8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_29B1C

loc_299E8
MOVW            R2, #:lower16:aThreadDBeingDi ; "Thread %d being disabled"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aThreadDBeingDi ; "Thread %d being disabled"
MOV             R0, SP  ; s
MOV             R3, R6
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_29A10
MOVW            R3, #:lower16:byte_686E1
LDR             R2, [R5,#0x24]
MOVT            R3, #:upper16:byte_686E1
MOV             R0, #0
LDRB            R3, [R3]
MOV             R1, #0
STRD            R0, R1, [R2,#0x30]
CMP             R3, #0
BEQ             loc_29A8C
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_29A54
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_29B34

loc_29A54
MOVW            LR, #:lower16:aWaitingOnSemIn ; "Waiting on sem in miner thread"
MOV             R12, SP
MOVT            LR, #:upper16:aWaitingOnSemIn ; "Waiting on sem in miner thread"
LDM             LR!, {R0-R3} ; "Waiting on sem in miner thread"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "n miner thread"
STM             R12!, {R0-R2}
MOV             R1, SP
MOV             LR, R3,LSR#16
MOV             R2, #0
MOV             R0, #7
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_1DD60

loc_29A8C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x240E
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMtDisable ; "mt_disable"
ADD             R0, R5, #0x10 ; sem
BL              sub_23018
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_29AC4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_29B04

loc_29AC4
MOVW            R2, #:lower16:aThreadDBeingRe ; "Thread %d being re-enabled"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aThreadDBeingRe ; "Thread %d being re-enabled"
MOV             R3, R6
MOV             R0, SP  ; s
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_29AEC
LDR             R3, [R7]
MOV             R0, R5
BLX             R3
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_29B04
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_29AC4
B               loc_29AEC

loc_29B1C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_29A10
B               loc_299E8

loc_29B34
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_29A8C
B               loc_29A54
; End of function sub_299A8

off_29B4C DCD aMtDisable ; "mt_disable"



; void sub_29B50()
sub_29B50

var_804= -0x804

MOVW            R12, #:lower16:aUnableToSetThr_0 ; "Unable to set thread to low priority"
PUSH            {LR}
MOVT            R12, #:upper16:aUnableToSetThr_0 ; "Unable to set thread to low priority"
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDM             R12!, {R0-R3} ; "Unable to set thread to low priority"
MOV             LR, SP
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "read to low priority"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "rity"
STR             R0, [LR],#4
MOV             R0, #6
STRB            R1, [LR]
MOV             R1, SP
BL              sub_1DD60
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {PC}
; End of function sub_29B50




; void sub_29BA0()
sub_29BA0
PUSH            {R4,LR}
MOV             R0, #0xA ; inc
BL              nice
CMP             R0, #0
POPNE           {R4,PC}
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29BDC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_29BE4

loc_29BDC
POP             {R4,LR}
B               sub_29B50

loc_29BE4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_29BDC
POP             {R4,PC}
; End of function sub_29BA0




; int __fastcall sub_29BFC(int)
sub_29BFC
PUSH            {R4,LR}
MOV             R4, R0
BL              pthread_self
BL              pthread_detach
MOV             R1, #0  ; oldtype
MOV             R0, #1  ; type
BL              pthread_setcanceltype
MOV             R0, #aApi ; "API"
BL              sub_22E98
BL              sub_29BA0
BL              sub_1B804
MOV             R0, #0
STR             R0, [R4,#0xC]
POP             {R4,PC}
; End of function sub_29BFC




; char *__fastcall sub_29C38(const char *)
sub_29C38
PUSH            {R4,LR}
MOVW            R4, #:lower16:dword_73F1C
MOVW            R3, #:lower16:byte_686E8
MOVT            R4, #:upper16:dword_73F1C
MOVT            R3, #:upper16:byte_686E8
MOV             R2, #2
MOV             R1, R4
STR             R2, [R3,#(dword_68AE4 - 0x686E8)]
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R1, [R4]
MOVW            R2, #0x270F
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R1, R2
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29C38




; char *__fastcall sub_29C80(const char *, _DWORD *)
sub_29C80
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R1, [R4]
MOVW            R2, #0x270F
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R1, R2
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29C80




; char *__fastcall sub_29CB0(const char *, _DWORD *)
sub_29CB0
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOVW            R1, #0xFFFE
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #1
CMP             R2, R1
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29CB0




; char *__fastcall sub_29CE4(const char *, _DWORD *)
sub_29CE4
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0x64 ; 'd'
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29CE4




; char *__fastcall sub_29D10(const char *, _DWORD *)
sub_29D10
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x2A ; '*'
CMP             R2, #0x14
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29D10




; char *__fastcall sub_29D40(const char *, _DWORD *)
sub_29D40
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x16
CMP             R2, #0x21 ; '!'
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29D40




; char *__fastcall sub_29D70(const char *, _DWORD *)
sub_29D70
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x2A ; '*'
CMP             R2, #0x2B ; '+'
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29D70




; char *__fastcall sub_29DA0(const char *, _DWORD *)
sub_29DA0
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x16
CMP             R2, #0x35 ; '5'
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29DA0




; char *__fastcall sub_29DD0(const char *, _DWORD *)
sub_29DD0
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x20 ; ' '
CMP             R2, #0x1F
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29DD0




; char *__fastcall sub_29E00(const char *, _DWORD *)
sub_29E00
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #4
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29E00




; char *__fastcall sub_29E2C(const char *, _DWORD *)
sub_29E2C
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0xC8
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29E2C




; char *__fastcall sub_29E58(const char *, _DWORD *)
sub_29E58
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0x1E00
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29E58




; char *__fastcall sub_29E84(const char *, _DWORD *)
sub_29E84
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #1
CMP             R2, #0xFE
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29E84




; char *__fastcall sub_29EB4(const char *, _DWORD *)
sub_29EB4
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0xFF
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29EB4




; char *__fastcall sub_29EE0(const char *, _DWORD *)
sub_29EE0
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #1
CMP             R2, #9
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29EE0




; char *__fastcall sub_29F10(const char *, _DWORD *)
sub_29F10
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0xA
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_29F10




; int __fastcall sub_29F3C(_DWORD *, char *s1)
sub_29F3C
PUSH            {R4-R6,LR}
MOV             R5, R1
MOVW            R1, #:lower16:aStratumTcp ; "stratum+tcp://"
SUB             SP, SP, #0x800
MOV             R4, R0
MOVT            R1, #:upper16:aStratumTcp ; "stratum+tcp://"
MOV             R0, R5  ; s1
MOV             R2, #0xE ; n
BL              strncasecmp
SUBS            R6, R0, #0
BEQ             loc_2A020
MOVW            R1, #:lower16:aStratumTls ; "stratum+tls://"
MOV             R2, #0xE ; n
MOVT            R1, #:upper16:aStratumTls ; "stratum+tls://"
MOV             R0, R5  ; s1
BL              strncasecmp
CMP             R0, #0
MOVNE           R0, #0
BEQ             loc_29F90
ADD             SP, SP, #0x800
POP             {R4-R6,PC}

loc_29F90               ; s
MOV             R0, R5
BL              __strdup
MOVW            R3, #:lower16:byte_72D90
LDR             R1, [R4,#0x268]
MOVT            R3, #:upper16:byte_72D90
MOV             R2, #1
LDRB            R3, [R3]
STR             R0, [R4,#0xA4]
STR             R1, [R4,#0x240]
CMP             R3, #0
STRB            R2, [R4,#0x290]
STRB            R2, [R4,#0x250]
BNE             loc_29FEC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29FEC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_2A014

loc_29FEC
LDR             R3, [R4]
MOVW            R2, #:lower16:aPoolDIsTlsPool ; "Pool %d is tls pool."
MOV             R0, SP  ; s
MOVT            R2, #:upper16:aPoolDIsTlsPool ; "Pool %d is tls pool."

loc_29FFC               ; maxlen
MOV             R1, #0x800
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_2A014
MOV             R0, #1
ADD             SP, SP, #0x800
POP             {R4-R6,PC}

loc_2A020               ; s
MOV             R0, R5
BL              __strdup
MOVW            R3, #:lower16:byte_72D90
LDR             R1, [R4,#0x268]
MOVT            R3, #:upper16:byte_72D90
STR             R0, [R4,#0xA4]
LDRB            R2, [R3]
MOV             R3, #1
STRB            R6, [R4,#0x250]
STR             R1, [R4,#0x240]
CMP             R2, #0
STRB            R3, [R4,#0x290]
BNE             loc_2A07C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2A07C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_2A014

loc_2A07C
MOVW            R2, #:lower16:aPoolDIsTcpPool ; "Pool %d is tcp pool."
LDR             R3, [R4]
MOV             R0, SP
MOVT            R2, #:upper16:aPoolDIsTcpPool ; "Pool %d is tcp pool."
B               loc_29FFC
; End of function sub_29F3C




; void __fastcall sub_2A090(const char *, const char *, int)
sub_2A090

var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
MOV             R3, R0
ADD             R0, SP, #0x80C+s ; s
STR             R2, [SP,#0x80C+var_808]
MOVW            R2, #:lower16:aFreeWorkCalled ; "Free work called with NULL work from %s"...
STR             R1, [SP,#0x80C+var_80C]
MOVT            R2, #:upper16:aFreeWorkCalled ; "Free work called with NULL work from %s"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2A090




; double __fastcall sub_2A0D8(double)
sub_2A0D8
PUSH            {R4,LR}
MOV             R4, R0
VPUSH           {D8-D9}
VMOV.F64        D9, D0
VDIV.F64        D0, D1, D2
VMOV.F64        D8, D1
BL              exp
VMOV.F64        D6, #1.0
VDIV.F64        D5, D9, D8
VDIV.F64        D0, D6, D0
VLDR            D7, [R4]
VSUB.F64        D0, D6, D0
VMLA.F64        D7, D5, D0
VADD.F64        D0, D0, D6
VDIV.F64        D6, D7, D0
VSTR            D6, [R4]
VPOP            {D8-D9}
POP             {R4,PC}
; End of function sub_2A0D8

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_2]
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_5]



; int sub_2A128()
sub_2A128
MOV             R0, #1
BX              LR
; End of function sub_2A128




; int sub_2A130()
sub_2A130
MOV             R0, #1
BX              LR
; End of function sub_2A130

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_6]
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_7]
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_8]



; const char *__fastcall sub_2A144(const char *)
sub_2A144
PUSH            {R4,LR}
MOVW            R1, #:lower16:aDD ; "%d:%d"
LDR             R4, =dword_76038
MOVT            R1, #:upper16:aDD ; "%d:%d"
MOV             R3, R4
ADD             R2, R4, #4
BL              sscanf
CMP             R0, #2
BEQ             loc_2A174
MOV             R0, #aInvalidTimeSet ; "Invalid time set, should be HH:MM"
POP             {R4,PC}

loc_2A174
LDR             R2, [R4,#(dword_7603C - 0x76038)]
SUB             R3, R4, #8
CMP             R2, #0x17
BHI             loc_2A190
LDR             R3, [R3,#(dword_76038 - 0x76030)]
CMP             R3, #0x3B ; ';'
BLS             loc_2A19C

loc_2A190
MOV             R0, #aInvalidTimeSet_0 ; "Invalid time set."
POP             {R4,PC}

loc_2A19C
MOV             R3, #1
MOV             R0, #0
STRB            R3, [R4,#(byte_76030 - 0x76038)]
POP             {R4,PC}
; End of function sub_2A144

off_2A1AC DCD dword_76038



; int __fastcall sub_2A1B0(char *, size_t, time_t *)
sub_2A1B0

var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_8= -8
var_4= -4

PUSH            {R4-R7,LR}
MOVW            R4, #0x4DD3
LDR             R3, [R2,#4]
MOVT            R4, #0x1062
SUB             SP, SP, #0x24
MOV             R7, R0
LDR             R12, [R2]
ADD             R2, SP, #0x24+var_4
MOV             R6, R1
SMULL           R4, R5, R3, R4
MOV             R3, R3,ASR#31
STR             R12, [R2,#-4]!
MOV             R0, R2  ; timer
RSB             R4, R3, R5,ASR#6
BL              localtime
MOV             R12, R0
MOVW            R2, #:lower16:aD02d02d02d02d0_0 ; "[%d-%02d-%02d %02d:%02d:%02d.%03d]"
LDR             R3, [R12,#0x14]
MOV             R0, R7  ; s
STR             R4, [SP,#0x24+var_10]
MOV             R1, R6  ; maxlen
LDR             LR, [R12]
MOVT            R2, #:upper16:aD02d02d02d02d0_0 ; "[%d-%02d-%02d %02d:%02d:%02d.%03d]"
ADD             R3, R3, #0x760
ADD             R3, R3, #0xC
STR             LR, [SP,#0x24+var_14]
LDR             LR, [R12,#4]
STR             LR, [SP,#0x24+var_18]
LDR             LR, [R12,#8]
STR             LR, [SP,#0x24+var_1C]
LDR             LR, [R12,#0xC]
STR             LR, [SP,#0x24+var_20]
LDR             R12, [R12,#0x10]
ADD             R12, R12, #1
STR             R12, [SP,#0x24+var_24]
BL              snprintf
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}
; End of function sub_2A1B0




; void sub_2A248()
sub_2A248
MOVW            R3, #:lower16:dword_72E60
PUSH            {R4-R9,LR}
MOVT            R3, #:upper16:dword_72E60
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDR             R2, [R3]
CMP             R2, #0
BLE             loc_2A3B4
MOVW            R3, #:lower16:dword_72F04
MOV             R4, #0xFFFFFFFF
MOVT            R3, #:upper16:dword_72F04
LDR             R7, [R3]
MOV             R5, R7
ADD             R2, R7, R2,LSL#2

loc_2A280
LDR             R3, [R5],#4
LDR             R3, [R3,#0x38]
CMP             R3, #0
CMPNE           R3, R4
MOVCC           R4, R3
CMP             R2, R5
BNE             loc_2A280
CMN             R4, #1
BEQ             loc_2A3C4
MOV             R8, R7

loc_2A2A8
LDR             R3, [R8],#4
LDR             R6, [R3,#0x38]
CMP             R6, #0
BEQ             loc_2A2E4
MOV             R1, R4
MOV             R0, R6
BLX             sub_4A52C
CMP             R1, #0
BEQ             loc_2A2E4

loc_2A2CC
SUB             R4, R4, #1
MOV             R0, R6
MOV             R1, R4
BLX             sub_4A52C
CMP             R1, #0
BNE             loc_2A2CC

loc_2A2E4
CMP             R5, R8
BNE             loc_2A2A8

loc_2A2EC
MOV             R9, #off_67A68 ; "--version-file"
LDR             R8, [R9,#(dword_681BC - 0x67A68)]

loc_2A2F8
LDR             R6, [R7],#4
MOV             R1, R4
LDR             R0, [R6,#0x40]
MUL             R0, R0, R8
BLX             sub_4A2D0
MOV             R1, R4
STR             R0, [R6,#0x40]
LDR             R0, [R6,#0x38]
BLX             sub_4A2D0
CMP             R5, R7
STR             R0, [R6,#0x3C]
BNE             loc_2A2F8

loc_2A328
MOVW            R3, #:lower16:byte_686E1
STR             R4, [R9,#(dword_681BC - 0x67A68)]
MOVT            R3, #:upper16:byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2A390
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2A368
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2A39C

loc_2A368
MOVW            R2, #:lower16:aGlobalQuotaGre ; "Global quota greatest common denominato"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aGlobalQuotaGre ; "Global quota greatest common denominato"...
MOV             R3, R4
MOV             R0, SP  ; s
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_2A390
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4-R9,PC}

loc_2A39C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_2A368
B               loc_2A390

loc_2A3B4
MOVW            R9, #:lower16:off_67A68 ; "--version-file"
MOV             R4, #1
MOVT            R9, #:upper16:off_67A68 ; "--version-file"
B               loc_2A328

loc_2A3C4
MOV             R4, #1
B               loc_2A2EC
; End of function sub_2A248




; char *__fastcall sub_2A3CC(const char *, _DWORD *, int, int)
sub_2A3CC
PUSH            {R4-R6,LR}
MOV             R4, R2
MOV             R5, R3
MOV             R6, R1
BL              sub_3E6D8
CMP             R0, #0
POPNE           {R4-R6,PC}
LDR             R3, [R6]
MOV             R2, #aValueOutOfRang ; "Value out of range"
CMP             R3, R4
MOVGE           R4, #0
MOVLT           R4, #1
CMP             R3, R5
MOVLE           R3, R4
ORRGT           R3, R4, #1
CMP             R3, #0
MOVNE           R0, R2
POP             {R4-R6,PC}
; End of function sub_2A3CC




; int __fastcall sub_2A418(const char *, _DWORD *, _DWORD *)
sub_2A418
PUSH            {R4-R6,LR}
MOV             R5, R1
MOVW            R1, #:lower16:aDD_0 ; "%d-%d"
MOV             R3, R2
MOV             R4, R2
MOVT            R1, #:upper16:aDD_0 ; "%d-%d"
MOV             R2, R5
BL              sscanf
CMP             R0, #1
LDREQ           R3, [R5]
STREQ           R3, [R4]
POP             {R4-R6,PC}
; End of function sub_2A418




; int __fastcall sub_2A448(int, char *)
sub_2A448
PUSH            {R4-R6,LR}
MOV             R5, R1
ADD             R2, R0, #0x248
ADD             R1, R0, #0x268
MOV             R4, R0
MOV             R0, R5
BL              sub_20A10
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R1, R5  ; s1
MOV             R0, R4  ; int
POP             {R4-R6,LR}
B               sub_29F3C
; End of function sub_2A448




; int __fastcall sub_2A47C(int, char *s1)
sub_2A47C
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, R1  ; s1
MOV             R1, R4
BL              sub_20B84
MOV             R1, R0
MOV             R5, R0
MOV             R0, R4
BL              sub_2A448
CMP             R0, #0
BEQ             loc_2A4B0

loc_2A4A8
LDR             R0, [R4,#0xA4]
POP             {R4-R6,PC}

loc_2A4B0
ADD             R1, R4, #0xA4
MOV             R0, R5
BL              sub_3E5BC
MOVW            R1, #:lower16:aHttp_0 ; "http://"
MOV             R2, #7  ; n
MOVT            R1, #:upper16:aHttp_0 ; "http://"
MOV             R0, R5  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_2A4A8
MOVW            R1, #:lower16:aHttps ; "https://"
MOV             R2, #8  ; n
MOVT            R1, #:upper16:aHttps ; "https://"
MOV             R0, R5  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_2A4A8
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x42E
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aSetupUrl ; "setup_url"
MOV             R0, #0x100
BL              sub_1F828
MOVW            R3, #:lower16:aStratumTcp ; "stratum+tcp://"
MOV             R6, R0
MOVT            R3, #:upper16:aStratumTcp ; "stratum+tcp://"
LDM             R3!, {R0-R2} ; "stratum+tcp://"
LDRH            R12, [R3] ; "//"
LDRB            R3, [R3,#(aStratumTcp+0xE - 0x51AB8)] ; ""
STR             R0, [R6]
MOV             R0, R6  ; dest
STR             R1, [R6,#4]
MOV             R1, R5  ; src
STR             R2, [R6,#8]
MOV             R2, #0xF2 ; n
STRH            R12, [R6,#0xC]
STRB            R3, [R6,#0xE]
BL              strncat
MOV             R1, R6
MOV             R0, R4
BL              sub_2A448
B               loc_2A4A8
; End of function sub_2A47C

off_2A558 DCD aSetupUrl ; "setup_url"



; const char *__fastcall sub_2A55C(const char *)
sub_2A55C
SUBS            R3, R0, #0
BEQ             loc_2A570
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_2A57C

loc_2A570
MOV             R0, #aInvalidParamet ; "Invalid parameters for set temp cutoff"
BX              LR

loc_2A57C
PUSH            {R4,LR}
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
MOV             R4, R3
BL              strtol
CMP             R0, #0xC8
BLS             loc_2A5A4
MOV             R0, #aInvalidValuePa ; "Invalid value passed to set temp cutoff"
POP             {R4,PC}

loc_2A5A4
MOVW            R3, #:lower16:byte_686E8
MOV             R0, #0
MOVT            R3, #:upper16:byte_686E8
STR             R4, [R3,#(dword_68AE8 - 0x686E8)]
POP             {R4,PC}
; End of function sub_2A55C




; void *__fastcall sub_2A5B8(void **)
sub_2A5B8
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0,#0x120] ; ptr
BL              free
LDR             R0, [R4,#0x134] ; ptr
BL              free
LDR             R0, [R4,#0x148] ; ptr
BL              free
LDR             R0, [R4,#0x140] ; ptr
BL              free
MOV             R0, R4  ; s
MOV             R2, #0x1C0 ; n
MOV             R1, #0  ; c
POP             {R4,LR}
B               memset
; End of function sub_2A5B8




; char *__fastcall sub_2A5F4(int, int, int)
sub_2A5F4

var_8= -8

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x14
MOV             R4, R0
MOV             R5, R1
MOV             R6, R2
LDR             R7, [R0,#0x154]
BL              sub_2A5B8
LDR             R2, =aCopyWork ; "_copy_work"
MOVW            R12, #0x1397
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOV             R0, R4
MOV             R1, R5
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R2,R12}
MOV             R2, #0x1C0
BL              sub_232EC
STR             R7, [R4,#0x154]
LDR             R0, [R5,#0x120] ; s
CMP             R0, #0
BEQ             loc_2A64C
BL              __strdup
STR             R0, [R4,#0x120]

loc_2A64C               ; s
LDR             R0, [R5,#0x140]
CMP             R0, #0
BEQ             loc_2A660
BL              __strdup
STR             R0, [R4,#0x140]

loc_2A660               ; s
LDR             R0, [R5,#0x134]
CMP             R0, #0
BEQ             loc_2A6EC
CMP             R6, #0
BNE             loc_2A6A0
BL              __strdup
STR             R0, [R4,#0x134]

loc_2A67C               ; s
LDR             R0, [R5,#0x148]
CMP             R0, #0
BEQ             loc_2A690
BL              __strdup
STR             R0, [R4,#0x148]

loc_2A690
LDR             R3, [R5,#0x1BC]
STR             R3, [R4,#0x1BC]
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_2A6A0
LDR             R3, [R4,#0x44]
MOV             R2, #4
ADD             R0, SP, #0x14+var_8
REV             R3, R3
ADD             R3, R6, R3
REV             R3, R3
STR             R3, [R4,#0x44]
LDR             R1, [R5,#0x134]
BL              sub_1FB44
LDR             R3, [SP,#0x14+var_8]
ADD             R0, SP, #0x14+var_8
MOV             R1, #4
REV             R3, R3
ADD             R6, R6, R3
REV             R6, R6
STR             R6, [SP,#0x14+var_8]
BL              sub_1FA90
STR             R0, [R4,#0x134]
B               loc_2A67C

loc_2A6EC
CMP             R6, #0
LDRNE           R3, [R4,#0x44]
REVNE           R3, R3
ADDNE           R6, R6, R3
REVNE           R6, R6
STRNE           R6, [R4,#0x44]
B               loc_2A67C
; End of function sub_2A5F4

off_2A708 DCD aCopyWork ; "_copy_work"



; void __fastcall sub_2A70C(void ***, const char *, const char *, int)
sub_2A70C
PUSH            {R4-R6,LR}
LDR             R5, [R0]
CMP             R5, #0
BEQ             loc_2A73C
MOV             R4, R0
MOV             R0, R5
BL              sub_2A5B8
MOV             R0, R5  ; ptr
BL              free
MOV             R3, #0
STR             R3, [R4]
POP             {R4-R6,PC}

loc_2A73C
MOV             R12, R1
MOV             R1, R2
MOV             R2, #byte_72D90
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_2A780
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_2A780
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #2
POPLE           {R4-R6,PC}

loc_2A780
MOV             R2, R3
MOV             R0, R12
POP             {R4-R6,LR}
B               sub_2A090
; End of function sub_2A70C

VCMPE.F64       D1, #0.0
VMRS            APSR_nzcv, FPSCR
BXLS            LR
B               sub_2A0D8



; void __fastcall sub_2A7A0(int)
sub_2A7A0
LDR             R3, [R0,#0x170]
CMP             R3, #0
BNE             loc_2A7C8
LDR             R3, =dword_681C8
VMOV.F64        D7, #1.0
VLDR            D0, [R3,#(dbl_681C0 - 0x681C8)]
VCMP.F64        D0, D7
VMRS            APSR_nzcv, FPSCR
VMOVMI.F64      D0, D7
BX              LR

loc_2A7C8
PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R0
MOV             R0, SP
BL              sub_206A0
MOV             R0, SP
ADD             R1, R4, #0x170
BL              sub_209CC
VMOV.F64        D7, #1.0
VCMP.F64        D0, D7
VMRS            APSR_nzcv, FPSCR
VMOVMI.F64      D0, D7
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_2A7A0

off_2A800 DCD dword_681C8



; void sub_2A804()
sub_2A804

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
MOV             R0, SP
BL              sub_206A0
MOV             R0, SP
LDR             R1, =dword_68AEC
BL              sub_209CC
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2A804

off_2A828 DCD dword_68AEC



; void sub_2A82C()
sub_2A82C

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
MOV             R0, SP
BL              sub_206A0
MOV             R0, SP
LDR             R1, =dword_68AF4
BL              sub_209CC
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2A82C

off_2A850 DCD dword_68AF4



; void __fastcall sub_2A854(int, unsigned int)
sub_2A854

var_C08= -0xC08
var_C04= -0xC04
var_C00= -0xC00
var_808= -0x808

PUSH            {R4,LR}
SUB             SP, SP, #0xC00
SUB             SP, SP, #8
MOV             R2, #4
MOV             R4, #0

loc_2A868
UXTB            R3, R1
SUBS            R2, R2, #1
MOV             R1, R1,LSR#8
ADD             R4, R3, R4,LSL#8
BNE             loc_2A868
MOV             R1, R0
MOV             R2, #0x80
ADD             R0, SP, #0xC08+var_C00
BL              sub_1FA20
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2A8B4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2A8FC

loc_2A8B4
ADD             R3, SP, #0xC08+var_C00
ADD             R0, SP, #0xC08+var_808
MOVW            R2, #:lower16:aBenchfileNonce ; "BENCHFILE nonce %u=0x%08x for work=%s"
STR             R3, [SP,#0xC08+var_C04]
STR             R4, [SP,#0xC08+var_C08]
MOV             R3, R4
MOVT            R2, #:upper16:aBenchfileNonce ; "BENCHFILE nonce %u=0x%08x for work=%s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #8 ; s
BL              snprintf
ADD             R1, SP, #0xC08+var_808
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #3
BL              sub_1DD60
ADD             SP, SP, #0xC00
ADD             SP, SP, #8
POP             {R4,PC}

loc_2A8FC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_2A8B4
ADD             SP, SP, #0xC00
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_2A854




; _BYTE *__fastcall sub_2A91C(_BYTE *result, unsigned int)
sub_2A91C
LDR             R3, [R0,#0x134]
REV             R1, R1
STR             R1, [R0,#0x44]
CMP             R3, #0
BXEQ            LR
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, R3  ; ptr
BL              free
MOV             R1, #4
ADD             R0, R4, #0x44 ; 'D'
BL              sub_1FA90
STR             R0, [R4,#0x134]
POP             {R4,PC}
; End of function sub_2A91C




; unsigned int __fastcall sub_2A954(__int64 *)
sub_2A954
PUSH            {R4,LR}
SUBS            R4, R0, #0
VPUSH           {D8}
BEQ             loc_2A9D4
VLDR            D8, =6.27710174e57
LDRD            R0, R1, [R4,#0xD8]
BLX             sub_4AB04
VMOV            D7, R0, R1
LDRD            R0, R1, [R4,#0xD0]
VMUL.F64        D8, D7, D8
BLX             sub_4AB04
VLDR            D7, =3.40282367e38
VMOV            D6, R0, R1
LDRD            R0, R1, [R4,#0xC8]
VMLA.F64        D8, D6, D7
BLX             sub_4AB04
VLDR            D7, =1.84467441e19
VMOV            D6, R0, R1
LDRD            R0, R1, [R4,#0xC0]
VMLA.F64        D8, D6, D7
BLX             sub_4AB04
VMOV            D7, R0, R1
VADD.F64        D8, D7, D8
VCMP.F64        D8, #0.0
VMRS            APSR_nzcv, FPSCR
BEQ             loc_2A9D4
VLDR            D6, =2.69595353e67
VDIV.F64        D7, D6, D8
VMOV            R0, R1, D7
BLX             sub_4ABD0
VPOP            {D8}
POP             {R4,PC}

loc_2A9D4
VPOP            {D8}
MOV             R0, #0
MOV             R1, #0
POP             {R4,PC}
; End of function sub_2A954

ALIGN 8
dbl_2A9E8 DCFD 6.27710174e57
dbl_2A9F0 DCFD 3.40282367e38
dbl_2A9F8 DCFD 1.84467441e19
dbl_2AA00 DCFD 2.69595353e67



; void __fastcall sub_2AA08(void ***, const char *, const char *, int)
sub_2AA08

var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R7,LR}
MOV             R5, R1
LDR             R1, [R0]
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
MOV             R6, R2
MOV             R7, R3
CMP             R1, #0
BEQ             loc_2ABD0
LDRB            R3, [R1,#0x111]
MOV             R4, R0
CMP             R3, #0
BNE             loc_2AB4C
LDR             R3, [R1,#0xF0]
CMP             R3, #0
BNE             loc_2AB4C
LDRB            R3, [R1,#0x110]
CMP             R3, #0
BNE             loc_2AB4C
LDR             R3, [R1,#0x104]
CMP             R3, #0
BEQ             loc_2AA8C
LDR             R2, [R3,#0x7C]
ADD             R2, R2, #1
STR             R2, [R3,#0x7C]
LDR             R2, [R1,#0x104]
LDR             R3, [R2,#0x40]
SUB             R3, R3, #1
STR             R3, [R2,#0x40]
LDR             R2, [R1,#0x104]
LDR             R3, [R2,#0x44]
SUB             R3, R3, #1
STR             R3, [R2,#0x44]

loc_2AA8C
MOVW            R3, #:lower16:qword_75008
MOVW            R1, #:lower16:byte_686E1
MOVT            R3, #:upper16:qword_75008
MOVT            R1, #:upper16:byte_686E1
LDR             R2, [R3]
LDRB            R0, [R1]
LDR             R1, [R3,#(qword_75008+4 - 0x75008)]
ADDS            R2, R2, #1
STR             R2, [R3]
ADC             R2, R1, #0
CMP             R0, #0
STR             R2, [R3,#(qword_75008+4 - 0x75008)]
BEQ             loc_2AB2C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2AAFC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2AAFC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2AB2C

loc_2AAFC
MOVW            R3, #:lower16:aDiscardedWork ; "Discarded work"
ADD             R12, SP, #0x80C+s
MOVT            R3, #:upper16:aDiscardedWork ; "Discarded work"
LDM             R3, {R0-R3} ; "Discarded work"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x80C+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #7
STRB            LR, [R12]
BL              sub_1DD60

loc_2AB2C
MOV             R3, R7
MOV             R2, R6
MOV             R1, R5
MOV             R0, R4
BL              sub_2A70C

loc_2AB40
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_2AB4C
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2AB2C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2AB88
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2ABB8

loc_2AB88
MOVW            R12, #:lower16:aDiscardedClone ; "Discarded cloned or rolled work"
ADD             LR, SP, #0x80C+s
MOVT            R12, #:upper16:aDiscardedClone ; "Discarded cloned or rolled work"
LDM             R12!, {R0-R3} ; "Discarded cloned or rolled work"
STM             LR!, {R0-R3}
LDM             R12, {R0-R3} ; " or rolled work"
STM             LR, {R0-R3}
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_2AB2C

loc_2ABB8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2AB2C
B               loc_2AB88

loc_2ABD0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2AC0C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2AC0C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2AB40

loc_2AC0C
MOVW            R2, #:lower16:aDiscardWorkCal ; "Discard work called with NULL work from"...
STR             R7, [SP,#0x80C+var_808]
MOV             R3, R5
STR             R6, [SP,#0x80C+var_80C]
ADD             R0, SP, #0x80C+s ; s
MOVT            R2, #:upper16:aDiscardWorkCal ; "Discard work called with NULL work from"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
B               loc_2AB40
; End of function sub_2AA08




; int *__fastcall sub_2AC40(int *result)
sub_2AC40
PUSH            {R4-R7,LR}
MOV             R4, #dword_72E60
LDR             R7, [R4]
CMP             R7, #0
SUB             R5, R7, #1
BLE             loc_2AC8C
MOV             R12, #dword_72F04
LDR             R2, [R12]
ADD             LR, R2, R7,LSL#2

loc_2AC6C
LDR             R1, [R2],#4
LDR             R12, [R0,#4]
LDR             R3, [R1,#4]
CMP             R3, R12
SUB             R3, R3, #1
STRGT           R3, [R1,#4]
CMP             LR, R2
BNE             loc_2AC6C

loc_2AC8C
LDR             R6, [R0]
CMP             R6, R5
BGE             loc_2ACE0
ADD             R1, R6, #1
MOVW            R12, #:lower16:dword_72F04
MOV             R2, R1,LSL#2
MOVT            R12, #:upper16:dword_72F04
B               loc_2ACB0

loc_2ACAC
ADD             R1, R1, #1

loc_2ACB0
LDR             LR, [R12]
SUB             R3, R2, #4
CMP             R1, R5
LDR             R7, [LR,R2]
ADD             R2, R2, #4
STR             R7, [LR,R3]
LDR             LR, [R12]
LDR             R3, [LR,R3]
STR             R6, [R3]
MOV             R6, R1
BNE             loc_2ACAC
LDR             R7, [R4]

loc_2ACE0
STR             R7, [R0]
MOV             R2, #1
LDR             R3, [R4]
STRB            R2, [R0,#0x69]
SUB             R3, R3, #1
STR             R3, [R4]
POP             {R4-R7,PC}
; End of function sub_2AC40




; void __fastcall sub_2ACFC(FILE *s)
sub_2ACFC

var_24= -0x24
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R5, R0
MOVW            R8, #:lower16:dword_72E60
MOVW            R0, #:lower16:aPools_1 ; "{\n\"pools\" : ["
MOV             R3, R5  ; s
SUB             SP, SP, #0x24
MOVT            R0, #:upper16:aPools_1 ; "{\n\"pools\" : ["
MOV             R2, #0xD ; n
MOV             R1, #1  ; size
MOVT            R8, #:upper16:dword_72E60
BL              fwrite
LDR             R3, [R8]
CMP             R3, #0
BLE             loc_2AF0C
MOVW            R7, #:lower16:(asc_4CF84+4) ; ""
MOVW            R9, #:lower16:word_51D00
MOVT            R7, #:upper16:(asc_4CF84+4) ; ""
MOVT            R9, #:upper16:word_51D00
MOV             R6, #0
B               loc_2AE30

loc_2AD4C
LDR             R2, [R0,#0xB8]
CMP             R6, #0
MOVEQ           R11, R7
MOVNE           R11, R9
CMP             R2, #0
BEQ             loc_2AEFC
LDR             R0, [R0,#0xB4]
BL              sub_1F9D4
BL              sub_28448
STR             R0, [SP,#0x24+var_8]
LDR             R0, [R4,#0xB8]
CMP             R0, #0
BEQ             loc_2B2D0
BL              sub_28448
LDR             R1, [R4,#0xB8]
MOVW            R2, #:lower16:asc_519A4 ; "|"
LDR             R3, [R4,#0x38]
MOVT            R2, #:upper16:asc_519A4 ; "|"
MOV             R10, R0
CMP             R1, #0
MOVEQ           R2, R7

loc_2ADA0
LDR             R0, [R4,#0xA4]
STR             R2, [SP,#0x24+var_C]
STR             R3, [SP,#0x24+var_10]
BL              sub_28448
LDR             R3, [SP,#0x24+var_10]
MOVW            R1, #:lower16:aSQuotaSSSDS ; "%s\n\t{\n\t\t\"quota\" : \"%s%s%s%d;%s"...
STR             R0, [SP,#0x24+var_18]
MOVT            R1, #:upper16:aSQuotaSSSDS ; "%s\n\t{\n\t\t\"quota\" : \"%s%s%s%d;%s"...
STR             R10, [SP,#0x24+var_24]
MOV             R0, R5  ; stream
STR             R3, [SP,#0x24+var_1C]
LDRD            R2, R3, [SP,#0x24+var_C]
STR             R2, [SP,#0x24+var_24+4]
MOV             R2, R11
BL              fprintf
LDRB            R3, [R4,#0x244]
CMP             R3, #0
BNE             loc_2AEE0

loc_2ADE8
LDR             R0, [R4,#0xAC]
ADD             R6, R6, #1
BL              sub_28448
MOVW            R1, #:lower16:aUserS ; "\n\t\t\"user\" : \"%s\""
MOV             R2, R0
MOVT            R1, #:upper16:aUserS ; format
MOV             R0, R5  ; stream
BL              fprintf
LDR             R0, [R4,#0xB0]
BL              sub_28448
MOVW            R1, #:lower16:aPassS ; "\n\t\t\"pass\" : \"%s\"\n\t}"
MOV             R2, R0
MOVT            R1, #:upper16:aPassS ; "\n\t\t\"pass\" : \"%s\"\n\t}"
MOV             R0, R5  ; stream
BL              fprintf
LDR             R3, [R8]
CMP             R3, R6
BLE             loc_2AF0C

loc_2AE30
MOV             R0, R6
BL              sub_290E8
LDR             R3, [R0,#0x38]
MOV             R4, R0
CMP             R3, #1
BNE             loc_2AD4C
LDR             R3, [R0,#0xB8]
CMP             R6, #0
MOVEQ           R10, R7
MOVNE           R10, R9
CMP             R3, #0
BEQ             loc_2B22C
LDR             R0, [R0,#0xB4]
BL              sub_1F9D4
BL              sub_28448
STR             R0, [SP,#0x24+var_C]
LDR             R0, [R4,#0xB8]
CMP             R0, #0
MOVEQ           R11, R7
MOVEQ           R3, R7
BEQ             loc_2AEA0
BL              sub_28448
LDR             R1, [R4,#0xB8]
MOV             R3, #asc_519A4 ; "|"
MOV             R11, R0
CMP             R1, #0
MOVEQ           R3, R7

loc_2AEA0
LDR             R0, [R4,#0xA4]
STR             R3, [SP,#0x24+var_10]
BL              sub_28448
LDR             R3, [SP,#0x24+var_10]
MOVW            R1, #:lower16:aSUrlSSSS ; "%s\n\t{\n\t\t\"url\" : \"%s%s%s%s\","
STR             R0, [SP,#0x24+var_1C]
MOV             R2, R10
STR             R11, [SP,#0x24+var_24]
MOVT            R1, #:upper16:aSUrlSSSS ; "%s\n\t{\n\t\t\"url\" : \"%s%s%s%s\","
STR             R3, [SP,#0x24+var_24+4]
MOV             R0, R5  ; stream
LDR             R3, [SP,#0x24+var_C]
BL              fprintf
LDRB            R3, [R4,#0x244]
CMP             R3, #0
BEQ             loc_2ADE8

loc_2AEE0
MOVW            R0, #:lower16:aExtranonceSubs ; "\n\t\t\"extranonce-subscribe\" : true,"
MOV             R3, R5  ; s
MOV             R2, #0x21 ; '!' ; n
MOV             R1, #1  ; size
MOVT            R0, #:upper16:aExtranonceSubs ; "\n\t\t\"extranonce-subscribe\" : true,"
BL              fwrite
B               loc_2ADE8

loc_2AEFC
MOV             R10, R7
STR             R7, [SP,#0x24+var_8]
MOV             R2, R7
B               loc_2ADA0

loc_2AF0C
MOVW            R0, #:lower16:asc_51D18 ; "\n]\n"
MOVW            R4, #:lower16:off_67A68 ; "--version-file"
MOV             R3, R5  ; s
MOVT            R0, #:upper16:asc_51D18 ; "\n]\n"
MOV             R2, #3  ; n
MOV             R1, #1  ; size
MOVT            R4, #:upper16:off_67A68 ; "--version-file"
BL              fwrite
LDR             R3, [R4,#(dword_67A6C - 0x67A68)]
CMP             R3, #0x10
BEQ             loc_2B170
LDR             R9, =unk_68AFC
MOVW            R6, #:lower16:asc_519A4 ; "|"
MOVW            R7, #:lower16:unk_762FC
MOVW            R10, #:lower16:aSS_2 ; ",\n\"%s\" : \"%s\""
ADD             R4, R4, #0x1C
MOVT            R6, #:upper16:asc_519A4 ; "|"
MOVT            R7, #:upper16:unk_762FC
MOVT            R10, #:upper16:aSS_2 ; ",\n\"%s\" : \"%s\""

loc_2AF58               ; s
LDR             R0, [R4,#-0x1C]
BL              __strdup
MOV             R1, R6  ; delim
MOV             R8, R0
BL              strtok
SUBS            R11, R0, #0
BNE             loc_2B0B4
B               loc_2B158

loc_2AF78
LDR             R2, [R4,#-0x10]
MOVW            R3, #:lower16:sub_3E6D8
MOVW            R0, #:lower16:sub_29C80
MOVT            R3, #:upper16:sub_3E6D8
MOVT            R0, #:upper16:sub_29C80
MOVW            R12, #:lower16:sub_29CB0
CMP             R2, R0
CMPNE           R2, R3
MOVT            R12, #:upper16:sub_29CB0
MOVEQ           R3, #1
MOVNE           R3, #0
MOVW            R0, #:lower16:sub_29F10
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_29F10
MOVW            R12, #:lower16:sub_29EE0
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_29EE0
MOVW            R0, #:lower16:sub_29CE4
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_29CE4
MOVW            R12, #:lower16:sub_29EB4
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_29EB4
MOVW            R0, #:lower16:sub_29E84
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_29E84
MOVW            R12, #:lower16:sub_29E58
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_29E58
MOVW            R0, #:lower16:sub_29E2C
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_29E2C
MOVW            R12, #:lower16:sub_29E00
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_29E00
MOVW            R0, #:lower16:sub_29DD0
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_29DD0
MOVW            R12, #:lower16:sub_29DA0
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_29DA0
MOVW            R0, #:lower16:sub_29D70
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_29D70
MOVW            R12, #:lower16:sub_29D40
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_29D40
MOVW            R0, #:lower16:sub_29D10
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_29D10
CMP             R2, R0
ORREQ           R3, R3, #1
CMP             R3, #0
BEQ             loc_2B1E8
LDR             R3, [R4,#-8]
MOVW            R1, #:lower16:aSD_1 ; ",\n\"%s\" : \"%d\""
ADD             R2, R11, #2
MOVT            R1, #:upper16:aSD_1 ; ",\n\"%s\" : \"%d\""
MOV             R0, R5  ; stream
LDR             R3, [R3]
BL              fprintf

loc_2B0A0               ; delim
MOV             R1, R6
MOV             R0, #0  ; s
BL              strtok
SUBS            R11, R0, #0
BEQ             loc_2B158

loc_2B0B4
LDRB            R3, [R11,#1]
CMP             R3, #0x2D ; '-'
BNE             loc_2B0A0
LDR             R3, [R4,#-4]
CMP             R3, R7
BEQ             loc_2B0A0
LDR             R1, [R4,#-0x18]
TST             R1, #1
BEQ             loc_2B114
LDR             R2, [R4,#-0x14]
MOVW            R3, #:lower16:sub_3E4D8
MOVW            R0, #:lower16:sub_3E4F8
MOVT            R3, #:upper16:sub_3E4D8
MOVT            R0, #:upper16:sub_3E4F8
SUB             R12, R2, R3
CMP             R2, R3
CMPNE           R2, R0
CLZ             R12, R12
MOV             R12, R12,LSR#5
BNE             loc_2B114
LDR             R3, [R4,#-8]
LDRB            R3, [R3]
CMP             R3, R12
BEQ             loc_2B23C

loc_2B114
TST             R1, #2
BNE             loc_2AF78

loc_2B11C
TST             R1, #6
BEQ             loc_2B0A0
LDR             R3, [R4,#-8]
CMP             R3, R9
BEQ             loc_2B0A0
LDR             R0, [R3]
CMP             R0, #0
BEQ             loc_2B0A0
BL              sub_28448
ADD             R2, R11, #2
MOV             R3, R0
MOV             R1, R10 ; format
MOV             R0, R5  ; stream
BL              fprintf
B               loc_2B0A0

loc_2B158               ; ptr
MOV             R0, R8
ADD             R4, R4, #0x1C
BL              free
LDR             R3, [R4,#-0x18]
CMP             R3, #0x10
BNE             loc_2AF58

loc_2B170
MOV             R6, #byte_686E8
LDR             R1, [R6,#(dword_68AE4 - 0x686E8)] ; size
CMP             R1, #4
BEQ             loc_2B2B0

loc_2B184
CMP             R1, #3
BEQ             loc_2B290

loc_2B18C
CMP             R1, #1
BEQ             loc_2B274

loc_2B194
CMP             R1, #2
BEQ             loc_2B254

loc_2B19C
MOVW            R0, #:lower16:asc_51DB4 ; "\n}\n"
MOV             R3, R5  ; s
MOVT            R0, #:upper16:asc_51DB4 ; ptr
MOV             R2, #3  ; n
MOV             R1, #1  ; size
BL              fwrite
LDR             R4, [R6,#(dword_688FC - 0x686E8)]
MOV             R3, #0
STR             R3, [R6,#(dword_688FC - 0x686E8)]
CMP             R4, R3
BEQ             loc_2B1E0

loc_2B1C8               ; ptr
LDM             R4, {R0,R5}
BL              free
MOV             R0, R4  ; ptr
BL              free
SUBS            R4, R5, #0
BNE             loc_2B1C8

loc_2B1E0
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_2B1E8
MOVW            R0, #:lower16:sub_297CC
MOVW            R3, #:lower16:sub_29824
MOVT            R0, #:upper16:sub_297CC
MOVT            R3, #:upper16:sub_29824
CMP             R2, R3
CMPNE           R2, R0
BNE             loc_2B11C
LDR             R3, [R4,#-8]
MOVW            R1, #:lower16:aS1f ; ",\n\"%s\" : \"%.1f\""
ADD             R2, R11, #2
MOVT            R1, #:upper16:aS1f ; ",\n\"%s\" : \"%.1f\""
MOV             R0, R5  ; stream
VLDR            S14, [R3]
VCVT.F64.F32    D7, S14
VSTR            D7, [SP,#0x24+var_24]
BL              fprintf
B               loc_2B0A0

loc_2B22C
MOV             R11, R7
STR             R7, [SP,#0x24+var_C]
MOV             R3, R7
B               loc_2AEA0

loc_2B23C
MOVW            R1, #:lower16:aSTrue ; ",\n\"%s\" : true"
ADD             R2, R11, #2
MOVT            R1, #:upper16:aSTrue ; ",\n\"%s\" : true"
MOV             R0, R5  ; stream
BL              fprintf
B               loc_2B0A0

loc_2B254
MOVW            R3, #:lower16:dword_73F1C
MOVW            R1, #:lower16:aRotateD ; ",\n\"rotate\" : \"%d\""
MOVT            R3, #:upper16:dword_73F1C
MOVT            R1, #:upper16:aRotateD ; ",\n\"rotate\" : \"%d\""
LDR             R2, [R3]
MOV             R0, R5  ; stream
BL              fprintf
B               loc_2B19C

loc_2B274
MOVW            R0, #:lower16:aRoundRobinTrue ; ",\n\"round-robin\" : true"
MOV             R3, R5  ; s
MOVT            R0, #:upper16:aRoundRobinTrue ; ",\n\"round-robin\" : true"
MOV             R2, #0x16 ; n
BL              fwrite
LDR             R1, [R6,#(dword_68AE4 - 0x686E8)]
B               loc_2B194

loc_2B290
MOVW            R0, #:lower16:aLoadBalanceTru ; ",\n\"load-balance\" : true"
MOV             R1, #1  ; size
MOV             R3, R5  ; s
MOVT            R0, #:upper16:aLoadBalanceTru ; ",\n\"load-balance\" : true"
MOV             R2, #0x17 ; n
BL              fwrite
LDR             R1, [R6,#(dword_68AE4 - 0x686E8)]
B               loc_2B18C

loc_2B2B0
MOVW            R0, #:lower16:aBalanceTrue ; ",\n\"balance\" : true"
MOV             R1, #1  ; size
MOV             R3, R5  ; s
MOVT            R0, #:upper16:aBalanceTrue ; ",\n\"balance\" : true"
MOV             R2, #0x12 ; n
BL              fwrite
LDR             R1, [R6,#(dword_68AE4 - 0x686E8)]
B               loc_2B184

loc_2B2D0
LDR             R3, [R4,#0x38]
MOV             R10, R7
MOV             R2, R7
B               loc_2ADA0
; End of function sub_2ACFC

off_2B2E0 DCD unk_68AFC



; int sub_2B2E4()
sub_2B2E4

var_C= -0xC

LDR             R12, =dword_68B08
MOVW            R3, #:lower16:off_67A68 ; "--version-file"
PUSH            {R4,R5,LR}
MOV             R1, #0  ; int
MOVT            R3, #:upper16:off_67A68 ; "--version-file"
SUB             SP, SP, #0xC
ADD             R2, R3, #0x760 ; s
MOV             R0, R1  ; int
STR             R1, [SP,#0xC+var_C] ; int
MOV             R5, R1
STR             R1, [R3,#(dword_681C8 - 0x67A68)]
STR             R1, [R3,#(dword_681CC - 0x67A68)]
MOV             R3, #8  ; maxlen
STR             R1, [R12,#(qword_68B00 - 0x68B08)]
STR             R1, [R12,#(qword_68B00+4 - 0x68B08)]
BL              sub_287D8
MOV             R3, #dword_72E60
LDR             R12, [R3]
CMP             R12, R5
BLE             loc_2B364
MOVW            R3, #:lower16:dword_72F04
MOV             R0, R5
MOVT            R3, #:upper16:dword_72F04
MOV             R1, R5
LDR             R2, [R3]
ADD             R12, R2, R12,LSL#2

loc_2B350
LDR             R3, [R2],#4
CMP             R2, R12
STR             R0, [R3,#0x170]
STR             R1, [R3,#0x174]
BNE             loc_2B350

loc_2B364
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_2B2E4

off_2B36C DCD dword_68B08



; char *__fastcall sub_2B370(char *)
sub_2B370
MOVW            R3, #:lower16:dword_74FFC
PUSH            {R4,LR}
MOVT            R3, #:upper16:dword_74FFC
MOV             R4, R0
LDR             R1, [R3] ; src
CMP             R1, #0
BEQ             loc_2B398
LDRB            R3, [R1]
CMP             R3, #0
BNE             loc_2B438

loc_2B398
MOV             R0, #aHome ; "HOME"
BL              getenv
CMP             R0, #0
BEQ             loc_2B3C4
MOV             R0, #aHome ; "HOME"
BL              getenv
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_2B440

loc_2B3C4
MOV             R3, #0
STRB            R3, [R4]

loc_2B3CC               ; s
MOV             R0, R4
BL              strlen
MOVW            R3, #:lower16:aBmminer ; ".bmminer/"
ADD             R2, R4, R0
MOVT            R3, #:upper16:aBmminer ; ".bmminer/"
MOV             R12, R0
LDM             R3!, {R0,R1} ; ".bmminer/"
LDRH            R3, [R3] ; "/"
STR             R0, [R4,R12]
MOV             R0, R4  ; path
STR             R1, [R2,#4]
MOVW            R1, #0x1FF ; mode
STRH            R3, [R2,#8]
BL              mkdir
MOV             R0, R4  ; s
BL              strlen
MOVW            R3, #:lower16:aBmminerConf ; "bmminer.conf"
ADD             R12, R4, R0
MOVT            R3, #:upper16:aBmminerConf ; "bmminer.conf"
MOV             LR, R0
LDM             R3!, {R0-R2} ; "bmminer.conf"
LDRB            R3, [R3] ; ""
STR             R0, [R4,LR]
STR             R1, [R12,#4]
STRB            R3, [R12,#0xC]
STR             R2, [R12,#8]
POP             {R4,PC}

loc_2B438
POP             {R4,LR}
B               strcpy

loc_2B440
MOV             R0, #aHome ; "HOME"
BL              getenv
MOV             R1, R0
MOV             R0, R4
BL              stpcpy
MOV             R3, #(aBmminer+8) ; "/"
LDRH            R3, [R3] ; "/"
STRH            R3, [R0]
B               loc_2B3CC
; End of function sub_2B370




; void sub_2B46C()
sub_2B46C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
PUSH            {R4-R6,LR}
MOVW            R3, #0x8A4
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R0, #0x1000
MOVW            R4, #:lower16:byte_686E8
LDR             R2, =aLoadDefaultCon ; "load_default_config"
MOVT            R4, #:upper16:byte_686E8
BL              sub_1F828
MOV             R5, #0
STR             R0, [R4,#(dword_68A08 - 0x686E8)]
STR             R5, [R4,#(dword_68A0C - 0x686E8)]
BL              sub_2B370
MOV             R1, #4  ; type
LDR             R0, [R4,#(dword_68A08 - 0x686E8)] ; name
BL              access
SUBS            R1, R0, #0
LDR             R0, [R4,#(dword_68A08 - 0x686E8)] ; ptr
BEQ             loc_2B4C4
BL              free
STR             R5, [R4,#(dword_68A08 - 0x686E8)]
POP             {R4-R6,PC}

loc_2B4C4
POP             {R4-R6,LR}
B               sub_291BC
; End of function sub_2B46C

off_2B4CC DCD aLoadDefaultCon ; "load_default_config"



; void __fastcall sub_2B4D0(void *)
sub_2B4D0

var_824= -0x824
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

VCMP.F64        D0, #0.0
VMRS            APSR_nzcv, FPSCR
PUSH            {R4-R11,LR}
MOV             R5, R0
VPUSH           {D8}
SUB             SP, SP, #0x820
SUB             SP, SP, #0xC
BEQ             loc_2B664
VLDR            D6, =2.69595353e67
VLDR            D7, =1.59309191e-58
VDIV.F64        D8, D6, D0
VMUL.F64        D7, D8, D7
VMOV            R0, R1, D7
BLX             sub_4ABD0
MOV             R6, R0
MOV             R7, R1
BLX             sub_4AB04
VLDR            D6, =6.27710174e57
VMOV            D5, R0, R1
VLDR            D7, =2.93873588e-39
VMLS.F64        D8, D5, D6
VMUL.F64        D7, D8, D7
VMOV            R0, R1, D7
BLX             sub_4ABD0
MOV             R11, R0
MOV             R10, R1
BLX             sub_4AB04
VLDR            D6, =3.40282367e38
VMOV            D5, R0, R1
VLDR            D7, =5.42101086e-20
VMLS.F64        D8, D5, D6
VMUL.F64        D7, D8, D7
VMOV            R0, R1, D7
BLX             sub_4ABD0
MOV             R9, R0
MOV             R8, R1
BLX             sub_4AB04
VLDR            D7, =1.84467441e19
VMOV            D6, R0, R1
VMLS.F64        D8, D6, D7
VMOV            R0, R1, D8
BLX             sub_4ABD0

loc_2B578
MOVW            R4, #:lower16:byte_686E1
STRD            R6, R7, [SP,#0x82C+var_80C]
MOVT            R4, #:upper16:byte_686E1
STR             R11, [SP,#0x82C+var_814]
LDRB            R3, [R4]
STR             R10, [SP,#0x82C+var_810]
STR             R9, [SP,#0x82C+var_81C]
CMP             R3, #0
STR             R8, [SP,#0x82C+var_818]
STRD            R0, R1, [SP,#0x82C+var_824]
BNE             loc_2B5D8

loc_2B5A4
LDR             R2, =aSetTarget ; "set_target"
MOVW            R12, #0x20CC
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
ADD             R1, SP, #0x82C+var_824
MOV             R0, R5
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R2,R12}
MOV             R2, #0x20 ; ' '
BL              sub_232EC
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}

loc_2B5D8
MOV             R1, #0x20 ; ' '
ADD             R0, SP, #0x82C+var_824
BL              sub_1FA90
LDRB            R3, [R4]
MOV             R6, R0
CMP             R3, #0
BEQ             loc_2B658
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2B630
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2B630
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2B658

loc_2B630
MOVW            R2, #:lower16:aGeneratedTarge ; "Generated target %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aGeneratedTarge ; "Generated target %s"
ADD             R0, SP, #0x82C+s ; s
MOV             R3, R6
BL              snprintf
ADD             R1, SP, #0x82C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_2B658               ; ptr
MOV             R0, R6
BL              free
B               loc_2B5A4

loc_2B664
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2B6C8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2B6C8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_2B6C8
MOV             R0, #0
MOV             R6, #0
MOV             R1, R0
MOV             R9, R0
MOV             R11, R0
MOV             R8, R0
MOV             R10, R0
MOVT            R6, #0xFFFF
MOV             R7, #0
B               loc_2B578

loc_2B6C8
MOVW            LR, #:lower16:aDiffZeroPassed ; "Diff zero passed to set_target"
ADD             R12, SP, #0x82C+s
MOVT            LR, #:upper16:aDiffZeroPassed ; "Diff zero passed to set_target"
MOV             R6, #0
LDM             LR!, {R0-R3} ; "Diff zero passed to set_target"
MOVT            R6, #0xFFFF
MOV             R7, #0
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " to set_target"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x82C+s
MOV             LR, R3,LSR#16
MOV             R0, #3
MOV             R2, #0
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_1DD60
MOV             R0, #0
MOV             R1, R0
MOV             R9, R0
MOV             R11, R0
MOV             R8, R0
MOV             R10, R0
B               loc_2B578
; End of function sub_2B4D0

dbl_2B728 DCFD 2.69595353e67
dbl_2B730 DCFD 1.59309191e-58
dbl_2B738 DCFD 6.27710174e57
dbl_2B740 DCFD 2.93873588e-39
dbl_2B748 DCFD 3.40282367e38
dbl_2B750 DCFD 5.42101086e-20
dbl_2B758 DCFD 1.84467441e19
off_2B760 DCD aSetTarget ; "set_target"



; int __fastcall sub_2B764(int)
sub_2B764
MOVW            R3, #:lower16:dword_76080
LDR             R2, [R0,#0xE8]
MOVT            R3, #:upper16:dword_76080
LDR             R0, [R3]
SUB             R0, R0, R2
BX              LR
; End of function sub_2B764




; bool __fastcall sub_2B77C(int, int)
sub_2B77C
PUSH            {R4,LR}
MOV             R4, R0
STR             R1, [R0,#0x4C]
BL              sub_28C30
LDR             R0, [R4,#0xDC]
CLZ             R0, R0
MOV             R0, R0,LSR#5
POP             {R4,PC}
; End of function sub_2B77C




; bool __fastcall sub_2B79C(int, int)
sub_2B79C
PUSH            {R4,LR}
MOV             R4, R0
VPUSH           {D8}
STR             R1, [R0,#0x4C]
VMOV.F64        D8, D0
BL              sub_28C30
VLDR            D7, =4.29490176e9
VDIV.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABD0
LDRD            R2, R3, [R4,#0xD8]
VPOP            {D8}
CMP             R3, R1
CMPEQ           R2, R0
MOVLS           R0, #1
MOVHI           R0, #0
POP             {R4,PC}
; End of function sub_2B79C

dbl_2B7E0 DCFD 4.29490176e9



; int __fastcall sub_2B7E8(int, int)
sub_2B7E8

var_810= -0x810
s= -0x808

LDR             R3, [R0,#0x24]
LDR             R2, [R3,#0xEC]
CMP             R2, R1
BEQ             loc_2B804
MOV             R0, #1
STR             R1, [R3,#0xEC]
BX              LR

loc_2B804
MOV             R2, #byte_72D90
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_2B840
MOV             R2, #byte_686E0
LDRB            R0, [R2]
CMP             R0, #0
BNE             loc_2B840
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #5
BXLE            LR

loc_2B840
PUSH            {LR}
SUB             SP, SP, #0x800
LDMIB           R3, {R1,R12}
SUB             SP, SP, #0xC
MOVW            R2, #:lower16:aSDDuplicateSha ; "%s %d duplicate share detected as HW er"...
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aSDDuplicateSha ; "%s %d duplicate share detected as HW er"...
LDR             R3, [R1,#8]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2B7E8




; void __fastcall sub_2B88C(int *, int)
sub_2B88C

var_4B4= -0x4B4
var_4B0= -0x4B0
ptr= -0x4A8
var_4A4= -0x4A4
var_484= -0x484
var_478= -0x478
var_474= -0x474
var_464= -0x464
var_444= -0x444
s= -0x404

PUSH            {R4-R11,LR}
MOV             R4, #byte_686E8
SUB             SP, SP, #0x4B0
SUB             SP, SP, #4
MOV             R5, R0
LDR             R3, [R4,#(dword_68B08 - 0x686E8)]
MOV             R9, R1
CMP             R3, #0
BEQ             loc_2BB24

loc_2B8B4               ; n
MOV             R2, #0x400
ADD             R0, SP, #0x4B4+s ; s
MOV             R1, #0  ; c
ADD             R6, SP, #0x4B4+var_444
BL              memset
ADD             R7, R5, #0x40 ; '@'
MOV             R12, R5
MOV             R2, #0
ADD             R3, SP, #0x4B4+var_474
STR             R2, [SP,#0x4B4+var_478]
STR             R2, [R3],#-4
STR             R2, [R3,#8]
STR             R2, [R3,#0xC]
STR             R2, [R3,#0x10]

loc_2B8EC
LDR             R0, [R12]
ADD             R12, R12, #0x10
LDR             R1, [R12,#-0xC]
MOV             LR, R6
LDR             R2, [R12,#-8]
ADD             R6, R6, #0x10
LDR             R3, [R12,#-4]
CMP             R12, R7
STM             LR!, {R0-R3}
BNE             loc_2B8EC
MOV             R8, R5
ADD             R6, SP, #0x4B4+var_4A4
MOV             R7, R5
ADD             R10, SP, #0x4B4+var_484
LDR             R0, [R8,#0x80]!
ADD             LR, SP, #0x4B4+var_464
LDR             R1, [R8,#4]
LDR             R2, [R8,#8]
LDR             R3, [R8,#0xC]
STM             R6!, {R0-R3}
LDR             R0, [R8,#0x10]
LDR             R1, [R8,#0x14]
LDR             R2, [R8,#0x18]
LDR             R3, [R8,#0x1C]
STM             R6!, {R0-R3}
LDR             R0, [R12]
LDR             R1, [R12,#4]
LDR             R2, [R12,#8]
STM             R10!, {R0-R2}
LDR             R0, [R7,#0xC0]!
LDR             R1, [R7,#4]
LDR             R3, [R7,#0xC]
LDR             R2, [R7,#8]
STM             LR!, {R0-R3}
LDR             R0, [R7,#0x10]
LDR             R1, [R7,#0x14]
LDR             R2, [R7,#0x18]
LDR             R3, [R7,#0x1C]
STM             LR!, {R0-R3}
MOV             R1, #0x40 ; '@'
ADD             R0, SP, #0x4B4+var_444
BL              sub_277D4
ADD             R0, SP, #0x4B4+var_4A4
MOV             R1, #0x20 ; ' '
BL              sub_277D4
ADD             R0, SP, #0x4B4+var_484
MOV             R1, #0xC
BL              sub_277D4
ADD             R0, SP, #0x4B4+var_464
MOV             R1, #0x20 ; ' '
BL              sub_277D4
MOV             R1, #0x80
MOV             R0, R5
BL              sub_1FA90
ADD             R2, SP, #0x4B4+var_444
STR             R0, [SP,#0x4B4+ptr]
MOV             R1, #0x40 ; '@'
MOV             R0, R2
BL              sub_1FA90
ADD             R2, SP, #0x4B4+var_4A4
MOV             R1, #0x20 ; ' '
MOV             R11, R0
MOV             R0, R2
BL              sub_1FA90
ADD             R2, SP, #0x4B4+var_484
MOV             R8, R0
MOV             R1, #0xC
MOV             R0, R2
BL              sub_1FA90
MOV             R1, #4
MOV             R7, R0
MOV             R0, R9
BL              sub_1FA90
MOV             R1, #5
MOV             R6, R0
MOV             R0, R9
BL              sub_1FA90
ADD             R2, SP, #0x4B4+var_464
MOV             R1, #0x20 ; ' '
MOV             R10, R0
MOV             R0, R2
BL              sub_1FA90
MOV             R1, #4
MOV             R9, R0
ADD             R0, R5, #0x1BC
BL              sub_1FA90
ADD             R2, SP, #0x4B4+s
MOV             R5, R0
MOVW            R1, #:lower16:aMidstateSDataS_0 ; "midstate %s data %s nonce %s version %s"...
MOV             R3, R7
MOVT            R1, #:upper16:aMidstateSDataS_0 ; "midstate %s data %s nonce %s version %s"...
MOV             R0, R2  ; s
STR             R6, [SP,#0x4B4+var_4B4]
MOV             R2, R8
STR             R5, [SP,#0x4B4+var_4B0]
BL              sprintf
ADD             R2, SP, #0x4B4+s
MOV             R0, R2  ; s
BL              strlen
ADD             R12, SP, #0x4B4+s
MOV             R1, R0  ; size
LDR             R3, [R4,#(dword_68B08 - 0x686E8)] ; s
MOV             R2, #1  ; n
MOV             R0, R12 ; ptr
BL              fwrite
LDR             R0, [R4,#(dword_68B08 - 0x686E8)] ; stream
BL              fflush
LDR             R0, [SP,#0x4B4+ptr] ; ptr
CMP             R0, #0
BEQ             loc_2BAA8
BL              free

loc_2BAA8
CMP             R11, #0
BEQ             loc_2BAB8
MOV             R0, R11 ; ptr
BL              free

loc_2BAB8
CMP             R8, #0
BEQ             loc_2BAC8
MOV             R0, R8  ; ptr
BL              free

loc_2BAC8
CMP             R7, #0
BEQ             loc_2BAD8
MOV             R0, R7  ; ptr
BL              free

loc_2BAD8
CMP             R6, #0
BEQ             loc_2BAE8
MOV             R0, R6  ; ptr
BL              free

loc_2BAE8
CMP             R10, #0
BEQ             loc_2BAF8
MOV             R0, R10 ; ptr
BL              free

loc_2BAF8
CMP             R9, #0
BEQ             loc_2BB08
MOV             R0, R9  ; ptr
BL              free

loc_2BB08
CMP             R5, #0
BEQ             loc_2BB18
MOV             R0, R5  ; ptr
BL              free

loc_2BB18
ADD             SP, SP, #0x4B0
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2BB24
MOVW            R1, #:lower16:aWb ; "wb"
MOVW            R0, #:lower16:aNvdataWorklogT ; "/nvdata/worklog.txt"
MOVT            R1, #:upper16:aWb ; "wb"
MOVT            R0, #:upper16:aNvdataWorklogT ; "/nvdata/worklog.txt"
BL              fopen64
STR             R0, [R4,#(dword_68B08 - 0x686E8)]
B               loc_2B8B4
; End of function sub_2B88C




; void __fastcall sub_2BB40(int *, unsigned int)
sub_2BB40

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {LR}
SUB             SP, SP, #0xC
REV             R3, R1
ADD             R1, SP, #0xC+var_4
STR             R3, [R1,#-8]!
MOV             R3, #0
STRB            R3, [SP,#0xC+var_8]
BL              sub_2B88C
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2BB40




; int __fastcall sub_2BB68(int *, unsigned int)
sub_2BB68

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4,R5,LR}
MOV             R4, R0
STR             R1, [R0,#0x4C]
SUB             SP, SP, #0xC
MOV             R5, R1
BL              sub_28C30
LDR             R3, [R4,#0xDC]
CMP             R3, #0
MOVNE           R0, #0
BNE             loc_2BBAC
ADD             R1, SP, #0xC+var_4
REV             R5, R5
MOV             R0, R4
STR             R5, [R1,#-8]!
STRB            R3, [SP,#0xC+var_8]
BL              sub_2B88C
MOV             R0, #1

loc_2BBAC
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_2BB68




; void __fastcall sub_2BBB4(int, int)
sub_2BBB4

var_8= -8

PUSH            {R4-R11,LR}
MOV             R9, R1
LDR             R2, [R0,#0x168]
MOV             R4, R0
ADD             LR, R9, #0x154
MOV             R0, #0x112410D
MOVW            R1, #0xF76D
ADD             R2, R2, #1
MOVT            R1, #7
STR             R2, [R4,#0x168]
MOVW            R3, #0xBAC6
LDRB            R5, [R9,#0x154]
MOVT            R3, #0x9F49
LDRB            R12, [R9,#0x157]
MOVW            R2, #0xBEF3
STR             LR, [R9,#0x16C]
MOV             LR, #4
STR             LR, [R9,#0x170]
ADD             R0, R5, R0
LDRB            LR, [R9,#0x156]
MOVT            R2, #0xFEED
ADD             R0, R0, R12,LSL#24
LDRB            R12, [R9,#0x155]
SUB             SP, SP, #0xC
ADD             R0, R0, LR,LSL#16
ADD             R0, R0, R12,LSL#8
EOR             R1, R1, R0
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSL#8
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSR#13
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#12
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSL#16
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSR#5
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#3
SUB             R3, R3, R1
SUB             R5, R2, R1
EOR             R3, R3, R1,LSL#10
SUB             R5, R5, R3
EOR             R5, R5, R3,LSR#15
STR             R5, [R9,#0x174]
LDR             R6, [R4,#0x160]
CMP             R6, #0
BEQ             loc_2BF24
LDR             R3, [R6,#0x158]
MOV             R2, #0
STR             R2, [R9,#0x160]
ADD             R1, R9, #0x158
STR             R3, [R9,#0x158]
LDR             R3, [R4,#0x160]
LDR             R2, [R3,#0x158]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R9,#0x15C]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0x10]
STR             R9, [R3,#8]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
STR             R1, [R3,#0x10]

loc_2BCD8
LDR             R3, [R4,#0x160]
MOV             R0, #0
LDR             R2, [R3,#0x158]
LDR             R3, [R2,#0xC]
ADD             R3, R3, #1
STR             R3, [R2,#0xC]
LDR             R3, [R4,#0x160]
LDR             R2, [R3,#0x158]
LDRD            R2, R3, [R2]
SUB             R3, R3, #1
AND             R5, R5, R3
ADD             R5, R5, R5,LSL#1
MOV             R5, R5,LSL#2
ADD             R3, R2, R5
LDR             R2, [R3,#4]
ADD             R2, R2, #1
STR             R2, [R3,#4]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3]
LDR             R3, [R3,R5]
STR             R0, [R9,#0x164]
STR             R3, [R9,#0x168]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3]
LDR             R2, [R3,R5]
ADD             R3, R3, R5
CMP             R2, R0
STRNE           R1, [R2,#0xC]
LDRNE           R3, [R4,#0x160]
LDRNE           R3, [R3,#0x158]
LDRNE           R3, [R3]
ADDNE           R3, R3, R5
STR             R1, [R3]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3]
ADD             R5, R3, R5
LDRD            R2, R3, [R5,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_2BF1C
LDR             R4, [R9,#0x158]
LDR             R3, [R4,#0x24]
CMP             R3, #1
BEQ             loc_2BF1C
LDR             R0, [R4,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R6, R0, #0
BEQ             loc_2BFE4
LDR             R3, [R4,#4]
MOV             R7, #0
LDR             R1, [R4,#0xC]
LDR             R2, [R4,#8]
MOV             R3, R3,LSL#1
ADD             R2, R2, #1
SUB             R3, R3, #1
TST             R3, R1
MOVNE           R3, #1
MOVEQ           R3, R7
ADD             R3, R3, R1,LSR R2
STR             R3, [R4,#0x18]
LDR             R3, [R9,#0x158]
STR             R7, [R3,#0x1C]
LDR             R3, [R9,#0x158]
LDR             R4, [R3,#4]
CMP             R4, R7
BEQ             loc_2BEB8
MOV             R10, R7
STR             R7, [SP,#0xC+var_8]

loc_2BE04
LDR             R2, [R3]
LDR             R5, [R2,R7]
CMP             R5, #0
BNE             loc_2BE20
B               loc_2BEA0

loc_2BE18
LDR             R4, [R3,#4]
MOV             R5, R11

loc_2BE20
LDR             R2, [R5,#0x1C]
MOV             R4, R4,LSL#1
LDR             R11, [R5,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R2
ADD             R4, R4, R4,LSL#1
ADD             R8, R6, R4,LSL#2
LDR             R1, [R8,#4]
ADD             R1, R1, #1
STR             R1, [R8,#4]
LDR             R0, [R3,#0x18]
CMP             R1, R0
BLS             loc_2BE74
LDR             R1, [R3,#0x1C]
ADD             R1, R1, #1
STR             R1, [R3,#0x1C]
LDR             R3, [R9,#0x158]
LDR             R0, [R8,#4]
LDR             R1, [R3,#0x18]
BLX             sub_4A2D0
STR             R0, [R8,#8]

loc_2BE74
STR             R10, [R5,#0xC]
LDR             R3, [R6,R4,LSL#2]
STR             R3, [R5,#0x10]
LDR             R3, [R6,R4,LSL#2]
CMP             R3, #0
STRNE           R5, [R3,#0xC]
CMP             R11, #0
STR             R5, [R6,R4,LSL#2]
LDR             R3, [R9,#0x158]
BNE             loc_2BE18
LDR             R4, [R3,#4]

loc_2BEA0
LDR             R2, [SP,#0xC+var_8]
ADD             R7, R7, #0xC
ADD             R2, R2, #1
CMP             R2, R4
STR             R2, [SP,#0xC+var_8]
BCC             loc_2BE04

loc_2BEB8               ; ptr
LDR             R0, [R3]
BL              free
LDR             R2, [R9,#0x158]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R9,#0x158]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R9,#0x158]
STR             R6, [R3]
LDR             R3, [R9,#0x158]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R9,#0x158]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]

loc_2BF1C
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2BF24
STR             R6, [R9,#0x160]
MOV             R0, #0x2C ; ',' ; size
STR             R6, [R9,#0x15C]
STR             R9, [R4,#0x160]
BL              malloc
STR             R0, [R9,#0x158]
LDR             R3, [R4,#0x160]
LDR             R0, [R3,#0x158] ; s
CMP             R0, #0
BEQ             loc_2BFE4
MOV             R2, #0x2C ; ',' ; n
MOV             R1, R6  ; c
BL              memset
LDR             R3, [R4,#0x160]
MOV             R12, #0x20 ; ' '
MOV             R1, #5
MOV             R2, #0x158
MOV             R0, #0x180 ; size
LDR             LR, [R3,#0x158]!
STR             R3, [LR,#0x10]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
STR             R12, [R3,#4]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
STR             R1, [R3,#8]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
STR             R2, [R3,#0x14]
LDR             R3, [R4,#0x160]
LDR             R7, [R3,#0x158]
BL              malloc
STR             R0, [R7]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_2BFE4
MOV             R1, R6  ; c
MOV             R2, #0x180 ; n
BL              memset
LDR             R2, [R4,#0x160]
MOV             R3, #0xA0111FE1
ADD             R1, R9, #0x158
LDR             R2, [R2,#0x158]
STR             R3, [R2,#0x28]
B               loc_2BCD8

loc_2BFE4               ; status
MOV             R0, #0xFFFFFFFF
BL              exit
; End of function sub_2BBB4




; int __fastcall sub_2BFEC(int, void *s2, size_t n, const void *, int, size_t na)
sub_2BFEC

arg_0=  0x20
n=  0x24

PUSH            {R4-R10,LR}
SUBS            R5, R0, #0
LDR             R9, [SP,#arg_0]
BEQ             loc_2C050
LDR             R4, [R5,#0x160]
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3

loc_2C00C               ; n
MOV             R2, R7
MOV             R1, R6  ; s2
ADD             R0, R5, #0x80 ; s1
BL              memcmp
CMP             R0, #0
LDR             R2, [SP,#n] ; n
MOV             R1, R8  ; s2
ADD             R0, R5, R9 ; s1
BNE             loc_2C03C
BL              memcmp
CMP             R0, #0
BEQ             loc_2C050

loc_2C03C
CMP             R4, #0
MOV             R5, R4
BEQ             loc_2C054
LDR             R4, [R4,#0x160]
B               loc_2C00C

loc_2C050
MOV             R4, R5

loc_2C054
MOV             R0, R4
POP             {R4-R10,PC}
; End of function sub_2BFEC




; int __fastcall sub_2C05C(int result, int)
sub_2C05C
CMP             R0, #0
BXEQ            LR
LDR             R2, [R0,#0x154]
LDR             R3, [R0,#0x160]
CMP             R1, R2
BXEQ            LR
CMP             R3, #0
LDRNE           R0, [R3,#0x160]
BNE             loc_2C094
B               loc_2C0A0

loc_2C084
CMP             R0, #0
MOV             R3, R0
BXEQ            LR
LDR             R0, [R0,#0x160]

loc_2C094
LDR             R2, [R3,#0x154]
CMP             R2, R1
BNE             loc_2C084

loc_2C0A0
MOV             R0, R3
BX              LR
; End of function sub_2C05C




; void __fastcall sub_2C0A8(int, _DWORD *)
sub_2C0A8
PUSH            {R4-R6,LR}
LDR             R3, [R0,#0x168]
LDR             R12, [R0,#0x160]
SUB             R3, R3, #1
STR             R3, [R0,#0x168]
LDR             R2, [R1,#0x15C]
CMP             R2, #0
BEQ             loc_2C1C0
LDR             LR, [R12,#0x158]
ADD             R12, R1, #0x158
LDR             R3, [LR,#0x14]
LDR             R4, [LR,#0x10]
SUB             R4, R4, R3
CMP             R1, R4
BEQ             loc_2C19C

loc_2C0E4
LDR             LR, [R1,#0x160]
ADD             R3, R2, R3
STR             LR, [R3,#8]
LDR             R4, [R0,#0x160]

loc_2C0F4
LDR             R3, [R1,#0x160]
LDR             R2, [R4,#0x158]
CMP             R3, #0
BEQ             loc_2C11C
LDR             LR, [R2,#0x14]
LDR             R2, [R1,#0x15C]
ADD             R3, R3, LR
STR             R2, [R3,#4]
LDR             R3, [R0,#0x160]
LDR             R2, [R3,#0x158]

loc_2C11C
LDR             R3, [R2,#4]
LDR             LR, [R1,#0x174]
LDR             R2, [R2]
SUB             R3, R3, #1
AND             R3, R3, LR
ADD             R3, R3, R3,LSL#1
MOV             R3, R3,LSL#2
ADD             R2, R2, R3
LDR             LR, [R2,#4]
SUB             LR, LR, #1
STR             LR, [R2,#4]
LDR             R2, [R0,#0x160]
LDR             R2, [R2,#0x158]
LDR             R2, [R2]
LDR             LR, [R2,R3]
CMP             LR, R12
LDREQ           R12, [R1,#0x168]
STREQ           R12, [R2,R3]
LDR             R2, [R1,#0x164]
LDR             R3, [R1,#0x168]
CMP             R2, #0
STRNE           R3, [R2,#0x10]
LDRNE           R3, [R1,#0x168]
CMP             R3, #0
LDRNE           R2, [R1,#0x164]
STRNE           R2, [R3,#0xC]
LDR             R3, [R0,#0x160]
LDR             R2, [R3,#0x158]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]
POP             {R4-R6,PC}

loc_2C19C
ADD             R3, R2, R3
STR             R3, [LR,#0x10]
LDR             R2, [R1,#0x15C]
CMP             R2, #0
BEQ             loc_2C210
LDR             R3, [R0,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0x14]
B               loc_2C0E4

loc_2C1C0
LDR             R4, [R1,#0x160]
LDR             LR, [R12,#0x158]
CMP             R4, #0
BEQ             loc_2C1F0
LDR             R3, [LR,#0x14]
ADD             R12, R1, #0x158
LDR             R5, [LR,#0x10]
SUB             R5, R5, R3
CMP             R1, R5
BEQ             loc_2C19C

loc_2C1E8
STR             R4, [R0,#0x160]
B               loc_2C0F4

loc_2C1F0
MOV             R5, R0
LDR             R0, [LR] ; ptr
BL              free
LDR             R3, [R5,#0x160]
LDR             R0, [R3,#0x158] ; ptr
BL              free
STR             R4, [R5,#0x160]
POP             {R4-R6,PC}

loc_2C210
LDR             R4, [R1,#0x160]
B               loc_2C1E8
; End of function sub_2C0A8




; int __fastcall sub_2C218(int result)
sub_2C218
LDR             R2, [R0,#0x20]
CMP             R2, #1
BXEQ            LR
LDR             R3, [R0,#4]
LDR             R3, [R3,#0x10]
BX              R3
; End of function sub_2C218



; Attributes: noreturn

; void __fastcall __noreturn sub_2C230(int, int)
sub_2C230

newthread= -8

PUSH            {LR}
MOV             R3, #0  ; arg
SUB             SP, SP, #0xC
MOVW            R2, #:lower16:sub_28F68
MOV             R5, R0
MOV             R4, R1
MOVT            R2, #:upper16:sub_28F68 ; start_routine
MOV             R1, R3  ; attr
ADD             R0, SP, #0xC+newthread ; newthread
BL              pthread_create
CMP             R0, #0
BNE             loc_2C2A8
CMP             R4, #0
BNE             loc_2C2A0

loc_2C268
MOV             R4, #byte_686E8
LDR             R0, [R4,#(dword_68B0C - 0x686E8)] ; pid
CMP             R0, #0
BGT             loc_2C28C

loc_2C27C               ; th
LDR             R0, [SP,#0xC+newthread]
BL              pthread_cancel
MOV             R0, R5  ; status
BL              exit

loc_2C28C               ; sig
MOV             R1, #0xF
BL              kill
MOV             R3, #0
STR             R3, [R4,#(dword_68B0C - 0x686E8)]
B               loc_2C27C

loc_2C2A0
BL              sub_2F420
B               loc_2C268

loc_2C2A8               ; status
MOV             R0, #1
BL              exit
; End of function sub_2C230



; Attributes: noreturn

; void __noreturn sub_2C2B0()
sub_2C2B0

var_804= -0x804

PUSH            {LR}
MOVW            R0, #:lower16:sub_2FA50
SUB             SP, SP, #0x800
MOVW            R2, #0x1388
SUB             SP, SP, #4
MOV             R1, #0
MOVT            R0, #:upper16:sub_2FA50
BL              sub_23220
MOVW            LR, #:lower16:aShutdownSignal ; "Shutdown signal received."
MOV             R12, SP
MOVT            LR, #:upper16:aShutdownSignal ; "Shutdown signal received."
LDM             LR!, {R0-R3} ; "Shutdown signal received."
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "received."
STM             R12!, {R0,R1}
MOV             R1, SP
STRH            R2, [R12]
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, #0
BL              sub_2C230
; End of function sub_2C2B0



; Attributes: noreturn

; void __noreturn sub_2C30C()
sub_2C30C
MOVW            R1, #:lower16:stru_72DD0
PUSH            {R4,LR}
MOV             R2, #0  ; oact
MOVT            R1, #:upper16:stru_72DD0 ; act
MOV             R0, #0xF ; sig
BL              sigaction
MOVW            R1, #:lower16:stru_76084
MOV             R2, #0  ; oact
MOVT            R1, #:upper16:stru_76084 ; act
MOV             R0, #2  ; sig
BL              sigaction
MOVW            R1, #:lower16:stru_76238
MOV             R2, #0  ; oact
MOVT            R1, #:upper16:stru_76238 ; act
MOV             R0, #6  ; sig
BL              sigaction
BL              sub_2C2B0
; End of function sub_2C30C




; int __fastcall sub_2C350(char *, size_t, int)
sub_2C350

var_88C= -0x88C
var_888= -0x888
var_884= -0x884
var_87C= -0x87C
var_874= -0x874
var_86C= -0x86C
var_864= -0x864
var_854= -0x854
s= -0x844
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R4, R2
VPUSH           {D8-D10}
SUB             SP, SP, #0x880
SUB             SP, SP, #0xC
MOV             R5, R0
MOV             R0, R2
MOV             R6, R1
BL              sub_2A7A0
LDRD            R0, R1, [R4,#0xC0]
MOV             R7, #4
VMOV.F64        D10, D0
ADD             R11, SP, #0x88C+var_864
BLX             sub_4AB14
VMOV            D7, R0, R1
ADD             R10, SP, #0x88C+var_854
VLDR            D6, [R4,#0x30]
VDIV.F64        D8, D7, D10
VLDR            D9, =1000000.0
VLDR            D7, =60.0
VMUL.F64        D6, D6, D9
VMOV            R0, R1, D6
VMUL.F64        D8, D8, D7
BLX             sub_4ABD0
VLDR            D6, [R4,#0x50]
MOV             R8, R0
MOV             R9, R1
VDIV.F64        D7, D6, D10
VMUL.F64        D7, D7, D9
VMOV            R0, R1, D7
BLX             sub_4ABD0
MOV             R2, R11 ; s
STR             R7, [SP,#0x88C+var_88C] ; int
MOV             R3, #0x10 ; maxlen
BL              sub_287D8
MOV             R0, R8  ; int
MOV             R1, R9  ; int
STR             R7, [SP,#0x88C+var_88C] ; int
MOV             R2, R10 ; s
MOV             R3, #0x10 ; maxlen
BL              sub_287D8
LDR             R12, [R4,#8]
MOVW            R2, #:lower16:aSD ; "%s%d "
LDR             R3, [R4,#4]
MOV             R1, R6  ; maxlen
MOVT            R2, #:upper16:aSD ; "%s%d "
MOV             R0, R5  ; s
LDR             R3, [R3,#8]
STR             R12, [SP,#0x88C+var_88C]
BL              snprintf
LDR             R3, [R4,#4]
MOV             R2, R4
MOV             R1, R6
MOV             R0, R5
LDR             R3, [R3,#0x14]
BLX             R3
MOV             R0, R5  ; s
BL              strlen
MOVW            R3, #:lower16:off_67A68 ; "--version-file"
LDR             R1, [R4,#0x2C]
MOVT            R3, #:upper16:off_67A68 ; "--version-file"
VLDR            D7, [R4,#0xD0]
LDR             R3, [R3,#(dword_681D0 - 0x67A68)]
MOVW            R2, #:lower16:aDsSAvgShSA0fR0 ; "(%ds):%s (avg):%sh/s | A:%.0f R:%.0f HW"...
VSTR            D8, [SP,#0x88C+var_86C]
MOV             R7, R0
STRD            R10, R11, [SP,#0x88C+var_88C]
MOVT            R2, #:upper16:aDsSAvgShSA0fR0 ; "(%ds):%s (avg):%sh/s | A:%.0f R:%.0f HW"...
LDRD            R8, R9, [R4,#0xC8]
ADD             R0, SP, #0x88C+s ; s
STR             R1, [SP,#0x88C+var_874]
MOV             R1, #0x40 ; '@' ; maxlen
VSTR            D7, [SP,#0x88C+var_87C]
STRD            R8, R9, [SP,#0x88C+var_884]
BL              snprintf
ADD             R0, SP, #0x88C+s ; s
BL              strlen
ADD             R0, R7, R0
CMP             R0, R6
BCS             loc_2C4C4
ADD             R1, SP, #0x88C+s ; src
MOV             R0, R5  ; dest
BL              strcat
LDR             R3, [R4,#4]
MOV             R1, R6
MOV             R0, R5
MOV             R2, R4
LDR             R3, [R3,#0x18]
BLX             R3
ADD             SP, SP, #0x880
ADD             SP, SP, #0xC
VPOP            {D8-D10}
POP             {R4-R11,PC}

loc_2C4C4
LDR             R1, =aGetStatline ; "get_statline"
MOVW            R0, #0xC6E
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aTailsprintfBuf ; "tailsprintf buffer overflow in %s %s li"...
STR             R0, [SP,#0x88C+var_888]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0x88C+var_88C]
MOVT            R2, #:upper16:aTailsprintfBuf ; "tailsprintf buffer overflow in %s %s li"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x88C+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x88C+var_804
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2C350

ALIGN 0x10
dbl_2C510 DCFD 1000000.0
dbl_2C518 DCFD 60.0
off_2C520 DCD aGetStatline ; "get_statline"


; Attributes: noreturn

; void __noreturn sub_2C524()
sub_2C524

var_804= -0x804

MOVW            R12, #:lower16:aFailedToCreate ; "Failed to create restart thread"
PUSH            {LR}
MOVT            R12, #:upper16:aFailedToCreate ; "Failed to create restart thread"
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDM             R12!, {R0-R3} ; "Failed to create restart thread"
MOV             LR, SP
STM             LR!, {R0-R3}
LDM             R12, {R0-R3} ; " restart thread"
STM             LR, {R0-R3}
MOV             R1, SP
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2C524




; int sub_2C568()
sub_2C568

newthread= -8

PUSH            {LR}
SUB             SP, SP, #0xC
LDR             R0, =dword_68AEC
BL              sub_206A0
MOV             R3, #0  ; arg
MOVW            R2, #:lower16:sub_34994
MOV             R1, R3  ; attr
MOVT            R2, #:upper16:sub_34994 ; start_routine
ADD             R0, SP, #0xC+newthread ; newthread
BL              pthread_create
CMP             R0, #0
BNE             loc_2C5A0
ADD             SP, SP, #0xC
POP             {PC}

loc_2C5A0
BL              sub_2C524
; End of function sub_2C568

off_2C5A4 DCD dword_68AEC



; int __fastcall sub_2C5A8(_BYTE *)
sub_2C5A8

var_C34= -0xC34
var_C30= -0xC30
var_C2C= -0xC2C
var_C28= -0xC28
nptr= -0xC20
var_C18= -0xC18
var_C14= -0xC14
var_C10= -0xC10
src= -0xC0C
var_C08= -0xC08
s= -0xC04
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R8, #byte_686E8
SUB             SP, SP, #0xC30
SUB             SP, SP, #4
MOV             R7, R0
LDR             R4, [R8,#(dword_68B10 - 0x686E8)]
CMP             R4, #0
BEQ             loc_2C6A4
ADD             R6, SP, #0xC34+s
MOV             R2, R4  ; stream
MOV             R0, R6  ; s
MOV             R1, #0x400 ; n
BL              fgets
SUBS            R4, R0, #0
BEQ             loc_2C634

loc_2C5E8
LDRB            R2, [SP,#0xC34+s]
LDR             R5, [R8,#(dword_68B14 - 0x686E8)]
SUBS            R4, R2, #0x23 ; '#'
MOVNE           R4, #1
CMP             R2, #0
MOVEQ           R4, #0
ADD             R5, R5, #1
CMP             R2, #0x2F ; '/'
MOVEQ           R4, #0
ANDNE           R4, R4, #1
STR             R5, [R8,#(dword_68B14 - 0x686E8)]
CMP             R4, #0
BNE             loc_2C708
LDR             R2, [R8,#(dword_68B10 - 0x686E8)] ; stream
MOV             R1, #0x400 ; n
MOV             R0, R6  ; s
BL              fgets
CMP             R0, #0
BNE             loc_2C5E8

loc_2C634
LDR             R3, [R8,#(dword_68B18 - 0x686E8)]
CMP             R3, #0
BEQ             loc_2C668
LDR             R0, [R8,#(dword_68B10 - 0x686E8)] ; stream
BL              fclose
MOV             R0, R7
STR             R4, [R8,#(dword_68B10 - 0x686E8)]
BL              sub_2C5A8
MOV             R4, R0
MOV             R0, R4
ADD             SP, SP, #0xC30
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2C668
MOVW            R3, #:lower16:dword_72DB0
MOVW            R2, #:lower16:aBenchfileNoWor ; "BENCHFILE No work in benchfile '%s'"
MOVT            R3, #:upper16:dword_72DB0
ADD             R0, SP, #0xC34+var_804 ; s
LDR             R3, [R3]
MOVT            R2, #:upper16:aBenchfileNoWor ; "BENCHFILE No work in benchfile '%s'"

loc_2C680               ; maxlen
MOV             R1, #0x800
BL              snprintf

loc_2C688
ADD             R1, SP, #0xC34+var_804
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_2C6A4
MOV             R5, #dword_72DB0
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_2C924
MOV             R1, #(aMiner+4) ; "r"
BL              fopen64
CMP             R0, #0
MOV             R2, R0  ; stream
STR             R0, [R8,#(dword_68B10 - 0x686E8)]
BEQ             loc_2C9A0
ADD             R6, SP, #0xC34+s
MOV             R1, #0x400 ; n
MOV             R0, R6  ; s
STR             R4, [R8,#(dword_68B14 - 0x686E8)]
BL              fgets
CMP             R0, #0
STRNE           R4, [R8,#(dword_68B18 - 0x686E8)]
BNE             loc_2C5E8
MOVW            R2, #:lower16:aBenchfileFaile ; "BENCHFILE Failed to read benchfile '%s'"
LDR             R3, [R5]
ADD             R0, SP, #0xC34+var_804
MOVT            R2, #:upper16:aBenchfileFaile ; "BENCHFILE Failed to read benchfile '%s'"
B               loc_2C680

loc_2C708
MOVW            R3, #:lower16:aJsonEscape ; "json_escape"
MOV             R0, R6  ; s
MOVT            R3, #:upper16:aJsonEscape ; "json_escape"
ADD             R9, SP, #0xC34+var_C18
ADD             R10, R3, #0x9C
MOV             R11, #0
STR             R3, [SP,#0xC34+nptr]
STR             R6, [SP,#0xC34+var_C18]

loc_2C728               ; c
MOV             R1, #0x2C ; ','
BL              strchr
CMP             R0, #0
STR             R0, [R9,#4]
ADD             R1, R11, #1
BEQ             loc_2C8FC
LDR             R12, [R9]
ADD             R9, R9, #4
LDR             LR, [R10,R11,LSL#3]
MOV             R11, R11,LSL#3
SUB             R12, R0, R12
SUBS            R2, LR, R12
MOVNE           R2, #1
CMP             LR, #0
MOVEQ           R2, #0
CMP             R2, #0
BNE             loc_2C8C4
CMP             R1, #4
STRB            R2, [R0]
ADD             R0, R0, #1
MOV             R11, R1
STR             R0, [R9]
BNE             loc_2C728
LDR             R3, [SP,#0xC34+var_C08]
MOV             R0, R3  ; s
STR             R3, [SP,#0xC34+nptr]
BL              strlen
CMP             R0, #9
BLS             loc_2C964
LDR             R3, [SP,#0xC34+var_C18]
MOV             R1, #a0000000C ; "0000000%c"
ADD             R0, SP, #0xC34+var_804 ; s
MOVW            R11, #:lower16:a8s ; "%.8s"
LDRB            R2, [R3]
MOVT            R11, #:upper16:a8s ; "%.8s"
BL              sprintf
ADD             R0, SP, #0xC34+var_804 ; s
BL              strlen
LDR             R6, [SP,#0xC34+var_C10]
ADD             R3, SP, #0xC34+var_804
MOV             R10, R0
ADD             R9, R3, R0
ADD             R5, R6, #0x38 ; '8'
SUB             R6, R6, #8

loc_2C7DC
MOV             R2, R5
MOV             R0, R9  ; s
MOV             R1, R11 ; format
SUB             R5, R5, #8
BL              sprintf
CMP             R6, R5
ADD             R9, R9, #8
BNE             loc_2C7DC
LDR             R6, [SP,#0xC34+var_C14]
ADD             R3, R10, #0x40 ; '@'
MOVW            R11, #:lower16:a8s ; "%.8s"
ADD             R2, SP, #0xC34+var_804
ADD             R9, R2, R3
MOVT            R11, #:upper16:a8s ; "%.8s"
ADD             R5, R6, #0x38 ; '8'
SUB             R6, R6, #8

loc_2C81C
MOV             R2, R5
MOV             R0, R9  ; s
MOV             R1, R11 ; format
SUB             R5, R5, #8
BL              sprintf
CMP             R6, R5
ADD             R9, R9, #8
BNE             loc_2C81C
LDR             R0, [SP,#0xC34+nptr] ; nptr
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
BL              strtol
ADD             R3, R10, #0x80
MOV             R2, R0
MOVW            R1, #:lower16:a08lx ; "%08lx"
ADD             R0, SP, #0xC34+var_804
MOVT            R1, #:upper16:a08lx ; "%08lx"
ADD             R0, R0, R3 ; s
BL              sprintf
ADD             R3, SP, #0xC34+var_804
ADD             R0, R10, #0x88
ADD             R0, R3, R0 ; dest
LDR             R1, [SP,#0xC34+src] ; src
BL              strcpy
MOV             R2, #0x1C0 ; n
MOV             R1, #0  ; c
MOV             R0, R7  ; s
BL              memset
ADD             R2, R10, #0x90
ADD             R1, SP, #0xC34+var_804
MOV             R2, R2,ASR#1
MOV             R0, R7
BL              sub_1FB44
MOV             R0, R7
BL              sub_28C84
LDR             R3, [R8,#(dword_68B18 - 0x686E8)]
MOV             R0, R4
ADD             R3, R3, #1
STR             R3, [R8,#(dword_68B18 - 0x686E8)]
ADD             SP, SP, #0xC30
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2C8C4
LDR             R3, [SP,#0xC34+nptr]
MOVW            R2, #:lower16:aBenchfileInval_0 ; "BENCHFILE Invalid input file line %d fi"...
STR             R1, [SP,#0xC34+var_C34]
ADD             R0, SP, #0xC34+var_804 ; s
STR             LR, [SP,#0xC34+var_C28]
MOVT            R2, #:upper16:aBenchfileInval_0 ; "BENCHFILE Invalid input file line %d fi"...
ADD             R11, R3, R11
STR             R12, [SP,#0xC34+var_C2C]
LDR             R4, [R11,#0xA0]
MOV             R3, R5
MOV             R1, #0x800 ; maxlen
STR             R4, [SP,#0xC34+var_C30]
BL              snprintf
B               loc_2C688

loc_2C8FC
MOV             R12, #5
MOVW            R2, #:lower16:aBenchfileInval_1 ; "BENCHFILE Invalid input file line %d - "...
STR             R1, [SP,#0xC34+var_C34]
MOV             R3, R5
ADD             R0, SP, #0xC34+var_804 ; s
STR             R12, [SP,#0xC34+var_C30]
MOVT            R2, #:upper16:aBenchfileInval_1 ; "BENCHFILE Invalid input file line %d - "...
MOV             R1, #0x800 ; maxlen
BL              snprintf
B               loc_2C688

loc_2C924
MOVW            R12, #:lower16:aBenchfileInval ; "BENCHFILE Invalid benchfile NULL"
ADD             LR, SP, #0xC34+var_804
MOVT            R12, #:upper16:aBenchfileInval ; "BENCHFILE Invalid benchfile NULL"
LDM             R12!, {R0-R3} ; "BENCHFILE Invalid benchfile NULL"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "d benchfile NULL"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0xC34+var_804
MOV             R0, #3
MOV             R2, #1
STRB            R12, [LR]
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_2C964
MOVW            R1, #:lower16:aNoncetime ; "NonceTime"
MOV             LR, #0xA
MOVT            R1, #:upper16:aNoncetime ; "NonceTime"
MOV             R12, #5
MOVW            R2, #:lower16:aBenchfileInval_2 ; "BENCHFILE Invalid input file line %d fi"...
STR             R0, [SP,#0xC34+var_C2C]
STR             R1, [SP,#0xC34+var_C30]
MOV             R3, R5
ADD             R0, SP, #0xC34+var_804 ; s
STR             LR, [SP,#0xC34+var_C28]
MOVT            R2, #:upper16:aBenchfileInval_2 ; "BENCHFILE Invalid input file line %d fi"...
STR             R12, [SP,#0xC34+var_C34]
MOV             R1, #0x800 ; maxlen
BL              snprintf
B               loc_2C688

loc_2C9A0
MOVW            R2, #:lower16:aBenchfileFaile_0 ; "BENCHFILE Failed to open benchfile '%s'"
LDR             R3, [R5]
ADD             R0, SP, #0xC34+var_804
MOVT            R2, #:upper16:aBenchfileFaile_0 ; "BENCHFILE Failed to open benchfile '%s'"
B               loc_2C680
; End of function sub_2C5A8



; Attributes: noreturn

; void __fastcall __noreturn sub_2C9B4(const char *, int)
sub_2C9B4

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2C9B4




; int __fastcall sub_2CA10(pthread_mutex_t *, const char *, int)
sub_2CA10
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R1, #0  ; mutexattr
MOV             R5, R2
BL              pthread_mutex_init
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R1, R5
MOV             R0, R4
BL              sub_2C9B4
; End of function sub_2CA10



; Attributes: noreturn

; void __fastcall __noreturn sub_2CA38(const char *, int)
sub_2CA38

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2CA38




; int __fastcall sub_2CA94(pthread_rwlock_t *, const char *, int)
sub_2CA94
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R1, #0  ; attr
MOV             R5, R2
BL              pthread_rwlock_init
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R1, R5
MOV             R0, R4
BL              sub_2CA38
; End of function sub_2CA94




; int __fastcall sub_2CABC(int, const char *, int)
sub_2CABC
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R1, #0  ; mutexattr
MOV             R6, R2
MOV             R4, R0
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; attr
BNE             loc_2CAF8
ADD             R0, R4, #0x18 ; rwlock
BL              pthread_rwlock_init
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R1, R6
MOV             R0, R5
BL              sub_2CA38

loc_2CAF8
MOV             R1, R6
MOV             R0, R5
BL              sub_2C9B4
; End of function sub_2CABC



; Attributes: noreturn

; void __fastcall __noreturn sub_2CB04(const char *, int)
sub_2CB04

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2CB04



; Attributes: noreturn

; void __fastcall __noreturn sub_2CB60(const char *, int)
sub_2CB60

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2CB60



; Attributes: noreturn

; void __fastcall __noreturn sub_2CBBC(const char *, int)
sub_2CBBC

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2CBBC




; int __fastcall sub_2CC18(int, _BYTE *)
sub_2CC18
PUSH            {R4-R6,LR}
ADD             R4, R0, #0xBC
MOV             R0, R4  ; mutex
MOV             R5, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2CC68
MOV             R3, #1
MOV             R0, R4  ; mutex
LDRB            R4, [R5]
STRB            R3, [R5]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2CC74
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4-R6,PC}

loc_2CC68
MOVW            R1, #0x32F
LDR             R0, =aPoolTset ; "pool_tset"
BL              sub_2CB60

loc_2CC74
MOV             R1, #0x334
LDR             R0, =aPoolTset ; "pool_tset"
BL              sub_2CBBC
; End of function sub_2CC18

off_2CC80 DCD aPoolTset ; "pool_tset"



; int __fastcall sub_2CC84(int, _BYTE *)
sub_2CC84
PUSH            {R4-R6,LR}
ADD             R4, R0, #0xBC
MOV             R0, R4  ; mutex
MOV             R5, R1
BL              pthread_mutex_lock
SUBS            R3, R0, #0
BNE             loc_2CCD0
MOV             R0, R4  ; mutex
LDRB            R4, [R5]
STRB            R3, [R5]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2CCDC
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4-R6,PC}

loc_2CCD0
MOVW            R1, #0x33E
LDR             R0, =aPoolTclear ; "pool_tclear"
BL              sub_2CB60

loc_2CCDC
MOVW            R1, #0x343
LDR             R0, =aPoolTclear ; "pool_tclear"
BL              sub_2CBBC
; End of function sub_2CC84

off_2CCE8 DCD aPoolTclear ; "pool_tclear"



; int __fastcall sub_2CCEC(_DWORD *, int)
sub_2CCEC

var_840= -0x840
var_83C= -0x83C
var_834= -0x834
var_82C= -0x82C
attr= -0x824
s= -0x800

PUSH            {R4-R8,LR}
MOV             R4, R0
LDRB            R3, [R0,#0x2F0]
SUB             SP, SP, #0x840
MOV             R7, R1
CMP             R3, #0
BEQ             loc_2D140
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D27C

loc_2CD1C
LDRB            R6, [R4,#0x290]
CMP             R6, #0
BNE             loc_2D01C
MOV             R3, #off_67A68 ; "--version-file"
LDR             R3, [R3,#(off_681D4 - 0x67A68)] ; ":D"
CMP             R3, #0
BEQ             loc_2D3D0
LDRB            R3, [R4,#0x63]
CMP             R3, #0
BNE             loc_2CE3C
MOV             R8, #byte_686E1
LDRB            R3, [R8]
CMP             R3, #0
STRBEQ          R6, [R4,#0x63]
BEQ             loc_2CE3C
MOV             R5, #byte_72D90
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2CD88
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2D204

loc_2CD88
MOVW            R12, #:lower16:aProbingForGbtS ; "Probing for GBT support"
ADD             LR, SP, #0x840+s
MOVT            R12, #:upper16:aProbingForGbtS ; "Probing for GBT support"
LDM             R12!, {R0-R3} ; "Probing for GBT support"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "support"
STM             LR, {R0,R1}
ADD             R1, SP, #0x840+s
MOV             R0, #7
BL              sub_1DD60
LDRB            R2, [R4,#0x2F0]
MOV             R1, #0
LDRB            R3, [R8]
STRB            R1, [R4,#0x63]
CMP             R2, R1
BEQ             loc_2D194
CMP             R3, R1
BEQ             loc_2CE3C

loc_2CDD4
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2CDF4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2D468

loc_2CDF4
MOVW            LR, #:lower16:aGbtCoinbaseApp ; "GBT coinbase + append support found, sw"...
ADD             R12, SP, #0x840+s
MOVT            LR, #:upper16:aGbtCoinbaseApp ; "GBT coinbase + append support found, sw"...
LDM             LR!, {R0-R3} ; "GBT coinbase + append support found, sw"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "ppend support found, switching to GBT p"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "und, switching to GBT protocol"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "o GBT protocol"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x840+s
MOV             LR, R3,LSR#16
MOV             R2, #0
MOV             R0, #7
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_1DD60

loc_2CE3C
ADD             R0, SP, #0x840+var_834
BL              sub_206A0
ADD             R0, SP, #0x840+var_82C
BL              sub_206A0
LDR             R0, [R4,#0x240]
CMP             R0, #0
BEQ             loc_2CEEC
MOV             R3, #byte_686E8
LDRB            R3, [R3,#(byte_68B1C - 0x686E8)]
CMP             R3, #0
BNE             loc_2CEEC
MOV             R5, #byte_72D90
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2CEA8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2CEA8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2CED8

loc_2CEA8
MOVW            R2, #:lower16:aTestingPoolDSt ; "Testing pool %d stratum %s"
LDR             R3, [R4]
MOVT            R2, #:upper16:aTestingPoolDSt ; "Testing pool %d stratum %s"
STR             R0, [SP,#0x840+var_840]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x840+s ; s
BL              snprintf
MOV             R0, #6
ADD             R1, SP, #0x840+s
MOV             R2, #0
BL              sub_1DD60
LDR             R0, [R4,#0x240]

loc_2CED8
ADD             R2, R4, #0x248
ADD             R1, R4, #0x268
BL              sub_20A10
CMP             R0, #0
BNE             loc_2CF8C

loc_2CEEC
LDRB            R3, [R4,#0x290]
CMP             R3, #0
BNE             loc_2D2E4
LDRB            R3, [R4,#0x394]
CMP             R3, #0
BNE             loc_2D2E4
LDRB            R3, [R4,#0x2F0]
CMP             R3, #0
BNE             loc_2D2E4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2CF4C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2CF4C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_2CF80

loc_2CF4C
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aNoStratumGbtOr ; "No Stratum, GBT or Solo support in pool"...
LDR             R3, [R4]
MOVT            R2, #:upper16:aNoStratumGbtOr ; "No Stratum, GBT or Solo support in pool"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x840+s ; s
STR             R12, [SP,#0x840+var_840]
MOV             R6, #0
BL              snprintf
ADD             R1, SP, #0x840+s
MOV             R2, R6
MOV             R0, #4
BL              sub_1DD60

loc_2CF80
MOV             R0, R6
ADD             SP, SP, #0x840
POP             {R4-R8,PC}

loc_2CF8C
MOV             R0, R4
BL              sub_21DDC
CMP             R0, #0
BEQ             loc_2CEEC
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2CFD0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2CFD0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_2D008

loc_2CFD0
LDR             R1, [R4,#0x240]
MOVW            R2, #:lower16:aSwitchingPoolD ; "Switching pool %d %s to %s"
LDR             R12, [R4,#0xA4]
MOVT            R2, #:upper16:aSwitchingPoolD ; "Switching pool %d %s to %s"
LDR             R3, [R4]
ADD             R0, SP, #0x840+s ; s
STR             R1, [SP,#0x840+var_83C]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x840+var_840]
BL              snprintf
ADD             R1, SP, #0x840+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_2D008
LDR             R3, [R4,#0xA4]
CMP             R3, #0
BEQ             loc_2D130

loc_2D014
MOV             R3, #1
STRB            R3, [R4,#0x290]

loc_2D01C
ADD             R5, R4, #0x290
MOV             R0, R4
ADD             R5, R5, #2
MOV             R1, R5
BL              sub_2CC18
SUBS            R6, R0, #0
LDRBNE          R6, [R4,#0x291]
BNE             loc_2CF80
MOV             R0, R4
BL              sub_24A54
CMP             R0, #0
BEQ             loc_2D498
LDRB            R3, [R4,#0x244]
CMP             R3, #0
BEQ             loc_2D068
MOV             R0, R4
BL              sub_27070
CMP             R0, #0
BEQ             loc_2D498

loc_2D068
MOV             R0, R4
BL              sub_21DDC
CMP             R0, #0
BEQ             loc_2D498
MOV             R0, R4
BL              sub_27468
SUBS            R7, R0, #0
BEQ             loc_2D498
MOVW            R3, #:lower16:byte_762C4
MOV             R5, #1
MOVT            R3, #:upper16:byte_762C4
ADD             R0, SP, #0x840+attr ; attr
STRB            R5, [R3]
BL              pthread_attr_init
MOV             R1, #0x100000 ; stacksize
ADD             R0, SP, #0x840+attr ; attr
BL              pthread_attr_setstacksize
MOVW            R2, #:lower16:sub_36B90
MOV             R3, R4  ; arg
ADD             R1, SP, #0x840+attr ; attr
MOVT            R2, #:upper16:sub_36B90 ; start_routine
ADD             R0, R4, #0x2C8 ; newthread
BL              pthread_create
CMP             R0, #0
BNE             loc_2D4C0
MOVW            R2, #:lower16:sub_395C4
ADD             R1, SP, #0x840+attr ; attr
MOVT            R2, #:upper16:sub_395C4 ; start_routine
MOV             R3, R4  ; arg
ADD             R0, R4, #0x2CC ; newthread
BL              pthread_create
CMP             R0, #0
MOVEQ           R6, R7
BEQ             loc_2CF80
MOV             R12, #unk_52140

loc_2D0F8
LDM             R12!, {R0-R3}
ADD             LR, SP, #0x840+s
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3}
LDR             R12, [R12]
STM             LR!, {R0-R3}
ADD             R1, SP, #0x840+s
MOV             R0, #3
MOV             R2, R5
STRB            R12, [LR]
BL              sub_1DD60
MOV             R1, R5
MOV             R0, R5
BL              sub_2C230

loc_2D130               ; s
LDR             R0, [R4,#0x240]
BL              __strdup
STR             R0, [R4,#0xA4]
B               loc_2D014

loc_2D140
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D168
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2D480

loc_2D168
MOVW            R2, #:lower16:aTestingPoolS ; "Testing pool %s"
ADD             R0, SP, #0x840+s ; s
MOVT            R2, #:upper16:aTestingPoolS ; "Testing pool %s"
LDR             R3, [R4,#0xA4]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x840+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_2CD1C

loc_2D194
LDRB            R2, [R4,#0x394]
CMP             R2, #0
BEQ             loc_2D450
CMP             R3, #0
BEQ             loc_2CE3C

loc_2D1A8
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2D1DC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D1DC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2CE3C

loc_2D1DC
MOVW            R1, #:lower16:aGbtCoinbaseWit ; "GBT coinbase without append found, swit"...
ADD             R0, SP, #0x840+s ; dest
MOVT            R1, #:upper16:aGbtCoinbaseWit ; "GBT coinbase without append found, swit"...
MOV             R2, #0x42 ; 'B' ; n

loc_2D1EC
BL              memcpy
ADD             R1, SP, #0x840+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_2CE3C

loc_2D204
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_2CD88
LDRB            R3, [R4,#0x2F0]
STRB            R6, [R4,#0x63]
CMP             R3, #0
BNE             loc_2CDD4
LDRB            R3, [R4,#0x394]
CMP             R3, #0
BNE             loc_2D1A8
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2D268

loc_2D240
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D268
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2CE3C

loc_2D268
MOVW            R1, #:lower16:aNoGbtCoinbaseA ; "No GBT coinbase + append support found,"...
ADD             R0, SP, #0x840+s
MOVT            R1, #:upper16:aNoGbtCoinbaseA ; "No GBT coinbase + append support found,"...
MOV             R2, #0x4B ; 'K'
B               loc_2D1EC

loc_2D27C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D2B8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D2B8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2CD1C

loc_2D2B8
MOVW            R2, #:lower16:aRetrievingBloc ; "Retrieving block template from pool %s"
ADD             R0, SP, #0x840+s ; s
MOVT            R2, #:upper16:aRetrievingBloc ; "Retrieving block template from pool %s"
LDR             R3, [R4,#0xA4]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x840+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_2CD1C

loc_2D2E4
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2D364
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D334
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D334
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2D364

loc_2D334
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aFailedToRetrie ; "FAILED to retrieve work from pool %u %s"
LDR             R3, [R4]
MOVT            R2, #:upper16:aFailedToRetrie ; "FAILED to retrieve work from pool %u %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x840+s ; s
STR             R12, [SP,#0x840+var_840]
BL              snprintf
ADD             R1, SP, #0x840+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_2D364
CMP             R7, #0
BNE             loc_2CF80
LDRB            R3, [R4,#0x61]
CMP             R3, #0
BNE             loc_2CF80
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D3A0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2D4A8

loc_2D3A0
MOVW            R2, #:lower16:aPoolUSlowDownO ; "Pool %u slow/down or URL or credentials"...
LDR             R3, [R4]
ADD             R0, SP, #0x840+s ; s
MOVT            R2, #:upper16:aPoolUSlowDownO ; "Pool %u slow/down or URL or credentials"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x840+s
MOV             R0, #4
MOV             R6, R2
BL              sub_1DD60
B               loc_2CF80

loc_2D3D0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D40C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D40C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2CF80

loc_2D40C
MOVW            LR, #:lower16:aCurlInitialisa ; "CURL initialisation failed"
ADD             R12, SP, #0x840+s
MOVT            LR, #:upper16:aCurlInitialisa ; "CURL initialisation failed"
LDM             LR!, {R0-R3} ; "CURL initialisation failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "ion failed"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x840+s
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #3
MOV             R2, #0
STRB            R3, [R12]
BL              sub_1DD60
MOV             R0, R6
ADD             SP, SP, #0x840
POP             {R4-R8,PC}

loc_2D450
CMP             R3, #0
BEQ             loc_2CE3C
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_2D240
B               loc_2D268

loc_2D468
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2CE3C
B               loc_2CDF4

loc_2D480
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2CD1C
B               loc_2D168

loc_2D498
MOV             R1, R5
MOV             R0, R4
BL              sub_2CC84
B               loc_2CF80

loc_2D4A8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_2D3A0
B               loc_2CF80

loc_2D4C0
MOV             R12, #unk_5211C
B               loc_2D0F8
; End of function sub_2CCEC




; int __fastcall sub_2D4CC(int, int)
sub_2D4CC
PUSH            {R4-R6,LR}
MOV             R5, R0
MOVW            R0, #:lower16:stru_72D94
MOV             R4, R1
MOVT            R0, #:upper16:stru_72D94 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2D52C
MOVW            R2, #:lower16:dword_76064
MOVW            R3, #:lower16:dword_761DC
MOVW            R0, #:lower16:stru_72D94
MOVT            R2, #:upper16:dword_76064
MOVT            R3, #:upper16:dword_761DC
MOVT            R0, #:upper16:stru_72D94 ; mutex
STR             R5, [R2]
STR             R4, [R3]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2D538
MOVW            R3, #:lower16:off_67964
POP             {R4-R6,LR}
MOVT            R3, #:upper16:off_67964
LDR             R3, [R3] ; sub_1EAA0
BX              R3      ; sub_1EAA0

loc_2D52C
MOVW            R1, #0x229F
LDR             R0, =aIncDevStatus ; "inc_dev_status"
BL              sub_2CB60

loc_2D538
MOVW            R1, #0x22A2
LDR             R0, =aIncDevStatus ; "inc_dev_status"
BL              sub_2CBBC
; End of function sub_2D4CC

off_2D544 DCD aIncDevStatus ; "inc_dev_status"



; int sub_2D548()
sub_2D548
PUSH            {R4,LR}
MOV             R4, #byte_686E8
LDR             R0, [R4,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2D594
MOV             R0, #stru_72E68 ; cond
BL              pthread_cond_signal
LDR             R0, [R4,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2D5A0
MOVW            R3, #:lower16:off_67964
POP             {R4,LR}
MOVT            R3, #:upper16:off_67964
LDR             R3, [R3] ; sub_1EAA0
BX              R3      ; sub_1EAA0

loc_2D594
MOVW            R1, #0x1538
LDR             R0, =aWakeGws ; "wake_gws"
BL              sub_2CB60

loc_2D5A0
MOVW            R1, #0x153A
LDR             R0, =aWakeGws ; "wake_gws"
BL              sub_2CBBC
; End of function sub_2D548

off_2D5AC DCD aWakeGws  ; "wake_gws"



; int __fastcall sub_2D5B0(int, unsigned int)
sub_2D5B0

var_10= -0x10
var_C= -0xC
abstime= -8

MOVW            R2, #0x4DD3
PUSH            {R4-R6,LR}
MOVT            R2, #0x1062
SUB             SP, SP, #0x10
UMULL           R2, R3, R1, R2
MOV             R5, R0
MOV             R0, SP
MOV             R6, R1
MOV             R4, R3,LSR#6
BL              sub_206A0
MOV             R2, #0x3E8
MOVW            R3, #0x4240
MUL             R1, R2, R6
MOVT            R3, #0xF
LDR             R0, [SP,#0x10+var_C]
MOV             R2, #0xF423F
LDR             R12, [SP,#0x10+var_10]
MLS             R1, R3, R4, R1
MOV             R3, #0x3E8
ADD             R4, R4, R12
ADD             R1, R1, R0
MOVW            R0, #:lower16:stru_74F6C
CMP             R1, R2
MOVT            R0, #:upper16:stru_74F6C ; mutex
SUBGT           R1, R1, #0xF4000
ADDGT           R4, R4, #1
SUBGT           R1, R1, #0x240
STR             R4, [SP,#0x10+abstime]
MUL             R1, R3, R1
STR             R1, [SP,#0x10+abstime.tv_nsec]
BL              pthread_mutex_lock
SUBS            R4, R0, #0
BNE             loc_2D690
LDRB            R3, [R5,#0x3E]
CMP             R3, #0
BNE             loc_2D660
MOVW            R1, #:lower16:stru_74F6C
MOVW            R0, #:lower16:stru_76198
MOVT            R1, #:upper16:stru_74F6C ; mutex
MOVT            R0, #:upper16:stru_76198 ; cond
ADD             R2, SP, #0x10+abstime ; abstime
BL              pthread_cond_timedwait
MOV             R4, R0

loc_2D660               ; mutex
MOV             R0, #stru_74F6C
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2D69C
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_2D690
MOVW            R1, #0x156D
LDR             R0, =aRestartWait ; "restart_wait"
BL              sub_2CB60

loc_2D69C
MOVW            R1, #0x1577
LDR             R0, =aRestartWait ; "restart_wait"
BL              sub_2CBBC
; End of function sub_2D5B0

off_2D6A8 DCD aRestartWait ; "restart_wait"


; Attributes: noreturn

; void __fastcall __noreturn sub_2D6AC(const char *, int)
sub_2D6AC

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2D6AC




; int __fastcall sub_2D708(pthread_rwlock_t *, const char *, int)
sub_2D708
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R5, R2
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2D734
MOVW            R3, #:lower16:off_67964
POP             {R4-R6,LR}
MOVT            R3, #:upper16:off_67964
LDR             R3, [R3] ; sub_1EAA0
BX              R3      ; sub_1EAA0

loc_2D734
MOV             R1, R5
MOV             R0, R4
BL              sub_2D6AC
; End of function sub_2D708




; int sub_2D740()
sub_2D740
MOVW            R0, #:lower16:stru_76148
PUSH            {R4,LR}
MOVT            R0, #:upper16:stru_76148 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2D7B8
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2D7C4
MOVW            R3, #:lower16:byte_686E8
LDR             R0, =rwlock ; rwlock
MOVT            R3, #:upper16:byte_686E8
LDR             R4, [R3,#(dword_68B24 - 0x686E8)]
ADD             R2, R4, #1
STR             R2, [R3,#(dword_68B24 - 0x686E8)]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2D7D0
MOV             R0, #stru_76148 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2D7DC
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4,PC}

loc_2D7B8
MOVW            R1, #0x919
LDR             R0, =aTotalWorkInc ; "total_work_inc"
BL              sub_2CB60

loc_2D7C4
MOVW            R1, #0x919
LDR             R0, =aTotalWorkInc ; "total_work_inc"
BL              sub_2CB04

loc_2D7D0
MOVW            R1, #0x91B
LDR             R0, =aTotalWorkInc ; "total_work_inc"
BL              sub_2D6AC

loc_2D7DC
MOVW            R1, #0x91B
LDR             R0, =aTotalWorkInc ; "total_work_inc"
BL              sub_2CBBC
; End of function sub_2D740

off_2D7E8 DCD rwlock
off_2D7EC DCD aTotalWorkInc ; "total_work_inc"



; int __fastcall sub_2D7F0(int)
sub_2D7F0

var_804= -0x804

PUSH            {R4,R5,LR}
MOVW            R1, #:lower16:byte_686E1
LDR             R3, [R0,#0x44]
MOVT            R1, #:upper16:byte_686E1
MOVW            R2, #:lower16:dword_72F14
MOV             R4, R0
MOVT            R2, #:upper16:dword_72F14
LDRB            LR, [R1]
LDR             R0, [R0,#0xF0]
REV             R3, R3
LDR             R1, [R2]
MOV             R12, #0
ADD             R3, R3, #1
CMP             LR, R12
REV             R3, R3
SUB             SP, SP, #0x800
ADD             R0, R0, #1
STR             R3, [R4,#0x44]
ADD             R3, R1, #1
SUB             SP, SP, #4
STR             R0, [R4,#0xF0]
STR             R12, [R4,#0xF8]
STR             R3, [R2]
BEQ             loc_2D8A8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, R12
BNE             loc_2D878
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R12
BEQ             loc_2D8FC

loc_2D878
MOVW            LR, #:lower16:aSuccessfullyRo ; "Successfully rolled work"
MOV             R12, SP
MOVT            LR, #:upper16:aSuccessfullyRo ; "Successfully rolled work"
LDM             LR!, {R0-R3} ; "Successfully rolled work"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "led work"
STM             R12!, {R0,R1}
MOV             R1, SP
STRB            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_1DD60

loc_2D8A8
LDR             R5, [R4,#0x134]
CMP             R5, #0
BEQ             loc_2D8E8
MOV             R2, #4
MOV             R1, R5
MOV             R0, SP
BL              sub_1FB44
LDR             R3, [SP,#0x804+var_804]
MOV             R1, SP
MOV             R0, R5
MOV             R2, #4
REV             R3, R3
ADD             R3, R3, #1
REV             R3, R3
STR             R3, [SP,#0x804+var_804]
BL              sub_1FA20

loc_2D8E8
BL              sub_2D740
STR             R0, [R4,#0x154]
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_2D8FC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2D8A8
B               loc_2D878
; End of function sub_2D7F0




; _DWORD *sub_2D914()
sub_2D914

var_808= -0x808
var_800= -0x800

PUSH            {R4,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #8
MOVW            R3, #0x922
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
MOV             R1, #0x1C0
STR             R3, [SP,#0x808+var_808]
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, =aMakeWork ; "make_work"
MOV             R0, #1
BL              sub_1F8B0
SUBS            R4, R0, #0
BEQ             loc_2D960
BL              sub_2D740
STR             R0, [R4,#0x154]
MOV             R0, R4
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4,PC}

loc_2D960
MOVW            LR, #:lower16:aFailedToCalloc ; "Failed to calloc work in make_work"
ADD             R12, SP, #0x808+var_800
MOVT            LR, #:upper16:aFailedToCalloc ; "Failed to calloc work in make_work"
LDM             LR!, {R0-R3} ; "Failed to calloc work in make_work"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " work in make_work"
LDR             LR, [LR] ; "rk"
STM             R12!, {R0-R3}
ADD             R1, SP, #0x808+var_800
MOV             R0, #3
MOV             R2, #1
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2D914

off_2D9A8 DCD aMakeWork ; "make_work"



; _DWORD *__fastcall sub_2D9AC(int, int)
sub_2D9AC
PUSH            {R4-R6,LR}
MOV             R6, R1
MOV             R5, R0
BL              sub_2D914
MOV             R2, R6
MOV             R4, R0
MOV             R1, R5
BL              sub_2A5F4
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_2D9AC




; _DWORD *__fastcall sub_2D9D4(int)
sub_2D9D4
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_2D914
MOV             R1, R5
MOV             R2, #0
MOV             R4, R0
BL              sub_2A5F4
MOV             R3, #1
ADD             R0, R4, #0x1A0
STRB            R3, [R4,#0x111]
BL              sub_206A0
LDR             R3, [R4,#0x108]
MOV             R2, #0
STRB            R2, [R4,#0x118]
MOV             R0, R4
STRB            R2, [R4,#0x11A]
SUB             R3, R3, #1
STR             R3, [R4,#0x108]
POP             {R4-R6,PC}
; End of function sub_2D9D4




; int __fastcall sub_2DA20(pthread_rwlock_t *, int)
sub_2DA20
PUSH            {R4-R6,LR}
ADD             R4, R0, #0x140
MOV             R5, R0
MOV             R0, R4  ; rwlock
MOV             R6, R1
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2DA70
MOV             R1, R6
MOV             R0, R5
BL              sub_2BBB4
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2DA7C
MOVW            R3, #:lower16:off_67964
POP             {R4-R6,LR}
MOVT            R3, #:upper16:off_67964
LDR             R3, [R3] ; sub_1EAA0
BX              R3      ; sub_1EAA0

loc_2DA70
MOVW            R1, #0x2536
LDR             R0, =aAddQueued ; "add_queued"
BL              sub_2CB04

loc_2DA7C
MOVW            R1, #0x2538
LDR             R0, =aAddQueued ; "add_queued"
BL              sub_2D6AC
; End of function sub_2DA20

off_2DA88 DCD aAddQueued ; "add_queued"



; void __fastcall sub_2DA8C(pthread_rwlock_t *, void **)
sub_2DA8C

var_8= -8

PUSH            {R4,R5,LR}
ADD             R4, R0, #0x140
SUB             SP, SP, #0xC
MOV             R5, R0
MOV             R0, R4  ; rwlock
STR             R1, [SP,#0xC+var_8]
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2DAFC
MOV             R0, R5
LDR             R1, [SP,#0xC+var_8]
BL              sub_2C0A8
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2DB08
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x25D2
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aWorkCompleted ; "work_completed"
ADD             R0, SP, #0xC+var_8
BL              sub_2A70C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_2DAFC
MOVW            R1, #0x25CE
LDR             R0, =aWorkCompleted ; "work_completed"
BL              sub_2CB04

loc_2DB08
MOVW            R1, #0x25D0
LDR             R0, =aWorkCompleted ; "work_completed"
BL              sub_2D6AC
; End of function sub_2DA8C

off_2DB14 DCD aWorkCompleted ; "work_completed"



; _DWORD *__fastcall sub_2DB18(pthread_rwlock_t *, void *, size_t, const void *, int, size_t)
sub_2DB18

var_8= -8
var_4= -4
arg_0=  0x18
arg_4=  0x1C

PUSH            {R4-R8,LR}
ADD             R5, R0, #0x140
SUB             SP, SP, #8
MOV             R4, R0
MOV             R0, R5  ; rwlock
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2DBA8
LDR             R2, [SP,#8+arg_4]
MOV             R3, R8  ; int
LDR             R1, [SP,#8+arg_0]
LDR             R0, [R4,#0x160] ; int
STR             R2, [SP,#8+var_4] ; size_t
MOV             R2, R7  ; n
STR             R1, [SP,#8+var_8] ; int
MOV             R1, R6  ; s2
BL              sub_2BFEC
SUBS            R6, R0, #0
BEQ             loc_2DB7C
MOV             R0, R4
MOV             R1, R6
BL              sub_2C0A8

loc_2DB7C               ; rwlock
MOV             R0, R5
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2DBB4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R6
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_2DBA8
MOVW            R1, #0x25DB
LDR             R0, =aTakeQueuedWork ; "take_queued_work_bymidstate"
BL              sub_2CB04

loc_2DBB4
MOVW            R1, #0x25DF
LDR             R0, =aTakeQueuedWork ; "take_queued_work_bymidstate"
BL              sub_2D6AC
; End of function sub_2DB18

off_2DBC0 DCD aTakeQueuedWork ; "take_queued_work_bymidstate"



; int __fastcall sub_2DBC4(pthread_rwlock_t *)
sub_2DBC4

var_10= -0x10
var_C= -0xC

PUSH            {R4-R9,LR}
MOV             R6, R0
VPUSH           {D8}
SUB             SP, SP, #0x14
ADD             R0, SP, #0x14+var_C
ADD             R8, R6, #0x140
VMOV.F64        D8, D0
BL              sub_206A0
MOV             R0, R8  ; rwlock
BL              pthread_rwlock_wrlock
SUBS            R5, R0, #0
BNE             loc_2DCA4
LDR             R1, [R6,#0x160]
CMP             R1, #0
STR             R1, [SP,#0x14+var_10]
BEQ             loc_2DC74
LDR             R4, [R1,#0x160]
MOVW            R7, #:lower16:aCgminerC ; "cgminer.c"
LDR             R9, =aAgeQueuedWork ; "age_queued_work"
MOVT            R7, #:upper16:aCgminerC ; "cgminer.c"

loc_2DC14
ADD             R1, R1, #0x1A8
ADD             R0, SP, #0x14+var_C
BL              sub_209CC
VCMPE.F64       D0, D8
VMRS            APSR_nzcv, FPSCR
BGT             loc_2DC44
CMP             R4, #0
STR             R4, [SP,#0x14+var_10]
BEQ             loc_2DC74

loc_2DC38
MOV             R1, R4
LDR             R4, [R4,#0x160]
B               loc_2DC14

loc_2DC44
LDR             R1, [SP,#0x14+var_10]
MOV             R0, R6
BL              sub_2C0A8
MOVW            R3, #0x25BF
MOV             R2, R9
MOV             R1, R7
ADD             R0, SP, #0x14+var_10
BL              sub_2A70C
CMP             R4, #0
ADD             R5, R5, #1
STR             R4, [SP,#0x14+var_10]
BNE             loc_2DC38

loc_2DC74               ; rwlock
MOV             R0, R8
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2DCB0
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R5
ADD             SP, SP, #0x14
VPOP            {D8}
POP             {R4-R9,PC}

loc_2DCA4
MOVW            R1, #0x25B9
LDR             R0, =aAgeQueuedWork ; "age_queued_work"
BL              sub_2CB04

loc_2DCB0
MOVW            R1, #0x25C4
LDR             R0, =aAgeQueuedWork ; "age_queued_work"
BL              sub_2D6AC
; End of function sub_2DBC4

off_2DCBC DCD aAgeQueuedWork ; "age_queued_work"


; Attributes: noreturn

; void __fastcall __noreturn sub_2DCC0(const char *, int)
sub_2DCC0

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_2DCC0




; _DWORD *__fastcall sub_2DD1C(pthread_rwlock_t *, int)
sub_2DD1C
PUSH            {R4-R8,LR}
ADD             R7, R0, #0x140
MOV             R4, R0
MOV             R0, R7  ; rwlock
MOV             R6, R1
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_2DDCC
LDR             R4, [R4,#0x160]
CMP             R4, #0
BEQ             loc_2DD88
LDR             R3, [R4,#0x154]
LDR             R5, [R4,#0x160]
CMP             R6, R3
BEQ             loc_2DDB0
CMP             R5, #0
MOVEQ           R4, R5
BEQ             loc_2DD88
LDR             R4, [R5,#0x160]
B               loc_2DD74

loc_2DD6C
MOV             R5, R4
LDR             R4, [R4,#0x160]

loc_2DD74
LDR             R3, [R5,#0x154]
CMP             R6, R3
BEQ             loc_2DDB4
CMP             R4, #0
BNE             loc_2DD6C

loc_2DD88               ; rwlock
MOV             R0, R7
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2DDD8
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4-R8,PC}

loc_2DDB0
MOV             R5, R4

loc_2DDB4
BL              sub_2D914
MOV             R1, R5
MOV             R2, #0
MOV             R4, R0
BL              sub_2A5F4
B               loc_2DD88

loc_2DDCC
MOVW            R1, #0x259F
LDR             R0, =aCloneQueuedWor ; "clone_queued_work_byid"
BL              sub_2DCC0

loc_2DDD8
MOVW            R1, #0x25A3
LDR             R0, =aCloneQueuedWor ; "clone_queued_work_byid"
BL              sub_2D6AC
; End of function sub_2DD1C

off_2DDE4 DCD aCloneQueuedWor ; "clone_queued_work_byid"



; _DWORD *__fastcall sub_2DDE8(pthread_rwlock_t *, void *, size_t, const void *, int, size_t)
sub_2DDE8

var_C= -0xC
var_8= -8
arg_0=  0x1C
arg_4=  0x20

PUSH            {R4-R9,LR}
ADD             R4, R0, #0x140
SUB             SP, SP, #0xC
MOV             R5, R0
MOV             R0, R4  ; rwlock
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              pthread_rwlock_rdlock
SUBS            R9, R0, #0
BNE             loc_2DE80
LDR             R2, [SP,#0xC+arg_4]
MOV             R3, R8  ; int
LDR             R1, [SP,#0xC+arg_0]
LDR             R0, [R5,#0x160] ; int
STR             R2, [SP,#0xC+var_8] ; size_t
MOV             R2, R7  ; n
STR             R1, [SP,#0xC+var_C] ; int
MOV             R1, R6  ; s2
BL              sub_2BFEC
SUBS            R5, R0, #0
BEQ             loc_2DE98
BL              sub_2D914
MOV             R2, R9
MOV             R1, R5
MOV             R6, R0
BL              sub_2A5F4

loc_2DE54               ; rwlock
MOV             R0, R4
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2DE8C
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_2DE80
MOVW            R1, #0x2570
LDR             R0, =aCloneQueuedWor_0 ; "clone_queued_work_bymidstate"
BL              sub_2DCC0

loc_2DE8C
MOVW            R1, #0x2574
LDR             R0, =aCloneQueuedWor_0 ; "clone_queued_work_bymidstate"
BL              sub_2D6AC

loc_2DE98
MOV             R6, R5
B               loc_2DE54
; End of function sub_2DDE8

off_2DEA0 DCD aCloneQueuedWor_0 ; "clone_queued_work_bymidstate"



; int __fastcall sub_2DEA4(pthread_rwlock_t *, int)
sub_2DEA4
PUSH            {R4-R6,LR}
ADD             R6, R0, #0x140
MOV             R4, R0
MOV             R0, R6  ; rwlock
MOV             R5, R1
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_2DF3C
LDR             R4, [R4,#0x160]
CMP             R4, #0
BEQ             loc_2DF0C
LDR             R2, [R4,#0x154]
LDR             R3, [R4,#0x160]
CMP             R5, R2
BEQ             loc_2DF0C
CMP             R3, #0
LDRNE           R4, [R3,#0x160]
BNE             loc_2DEF8
B               loc_2DF34

loc_2DEF0
MOV             R3, R4
LDR             R4, [R4,#0x160]

loc_2DEF8
LDR             R2, [R3,#0x154]
CMP             R5, R2
BEQ             loc_2DF34
CMP             R4, #0
BNE             loc_2DEF0

loc_2DF0C               ; rwlock
MOV             R0, R6
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2DF48
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4-R6,PC}

loc_2DF34
MOV             R4, R3
B               loc_2DF0C

loc_2DF3C
MOVW            R1, #0x2593
LDR             R0, =aFindQueuedWork ; "find_queued_work_byid"
BL              sub_2DCC0

loc_2DF48
MOVW            R1, #0x2595
LDR             R0, =aFindQueuedWork ; "find_queued_work_byid"
BL              sub_2D6AC
; End of function sub_2DEA4

off_2DF54 DCD aFindQueuedWork ; "find_queued_work_byid"



; int __fastcall sub_2DF58(pthread_rwlock_t *, void *, size_t, const void *, int, size_t)
sub_2DF58

var_8= -8
var_4= -4
arg_0=  0x18
arg_4=  0x1C

PUSH            {R4-R8,LR}
ADD             R4, R0, #0x140
SUB             SP, SP, #8
MOV             R5, R0
MOV             R0, R4  ; rwlock
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_2DFD8
LDR             R2, [SP,#8+arg_4]
MOV             R3, R8  ; int
LDR             R1, [SP,#8+arg_0]
LDR             R0, [R5,#0x160] ; int
STR             R2, [SP,#8+var_4] ; size_t
MOV             R2, R7  ; n
STR             R1, [SP,#8+var_8] ; int
MOV             R1, R6  ; s2
BL              sub_2BFEC
MOV             R5, R0
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2DFE4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_2DFD8
MOVW            R1, #0x2564
LDR             R0, =aFindQueuedWork_0 ; "find_queued_work_bymidstate"
BL              sub_2DCC0

loc_2DFE4
MOVW            R1, #0x2566
LDR             R0, =aFindQueuedWork_0 ; "find_queued_work_bymidstate"
BL              sub_2D6AC
; End of function sub_2DF58

off_2DFF0 DCD aFindQueuedWork_0 ; "find_queued_work_bymidstate"



; int __fastcall sub_2DFF4(int)
sub_2DFF4
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, #stru_74FC0 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_2E04C
MOVW            R3, #:lower16:dword_74F68
MOVW            R0, #:lower16:stru_74FC0
MOVT            R3, #:upper16:dword_74F68
MOVT            R0, #:upper16:stru_74FC0 ; rwlock
LDR             R3, [R3]
LDR             R4, [R3,R4,LSL#2]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2E058
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4,PC}

loc_2E04C
MOV             R1, #0x27C
LDR             R0, =aGetDevices ; "get_devices"
BL              sub_2DCC0

loc_2E058
MOVW            R1, #0x27E
LDR             R0, =aGetDevices ; "get_devices"
BL              sub_2D6AC
; End of function sub_2DFF4

off_2E064 DCD aGetDevices ; "get_devices"



; int sub_2E068()
sub_2E068

var_92C= -0x92C
var_924= -0x924
var_91C= -0x91C
var_918= -0x918
var_914= -0x914
var_910= -0x910
format= -0x90C
var_908= -0x908
var_904= -0x904
s= -0x804

MOVW            R2, #:lower16:byte_686E8
PUSH            {R4-R11,LR}
MOVT            R2, #:upper16:byte_686E8
VPUSH           {D8-D10}
SUB             SP, SP, #0x920
MOVW            R0, #0xB3C5
SUB             SP, SP, #0xC
LDR             R1, [R2,#(dword_68B34 - 0x686E8)]
LDR             R3, [R2,#(dword_68B2C - 0x686E8)]
MOVT            R0, #0x91A2
STR             R2, [SP,#0x92C+var_908]
MOV             LR, #0xE10
LDR             R12, [R2,#(dword_68B28 - 0x686E8)]
MOVW            R7, #:lower16:qword_72EF0
LDR             R2, [R2,#(dword_68B30 - 0x686E8)]
SUB             R3, R3, R1
CMP             R3, #0
LDR             R11, =dword_681C8
MOVT            R7, #:upper16:qword_72EF0
VLDR            D8, =60.0
SUB             R12, R12, R2
MOVW            R2, #0x8889
SUBLT           R12, R12, #1
MOVT            R2, #0x8888
SMULL           R0, R1, R12, R0
MOV             R6, R12,ASR#31
VLDR            D9, [R11,#(dbl_681C0 - 0x681C8)]
SMULL           R4, R5, R12, R2
MOV             R4, #byte_72D90
ADD             R8, R12, R1
LDRD            R0, R1, [R7]
RSB             R8, R6, R8,ASR#11
MLS             LR, LR, R8, R12
ADD             R3, R12, R5
RSB             R6, R6, R3,ASR#5
SMULL           R2, R3, LR, R2
MOV             R10, LR,ASR#31
RSB             R6, R6, R6,LSL#4
SUB             R6, R12, R6,LSL#2
ADD             LR, LR, R3
RSB             R10, R10, LR,ASR#5
BLX             sub_4AB14
MOVW            R3, #:lower16:qword_72DC8
VMOV            D7, R0, R1
MOVT            R3, #:upper16:qword_72DC8
LDRD            R0, R1, [R3]
VDIV.F64        D10, D7, D9
BLX             sub_4AB14
VMOV            D7, R0, R1
LDRB            R3, [R4]
VDIV.F64        D7, D7, D9
CMP             R3, #0
VMUL.F64        D10, D10, D8
VMUL.F64        D8, D7, D8
BNE             loc_2E15C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F070

loc_2E15C
MOVW            R12, #:lower16:aSummaryOfRunti ; "\nSummary of runtime statistics:\n"
ADD             R5, SP, #0x92C+s
MOVT            R12, #:upper16:aSummaryOfRunti ; "\nSummary of runtime statistics:\n"
MOV             LR, R5
LDM             R12!, {R0-R3} ; "\nSummary of runtime statistics:\n"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ime statistics:\n"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
STRB            R12, [LR]
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E1B4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F294

loc_2E1B4
MOVW            R2, #:lower16:aStartedAtS ; "Started at %s"
LDR             R3, =byte_68B38
MOVT            R2, #:upper16:aStartedAtS ; "Started at %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
MOVW            R9, #:lower16:dword_72E60
BL              snprintf
MOVT            R9, #:upper16:dword_72E60
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDR             R3, [R9]
CMP             R3, #1
BEQ             loc_2F1AC

loc_2E1F0
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E210
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F0AC

loc_2E210
ADD             R5, SP, #0x92C+s
MOVW            R2, #:lower16:aRuntimeDHrsDMi ; "Runtime: %d hrs : %d mins : %d secs"
MOV             R3, R8
MOVT            R2, #:upper16:aRuntimeDHrsDMi ; "Runtime: %d hrs : %d mins : %d secs"
MOV             R1, #0x800 ; maxlen
STR             R6, [SP,#0x92C+var_92C+4]
STR             R10, [SP,#0x92C+var_92C]
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
MOVW            R3, #:lower16:dbl_72D88
LDRB            R2, [R4]
MOVT            R3, #:upper16:dbl_72D88
VLDR            D6, [R11,#(dbl_681C0 - 0x681C8)]
VLDR            D5, [R3]
CMP             R2, #0
VDIV.F64        D7, D5, D6
BNE             loc_2E278
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F2B0

loc_2E278
MOVW            R2, #:lower16:aAverageHashrat ; "Average hashrate: %.1f Mhash/s"
VSTR            D7, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aAverageHashrat ; "Average hashrate: %.1f Mhash/s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E2C0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F3D0

loc_2E2C0
MOVW            R3, #:lower16:dword_76074
MOVW            R2, #:lower16:aSolvedBlocksD ; "Solved blocks: %d"
MOVT            R3, #:upper16:dword_76074
MOVT            R2, #:upper16:aSolvedBlocksD ; "Solved blocks: %d"
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E310
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F3FC

loc_2E310
MOVW            R2, #:lower16:aBestShareDiffi ; "Best share difficulty: %s"
LDR             R3, =dword_681C8
MOVT            R2, #:upper16:aBestShareDiffi ; "Best share difficulty: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E358
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F220

loc_2E358
MOVW            R2, #:lower16:qword_74FB8
LDR             R3, [R7]
MOVT            R2, #:upper16:qword_74FB8
LDR             R1, [R7,#(qword_72EF0+4 - 0x72EF0)]
LDM             R2, {R0,R12}
MOV             R2, #aShareSubmissio ; "Share submissions: %lld"
ADDS            R3, R3, R0
MOV             R0, R5  ; s
ADC             R1, R1, R12
STR             R3, [SP,#0x92C+var_92C]
STR             R1, [SP,#0x92C+var_92C+4]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E3C0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F2BC

loc_2E3C0
LDRD            R10, R11, [R7]
MOV             R2, #aAcceptedShares ; "Accepted shares: %lld"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E40C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F3C4

loc_2E40C
MOVW            R3, #:lower16:qword_74FB8
MOVW            R2, #:lower16:aRejectedShares ; "Rejected shares: %lld"
MOVT            R3, #:upper16:qword_74FB8
MOVT            R2, #:upper16:aRejectedShares ; "Rejected shares: %lld"
LDRD            R10, R11, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E478
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F408
B               loc_2E478
ALIGN 8
dbl_2E468 DCFD 60.0
off_2E470 DCD dword_681C8
off_2E474 DCD byte_68B38

loc_2E478
MOVW            R3, #:lower16:dbl_74F28
MOVW            R2, #:lower16:aAcceptedDiffic ; "Accepted difficulty shares: %1.f"
MOVT            R3, #:upper16:dbl_74F28
MOVT            R2, #:upper16:aAcceptedDiffic ; "Accepted difficulty shares: %1.f"
LDRD            R10, R11, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E4CC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F414

loc_2E4CC
MOVW            R3, #:lower16:dbl_74FB0
MOVW            R2, #:lower16:aRejectedDiffic ; "Rejected difficulty shares: %1.f"
MOVT            R3, #:upper16:dbl_74FB0
MOVT            R2, #:upper16:aRejectedDiffic ; "Rejected difficulty shares: %1.f"
LDRD            R10, R11, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
LDRD            R6, R7, [R7]
ORRS            R3, R6, R7
BEQ             loc_2E8B8
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E52C

loc_2E518
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F2F4

loc_2E52C
MOVW            R3, #:lower16:qword_74FB8
ADD             R5, SP, #0x92C+s
MOVT            R3, #:upper16:qword_74FB8
LDM             R3, {R8,R10}
ADDS            R3, R8, R8
ADC             R1, R10, R10
ADDS            R3, R3, R8
ADC             R1, R1, R10
MOV             R0, R3,LSL#5
MOV             R2, R1,LSL#5
ADDS            R0, R3, R0
ORR             R2, R2, R3,LSR#27
ADC             R1, R1, R2
ADDS            R0, R0, R8
ADC             R1, R1, R10
BLX             sub_4AB14
VMOV            D9, R0, R1
ADDS            R0, R8, R6
ADC             R1, R10, R7
BLX             sub_4AB14
VMOV            D7, R0, R1
MOV             R2, #aRejectRatio1f ; "Reject ratio: %.1f%%"
MOV             R1, #0x800 ; maxlen
VDIV.F64        D7, D9, D7
MOV             R0, R5  ; s
VSTR            D7, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_2E5AC
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E5CC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F118

loc_2E5CC
MOVW            R3, #:lower16:dword_76060
ADD             R5, SP, #0x92C+s
MOVT            R3, #:upper16:dword_76060
MOVW            R2, #:lower16:aHardwareErrors ; "Hardware errors: %d"
LDR             R3, [R3]
MOVT            R2, #:upper16:aHardwareErrors ; "Hardware errors: %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E620
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F38C

loc_2E620
MOVW            R2, #:lower16:aUtilityAccepte ; "Utility (accepted shares / min): %.2f/m"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aUtilityAccepte ; "Utility (accepted shares / min): %.2f/m"...
VSTR            D10, [SP,#0x92C+var_92C]
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E668
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F3A8

loc_2E668
MOVW            R2, #:lower16:aWorkUtilityDif ; "Work Utility (diff1 shares solved / min"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aWorkUtilityDif ; "Work Utility (diff1 shares solved / min"...
VSTR            D8, [SP,#0x92C+var_92C]
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E6B0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F31C

loc_2E6B0
MOVW            R3, #:lower16:qword_762C8
MOVW            R2, #:lower16:aStaleSubmissio ; "Stale submissions discarded due to new "...
MOVT            R3, #:upper16:qword_762C8
MOVT            R2, #:upper16:aStaleSubmissio ; "Stale submissions discarded due to new "...
LDRD            R6, R7, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R6, R7, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E704
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F338

loc_2E704
MOVW            R3, #:lower16:dword_72F08
MOVW            R2, #:lower16:aUnableToGetWor ; "Unable to get work from server occasion"...
MOVT            R3, #:upper16:dword_72F08
MOVT            R2, #:upper16:aUnableToGetWor ; "Unable to get work from server occasion"...
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E754
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F354

loc_2E754
MOVW            R3, #:lower16:dword_72F14
MOVW            R2, #:lower16:aWorkItemsGener ; "Work items generated locally: %d"
MOVT            R3, #:upper16:dword_72F14
MOVT            R2, #:upper16:aWorkItemsGener ; "Work items generated locally: %d"
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E7A4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F370

loc_2E7A4
MOVW            R3, #:lower16:dword_72DAC
MOVW            R2, #:lower16:aSubmittingWork ; "Submitting work remotely delay occasion"...
MOVT            R3, #:upper16:dword_72DAC
MOVT            R2, #:upper16:aSubmittingWork ; "Submitting work remotely delay occasion"...
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E7F4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F300

loc_2E7F4
MOVW            R3, #:lower16:dword_761D8
MOVW            R2, #:lower16:aNewBlocksDetec ; "New blocks detected on network: %d\n"
MOVT            R3, #:upper16:dword_761D8
MOVT            R2, #:upper16:aNewBlocksDetec ; "New blocks detected on network: %d\n"
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
LDR             R3, [R9]
CMP             R3, #1
BLE             loc_2ECA8

loc_2E830
MOVW            R7, #:lower16:byte_686E0
MOVW            R3, #:lower16:dword_72F04
MOVW            R2, #:lower16:aSubmittingWork_0 ; " Submitting work remotely delay occasio"...
MOVW            R1, #:lower16:aUnableToGetWor_0 ; " Unable to get work from server occasio"...
MOVT            R7, #:upper16:byte_686E0
MOV             R8, #0
MOVT            R3, #:upper16:dword_72F04
MOVT            R2, #:upper16:aSubmittingWork_0 ; " Submitting work remotely delay occasio"...
MOVT            R1, #:upper16:aUnableToGetWor_0 ; " Unable to get work from server occasio"...
STR             R3, [SP,#0x92C+var_914]
STR             R2, [SP,#0x92C+var_910]
STR             R1, [SP,#0x92C+format]

loc_2E860
LDR             R3, [SP,#0x92C+var_914]
LDRB            R2, [R4]
LDR             R3, [R3]
CMP             R2, #0
LDR             R6, [R3,R8,LSL#2]
BNE             loc_2E8E4
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_2E8E4
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_2E8E4
LDR             R3, [R6,#0x20]
CMP             R3, #0
BEQ             loc_2E974

loc_2E8A4
LDR             R1, [R2]
CMP             R1, #3
BLE             loc_2EF3C
ADD             R5, SP, #0x92C+s
B               loc_2E928

loc_2E8B8
MOV             R3, #qword_74FB8
LDRD            R2, R3, [R3]
ORRS            R3, R2, R3
BEQ             loc_2E5AC
LDRB            R3, [R4]
MOV             R6, #0
MOV             R7, #0
CMP             R3, #0
BEQ             loc_2E518
B               loc_2E52C

loc_2E8E4
ADD             R5, SP, #0x92C+s
MOVW            R2, #:lower16:aPoolS ; "Pool: %s"
LDR             R3, [R6,#0xA4]
MOVT            R2, #:upper16:aPoolS ; "Pool: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
LDR             R3, [R6,#0x20]
CMP             R3, #0
BEQ             loc_2E968
LDRB            R2, [R4]
CMP             R2, #0
BEQ             loc_2F058

loc_2E928
MOVW            R2, #:lower16:(asc_4CF84+4) ; ""
CMP             R3, #1
MOVT            R2, #:upper16:(asc_4CF84+4) ; ""
MOV             R1, #(aPools+4) ; "S"
MOVLE           R1, R2
MOVW            R2, #:lower16:aSolvedDBlockS ; "SOLVED %d BLOCK%s!"
STR             R1, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aSolvedDBlockS ; "SOLVED %d BLOCK%s!"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60

loc_2E968
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E984

loc_2E974
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2EF34

loc_2E980
ADD             R5, SP, #0x92C+s

loc_2E984
LDR             R1, [R6,#0x10]
MOVW            R2, #:lower16:aShareSubmissio_0 ; " Share submissions: %lld"
LDR             R3, [R6,#8]
MOVT            R2, #:upper16:aShareSubmissio_0 ; " Share submissions: %lld"
LDR             R0, [R6,#0xC]
LDR             R12, [R6,#0x14]
ADDS            R3, R3, R1
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x92C+var_92C]
ADC             R3, R0, R12
MOV             R0, R5  ; s
STR             R3, [SP,#0x92C+var_92C+4]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2E9E0
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2F034

loc_2E9E0
LDRD            R10, R11, [R6,#8]
MOV             R2, #aAcceptedShares_0 ; " Accepted shares: %lld"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2EA24
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2F01C

loc_2EA24
LDRD            R10, R11, [R6,#0x10]
MOV             R2, #aRejectedShares_0 ; " Rejected shares: %lld"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2EA68
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2EFEC

loc_2EA68
LDRD            R10, R11, [R6,#0x48]
MOV             R2, #aAcceptedDiffic_0 ; " Accepted difficulty shares: %1.f"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2EAAC
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2EFF8

loc_2EAAC
LDRD            R10, R11, [R6,#0x50]
MOV             R2, #aRejectedDiffic_0 ; " Rejected difficulty shares: %1.f"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
LDRD            R10, R11, [R6,#8]
ORRS            R3, R10, R11
BNE             loc_2EAF8

loc_2EAE4
LDRD            R2, R3, [R6,#0x10]
ORRS            R3, R2, R3
BEQ             loc_2EB9C
MOV             R10, #0
MOV             R11, #0

loc_2EAF8
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2EB10
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2F040

loc_2EB10
LDR             R3, [R6,#0x10]
ADD             R5, SP, #0x92C+s
LDR             R2, [R6,#0x14]
ADDS            R12, R3, R3
STR             R3, [SP,#0x92C+var_918]
ADC             R1, R2, R2
ADDS            R12, R12, R3
ADC             R1, R1, R2
MOV             R0, R12,LSL#5
MOV             LR, R1,LSL#5
STR             R2, [SP,#0x92C+var_91C]
ADDS            R0, R12, R0
ORR             LR, LR, R12,LSR#27
ADC             R1, R1, LR
ADDS            R0, R0, R3
ADC             R1, R1, R2
BLX             sub_4AB14
LDR             R3, [SP,#0x92C+var_918]
LDR             R2, [SP,#0x92C+var_91C]
VMOV            D8, R0, R1
ADDS            R0, R3, R10
ADC             R1, R2, R11
BLX             sub_4AB14
VMOV            D7, R0, R1
MOV             R2, #aRejectRatio1f_0 ; " Reject ratio: %.1f%%"
MOV             R1, #0x800 ; maxlen
VDIV.F64        D7, D8, D7
MOV             R0, R5  ; s
VSTR            D7, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_2EB9C
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2EBB4
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2EFE0

loc_2EBB4
ADD             R5, SP, #0x92C+s
MOVW            R2, #:lower16:aItemsWorkedOnD ; " Items worked on: %d"
LDR             R3, [R6,#0x44]
MOVT            R2, #:upper16:aItemsWorkedOnD ; " Items worked on: %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2EBF8
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2F004

loc_2EBF8
MOVW            R2, #:lower16:aStaleSubmissio_0 ; " Stale submissions discarded due to new"...
LDR             R3, [R6,#0x78]
MOVT            R2, #:upper16:aStaleSubmissio_0 ; " Stale submissions discarded due to new"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2EC38
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2F010

loc_2EC38
LDR             R3, [R6,#0x80]
MOV             R1, #0x800 ; maxlen
LDR             R2, [SP,#0x92C+format] ; format
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2EC74
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_2F028

loc_2EC74               ; format
LDR             R2, [SP,#0x92C+var_910]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R6,#0x84]
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_2EC98
LDR             R3, [R9]
ADD             R8, R8, #1
CMP             R3, R8
BGT             loc_2E860

loc_2ECA8
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2ECC8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F0E8

loc_2ECC8
MOVW            LR, #:lower16:aSummaryOfPerDe ; "Summary of per device statistics:\n"
ADD             R5, SP, #0x92C+s
MOVT            LR, #:upper16:aSummaryOfPerDe ; "Summary of per device statistics:\n"
MOV             R12, R5
LDM             LR!, {R0-R3} ; "Summary of per device statistics:\n"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "evice statistics:\n"
LDR             LR, [LR] ; ":\n"
STM             R12!, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60

loc_2ED08
MOV             R7, #dword_74FE0
LDR             R3, [R7]
CMP             R3, #0
BLE             loc_2EDD8
MOVW            R10, #:lower16:nullsub_1
MOVW            R9, #:lower16:nullsub_2
MOVW            R8, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOVW            R11, #:lower16:byte_686E0
MOVW            R3, #:lower16:dword_67840
MOVT            R10, #:upper16:nullsub_1
MOVT            R9, #:upper16:nullsub_2
MOVT            R8, #:upper16:(aReceivedFromPr+0x1C) ; "%s"
MOVT            R11, #:upper16:byte_686E0
MOV             R5, #0
MOVT            R3, #:upper16:dword_67840
STR             R3, [SP,#0x92C+var_91C]

loc_2ED4C
MOV             R0, R5
ADD             R6, SP, #0x92C+s
BL              sub_2DFF4
MOV             R3, R0
ADD             R0, SP, #0x92C+var_904
LDR             R1, [R3,#4]
MOV             R2, R3
ADD             R5, R5, #1
STR             R10, [R1,#0x14]
MOV             R1, #0xFF
LDR             R3, [R3,#4]
STR             R9, [R3,#0x18]
BL              sub_2C350
LDRB            R12, [R4]
MOV             R2, R8  ; format
MOV             R1, #0x800 ; maxlen
ADD             R3, SP, #0x92C+var_904
MOV             R0, R6  ; s
CMP             R12, #0
BNE             loc_2EDB8
LDRB            R12, [R11]
CMP             R12, #0
BNE             loc_2EDB8
LDR             R12, [SP,#0x92C+var_91C]
LDR             R12, [R12]
CMP             R12, #3
BLE             loc_2EDCC

loc_2EDB8
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_2EDCC
LDR             R3, [R7]
CMP             R3, R5
BGT             loc_2ED4C

loc_2EDD8
LDR             R3, [SP,#0x92C+var_908]
LDR             R1, [R3,#(dword_68B60 - 0x686E8)]
LDRB            R3, [R4]
CMP             R1, #0
BEQ             loc_2EECC
MOVW            R6, #:lower16:dbl_74F28
CMP             R3, #0
MOVT            R6, #:upper16:dbl_74F28
VLDR            D7, [R6]
BNE             loc_2EE14
MOV             R3, #byte_686E0
LDRB            R2, [R3]
CMP             R2, #0
BEQ             loc_2F2C8

loc_2EE14
ADD             R5, SP, #0x92C+s
MOVW            R2, #:lower16:aMined0fAccepte ; "Mined %.0f accepted shares of %d reques"...
VSTR            D7, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aMined0fAccepte ; "Mined %.0f accepted shares of %d reques"...
STR             R1, [SP,#0x92C+var_924]
MOV             R0, R5  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
LDR             R3, [SP,#0x92C+var_908]
VLDR            D7, [R6]
LDR             R1, [R3,#(dword_68B60 - 0x686E8)]
LDRB            R3, [R4]
VMOV            S13, R1
VCVT.F64.S32    D6, S13
VCMPE.F64       D6, D7
VMRS            APSR_nzcv, FPSCR
BLE             loc_2EECC
CMP             R3, #0
BNE             loc_2EE9C
MOV             R3, #byte_686E0

loc_2EE78
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2EE98
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_2F108

loc_2EE98
ADD             R5, SP, #0x92C+s

loc_2EE9C
MOVW            R2, #:lower16:aWarningMinedOn ; "WARNING - Mined only %.0f shares of %d "...
STR             R1, [SP,#0x92C+var_924]
VSTR            D7, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aWarningMinedOn ; "WARNING - Mined only %.0f shares of %d "...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]

loc_2EECC
CMP             R3, #0
BNE             loc_2EEE8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F100

loc_2EEE8
ADD             R3, SP, #0x92C+s
MOV             R12, #0x20 ; ' '
MOV             R1, R3
MOV             R2, #0
MOV             R0, #4
STRH            R12, [R3]
BL              sub_1DD60

loc_2EF04
MOV             R3, #stderr
LDR             R0, [R3] ; stream
BL              fflush
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
ADD             SP, SP, #0x920
ADD             SP, SP, #0xC
VPOP            {D8-D10}
POP             {R4-R11,PC}

loc_2EF34
MOV             R2, #dword_67840

loc_2EF3C
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_2E980

loc_2EF48
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E9E0

loc_2EF58
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2EA24

loc_2EF68
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2EA68

loc_2EF78
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2EAAC
LDRD            R10, R11, [R6,#8]
ORRS            R3, R10, R11
BEQ             loc_2EAE4
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_2EB10

loc_2EFA0
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_2EBB4

loc_2EFAC
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2EBF8

loc_2EFBC
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2EC38

loc_2EFCC
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2EC74
B               loc_2EC98

loc_2EFE0
MOV             R2, #dword_67840
B               loc_2EFA0

loc_2EFEC
MOV             R2, #dword_67840
B               loc_2EF68

loc_2EFF8
MOV             R2, #dword_67840
B               loc_2EF78

loc_2F004
MOV             R2, #dword_67840
B               loc_2EFAC

loc_2F010
MOV             R2, #dword_67840
B               loc_2EFBC

loc_2F01C
MOV             R2, #dword_67840
B               loc_2EF58

loc_2F028
MOV             R2, #dword_67840
B               loc_2EFCC

loc_2F034
MOV             R2, #dword_67840
B               loc_2EF48

loc_2F040
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_2EFA0
B               loc_2EB10

loc_2F058
LDRB            R2, [R7]
CMP             R2, #0
BNE             loc_2E928
MOV             R2, #dword_67840
B               loc_2E8A4

loc_2F070
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_2E15C
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E1B4

loc_2F094
MOV             R9, #dword_72E60
LDR             R3, [R9]
CMP             R3, #1
BNE             loc_2E1F0
B               loc_2F1D4

loc_2F0AC
MOV             R2, #dword_67840

loc_2F0B4
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_2E210
MOVW            R3, #:lower16:dbl_72D88
VLDR            D6, [R11,#(dbl_681C0 - 0x681C8)]
MOVT            R3, #:upper16:dbl_72D88
VLDR            D5, [R3]
VDIV.F64        D7, D5, D6

loc_2F0D4
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_2F3D8
ADD             R5, SP, #0x92C+s
B               loc_2E278

loc_2F0E8
MOV             R2, #dword_67840

loc_2F0F0
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_2ECC8
B               loc_2ED08

loc_2F100
MOV             R2, #dword_67840

loc_2F108
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_2EEE8
B               loc_2EF04

loc_2F118
MOV             R2, #dword_67840

loc_2F120
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_2E5CC
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E620

loc_2F13C
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E668

loc_2F14C
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E6B0

loc_2F15C
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E704

loc_2F16C
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E754

loc_2F17C
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E7A4

loc_2F18C
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E7F4

loc_2F19C
LDR             R3, [R9]
CMP             R3, #1
BGT             loc_2E830
B               loc_2F0F0

loc_2F1AC
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2F1E4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F1E4
MOV             R2, #dword_67840

loc_2F1D4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BLE             loc_2F0B4

loc_2F1E4
MOVW            R3, #:lower16:dword_72F04
MOVW            R2, #:lower16:aPoolS ; "Pool: %s"
MOVT            R3, #:upper16:dword_72F04
MOVT            R2, #:upper16:aPoolS ; "Pool: %s"
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
LDR             R3, [R3]
LDR             R3, [R3,#0xA4]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
B               loc_2E1F0

loc_2F220
MOV             R2, #dword_67840

loc_2F228
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E358

loc_2F238
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E3C0

loc_2F248
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E40C

loc_2F258
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E478

loc_2F268
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E4CC
LDRD            R6, R7, [R7]
ORRS            R3, R6, R7
BEQ             loc_2E8B8

loc_2F284
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_2F120
B               loc_2E52C

loc_2F294
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E1B4
B               loc_2F094

loc_2F2B0
MOV             R2, #dword_67840
B               loc_2F0D4

loc_2F2BC
MOV             R2, #dword_67840
B               loc_2F238

loc_2F2C8
MOV             R2, #dword_67840
LDR             R0, [R2]
CMP             R0, #3
BGT             loc_2EE14
VMOV            S13, R1
VCVT.F64.S32    D6, S13
VCMPE.F64       D6, D7
VMRS            APSR_nzcv, FPSCR
BGT             loc_2EE78
B               loc_2F108

loc_2F2F4
MOV             R2, #dword_67840
B               loc_2F284

loc_2F300
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E7F4
B               loc_2F19C

loc_2F31C
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E6B0
B               loc_2F15C

loc_2F338
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E704
B               loc_2F16C

loc_2F354
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E754
B               loc_2F17C

loc_2F370
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E7A4
B               loc_2F18C

loc_2F38C
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E620
B               loc_2F13C

loc_2F3A8
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E668
B               loc_2F14C

loc_2F3C4
MOV             R2, #dword_67840
B               loc_2F248

loc_2F3D0
MOV             R2, #dword_67840

loc_2F3D8
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E2C0

loc_2F3E8
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_2E310
B               loc_2F228

loc_2F3FC
MOV             R2, #dword_67840
B               loc_2F3E8

loc_2F408
MOV             R2, #dword_67840
B               loc_2F258

loc_2F414
MOV             R2, #dword_67840
B               loc_2F268
; End of function sub_2E068




; int __fastcall sub_2F420(int)
sub_2F420

var_84C= -0x84C
info= -0x844
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x840
SUB             SP, SP, #0xC
MOV             R4, R0
ADD             R0, SP, #0x84C+info ; info
BL              sysinfo
CMP             R0, #0
BEQ             loc_2F4D4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F468
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F52C

loc_2F468
BL              __errno_location
LDR             R5, [R0]
MOV             R0, R5  ; errnum
BL              strerror
MOVW            R2, #:lower16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
STR             R0, [SP,#0x84C+var_84C]
MOVT            R2, #:upper16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
MOV             R1, #0x800 ; maxlen
MOV             R3, R5
ADD             R0, SP, #0x84C+s ; s
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_2F4A4               ; timer
MOV             R0, #0
BL              time
MOV             R3, #dword_761D4
STR             R0, [R3]
LDR             R0, =dword_68B28
BL              sub_206A0
CMP             R4, #0
BEQ             loc_2F4F4

loc_2F4C8
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_2F4D4
LDR             R2, [SP,#0x84C+info]
MOV             R3, #dword_761D4
LDR             R0, =dword_68B28
STR             R2, [R3]
BL              sub_206A0
CMP             R4, #0
BNE             loc_2F4C8

loc_2F4F4
MOV             R3, #byte_761D0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F4C8
MOV             R3, #byte_686E2
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F4C8
BL              sub_2E068
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_2F52C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2F4A4
B               loc_2F468
; End of function sub_2F420

off_2F544 DCD dword_68B28



; void sub_2F548()
sub_2F548

var_804= -0x804

PUSH            {R4,R5,LR}
MOV             R5, #byte_72D90
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2F57C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F66C

loc_2F57C
MOVW            R2, #:lower16:aAttemptingToRe ; "Attempting to restart %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aAttemptingToRe ; "Attempting to restart %s"
MOV             R0, SP  ; s
LDR             R3, =s
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_2F5A4
MOVW            R0, #:lower16:sub_2FA50
MOVW            R2, #0x1388
MOV             R1, #0
MOVT            R0, #:upper16:sub_2FA50
MOVW            R4, #:lower16:byte_686E8
BL              sub_23220
MOVT            R4, #:upper16:byte_686E8
MOV             R0, #1
BL              sub_2F420
LDR             R0, [R4,#(dword_68B0C - 0x686E8)] ; pid
CMP             R0, #0
BLE             loc_2F5E4
MOV             R1, #0xF ; sig
BL              kill
MOV             R3, #0
STR             R3, [R4,#(dword_68B0C - 0x686E8)]

loc_2F5E4               ; argv
LDR             R1, [R4,#(dword_68B64 - 0x686E8)]
LDR             R0, [R1] ; path
BL              execv
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2F610
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F64C

loc_2F610
MOVW            LR, #:lower16:aFailedToRestar ; "Failed to restart application"
MOV             R12, SP
MOVT            LR, #:upper16:aFailedToRestar ; "Failed to restart application"
LDM             LR!, {R0-R3} ; "Failed to restart application"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "t application"
STM             R12!, {R0-R2}
MOV             R1, SP
MOV             R2, #0
MOV             R0, #4
STRH            R3, [R12]
BL              sub_1DD60
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_2F64C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_2F610
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_2F66C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_2F5A4
B               loc_2F57C
; End of function sub_2F548

off_2F684 DCD s



; int __fastcall sub_2F688(int)
sub_2F688
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, #stru_74F90 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_2F6E0
MOVW            R3, #:lower16:dword_73F20
MOVW            R0, #:lower16:stru_74F90
MOVT            R3, #:upper16:dword_73F20
MOVT            R0, #:upper16:stru_74F90 ; rwlock
LDR             R3, [R3]
LDR             R4, [R3,R4,LSL#2]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2F6EC
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4,PC}

loc_2F6E0
MOV             R1, #0x268
LDR             R0, =aGetThread ; "get_thread"
BL              sub_2DCC0

loc_2F6EC
MOVW            R1, #0x26A
LDR             R0, =aGetThread ; "get_thread"
BL              sub_2D6AC
; End of function sub_2F688

off_2F6F8 DCD aGetThread ; "get_thread"



; int __fastcall sub_2F6FC(int)
sub_2F6FC
PUSH            {R4,LR}
BL              sub_2F688
LDR             R3, [R0,#0x24]
LDR             R0, [R3,#8]
POP             {R4,PC}
; End of function sub_2F6FC




; bool sub_2F710()
sub_2F710

var_800= -0x800

PUSH            {R4-R10,LR}
MOV             R8, #byte_72D90
SUB             SP, SP, #0x800
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_2F740
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F9C0

loc_2F740
MOVW            R12, #:lower16:aReceivedKillMe ; "Received kill message"
MOV             R4, SP
MOVT            R12, #:upper16:aReceivedKillMe ; "Received kill message"
MOV             LR, R4
LDM             R12!, {R0-R3} ; "Received kill message"
MOV             R5, #byte_686E1
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1} ; "ssage"
STR             R0, [LR],#4
MOV             R0, #6
STRH            R1, [LR]
MOV             R1, R4
BL              sub_1DD60
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_2F7D8
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_2F7A8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2FA44

loc_2F7A8
MOVW            LR, #:lower16:aKillingOffWatc ; "Killing off watchpool thread"
MOV             R12, R4
MOVT            LR, #:upper16:aKillingOffWatc ; "Killing off watchpool thread"
LDM             LR!, {R0-R3} ; "Killing off watchpool thread"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "hpool thread"
STM             R12!, {R0-R2}
MOV             R1, R4
MOV             R2, #1
MOV             R0, #7
STRB            R3, [R12]
BL              sub_1DD60

loc_2F7D8
MOVW            R6, #:lower16:dword_72DC0
MOVW            R7, #:lower16:byte_686E8
MOVT            R6, #:upper16:dword_72DC0
MOVT            R7, #:upper16:byte_686E8
LDR             R3, [R6]
MOVW            R0, #:lower16:sub_20284
LDR             R1, [R7,#(dword_68B68 - 0x686E8)]
MOVT            R0, #:upper16:sub_20284
MOV             R2, #0x3E8
ADD             R1, R3, R1,LSL#6
BL              sub_23220
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_2F85C
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_2F830
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F9FC

loc_2F830
MOVW            R12, #:lower16:aKillingOffWatc_0 ; "Killing off watchdog thread"
MOV             LR, SP
MOVT            R12, #:upper16:aKillingOffWatc_0 ; "Killing off watchdog thread"
LDM             R12!, {R0-R3} ; "Killing off watchdog thread"
STM             LR!, {R0-R3}
LDM             R12, {R0-R2} ; "hdog thread"
STM             LR, {R0-R2}
MOV             R1, SP
MOV             R2, #1
MOV             R0, #7
BL              sub_1DD60

loc_2F85C
LDR             R3, [R6]
MOVW            R0, #:lower16:sub_20284
LDR             R1, [R7,#(dword_68B6C - 0x686E8)]
MOVT            R0, #:upper16:sub_20284
MOV             R2, #0x3E8
ADD             R1, R3, R1,LSL#6
BL              sub_23220
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_2F8D4
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_2F8A4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2FA14

loc_2F8A4
MOVW            LR, #:lower16:aShuttingDownMi ; "Shutting down mining threads"
MOV             R12, SP
MOVT            LR, #:upper16:aShuttingDownMi ; "Shutting down mining threads"
LDM             LR!, {R0-R3} ; "Shutting down mining threads"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "ning threads"
STM             R12!, {R0-R2}
MOV             R1, SP
MOV             R2, #1
MOV             R0, #7
STRB            R3, [R12]
BL              sub_1DD60

loc_2F8D4
MOV             R10, #dword_76228
LDR             R3, [R10]
CMP             R3, #0
BLE             loc_2F91C
MOV             R4, #0
MOV             R9, #1

loc_2F8F0
MOV             R0, R4
ADD             R4, R4, #1
BL              sub_2F688
CMP             R0, #0
BEQ             loc_2F910
LDR             R3, [R0,#0x24]
CMP             R3, #0
STRBNE          R9, [R3,#0x16C]

loc_2F910
LDR             R3, [R10]
CMP             R4, R3
BLT             loc_2F8F0

loc_2F91C               ; seconds
MOV             R0, #1
BL              sleep
MOVW            R0, #:lower16:sub_2FA68
MOVW            R2, #0xBB8
MOVT            R0, #:upper16:sub_2FA68
MOV             R1, #0
BL              sub_23220
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_2F99C
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_2F964
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2FA2C

loc_2F964
MOVW            LR, #:lower16:aKillingOffApiT ; "Killing off API thread"
MOV             R12, SP
MOVT            LR, #:upper16:aKillingOffApiT ; "Killing off API thread"
LDM             LR!, {R0-R3} ; "Killing off API thread"
STM             R12!, {R0-R3}
MOV             R2, #1
LDM             LR, {R0,R1} ; "thread"
STR             R0, [R12],#4
MOV             R0, #7
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, SP
STRB            R3, [R12]
BL              sub_1DD60

loc_2F99C
LDR             R1, [R7,#(dword_68B70 - 0x686E8)]
MOVW            R0, #:lower16:sub_20284
LDR             R3, [R6]
MOV             R2, #0x3E8
MOVT            R0, #:upper16:sub_20284
ADD             R1, R3, R1,LSL#6
BL              sub_23220
ADD             SP, SP, #0x800
POP             {R4-R10,PC}

loc_2F9C0
MOV             R3, #dword_67840
LDR             R2, [R3]
CMP             R2, #5
BGT             loc_2F740
MOV             R5, #byte_686E1
LDRB            R2, [R5]
CMP             R2, #0
BEQ             loc_2F7D8

loc_2F9E8
LDR             R3, [R3]
CMP             R3, #6
MOVGT           R4, SP
BGT             loc_2F7A8
B               loc_2F7D8

loc_2F9FC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2F85C
B               loc_2F830

loc_2FA14
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2F8D4
B               loc_2F8A4

loc_2FA2C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2F99C
B               loc_2F964

loc_2FA44
MOV             R3, #dword_67840
B               loc_2F9E8
; End of function sub_2F710




; bool sub_2FA50()
sub_2FA50
MOV             R3, #byte_686E2
LDRB            R3, [R3]
CMP             R3, #0
BXEQ            LR
B               sub_2F710
; End of function sub_2FA50




; void sub_2FA68()
sub_2FA68

var_800= -0x800

MOVW            R3, #:lower16:byte_686E1
PUSH            {R4-R6,LR}
MOVT            R3, #:upper16:byte_686E1
SUB             SP, SP, #0x800
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2FAE4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2FAAC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2FB60

loc_2FAAC
MOVW            LR, #:lower16:aKillingOffMini ; "Killing off mining threads"
MOV             R12, SP
MOVT            LR, #:upper16:aKillingOffMini ; "Killing off mining threads"
LDM             LR!, {R0-R3} ; "Killing off mining threads"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "ng threads"
STM             R12!, {R0,R1}
MOV             R1, SP
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #7
MOV             R2, #1
STRB            R3, [R12]
BL              sub_1DD60

loc_2FAE4
MOV             R6, #dword_76228
LDR             R3, [R6]
CMP             R3, #0
BLE             loc_2FB58
MOV             R4, #0
B               loc_2FB14

loc_2FB00
BL              sub_20284

loc_2FB04
LDR             R3, [R6]
ADD             R4, R4, #1
CMP             R3, R4
BLE             loc_2FB58

loc_2FB14
MOV             R0, R4
BL              sub_2F688
SUBS            R5, R0, #0
BEQ             loc_2FB00
LDR             R3, [R5,#0xC]
CMP             R3, #0
BEQ             loc_2FB00
BL              sub_20284
LDR             R0, [R5,#0xC] ; th
CMP             R0, #0
BEQ             loc_2FB04
MOV             R1, #0  ; thread_return
ADD             R4, R4, #1
BL              pthread_join
LDR             R3, [R6]
CMP             R3, R4
BGT             loc_2FB14

loc_2FB58
ADD             SP, SP, #0x800
POP             {R4-R6,PC}

loc_2FB60
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2FAE4
B               loc_2FAAC
; End of function sub_2FA68




; int sub_2FB78()
sub_2FB78
MOVW            R0, #:lower16:stru_76148
PUSH            {R4,LR}
MOVT            R0, #:upper16:stru_76148 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2FBE8
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_2FBF4
MOV             R0, #stru_76148 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2FC00
MOVW            R3, #:lower16:byte_686E8
LDR             R0, =rwlock ; rwlock
MOVT            R3, #:upper16:byte_686E8
LDR             R4, [R3,#(dword_68B74 - 0x686E8)]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2FC0C
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4,PC}

loc_2FBE8
MOVW            R1, #0x34D
LDR             R0, =aCurrentPool ; "current_pool"
BL              sub_2CB60

loc_2FBF4
MOVW            R1, #0x34D
LDR             R0, =aCurrentPool ; "current_pool"
BL              sub_2DCC0

loc_2FC00
MOVW            R1, #0x34D
LDR             R0, =aCurrentPool ; "current_pool"
BL              sub_2CBBC

loc_2FC0C
MOVW            R1, #0x351
LDR             R0, =aCurrentPool ; "current_pool"
BL              sub_2D6AC
; End of function sub_2FB78

off_2FC18 DCD rwlock
off_2FC1C DCD aCurrentPool ; "current_pool"



; int __fastcall sub_2FC20(int, int, int)
sub_2FC20
PUSH            {R4-R8,LR}
MOV             R7, R0
MOVW            R0, #:lower16:stru_72D94
MOV             R6, R1
MOVT            R0, #:upper16:stru_72D94 ; mutex
MOV             R4, R2
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2FCF4
LDR             R1, [R7,#0x24]
MOV             R3, #qword_72DC8
MOV             R5, R4,ASR#31
LDM             R3, {R0,LR}
LDR             R2, [R1,#0xC0]
LDR             R12, [R1,#0xC4]
ADDS            R0, R0, R4
ADC             LR, LR, R5
ADDS            R2, R2, R4
STR             R0, [R3]
STR             LR, [R3,#(qword_72DC8+4 - 0x72DC8)]
ADC             R3, R12, R5
CMP             R6, #0
STRD            R2, R3, [R1,#0xC0]
BEQ             loc_2FCD4
LDR             R3, [R6,#0x28]
LDR             R2, [R6,#0x2C]
ADDS            R3, R3, R4
ADC             R2, R2, R5
STR             R3, [R6,#0x28]
STR             R2, [R6,#0x2C]

loc_2FC9C
LDR             R4, [R7,#0x24]
MOV             R0, #0  ; timer
BL              time
STR             R0, [R4,#0xE8]
MOV             R0, #stru_72D94 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2FD00
MOVW            R3, #:lower16:off_67964
POP             {R4-R8,LR}
MOVT            R3, #:upper16:off_67964
LDR             R3, [R3] ; sub_1EAA0
BX              R3      ; sub_1EAA0

loc_2FCD4
BL              sub_2FB78
LDR             R3, [R0,#0x28]
LDR             R2, [R0,#0x2C]
ADDS            R3, R3, R4
ADC             R2, R2, R5
STR             R3, [R0,#0x28]
STR             R2, [R0,#0x2C]
B               loc_2FC9C

loc_2FCF4
MOVW            R1, #0x22DE
LDR             R0, =aIncWorkStats ; "inc_work_stats"
BL              sub_2CB60

loc_2FD00
MOVW            R1, #0x22EC
LDR             R0, =aIncWorkStats ; "inc_work_stats"
BL              sub_2CBBC
; End of function sub_2FC20

off_2FD0C DCD aIncWorkStats ; "inc_work_stats"



; int sub_2FD10()
sub_2FD10
MOVW            R0, #:lower16:stru_76148
PUSH            {R4,LR}
MOVT            R0, #:upper16:stru_76148 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2FD84
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_2FD90
MOV             R0, #stru_76148 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2FD9C
MOVW            R3, #:lower16:byte_686E8
LDR             R0, =rwlock ; rwlock
MOVT            R3, #:upper16:byte_686E8
LDR             R3, [R3,#(dword_68B74 - 0x686E8)]
LDR             R4, [R3,#4]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2FDA8
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4,PC}

loc_2FD84
MOV             R1, #0x1D40
LDR             R0, =aCpPrio ; "cp_prio"
BL              sub_2CB60

loc_2FD90
MOV             R1, #0x1D40
LDR             R0, =aCpPrio ; "cp_prio"
BL              sub_2DCC0

loc_2FD9C
MOV             R1, #0x1D40
LDR             R0, =aCpPrio ; "cp_prio"
BL              sub_2CBBC

loc_2FDA8
MOVW            R1, #0x1D42
LDR             R0, =aCpPrio ; "cp_prio"
BL              sub_2D6AC
; End of function sub_2FD10

off_2FDB4 DCD rwlock
off_2FDB8 DCD aCpPrio   ; "cp_prio"



; void __fastcall sub_2FDBC(_DWORD *)
sub_2FDBC

var_80C= -0x80C
s= -0x804

MOVW            R3, #:lower16:byte_686E8
PUSH            {R4,R5,LR}
MOVT            R3, #:upper16:byte_686E8
MOV             R2, #0
SUB             SP, SP, #0x800
MOV             R4, R0
LDR             R3, [R3,#(dword_68AE4 - 0x686E8)]
SUB             SP, SP, #0xC
STR             R2, [R0,#0x1C]
CMP             R3, R2
BEQ             loc_2FE6C

loc_2FDE8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2FE10
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2FE4C

loc_2FE10
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aPoolDSAlive ; "Pool %d %s alive"
LDR             R3, [R4]
MOVT            R2, #:upper16:aPoolDSAlive ; "Pool %d %s alive"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x80C+s ; s
STR             R12, [SP,#0x80C+var_80C]
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_2FE40
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_2FE4C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_2FE10
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_2FE6C
LDR             R5, [R0,#4]
BL              sub_2FD10
CMP             R5, R0
BGE             loc_2FDE8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2FEB8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2FEB8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_2FE40

loc_2FEB8
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aPoolDSAliveTes ; "Pool %d %s alive, testing stability"
LDR             R3, [R4]
ADD             R0, SP, #0x80C+s ; s
MOVT            R2, #:upper16:aPoolDSAliveTes ; "Pool %d %s alive, testing stability"
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x80C+var_80C]
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_2FDBC




; void __fastcall sub_2FEF4(_DWORD *)
sub_2FEF4
MOVW            R3, #:lower16:byte_72D90
PUSH            {R4,LR}
MOVT            R3, #:upper16:byte_72D90
SUB             SP, SP, #0x800
MOV             R4, R0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2FF28
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2FF60

loc_2FF28
MOVW            R2, #:lower16:aStratumConnect ; "Stratum connection to pool %d resumed"
LDR             R3, [R4]
MOV             R0, SP  ; s
MOVT            R2, #:upper16:aStratumConnect ; "Stratum connection to pool %d resumed"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
MOV             R0, R4
BL              sub_2FDBC
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_2FF60
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_2FF28
MOV             R0, R4
BL              sub_2FDBC
ADD             SP, SP, #0x800
POP             {R4,PC}
; End of function sub_2FEF4




; void __fastcall sub_2FF84(int)
sub_2FF84
PUSH            {R4,LR}
ADD             R1, R0, #0x61 ; 'a'
MOV             R4, R0
BL              sub_2CC84
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R0, R4
POP             {R4,LR}
B               sub_2FEF4
; End of function sub_2FF84




; int __fastcall sub_2FFA8(int)
sub_2FFA8
LDR             R3, [R0,#0x64]
CMP             R3, #1
BEQ             loc_2FFBC
MOV             R0, #0
BX              LR

loc_2FFBC
PUSH            {R4-R6,LR}
MOV             R5, #byte_686E8
LDR             R3, [R5,#(dword_68AE4 - 0x686E8)]
SUB             R3, R3, #3
CMP             R3, #1
BHI             loc_2FFE0

loc_2FFD8
MOV             R0, #1
POP             {R4-R6,PC}

loc_2FFE0
LDRB            R3, [R0,#0x290]
CMP             R3, #0
BEQ             loc_2FFF8
LDRB            R3, [R0,#0x61]
CMP             R3, #0
BNE             loc_2FFD8

loc_2FFF8
MOV             R4, R0
BL              sub_2FB78
CMP             R4, R0
BEQ             loc_2FFD8
LDR             R3, [R4,#0x2EC]
CMP             R3, #0
BNE             loc_2FFD8
LDR             R3, [R5,#(dword_68AE4 - 0x686E8)]
CMP             R3, #0
BEQ             loc_30028

loc_30020
LDRB            R0, [R5,#(byte_68B78 - 0x686E8)]
POP             {R4-R6,PC}

loc_30028
LDR             R4, [R4,#4]
BL              sub_2FD10
CMP             R4, R0
BGE             loc_30020
B               loc_2FFD8
; End of function sub_2FFA8




; _BYTE *sub_3003C()
sub_3003C

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4-R9,LR}
MOVW            R6, #:lower16:aCgminerC ; "cgminer.c"
LDR             R8, =aAddPool ; "add_pool"
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOVT            R6, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x301
MOV             R5, #dword_72E60
MOV             R2, R6
MOV             R3, R8
STR             R1, [SP,#0x814+var_814]
MOVW            R0, #0x748
MOV             R1, #1
BL              sub_1F8B0
LDR             R12, [R5]
MOVW            R7, #:lower16:dword_72F04
MOV             R4, R0
MOVW            LR, #0x30D
MOVT            R7, #:upper16:dword_72F04
MOV             R9, #0
STR             R12, [R0]
MOV             R2, R6
LDR             R1, [R5]
MOV             R3, R8
STRB            R9, [R0,#0x294]
STR             R12, [R4,#4]
ADD             R1, R1, #2
STR             LR, [SP,#0x814+var_814]
MOV             R1, R1,LSL#2
LDR             R0, [R7]
BL              sub_1F940
LDR             R2, [R5]
MOV             R3, R0
MOV             R1, R9  ; mutexattr
STR             R3, [R7]
ADD             R0, R4, #0xBC ; mutex
ADD             R12, R2, #1
STR             R12, [R5]
STR             R4, [R3,R2,LSL#2]
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; cond_attr
BNE             loc_301D4
ADD             R0, R4, #0x128 ; cond
BL              pthread_cond_init
SUBS            R1, R0, #0 ; mutexattr
BNE             loc_301F0
ADD             R0, R4, #0xD4 ; mutex
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; attr
BNE             loc_30220
ADD             R0, R4, #0xEC ; rwlock
BL              pthread_rwlock_init
SUBS            R1, R0, #0 ; mutexattr
BNE             loc_3023C
ADD             R0, R4, #0x2D0 ; mutex
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; mutexattr
BNE             loc_3024C
ADD             R0, R4, #0x2F4 ; mutex
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; attr
BNE             loc_30268
ADD             R0, R4, #0x30C ; rwlock
BL              pthread_rwlock_init
SUBS            R5, R0, #0
BNE             loc_3018C
MOVW            R3, #:lower16:aMethodGetworkP ; "{\"method\": \"getwork\", \"params\": ["...
ADD             R2, R4, #0x158
MOVT            R3, #:upper16:aMethodGetworkP ; "{\"method\": \"getwork\", \"params\": ["...
MOV             R0, #0xFFFFFFFF
MOV             R1, #1
STR             R0, [R4,#0x88]
STR             R5, [R4,#0xB8]
STR             R3, [R4,#0xA0]
STR             R2, [R4,#0x158]
STR             R2, [R4,#0x15C]
STR             R1, [R4,#0x38]
BL              sub_2A248
MOV             R0, R4
STRB            R5, [R4,#0x244]
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R9,PC}

loc_3018C
BL              __errno_location
LDR             R3, [R0]
MOVW            R1, #0x319

loc_30198
MOVW            R2, #:lower16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...

loc_301A4
STR             R1, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
STR             R6, [SP,#0x814+var_814]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1

loc_301C0
MOV             R0, #3
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_301D4
BL              __errno_location
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOV             R1, #0x310
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
B               loc_301A4

loc_301F0
MOVW            R12, #:lower16:aFailedToPthrea ; "Failed to pthread_cond_init in add_pool"
ADD             LR, SP, #0x814+s
MOVT            R12, #:upper16:aFailedToPthrea ; "Failed to pthread_cond_init in add_pool"
LDM             R12!, {R0-R3} ; "Failed to pthread_cond_init in add_pool"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "d_cond_init in add_pool"
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1} ; "dd_pool"
STM             LR, {R0,R1}
ADD             R1, SP, #0x814+s
B               loc_301C0

loc_30220
BL              __errno_location
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVW            R1, #0x317
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
B               loc_301A4

loc_3023C
BL              __errno_location
MOVW            R1, #0x317
LDR             R3, [R0]
B               loc_30198

loc_3024C
BL              __errno_location
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOV             R1, #0x318
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
B               loc_301A4

loc_30268
BL              __errno_location
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVW            R1, #0x319
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
B               loc_301A4
; End of function sub_3003C

off_30284 DCD aAddPool  ; "add_pool"



; const char *__fastcall sub_30288(char *s)
sub_30288
PUSH            {R4-R6,LR}
MOV             R4, #byte_686E8
LDR             R3, [R4,#(dword_68B7C - 0x686E8)]
CMP             R3, #0
BNE             loc_30358
LDR             R3, [R4,#(dword_68B80 - 0x686E8)]
CMP             R3, #0
BNE             loc_30358
MOVW            R2, #:lower16:dword_72E60
LDR             R3, [R4,#(dword_68B84 - 0x686E8)]
MOVT            R2, #:upper16:dword_72E60
MOV             R5, R0
LDR             R2, [R2]
ADD             R3, R3, #1
STR             R3, [R4,#(dword_68B84 - 0x686E8)]
CMP             R3, R2
BGT             loc_30368

loc_302D0
MOVW            R2, #:lower16:dword_72F04
SUB             R3, R3, #0xC0000001
MOVT            R2, #:upper16:dword_72F04
MOV             R0, R5  ; s
LDR             R2, [R2]
LDR             R6, [R2,R3,LSL#2]
BL              __strdup
MOV             R4, R0
MOV             R0, R5
ADD             R1, R6, #0xA8
BL              sub_3E5BC
MOVW            R1, #:lower16:(aHttp+4) ; ":"
MOV             R0, R4  ; s
MOVT            R1, #:upper16:(aHttp+4) ; delim
BL              strtok
CMP             R0, #0
STR             R0, [R6,#0xAC]
MOVEQ           R4, #aFailedToFindDe ; "Failed to find : delimited user info"
BEQ             loc_30360
MOVW            R1, #:lower16:(aHttp+4) ; ":"
MOV             R0, #0  ; s
MOVT            R1, #:upper16:(aHttp+4) ; delim
BL              strtok
CMP             R0, #0
MOV             R4, R0
STR             R0, [R6,#0xB0]
MOVNE           R4, #0
BNE             loc_30360
MOV             R1, #1  ; size
MOV             R0, R1  ; nmemb
BL              calloc
STR             R0, [R6,#0xB0]
B               loc_30360

loc_30358
MOV             R4, #aUseOnlyUserPas ; "Use only user + pass or userpass, but n"...

loc_30360
MOV             R0, R4
POP             {R4-R6,PC}

loc_30368
BL              sub_3003C
LDR             R3, [R4,#(dword_68B84 - 0x686E8)]
B               loc_302D0
; End of function sub_30288




; const char *__fastcall sub_30374(const char *)
sub_30374

var_838= -0x838
s= -0x830
var_800= -0x800

PUSH            {R4-R8,LR}
MOV             R4, #byte_686E8
MOV             R2, #dword_72E60
SUB             SP, SP, #0x830
LDR             R3, [R4,#(dword_68B7C - 0x686E8)]
SUB             SP, SP, #8
LDR             R2, [R2]
MOV             R5, R0
ADD             R3, R3, #1
CMP             R3, R2
STR             R3, [R4,#(dword_68B7C - 0x686E8)]
BGT             loc_30404

loc_303AC
MOVW            R2, #:lower16:dword_72F04
LDR             R1, [R4,#(dword_68B88 - 0x686E8)]
MOVT            R2, #:upper16:dword_72F04
SUB             R3, R3, #0xC0000001
LDR             R2, [R2]
CMP             R1, #1
LDR             R7, [R2,R3,LSL#2]
BNE             loc_304D4
MOV             R2, #0x2E ; '.' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x838+s ; s
BL              memset
ADD             R0, SP, #0x838+s
MOV             R1, #0x2E ; '.'
BL              sub_1689C
CMP             R0, #0
MOVNE           R0, #aFailedToGetMod ; "Failed to get modified IP address"
BEQ             loc_30410

loc_303F8
ADD             SP, SP, #0x830
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_30404
BL              sub_3003C
LDR             R3, [R4,#(dword_68B7C - 0x686E8)]
B               loc_303AC

loc_30410               ; s
MOV             R0, R5
BL              strlen
MOV             R6, R0
ADD             R0, SP, #0x838+s ; s
BL              strlen
ADD             R6, R6, R0
ADD             R6, R6, #2
MOV             R0, R6  ; size
BL              malloc
SUBS            R8, R0, #0
MOVEQ           R0, #aMemoryAllocati ; "Memory allocation failed"
BEQ             loc_303F8
ADD             R3, SP, #0x838+s
MOVW            R2, #:lower16:aSS_3 ; "%s.%s"
STR             R3, [SP,#0x838+var_838]
MOV             R1, R6  ; maxlen
MOV             R3, R5
MOVT            R2, #:upper16:aSS_3 ; "%s.%s"
BL              snprintf
ADD             R1, R7, #0xAC
MOV             R0, R8
BL              sub_3E5BC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_304A8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_304A8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_304E0

loc_304A8
MOVW            R2, #:lower16:aOptBitmainUser ; "opt_bitmain_user_ip_cat %d "
LDR             R3, [R4,#(dword_68B88 - 0x686E8)]
ADD             R0, SP, #0x838+var_800 ; s
MOVT            R2, #:upper16:aOptBitmainUser ; "opt_bitmain_user_ip_cat %d "
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x838+var_800
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60
B               loc_304E0

loc_304D4
ADD             R1, R7, #0xAC
MOV             R0, R5
BL              sub_3E5BC

loc_304E0
MOV             R0, #0
ADD             SP, SP, #0x830
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_30374




; const char *__fastcall sub_304F0(const char *)
sub_304F0
MOV             R3, #byte_686E8
LDR             R3, [R3,#(dword_68B84 - 0x686E8)]
CMP             R3, #0
BNE             loc_30508
B               sub_30374

loc_30508
MOV             R0, #aUseOnlyUserPas ; "Use only user + pass or userpass, but n"...
BX              LR
; End of function sub_304F0




; int sub_30514()
sub_30514
PUSH            {R4,LR}
MOV             R4, #byte_686E8
MOV             R2, #dword_72E60
LDR             R3, [R4,#(dword_68B8C - 0x686E8)]
LDR             R2, [R2]
ADD             R3, R3, #1
CMP             R3, R2
STR             R3, [R4,#(dword_68B8C - 0x686E8)]
BLE             loc_30548

loc_30540
BL              sub_3003C
LDR             R3, [R4,#(dword_68B8C - 0x686E8)]

loc_30548
MOVW            R2, #:lower16:dword_72F04
SUB             R3, R3, #0xC0000001
MOVT            R2, #:upper16:dword_72F04
LDR             R2, [R2]
LDR             R0, [R2,R3,LSL#2]
POP             {R4,PC}
; End of function sub_30514

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #4
MOV             R5, R0
BL              sub_30514
MOV             R1, R5
MOV             R4, R0
BL              sub_2A47C
LDR             R5, [R4,#0xA4]
MOV             R1, #aNicehashCom ; ".nicehash.com"
MOV             R0, R5
BL              strstr
CMP             R0, #0
BEQ             loc_30618

loc_3059C
MOVW            R3, #:lower16:byte_686E1
MOV             R2, #1
MOVT            R3, #:upper16:byte_686E1
STRB            R2, [R4,#0x244]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_30608
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_305E0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_30634

loc_305E0
MOVW            R2, #:lower16:aPoolDExtranonc_0 ; "Pool %d extranonce subscribing enabled."
MOV             R1, #0x800
MOVT            R2, #:upper16:aPoolDExtranonc_0 ; "Pool %d extranonce subscribing enabled."
LDR             R3, [R4]
MOV             R0, SP
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_30608
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_30618
MOVW            R1, #:lower16:aXnsub ; "#xnsub"
MOV             R0, R5
MOVT            R1, #:upper16:aXnsub ; "#xnsub"
BL              strstr
CMP             R0, #0
BNE             loc_3059C
B               loc_30608

loc_30634
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_305E0
B               loc_30608
PUSH            {R4-R7,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
MOV             R1, #0x3B ; ';'
MOV             R4, R0
BL              strchr
SUBS            R5, R0, #0
BEQ             loc_306DC
MOV             R0, R4
MOV             R7, #0
BL              strlen
STRB            R7, [R5]
MOV             R6, R0
MOV             R0, R4
BL              strlen
CMP             R0, #0
MOVEQ           R0, #aNoParameterFor ; "No parameter for quota found"
BEQ             loc_306D0
ADD             R5, R0, #1
SUB             R6, R6, R5
CMP             R6, R7
MOVLE           R0, #aNoParameterFor_0 ; "No parameter for URL found"
BLE             loc_306D0
MOV             R1, R7
MOV             R2, #0xA
MOV             R0, R4
BL              strtol
SUBS            R6, R0, #0
MOVLT           R0, #aInvalidNegativ ; "Invalid negative parameter for quota se"...
BGE             loc_306F0

loc_306D0
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_306DC
MOV             R0, #aNoSemicolonSep ; "No semicolon separated quota;URL pair f"...
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_306F0
ADD             R4, R4, R5
BL              sub_30514
MOV             R1, R4
MOV             R5, R0
BL              sub_2A47C
MOVW            R3, #:lower16:byte_72D90
STR             R6, [R5,#0x38]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, R7
BNE             loc_30744
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R7
BNE             loc_30744
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_30770

loc_30744
MOVW            R2, #:lower16:aSettingPoolDTo ; "Setting pool %d to quota %d"
LDR             R3, [R5]
MOVT            R2, #:upper16:aSettingPoolDTo ; "Setting pool %d to quota %d"
MOV             R1, #0x800
STR             R6, [SP]
ADD             R0, SP, #8
BL              snprintf
ADD             R1, SP, #8
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_30770
BL              sub_2A248
MOV             R0, #0
B               loc_306D0



; const char *__fastcall sub_3077C(int)
sub_3077C
PUSH            {R4-R6,LR}
MOV             R4, #byte_686E8
LDR             R3, [R4,#(dword_68B84 - 0x686E8)]
CMP             R3, #0
BEQ             loc_307A0
MOV             R0, #aUseOnlyUserPas ; "Use only user + pass or userpass, but n"...
POP             {R4-R6,PC}

loc_307A0
MOVW            R2, #:lower16:dword_72E60
LDR             R3, [R4,#(dword_68B80 - 0x686E8)]
MOVT            R2, #:upper16:dword_72E60
MOV             R5, R0
LDR             R2, [R2]
ADD             R3, R3, #1
STR             R3, [R4,#(dword_68B80 - 0x686E8)]
CMP             R3, R2
BGT             loc_307EC

loc_307C4
MOVW            R2, #:lower16:dword_72F04
SUB             R3, R3, #0xC0000001
MOVT            R2, #:upper16:dword_72F04
MOV             R0, R5
LDR             R2, [R2]
LDR             R1, [R2,R3,LSL#2]
ADD             R1, R1, #0xB0
BL              sub_3E5BC
MOV             R0, #0
POP             {R4-R6,PC}

loc_307EC
BL              sub_3003C
LDR             R3, [R4,#(dword_68B80 - 0x686E8)]
B               loc_307C4
; End of function sub_3077C




; int sub_307F8()
sub_307F8
PUSH            {R4,LR}
MOV             R4, #byte_686E8
MOV             R2, #dword_72E60
SUB             SP, SP, #0x800
LDR             R3, [R4,#(dword_68B90 - 0x686E8)]
LDR             R2, [R2]
ADD             R3, R3, #1
CMP             R3, R2
STR             R3, [R4,#(dword_68B90 - 0x686E8)]
BGT             loc_308B4

loc_30828
MOVW            R1, #:lower16:byte_686E1
MOVW            R2, #:lower16:dword_72F04
MOVT            R1, #:upper16:byte_686E1
MOVT            R2, #:upper16:dword_72F04
LDRB            R1, [R1]
SUB             R3, R3, #0xC0000001
LDR             R2, [R2]
CMP             R1, #0
LDR             R4, [R2,R3,LSL#2]
BEQ             loc_308A0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_30878
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_308C0

loc_30878
MOVW            R2, #:lower16:aEnableExtranon ; "Enable extranonce subscribe on %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aEnableExtranon ; "Enable extranonce subscribe on %d"
MOV             R0, SP  ; s
LDR             R3, [R4]
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_308A0
ADD             R0, R4, #0x244
BL              sub_3E4D8
MOV             R0, #0
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_308B4
BL              sub_3003C
LDR             R3, [R4,#(dword_68B90 - 0x686E8)]
B               loc_30828

loc_308C0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_30878
B               loc_308A0
; End of function sub_307F8




; void __fastcall sub_308D8(pthread_rwlock_t *)
sub_308D8

var_814= -0x814
var_808= -0x808
s= -0x804

PUSH            {R4,R5,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0x810
MOV             R3, #0
SUB             SP, SP, #0xC
STR             R3, [SP,#0x81C+var_808]
BEQ             loc_30908
ADD             R5, R4, #0x140
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_trywrlock
SUBS            R3, R0, #0
BEQ             loc_30914

loc_30908
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_30914
LDR             R2, [R4,#0x164]
MOV             R0, R5  ; rwlock
STR             R3, [R4,#0x164]
STR             R2, [SP,#0x81C+var_808]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_309F4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [SP,#0x81C+var_808]
CMP             R3, #0
BEQ             loc_30908
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x25FA
ADD             R0, SP, #0x81C+var_808
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aFlushQueue ; "flush_queue"
BL              sub_2A70C
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_30908
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_309A0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_309DC

loc_309A0
MOVW            LR, #:lower16:aDiscardedQueue ; "Discarded queued work item"
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aDiscardedQueue ; "Discarded queued work item"
LDM             LR!, {R0-R3} ; "Discarded queued work item"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; " work item"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x81C+s
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #7
MOV             R2, #0
STRB            R3, [R12]
BL              sub_1DD60
B               loc_30908

loc_309DC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_309A0
B               loc_30908

loc_309F4
BL              __errno_location
LDR             LR, =aFlushQueue ; "flush_queue"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x25F6
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x81C+var_814]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x81C+s ; s
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230
; End of function sub_308D8

off_30A44 DCD aFlushQueue ; "flush_queue"



; int sub_30A48()
sub_30A48

var_850= -0x850
var_848= -0x848
info= -0x840
s= -0x800

PUSH            {R4-R8,R10,R11,LR}
SUB             SP, SP, #0x850
ADD             R0, SP, #0x850+info ; info
BL              sysinfo
CMP             R0, #0
BEQ             loc_30ADC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_30A88
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_30E38

loc_30A88
BL              __errno_location
LDR             R4, [R0]
MOV             R0, R4  ; errnum
BL              strerror
MOVW            R2, #:lower16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
STR             R0, [SP,#0x850+var_850]
MOVT            R2, #:upper16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
ADD             R0, SP, #0x850+s ; s
BL              snprintf
ADD             R1, SP, #0x850+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_30AC4               ; timer
MOV             R0, #0
BL              time
MOV             R3, #dword_76194
STR             R0, [R3]
B               loc_30AEC

loc_30ADC
LDR             R2, [SP,#0x850+info]
MOV             R3, #dword_76194
STR             R2, [R3]

loc_30AEC
LDR             R0, =dword_68B30
BL              sub_206A0
LDR             R1, =dword_68B30
ADD             R0, R1, #0x64 ; 'd'
BL              sub_235FC
MOVW            R2, #:lower16:dbl_761C8
MOV             R0, #0
MOV             R1, #0
MOVT            R2, #:upper16:dbl_761C8
LDR             R3, =unk_68BA0
MOVW            LR, #:lower16:dbl_762D8
STRD            R0, R1, [R2]
MOVW            R12, #:lower16:dbl_762D0
MOVW            R2, #:lower16:dbl_72EC0
MOVT            LR, #:upper16:dbl_762D8
MOVT            R12, #:upper16:dbl_762D0
MOVT            R2, #:upper16:dbl_72EC0
STRD            R0, R1, [LR]
MOV             R4, R0
STRD            R0, R1, [R12]
MOVW            LR, #:lower16:dbl_72D88
MOVW            R12, #:lower16:dword_72ED0
STRD            R0, R1, [R2]
MOV             R5, R1
ADD             R2, R3, #0x60 ; '`'
MOVT            LR, #:upper16:dbl_72D88
MOVT            R12, #:upper16:dword_72ED0
STRD            R0, R1, [LR]
STRD            R0, R1, [R12]

loc_30B60
STRD            R4, R5, [R3],#8
CMP             R3, R2
BNE             loc_30B60
MOVW            R2, #:lower16:dword_72E60
MOVW            R3, #:lower16:dword_76064
MOVT            R2, #:upper16:dword_72E60
MOVT            R3, #:upper16:dword_76064
LDR             LR, [R2]
MOV             R2, #0
STR             R2, [R3]
MOV             R3, #dword_72F14
MOVW            R12, #:lower16:dword_74F88
STR             R2, [R3]
MOVW            R3, #:lower16:dword_76074
MOVT            R12, #:upper16:dword_74F88
MOVT            R3, #:upper16:dword_76074
STR             R2, [R3]
MOVW            R3, #:lower16:qword_72EF0
STR             R2, [R12]
MOVT            R3, #:upper16:qword_72EF0
STR             R2, [R12,#(dword_74F8C - 0x74F88)]
MOV             R12, #qword_74FB8
STR             R2, [R3]
STR             R2, [R3,#(qword_72EF0+4 - 0x72EF0)]
MOVW            R3, #:lower16:qword_762C8
STR             R2, [R12]
MOVT            R3, #:upper16:qword_762C8
STR             R2, [R12,#(qword_74FB8+4 - 0x74FB8)]
MOV             R12, #qword_75008
STR             R2, [R3]
STR             R2, [R3,#(qword_762C8+4 - 0x762C8)]
MOVW            R1, #:lower16:byte_686E8
STR             R2, [R12]
MOVW            R3, #:lower16:qword_72DC8
STR             R2, [R12,#(qword_75008+4 - 0x75008)]
MOVW            R12, #:lower16:dbl_74F28
MOVT            R3, #:upper16:qword_72DC8
MOVT            R1, #:upper16:byte_686E8
MOVT            R12, #:upper16:dbl_74F28
STR             R2, [R3]
STRD            R4, R5, [R12]
MOVW            R0, #:lower16:dword_761DC
STR             R2, [R3,#(qword_72DC8+4 - 0x72DC8)]
MOVW            R12, #:lower16:dbl_74FB0
STR             R2, [R1,#(dword_68C00 - 0x686E8)]
MOVW            R3, #:lower16:dbl_72EF8
MOVW            R1, #:lower16:dword_76060
LDR             R6, =dword_681C8
MOVT            R0, #:upper16:dword_761DC
MOVT            R1, #:upper16:dword_76060
MOVT            R12, #:upper16:dbl_74FB0
MOVT            R3, #:upper16:dbl_72EF8
STR             R2, [R0]
CMP             LR, R2
STR             R2, [R1]
MOVW            R0, #:lower16:dword_72F08
STRD            R4, R5, [R12]
MOVW            R1, #:lower16:dword_72DAC
STRD            R4, R5, [R3]
MOV             R5, #0
MOV             R4, #0
MOVT            R5, #0x3FF0
MOVT            R0, #:upper16:dword_72F08
MOVT            R1, #:upper16:dword_72DAC
STR             R2, [R0]
MOV             R0, R2
STR             R2, [R1]
MOV             R1, R2
STRD            R4, R5, [R6,#(dbl_681C0 - 0x681C8)]
STRD            R4, R5, [R6,#(dword_681D8 - 0x681C8)]
STRD            R4, R5, [R6,#(dbl_681E0 - 0x681C8)]
BLE             loc_30CE8
MOVW            R3, #:lower16:dword_72F04
MOV             R4, #0
MOVT            R3, #:upper16:dword_72F04
MOV             R5, #0
LDR             R12, [R3]
ADD             LR, R12, LR,LSL#2

loc_30CA4
LDR             R3, [R12],#4
CMP             LR, R12
STR             R2, [R3,#0x74]
STRD            R0, R1, [R3,#8]
STRD            R0, R1, [R3,#0x10]
STR             R2, [R3,#0x78]
STR             R2, [R3,#0x7C]
STR             R2, [R3,#0x80]
STR             R2, [R3,#0x84]
STR             R2, [R3,#0x160]
STRD            R0, R1, [R3,#0x28]
STRD            R4, R5, [R3,#0x48]
STRD            R4, R5, [R3,#0x50]
STRD            R4, R5, [R3,#0x58]
STR             R4, [R3,#0x168]
STR             R5, [R3,#0x16C]
BNE             loc_30CA4

loc_30CE8
MOV             R7, #dword_74FE0
BL              sub_2B2E4
LDR             R3, [R7]
CMP             R3, #0
BLE             loc_30DB0
LDR             R8, =dword_68B30
MOVW            R6, #:lower16:stru_72ED8
MOV             R10, #0
MOV             R11, #0
MOVT            R6, #:upper16:stru_72ED8
MOV             R5, #0

loc_30D18
MOV             R0, R5
BL              sub_2DFF4
MOV             R1, R8
MOV             R4, R0
ADD             R0, R0, #0x170
BL              sub_235FC
MOV             R0, R6  ; mutex
BL              pthread_mutex_lock
SUBS            R1, R0, #0
BNE             loc_30DB8
MOV             R2, #0
MOV             R3, #0
STRD            R10, R11, [R4,#0x50]
MOV             R0, R6  ; mutex
STR             R1, [R4,#0x24]
STR             R1, [R4,#0x28]
STR             R1, [R4,#0x2C]
STRD            R10, R11, [R4,#0x58]
STR             R1, [R4,#0xDC]
STRD            R10, R11, [R4,#0xC8]
STRD            R10, R11, [R4,#0xD0]
STRD            R10, R11, [R4,#0xE0]
STRD            R2, R3, [R4,#0xC0]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_30E08
MOVW            R3, #:lower16:off_67964
ADD             R5, R5, #1
MOVT            R3, #:upper16:off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [R4,#4]
MOV             R0, R4
LDR             R3, [R3,#0x60]
BLX             R3
LDR             R3, [R7]
CMP             R3, R5
BGT             loc_30D18

loc_30DB0
ADD             SP, SP, #0x850
POP             {R4-R8,R10,R11,PC}

loc_30DB8
BL              __errno_location
LDR             LR, =aZeroStats ; "zero_stats"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x850+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1865
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x850+var_848]

loc_30DE4               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x850+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_30E08
BL              __errno_location
LDR             LR, =aZeroStats ; "zero_stats"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1872
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x850+s
STR             R12, [SP,#0x850+var_848]
B               loc_30DE4

loc_30E38
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_30AC4
B               loc_30A88
; End of function sub_30A48

off_30E50 DCD dword_68B30
off_30E54 DCD unk_68BA0
off_30E58 DCD dword_681C8
off_30E5C DCD aZeroStats ; "zero_stats"



; int __fastcall sub_30E60(int)
sub_30E60

var_810= -0x810
var_808= -0x808
s= -0x800

MOVW            R3, #:lower16:byte_72D90
PUSH            {R4,LR}
MOVT            R3, #:upper16:byte_72D90
SUB             SP, SP, #0x810
MOV             R4, R0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_30E94
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_30F4C

loc_30E94
LDR             R3, [R4,#0x24]
MOV             R2, #aSDInvalidNonce ; "%s %d: invalid nonce - HW error"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x810+s ; s
LDR             LR, [R3,#4]
LDR             R12, [R3,#8]
LDR             R3, [LR,#8]
STR             R12, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_30ECC               ; mutex
MOV             R0, #stru_72D94
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_30F64
LDR             R12, [R4,#0x24]
MOV             R3, #dword_76060
MOVW            R0, #:lower16:stru_72D94
LDR             R1, [R3]
MOVT            R0, #:upper16:stru_72D94 ; mutex
LDR             R2, [R12,#0x2C]
ADD             R1, R1, #1
ADD             R2, R2, #1
STR             R1, [R3]
STR             R2, [R12,#0x2C]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_30FB4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [R4,#0x24]
LDR             R3, [R3,#4]
LDR             R3, [R3,#0x54]
CMP             R3, #0
BEQ             loc_30F44
MOV             R0, R4
BLX             R3

loc_30F44
ADD             SP, SP, #0x810
POP             {R4,PC}

loc_30F4C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_30ECC
B               loc_30E94

loc_30F64
BL              __errno_location
LDR             LR, =aIncHwErrors ; "inc_hw_errors"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2284
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]

loc_30F90               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_30FB4
BL              __errno_location
LDR             LR, =aIncHwErrors ; "inc_hw_errors"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2287
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_30F90
; End of function sub_30E60

off_30FE4 DCD aIncHwErrors ; "inc_hw_errors"



; int __fastcall sub_30FE8(int, int)
sub_30FE8

var_814= -0x814
var_80C= -0x80C
s= -0x804

MOVW            R3, #:lower16:byte_72D90
PUSH            {R4,R5,LR}
MOVT            R3, #:upper16:byte_72D90
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R0
LDRB            R3, [R3]
MOV             R5, R1
CMP             R3, #0
BNE             loc_31024
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_310E0

loc_31024
LDR             R3, [R4,#0x24]
MOV             R2, #aSDInvalidNonce_0 ; "%s%d: invalid nonce - HW error"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x814+s ; s
LDR             LR, [R3,#4]
LDR             R12, [R3,#8]
LDR             R3, [LR,#8]
STR             R12, [SP,#0x814+var_814]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_3105C               ; mutex
MOV             R0, #stru_72D94
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_310F8
LDR             R12, [R4,#0x24]
MOV             R3, #dword_76060
MOVW            R0, #:lower16:stru_72D94
LDR             R2, [R3]
MOVT            R0, #:upper16:stru_72D94 ; mutex
LDR             R1, [R12,#0x2C]
ADD             R2, R2, R5
ADD             R1, R1, R5
STR             R2, [R3]
STR             R1, [R12,#0x2C]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_31148
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [R4,#0x24]
LDR             R3, [R3,#4]
LDR             R3, [R3,#0x54]
CMP             R3, #0
BEQ             loc_310D4
MOV             R0, R4
BLX             R3

loc_310D4
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_310E0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_3105C
B               loc_31024

loc_310F8
BL              __errno_location
LDR             LR, =aIncHwErrorsWit ; "inc_hw_errors_with_diff"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2292
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]

loc_31124               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_31148
BL              __errno_location
LDR             LR, =aIncHwErrorsWit ; "inc_hw_errors_with_diff"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2295
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_31124
; End of function sub_30FE8

off_31178 DCD aIncHwErrorsWit ; "inc_hw_errors_with_diff"



; unsigned __int64 __fastcall sub_3117C(int)
sub_3117C

var_810= -0x810
var_808= -0x808
s= -0x800

PUSH            {R4-R8,LR}
MOV             R4, R0
VPUSH           {D8}
SUB             SP, SP, #0x810
VLDR            D8, =6.27710174e57
LDRD            R0, R1, [R0,#0xD8]
BLX             sub_4AB04
VMOV            D7, R0, R1
LDRD            R0, R1, [R4,#0xD0]
VMUL.F64        D8, D7, D8
BLX             sub_4AB04
VLDR            D7, =3.40282367e38
VMOV            D6, R0, R1
LDRD            R0, R1, [R4,#0xC8]
VMLA.F64        D8, D6, D7
BLX             sub_4AB04
VLDR            D7, =1.84467441e19
VMOV            D6, R0, R1
LDRD            R0, R1, [R4,#0xC0]
VMLA.F64        D8, D6, D7
BLX             sub_4AB04
VMOV            D7, R0, R1
VLDR            D0, =2.69595353e67
VADD.F64        D8, D7, D8
VCMP.F64        D8, #0.0
VMRS            APSR_nzcv, FPSCR
VLDREQ          D8, =0.0
VDIV.F64        D0, D0, D8
BL              round
VMOV            R0, R1, D0
BLX             sub_4ABD0
MOV             R6, R0
MOV             R0, #stru_76148 ; mutex
MOV             R7, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_312A0
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_wrlock
SUBS            R8, R0, #0
BNE             loc_312F0
LDR             R12, =dword_68B08
LDRD            R2, R3, [R12,#(qword_68B00 - 0x68B08)]
CMP             R3, R7
CMPEQ           R2, R6
BCC             loc_31320

loc_31238
LDR             R3, [R4,#0x104]
ADD             R3, R3, #0x170
LDRD            R4, R5, [R3]
CMP             R5, R7
CMPEQ           R4, R6
BCC             loc_31344

loc_31250               ; rwlock
LDR             R0, =rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3134C
MOV             R0, #stru_76148 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3137C
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R8, #0
BNE             loc_313AC

loc_3128C
MOV             R0, R6
MOV             R1, R7
ADD             SP, SP, #0x810
VPOP            {D8}
POP             {R4-R8,PC}

loc_312A0
BL              __errno_location
LDR             LR, =aShareDiff ; "share_diff"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x145E
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]

loc_312CC               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_312F0
BL              __errno_location
LDR             LR, =aShareDiff ; "share_diff"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x145E
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_312CC

loc_31320               ; int
STR             R8, [SP,#0x810+var_810]
MOV             R3, #8  ; maxlen
LDR             R2, =dword_681C8 ; s
MOV             R0, R6  ; int
MOV             R1, R7  ; int
STRD            R6, R7, [R12,#(qword_68B00 - 0x68B08)]
MOV             R8, #1
BL              sub_287D8
B               loc_31238

loc_31344
STRD            R6, R7, [R3]
B               loc_31250

loc_3134C
BL              __errno_location
LDR             LR, =aShareDiff ; "share_diff"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x146C
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_312CC

loc_3137C
BL              __errno_location
LDR             LR, =aShareDiff ; "share_diff"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x146C
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_312CC

loc_313AC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_313E8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_313E8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3128C

loc_313E8
MOVW            R2, #:lower16:aNewBestShareS ; "New best share: %s"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aNewBestShareS ; "New best share: %s"
LDR             R3, =dword_681C8
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_3128C
; End of function sub_3117C

ALIGN 8
dbl_31418 DCFD 6.27710174e57
dbl_31420 DCFD 3.40282367e38
dbl_31428 DCFD 1.84467441e19
dbl_31430 DCFD 2.69595353e67
dbl_31438 DCFD 0.0
off_31440 DCD rwlock
off_31444 DCD dword_68B08
off_31448 DCD aShareDiff ; "share_diff"
off_3144C DCD dword_681C8



; int __fastcall sub_31450(int *, int)
sub_31450

var_80C= -0x80C
s= -0x804

LDR             R3, =dbl_681E8
PUSH            {R4-R7,LR}
MOV             R4, R1
VPUSH           {D8}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R6, R0
VLDR            D8, [R3]
MOV             R0, R1
BL              sub_3117C
STRD            R0, R1, [R4,#0xE8]
BLX             sub_4AB04
VMOV            D7, R0, R1
VCMPE.F64       D8, D7
VMRS            APSR_nzcv, FPSCR
BLS             loc_31554

loc_31490               ; mutex
MOV             R0, #stru_72D94
BL              pthread_mutex_lock
SUBS            R7, R0, #0
BNE             loc_315DC
MOVW            R5, #:lower16:qword_72DC8
VLDR            D8, [R4,#0xE0]
MOVT            R5, #:upper16:qword_72DC8
LDRD            R0, R1, [R5]
BLX             sub_4AB14
VMOV            D7, R0, R1
VADD.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
STRD            R0, R1, [R5]
LDR             R5, [R6]
LDRD            R0, R1, [R5,#0xC0]
BLX             sub_4AB14
VMOV            D7, R0, R1
VADD.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
STRD            R0, R1, [R5,#0xC0]
LDR             R5, [R4,#0x104]
LDRD            R0, R1, [R5,#0x28]
BLX             sub_4AB14
VLDR            D7, [R4,#0xE0]
VMOV            D6, R0, R1
VADD.F64        D7, D6, D7
VMOV            R0, R1, D7
BLX             sub_4ABAC
STRD            R0, R1, [R5,#0x28]
MOV             R0, R7  ; timer
LDR             R4, [R6]
BL              time
STR             R0, [R4,#0xE8]
MOV             R0, #stru_72D94 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3162C
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
ADD             SP, SP, #0x810
ADD             SP, SP, #4
VPOP            {D8}
POP             {R4-R7,PC}

loc_31554
MOVW            R3, #:lower16:byte_72D90
LDR             R12, [R4,#0x104]
MOVT            R3, #:upper16:byte_72D90
MOV             R0, #1
LDRB            R2, [R3]
MOV             R3, #dword_76074
STRB            R0, [R4,#0x11B]
LDR             R1, [R12,#0x20]
CMP             R2, #0
LDR             R2, [R3]
ADD             R1, R1, R0
ADD             R2, R2, R0
STR             R1, [R12,#0x20]
STR             R2, [R3]
STRB            R0, [R4,#0x11A]
BNE             loc_315AC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3165C

loc_315AC
LDR             R3, [R4,#0x104]
MOVW            R2, #:lower16:aFoundBlockForP ; "Found block for pool %d!"
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aFoundBlockForP ; "Found block for pool %d!"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R3]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60
B               loc_31490

loc_315DC
BL              __errno_location
LDR             LR, =aUpdateWorkStat ; "update_work_stats"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x22D4
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]

loc_31608               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_3162C
BL              __errno_location
LDR             LR, =aUpdateWorkStat ; "update_work_stats"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x22D9
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_31608

loc_3165C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_31490
B               loc_315AC
; End of function sub_31450

off_31674 DCD dbl_681E8
off_31678 DCD aUpdateWorkStat ; "update_work_stats"



; int __fastcall sub_3167C(int, _DWORD *, int, _DWORD *)
sub_3167C

var_800= -0x800

PUSH            {R4-R6,LR}
SUBS            R5, R3, #0
MOVNE           R3, #0
MOV             R4, R1
SUB             SP, SP, #0x800
MOV             R6, R0
STRNE           R3, [R5]
MOV             R0, R1
STR             R2, [R1,#0x4C]
BL              sub_28C30
LDR             R3, [R4,#0xDC]
CMP             R3, #0
BNE             loc_3175C
MOV             R1, R4
ADD             R0, R6, #0x24 ; '$'
BL              sub_31450
ADD             R1, R4, #0xA0
ADD             R0, R4, #0xC0
BL              sub_1FE0C
SUBS            R4, R0, #0
BNE             loc_31750
CMP             R5, #0
MOVNE           R3, #1
STRNE           R3, [R5]
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3171C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3171C
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #5
MOVLE           R4, R3
BLE             loc_31750

loc_3171C
MOVW            LR, #:lower16:aShareAboveTarg ; "Share above target"
MOV             R12, SP
MOVT            LR, #:upper16:aShareAboveTarg ; "Share above target"
LDM             LR!, {R0-R3} ; "Share above target"
LDR             LR, [LR] ; "et"
STM             R12!, {R0-R3}
MOV             R1, SP
MOV             R2, #0
MOV             R0, #6
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60

loc_31750
MOV             R0, R4
ADD             SP, SP, #0x800
POP             {R4-R6,PC}

loc_3175C
MOV             R0, R6
MOV             R4, #0
BL              sub_30E60
MOV             R0, R4
ADD             SP, SP, #0x800
POP             {R4-R6,PC}
; End of function sub_3167C




; void __fastcall sub_31774(_DWORD *)
sub_31774

var_818= -0x818
var_810= -0x810
var_804= -0x804
s= -0x800

PUSH            {R4-R10,LR}
MOVW            R5, #:lower16:byte_686E8
SUB             SP, SP, #0x810
MOVT            R5, #:upper16:byte_686E8
SUB             SP, SP, #8
MOV             R6, R0
LDR             R0, [R5,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_mutex_lock
SUBS            R7, R0, #0
BNE             loc_319F4
LDR             R3, [R5,#(dword_68C04 - 0x686E8)]
CMP             R3, #0
STR             R3, [SP,#0x818+var_804]
BEQ             loc_319B0
LDR             R2, [R3,#0x104]
LDR             R4, [R3,#0x160]
LDR             R8, =aClearPoolWork ; "clear_pool_work"
CMP             R2, R6
BEQ             loc_317E0

loc_317C0
CMP             R4, #0
STR             R4, [SP,#0x818+var_804]
BEQ             loc_318D4

loc_317CC
MOV             R3, R4
LDR             R4, [R4,#0x160]
LDR             R2, [R3,#0x104]
CMP             R2, R6
BNE             loc_317C0

loc_317E0
LDR             R10, [R3,#0x15C]
LDR             R1, [R5,#(dword_68C04 - 0x686E8)]
CMP             R10, #0
LDR             R0, [R1,#0x158]
BEQ             loc_31960
LDR             R2, [R0,#0x14]
ADD             R12, R3, #0x158
LDR             LR, [R0,#0x10]
SUB             LR, LR, R2
CMP             R3, LR
BEQ             loc_31990

loc_3180C
LDR             R0, [R3,#0x160]
ADD             R2, R10, R2
STR             R0, [R2,#8]
LDR             R9, [R3,#0x160]

loc_3181C
LDR             R0, [R1,#0x158]
CMP             R9, #0
LDRNE           R2, [R0,#0x14]
LDRNE           R0, [R3,#0x15C]
ADDNE           R9, R9, R2
STRNE           R0, [R9,#4]
LDRNE           R0, [R1,#0x158]
LDR             LR, [R3,#0x174]
LDR             R2, [R0,#4]
LDR             R0, [R0]
SUB             R2, R2, #1
AND             R2, R2, LR
ADD             R2, R2, R2,LSL#1
ADD             R0, R0, R2,LSL#2
LDR             LR, [R0,#4]
SUB             LR, LR, #1
STR             LR, [R0,#4]
LDR             R0, [R1,#0x158]
LDR             R0, [R0]
LDR             LR, [R0,R2,LSL#2]
CMP             LR, R12
LDREQ           R1, [R3,#0x168]
STREQ           R1, [R0,R2,LSL#2]
LDR             R0, [R3,#0x164]
LDR             R2, [R3,#0x168]
LDREQ           R1, [R5,#(dword_68C04 - 0x686E8)]
CMP             R0, #0
STRNE           R2, [R0,#0x10]
LDRNE           R2, [R3,#0x168]
CMP             R2, #0
LDRNE           R3, [R3,#0x164]
STRNE           R3, [R2,#0xC]
LDR             R2, [R1,#0x158]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_318AC
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1D32
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R2, R8
ADD             R0, SP, #0x818+var_804
ADD             R7, R7, #1
BL              sub_2A70C
CMP             R4, #0
STR             R4, [SP,#0x818+var_804]
BNE             loc_317CC

loc_318D4               ; mutex
LDR             R0, [R5,#(dword_68B20 - 0x686E8)]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_31A44
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R7, #0
BEQ             loc_31954
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_31924
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_319DC

loc_31924
LDR             R1, [R6]
MOV             R2, #aClearedDWorkIt ; "Cleared %d work items due to stratum di"...
MOV             R3, R7
ADD             R0, SP, #0x818+s ; s
STR             R1, [SP,#0x818+var_818]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x818+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_31954
ADD             SP, SP, #0x810
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_31960
LDR             R9, [R3,#0x160]
CMP             R9, #0
BEQ             loc_31A74
LDR             R2, [R0,#0x14]
ADD             R12, R3, #0x158
LDR             LR, [R0,#0x10]
SUB             LR, LR, R2
CMP             R3, LR
BEQ             loc_31990

loc_31984
MOV             R1, R9
STR             R9, [R5,#(dword_68C04 - 0x686E8)]
B               loc_3181C

loc_31990
ADD             R2, R10, R2
STR             R2, [R0,#0x10]
LDR             R10, [R3,#0x15C]
CMP             R10, #0
BEQ             loc_31A90
LDR             R2, [R1,#0x158]
LDR             R2, [R2,#0x14]
B               loc_3180C

loc_319B0               ; mutex
LDR             R0, [R5,#(dword_68B20 - 0x686E8)]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_31A44
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
ADD             SP, SP, #0x810
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_319DC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_31924
B               loc_31954

loc_319F4
BL              __errno_location
LDR             LR, =aClearPoolWork ; "clear_pool_work"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x818+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D2C
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x818+var_810]

loc_31A20               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x818+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_31A44
BL              __errno_location
LDR             LR, =aClearPoolWork ; "clear_pool_work"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D36
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x818+s
STR             R12, [SP,#0x818+var_810]
B               loc_31A20

loc_31A74               ; ptr
LDR             R0, [R0]
BL              free
LDR             R3, [R5,#(dword_68C04 - 0x686E8)]
LDR             R0, [R3,#0x158] ; ptr
BL              free
STR             R9, [R5,#(dword_68C04 - 0x686E8)]
B               loc_318AC

loc_31A90
LDR             R9, [R3,#0x160]
B               loc_31984
; End of function sub_31774

off_31A98 DCD aClearPoolWork ; "clear_pool_work"



; int __fastcall sub_31A9C(int)
sub_31A9C

var_814= -0x814
var_80C= -0x80C
s= -0x804

PUSH            {R4-R11,LR}
MOV             R5, R0
SUB             SP, SP, #0x810
MOVW            R0, #:lower16:stru_76148
SUB             SP, SP, #4
MOVT            R0, #:upper16:stru_76148 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_31DD4
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_wrlock
SUBS            R9, R0, #0
BNE             loc_31E24
MOVW            R4, #:lower16:byte_686E8
CMP             R5, #0
MOVT            R4, #:upper16:byte_686E8
LDR             R6, [R4,#(dword_68B74 - 0x686E8)]
LDR             LR, [R4,#(dword_68AE4 - 0x686E8)]
LDR             R7, [R6]
BEQ             loc_31C00
LDR             R11, [R5,#4]
CMP             R11, #0
BEQ             loc_31B6C
MOV             R10, #dword_72E60
LDR             R12, [R10]
CMP             R12, #0
BLE             loc_31EEC
MOV             R8, #dword_72F04
LDR             R1, [R8]
MOV             R2, R1
ADD             R12, R1, R12,LSL#2
B               loc_31B28

loc_31B24
LDR             R11, [R5,#4]

loc_31B28
LDR             R0, [R2],#4
LDR             R3, [R0,#4]
CMP             R3, R11
ADDLT           R3, R3, #1
STRLT           R3, [R0,#4]
CMP             R12, R2
BNE             loc_31B24
MOV             R3, #0
STR             R3, [R5,#4]
CMP             LR, #4  ; switch 5 cases
LDRLS           PC, [PC,LR,LSL#2] ; switch jump
B               def_31B50 ; jumptable 00031B50 default case
jpt_31B50 DCD loc_31BA8 ; jump table for switch statement
DCD loc_31D40
DCD loc_31D40
DCD loc_31BA8
DCD loc_31BA8

loc_31B6C               ; switch 5 cases
CMP             LR, #4
LDRLS           PC, [PC,LR,LSL#2] ; switch jump
B               def_31B70 ; jumptable 00031B70 default case
                        ; jumptable 00031C04 default case
                        ; jumptable 00031EF4 default case
jpt_31B70 DCD loc_31B8C ; jump table for switch statement
DCD loc_31D34
DCD loc_31D34
DCD loc_31B8C
DCD loc_31B8C

loc_31B8C               ; jumptable 00031B70 cases 0,3,4
MOV             R10, #dword_72E60 ; jumptable 00031C04 cases 0,3,4
LDR             R12, [R10]

loc_31B98               ; jumptable 00031EF4 cases 0,3,4
CMP             R12, #0
BLE             def_31B70 ; jumptable 00031B70 default case
                        ; jumptable 00031C04 default case
                        ; jumptable 00031EF4 default case
MOV             R8, #dword_72F04

loc_31BA8               ; jumptable 00031B50 cases 0,3,4
MOV             R0, R9
BL              sub_290E8
LDRB            R3, [R0,#0x61]
MOV             R1, R0
CMP             R3, #0
BNE             loc_31BE4
LDR             R3, [R0,#0x64]
CMP             R3, #1
BNE             loc_31BE4
BL              sub_28FB0
CMP             R0, #0
LDREQ           R2, [R1]
LDREQ           R3, [R8]
LDREQ           R5, [R3,R2,LSL#2]
BEQ             loc_31C30

loc_31BE4
LDR             R3, [R10]
ADD             R9, R9, #1
CMP             R3, R9
BGT             loc_31BA8 ; jumptable 00031B50 cases 0,3,4
LDR             R3, [R8]
LDR             R5, [R3,R7,LSL#2]
B               loc_31C30

loc_31C00               ; switch 5 cases
CMP             LR, #4
LDRLS           PC, [PC,LR,LSL#2] ; switch jump
B               def_31B70 ; jumptable 00031B70 default case
                        ; jumptable 00031C04 default case
                        ; jumptable 00031EF4 default case
jpt_31C04 DCD loc_31B8C ; jump table for switch statement
DCD loc_31D58
DCD loc_31D58
DCD loc_31B8C
DCD loc_31B8C

def_31B70               ; jumptable 00031B70 default case
MOV             R3, #dword_72F04 ; jumptable 00031C04 default case
                        ; jumptable 00031EF4 default case
LDR             R3, [R3]
LDR             R5, [R3,R7,LSL#2]

loc_31C30               ; rwlock
LDR             R0, =rwlock
STR             R5, [R4,#(dword_68B74 - 0x686E8)]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_31E54
MOV             R0, #stru_76148 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_31E84
MOV             R7, #off_67964
LDR             R3, [R7] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R6, R5
BEQ             loc_31C80
LDR             R3, [R4,#(dword_68AE4 - 0x686E8)]
SUB             R3, R3, #3
CMP             R3, #1
BHI             loc_31CBC

loc_31C80               ; mutex
LDR             R0, =mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_31EB4
LDR             R0, =cond ; cond
BL              pthread_cond_broadcast
LDR             R0, =mutex ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_31ED0
LDR             R3, [R7] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_31CBC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_31CF8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_31CF8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_31D28

loc_31CF8
LDR             R12, [R5,#0xA4]
MOVW            R2, #:lower16:aSwitchingToPoo ; "Switching to pool %d %s"
LDR             R3, [R5]
MOVT            R2, #:upper16:aSwitchingToPoo ; "Switching to pool %d %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x814+s ; s
STR             R12, [SP,#0x814+var_814]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_31D28
MOV             R0, R6
BL              sub_31774
B               loc_31C80

loc_31D34               ; jumptable 00031B70 cases 1,2
MOV             R3, #dword_72F04 ; jumptable 00031EF4 cases 1,2
LDR             R1, [R3]

loc_31D40               ; jumptable 00031B50 cases 1,2
LDRB            R3, [R5,#0x61]
CMP             R3, #0
BNE             loc_31D64
LDR             R3, [R5]
LDR             R5, [R1,R3,LSL#2]
B               loc_31C30

loc_31D58               ; jumptable 00031C04 cases 1,2
MOV             R3, #dword_72F04
LDR             R1, [R3]

loc_31D64
MOV             R3, #dword_72E60
LDR             R10, [R3]
CMP             R10, #1
MOVGT           R8, R7
MOVGT           R9, #1
BLE             def_31B50 ; jumptable 00031B50 default case

loc_31D80
ADD             R8, R8, #1
CMP             R8, R10
ADDLT           R3, R1, R8,LSL#2
MOVGE           R3, R1
MOVGE           R8, #0
LDR             R5, [R3]
LDRB            R3, [R5,#0x61]
CMP             R3, #0
BNE             loc_31DC0
LDR             R3, [R5,#0x64]
CMP             R3, #1
BNE             loc_31DC0
MOV             R0, R5
BL              sub_28FB0
CMP             R0, #0
BEQ             loc_31C30

loc_31DC0
ADD             R9, R9, #1
CMP             R9, R10
BNE             loc_31D80

def_31B50               ; jumptable 00031B50 default case
LDR             R5, [R1,R7,LSL#2]
B               loc_31C30

loc_31DD4
BL              __errno_location
LDR             LR, =aSwitchPools ; "switch_pools"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x14BB

loc_31DEC
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]

loc_31E00               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_31E24
BL              __errno_location
LDR             LR, =aSwitchPools ; "switch_pools"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x14BB
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_31E00

loc_31E54
BL              __errno_location
LDR             LR, =aSwitchPools ; "switch_pools"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x150C
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_31E00

loc_31E84
BL              __errno_location
LDR             LR, =aSwitchPools ; "switch_pools"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x150C

loc_31E9C
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_31E00

loc_31EB4
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aSwitchPools ; "switch_pools"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1514
B               loc_31DEC

loc_31ED0
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aSwitchPools ; "switch_pools"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1516
B               loc_31E9C

loc_31EEC
STR             R9, [R5,#4]
CMP             LR, #4  ; switch 5 cases
LDRLS           PC, [PC,LR,LSL#2] ; switch jump
B               def_31B70 ; jumptable 00031B70 default case
; End of function sub_31A9C ; jumptable 00031C04 default case
                        ; jumptable 00031EF4 default case
jpt_31EF4 DCD loc_31B98 ; jump table for switch statement
DCD loc_31D34
DCD loc_31D34
DCD loc_31B98
DCD loc_31B98
off_31F10 DCD rwlock
off_31F14 DCD mutex
off_31F18 DCD cond
off_31F1C DCD aSwitchPools ; "switch_pools"



; void __fastcall sub_31F20(int)
sub_31F20

var_808= -0x808
s= -0x800

PUSH            {R4,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #8
ADD             R1, R0, #0x61 ; 'a'
MOV             R4, R0
BL              sub_2CC18
CMP             R0, #0
BEQ             loc_31F4C

loc_31F40
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4,PC}

loc_31F4C
ADD             R0, R4, #0x88
BL              sub_206A0
BL              sub_2FB78
MOVW            R3, #:lower16:byte_72D90
CMP             R4, R0
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
BEQ             loc_31FD8
CMP             R3, #0
BNE             loc_31F9C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_31F9C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_31F40

loc_31F9C
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aPoolDSFailedTo ; "Pool %d %s failed to return work"
LDR             R3, [R4]
ADD             R0, SP, #0x808+s ; s
MOVT            R2, #:upper16:aPoolDSFailedTo ; "Pool %d %s failed to return work"
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x808+var_808]
BL              snprintf
ADD             R1, SP, #0x808+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4,PC}

loc_31FD8
CMP             R3, #0
BNE             loc_31FF4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_32038

loc_31FF4
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aPoolDSNotRespo ; "Pool %d %s not responding!"
LDR             R3, [R4]
MOVT            R2, #:upper16:aPoolDSNotRespo ; "Pool %d %s not responding!"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x808+s ; s
STR             R12, [SP,#0x808+var_808]
BL              snprintf
ADD             R1, SP, #0x808+s
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_32024
MOV             R0, #0
BL              sub_31A9C
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4,PC}

loc_32038
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_31FF4
B               loc_32024
; End of function sub_31F20



; Attributes: noreturn

; void __noreturn sub_32050()
sub_32050

var_84C= -0x84C
var_848= -0x848
var_844= -0x844
var_83C= -0x83C
var_838= -0x838
mutex= -0x834
var_830= -0x830
var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_820= -0x820
tp= -0x81C
var_814= -0x814
var_80C= -0x80C
s= -0x804

PUSH            {R4-R11,LR}
MOV             R1, #0  ; oldtype
VPUSH           {D8-D9}
SUB             SP, SP, #0x840
SUB             SP, SP, #0xC
MOV             R0, #1  ; type
BL              pthread_setcanceltype
MOVW            R0, #:lower16:aWatchpool ; "Watchpool"
MOVW            R3, #:lower16:dword_72DB0
MOVW            R2, #:lower16:off_67964
MOVW            R1, #:lower16:off_67A68 ; "--version-file"
MOVT            R3, #:upper16:dword_72DB0
MOVT            R2, #:upper16:off_67964
MOVT            R1, #:upper16:off_67A68 ; "--version-file"
MOVT            R0, #:upper16:aWatchpool ; "Watchpool"
MOVW            R9, #:lower16:dword_72F04
STR             R3, [SP,#0x84C+var_83C]
STR             R2, [SP,#0x84C+var_830]
MOVT            R9, #:upper16:dword_72F04
STR             R1, [SP,#0x84C+var_828]
MOVW            R10, #:lower16:dword_72E60
BL              sub_22E98
VLDR            D9, =0.63
MOVT            R10, #:upper16:dword_72E60
BL              sub_29BA0
VLDR            D8, =1.63
ADD             R0, SP, #0x84C+tp ; tp
MOVW            R8, #:lower16:byte_686E8
MOV             R11, #0
BL              sub_20750
MOV             R3, R9
MOVT            R8, #:upper16:byte_686E8
MOV             R9, R10
MOV             R10, R3

loc_320D8
ADD             R11, R11, #1
ADD             R0, SP, #0x84C+var_814
CMP             R11, #0x79 ; 'y'
MOVGE           R11, #0
BL              sub_206A0
LDR             R3, [R9]
CMP             R3, #0
BLE             loc_321DC
MOV             R5, #0
B               loc_3213C

loc_32100
ADD             R1, R4, #0x61 ; 'a'
MOV             R0, R4
BL              sub_2CC84
CMP             R0, #0
BNE             loc_322A4

loc_32114
LDRB            R3, [R4,#0x61]
CMP             R3, #0
BNE             loc_3212C
LDR             R3, [R8,#(dword_68AE4 - 0x686E8)]
CMP             R3, #0
BEQ             loc_32210

loc_3212C
LDR             R3, [R9]
ADD             R5, R5, #1
CMP             R3, R5
BLE             loc_321DC

loc_3213C
LDRB            R2, [R8,#(byte_68C50 - 0x686E8)]
LDR             R3, [R10]
CMP             R2, #0
LDR             R4, [R3,R5,LSL#2]
BNE             loc_32160
LDR             R3, [SP,#0x84C+var_83C]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_322B0

loc_32160
CMP             R11, #0x78 ; 'x'
BNE             loc_321A4
LDR             R0, [R4,#0x98]
LDRD            R6, R7, [R4,#0x28]
SUBS            R2, R6, R0
SBC             R3, R7, R0,ASR#31
MOV             R0, R2
MOV             R1, R3
BLX             sub_4AB14
VLDR            D7, [R4,#0x90]
VMOV            D6, R0, R1
STR             R6, [R4,#0x98]
VMLA.F64        D7, D6, D9
VDIV.F64        D6, D7, D8
VCVT.S32.F64    S15, D6
VSTR            D6, [R4,#0x90]
VSTR            S15, [R4,#0x9C]

loc_321A4
LDR             R3, [R4,#0x64]
CMP             R3, #0
BEQ             loc_3212C
LDRB            R3, [R4,#0x11C]
CMP             R3, #0
BNE             loc_3212C
MOV             R1, #1
MOV             R0, R4
BL              sub_2CCEC
CMP             R0, #0
BNE             loc_32100
ADD             R0, R4, #0x88
BL              sub_206A0
B               loc_32114

loc_321DC
BL              sub_2FB78
LDRB            R3, [R0,#0x61]
CMP             R3, #0
BNE             loc_32600

loc_321EC
LDR             R3, [R8,#(dword_68AE4 - 0x686E8)]
CMP             R3, #2
BEQ             loc_325C8

loc_321F8
ADD             R0, SP, #0x84C+tp
MOVW            R1, #0x1388
BL              sub_2075C
ADD             R0, SP, #0x84C+tp ; tp
BL              sub_20750
B               loc_320D8

loc_32210
LDR             R6, [R4,#4]
BL              sub_2FD10
CMP             R6, R0
BGE             loc_3212C
LDR             R1, [SP,#0x84C+var_828]
LDR             R3, [SP,#0x84C+var_814]
LDR             R2, [R4,#0x88]
LDR             R1, [R1,#(dword_681F0 - 0x67A68)]
SUB             R3, R3, R2
CMP             R3, R1
BLE             loc_3212C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_32264
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_32754

loc_32264
LDR             R3, [R4]
MOVW            R2, #:lower16:aPoolDSStableFo ; "Pool %d %s stable for >%d seconds"
STR             R1, [SP,#0x84C+var_848]
MOVT            R2, #:upper16:aPoolDSStableFo ; "Pool %d %s stable for >%d seconds"
LDR             R12, [R4,#0xA4]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x84C+s ; s
STR             R12, [SP,#0x84C+var_84C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x84C+s
MOV             R0, #4
BL              sub_1DD60

loc_32298
MOV             R0, #0
BL              sub_31A9C
B               loc_3212C

loc_322A4
MOV             R0, R4
BL              sub_2FDBC
B               loc_32114

loc_322B0
ADD             R3, R4, #0xBC
ADD             R0, SP, #0x84C+var_80C
MOV             R6, R3
STR             R3, [SP,#0x84C+mutex]
BL              sub_206A0
MOV             R0, R6  ; mutex
BL              pthread_mutex_lock
SUBS            R6, R0, #0
BNE             loc_3276C
MOV             R1, R4
LDR             R12, [R1,#0x158]!
LDR             R7, [R12]
CMP             R1, R12
SUB             R12, R12, #4
SUB             R7, R7, #4
BEQ             loc_32390
LDR             LR, [R4,#0x120]
CMP             LR, #1
STRGT           R5, [SP,#0x84C+var_838]
MOVGT           R5, R6
MOVGT           R6, R1
BGT             loc_32334
B               loc_323AC

loc_3230C
MOV             R3, R7
LDR             R1, [R3,#4]!
CMP             R6, R3
SUB             R1, R1, #4
BEQ             loc_3260C
LDR             LR, [R4,#0x120]
MOV             R12, R7
CMP             LR, #1
BLE             loc_326C4
MOV             R7, R1

loc_32334
LDR             R3, [SP,#0x84C+var_80C]
LDR             R1, [R12,#0xC]
SUB             R3, R3, R1
CMP             R3, #0x12C
BLE             loc_3230C
SUB             LR, LR, #1
MOV             R0, R12 ; ptr
STR             LR, [R4,#0x120]
ADD             R5, R5, #1
LDMIB           R12, {R1,R3}
STR             R3, [R1,#4]
STR             R1, [R3]
BL              free
B               loc_3230C
ALIGN 0x10
dbl_32370 DCFD 0.63
dbl_32378 DCFD 1.63
off_32380 DCD dword_68C70
off_32384 DCD stru_68C54
off_32388 DCD aPruneStratumSh ; "prune_stratum_shares"
off_3238C DCD aReapCurl ; "reap_curl"

loc_32390               ; mutex
LDR             R0, [SP,#0x84C+mutex]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3281C
LDR             R3, [SP,#0x84C+var_830]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0

loc_323AC               ; timer
MOV             R0, #0
BL              time
STR             R0, [SP,#0x84C+mutex]
LDR             R0, =stru_68C54 ; mutex
BL              pthread_mutex_lock
SUBS            R3, R0, #0
STR             R3, [SP,#0x84C+var_838]
BNE             loc_327BC
LDR             R6, [R8,#(dword_68C6C - 0x686E8)]
CMP             R6, #0
BEQ             loc_326CC
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
LDR             R7, [R6,#8]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x84C+var_82C]
LDR             R3, [R6,#0x24]
LDR             R3, [R3,#0x104]
CMP             R4, R3
BEQ             loc_32418

loc_323F8
CMP             R7, #0
BEQ             loc_3251C

loc_32400
MOV             R6, R7
LDR             R7, [R7,#8]
LDR             R3, [R6,#0x24]
LDR             R3, [R3,#0x104]
CMP             R4, R3
BNE             loc_323F8

loc_32418
LDR             R3, [R6,#0x2C]
LDR             R2, [SP,#0x84C+mutex]
ADD             R3, R3, #0x78 ; 'x'
CMP             R2, R3
BLE             loc_323F8
LDR             R0, [R6,#4]
LDR             R2, [R8,#(dword_68C6C - 0x686E8)]
CMP             R0, #0
LDR             R12, [R2]
BEQ             loc_326EC
LDR             R3, [R12,#0x14]
LDR             R1, [R12,#0x10]
SUB             R1, R1, R3
CMP             R6, R1
BEQ             loc_32718

loc_32454
LDR             R1, [R6,#8]
ADD             R3, R0, R3
STR             R1, [R3,#8]

loc_32460
LDR             R3, [R6,#8]
CMP             R3, #0
LDRNE           R0, [R2]
LDRNE           R1, [R6,#4]
LDRNE           R0, [R0,#0x14]
ADDNE           R3, R3, R0
STRNE           R1, [R3,#4]
LDR             R1, [R2]
LDR             R0, [R6,#0x1C]
LDM             R1, {R1,R3}
SUB             R3, R3, #1
AND             R3, R3, R0
ADD             R3, R3, R3,LSL#1
ADD             R1, R1, R3,LSL#2
LDR             R0, [R1,#4]
SUB             R0, R0, #1
STR             R0, [R1,#4]
LDR             R1, [R2]
LDR             R1, [R1]
LDR             R0, [R1,R3,LSL#2]
CMP             R0, R6
LDREQ           R0, [R6,#0x10]
STREQ           R0, [R1,R3,LSL#2]
LDR             R3, [R6,#0xC]
CMP             R3, #0
LDRNE           R1, [R6,#0x10]
STRNE           R1, [R3,#0x10]
LDR             R3, [R6,#0x10]
CMP             R3, #0
LDRNE           R1, [R6,#0xC]
STRNE           R1, [R3,#0xC]
LDR             R2, [R2]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_324EC
LDR             R3, [SP,#0x84C+var_838]
ADD             R0, R6, #0x24 ; '$'
LDR             R2, =aPruneStratumSh ; "prune_stratum_shares"
LDR             R1, [SP,#0x84C+var_82C]
ADD             R3, R3, #1
STR             R3, [SP,#0x84C+var_838]
MOVW            R3, #0x2833
BL              sub_2A70C
MOV             R0, R6  ; ptr
BL              free
CMP             R7, #0
BNE             loc_32400

loc_3251C               ; mutex
LDR             R0, =stru_68C54
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_327E0
LDR             R3, [SP,#0x84C+var_830]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [SP,#0x84C+var_838]
CMP             R3, #0
BEQ             loc_32160
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3256C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3273C

loc_3256C
LDR             R12, [R4]
MOV             R2, #aLostDSharesDue ; "Lost %d shares due to no stratum share "...
MOV             R1, #0x800 ; maxlen
LDR             R3, [SP,#0x84C+var_838]
ADD             R0, SP, #0x84C+s ; s
STR             R12, [SP,#0x84C+var_84C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x84C+s
MOV             R0, #4
BL              sub_1DD60

loc_3259C
MOVW            R1, #:lower16:qword_762C8
LDR             R12, [SP,#0x84C+var_838]
MOVT            R1, #:upper16:qword_762C8
LDR             R0, [R4,#0x78]
LDRD            R2, R3, [R1]
ADD             R0, R0, R12
ADDS            R6, R2, R12
STR             R0, [R4,#0x78]
ADC             R7, R3, R12,ASR#31
STRD            R6, R7, [R1]
B               loc_32160

loc_325C8
MOVW            R3, #:lower16:dword_73F1C
LDR             R2, [SP,#0x84C+var_814]
MOVT            R3, #:upper16:dword_73F1C
LDR             R1, [R8,#(dword_68C70 - 0x686E8)]
LDR             R3, [R3]
SUB             R2, R2, R1
RSB             R3, R3, R3,LSL#4
CMP             R2, R3,LSL#2
BLE             loc_321F8
LDR             R0, =dword_68C70
BL              sub_206A0
MOV             R0, #0
BL              sub_31A9C
B               loc_321F8

loc_32600
MOV             R0, #0
BL              sub_31A9C
B               loc_321EC

loc_3260C               ; mutex
LDR             R0, [SP,#0x84C+mutex]
MOV             R6, R5
LDR             R5, [SP,#0x84C+var_838]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3281C
LDR             R3, [SP,#0x84C+var_830]
LDR             R2, [R3] ; sub_1EAA0
BLX             R2      ; sub_1EAA0
CMP             R6, #0
BEQ             loc_323AC
MOV             R2, #byte_686E1
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_323AC
MOV             R2, #byte_72D90
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_32674
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_32804

loc_32674
LDR             R12, [R4]
MOVW            R0, #:lower16:(aCoinbase1S+0xC) ; "s"
CMP             R6, #1
MOVT            R0, #:upper16:(aCoinbase1S+0xC) ; "s"
MOVW            R1, #:lower16:(asc_4CF84+4) ; ""
MOVW            R2, #:lower16:aReapedDCurlSFr ; "Reaped %d curl%s from pool %d"
MOVT            R1, #:upper16:(asc_4CF84+4) ; ""
MOVNE           R1, R0
STR             R1, [SP,#0x84C+var_84C]
MOV             R3, R6
MOVT            R2, #:upper16:aReapedDCurlSFr ; "Reaped %d curl%s from pool %d"
STR             R12, [SP,#0x84C+var_848]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x84C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x84C+s
MOV             R0, #7
BL              sub_1DD60
B               loc_323AC

loc_326C4
LDR             R5, [SP,#0x84C+var_838]
B               loc_323AC

loc_326CC               ; mutex
LDR             R0, =stru_68C54
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_327E0
LDR             R3, [SP,#0x84C+var_830]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
B               loc_32160

loc_326EC
LDR             R1, [R6,#8]
CMP             R1, #0
BEQ             loc_32834
LDR             R3, [R12,#0x14]
LDR             LR, [R12,#0x10]
SUB             LR, LR, R3
CMP             R6, LR
BEQ             loc_32718

loc_3270C
MOV             R2, R1
STR             R1, [R8,#(dword_68C6C - 0x686E8)]
B               loc_32460

loc_32718
ADD             R3, R0, R3
STR             R3, [R12,#0x10]
LDR             R0, [R6,#4]
CMP             R0, #0
LDREQ           R1, [R6,#8]
BEQ             loc_3270C
LDR             R3, [R2]
LDR             R3, [R3,#0x14]
B               loc_32454

loc_3273C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_3259C
B               loc_3256C

loc_32754
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_32298
B               loc_32264

loc_3276C
BL              __errno_location
LDR             R12, =aReapCurl ; "reap_curl"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x2808
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R3,R12}

loc_3278C
STR             R1, [SP,#0x84C+var_844]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x84C+s ; s
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_327BC
BL              __errno_location
LDR             R12, =aPruneStratumSh ; "prune_stratum_shares"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R1, #0x282C
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R3,R12}
B               loc_3278C

loc_327E0
BL              __errno_location
LDR             R12, =aPruneStratumSh ; "prune_stratum_shares"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R1, #0x2839

loc_327F4
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_3278C

loc_32804
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BGT             loc_32674
B               loc_323AC

loc_3281C
BL              __errno_location
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
LDR             R12, =aReapCurl ; "reap_curl"
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x281A
B               loc_327F4

loc_32834               ; ptr
LDR             R0, [R12]
STR             R1, [SP,#0x84C+var_820]
STR             R2, [SP,#0x84C+var_824]
BL              free
LDR             R2, [SP,#0x84C+var_824]
LDR             R0, [R2] ; ptr
BL              free
LDR             R1, [SP,#0x84C+var_820]
STR             R1, [R8,#(dword_68C6C - 0x686E8)]
B               loc_324EC
; End of function sub_32050




; int *__fastcall sub_3285C(int)
sub_3285C

var_81C= -0x81C
var_814= -0x814
var_808= -0x808
s= -0x804

PUSH            {R4-R11,LR}
MOV             R6, R0
VPUSH           {D8}
SUB             SP, SP, #0x810
SUB             SP, SP, #0xC
LDR             R0, =stru_68C54 ; mutex
BL              pthread_mutex_lock
SUBS            R8, R0, #0
BNE             loc_32B38
MOV             R7, #byte_686E8
LDR             R4, [R7,#(dword_68C6C - 0x686E8)]
CMP             R4, #0
BEQ             loc_32AF0
LDR             R3, [R4,#0x24]
MOVW            R9, #:lower16:aCgminerC ; "cgminer.c"
LDR             R5, [R4,#8]
MOVT            R9, #:upper16:aCgminerC ; "cgminer.c"
VLDR            D8, =0.0
LDR             R3, [R3,#0x104]
LDR             R10, =aClearStratumSh ; "clear_stratum_shares"
CMP             R3, R6
BEQ             loc_328D8

loc_328B8
CMP             R5, #0
BEQ             loc_329D4

loc_328C0
MOV             R4, R5
LDR             R5, [R5,#8]
LDR             R3, [R4,#0x24]
LDR             R3, [R3,#0x104]
CMP             R3, R6
BNE             loc_328B8

loc_328D8
LDR             R0, [R4,#4]
LDR             R11, [R7,#(dword_68C6C - 0x686E8)]
CMP             R0, #0
LDR             R1, [R11]
BEQ             loc_32AA8
LDRD            R2, R3, [R1,#0x10]
SUB             R2, R2, R3
CMP             R4, R2
BEQ             loc_32AC8

loc_328FC
LDR             R2, [R4,#8]
ADD             R3, R0, R3
STR             R2, [R3,#8]
LDR             R3, [R4,#8]

loc_3290C
LDR             R2, [R11]
CMP             R3, #0
LDRNE           R1, [R2,#0x14]
LDRNE           R2, [R4,#4]
ADDNE           R3, R3, R1
STRNE           R2, [R3,#4]
LDRNE           R2, [R11]
LDR             R1, [R4,#0x1C]
LDR             R3, [R2,#4]
LDR             R2, [R2]
SUB             R3, R3, #1
AND             R3, R3, R1
ADD             R3, R3, R3,LSL#1
ADD             R2, R2, R3,LSL#2
LDR             R1, [R2,#4]
SUB             R1, R1, #1
STR             R1, [R2,#4]
LDR             R2, [R11]
LDR             R2, [R2]
LDR             R1, [R2,R3,LSL#2]
CMP             R1, R4
LDREQ           R1, [R4,#0x10]
STREQ           R1, [R2,R3,LSL#2]
LDRD            R2, R3, [R4,#0xC]
CMP             R2, #0
STRNE           R3, [R2,#0x10]
LDRNE           R3, [R4,#0x10]
CMP             R3, #0
LDRNE           R2, [R4,#0xC]
STRNE           R2, [R3,#0xC]
LDR             R2, [R11]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_32994
MOV             R0, R4
MOVW            R3, #0x1D15
LDR             R12, [R0,#0x24]!
MOV             R2, R10
MOV             R1, R9
ADD             R8, R8, #1
VLDR            D7, [R12,#0x178]
VADD.F64        D8, D8, D7
BL              sub_2A70C
LDR             R3, [R6,#0x2EC]
MOV             R0, R4  ; ptr
SUB             R3, R3, #1
STR             R3, [R6,#0x2EC]
BL              free
CMP             R5, #0
BNE             loc_328C0

loc_329D4               ; mutex
LDR             R0, =stru_68C54
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_32B88
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R8, #0
BEQ             loc_32A98
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_32A24
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_32B20

loc_32A24
LDR             R1, [R6]
MOV             R2, #aLostDSharesDue_0 ; "Lost %d shares due to stratum disconnec"...
ADD             R0, SP, #0x81C+s ; s
MOV             R3, R8
STR             R1, [SP,#0x81C+var_81C]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_32A54
MOVW            R1, #:lower16:dbl_72EF8
VLDR            D6, [R6,#0x58]
MOVT            R1, #:upper16:dbl_72EF8
MOVW            R0, #:lower16:qword_762C8
VLDR            D7, [R1]
MOVT            R0, #:upper16:qword_762C8
LDRD            R2, R3, [R0]
VADD.F64        D6, D6, D8
LDR             R12, [R6,#0x78]
VADD.F64        D8, D7, D8
ADDS            R4, R2, R8
ADC             R5, R3, R8,ASR#31
ADD             R8, R12, R8
VSTR            D6, [R6,#0x58]
STRD            R4, R5, [R0]
STR             R8, [R6,#0x78]
VSTR            D8, [R1]

loc_32A98
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}

loc_32AA8
LDR             R2, [R4,#8]
CMP             R2, #0
BEQ             loc_32BB8
LDR             R3, [R1,#0x14]
LDR             R12, [R1,#0x10]
SUB             R12, R12, R3
CMP             R4, R12
BNE             loc_32AE0

loc_32AC8
ADD             R3, R0, R3
STR             R3, [R1,#0x10]
LDR             R0, [R4,#4]
CMP             R0, #0
BNE             loc_32BD8
LDR             R2, [R4,#8]

loc_32AE0
MOV             R3, R2
MOV             R11, R2
STR             R2, [R7,#(dword_68C6C - 0x686E8)]
B               loc_3290C

loc_32AF0               ; mutex
LDR             R0, =stru_68C54
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_32B88
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}

loc_32B20
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_32A54
B               loc_32A24

loc_32B38
BL              __errno_location
LDR             LR, =aClearStratumSh ; "clear_stratum_shares"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x81C+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D0D
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x81C+var_814]

loc_32B64               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_32B88
BL              __errno_location
LDR             LR, =aClearStratumSh ; "clear_stratum_shares"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D1B
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x81C+s
STR             R12, [SP,#0x81C+var_814]
B               loc_32B64

loc_32BB8               ; ptr
LDR             R0, [R1]
STR             R2, [SP,#0x81C+var_808]
BL              free
LDR             R0, [R11] ; ptr
BL              free
LDR             R2, [SP,#0x81C+var_808]
STR             R2, [R7,#(dword_68C6C - 0x686E8)]
B               loc_32994

loc_32BD8
LDR             R3, [R11]
LDR             R3, [R3,#0x14]
B               loc_328FC
; End of function sub_3285C

ALIGN 8
dbl_32BE8 DCFD 0.0
off_32BF0 DCD stru_68C54
off_32BF4 DCD aClearStratumSh ; "clear_stratum_shares"



; int __fastcall sub_32BF8(int)
sub_32BF8

var_818= -0x818
abstime= -0x810
var_808= -0x808
var_804= -0x804
s= -0x800

PUSH            {R4-R8,LR}
MOV             R4, #byte_686E8
SUB             SP, SP, #0x820
MOV             R5, R0
LDR             R0, [R4,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_32FE8
LDR             R3, [R4,#(dword_68C04 - 0x686E8)]
CMP             R3, #0
BEQ             loc_32C38
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0xC]
CMP             R3, #0
BNE             loc_32D24

loc_32C38
CMP             R5, #0
BEQ             loc_32E78
MOVW            R6, #:lower16:dword_74F60
MOVW            R5, #:lower16:stru_72E68
MOVW            R7, #:lower16:byte_72D90
MOVW            R8, #:lower16:byte_686E0
MOVT            R6, #:upper16:dword_74F60
MOVT            R5, #:upper16:stru_72E68
MOVT            R7, #:upper16:byte_72D90
MOVT            R8, #:upper16:byte_686E0

loc_32C60
ADD             R0, SP, #0x820+var_808
BL              sub_206A0
LDR             R1, [SP,#0x820+var_804]
MOV             R3, #0x3E8
LDR             R2, [SP,#0x820+var_808]
MOV             R0, R5  ; cond
MUL             R3, R3, R1
ADD             R2, R2, #0xA
STRD            R2, R3, [SP,#0x820+abstime]
BL              pthread_cond_signal
LDR             R0, [R6]
ADD             R2, SP, #0x820+abstime ; abstime
LDR             R1, [R4,#(dword_68B20 - 0x686E8)] ; mutex
ADD             R0, R0, #0x28 ; '(' ; cond
BL              pthread_cond_timedwait
CMP             R0, #0
BEQ             loc_32D08
LDRB            R3, [R4,#(byte_68B78 - 0x686E8)]
CMP             R3, #0
BNE             loc_32D08
LDRB            R3, [R7]
MOV             R2, #1
STRB            R2, [R4,#(byte_68B78 - 0x686E8)]
CMP             R3, #0
BNE             loc_32CD0
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_32EA4

loc_32CD0
MOVW            LR, #:lower16:aWaitingForWork ; "Waiting for work to be available from p"...
ADD             R12, SP, #0x820+s
MOVT            LR, #:upper16:aWaitingForWork ; "Waiting for work to be available from p"...
LDM             LR!, {R0-R3} ; "Waiting for work to be available from p"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " to be available from pools."
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " from pools."
STM             R12!, {R0-R2}
MOV             R2, #0
ADD             R1, SP, #0x820+s
MOV             R0, #4
STRB            R3, [R12]
BL              sub_1DD60

loc_32D08
LDR             R3, [R4,#(dword_68C04 - 0x686E8)]
CMP             R3, #0
BEQ             loc_32C60
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0xC]
CMP             R3, #0
BEQ             loc_32C60

loc_32D24
LDRB            R3, [R4,#(byte_68B78 - 0x686E8)]
CMP             R3, #0
BNE             loc_32EBC
LDR             R2, [R4,#(dword_68C04 - 0x686E8)]

loc_32D34
LDR             R1, [R2,#0x158]
LDR             R3, [R4,#(dword_68C78 - 0x686E8)]
LDR             R0, [R1,#0xC]
CMP             R0, R3
BLE             loc_32D54
LDRB            R3, [R2,#0x111]
CMP             R3, #0
BEQ             loc_32F8C

loc_32D54
MOV             R5, R2

loc_32D58
LDR             R3, [R5,#0x15C]
CMP             R3, #0
BEQ             loc_32F3C
LDR             R12, [R1,#0x14]
ADD             R0, R5, #0x158
LDR             LR, [R1,#0x10]
SUB             LR, LR, R12
CMP             R5, LR
BEQ             loc_32F6C

loc_32D7C
LDR             R2, [R5,#0x160]
ADD             R3, R3, R12
LDR             R1, [R4,#(dword_68C04 - 0x686E8)]
STR             R2, [R3,#8]
LDR             R6, [R5,#0x160]

loc_32D90
LDR             R2, [R1,#0x158]
CMP             R6, #0
LDRNE           R3, [R2,#0x14]
LDRNE           R2, [R5,#0x15C]
ADDNE           R6, R6, R3
STRNE           R2, [R6,#4]
LDRNE           R2, [R1,#0x158]
LDR             R12, [R5,#0x174]
LDR             R3, [R2,#4]
LDR             R2, [R2]
SUB             R3, R3, #1
AND             R3, R3, R12
ADD             R3, R3, R3,LSL#1
MOV             R3, R3,LSL#2
ADD             R2, R2, R3
LDR             R12, [R2,#4]
SUB             R12, R12, #1
STR             R12, [R2,#4]
LDR             R2, [R1,#0x158]
LDR             R2, [R2]
LDR             R12, [R2,R3]
CMP             R12, R0
LDREQ           R1, [R5,#0x168]
STREQ           R1, [R2,R3]
LDR             R2, [R5,#0x164]
LDR             R3, [R5,#0x168]
LDREQ           R1, [R4,#(dword_68C04 - 0x686E8)]
CMP             R2, #0
STRNE           R3, [R2,#0x10]
LDRNE           R3, [R5,#0x168]
CMP             R3, #0
LDRNE           R2, [R5,#0x164]
STRNE           R2, [R3,#0xC]
LDR             R2, [R1,#0x158]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_32E24
LDRB            R3, [R5,#0x111]
CMP             R3, #0
BNE             loc_32E44
LDR             R3, [R5,#0x114]
CMP             R3, #0
LDRNE           R3, [R4,#(dword_68C78 - 0x686E8)]
SUBNE           R3, R3, #1
STRNE           R3, [R4,#(dword_68C78 - 0x686E8)]

loc_32E44               ; cond
MOV             R0, #stru_72E68
BL              pthread_cond_signal
MOV             R3, #dword_74F60
LDR             R0, [R3]
ADD             R0, R0, #0x28 ; '(' ; cond
BL              pthread_cond_signal
MOV             R0, #0  ; timer
BL              time
MOV             R3, #dword_76080
STR             R0, [R3]

loc_32E78               ; mutex
LDR             R0, [R4,#(dword_68B20 - 0x686E8)]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_33038
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R5
ADD             SP, SP, #0x820
POP             {R4-R8,PC}

loc_32EA4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_32D08
B               loc_32CD0

loc_32EBC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_32EE4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_32FD0

loc_32EE4
MOVW            R12, #:lower16:aWorkAvailableF ; "Work available from pools, resuming."
ADD             LR, SP, #0x820+s
MOVT            R12, #:upper16:aWorkAvailableF ; "Work available from pools, resuming."
LDM             R12!, {R0-R3} ; "Work available from pools, resuming."
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "rom pools, resuming."
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "ing."
STR             R0, [LR],#4
MOV             R0, #4
STRB            R1, [LR]
ADD             R1, SP, #0x820+s
BL              sub_1DD60

loc_32F1C
LDR             R2, [R4,#(dword_68C04 - 0x686E8)]
MOV             R3, #0
STRB            R3, [R4,#(byte_68B78 - 0x686E8)]
CMP             R2, R3
BNE             loc_32D34

loc_32F30
MOV             R3, #0
LDR             R3, [R3,#0x15C]
UND             #0

loc_32F3C
LDR             R6, [R5,#0x160]
CMP             R6, #0
BEQ             loc_33068
LDR             R12, [R1,#0x14]
ADD             R0, R5, #0x158
LDR             LR, [R1,#0x10]
SUB             LR, LR, R12
CMP             R5, LR
BEQ             loc_32F6C

loc_32F60
MOV             R1, R6
STR             R6, [R4,#(dword_68C04 - 0x686E8)]
B               loc_32D90

loc_32F6C
ADD             R3, R3, R12
STR             R3, [R1,#0x10]
LDR             R3, [R5,#0x15C]
CMP             R3, #0
BEQ             loc_33084
LDR             R2, [R2,#0x158]
LDR             R12, [R2,#0x14]
B               loc_32D7C

loc_32F8C
LDR             R3, [R2,#0x114]
CMP             R3, #0
BEQ             loc_32D54
LDR             R5, [R2,#0x160]
CMP             R5, #0
BEQ             loc_32F30

loc_32FA4
LDRB            R3, [R5,#0x111]
CMP             R3, #0
BNE             loc_32D58
LDR             R3, [R5,#0x114]
LDR             R0, [R5,#0x160]
CMP             R3, #0
BEQ             loc_32D58
MOV             R5, R0
CMP             R5, #0
BNE             loc_32FA4
B               loc_32F30

loc_32FD0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_32F1C
B               loc_32EE4

loc_32FE8
BL              __errno_location
LDR             LR, =aHashPop ; "hash_pop"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x820+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2046
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x820+var_818]

loc_33014               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_33038
BL              __errno_location
LDR             LR, =aHashPop ; "hash_pop"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x208E
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x820+s
STR             R12, [SP,#0x820+var_818]
B               loc_33014

loc_33068               ; ptr
LDR             R0, [R1]
BL              free
LDR             R3, [R4,#(dword_68C04 - 0x686E8)]
LDR             R0, [R3,#0x158] ; ptr
BL              free
STR             R6, [R4,#(dword_68C04 - 0x686E8)]
B               loc_32E24

loc_33084
LDR             R6, [R5,#0x160]
B               loc_32F60
; End of function sub_32BF8

off_3308C DCD aHashPop  ; "hash_pop"



; int __fastcall sub_33090(_DWORD *)
sub_33090

var_814= -0x814
var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
LDRB            R3, [R0,#0x6B]
SUB             SP, SP, #4
MOV             R4, R0
CMP             R3, #0
BEQ             loc_331A0

loc_330AC
LDRB            R5, [R4,#0x69]
CMP             R5, #0
BEQ             loc_330E4
B               loc_33190

loc_330BC
MOV             R0, R4
BL              sub_31F20
LDRB            R3, [R4,#0x6B]
CMP             R3, #0
BNE             loc_33188
MOV             R0, #0x1E ; seconds
BL              sleep
LDRB            R3, [R4,#0x69]
CMP             R3, #0
BNE             loc_33190

loc_330E4
MOV             R1, #0
MOV             R0, R4
BL              sub_2CCEC
CMP             R0, #0
BEQ             loc_330BC
ADD             R1, R4, #0x61 ; 'a'
MOV             R0, R4
BL              sub_2CC84
MOV             R0, #stru_76148 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_33238
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_33288
MOV             R3, #byte_686E8
LDRB            R2, [R3,#(byte_68A04 - 0x686E8)]
CMP             R2, #0
BEQ             loc_331AC

loc_3313C               ; rwlock
LDR             R0, =rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_332B8
MOV             R0, #stru_76148 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_332E8
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R5, #0
BNE             loc_331C8

loc_33178
MOV             R0, R4
BL              sub_2FDBC
MOV             R0, #0
BL              sub_31A9C

loc_33188
MOV             R3, #0
STRB            R3, [R4,#0x11C]

loc_33190
MOV             R0, #0
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_331A0
BL              pthread_self
BL              pthread_detach
B               loc_330AC

loc_331AC
LDR             R5, [R4]
MOV             R2, #1
STR             R4, [R3,#(dword_68B74 - 0x686E8)]
STRB            R2, [R3,#(byte_68A04 - 0x686E8)]
MOVS            R5, R5
MOVNE           R5, #1
B               loc_3313C

loc_331C8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33204
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33204
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_33178

loc_33204
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aSwitchingToPoo_0 ; "Switching to pool %d %s - first alive p"...
LDR             R3, [R4]
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aSwitchingToPoo_0 ; "Switching to pool %d %s - first alive p"...
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x814+var_814]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60
B               loc_33178

loc_33238
BL              __errno_location
LDR             LR, =aTestPoolThread ; "test_pool_thread"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2A73
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]

loc_33264               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_33288
BL              __errno_location
LDR             LR, =aTestPoolThread ; "test_pool_thread"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2A73
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_33264

loc_332B8
BL              __errno_location
LDR             LR, =aTestPoolThread ; "test_pool_thread"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2A81
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_33264

loc_332E8
BL              __errno_location
LDR             LR, =aTestPoolThread ; "test_pool_thread"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2A81
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_33264
; End of function sub_33090

off_33318 DCD rwlock
off_3331C DCD aTestPoolThread ; "test_pool_thread"



; void __fastcall sub_33320(const char *, _DWORD *)
sub_33320

var_C24= -0xC24
var_C20= -0xC20
var_C1C= -0xC1C
var_C18= -0xC18
var_C14= -0xC14
var_C10= -0xC10
var_C0C= -0xC0C
var_C08= -0xC08
s= -0xC04
var_80C= -0x80C
var_805= -0x805
var_7F0= -0x7F0

PUSH            {R4-R11,LR}
MOV             R5, #byte_686E8
SUB             SP, SP, #0xC20
SUB             SP, SP, #0xC
LDR             R3, [R5,#(dword_68900 - 0x686E8)]
CMP             R3, #0
BEQ             loc_334D4
LDR             R2, [R1,#0x100]
MOV             R4, R1
MOV             R6, R0
MOV             R0, R2
STR             R2, [SP,#0xC2C+var_C08]
BL              sub_2F688
LDR             R3, [R4,#0x1B0]
MOV             R1, #0x20 ; ' '
LDR             R10, [R0,#0x24]
ADD             R0, R4, #0xA0
LDR             R11, [R4,#0x104]
STR             R3, [SP,#0xC2C+var_C0C]
BL              sub_1FA90
MOV             R1, #0x20 ; ' '
MOV             R9, R0
ADD             R0, R4, #0xC0
BL              sub_1FA90
MOV             R1, #0x80
MOV             R8, R0
MOV             R0, R4
BL              sub_1FA90
LDR             R2, [SP,#0xC2C+var_C08]
MOV             R7, R0
STR             R8, [SP,#0xC2C+var_C14]
ADD             R0, SP, #0xC2C+s ; s
STR             R7, [SP,#0xC2C+var_C10]
STR             R2, [SP,#0xC2C+var_C18]
MOVW            R2, #:lower16:aLuSSSSUUSS ; "%lu,%s,%s,%s,%s%u,%u,%s,%s\n"
LDR             R1, [R10,#8]
MOVT            R2, #:upper16:aLuSSSSUUSS ; "%lu,%s,%s,%s,%s%u,%u,%s,%s\n"
LDR             R3, [SP,#0xC2C+var_C0C]
STR             R1, [SP,#0xC2C+var_C1C]
MOV             R1, #0x400 ; maxlen
LDR             R12, [R10,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0xC2C+var_C20]
LDR             R12, [R11,#0xA4]
STMEA           SP, {R6,R9,R12}
BL              snprintf
MOV             R4, R0
MOV             R0, R9  ; ptr
BL              free
MOV             R0, R8  ; ptr
BL              free
MOV             R0, R7  ; ptr
BL              free
CMP             R4, #0x400
MOVGE           R3, #0
STRBGE          R3, [SP,#0xC2C+var_805]
BLT             loc_334E0

loc_33408               ; mutex
LDR             R0, =stru_68C7C
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_33534
MOV             R1, R4  ; size
LDR             R3, [R5,#(dword_68900 - 0x686E8)] ; s
MOV             R2, #1  ; n
ADD             R0, SP, #0xC2C+s ; ptr
BL              fwrite
MOV             R4, R0
LDR             R0, [R5,#(dword_68900 - 0x686E8)] ; stream
BL              fflush
LDR             R0, =stru_68C7C ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3358C
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R4, #1
BEQ             loc_334D4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3349C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3349C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_334D4

loc_3349C
MOV             R12, #aSharelogFwrite ; "sharelog fwrite error"

loc_334A4
LDM             R12!, {R0-R3}
ADD             LR, SP, #0xC2C+var_80C
ADD             LR, LR, #8
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1}
STR             R0, [LR],#4
MOV             R0, #3
STRH            R1, [LR]
ADD             R1, SP, #0xC2C+var_80C
ADD             R1, R1, #8
BL              sub_1DD60

loc_334D4
ADD             SP, SP, #0xC20
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_334E0
CMP             R4, #0
BGE             loc_33408
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33510
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3351C

loc_33510
MOV             R12, #aSharelogPrintf ; "sharelog printf error"
B               loc_334A4

loc_3351C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_334D4
B               loc_33510

loc_33534
BL              __errno_location
LDR             LR, =aSharelog ; "sharelog"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
ADD             R0, SP, #0xC2C+var_80C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, R0, #8 ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R12, #0x2AC
STMEA           SP, {R1,LR}
STR             R12, [SP,#0xC2C+var_C24]

loc_33564               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0xC2C+var_80C
MOV             R0, #3
ADD             R1, R1, #8
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_3358C
BL              __errno_location
LDR             LR, =aSharelog ; "sharelog"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2AF
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
ADD             R0, SP, #0xC2C+var_80C
STMEA           SP, {R1,LR}
ADD             R0, R0, #8
STR             R12, [SP,#0xC2C+var_C24]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_33564
; End of function sub_33320

off_335C0 DCD stru_68C7C
off_335C4 DCD aSharelog ; "sharelog"



; __int64 __fastcall sub_335C8(int, int)
sub_335C8

var_884= -0x884
var_87C= -0x87C
var_870= -0x870
var_868= -0x868
var_864= -0x864
var_848= -0x848
var_844= -0x844
var_824= -0x824
s= -0x804

PUSH            {R4-R11,LR}
ADD             R8, R0, #0xD4
SUB             SP, SP, #0x880
MOV             R4, R0
SUB             SP, SP, #4
MOV             R0, R8  ; mutex
MOV             R6, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_33A68
ADD             R10, R4, #0xEC
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_33AB8
ADD             R5, R4, #0x280
LDR             R11, [R4,#0x288]
LDRD            R2, R3, [R5]
MOVW            R9, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, [R4,#0x630]
ADD             R1, SP, #0x884+var_864
LDR             R0, [R4,#0x638]
MOVW            R12, #0x20FD
LDR             R7, =aGenStratumWork ; "gen_stratum_work"
MOVT            R9, #:upper16:aCgminerC ; "cgminer.c"
STRD            R2, R3, [R1,#-8]!
MOV             R2, R11
ADD             R0, LR, R0
ADD             R11, R6, #0x130
MOV             R3, R9
STR             R12, [SP,#0x884+var_884+4]
STR             R7, [SP,#0x884+var_884]
STR             R11, [SP,#0x884+var_870]
BL              sub_232EC
LDR             R3, [R5]
MOV             R0, R10 ; rwlock
LDR             R2, [R5,#4]
ADDS            R12, R3, #1
ADC             R1, R2, #0
STR             R12, [R5]
STR             R1, [R5,#4]
STR             R3, [R11,#-8]
STR             R2, [R11,#-4]
LDR             R3, [R4,#0x288]
STR             R3, [R6,#0x130]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_33AE8
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_33B10
MOV             R0, R8  ; mutex
BL              pthread_mutex_unlock
SUBS            R5, R0, #0
BNE             loc_33B38
LDR             R1, [R4,#0x634] ; n
ADD             R2, SP, #0x884+s
LDR             R0, [R4,#0x630] ; int
BL              sub_1EA3C
ADD             R2, SP, #0x884+var_864
ADD             R0, SP, #0x884+s ; int
MOV             R1, #0x20 ; ' ' ; n
BL              sub_1EA3C
MOVW            R3, #0x2107
MOV             R2, #0x20 ; ' '
STR             R3, [SP,#0x884+var_884+4]
ADD             R0, SP, #0x884+var_844
MOV             R3, R9
STR             R7, [SP,#0x884+var_884]
ADD             R1, SP, R2
BL              sub_232EC
LDR             R3, [R4,#0x6BC]
CMP             R3, #0
BLE             loc_33768
MOVW            R11, #0x210B
MOV             R8, R9

loc_336FC
LDR             R1, [R4,#0x2B4]
MOV             R3, R8
MOV             R2, #0x20 ; ' '
ADD             R0, SP, #0x884+var_824
LDR             R1, [R1,R5,LSL#2]
ADD             R5, R5, #1
STMEA           SP, {R7,R11}
BL              sub_232EC
MOV             R1, #0x40 ; '@' ; n
ADD             R2, SP, #0x884+s
ADD             R0, SP, R1 ; int
BL              sub_1EA3C
ADD             R2, SP, #0x884+var_864
MOV             R1, #0x20 ; ' ' ; n
ADD             R0, SP, #0x884+s ; int
BL              sub_1EA3C
MOVW            R3, #0x210D
MOV             R2, #0x20 ; ' '
STR             R3, [SP,#0x884+var_884+4]
ADD             R1, SP, R2
MOV             R3, R8
STR             R7, [SP,#0x884+var_884]
ADD             R0, SP, #0x884+var_844
BL              sub_232EC
LDR             R3, [R4,#0x6BC]
CMP             R3, R5
BGT             loc_336FC

loc_33768
ADD             R3, SP, #0x884+var_844
ADD             R2, SP, #0x884+var_848
ADD             R1, R3, #0x1C
ADD             R0, SP, #0x884+var_868

loc_33778
LDR             R3, [R2,#4]!
CMP             R1, R2
REV             R3, R3
STR             R3, [R0,#4]!
BNE             loc_33778
MOVW            R2, #0x2116
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
ADD             R1, R4, #0x630
STR             R2, [SP,#0x884+var_884+4]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
ADD             R1, R1, #0xC
MOV             R2, #0x70 ; 'p'
MOV             R0, R6
STR             R7, [SP,#0x884+var_884]
BL              sub_232EC
MOVW            R2, #0x2117
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
STR             R2, [SP,#0x884+var_884+4]
MOV             R2, #0x20 ; ' '
ADD             R1, SP, R2
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
ADD             R0, R6, #0x24 ; '$'
STR             R7, [SP,#0x884+var_884]
BL              sub_232EC
ADD             R3, R4, #0x730
LDRD            R2, R3, [R3]
STR             R2, [R6,#0x138]
STR             R3, [R6,#0x13C]
LDR             R0, [R4,#0x2B0] ; s
BL              __strdup
STR             R0, [R6,#0x120]
LDR             R0, [R4,#0x274] ; s
BL              __strdup
STR             R0, [R6,#0x140]
ADD             R0, R4, #0x710
ADD             R0, R0, #0xC ; s
BL              __strdup
STR             R0, [R6,#0x134]
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_33B60
MOVW            R3, #:lower16:off_67964
MOVW            R5, #:lower16:byte_686E1
MOVT            R3, #:upper16:off_67964
MOVT            R5, #:upper16:byte_686E1
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_338F4

loc_33844
MOV             R0, R6
MOVW            R7, #:lower16:dword_72F14
BL              sub_28C84
MOVT            R7, #:upper16:dword_72F14
VLDR            D0, [R6,#0x138]
ADD             R0, R6, #0xA0
MOVW            R5, #:lower16:byte_686E8
BL              sub_2B4D0
LDR             R3, [R7]
MOVT            R5, #:upper16:byte_686E8
MOV             R0, #0  ; timer
ADD             R3, R3, #1
STR             R3, [R7]
BL              time
LDR             R3, [R5,#(dword_68C94 - 0x686E8)]
SUB             R0, R0, R3
CMP             R0, #5
BGT             loc_338DC

loc_3388C
LDR             R0, [R5,#(dword_68C9C - 0x686E8)]
MOV             R3, #0
MOV             R12, #1
MOV             R1, #0x53 ; 'S'
MOV             R2, #0x3C ; '<'
STRB            R12, [R6,#0x11C]
STR             R0, [R6,#0x150]
MOV             R0, R6
STR             R3, [R6,#0xF8]
STRB            R3, [R6,#0x118]
STRB            R1, [R6,#0x1B8]
STR             R2, [R6,#0xF4]
VLDR            D0, [R6,#0x138]
STR             R4, [R6,#0x104]
BL              sub_28A90
ADD             R0, R6, #0x108
BL              sub_206A0
ADD             SP, SP, #0x880
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_338DC               ; timer
MOV             R0, #0
BL              time
LDR             R3, [R7]
STR             R0, [R5,#(dword_68C94 - 0x686E8)]
STR             R3, [R5,#(dword_68C98 - 0x686E8)]
B               loc_3388C

loc_338F4
MOV             R1, #0x70 ; 'p'
MOV             R0, R6
BL              sub_1FA90
MOV             R1, #0x20 ; ' '
MOV             R9, R0
ADD             R0, SP, #0x884+var_864
BL              sub_1FA90
LDRB            R3, [R5]
MOV             R8, R0
CMP             R3, #0
BEQ             loc_33A54
MOV             R7, #byte_72D90
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_33948
MOV             R3, #byte_686E0
LDRB            R2, [R3]
CMP             R2, #0
BEQ             loc_33B8C

loc_33948
MOVW            R2, #:lower16:aGeneratedStrat_0 ; "Generated stratum merkle %s"
MOV             R3, R8
MOVT            R2, #:upper16:aGeneratedStrat_0 ; "Generated stratum merkle %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x884+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x884+s
MOV             R0, #7
BL              sub_1DD60
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_33A54
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_339B0
MOV             R3, #byte_686E0

loc_33990
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_339B0
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_339F8

loc_339B0
MOVW            R2, #:lower16:aGeneratedStrat_1 ; "Generated stratum header %s"
MOV             R3, R9
MOVT            R2, #:upper16:aGeneratedStrat_1 ; "Generated stratum header %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x884+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x884+s
MOV             R0, #7
BL              sub_1DD60
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_33A54
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_33A18
MOV             R3, #byte_686E0

loc_339F8
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33A18
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_33A54

loc_33A18
LDR             R1, [SP,#0x884+var_870]
MOVW            R2, #:lower16:aWorkJobIdSNonc ; "Work job_id %s nonce2 %llu ntime %s"
LDR             R0, [R6,#0x134]
MOVT            R2, #:upper16:aWorkJobIdSNonc ; "Work job_id %s nonce2 %llu ntime %s"
LDR             R3, [R6,#0x120]
LDRD            R10, R11, [R1,#-8]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x884+var_87C]
ADD             R0, SP, #0x884+s ; s
STRD            R10, R11, [SP,#0x884+var_884]
BL              snprintf
ADD             R1, SP, #0x884+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_33A54               ; ptr
MOV             R0, R9
BL              free
MOV             R0, R8  ; ptr
BL              free
B               loc_33844

loc_33A68
BL              __errno_location
LDR             LR, =aGenStratumWork ; "gen_stratum_work"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x884+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x20F8
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x884+var_87C]

loc_33A94               ; maxlen
MOV             R1, #0x800

loc_33A98
BL              snprintf
ADD             R1, SP, #0x884+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_33AB8
BL              __errno_location
LDR             LR, =aGenStratumWork ; "gen_stratum_work"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x20F8
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x884+s
STR             R12, [SP,#0x884+var_87C]
B               loc_33A94

loc_33AE8
BL              __errno_location
MOVW            R1, #0x2103
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R7, [SP,#0x884+var_884+4]
ADD             R0, SP, #0x884+s
STR             R9, [SP,#0x884+var_884]
STR             R1, [SP,#0x884+var_87C]
B               loc_33A94

loc_33B10
BL              __errno_location
MOVW            R1, #0x2103
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R7, [SP,#0x884+var_884+4]
ADD             R0, SP, #0x884+s
STR             R9, [SP,#0x884+var_884]
STR             R1, [SP,#0x884+var_87C]
B               loc_33A94

loc_33B38
BL              __errno_location
MOVW            R1, #0x2103
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R7, [SP,#0x884+var_884+4]
ADD             R0, SP, #0x884+s
STR             R9, [SP,#0x884+var_884]
STR             R1, [SP,#0x884+var_87C]
B               loc_33A94

loc_33B60
BL              __errno_location
MOVW            R1, #0x2122
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x884+var_87C]
ADD             R0, SP, #0x884+s
STR             R7, [SP,#0x884+var_884+4]
MOV             R1, #0x800
STR             R9, [SP,#0x884+var_884]
B               loc_33A98

loc_33B8C
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_33990
B               loc_33948
; End of function sub_335C8

off_33BA4 DCD aGenStratumWork ; "gen_stratum_work"



; int __fastcall sub_33BA8(int *, int *, int, int, __int64, unsigned int)
sub_33BA8

var_8= -8
var_s20=  0x20
arg_0=  0x24
arg_8=  0x2C

PUSH            {R4-R11,LR}
MOV             R4, R1
SUB             SP, SP, #0x14
MOV             R7, R0
ADD             R6, R2, #0xD4
MOV             R5, R2
MOV             R10, R3
BL              sub_2D914
STR             R0, [R4]
MOV             R0, R6  ; mutex
LDR             R3, [R7]
STR             R3, [SP,#0x14+var_8]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_33CD0
ADD             R7, R5, #0xEC
MOV             R0, R7  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_33CDC
LDR             R2, [SP,#0x14+arg_8]
ADD             R0, R5, #0x280
LDRD            R8, R9, [SP,#0x14+arg_0]
ADD             R1, SP, #0x14+var_s20
LDR             R11, =aGetWorkByNonce ; "get_work_by_nonce2"
MOVW            R12, #0x20DD
REV             R2, R2
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
STRD            R8, R9, [R0]
ADD             R0, R5, #0x630
STR             R2, [R1,#0xC]!
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R11,R12}
ADD             R0, R0, #0xC
MOV             R2, #4
BL              sub_232EC
MOV             R0, R7  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_33CE8
MOV             R0, R6  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_33CF4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R5
LDR             R1, [R4]
BL              sub_335C8
LDR             R1, [R4]
MOV             R3, #byte_686E8
LDR             R12, [SP,#0x14+var_8]
LDR             R2, [R3,#(dword_68C9C - 0x686E8)]
MOV             R0, #1
STR             R10, [R1,#0x104]
LDR             R3, [R4]
LDR             R1, [SP,#0x14+arg_8]
STR             R12, [R3,#0x100]
LDR             R3, [R4]
STR             R2, [R3,#0x150]
LDR             R3, [R4]
LDR             R2, [R3,#0x104]
LDR             R3, [R2,#0x44]
ADD             R3, R3, R0
STR             R3, [R2,#0x44]
LDR             R3, [R4]
STRB            R0, [R3,#0x110]
LDR             R3, [R4]
STR             R1, [R3,#0x1BC]
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_33CD0
MOVW            R1, #0x20DA
LDR             R0, =aGetWorkByNonce ; "get_work_by_nonce2"
BL              sub_2CB60

loc_33CDC
MOVW            R1, #0x20DA
LDR             R0, =aGetWorkByNonce ; "get_work_by_nonce2"
BL              sub_2CB04

loc_33CE8
MOV             R0, R11
MOVW            R1, #0x20DE
BL              sub_2D6AC

loc_33CF4
MOV             R0, R11
MOVW            R1, #0x20DE
BL              sub_2CBBC
; End of function sub_33BA8

off_33D00 DCD aGetWorkByNonce ; "get_work_by_nonce2"



; int __fastcall sub_33D04(int, int)
sub_33D04

var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_80C= -0x80C
s= -0x804
var_7E0= -0x7E0
var_7DC= -0x7DC

PUSH            {R4-R11,LR}
MOV             R4, #byte_686E8
SUB             SP, SP, #0x810
SUB             SP, SP, #0xC
LDRB            R5, [R4,#(byte_68C50 - 0x686E8)]
CMP             R5, #0
BNE             loc_33D48
MOV             R3, #dword_72DB0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_33D5C

loc_33D38
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_33D48
MOV             R5, #0
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_33D5C
LDR             R2, [R0,#0x150]
MOV             R7, R1
LDR             R3, [R4,#(dword_68C9C - 0x686E8)]
MOV             R6, R0
CMP             R2, R3
BEQ             loc_33E04
MOV             R3, #byte_686E1
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_33DFC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33DC4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33DC4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_33D38

loc_33DC4
MOVW            R12, #:lower16:aWorkStaleDueTo ; "Work stale due to block mismatch"
ADD             LR, SP, #0x81C+s
MOVT            R12, #:upper16:aWorkStaleDueTo ; "Work stale due to block mismatch"
LDM             R12!, {R0-R3} ; "Work stale due to block mismatch"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "o block mismatch"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #7
STRB            R12, [LR]
BL              sub_1DD60
B               loc_33D38

loc_33DFC
MOV             R5, #1
B               loc_33D38

loc_33E04
MOVW            R3, #:lower16:off_67A68 ; "--version-file"
LDR             R8, [R0,#0x114]
MOVT            R3, #:upper16:off_67A68 ; "--version-file"
LDR             R9, [R0,#0x104]
LDR             R2, [R3,#(dword_681F4 - 0x67A68)]
CMP             R8, R2
LDRLE           R8, [R3,#(dword_681F8 - 0x67A68)]
CMP             R1, #0
BNE             loc_33EFC
LDRB            R3, [R9,#0x290]
CMP             R3, #0
BEQ             loc_33EFC
LDRB            R3, [R9,#0x291]
CMP             R3, #0
BEQ             loc_33E4C
LDRB            R3, [R9,#0x293]
CMP             R3, #0
BNE             loc_3408C

loc_33E4C
MOV             R3, #byte_686E1
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_33DFC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33E9C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33E9C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_33DFC

loc_33E9C
MOVW            LR, #:lower16:aWorkStaleDueTo_0 ; "Work stale due to stratum inactive"
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aWorkStaleDueTo_0 ; "Work stale due to stratum inactive"
LDM             LR!, {R0-R3} ; "Work stale due to stratum inactive"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "o stratum inactive"
LDR             LR, [LR] ; "ve"
STM             R12!, {R0-R3}
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #7
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60
B               loc_33D38

loc_33EDC               ; rwlock
MOV             R0, R10
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_34170
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0

loc_33EFC
VLDR            D5, [R9,#0x1C0]
ADD             R0, SP, #0x81C+var_80C
VMOV.F64        D6, #5.0
VMOV.F64        D7, #1.0
VMLA.F64        D7, D5, D6
VCVT.S32.F64    S14, D7
VMOV            R3, S14
SUB             R8, R8, R3
BL              sub_206A0
LDR             R3, [SP,#0x81C+var_80C]
CMP             R8, #5
LDR             R2, [R6,#0x108]
MOVLT           R8, #5
SUB             R3, R3, R2
CMP             R8, R3
BGT             loc_33FC0
MOV             R3, #byte_686E1
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_33DFC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33F8C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33F8C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_33DFC

loc_33F8C
MOVW            LR, #:lower16:aWorkStaleDueTo_1 ; "Work stale due to expiry"
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aWorkStaleDueTo_1 ; "Work stale due to expiry"
LDM             LR!, {R0-R3} ; "Work stale due to expiry"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "o expiry"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x81C+s
STRB            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_1DD60
B               loc_33D38

loc_33FC0
MOV             R3, #byte_74F65
LDRB            R3, [R3]
EOR             R3, R3, #1
ORRS            R3, R7, R3
BNE             loc_33D38
BL              sub_2FB78
CMP             R9, R0
BEQ             loc_33D38
LDRB            R3, [R6,#0x11A]
CMP             R3, #0
BNE             loc_33D38
LDR             R3, [R4,#(dword_68AE4 - 0x686E8)]
SUB             R3, R3, #3
CMP             R3, #1
BLS             loc_33D38
MOV             R3, #byte_686E1
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_33DFC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34050
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34050
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_33DFC

loc_34050
MOVW            LR, #:lower16:aWorkStaleDueTo_2 ; "Work stale due to fail only pool mismat"...
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aWorkStaleDueTo_2 ; "Work stale due to fail only pool mismat"...

loc_3405C
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR, {R0-R2}
STM             R12!, {R0,R1}
ADD             R1, SP, #0x81C+s
STRH            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_1DD60
B               loc_33D38

loc_3408C
ADD             R11, R9, #0xD4
MOV             R0, R11 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_34158
ADD             R10, R9, #0xEC
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_34164
MOV             R0, R11 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_341C4
LDR             R1, [R9,#0x2B0] ; s2
LDR             R0, [R6,#0x120] ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_33EDC
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_34170
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R3, #byte_686E1
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_33DFC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34148
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34148
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_33DFC

loc_34148
MOVW            LR, #:lower16:aWorkStaleDueTo_3 ; "Work stale due to stratum job_id mismat"...
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aWorkStaleDueTo_3 ; "Work stale due to stratum job_id mismat"...
B               loc_3405C

loc_34158
MOVW            R1, #0x1421
LDR             R0, =aStaleWork ; "stale_work"
BL              sub_2CB60

loc_34164
MOVW            R1, #0x1421
LDR             R0, =aStaleWork ; "stale_work"
BL              sub_2DCC0

loc_34170
BL              __errno_location
LDR             R1, =aStaleWork ; "stale_work"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1428
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x81C+var_81C]

loc_34190
STR             R1, [SP,#0x81C+var_818]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x81C+var_814]
LDR             R3, [R0]
ADD             R0, SP, #0x81C+s ; s
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_341C4
BL              __errno_location
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
LDR             R1, =aStaleWork ; "stale_work"
MOVW            R12, #0x1421
STR             R3, [SP,#0x81C+var_81C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_34190
; End of function sub_33D04

off_341E8 DCD aStaleWork ; "stale_work"



; void **__fastcall sub_341EC(int, void *)
sub_341EC

var_810= -0x810
var_80C= -0x80C
var_804= -0x804
s= -0x800

PUSH            {R4-R10,LR}
MOVW            R6, #:lower16:byte_686E1
MOV             R3, #0
SUB             SP, SP, #0x810
MOVT            R6, #:upper16:byte_686E1
MOV             R7, R0
STR             R3, [SP,#0x810+var_804]
MOV             R8, R1
LDR             R5, [R0,#0x24]
BL              sub_2876C
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_3427C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34248
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_344C8

loc_34248
MOVW            R12, #:lower16:aPoppingWorkFro ; "Popping work from get queue to get work"
ADD             LR, SP, #0x810+s
MOVT            R12, #:upper16:aPoppingWorkFro ; "Popping work from get queue to get work"
LDM             R12!, {R0-R3} ; "Popping work from get queue to get work"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "m get queue to get work"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "et work"
STM             LR, {R0,R1}
ADD             R1, SP, #0x810+s
MOV             R0, #7
BL              sub_1DD60

loc_3427C               ; timer
MOV             R0, #0
LDR             R10, =aGetWork ; "get_work"
BL              time
MOV             R9, R0
B               loc_342A8

loc_34290
BL              sub_32BF8
MOV             R1, R4
STR             R0, [SP,#0x810+var_804]
BL              sub_33D04
CMP             R0, #0
BNE             loc_34324

loc_342A8
LDR             R4, [SP,#0x810+var_804]
MOV             R0, #1
CMP             R4, #0
BEQ             loc_34290
MOV             R0, #0  ; timer
BL              time
SUB             R9, R0, R9
LDRB            R3, [R6]
CMP             R9, #0
BLE             loc_3437C
CMP             R3, #0
BEQ             loc_34444
MOV             R3, #byte_72D90
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_34344
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_34344
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BGT             loc_34344
LDR             R2, [R5,#0xE8]
ADD             R4, R2, R9
STR             R4, [R5,#0xE8]
B               loc_3438C

loc_34324
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2214
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R2, R10
ADD             R0, SP, #0x810+var_804
BL              sub_2AA08
BL              sub_2D548
B               loc_342A8

loc_34344
MOVW            R2, #:lower16:aGetWorkBlocked ; "Get work blocked for %ld seconds"
MOV             R3, R9
MOVT            R2, #:upper16:aGetWorkBlocked ; "Get work blocked for %ld seconds"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x810+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x810+s
MOV             R0, #7
BL              sub_1DD60
LDR             R2, [R5,#0xE8]
LDRB            R3, [R6]
ADD             R4, R2, R9
STR             R4, [R5,#0xE8]

loc_3437C
CMP             R3, #0
BEQ             loc_343D4
MOV             R3, #byte_72D90

loc_3438C
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_343AC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_344E0

loc_343AC
MOVW            R2, #:lower16:aGotWorkFromGet ; "Got work from get queue to get work for"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aGotWorkFromGet ; "Got work from get queue to get work for"...
ADD             R0, SP, #0x810+s ; s
MOV             R3, R8
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_343D4
MOVW            R3, #:lower16:byte_686E8
LDR             R0, [SP,#0x810+var_804]
MOVT            R3, #:upper16:byte_686E8
LDRB            R3, [R3,#(byte_68C50 - 0x686E8)]
STR             R8, [R0,#0x100]
CMP             R3, #0
BNE             loc_34454

loc_343F0
MOV             R0, R7
BL              sub_287A4
LDR             R3, [SP,#0x810+var_804]
MOV             R2, #1
STRB            R2, [R3,#0x110]
MOV             R0, R3
LDR             R2, [R5,#4]
VLDR            D6, [R3,#0x178]
VLDR            D7, [R2,#0x68]
VCMP.F64        D7, D6
VMRS            APSR_nzcv, FPSCR
VMOVGT.F64      D7, D6
VSTR            D7, [R3,#0xE0]
LDR             R2, [R5,#4]
VLDR            D6, [R2,#0x70]
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
VMOVGT.F64      D7, D6
VSTR            D7, [R3,#0xE0]
ADD             SP, SP, #0x810
POP             {R4-R10,PC}

loc_34444
LDR             R3, [R5,#0xE8]
ADD             R4, R3, R9
STR             R4, [R5,#0xE8]
B               loc_343D4

loc_34454
LDR             R3, [R5,#0x17C]
LDR             R1, [R5,#0x180]
ADD             R3, R3, R1
CMP             R3, #0
STR             R3, [R5,#0x17C]
MOVLE           R2, #1
STRLE           R2, [R5,#0x180]
BLE             loc_344F8
CMP             R3, #0xF
BLE             loc_344F8
LDR             R3, [R5,#0x178]
MOV             R2, #0xFFFFFFFF
LDR             R1, =unk_68CA0
MOVW            R12, #0x21FD
STR             R2, [R5,#0x180]
ADD             R3, R3, #1
CMP             R3, #0xF
ADDLE           R2, R3, R3,LSL#2
MOVGT           R3, #0
STRLE           R3, [R5,#0x178]
ADDLE           R1, R1, R2,LSL#5
LDR             R2, =aSetBenchmarkWo ; "set_benchmark_work"
STRGT           R3, [R5,#0x178]
MOV             R3, #aCgminerC ; "cgminer.c"
STMEA           SP, {R2,R12}
MOV             R2, #0xA0
BL              sub_232EC
B               loc_343F0

loc_344C8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3427C
B               loc_34248

loc_344E0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_343D4
B               loc_343AC

loc_344F8
LDR             R12, =unk_696A0
ADD             R1, R3, R3,LSL#2
LDR             R2, =aSetBenchmarkWo ; "set_benchmark_work"
MOVW            R3, #0x2201
STR             R3, [SP,#0x810+var_80C]
MOV             R3, #aCgminerC ; "cgminer.c"
STR             R2, [SP,#0x810+var_810]
ADD             R1, R12, R1,LSL#5
MOV             R2, #0xA0
BL              sub_232EC
B               loc_343F0
; End of function sub_341EC

off_34528 DCD aGetWork  ; "get_work"
off_3452C DCD unk_68CA0
off_34530 DCD aSetBenchmarkWo ; "set_benchmark_work"
off_34534 DCD unk_696A0



; void **__fastcall sub_34538(int, pthread_rwlock_t *, void *)
sub_34538
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R1, R2
BL              sub_341EC
MOV             R4, R0
MOV             R1, R0
MOV             R0, R5
BL              sub_2DA20
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_34538




; void **__fastcall sub_34560(int)
sub_34560

var_C= -0xC

LDR             R3, [R0,#0x164]
MOV             R1, #0
CMP             R3, R1
BEQ             loc_345B4
PUSH            {R4,LR}
MOV             R4, R0
SUB             SP, SP, #8
MOV             R0, R3
STR             R3, [SP,#0x10+var_C]
BL              sub_33D04
CMP             R0, #0
BNE             loc_345BC
LDR             R1, [SP,#0x10+var_C]
MOV             R0, R4
BL              sub_2BBB4

loc_3459C
LDR             R3, [SP,#0x10+var_C]
MOV             R2, #0
STR             R2, [R4,#0x164]
MOV             R0, R3
ADD             SP, SP, #8
POP             {R4,PC}

loc_345B4
MOV             R0, R3
BX              LR

loc_345BC
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2518
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aGetQueued ; "__get_queued"
ADD             R0, SP, #0x10+var_C
BL              sub_2AA08
BL              sub_2D548
B               loc_3459C
; End of function sub_34560

off_345DC DCD aGetQueued ; "__get_queued"



; void **__fastcall sub_345E0(pthread_rwlock_t *)
sub_345E0
PUSH            {R4-R6,LR}
ADD             R4, R0, #0x140
MOV             R5, R0
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_34630
MOV             R0, R5
BL              sub_34560
MOV             R5, R0
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3463C
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R5
POP             {R4-R6,PC}

loc_34630
MOVW            R1, #0x252D
LDR             R0, =aGetQueued_0 ; "get_queued"
BL              sub_2CB04

loc_3463C
MOVW            R1, #0x252F
LDR             R0, =aGetQueued_0 ; "get_queued"
BL              sub_2D6AC
; End of function sub_345E0

off_34648 DCD aGetQueued_0 ; "get_queued"



; void sub_3464C()
sub_3464C

var_814= -0x814
var_808= -0x808
s= -0x804

PUSH            {R4-R9,LR}
MOVW            R5, #:lower16:byte_686E8
SUB             SP, SP, #0x810
MOVT            R5, #:upper16:byte_686E8
SUB             SP, SP, #0xC
LDR             R0, [R5,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_mutex_lock
SUBS            R6, R0, #0
BNE             loc_34908
LDR             R0, [R5,#(dword_68C04 - 0x686E8)]
CMP             R0, #0
STR             R0, [SP,#0x81C+var_808]
BEQ             loc_348B4
MOV             R1, #0
LDR             R4, [R0,#0x160]
BL              sub_33D04
CMP             R0, #0
LDR             R7, =aDiscardStale ; "discard_stale"
BEQ             loc_34784

loc_34698
LDR             R3, [SP,#0x81C+var_808]
LDR             R1, [R5,#(dword_68C04 - 0x686E8)]
LDR             R9, [R3,#0x15C]
LDR             R0, [R1,#0x158]
CMP             R9, #0
BEQ             loc_347AC
LDR             R2, [R0,#0x14]
ADD             R12, R3, #0x158
LDR             LR, [R0,#0x10]
SUB             LR, LR, R2
CMP             R3, LR
BEQ             loc_347DC

loc_346C8
LDR             R0, [R3,#0x160]
ADD             R2, R9, R2
STR             R0, [R2,#8]
LDR             R8, [R3,#0x160]

loc_346D8
LDR             R0, [R1,#0x158]
CMP             R8, #0
LDRNE           R2, [R0,#0x14]
LDRNE           R0, [R3,#0x15C]
ADDNE           R8, R8, R2
STRNE           R0, [R8,#4]
LDRNE           R0, [R1,#0x158]
LDR             LR, [R3,#0x174]
LDR             R2, [R0,#4]
LDR             R0, [R0]
SUB             R2, R2, #1
AND             R2, R2, LR
ADD             R2, R2, R2,LSL#1
ADD             R0, R0, R2,LSL#2
LDR             LR, [R0,#4]
SUB             LR, LR, #1
STR             LR, [R0,#4]
LDR             R0, [R1,#0x158]
LDR             R0, [R0]
LDR             LR, [R0,R2,LSL#2]
CMP             LR, R12
LDREQ           R1, [R3,#0x168]
STREQ           R1, [R0,R2,LSL#2]
LDR             R0, [R3,#0x164]
LDR             R2, [R3,#0x168]
LDREQ           R1, [R5,#(dword_68C04 - 0x686E8)]
CMP             R0, #0
STRNE           R2, [R0,#0x10]
LDRNE           R2, [R3,#0x168]
CMP             R2, #0
LDRNE           R3, [R3,#0x164]
STRNE           R3, [R2,#0xC]
LDR             R2, [R1,#0x158]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_34768
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1549
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R2, R7
ADD             R0, SP, #0x81C+var_808
ADD             R6, R6, #1
BL              sub_2AA08

loc_34784
CMP             R4, #0
STR             R4, [SP,#0x81C+var_808]
BEQ             loc_347FC
MOV             R0, R4
MOV             R1, #0
LDR             R4, [R4,#0x160]
BL              sub_33D04
CMP             R0, #0
BEQ             loc_34784
B               loc_34698

loc_347AC
LDR             R8, [R3,#0x160]
CMP             R8, #0
BEQ             loc_348EC
LDR             R2, [R0,#0x14]
ADD             R12, R3, #0x158
LDR             LR, [R0,#0x10]
SUB             LR, LR, R2
CMP             R3, LR
BEQ             loc_347DC

loc_347D0
MOV             R1, R8
STR             R8, [R5,#(dword_68C04 - 0x686E8)]
B               loc_346D8

loc_347DC
ADD             R2, R9, R2
STR             R2, [R0,#0x10]
LDR             R9, [R3,#0x15C]
CMP             R9, #0
BEQ             loc_34958
LDR             R2, [R1,#0x158]
LDR             R2, [R2,#0x14]
B               loc_346C8

loc_347FC               ; cond
MOV             R0, #stru_72E68
BL              pthread_cond_signal
LDR             R0, [R5,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_34960
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R6, #0
BEQ             loc_348A8
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_348A8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34880
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34880
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_348A8

loc_34880
MOVW            R2, #:lower16:aDiscardedDStal ; "Discarded %d stales that didn't match c"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aDiscardedDStal ; "Discarded %d stales that didn't match c"...
MOV             R3, R6
ADD             R0, SP, #0x81C+s ; s
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_348A8
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_348B4               ; cond
MOV             R0, #stru_72E68
BL              pthread_cond_signal
LDR             R0, [R5,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_34960
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_348EC               ; ptr
LDR             R0, [R0]
BL              free
LDR             R3, [R5,#(dword_68C04 - 0x686E8)]
LDR             R0, [R3,#0x158] ; ptr
BL              free
STR             R8, [R5,#(dword_68C04 - 0x686E8)]
B               loc_34768

loc_34908
BL              __errno_location
LDR             LR, =aDiscardStale ; "discard_stale"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x81C+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1542
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x81C+var_814]

loc_34934               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_34958
LDR             R8, [R3,#0x160]
B               loc_347D0

loc_34960
BL              __errno_location
LDR             LR, =aDiscardStale ; "discard_stale"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x154F
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x81C+s
STR             R12, [SP,#0x81C+var_814]
B               loc_34934
; End of function sub_3464C

off_34990 DCD aDiscardStale ; "discard_stale"



; int sub_34994()
sub_34994
PUSH            {R4-R10,LR}
BL              pthread_self
BL              pthread_detach
BL              sub_3464C
MOV             R0, #stru_74F90 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_34ADC
MOVW            R3, #:lower16:dword_76228
MOVW            R0, #:lower16:stru_74F90
MOVT            R3, #:upper16:dword_76228
MOVT            R0, #:upper16:stru_74F90 ; rwlock
LDR             R8, [R3]
BL              pthread_rwlock_unlock
SUBS            R5, R0, #0
BNE             loc_34AE8
MOV             R6, #off_67964
LDR             R3, [R6] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R8, #0
BLE             loc_34A74
MOVW            R10, #:lower16:dword_73F20
MOVW            R7, #:lower16:stru_76018
MOVT            R10, #:upper16:dword_73F20
MOVT            R7, #:upper16:stru_76018
MOV             R9, #1

loc_34A04
LDR             R3, [R10]
LDR             R3, [R3,R5,LSL#2]
LDR             R4, [R3,#0x24]
CMP             R4, #0
BEQ             loc_34A68
LDR             R2, [R4,#0x20]
CMP             R2, #0
BNE             loc_34A68
STRB            R9, [R3,#0x3E]
MOV             R0, R4
BL              sub_308D8
MOV             R0, R7  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_34AC4
LDR             R3, [R4,#4]
MOV             R0, R4
LDR             R3, [R3,#0x4C]
BLX             R3
MOV             R0, R7  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_34AD0
LDR             R3, [R6] ; sub_1EAA0
BLX             R3      ; sub_1EAA0

loc_34A68
ADD             R5, R5, #1
CMP             R8, R5
BNE             loc_34A04

loc_34A74               ; mutex
MOV             R0, #stru_74F6C
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_34AB8
MOV             R0, #stru_76198 ; cond
BL              pthread_cond_broadcast
MOV             R0, #stru_74F6C ; mutex
BL              pthread_mutex_unlock
SUBS            R4, R0, #0
BNE             loc_34AF4
LDR             R3, [R6] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4
POP             {R4-R10,PC}

loc_34AB8
MOVW            R1, #0x159F
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2CB60

loc_34AC4
MOVW            R1, #0x1599
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2CB60

loc_34AD0
MOVW            R1, #0x159B
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2CBBC

loc_34ADC
MOVW            R1, #0x1584
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2DCC0

loc_34AE8
MOVW            R1, #0x1586
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2D6AC

loc_34AF4
MOVW            R1, #0x15A1
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2CBBC
; End of function sub_34994

off_34B00 DCD aRestartThread ; "restart_thread"



; void __fastcall sub_34B04(int, unsigned __int64)
sub_34B04

var_8A4= -0x8A4
var_89C= -0x89C
var_894= -0x894
var_88C= -0x88C
var_884= -0x884
var_874= -0x874
var_864= -0x864
var_854= -0x854
info= -0x844
s= -0x804

PUSH            {R4-R11,LR}
MOV             R6, R0
VPUSH           {D8-D13}
SUB             SP, SP, #0x8A0
SUB             SP, SP, #4
ADD             R0, SP, #0x8A4+info ; info
STRD            R2, R3, [SP,#0x8A4+var_88C]
BL              sysinfo
CMP             R0, #0
BEQ             loc_34BAC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34B54
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_353A0

loc_34B54
BL              __errno_location
LDR             R4, [R0]
ADD             R11, SP, #0x8A4+s
MOV             R0, R4  ; errnum
BL              strerror
MOVW            R2, #:lower16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
STR             R0, [SP,#0x8A4+var_8A4]
MOVT            R2, #:upper16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_34B94
MOVW            R7, #:lower16:dword_761D4
MOV             R0, #0  ; timer
MOVT            R7, #:upper16:dword_761D4
BL              time
STR             R0, [R7]
B               loc_34BBC

loc_34BAC
LDR             R3, [SP,#0x8A4+info]
MOV             R7, #dword_761D4
STR             R3, [R7]

loc_34BBC
MOVW            R4, #:lower16:byte_686E8
MOVW            R9, #:lower16:off_67A68 ; "--version-file"
MOVT            R4, #:upper16:byte_686E8
MOVT            R9, #:upper16:off_67A68 ; "--version-file"
ADD             R0, R4, #0x440
BL              sub_206A0
ADD             R0, R4, #0x440
ADD             R1, R0, #0x6C ; 'l'
BL              sub_209CC
MOVW            R3, #:lower16:byte_6A6E0
LDR             R11, [R4,#(dword_68B28 - 0x686E8)]
MOVT            R3, #:upper16:byte_6A6E0
LDR             R1, [R9,#(dword_681D0 - 0x67A68)]
LDR             R2, [R3,#(dword_6A0A0 - 0x6A6E0)]
VMOV.F64        D9, D0
SUB             R2, R11, R2
CMP             R1, R2
BGT             loc_34E94
ADD             R1, R4, #0x440
STR             R11, [R3,#(dword_6A0A0 - 0x6A6E0)]
ADD             R0, R1, #0x6C ; 'l'
BL              sub_235FC
CMP             R6, #0
BGE             loc_35168
MOV             R0, #stru_72ED8 ; mutex
BL              pthread_mutex_lock
SUBS            R6, R0, #0
BNE             loc_355C4
MOV             R11, #dword_76228
LDR             R3, [R11]
CMP             R3, #0
BLE             loc_34D24
ADD             R10, R4, #0x440
VLDR            D8, =0.0
VLDR            D12, =60.0
VLDR            D11, =300.0
VLDR            D10, =900.0
B               loc_34C6C

loc_34C5C
LDR             R3, [R11]
ADD             R6, R6, #1
CMP             R3, R6
BLE             loc_34D24

loc_34C6C
MOV             R0, R6
BL              sub_2F688
LDR             R5, [R0,#0x24]
MOV             R0, R10
ADD             R8, R5, #0x8C
MOV             R1, R8
BL              sub_209CC
MOV             R1, R10
VMOV.F64        D13, D0
MOV             R0, R8
BL              sub_235FC
VCMPE.F64       D13, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_34C5C
LDR             R3, [R9,#(dword_681D0 - 0x67A68)]
ADD             R0, R5, #0x30 ; '0'
VMOV.F64        D1, D13
VMOV.F64        D0, D8
VMOV            S15, R3
VCVT.F64.S32    D2, S15
BL              sub_2A0D8
VMOV.F64        D1, D13
ADD             R0, R5, #0x38 ; '8'
VMOV.F64        D0, D8
VMOV.F64        D2, D12
BL              sub_2A0D8
VCMPE.F64       D13, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_34C5C
ADD             R0, R5, #0x40 ; '@'
VMOV.F64        D2, D11
VMOV.F64        D1, D13
VMOV.F64        D0, D8
BL              sub_2A0D8
VCMPE.F64       D13, #0.0
ADD             R0, R5, #0x48 ; 'H'
VMRS            APSR_nzcv, FPSCR
BLS             loc_34C5C
VMOV.F64        D1, D13
ADD             R6, R6, #1
VMOV.F64        D2, D10
VMOV.F64        D0, D8
BL              sub_2A0D8
LDR             R3, [R11]
CMP             R3, R6
BGT             loc_34C6C

loc_34D24               ; mutex
MOV             R0, #stru_72ED8
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_355FC
MOV             R6, #off_67964
LDR             R3, [R6] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, #stru_72ED8 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_354BC
MOVW            R5, #:lower16:dbl_72D88
LDRD            R0, R1, [SP,#0x8A4+var_88C]
BLX             sub_4AB04
MOVT            R5, #:upper16:dbl_72D88
VMOV            D10, R0, R1
VLDR            D7, [R5]
LDR             R3, [R4,#(dword_68C00 - 0x686E8)]
VADD.F64        D7, D7, D10
VSTR            D7, [R5]

loc_34D80
LDR             R11, =unk_68BA0
ADD             R3, R3, #1
CMP             R3, #0xB
MOV             R8, #0
MOV             R0, #0
MOV             R1, #0
ADD             R10, R11, #0x60 ; '`'
MOVGT           R3, #0
STR             R3, [R4,#(dword_68C00 - 0x686E8)]

loc_34DA4
VLDM            R11!, {D8}
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
BLT             loc_34DCC
BLX             sub_4AB04
VMOV            D7, R0, R1
ADD             R8, R8, #1
VADD.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABD0

loc_34DCC
CMP             R11, R10
BNE             loc_34DA4
CMP             R8, #0
BEQ             loc_34DEC
MOV             R2, R8
MOV             R3, R8,ASR#31
BLX             sub_4AB70
STRD            R0, R1, [SP,#0x8A4+var_88C]

loc_34DEC
LDR             R3, [R9,#(dword_681D0 - 0x67A68)]
VMOV            S15, R3
VCVT.F64.S32    D8, S15
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
BHI             loc_35410
VCMPE.F64       D9, #0.0
VMRS            APSR_nzcv, FPSCR
BHI             loc_353B8

loc_34E10
MOVW            R3, #:lower16:dbl_761C8
VLDR            D7, =1000000.0
MOVT            R3, #:upper16:dbl_761C8
MOVW            R8, #:lower16:dword_76188
VLDR            D6, [R3]
MOVT            R8, #:upper16:dword_76188
MOV             R10, #1
VMUL.F64        D7, D6, D7
VMOV            R0, R1, D7
BLX             sub_4ABD0
LDR             R3, [R4,#(dword_68C00 - 0x686E8)]
VLDR            D7, =0.0
LDR             R2, =dbl_68BA8
STRD            R0, R1, [R8]
MOV             R3, R3,LSL#3
VMOV.F64        D5, D7
ADD             R1, R2, R3
VSTR            D7, [R1,#-8]
B               loc_35054
ALIGN 0x10
dbl_34E60 DCFD 0.0
dbl_34E68 DCFD 60.0
dbl_34E70 DCFD 300.0
dbl_34E78 DCFD 900.0
dbl_34E80 DCFD 1000000.0
off_34E88 DCD unk_68BA0
off_34E8C DCD dbl_68BA8
off_34E90 DCD dword_68B28

loc_34E94
CMP             R6, #0
BLT             loc_35158
ADD             R1, R4, #0x440
MOV             R10, #0
ADD             R0, R1, #0x6C ; 'l'
BL              sub_235FC

loc_34EAC
MOV             R0, R6
BL              sub_2F688
LDR             R5, [R0,#0x24]
ADD             R0, R0, #0x2C ; ','
LDR             R1, =dword_68B28
BL              sub_235FC
ADD             R8, R5, #0x8C
LDR             R0, =dword_68B28
MOV             R1, R8
STR             R11, [R5,#0xF0]
BL              sub_209CC
MOV             R0, R8
LDR             R1, =dword_68B28
VMOV.F64        D8, D0
BL              sub_235FC
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_34F88
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34F38
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34F38
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_34F88

loc_34F38
LDRD            R0, R1, [SP,#0x8A4+var_88C]
ADD             R11, SP, #0x8A4+s
BLX             sub_4AB04
VMOV            D7, R0, R1
MOVW            R2, #:lower16:aThreadDLluHash ; "[thread %d: %llu hashes, %.1f mhash/sec"...
VLDR            D6, =1000000.0
MOVT            R2, #:upper16:aThreadDLluHash ; "[thread %d: %llu hashes, %.1f mhash/sec"...
VDIV.F64        D5, D7, D8
MOV             R3, R6
LDRD            R0, R1, [SP,#0x8A4+var_88C]
STRD            R0, R1, [SP,#0x8A4+var_8A4]
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
VDIV.F64        D7, D5, D6
VSTR            D7, [SP,#0x8A4+var_89C]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_34F88
MOVW            R2, #0x4240
LDRD            R0, R1, [SP,#0x8A4+var_88C]
MOVT            R2, #0xF
MOV             R3, #0
BLX             sub_4AB70
STRD            R0, R1, [SP,#0x8A4+var_88C]
MOV             R0, #stru_72ED8 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3553C
LDRD            R0, R1, [SP,#0x8A4+var_88C]
BLX             sub_4AB04
VLDR            D7, [R5,#0x50]
VMOV            D10, R0, R1
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
VADD.F64        D7, D7, D10
VSTR            D7, [R5,#0x50]
BHI             loc_3532C

loc_34FD8               ; mutex
MOV             R0, #stru_72ED8
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_35578
MOV             R6, #off_67964
LDR             R3, [R6] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R3, #byte_76014
LDRB            R3, [R3]
TST             R10, R3
BNE             loc_35458
MOV             R0, #stru_72ED8 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_354BC
MOVW            R5, #:lower16:dbl_72D88
CMP             R10, #0
MOVT            R5, #:upper16:dbl_72D88
LDR             R3, [R4,#(dword_68C00 - 0x686E8)]
VLDR            D7, [R5]
VADD.F64        D7, D7, D10
VSTR            D7, [R5]
BNE             loc_34D80
LDR             R2, =dbl_68BA8
MOV             R3, R3,LSL#3
ADD             R1, R2, R3
VLDR            D5, [R1,#-8]

loc_35054
MOVW            R1, #:lower16:dword_76194
VLDR            S14, [R7]
MOVT            R1, #:upper16:dword_76194
LDR             R4, =dword_681C8
LDR             R1, [R1]
ADD             R3, R2, R3
VADD.F64        D10, D10, D5
VCVT.F64.S32    D6, S14
ADD             R2, R4, #0x20 ; ' '
VLDR            D5, [R2,#(dbl_681E0 - 0x681E8)]
VMOV            S15, R1
VLDR            D4, =86400.0
VCVT.F64.S32    D7, S15
VSTR            D10, [R3,#-8]
VSUB.F64        D7, D6, D7
VSUB.F64        D6, D7, D5
VSTR            D7, [R4,#(dbl_681C0 - 0x681C8)]
VCMPE.F64       D6, D4
VMRS            APSR_nzcv, FPSCR
BLE             loc_35170
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_350CC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_35440

loc_350CC
ADD             R11, SP, #0x8A4+s
MOV             R2, #aCgminerTimeErr ; "cgminer time error total_secs = %f last"...
MOV             R1, #0x800 ; maxlen
VSTR            D5, [SP,#0x8A4+var_89C]
MOV             R0, R11 ; s
VSTR            D7, [SP,#0x8A4+var_8A4]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_350FC               ; mutex
MOV             R0, #stru_72ED8
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_355A8
LDR             R3, [R6] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
BL              sub_30A48
MOV             R0, #stru_72ED8 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_355E0
CMP             R10, #0
BNE             loc_3517C

loc_35138               ; mutex
MOV             R0, #stru_72ED8
BL              pthread_mutex_unlock
CMP             R0, #0
ADDNE           R11, SP, #0x8A4+s
BNE             loc_35514
LDR             R3, [R6] ; sub_1EAA0
BLX             R3      ; sub_1EAA0

loc_35158
ADD             SP, SP, #0x8A0
ADD             SP, SP, #4
VPOP            {D8-D13}
POP             {R4-R11,PC}

loc_35168
MOV             R10, #1
B               loc_34EAC

loc_35170
CMP             R10, #0
VSTR            D7, [R2,#(dbl_681E0 - 0x681E8)]
BEQ             loc_35138

loc_3517C
VLDR            D6, [R4,#(dbl_681C0 - 0x681C8)]
MOV             R4, #4
VLDR            D5, [R5]
ADD             R10, SP, #0x8A4+var_874
VLDR            D8, =1000000.0
ADD             R7, SP, #0x8A4+var_864
LDR             R5, =byte_6A0B0
ADD             R8, SP, #0x8A4+var_854
ADD             R11, SP, #0x8A4+s
VDIV.F64        D7, D5, D6
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABD0
ADD             R2, SP, #0x8A4+var_884 ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8A4+var_8A4] ; int
BL              sub_287D8
MOVW            R3, #:lower16:dbl_761C8
MOVW            R2, #0x6667
MOVT            R3, #:upper16:dbl_761C8
MOVT            R2, #0x6666
VLDR            D7, [R3]
VLDR            D5, =100.0
VCVT.S32.F64    S13, D7
VMUL.F64        D7, D7, D8
VMOV            R12, S13
SMULL           R2, R3, R12, R2
MOV             R12, R12,ASR#31
VMOV            R0, R1, D7
RSB             R12, R12, R3,ASR#2
VMOV            S15, R12
VCVT.F64.S32    D7, S15
VDIV.F64        D6, D7, D5
VSTR            D6, [R5,#(dbl_6A0A8 - 0x6A0B0)]
BLX             sub_4ABD0
MOV             R2, R10 ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8A4+var_8A4] ; int
BL              sub_287D8
MOV             R3, #dbl_762D8
VLDR            D7, [R3]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABD0
MOV             R2, R7  ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8A4+var_8A4] ; int
BL              sub_287D8
MOV             R3, #dbl_762D0
VLDR            D7, [R3]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABD0
MOV             R2, R8  ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8A4+var_8A4] ; int
BL              sub_287D8
MOV             R3, #dbl_72EC0
VLDR            D7, [R3]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABD0
MOV             R2, R11 ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8A4+var_8A4] ; int
BL              sub_287D8
ADD             R1, SP, #0x8A4+var_884
MOVW            R2, #:lower16:aDsS1mS5mS15mSA ; "(%ds):%s (1m):%s (5m):%s (15m):%s (avg)"...
LDR             R3, [R9,#(dword_681D0 - 0x67A68)]
MOVT            R2, #:upper16:aDsS1mS5mS15mSA ; "(%ds):%s (1m):%s (5m):%s (15m):%s (avg)"...
STR             R1, [SP,#0x8A4+var_894]
MOV             R0, R5  ; s
MOV             R1, #0x100 ; maxlen
STR             R11, [SP,#0x8A4+var_89C+4]
STMFA           SP, {R7,R8}
STR             R10, [SP,#0x8A4+var_8A4]
BL              snprintf
MOV             R0, #stru_72ED8 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_35514
LDR             R3, [R6] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOVW            R0, #:lower16:aS_1 ; "%s          \r"
MOV             R1, R5
MOVT            R0, #:upper16:aS_1 ; "%s          \r"
BL              printf
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
ADD             SP, SP, #0x8A0
ADD             SP, SP, #4
VPOP            {D8-D13}
POP             {R4-R11,PC}
dbl_35308 DCFD 1000000.0
dbl_35310 DCFD 86400.0
dbl_35318 DCFD 100.0
off_35320 DCD dbl_68BA8
off_35324 DCD dword_681C8
off_35328 DCD byte_6A0B0

loc_3532C
LDR             R3, [R9,#(dword_681D0 - 0x67A68)]
ADD             R0, R5, #0x30 ; '0'
VMOV.F64        D1, D8
VMOV.F64        D0, D10
VMOV            S15, R3
VCVT.F64.S32    D2, S15
BL              sub_2A0D8
VMOV.F64        D1, D8
ADD             R0, R5, #0x38 ; '8'
VMOV.F64        D0, D10
VLDR            D2, =60.0
BL              sub_2A0D8
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_34FD8
ADD             R0, R5, #0x40 ; '@'
VLDR            D2, =300.0
VMOV.F64        D1, D8
VMOV.F64        D0, D10
BL              sub_2A0D8
VCMPE.F64       D8, #0.0
ADD             R0, R5, #0x48 ; 'H'
VMRS            APSR_nzcv, FPSCR
BLS             loc_34FD8
VMOV.F64        D1, D8
VLDR            D2, =900.0
VMOV.F64        D0, D10
BL              sub_2A0D8
B               loc_34FD8

loc_353A0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_34B94
B               loc_34B54

loc_353B8
VLDR            D2, =60.0
MOVW            R0, #:lower16:dbl_762D8
VMOV.F64        D1, D9
MOVT            R0, #:upper16:dbl_762D8
VMOV.F64        D0, D10
BL              sub_2A0D8
MOVW            R0, #:lower16:dbl_762D0
VMOV.F64        D1, D9
MOVT            R0, #:upper16:dbl_762D0
VLDR            D2, =300.0
VMOV.F64        D0, D10
BL              sub_2A0D8
VCMPE.F64       D9, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_34E10
MOVW            R0, #:lower16:dbl_72EC0
VMOV.F64        D1, D9
MOVT            R0, #:upper16:dbl_72EC0
VLDR            D2, =900.0
VMOV.F64        D0, D10
BL              sub_2A0D8
B               loc_34E10

loc_35410
LDRD            R0, R1, [SP,#0x8A4+var_88C]
BLX             sub_4AB04
VMOV            D0, R0, R1
MOVW            R0, #:lower16:dbl_761C8
VMOV.F64        D2, D8
MOVT            R0, #:upper16:dbl_761C8
VMOV.F64        D1, D8
BL              sub_2A0D8
VCMPE.F64       D9, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_34E10
B               loc_353B8

loc_35440
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_350FC
B               loc_350CC

loc_35458
ADD             R11, SP, #0x8A4+s
MOV             R2, R5
MOV             R0, R11
MOV             R1, #0x100
BL              sub_2C350
MOVW            R0, #:lower16:aS_1 ; "%s          \r"
MOV             R1, R11
MOVT            R0, #:upper16:aS_1 ; "%s          \r"
BL              printf
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
MOV             R0, #stru_72ED8 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_354C0
MOVW            R5, #:lower16:dbl_72D88
LDR             R3, [R4,#(dword_68C00 - 0x686E8)]
MOVT            R5, #:upper16:dbl_72D88
VLDR            D7, [R5]
VADD.F64        D7, D7, D10
VSTR            D7, [R5]
B               loc_34D80

loc_354BC
ADD             R11, SP, #0x8A4+s

loc_354C0
BL              __errno_location
LDR             R12, =aHashmeter ; "hashmeter"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R0, #0x1C0B
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0x8A4+var_8A4]

loc_354E4
STR             R0, [SP,#0x8A4+var_89C]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x8A4+var_8A4+4]
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11

loc_354FC
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_35514
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
LDR             R12, =aHashmeter ; "hashmeter"
MOVW            R0, #0x1C66
STR             R1, [SP,#0x8A4+var_8A4]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_354E4

loc_3553C
BL              __errno_location
LDR             LR, =aHashmeter ; "hashmeter"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1BDC

loc_35554
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
ADD             R0, SP, #0x8A4+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x8A4+var_89C]

loc_35568               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x8A4+s
B               loc_354FC

loc_35578
BL              __errno_location
LDR             LR, =aHashmeter ; "hashmeter"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1BE3

loc_35590
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x8A4+s
STR             R12, [SP,#0x8A4+var_89C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_35568

loc_355A8
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aHashmeter ; "hashmeter"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1C3B
B               loc_35590

loc_355C4
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aHashmeter ; "hashmeter"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1BF9
B               loc_35554

loc_355E0
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aHashmeter ; "hashmeter"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1C3D
B               loc_35554

loc_355FC
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aHashmeter ; "hashmeter"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1C08
B               loc_35590
; End of function sub_34B04

dbl_35618 DCFD 60.0
dbl_35620 DCFD 300.0
dbl_35628 DCFD 900.0
off_35630 DCD aHashmeter ; "hashmeter"
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x820
LDR             R4, [R0,#0x24]
SUB             SP, SP, #0xC
MOV             R3, #0
MOVW            R11, #:lower16:off_67964
STR             R3, [SP,#0x1C]
MOV             R8, R0
LDR             R5, [R4,#4]
MOVT            R11, #:upper16:off_67964
LDR             R10, [R0]
MOV             R6, #0
MOV             R7, #0
STR             R3, [SP,#0x18]

loc_3566C
LDRB            R3, [R4,#0x16C]
CMP             R3, #0
BNE             loc_357CC

loc_35678
STRB            R3, [R8,#0x3F]
B               loc_35694

loc_35680
LDR             R3, [R5,#0x48]
MOV             R0, R4
BLX             R3
CMP             R0, #0
BNE             loc_356F4

loc_35694
LDR             R3, [R4,#0x164]
CMP             R3, #0
BNE             loc_35680
MOV             R1, R10
MOV             R0, R8
ADD             R9, R4, #0x140
BL              sub_341EC
STR             R0, [SP,#0x14]
MOV             R0, R9
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_35814
LDR             R3, [R4,#0x164]
CMP             R3, #0
BNE             loc_35864
LDR             R3, [SP,#0x14]
MOV             R0, R9
STR             R3, [R4,#0x164]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_35898
LDR             R3, [R11] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
B               loc_35680

loc_356F4
LDR             R3, [R5,#0x44]
MOV             R0, R8
BLX             R3
MOV             R3, R1
MOV             R1, #0xFFFFFFFF
MOV             R2, R0
CMP             R3, R1
MOV             R0, #0xFFFFFFFF
MOV             R12, #0
CMPEQ           R2, R0
STRB            R12, [R8,#0x3E]
BEQ             loc_358C8
ADDS            R6, R6, R2
ADD             R0, SP, #0x20 ; ' '
ADC             R7, R7, R3
BL              sub_206A0
ADD             R0, SP, #0x18
LDM             R0, {R0-R3}
SUBS            R3, R3, R1
SUB             R2, R2, R0
ADDMI           R3, R3, #0xF4000
SUBMI           R2, R2, #1
ADDMI           R3, R3, #0x240
ORRS            R1, R6, R7
BEQ             loc_357E0
MOV             R1, #0x30D40
CMP             R3, R1
CMPLE           R2, #0
BLE             loc_357E0

loc_3576C
MOV             R3, R7
MOV             R2, R6
MOV             R0, R10
MOV             R6, #0
BL              sub_34B04
ADD             R1, SP, #0x20 ; ' '
ADD             R0, SP, #0x18
BL              sub_235FC
LDRB            R3, [R8,#0x3C]
MOV             R7, #0
CMP             R3, #0
BNE             loc_35800

loc_3579C
LDR             R3, [R4,#0x20]
CMP             R3, #0
BNE             loc_35800

loc_357A8
LDRB            R3, [R8,#0x3F]
CMP             R3, #0
BEQ             loc_3566C
LDR             R3, [R5,#0x50]
MOV             R0, R4
BLX             R3
LDRB            R3, [R4,#0x16C]
CMP             R3, #0
BEQ             loc_35678

loc_357CC
MOV             R3, #1
STR             R3, [R4,#0x20]
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_357E0
MOV             R3, #off_67A68 ; "--version-file"
LDR             R3, [R3,#(dword_681D0 - 0x67A68)]
CMP             R3, R2
BLE             loc_3576C
LDRB            R3, [R8,#0x3C]
CMP             R3, #0
BEQ             loc_3579C

loc_35800
ADD             R2, R5, #0x5C ; '\'
MOV             R1, R10
MOV             R0, R8
BL              sub_299A8
B               loc_357A8

loc_35814
BL              __errno_location
LDR             LR, =aFillQueue ; "fill_queue"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x28 ; '('
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x24ED
STMEA           SP, {R1,LR}
STR             R12, [SP,#8]

loc_35840
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x28 ; '('
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_35864
MOV             R0, R9
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_35898
LDR             R3, [R11] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x24FC
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aFillQueue ; "fill_queue"
ADD             R0, SP, #0x14
BL              sub_2AA08
B               loc_35680

loc_35898
BL              __errno_location
LDR             LR, =aFillQueue ; "fill_queue"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x24F8
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x28 ; '('
STR             R12, [SP,#8]
B               loc_35840

loc_358C8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, R12
BNE             loc_35904
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R12
BNE             loc_35904
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_35934

loc_35904
LDR             R12, [R4,#8]
MOVW            R2, #:lower16:aSDFailureDisab ; "%s %d failure, disabling!"
LDR             R3, [R5,#8]
MOVT            R2, #:upper16:aSDFailureDisab ; "%s %d failure, disabling!"
MOV             R1, #0x800
ADD             R0, SP, #0x28 ; '('
STR             R12, [SP]
BL              snprintf
ADD             R1, SP, #0x28 ; '('
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_35934
MOV             R1, #1
MOV             R0, R4
STR             R1, [R4,#0x20]
BL              sub_22BB4
B               loc_357CC
off_35948 DCD aFillQueue ; "fill_queue"
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x860
LDR             R5, [R0,#0x24]
MOV             R3, #0
SUB             SP, SP, #4
STR             R3, [SP,#0x14]
STR             R3, [SP,#0x10]
LDRB            R3, [R5,#0x16C]
LDR             R8, [R5,#4]
LDR             R10, [R0]
CMP             R3, #0
BNE             loc_35A7C
MOV             R4, R0
ADD             R9, SP, #0x18

loc_35984
MOV             R11, #0
MOV             R0, R4
STRB            R11, [R4,#0x3F]
LDR             R3, [R8,#0x44]
BLX             R3
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R1, R3
MOV             R6, R0
CMPEQ           R0, R2
MOV             R7, R1
STRB            R11, [R4,#0x3E]
BEQ             loc_35B68
MOV             R0, R9
BL              sub_206A0
ADD             R0, SP, #0x20 ; ' '
BL              sysinfo
CMP             R0, #0
BEQ             loc_35AD0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_35A90
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_35A90
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_35A90

loc_35A0C
MOV             R0, #0
BL              time
MOV             R3, #dword_761D4
STR             R0, [R3]

loc_35A20
MOVW            R3, #:lower16:dword_76194
VMOV            S15, R0
MOVT            R3, #:upper16:dword_76194
VCVT.F64.S32    D6, S15
VLDR            S14, [R3]
ORRS            R3, R6, R7
LDR             R2, =dword_681C8
VCVT.F64.S32    D7, S14
VSUB.F64        D7, D6, D7
VSTR            D7, [R2,#(dbl_681C0 - 0x681C8)]
BNE             loc_35B2C
LDRB            R3, [R4,#0x3C]
CMP             R3, #0
BNE             loc_35B54

loc_35A58
LDR             R3, [R5,#0x20]
CMP             R3, #0
BNE             loc_35B54

loc_35A64
LDRB            R3, [R4,#0x3F]
CMP             R3, #0
BNE             loc_35AE4

loc_35A70
LDRB            R3, [R5,#0x16C]
CMP             R3, #0
BEQ             loc_35984

loc_35A7C
MOV             R3, #1
STR             R3, [R5,#0x20]
ADD             SP, SP, #0x860
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_35A90
BL              __errno_location
LDR             R11, [R0]
MOV             R0, R11
BL              strerror
MOVW            R2, #:lower16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
STR             R0, [SP]
MOV             R3, R11
ADD             R0, SP, #0x60 ; '`'
MOVT            R2, #:upper16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x60 ; '`'
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_35A0C

loc_35AD0
LDR             R0, [SP,#0x20]
MOV             R3, #dword_761D4
STR             R0, [R3]
B               loc_35A20

loc_35AE4
MOV             R0, #stru_76018
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_35BEC
LDR             R3, [R8,#0x50]
MOV             R0, R5
BLX             R3
MOV             R0, #stru_76018
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_35C3C
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
B               loc_35A70

loc_35B2C
MOV             R3, R7
MOV             R2, R6
MOV             R0, R10
BL              sub_34B04
MOV             R1, R9
ADD             R0, SP, #0x10
BL              sub_235FC
LDRB            R3, [R4,#0x3C]
CMP             R3, #0
BEQ             loc_35A58

loc_35B54
ADD             R2, R8, #0x5C ; '\'
MOV             R1, R10
MOV             R0, R4
BL              sub_299A8
B               loc_35A64

loc_35B68
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, R11
BNE             loc_35B90
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R11
BEQ             loc_35BD4

loc_35B90
LDR             R12, [R5,#8]
MOVW            R2, #:lower16:aSDFailureDisab ; "%s %d failure, disabling!"
LDR             R3, [R8,#8]
MOVT            R2, #:upper16:aSDFailureDisab ; "%s %d failure, disabling!"
MOV             R1, #0x800
ADD             R0, SP, #0x60 ; '`'
STR             R12, [SP]
BL              snprintf
ADD             R1, SP, #0x60 ; '`'
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_35BC0
MOV             R1, #1
MOV             R0, R5
STR             R1, [R5,#0x20]
BL              sub_22BB4
B               loc_35A7C

loc_35BD4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_35B90
B               loc_35BC0

loc_35BEC
BL              __errno_location
LDR             LR, =aHashDriverWork ; "hash_driver_work"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x60 ; '`'
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2686
STMEA           SP, {R1,LR}
STR             R12, [SP,#8]

loc_35C18
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x60 ; '`'
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_35C3C
BL              __errno_location
LDR             LR, =aHashDriverWork ; "hash_driver_work"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2688
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x60 ; '`'
STR             R12, [SP,#8]
B               loc_35C18
off_35C6C DCD dword_681C8
off_35C70 DCD aHashDriverWork ; "hash_driver_work"



; void __fastcall sub_35C74(int)
sub_35C74

var_874= -0x874
var_868= -0x868
var_864= -0x864
var_860= -0x860
var_85C= -0x85C
var_858= -0x858
var_854= -0x854
var_850= -0x850
var_84C= -0x84C
var_848= -0x848
remaining= -0x844
var_840= -0x840
var_83C= -0x83C
var_838= -0x838
var_834= -0x834
var_830= -0x830
var_828= -0x828
var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
requested_time= -0x804

PUSH            {R4-R11,LR}
MOVW            R3, #:lower16:off_67A68 ; "--version-file"
SUB             SP, SP, #0x870
MOVT            R3, #:upper16:off_67A68 ; "--version-file"
SUB             SP, SP, #4
MOVW            R2, #0x6667
STR             R3, [SP,#0x874+var_858]
MOVT            R2, #0x6666
LDR             R3, [R3,#(dword_681D0 - 0x67A68)]
MOV             R10, R0
LDR             R12, [R0,#4]
LDR             R8, [R0,#0x24]
SMULL           R0, R1, R3, R2
MOV             R3, R3,ASR#31
LDR             R2, [R8,#4]
MOV             R0, R10
STR             R2, [SP,#0x874+var_868]
RSBS            R3, R3, R1,ASR#1
LDR             R2, [R10]
MOVEQ           R3, #1
CMP             R12, #0
STR             R3, [SP,#0x874+var_850]
MOVEQ           R3, #1
LDRBNE          R3, [R10,#8]
STR             R2, [SP,#0x874+var_84C]
STR             R3, [SP,#0x874+remaining]
LDR             R3, [SP,#0x874+var_868]
LDR             R3, [R3,#0x30]
BLX             R3
STR             R0, [SP,#0x874+var_85C]
ADD             R0, SP, #0x874+var_824
BL              sub_206A0
ADD             R0, SP, #0x874+var_80C
BL              sub_206A0
LDRB            R3, [R8,#0x16C]
CMP             R3, #0
BNE             loc_360A0
LDR             R1, [SP,#0x874+var_850]
MOVW            R2, #0x4240
MOV             R9, R3
MOV             R3, R2
MOVT            R3, #0xF
MOVW            R2, #0xB280
STR             R3, [SP,#0x874+var_834]
MOVT            R2, #0xEE6
MUL             R3, R3, R1
STR             R2, [SP,#0x874+var_838]
MOV             R11, R9
MOV             R6, #0
MOV             R7, #0
MOV             R2, R3
STR             R3, [SP,#0x874+var_840]
CMP             R2, #0
ADD             R3, R3, #0x3FC
ADD             R3, R3, #3
MOVGE           R3, R2
MOV             R3, R3,ASR#10
STR             R3, [SP,#0x874+var_83C]

loc_35D5C
LDR             R1, [SP,#0x874+var_84C]
MOV             R0, R10
BL              sub_341EC
MOV             R4, #0
MOV             R3, #1
STR             R0, [SP,#0x874+var_828]
ADD             R0, SP, #0x874+var_814
STRB            R4, [R10,#0x3E]
STRB            R3, [R8,#0xAC]
BL              sub_206A0
LDR             R1, [SP,#0x874+var_828]
MOV             R2, #0
MOV             R3, #0
MOV             R0, R10
STR             R4, [R1,#0xF8]
STRD            R2, R3, [R8,#0xA0]
LDR             R3, [SP,#0x874+var_868]
LDR             R3, [R3,#0x38]
BLX             R3
CMP             R0, R4
BEQ             loc_362C8
ADD             R2, R8, #0x128
LDR             R3, [SP,#0x874+var_828]
STR             R2, [SP,#0x874+var_854]
ADD             R1, R8, #0x130
LDR             R2, [SP,#0x874+var_868]
VLDR            D6, [R3,#0x178]
STR             R1, [SP,#0x874+var_860]
ADD             R1, R8, #0x138
VLDR            D7, [R2,#0x68]
STR             R1, [SP,#0x874+var_864]
VCMP.F64        D7, D6
VMRS            APSR_nzcv, FPSCR
VMOVGT.F64      D7, D6
VSTR            D7, [R3,#0xE0]
VLDR            D6, [R2,#0x70]
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
VMOVGT.F64      D7, D6
VSTR            D7, [R3,#0xE0]

loc_35DFC
ADD             R0, SP, #0x874+var_81C
BL              sub_206A0
ADD             R1, SP, #0x874+var_824
ADD             R0, SP, #0x874+var_81C
BL              sub_202C0
LDR             R1, [SP,#0x874+var_854]
ADD             R0, SP, #0x874+var_824
BL              sub_202F4
LDR             R1, [SP,#0x874+var_860]
ADD             R0, SP, #0x874+var_824
BL              sub_20338
CMP             R0, #0
BNE             loc_36124

loc_35E30
LDR             R1, [SP,#0x874+var_864]
ADD             R0, SP, #0x874+var_824
BL              sub_2036C
CMP             R0, #0
BNE             loc_36134

loc_35E44
LDR             R3, [R8,#0x124]
ADD             R0, SP, #0x874+var_824
LDR             R2, [SP,#0x874+var_828]
ADD             R3, R3, #1
STR             R3, [R8,#0x124]
LDR             R5, [R2,#0x104]
ADD             R1, R5, #0x184
ADD             R4, R5, #0x18C
BL              sub_202F4
MOV             R1, R4
ADD             R0, SP, #0x874+var_824
BL              sub_20338
CMP             R0, #0
BNE             loc_36114

loc_35E7C
ADD             R4, R5, #0x194
ADD             R0, SP, #0x874+var_824
MOV             R1, R4
BL              sub_2036C
CMP             R0, #0
BNE             loc_36104

loc_35E94
LDR             R3, [R5,#0x180]
LDR             R0, [SP,#0x874+var_828]
ADD             R3, R3, #1
STR             R3, [R5,#0x180]
ADD             R0, R0, #0x1A8
BL              sub_206A0
MOV             R1, #0  ; oldstate
MOV             R0, #1  ; state
BL              pthread_setcancelstate
MOV             R0, R10
BL              sub_287A4
LDR             R2, [SP,#0x874+var_868]
MOV             R3, #0
LDR             R1, [SP,#0x874+var_828]
MOV             R0, R10
LDR             R12, [SP,#0x874+var_85C]
LDR             R4, [R2,#0x40]
LDR             R2, [R1,#0xF8]
ADD             R2, R12, R2
BLX             R4
MOV             R4, R0
MOV             R0, R10
MOV             R5, R1
BL              sub_2876C
MOV             R1, #0  ; oldstate
MOV             R0, R1  ; state
BL              pthread_setcancelstate
BL              pthread_testcancel
ADD             R0, SP, #0x874+var_824
BL              sub_206A0
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R5, R3
CMPEQ           R4, R2
BEQ             loc_36164
LDRD            R2, R3, [R8,#0xA0]
ADDS            R6, R6, R4
ADC             R7, R7, R5
CMP             R2, R4
SBCS            R3, R3, R5
STRDLT          R4, R5, [R8,#0xA0]
LDR             R4, [SP,#0x874+var_820]
LDR             R2, [SP,#0x874+var_818]
LDR             R3, [SP,#0x874+var_824]
LDR             R1, [SP,#0x874+var_81C]
SUBS            R2, R4, R2
LDR             R5, [SP,#0x874+var_814]
ADDMI           R2, R2, #0xF4000
ADDMI           R2, R2, #0x240
SUB             R1, R3, R1
ADD             R9, R9, R2
MOV             R2, #0xF4240
SUBMI           R1, R1, #1
CMP             R9, R2
LDR             R2, [SP,#0x874+var_810]
ADD             R11, R11, R1
SUBGT           R9, R9, #0xF4000
ADDGT           R11, R11, #1
SUBGT           R9, R9, #0x240
SUB             R2, R4, R2
SUB             R5, R3, R5
CMP             R2, #0
LDR             R2, [SP,#0x874+var_850]
SUBLT           R5, R5, #1
CMP             R2, R11
BGT             loc_361F0
BLT             loc_36268
MOV             R2, #0x186A0
CMP             R9, R2
BGT             loc_3628C

loc_35FB4
LDR             R2, [SP,#0x874+var_808]
LDR             R1, [SP,#0x874+var_80C]
SUBS            R4, R4, R2
ADDMI           R4, R4, #0xF4000
SUB             R3, R3, R1
SUBMI           R3, R3, #1
ADDMI           R4, R4, #0x240
ORRS            R2, R6, R7
BEQ             loc_360B4
MOV             R2, #0x30D40
CMP             R3, #0
CMPLE           R4, R2
BLE             loc_360B4

loc_35FEC
MOV             R3, R7
MOV             R2, R6
LDR             R0, [SP,#0x874+var_84C]
MOV             R6, #0
BL              sub_34B04
ADD             R1, SP, #0x874+var_824
ADD             R0, SP, #0x874+var_80C
BL              sub_235FC
LDRB            R3, [R10,#0x3E]
MOV             R7, #0
CMP             R3, #0
BNE             loc_360D0

loc_3601C
LDRB            R3, [R10,#0x3C]
CMP             R3, #0
BNE             loc_36144
LDR             R9, [R8,#0x20]
CMP             R9, #0
MOVEQ           R11, R9
BNE             loc_36144

loc_36038
LDRD            R2, R3, [R8,#0xA0]
MOV             R1, #0
LDR             R12, [SP,#0x874+var_858]
MOV             R0, #0xFFFFFFFD
CMP             R3, R1
LDR             R12, [R12,#(dword_681F4 - 0x67A68)]
CMPEQ           R2, R0
MOVHI           R1, #1
MOVLS           R1, #0
LDR             R0, [SP,#0x874+var_828]
CMP             R12, R5
ORRLT           R1, R1, #1
CMP             R1, #0
BNE             loc_3607C
BL              sub_33D04
CMP             R0, #0
BEQ             loc_35DFC

loc_3607C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x24D4
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aHashSoleWork ; "hash_sole_work"
ADD             R0, SP, #0x874+var_828
BL              sub_2A70C
LDRB            R3, [R8,#0x16C]
CMP             R3, #0
BEQ             loc_35D5C

loc_360A0
MOV             R3, #1
STR             R3, [R8,#0x20]
ADD             SP, SP, #0x870
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_360B4
LDR             R2, [SP,#0x874+var_858]
LDR             R2, [R2,#(dword_681D0 - 0x67A68)]
CMP             R2, R3
BLE             loc_35FEC
LDRB            R3, [R10,#0x3E]
CMP             R3, #0
BEQ             loc_3601C

loc_360D0
LDR             R3, [SP,#0x874+remaining]
CMP             R3, #0
BNE             loc_3607C
LDR             R2, [SP,#0x874+remaining]
ADD             R0, SP, #0x874+requested_time ; requested_time
LDR             R3, [R10,#4]
MOV             R1, R2  ; remaining
STR             R2, [SP,#0x874+requested_time]
LDR             R2, [SP,#0x874+var_838]
MUL             R3, R2, R3
STR             R3, [SP,#0x874+requested_time.tv_nsec]
BL              nanosleep
B               loc_3607C

loc_36104
MOV             R0, R4
ADD             R1, SP, #0x874+var_824
BL              sub_235FC
B               loc_35E94

loc_36114
MOV             R0, R4
ADD             R1, SP, #0x874+var_824
BL              sub_235FC
B               loc_35E7C

loc_36124
ADD             R1, SP, #0x874+var_824
LDR             R0, [SP,#0x874+var_860]
BL              sub_235FC
B               loc_35E30

loc_36134
ADD             R1, SP, #0x874+var_824
LDR             R0, [SP,#0x874+var_864]
BL              sub_235FC
B               loc_35E44

loc_36144
LDR             R3, [SP,#0x874+var_868]
MOV             R0, R10
LDR             R1, [SP,#0x874+var_84C]
MOV             R9, #0
MOV             R11, R9
ADD             R2, R3, #0x5C ; '\'
BL              sub_299A8
B               loc_36038

loc_36164
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_361A0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_361A0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_361D4

loc_361A0
LDR             R3, [SP,#0x874+var_868]
MOVW            R2, #:lower16:aSDFailureDisab ; "%s %d failure, disabling!"
LDR             R12, [R8,#8]
MOVT            R2, #:upper16:aSDFailureDisab ; "%s %d failure, disabling!"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x874+requested_time ; s
LDR             R3, [R3,#8]
STR             R12, [SP,#0x874+var_874]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x874+requested_time
MOV             R0, #3
BL              sub_1DD60

loc_361D4
MOV             R4, #1
MOV             R0, R8
STR             R4, [R8,#0x20]
MOV             R1, R4
BL              sub_22BB4
STRB            R4, [R8,#0x16C]
B               loc_3607C

loc_361F0
LDR             R2, [SP,#0x874+var_85C]
CMN             R2, #1
BEQ             loc_36038
ADD             R1, R9, #0x400
LDR             R0, [SP,#0x874+var_834]
ADD             R2, R1, #0x3FC
CMP             R1, #0
ADD             R2, R2, #3
STR             R3, [SP,#0x874+var_848]
MOVLT           R1, R2
MOV             R1, R1,ASR#10
BLX             sub_4A548
LDR             R3, [SP,#0x874+var_850]
ADD             R2, R0, #0x10
MOV             R0, #0xFFFFFC00
MUL             R2, R2, R3
MOV             R1, R2
STR             R2, [SP,#0x874+var_830]
BLX             sub_4A2D0
LDR             R1, [SP,#0x874+var_85C]
LDR             R3, [SP,#0x874+var_848]
CMP             R0, R1
MOVCC           R2, #0xFFFFFFFF
STRCC           R2, [SP,#0x874+var_85C]
LDRCS           R2, [SP,#0x874+var_830]
MULCS           R2, R1, R2
MOVCS           R2, R2,LSR#10
STRCS           R2, [SP,#0x874+var_85C]
B               loc_35FB4

loc_36268
LDR             R2, [SP,#0x874+var_85C]
MOV             R1, R11
STR             R3, [SP,#0x874+var_848]
LDR             R3, [SP,#0x874+var_850]
MUL             R0, R3, R2
BLX             sub_4A2D0
LDR             R3, [SP,#0x874+var_848]
STR             R0, [SP,#0x874+var_85C]
B               loc_35FB4

loc_3628C
STR             R3, [SP,#0x874+var_848]
LDR             R3, [SP,#0x874+var_85C]
LDR             R1, [SP,#0x874+var_83C]
MOV             R2, R3,LSL#10
LDR             R3, [SP,#0x874+var_840]
STR             R2, [SP,#0x874+var_85C]
ADD             R0, R3, R9
BLX             sub_4A548
LDR             R2, [SP,#0x874+var_85C]
MOV             R1, R0
MOV             R0, R2
BLX             sub_4A2D0
LDR             R3, [SP,#0x874+var_848]
STR             R0, [SP,#0x874+var_85C]
B               loc_35FB4

loc_362C8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, R4
BNE             loc_362F0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R4
BEQ             loc_3631C

loc_362F0
MOVW            R2, #:lower16:aWorkPrepareFai ; "work prepare failed, exiting mining thr"...
LDR             R3, [SP,#0x874+var_84C]
MOVT            R2, #:upper16:aWorkPrepareFai ; "work prepare failed, exiting mining thr"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x874+requested_time ; s
BL              snprintf
ADD             R1, SP, #0x874+requested_time
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
B               loc_360A0

loc_3631C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_362F0
B               loc_360A0
; End of function sub_35C74

off_36334 DCD aHashSoleWork ; "hash_sole_work"


; Attributes: noreturn

; void __noreturn sub_36338()
sub_36338

var_83C= -0x83C
var_834= -0x834
var_82C= -0x82C
var_828= -0x828
rwlock= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_80C= -0x80C
s= -0x804

PUSH            {R4-R11,LR}
MOV             R1, #0  ; oldtype
VPUSH           {D8}
SUB             SP, SP, #0x830
SUB             SP, SP, #0xC
MOV             R0, #1  ; type
BL              pthread_setcanceltype
MOVW            R4, #:lower16:byte_72E5C
MOVW            R3, #:lower16:byte_76030
MOVW            R0, #:lower16:aWatchdog ; "Watchdog"
MOVW            R2, #:lower16:stru_74F90
MOVW            R1, #:lower16:byte_686E1
MOVT            R3, #:upper16:byte_76030
MOVT            R0, #:upper16:aWatchdog ; "Watchdog"
MOVT            R2, #:upper16:stru_74F90
MOVT            R1, #:upper16:byte_686E1
MOVT            R4, #:upper16:byte_72E5C
STR             R3, [SP,#0x83C+var_828]
MOVW            R10, #:lower16:byte_72D90
STR             R2, [SP,#0x83C+rwlock]
MOVW            R11, #:lower16:dword_76228
STR             R1, [SP,#0x83C+var_820]
MOVT            R10, #:upper16:byte_72D90
STR             R4, [SP,#0x83C+var_82C]
MOVT            R11, #:upper16:dword_76228
BL              sub_22E98
BL              sub_29BA0
MOV             R3, #0
LDR             R0, =dword_68C70
VLDR            D8, =0.0
STR             R3, [SP,#0x83C+var_818]
STR             R3, [SP,#0x83C+var_81C]
BL              sub_206A0

loc_363BC
MOV             R4, #0xC8

loc_363C0               ; useconds
MOVW            R0, #0x2710
BL              usleep
BL              sub_3464C
SUBS            R4, R4, #1
BNE             loc_363C0
MOV             R3, #0
MOV             R2, #0
MOV             R0, #0xFFFFFFFF
BL              sub_34B04
ADD             R0, SP, #0x83C+var_814
BL              sub_206A0
LDR             R3, [SP,#0x83C+var_82C]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_36740

loc_363FC
LDR             R3, [SP,#0x83C+var_828]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36420
MOV             R4, #byte_74F30
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_36874

loc_36420
BL              sub_29640
CMP             R0, #0
MOVNE           R4, #byte_74F30
BNE             loc_36874

loc_36434
MOV             R7, #dword_74FE0
LDR             R3, [R7]
CMP             R3, #0
BLE             loc_363BC
MOVW            R8, #:lower16:aSD_0 ; "%s %d"
MOVW            R9, #:lower16:off_67A68 ; "--version-file"
MOVT            R8, #:upper16:aSD_0 ; "%s %d"
MOVT            R9, #:upper16:off_67A68 ; "--version-file"
MOV             R5, #0
B               loc_36578

loc_36460
CMP             R3, #0x78 ; 'x'
BLE             loc_36568
LDRB            R3, [R10]
MOV             R2, #1
VSTR            D8, [R4,#0x30]
STR             R2, [R4,#0x60]
CMP             R3, #0
BNE             loc_364A8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_364A8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_364D0

loc_364A8
MOVW            R2, #:lower16:aSIdleForMoreTh ; "%s: Idle for more than 60 seconds, decl"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSIdleForMoreTh ; "%s: Idle for more than 60 seconds, decl"...
ADD             R3, SP, #0x83C+var_80C
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #3
BL              sub_1DD60

loc_364D0
ADD             R0, R6, #0x34 ; '4'
BL              sub_206A0
MOV             R1, #3
MOV             R0, R4
BL              sub_22BB4
LDRB            R3, [R9,#(byte_681FC - 0x67A68)]
CMP             R3, #0
BEQ             loc_36568
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_36524
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36524
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_3654C

loc_36524
MOVW            R2, #:lower16:aSAttemptingToR ; "%s: Attempting to restart"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSAttemptingToR ; "%s: Attempting to restart"
ADD             R3, SP, #0x83C+var_80C
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #3
BL              sub_1DD60

loc_3654C
LDR             R3, [R4,#0x20]
CMP             R3, #1
BEQ             loc_36568
LDR             R3, [R4,#4]
MOV             R0, R4
LDR             R3, [R3,#0x10]
BLX             R3

loc_36568
LDR             R3, [R7]
ADD             R5, R5, #1
CMP             R3, R5
BLE             loc_363BC

loc_36578
MOV             R0, R5
BL              sub_2DFF4
LDR             R3, [R0,#0x98]
MOV             R4, R0
LDR             R6, [R3]
CMP             R6, #0
BEQ             loc_36568
LDR             R3, [R0,#4]
LDR             R3, [R3,#0x20]
BLX             R3
LDR             R3, [R4,#4]
ADD             R0, SP, #0x83C+var_80C ; s
LDR             R12, [R4,#8]
MOV             R2, R8  ; format
MOV             R1, #8  ; maxlen
LDR             R3, [R3,#8]
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
LDRB            R3, [R6,#0x3D]
CMP             R3, #0
BNE             loc_36568
LDR             R3, [R4,#0x20]
CMP             R3, #1
BEQ             loc_36568
LDR             R1, [R4,#0x60]
LDR             R2, [SP,#0x83C+var_814]
LDR             R3, [R6,#0x2C]
CMP             R1, #0
SUB             R3, R2, R3
BEQ             loc_36460
CMP             R3, #0x77 ; 'w'
BGT             loc_36670
CMP             R1, #4
BEQ             loc_3665C
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_36634
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36634
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_3665C

loc_36634
MOVW            R2, #:lower16:aSRecoveredDecl ; "%s: Recovered, declaring WELL!"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSRecoveredDecl ; "%s: Recovered, declaring WELL!"
ADD             R3, SP, #0x83C+var_80C
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #3
BL              sub_1DD60

loc_3665C               ; timer
MOV             R0, #0
STR             R0, [R4,#0x60]
BL              time
STR             R0, [R4,#0xF0]
B               loc_36568

loc_36670
CMP             R1, #1
BNE             loc_366FC
CMP             R3, #0x258
BLE             loc_36860
LDRB            R3, [R10]
MOV             R2, #2
STR             R2, [R4,#0x60]
CMP             R3, #0
BNE             loc_366BC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_366BC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, R2
BLE             loc_366E4

loc_366BC
MOVW            R2, #:lower16:aSNotRespondedF ; "%s: Not responded for more than 10 minu"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSNotRespondedF ; "%s: Not responded for more than 10 minu"...
ADD             R3, SP, #0x83C+var_80C
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #3
BL              sub_1DD60

loc_366E4
ADD             R0, R6, #0x34 ; '4'
BL              sub_206A0
MOV             R0, R4
MOV             R1, #4
BL              sub_22BB4
B               loc_36568

loc_366FC
LDR             R3, [R6,#0x34]
SUB             R2, R2, R3
CMP             R2, #0x3C ; '<'
BLE             loc_36568
CMP             R1, #2
BNE             loc_36568

loc_36714
ADD             R0, R6, #0x34 ; '4'
BL              sub_206A0
LDRB            R3, [R9,#(byte_681FC - 0x67A68)]
CMP             R3, #0
BEQ             loc_36568
B               loc_3654C
ALIGN 0x10
dbl_36730 DCFD 0.0
off_36738 DCD dword_68C70
off_3673C DCD aWatchdogThread_0 ; "watchdog_thread"

loc_36740
LDR             R3, [SP,#0x83C+var_828]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36764
MOV             R4, #byte_74F30
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_36434

loc_36764
BL              sub_29640
CMP             R0, #0
BNE             loc_36A38
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_36A4C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36A4C
MOV             R3, #dword_67840
LDR             R2, [R3]
CMP             R2, #3
BGT             loc_36A4C
LDR             R2, [SP,#0x83C+var_828]
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_36AC0

loc_367B4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_367F4

loc_367C0
LDR             R1, [SP,#0x83C+var_828]
MOV             R2, #aWillRestartExe ; "Will restart execution as scheduled at "...
ADD             R0, SP, #0x83C+s ; s
LDR             R12, [R1,#(dword_76038 - 0x76030)]
LDR             R3, [R1,#(dword_7603C - 0x76030)]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #4
BL              sub_1DD60

loc_367F4
LDR             R3, [SP,#0x83C+var_82C]
MOV             R4, #1
LDR             R0, [SP,#0x83C+rwlock] ; rwlock
STRB            R4, [R3]
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_36B00
LDR             R1, [R11]
CMP             R1, #0
BLE             loc_3683C
MOV             R3, #dword_73F20
LDR             R3, [R3]
ADD             R1, R3, R1,LSL#2

loc_3682C
LDR             R2, [R3],#4
CMP             R1, R3
STRB            R4, [R2,#0x3C]
BNE             loc_3682C

loc_3683C               ; rwlock
LDR             R0, [SP,#0x83C+rwlock]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_36B50
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
B               loc_36434

loc_36860
LDR             R3, [R6,#0x34]
SUB             R2, R2, R3
CMP             R2, #0x3C ; '<'
BLE             loc_36568
B               loc_36714

loc_36874
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_36990
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36990
MOV             R3, #dword_67840
LDR             R2, [R3]
CMP             R2, #3
BGT             loc_36990
LDRB            R2, [R4]
CMP             R2, #0
BNE             loc_369F8

loc_368B4
LDR             R3, [R11]
MOV             R4, #0
LDR             R2, [SP,#0x83C+var_82C]
CMP             R3, R4
STRB            R4, [R2]
BLE             loc_36434
LDR             R7, =aWatchdogThread_0 ; "watchdog_thread"
MOVW            R6, #:lower16:aCgminerC ; "cgminer.c"
LDR             R8, [SP,#0x83C+var_820]
MOVT            R6, #:upper16:aCgminerC ; "cgminer.c"

loc_368DC
MOV             R0, R4
BL              sub_2F688
LDR             R3, [R0,#0x24]
MOV             R5, R0
LDR             R3, [R3,#0x20]
CMP             R3, #1
BEQ             loc_3697C
LDRB            R3, [R8]
MOV             R2, #0
STRB            R2, [R0,#0x3C]
CMP             R3, R2
BEQ             loc_36968
LDRB            R3, [R10]
CMP             R3, R2
BNE             loc_36940
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R2
BNE             loc_36940
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_36968

loc_36940
MOVW            R2, #:lower16:aPushingSemPost ; "Pushing sem post to thread %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPushingSemPost ; "Pushing sem post to thread %d"
LDR             R3, [R5]
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #7
BL              sub_1DD60

loc_36968
ADD             R0, R5, #0x10
MOVW            R3, #0x293B
MOV             R2, R7
MOV             R1, R6
BL              sub_22F9C

loc_3697C
LDR             R3, [R11]
ADD             R4, R4, #1
CMP             R3, R4
BGT             loc_368DC
B               loc_36434

loc_36990
LDR             R1, [SP,#0x83C+var_828]
MOV             R2, #aRestartingExec ; "Restarting execution as per start time "...
ADD             R0, SP, #0x83C+s ; s
LDR             R12, [R1,#(dword_76038 - 0x76030)]
LDR             R3, [R1,#(dword_7603C - 0x76030)]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #4
BL              sub_1DD60
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_368B4
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_36A04
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36A04
MOV             R3, #dword_67840

loc_369F8
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_368B4

loc_36A04
LDR             R12, [R4,#(dword_74F38 - 0x74F30)]
MOVW            R2, #:lower16:aWillPauseExecu ; "Will pause execution as scheduled at %0"...
LDR             R3, [R4,#(dword_74F3C - 0x74F30)]
MOVT            R2, #:upper16:aWillPauseExecu ; "Will pause execution as scheduled at %0"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x83C+s ; s
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #4
BL              sub_1DD60
B               loc_368B4

loc_36A38
LDR             R3, [SP,#0x83C+var_82C]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_36434
B               loc_363FC

loc_36A4C
MOVW            R4, #:lower16:byte_74F30
MOVW            R2, #:lower16:aPausingExecuti ; "Pausing execution as per stop time %02d"...
MOVT            R4, #:upper16:byte_74F30
MOVT            R2, #:upper16:aPausingExecuti ; "Pausing execution as per stop time %02d"...
LDR             R12, [R4,#(dword_74F38 - 0x74F30)]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R4,#(dword_74F3C - 0x74F30)]
ADD             R0, SP, #0x83C+s ; s
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #4
BL              sub_1DD60
LDR             R3, [SP,#0x83C+var_828]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_36AC0
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_367C0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_367C0
MOV             R3, #dword_67840
B               loc_367B4

loc_36AC0
MOVW            R12, #:lower16:aTerminatingExe ; "Terminating execution as planned"
ADD             LR, SP, #0x83C+s
MOVT            R12, #:upper16:aTerminatingExe ; "Terminating execution as planned"
LDM             R12!, {R0-R3} ; "Terminating execution as planned"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ution as planned"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x83C+s
MOV             R0, #3
MOV             R2, #1
STRB            R12, [LR]
BL              sub_1DD60
MOV             R1, #1
MOV             R0, #0
BL              sub_2C230

loc_36B00
BL              __errno_location
LDR             R12, =aWatchdogThread_0 ; "watchdog_thread"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R1, #0x2919
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP,#0x83C+var_834]
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, R4
ADD             R1, SP, #0x83C+s

loc_36B3C
MOV             R0, #3
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_36B50
BL              __errno_location
LDR             R12, =aWatchdogThread_0 ; "watchdog_thread"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R1, #0x2920
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x83C+var_834]
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
ADD             R1, SP, #0x83C+s
MOV             R2, #1
B               loc_36B3C
; End of function sub_36338




; int __fastcall sub_36B90(_DWORD *)
sub_36B90

var_C9C= -0xC9C
var_C98= -0xC98
var_C94= -0xC94
var_C90= -0xC90
var_C8C= -0xC8C
var_C88= -0xC88
var_C80= -0xC80
var_C7C= -0xC7C
var_C78= -0xC78
var_C74= -0xC74
var_C6C= -0xC6C
var_C68= -0xC68
var_C64= -0xC64
var_C60= -0xC60
var_C5C= -0xC5C
var_C58= -0xC58
var_C54= -0xC54
var_C50= -0xC50
var_C48= -0xC48
var_C44= -0xC44
var_C40= -0xC40
var_C3C= -0xC3C
var_C34= -0xC34
s= -0xC28
var_C18= -0xC18
var_C04= -0xC04
var_80C= -0x80C
var_804= -0x804

PUSH            {R4-R11,LR}
SUB             SP, SP, #0xC90
SUB             SP, SP, #0xC
MOV             R9, R0
BL              pthread_self
BL              pthread_detach
MOVW            R2, #:lower16:aDSstratum ; "%d/SStratum"
LDR             R3, [R9]
MOVT            R2, #:upper16:aDSstratum ; "%d/SStratum"
MOV             R1, #0x10 ; maxlen
ADD             R0, SP, #0xC9C+s ; s
BL              snprintf
ADD             R0, SP, #0xC9C+s
BL              sub_22E98
BL              sub_1FFFC
CMP             R0, #0
STR             R0, [R9,#0x2E8]
BEQ             loc_37524
MOV             R8, #byte_72D90
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_36C00
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_372DC

loc_36C00
LDR             R0, [R9,#0xAC]
ADD             R4, SP, #0xC9C+var_80C
LDR             R1, [R9,#0xA4]
ADD             R4, R4, #8
LDR             R3, [R9]
MOV             R2, #aInSPoolDPoolUr ; "in %s , pool: %d, pool_url: %s, miner_n"...
STR             R0, [SP,#0xC9C+var_C94]
STR             R1, [SP,#0xC9C+var_C98]
MOV             R0, R4  ; s
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0xC9C+var_C9C]
LDR             R3, =aStratumSthread ; "stratum_sthread"
BL              snprintf
MOV             R0, #5
MOV             R1, R4
MOV             R2, #0
BL              sub_1DD60
LDR             R0, [R9,#0x2E8]

loc_36C4C
MOVW            R1, #0xBAC6
MOVW            R3, #0x410D
MOVT            R1, #0x9F49
MOVW            R2, #0xF76D
STR             R1, [SP,#0xC9C+var_C5C]
MOVW            R12, #0xBEF3
LDRB            R1, [R9,#0x69]
MOVW            LR, #0x1FE1
MOVT            R3, #0x112
MOVT            R2, #7
MOVT            R12, #0xFEED
MOVT            LR, #0xA011
CMP             R1, #0
STR             R3, [SP,#0xC9C+var_C64]
STR             R2, [SP,#0xC9C+var_C60]
MOV             R5, #0
STR             R12, [SP,#0xC9C+var_C58]
MOV             R6, #0
STR             LR, [SP,#0xC9C+var_C54]
MOV             R7, #0
STR             R8, [SP,#0xC9C+var_C80]
BNE             loc_371B8

loc_36CA4
BL              sub_201A4
CMP             R0, #0
STR             R0, [SP,#0xC9C+var_C44]
BEQ             loc_374E0
LDR             R1, [R0,#0x130]
CMP             R1, #8
BHI             loc_37540
ADD             R3, R0, #0x130
LDR             R1, [R0,#0x4C]
LDRD            R2, R3, [R3,#-8]
STR             R1, [SP,#0xC9C+var_C78]
CMP             R3, R7
STRD            R2, R3, [SP,#0xC9C+var_C74]
CMPEQ           R2, R6
STR             R1, [SP,#0xC9C+var_C48]
MOVEQ           R4, #1
MOVNE           R4, #0
CMP             R1, R5
MOVNE           R4, #0
ANDEQ           R4, R4, #1
STRD            R2, R3, [SP,#0xC9C+var_C3C]
CMP             R4, #0
BNE             loc_37A50
ADD             R3, R9, #0x730
VLDR            D6, [R0,#0x138]
VLDR            D7, [R3,#-8]
VCMPE.F64       D6, D7
VMRS            APSR_nzcv, FPSCR
BMI             loc_376CC
MOV             R2, #4
ADD             R1, SP, #0xC9C+var_C48
ADD             R0, SP, #0xC9C+var_C34
BL              sub_1FA20
LDR             R3, [SP,#0xC9C+var_C44]
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
MOV             R12, R2
ADD             R0, SP, #0xC9C+var_C18
ADD             R1, SP, #0xC9C+var_C3C
LDR             R2, [R3,#0x130]
MOV             R3, R12
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOV             R5, R3
STR             R3, [SP,#0xC9C+var_C68]
BL              sub_1FA20
MOVW            R3, #0x1E4B
MOV             R2, R5
MOV             R1, #1
STR             R3, [SP,#0xC9C+var_C9C]
MOV             R0, #0x34 ; '4'
LDR             R3, =aStratumSthread_0 ; "stratum_sthread"
BL              sub_1F8B0
MOV             R6, R0
MOV             R0, R4  ; timer
LDR             R5, [SP,#0xC9C+var_C44]
BL              time
LDR             R3, [SP,#0xC9C+var_C44]
MOV             R1, R4  ; c
STR             R0, [R6,#0x2C]
MOV             R2, #0x400 ; n
ADD             R0, SP, #0xC9C+var_C04 ; s
STR             R3, [R6,#0x24]
BL              memset
LDR             R0, =stru_68C54 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3773C
MOVW            R3, #:lower16:dword_72DBC
LDR             R0, =stru_68C54 ; mutex
MOVT            R3, #:upper16:dword_72DBC
LDR             R2, [R3]
STR             R2, [R6,#0x28]
ADD             R2, R2, #1
STR             R2, [R3]
BL              pthread_mutex_unlock
SUBS            R4, R0, #0
BNE             loc_37794
MOV             R3, #off_67964
STR             R3, [SP,#0xC9C+var_C6C]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R2, #4
ADD             R1, R9, #0x700
ADD             R1, R1, R2
ADD             R0, SP, #0xC9C+var_C40
STR             R4, [SP,#0xC9C+var_C40]
BL              sub_1FB44
LDRB            R3, [R9,#0x294]
CMP             R3, #0
BEQ             loc_3727C
LDR             R12, [SP,#0xC9C+var_C44]
ADD             LR, SP, #0xC9C+var_C34
LDR             R3, [SP,#0xC9C+var_C40]
MOVW            R2, #:lower16:aParamsSSSSS08x ; "{\"params\": [\"%s\", \"%s\", \"%s\", "...
LDR             R0, [R6,#0x28]
MOVT            R2, #:upper16:aParamsSSSSS08x ; "{\"params\": [\"%s\", \"%s\", \"%s\", "...
LDR             R1, [R12,#0x1BC]
STR             LR, [SP,#0xC9C+var_C90]
BIC             R1, R1, R3
LDR             R3, [R9,#0xAC]
REV             R1, R1
STR             R0, [SP,#0xC9C+var_C88]
STR             R1, [SP,#0xC9C+var_C8C]
ADD             R0, SP, #0xC9C+var_C18
LDR             LR, [R12,#0x134]
MOV             R1, #0x400 ; maxlen
STR             R0, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+var_C04 ; s
STR             LR, [SP,#0xC9C+var_C94]
LDR             R12, [R12,#0x120]
STR             R12, [SP,#0xC9C+var_C9C]
BL              snprintf

loc_36E64
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36E88
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_372C4

loc_36E88
LDR             R12, [R9]
ADD             R4, SP, #0xC9C+var_80C
ADD             R4, R4, #8
MOVW            R2, #:lower16:aSubmittingShar ; "Submitting share %08lx to pool %d"
LDR             R3, [R5,#0xD8]
MOVT            R2, #:upper16:aSubmittingShar ; "Submitting share %08lx to pool %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
STR             R12, [SP,#0xC9C+var_C9C]
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_36EC0
MOVW            R4, #:lower16:dword_72DAC
MOVW            R5, #:lower16:aPoolDStratumSh ; "Pool %d stratum share submission failur"...
MOVW            R7, #:lower16:byte_686E0
MOVT            R4, #:upper16:dword_72DAC
MOVT            R5, #:upper16:aPoolDStratumSh ; "Pool %d stratum share submission failur"...
MOVT            R7, #:upper16:byte_686E0

loc_36ED8
LDR             R8, [R6,#0x2C]
MOV             R0, #0  ; timer
BL              time
ADD             R8, R8, #0x77 ; 'w'
CMP             R8, R0
BLT             loc_378E4
ADD             R0, SP, #0xC9C+var_C04 ; s
BL              strlen
ADD             R1, SP, #0xC9C+var_C04
MOV             R2, R0
MOV             R0, R9
BL              sub_2149C
CMP             R0, #0
BEQ             loc_377B4
LDR             R0, =stru_68C54 ; mutex
MOVW            R7, #:lower16:byte_686E8
BL              pthread_mutex_lock
CMP             R0, #0
MOVT            R7, #:upper16:byte_686E8
BNE             loc_3785C
LDRB            R3, [R6,#0x28]
ADD             R2, R6, #0x28 ; '('
LDRB            R12, [R6,#0x2B]
LDR             LR, [SP,#0xC9C+var_C64]
LDRB            R1, [R6,#0x2A]
STR             R2, [R6,#0x14]
ADD             R3, R3, LR
LDRB            R2, [R6,#0x29]
ADD             R3, R3, R12,LSL#24
LDR             R5, [R7,#(dword_68C6C - 0x686E8)]
ADD             R3, R3, R1,LSL#16
LDR             R1, [SP,#0xC9C+var_C58]
CMP             R5, #0
ADD             R3, R3, R2,LSL#8
MOV             R2, #4
STR             R2, [R6,#0x18]
LDR             R2, [SP,#0xC9C+var_C60]
EOR             R3, R3, R2
LDR             R2, [SP,#0xC9C+var_C5C]
SUB             R1, R1, R3
SUB             R2, R2, R3
EOR             R2, R2, R3,LSL#8
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#13
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#12
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSL#16
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#5
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#3
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R3, R2, R3,LSL#10
SUB             R1, R1, R3
EOR             R4, R1, R3,LSR#15
STR             R4, [R6,#0x1C]
BEQ             loc_37638
LDR             R3, [R5]
STR             R0, [R6,#8]
STR             R3, [R6]
LDR             R2, [R5]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R6,#4]
LDR             R3, [R5]
LDR             R3, [R3,#0x10]
STR             R6, [R3,#8]
LDR             R3, [R5]
STR             R6, [R3,#0x10]

loc_3700C
LDR             R2, [R5]
MOV             R1, #0
LDR             R3, [R2,#0xC]
ADD             R3, R3, #1
STR             R3, [R2,#0xC]
LDR             R3, [R5]
LDR             R2, [R3,#4]
LDR             R3, [R3]
SUB             R2, R2, #1
AND             R4, R4, R2
ADD             R4, R4, R4,LSL#1
MOV             R2, R4,LSL#2
ADD             R3, R3, R2
LDR             R0, [R3,#4]
ADD             R0, R0, #1
STR             R0, [R3,#4]
LDR             R3, [R5]
LDR             R3, [R3]
LDR             R3, [R3,R4,LSL#2]
STR             R1, [R6,#0xC]
STR             R3, [R6,#0x10]
LDR             R3, [R5]
LDR             R3, [R3]
LDR             R1, [R3,R4,LSL#2]
ADD             R3, R3, R2
CMP             R1, #0
STRNE           R6, [R1,#0xC]
LDRNE           R3, [R5]
LDRNE           R3, [R3]
ADDNE           R3, R3, R2
STR             R6, [R3]
LDR             R3, [R5]
LDR             R3, [R3]
ADD             R2, R3, R2
LDRD            R2, R3, [R2,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_370B8
LDR             R3, [R6]
LDR             R2, [R3,#0x24]
CMP             R2, #1
BNE             loc_3732C

loc_370B8
LDR             R3, [R9,#0x2EC]
LDR             R0, =stru_68C54 ; mutex
ADD             R3, R3, #1
STR             R3, [R9,#0x2EC]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3787C
LDR             R3, [SP,#0xC9C+var_C6C]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
ADD             R1, R9, #0x60 ; '`'
MOV             R0, R9
BL              sub_2CC84
CMP             R0, #0
BEQ             loc_371FC
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_371CC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_371CC
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_371CC
MOV             R5, #byte_686E1
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_374D0

loc_37140               ; timer
MOV             R0, #0
BL              time
LDR             R2, [R6,#0x2C]
LDRB            R3, [R5]
STR             R0, [R6,#0x30]
SUB             R0, R0, R2
CMP             R0, #0
ORRGT           R3, R3, #1
CMP             R3, #0
BEQ             loc_371A0
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_372F4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_372F4
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #5
BGT             loc_372F4

loc_371A0
LDR             R5, [SP,#0xC9C+var_C78]
LDRD            R6, R7, [SP,#0xC9C+var_C74]

loc_371A8
LDRB            R1, [R9,#0x69]
LDR             R0, [R9,#0x2E8]
CMP             R1, #0
BEQ             loc_36CA4

loc_371B8
BL              sub_200C0
MOV             R0, #0
ADD             SP, SP, #0xC90
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_371CC
ADD             R4, SP, #0xC9C+var_80C
MOVW            R2, #:lower16:aPoolDCommunica ; "Pool %d communication resumed, submitti"...
ADD             R4, R4, #8
MOVT            R2, #:upper16:aPoolDCommunica ; "Pool %d communication resumed, submitti"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
LDR             R3, [R9]
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_371FC
MOV             R5, #byte_686E1
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_37140
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37234
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_374C8

loc_37234
MOVW            R12, #:lower16:aSuccessfullySu ; "Successfully submitted, adding to strat"...
ADD             R4, SP, #0xC9C+var_80C
MOVT            R12, #:upper16:aSuccessfullySu ; "Successfully submitted, adding to strat"...
ADD             R4, R4, #8
LDM             R12!, {R0-R3} ; "Successfully submitted, adding to strat"...
MOV             LR, R4
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "mitted, adding to stratum_shares db"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "o stratum_shares db"
LDR             R12, [R12] ; " db"
STM             LR!, {R0-R3}
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
STR             R12, [LR]
BL              sub_1DD60
B               loc_37140

loc_3727C
LDR             R0, [R6,#0x28]
ADD             R1, SP, #0xC9C+var_C34
LDR             R3, [SP,#0xC9C+var_C44]
MOVW            R2, #:lower16:aParamsSSSSSIdD ; "{\"params\": [\"%s\", \"%s\", \"%s\", "...
STR             R1, [SP,#0xC9C+var_C90]
MOVT            R2, #:upper16:aParamsSSSSSIdD ; "{\"params\": [\"%s\", \"%s\", \"%s\", "...
STR             R0, [SP,#0xC9C+var_C8C]
ADD             R0, SP, #0xC9C+var_C18
LDR             R12, [R3,#0x134]
MOV             R1, #0x400 ; maxlen
STR             R0, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+var_C04 ; s
STR             R12, [SP,#0xC9C+var_C94]
LDR             R12, [R3,#0x120]
LDR             R3, [R9,#0xAC]
STR             R12, [SP,#0xC9C+var_C9C]
BL              snprintf
B               loc_36E64

loc_372C4
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #5
BLE             loc_36EC0
B               loc_36E88

loc_372DC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_36C4C
B               loc_36C00

loc_372F4
ADD             R4, SP, #0xC9C+var_80C
MOVW            R2, #:lower16:aPoolDStratumSh_0 ; "Pool %d stratum share submission lag ti"...
ADD             R4, R4, #8
LDR             R3, [R9]
MOVT            R2, #:upper16:aPoolDStratumSh_0 ; "Pool %d stratum share submission lag ti"...
STR             R0, [SP,#0xC9C+var_C9C]
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_371A0

loc_3732C
LDR             R0, [R3,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R7, R0, #0
BEQ             loc_37C78
LDR             R3, [R6]
MOV             LR, #0
LDR             R2, [R3,#4]
LDR             R0, [R3,#0xC]
LDR             R1, [R3,#8]
MOV             R12, R2,LSL#1
ADD             R1, R1, #1
SUB             R2, R12, #1
TST             R2, R0
MOVNE           R2, #1
MOVEQ           R2, LR
ADD             R2, R2, R0,LSR R1
STR             R2, [R3,#0x18]
LDR             R3, [R6]
STR             LR, [R3,#0x1C]
LDR             R3, [R6]
LDR             R4, [R3,#4]
CMP             R4, LR
BEQ             loc_37460
MOV             R11, LR
MOV             R10, LR
STR             LR, [SP,#0xC9C+var_C7C]
STR             R9, [SP,#0xC9C+var_C50]

loc_373A4
LDR             R2, [R3]
LDR             R5, [R2,R11]
CMP             R5, #0
BNE             loc_373C0
B               loc_37444

loc_373B8
LDR             R4, [R3,#4]
MOV             R5, R8

loc_373C0
LDR             R3, [R5,#0x1C]
MOV             R4, R4,LSL#1
LDR             R8, [R5,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
ADD             R9, R7, R4,LSL#2
LDR             R3, [R9,#4]
ADD             R3, R3, #1
STR             R3, [R9,#4]
LDR             R2, [R6]
LDR             R1, [R2,#0x18]
CMP             R3, R1
BLS             loc_37418
LDR             R3, [R2,#0x1C]
ADD             R3, R3, #1
STR             R3, [R2,#0x1C]
LDR             R3, [R6]
LDR             R0, [R9,#4]
LDR             R1, [R3,#0x18]
BLX             sub_4A2D0
STR             R0, [R9,#8]

loc_37418
STR             R10, [R5,#0xC]
LDR             R3, [R7,R4,LSL#2]
STR             R3, [R5,#0x10]
LDR             R3, [R7,R4,LSL#2]
CMP             R3, #0
STRNE           R5, [R3,#0xC]
CMP             R8, #0
STR             R5, [R7,R4,LSL#2]
LDR             R3, [R6]
BNE             loc_373B8
LDR             R4, [R3,#4]

loc_37444
LDR             R2, [SP,#0xC9C+var_C7C]
ADD             R11, R11, #0xC
ADD             R2, R2, #1
CMP             R2, R4
STR             R2, [SP,#0xC9C+var_C7C]
BCC             loc_373A4

loc_3745C
LDR             R9, [SP,#0xC9C+var_C50]

loc_37460               ; ptr
LDR             R0, [R3]
BL              free
LDR             R2, [R6]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R6]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R6]
STR             R7, [R3]
LDR             R3, [R6]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R6]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]
B               loc_370B8

loc_374C8
MOV             R2, #dword_67840

loc_374D0
LDR             R3, [R2]
CMP             R3, #6
BGT             loc_37234
B               loc_37140

loc_374E0
MOVW            LR, #:lower16:aStratumQReturn ; "Stratum q returned empty work"
ADD             R12, SP, #0xC9C+var_80C
MOVT            LR, #:upper16:aStratumQReturn ; "Stratum q returned empty work"
ADD             R12, R12, #8

loc_374F0
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR, {R0-R3}
STM             R12!, {R0-R2}
ADD             R1, SP, #0xC9C+var_80C
ADD             R1, R1, #8
MOV             R0, #3
MOV             R2, #1
STRH            R3, [R12]
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_37524
MOVW            LR, #:lower16:aFailedToCreate_0 ; "Failed to create stratum_q in stratum_s"...
ADD             R12, SP, #0xC9C+var_80C
MOVT            LR, #:upper16:aFailedToCreate_0 ; "Failed to create stratum_q in stratum_s"...
ADD             R12, R12, #8
LDM             LR!, {R0-R3} ; "Failed to create stratum_q in stratum_s"...
STM             R12!, {R0-R3}
B               loc_374F0

loc_37540
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37578
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37578
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_37620

loc_37578
ADD             R4, SP, #0xC9C+var_80C
MOVW            R2, #:lower16:aPoolDAskingFor ; "Pool %d asking for inappropriately long"...
ADD             R4, R4, #8
LDR             R3, [R9]
MOVT            R2, #:upper16:aPoolDAskingFor ; "Pool %d asking for inappropriately long"...
STR             R1, [SP,#0xC9C+var_C9C]
MOV             R0, R4  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_375D0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_37618

loc_375D0
MOVW            R12, #:lower16:aNotAttemptingT ; "Not attempting to submit shares"
MOV             LR, R4
MOVT            R12, #:upper16:aNotAttemptingT ; "Not attempting to submit shares"
LDM             R12!, {R0-R3} ; "Not attempting to submit shares"
STM             LR!, {R0-R3}
LDM             R12, {R0-R3} ; "o submit shares"
STM             LR, {R0-R3}
MOV             R1, R4
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_375FC
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1E2E
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aStratumSthread_0 ; "stratum_sthread"
ADD             R0, SP, #0xC9C+var_C44
BL              sub_2A70C
B               loc_371A8

loc_37618
MOV             R2, #dword_67840

loc_37620
LDR             R3, [R2]
CMP             R3, #2
ADDGT           R4, SP, #0xC9C+var_80C
ADDGT           R4, R4, #8
BGT             loc_375D0
B               loc_375FC

loc_37638
STR             R5, [R6,#8]
MOV             R0, #0x2C ; ',' ; size
STR             R5, [R6,#4]
STR             R6, [R7,#(dword_68C6C - 0x686E8)]
BL              malloc
CMP             R0, #0
STR             R0, [R6]
BEQ             loc_37C78
MOV             R2, #0x2C ; ',' ; n
MOV             R1, R5  ; c
BL              memset
LDR             R3, [R6]
MOV             R1, #0x20 ; ' '
MOV             R2, #5
MOV             R0, #0x180 ; size
STR             R6, [R3,#0x10]
LDR             R3, [R6]
STR             R1, [R3,#4]
LDR             R3, [R6]
STR             R2, [R3,#8]
LDR             R3, [R6]
STR             R5, [R3,#0x14]
LDR             R7, [R6]
BL              malloc
STR             R0, [R7]
LDR             R3, [R6]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_37C78
MOV             R1, R5  ; c
MOV             R2, #0x180 ; n
BL              memset
LDR             R3, [R6]
MOV             R5, R6
LDR             R2, [SP,#0xC9C+var_C54]
STR             R2, [R3,#0x28]
B               loc_3700C

loc_376CC
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_376F0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3789C

loc_376F0
ADD             R4, SP, #0xC9C+var_80C
MOVW            R2, #:lower16:aFilteringHighH ; "Filtering high hash share to pool %d"
ADD             R4, R4, #8
MOVT            R2, #:upper16:aFilteringHighH ; "Filtering high hash share to pool %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
LDR             R3, [R9]
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_37720
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1E42
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aStratumSthread_0 ; "stratum_sthread"
ADD             R0, SP, #0xC9C+var_C44
BL              sub_2A70C
B               loc_371A8

loc_3773C
BL              __errno_location
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E54
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0xC9C+var_C98]

loc_37758
LDR             R0, [SP,#0xC9C+var_C68]
STR             R1, [SP,#0xC9C+var_C94]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0xC9C+var_C9C]
ADD             R0, SP, #0xC9C+var_80C
ADD             R0, R0, #8 ; s
BL              snprintf
ADD             R1, SP, #0xC9C+var_80C
MOV             R0, #3
ADD             R1, R1, #8
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_37794
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E57
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_37758

loc_377B4
ADD             R1, R9, #0x60 ; '`'
MOV             R0, R9
BL              sub_2CC18
CMP             R0, #0
BEQ             loc_379C8

loc_377C8
MOV             R3, #byte_74F84
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37B34
ADD             R8, R9, #0xD4
MOV             R0, R8  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_37AD4
ADD             R10, R9, #0xEC
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_37AF4
MOV             R0, R8  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_37B14
LDR             R1, [R9,#0x274] ; s2
CMP             R1, #0
BEQ             loc_378B4
LDR             R3, [SP,#0xC9C+var_C44]
LDR             R0, [R3,#0x140] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_378B4
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_378C4
LDR             R3, [SP,#0xC9C+var_C6C]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, #2  ; seconds
BL              sleep
B               loc_36ED8

loc_3785C
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E83
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_37758

loc_3787C
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E86
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_37758

loc_3789C
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #5
BLE             loc_37720
B               loc_376F0

loc_378B4               ; rwlock
MOV             R0, R10
BL              pthread_rwlock_unlock
CMP             R0, #0
BEQ             loc_37BD4

loc_378C4
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E9E
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_37758

loc_378E4
MOV             R5, #byte_686E1

loc_378EC
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_37978
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37930
MOV             R3, #byte_686E0

loc_37910
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37930
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_37978

loc_37930
MOVW            LR, #:lower16:aFailedToSubmit ; "Failed to submit stratum share, discard"...
ADD             R4, SP, #0xC9C+var_80C
MOVT            LR, #:upper16:aFailedToSubmit ; "Failed to submit stratum share, discard"...
ADD             R4, R4, #8
LDM             LR!, {R0-R3} ; "Failed to submit stratum share, discard"...
MOV             R12, R4
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " stratum share, discarding"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "discarding"
STM             R12!, {R0,R1}
MOV             R1, R4
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #7
MOV             R2, #0
STRB            R3, [R12]
BL              sub_1DD60

loc_37978
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1EAD
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aStratumSthread_0 ; "stratum_sthread"
ADD             R0, SP, #0xC9C+var_C44
BL              sub_2A70C
MOV             R0, R6  ; ptr
BL              free
MOVW            R3, #:lower16:qword_762C8
LDR             R0, [R9,#0x78]
MOVT            R3, #:upper16:qword_762C8
LDR             R2, [R3]
LDR             R1, [R3,#(qword_762C8+4 - 0x762C8)]
ADD             R0, R0, #1
STR             R0, [R9,#0x78]
ADDS            R2, R2, #1
ADC             R1, R1, #0
STR             R2, [R3]
STR             R1, [R3,#(qword_762C8+4 - 0x762C8)]
B               loc_371A0

loc_379C8
MOV             R0, R9
BL              sub_2FFA8
CMP             R0, #0
BEQ             loc_377C8
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37A08
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_37A08
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_37A34

loc_37A08
ADD             R8, SP, #0xC9C+var_80C
MOV             R2, R5  ; format
ADD             R8, R8, #8
MOV             R1, #0x800 ; maxlen
LDR             R3, [R9]
MOV             R0, R8  ; s
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_37A34
LDR             R2, [R4]
LDR             R3, [R9,#0x84]
ADD             R2, R2, #1
ADD             R3, R3, #1
STR             R2, [R4]
STR             R3, [R9,#0x84]
B               loc_377C8

loc_37A50
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37A88
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37A88
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #5
BLE             loc_37AB8

loc_37A88
ADD             R4, SP, #0xC9C+var_80C
MOVW            R2, #:lower16:aFilteringDupli ; "Filtering duplicate share to pool %d"
ADD             R4, R4, #8
MOVT            R2, #:upper16:aFilteringDupli ; "Filtering duplicate share to pool %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
LDR             R3, [R9]
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_37AB8
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1E3A
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aStratumSthread_0 ; "stratum_sthread"
ADD             R0, SP, #0xC9C+var_C44
BL              sub_2A70C
B               loc_371A8

loc_37AD4
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E9C
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_37758

loc_37AF4
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E9C
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_37758

loc_37B14
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E9C
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_37758

loc_37B34
MOV             R5, #byte_686E1
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_37978
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37B80
MOV             R3, #byte_686E0
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_37B80
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_37910

loc_37B80
MOVW            R12, #:lower16:aLowmemOptionPr ; "Lowmem option prevents resubmitting str"...
ADD             R4, SP, #0xC9C+var_80C
MOVT            R12, #:upper16:aLowmemOptionPr ; "Lowmem option prevents resubmitting str"...
ADD             R4, R4, #8
LDM             R12!, {R0-R3} ; "Lowmem option prevents resubmitting str"...
MOV             LR, R4
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "events resubmitting stratum share"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ing stratum share"
LDR             R12, [R12] ; "e"
STM             LR!, {R0-R3}
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
STRH            R12, [LR]
BL              sub_1DD60
B               loc_378EC
off_37BC8 DCD aStratumSthread ; "stratum_sthread"
off_37BCC DCD aStratumSthread_0 ; "stratum_sthread"
off_37BD0 DCD stru_68C54

loc_37BD4
LDR             R3, [SP,#0xC9C+var_C6C]
MOV             R5, #byte_686E1
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_37978
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37C2C
MOV             R3, #byte_686E0
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_37C2C
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_37910

loc_37C2C
MOVW            R12, #:lower16:aNoMatchingSess ; "No matching session id for resubmitting"...
ADD             R4, SP, #0xC9C+var_80C
MOVT            R12, #:upper16:aNoMatchingSess ; "No matching session id for resubmitting"...
ADD             R4, R4, #8
LDM             R12!, {R0-R3} ; "No matching session id for resubmitting"...
MOV             LR, R4
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ion id for resubmitting stratum share"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "mitting stratum share"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "share"
STR             R0, [LR],#4
MOV             R0, #7
STRH            R1, [LR]
MOV             R1, R4
BL              sub_1DD60
B               loc_378EC

loc_37C78               ; status
MOV             R0, #0xFFFFFFFF
BL              exit
; End of function sub_36B90




; int __fastcall sub_37C80(int)
sub_37C80

var_89C= -0x89C
var_898= -0x898
var_894= -0x894
var_88C= -0x88C
var_888= -0x888
var_884= -0x884
var_880= -0x880
var_87C= -0x87C
var_878= -0x878
var_874= -0x874
var_870= -0x870
var_86C= -0x86C
s2= -0x868
var_864= -0x864
var_860= -0x860
var_85C= -0x85C
var_858= -0x858
var_854= -0x854
var_850= -0x850
var_84C= -0x84C
s= -0x848
var_83C= -0x83C
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R3, #0
VPUSH           {D8}
SUB             SP, SP, #0x890
SUB             SP, SP, #0xC
LDR             R2, [R0,#0x104]
LDRB            R1, [R0,#0x11A]
STR             R3, [SP,#0x89C+var_86C]
LDR             R4, [R2,#0x630]
CMP             R1, R3
STR             R2, [SP,#0x89C+var_88C]
STR             R1, [SP,#0x89C+var_888]
LDRB            R5, [R4,#0x2A]
BEQ             loc_37CCC

loc_37CB8
LDR             R0, [SP,#0x89C+var_888]
ADD             SP, SP, #0x890
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}

loc_37CCC
LDRD            R2, R3, [R0,#0x1C]
MOV             R6, R0
LDR             R12, [R0,#0x18]
ADD             R1, SP, #0x89C+s2
ADD             R0, SP, #0x89C+s
STR             R3, [SP,#0x89C+s2]
LDR             R3, [R6,#0x14]
STR             R12, [SP,#0x89C+var_860]
LDR             R12, [R6,#0x10]
STR             R3, [SP,#0x89C+var_85C]
LDR             R3, [R6,#0xC]
STR             R12, [SP,#0x89C+var_858]
LDR             R12, [R6,#8]
STR             R3, [SP,#0x89C+var_854]
LDR             R3, [R6,#4]
STR             R2, [SP,#0x89C+var_864]
MOV             R2, #0x20 ; ' '
STR             R12, [SP,#0x89C+var_850]
STR             R3, [SP,#0x89C+var_84C]
BL              sub_1FA20
CMP             R5, #4
BLS             loc_381D0

loc_37D24
LDR             R3, [SP,#0x89C+var_88C]
ADD             R4, R3, #0xD4
MOV             R0, R4  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_38FB8
LDR             R3, [SP,#0x89C+var_88C]
ADD             R5, R3, #0xEC
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_38FF4
LDR             R2, [SP,#0x89C+var_88C]
LDRB            R3, [R2,#0x2B8]
CMP             R3, #0
MOVNE           R3, #1
STRBNE          R0, [R2,#0x2B8]
STRBNE          R3, [R6,#0x118]
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_39024
MOV             R0, R4  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_39054
MOV             R3, #off_67964
STR             R3, [SP,#0x89C+var_884]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R0, =stru_6A1B0 ; rwlock
BL              pthread_rwlock_wrlock
SUBS            R3, R0, #0
STR             R3, [SP,#0x89C+var_880]
BNE             loc_3913C
ADD             R0, SP, #0x89C+s ; s
MOVW            R7, #0x79B9
BL              strlen
CMP             R0, #0xB
MOV             R5, R0
MOVW            R3, #0xBEEF
MOVT            R7, #0x9E37
BLS             loc_38C50
ADD             R10, SP, #0x89C+var_83C
MOV             R0, R7
MOVT            R3, #0xFEED
MOV             R11, R5

loc_37DE4
LDRB            LR, [R10,#-6]
SUB             R11, R11, #0xC
LDRB            R2, [R10,#-2]
CMP             R11, #0xB
LDRB            R1, [R10,#-0xA]
LDRB            R4, [R10,#-7]
LDRB            R12, [R10,#-3]
MOV             LR, LR,LSL#16
LDRB            R8, [R10,#-0xB]
MOV             R2, R2,LSL#16
MOV             R1, R1,LSL#16
LDRB            R9, [R10,#-5]
ADD             LR, LR, R4,LSL#8
LDRB            R4, [R10,#-8]
ADD             R2, R2, R12,LSL#8
LDRB            R12, [R10,#-0xC]
ADD             R1, R1, R8,LSL#8
LDRB            R8, [R10,#-4]
ADD             LR, LR, R4
LDRB            R4, [R10,#-9]
ADD             R1, R1, R12
LDRB            R12, [R10,#-1]
ADD             LR, LR, R9,LSL#24
ADD             R2, R2, R8
ADD             R1, R1, R4,LSL#24
ADD             R7, LR, R7
ADD             R2, R2, R12,LSL#24
MOV             R4, R10
SUB             R1, R1, R7
ADD             R3, R2, R3
ADD             R10, R10, #0xC
SUB             R2, R1, R3
SUB             R7, R7, R3
ADD             R2, R2, R0
EOR             R2, R2, R3,LSR#13
SUB             R1, R7, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#8
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#13
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSR#12
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#16
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#5
SUB             R2, R2, R3
SUB             R7, R1, R3
EOR             R0, R2, R3,LSR#3
SUB             R7, R7, R0
SUB             R3, R3, R0
EOR             R7, R7, R0,LSL#10
SUB             R3, R3, R7
EOR             R3, R3, R7,LSR#15
BHI             loc_37DE4

loc_37ED0
SUB             R11, R11, #1
ADD             R3, R5, R3
CMP             R11, #0xA ; switch 11 cases
LDRLS           PC, [PC,R11,LSL#2] ; switch jump
B               def_37EDC ; jumptable 00037EDC default case
jpt_37EDC DCD loc_37F60 ; jump table for switch statement
DCD loc_37F58
DCD loc_37F50
DCD loc_37F48
DCD loc_37F40
DCD loc_37F38
DCD loc_37F30
DCD loc_37F28
DCD loc_37F20
DCD loc_37F18
DCD loc_37F10

loc_37F10               ; jumptable 00037EDC case 10
LDRB            R2, [R4,#0xA]
ADD             R3, R3, R2,LSL#24

loc_37F18               ; jumptable 00037EDC case 9
LDRB            R2, [R4,#9]
ADD             R3, R3, R2,LSL#16

loc_37F20               ; jumptable 00037EDC case 8
LDRB            R2, [R4,#8]
ADD             R3, R3, R2,LSL#8

loc_37F28               ; jumptable 00037EDC case 7
LDRB            R2, [R4,#7]
ADD             R7, R7, R2,LSL#24

loc_37F30               ; jumptable 00037EDC case 6
LDRB            R2, [R4,#6]
ADD             R7, R7, R2,LSL#16

loc_37F38               ; jumptable 00037EDC case 5
LDRB            R2, [R4,#5]
ADD             R7, R7, R2,LSL#8

loc_37F40               ; jumptable 00037EDC case 4
LDRB            R2, [R4,#4]
ADD             R7, R7, R2

loc_37F48               ; jumptable 00037EDC case 3
LDRB            R2, [R4,#3]
ADD             R0, R0, R2,LSL#24

loc_37F50               ; jumptable 00037EDC case 2
LDRB            R2, [R4,#2]
ADD             R0, R0, R2,LSL#16

loc_37F58               ; jumptable 00037EDC case 1
LDRB            R2, [R4,#1]
ADD             R0, R0, R2,LSL#8

loc_37F60               ; jumptable 00037EDC case 0
LDRB            R2, [R4]
ADD             R0, R0, R2

def_37EDC               ; jumptable 00037EDC default case
SUB             R2, R0, R7
SUB             R1, R7, R3
SUB             R2, R2, R3
MOVW            R0, #:lower16:byte_6A6E0
EOR             R2, R2, R3,LSR#13
MOVT            R0, #:upper16:byte_6A6E0
LDR             R12, [R0,#(dword_6A1D0 - 0x6A6E0)]
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#8
STR             R0, [SP,#0x89C+var_87C]
CMP             R12, #0
SUB             R0, R3, R1
SUB             R2, R2, R1
EOR             R0, R0, R1,LSR#13
SUB             R2, R2, R0
SUB             R3, R1, R0
EOR             R2, R2, R0,LSR#12
SUB             R3, R3, R2
SUB             R1, R0, R2
EOR             R3, R3, R2,LSL#16
SUB             R1, R1, R3
SUB             R2, R2, R3
EOR             R1, R1, R3,LSR#5
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#3
SUB             R7, R3, R2
SUB             R1, R1, R2
EOR             R2, R7, R2,LSL#10
SUB             R7, R1, R2
EOR             R7, R7, R2,LSR#15
BEQ             loc_38208
LDR             R2, [R12,#0x44]
LDM             R2, {R1,R3}
SUB             R3, R3, #1
AND             R3, R3, R7
ADD             R3, R3, R3,LSL#1
LDR             R4, [R1,R3,LSL#2]
CMP             R4, #0
BEQ             loc_38208
LDR             R8, [R2,#0x14]
RSB             R8, R8, #0
ADDS            R4, R4, R8
BNE             loc_38034
B               loc_38208

loc_38020
LDR             R3, [R4,#0x54]
CMP             R3, #0
BEQ             loc_38208
ADDS            R4, R3, R8
BEQ             loc_38208

loc_38034
LDR             R3, [R4,#0x60]
CMP             R7, R3
BNE             loc_38020
LDR             R3, [R4,#0x5C]
CMP             R5, R3
BNE             loc_38020
MOV             R2, R5  ; n
ADD             R1, SP, #0x89C+s ; s2
LDR             R0, [R4,#0x58] ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_38020
LDR             R0, =stru_6A1B0 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_39158
LDR             R2, [SP,#0x89C+var_88C]
LDR             R3, [SP,#0x89C+var_884]
ADD             R4, R2, #0x220
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R4  ; s1
MOV             R2, #0x20 ; ' ' ; n
ADD             R1, SP, #0x89C+s2 ; s2
BL              memcmp
CMP             R0, #0
MOVEQ           R3, #1
STREQ           R3, [SP,#0x89C+var_888]
BEQ             loc_38118
MOV             R2, #0x20 ; ' ' ; n
LDR             R1, =unk_6A1DC ; s2
ADD             R0, SP, #0x89C+s2 ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_38C64
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_38114
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_393D0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_393D0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_393D0
MOV             R3, #0

loc_38114
STR             R3, [SP,#0x89C+var_888]

loc_38118
LDRB            R3, [R6,#0x118]
CMP             R3, #0
BEQ             loc_381C4
MOV             R3, #byte_686E8
LDR             R1, [R3,#(dword_68AE4 - 0x686E8)]
LDR             R2, [R3,#(dword_68C9C - 0x686E8)]
SUB             R1, R1, #3
CMP             R1, #1
ADD             R2, R2, #1
STR             R2, [R3,#(dword_68C9C - 0x686E8)]
STR             R2, [R6,#0x150]
BHI             loc_38EC0

loc_3814C
LDRB            R2, [R6,#0x11C]
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R2, #0
BEQ             loc_3919C
CMP             R3, #0
BNE             loc_38194
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38194
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_381C0

loc_38194
LDR             R3, [SP,#0x89C+var_88C]
MOV             R2, #aStratumFromPoo ; "Stratum from pool %d requested work res"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x89C+var_804 ; s
LDR             R3, [R3]
BL              snprintf
ADD             R1, SP, #0x89C+var_804
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_381C0
BL              sub_2C568

loc_381C4
MOV             R3, #0
STRB            R3, [R6,#0x118]
B               loc_37CB8

loc_381D0
LDR             R12, =aTestWorkCurren ; "test_work_current"
MOVW            R3, #0x1651
STR             R3, [SP,#0x89C+var_898]
MOV             R3, #aCgminerC ; "cgminer.c"
MOV             R2, R5
ADD             R1, R4, #0x2B ; '+'
ADD             R0, SP, #0x89C+var_86C
STR             R12, [SP,#0x89C+var_89C]
BL              sub_232EC
LDR             R3, [SP,#0x89C+var_86C]
SUB             R3, R3, #1
STR             R3, [SP,#0x89C+var_86C]
B               loc_37D24

loc_38208
MOVW            R3, #0x160B
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x89C+var_89C]
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, =aBlockExists ; "block_exists"
MOV             R1, #1
MOV             R0, #0x68 ; 'h'
BL              sub_1F8B0
SUBS            R7, R0, #0
BEQ             loc_39408
MOVW            R2, #:lower16:dword_761D8
ADD             R1, SP, #0x89C+s ; src
MOV             R4, R2
BL              strcpy
LDR             R3, [SP,#0x89C+var_87C]
MOV             R2, R4
MOVT            R2, #:upper16:dword_761D8
STR             R2, [SP,#0x89C+var_874]
LDR             R5, [R3,#(dword_6A1D0 - 0x6A6E0)]
LDR             R3, [R2]
CMP             R5, #0
STR             R3, [R7,#0x64]
ADD             R3, R3, #1
STR             R3, [R2]
BEQ             loc_384F4
LDR             R3, [R5,#0x44]
LDR             R3, [R3,#0xC]
CMP             R3, #3
BLS             loc_384F4
ADD             R10, R5, #0x44 ; 'D'
MOV             R9, #1

loc_38284
MOV             R2, R10
MOV             R10, #0
MOV             R12, R10
MOV             LR, R10

loc_38294
CMP             R9, #0
ADD             LR, LR, #1
BEQ             loc_38FA8
LDR             R3, [R2,#8]
CMP             R3, #0
BEQ             loc_38F9C
LDR             R1, [R5,#0x44]
LDR             R0, [R1,#0x14]
ADDS            R3, R3, R0
BEQ             loc_38F9C
MOV             R1, #1
B               loc_382DC

loc_382C4
LDR             R3, [R3,#8]
ADD             R1, R1, #1
CMP             R3, #0
BEQ             loc_38F94
ADDS            R3, R3, R0
BEQ             loc_38F94

loc_382DC
CMP             R1, R9
BNE             loc_382C4
MOV             R0, R1

loc_382E8
MOV             R8, R2
MOV             R2, R3

loc_382F0
CMP             R1, #0
BNE             loc_38370

loc_382F8
CMP             R0, #0
CMPNE           R2, #0
BEQ             loc_383D8
LDR             R3, [R2,#8]
CMP             R3, #0
LDRNE           R4, [R5,#0x44]
MOVEQ           R3, R1
LDRNE           R4, [R4,#0x14]
ADDNE           R3, R3, R4

loc_3831C
CMP             R12, #0
SUB             R0, R0, #1
MOVEQ           R12, R2
MOVEQ           R2, R3
BEQ             loc_38F28
LDR             R4, [R5,#0x44]
CMP             R2, #0
LDR             R4, [R4,#0x14]
SUB             R4, R2, R4
STR             R4, [R12,#8]
MOVEQ           R12, R2
MOVEQ           R2, R3
BEQ             loc_382F0

loc_38350
LDR             R4, [R5,#0x44]
LDR             R4, [R4,#0x14]
SUB             R4, R12, R4
MOV             R12, R2
MOV             R2, R3

loc_38364
CMP             R1, #0
STR             R4, [R12,#4]
BEQ             loc_382F8

loc_38370
CMP             R2, #0
CMPNE           R0, #0
BNE             loc_38F38
CMP             R8, #0
BEQ             loc_38F70
LDR             R4, [R8,#8]
CMP             R4, #0
LDRNE           R3, [R5,#0x44]
LDRNE           R3, [R3,#0x14]
ADDNE           R4, R4, R3

loc_38398
CMP             R12, #0
SUB             R1, R1, #1
BEQ             loc_38F20
CMP             R8, #0
STREQ           R8, [R12,#8]
MOVEQ           R12, R8
MOVEQ           R8, R4
BEQ             loc_382F0
LDR             R11, [R5,#0x44]
MOV             R3, R2
MOV             R2, R8
LDR             R11, [R11,#0x14]
SUB             R11, R8, R11
MOV             R8, R4
STR             R11, [R12,#8]
B               loc_38350

loc_383D8
CMP             R2, #0
BNE             loc_38294
CMP             R12, #0
STRNE           R2, [R12,#8]
CMP             LR, #1
BLS             loc_38400
CMP             R10, #0
MOV             R9, R9,LSL#1
BNE             loc_38284
MOV             R12, R10

loc_38400
LDR             R3, [R5,#0x44]
STR             R12, [R3,#0x10]
LDR             R3, [R5,#0x44]
LDR             R3, [R3,#0x14]
SUB             R10, R10, R3
LDR             R3, [SP,#0x89C+var_87C]
LDR             R1, [R10,#0x48]
STR             R10, [R3,#(dword_6A1D0 - 0x6A6E0)]
LDR             R3, [R10,#0x64]
CMP             R1, #0
STR             R3, [SP,#0x89C+var_880]
BEQ             loc_394CC
LDR             R2, [R10,#0x44]
ADD             R0, R10, #0x44 ; 'D'
LDR             R3, [R2,#0x14]
LDR             R12, [R2,#0x10]
SUB             R12, R12, R3
CMP             R10, R12
BEQ             loc_394F4

loc_3844C
LDR             R2, [R10,#0x4C]
ADD             R3, R1, R3
MOV             R5, R10
STR             R2, [R3,#8]
LDR             R4, [R10,#0x4C]

loc_38460
LDR             R2, [R5,#0x44]
CMP             R4, #0
LDRNE           R3, [R10,#0x48]
LDRNE           R2, [R2,#0x14]
ADDNE           R4, R4, R2
STRNE           R3, [R4,#4]
LDRNE           R2, [R5,#0x44]
LDR             R1, [R10,#0x60]
LDR             R3, [R2,#4]
LDR             R2, [R2]
SUB             R3, R3, #1
AND             R1, R1, R3
ADD             R1, R1, R1,LSL#1
MOV             R3, R1,LSL#2
ADD             R2, R2, R3
LDR             R1, [R2,#4]
SUB             R1, R1, #1
STR             R1, [R2,#4]
LDR             R2, [R5,#0x44]
LDR             R2, [R2]
LDR             R1, [R2,R3]
CMP             R1, R0
LDREQ           R1, [R10,#0x54]
STREQ           R1, [R2,R3]
LDRD            R2, R3, [R10,#0x50]
CMP             R2, #0
STRNE           R3, [R2,#0x10]
LDRNE           R3, [R10,#0x54]
CMP             R3, #0
LDRNE           R2, [R10,#0x50]
STRNE           R2, [R3,#0xC]
LDR             R2, [R5,#0x44]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_384EC               ; ptr
MOV             R0, R10
BL              free

loc_384F4               ; s
MOV             R0, R7
MOVW            R8, #0x79B9
BL              strlen
CMP             R0, #0xB
STR             R0, [SP,#0x89C+var_878]
MOV             LR, R0
BLS             loc_393B0
MOVW            R2, #0xBEEF
MOVT            R8, #0x9E37
MOVT            R2, #0xFEED
ADD             R11, R7, #0xC
STR             R7, [SP,#0x89C+var_870]
MOV             R3, R8
MOV             R7, R2

loc_3852C
LDRB            R2, [R11,#-6]
SUB             LR, LR, #0xC
LDRB            R4, [R11,#-0xA]
CMP             LR, #0xB
LDRB            R9, [R11,#-7]
LDRB            R0, [R11,#-0xB]
LDRB            R12, [R11,#-2]
MOV             R2, R2,LSL#16
MOV             R4, R4,LSL#16
LDRB            R1, [R11,#-3]
ADD             R2, R2, R9,LSL#8
LDRB            R9, [R11,#-8]
ADD             R4, R4, R0,LSL#8
LDRB            R0, [R11,#-0xC]
MOV             R12, R12,LSL#16
LDRB            R10, [R11,#-5]
ADD             R2, R2, R9
LDRB            R9, [R11,#-9]
ADD             R12, R12, R1,LSL#8
ADD             R0, R4, R0
LDRB            R1, [R11,#-4]
LDRB            R4, [R11,#-1]
ADD             R2, R2, R10,LSL#24
ADD             R0, R0, R9,LSL#24
MOV             R10, R11
ADD             R1, R12, R1
ADD             R2, R2, R8
ADD             R11, R11, #0xC
ADD             R1, R1, R4,LSL#24
SUB             R0, R0, R2
ADD             R7, R1, R7
SUB             R0, R0, R7
SUB             R2, R2, R7
ADD             R3, R0, R3
EOR             R3, R3, R7,LSR#13
SUB             R1, R2, R3
SUB             R7, R7, R3
EOR             R1, R1, R3,LSL#8
SUB             R2, R7, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#13
SUB             R3, R3, R2
SUB             R1, R1, R2
EOR             R3, R3, R2,LSR#12
SUB             R1, R1, R3
SUB             R2, R2, R3
EOR             R1, R1, R3,LSL#16
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#5
SUB             R3, R3, R2
SUB             R8, R1, R2
EOR             R3, R3, R2,LSR#3
SUB             R8, R8, R3
SUB             R7, R2, R3
EOR             R8, R8, R3,LSL#10
SUB             R7, R7, R8
EOR             R7, R7, R8,LSR#15
BHI             loc_3852C
MOV             R1, R7
LDR             R7, [SP,#0x89C+var_870]

loc_38620
LDR             R0, [SP,#0x89C+var_878]
SUB             R2, LR, #1
ADD             LR, R1, R0
CMP             R2, #0xA ; switch 11 cases
LDRLS           PC, [PC,R2,LSL#2] ; switch jump
B               def_38630 ; jumptable 00038630 default case
jpt_38630 DCD loc_386B4 ; jump table for switch statement
DCD loc_386AC
DCD loc_386A4
DCD loc_3869C
DCD loc_38694
DCD loc_3868C
DCD loc_38684
DCD loc_3867C
DCD loc_38674
DCD loc_3866C
DCD loc_38664

loc_38664               ; jumptable 00038630 case 10
LDRB            R2, [R10,#0xA]
ADD             LR, LR, R2,LSL#24

loc_3866C               ; jumptable 00038630 case 9
LDRB            R2, [R10,#9]
ADD             LR, LR, R2,LSL#16

loc_38674               ; jumptable 00038630 case 8
LDRB            R2, [R10,#8]
ADD             LR, LR, R2,LSL#8

loc_3867C               ; jumptable 00038630 case 7
LDRB            R2, [R10,#7]
ADD             R8, R8, R2,LSL#24

loc_38684               ; jumptable 00038630 case 6
LDRB            R2, [R10,#6]
ADD             R8, R8, R2,LSL#16

loc_3868C               ; jumptable 00038630 case 5
LDRB            R2, [R10,#5]
ADD             R8, R8, R2,LSL#8

loc_38694               ; jumptable 00038630 case 4
LDRB            R2, [R10,#4]
ADD             R8, R8, R2

loc_3869C               ; jumptable 00038630 case 3
LDRB            R2, [R10,#3]
ADD             R3, R3, R2,LSL#24

loc_386A4               ; jumptable 00038630 case 2
LDRB            R2, [R10,#2]
ADD             R3, R3, R2,LSL#16

loc_386AC               ; jumptable 00038630 case 1
LDRB            R2, [R10,#1]
ADD             R3, R3, R2,LSL#8

loc_386B4               ; jumptable 00038630 case 0
LDRB            R2, [R10]
ADD             R3, R3, R2

def_38630               ; jumptable 00038630 default case
SUB             R3, R3, R8
SUB             R8, R8, LR
SUB             R3, R3, LR
STR             R7, [R7,#0x58]
EOR             R3, R3, LR,LSR#13
MOV             R0, R7  ; s
SUB             R8, R8, R3
SUB             R12, LR, R3
EOR             R2, R8, R3,LSL#8
SUB             R12, R12, R2
SUB             R3, R3, R2
EOR             R12, R12, R2,LSR#13
SUB             R3, R3, R12
SUB             R1, R2, R12
EOR             R3, R3, R12,LSR#12
SUB             R1, R1, R3
SUB             R2, R12, R3
EOR             R1, R1, R3,LSL#16
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#5
SUB             R3, R3, R2
SUB             R1, R1, R2
EOR             R3, R3, R2,LSR#3
SUB             R4, R1, R3
SUB             R2, R2, R3
EOR             R3, R4, R3,LSL#10
SUB             R4, R2, R3
EOR             R4, R4, R3,LSR#15
STR             R4, [R7,#0x60]
BL              strlen
CMP             R5, #0
STR             R0, [R7,#0x5C]
BEQ             loc_3921C
LDR             R3, [R5,#0x44]
MOV             R2, #0
STR             R2, [R7,#0x4C]
ADD             R8, R7, #0x44 ; 'D'
STR             R3, [R7,#0x44]
LDR             R2, [R5,#0x44]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R7,#0x48]
LDR             R3, [R5,#0x44]
LDR             R3, [R3,#0x10]
STR             R7, [R3,#8]
LDR             R3, [R5,#0x44]
STR             R8, [R3,#0x10]

loc_38780
LDR             R2, [R5,#0x44]
MOV             R1, #0
LDR             R3, [R2,#0xC]
ADD             R3, R3, #1
STR             R3, [R2,#0xC]
LDR             R2, [R5,#0x44]
LDRD            R2, R3, [R2]
SUB             R3, R3, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
MOV             R3, R4,LSL#2
ADD             R2, R2, R3
LDR             R0, [R2,#4]
ADD             R0, R0, #1
STR             R0, [R2,#4]
LDR             R2, [R5,#0x44]
LDR             R2, [R2]
LDR             R2, [R2,R3]
STR             R1, [R7,#0x50]
STR             R2, [R7,#0x54]
LDR             R2, [R5,#0x44]
LDR             R2, [R2]
LDR             R1, [R2,R3]
ADD             R2, R2, R3
CMP             R1, #0
STRNE           R8, [R1,#0xC]
LDRNE           R2, [R5,#0x44]
LDRNE           R2, [R2]
ADDNE           R2, R2, R3
STR             R8, [R2]
LDR             R2, [R5,#0x44]
LDR             R2, [R2]
ADD             R2, R2, R3
LDRD            R2, R3, [R2,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_38828
LDR             R3, [R7,#0x44]
LDR             R2, [R3,#0x24]
CMP             R2, #1
BNE             loc_38D04

loc_38828
LDRB            R0, [R6,#0x48]
MOVW            R3, #0xFFFF
LDR             R7, [R6,#0x48]
MOV             R5, #0
LDR             R4, =dbl_681E8
RSB             R0, R0, #0x1D
MOV             R0, R0,LSL#3
REV             R7, R7
BIC             R7, R7, #0xFF000000
CMP             R0, #8
MOVLT           R0, #8
SUB             R2, R0, #0x20 ; ' '
RSB             R1, R0, #0x20 ; ' '
MOV             R2, R3,LSL R2
MOV             R0, R3,LSL R0
ORR             R1, R2, R3,LSR R1
BLX             sub_4AB04
VMOV            S15, R7
VMOV            D5, R0, R1
VCVT.F64.S32    D7, S15
VLDR            D6, [R4]
VDIV.F64        D8, D5, D7
VCMP.F64        D8, D6
VMRS            APSR_nzcv, FPSCR
BNE             loc_39440

loc_3888C
ADD             R4, SP, #0x89C+var_804

loc_38890
LDR             R3, [SP,#0x89C+var_880]
CMP             R3, #0
BEQ             loc_38914
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_38914
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_388EC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_388EC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_38914

loc_388EC
MOVW            R2, #:lower16:aDeletedBlockDF ; "Deleted block %d from database"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aDeletedBlockDF ; "Deleted block %d from database"
LDR             R3, [SP,#0x89C+var_880]
MOV             R0, R4  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #7
BL              sub_1DD60

loc_38914               ; rwlock
LDR             R0, =stru_6A1B0
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3915C
LDR             R3, [SP,#0x89C+var_884]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, #stru_76110 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3951C
LDR             R0, =stru_76128 ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_39568
MOVW            R5, #:lower16:dword_72DB4
MOVW            R7, #:lower16:byte_761E4
MOVT            R5, #:upper16:dword_72DB4
MOVT            R7, #:upper16:byte_761E4
MOV             R0, R5
LDR             R8, =unk_6A1E0
BL              sub_206A0
ADD             R1, SP, #0x89C+s ; src
MOV             R0, R7  ; dest
BL              strcpy
LDR             R2, =aSetCurblock ; "set_curblock"
MOVW            R9, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x15D3
MOVT            R9, #:upper16:aCgminerC ; "cgminer.c"
MOV             R3, R9
SUB             R0, R8, #4
STR             R2, [SP,#0x89C+var_89C]
MOV             R2, #0x20 ; ' '
STR             R1, [SP,#0x89C+var_898]
ADD             R1, SP, #0x89C+s2
BL              sub_232EC
LDR             R3, [R5,#(dword_72DB8 - 0x72DB4)]
MOV             R1, #0x10624DD3
LDR             R2, [R5]
MOV             R0, R4  ; timer
SMULL           R10, R11, R3, R1
MOV             R3, R3,ASR#31
STR             R2, [SP,#0x89C+var_804]
RSB             R5, R3, R11,ASR#6
BL              localtime
MOV             R12, R0
MOVW            R2, #:lower16:a02d02d02d03d ; "[%02d:%02d:%02d.%03d]"
LDR             R3, [R12,#8]
MOVT            R2, #:upper16:a02d02d02d03d ; "[%02d:%02d:%02d.%03d]"
STR             R5, [SP,#0x89C+var_894]
MOV             R1, #0x20 ; ' ' ; maxlen
LDR             LR, [R12]
ADD             R0, R8, #0x1C ; s
STR             LR, [SP,#0x89C+var_898]
LDR             R12, [R12,#4]
STR             R12, [SP,#0x89C+var_89C]
BL              snprintf
LDR             R0, =stru_76128 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_38ED4
MOV             R0, #stru_76110 ; mutex
BL              pthread_mutex_unlock
SUBS            R11, R0, #0
BNE             loc_39544
LDR             R3, [SP,#0x89C+var_884]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R3, R7
B               loc_38A44

loc_38A38
ADD             R11, R11, #1
CMP             R11, #0x39 ; '9'
BEQ             loc_38A50

loc_38A44
LDRB            R2, [R3],#1
CMP             R2, #0x30 ; '0'
BEQ             loc_38A38

loc_38A50
MOVW            R5, #:lower16:byte_72D90
ADD             R1, R7, R11 ; src
MOV             R2, #8  ; n
LDR             R0, =dest ; dest
MOVT            R5, #:upper16:byte_72D90
BL              strncpy
LDRB            R3, [R5]
MOV             R2, #0
LDR             R1, [SP,#0x89C+var_87C]
CMP             R3, R2
STRB            R2, [R1,#(byte_6A224 - 0x6A6E0)]
BNE             loc_38AA8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, R2
BNE             loc_38AA8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_38ADC

loc_38AA8
SUB             R8, R8, #0xC
MOVW            R3, #:lower16:byte_761E4
MOVW            R2, #:lower16:aNewBlockSDiffS ; "New block: %s... diff %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aNewBlockSDiffS ; "New block: %s... diff %s"
STR             R8, [SP,#0x89C+var_89C]
MOVT            R3, #:upper16:byte_761E4
MOV             R0, R4  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #6
BL              sub_1DD60

loc_38ADC
LDR             R3, [SP,#0x89C+var_880]
CMP             R3, #0
BEQ             loc_38B58
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_38B58
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_38B30
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38B30
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_38B58

loc_38B30
MOVW            R2, #:lower16:aDeletedBlockDF ; "Deleted block %d from database"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aDeletedBlockDF ; "Deleted block %d from database"
LDR             R3, [SP,#0x89C+var_880]
MOV             R0, R4  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #7
BL              sub_1DD60

loc_38B58
MOVW            R0, #0x1666
LDR             R2, =aTestWorkCurren ; "test_work_current"
STR             R0, [SP,#0x89C+var_898]
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
LDR             R0, [SP,#0x89C+var_88C]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R2, [SP,#0x89C+var_89C]
ADD             R1, SP, #0x89C+s2
MOV             R2, #0x20 ; ' '
ADD             R0, R0, #0x220
BL              sub_232EC
LDR             R3, [SP,#0x89C+var_874]
LDR             R3, [R3]
CMP             R3, #1
BEQ             loc_381C4
MOVW            R2, #:lower16:byte_686E8
LDRB            R1, [R6,#0x118]
MOVT            R2, #:upper16:byte_686E8
LDR             R3, [R2,#(dword_68C9C - 0x686E8)]
CMP             R1, #0
ADD             R3, R3, #1
STR             R3, [R2,#(dword_68C9C - 0x686E8)]
STR             R3, [R6,#0x150]
BEQ             loc_39084
LDRB            R2, [R6,#0x11C]
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R2, #0
BEQ             loc_392C0
CMP             R3, #0
BEQ             loc_38C40
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_38C0C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38C0C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_38C40

loc_38C0C
LDR             R3, [SP,#0x89C+var_88C]
MOVW            R2, #:lower16:aStratumFromPoo_0 ; "Stratum from pool %d detected new block"...
LDR             R12, [SP,#0x89C+var_86C]
MOVT            R2, #:upper16:aStratumFromPoo_0 ; "Stratum from pool %d detected new block"...
LDR             R3, [R3]

loc_38C20               ; maxlen
MOV             R1, #0x800
MOV             R0, R4  ; s
STR             R12, [SP,#0x89C+var_89C]
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_38C40
BL              sub_2C568
MOV             R3, #1
STR             R3, [SP,#0x89C+var_888]
B               loc_381C4

loc_38C50
MOVT            R3, #0xFEED
MOV             R0, R7
MOV             R11, R5
ADD             R4, SP, #0x89C+s
B               loc_37ED0

loc_38C64
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38CA0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38CA0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_38CD4

loc_38CA0
LDR             R3, [SP,#0x89C+var_88C]
MOVW            R2, #:lower16:aPoolDNowUpToDa ; "Pool %d now up to date at height %d"
LDR             R12, [SP,#0x89C+var_86C]
MOVT            R2, #:upper16:aPoolDNowUpToDa ; "Pool %d now up to date at height %d"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x89C+var_804 ; s
LDR             R3, [R3]
STR             R12, [SP,#0x89C+var_89C]
BL              snprintf
ADD             R1, SP, #0x89C+var_804
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_38CD4
LDR             R2, =aTestWorkCurren ; "test_work_current"
MOVW            R12, #0x1698
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
ADD             R1, SP, #0x89C+s2
MOV             R0, R4
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R2,R12}
MOV             R12, #1
MOV             R2, #0x20 ; ' '
STR             R12, [SP,#0x89C+var_888]
BL              sub_232EC
B               loc_38118

loc_38D04
LDR             R0, [R3,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R8, R0, #0
BEQ             loc_395B0
LDR             R3, [R7,#0x44]
MOV             R10, #0
LDR             R2, [R3,#4]
LDR             R0, [R3,#0xC]
LDR             R1, [R3,#8]
MOV             R2, R2,LSL#1
ADD             R1, R1, #1
SUB             R2, R2, #1
TST             R2, R0
MOVNE           R2, #1
MOVEQ           R2, R10
ADD             R2, R2, R0,LSR R1
STR             R2, [R3,#0x18]
LDR             R3, [R7,#0x44]
STR             R10, [R3,#0x1C]
LDR             R3, [R7,#0x44]
LDR             R4, [R3,#4]
CMP             R4, R10
BEQ             loc_38E58
MOV             R11, R10
STR             R10, [SP,#0x89C+var_878]
STR             R6, [SP,#0x89C+var_870]

loc_38D78
LDR             R2, [R3]
LDR             R5, [R2,R10]
CMP             R5, #0
BNE             loc_38DB8
B               loc_38E3C
off_38D8C DCD stru_6A1B0
off_38D90 DCD unk_6A1DC
off_38D94 DCD dbl_681E8
off_38D98 DCD stru_76128
off_38D9C DCD dest
off_38DA0 DCD aTestWorkCurren ; "test_work_current"
off_38DA4 DCD aBlockExists ; "block_exists"
off_38DA8 DCD unk_6A1E0
off_38DAC DCD aSetCurblock ; "set_curblock"

loc_38DB0
LDR             R4, [R3,#4]
MOV             R5, R6

loc_38DB8
LDR             R3, [R5,#0x1C]
MOV             R4, R4,LSL#1
LDR             R6, [R5,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
ADD             R9, R8, R4,LSL#2
LDR             R3, [R9,#4]
ADD             R3, R3, #1
STR             R3, [R9,#4]
LDR             R2, [R7,#0x44]
LDR             R1, [R2,#0x18]
CMP             R3, R1
BLS             loc_38E10
LDR             R3, [R2,#0x1C]
ADD             R3, R3, #1
STR             R3, [R2,#0x1C]
LDR             R3, [R7,#0x44]
LDR             R0, [R9,#4]
LDR             R1, [R3,#0x18]
BLX             sub_4A2D0
STR             R0, [R9,#8]

loc_38E10
STR             R11, [R5,#0xC]
LDR             R3, [R8,R4,LSL#2]
STR             R3, [R5,#0x10]
LDR             R3, [R8,R4,LSL#2]
CMP             R3, #0
STRNE           R5, [R3,#0xC]
CMP             R6, #0
STR             R5, [R8,R4,LSL#2]
LDR             R3, [R7,#0x44]
BNE             loc_38DB0
LDR             R4, [R3,#4]

loc_38E3C
LDR             R2, [SP,#0x89C+var_878]
ADD             R10, R10, #0xC
ADD             R2, R2, #1
CMP             R2, R4
STR             R2, [SP,#0x89C+var_878]
BCC             loc_38D78

loc_38E54
LDR             R6, [SP,#0x89C+var_870]

loc_38E58               ; ptr
LDR             R0, [R3]
BL              free
LDR             R2, [R7,#0x44]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R7,#0x44]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R7,#0x44]
STR             R8, [R3]
LDR             R3, [R7,#0x44]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R7,#0x44]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]
B               loc_38828

loc_38EC0
LDR             R4, [R6,#0x104]
BL              sub_2FB78
CMP             R4, R0
BNE             loc_381C4
B               loc_3814C

loc_38ED4
BL              __errno_location
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
LDR             R0, =aSetCurblock ; "set_curblock"
MOVW            R1, #0x15D5
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R9, [SP,#0x89C+var_89C]
STR             R0, [SP,#0x89C+var_898]

loc_38EF4
STR             R1, [SP,#0x89C+var_894]
MOV             R0, R4  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4

loc_38F08
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_38F20
MOV             R12, R8
MOV             R8, R4

loc_38F28
SUBS            R10, R12, #0
MOVNE           R4, #0
BNE             loc_38364
B               loc_382F0

loc_38F38
LDR             R3, [R5,#0x44]
LDR             R4, [R3,#0x14]
RSB             R11, R4, #0
ADD             R3, R8, R11
ADD             R11, R2, R11
LDR             R3, [R3,#0x64]
LDR             R11, [R11,#0x64]
SUB             R11, R3, R11
CMP             R11, #0
BLE             loc_38F78
LDR             R3, [R2,#8]
CMP             R3, #0
ADDNE           R3, R3, R4
B               loc_3831C

loc_38F70
MOV             R4, R8
B               loc_38398

loc_38F78
CMP             R8, #0
BEQ             loc_38F70
LDR             R3, [R8,#8]
CMP             R3, #0
ADDNE           R4, R3, R4
MOVEQ           R4, R3
B               loc_38398

loc_38F94
MOV             R0, R9
B               loc_382E8

loc_38F9C
MOV             R0, R9
MOV             R1, #1
B               loc_382E8

loc_38FA8
MOV             R3, R2
MOV             R0, R9
MOV             R1, R9
B               loc_382E8

loc_38FB8
BL              __errno_location
LDR             LR, =aTestWorkCurren ; "test_work_current"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x89C+var_804 ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1656
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x89C+var_894]

loc_38FE4               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x89C+var_804
B               loc_38F08

loc_38FF4
BL              __errno_location
LDR             LR, =aTestWorkCurren ; "test_work_current"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1656

loc_3900C
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x89C+var_804
STR             R12, [SP,#0x89C+var_894]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
B               loc_38FE4

loc_39024
BL              __errno_location
LDR             LR, =aTestWorkCurren ; "test_work_current"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x165E
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x89C+var_804
STR             R12, [SP,#0x89C+var_894]
B               loc_38FE4

loc_39054
BL              __errno_location
LDR             LR, =aTestWorkCurren ; "test_work_current"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x165E
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x89C+var_804
STR             R12, [SP,#0x89C+var_894]
B               loc_38FE4

loc_39084
MOVW            R3, #:lower16:byte_762C4
LDR             R2, [SP,#0x89C+var_88C]
MOVT            R3, #:upper16:byte_762C4
LDRB            R3, [R3]
LDRB            R2, [R2,#0x394]
CMP             R3, #0
BEQ             loc_3932C
CMP             R2, #0
BNE             loc_38C40
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_38C40
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_390F0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_390F0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_38C40

loc_390F0
MOVW            LR, #:lower16:aNewBlockDetect ; "New block detected on network before po"...
MOV             R12, R4
MOVT            LR, #:upper16:aNewBlockDetect ; "New block detected on network before po"...
LDM             LR!, {R0-R3} ; "New block detected on network before po"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "ed on network before pool notification"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "fore pool notification"
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1} ; "cation"
STR             R0, [R12],#4
MOV             R0, #7
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R4
STRB            R3, [R12]
BL              sub_1DD60
B               loc_38C40

loc_3913C
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aBlockExists ; "block_exists"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1607
B               loc_3900C

loc_39158
ADD             R4, SP, #0x89C+var_804

loc_3915C
BL              __errno_location
LDR             R12, =aBlockExists ; "block_exists"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R0, #0x162D
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0x89C+var_89C]

loc_39180
STR             R0, [SP,#0x89C+var_894]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x89C+var_898]
MOV             R0, R4  ; s
BL              snprintf
MOV             R1, R4
B               loc_38F08

loc_3919C
CMP             R3, #0
BNE             loc_391CC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_391CC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_381C0

loc_391CC
LDR             R2, [R6,#0x104]
MOVW            R1, #:lower16:aGbt ; "GBT "
LDRB            R0, [R6,#0x144]
MOVT            R1, #:upper16:aGbt ; "GBT "
MOVW            R3, #:lower16:(asc_4CF84+4) ; ""
LDR             R12, [R2]
MOVW            R2, #:lower16:aSlongpollFromP ; "%sLONGPOLL from pool %d requested work "...
CMP             R0, #0
MOVT            R3, #:upper16:(asc_4CF84+4) ; ""
ADD             R0, SP, #0x89C+var_804 ; s
MOVNE           R3, R1
MOVT            R2, #:upper16:aSlongpollFromP ; "%sLONGPOLL from pool %d requested work "...
STR             R12, [SP,#0x89C+var_89C]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x89C+var_804
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60
B               loc_381C0

loc_3921C
LDR             R3, [SP,#0x89C+var_87C]
MOV             R0, #0x2C ; ',' ; size
STR             R5, [R7,#0x4C]
STR             R5, [R7,#0x48]
STR             R7, [R3,#(dword_6A1D0 - 0x6A6E0)]
BL              malloc
CMP             R0, #0
STR             R0, [R7,#0x44]
BEQ             loc_395B0
MOV             R2, #0x2C ; ',' ; n
MOV             R1, R5  ; c
MOV             R8, R7
BL              memset
LDR             R3, [R8,#0x44]!
MOV             R12, #0x20 ; ' '
MOV             R1, #5
MOV             R2, #0x44 ; 'D'
MOV             R0, #0x180 ; size
STR             R8, [R3,#0x10]
LDR             R3, [R7,#0x44]
STR             R12, [R3,#4]
LDR             R3, [R7,#0x44]
STR             R1, [R3,#8]
LDR             R3, [R7,#0x44]
STR             R2, [R3,#0x14]
LDR             R9, [R7,#0x44]
BL              malloc
STR             R0, [R9]
LDR             R3, [R7,#0x44]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_395B0
MOV             R1, R5  ; c
MOV             R2, #0x180 ; n
BL              memset
LDR             R2, [R7,#0x44]
MOV             R3, #0xA0111FE1
MOV             R5, R7
STR             R3, [R2,#0x28]
B               loc_38780

loc_392C0
CMP             R3, #0
BEQ             loc_38C40
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_392FC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_392FC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_38C40

loc_392FC
LDR             R2, [R6,#0x104]
MOVW            R1, #:lower16:aGbt ; "GBT "
LDRB            R0, [R6,#0x144]
MOVW            R3, #:lower16:(asc_4CF84+4) ; ""
MOVT            R1, #:upper16:aGbt ; "GBT "
MOVT            R3, #:upper16:(asc_4CF84+4) ; ""
LDR             R12, [R2]
MOVW            R2, #:lower16:aSlongpollFromP_0 ; "%sLONGPOLL from pool %d detected new bl"...
CMP             R0, #0
MOVT            R2, #:upper16:aSlongpollFromP_0 ; "%sLONGPOLL from pool %d detected new bl"...
MOVNE           R3, R1
B               loc_38C20

loc_3932C
CMP             R2, #0
BNE             loc_38C40
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_38C40
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3937C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3937C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_38C40

loc_3937C
MOVW            LR, #:lower16:aNewBlockDetect_0 ; "New block detected on network"
MOV             R12, R4
MOVT            LR, #:upper16:aNewBlockDetect_0 ; "New block detected on network"
LDM             LR!, {R0-R3} ; "New block detected on network"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "ed on network"
STM             R12!, {R0-R2}
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
STRH            R3, [R12]
BL              sub_1DD60
B               loc_38C40

loc_393B0
MOVW            R3, #0xBEEF
MOVT            R8, #0x9E37
MOVT            R3, #0xFEED
LDR             LR, [SP,#0x89C+var_878]
MOV             R1, R3
MOV             R10, R7
MOV             R3, R8
B               loc_38620

loc_393D0
LDR             R3, [SP,#0x89C+var_88C]
MOVW            R2, #:lower16:aStaleDataFromP ; "Stale data from pool %d at height %d"
LDR             R12, [SP,#0x89C+var_86C]
ADD             R0, SP, #0x89C+var_804 ; s
MOVT            R2, #:upper16:aStaleDataFromP ; "Stale data from pool %d at height %d"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R3]
STR             R12, [SP,#0x89C+var_89C]
BL              snprintf
ADD             R1, SP, #0x89C+var_804
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_38118

loc_39408
MOVW            R12, #:lower16:aBlockExistsOom ; "block_exists OOM"
ADD             LR, SP, #0x89C+var_804
MOVT            R12, #:upper16:aBlockExistsOom ; "block_exists OOM"
LDM             R12!, {R0-R3} ; "block_exists OOM"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x89C+var_804
MOV             R0, #3
MOV             R2, #1
STRB            R12, [LR]
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_39440
LDR             R8, =unk_6A1E0
VMOV            R0, R1, D8
BLX             sub_4ABD0
MOV             R3, #8  ; maxlen
STR             R5, [SP,#0x89C+var_89C] ; int
SUB             R2, R8, #0xC ; s
BL              sub_287D8
MOVW            R3, #:lower16:byte_72D90
VSTR            D8, [R4]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3949C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3949C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3888C

loc_3949C
ADD             R4, SP, #0x89C+var_804
MOVW            R2, #:lower16:aNetworkDiffSet ; "Network diff set to %s"
SUB             R3, R8, #0xC
MOV             R0, R4  ; s
MOVT            R2, #:upper16:aNetworkDiffSet ; "Network diff set to %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60
B               loc_38890

loc_394CC
LDR             R4, [R10,#0x4C]
LDR             R2, [R10,#0x44]
CMP             R4, #0
BEQ             loc_39590
LDR             R3, [R2,#0x14]
ADD             R0, R10, #0x44 ; 'D'
LDR             R12, [R2,#0x10]
SUB             R12, R12, R3
CMP             R10, R12
BNE             loc_3950C

loc_394F4
ADD             R3, R1, R3
STR             R3, [R2,#0x10]
LDR             R1, [R10,#0x48]
CMP             R1, #0
LDREQ           R4, [R10,#0x4C]
BNE             loc_395B8

loc_3950C
LDR             R3, [SP,#0x89C+var_87C]
MOV             R5, R4
STR             R4, [R3,#(dword_6A1D0 - 0x6A6E0)]
B               loc_38460

loc_3951C
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
LDR             R12, =aSetCurblock ; "set_curblock"
MOVW            R0, #0x15D0
STR             R1, [SP,#0x89C+var_89C]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
B               loc_39180

loc_39544
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R0, =aSetCurblock ; "set_curblock"
MOVW            R1, #0x15D5
STR             R9, [SP,#0x89C+var_89C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0x89C+var_898]
B               loc_38EF4

loc_39568
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
LDR             R12, =aSetCurblock ; "set_curblock"
MOVW            R0, #0x15D0
STR             R1, [SP,#0x89C+var_89C]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
B               loc_39180

loc_39590               ; ptr
LDR             R0, [R2]
MOV             R5, R4
BL              free
LDR             R0, [R10,#0x44] ; ptr
BL              free
LDR             R3, [SP,#0x89C+var_87C]
STR             R4, [R3,#(dword_6A1D0 - 0x6A6E0)]
B               loc_384EC

loc_395B0               ; status
MOV             R0, #0xFFFFFFFF
BL              exit

loc_395B8
LDR             R3, [R10,#0x44]
LDR             R3, [R3,#0x14]
B               loc_3844C
; End of function sub_37C80




; int __fastcall sub_395C4(_DWORD *)
sub_395C4

timeout= -0xA7C
var_A78= -0xA78
var_A74= -0xA74
var_A70= -0xA70
var_A6C= -0xA6C
var_A68= -0xA68
var_A64= -0xA64
var_A5C= -0xA5C
var_A58= -0xA58
var_A54= -0xA54
var_A50= -0xA50
var_A4C= -0xA4C
timer= -0xA48
var_A44= -0xA44
ptr= -0xA3C
var_A38= -0xA38
s2= -0xA34
var_A30= -0xA30
s= -0xA28
var_A18= -0xA18
var_A04= -0xA04
var_9E4= -0x9E4
var_9C0= -0x9C0
var_984= -0x984
readfds= -0x980
var_900= -0x900
var_8A4= -0x8A4
var_804= -0x804
var_C= -0xC

PUSH            {R4-R11,LR}
MOV             R8, R0
VPUSH           {D8-D9}
SUB             SP, SP, #0xA70
SUB             SP, SP, #0xC
MOVW            R9, #0xBAC6
BL              pthread_self
BL              pthread_detach
MOVW            R12, #:lower16:byte_686E8
MOVW            R2, #:lower16:aDRstratum ; "%d/RStratum"
MOVT            R12, #:upper16:byte_686E8
LDR             R3, [R8]
STR             R12, [SP,#0xA7C+var_A58]
MOV             R12, #0x112410D
ADD             R0, SP, #0xA7C+s ; s
MOVT            R2, #:upper16:aDRstratum ; "%d/RStratum"
MOV             R1, #0x10 ; maxlen
STR             R12, [SP,#0xA7C+var_A54]
MOVW            R10, #0xBEF3
BL              snprintf
MOVW            R3, #0xF76D
ADD             R0, SP, #0xA7C+s
MOVT            R3, #7
VLDR            D9, =60.0
STR             R3, [SP,#0xA7C+var_A50]
MOVT            R9, #0x9F49
MOVT            R10, #0xFEED
BL              sub_22E98

loc_39638
LDRB            R3, [R8,#0x69]
MOV             R0, R8
CMP             R3, #0
BNE             loc_3973C

loc_39648
BL              sub_20C5C
CMP             R0, #0
BEQ             loc_39754

loc_39654
ADD             R3, SP, #0xA7C+var_984
ADD             R1, SP, #0xA7C+readfds.__fds_bits+0x7C
MOV             R2, #0

loc_39660
STR             R2, [R3,#4]!
CMP             R1, R3
BNE             loc_39660
LDR             R3, [R8,#0x24C]
ADD             R0, SP, #0xA7C+var_C
STR             R2, [SP,#0xA7C+var_A30.tv_usec]
MOV             R2, #0x5A ; 'Z'
STR             R2, [SP,#0xA7C+var_A30]
ADD             R0, R0, #8
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
RSBS            R1, R3, #0
MOV             R2, R2,ASR#5
AND             R1, R1, #0x1F
AND             R3, R3, #0x1F
ADD             R2, R0, R2,LSL#2
RSBPL           R3, R1, #0
MOV             R12, #1
LDR             R1, [R2,#-0x97C]
MOV             R0, R8
ORR             R3, R1, R12,LSL R3
STR             R3, [R2,#-0x97C]
BL              sub_20C5C
SUBS            R3, R0, #0 ; exceptfds
BNE             loc_396EC
LDR             R0, [R8,#0x24C]
ADD             R2, SP, #0xA7C+var_A30
STR             R2, [SP,#0xA7C+timeout] ; timeout
ADD             R1, SP, #0xA7C+readfds ; readfds
MOV             R2, R3  ; writefds
ADD             R0, R0, #1 ; nfds
BL              select
CMP             R0, #0
BLE             loc_39C5C

loc_396EC
MOV             R0, R8
BL              sub_21850
SUBS            R4, R0, #0
BEQ             loc_3980C
MOV             R0, R8
BL              sub_2FF84
MOV             R1, R4
MOV             R0, R8
BL              sub_2705C
SUBS            R1, R0, #0
BEQ             loc_39958

loc_39718
LDRB            R3, [R8,#0x2B8]
CMP             R3, #0
BNE             loc_39A48

loc_39724               ; ptr
MOV             R0, R4
BL              free
LDRB            R3, [R8,#0x69]
MOV             R0, R8
CMP             R3, #0
BEQ             loc_39648

loc_3973C
BL              sub_21338

loc_39740
MOV             R0, #0
ADD             SP, SP, #0xA70
ADD             SP, SP, #0xC
VPOP            {D8-D9}
POP             {R4-R11,PC}

loc_39754
MOV             R0, R8
BL              sub_2FFA8
CMP             R0, #0
BNE             loc_39654
MOV             R0, R8
MOVW            R5, #:lower16:off_67964
BL              sub_21338
MOV             R0, R8
MOVT            R5, #:upper16:off_67964
BL              sub_3285C
MOV             R0, R8
LDR             R4, =mutex
BL              sub_31774
MOV             R0, R8
LDR             R6, [SP,#0xA7C+var_A58]
BL              sub_2FFA8
CMP             R0, #0
BNE             loc_39B98

loc_3979C
LDR             R3, [R8,#0x64]
CMP             R3, #0
BEQ             loc_397C4
BL              sub_2FB78
CMP             R8, R0
BEQ             loc_39B98
LDR             R3, [R6,#(dword_68AE4 - 0x686E8)]
SUB             R3, R3, #3
CMP             R3, #1
BLS             loc_39B98

loc_397C4               ; mutex
MOV             R0, R4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_39E14
MOV             R1, R4  ; mutex
LDR             R0, =cond ; cond
BL              pthread_cond_wait
MOV             R0, R4  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_39E30
LDR             R3, [R5] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R8
BL              sub_2FFA8
CMP             R0, #0
BEQ             loc_3979C
B               loc_39B98

loc_3980C
MOV             R3, #byte_72D90
LDRB            R3, [R3]

loc_39818
CMP             R3, #0
BNE             loc_39834
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_39A9C

loc_39834
ADD             R11, SP, #0xA7C+var_804
MOV             R2, #aStratumConnect_0 ; "Stratum connection to pool %d interrupt"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R3, [R8]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_39860
MOVW            R3, #:lower16:dword_72F08
LDR             R1, [R8,#0x80]
MOVT            R3, #:upper16:dword_72F08
ADD             R4, R8, #0xD4
LDR             R2, [R3]
MOV             R0, R4  ; mutex
ADD             R1, R1, #1
STR             R1, [R8,#0x80]
ADD             R2, R2, #1
STR             R2, [R3]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_39D34
ADD             R5, R8, #0xEC
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_39D84
MOV             R0, R4  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_39DB4
MOV             R0, R5  ; rwlock
LDR             R4, [R8,#0x28C]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_39DE4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
CMP             R4, #0
BEQ             loc_3994C
MOV             R3, #byte_74F84
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3994C

loc_398F8
MOV             R0, R8
BL              sub_31774
BL              sub_2FB78
CMP             R8, R0
BEQ             loc_39D2C

loc_3990C
MOV             R0, R8
BL              sub_26020
CMP             R0, #0
BNE             loc_39638

loc_3991C
MOV             R0, R8
BL              sub_31F20
LDRB            R3, [R8,#0x69]
CMP             R3, #0
BNE             loc_39740
MOVW            R0, #0x1388
BL              sub_208D4
MOV             R0, R8
BL              sub_26020
CMP             R0, #0
BEQ             loc_3991C
B               loc_39638

loc_3994C
MOV             R0, R8
BL              sub_3285C
B               loc_398F8

loc_39958
ADD             R2, SP, #0xA7C+var_900
MOV             R0, R4
BL              sub_47C50
SUBS            R3, R0, #0
STR             R3, [SP,#0xA7C+var_A5C]
BEQ             loc_39AB4
MOV             R1, #aResult ; "result"
BL              sub_48AF4
LDR             R5, [SP,#0xA7C+var_A5C]
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
STR             R0, [SP,#0xA7C+var_A4C]
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R5
BL              sub_48AF4
MOVW            R1, #:lower16:aId ; "id"
STR             R0, [SP,#0xA7C+timer]
MOVT            R1, #:upper16:aId ; "id"
MOV             R0, R5
BL              sub_48AF4
SUBS            R5, R0, #0
BEQ             loc_39BC0
LDR             R3, [R5]
CMP             R3, #7
BEQ             loc_39BC0
MOVW            R1, #:lower16:aVersionRolling ; "version-rolling.mask"
LDR             R0, [SP,#0xA7C+var_A4C]
MOVT            R1, #:upper16:aVersionRolling ; "version-rolling.mask"
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_39E4C

loc_399D4
LDR             R3, [SP,#0xA7C+var_A5C]
LDR             R3, [R3,#4]
CMN             R3, #1
BEQ             loc_39B10

loc_399E4
LDR             R3, [SP,#0xA7C+var_A5C]
DMB             ISH
ADD             R3, R3, #4

loc_399F0
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_399F0
CMP             R2, #0
BNE             loc_39B10
LDR             R0, [SP,#0xA7C+var_A5C]
BL              sub_4942C
B               loc_39B10
dbl_39A18 DCFD 60.0
off_39A20 DCD mutex
off_39A24 DCD cond
off_39A28 DCD aStratumRthread ; "stratum_rthread"
off_39A2C DCD aSupportsResume ; "supports_resume"
off_39A30 DCD aWaitLpcurrent ; "wait_lpcurrent"
off_39A34 DCD aReject   ; "reject"
off_39A38 DCD aShareResult ; "share_result"
off_39A3C DCD dword_681C8
off_39A40 DCD stru_68C54
off_39A44 DCD aParseStratumRe ; "parse_stratum_response"

loc_39A48
BL              sub_2D914
ADD             R11, SP, #0xA7C+var_C
MOV             R3, R0
MOV             R2, #0
MOV             R1, R3
STRB            R2, [R8,#0x2B8]
MOV             R0, R8
ADD             R11, R11, #8
STR             R3, [SP,#0xA7C+var_804]
BL              sub_335C8
LDR             R0, [R11,#-0x800]!
MOV             R3, #1
STRB            R3, [R0,#0x118]
BL              sub_37C80
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOV             R0, R11
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1DF7
LDR             R2, =aStratumRthread ; "stratum_rthread"
BL              sub_2A70C
B               loc_39724

loc_39A9C
MOV             R3, #dword_67840

loc_39AA4
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_39834
B               loc_39860

loc_39AB4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39ADC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_39CE4

loc_39ADC
ADD             R1, SP, #0xA7C+var_8A4
ADD             R11, SP, #0xA7C+var_804
MOVW            R2, #:lower16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
STR             R1, [SP,#0xA7C+timeout]
MOVT            R2, #:upper16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
MOV             R1, #0x800 ; maxlen
LDR             R3, [SP,#0xA7C+var_900]
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_39B10
MOV             R1, R4
MOV             R0, R8
BL              sub_20FF0
CMP             R0, #0
BNE             loc_39718
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39B60
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39B60
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_39724

loc_39B60
ADD             R11, SP, #0xA7C+var_804
MOVW            R2, #:lower16:aUnknownStratum ; "Unknown stratum msg: %s"
MOV             R0, R11 ; s
MOVT            R2, #:upper16:aUnknownStratum ; "Unknown stratum msg: %s"
MOV             R3, R4
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60
B               loc_39724

loc_39B90
MOVW            R0, #0x1388
BL              sub_208D4

loc_39B98
MOV             R0, R8
BL              sub_26020
CMP             R0, #0
BNE             loc_39654
MOV             R0, R8
BL              sub_31F20
LDRB            R3, [R8,#0x69]
CMP             R3, #0
BEQ             loc_39B90
B               loc_39740

loc_39BC0
LDR             R0, [SP,#0xA7C+timer]
CMP             R0, #0
BEQ             loc_39CFC
MOV             R1, #3
BL              sub_45A6C
MOV             R5, R0

loc_39BD8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39C14
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39C14
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_39C40

loc_39C14
ADD             R11, SP, #0xA7C+var_804
MOV             R2, #aJsonRpcNonMeth ; "JSON-RPC non method decode failed: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
MOV             R3, R5
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_39C40               ; ptr
MOV             R0, R5
BL              free
LDR             R3, [SP,#0xA7C+var_A5C]
LDR             R3, [R3,#4]
CMN             R3, #1
BNE             loc_399E4
B               loc_39B10

loc_39C5C
MOVW            R3, #:lower16:byte_686E1
MOVW            R4, #:lower16:byte_72D90
MOVT            R3, #:upper16:byte_686E1
MOVT            R4, #:upper16:byte_72D90
LDRB            R2, [R3]
LDRB            R3, [R4]
CMP             R2, #0
BEQ             loc_39818
CMP             R3, #0
BNE             loc_39CAC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39CAC
MOV             R3, #dword_67840
LDR             R2, [R3]
CMP             R2, #6
BLE             loc_39AA4

loc_39CAC
ADD             R11, SP, #0xA7C+var_804
MOVW            R2, #:lower16:aStratumSelectF ; "Stratum select failed on pool %d with v"...
LDR             R3, [R8]
MOVT            R2, #:upper16:aStratumSelectF ; "Stratum select failed on pool %d with v"...
STR             R0, [SP,#0xA7C+timeout]
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
LDRB            R3, [R4]
B               loc_39818

loc_39CE4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_39B10
B               loc_39ADC

loc_39CFC               ; size
MOV             R0, #0x11
BL              malloc
SUBS            R5, R0, #0
BEQ             loc_39BD8
MOVW            R12, #:lower16:aUnknownReason ; "(unknown reason)"
MOV             LR, R5
MOVT            R12, #:upper16:aUnknownReason ; "(unknown reason)"
LDM             R12!, {R0-R3} ; "(unknown reason)"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
STRB            R12, [LR]
B               loc_39BD8

loc_39D2C
BL              sub_2C568
B               loc_3990C

loc_39D34
BL              __errno_location
LDR             LR, =aSupportsResume ; "supports_resume"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D81

loc_39D4C
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
ADD             R0, SP, #0xA7C+var_804 ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0xA7C+var_A74]

loc_39D60               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0xA7C+var_804

loc_39D6C
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_39D84
BL              __errno_location
LDR             LR, =aSupportsResume ; "supports_resume"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D81
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0xA7C+var_804
STR             R12, [SP,#0xA7C+var_A74]
B               loc_39D60

loc_39DB4
BL              __errno_location
LDR             LR, =aSupportsResume ; "supports_resume"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D81

loc_39DCC
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0xA7C+var_804
STR             R12, [SP,#0xA7C+var_A74]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_39D60

loc_39DE4
BL              __errno_location
LDR             LR, =aSupportsResume ; "supports_resume"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D83
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0xA7C+var_804
STR             R12, [SP,#0xA7C+var_A74]
B               loc_39D60

loc_39E14
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aWaitLpcurrent ; "wait_lpcurrent"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2713
B               loc_39D4C

loc_39E30
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aWaitLpcurrent ; "wait_lpcurrent"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2715
B               loc_39DCC

loc_39E4C
MOVW            R1, #:lower16:aMiningConfigur ; "mining.configure"
MOV             R0, R4  ; haystack
MOVT            R1, #:upper16:aMiningConfigur ; "mining.configure"
BL              strstr
CMP             R0, #0
BNE             loc_399D4
MOVW            R1, #:lower16:aMiningSetVersi ; "mining.set_version_mask"
MOV             R0, R4  ; haystack
MOVT            R1, #:upper16:aMiningSetVersi ; "mining.set_version_mask"
BL              strstr
CMP             R0, #0
BNE             loc_399D4
MOV             R0, R5
BL              sub_49284
MOV             R5, R0
LDR             R0, =stru_68C54 ; mutex
STR             R5, [SP,#0xA7C+s2]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3A7A8
LDR             R1, [SP,#0xA7C+var_A54]
BIC             R3, R5, #0xFF0000
BIC             R3, R3, #0xFF00
AND             R2, R5, #0xFF0000
AND             R5, R5, #0xFF00
ADD             R3, R3, R1
LDR             R1, [SP,#0xA7C+var_A58]
ADD             R3, R3, R2
LDR             R2, [SP,#0xA7C+var_A50]
ADD             R3, R3, R5
LDR             R11, [R1,#(dword_68C6C - 0x686E8)]
EOR             R3, R3, R2
SUB             R2, R9, R3
SUB             R1, R10, R3
EOR             R2, R2, R3,LSL#8
CMP             R11, #0
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#13
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#12
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSL#16
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#5
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#3
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R3, R2, R3,LSL#10
SUB             R2, R1, R3
EOR             R3, R2, R3,LSR#15
BEQ             loc_3A7C0
LDR             R5, [R11]
MOV             R1, #0xC
LDM             R5, {R0,R2}
SUB             R2, R2, #1
STR             R0, [SP,#0xA7C+ptr]
AND             R2, R2, R3
MUL             R2, R1, R2
LDR             R2, [R0,R2]
CMP             R2, #0
BEQ             loc_3A7C0
LDR             R1, [R5,#0x14]
RSB             R6, R1, #0
STR             R1, [SP,#0xA7C+var_A38]
ADDS            R7, R2, R6
BEQ             loc_3A7C0
STR             R10, [SP,#0xA7C+var_A44]
MOV             R10, R9
MOV             R9, R5
MOV             R5, R4
MOV             R4, R3
B               loc_39F98

loc_39F84
LDR             R7, [R7,#0x10]
CMP             R7, #0
BEQ             loc_3A7B4
ADDS            R7, R7, R6
BEQ             loc_3A7B4

loc_39F98
LDR             R2, [R7,#0x1C]
CMP             R4, R2
BNE             loc_39F84
LDR             R2, [R7,#0x18] ; n
CMP             R2, #4
BNE             loc_39F84
ADD             R1, SP, #0xA7C+s2 ; s2
LDR             R0, [R7,#0x14] ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_39F84
LDR             R3, [R7,#4]
MOV             R4, R5
MOV             R5, R9
MOV             R9, R10
LDR             R10, [SP,#0xA7C+var_A44]
CMP             R3, #0
BEQ             loc_3AA8C
LDR             R2, [R5,#0x10]
ADD             R6, R2, R6
CMP             R7, R6
BEQ             loc_3AAE4

loc_39FF0
LDR             R2, [R5,#0x14]
LDR             R1, [R7,#8]
ADD             R3, R3, R2
STR             R1, [R3,#8]

loc_3A000
LDR             R2, [SP,#0xA7C+var_A58]
LDR             R3, [R7,#8]
LDR             R2, [R2,#(dword_68C6C - 0x686E8)]
CMP             R3, #0
LDR             R1, [R2]
LDRNE           R0, [R1,#0x14]
LDRNE           R1, [R7,#4]
ADDNE           R3, R3, R0
MOV             R0, #0xC
STRNE           R1, [R3,#4]
LDRNE           R1, [R2]
LDR             R12, [R7,#0x1C]
LDR             R3, [R1,#4]
LDR             R1, [R1]
SUB             R3, R3, #1
AND             R3, R3, R12
MUL             R3, R0, R3
ADD             R1, R1, R3
LDR             R0, [R1,#4]
SUB             R0, R0, #1
STR             R0, [R1,#4]
LDR             R1, [R2]
LDR             R1, [R1]
LDR             R0, [R1,R3]
CMP             R0, R7
LDREQ           R0, [R7,#0x10]
STREQ           R0, [R1,R3]
LDR             R1, [R7,#0xC]
LDR             R3, [R7,#0x10]
CMP             R1, #0
STRNE           R3, [R1,#0x10]
LDRNE           R3, [R7,#0x10]
CMP             R3, #0
LDRNE           R1, [R7,#0xC]
STRNE           R1, [R3,#0xC]
LDR             R2, [R2]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_3A09C
LDR             R3, [R8,#0x2EC]
LDR             R0, =stru_68C54 ; mutex
SUB             R3, R3, #1
STR             R3, [R8,#0x2EC]
BL              pthread_mutex_unlock
SUBS            R6, R0, #0
BNE             loc_3AAB4
MOVW            R3, #:lower16:off_67964
MOVW            R11, #:lower16:byte_686E1
MOVT            R3, #:upper16:off_67964
MOVT            R11, #:upper16:byte_686E1
STR             R3, [SP,#0xA7C+ptr]
LDR             R3, [R3] ; sub_1EAA0
STR             R11, [SP,#0xA7C+var_A38]
BLX             R3      ; sub_1EAA0
MOV             R0, R6  ; timer
LDR             R5, [R7,#0x24]
BL              time
LDR             R2, [R7,#0x30]
LDRB            R3, [R11]
SUB             R0, R0, R2
CMP             R0, #0
ORRGT           R3, R3, #1
CMP             R3, #0
BEQ             loc_3AA54
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A13C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A13C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3AA54

loc_3A13C
LDR             R3, [R5,#0x104]
ADD             R11, SP, #0xA7C+var_804
MOVW            R2, #:lower16:aPoolDStratumSh_1 ; "Pool %d stratum share result lag time %"...
STR             R0, [SP,#0xA7C+timeout]
MOVT            R2, #:upper16:aPoolDStratumSh_1 ; "Pool %d stratum share result lag time %"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R3, [R3]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_3A170
LDR             R3, [R5,#0xDC]
MOV             R2, R11
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804]
LDR             R3, [R5,#0xD8]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+4]
LDR             R3, [R5,#0xD4]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+8]
LDR             R3, [R5,#0xD0]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0xC]
LDR             R3, [R5,#0xCC]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0x10]
LDR             R3, [R5,#0xC8]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0x14]
LDR             R3, [R5,#0xC4]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0x18]
LDR             R3, [R5,#0xC0]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0x1C]
B               loc_3A1E4

loc_3A1D8
ADD             R6, R6, #1
CMP             R6, #0x1D
BEQ             loc_3A1F0

loc_3A1E4
LDRB            R3, [R2],#1
CMP             R3, #0
BEQ             loc_3A1D8

loc_3A1F0
ADD             R3, SP, #0xA7C+var_C
VLDR            D0, [R5,#0x178]
ADD             R3, R3, #8
ADD             R3, R3, R6
LDR             R3, [R3,#-0x800]
REV             R6, R3
BL              round
VMOV            R0, R1, D0
BLX             sub_4ABD0
MOV             R3, #0
STRD            R0, R1, [SP,#0xA7C+var_A44]
ADD             R2, SP, #0xA7C+var_9E4 ; s
LDRD            R0, R1, [R5,#0xE8] ; int
STR             R3, [SP,#0xA7C+timeout] ; int
MOV             R3, #0x10 ; maxlen
BL              sub_287D8
LDRB            R0, [R5,#0x11B]
MOV             R1, #aBlock ; " BLOCK!"
MOV             R3, #(asc_4CF84+4) ; ""
MOVW            R2, #:lower16:a08lxDiffSLluS ; "%08lx Diff %s/%llu%s"
CMP             R0, #0
MOVT            R2, #:upper16:a08lxDiffSLluS ; "%08lx Diff %s/%llu%s"
MOVNE           R12, R1
LDRD            R0, R1, [SP,#0xA7C+var_A44]
MOVEQ           R12, R3
MOV             R3, R6
STR             R12, [SP,#0xA7C+var_A6C]
STRD            R0, R1, [SP,#0xA7C+var_A74]
ADD             R1, SP, #0xA7C+var_9E4
STR             R1, [SP,#0xA7C+timeout]
ADD             R0, SP, #0xA7C+var_9C0 ; s
MOV             R1, #0x40 ; '@' ; maxlen
BL              snprintf
LDR             R0, [R5,#0x100]
LDR             R6, [R5,#0x104]
BL              sub_2F688
LDR             R3, [SP,#0xA7C+var_A4C]
LDR             R2, [R0,#0x24]
CMP             R3, #0
STR             R2, [SP,#0xA7C+var_A44]
BEQ             loc_3A2BC
LDR             R3, [R3]
CMP             R3, #5
BEQ             loc_3ABDC
LDRB            R2, [R5,#0x144]
CMP             R2, #0
BEQ             loc_3A2BC
CMP             R3, #7
BEQ             loc_3ABDC

loc_3A2BC               ; mutex
MOV             R0, #stru_72D94
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3ABB8
LDR             LR, [SP,#0xA7C+var_A44]
MOV             R0, #qword_74FB8
MOVW            R1, #:lower16:dbl_74FB0
LDR             R3, [R0]
MOVT            R1, #:upper16:dbl_74FB0
LDR             R2, [LR,#0x28]
LDR             R12, [R0,#(qword_74FB8+4 - 0x74FB8)]
VLDR            D5, [R1]
ADD             R2, R2, #1
STR             R2, [LR,#0x28]
ADDS            R2, R3, #1
LDR             R3, [R6,#0x10]
ADC             R12, R12, #0
STR             R2, [R0]
LDR             R2, [R6,#0x14]
ADDS            R3, R3, #1
STR             R12, [R0,#(qword_74FB8+4 - 0x74FB8)]
STR             R3, [R6,#0x10]
MOVW            R0, #:lower16:stru_72D94
ADC             R3, R2, #0
MOVT            R0, #:upper16:stru_72D94 ; mutex
STR             R3, [R6,#0x14]
VLDR            D6, [LR,#0xD0]
VLDR            D7, [R5,#0x178]
VADD.F64        D7, D6, D7
VSTR            D7, [LR,#0xD0]
VLDR            D7, [R5,#0x178]
VLDR            D6, [R6,#0x50]
LDR             R3, [R6,#0x18]
VADD.F64        D5, D5, D7
VADD.F64        D7, D6, D7
ADD             R3, R3, #1
STR             R3, [R6,#0x18]
VSTR            D5, [R1]
VSTR            D7, [R6,#0x50]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3AB5C
LDR             R3, [SP,#0xA7C+ptr]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [SP,#0xA7C+var_A38]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3A3FC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A3C4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A3C4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3A3FC

loc_3A3C4
MOVW            R12, #:lower16:aProofOfWorkRes ; "PROOF OF WORK RESULT: false (booooo)"
MOV             LR, R11
MOVT            R12, #:upper16:aProofOfWorkRes ; "PROOF OF WORK RESULT: false (booooo)"
LDM             R12!, {R0-R3} ; "PROOF OF WORK RESULT: false (booooo)"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "SULT: false (booooo)"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "ooo)"
STR             R0, [LR],#4
MOV             R0, #7
STRB            R1, [LR]
MOV             R1, R11
BL              sub_1DD60

loc_3A3FC
MOV             R3, #byte_76234
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A61C
MOV             R3, #byte_761D0
LDRB            R12, [R3]
CMP             R12, #0
BNE             loc_3A61C
LDR             R3, =aReject ; "reject"
MOV             R2, #0x1D ; n
STR             R12, [SP,#0xA7C+ptr]
LDM             R3, {R0,R1} ; "reject"
STR             R0, [SP,#0xA7C+var_9E4]
ADD             R0, SP, #0xA7C+var_9E4+7 ; s
MOV             R3, R1,LSR#16
STRH            R1, [SP,#0xA7C+var_9E4+4]
MOV             R1, R12 ; c
STRB            R3, [SP,#0xA7C+var_9E4+6]
BL              memset
MOVW            R3, #:lower16:dword_72E60
LDRB            R2, [SP,#0xA7C+ptr]
MOVT            R3, #:upper16:dword_72E60
LDR             R3, [R3]
STRB            R2, [SP,#0xA7C+var_A04]
CMP             R3, #1
LDRBLE          R3, [SP,#0xA7C+ptr]
STRBLE          R3, [SP,#0xA7C+var_A18]
BLE             loc_3A490
LDR             R3, [R5,#0x104]
MOV             R2, #(aLostDSharesDue_0+0x2C) ; format
MOV             R1, #0x14 ; maxlen
ADD             R0, SP, #0xA7C+var_A18 ; s
LDR             R3, [R3]
BL              snprintf

loc_3A490
LDRB            R3, [R5,#0x144]
CMP             R3, #0
BNE             loc_3A4B0
MOVW            R1, #:lower16:aRejectReason ; "reject-reason"
LDR             R0, [SP,#0xA7C+var_A5C]
MOVT            R1, #:upper16:aRejectReason ; "reject-reason"
BL              sub_48AF4
STR             R0, [SP,#0xA7C+var_A4C]

loc_3A4B0
LDR             R0, [SP,#0xA7C+var_A4C]
CMP             R0, #0
BEQ             loc_3AB08
BL              sub_49028
STR             R0, [SP,#0xA7C+timer]
BL              strlen
LDR             R12, =aShareResult ; "share_result"
CMP             R0, #0x1C
MOVCC           LR, R0
MOVW            R1, #0x2820
ADD             R0, SP, #0xA7C+var_A04
MOVCS           LR, #0x1C
STRH            R1, [R0],#2
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
STR             R12, [SP,#0xA7C+timeout]
MOVW            R12, #0xE77
STR             R12, [SP,#0xA7C+var_A78]
ADD             R12, SP, #0xA7C+var_C
ADD             R12, R12, #8
MOV             R2, LR
ADD             R12, R12, LR
LDR             R1, [SP,#0xA7C+timer]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             LR, [SP,#0xA7C+ptr]
STR             R12, [SP,#0xA7C+var_A4C]
BL              sub_232EC
LDR             LR, [SP,#0xA7C+var_A4C]
MOVW            R0, #0xE7C
LDR             R2, =aShareResult ; "share_result"
MOV             R12, #0x29 ; ')'
STR             R0, [SP,#0xA7C+var_A78]
MOV             R3, #aCgminerC ; "cgminer.c"
LDR             R1, [SP,#0xA7C+timer]
STR             R2, [SP,#0xA7C+timeout]
ADD             R0, SP, #0xA7C+var_9E4+7
STRB            R12, [LR,#-0x9FE]
MOV             R12, LR
MOV             LR, #0
LDR             R2, [SP,#0xA7C+ptr]
STRB            LR, [R12,#-0x9FD]
BL              sub_232EC
MOV             R3, #0x3A ; ':'
MOV             LR, #0
STRB            R3, [SP,#0xA7C+var_9E4+6]
LDR             R3, [SP,#0xA7C+var_A4C]
STRB            LR, [R3,#-0x9D9]

loc_3A56C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A5A8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A5A8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3A610

loc_3A5A8
LDR             R12, [R5,#0x1BC]
MOVW            R2, #:lower16:(asc_4CF84+4) ; ""
LDR             LR, [SP,#0xA7C+var_A44]
MOVT            R2, #:upper16:(asc_4CF84+4) ; ""
ADD             R0, SP, #0xA7C+var_A04
ADD             R1, SP, #0xA7C+var_A18
STR             R2, [SP,#0xA7C+var_A68]
ADD             R3, SP, #0xA7C+var_9C0
STR             R2, [SP,#0xA7C+var_A6C]
MOVW            R2, #:lower16:aRejectedSSDSSS ; "Rejected %s %s %d %s%s %s%s version 0x%"...
STR             R0, [SP,#0xA7C+var_A70]
MOVT            R2, #:upper16:aRejectedSSDSSS ; "Rejected %s %s %d %s%s %s%s version 0x%"...
STR             R1, [SP,#0xA7C+var_A74]
MOV             R0, R11 ; s
STR             R12, [SP,#0xA7C+var_A64]
MOV             R1, #0x800 ; maxlen
LDR             R12, [LR,#8]
STR             R12, [SP,#0xA7C+var_A78]
LDR             R12, [LR,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0xA7C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R11
MOV             R0, #5
BL              sub_1DD60

loc_3A610
ADD             R0, SP, #0xA7C+var_9E4
MOV             R1, R5
BL              sub_33320

loc_3A61C
LDR             R3, [R6,#0x18]
CMP             R3, #0xA
STR             R3, [SP,#0xA7C+var_A4C]
BLE             loc_3A744
LDRB            R3, [R5,#0x119]
CMP             R3, #0
BNE             loc_3A744
MOV             R3, #byte_72E98
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3A744
MOV             R5, #dword_74F24
LDR             R3, [R5]
CMP             R3, #1
BLE             loc_3A744
MOV             R3, #qword_72EF0
LDRD            R0, R1, [R3]
BLX             sub_4AB14
LDR             R3, =dword_681C8
VMOV            D6, R0, R1
VMOV.F64        D7, #3.0
VLDR            D5, [R3,#(dbl_681C0 - 0x681C8)]
VDIV.F64        D6, D6, D5
VMUL.F64        D6, D6, D9
VMUL.F64        D7, D6, D7
VLDR            S13, [SP,#0xA7C+var_A4C]
VCVT.F64.S32    D6, S13
VCMPE.F64       D6, D7
VMRS            APSR_nzcv, FPSCR
BLE             loc_3A744
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A6DC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A6DC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_3A70C

loc_3A6DC
LDR             R3, [SP,#0xA7C+var_A4C]
MOV             R2, #aPoolDRejectedD ; "Pool %d rejected %d sequential shares, "...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
STR             R3, [SP,#0xA7C+timeout]
LDR             R3, [R6]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_3A70C
LDR             R3, [R6,#0x64]
CMP             R3, #1
LDREQ           R3, [R5]
SUBEQ           R3, R3, #1
STREQ           R3, [R5]
MOV             R3, #2
STR             R3, [R6,#0x64]
BL              sub_2FB78
CMP             R6, R0
BNE             loc_3A73C
MOV             R0, #0
BL              sub_31A9C

loc_3A73C
MOV             R3, #0
STR             R3, [R6,#0x18]

loc_3A744
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1CF7
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aParseStratumRe ; "parse_stratum_response"
ADD             R0, R7, #0x24 ; '$'
BL              sub_2A70C
MOV             R0, R7  ; ptr
BL              free
LDR             R3, [SP,#0xA7C+var_A5C]
LDR             R3, [R3,#4]
CMN             R3, #1
BEQ             loc_39718
LDR             R3, [SP,#0xA7C+var_A5C]
DMB             ISH
ADD             R3, R3, #4

loc_3A780
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_3A780
CMP             R2, #0
BNE             loc_39718
LDR             R0, [SP,#0xA7C+var_A5C]
BL              sub_4942C
B               loc_39718

loc_3A7A8
MOVW            R1, #0x1CC2
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2CB60

loc_3A7B4
MOV             R9, R10
LDR             R10, [SP,#0xA7C+var_A44]
MOV             R4, R5

loc_3A7C0               ; mutex
LDR             R0, =stru_68C54
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3AAB4
MOV             R3, #off_67964
STR             R3, [SP,#0xA7C+ptr]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [SP,#0xA7C+var_A4C]
CMP             R3, #0
BEQ             loc_399D4
ADD             R7, R8, #0xD4
MOV             R0, R7  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3AA48
ADD             R5, R8, #0xEC
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_3AA68
MOV             R0, R7  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3AA5C
ADD             R3, R8, #0x730
MOV             R0, R5
MOVW            R2, #0x1CD8
LDR             R1, =aParseStratumRe ; "parse_stratum_response"
VLDR            D8, [R3]
BL              sub_2D708
LDR             R3, [SP,#0xA7C+var_A4C]
LDR             R3, [R3]
CMP             R3, #5
MOV             R3, #byte_72D90
LDRB            R3, [R3]
BEQ             loc_3A954
CMP             R3, #0
BNE             loc_3A88C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A88C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3A8B8

loc_3A88C
ADD             R11, SP, #0xA7C+var_804
MOV             R2, #aRejectedUntrac ; "Rejected untracked stratum share from p"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R3, [R8]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_3A8B8               ; mutex
MOV             R0, #stru_72D94
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3AA74
MOVW            R1, #:lower16:qword_74FB8
MOVW            R12, #:lower16:dbl_74FB0
MOVT            R1, #:upper16:qword_74FB8
MOVT            R12, #:upper16:dbl_74FB0
LDM             R1, {R3,LR}
VLDR            D6, [R8,#0x50]
VLDR            D7, [R12]
ADDS            R2, R3, #1
LDR             R3, [R8,#0x10]
LDR             R0, [R8,#0x14]
ADC             LR, LR, #0
VADD.F64        D6, D6, D8
VADD.F64        D7, D7, D8
ADDS            R3, R3, #1
STR             R2, [R1]
ADC             R2, R0, #0
MOVW            R0, #:lower16:stru_72D94
STR             R3, [R8,#0x10]
VSTR            D6, [R8,#0x50]
MOVT            R0, #:upper16:stru_72D94 ; mutex
STR             R2, [R8,#0x14]
STR             LR, [R1,#(qword_74FB8+4 - 0x74FB8)]
VSTR            D7, [R12]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3AA3C

loc_3A934
LDR             R3, [SP,#0xA7C+ptr]
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [SP,#0xA7C+var_A5C]
LDR             R3, [R3,#4]
CMN             R3, #1
BNE             loc_399E4
B               loc_39B10

loc_3A954
CMP             R3, #0
BNE             loc_3A984
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A984
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3A9B0

loc_3A984
ADD             R11, SP, #0xA7C+var_804
MOV             R2, #aAcceptedUntrac ; "Accepted untracked stratum share from p"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R3, [R8]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_3A9B0               ; mutex
MOV             R0, #stru_72D94
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3AA80
MOVW            R3, #:lower16:qword_72EF0
MOVW            R1, #:lower16:dbl_74F28
MOVT            R3, #:upper16:qword_72EF0
VLDR            D6, [R8,#0x48]
LDR             R2, [R3]
MOVT            R1, #:upper16:dbl_74F28
LDR             R0, [R3,#(qword_72EF0+4 - 0x72EF0)]
VLDR            D7, [R1]
ADDS            R2, R2, #1
VADD.F64        D6, D6, D8
ADC             R0, R0, #0
STR             R2, [R3]
STR             R0, [R3,#(qword_72EF0+4 - 0x72EF0)]
MOVW            R0, #:lower16:stru_72D94
LDR             R3, [R8,#8]
MOVT            R0, #:upper16:stru_72D94 ; mutex
LDR             R2, [R8,#0xC]
VADD.F64        D7, D7, D8
ADDS            R3, R3, #1
VSTR            D6, [R8,#0x48]
STR             R3, [R8,#8]
ADC             R3, R2, #0
STR             R3, [R8,#0xC]
VSTR            D7, [R1]
BL              pthread_mutex_unlock
CMP             R0, #0
BEQ             loc_3A934
MOVW            R1, #0x1CE5
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2CBBC

loc_3AA3C
MOVW            R1, #0x1CF0
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2CBBC

loc_3AA48
MOVW            R1, #0x1CD6
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2CB60

loc_3AA54
ADD             R11, SP, #0xA7C+var_804
B               loc_3A170

loc_3AA5C
MOVW            R1, #0x1CD6
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2CBBC

loc_3AA68
MOVW            R1, #0x1CD6
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2DCC0

loc_3AA74
MOVW            R1, #0x1CEB
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2CB60

loc_3AA80
MOVW            R1, #0x1CE0
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2CB60

loc_3AA8C
LDR             R2, [R7,#8]
CMP             R2, #0
BEQ             loc_3AAC0
LDR             R1, [R5,#0x10]
ADD             R6, R1, R6
CMP             R7, R6
BEQ             loc_3AAE4

loc_3AAA8
LDR             R3, [SP,#0xA7C+var_A58]
STR             R2, [R3,#(dword_68C6C - 0x686E8)]
B               loc_3A000

loc_3AAB4
MOVW            R1, #0x1CCA
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2CBBC

loc_3AAC0               ; ptr
LDR             R0, [SP,#0xA7C+ptr]
STR             R2, [SP,#0xA7C+var_A44]
BL              free
LDR             R0, [R11] ; ptr
BL              free
LDR             R3, [SP,#0xA7C+var_A58]
LDR             R2, [SP,#0xA7C+var_A44]
STR             R2, [R3,#(dword_68C6C - 0x686E8)]
B               loc_3A09C

loc_3AAE4
LDR             R2, [SP,#0xA7C+var_A38]
ADD             R3, R3, R2
STR             R3, [R5,#0x10]
LDR             R3, [R7,#4]
CMP             R3, #0
LDREQ           R2, [R7,#8]
BEQ             loc_3AAA8
LDR             R5, [R11]
B               loc_39FF0

loc_3AB08
LDRB            R3, [R5,#0x11C]
LDR             R2, [SP,#0xA7C+timer]
CMP             R2, #0
MOVEQ           R3, #0
ANDNE           R3, R3, #1
CMP             R3, #0
BEQ             loc_3A56C
LDR             R1, [R2]
CMP             R1, #1
BEQ             loc_3AB98
CMP             R1, #2
BNE             loc_3A56C
LDR             R0, [SP,#0xA7C+timer]

loc_3AB3C
BL              sub_49028
MOVW            R2, #:lower16:(aSExecListenFai+0x18) ; " (%s)"
MOV             R3, R0
MOV             R1, #0x1F ; maxlen
ADD             R0, SP, #0xA7C+var_A04 ; s
MOVT            R2, #:upper16:(aSExecListenFai+0x18) ; format
BL              snprintf
B               loc_3A56C

loc_3AB5C
BL              __errno_location
LDR             R12, =aShareResult ; "share_result"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R1, #0xE4F

loc_3AB70
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...

loc_3AB7C
STR             R1, [SP,#0xA7C+var_A74]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
B               loc_39D6C

loc_3AB98
MOV             R0, R2
BL              sub_48E7C
SUBS            R3, R0, #0
BEQ             loc_3A56C
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_3A56C
B               loc_3AB3C

loc_3ABB8
BL              __errno_location
LDR             R12, =aShareResult ; "share_result"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R1, #0xE47
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R3,R12}
B               loc_3AB7C

loc_3ABDC               ; mutex
MOV             R0, #stru_72D94
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3B02C
LDR             R12, [SP,#0xA7C+var_A44]
MOV             R2, #qword_72EF0
LDR             R3, [R2]
LDR             R0, [R12,#0x24]
LDR             R1, [R2,#(qword_72EF0+4 - 0x72EF0)]
ADDS            R3, R3, #1
ADD             R0, R0, #1
STR             R3, [R2]
ADC             R1, R1, #0
STR             R0, [R12,#0x24]
STR             R1, [R2,#(qword_72EF0+4 - 0x72EF0)]
MOVW            R1, #:lower16:dbl_74F28
LDR             R3, [R6,#8]
MOVT            R1, #:upper16:dbl_74F28
LDR             R2, [R6,#0xC]
MOVW            R0, #:lower16:stru_72D94
VLDR            D5, [R1]
MOVT            R0, #:upper16:stru_72D94 ; mutex
ADDS            R3, R3, #1
STR             R1, [SP,#0xA7C+var_A4C]
ADC             R2, R2, #0
STR             R3, [R6,#8]
STR             R2, [R6,#0xC]
VLDR            D6, [R12,#0xC8]
VLDR            D7, [R5,#0x178]
VADD.F64        D7, D6, D7
VSTR            D7, [R12,#0xC8]
VLDR            D7, [R5,#0x178]
VLDR            D6, [R6,#0x48]
VADD.F64        D5, D5, D7
VADD.F64        D7, D6, D7
VSTR            D5, [R1]
VSTR            D7, [R6,#0x48]
BL              pthread_mutex_unlock
SUBS            R3, R0, #0
BNE             loc_3B014
STR             R3, [SP,#0xA7C+timer]
LDR             R3, [SP,#0xA7C+ptr]
LDR             R2, [R3] ; sub_1EAA0
BLX             R2      ; sub_1EAA0
LDR             R3, [SP,#0xA7C+timer]
LDR             R2, [R6]
STR             R3, [R6,#0x18]
MOV             R0, R3  ; timer
LDR             R3, [SP,#0xA7C+var_A44]
STR             R2, [R3,#0xD8]
BL              time
LDR             R3, [SP,#0xA7C+var_A38]
LDR             R2, [SP,#0xA7C+var_A44]
LDRB            R3, [R3]
STR             R0, [R2,#0xDC]
VLDR            D7, [R5,#0x178]
CMP             R3, #0
VSTR            D7, [R2,#0xE0]
STR             R0, [R6,#0x160]
ADD             R3, R5, #0x178
LDRD            R2, R3, [R3]
STR             R2, [R6,#0x168]
STR             R3, [R6,#0x16C]
BEQ             loc_3AD54
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3AD20
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3AD20
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3AD54

loc_3AD20
MOVW            R12, #:lower16:aProofOfWorkRes_0 ; "PROOF OF WORK RESULT: true (yay!!!)"
MOV             LR, R11
MOVT            R12, #:upper16:aProofOfWorkRes_0 ; "PROOF OF WORK RESULT: true (yay!!!)"
LDM             R12!, {R0-R3} ; "PROOF OF WORK RESULT: true (yay!!!)"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "SULT: true (yay!!!)"
LDR             R12, [R12] ; "!!)"
STM             LR!, {R0-R3}
MOV             R2, #0
MOV             R1, R11
MOV             R0, #7
STR             R12, [LR]
BL              sub_1DD60

loc_3AD54
MOV             R3, #byte_76234
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3AE38
MOV             R3, #byte_761D0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3AE38
MOVW            R3, #:lower16:dword_72E60
LDR             R2, [SP,#0xA7C+var_A38]
MOVT            R3, #:upper16:dword_72E60
LDR             R3, [R3]
LDRB            R2, [R2]
CMP             R3, #1
BLE             loc_3AEF8
CMP             R2, #0
BEQ             loc_3AE38
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3ADDC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3ADDC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3AE38

loc_3ADDC
MOVW            R1, #:lower16:(asc_4CF84+4) ; ""
LDR             LR, [SP,#0xA7C+var_A44]
MOVT            R1, #:upper16:(asc_4CF84+4) ; ""
MOVW            R2, #:lower16:aAcceptedSSDPoo ; "Accepted %s %s %d pool %d %s%s"
STR             R1, [SP,#0xA7C+var_A6C]
MOVT            R2, #:upper16:aAcceptedSSDPoo ; "Accepted %s %s %d pool %d %s%s"
STR             R1, [SP,#0xA7C+var_A70]
ADD             R3, SP, #0xA7C+var_9C0
LDR             R12, [R5,#0x104]
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R12, [R12]
STR             R12, [SP,#0xA7C+var_A74]
LDR             R12, [LR,#8]
STR             R12, [SP,#0xA7C+var_A78]
LDR             R12, [LR,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0xA7C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R11
MOV             R0, #7
BL              sub_1DD60

loc_3AE38
MOVW            R0, #:lower16:aAccept_0 ; "accept"
MOV             R1, R5
MOVT            R0, #:upper16:aAccept_0 ; "accept"
BL              sub_33320
LDR             R3, [SP,#0xA7C+var_A58]
LDR             R3, [R3,#(dword_68B60 - 0x686E8)]
CMP             R3, #0
BEQ             loc_3AED8
LDR             R2, [SP,#0xA7C+var_A4C]
VMOV            S15, R3
VLDR            D6, [R2]
VCVT.F64.S32    D7, S15
VCMPE.F64       D7, D6
VMRS            APSR_nzcv, FPSCR
BHI             loc_3AED8
MOV             R2, #byte_72D90
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3AEB0
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3AEB0
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #3
BLE             loc_3AED4

loc_3AEB0
MOVW            R2, #:lower16:aSuccessfullyMi ; "Successfully mined %d accepted shares a"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSuccessfullyMi ; "Successfully mined %d accepted shares a"...
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_3AED4
BL              sub_2C2B0

loc_3AED8
LDR             R3, [R6,#0x64]
CMP             R3, #2
BEQ             loc_3AF90

loc_3AEE4
LDRB            R3, [R5,#0x11B]
CMP             R3, #0
BEQ             loc_3A744
BL              sub_2C568
B               loc_3A744

loc_3AEF8
CMP             R2, #0
BEQ             loc_3AE38
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3AF3C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3AF3C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3AE38

loc_3AF3C
LDR             LR, [SP,#0xA7C+var_A44]
MOV             R1, #(asc_4CF84+4) ; ""
MOVW            R2, #:lower16:aAcceptedSSDSS ; "Accepted %s %s %d %s%s"
STR             R1, [SP,#0xA7C+var_A70]
ADD             R3, SP, #0xA7C+var_9C0
STR             R1, [SP,#0xA7C+var_A74]
MOVT            R2, #:upper16:aAcceptedSSDSS ; "Accepted %s %s %d %s%s"
LDR             R12, [LR,#8]
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
STR             R12, [SP,#0xA7C+var_A78]
LDR             R12, [LR,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0xA7C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R11
MOV             R0, #7
BL              sub_1DD60
B               loc_3AE38

loc_3AF90
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3AFCC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3AFCC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_3AFF4

loc_3AFCC
MOVW            R2, #:lower16:aRejectingPoolD ; "Rejecting pool %d now accepting shares,"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aRejectingPoolD ; "Rejecting pool %d now accepting shares,"...
LDR             R3, [R6]
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #4
BL              sub_1DD60

loc_3AFF4
LDR             R3, [R6,#0x64]
ADD             R0, R6, #0x64 ; 'd'
CMP             R3, #1
BEQ             loc_3B008
BL              sub_28F90

loc_3B008
MOV             R0, #0
BL              sub_31A9C
B               loc_3AEE4

loc_3B014
BL              __errno_location
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
LDR             R12, =aShareResult ; "share_result"
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R1, #0xE12
B               loc_3AB70

loc_3B02C
BL              __errno_location
LDR             R12, =aShareResult ; "share_result"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R1, #0xE08
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R3,R12}
B               loc_3AB7C
; End of function sub_395C4

off_3B050 DCD aParseStratumRe ; "parse_stratum_response"
off_3B054 DCD aShareResult ; "share_result"



; int __fastcall sub_3B058(int)
sub_3B058

var_81C= -0x81C
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804

MOVW            R3, #:lower16:byte_686E1
PUSH            {R4-R11,LR}
MOVT            R3, #:upper16:byte_686E1
SUB             SP, SP, #0x820
SUB             SP, SP, #4
MOV             R6, R0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3B0E4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3B0B8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3B0B8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3B0E4

loc_3B0B8
LDR             R3, [R6,#0x104]
MOV             R2, #aPushingWorkFro ; "Pushing work from pool %d to hash queue"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x824+s ; s
LDR             R3, [R3]
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_3B0E4
MOVW            R9, #:lower16:byte_686E8
MOV             R0, R6
MOVT            R9, #:upper16:byte_686E8
LDR             R3, [R9,#(dword_68C9C - 0x686E8)]
STR             R3, [R6,#0x150]
BL              sub_37C80
LDR             R2, [R6,#0x104]
LDR             R0, [R9,#(dword_68B20 - 0x686E8)] ; mutex
LDR             R3, [R2,#0x44]
ADD             R3, R3, #1
STR             R3, [R2,#0x44]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3B7E8
LDRB            R3, [R6,#0x111]
CMP             R3, #0
BEQ             loc_3B700

loc_3B128
MOV             R3, #dword_74F60
LDR             R0, [R3]
STR             R3, [SP,#0x824+var_80C]
LDRB            R2, [R0,#8]
CMP             R2, #0
BNE             loc_3B6A8
LDRB            R1, [R6,#0x154]
MOVW            R3, #0x410D
LDRB            R12, [R6,#0x157]
MOVT            R3, #0x112
LDRB            LR, [R6,#0x156]
MOVW            R0, #0xF76D
ADD             R3, R1, R3
LDRB            R1, [R6,#0x155]
MOVT            R0, #7
LDR             R4, [R9,#(dword_68C04 - 0x686E8)]
ADD             R12, R3, R12,LSL#24
MOV             R3, #0x9F49BAC6
ADD             R12, R12, LR,LSL#16
CMP             R4, #0
ADD             R12, R12, R1,LSL#8
MOV             R1, #0xFEEDBEF3
EOR             R0, R0, R12
ADD             R12, R6, #0x154
SUB             R3, R3, R0
SUB             R1, R1, R0
EOR             R3, R3, R0,LSL#8
STR             R12, [R6,#0x16C]
MOV             R12, #4
SUB             R1, R1, R3
SUB             R0, R0, R3
EOR             R1, R1, R3,LSR#13
STR             R12, [R6,#0x170]
SUB             R0, R0, R1
SUB             R3, R3, R1
EOR             R0, R0, R1,LSR#12
SUB             R3, R3, R0
SUB             R1, R1, R0
EOR             R3, R3, R0,LSL#16
SUB             R1, R1, R3
SUB             R0, R0, R3
EOR             R1, R1, R3,LSR#5
SUB             R0, R0, R1
SUB             R3, R3, R1
EOR             R0, R0, R1,LSR#3
SUB             R3, R3, R0
SUB             R5, R1, R0
EOR             R3, R3, R0,LSL#10
SUB             R5, R5, R3
EOR             R5, R5, R3,LSR#15
STR             R5, [R6,#0x174]
BEQ             loc_3B718
LDR             R3, [R4,#0x158]
ADD             R7, R6, #0x158
STR             R2, [R6,#0x160]
STR             R3, [R6,#0x158]
LDR             R2, [R4,#0x158]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R6,#0x15C]
LDR             R3, [R4,#0x158]
LDR             R3, [R3,#0x10]
STR             R6, [R3,#8]
LDR             R3, [R4,#0x158]
STR             R7, [R3,#0x10]
LDR             R8, [R4,#0x158]

loc_3B240
LDR             R3, [R8,#0xC]
MOV             R1, #0
ADD             R3, R3, #1
STR             R3, [R8,#0xC]
LDR             R2, [R4,#0x158]
LDRD            R2, R3, [R2]
SUB             R3, R3, #1
AND             R3, R3, R5
ADD             R3, R3, R3,LSL#1
MOV             R3, R3,LSL#2
ADD             R2, R2, R3
LDR             R0, [R2,#4]
ADD             R0, R0, #1
STR             R0, [R2,#4]
LDR             R2, [R4,#0x158]
LDR             R2, [R2]
LDR             R2, [R2,R3]
STR             R1, [R6,#0x164]
STR             R2, [R6,#0x168]
LDR             R2, [R4,#0x158]
LDR             R2, [R2]
LDR             R1, [R2,R3]
ADD             R2, R2, R3
CMP             R1, #0
STRNE           R7, [R1,#0xC]
LDRNE           R2, [R4,#0x158]
LDRNE           R2, [R2]
ADDNE           R2, R2, R3
STR             R7, [R2]
LDR             R4, [R9,#(dword_68C04 - 0x686E8)]
LDR             R2, [R4,#0x158]
LDR             R2, [R2]
ADD             R2, R2, R3
LDRD            R2, R3, [R2,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_3B490
LDR             R5, [R6,#0x158]
LDR             R3, [R5,#0x24]
CMP             R3, #1
BEQ             loc_3B490
LDR             R0, [R5,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R7, R0, #0
BEQ             loc_3B818
LDR             R3, [R5,#4]
MOV             R10, #0
LDR             R1, [R5,#0xC]
LDR             R2, [R5,#8]
MOV             R3, R3,LSL#1
ADD             R2, R2, #1
SUB             R3, R3, #1
TST             R3, R1
MOVNE           R3, #1
MOVEQ           R3, R10
ADD             R3, R3, R1,LSR R2
STR             R3, [R5,#0x18]
LDR             R3, [R6,#0x158]
STR             R10, [R3,#0x1C]
LDR             R0, [R6,#0x158]
LDR             R3, [R0,#4]
CMP             R3, R10
BEQ             loc_3B414
MOV             R11, R10
STR             R10, [SP,#0x824+var_810]
STR             R9, [SP,#0x824+var_808]

loc_3B358
LDR             R2, [R0]
LDR             R5, [R2,R10]
CMP             R5, #0
BEQ             loc_3B3F8
MOV             R4, R3
B               loc_3B378

loc_3B370
LDR             R4, [R0,#4]
MOV             R5, R8

loc_3B378
LDR             R3, [R5,#0x1C]
MOV             R4, R4,LSL#1
LDR             R8, [R5,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
ADD             R9, R7, R4,LSL#2
LDR             R3, [R9,#4]
ADD             R3, R3, #1
STR             R3, [R9,#4]
LDR             R2, [R0,#0x18]
CMP             R3, R2
BLS             loc_3B3CC
LDR             R3, [R0,#0x1C]
ADD             R3, R3, #1
STR             R3, [R0,#0x1C]
LDR             R3, [R6,#0x158]
LDR             R0, [R9,#4]
LDR             R1, [R3,#0x18]
BLX             sub_4A2D0
STR             R0, [R9,#8]

loc_3B3CC
STR             R11, [R5,#0xC]
LDR             R3, [R7,R4,LSL#2]
STR             R3, [R5,#0x10]
LDR             R3, [R7,R4,LSL#2]
CMP             R3, #0
STRNE           R5, [R3,#0xC]
CMP             R8, #0
STR             R5, [R7,R4,LSL#2]
LDR             R0, [R6,#0x158]
BNE             loc_3B370
LDR             R3, [R0,#4]

loc_3B3F8
LDR             R2, [SP,#0x824+var_810]
ADD             R10, R10, #0xC
ADD             R2, R2, #1
CMP             R2, R3
STR             R2, [SP,#0x824+var_810]
BCC             loc_3B358

loc_3B410
LDR             R9, [SP,#0x824+var_808]

loc_3B414               ; ptr
LDR             R0, [R0]
BL              free
LDR             R2, [R6,#0x158]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R6,#0x158]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R6,#0x158]
STR             R7, [R3]
LDR             R3, [R6,#0x158]
LDR             R4, [R9,#(dword_68C04 - 0x686E8)]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R6,#0x158]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]
CMP             R4, #0
LDR             R3, [SP,#0x824+var_80C]
LDR             R0, [R3]
BEQ             loc_3B6A8
B               loc_3B498

loc_3B490
LDR             R3, [SP,#0x824+var_80C]
LDR             R0, [R3]

loc_3B498
ADD             R6, R4, #0x158
MOV             R5, #1

loc_3B4A0
MOV             R3, R6
MOV             R6, #0
MOV             R1, R6
MOV             R7, R6

loc_3B4B0
CMP             R5, #0
ADD             R7, R7, #1
BEQ             loc_3B6F0
LDR             R12, [R3,#8]
CMP             R12, #0
BEQ             loc_3B6E4
LDR             R2, [R4,#0x158]
LDR             LR, [R2,#0x14]
ADDS            R12, R12, LR
BEQ             loc_3B6E4
MOV             R2, #1
B               loc_3B4F8

loc_3B4E0
LDR             R12, [R12,#8]
ADD             R2, R2, #1
CMP             R12, #0
BEQ             loc_3B6DC
ADDS            R12, R12, LR
BEQ             loc_3B6DC

loc_3B4F8
CMP             R2, R5
BNE             loc_3B4E0
MOV             LR, R2

loc_3B504
MOV             R10, R3
MOV             R3, R12

loc_3B50C
CMP             R2, #0
BNE             loc_3B58C

loc_3B514
CMP             LR, #0
CMPNE           R3, #0
BEQ             loc_3B668
LDR             R12, [R3,#8]
CMP             R12, #0
LDRNE           R8, [R4,#0x158]
MOVEQ           R12, R2
LDRNE           R8, [R8,#0x14]
ADDNE           R12, R12, R8

loc_3B538
CMP             R1, #0
SUB             LR, LR, #1
MOVEQ           R1, R3
MOVEQ           R3, R12
BEQ             loc_3B5FC
LDR             R8, [R4,#0x158]
CMP             R3, #0
LDR             R8, [R8,#0x14]
SUB             R8, R3, R8
STR             R8, [R1,#8]
MOVEQ           R1, R3
MOVEQ           R3, R12
BEQ             loc_3B50C

loc_3B56C
LDR             R8, [R4,#0x158]
LDR             R8, [R8,#0x14]
SUB             R8, R1, R8
MOV             R1, R3
MOV             R3, R12

loc_3B580
CMP             R2, #0
STR             R8, [R1,#4]
BEQ             loc_3B514

loc_3B58C
CMP             R3, #0
CMPNE           LR, #0
BNE             loc_3B60C
CMP             R10, #0
BEQ             loc_3B644
LDR             R8, [R10,#8]
CMP             R8, #0
LDRNE           R12, [R4,#0x158]
LDRNE           R12, [R12,#0x14]
ADDNE           R8, R8, R12

loc_3B5B4
CMP             R1, #0
SUB             R2, R2, #1
BEQ             loc_3B5F4
CMP             R10, #0
STREQ           R10, [R1,#8]
MOVEQ           R1, R10
MOVEQ           R10, R8
BEQ             loc_3B50C
LDR             R11, [R4,#0x158]
MOV             R12, R3
MOV             R3, R10
LDR             R11, [R11,#0x14]
SUB             R11, R10, R11
MOV             R10, R8
STR             R11, [R1,#8]
B               loc_3B56C

loc_3B5F4
MOV             R1, R10
MOV             R10, R8

loc_3B5FC
SUBS            R6, R1, #0
MOVNE           R8, #0
BNE             loc_3B580
B               loc_3B50C

loc_3B60C
LDR             R12, [R4,#0x158]
LDR             R8, [R12,#0x14]
RSB             R11, R8, #0
ADD             R12, R10, R11
ADD             R11, R3, R11
LDR             R12, [R12,#0x108]
LDR             R11, [R11,#0x108]
SUB             R11, R12, R11
CMP             R11, #0
BLE             loc_3B64C
LDR             R12, [R3,#8]
CMP             R12, #0
ADDNE           R12, R12, R8
B               loc_3B538

loc_3B644
MOV             R8, R10
B               loc_3B5B4

loc_3B64C
CMP             R10, #0
BEQ             loc_3B644
LDR             R12, [R10,#8]
CMP             R12, #0
ADDNE           R8, R12, R8
MOVEQ           R8, R12
B               loc_3B5B4

loc_3B668
CMP             R3, #0
BNE             loc_3B4B0
CMP             R1, #0
STRNE           R3, [R1,#8]
CMP             R7, #1
BLS             loc_3B690
CMP             R6, #0
MOV             R5, R5,LSL#1
BNE             loc_3B4A0
MOV             R1, R6

loc_3B690
LDR             R3, [R4,#0x158]
STR             R1, [R3,#0x10]
LDR             R3, [R4,#0x158]
LDR             R3, [R3,#0x14]
SUB             R6, R6, R3
STR             R6, [R9,#(dword_68C04 - 0x686E8)]

loc_3B6A8               ; cond
ADD             R0, R0, #0x28 ; '('
BL              pthread_cond_broadcast
LDR             R0, [R9,#(dword_68B20 - 0x686E8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3B798
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_3B6DC
MOV             LR, R5
B               loc_3B504

loc_3B6E4
MOV             LR, R5
MOV             R2, #1
B               loc_3B504

loc_3B6F0
MOV             R12, R3
MOV             LR, R5
MOV             R2, R5
B               loc_3B504

loc_3B700
LDR             R3, [R6,#0x114]
CMP             R3, #0
LDRNE           R3, [R9,#(dword_68C78 - 0x686E8)]
ADDNE           R3, R3, #1
STRNE           R3, [R9,#(dword_68C78 - 0x686E8)]
B               loc_3B128

loc_3B718
STR             R4, [R6,#0x160]
MOV             R0, #0x2C ; ',' ; size
STR             R4, [R6,#0x15C]
STR             R6, [R9,#(dword_68C04 - 0x686E8)]
BL              malloc
CMP             R0, #0
MOV             R8, R0
STR             R0, [R6,#0x158]
BEQ             loc_3B818
MOV             R10, #0x20 ; ' '
MOV             R1, R4  ; c
MOV             R2, R10 ; n
ADD             R0, R0, #0xC ; s
BL              memset
ADD             R7, R6, #0x158
MOV             R2, #5
MOV             R3, #0x158
STR             R10, [R8,#4]
STR             R7, [R8,#0x10]
MOV             R1, #1  ; size
STR             R2, [R8,#8]
MOV             R0, #0x180 ; nmemb
STR             R3, [R8,#0x14]
BL              calloc
CMP             R0, #0
STR             R0, [R8]
BEQ             loc_3B818
MOVW            R3, #0x1FE1
MOV             R4, R6
MOVT            R3, #0xA011
STR             R3, [R8,#0x28]
B               loc_3B240

loc_3B798
BL              __errno_location
LDR             LR, =aHashPush ; "hash_push"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x824+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x16E2
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x824+var_81C]

loc_3B7C4               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_3B7E8
BL              __errno_location
LDR             LR, =aHashPush ; "hash_push"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x16D0
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x824+s
STR             R12, [SP,#0x824+var_81C]
B               loc_3B7C4

loc_3B818               ; status
MOV             R0, #0xFFFFFFFF
BL              exit
; End of function sub_3B058

off_3B820 DCD aHashPush ; "hash_push"



; void __fastcall sub_3B824(__time_t *)
sub_3B824

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
arg= -0x80C
var_804= -0x804
s= -0x800

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x820
MOV             R3, R0
STR             R0, [SP,#0x820+arg]
ADD             R0, R0, #0x1B0
LDR             R4, [R3,#0x104]
BL              sub_206A0
MOV             R3, #byte_686E8
LDRB            R3, [R3,#(byte_68C50 - 0x686E8)]
CMP             R3, #0
BEQ             loc_3B988
LDR             R3, [SP,#0x820+arg]
LDR             R0, [R3,#0x100]
BL              sub_2F688
LDR             R5, [R0,#0x24]
MOV             R0, #stru_72D94 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3BD54
MOVW            R3, #:lower16:qword_72EF0
LDR             R0, [R5,#0x24]
MOVT            R3, #:upper16:qword_72EF0
LDR             R12, [SP,#0x820+arg]
LDR             R2, [R3]
LDR             R1, [R3,#(qword_72EF0+4 - 0x72EF0)]
ADD             R0, R0, #1
STR             R0, [R5,#0x24]
MOVW            R0, #:lower16:stru_72D94
ADDS            R2, R2, #1
MOVT            R0, #:upper16:stru_72D94 ; mutex
ADC             R1, R1, #0
STR             R2, [R3]
STR             R1, [R3,#(qword_72EF0+4 - 0x72EF0)]
MOVW            R2, #:lower16:dbl_74F28
LDR             R3, [R4,#8]
MOVT            R2, #:upper16:dbl_74F28
LDR             R1, [R4,#0xC]
VLDR            D6, [R2]
ADDS            R3, R3, #1
ADC             R1, R1, #0
STR             R3, [R4,#8]
STR             R1, [R4,#0xC]
VLDR            D5, [R12,#0x178]
VLDR            D7, [R5,#0xC8]
VADD.F64        D7, D7, D5
VSTR            D7, [R5,#0xC8]
VLDR            D5, [R12,#0x178]
VLDR            D7, [R4,#0x48]
VADD.F64        D6, D6, D5
VADD.F64        D7, D7, D5
VSTR            D6, [R2]
VSTR            D7, [R4,#0x48]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3BEB8
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3B940
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3BCB8

loc_3B940
LDR             R1, [SP,#0x820+arg]
MOVW            R2, #:lower16:aAcceptedSDBenc ; "Accepted %s %d benchmark share nonce %0"...
LDR             R3, [R5,#4]
MOVT            R2, #:upper16:aAcceptedSDBenc ; "Accepted %s %d benchmark share nonce %0"...
ADD             R0, SP, #0x820+s ; s
LDR             R12, [R1,#0x4C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R3,#8]
STR             R12, [SP,#0x820+var_81C]
LDR             R12, [R5,#8]
STR             R12, [SP,#0x820+var_820]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_3B980
ADD             SP, SP, #0x820
POP             {R4-R6,PC}

loc_3B988
MOV             R1, #1
LDR             R0, [SP,#0x820+arg]
BL              sub_33D04
CMP             R0, #0
BNE             loc_3BA40
LDR             R3, [SP,#0x820+arg]

loc_3B9A0
LDRB            R2, [R3,#0x11C]
CMP             R2, #0
BEQ             loc_3BBD8
MOV             R2, #byte_686E1
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_3BB00
MOV             R6, #byte_72D90
LDRB            R2, [R6]
CMP             R2, #0
BNE             loc_3BAD4
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3BAD4
MOV             R2, #dword_67840
LDR             R1, [R2]
CMP             R1, #6
BGT             loc_3BAD4
LDR             R0, [R4,#0x2E8]
CMP             R0, #0
BNE             loc_3BB10

loc_3BA08
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_3BB48
LDR             R3, [R4,#0x2E8]
ADD             R5, SP, #0x820+s
CMP             R3, #0
BEQ             loc_3BF64

loc_3BA24
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
SUB             R0, R5, #0xC
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2273
LDR             R2, =aSubmitWorkAsyn ; "submit_work_async"
BL              sub_2A70C
B               loc_3B980

loc_3BA40
MOV             R3, #off_67A68 ; "--version-file"
LDRB            R3, [R3,#(byte_681FD - 0x67A68)]
CMP             R3, #0
BEQ             loc_3BCD0
MOV             R3, #byte_686E1
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3BD44
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BAA4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BAA4
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_3BD44

loc_3BAA4
ADD             R5, SP, #0x820+s
MOVW            R2, #:lower16:aPoolDStaleShar ; "Pool %d stale share detected, submittin"...
MOV             R0, R5  ; s
MOVT            R2, #:upper16:aPoolDStaleShar ; "Pool %d stale share detected, submittin"...
LDR             R3, [R4]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_3BD44

loc_3BAD4
ADD             R5, SP, #0x820+s
MOV             R2, #aPushingPoolDWo ; "Pushing pool %d work to stratum queue"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
LDR             R3, [R4]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_3BB00
LDR             R0, [R4,#0x2E8]
CMP             R0, #0
LDRNE           R3, [SP,#0x820+arg]
BEQ             loc_3BB20

loc_3BB10
MOV             R1, R3
BL              sub_200D0
CMP             R0, #0
BNE             loc_3B980

loc_3BB20
MOV             R6, #byte_72D90
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_3BB48
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3BEE8

loc_3BB48
MOVW            R12, #:lower16:aDiscardingWork ; "Discarding work from removed pool"
ADD             R5, SP, #0x820+s
MOVT            R12, #:upper16:aDiscardingWork ; "Discarding work from removed pool"
MOV             LR, R5
LDM             R12!, {R0-R3} ; "Discarding work from removed pool"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "from removed pool"
LDR             R12, [R12] ; "l"
STM             LR!, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
STRH            R12, [LR]
BL              sub_1DD60
LDR             R3, [R4,#0x2E8]
CMP             R3, #0
BNE             loc_3BA24
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_3BBAC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3BF5C

loc_3BBAC
MOVW            R2, #:lower16:aPushingPoolDWo ; "Pushing pool %d work to stratum queue"
LDR             R3, [R4]
MOVT            R2, #:upper16:aPushingPoolDWo ; "Pushing pool %d work to stratum queue"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #5
BL              sub_1DD60
B               loc_3BA24

loc_3BBD8
MOV             R2, #byte_72D90
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3BC18
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3BC18
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #4
ADDLE           R5, SP, #0x820+s
BLE             loc_3BC5C

loc_3BC18
MOVW            LR, #:lower16:aPushingSubmitW ; "Pushing submit work to work thread"
ADD             R5, SP, #0x820+s
MOVT            LR, #:upper16:aPushingSubmitW ; "Pushing submit work to work thread"
MOV             R12, R5
LDM             LR!, {R0-R3} ; "Pushing submit work to work thread"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "ork to work thread"
LDR             LR, [LR] ; "ad"
STM             R12!, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #5
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_1DD60
LDR             R3, [SP,#0x820+arg] ; arg

loc_3BC5C
MOVW            R2, #:lower16:sub_28E18
MOV             R1, #0  ; attr
MOVT            R2, #:upper16:sub_28E18 ; start_routine
SUB             R0, R5, #4 ; newthread
BL              pthread_create
CMP             R0, #0
BEQ             loc_3B980
MOVW            R12, #:lower16:aFailedToCreate_1 ; "Failed to create submit_work_thread"
MOV             LR, R5
MOVT            R12, #:upper16:aFailedToCreate_1 ; "Failed to create submit_work_thread"
LDM             R12!, {R0-R3} ; "Failed to create submit_work_thread"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " submit_work_thread"
LDR             R12, [R12] ; "ead"
STM             LR!, {R0-R3}
MOV             R1, R5
MOV             R0, #3
MOV             R2, #1
STR             R12, [LR]
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_3BCB8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3B980
B               loc_3B940

loc_3BCD0
LDRB            R2, [R4,#0x68]
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R2, #0
BEQ             loc_3BDA4
CMP             R3, #0
BNE             loc_3BD18
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BD18
MOV             R2, #dword_67840
LDR             R3, [R2]
CMP             R3, #4
BLE             loc_3BD44

loc_3BD18
ADD             R5, SP, #0x820+s
MOV             R2, #aPoolDStaleShar_0 ; "Pool %d stale share detected, submittin"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
LDR             R3, [R4]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_3BD44
LDR             R3, [SP,#0x820+arg]
MOV             R2, #1
STRB            R2, [R3,#0x119]
B               loc_3B9A0

loc_3BD54
BL              __errno_location
LDR             LR, =aSubmitWorkAsyn ; "submit_work_async"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x820+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R12, #0x2240
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x820+var_818]

loc_3BD80               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x820+s

loc_3BD8C
MOV             R0, #3
MOV             R2, #1
BL              sub_1DD60
MOV             R1, #1
MOV             R0, R1
BL              sub_2C230

loc_3BDA4
CMP             R3, #0
BNE             loc_3BDD8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BDD8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
ADDLE           R5, SP, #0x820+s
BLE             loc_3BE04

loc_3BDD8
ADD             R5, SP, #0x820+s
MOV             R2, #aPoolDStaleShar_1 ; "Pool %d stale share detected, discardin"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
LDR             R3, [R4]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_3BE04
MOVW            R0, #:lower16:aDiscard ; "discard"
LDR             R1, [SP,#0x820+arg]
MOVT            R0, #:upper16:aDiscard ; "discard"
BL              sub_33320
MOV             R0, #stru_72D94 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3BEF4
LDR             R2, [R4,#0x78]
MOVW            R1, #:lower16:dbl_72EF8
LDR             R0, [SP,#0x820+arg]
MOVT            R1, #:upper16:dbl_72EF8
VLDR            D6, [R4,#0x58]
MOVW            R3, #:lower16:qword_762C8
ADD             R2, R2, #1
VLDR            D7, [R1]
STR             R2, [R4,#0x78]
MOVT            R3, #:upper16:qword_762C8
VLDR            D5, [R0,#0x178]
MOVW            R0, #:lower16:stru_72D94
LDR             R2, [R3]
MOVT            R0, #:upper16:stru_72D94 ; mutex
LDR             R12, [R3,#(qword_762C8+4 - 0x762C8)]
VADD.F64        D6, D6, D5
ADDS            R2, R2, #1
VADD.F64        D7, D7, D5
ADC             R12, R12, #0
STM             R3, {R2,R12}
VSTR            D6, [R4,#0x58]
VSTR            D7, [R1]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3BF34
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
SUB             R0, R5, #0xC
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2265
LDR             R2, =aSubmitWorkAsyn ; "submit_work_async"
BL              sub_2A70C
B               loc_3B980

loc_3BEB8
BL              __errno_location
LDR             LR, =aSubmitWorkAsyn ; "submit_work_async"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2247
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x820+s
STR             R12, [SP,#0x820+var_818]
B               loc_3BD80

loc_3BEE8
MOV             R2, #dword_67840
B               loc_3BA08

loc_3BEF4
BL              __errno_location
LDR             R12, =aSubmitWorkAsyn ; "submit_work_async"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R0, #0x225C
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0x820+var_820]

loc_3BF18
STR             R0, [SP,#0x820+var_818]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x820+var_81C]
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
B               loc_3BD8C

loc_3BF34
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
LDR             R12, =aSubmitWorkAsyn ; "submit_work_async"
MOVW            R0, #0x2263
STR             R1, [SP,#0x820+var_820]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_3BF18

loc_3BF5C
MOV             R2, #dword_67840

loc_3BF64
LDR             R3, [R2]
CMP             R3, #4
BGT             loc_3BBAC
B               loc_3BA24
; End of function sub_3B824

off_3BF74 DCD aSubmitWorkAsyn ; "submit_work_async"



; int __fastcall sub_3BF78(int, int)
sub_3BF78

var_808= -0x808
var_804= -0x804
s= -0x800

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x800
MOV             R4, R1
SUB             SP, SP, #8
MOV             R5, R0
ADD             R0, R0, #0x24 ; '$'
BL              sub_31450
ADD             R1, R4, #0xA0
ADD             R0, R4, #0xC0
BL              sub_1FE0C
SUBS            R6, R0, #0
BNE             loc_3C034
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BFE4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BFE4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3C024

loc_3BFE4
LDR             R12, [R5,#0x24]
MOV             R2, #aSSDShareAboveT ; "%s %s %d: Share above target"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x808+s ; s
LDR             R3, =aSubmitTestedWo ; "submit_tested_work"
LDR             LR, [R12,#8]
STR             LR, [SP,#0x808+var_804]
LDR             R12, [R12,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0x808+var_808]
BL              snprintf
ADD             R1, SP, #0x808+s
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_3C024
MOV             R0, R6
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_3C034
BL              sub_2D914
MOV             R1, R4
MOV             R5, R0
MOV             R2, #0
BL              sub_2A5F4
MOV             R0, R5
BL              sub_3B824
MOV             R0, R6
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_3BF78

off_3C060 DCD aSubmitTestedWo ; "submit_tested_work"



; int __fastcall sub_3C064(int, int, unsigned int)
sub_3C064
PUSH            {R4-R8,LR}
MOV             R4, R1
MOV             R1, R2
MOV             R6, R2
MOV             R7, R0
BL              sub_2B7E8
SUBS            R5, R0, #0
BEQ             loc_3C09C
STR             R6, [R4,#0x4C]
MOV             R0, R4
BL              sub_28C30
LDR             R3, [R4,#0xDC]
CMP             R3, #0
BEQ             loc_3C0B0

loc_3C09C
MOV             R0, R7
MOV             R5, #0
BL              sub_30E60

loc_3C0A8
MOV             R0, R5
POP             {R4-R8,PC}

loc_3C0B0
MOV             R0, R7
MOV             R1, R4
BL              sub_3BF78
MOV             R3, #dword_72DB0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_3C0A8
MOV             R3, #byte_72E64
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3C0A8
MOV             R1, R6
MOV             R0, R4
MOV             R5, R3
BL              sub_2A854
B               loc_3C0A8
; End of function sub_3C064




; void __fastcall sub_3C0F8(int)
sub_3C0F8
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_2D914
MOV             R1, R5
MOV             R4, R0
MOV             R2, #0
BL              sub_2A5F4
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_3B824
; End of function sub_3C0F8




; int __fastcall sub_3C120(int, int, int)
sub_3C120
PUSH            {R4-R6,LR}
MOV             R4, R1
STR             R2, [R1,#0x4C]
BL              sub_2D914
MOV             R1, R4
MOV             R5, R0
MOV             R2, #0
BL              sub_2A5F4
MOV             R0, R5
BL              sub_3B824
MOV             R0, #1
POP             {R4-R6,PC}
; End of function sub_3C120

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R7, R3
MOV             R4, R1
MOV             R6, R2
MOV             R5, R0
BL              sub_2D914
MOV             R1, R4
MOV             R2, R7
STR             R0, [SP,#0xC]
BL              sub_2A5F4
LDR             R4, [SP,#0xC]
STR             R6, [R4,#0x4C]
MOV             R0, R4
BL              sub_28C30
LDR             R3, [R4,#0xDC]
CMP             R3, #0
BNE             loc_3C29C
LDR             R1, [SP,#0xC]
ADD             R0, R5, #0x24 ; '$'
BL              sub_31450
MOV             R3, #dword_72DB0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_3C294
MOVW            R3, #:lower16:byte_72E64
LDR             R0, [SP,#0xC]
MOVT            R3, #:upper16:byte_72E64
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C28C

loc_3C1D4
ADD             R1, R0, #0xA0
ADD             R0, R0, #0xC0
BL              sub_1FE0C
SUBS            R4, R0, #0
BNE             loc_3C2D0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x23F4
ADD             R0, SP, #0xC
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aSubmitNoffsetN ; "submit_noffset_nonce"
BL              sub_2A70C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C240
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C240
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
MOVLE           R4, #1
BLE             loc_3C27C

loc_3C240
LDR             R3, [R5,#0x24]
MOV             R2, #aSDShareAboveTa ; "%s %d: Share above target"
MOV             R1, #0x800
ADD             R0, SP, #0x10
MOV             R4, #1
LDR             LR, [R3,#4]
LDR             R12, [R3,#8]
LDR             R3, [LR,#8]
STR             R12, [SP]
BL              snprintf
ADD             R1, SP, #0x10
MOV             R2, #0
MOV             R0, #6
BL              sub_1DD60

loc_3C27C
MOV             R0, R4
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_3C28C
MOV             R1, R6
BL              sub_2A854

loc_3C294
LDR             R0, [SP,#0xC]
B               loc_3C1D4

loc_3C29C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x23E4
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aSubmitNoffsetN ; "submit_noffset_nonce"
ADD             R0, SP, #0xC
MOV             R4, #0
BL              sub_2A70C
MOV             R0, R5
BL              sub_30E60
MOV             R0, R4
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_3C2D0
LDR             R0, [SP,#0xC]
BL              sub_3B824
MOV             R0, R4
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}
off_3C2E8 DCD aSubmitNoffsetN ; "submit_noffset_nonce"


; Attributes: noreturn

; void __fastcall __noreturn sub_3C2EC(int)
sub_3C2EC
PUSH            {R4,LR}
MOV             R1, #1
BL              sub_2C230
; End of function sub_3C2EC




; int __fastcall sub_3C2F8(int, int, char *s1, const char *, const char *)
sub_3C2F8

var_C= -0xC
arg_0=  0x14

PUSH            {R4-R7,LR}
SUB             SP, SP, #0xC
LDR             R7, [SP,#0xC+arg_0]
MOV             R4, R0
MOV             R5, R3
MOV             R0, R2  ; s1
MOV             R6, R1
MOV             R1, R4
BL              sub_20B84
STR             R5, [R4,#0xAC]
STR             R0, [R4,#0xA4]
MOV             R0, R5  ; s
STR             R7, [R4,#0xB0]
BL              strlen
MOV             R5, R0
MOV             R0, R7  ; s
BL              strlen
ADD             R5, R5, R0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R5, R5, #2
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2AA7
LDR             R2, =aAddPoolDetails ; "add_pool_details"
MOV             R0, R5
BL              sub_1F828
LDR             R12, [R4,#0xB0]
MOVW            R2, #:lower16:(aFailedToConnec+0x20) ; "%s:%s"
LDR             R3, [R4,#0xAC]
MOV             R1, R5  ; maxlen
STR             R0, [R4,#0xA8]
MOVT            R2, #:upper16:(aFailedToConnec+0x20) ; format
STR             R12, [SP,#0xC+var_C]
BL              snprintf
LDR             R2, [R4,#0x64]
MOV             R3, #1
EOR             R1, R6, #1
STRB            R3, [R4,#0x11C]
STRB            R1, [R4,#0x6B]
CMP             R2, R3
STRB            R3, [R4,#0x61]
BEQ             loc_3C3A4
ADD             R0, R4, #0x64 ; 'd'
BL              sub_28F90

loc_3C3A4
MOVW            R2, #:lower16:sub_33090
MOV             R3, R4  ; arg
MOVT            R2, #:upper16:sub_33090 ; start_routine
MOV             R1, #0  ; attr
ADD             R0, R4, #0x118 ; newthread
BL              pthread_create
CMP             R6, #0
BNE             loc_3C3DC
MOV             R1, R6  ; thread_return
LDR             R0, [R4,#0x118] ; th
BL              pthread_join
MOV             R3, #byte_686E8
LDRB            R6, [R3,#(byte_68A04 - 0x686E8)]

loc_3C3DC
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_3C2F8

off_3C3E8 DCD aAddPoolDetails ; "add_pool_details"



; int __fastcall sub_3C3EC(int result)
sub_3C3EC
LDR             R3, [R0,#0xC]
CMP             R3, #0
MOVEQ           R3, #0x28348
STREQ           R3, [R0,#0xC]
LDR             R3, [R0,#0x10]
CMP             R3, #0
MOVEQ           R3, #0x28324
STREQ           R3, [R0,#0x10]
LDR             R3, [R0,#0x14]
CMP             R3, #0
MOVEQ           R3, #0x28328
STREQ           R3, [R0,#0x14]
LDR             R3, [R0,#0x18]
CMP             R3, #0
MOVEQ           R3, #0x2A120
STREQ           R3, [R0,#0x18]
LDR             R3, [R0,#0x20]
CMP             R3, #0
MOVEQ           R3, #0x2832C
STREQ           R3, [R0,#0x20]
LDR             R3, [R0,#0x2C]
CMP             R3, #0
MOVEQ           R3, #0x2A128
STREQ           R3, [R0,#0x2C]
LDR             R3, [R0,#0x34]
CMP             R3, #0
MOVEQ           R3, #0x2A130
STREQ           R3, [R0,#0x34]
LDR             R3, [R0,#0x38]
CMP             R3, #0
MOVEQ           R3, #0x28340
STREQ           R3, [R0,#0x38]
LDR             R3, [R0,#0x54]
CMP             R3, #0
MOVEQ           R3, #0x2A138
STREQ           R3, [R0,#0x54]
LDR             R3, [R0,#0x58]
CMP             R3, #0
MOVEQ           R3, #0x2A13C
STREQ           R3, [R0,#0x58]
LDR             R3, [R0,#0x5C]
CMP             R3, #0
MOVEQ           R3, #0x2A140
STREQ           R3, [R0,#0x5C]
LDR             R3, [R0,#0x3C]
CMP             R3, #0
MOVEQ           R3, #sub_35C74
STREQ           R3, [R0,#0x3C]
LDR             R3, [R0,#0x4C]
CMP             R3, #0
MOVEQ           R3, #0x28324
STREQ           R3, [R0,#0x4C]
LDR             R3, [R0,#0x50]
CMP             R3, #0
MOVEQ           R3, #0x28324
STREQ           R3, [R0,#0x50]
LDR             R3, [R0,#0x48]
CMP             R3, #0
MOVEQ           R3, #0x2832C
STREQ           R3, [R0,#0x48]
LDR             R3, [R0,#0x60]
CMP             R3, #0
MOVEQ           R3, #0x28354
STREQ           R3, [R0,#0x60]
VLDR            D7, [R0,#0x68]
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
MOVEQ           R3, #0
MOVEQ           R2, #0
MOVTEQ          R3, #0x3FF0
STRDEQ          R2, R3, [R0,#0x68]
BX              LR
; End of function sub_3C3EC




; int __fastcall sub_3C54C(int result)
sub_3C54C
MOVW            R3, #:lower16:sub_2834C
PUSH            {R4,R5,LR}
MOVT            R3, #:upper16:sub_2834C
MOVW            LR, #:lower16:nullsub_4
MOVW            R12, #:lower16:nullsub_1
MOVW            R1, #:lower16:nullsub_2
MOVW            R2, #:lower16:sub_2A128
MOVT            LR, #:upper16:nullsub_4
MOVT            R12, #:upper16:nullsub_1
MOVT            R1, #:upper16:nullsub_2
MOVT            R2, #:upper16:sub_2A128
STR             R3, [R0,#0x1C]
MOV             R3, #0
STR             LR, [R0,#0xC]
STR             R12, [R0,#0x14]
MOVW            LR, #:lower16:sub_28334
MOVW            R12, #:lower16:sub_2A130
STR             R1, [R0,#0x18]
STR             R3, [R0,#0x28]
MOVW            R1, #:lower16:sub_28340
MOVW            R3, #:lower16:nullsub_5
STR             R2, [R0,#0x2C]
MOVW            R2, #:lower16:nullsub_6
MOVT            LR, #:upper16:sub_28334
MOVT            R12, #:upper16:sub_2A130
MOVT            R1, #:upper16:sub_28340
MOVT            R3, #:upper16:nullsub_5
MOVT            R2, #:upper16:nullsub_6
STR             LR, [R0,#0x30]
MOV             R5, #0
MOVW            LR, #:lower16:nullsub_7
STR             R12, [R0,#0x34]
STR             R1, [R0,#0x38]
MOVW            R12, #:lower16:nullsub_8
MOVW            R1, #:lower16:sub_28354
STR             R3, [R0,#0x3C]
STR             R2, [R0,#0x54]
MOVW            R3, #:lower16:nullsub_3
MOVW            R2, #:lower16:sub_2832C
MOVT            R3, #:upper16:nullsub_3
MOVT            R2, #:upper16:sub_2832C
MOV             R4, #0
MOVT            R5, #0x3FF0
MOVT            LR, #:upper16:nullsub_7
MOVT            R12, #:upper16:nullsub_8
MOVT            R1, #:upper16:sub_28354
STR             LR, [R0,#0x58]
STR             R12, [R0,#0x5C]
STR             R1, [R0,#0x60]
STR             R3, [R0,#0x10]
STR             R3, [R0,#0x24]
STR             R3, [R0,#0x4C]
STR             R3, [R0,#0x50]
STR             R2, [R0,#0x20]
STR             R2, [R0,#0x48]
STRD            R4, R5, [R0,#0x68]
STRD            R4, R5, [R0,#0x70]
POP             {R4,R5,PC}
; End of function sub_3C54C




; int __fastcall sub_3C634(pthread_rwlock_t *)
sub_3C634
PUSH            {R4-R6,LR}
MOV             R3, #0
MOV             R4, R0
MOV             R0, #stru_74FC0 ; rwlock
STR             R3, [R4,#0x20]
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_3C6F8
MOVW            R3, #:lower16:dword_74F68
MOVW            R5, #:lower16:byte_6A6E0
MOVT            R3, #:upper16:dword_74F68
MOVT            R5, #:upper16:byte_6A6E0
LDR             R1, [R3]
MOVW            R0, #:lower16:stru_74FC0
LDR             R3, [R5,#(dword_6A228 - 0x6A6E0)]
MOVT            R0, #:upper16:stru_74FC0 ; rwlock
STR             R3, [R4]
ADD             R2, R3, #1
STR             R4, [R1,R3,LSL#2]
STR             R2, [R5,#(dword_6A228 - 0x6A6E0)]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3C704
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOVW            R3, #:lower16:byte_75010
ADD             R0, R4, #0x140 ; rwlock
MOVT            R3, #:upper16:byte_75010
LDRB            R3, [R3]
CMP             R3, #0
MOVWEQ          R3, #0x6228
LDRNE           R3, [R4,#0x94]
MOVTEQ          R3, #7
LDRNE           R2, [R5,#(dword_6A22C - 0x6A6E0)]
LDREQ           R1, [R3]
LDREQ           R2, [R4,#0x94]
ADDNE           R3, R3, R2
STRNE           R3, [R5,#(dword_6A22C - 0x6A6E0)]
ADDEQ           R2, R2, R1
MOV             R1, #0  ; attr
STREQ           R2, [R3]
BL              pthread_rwlock_init
CMP             R0, #0
BNE             loc_3C710
STR             R0, [R4,#0x160]
POP             {R4-R6,PC}

loc_3C6F8
MOVW            R1, #0x2C41
LDR             R0, =aEnableDevice ; "enable_device"
BL              sub_2CB04

loc_3C704
MOVW            R1, #0x2C43
LDR             R0, =aEnableDevice ; "enable_device"
BL              sub_2D6AC

loc_3C710
MOVW            R1, #0x2C4E
LDR             R0, =aEnableDevice ; "enable_device"
BL              sub_2CA38
; End of function sub_3C634

off_3C71C DCD aEnableDevice ; "enable_device"



; int __fastcall sub_3C720(_DWORD *)
sub_3C720

var_1C= -0x1C
var_18= -0x18
var_10= -0x10
s2= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1C
LDR             R3, [R0,#4]
MOV             R5, #0x9E3779B9
STR             R0, [SP,#0x1C+var_10]
LDR             R4, [R3,#8]
MOV             R0, R4  ; s
STR             R4, [SP,#0x1C+s2]
BL              strlen
CMP             R0, #0xB
MOVW            R3, #0xBEEF
MOV             R6, R0
MOVT            R3, #0xFEED
MOV             R0, R5
BLS             loc_3D038
ADD             R9, R4, #0xC
MOV             R10, R6

loc_3C768
LDRB            LR, [R9,#-6]
SUB             R10, R10, #0xC
LDRB            R2, [R9,#-2]
CMP             R10, #0xB
LDRB            R1, [R9,#-0xA]
MOV             R11, R9
LDRB            R4, [R9,#-7]
ADD             R9, R9, #0xC
LDRB            R12, [R9,#-0xF]
MOV             LR, LR,LSL#16
LDRB            R7, [R9,#-0x17]
MOV             R2, R2,LSL#16
MOV             R1, R1,LSL#16
LDRB            R8, [R9,#-0x11]
ADD             LR, LR, R4,LSL#8
LDRB            R4, [R9,#-0x14]
ADD             R2, R2, R12,LSL#8
LDRB            R12, [R9,#-0x18]
ADD             R1, R1, R7,LSL#8
LDRB            R7, [R9,#-0x10]
ADD             LR, LR, R4
LDRB            R4, [R9,#-0x15]
ADD             R1, R1, R12
LDRB            R12, [R9,#-0xD]
ADD             LR, LR, R8,LSL#24
ADD             R2, R2, R7
ADD             R1, R1, R4,LSL#24
ADD             R5, LR, R5
ADD             R2, R2, R12,LSL#24
SUB             R1, R1, R5
ADD             R3, R2, R3
SUB             R2, R1, R3
SUB             R1, R5, R3
ADD             R2, R2, R0
EOR             R2, R2, R3,LSR#13
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#8
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#13
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSR#12
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#16
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#5
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R0, R2, R3,LSR#3
SUB             R1, R1, R0
SUB             R3, R3, R0
EOR             R5, R1, R0,LSL#10
SUB             R3, R3, R5
EOR             R3, R3, R5,LSR#15
BHI             loc_3C768

loc_3C854
SUB             R10, R10, #1
ADD             R3, R6, R3
CMP             R10, #0xA ; switch 11 cases
LDRLS           PC, [PC,R10,LSL#2] ; switch jump
B               def_3C860 ; jumptable 0003C860 default case
jpt_3C860 DCD loc_3C8E4 ; jump table for switch statement
DCD loc_3C8DC
DCD loc_3C8D4
DCD loc_3C8CC
DCD loc_3C8C4
DCD loc_3C8BC
DCD loc_3C8B4
DCD loc_3C8AC
DCD loc_3C8A4
DCD loc_3C89C
DCD loc_3C894

loc_3C894               ; jumptable 0003C860 case 10
LDRB            R2, [R11,#0xA]
ADD             R3, R3, R2,LSL#24

loc_3C89C               ; jumptable 0003C860 case 9
LDRB            R2, [R11,#9]
ADD             R3, R3, R2,LSL#16

loc_3C8A4               ; jumptable 0003C860 case 8
LDRB            R2, [R11,#8]
ADD             R3, R3, R2,LSL#8

loc_3C8AC               ; jumptable 0003C860 case 7
LDRB            R2, [R11,#7]
ADD             R5, R5, R2,LSL#24

loc_3C8B4               ; jumptable 0003C860 case 6
LDRB            R2, [R11,#6]
ADD             R5, R5, R2,LSL#16

loc_3C8BC               ; jumptable 0003C860 case 5
LDRB            R2, [R11,#5]
ADD             R5, R5, R2,LSL#8

loc_3C8C4               ; jumptable 0003C860 case 4
LDRB            R2, [R11,#4]
ADD             R5, R5, R2

loc_3C8CC               ; jumptable 0003C860 case 3
LDRB            R2, [R11,#3]
ADD             R0, R0, R2,LSL#24

loc_3C8D4               ; jumptable 0003C860 case 2
LDRB            R2, [R11,#2]
ADD             R0, R0, R2,LSL#16

loc_3C8DC               ; jumptable 0003C860 case 1
LDRB            R2, [R11,#1]
ADD             R0, R0, R2,LSL#8

loc_3C8E4               ; jumptable 0003C860 case 0
LDRB            R2, [R11]
ADD             R0, R0, R2

def_3C860               ; jumptable 0003C860 default case
SUB             R0, R0, R5
SUB             R2, R5, R3
SUB             R0, R0, R3
MOVW            R4, #:lower16:byte_6A6E0
EOR             R0, R0, R3,LSR#13
MOVT            R4, #:upper16:byte_6A6E0
LDR             R1, [R4,#(dword_6A230 - 0x6A6E0)]
SUB             R2, R2, R0
SUB             R3, R3, R0
EOR             R2, R2, R0,LSL#8
CMP             R1, #0
SUB             R7, R3, R2
SUB             R3, R0, R2
EOR             R7, R7, R2,LSR#13
SUB             R3, R3, R7
SUB             R2, R2, R7
EOR             R3, R3, R7,LSR#12
SUB             R2, R2, R3
SUB             R7, R7, R3
EOR             R2, R2, R3,LSL#16
SUB             R7, R7, R2
SUB             R3, R3, R2
EOR             R7, R7, R2,LSR#5
SUB             R3, R3, R7
SUB             R2, R2, R7
EOR             R3, R3, R7,LSR#3
SUB             R2, R2, R3
SUB             R7, R7, R3
EOR             R3, R2, R3,LSL#10
SUB             R7, R7, R3
EOR             R7, R7, R3,LSR#15
BEQ             loc_3CB20
LDR             R1, [R1,#8]
LDRD            R2, R3, [R1]
SUB             R3, R3, #1
AND             R3, R3, R7
ADD             R3, R3, R3,LSL#1
LDR             R2, [R2,R3,LSL#2]
CMP             R2, #0
BEQ             loc_3CB20
LDR             R8, [R1,#0x14]
RSB             R8, R8, #0
ADDS            R5, R2, R8
BEQ             loc_3CB20
LDR             R9, [SP,#0x1C+s2]
B               loc_3C9B8

loc_3C9A4
LDR             R5, [R5,#0x18]
CMP             R5, #0
BEQ             loc_3CB20
ADDS            R5, R5, R8
BEQ             loc_3CB20

loc_3C9B8
LDR             R3, [R5,#0x24]
CMP             R3, R7
BNE             loc_3C9A4
LDR             R3, [R5,#0x20]
CMP             R3, R6
BNE             loc_3C9A4
MOV             R2, R6  ; n
MOV             R1, R9  ; s2
LDR             R0, [R5,#0x1C] ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_3C9A4
LDR             R3, [R5,#4]
LDR             R2, [SP,#0x1C+var_10]
ADD             R3, R3, #1
STR             R3, [R5,#4]
STR             R3, [R2,#8]

loc_3C9FC               ; rwlock
MOV             R0, #stru_74FC0
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_3D044
MOVW            R6, #:lower16:dword_74FE0
LDR             R3, [R4,#(dword_6A234 - 0x6A6E0)]
MOVT            R6, #:upper16:dword_74FE0
MOVW            R7, #:lower16:dword_74F68
LDR             R1, [R6]
MOVT            R7, #:upper16:dword_74F68
MOVW            R2, #0x2C77
LDR             R0, [R7]
STR             R2, [SP,#0x1C+var_1C]
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
ADD             R1, R1, R3
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
ADD             R1, R1, #2
LDR             R3, =aAddCgpu ; "add_cgpu"
MOV             R1, R1,LSL#2
BL              sub_1F940
STR             R0, [R7]
MOV             R0, #stru_74FC0 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3D050
MOV             R5, #off_67964
LDR             R3, [R5] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, #stru_72D94 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3D05C
BL              time
LDR             R3, [SP,#0x1C+var_10]
STR             R0, [R3,#0xE8]
MOV             R0, #stru_72D94 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3D108
LDR             R3, [R5] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R3, #byte_75010
LDRB            R3, [R3]
CMP             R3, #0
LDRNE           R3, [R4,#(dword_6A234 - 0x6A6E0)]
LDREQ           R3, [R6]
LDRNE           R0, [R6]
ADDNE           R1, R3, #1
LDRNE           R2, [R7]
ADDEQ           R1, R3, #1
STRNE           R1, [R4,#(dword_6A234 - 0x6A6E0)]
STREQ           R1, [R6]
ADDNE           R3, R3, R0
LDREQ           R2, [R7]
MOV             R0, #1
LDR             R1, [SP,#0x1C+var_10]
STR             R1, [R2,R3,LSL#2]
MOV             R2, #dword_7606C
LDR             R3, [R6]
LDR             R2, [R2]
LDR             R1, [R4,#(dword_6A238 - 0x6A6E0)]
SUB             R3, R3, R2
CMP             R3, R1
STRGT           R3, [R4,#(dword_6A238 - 0x6A6E0)]
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_3CB20
LDR             R6, =aAddCgpu ; "add_cgpu"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R3, #0x2C70
MOV             R0, #0x28 ; '('
MOV             R2, R6
BL              sub_1F828
LDR             R7, [SP,#0x1C+var_10]
MOVW            R12, #0x2C71
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOV             R5, R0
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, [R7,#4]
LDR             R1, [R2,#8]
MOV             R2, #4
STR             R12, [SP,#0x1C+var_18]
STR             R6, [SP,#0x1C+var_1C]
BL              sub_232EC
MOV             R3, #0
MOV             R0, R5  ; s
STR             R3, [R5,#4]
STR             R3, [R7,#8]
MOVW            R7, #0x79B9
BL              strlen
CMP             R0, #0xB
MOVW            R12, #0xBEEF
MOVT            R7, #0x9E37
STR             R0, [SP,#0x1C+s2]
MOV             R11, R0
MOVT            R12, #0xFEED
MOV             R3, R7
BLS             loc_3D114
ADD             R10, R5, #0xC

loc_3CBA4
LDRB            R2, [R10,#-6]
SUB             R11, R11, #0xC
LDRB            R1, [R10,#-2]
CMP             R11, #0xB
LDRB            R0, [R10,#-0xA]
LDRB            R6, [R10,#-7]
LDRB            LR, [R10,#-3]
MOV             R2, R2,LSL#16
LDRB            R8, [R10,#-0xB]
MOV             R1, R1,LSL#16
MOV             R0, R0,LSL#16
LDRB            R9, [R10,#-5]
ADD             R2, R2, R6,LSL#8
LDRB            R6, [R10,#-8]
ADD             R1, R1, LR,LSL#8
LDRB            LR, [R10,#-0xC]
ADD             R0, R0, R8,LSL#8
LDRB            R8, [R10,#-4]
ADD             R2, R2, R6
LDRB            R6, [R10,#-9]
ADD             R0, R0, LR
LDRB            LR, [R10,#-1]
ADD             R2, R2, R9,LSL#24
ADD             R1, R1, R8
ADD             R0, R0, R6,LSL#24
ADD             R7, R2, R7
ADD             R1, R1, LR,LSL#24
MOV             R2, R10
SUB             R0, R0, R7
ADD             R1, R1, R12
ADD             R10, R10, #0xC
SUB             R0, R0, R1
SUB             R7, R7, R1
ADD             R3, R0, R3
EOR             R3, R3, R1,LSR#13
SUB             R0, R7, R3
SUB             R1, R1, R3
EOR             R0, R0, R3,LSL#8
SUB             R1, R1, R0
SUB             R3, R3, R0
EOR             R1, R1, R0,LSR#13
SUB             R3, R3, R1
SUB             R0, R0, R1
EOR             R3, R3, R1,LSR#12
SUB             R0, R0, R3
SUB             R1, R1, R3
EOR             R0, R0, R3,LSL#16
SUB             R1, R1, R0
SUB             R3, R3, R0
EOR             R1, R1, R0,LSR#5
SUB             R3, R3, R1
SUB             R7, R0, R1
EOR             R3, R3, R1,LSR#3
SUB             R7, R7, R3
SUB             R1, R1, R3
EOR             R7, R7, R3,LSL#10
SUB             R1, R1, R7
EOR             R12, R1, R7,LSR#15
BHI             loc_3CBA4

loc_3CC90
LDR             R1, [SP,#0x1C+s2]
SUB             R11, R11, #1
ADD             R12, R1, R12
CMP             R11, #0xA ; switch 11 cases
LDRLS           PC, [PC,R11,LSL#2] ; switch jump
B               def_3CCA0 ; jumptable 0003CCA0 default case
jpt_3CCA0 DCD loc_3CD24 ; jump table for switch statement
DCD loc_3CD1C
DCD loc_3CD14
DCD loc_3CD0C
DCD loc_3CD04
DCD loc_3CCFC
DCD loc_3CCF4
DCD loc_3CCEC
DCD loc_3CCE4
DCD loc_3CCDC
DCD loc_3CCD4

loc_3CCD4               ; jumptable 0003CCA0 case 10
LDRB            R1, [R2,#0xA]
ADD             R12, R12, R1,LSL#24

loc_3CCDC               ; jumptable 0003CCA0 case 9
LDRB            R1, [R2,#9]
ADD             R12, R12, R1,LSL#16

loc_3CCE4               ; jumptable 0003CCA0 case 8
LDRB            R1, [R2,#8]
ADD             R12, R12, R1,LSL#8

loc_3CCEC               ; jumptable 0003CCA0 case 7
LDRB            R1, [R2,#7]
ADD             R7, R7, R1,LSL#24

loc_3CCF4               ; jumptable 0003CCA0 case 6
LDRB            R1, [R2,#6]
ADD             R7, R7, R1,LSL#16

loc_3CCFC               ; jumptable 0003CCA0 case 5
LDRB            R1, [R2,#5]
ADD             R7, R7, R1,LSL#8

loc_3CD04               ; jumptable 0003CCA0 case 4
LDRB            R1, [R2,#4]
ADD             R7, R7, R1

loc_3CD0C               ; jumptable 0003CCA0 case 3
LDRB            R1, [R2,#3]
ADD             R3, R3, R1,LSL#24

loc_3CD14               ; jumptable 0003CCA0 case 2
LDRB            R1, [R2,#2]
ADD             R3, R3, R1,LSL#16

loc_3CD1C               ; jumptable 0003CCA0 case 1
LDRB            R1, [R2,#1]
ADD             R3, R3, R1,LSL#8

loc_3CD24               ; jumptable 0003CCA0 case 0
LDRB            R2, [R2]
ADD             R3, R3, R2

def_3CCA0               ; jumptable 0003CCA0 default case
SUB             R3, R3, R7
SUB             R2, R7, R12
SUB             R3, R3, R12
STR             R5, [R5,#0x1C]
EOR             R3, R3, R12,LSR#13
MOV             R0, R5  ; s
SUB             R2, R2, R3
SUB             R12, R12, R3
EOR             R2, R2, R3,LSL#8
SUB             R1, R12, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#13
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#12
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSL#16
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#5
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#3
SUB             R2, R2, R3
SUB             R6, R1, R3
EOR             R3, R2, R3,LSL#10
SUB             R6, R6, R3
EOR             R6, R6, R3,LSR#15
STR             R6, [R5,#0x24]
BL              strlen
LDR             R7, [R4,#(dword_6A230 - 0x6A6E0)]
STR             R0, [R5,#0x20]
CMP             R7, #0
BEQ             loc_3D068
LDR             R3, [R7,#8]
MOV             R2, #0
STR             R2, [R5,#0x10]
ADD             R8, R5, #8
STR             R3, [R5,#8]
LDR             R2, [R7,#8]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R5,#0xC]
LDR             R3, [R7,#8]
LDR             R3, [R3,#0x10]
STR             R5, [R3,#8]
LDR             R3, [R7,#8]
STR             R8, [R3,#0x10]

loc_3CDF4
LDR             R2, [R7,#8]
MOV             R1, #0
LDR             R3, [R2,#0xC]
ADD             R3, R3, #1
STR             R3, [R2,#0xC]
LDR             R2, [R7,#8]
LDRD            R2, R3, [R2]
SUB             R3, R3, #1
AND             R3, R3, R6
ADD             R3, R3, R3,LSL#1
MOV             R3, R3,LSL#2
ADD             R2, R2, R3
LDR             R0, [R2,#4]
ADD             R0, R0, #1
STR             R0, [R2,#4]
LDR             R2, [R7,#8]
LDR             R2, [R2]
LDR             R2, [R2,R3]
STR             R1, [R5,#0x14]
STR             R2, [R5,#0x18]
LDR             R2, [R7,#8]
LDR             R2, [R2]
LDR             R1, [R2,R3]
ADD             R2, R2, R3
CMP             R1, #0
STRNE           R8, [R1,#0xC]
LDRNE           R2, [R7,#8]
LDRNE           R2, [R2]
ADDNE           R2, R2, R3
STR             R8, [R2]
LDR             R2, [R7,#8]
LDR             R2, [R2]
ADD             R2, R2, R3
LDRD            R2, R3, [R2,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_3C9FC
LDR             R3, [R5,#8]
LDR             R2, [R3,#0x24]
CMP             R2, #1
BEQ             loc_3C9FC
LDR             R0, [R3,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R8, R0, #0
BEQ             loc_3D120
LDR             R2, [R5,#8]
MOV             R10, #0
LDR             R3, [R2,#4]
LDR             R0, [R2,#0xC]
LDR             R1, [R2,#8]
MOV             R3, R3,LSL#1
ADD             R1, R1, #1
SUB             R3, R3, #1
TST             R3, R0
MOVNE           R3, #1
MOVEQ           R3, R10
ADD             R3, R3, R0,LSR R1
STR             R3, [R2,#0x18]
LDR             R3, [R5,#8]
STR             R10, [R3,#0x1C]
LDR             R3, [R5,#8]
LDR             R6, [R3,#4]
CMP             R6, R10
BEQ             loc_3CFD0
MOV             R11, R10
STR             R10, [SP,#0x1C+s2]
STR             R4, [SP,#0x1C+var_8]

loc_3CF10
LDR             R2, [R3]
LDR             R7, [R2,R10]
CMP             R7, #0
BEQ             loc_3CFB4
MOV             R4, R6
B               loc_3CF30

loc_3CF28
LDR             R4, [R3,#4]
MOV             R7, R6

loc_3CF30
LDR             R3, [R7,#0x1C]
MOV             R4, R4,LSL#1
LDR             R6, [R7,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
ADD             R9, R8, R4,LSL#2
LDR             R3, [R9,#4]
ADD             R3, R3, #1
STR             R3, [R9,#4]
LDR             R2, [R5,#8]
LDR             R1, [R2,#0x18]
CMP             R3, R1
BLS             loc_3CF88
LDR             R3, [R2,#0x1C]
ADD             R3, R3, #1
STR             R3, [R2,#0x1C]
LDR             R3, [R5,#8]
LDR             R0, [R9,#4]
LDR             R1, [R3,#0x18]
BLX             sub_4A2D0
STR             R0, [R9,#8]

loc_3CF88
STR             R11, [R7,#0xC]
LDR             R3, [R8,R4,LSL#2]
STR             R3, [R7,#0x10]
LDR             R3, [R8,R4,LSL#2]
CMP             R3, #0
STRNE           R7, [R3,#0xC]
CMP             R6, #0
STR             R7, [R8,R4,LSL#2]
LDR             R3, [R5,#8]
BNE             loc_3CF28
LDR             R6, [R3,#4]

loc_3CFB4
LDR             R2, [SP,#0x1C+s2]
ADD             R10, R10, #0xC
ADD             R2, R2, #1
CMP             R2, R6
STR             R2, [SP,#0x1C+s2]
BCC             loc_3CF10

loc_3CFCC
LDR             R4, [SP,#0x1C+var_8]

loc_3CFD0               ; ptr
LDR             R0, [R3]
BL              free
LDR             R2, [R5,#8]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R5,#8]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R5,#8]
STR             R8, [R3]
LDR             R3, [R5,#8]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R5,#8]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]
B               loc_3C9FC

loc_3D038
LDR             R11, [SP,#0x1C+s2]
MOV             R10, R6
B               loc_3C854

loc_3D044
MOVW            R1, #0x2C76
LDR             R0, =aAddCgpu ; "add_cgpu"
BL              sub_2CB04

loc_3D050
MOVW            R1, #0x2C78
LDR             R0, =aAddCgpu ; "add_cgpu"
BL              sub_2D6AC

loc_3D05C
MOVW            R1, #0x2C7A
LDR             R0, =aAddCgpu ; "add_cgpu"
BL              sub_2CB60

loc_3D068
STR             R7, [R5,#0x10]
MOV             R0, #0x2C ; ',' ; size
STR             R7, [R5,#0xC]
STR             R5, [R4,#(dword_6A230 - 0x6A6E0)]
BL              malloc
CMP             R0, #0
STR             R0, [R5,#8]
BEQ             loc_3D120
MOV             R2, #0x2C ; ',' ; n
MOV             R1, R7  ; c
MOV             R8, R5
BL              memset
LDR             R3, [R8,#8]!
MOV             R12, #0x20 ; ' '
MOV             R1, #5
MOV             R2, #8
MOV             R0, #0x180 ; size
STR             R8, [R3,#0x10]
LDR             R3, [R5,#8]
STR             R12, [R3,#4]
LDR             R3, [R5,#8]
STR             R1, [R3,#8]
LDR             R3, [R5,#8]
STR             R2, [R3,#0x14]
LDR             R9, [R5,#8]
BL              malloc
STR             R0, [R9]
LDR             R3, [R5,#8]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_3D120
MOV             R1, R7  ; c
MOV             R2, #0x180 ; n
BL              memset
LDR             R2, [R5,#8]
MOV             R3, #0xA0111FE1
MOV             R7, R5
STR             R3, [R2,#0x28]
B               loc_3CDF4

loc_3D108
MOVW            R1, #0x2C7C
LDR             R0, =aAddCgpu ; "add_cgpu"
BL              sub_2CBBC

loc_3D114
MOV             R2, R5
LDR             R11, [SP,#0x1C+s2]
B               loc_3CC90

loc_3D120               ; status
MOV             R0, #0xFFFFFFFF
BL              exit
; End of function sub_3C720

off_3D128 DCD aAddCgpu  ; "add_cgpu"



; _BYTE *__fastcall sub_3D12C(const void *)
sub_3D12C

var_C= -0xC
var_8= -8

PUSH            {R4-R7,LR}
MOVW            R4, #:lower16:aCgminerC ; "cgminer.c"
LDR             R6, =aCopyDrv ; "copy_drv"
MOVT            R4, #:upper16:aCgminerC ; "cgminer.c"
SUB             SP, SP, #0xC
MOV             R7, R0
MOV             R1, R4
MOVW            R3, #0x2C94
MOV             R2, R6
MOV             R0, #0x78 ; 'x'
BL              sub_1F828
MOVW            R2, #0x2C95
MOV             R3, R4
STR             R2, [SP,#0xC+var_8]
MOV             R1, R7
STR             R6, [SP,#0xC+var_C]
MOV             R2, #0x78 ; 'x'
MOV             R5, R0
BL              sub_232EC
MOV             R3, #1
MOV             R0, R5
STRB            R3, [R5,#0x64]
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_3D12C

off_3D18C DCD aCopyDrv  ; "copy_drv"



; void sub_3D190()
sub_3D190

var_940= -0x940
s= -0x900
var_800= -0x800

PUSH            {R4,LR}
SUB             SP, SP, #0x940
MOV             R0, SP  ; info
BL              sysinfo
CMP             R0, #0
BNE             loc_3D234
LDR             R2, [SP,#0x940+var_940]
MOVW            R3, #:lower16:dword_76194
MOVW            R0, #:lower16:dword_761D4
MOVT            R3, #:upper16:dword_76194
MOVT            R0, #:upper16:dword_761D4
MOVW            R1, #:lower16:aSetStartTimePo ; "set_start_time_point total_tv_start_sys"...
ADD             R12, R2, #1
STR             R2, [R3]
STR             R12, [R0]
MOV             R3, R12
MOVT            R1, #:upper16:aSetStartTimePo ; "set_start_time_point total_tv_start_sys"...
ADD             R0, SP, #0x940+s ; s
BL              sprintf
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D204
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3D288

loc_3D204
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
ADD             R3, SP, #0x940+s
ADD             R0, SP, #0x940+var_800 ; s
BL              snprintf
ADD             R1, SP, #0x940+var_800
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_3D22C
ADD             SP, SP, #0x940
POP             {R4,PC}

loc_3D234
BL              __errno_location
LDR             R4, [R0]
MOV             R0, R4  ; errnum
BL              strerror
MOVW            R1, #:lower16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
MOV             R3, R0
MOV             R2, R4
MOVT            R1, #:upper16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
ADD             R0, SP, #0x940+var_800 ; s
BL              sprintf
MOV             R0, #0  ; timer
BL              time
MOVW            R2, #:lower16:dword_76194
MOVW            R3, #:lower16:dword_761D4
MOVT            R2, #:upper16:dword_76194
ADD             R1, R0, #1
MOVT            R3, #:upper16:dword_761D4
STR             R0, [R2]
STR             R1, [R3]
ADD             SP, SP, #0x940
POP             {R4,PC}

loc_3D288
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_3D204
B               loc_3D22C
; End of function sub_3D190




; unsigned int sub_3D2A0()
sub_3D2A0

var_84C= -0x84C
var_848= -0x848
var_844= -0x844
var_838= -0x838
var_834= -0x834
var_830= -0x830
attr= -0x828
s= -0x804

PUSH            {R4-R11,LR}
MOVW            R3, #:lower16:dword_72DC0
SUB             SP, SP, #0x840
MOV             R5, R3
SUB             SP, SP, #0xC
MOVW            R4, #:lower16:byte_686E8
BL              pthread_self
MOV             R3, R5
MOVT            R4, #:upper16:byte_686E8
MOVT            R3, #:upper16:dword_72DC0
MOV             R5, R3
STR             R3, [SP,#0x84C+var_830]
BL              pthread_detach
LDR             R3, =unk_6A240
SUB             R0, R3, #4 ; mutex
BL              pthread_mutex_lock
LDR             R3, [R4,#(dword_68B68 - 0x686E8)]
LDR             R1, [R5]
ADD             R1, R1, R3,LSL#6
LDR             R3, [R1,#0xC]
CMP             R3, #0
STREQ           R3, [SP,#0x84C+var_834]
BNE             loc_3D9A8

loc_3D2FC               ; ptr
LDR             R0, [R4,#(dword_68A08 - 0x686E8)]
CMP             R0, #0
BEQ             loc_3D30C
BL              free

loc_3D30C
MOV             R5, #dword_72E60
LDR             R7, [R5]
CMP             R7, #0
BLE             loc_3D3C4
MOVW            R11, #:lower16:byte_686E1
MOVW            R8, #:lower16:byte_72D90
MOVW            R10, #:lower16:dword_72F04
MOVW            R9, #:lower16:aBeforeAddPoolP ; "before add pool, pool->pool_no = %d, po"...
MOVT            R11, #:upper16:byte_686E1
MOVT            R8, #:upper16:byte_72D90
MOVT            R10, #:upper16:dword_72F04
MOVT            R9, #:upper16:aBeforeAddPoolP ; "before add pool, pool->pool_no = %d, po"...
MOV             R6, #0

loc_3D344
LDRB            R3, [R11]
CMP             R3, #0
BEQ             loc_3D3B8
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_3D384
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D384
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3D3B8

loc_3D384
LDR             R3, [R10]
MOV             R2, R9  ; format
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x84C+s ; s
LDR             R12, [R3,R6,LSL#2]
LDR             R3, [R12]
LDR             R12, [R12,#0xA4]
STR             R12, [SP,#0x84C+var_84C]
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_3D3B8
ADD             R6, R6, #1
CMP             R7, R6
BNE             loc_3D344

loc_3D3C4
BL              sub_2B46C
LDR             R3, [R5]
CMP             R3, R7
BEQ             loc_3D838
MOV             R2, #0
STRB            R2, [R4,#(byte_68A04 - 0x686E8)]
BLE             loc_3D428
MOVW            R6, #:lower16:dword_72F04
MOV             R10, R7,LSL#2
MOVT            R6, #:upper16:dword_72F04
MOV             R9, R7
MOV             R11, #1

loc_3D3F4
LDR             R3, [R6]
LDR             R8, [R3,R10]
LDR             R3, [R8,#0x64]
CMP             R3, #1
BEQ             loc_3D410
ADD             R0, R8, #0x64 ; 'd'
BL              sub_28F90

loc_3D410
LDR             R3, [R5]
ADD             R9, R9, #1
STRB            R11, [R8,#0x61]
ADD             R10, R10, #4
CMP             R3, R9
BGT             loc_3D3F4

loc_3D428
MOV             R2, #byte_686E1
STR             R2, [SP,#0x84C+var_838]
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3D73C

loc_3D440
LDR             R3, [R5]
CMP             R3, #0
BLE             loc_3D4F0
LDR             R11, [SP,#0x84C+var_838]
MOVW            R8, #:lower16:byte_72D90
MOVW            R10, #:lower16:dword_72F04
MOVW            R9, #:lower16:aAfterAddPoolPo ; "after add pool, pool->pool_no = %d, poo"...
MOVT            R8, #:upper16:byte_72D90
MOVT            R10, #:upper16:dword_72F04
MOVT            R9, #:upper16:aAfterAddPoolPo ; "after add pool, pool->pool_no = %d, poo"...
MOV             R6, #0

loc_3D46C
LDRB            R3, [R11]
CMP             R3, #0
BEQ             loc_3D4E0
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_3D4AC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D4AC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3D4E0

loc_3D4AC
LDR             R3, [R10]
MOV             R2, R9  ; format
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x84C+s ; s
LDR             R12, [R3,R6,LSL#2]
LDR             R3, [R12]
LDR             R12, [R12,#0xA4]
STR             R12, [SP,#0x84C+var_84C]
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_3D4E0
LDR             R3, [R5]
ADD             R6, R6, #1
CMP             R3, R6
BGT             loc_3D46C

loc_3D4F0
CMP             R7, #0
BLE             loc_3D57C
MOV             R8, #0
MOVW            R6, #:lower16:dword_72F04
MOVW            R9, #:lower16:dword_74F24
MOV             R10, R8
MOVT            R6, #:upper16:dword_72F04
MOVT            R9, #:upper16:dword_74F24
B               loc_3D55C

loc_3D514
LDR             R12, [R9]
ADD             R8, R8, #1
LDR             R1, [R4,#(dword_68B80 - 0x686E8)]
MOV             R0, R11
LDR             R2, [R4,#(dword_68B7C - 0x686E8)]
LDR             R3, [R4,#(dword_68B8C - 0x686E8)]
SUB             R12, R12, #1
SUB             R1, R1, #1
STR             R10, [R11,#0x64]
SUB             R2, R2, #1
STR             R12, [R9]
SUB             R3, R3, #1
STR             R1, [R4,#(dword_68B80 - 0x686E8)]
STR             R2, [R4,#(dword_68B7C - 0x686E8)]
STR             R3, [R4,#(dword_68B8C - 0x686E8)]
BL              sub_2AC40
CMP             R7, R8
BEQ             loc_3D57C

loc_3D55C
LDR             R3, [R6]
LDR             R11, [R3]
BL              sub_2FB78
CMP             R11, R0
BNE             loc_3D514
MOV             R0, #0
BL              sub_31A9C
B               loc_3D514

loc_3D57C
LDR             R3, [SP,#0x84C+var_838]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D6E8

loc_3D58C
LDR             R3, [R5]
CMP             R3, #0
BLE             loc_3D62C
MOVW            R8, #:lower16:byte_72D90
MOVW            R6, #:lower16:dword_72F04
MOVW            R9, #:lower16:aAfterReloadPoo ; "after reload pool, pool->pool_no = %d, "...
MOVW            R10, #:lower16:byte_686E0
MOVW            R11, #:lower16:dword_67840
MOVT            R8, #:upper16:byte_72D90
MOVT            R6, #:upper16:dword_72F04
MOVT            R9, #:upper16:aAfterReloadPoo ; "after reload pool, pool->pool_no = %d, "...
MOVT            R10, #:upper16:byte_686E0
MOVT            R11, #:upper16:dword_67840
MOV             R7, #0

loc_3D5C4
LDRB            R2, [R8]
LDR             R3, [R6]
CMP             R2, #0
LDR             R2, [R3,R7,LSL#2]
BNE             loc_3D5F0
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_3D5F0
LDR             R3, [R11]
CMP             R3, #4
BLE             loc_3D61C

loc_3D5F0
LDR             R12, [R2,#0xA4]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R2]
ADD             R0, SP, #0x84C+s ; s
MOV             R2, R9  ; format
STR             R12, [SP,#0x84C+var_84C]
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_3D61C
LDR             R3, [R5]
ADD             R7, R7, #1
CMP             R3, R7
BGT             loc_3D5C4

loc_3D62C
MOV             R6, #0
BL              sub_28CFC

loc_3D634               ; seconds
MOV             R0, #1
ADD             R6, R6, R0
BL              sleep
LDRB            R3, [R4,#(byte_68A04 - 0x686E8)]
EOR             R3, R3, #1
CMP             R6, #8
MOVEQ           R3, #0
ANDNE           R3, R3, #1
CMP             R3, #0
BNE             loc_3D634
BL              sub_3D190
LDR             R3, [SP,#0x84C+var_838]
MOVW            R2, #0x6572
STR             R2, [SP,#0x84C+attr]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D790

loc_3D678
ADD             R6, SP, #0x84C+attr

loc_3D67C               ; s
MOV             R0, R6
BL              strlen
MOV             R1, R0
MOV             R0, R6
BL              sub_42680
LDRB            R3, [R4,#(byte_68A04 - 0x686E8)]
CMP             R3, #0
BEQ             loc_3D8A0
MOVW            R3, #:lower16:byte_6A6E0
MOV             R2, #1
MOVT            R3, #:upper16:byte_6A6E0
STR             R2, [R3,#(dword_6A254 - 0x6A6E0)]

loc_3D6AC
LDR             R2, =unk_6A240
SUB             R0, R2, #4 ; mutex
MOV             R2, #1
STR             R2, [R3,#(dword_6A258 - 0x6A6E0)]
BL              pthread_mutex_unlock

loc_3D6C0
LDR             R3, [SP,#0x84C+var_834]
CMP             R3, #0
BNE             loc_3D7E8

loc_3D6CC               ; seconds
MOV             R0, #1
BL              sleep
MOV             R3, #0
STR             R3, [R4,#(dword_68AE0 - 0x686E8)]
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_3D6E8
MOV             R8, #byte_72D90
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_3D710
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3DA18

loc_3D710
MOVW            R2, #:lower16:aTotalPoolsAfte ; "total_pools after removed = %d\n"
ADD             R0, SP, #0x84C+s ; s
MOVT            R2, #:upper16:aTotalPoolsAfte ; "total_pools after removed = %d\n"
LDR             R3, [R5]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_3D58C

loc_3D73C
MOV             R8, #byte_72D90
LDRB            R2, [R8]
CMP             R2, #0
BNE             loc_3D764
MOV             R2, #byte_686E0
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_3DA00

loc_3D764
MOVW            R2, #:lower16:aTotalPoolsDNee ; "total_pools = %d, need to remove %d poo"...
STR             R7, [SP,#0x84C+var_84C]
ADD             R0, SP, #0x84C+s ; s
MOVT            R2, #:upper16:aTotalPoolsDNee ; "total_pools = %d, need to remove %d poo"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_3D440

loc_3D790
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D7B8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3D9E8

loc_3D7B8
ADD             R6, SP, #0x84C+attr
MOVW            R2, #:lower16:aPoolChangeSucc ; "pool change success, send %s"
MOV             R3, R6
ADD             R0, SP, #0x84C+s ; s
MOVT            R2, #:upper16:aPoolChangeSucc ; "pool change success, send %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_3D67C

loc_3D7E8
LDR             R3, [SP,#0x84C+var_830]
ADD             R0, SP, #0x84C+attr ; attr
LDR             R5, [R3]
LDR             R3, [R4,#(dword_68B68 - 0x686E8)]
ADD             R5, R5, R3,LSL#6
BL              pthread_attr_init
MOV             R1, #0x200000 ; stacksize
ADD             R0, SP, #0x84C+attr ; attr
BL              pthread_attr_setstacksize
MOVW            R2, #:lower16:sub_32050
ADD             R1, SP, #0x84C+attr
MOV             R0, R5
MOVT            R2, #:upper16:sub_32050
MOV             R3, #0
BL              sub_22F54
CMP             R0, #0
BNE             loc_3DA48
LDR             R0, [R5,#0xC] ; th
BL              pthread_detach
B               loc_3D6CC

loc_3D838
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D860
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3D9D0

loc_3D860
MOVW            LR, #:lower16:aInputPoolError ; "Input pool error, try again\n"
ADD             R12, SP, #0x84C+s
MOVT            LR, #:upper16:aInputPoolError ; "Input pool error, try again\n"
LDM             LR!, {R0-R3} ; "Input pool error, try again\n"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; ", try again\n"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #3
STRB            R3, [R12]
BL              sub_1DD60

loc_3D890
LDR             R3, =unk_6A240
SUB             R0, R3, #4 ; mutex
BL              pthread_mutex_unlock
B               loc_3D6C0

loc_3D8A0
MOV             R8, #byte_72D90
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_3D8C8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3DA30

loc_3D8C8
MOVW            R12, #:lower16:aErrorPoolInput ; "error pool input"
ADD             LR, SP, #0x84C+s
MOVT            R12, #:upper16:aErrorPoolInput ; "error pool input"
LDM             R12!, {R0-R3} ; "error pool input"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #3
STRB            R12, [LR]
BL              sub_1DD60

loc_3D8F4
LDR             R3, [R5]
CMP             R3, #0
BLE             loc_3D99C
MOVW            R6, #:lower16:dword_72F04
MOVW            R9, #:lower16:aPoolDUrlSUserS_0 ; "pool%d, url = %s, user = %s, pass = %s"...
MOVW            R10, #:lower16:byte_686E0
MOVW            R11, #:lower16:dword_67840
MOVT            R6, #:upper16:dword_72F04
MOVT            R9, #:upper16:aPoolDUrlSUserS_0 ; "pool%d, url = %s, user = %s, pass = %s"...
MOVT            R10, #:upper16:byte_686E0
MOVT            R11, #:upper16:dword_67840
MOV             R7, #0

loc_3D924
LDRB            R2, [R8]
LDR             R3, [R6]
CMP             R2, #0
LDR             R12, [R3,R7,LSL#2]
BNE             loc_3D950
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_3D950
LDR             R3, [R11]
CMP             R3, #2
BLE             loc_3D98C

loc_3D950
LDR             R1, [R12,#0xB0]
MOV             R2, R9  ; format
LDR             R3, [R12]
ADD             R0, SP, #0x84C+s ; s
STR             R1, [SP,#0x84C+var_844]
MOV             R1, #0x800 ; maxlen
LDR             LR, [R12,#0xAC]
STR             LR, [SP,#0x84C+var_848]
LDR             R12, [R12,#0xA4]
STR             R12, [SP,#0x84C+var_84C]
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_3D98C
LDR             R3, [R5]
ADD             R7, R7, #1
CMP             R3, R7
BGT             loc_3D924

loc_3D99C
MOV             R3, #byte_6A6E0
B               loc_3D6AC

loc_3D9A8
MOVW            R0, #:lower16:sub_20284
MOV             R2, #0x3E8
MOVT            R0, #:upper16:sub_20284
BL              sub_23220
MOVW            R0, #:lower16:loc_186A0
MOV             R3, #1
MOVT            R0, #:upper16:loc_186A0 ; useconds
STR             R3, [SP,#0x84C+var_834]
BL              usleep
B               loc_3D2FC

loc_3D9D0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_3D890
B               loc_3D860

loc_3D9E8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_3D7B8
B               loc_3D678

loc_3DA00
MOV             R2, #dword_67840
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_3D440
B               loc_3D764

loc_3DA18
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3D58C
B               loc_3D710

loc_3DA30
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_3D8F4
B               loc_3D8C8

loc_3DA48
MOVW            LR, #:lower16:aWatchpoolThrea ; "watchpool thread create failed"
ADD             R12, SP, #0x84C+s
MOVT            LR, #:upper16:aWatchpoolThrea ; "watchpool thread create failed"
LDM             LR!, {R0-R3} ; "watchpool thread create failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " create failed"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x84C+s
MOV             LR, R3,LSR#16
MOV             R0, #3
MOV             R2, #1
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_1DD60
MOV             R1, #0
MOV             R0, #1
BL              sub_2C230
; End of function sub_3D2A0

off_3DA8C DCD unk_6A240



; void sub_3DA90()
sub_3DA90

var_908= -0x908
var_904= -0x904
var_900= -0x900
s= -0x800

PUSH            {R4-R8,LR}
MOVW            R4, #:lower16:byte_686E8
SUB             SP, SP, #0x900
MOVW            R1, #:lower16:aRb ; "rb"
SUB             SP, SP, #8
MOVT            R4, #:upper16:byte_686E8
MOVT            R1, #:upper16:aRb ; "rb"
LDR             R0, [R4,#(dword_688F8 - 0x686E8)]
ADD             R5, SP, #0x908+var_900
BL              fopen64
MOV             R2, #0x100 ; n
MOV             R6, R0
MOV             R1, #0  ; c
MOV             R0, R5  ; s
BL              memset
CMP             R6, #0
BEQ             loc_3DC24
MOV             R3, R6  ; stream
MOV             R2, #0x100 ; n
MOV             R1, #1  ; size
MOV             R0, R5  ; ptr
BL              fread
CMP             R0, #0
BLE             loc_3DCF0
MOV             R1, #0xA ; c
MOV             R0, R5  ; s
BL              strchr
SUBS            R7, R0, #0
BEQ             loc_3DD8C
MOVW            R4, #:lower16:byte_6A6E0
LDR             R8, =aReadVersionFil ; "read_version_file"
MOVT            R4, #:upper16:byte_6A6E0
MOVW            R2, #0x2D7B
SUB             R6, R4, #0x480
MOV             R3, #aCgminerC ; "cgminer.c"
SUB             R0, R6, #4
STR             R2, [SP,#0x908+var_904]
MOV             R1, R5
SUB             R2, R7, R5
STR             R8, [SP,#0x908+var_908]
BL              sub_232EC
ADD             R1, R7, #1
MOV             R0, R5
BL              stpcpy
MOV             R1, #0xA ; c
MOV             R7, R0
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_3DD74
MOVW            R12, #0x2D84
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
SUB             R2, R0, R5
STR             R8, [SP,#0x908+var_908]
MOV             R1, R5
STR             R12, [SP,#0x908+var_904]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
SUB             R0, R4, #0x384
BL              sub_232EC

loc_3DB80
SUB             R6, R6, #4
MOV             R0, R6  ; s
BL              strlen
SUB             R0, R0, #1
ADD             R2, R4, R0
LDRB            R3, [R2,#-0x484]
CMP             R3, #0xA
BNE             loc_3DBBC
MOV             R3, #0
MOV             R0, R6  ; s
STRB            R3, [R2,#-0x484]
BL              strlen
SUB             R0, R0, #1
ADD             R3, R4, R0
LDRB            R3, [R3,#-0x484]

loc_3DBBC
CMP             R3, #0xD
ADDEQ           R0, R4, R0
MOVEQ           R3, #0
STRBEQ          R3, [R0,#-0x484]
LDR             R0, =byte_6A35C ; s
BL              strlen
SUB             R0, R0, #1
ADD             R2, R4, R0
LDRB            R3, [R2,#-0x384]
CMP             R3, #0xA
BNE             loc_3DC04
MOV             R3, #0
LDR             R0, =byte_6A35C ; s
STRB            R3, [R2,#-0x384]
BL              strlen
SUB             R0, R0, #1
ADD             R3, R4, R0
LDRB            R3, [R3,#-0x384]

loc_3DC04
CMP             R3, #0xD
MOVW            R5, #0x2D90
ADDEQ           R4, R4, R0
MOVEQ           R3, #0
MOVTNE          R5, #7
MOVTEQ          R5, #7
STRBEQ          R3, [R4,#-0x384]
B               loc_3DC74

loc_3DC24
MOV             R5, #byte_72D90
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3DC4C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3DD5C

loc_3DC4C
MOVW            R2, #:lower16:aOpenMinerVersi ; "Open miner version file %s error"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aOpenMinerVersi ; "Open miner version file %s error"
LDR             R3, [R4,#(dword_688F8 - 0x686E8)]
ADD             R0, SP, #0x908+s ; s
BL              snprintf
ADD             R1, SP, #0x908+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_3DC74
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3DC94
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3DCD0

loc_3DC94
LDR             R3, =byte_6A35C
MOVW            R2, #:lower16:aMinerCompileTi ; "Miner compile time: %s type: %s"
ADD             R0, SP, #0x908+s ; s
MOVT            R2, #:upper16:aMinerCompileTi ; "Miner compile time: %s type: %s"
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x908+var_908]
SUB             R3, R3, #0x100
BL              snprintf
ADD             R1, SP, #0x908+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
ADD             SP, SP, #0x900
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_3DCD0
MOV             R3, #dword_67840

loc_3DCD8
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_3DC94
ADD             SP, SP, #0x900
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_3DCF0
MOV             R5, #byte_72D90
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3DD2C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3DD2C
MOV             R3, #dword_67840
LDR             R2, [R3]
CMP             R2, #2
BLE             loc_3DCD8

loc_3DD2C
MOVW            R2, #:lower16:aReadMinerVersi ; "Read miner version file %s error %d"
LDR             R3, [R4,#(dword_688F8 - 0x686E8)]
MOVT            R2, #:upper16:aReadMinerVersi ; "Read miner version file %s error %d"
STR             R0, [SP,#0x908+var_908]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x908+s ; s
BL              snprintf
ADD             R1, SP, #0x908+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
B               loc_3DC74

loc_3DD5C
MOV             R3, #dword_67840
LDR             R2, [R3]
CMP             R2, #2
BLE             loc_3DCD8
B               loc_3DC4C

loc_3DD74
SUB             R2, R7, R5
MOV             R1, R5  ; src
ADD             R2, R2, #1 ; n
SUB             R0, R4, #0x384 ; dest
BL              memcpy
B               loc_3DB80

loc_3DD8C
LDR             R6, =unk_6A260
MOV             R1, R5  ; src
SUB             R0, R6, #4 ; dest
ADD             R4, R6, #0x480
BL              strcpy
B               loc_3DB80
; End of function sub_3DA90

off_3DDA4 DCD aReadVersionFil ; "read_version_file"
off_3DDA8 DCD byte_6A35C
off_3DDAC DCD unk_6A260



; void sub_3DDB0()
sub_3DDB0

var_1224= -0x1224
var_1220= -0x1220
var_1218= -0x1218
var_1214= -0x1214
var_1210= -0x1210
var_120C= -0x120C
s2= -0x1208
var_1200= -0x1200
var_11A4= -0x11A4
var_1104= -0x1104
s= -0x904

PUSH            {R4-R11,LR}
MOV             R4, #byte_686E1
SUB             SP, SP, #0x1200
SUB             SP, SP, #0x24
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_3DE24
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3DDF8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3E034

loc_3DDF8
ADD             R5, SP, #0x1224+s
MOV             R2, #aStartS ; "START %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
LDR             R3, =aLoadDefaultCon_0 ; "load_default_config_without_restart"
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_3DE24
MOV             R5, #byte_686E8
LDR             R0, [R5,#(dword_68A08 - 0x686E8)] ; ptr
CMP             R0, #0
BEQ             loc_3DE3C
BL              free

loc_3DE3C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2EB4
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aLoadDefaultCon_0 ; "load_default_config_without_restart"
MOV             R0, #0x1000
BL              sub_1F828
STR             R0, [R5,#(dword_68A08 - 0x686E8)]
BL              sub_2B370
MOV             R1, #4  ; type
LDR             R0, [R5,#(dword_68A08 - 0x686E8)] ; name
BL              access
SUBS            R6, R0, #0
BNE             loc_3DFA8
LDRB            R3, [R4]
LDR             R8, [R5,#(dword_68A08 - 0x686E8)]
CMP             R3, #0
BNE             loc_3DF3C

loc_3DE80
ADD             R5, SP, #0x1224+s

loc_3DE84               ; n
MOV             R2, #0x900
MOV             R1, #0  ; c
MOV             R0, R5  ; s
BL              memset
CMP             R8, #0
BEQ             loc_3DFC4
MOV             R1, #0
ADD             R2, SP, #0x1224+var_1200
MOV             R0, R8
BL              sub_47FA8
SUBS            R7, R0, #0
BEQ             loc_3DEC0
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_3E04C

loc_3DEC0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3DEFC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3DEFC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_3DFB8

loc_3DEFC
ADD             R3, SP, #0x1224+var_11A4
MOVW            R2, #:lower16:aSJsonDecodeOfF ; "%s: JSON decode of file '%s' failed\n %"...
STR             R3, [SP,#0x1224+var_1220]
ADD             R0, SP, #0x1224+var_1104 ; s
LDR             R3, =aJudgeLoadConfi ; "judge_load_config"
MOVT            R2, #:upper16:aSJsonDecodeOfF ; "%s: JSON decode of file '%s' failed\n %"...
STR             R8, [SP,#0x1224+var_1224]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x1224+var_1104
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
ADD             SP, SP, #0x1200
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_3DF3C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3DF78
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3DF78
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3DE80

loc_3DF78
ADD             R5, SP, #0x1224+s
MOVW            R2, #:lower16:aStartS_0 ; "start %s\n"
MOV             R0, R5  ; s
MOVT            R2, #:upper16:aStartS_0 ; "start %s\n"
LDR             R3, =aJudgeLoadConfi ; "judge_load_config"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_3DE84

loc_3DFA8               ; ptr
LDR             R0, [R5,#(dword_68A08 - 0x686E8)]
BL              free
MOV             R3, #0
STR             R3, [R5,#(dword_68A08 - 0x686E8)]

loc_3DFB8
ADD             SP, SP, #0x1200
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_3DFC4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E000
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E000
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_3DFB8

loc_3E000
MOVW            R2, #:lower16:aSBadParam ; "%s: bad param"
LDR             R3, =aJudgeLoadConfi ; "judge_load_config"
ADD             R0, SP, #0x1224+var_1104 ; s
MOVT            R2, #:upper16:aSBadParam ; "%s: bad param"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x1224+var_1104
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
ADD             SP, SP, #0x1200
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_3E034
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3DE24
B               loc_3DDF8

loc_3E04C
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_3E0BC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E094
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E094
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3E0BC

loc_3E094
MOVW            R2, #:lower16:aSAfterJsonLoad ; "%s: after json_load_file\n"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSAfterJsonLoad ; "%s: after json_load_file\n"
ADD             R0, SP, #0x1224+var_1104 ; s
LDR             R3, =aJudgeLoadConfi ; "judge_load_config"
BL              snprintf
ADD             R1, SP, #0x1224+var_1104
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_3E0BC
MOVW            R1, #:lower16:aPools_0 ; "pools"
MOV             R0, R7
MOVT            R1, #:upper16:aPools_0 ; "pools"
BL              sub_48AF4
SUBS            R8, R0, #0
BEQ             loc_3E0E0
LDR             R3, [R8]
CMP             R3, #1
BEQ             loc_3E204

loc_3E0E0
MOV             R5, #0

loc_3E0E4
MOVW            R1, #:lower16:aBitmainFreqLev ; "bitmain-freq-level"
MOV             R0, R7
MOVT            R1, #:upper16:aBitmainFreqLev ; "bitmain-freq-level"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_3E108
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_3E3F0

loc_3E108
LDR             R3, [R7,#4]
CMN             R3, #1
BNE             loc_3E1D4

loc_3E114
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_3E184
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E15C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E15C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3E184

loc_3E15C
MOVW            R2, #:lower16:aRet0xX ; "ret = 0x%x"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aRet0xX ; "ret = 0x%x"
ADD             R0, SP, #0x1224+var_1104 ; s
MOV             R3, R5
BL              snprintf
ADD             R1, SP, #0x1224+var_1104
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_3E184
CMP             R5, #2
BEQ             loc_3E1BC
CMP             R5, #3
BEQ             loc_3E1A0
CMP             R5, #1
BNE             loc_3DFB8
B               loc_3E1AC

loc_3E1A0
MOV             R1, #4
LDR             R0, =dword_68200
BL              sub_42680

loc_3E1AC
BL              sub_2987C
ADD             SP, SP, #0x1200
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_3E1BC
MOV             R1, #4
LDR             R0, =dword_68200
BL              sub_42680
ADD             SP, SP, #0x1200
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_3E1D4
ADD             R3, R7, #4
DMB             ISH

loc_3E1DC
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_3E1DC
CMP             R2, #0
BNE             loc_3E114
MOV             R0, R7
BL              sub_4942C
B               loc_3E114

loc_3E204
MOVW            R9, #:lower16:aUrl ; "url"
MOVW            R10, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
BL              sub_48E60
MOVT            R9, #:upper16:aUrl ; "url"
MOV             R3, R10
MOVW            R2, #:lower16:aUser ; "user"
STR             R0, [SP,#0x1224+var_1210]
STR             R9, [SP,#0x1224+var_1218]
MOVT            R3, #:upper16:(aReceivedFromPr+0x1C) ; "%s"
MOVT            R2, #:upper16:aUser ; "user"
MOV             R9, #0
MOV             R0, R8
STR             R5, [SP,#0x1224+s2]
MOV             R11, R5
STR             R2, [SP,#0x1224+var_1214]
STR             R7, [SP,#0x1224+var_120C]
MOV             R5, R3
BL              sub_48E60
CMP             R0, R9
BLS             loc_3E3C8

loc_3E254
MOV             R1, R9
MOV             R0, R8
BL              sub_48E7C
SUBS            R7, R0, #0
BEQ             loc_3E3C8
LDR             R2, [R7]
SUB             R3, R9, #3
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_3E3C8
LDR             R1, [SP,#0x1224+var_1218]
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_3E3C8
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_3E3C8
BL              sub_49028
MOV             R2, R5  ; format
MOV             R3, R0
MOV             R1, #0x100 ; maxlen
MOV             R0, R11 ; s
BL              snprintf
LDR             R1, [SP,#0x1224+var_1214]
MOV             R0, R7
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_3E3C8
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_3E3C8
ADD             R10, R11, #0x100
BL              sub_49028
MOV             R2, R5  ; format
MOV             R3, R0
MOV             R1, #0x100 ; maxlen
MOV             R0, R10 ; s
BL              snprintf
MOVW            R1, #:lower16:aPass ; "pass"
MOV             R0, R7
MOVT            R1, #:upper16:aPass ; "pass"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_3E3C8
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_3E3C8
ADD             R7, R11, #0x200
BL              sub_49028
MOV             R2, R5  ; format
MOV             R3, R0
MOV             R1, #0x100 ; maxlen
MOV             R0, R7  ; s
BL              snprintf
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_3E3B0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E380
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E380
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3E3B0

loc_3E380
MOVW            R2, #:lower16:aSSS ; "%s\n%s\n%s\n"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSSS ; "%s\n%s\n%s\n"
STR             R7, [SP,#0x1224+var_1220]
ADD             R0, SP, #0x1224+var_1104 ; s
STR             R10, [SP,#0x1224+var_1224]
MOV             R3, R11
BL              snprintf
ADD             R1, SP, #0x1224+var_1104
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_3E3B0
ADD             R9, R9, #1
MOV             R0, R8
BL              sub_48E60
CMP             R0, R9
ADD             R11, R11, #0x300
BHI             loc_3E254

loc_3E3C8
MOVW            R3, #:lower16:dword_72E60
LDR             R2, [SP,#0x1224+var_1210]
MOVT            R3, #:upper16:dword_72E60
LDR             R7, [SP,#0x1224+var_120C]
LDR             R3, [R3]
LDR             R5, [SP,#0x1224+s2]
CMP             R2, R3
BEQ             loc_3E41C

loc_3E3E8
MOV             R5, #1
B               loc_3E0E4

loc_3E3F0
BL              sub_49028
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
BL              strtol
MOV             R3, #off_67A68 ; "--version-file"
LDR             R2, [R3,#(dword_68200 - 0x67A68)]
CMP             R0, R2
ORRNE           R5, R5, #2
STRNE           R0, [R3,#(dword_68200 - 0x67A68)]
B               loc_3E108

loc_3E41C
LDR             R10, [SP,#0x1224+var_1210]
CMP             R10, #0
BLE             loc_3E0E0
MOV             R3, #dword_72F04
LDR             R9, [R3]
SUB             R9, R9, #4
B               loc_3E46C

loc_3E43C               ; s1
LDR             R0, [R8,#0xAC]
BL              strcmp
CMP             R0, #0
ADD             R1, R5, #0x200 ; s2
ADD             R5, R5, #0x300
BNE             loc_3E3E8
LDR             R0, [R8,#0xB0] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_3E3E8
CMP             R10, R6
BEQ             loc_3E0E0

loc_3E46C
LDR             R8, [R9,#4]!
MOV             R1, R5  ; s2
ADD             R6, R6, #1
LDR             R0, [R8,#0xA4] ; s1
BL              strcmp
CMP             R0, #0
ADD             R1, R5, #0x100 ; s2
BEQ             loc_3E43C
B               loc_3E3E8
; End of function sub_3DDB0

off_3E490 DCD aLoadDefaultCon_0 ; "load_default_config_without_restart"
off_3E494 DCD aJudgeLoadConfi ; "judge_load_config"
off_3E498 DCD dword_68200



; char *__fastcall sub_3E49C(const char *, const char *)
sub_3E49C
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R6, R0
BL              strlen
MOV             R5, R0
MOV             R0, R4  ; s
BL              strlen
ADD             R0, R5, R0 ; size
BL              malloc
MOV             R2, R4
MOV             R5, R0
MOV             R1, R6  ; format
BL              sprintf
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_3E49C




; int __fastcall sub_3E4D8(_BYTE *)
sub_3E4D8
MOV             R3, #1
STRB            R3, [R0]
MOV             R0, #0
BX              LR
; End of function sub_3E4D8




; int __fastcall sub_3E4E8(_BYTE *)
sub_3E4E8
MOV             R3, #0
STRB            R3, [R0]
MOV             R0, R3
BX              LR
; End of function sub_3E4E8




; int __fastcall sub_3E4F8(_BYTE *)
sub_3E4F8
MOV             R3, #0
STRB            R3, [R0]
MOV             R0, R3
BX              LR
; End of function sub_3E4F8




; char *__fastcall sub_3E508(const char *, _BYTE *)
sub_3E508
PUSH            {R4-R6,LR}
MOV             R5, R1
MOVW            R1, #:lower16:aYes ; "yes"
MOV             R4, R0
MOVT            R1, #:upper16:aYes ; "yes"
BL              strcasecmp
CMP             R0, #0
BEQ             loc_3E58C
MOVW            R1, #:lower16:aTrue ; "true"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aTrue ; "true"
BL              strcasecmp
CMP             R0, #0
BEQ             loc_3E58C
MOVW            R1, #:lower16:aNo ; "no"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aNo ; "no"
BL              strcasecmp
CMP             R0, #0
BEQ             loc_3E57C
MOVW            R1, #:lower16:aFalse ; "false"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aFalse ; "false"
BL              strcasecmp
CMP             R0, #0
BEQ             loc_3E57C
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_3F040

loc_3E57C
MOV             R3, #0
MOV             R0, #0
STRB            R3, [R5]
POP             {R4-R6,PC}

loc_3E58C
MOV             R3, #1
MOV             R0, #0
STRB            R3, [R5]
POP             {R4-R6,PC}
; End of function sub_3E508




; char *__fastcall sub_3E59C(const char *, _BYTE *)
sub_3E59C
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_3E508
CMP             R0, #0
LDRBEQ          R3, [R4]
EOREQ           R3, R3, #1
STRBEQ          R3, [R4]
POP             {R4,PC}
; End of function sub_3E59C




; int __fastcall sub_3E5BC(int, _DWORD *)
sub_3E5BC
STR             R0, [R1]
MOV             R0, #0
BX              LR
; End of function sub_3E5BC




; char *__fastcall sub_3E5C8(const char *, _DWORD *)
sub_3E5C8

var_4= -4

PUSH            {R4-R6,LR}
SUB             SP, SP, #8
MOV             R6, R1
MOV             R4, R0
BL              __errno_location
MOV             R3, #0
MOV             R5, R0
STR             R3, [R5]
MOV             R0, R4
ADD             R1, SP, #8+var_4
BL              strtof
LDR             R3, [SP,#8+var_4]
VSTR            S0, [R6]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E638
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_3E638
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_3E648
MOVW            R0, #:lower16:aSIsOutOfRange ; "'%s' is out of range"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsOutOfRange ; "'%s' is out of range"
BL              sub_3E49C
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_3E638
MOVW            R0, #:lower16:aSIsNotANumber ; "'%s' is not a number"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsNotANumber ; "'%s' is not a number"
BL              sub_3E49C

loc_3E648
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_3E5C8




; char *__fastcall sub_3E650(const char *, int *)
sub_3E650

endptr= -4

PUSH            {R4-R6,LR}
SUB             SP, SP, #8
MOV             R6, R1
MOV             R4, R0
BL              __errno_location
MOV             R2, #0  ; base
MOV             R5, R0
ADD             R1, SP, #8+endptr ; endptr
MOV             R0, R4  ; nptr
STR             R2, [R5]
BL              strtol
LDR             R3, [SP,#8+endptr]
STR             R0, [R6]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E6C0
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_3E6C0
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_3E6D0
MOVW            R0, #:lower16:aSIsOutOfRange ; "'%s' is out of range"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsOutOfRange ; "'%s' is out of range"
BL              sub_3E49C
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_3E6C0
MOVW            R0, #:lower16:aSIsNotANumber ; "'%s' is not a number"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsNotANumber ; "'%s' is not a number"
BL              sub_3E49C

loc_3E6D0
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_3E650




; char *__fastcall sub_3E6D8(const char *, _DWORD *)
sub_3E6D8

var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R1
ADD             R1, SP, #8+var_4
BL              sub_3E650
CMP             R0, #0
LDREQ           R3, [SP,#8+var_4]
STREQ           R3, [R4]
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_3E6D8

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R5, R1
ADD             R1, SP, #4
MOV             R4, R0
BL              sub_3E650
CMP             R0, #0
BEQ             loc_3E728

loc_3E720
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_3E728
LDR             R3, [SP,#4]
CMP             R3, #0
STRGE           R3, [R5]
BGE             loc_3E720
MOVW            R0, #:lower16:aSIsNegative ; "'%s' is negative"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsNegative ; "'%s' is negative"
BL              sub_3E49C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R4, R1
ADD             R1, SP, #4
MOV             R5, R0
BL              sub_3E650
CMP             R0, #0
BEQ             loc_3E778

loc_3E770
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_3E778
LDR             R3, [SP,#4]
CMP             R3, #0
STR             R3, [R4]
BGE             loc_3E770
MOVW            R0, #:lower16:aSIsNegative ; "'%s' is negative"
MOV             R1, R5
MOVT            R0, #:upper16:aSIsNegative ; "'%s' is negative"
BL              sub_3E49C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}



; int __fastcall sub_3E7A0(_DWORD *)
sub_3E7A0
MOV             R2, R0
MOV             R0, #0
LDR             R3, [R2]
ADD             R3, R3, #1
STR             R3, [R2]
BX              LR
; End of function sub_3E7A0



; Attributes: noreturn

; void __fastcall __noreturn sub_3E7B8(const char *)
sub_3E7B8
PUSH            {R4,LR}
BL              puts
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
MOV             R0, #0  ; status
BL              exit
; End of function sub_3E7B8



; Attributes: noreturn

; void __fastcall __noreturn sub_3E7D8(int)
sub_3E7D8
MOVW            R3, #:lower16:dword_762F8
PUSH            {R4,LR}
MOVT            R3, #:upper16:dword_762F8
MOV             R1, R0
LDR             R0, [R3]
BL              sub_3F558
MOV             R1, R0
MOV             R0, #(aReceivedFromPr+0x1C) ; format
BL              printf
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
MOV             R0, #0  ; status
BL              exit
; End of function sub_3E7D8




; char *__fastcall sub_3E818(char *, unsigned __int8 *)
sub_3E818
LDRB            R12, [R1]
MOVW            R3, #:lower16:aFalse ; "false"
MOVW            R1, #:lower16:aTrue ; "true"
MOVT            R3, #:upper16:aFalse ; "false"
MOVT            R1, #:upper16:aTrue ; "true"
MOV             R2, #0x50 ; 'P'
CMP             R12, #0
MOVEQ           R1, R3
B               strncpy
; End of function sub_3E818




; char *__fastcall sub_3E83C(char *, unsigned __int8 *)
sub_3E83C
LDRB            R12, [R1]
MOVW            R3, #:lower16:aTrue ; "true"
MOVW            R1, #:lower16:aFalse ; "false"
MOVT            R3, #:upper16:aTrue ; "true"
MOVT            R1, #:upper16:aFalse ; "false"
MOV             R2, #0x50 ; 'P'
CMP             R12, #0
MOVEQ           R1, R3
B               strncpy
; End of function sub_3E83C




; char *__fastcall sub_3E860(_BYTE *, const char **)
sub_3E860
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R0, [R1] ; s
MOV             R7, R1
MOV             R6, #0x22 ; '"'
BL              strlen
CMP             R0, #0x4E ; 'N'
MOV             R5, R0
MOV             R0, R4
STRB            R6, [R0],#1 ; dest
LDR             R1, [R7] ; src
BHI             loc_3E8B0
MOV             R2, R5  ; n
ADD             R4, R4, R5
BL              strncpy
CMP             R5, #0x4E ; 'N'
STRB            R6, [R4,#1]
MOVNE           R3, #0
STRBNE          R3, [R4,#2]
POP             {R4-R8,PC}

loc_3E8B0               ; n
MOV             R2, #0x4E ; 'N'
BL              strncpy
STRB            R6, [R4,#0x4F]
POP             {R4-R8,PC}
; End of function sub_3E860




; int __fastcall sub_3E8C0(char *, _DWORD *)
sub_3E8C0
MOVW            R2, #:lower16:aI ; "%i"
LDR             R3, [R1]
MOVT            R2, #:upper16:aI ; "%i"
MOV             R1, #0x50 ; 'P'
B               snprintf
; End of function sub_3E8C0




; int __fastcall sub_3E8D4(char *, float *)
sub_3E8D4

var_C= -0xC

PUSH            {LR}
MOVW            R2, #:lower16:a1f ; "%.1f"
VLDR            S14, [R1]
SUB             SP, SP, #0xC
MOVT            R2, #:upper16:a1f ; "%.1f"
MOV             R1, #0x50 ; 'P' ; maxlen
VCVT.F64.F32    D7, S14
VSTR            D7, [SP,#0xC+var_C]
BL              snprintf
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_3E8D4




; int __fastcall sub_3E900(char *, _DWORD *)
sub_3E900
MOVW            R2, #:lower16:aU ; "%u"
LDR             R3, [R1]
MOVT            R2, #:upper16:aU ; "%u"
MOV             R1, #0x50 ; 'P'
B               snprintf
; End of function sub_3E900




; int __fastcall sub_3E914(char *, _DWORD *)
sub_3E914
MOVW            R2, #:lower16:aLi ; "%li"
LDR             R3, [R1]
MOVT            R2, #:upper16:aLi ; "%li"
MOV             R1, #0x50 ; 'P'
B               snprintf
; End of function sub_3E914




; int __fastcall sub_3E928(char *, _DWORD *)
sub_3E928
MOVW            R2, #:lower16:(aGlobalQuotaGre+0x30) ; "%lu"
LDR             R3, [R1]
MOVT            R2, #:upper16:(aGlobalQuotaGre+0x30) ; "%lu"
MOV             R1, #0x50 ; 'P'
B               snprintf
; End of function sub_3E928




; const char *__fastcall sub_3E93C(unsigned int *, size_t *)
sub_3E93C
MOVW            R3, #:lower16:dword_762EC
MOV             R2, #0
MOVT            R3, #:upper16:dword_762EC
PUSH            {R4-R6,LR}
STR             R2, [R0]
LDR             R2, [R3]
CMP             R2, #0
BEQ             loc_3E9D4
MOV             R2, #dword_762F4
LDR             R12, [R2]
LDR             LR, [R12,#4]
CMP             LR, #8
BEQ             loc_3E99C

loc_3E974
LDR             R4, [R12]
MOV             R5, R1
MOV             R1, #asc_55D0C ; reject
ADD             R4, R4, #1
MOV             R0, R4  ; s
BL              strcspn
STR             R0, [R5]

loc_3E994
MOV             R0, R4
POP             {R4-R6,PC}

loc_3E99C
MOV             R4, #0x1C
MOV             LR, #1

loc_3E9A4
STR             LR, [R0]
LDR             R12, [R3]
CMP             R12, LR
ADD             LR, LR, #1
BLS             loc_3E9D4
LDR             R12, [R2]
ADD             R12, R12, R4
ADD             R4, R4, #0x1C
LDR             R5, [R12,#4]
CMP             R5, #8
BNE             loc_3E974
B               loc_3E9A4

loc_3E9D4
MOV             R4, #0
B               loc_3E994
; End of function sub_3E93C




; int __fastcall sub_3E9DC(int, size_t *)
sub_3E9DC
PUSH            {R4-R6,LR}
LDR             R4, [R1]
LDRB            R3, [R0,R4]
ADD             R0, R0, R4
AND             R2, R3, #0xDF
CMP             R2, #0
CMPNE           R3, #0x3D ; '='
MOVEQ           R4, #0
BEQ             loc_3EA1C
MOV             R5, R1
ADD             R4, R0, #2
MOVW            R1, #:lower16:asc_55D0C ; "|= "
MOV             R0, R4  ; s
MOVT            R1, #:upper16:asc_55D0C ; reject
BL              strcspn
STR             R0, [R5]

loc_3EA1C
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_3E9DC




; int __fastcall sub_3EA24(int, unsigned int *, size_t *)
sub_3EA24
PUSH            {R4-R8,LR}
MOV             R6, #dword_762EC
LDR             R3, [R1]
MOV             R4, R1
LDR             R1, [R6]
CMP             R3, R1
BCS             loc_3EAA0
MOVW            R7, #:lower16:dword_762F4
MOV             LR, R0
MOV             R5, R2
MOVT            R7, #:upper16:dword_762F4

loc_3EA54
LDR             R12, [R7]
RSB             R2, R3, R3,LSL#3
MOV             R0, LR
MOV             R1, R5
ADD             R2, R12, R2,LSL#2
LDR             R12, [R2,#4]
CMP             R12, #8
BEQ             loc_3EA8C
CMP             LR, #0
BEQ             loc_3EAAC
BL              sub_3E9DC
SUBS            LR, R0, #0
BNE             loc_3EAD0
LDR             R3, [R4]

loc_3EA8C
ADD             R3, R3, #1
STR             R3, [R4]
LDR             R2, [R6]
CMP             R3, R2
BCC             loc_3EA54

loc_3EAA0
MOV             R4, #0
MOV             R0, R4
POP             {R4-R8,PC}

loc_3EAAC
LDR             LR, [R2]
MOV             R1, #asc_55D0C ; reject
ADD             R4, LR, #1
MOV             R0, R4  ; s
BL              strcspn
STR             R0, [R5]
MOV             R0, R4
POP             {R4-R8,PC}

loc_3EAD0
MOV             R4, LR
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_3EA24




; int __fastcall sub_3EADC(const char **)
sub_3EADC

var_10= -0x10
status= -4

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x10
LDRD            R2, R3, [R0]
SUB             R1, R3, #1
CMP             R3, #4
CMPNE           R1, #1
BHI             loc_3EC40
LDR             R3, [R0,#0x18]
MOV             R5, R0
CMP             R3, #0
BEQ             loc_3EC30
LDRB            R3, [R2]
CMP             R3, #0x2D ; '-'
BNE             loc_3EC20
ADD             R4, R2, #1
MOVW            R1, #:lower16:asc_55D0C ; "|= "
MOVW            R8, #:lower16:dword_762E8
MOVW            R7, #:lower16:dword_762F0
MOVW            R6, #:lower16:dword_762E4
MOV             R0, R4  ; s
MOVT            R1, #:upper16:asc_55D0C ; reject
MOVT            R8, #:upper16:dword_762E8
BL              strcspn
MOVT            R7, #:upper16:dword_762F0
MOVT            R6, #:upper16:dword_762E4
STR             R0, [SP,#0x10+status]
B               loc_3EBA4

loc_3EB48
CMP             R0, #1
BNE             loc_3EBD4
LDR             R12, [R5,#4]
LDR             R2, [R8]
SUB             R3, R12, #2
BICS            R3, R3, #2
ADD             R2, R2, #1
LDREQ           R3, [R7]
STR             R2, [R8]
ADDEQ           R3, R3, #1
STREQ           R3, [R7]

loc_3EB74
CMP             R12, #1
BNE             loc_3EB8C
LDRB            R3, [R4,R0]
CMP             R3, #0x3D ; '='
CMPNE           R3, #0x20 ; ' '
BEQ             loc_3EBF4

loc_3EB8C
MOV             R0, R4
ADD             R1, SP, #0x10+status
BL              sub_3E9DC
SUBS            R4, R0, #0
BEQ             loc_3EBCC
LDR             R0, [SP,#0x10+status] ; status

loc_3EBA4
LDRB            R3, [R4]
CMP             R3, #0x2D ; '-'
BNE             loc_3EB48
CMP             R0, #1
BEQ             loc_3EC10
LDR             R3, [R6]
LDR             R12, [R5,#4]
ADD             R3, R3, #1
STR             R3, [R6]
B               loc_3EB74

loc_3EBCC
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_3EBD4
SUB             R4, R4, #1
MOVW            R1, #:lower16:aOptionSInvalid ; "Option %s: invalid short option '%.*s'"
LDR             R2, [R5]
ADD             R3, R0, #1
STR             R4, [SP,#0x10+var_10]
MOVT            R1, #:upper16:aOptionSInvalid ; "Option %s: invalid short option '%.*s'"
MOV             R0, #1  ; status
BL              errx

loc_3EBF4
ADD             R3, R0, #1
MOVW            R1, #:lower16:aOptionSDoesNot ; "Option %s: does not take arguments '%s'"
ADD             R3, R4, R3
LDR             R2, [R5]
MOV             R0, R12 ; status
MOVT            R1, #:upper16:aOptionSDoesNot ; "Option %s: does not take arguments '%s'"
BL              errx

loc_3EC10
MOVW            R1, #:lower16:aOptionSInvalid_0 ; "Option %s: invalid long option '--'"
LDR             R2, [R5]
MOVT            R1, #:upper16:aOptionSInvalid_0 ; "Option %s: invalid long option '--'"
BL              errx

loc_3EC20
MOVW            R1, #:lower16:aOptionSDoesNot_0 ; "Option %s: does not begin with '-'"
MOV             R0, #1  ; status
MOVT            R1, #:upper16:aOptionSDoesNot_0 ; "Option %s: does not begin with '-'"
BL              errx

loc_3EC30
MOVW            R1, #:lower16:aOptionSDescrip ; "Option %s: description cannot be NULL"
MOV             R0, #1  ; status
MOVT            R1, #:upper16:aOptionSDescrip ; "Option %s: description cannot be NULL"
BL              errx

loc_3EC40
MOVW            R1, #:lower16:aOptionSUnknown ; "Option %s: unknown entry type %u"
MOV             R0, #1  ; status
MOVT            R1, #:upper16:aOptionSUnknown ; "Option %s: unknown entry type %u"
BL              errx
; End of function sub_3EADC




; int __fastcall sub_3EC50(int *)
sub_3EC50
PUSH            {R4-R6,LR}
MOV             R5, #dword_762EC
MOV             R6, #dword_762F4
MOV             R4, R0
LDR             R1, [R5]
LDR             R0, [R6] ; ptr
ADD             R1, R1, #1
RSB             R1, R1, R1,LSL#3
MOV             R1, R1,LSL#2 ; size
BL              realloc
LDR             R3, [R5]
MOV             LR, R4
MOV             R12, R0
STR             R0, [R6]
ADD             R2, R3, #1
STR             R2, [R5]
RSB             R4, R3, R3,LSL#3
LDM             LR!, {R0-R3}
ADD             R12, R12, R4,LSL#2
STM             R12!, {R0-R3}
LDM             LR, {R0-R2}
STM             R12, {R0-R2}
POP             {R4-R6,PC}
; End of function sub_3EC50




; const char *__fastcall sub_3ECB4(unsigned int *, size_t *)
sub_3ECB4
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
BL              sub_3E93C
CMP             R0, #0
BNE             loc_3ECE4
B               loc_3ED04

loc_3ECD0
MOV             R2, R4
MOV             R1, R5
BL              sub_3EA24
CMP             R0, #0
BEQ             loc_3ED04

loc_3ECE4
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BNE             loc_3ECD0
LDR             R3, [R4]
ADD             R0, R0, #1
SUB             R3, R3, #1
STR             R3, [R4]
POP             {R4-R6,PC}

loc_3ED04
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_3ECB4




; _BYTE *__fastcall sub_3ED0C(int, unsigned int *, size_t *)
sub_3ED0C
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R2
BL              sub_3EA24
CMP             R0, #0
BNE             loc_3ED3C
B               loc_3ED5C

loc_3ED28
MOV             R2, R4
MOV             R1, R5
BL              sub_3EA24
CMP             R0, #0
BEQ             loc_3ED5C

loc_3ED3C
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BNE             loc_3ED28
LDR             R3, [R4]
ADD             R0, R0, #1
SUB             R3, R3, #1
STR             R3, [R4]
POP             {R4-R6,PC}

loc_3ED5C
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_3ED0C




; const char *__fastcall sub_3ED64(unsigned int *)
sub_3ED64

var_8= -8
var_4= -4

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R3, #0
ADD             R4, SP, #0xC+var_4
MOV             R5, R0
STR             R3, [R4,#-4]!
MOV             R1, R4
BL              sub_3E93C
CMP             R0, #0
BNE             loc_3EDA4
B               loc_3EDB8

loc_3ED90
MOV             R2, R4
MOV             R1, R5
BL              sub_3EA24
CMP             R0, #0
BEQ             loc_3EDB8

loc_3EDA4
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BEQ             loc_3ED90
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_3EDB8
MOV             R0, #0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_3ED64




; _BYTE *__fastcall sub_3EDC4(int, unsigned int *)
sub_3EDC4

var_8= -8
var_4= -4

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R3, #1
ADD             R4, SP, #0xC+var_4
MOV             R5, R1
STR             R3, [R4,#-4]!
MOV             R2, R4
BL              sub_3EA24
CMP             R0, #0
BNE             loc_3EE04
B               loc_3EE18

loc_3EDF0
MOV             R2, R4
MOV             R1, R5
BL              sub_3EA24
CMP             R0, #0
BEQ             loc_3EE18

loc_3EE04
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BEQ             loc_3EDF0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_3EE18
MOV             R0, #0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_3EDC4




; int __fastcall sub_3EE24(const char *, const char *, const char *, const char *, const char *, const char *, const char *)
sub_3EE24

var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8
arg_0=  4
arg_4=  8
arg_8=  0xC

PUSH            {LR}
SUB             SP, SP, #0x24
LDR             LR, [SP,#0x24+arg_0]
LDR             R12, [SP,#0x24+arg_4]
STR             R1, [SP,#0x24+var_1C]
LDR             R1, [SP,#0x24+arg_8]
STR             R0, [SP,#0x24+var_20]
ADD             R0, SP, #0x24+var_20
STRD            R2, R3, [SP,#0x24+var_18]
STR             LR, [SP,#0x24+var_10]
STR             R12, [SP,#0x24+var_C]
STR             R1, [SP,#0x24+var_8]
BL              sub_3EADC
ADD             R0, SP, #0x24+var_20
BL              sub_3EC50
ADD             SP, SP, #0x24 ; '$'
POP             {PC}
; End of function sub_3EE24




; int __fastcall sub_3EE68(int result, int)
sub_3EE68

var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R7,LR}
MOVW            R5, #:lower16:dword_762EC
SUBS            R7, R1, #0
MOVT            R5, #:upper16:dword_762EC
SUB             SP, SP, #0x24
MOV             R4, R0
LDR             R6, [R5]
BEQ             loc_3EF18
MOV             R3, #0
MOV             R2, #8
ADD             R0, SP, #0x24+var_20
STR             R3, [SP,#0x24+var_20]
STR             R3, [SP,#0x24+var_18]
STR             R3, [SP,#0x24+var_14]
STR             R3, [SP,#0x24+var_10]
STR             R3, [SP,#0x24+var_C]
STR             R7, [SP,#0x24+var_8]
STR             R2, [SP,#0x24+var_1C]
BL              sub_3EC50
LDR             R3, [R4,#4]
CMP             R3, #0x10
BEQ             loc_3EEF0

loc_3EEC0
CMP             R3, #8
MOV             R0, R4
BEQ             loc_3EF2C
BL              sub_3EADC
MOV             R0, R4
BL              sub_3EC50

loc_3EED8
ADD             R4, R4, #0x1C
LDR             R3, [R4,#4]
CMP             R3, #0x10
BNE             loc_3EEC0
CMP             R7, #0
BEQ             loc_3EF10

loc_3EEF0
MOVW            R1, #:lower16:dword_762F4
RSB             R0, R6, R6,LSL#3
MOVT            R1, #:upper16:dword_762F4
LDR             R2, [R5]
LDR             R3, [R1]
SUB             R6, R2, R6
ADD             R3, R3, R0,LSL#2
STR             R6, [R3,#0x14]

loc_3EF10
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}

loc_3EF18
LDR             R3, [R0,#4]
CMP             R3, #0x10
BNE             loc_3EEC0
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}

loc_3EF2C
LDR             R1, [R4,#0x18]
LDR             R0, [R4]
BL              sub_3EE68
B               loc_3EED8
; End of function sub_3EE68




; bool __fastcall sub_3EF3C(_DWORD *, const char **, void (*)(const char *, ...))
sub_3EF3C

var_8= -8
var_4= -4

PUSH            {R4-R7,LR}
MOV             R5, R1
LDR             R1, [R1]
SUB             SP, SP, #0xC
MOVW            R3, #:lower16:dword_762F8
MOV             R7, R0
MOV             R6, R2
MOVT            R3, #:upper16:dword_762F8
MOV             R2, #0
ADD             R4, SP, #0xC+var_4
STR             R1, [R3]
STR             R2, [R4,#-4]!

loc_3EF6C
MOV             R3, R6
MOV             R2, R4
MOV             R1, R5
MOV             R0, R7
BL              sub_3F0A8
CMP             R0, #1
BEQ             loc_3EF6C
CLZ             R0, R0
MOV             R0, R0,LSR#5
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_3EF3C




; void sub_3EF98()
sub_3EF98
PUSH            {R4,LR}
MOV             R4, #dword_762F4
LDR             R0, [R4] ; ptr
BL              free
MOV             R3, #0
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_3EF98




; int sub_3EFB8(const char *, ...)
sub_3EFB8

var_4= -4
varg_r0=  8
varg_r1=  0xC
varg_r2=  0x10
varg_r3=  0x14

PUSH            {R0-R3}
PUSH            {R4,LR}
MOVW            R4, #:lower16:stderr
SUB             SP, SP, #8
MOVT            R4, #:upper16:stderr
ADD             R3, SP, #8+varg_r1
MOV             R2, R3  ; arg
LDR             R1, [SP,#8+varg_r0] ; format
LDR             R0, [R4] ; s
STR             R3, [SP,#8+var_4]
BL              vfprintf
LDR             R1, [R4] ; stream
MOV             R0, #0xA ; c
BL              fputc
ADD             SP, SP, #8
POP             {R4,LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_3EFB8



; Attributes: noreturn

; void __noreturn sub_3F000(const char *, ...)
sub_3F000

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
MOVW            R4, #:lower16:stderr
PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R3, SP, #0xC+varg_r1
MOVT            R4, #:upper16:stderr
MOV             R2, R3  ; arg
LDR             R1, [SP,#0xC+varg_r0] ; format
LDR             R0, [R4] ; s
STR             R3, [SP,#0xC+var_8]
BL              vfprintf
LDR             R1, [R4] ; stream
MOV             R0, #0xA ; c
BL              fputc
MOV             R0, #1  ; status
BL              exit
; End of function sub_3F000




; char *__fastcall sub_3F040(const char *)
sub_3F040
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              strlen
ADD             R0, R0, #0x16 ; size
BL              malloc
MOVW            R1, #:lower16:aInvalidArgumen ; "Invalid argument '%s'"
MOV             R4, R0
MOV             R2, R5
MOVT            R1, #:upper16:aInvalidArgumen ; "Invalid argument '%s'"
BL              sprintf
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_3F040




; void *__fastcall sub_3F070(_DWORD *, int, int)
sub_3F070
PUSH            {R4,LR}
MOV             R4, R0
LDR             R3, [R0]
MOV             R0, R2,LSL#2
ADD             R12, R0, #4
ADD             R0, R1, R0 ; dest
SUB             R2, R3, R2
ADD             R1, R1, R12 ; src
MOV             R2, R2,LSL#2 ; n
BL              memmove
LDR             R3, [R4]
SUB             R3, R3, #1
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_3F070




; int __fastcall sub_3F0A8(_DWORD *, const char **, int *, void (*)(const char *, ...))
sub_3F0A8

var_1C= -0x1C
var_14= -0x14
var_10= -0x10
var_C= -0xC
n= -8

PUSH            {R4-R11,LR}
MOV             R8, R0
MOVW            R0, #:lower16:aPosixlyCorrect ; "POSIXLY_CORRECT"
SUB             SP, SP, #0x1C
MOVT            R0, #:upper16:aPosixlyCorrect ; "POSIXLY_CORRECT"
MOV             R5, R1
MOV             R7, R2
MOV             R9, R3
BL              getenv
CMP             R0, #0
LDR             R0, [R5,#4]
BEQ             loc_3F0FC
CMP             R0, #0
ADD             R6, R5, #4
BEQ             loc_3F0F4
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
MOVNE           R0, #0
BEQ             loc_3F238

loc_3F0F4
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_3F0FC
CMP             R0, #0
BEQ             loc_3F0F4
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BEQ             loc_3F140
ADD             R3, R5, #8
MOV             R4, #1
B               loc_3F128

loc_3F11C
LDRB            R2, [R0]
CMP             R2, #0x2D ; '-'
BEQ             loc_3F148

loc_3F128
MOV             R6, R3
LDR             R0, [R3],#4
ADD             R4, R4, #1
CMP             R0, #0
BNE             loc_3F11C
B               loc_3F0F4

loc_3F140
ADD             R6, R5, #4
MOV             R4, #1

loc_3F148
LDRB            R3, [R0,#1]
CMP             R3, #0x2D ; '-'
BEQ             loc_3F214

loc_3F154
ADD             R3, SP, #0x1C+var_C
MOV             R0, R3
STR             R3, [SP,#0x1C+var_14]
BL              sub_3ED64
CMP             R0, #0
BEQ             loc_3F320
LDR             LR, [R7]
LDR             R3, [R6]
LDRB            R2, [R0]
ADD             LR, LR, #1
LDRB            R3, [R3,LR]
CMP             R2, R3
LDRNE           R10, [SP,#0x1C+var_14]
BNE             loc_3F3E8

loc_3F18C
LDR             R12, [SP,#0x1C+var_C]
SUB             R1, R0, #1
MOVW            R2, #:lower16:dword_762F4
STR             R1, [SP,#0x1C+var_14]
MOVT            R2, #:upper16:dword_762F4
MOV             R0, #2
STR             LR, [R7]
RSB             R1, R12, R12,LSL#3
LDR             R3, [R2]
STR             R0, [SP,#0x1C+n]
MOV             R1, R1,LSL R0
ADD             R3, R3, R1
LDR             R0, [R3,#4]
CMP             R0, #1
BEQ             loc_3F358

loc_3F1C8
CMP             LR, #0
BNE             loc_3F3C4

loc_3F1D0
ADD             R3, R4, #1
LDR             R10, [R5,R3,LSL#2]
CMP             R10, #0
BEQ             loc_3F4D8

loc_3F1E0
LDR             R3, [R2]
ADD             R1, R3, R1
LDR             R0, [R1,#4]
CMP             R0, #4
BEQ             loc_3F458

loc_3F1F4
RSB             R12, R12, R12,LSL#3
MOV             R0, R10
ADD             R3, R3, R12,LSL#2
LDR             R2, [R3,#0xC]
LDR             R1, [R3,#0x14]
BLX             R2
MOV             R11, R0
B               loc_3F36C

loc_3F214
LDRB            R10, [R0,#2]
CMP             R10, #0
BNE             loc_3F24C
MOV             R0, R8
MOV             R2, R4
MOV             R1, R5
BL              sub_3F070
MOV             R0, R10
B               loc_3F0F4

loc_3F238
LDRB            R3, [R0,#1]
MOV             R4, #1
CMP             R3, #0x2D ; '-'
BNE             loc_3F154
B               loc_3F214

loc_3F24C
LDR             R3, [R7]
CMP             R3, #0
BNE             loc_3F538
ADD             R3, SP, #0x1C+var_C
ADD             R1, SP, #0x1C+n
MOV             R0, R3
STR             R3, [SP,#0x1C+var_14]
BL              sub_3ECB4
SUBS            R11, R0, #0
BEQ             loc_3F320
MOV             R3, R7
MOV             R7, R11
MOV             R11, R3
STR             R4, [SP,#0x1C+var_10]

loc_3F284
LDR             R10, [R6]
MOV             R1, R7  ; s2
LDR             R4, [SP,#0x1C+n]
ADD             R0, R10, #2 ; s1
MOV             R2, R4  ; n
BL              strncmp
CMP             R0, #0
BNE             loc_3F308
ADD             LR, R4, #2
LDRB            R2, [R10,LR]
CMP             R2, #0x3D ; '='
BEQ             loc_3F478
CMP             R2, #0
BNE             loc_3F308
LDR             R12, [SP,#0x1C+var_C]
MOV             R3, R11
MOVW            R2, #:lower16:dword_762F4
MOV             R11, R7
MOVT            R2, #:upper16:dword_762F4
MOV             R7, R3
SUB             R3, R11, #2
LDR             R4, [SP,#0x1C+var_10]
RSB             R1, R12, R12,LSL#3
STR             R3, [SP,#0x1C+var_14]
LDR             R3, [R2]
MOV             R1, R1,LSL#2
STR             LR, [SP,#0x1C+n]
ADD             R3, R3, R1
LDR             R0, [R3,#4]
CMP             R0, #1
BEQ             loc_3F358

loc_3F300
LDR             LR, [R7]
B               loc_3F1C8

loc_3F308
MOV             R0, R7
ADD             R2, SP, #0x1C+n
LDR             R1, [SP,#0x1C+var_14]
BL              sub_3ED0C
SUBS            R7, R0, #0
BNE             loc_3F284

loc_3F320
LDR             R4, [R6]
MOV             R0, R4  ; s
BL              strlen
MOVW            R12, #:lower16:aUnrecognizedOp ; "unrecognized option"
MOV             R2, R0
MOVT            R12, #:upper16:aUnrecognizedOp ; "unrecognized option"
MOVW            R0, #:lower16:aSSS_0 ; "%s: %.*s: %s"
LDR             R1, [R5]
MOVT            R0, #:upper16:aSSS_0 ; "%s: %.*s: %s"
MOV             R3, R4
STR             R12, [SP,#0x1C+var_1C]
BLX             R9
MOV             R0, #0xFFFFFFFF
B               loc_3F0F4

loc_3F358
LDR             R2, [R3,#8]
MOV             R10, #0
LDR             R0, [R3,#0x14]
BLX             R2
MOV             R11, R0

loc_3F36C
CMP             R11, #0
BNE             loc_3F42C
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_3F398
LDR             R2, [R6]
ADD             R3, R2, R3
LDRB            R3, [R3,#1]
CMP             R3, #0
BNE             loc_3F3BC
STR             R11, [R7]

loc_3F398
MOV             R2, R4
MOV             R1, R5
MOV             R0, R8
BL              sub_3F070
CMP             R10, #0
BEQ             loc_3F3BC
LDR             R3, [R6]
CMP             R3, R10
BEQ             loc_3F418

loc_3F3BC
MOV             R0, #1
B               loc_3F0F4

loc_3F3C4
LDR             R3, [R6]
ADD             LR, LR, #1
LDRB            R0, [R3,LR]
ADD             R10, R3, LR
CMP             R0, #0
MOVNE           R3, #0
STRNE           R3, [R7]
BNE             loc_3F1E0
B               loc_3F1D0

loc_3F3E8
MOV             R1, R10
BL              sub_3EDC4
CMP             R0, #0
BEQ             loc_3F320
LDR             LR, [R7]
LDR             R2, [R6]
LDRB            R3, [R0]
ADD             LR, LR, #1
LDRB            R2, [R2,LR]
CMP             R2, R3
BEQ             loc_3F18C
B               loc_3F3E8

loc_3F418
MOV             R2, R4
MOV             R1, R5
MOV             R0, R8
BL              sub_3F070
B               loc_3F3BC

loc_3F42C
MOVW            R0, #:lower16:aSSS_0 ; "%s: %.*s: %s"
LDR             R1, [R5]
LDR             R2, [SP,#0x1C+n]
MOVT            R0, #:upper16:aSSS_0 ; "%s: %.*s: %s"
LDR             R3, [SP,#0x1C+var_14]
STR             R11, [SP,#0x1C+var_1C]
BLX             R9
MOV             R0, R11 ; ptr
BL              free
MOV             R0, #0xFFFFFFFF
B               loc_3F0F4

loc_3F458
LDR             R1, [R1,#0x14]
MOV             R0, R10
STR             R2, [SP,#0x1C+var_10]
BL              sub_3E5BC
LDR             R2, [SP,#0x1C+var_10]
LDR             R12, [SP,#0x1C+var_C]
LDR             R3, [R2]
B               loc_3F1F4

loc_3F478
LDR             R12, [SP,#0x1C+var_C]
MOV             R2, R11
MOV             R11, R7
MOV             R7, R2
MOVW            R2, #:lower16:dword_762F4
MOV             R3, R10
MOVT            R2, #:upper16:dword_762F4
MOV             R10, R4
RSB             R1, R12, R12,LSL#3
LDR             R0, [R2]
ADD             R10, R10, #3
LDR             R4, [SP,#0x1C+var_10]
MOV             R1, R1,LSL#2
ADD             R10, R3, R10
SUB             R3, R11, #2
STR             LR, [SP,#0x1C+n]
STR             R3, [SP,#0x1C+var_14]
ADD             R3, R0, R1
LDR             R0, [R3,#4]
CMP             R0, #1
BEQ             loc_3F504
CMP             R10, #0
BNE             loc_3F1E0
B               loc_3F300

loc_3F4D8
MOVW            R12, #:lower16:aRequiresAnArgu ; "requires an argument"
MOVW            R0, #:lower16:aSSS_0 ; "%s: %.*s: %s"
MOVT            R12, #:upper16:aRequiresAnArgu ; "requires an argument"
LDR             R1, [R5]
MOVT            R0, #:upper16:aSSS_0 ; "%s: %.*s: %s"
LDR             R2, [SP,#0x1C+n]
LDR             R3, [SP,#0x1C+var_14]
STR             R12, [SP,#0x1C+var_1C]
BLX             R9
MOV             R0, #0xFFFFFFFF
B               loc_3F0F4

loc_3F504
CMP             R10, #0
BEQ             loc_3F358
MOVW            R12, #:lower16:aDoesnTAllowAnA ; "doesn't allow an argument"
MOVW            R0, #:lower16:aSSS_0 ; "%s: %.*s: %s"
MOVT            R12, #:upper16:aDoesnTAllowAnA ; "doesn't allow an argument"
LDR             R1, [R5]
MOVT            R0, #:upper16:aSSS_0 ; "%s: %.*s: %s"
LDR             R3, [SP,#0x1C+var_14]
MOV             R2, LR
STR             R12, [SP,#0x1C+var_1C]
BLX             R9
MOV             R0, #0xFFFFFFFF
B               loc_3F0F4

loc_3F538
MOVW            R3, #:lower16:aParseOne ; "parse_one"
MOVW            R1, #:lower16:aCcanOptParseC ; "ccan/opt/parse.c"
MOVW            R0, #:lower16:aOffset0 ; "*offset == 0"
MOVT            R3, #:upper16:aParseOne ; "parse_one"
MOVT            R1, #:upper16:aCcanOptParseC ; "ccan/opt/parse.c"
MOVT            R0, #:upper16:aOffset0 ; "*offset == 0"
MOV             R2, #0x3B ; ';' ; line
BL              __assert_fail
; End of function sub_3F0A8




; char *__fastcall sub_3F558(const char *, const char *)
sub_3F558

var_74= -0x74
var_70= -0x70
s= -0x6C
var_68= -0x68
var_64= -0x64
var_60= -0x60
var_58= -0x58
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x74
MOV             R5, R1
STR             R0, [SP,#0x74+var_74]
MOVW            R10, #:lower16:dword_762EC
BL              strlen
MOVW            R3, #:lower16:dword_762E8
CMP             R5, #0
MOVT            R3, #:upper16:dword_762E8
MOVT            R10, #:upper16:dword_762EC
LDR             R7, [R3]
LDR             R9, [R10]
ADD             R7, R7, #0x14
ADD             R7, R7, R0
BEQ             loc_3F924
MOV             R0, R5  ; s
BL              strlen
CMP             R9, #0
ADD             R7, R7, R0
BEQ             loc_3F648
MOV             R6, #dword_762F4
LDR             R4, [R6]

loc_3F5B4
MOVW            R6, #:lower16:unk_762FC
MOV             R8, #0
MOVT            R6, #:upper16:unk_762FC
STR             R5, [SP,#0x74+var_70]
B               loc_3F610

loc_3F5C8
CMP             R11, R6
BEQ             loc_3F600
LDR             R0, [R4] ; s
BL              strlen
MOV             R7, R0
MOV             R0, R11 ; s
BL              strlen
LDR             R3, [R4,#0x10]
ADD             R7, R7, R5
ADD             R0, R7, R0
ADD             R7, R0, #0x76 ; 'v'
CMP             R3, #0
ADDEQ           R7, R0, #0x15
ADD             R7, R7, #1

loc_3F600
ADD             R8, R8, #1
ADD             R4, R4, #0x1C
CMP             R8, R9
BCS             loc_3F644

loc_3F610
LDR             R3, [R4,#4]
ADD             R5, R7, #6
LDR             R11, [R4,#0x18]
CMP             R3, #8
BNE             loc_3F5C8
MOV             R0, R11 ; s
ADD             R8, R8, #1
BL              strlen
CMP             R8, R9
ADD             R7, R7, #3
ADD             R7, R0, R7
ADD             R4, R4, #0x1C
BCC             loc_3F610

loc_3F644
LDR             R5, [SP,#0x74+var_70]

loc_3F648               ; size
MOV             R0, R7
BL              malloc
SUBS            R4, R0, #0
STR             R4, [SP,#0x74+var_60]
BEQ             loc_3F8E4
MOVW            R1, #:lower16:aUsageS ; "Usage: %s"
LDR             R2, [SP,#0x74+var_74]
MOVT            R1, #:upper16:aUsageS ; "Usage: %s"
BL              sprintf
MOVW            R3, #:lower16:asc_55EB0 ; " [-"
MOV             R2, R0
MOVT            R3, #:upper16:asc_55EB0 ; " [-"
MOV             R1, R4
ADD             R4, R4, R0
LDR             R0, [R3] ; " [-"
ADD             R7, R4, #3
STR             R0, [R1,R2]
ADD             R0, SP, #0x74+var_58
BL              sub_3ED64
SUBS            R12, R0, #0
BEQ             loc_3F6F0
MOVW            R6, #:lower16:dword_762F4
MOVW            R9, #:lower16:unk_762FC
MOVT            R6, #:upper16:dword_762F4
MOVT            R9, #:upper16:unk_762FC
MOV             R8, #0

loc_3F6B0
LDR             R3, [SP,#0x74+var_58]
MOV             R0, R12
LDR             R2, [R6]
ADD             R1, SP, #0x74+var_58
RSB             R3, R3, R3,LSL#3
ADD             R3, R2, R3,LSL#2
LDR             R3, [R3,#0x18]
CMP             R3, R9
LDRBNE          R3, [R12]
STRBNE          R3, [R7,R8]
ADDNE           R8, R8, #1
BL              sub_3EDC4
SUBS            R12, R0, #0
BNE             loc_3F6B0
CMP             R8, #0
BNE             loc_3F908

loc_3F6F0
MOVW            R1, #:lower16:(aSJsonDecodeOfF+0x24) ; " %s"
MOV             R2, R5
MOVT            R1, #:upper16:(aSJsonDecodeOfF+0x24) ; format
MOV             R0, R4  ; s
BL              sprintf
MOVW            R3, #:lower16:word_4C1E4
LDR             R2, [R10]
MOVT            R3, #:upper16:word_4C1E4
ADD             R5, R4, R0
STR             R3, [SP,#0x74+var_74]
ADD             R5, R5, #1
LDRH            R3, [R3]
CMP             R2, #0
STRH            R3, [R4,R0]
BEQ             loc_3F8DC
MOVW            R3, #:lower16:asc_55EC4 ; "                    "
MOVW            R2, #0x2E2E
MOV             R7, #0
MOVW            R6, #:lower16:dword_762F4
MOVW            R9, #:lower16:unk_762FC
MOVW            R11, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOVT            R3, #:upper16:asc_55EC4 ; "                    "
MOVT            R2, #0x2E ; '.'
MOV             R8, R7
MOVT            R6, #:upper16:dword_762F4
MOVT            R9, #:upper16:unk_762FC
MOVT            R11, #:upper16:(aReceivedFromPr+0x1C) ; "%s"
STR             R3, [SP,#0x74+var_70]
STR             R2, [SP,#0x74+var_68]
B               loc_3F820

loc_3F768
CMP             R4, #0x13
MOVW            R1, #:lower16:aS_0 ; "%.*s"
RSBLS           R2, R4, #0x14
MOVHI           R2, #1
MOV             R0, R3  ; s
MOVT            R1, #:upper16:aS_0 ; "%.*s"
LDR             R3, [SP,#0x74+var_70]
BL              sprintf
LDR             R3, [R6]
ADD             R4, R0, R4
ADD             R0, R5, R4 ; s
MOV             R1, R11 ; format
ADD             R3, R3, R7
LDR             R2, [R3,#0x18]
BL              sprintf
LDR             R1, [R6]
ADD             R4, R0, R4
ADD             R3, R5, R4
ADD             R1, R1, R7
LDR             R2, [R1,#0x10]
CMP             R2, #0
BEQ             loc_3F7FC
STR             R3, [SP,#0x74+s]
ADD             R0, SP, #0x74+var_58
LDR             R3, [SP,#0x74+var_68]
STR             R3, [SP,#0x74+var_8]
LDR             R2, [R1,#0x10]
LDR             R1, [R1,#0x14]
BLX             R2
LDR             R3, [SP,#0x74+s]
MOVW            R1, #:lower16:aDefaultS ; " (default: %s)"
ADD             R2, SP, #0x74+var_58
MOVT            R1, #:upper16:aDefaultS ; " (default: %s)"
MOV             R0, R3  ; s
BL              sprintf
ADD             R4, R0, R4
ADD             R3, R5, R4

loc_3F7FC
LDR             R2, [SP,#0x74+var_74]
MOV             R5, R3
LDRH            R2, [R2]
STRH            R2, [R5],#1

loc_3F80C
LDR             R3, [R10]
ADD             R8, R8, #1
ADD             R7, R7, #0x1C
CMP             R3, R8
BLS             loc_3F8DC

loc_3F820
LDR             R3, [R6]
ADD             R3, R3, R7
LDR             R2, [R3,#0x18]
CMP             R2, R9
BEQ             loc_3F80C
LDR             R1, [R3,#4]
CMP             R1, #8
BEQ             loc_3F8F0
LDR             R2, [R3]
MOV             R1, R11 ; format
MOV             R0, R5  ; s
BL              sprintf
LDR             R2, [R6]
MOV             R4, R0
ADD             R3, R5, R0
ADD             R1, R2, R7
LDR             R1, [R1,#4]
CMP             R1, #2
BNE             loc_3F768
LDR             R2, [R2,R7]
MOV             R1, #0x20 ; ' ' ; c
STR             R3, [SP,#0x74+var_64]
MOV             R0, R2  ; s
STR             R2, [SP,#0x74+s]
BL              strchr
CMP             R0, #0
LDR             R2, [SP,#0x74+s]
LDR             R3, [SP,#0x74+var_64]
BNE             loc_3F768
MOV             R0, R2  ; s
MOV             R1, #0x3D ; '=' ; c
STR             R3, [SP,#0x74+s]
BL              strchr
CMP             R0, #0
LDR             R3, [SP,#0x74+s]
BNE             loc_3F768
MOVW            R2, #:lower16:aArg ; " <arg>"
ADD             R4, R4, #6
MOVT            R2, #:upper16:aArg ; " <arg>"
LDR             R0, [R2] ; " <arg>"
LDRH            R1, [R2,#(aArg+4 - 0x55EBC)] ; "g>"
LDRB            R2, [R2,#(aArg+6 - 0x55EBC)] ; ""
STR             R0, [R3]
STRH            R1, [R3,#4]
STRB            R2, [R3,#6]
ADD             R3, R5, R4
B               loc_3F768

loc_3F8DC
MOV             R3, #0
STRB            R3, [R5]

loc_3F8E4
LDR             R0, [SP,#0x74+var_60]
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R11,PC}

loc_3F8F0
MOVW            R1, #:lower16:aS_2 ; "%s:\n"
MOV             R0, R5  ; s
MOVT            R1, #:upper16:aS_2 ; "%s:\n"
BL              sprintf
ADD             R5, R5, R0
B               loc_3F80C

loc_3F908
MOVW            R3, #:lower16:word_563F8
ADD             R4, R7, R8
MOVT            R3, #:upper16:word_563F8
ADD             R4, R4, #1
LDRH            R3, [R3]
STRH            R3, [R7,R8]
B               loc_3F6F0

loc_3F924
CMP             R9, #0
BEQ             loc_3F990
MOVW            R6, #:lower16:dword_762F4
MOVW            R0, #:lower16:sub_3E7D8
MOVT            R6, #:upper16:dword_762F4
MOV             R2, R5
LDR             R4, [R6]
MOVT            R0, #:upper16:sub_3E7D8
MOV             R3, R4
B               loc_3F958

loc_3F94C
CMP             R2, R9
ADD             R3, R3, #0x1C
BEQ             loc_3F984

loc_3F958
LDR             R1, [R3,#8]
ADD             R2, R2, #1
CMP             R1, R0
BNE             loc_3F94C
LDR             R5, [R3,#0x14]
CMP             R5, #0
BEQ             loc_3F94C
MOV             R0, R5  ; s
BL              strlen
ADD             R7, R7, R0
B               loc_3F5B4

loc_3F984
MOV             R5, #(asc_4CF84+4) ; ""
B               loc_3F5B4

loc_3F990
MOV             R5, #(asc_4CF84+4) ; ""
B               loc_3F648
; End of function sub_3F558




; char *__fastcall sub_3F99C(char *result, __int16, unsigned int)
sub_3F99C
CMP             R2, #0
BEQ             loc_3FAA8
TST             R0, #3
PUSH            {R4-R6,LR}
UXTB            LR, R1
BEQ             loc_3F9F4
LDRB            R3, [R0]
CMP             R3, LR
POPEQ           {R4-R6,PC}
ADD             R3, R0, #1
B               loc_3F9E0

loc_3F9C8
TST             R3, #3
ADD             R3, R3, #1
BEQ             loc_3F9F4
LDRB            R12, [R0]
CMP             R12, LR
POPEQ           {R4-R6,PC}

loc_3F9E0
SUBS            R2, R2, #1
MOV             R0, R3
BNE             loc_3F9C8

loc_3F9EC
MOV             R0, #0
POP             {R4-R6,PC}

loc_3F9F4
MOV             R4, R1,LSL#8
CMP             R2, #3
UXTH            R4, R4
ORR             R4, R4, LR
ORR             R4, R4, R4,LSL#16
BLS             loc_3FA70
LDR             R3, [R0]
MOV             R6, #0xFEFEFEFF
MOV             R5, #0x80808080
EOR             R3, R3, R4
ADD             R1, R3, R6
BIC             R3, R1, R3
TST             R3, R5
ADDEQ           R12, R0, #4
BEQ             loc_3FA54
B               loc_3FA70

loc_3FA3C
LDR             R3, [R0]
EOR             R3, R3, R4
ADD             R1, R3, R6
BIC             R3, R1, R3
TST             R3, R5
BNE             loc_3FA70

loc_3FA54
SUB             R2, R2, #4
MOV             R0, R12
CMP             R2, #3
ADD             R12, R12, #4
BHI             loc_3FA3C
CMP             R2, #0
BEQ             loc_3F9EC

loc_3FA70
LDRB            R3, [R0]
CMP             R3, LR
POPEQ           {R4-R6,PC}
ADD             R2, R0, R2
ADD             R3, R0, #1
B               loc_3FA94

loc_3FA88
LDRB            R1, [R0]
CMP             R1, LR
POPEQ           {R4-R6,PC}

loc_3FA94
MOV             R0, R3
ADD             R3, R3, #1
CMP             R0, R2
BNE             loc_3FA88
B               loc_3F9EC

loc_3FAA8
MOV             R0, R2
BX              LR
; End of function sub_3F99C




; unsigned int __fastcall sub_3FAB0(int, unsigned int, int *)
sub_3FAB0
PUSH            {R4-R8,LR}
MOV             R6, #1
MOV             R12, R6
MOV             R4, #0
MOV             LR, #0xFFFFFFFF

loc_3FAC4
ADD             R3, R12, R4
ADD             R5, R0, LR
CMP             R3, R1
BCS             loc_3FB00

loc_3FAD4
LDRB            R5, [R5,R12]
LDRB            R7, [R0,R3]
CMP             R7, R5
BCS             loc_3FB68
MOV             R4, R3
MOV             R12, #1
SUB             R6, R3, LR
ADD             R3, R12, R4
CMP             R3, R1
ADD             R5, R0, LR
BCC             loc_3FAD4

loc_3FB00
MOV             R8, #1
MOV             R4, #0
MOV             R12, R8
MOV             R5, #0xFFFFFFFF
STR             R6, [R2]

loc_3FB14
ADD             R3, R12, R4
ADD             R6, R0, R5
CMP             R1, R3
BLS             loc_3FB50

loc_3FB24
LDRB            R6, [R6,R12]
LDRB            R7, [R0,R3]
CMP             R7, R6
BLS             loc_3FB80
MOV             R4, R3
MOV             R12, #1
SUB             R8, R3, R5
ADD             R3, R12, R4
CMP             R1, R3
ADD             R6, R0, R5
BHI             loc_3FB24

loc_3FB50
ADD             R0, LR, #1
ADD             R5, R5, #1
CMP             R5, R0
STRCS           R8, [R2]
MOVCS           R0, R5
POP             {R4-R8,PC}

loc_3FB68
BEQ             loc_3FB98
MOV             R6, #1
MOV             LR, R4
MOV             R12, R6
ADD             R4, R4, R6
B               loc_3FAC4

loc_3FB80
BEQ             loc_3FBAC
MOV             R8, #1
MOV             R5, R4
MOV             R12, R8
ADD             R4, R4, R8
B               loc_3FB14

loc_3FB98
CMP             R12, R6
ADD             R12, R12, #1
MOVEQ           R4, R3
MOVEQ           R12, #1
B               loc_3FAC4

loc_3FBAC
CMP             R12, R8
ADD             R12, R12, #1
MOVEQ           R4, R3
MOVEQ           R12, #1
B               loc_3FB14
; End of function sub_3FAB0




; int __fastcall sub_3FBC0(int, int, char *s1, unsigned int)
sub_3FBC0

var_424= -0x424
var_420= -0x420
var_41C= -0x41C
var_418= -0x418
var_414= -0x414
var_410= -0x410
var_408= -0x408
var_404= -0x404
var_14= -0x14
var_4= -4

CMP             R3, #2
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x420
MOV             R8, R3
SUB             SP, SP, #4
MOV             R5, R0
MOV             R9, R1
MOV             R7, R2
SUB             R4, R3, #1
BHI             loc_3FEB8
MOV             R6, R4
ADD             R10, SP, #0x424+var_404
MOV             R3, #1
STR             R3, [SP,#0x424+var_420]
STR             R3, [SP,#0x424+var_408]

loc_3FBFC
ADD             R2, SP, #0x424+var_14
SUB             R3, R10, #4
ADD             R2, R2, #0xC

loc_3FC08
STR             R8, [R3,#4]!
CMP             R3, R2
BNE             loc_3FC08
CMP             R8, #0
BEQ             loc_3FC3C
SUB             R1, R7, #1
MOV             R3, R4

loc_3FC24
LDRB            R2, [R1,#1]!
ADD             R0, SP, #0x424+var_4
ADD             R2, R0, R2,LSL#2
STR             R3, [R2,#-0x400]
SUBS            R3, R3, #1
BCS             loc_3FC24

loc_3FC3C
LDR             R10, [SP,#0x424+var_420]
MOV             R2, R6  ; n
MOV             R0, R7  ; s1
ADD             R1, R7, R10 ; s2
BL              memcmp
CMP             R0, #0
BNE             loc_3FDB8
SUB             R2, R6, #1
SUB             R3, R9, R8
STR             R2, [SP,#0x424+var_414]
ADD             R2, R7, R2
STR             R3, [SP,#0x424+var_424]
SUB             R3, R8, R10
STR             R2, [SP,#0x424+var_410]
RSB             R2, R6, #1
STR             R3, [SP,#0x424+var_418]
MOV             R3, R0
STR             R2, [SP,#0x424+var_41C]
B               loc_3FCAC

loc_3FC88
LDR             R2, [SP,#0x424+var_420]
CMP             R0, #0
CMPNE           R1, R2
MOV             R0, #0
LDRCC           R1, [SP,#0x424+var_418]
ADD             R3, R3, R1

loc_3FCA0
LDR             R2, [SP,#0x424+var_424]
CMP             R2, R3
BCC             loc_3FD94

loc_3FCAC
ADD             R2, R5, R3
ADD             R12, SP, #0x424+var_4
LDRB            R1, [R2,R4]
ADD             R1, R12, R1,LSL#2
LDR             R1, [R1,#-0x400]
CMP             R1, #0
BNE             loc_3FC88
CMP             R6, R0
MOVCS           R1, R6
MOVCC           R1, R0
CMP             R1, R4
BCS             loc_3FD18
ADD             R12, R1, R3
LDRB            R8, [R7,R1]
LDRB            R9, [R5,R12]
ADD             LR, R7, R1
ADD             R12, R5, R12
CMP             R9, R8
BEQ             loc_3FD0C
B               loc_3FDA4

loc_3FCFC
LDRB            R9, [LR,#1]!
LDRB            R8, [R12,#1]!
CMP             R9, R8
BNE             loc_3FDA4

loc_3FD0C
ADD             R1, R1, #1
CMP             R1, R4
BCC             loc_3FCFC

loc_3FD18
LDR             R1, [SP,#0x424+var_414]
CMP             R6, R0
MOV             LR, R1
BLS             loc_3FEDC
LDR             R9, [SP,#0x424+var_410]
ADD             R1, R1, R3
LDRB            R12, [R5,R1]
ADD             R1, R5, R1
LDRB            R8, [R9]
CMP             R8, R12
BNE             loc_3FEDC
MOV             R8, R9
SUB             R11, R0, #1
B               loc_3FD64

loc_3FD50
LDRB            R10, [R8,#-1]!
LDRB            R9, [R1,#-1]!
CMP             R10, R9
BNE             loc_3FD70
MOV             LR, R12

loc_3FD64
SUB             R12, LR, #1
CMP             R12, R11
BNE             loc_3FD50

loc_3FD70
ADD             R0, R0, #1
CMP             R0, LR
BHI             loc_3FEE4
LDR             R2, [SP,#0x424+var_420]
LDR             R0, [SP,#0x424+var_418]
ADD             R3, R3, R2
LDR             R2, [SP,#0x424+var_424]
CMP             R2, R3
BCS             loc_3FCAC

loc_3FD94
MOV             R0, #0

loc_3FD98
ADD             SP, SP, #0x420
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_3FDA4
LDR             R2, [SP,#0x424+var_41C]
MOV             R0, #0
ADD             R3, R2, R3
ADD             R3, R1, R3
B               loc_3FCA0

loc_3FDB8
SUB             R3, R8, R6
SUB             R2, R6, #1
CMP             R3, R6
SUB             R10, R9, R8
MOVCC           R3, R6
MOV             R9, #0
ADD             R3, R3, #1
ADD             R11, R7, R6
ADD             R1, R7, R2
STR             R3, [SP,#0x424+var_420]
RSB             R3, R6, #1
STR             R1, [SP,#0x424+var_41C]
STR             R3, [SP,#0x424+var_424]

loc_3FDEC
ADD             R0, R5, R9
ADD             R1, SP, #0x424+var_4
LDRB            R3, [R0,R4]
ADD             R3, R1, R3,LSL#2
LDR             R3, [R3,#-0x400]
CMP             R3, #0
BNE             loc_3FE98
CMP             R6, R4
BCS             loc_3FE54
ADD             R1, R6, R9
LDRB            R3, [R11]
LDRB            R12, [R5,R1]
ADD             R1, R5, R1
CMP             R12, R3
MOVNE           R3, R6
BNE             loc_3FEA8
MOV             R12, R11
MOV             R3, R6
B               loc_3FE48

loc_3FE38
LDRB            R8, [R12,#1]!
LDRB            LR, [R1,#1]!
CMP             R8, LR
BNE             loc_3FEA8

loc_3FE48
ADD             R3, R3, #1
CMP             R3, R4
BCC             loc_3FE38

loc_3FE54
CMN             R2, #1
BEQ             loc_3FD98
LDR             LR, [SP,#0x424+var_41C]
ADD             R3, R2, R9
LDRB            R12, [R5,R3]
ADD             R3, R5, R3
LDRB            R1, [LR]
CMP             R12, R1
BNE             loc_3FE94
MOV             R1, LR

loc_3FE7C
CMP             R1, R7
BEQ             loc_3FD98
LDRB            LR, [R1,#-1]!
LDRB            R12, [R3,#-1]!
CMP             LR, R12
BEQ             loc_3FE7C

loc_3FE94
LDR             R3, [SP,#0x424+var_420]

loc_3FE98
ADD             R9, R9, R3

loc_3FE9C
CMP             R9, R10
BLS             loc_3FDEC
B               loc_3FD94

loc_3FEA8
LDR             R1, [SP,#0x424+var_424]
ADD             R9, R1, R9
ADD             R9, R3, R9
B               loc_3FE9C

loc_3FEB8
ADD             R10, SP, #0x424+var_404
MOV             R1, R3
SUB             R2, R10, #4
MOV             R0, R7
BL              sub_3FAB0
LDR             R3, [SP,#0x424+var_408]
MOV             R6, R0
STR             R3, [SP,#0x424+var_420]
B               loc_3FBFC

loc_3FEDC
MOV             LR, R6
B               loc_3FD70

loc_3FEE4
MOV             R0, R2
B               loc_3FD98
; End of function sub_3FBC0




; int __fastcall memmem(char *, unsigned int, char *, unsigned int)
EXPORT memmem
memmem

var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_8= -8

PUSH            {R4-R11,LR}
SUBS            R4, R3, #0
SUB             SP, SP, #0x24
MOV             R6, R0
MOVEQ           R5, R0
BEQ             loc_40080
CMP             R4, R1
MOV             R7, R1
BHI             loc_4007C
CMP             R4, #0x1F
BHI             loc_400A0
MOV             R11, R2
MOV             R2, R1
LDRB            R1, [R11]
BL              sub_3F99C
SUB             R3, R4, #1
CMP             R0, #0
CLZ             R3, R3
MOV             R5, R0
MOV             R3, R3,LSR#5
MOVEQ           R3, #1
CMP             R3, #0
BNE             loc_40080
SUB             R2, R0, R6
SUB             R7, R7, R2
CMP             R4, R7
BHI             loc_4007C
CMP             R4, #2
BHI             loc_401A4
SUB             R6, R4, #1
MOV             R3, #1
STR             R3, [SP,#0x24+var_1C]
STR             R3, [SP,#0x24+var_8]

loc_3FF70
LDR             R8, [SP,#0x24+var_1C]
MOV             R2, R6  ; n
MOV             R0, R11 ; s1
ADD             R1, R11, R8 ; s2
BL              memcmp
CMP             R0, #0
BNE             loc_400B4
SUB             R3, R6, #1
SUB             R2, R7, R4 ; s1
STR             R3, [SP,#0x24+var_18]
ADD             R3, R11, R3
STR             R3, [SP,#0x24+var_10]
MOV             R12, R0
SUB             R3, R4, R8
STR             R3, [SP,#0x24+var_14]
RSB             R3, R6, #1
STR             R3, [SP,#0x24+var_20]

loc_3FFB4
CMP             R6, R12
MOVCS           R3, R6
MOVCC           R3, R12
CMP             R4, R3
BLS             loc_40004
ADD             R1, R3, R0
LDRB            R8, [R11,R3]
LDRB            R7, [R5,R1]
ADD             LR, R11, R3
ADD             R1, R5, R1
CMP             R8, R7
BEQ             loc_3FFF8
B               loc_4008C

loc_3FFE8
LDRB            R8, [LR,#1]!
LDRB            R7, [R1,#1]!
CMP             R8, R7
BNE             loc_4008C

loc_3FFF8
ADD             R3, R3, #1
CMP             R4, R3
BNE             loc_3FFE8

loc_40004
LDR             R3, [SP,#0x24+var_18]
CMP             R6, R12
MOV             LR, R3
BLS             loc_401C4
LDR             R8, [SP,#0x24+var_10]
ADD             R3, R3, R0
LDRB            R1, [R5,R3]
ADD             R3, R5, R3
LDRB            R7, [R8]
CMP             R7, R1
BNE             loc_401C4
MOV             R7, R8
SUB             R10, R12, #1
B               loc_40050

loc_4003C
LDRB            R9, [R7,#-1]!
LDRB            R8, [R3,#-1]!
CMP             R9, R8
BNE             loc_4005C
MOV             LR, R1

loc_40050
SUB             R1, LR, #1
CMP             R1, R10
BNE             loc_4003C

loc_4005C
ADD             R12, R12, #1
CMP             R12, LR
BHI             loc_401CC
LDR             R3, [SP,#0x24+var_1C]
LDR             R12, [SP,#0x24+var_14]
ADD             R0, R0, R3

loc_40074
CMP             R2, R0
BCS             loc_3FFB4

loc_4007C
MOV             R5, #0

loc_40080
MOV             R0, R5
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_4008C               ; int
LDR             R1, [SP,#0x24+var_20]
MOV             R12, #0
ADD             R0, R1, R0
ADD             R0, R0, R3 ; int
B               loc_40074

loc_400A0
BL              sub_3FBC0
MOV             R5, R0
MOV             R0, R5
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_400B4
SUB             R3, R4, R6
SUB             R9, R6, #1
CMP             R3, R6
SUB             R0, R7, R4
MOVCC           R3, R6
MOV             R7, #0
ADD             R8, R11, R6
RSB             R10, R6, #1
ADD             R2, R11, R9
ADD             R3, R3, #1
STR             R2, [SP,#0x24+var_1C]
STR             R3, [SP,#0x24+var_20]

loc_400E4
CMP             R4, R6
BLS             loc_40130
ADD             R2, R6, R7
LDRB            R3, [R8]
LDRB            R1, [R5,R2]
ADD             R2, R5, R2
CMP             R1, R3
MOVNE           R3, R6
BNE             loc_40184
MOV             R1, R8
MOV             R3, R6
B               loc_40124

loc_40114
LDRB            LR, [R1,#1]!
LDRB            R12, [R2,#1]!
CMP             LR, R12
BNE             loc_40184

loc_40124
ADD             R3, R3, #1
CMP             R4, R3
BNE             loc_40114

loc_40130
CMN             R9, #1
BEQ             loc_40174
LDR             R12, [SP,#0x24+var_1C]
ADD             R3, R9, R7
LDRB            R1, [R5,R3]
ADD             R3, R5, R3
LDRB            R2, [R12]
CMP             R1, R2
BNE             loc_40198
MOV             R2, R12
B               loc_4016C

loc_4015C
LDRB            R12, [R2,#-1]!
LDRB            R1, [R3,#-1]!
CMP             R12, R1
BNE             loc_40198

loc_4016C
CMP             R2, R11
BNE             loc_4015C

loc_40174
ADD             R5, R5, R7
MOV             R0, R5
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_40184
ADD             R7, R10, R7
ADD             R7, R7, R3

loc_4018C
CMP             R0, R7
BCS             loc_400E4
B               loc_4007C

loc_40198
LDR             R3, [SP,#0x24+var_20]
ADD             R7, R7, R3
B               loc_4018C

loc_401A4
ADD             R2, SP, #0x24+var_8
MOV             R1, R4
MOV             R0, R11
BL              sub_3FAB0
LDR             R3, [SP,#0x24+var_8]
MOV             R6, R0
STR             R3, [SP,#0x24+var_1C]
B               loc_3FF70

loc_401C4
MOV             LR, R6
B               loc_4005C

loc_401CC
ADD             R5, R5, R0
B               loc_40080
; End of function memmem

ALIGN 8



; void __fastcall sub_401D8(_DWORD *)
sub_401D8
ADD             R3, R0, #4
DMB             ISH

loc_401E0
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_401E0
CMP             R2, #0
BXNE            LR
B               sub_4942C
; End of function sub_401D8




; int __fastcall sub_40200(unsigned __int8 *, int)
sub_40200

var_8C4= -0x8C4
var_8C0= -0x8C0
var_8BC= -0x8BC
var_8A0= -0x8A0
var_88C= -0x88C
var_880= -0x880
var_878= -0x878
s= -0x800

PUSH            {R4-R10,LR}
MOV             R6, #byte_686E1
SUB             SP, SP, #0x9C0
MOV             R5, R0
LDRB            R2, [R6]
CMP             R2, #0
BEQ             loc_40270
MOV             R2, #byte_72D90
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_40248
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_40438

loc_40248
MOVW            R2, #:lower16:aGotNonceSzD ; "got nonce sz %d"
MOV             R3, R1
MOVT            R2, #:upper16:aGotNonceSzD ; "got nonce sz %d"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x9C0+s ; s
BL              snprintf
ADD             R1, SP, #0x9C0+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_40270               ; n
MOV             R2, #0x1C0
ADD             R1, R5, #5 ; src
MOV             R0, SP  ; dest
LDRB            R8, [R5]
LDR             R7, [R5,#1]
ADD             R4, R5, #0x1C4
BL              memcpy
LDRB            R10, [R5,#0x1C5]
ADD             R4, R4, #2
MOV             R0, #1  ; nmemb
MOV             R5, #dword_73F20
MOV             R1, R10 ; size
BL              calloc
MOV             R2, R10 ; n
MOV             R1, R4  ; src
BL              memcpy
LDRB            R9, [R4,R10]
ADD             R4, R4, R10
MOV             R3, R0
ADD             R4, R4, #1
MOV             R0, #1  ; nmemb
STR             R3, [SP,#0x9C0+var_8A0]
MOV             R1, R9  ; size
BL              calloc
MOV             R2, R9  ; n
MOV             R1, R4  ; src
BL              memcpy
LDRB            R10, [R4,R9]
MOV             R3, R0
ADD             R4, R4, R9
MOV             R0, #1  ; nmemb
STR             R3, [SP,#0x9C0+var_88C]
MOV             R1, R10 ; size
BL              calloc
MOV             R2, R10 ; n
ADD             R1, R4, #1 ; src
BL              memcpy
MOV             R1, #1  ; size
STR             R0, [SP,#0x9C0+var_880]
MOV             R0, R1  ; nmemb
BL              calloc
MOVW            R2, #:lower16:dword_72F04
STR             R0, [SP,#0x9C0+var_878]
MOVT            R2, #:upper16:dword_72F04
LDR             R3, [R5]
LDR             R2, [R2]
MOV             R1, R7
LDR             R2, [R2,R8,LSL#2]
STR             R2, [SP,#0x9C0+var_8BC]
LDR             R2, [R3]
STR             R2, [SP,#0x9C0+var_8C4]
LDR             R2, [R3]
LDR             R2, [R2]
STR             R2, [SP,#0x9C0+var_8C0]
LDR             R0, [R3]
BL              sub_2B7E8
CMP             R0, #0
BEQ             loc_40468
MOV             R1, R7
MOV             R0, SP
BL              sub_2B77C
CMP             R0, #0
BEQ             loc_40468
LDR             R3, [R5]
MOV             R1, SP
LDR             R0, [R3]
BL              sub_3BF78
MOV             R3, #dword_72DB0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_403A8
MOV             R3, #byte_72E64
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_4041C

loc_403A8
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_40408

loc_403B4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_403DC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_40450

loc_403DC
MOVW            R3, #:lower16:aCbBitmainSubmi ; "cb_bitmain_submit_nonce"
MOV             R2, #aSNonceSubmited ; "%s nonce submited"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x9C0+s ; s
MOVT            R3, #:upper16:aCbBitmainSubmi ; "cb_bitmain_submit_nonce"
BL              snprintf
ADD             R1, SP, #0x9C0+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_40408
MOV             R0, SP
BL              sub_2A5B8
MOV             R0, #0

loc_40414
ADD             SP, SP, #0x9C0
POP             {R4-R10,PC}

loc_4041C
MOV             R1, R7
MOV             R0, SP
BL              sub_2A854
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_40408
B               loc_403B4

loc_40438
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_40270
B               loc_40248

loc_40450
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_40408
B               loc_403DC

loc_40468
LDR             R3, [R5]
LDR             R0, [R3]
BL              sub_30E60
MOV             R0, SP
BL              sub_2A5B8
MOV             R0, #0xFFFFFFFF
B               loc_40414
; End of function sub_40200




; int __fastcall sub_40484(int)
sub_40484

var_808= -0x808
s= -0x800

PUSH            {R4,LR}
MOV             R4, R0
MOVW            R0, #:lower16:stru_76300
SUB             SP, SP, #0x810
MOVT            R0, #:upper16:stru_76300 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_404AC
ADD             SP, SP, #0x810
POP             {R4,PC}

loc_404AC
BL              __errno_location
LDR             R12, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOV             R1, #aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,R12}
ADD             R0, SP, #0x810+s ; s
STR             R4, [SP,#0x810+var_808]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_40484

ADD             SP, SP, #0x810
POP             {R4,PC}
off_404FC DCD aCbBitmainApiSt ; "cb_bitmain_api_stats"



; int __fastcall sub_40500(const char *, int)
sub_40500

var_92C= -0x92C
var_928= -0x928
var_924= -0x924
var_91C= -0x91C
var_918= -0x918
var_914= -0x914
var_910= -0x910
var_90C= -0x90C
var_908= -0x908
var_900= -0x900
var_8A4= -0x8A4
s= -0x804

MOVW            R3, #:lower16:byte_686E1
PUSH            {R4-R11,LR}
MOVT            R3, #:upper16:byte_686E1
SUB             SP, SP, #0x920
SUB             SP, SP, #0xC
MOV             R4, R0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_4057C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_4054C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_40718

loc_4054C
MOVW            R2, #:lower16:aSDS ; "%s(%d) : %s"
STR             R1, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aSDS ; "%s(%d) : %s"
MOV             R1, #0x800 ; maxlen
STR             R4, [SP,#0x92C+var_928]
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60

loc_4057C
MOV             R0, R4
ADD             R2, SP, #0x92C+var_900
MOV             R1, #0
BL              sub_47C50
SUBS            R4, R0, #0
BEQ             loc_405A0
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_40620

loc_405A0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_405E0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_405E0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0xFFFFFFFE
BLE             loc_40614

loc_405E0
ADD             R3, SP, #0x92C+var_8A4
MOVW            R2, #:lower16:aSLoadDataIsFai ; "%s: load data is failed(%s)"
STR             R3, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aSLoadDataIsFai ; "%s: load data is failed(%s)"
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x92C+s ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x92C+s
MOV             R2, #0
BL              sub_1DD60
MOV             R0, #0xFFFFFFFE

loc_40614
ADD             SP, SP, #0x920
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_40620               ; mutex
MOV             R0, #stru_76300
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_4083C

loc_40634
MOVW            R5, #:lower16:unk_76318
MOVW            R2, #0x1A10 ; n
MOVT            R5, #:upper16:unk_76318
MOV             R1, #0  ; c
MOV             R0, R5  ; s
BL              memset
MOVW            R1, #:lower16:aInited ; "inited"
MOV             R0, R4
MOVT            R1, #:upper16:aInited ; "inited"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_40670
LDR             R3, [R3]
CMP             R3, #3
BEQ             loc_4075C

loc_40670
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40730
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40730
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_40730

loc_406AC               ; mutex
MOV             R0, #stru_76300
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_4088C

loc_406C0
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [R4,#4]
CMN             R3, #1
BEQ             loc_40708
ADD             R3, R4, #4
DMB             ISH

loc_406E4
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_406E4

loc_406F8
CMP             R2, #0
BNE             loc_40708
MOV             R0, R4
BL              sub_4942C

loc_40708
MOV             R0, #0xFFFFFFFD
ADD             SP, SP, #0x920
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_40718
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_4057C
B               loc_4054C

loc_40730
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
B               loc_406AC

loc_4075C
BL              sub_49284
MOVW            R1, #:lower16:aChainNum ; "chain_num"
STR             R0, [R5,#(dword_76320 - 0x76318)]
MOVT            R1, #:upper16:aChainNum ; "chain_num"
MOV             R0, R4
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_40788
LDR             R3, [R3]
CMP             R3, #3
BEQ             loc_408DC

loc_40788
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_407C4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_407C4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_407EC

loc_407C4
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_407EC               ; mutex
MOV             R0, #stru_76300
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_409D0

loc_40800
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [R4,#4]
CMN             R3, #1
BEQ             loc_40708
ADD             R3, R4, #4
DMB             ISH

loc_40824
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BEQ             loc_406F8
B               loc_40824

loc_4083C
BL              __errno_location
LDR             LR, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0x99
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x92C+var_924]
ADD             R0, SP, #0x92C+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_40634

loc_4088C
BL              __errno_location
LDR             LR, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0x9E
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x92C+var_924]
ADD             R0, SP, #0x92C+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_406C0

loc_408DC
BL              sub_49284
MOVW            R1, #:lower16:aRealMinerType ; "real_miner_type"
STR             R0, [R5,#(dword_7631C - 0x76318)]
MOVT            R1, #:upper16:aRealMinerType ; "real_miner_type"
MOV             R0, R4
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_40908
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_40AD0

loc_40908
MOVW            R1, #:lower16:aRate5s ; "rate_5s"
MOV             R0, R4
MOVT            R1, #:upper16:aRate5s ; "rate_5s"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_4092C
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_40A20

loc_4092C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40968
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40968
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_40990

loc_40968
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_40990               ; mutex
MOV             R0, #stru_76300
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_40AF0

loc_409A4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [R4,#4]
CMN             R3, #1
BEQ             loc_40708
MOV             R0, R4
BL              sub_401D8
MOV             R0, #0xFFFFFFFD
B               loc_40614

loc_409D0
BL              __errno_location
LDR             LR, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0xA2
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x92C+var_924]
ADD             R0, SP, #0x92C+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_40800

loc_40A20
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
LDR             R0, =byte_76424 ; s
BL              snprintf
MOVW            R1, #:lower16:aRate30m ; "rate_30m"
MOV             R0, R4
MOVT            R1, #:upper16:aRate30m ; "rate_30m"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_40A60
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_40B44

loc_40A60
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40A9C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40A9C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_40AC4

loc_40A9C
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_40AC4
MOV             R0, #0xB0

loc_40AC8
BL              sub_40484
B               loc_409A4

loc_40AD0
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x100 ; maxlen
ADD             R0, R5, #0xC ; s
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
BL              snprintf
B               loc_40908

loc_40AF0
BL              __errno_location
LDR             R1, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOVW            R3, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0xAC
MOVT            R3, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x92C+var_924]
STR             R1, [SP,#0x92C+var_928]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R3, [SP,#0x92C+var_92C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x92C+s ; s
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_409A4

loc_40B44
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
LDR             R0, =byte_76434 ; s
BL              snprintf
MOVW            R1, #:lower16:aRateAvg ; "rate_avg"
MOV             R0, R4
MOVT            R1, #:upper16:aRateAvg ; "rate_avg"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_40B84
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_40BF0

loc_40B84
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40BC0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40BC0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_40BE8

loc_40BC0
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_40BE8
MOV             R0, #0xB4
B               loc_40AC8

loc_40BF0
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
LDR             R0, =(byte_76434+0x10) ; s
BL              snprintf
MOVW            R0, #:lower16:byte_6A6B8
MOV             R2, #0x10 ; n
LDR             R1, =(byte_76434+0x10) ; src
MOVT            R0, #:upper16:byte_6A6B8 ; dest
BL              strncpy
MOVW            R1, #:lower16:aRateIdeal ; "rate_ideal"
MOV             R0, R4
MOVT            R1, #:upper16:aRateIdeal ; "rate_ideal"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_40C44
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_40CB0

loc_40C44
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40C80
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40C80
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_40CA8

loc_40C80
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_40CA8
MOV             R0, #0xB9
B               loc_40AC8

loc_40CB0
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
LDR             R0, =byte_76454 ; s
BL              snprintf
MOVW            R1, #:lower16:aRateUnit ; "rate_unit"
MOV             R0, R4
MOVT            R1, #:upper16:aRateUnit ; "rate_unit"
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_40CF0
LDR             R3, [R0]
CMP             R3, #2
BEQ             loc_40D5C

loc_40CF0
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40D2C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40D2C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_40D54

loc_40D2C
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_40D54
MOV             R0, #0xBD
B               loc_40AC8

loc_40D5C
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #8  ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
LDR             R0, =(byte_76454+0x10) ; s
BL              snprintf
MOVW            R1, #:lower16:aFanNum ; "fan_num"
MOV             R0, R4
MOVT            R1, #:upper16:aFanNum ; "fan_num"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_40D9C
LDR             R3, [R3]
CMP             R3, #3
BEQ             loc_40E08

loc_40D9C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40DD8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40DD8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_40E00

loc_40DD8
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_40E00
MOV             R0, #0xC1
B               loc_40AC8

loc_40E08
BL              sub_49284
MOVW            R1, #:lower16:aFan ; "fan"
STR             R0, [R5,#(byte_76454+0x18 - 0x76318)]
MOVT            R1, #:upper16:aFan ; "fan"
MOV             R0, R4
BL              sub_48AF4
SUBS            R7, R0, #0
BEQ             loc_40E3C
LDR             R3, [R7]
CMP             R3, #1
LDREQ           R8, =(byte_76454+0x18)
MOVEQ           R6, #0
BEQ             loc_40EA8

loc_40E3C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40E78
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40E78
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_40EA0

loc_40E78
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_40EA0
MOV             R0, #0xC5
B               loc_40AC8

loc_40EA8
MOV             R0, R7
BL              sub_48E60
CMP             R0, R6
MOV             R1, R6
MOV             R0, R7
ADD             R6, R6, #1
BLS             loc_40EE8
BL              sub_48E7C
SUBS            R3, R0, #0
BEQ             loc_40EE8
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_40F80
BL              sub_49284
STR             R0, [R8,#4]!
B               loc_40EA8

loc_40EE8
MOVW            R1, #:lower16:aChain ; "chain"
MOV             R0, R4
MOVT            R1, #:upper16:aChain ; "chain"
BL              sub_48AF4
SUBS            R3, R0, #0
STR             R3, [SP,#0x92C+var_918]
BEQ             loc_40F14
LDR             R3, [SP,#0x92C+var_918]
LDR             R3, [R3]
CMP             R3, #1
BEQ             loc_40FEC

loc_40F14
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40F50
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40F50
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_40F78

loc_40F50
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_40F78
MOV             R0, #0xCC
B               loc_40AC8

loc_40F80
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40FBC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40FBC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_40FE4

loc_40FBC
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_40FE4
MOV             R0, #0xC7
B               loc_40AC8

loc_40FEC
LDR             R6, =(byte_76454+0x220)
MOV             R3, #0
MOVW            R2, #:lower16:dword_76060
MOVW            R1, #:lower16:aIndex ; "index"
MOVW            R0, #:lower16:aFreqAvg ; "freq_avg"
MOVW            R12, #:lower16:aRateIdeal ; "rate_ideal"
STR             R4, [SP,#0x92C+var_91C]
MOV             R4, R3
MOVT            R2, #:upper16:dword_76060
MOVT            R1, #:upper16:aIndex ; "index"
MOVT            R0, #:upper16:aFreqAvg ; "freq_avg"
MOVT            R12, #:upper16:aRateIdeal ; "rate_ideal"
STR             R2, [SP,#0x92C+var_914]
STR             R3, [R2]
STR             R1, [SP,#0x92C+var_910]
STR             R0, [SP,#0x92C+var_90C]
STR             R12, [SP,#0x92C+var_908]

loc_41030
LDR             R0, [SP,#0x92C+var_918]
BL              sub_48E60
CMP             R0, R4
BLS             loc_41210
MOV             R1, R4
LDR             R0, [SP,#0x92C+var_918]
BL              sub_48E7C
CMP             R0, #0
CMPNE           R4, #4
MOV             R7, R0
BEQ             loc_41210
LDR             R3, [R7]
CMP             R3, #0
BNE             loc_423D8
LDR             R1, [SP,#0x92C+var_910]
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_422F8
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_422F8
BL              sub_49284
LDR             R1, [SP,#0x92C+var_90C]
STR             R0, [R6,#-0x1F4]
MOV             R0, R7
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_42368
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_42368
BL              sub_49284
LDR             R1, [SP,#0x92C+var_908]
STR             R0, [R6,#-0x1F0]
MOV             R0, R7
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_41E98
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_41E98
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
SUB             R0, R6, #0x1EC ; s
BL              snprintf
MOVW            R1, #:lower16:aRateReal ; "rate_real"
MOV             R0, R7
MOVT            R1, #:upper16:aRateReal ; "rate_real"
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_42288
LDR             R3, [R0]
CMP             R3, #2
BNE             loc_42288
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
SUB             R0, R6, #0x1DC ; s
BL              snprintf
MOVW            R1, #:lower16:aAsicNum ; "asic_num"
MOV             R0, R7
MOVT            R1, #:upper16:aAsicNum ; "asic_num"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_421A8
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_421A8
BL              sub_49284
MOVW            R1, #:lower16:aAsic ; "asic"
STR             R0, [R6,#-0x1CC]
MOVT            R1, #:upper16:aAsic ; "asic"
MOV             R0, R7
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_42218
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_42218
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x100 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
SUB             R0, R6, #0x1C8 ; s
BL              snprintf
MOVW            R1, #:lower16:aTempPic ; "temp_pic"
MOV             R0, R7
MOVT            R1, #:upper16:aTempPic ; "temp_pic"
BL              sub_48AF4
SUBS            R8, R0, #0
BEQ             loc_41DB8
LDR             R3, [R8]
CMP             R3, #1
BNE             loc_41DB8
SUB             R9, R6, #0xCC
MOV             R10, #0

loc_411C8
MOV             R0, R8
BL              sub_48E60
CMP             R0, R10
MOV             R1, R10
MOV             R0, R8
BLS             loc_413EC
BL              sub_48E7C
CMP             R0, #0
CMPNE           R10, #4
MOV             R3, R0
ADD             R10, R10, #1
BEQ             loc_413EC
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_412A4
BL              sub_49284
STR             R0, [R9,#4]!
B               loc_411C8

loc_41210
LDR             R4, [SP,#0x92C+var_91C]
MOV             R1, #aMinerVersion ; "miner_version"
MOV             R0, R4
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_41238
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_41314

loc_41238
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41274
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41274
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_4129C

loc_41274
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_4129C
MOVW            R0, #0x146
B               loc_40AC8

loc_412A4
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_412E4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_412E4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_4130C

loc_412E4
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_4130C
MOV             R0, #0xF1
B               loc_40AC8

loc_41314
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x30 ; '0' ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
LDR             R0, =src ; s
BL              snprintf
MOVW            R1, #:lower16:byte_6A6D0
LDR             R0, =src ; s1
MOVT            R1, #:upper16:byte_6A6D0 ; s2
BL              strcmp
CMP             R0, #0
BEQ             loc_4135C
MOVW            R0, #:lower16:byte_6A6D0
MOV             R2, #0x100 ; n
MOVT            R0, #:upper16:byte_6A6D0 ; dest
LDR             R1, =src ; src
BL              strncpy

loc_4135C
MOVW            R1, #:lower16:aTotalHash ; "total_hash"
MOV             R0, R4
MOVT            R1, #:upper16:aTotalHash ; "total_hash"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_41380
LDR             R3, [R3]
CMP             R3, #4
BEQ             loc_41460

loc_41380
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_413BC
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_413BC
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_413E4

loc_413BC
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_413E4
MOV             R0, #0x14C
B               loc_40AC8

loc_413EC
MOVW            R1, #:lower16:aTempPcb ; "temp_pcb"
MOV             R0, R7
MOVT            R1, #:upper16:aTempPcb ; "temp_pcb"
BL              sub_48AF4
SUBS            R8, R0, #0
BEQ             loc_415B8
LDR             R3, [R8]
CMP             R3, #1
BNE             loc_415B8
SUB             R9, R6, #0xBC
MOV             R10, #0

loc_41418
MOV             R0, R8
BL              sub_48E60
CMP             R0, R10
MOV             R1, R10
MOV             R0, R8
BLS             loc_41544
BL              sub_48E7C
CMP             R0, #0
CMPNE           R10, #4
MOV             R3, R0
ADD             R10, R10, #1
BEQ             loc_41544
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_41AF8
BL              sub_49284
STR             R0, [R9,#4]!
B               loc_41418

loc_41460
BL              sub_49330
VLDR            D7, =1000.0
MOVW            R3, #:lower16:dbl_72D88
LDR             R5, =byte_77CF8
MOVW            R1, #:lower16:aMinerId ; "miner_id"
MOVT            R3, #:upper16:dbl_72D88
MOVT            R1, #:upper16:aMinerId ; "miner_id"
MOV             R0, R4
VMUL.F64        D7, D0, D7
VSTR            D0, [R5,#(dbl_77CF0 - 0x77CF8)]
VSTR            D7, [R3]
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_414A4
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_41B68

loc_414A4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_414E0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_414E0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41508

loc_414E0
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41508
MOVW            R0, #0x151
B               loc_40AC8
dbl_41510 DCFD 1000.0
off_41518 DCD byte_76424
off_4151C DCD byte_76434
off_41520 DCD byte_76434+0x10
off_41524 DCD byte_76454
off_41528 DCD byte_76454+0x10
off_4152C DCD byte_76454+0x18
off_41530 DCD byte_76454+0x220
off_41534 DCD src
off_41538 DCD byte_77CF8
off_4153C DCD unk_77318
off_41540 DCD aCbBitmainApiSt ; "cb_bitmain_api_stats"

loc_41544
MOVW            R1, #:lower16:aTempChip ; "temp_chip"
MOV             R0, R7
MOVT            R1, #:upper16:aTempChip ; "temp_chip"
BL              sub_48AF4
SUBS            R8, R0, #0
BEQ             loc_41758
LDR             R3, [R8]
CMP             R3, #1
BNE             loc_41758
SUB             R9, R6, #0xAC
MOV             R10, #0

loc_41570
MOV             R0, R8
BL              sub_48E60
CMP             R0, R10
MOV             R1, R10
MOV             R0, R8
BLS             loc_41698
BL              sub_48E7C
CMP             R0, #0
CMPNE           R10, #4
MOV             R3, R0
ADD             R10, R10, #1
BEQ             loc_41698
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_41628
BL              sub_49284
STR             R0, [R9,#4]!
B               loc_41570

loc_415B8
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_415F8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_415F8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41620

loc_415F8
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41620
MOV             R0, #0xF6
B               loc_40AC8

loc_41628
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41668
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41668
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41690

loc_41668
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41690
MOVW            R0, #0x103
B               loc_40AC8

loc_41698
MOVW            R1, #:lower16:aHw ; "hw"
MOV             R0, R7
MOVT            R1, #:upper16:aHw ; "hw"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_41C54
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_41C54
BL              sub_49284
LDR             R12, [SP,#0x92C+var_914]
MOV             R2, R0
LDR             R9, =unk_77318
MOVW            R1, #:lower16:aRateArray ; "rate_array"
STR             R2, [R6,#-0x98]
MOV             R0, R7
LDR             R3, [R12]
MOVT            R1, #:upper16:aRateArray ; "rate_array"
MOV             R8, #0
STR             R8, [R9,#(dword_77D1C - 0x77318)]
ADD             R3, R3, R2
STR             R3, [R12]
BL              sub_48AF4
SUBS            R10, R0, #0
BEQ             loc_41A88
LDR             R3, [R10]
CMP             R3, #1
BNE             loc_41A88
SUB             R11, R6, #0x98

loc_4170C
MOV             R0, R10
BL              sub_48E60
CMP             R0, R8
MOV             R1, R8
MOV             R0, R10
ADD             R8, R8, #1
BLS             loc_41838
BL              sub_48E7C
SUBS            R3, R0, #0
BEQ             loc_41838
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_417C8
BL              sub_49284
STR             R0, [R11,#4]!
LDR             R3, [R9,#(dword_77D1C - 0x77318)]
ADD             R3, R3, #1
STR             R3, [R9,#(dword_77D1C - 0x77318)]
B               loc_4170C

loc_41758
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41798
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41798
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_417C0

loc_41798
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_417C0
MOV             R0, #0xFF
B               loc_40AC8

loc_417C8
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41808
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41808
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41830

loc_41808
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41830
MOV             R0, #0x110
B               loc_40AC8

loc_41838
MOVW            R1, #:lower16:(aMiningSetExtra+0x10) ; "nonce"
MOV             R0, R7
MOVT            R1, #:upper16:(aMiningSetExtra+0x10) ; "nonce"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_42138
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_42138
BL              sub_49284
MOV             R2, R0
MOVW            R1, #:lower16:aEeprom ; "eeprom"
STR             R2, [R6,#-0x34]
MOV             R0, R7
LDR             R3, [R9,#(dword_77D18 - 0x77318)]
MOVT            R1, #:upper16:aEeprom ; "eeprom"
ADD             R3, R3, R2
STR             R3, [R9,#(dword_77D18 - 0x77318)]
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_42058
LDR             R3, [R0]
SUB             R2, R3, #5
CMP             R2, #1
BHI             loc_42058
SUB             R3, R3, #5
MOVW            R1, #:lower16:aSn ; "sn"
CLZ             R3, R3
MOVT            R1, #:upper16:aSn ; "sn"
MOV             R3, R3,LSR#5
MOV             R0, R7
STRB            R3, [R6,#-0x30]
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_420C8
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_420C8
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x20 ; ' ' ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
SUB             R0, R6, #0x2F ; '/' ; s
BL              snprintf
MOVW            R1, #:lower16:aEepromVol ; "eeprom_vol"
MOV             R0, R7
MOVT            R1, #:upper16:aEepromVol ; "eeprom_vol"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_41E28
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_41E28
BL              sub_49284
MOVW            R1, #:lower16:aEepromFreq ; "eeprom_freq"
STR             R0, [R6,#-8]
MOVT            R1, #:upper16:aEepromFreq ; "eeprom_freq"
MOV             R0, R7
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_41FE8
LDR             R3, [R0]
CMP             R3, #3
BNE             loc_41FE8
BL              sub_49284
MOVW            R1, #:lower16:aEepromBin ; "eeprom_bin"
STR             R0, [R6,#-0xC]
MOVT            R1, #:upper16:aEepromBin ; "eeprom_bin"
MOV             R0, R7
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_41F08
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_41F08
BL              sub_49284
MOVW            R1, #:lower16:aEepromFt ; "eeprom_ft"
STR             R0, [R6,#-4]
MOVT            R1, #:upper16:aEepromFt ; "eeprom_ft"
MOV             R0, R7
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_41F78
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_41F78
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R0, R6  ; s
BL              snprintf
MOVW            R1, #:lower16:aEepromCode ; "eeprom_code"
MOV             R0, R7
MOVT            R1, #:upper16:aEepromCode ; "eeprom_code"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_41D48
LDR             R3, [R3]
CMP             R3, #3
BNE             loc_41D48
BL              sub_49284
MOVW            R1, #:lower16:aTpl ; "tpl"
STR             R0, [R6,#0x10]
MOVT            R1, #:upper16:aTpl ; "tpl"
MOV             R0, R7
BL              sub_48AF4
SUBS            R10, R0, #0
BEQ             loc_41D3C
MOV             R8, #0x184
MOV             R7, #0
MUL             R8, R8, R4
BL              sub_48E60
STR             R0, [R6,#0x14]

loc_41A08
MOV             R0, R10
BL              sub_48E60
CMP             R0, R7
BLS             loc_41D3C
MOV             R1, R7
MOV             R0, R10
BL              sub_48E7C
SUBS            R9, R0, #0
BEQ             loc_41D3C
LDR             R3, [R9]
CMP             R3, #1
BNE             loc_41CC4
MOV             R11, #0
BL              sub_48E60
STR             R0, [R6,#0x18]

loc_41A44
MOV             R0, R9
BL              sub_48E60
CMP             R0, R11
MOV             R1, R11
MOV             R0, R9
BLS             loc_41D34
BL              sub_48E7C
CMP             R0, #0
BEQ             loc_41D34
BL              sub_49284
LDR             R3, [R6,#0x18]
ADD             R2, R8, R11
ADD             R11, R11, #1
MLA             R3, R3, R7, R2
ADD             R3, R3, #0xDE
STR             R0, [R5,R3,LSL#2]
B               loc_41A44

loc_41A88
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41AC8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41AC8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41AF0

loc_41AC8
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41AF0
MOVW            R0, #0x10E
B               loc_40AC8

loc_41AF8
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41B38
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41B38
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41B60

loc_41B38
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41B60
MOV             R0, #0xFA
B               loc_40AC8

loc_41B68
BL              sub_49028
MOVW            R2, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
MOV             R3, R0
MOV             R1, #0x20 ; ' ' ; maxlen
MOVT            R2, #:upper16:(aReceivedFromPr+0x1C) ; format
MOV             R0, R5  ; s
BL              snprintf
MOVW            R1, #:lower16:aErrorCode ; "error_code"
MOV             R0, R4
MOVT            R1, #:upper16:aErrorCode ; "error_code"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_41BA8
LDR             R3, [R3]
CMP             R3, #3
BEQ             loc_41C14

loc_41BA8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41BE4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41BE4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41C0C

loc_41BE4
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41C0C
MOVW            R0, #0x155
B               loc_40AC8

loc_41C14
BL              sub_49284
STR             R0, [R5,#(dword_77D20 - 0x77CF8)]
MOV             R0, #0x158
BL              sub_40484
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDR             R3, [R4,#4]
CMN             R3, #1
MOVEQ           R0, #0
BEQ             loc_40614
MOV             R0, R4
BL              sub_401D8
MOV             R0, #0
B               loc_40614

loc_41C54
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41C94
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41C94
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41CBC

loc_41C94
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41CBC
MOV             R0, #0x108
B               loc_40AC8

loc_41CC4
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41D04
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41D04
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41D2C

loc_41D04
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41D2C
MOVW            R0, #0x13D
B               loc_40AC8

loc_41D34
ADD             R7, R7, #1
B               loc_41A08

loc_41D3C
ADD             R4, R4, #1
ADD             R6, R6, #0x610
B               loc_41030

loc_41D48
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41D88
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41D88
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41DB0

loc_41D88
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41DB0
MOVW            R0, #0x133
B               loc_40AC8

loc_41DB8
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41DF8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41DF8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41E20

loc_41DF8
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41E20
MOV             R0, #0xED
B               loc_40AC8

loc_41E28
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41E68
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41E68
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41E90

loc_41E68
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41E90
MOVW            R0, #0x123
B               loc_40AC8

loc_41E98
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41ED8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41ED8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41F00

loc_41ED8
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41F00
MOV             R0, #0xDD
B               loc_40AC8

loc_41F08
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41F48
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41F48
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41F70

loc_41F48
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41F70
MOVW            R0, #0x12B
B               loc_40AC8

loc_41F78
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41FB8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41FB8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_41FE0

loc_41FB8
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_41FE0
MOVW            R0, #0x12F
B               loc_40AC8

loc_41FE8
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42028
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42028
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42050

loc_42028
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_42050
MOVW            R0, #0x127
B               loc_40AC8

loc_42058
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42098
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42098
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_420C0

loc_42098
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_420C0
MOVW            R0, #0x11B
B               loc_40AC8

loc_420C8
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42108
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42108
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42130

loc_42108
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_42130
MOVW            R0, #0x11F
B               loc_40AC8

loc_42138
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42178
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42178
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_421A0

loc_42178
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_421A0
MOVW            R0, #0x116
B               loc_40AC8

loc_421A8
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_421E8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_421E8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42210

loc_421E8
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_42210
MOV             R0, #0xE5
B               loc_40AC8

loc_42218
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42258
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42258
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42280

loc_42258
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_42280
MOV             R0, #0xE9
B               loc_40AC8

loc_42288
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_422C8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_422C8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_422F0

loc_422C8
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_422F0
MOV             R0, #0xE1
B               loc_40AC8

loc_422F8
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42338
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42338
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42360

loc_42338
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_42360
MOV             R0, #0xD5
B               loc_40AC8

loc_42368
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_423A8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_423A8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_423D0

loc_423A8
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_423D0
MOV             R0, #0xD9
B               loc_40AC8

loc_423D8
MOVW            R3, #:lower16:byte_72D90
LDR             R4, [SP,#0x92C+var_91C]
MOVT            R3, #:upper16:byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42418
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42418
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42440

loc_42418
MOVW            R2, #:lower16:aSLoadJsonFaile ; "%s: load json failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSLoadJsonFaile ; "%s: load json failed"
ADD             R0, SP, #0x92C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x92C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_42440
MOV             R0, #0xD2
B               loc_40AC8
; End of function sub_40500




; int __fastcall sub_42448(const char *, int)
sub_42448

var_80C= -0x80C
var_808= -0x808
s= -0x804

CMP             R1, #0
CMPNE           R0, #0
PUSH            {LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
BNE             loc_424E8
MOVW            R3, #:lower16:byte_72D90
MOV             R12, R0
MOVT            R3, #:upper16:byte_72D90
MOV             LR, R1
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_424A8
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_424A8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0xFFFFFFFF
BLE             loc_424EC

loc_424A8
MOVW            R2, #:lower16:aSInputErrDataP ; "%s input err: data @ %p, len is %d"
STR             LR, [SP,#0x80C+var_808]
STR             R12, [SP,#0x80C+var_80C]
ADD             R0, SP, #0x80C+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOVT            R2, #:upper16:aSInputErrDataP ; "%s input err: data @ %p, len is %d"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #0xFFFFFFFF
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {PC}

loc_424E8
BL              sub_40500

loc_424EC
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_42448

off_424F8 DCD aCbBitmainApiSt ; "cb_bitmain_api_stats"



; int __fastcall sub_424FC(const void *, size_t)
sub_424FC

var_808= -0x808
var_804= -0x804
var_800= -0x800

MOVW            R3, #:lower16:byte_72D90
PUSH            {R4-R6,LR}
MOVT            R3, #:upper16:byte_72D90
SUB             SP, SP, #0x800
SUB             SP, SP, #8
MOV             R5, R0
LDRB            R3, [R3]
MOV             R6, R1
CMP             R3, #0
BNE             loc_42538
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_4259C

loc_42538
MOVW            R12, #:lower16:aAboutToSendDet ; "about to send detect"
ADD             R4, SP, #0x808+var_800
MOVT            R12, #:upper16:aAboutToSendDet ; "about to send detect"
MOV             LR, R4
LDM             R12!, {R0-R3} ; "about to send detect"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "tect"
STR             R0, [LR],#4
MOV             R0, #5
STRB            R1, [LR]
MOV             R1, R4
BL              sub_1DD60

loc_4256C
MOV             R12, #0
MOVW            R0, #:lower16:aBitmainApiDete ; "bitmain_api_detect"
MOV             R3, R4
MOV             R2, R6
MOV             R1, R5
STR             R12, [SP,#0x808+var_804]
STR             R12, [SP,#0x808+var_808]
MOVT            R0, #:upper16:aBitmainApiDete ; "bitmain_api_detect"
BL              sub_44C58
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_4259C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
ADDLE           R4, SP, #0x808+var_800
BGT             loc_42538
B               loc_4256C
; End of function sub_424FC




; int __fastcall sub_425B8(const void *, size_t)
sub_425B8

var_808= -0x808
var_804= -0x804
s= -0x800

MOVW            R3, #:lower16:byte_686E1
PUSH            {R4-R6,LR}
MOVT            R3, #:upper16:byte_686E1
SUB             SP, SP, #0x800
SUB             SP, SP, #8
MOV             R6, R0
LDRB            R3, [R3]
MOV             R5, R1
CMP             R3, #0
BEQ             loc_4264C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42608
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_42638

loc_42608
ADD             R4, SP, #0x808+s
MOVW            R2, #:lower16:aAboutToSendJob ; "about to send job, size is %d"
MOV             R0, R4  ; s
MOVT            R2, #:upper16:aAboutToSendJob ; "about to send job, size is %d"
MOV             R3, R5
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_42650

loc_42638
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_42608

loc_4264C
ADD             R4, SP, #0x808+s

loc_42650
MOV             R0, #0
MOV             R3, R4
STR             R0, [SP,#0x808+var_804]
MOV             R2, R5
STR             R0, [SP,#0x808+var_808]
MOV             R1, R6
LDR             R0, =aBitmainUpdateJ ; "bitmain_update_job"
BL              sub_44C58
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_425B8

off_4267C DCD aBitmainUpdateJ ; "bitmain_update_job"



; int __fastcall sub_42680(const void *, size_t)
sub_42680

var_808= -0x808
var_804= -0x804
var_800= -0x800

MOVW            R3, #:lower16:byte_686E1
PUSH            {R4-R6,LR}
MOVT            R3, #:upper16:byte_686E1
SUB             SP, SP, #0x800
SUB             SP, SP, #8
MOV             R5, R0
LDRB            R3, [R3]
MOV             R6, R1
CMP             R3, #0
BEQ             loc_42720
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_426D0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_4270C

loc_426D0
MOVW            R12, #:lower16:aAboutToSendAFl ; "about to send a flush api semaphore"
ADD             R4, SP, #0x808+var_800
MOVT            R12, #:upper16:aAboutToSendAFl ; "about to send a flush api semaphore"
MOV             LR, R4
LDM             R12!, {R0-R3} ; "about to send a flush api semaphore"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "flush api semaphore"
LDR             R12, [R12] ; "ore"
STM             LR!, {R0-R3}
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
STR             R12, [LR]
BL              sub_1DD60
B               loc_42724

loc_4270C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_426D0

loc_42720
ADD             R4, SP, #0x808+var_800

loc_42724
MOV             R0, #0
MOV             R3, R4
STR             R0, [SP,#0x808+var_804]
MOV             R2, R6
STR             R0, [SP,#0x808+var_808]
MOV             R1, R5
LDR             R0, =aBitmainFlushAp_0 ; "bitmain_flush_api"
BL              sub_44C58
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_42680

off_42750 DCD aBitmainFlushAp_0 ; "bitmain_flush_api"



; int __fastcall sub_42754(const void *, size_t)
sub_42754

var_808= -0x808
var_804= -0x804
var_800= -0x800

MOVW            R3, #:lower16:byte_72D90
PUSH            {R4-R6,LR}
MOVT            R3, #:upper16:byte_72D90
SUB             SP, SP, #0x800
SUB             SP, SP, #8
MOV             R5, R0
LDRB            R3, [R3]
MOV             R6, R1
CMP             R3, #0
BNE             loc_42790
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_427F8

loc_42790
MOVW            LR, #:lower16:aAboutToSendShu ; "about to send shutdown"
ADD             R4, SP, #0x808+var_800
MOVT            LR, #:upper16:aAboutToSendShu ; "about to send shutdown"
MOV             R12, R4
LDM             LR!, {R0-R3} ; "about to send shutdown"
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1} ; "utdown"
STR             R0, [R12],#4
MOV             R0, #5
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R4
STRB            R3, [R12]
BL              sub_1DD60

loc_427CC
MOV             R0, #0
MOV             R3, R4
STR             R0, [SP,#0x808+var_804]
MOV             R2, R6
STR             R0, [SP,#0x808+var_808]
MOV             R1, R5
LDR             R0, =aBitmainShutdow ; "bitmain_shutdown"
BL              sub_44C58
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_427F8
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
ADDLE           R4, SP, #0x808+var_800
BGT             loc_42790
B               loc_427CC
; End of function sub_42754

off_42814 DCD aBitmainShutdow ; "bitmain_shutdown"



; int sub_42818()
sub_42818

var_810= -0x810
var_808= -0x808
s= -0x800

MOVW            R0, #:lower16:stru_76300
PUSH            {R4-R10,LR}
MOV             R1, #0  ; mutexattr
SUB             SP, SP, #0x810
MOVT            R0, #:upper16:stru_76300 ; mutex
BL              pthread_mutex_init
CMP             R0, #0
BNE             loc_429D8

loc_42838
MOVW            R0, #:lower16:stru_77D28
MOV             R1, #0  ; mutexattr
MOVT            R0, #:upper16:stru_77D28 ; mutex
BL              pthread_mutex_init
CMP             R0, #0
BNE             loc_42A28

loc_42850
MOV             R1, #2
LDR             R0, =off_55F30
BL              sub_44744
SUBS            R5, R0, #0
BNE             loc_42964
LDR             R9, =unk_684F0
MOVW            R7, #:lower16:byte_72D90
LDR             R8, =aCgminerSocketI_1 ; "cgminer_socket_init"
MOVW            R10, #:lower16:byte_686E0
MOVT            R7, #:upper16:byte_72D90
MOVT            R10, #:upper16:byte_686E0

loc_4287C
MOVW            R4, #:lower16:aBitmainApiDete ; "bitmain_api_detect"
MOVW            R6, #:lower16:aSRegSReturnD ; "%s reg %s return: %d"
MOVT            R4, #:upper16:aBitmainApiDete ; "bitmain_api_detect"
MOVT            R6, #:upper16:aSRegSReturnD ; "%s reg %s return: %d"
MOV             R5, #0

loc_42890
MOV             R0, R4
BL              sub_44998
LDRB            R12, [R7]
ORR             R5, R5, R0
MOV             R2, R6  ; format
MOV             R1, #0x800 ; maxlen
MOV             R3, R8
ADD             R0, SP, #0x810+s ; s
CMP             R12, #0
BNE             loc_428D8
LDRB            LR, [R10]
MOV             R12, #dword_67840
CMP             LR, #0
BNE             loc_428D8
LDR             R12, [R12]
CMP             R12, #4
BLE             loc_428F0

loc_428D8
STRD            R4, R5, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #5
BL              sub_1DD60

loc_428F0
ADD             R4, R4, #0x84
CMP             R4, R9
BNE             loc_42890
CMP             R5, #0
BEQ             loc_429CC
MOV             R0, #5  ; seconds
BL              sleep
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_42938
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_42938
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_4287C

loc_42938
MOVW            R2, #:lower16:aSRegFailedWait ; "%s reg failed wait 5s"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aSRegFailedWait ; "%s reg failed wait 5s"
MOV             R3, R8
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
B               loc_4287C

loc_42964
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_429A0
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_429A0
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_429CC

loc_429A0
MOVW            R2, #:lower16:aSTransInitFail ; "%s trans init failed: %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSTransInitFail ; "%s trans init failed: %d"
STR             R5, [SP,#0x810+var_810]
ADD             R0, SP, #0x810+s ; s
LDR             R3, =aCgminerSocketI_1 ; "cgminer_socket_init"
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_429CC
MOV             R0, R5
ADD             SP, SP, #0x810
POP             {R4-R10,PC}

loc_429D8
BL              __errno_location
LDR             LR, =aCgminerSocketI_2 ; "cgminer_socket_init"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOVW            R12, #0x1FA
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_42838

loc_42A28
BL              __errno_location
LDR             LR, =aCgminerSocketI_2 ; "cgminer_socket_init"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOVW            R12, #0x1FB
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_42818

B               loc_42850
off_42A78 DCD off_55F30
off_42A7C DCD unk_684F0
off_42A80 DCD aCgminerSocketI_1 ; "cgminer_socket_init"
off_42A84 DCD aCgminerSocketI_2 ; "cgminer_socket_init"



; int __fastcall sub_42A88(_DWORD *)
sub_42A88

var_98C= -0x98C
var_988= -0x988
s= -0x980
var_900= -0x900
var_8A4= -0x8A4
var_804= -0x804

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x980
SUB             SP, SP, #0xC
MOV             R2, #0x80 ; n
MOV             R1, #0  ; c
MOV             R4, R0
ADD             R0, SP, #0x98C+s ; s
BL              memset
ADD             R0, SP, #0x98C+s
BL              sub_2B370
ADD             R0, SP, #0x98C+s
ADD             R2, SP, #0x98C+var_900
MOV             R1, #0
BL              sub_47FA8
SUBS            R5, R0, #0
BEQ             loc_42AD4
LDR             R6, [R5]
CMP             R6, #0
BEQ             loc_42BA8

loc_42AD4
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42B10
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42B10
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42C38

loc_42B10
ADD             R1, SP, #0x98C+var_8A4
MOVW            R3, #:lower16:aLoadConfInfo ; "load_conf_info"
STR             R1, [SP,#0x98C+var_988]
MOVW            R2, #:lower16:aSJsonDecodeOfF ; "%s: JSON decode of file '%s' failed\n %"...
ADD             R1, SP, #0x98C+s
MOV             R6, #0xFFFFFFFF
MOV             R7, #0xFFFFFFFF
STR             R1, [SP,#0x98C+var_98C]
MOVT            R3, #:upper16:aLoadConfInfo ; "load_conf_info"
MOVT            R2, #:upper16:aSJsonDecodeOfF ; "%s: JSON decode of file '%s' failed\n %"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x98C+var_804 ; s
MOV             R8, R6
MOV             R9, R7
BL              snprintf
ADD             R1, SP, #0x98C+var_804
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_42B5C
MOV             R1, R9
MOV             R0, R8
BL              sub_49250
MOVW            R1, #:lower16:aMinerMode ; "miner-mode"
MOV             R2, R0
MOVT            R1, #:upper16:aMinerMode ; "miner-mode"
MOV             R0, R4
BL              sub_49894
MOV             R1, R7
MOV             R0, R6
BL              sub_49250
MOVW            R1, #:lower16:(aBitmainFreqLev+8) ; "freq-level"
MOV             R2, R0
MOVT            R1, #:upper16:(aBitmainFreqLev+8) ; "freq-level"
MOV             R0, R4
BL              sub_49894
ADD             SP, SP, #0x980
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_42BA8
MOV             R1, #aBitmainWorkMod ; "bitmain-work-mode"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_42BC8
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_42C68

loc_42BC8
MOV             R8, #0xFFFFFFFF
MOV             R9, #0xFFFFFFFF

loc_42BD0
MOVW            R1, #:lower16:aBitmainFreqLev ; "bitmain-freq-level"
MOV             R0, R5
MOVT            R1, #:upper16:aBitmainFreqLev ; "bitmain-freq-level"
BL              sub_48AF4
SUBS            R3, R0, #0
BEQ             loc_42BF4
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_42C4C

loc_42BF4
MOV             R6, #0xFFFFFFFF
MOV             R7, #0xFFFFFFFF

loc_42BFC
LDR             R3, [R5,#4]
CMN             R3, #1
BEQ             loc_42B5C
ADD             R3, R5, #4
DMB             ISH

loc_42C10
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_42C10
CMP             R2, #0
BNE             loc_42B5C
MOV             R0, R5
BL              sub_4942C
B               loc_42B5C

loc_42C38
MOV             R6, #0xFFFFFFFF
MOV             R7, #0xFFFFFFFF
MOV             R8, R6
MOV             R9, R7
B               loc_42B5C

loc_42C4C
BL              sub_49028
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
BL              strtol
MOV             R6, R0
MOV             R7, R0,ASR#31
B               loc_42BFC

loc_42C68
BL              sub_49028
MOV             R1, R6  ; endptr
MOV             R2, #0xA ; base
BL              strtol
MOV             R8, R0
MOV             R9, R0,ASR#31
B               loc_42BD0
; End of function sub_42A88




; void sub_42C84()
sub_42C84

var_800= -0x800

PUSH            {R4,LR}
MOV             R4, #byte_72D90
SUB             SP, SP, #0x800
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_42CB4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_42D4C

loc_42CB4
MOVW            R12, #:lower16:aCgminerCallShu ; "cgminer call shutdown"
MOV             LR, SP
MOVT            R12, #:upper16:aCgminerCallShu ; "cgminer call shutdown"
LDM             R12!, {R0-R3} ; "cgminer call shutdown"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "tdown"
STR             R0, [LR],#4
MOV             R0, #5
STRH            R1, [LR]
MOV             R1, SP
BL              sub_1DD60

loc_42CE4
MOVW            R0, #:lower16:aShutdown ; "shutdown"
MOV             R1, #8
MOVT            R0, #:upper16:aShutdown ; "shutdown"
BL              sub_42754
CMP             R0, #0
BEQ             loc_42D44
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_42D1C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_42D64

loc_42D1C
MOVW            R2, #:lower16:aSBitmainShutdo ; "%s: bitmain_shutdown failed."
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSBitmainShutdo ; "%s: bitmain_shutdown failed."
MOV             R0, SP  ; s
LDR             R3, =aBitmainC5Shutd ; "bitmain_c5_shutdown"
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60

loc_42D44
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_42D4C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_42CE4
B               loc_42CB4

loc_42D64
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_42D1C
B               loc_42D44
; End of function sub_42C84

off_42D7C DCD aBitmainC5Shutd ; "bitmain_c5_shutdown"



; int sub_42D80()
sub_42D80
PUSH            {LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #4
MOVW            R2, #:lower16:aSApiDetectFail ; "%s: api detect failed."
MOV             R0, SP  ; s
MOVT            R2, #:upper16:aSApiDetectFail ; "%s: api detect failed."
LDR             R3, =aBitmainC5Prepa ; "bitmain_c5_prepare"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {PC}
; End of function sub_42D80

off_42DC4 DCD aBitmainC5Prepa ; "bitmain_c5_prepare"
PUSH            {R4,LR}
SUB             SP, SP, #0xC8
ADD             R4, SP, #0x64 ; 'd'
MOV             R2, #0x28 ; '('
MOV             R1, #0
MOV             R0, R4
BL              memset
MOV             R2, #0x3B ; ';'
MOV             R1, #0
ADD             R0, SP, #0x8C
BL              memset
MOV             R2, #0x20 ; ' '
MOV             R1, #0
ADD             R0, SP, #0x44 ; 'D'
BL              memset
ADD             R0, SP, #0x1C
BL              sub_206A0
ADD             R0, SP, #0x1C
BL              localtime
MOV             R12, R0
MOVW            R2, #:lower16:unk_563DC
LDR             R1, [R12]
MOVT            R2, #:upper16:unk_563DC
LDR             R3, [R12,#0x14]
MOV             R0, R4
STR             R1, [SP,#0x10]
LDR             R1, [R12,#4]
ADD             R3, R3, #0x760
ADD             R3, R3, #0xC
STR             R1, [SP,#0xC]
MOV             R1, #0x28 ; '('
LDR             LR, [R12,#8]
STR             LR, [SP,#8]
LDR             LR, [R12,#0xC]
STR             LR, [SP,#4]
LDR             R12, [R12,#0x10]
ADD             R12, R12, #1
STR             R12, [SP]
BL              snprintf
MOVW            R3, #:lower16:aBitmainOpensou ; "BITMAIN_OPENSOURCE"
MOVW            R2, #:lower16:(aXDSS_0+4) ; "%s%s"
MOVT            R3, #:upper16:aBitmainOpensou ; "BITMAIN_OPENSOURCE"
MOVT            R2, #:upper16:(aXDSS_0+4) ; "%s%s"
MOV             R1, #0x3B ; ';'
STR             R4, [SP]
ADD             R0, SP, #0x8C
BL              snprintf
ADD             R2, SP, #0x44 ; 'D'
ADD             R0, SP, #0x8C
MOV             R1, #0x3B ; ';'
BL              sub_1EA3C
ADD             R0, SP, #0x44 ; 'D'
ADD             R2, SP, #0x24 ; '$'
MOV             R1, #0x20 ; ' '
BL              sub_1EA3C
ADD             R0, SP, #0x24 ; '$'
MOV             R1, #0x20 ; ' '
BL              sub_424FC
CMP             R0, #0
BEQ             loc_42F00
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42EF4
MOV             R3, #byte_686E0
LDRB            R0, [R3]
CMP             R0, #0
BNE             loc_42EF4
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42EF8

loc_42EF4
BL              sub_42D80

loc_42EF8
ADD             SP, SP, #0xC8
POP             {R4,PC}

loc_42F00
BL              sub_3D190
MOV             R0, #1
ADD             SP, SP, #0xC8
POP             {R4,PC}


; Attributes: noreturn

; void __fastcall __noreturn sub_42F10(const char *, int)
sub_42F10

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_42F10

ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}


; Attributes: noreturn

; void __fastcall __noreturn sub_42F74(const char *, int)
sub_42F74

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_42F74

ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}



; _DWORD *sub_42FD8()
sub_42FD8

var_50= -0x50
var_4C= -0x4C
var_48= -0x48
format= -0x44
var_40= -0x40
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_2C= -0x2C
var_24= -0x24
var_1C= -0x1C
var_14= -0x14
s= -0xC
var_8= -8

MOVW            R0, #:lower16:stru_76300
PUSH            {R4-R11,LR}
MOV             R2, #0
VPUSH           {D8-D10}
MOV             R3, #0
SUB             SP, SP, #0x54
MOV             R1, #0
MOVT            R0, #:upper16:stru_76300 ; mutex
STRD            R2, R3, [SP,#0x54+var_34]
STRD            R2, R3, [SP,#0x54+var_2C]
STRD            R2, R3, [SP,#0x54+var_24]
STRD            R2, R3, [SP,#0x54+var_1C]
STRD            R2, R3, [SP,#0x54+var_14]
STR             R1, [SP,#0x54+var_8]
STR             R1, [SP,#0x54+s]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_436E8

loc_43020
BL              sub_48A70
MOVW            R3, #:lower16:dbl_681C0
MOV             R10, R0
MOVT            R3, #:upper16:dbl_681C0
MOVW            R6, #:lower16:unk_76318
LDRD            R0, R1, [R3]
MOVT            R6, #:upper16:unk_76318
BLX             sub_4ABAC
BL              sub_49250
MOVW            R1, #:lower16:aElapsed_0 ; "elapsed"
MOV             R2, R0
MOVT            R1, #:upper16:aElapsed_0 ; "elapsed"
MOV             R0, R10
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x54+var_34
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
ADD             R0, R6, #0x10C ; s
BL              sscanf
VLDR            D8, =100.0
VLDR            D7, [SP,#0x54+var_34]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRate5s ; "rate_5s"
MOV             R2, R0
MOVT            R1, #:upper16:aRate5s ; "rate_5s"
MOV             R0, R10
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x54+var_2C
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
ADD             R0, R6, #0x11C ; s
BL              sscanf
VLDR            D7, [SP,#0x54+var_2C]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRate30m ; "rate_30m"
MOV             R2, R0
MOVT            R1, #:upper16:aRate30m ; "rate_30m"
MOV             R0, R10
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x54+var_24
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
ADD             R0, R6, #0x12C ; s
BL              sscanf
VLDR            D7, [SP,#0x54+var_24]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRateAvg ; "rate_avg"
MOV             R2, R0
MOVT            R1, #:upper16:aRateAvg ; "rate_avg"
MOV             R0, R10
BL              sub_49894
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
ADD             R2, SP, #0x54+var_1C
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; format
ADD             R0, R6, #0x13C ; s
BL              sscanf
VLDR            D7, [SP,#0x54+var_1C]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRateIdeal ; "rate_ideal"
MOV             R2, R0
MOVT            R1, #:upper16:aRateIdeal ; "rate_ideal"
MOV             R0, R10
BL              sub_49894
MOVW            R2, #:lower16:aSS_0 ; "%s/s"
ADD             R3, R6, #0x14C
MOVT            R2, #:upper16:aSS_0 ; "%s/s"
MOV             R1, #8  ; maxlen
ADD             R0, SP, #0x54+s ; s
BL              snprintf
ADD             R0, SP, #0x54+s
BL              sub_49004
MOVW            R1, #:lower16:aRateUnit ; "rate_unit"
MOV             R2, R0
MOVT            R1, #:upper16:aRateUnit ; "rate_unit"
MOV             R0, R10
BL              sub_49894
LDR             R0, [R6,#(dword_7631C - 0x76318)]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aChainNum ; "chain_num"
MOV             R2, R0
MOVT            R1, #:upper16:aChainNum ; "chain_num"
MOV             R0, R10
BL              sub_49894
LDR             R0, [R6,#(byte_76454+0x18 - 0x76318)]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aFanNum ; "fan_num"
MOV             R2, R0
MOVT            R1, #:upper16:aFanNum ; "fan_num"
MOV             R0, R10
BL              sub_49894
BL              sub_48E00
LDR             R3, [R6,#(byte_76454+0x18 - 0x76318)]
MOV             R7, R0
CMP             R3, #0
BLE             loc_43234
ADD             R5, R6, #0x158
MOV             R4, #0

loc_4320C
LDR             R0, [R5],#4
ADD             R4, R4, #1
MOV             R1, R0,ASR#31
BL              sub_49250
MOV             R1, R0
MOV             R0, R7
BL              sub_49D54
LDR             R3, [R6,#(byte_76454+0x18 - 0x76318)]
CMP             R3, R4
BGT             loc_4320C

loc_43234
MOVW            R1, #:lower16:aFan ; "fan"
MOV             R2, R7
MOVT            R1, #:upper16:aFan ; "fan"
LDR             R4, =unk_77318
MOV             R0, R10
VLDR            D9, =512.0
BL              sub_49894
MOVW            R3, #:lower16:dword_76060
VLDR            D10, =10000.0
MOVT            R3, #:upper16:dword_76060
VLDR            S12, [R3]
LDR             R3, [R4,#(dword_77D18 - 0x77318)]
VCVT.F64.S32    D6, S12
VMOV            S15, R3
VCVT.F64.S32    D7, S15
VCMPE.F64       D7, D9
VMRS            APSR_nzcv, FPSCR
VMOVLE.F64      D7, D9
VDIV.F64        D5, D6, D7
VMUL.F64        D7, D5, D10
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D10
BL              sub_492D4
MOVW            R1, #:lower16:aHwpTotal ; "hwp_total"
MOV             R2, R0
MOVT            R1, #:upper16:aHwpTotal ; "hwp_total"
MOV             R0, R10
BL              sub_49894
MOV             R0, R10
BL              sub_42A88
BL              sub_48E00
LDR             R3, [R6,#(dword_7631C - 0x76318)]
STR             R0, [SP,#0x54+var_50]
CMP             R3, #0
BLE             loc_435E8
MOVW            R3, #:lower16:aIndex ; "index"
VLDR            D8, =100.0
MOVT            R3, #:upper16:aIndex ; "index"
MOVW            R2, #:lower16:aFreqAvg ; "freq_avg"
STR             R3, [SP,#0x54+var_4C]
MOV             R3, #0
MOVW            R1, #:lower16:(aTotalMhashesDo+0x5C) ; "%lf"
STR             R10, [SP,#0x54+var_3C]
SUB             R4, R4, #0xE90
MOV             R10, R3
MOVT            R2, #:upper16:aFreqAvg ; "freq_avg"
MOVT            R1, #:upper16:(aTotalMhashesDo+0x5C) ; "%lf"
STR             R2, [SP,#0x54+var_48]
STR             R1, [SP,#0x54+format]

loc_43304
BL              sub_48A70
MOV             R5, R0
LDR             R0, [R4,#-8]
ADD             R7, R4, #0x120
MOV             R9, #0
MOV             R1, R0,ASR#31
BL              sub_49250
LDR             R1, [SP,#0x54+var_4C]
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#-4]
MOV             R1, R0,ASR#31
BL              sub_49250
LDR             R1, [SP,#0x54+var_48]
MOV             R2, R0
MOV             R0, R5
BL              sub_49894
LDR             R8, [SP,#0x54+format]
ADD             R2, SP, #0x54+var_1C
MOV             R0, R4  ; s
MOV             R1, R8  ; format
BL              sscanf
VLDR            D7, [SP,#0x54+var_1C]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRateIdeal ; "rate_ideal"
MOV             R2, R0
MOVT            R1, #:upper16:aRateIdeal ; "rate_ideal"
MOV             R0, R5
BL              sub_49894
ADD             R2, SP, #0x54+var_14
MOV             R1, R8  ; format
ADD             R0, R4, #0x10 ; s
BL              sscanf
VLDR            D7, [SP,#0x54+var_14]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D8
BL              sub_492D4
MOVW            R1, #:lower16:aRateReal ; "rate_real"
MOV             R2, R0
MOVT            R1, #:upper16:aRateReal ; "rate_real"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x20]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aAsicNum ; "asic_num"
MOV             R2, R0
MOVT            R1, #:upper16:aAsicNum ; "asic_num"
MOV             R0, R5
BL              sub_49894
ADD             R0, R4, #0x24 ; '$'
BL              sub_49004
MOVW            R1, #:lower16:aAsic ; "asic"
MOV             R2, R0
MOVT            R1, #:upper16:aAsic ; "asic"
MOV             R0, R5
BL              sub_49894
BL              sub_48E00
MOV             R8, R0
B               loc_43440
dbl_43420 DCFD 100.0
dbl_43428 DCFD 512.0
dbl_43430 DCFD 10000.0
off_43438 DCD unk_77318
off_4343C DCD aBitmainApiStat ; "bitmain_api_stats"

loc_43440
LDR             R0, [R7,#4]!
ADD             R9, R9, #1
MOV             R1, R0,ASR#31
BL              sub_49250
MOV             R1, R0
MOV             R0, R8
BL              sub_49D54
CMP             R9, #4
BNE             loc_43440
MOVW            R1, #:lower16:aTempPic ; "temp_pic"
MOV             R2, R8
MOVT            R1, #:upper16:aTempPic ; "temp_pic"
MOV             R0, R5
BL              sub_49894
ADD             R8, R4, #0x130
MOV             R7, #0
BL              sub_48E00
MOV             R9, R0

loc_43488
LDR             R0, [R8,#4]!
ADD             R7, R7, #1
MOV             R1, R0,ASR#31
BL              sub_49250
MOV             R1, R0
MOV             R0, R9
BL              sub_49D54
CMP             R7, #4
BNE             loc_43488
MOVW            R1, #:lower16:aTempPcb ; "temp_pcb"
MOV             R2, R9
MOVT            R1, #:upper16:aTempPcb ; "temp_pcb"
MOV             R0, R5
BL              sub_49894
ADD             R8, R4, #0x140
BL              sub_48E00
MOV             R9, R0

loc_434CC
LDR             R0, [R8,#4]!
MOV             R1, R0,ASR#31
BL              sub_49250
MOV             R1, R0
MOV             R0, R9
BL              sub_49D54
SUBS            R7, R7, #1
BNE             loc_434CC
MOVW            R1, #:lower16:aTempChip ; "temp_chip"
MOV             R2, R9
MOVT            R1, #:upper16:aTempChip ; "temp_chip"
MOV             R0, R5
BL              sub_49894
LDR             R0, [R4,#0x154]
MOV             R1, R0,ASR#31
BL              sub_49250
MOVW            R1, #:lower16:aHw ; "hw"
MOV             R2, R0
MOVT            R1, #:upper16:aHw ; "hw"
MOV             R0, R5
BL              sub_49894
LDRB            R3, [R4,#0x1BC]
CMP             R3, #0
BEQ             loc_43630
BL              sub_49408
MOV             R2, R0

loc_43534
MOVW            R1, #:lower16:aEepromLoaded ; "eeprom_loaded"
MOV             R0, R5
MOVT            R1, #:upper16:aEepromLoaded ; "eeprom_loaded"
BL              sub_49894
ADD             R0, R4, #0x1BC
ADD             R0, R0, #1
BL              sub_49004
MOVW            R1, #:lower16:aSn ; "sn"
MOV             R2, R0
MOVT            R1, #:upper16:aSn ; "sn"
MOV             R0, R5
BL              sub_49894
VLDR            S15, [R4,#0x154]
VCVT.F64.S32    D6, S15
VLDR            S15, [R4,#0x1B8]
VMUL.F64        D6, D6, D9
VCVT.F64.S32    D7, S15
VCMPE.F64       D7, D9
VMRS            APSR_nzcv, FPSCR
VMOVLE.F64      D7, D9
VDIV.F64        D5, D6, D7
VMUL.F64        D7, D5, D10
VMOV            R0, R1, D7
BLX             sub_4ABAC
BLX             sub_4AB14
VMOV            D7, R0, R1
VDIV.F64        D0, D7, D10
BL              sub_492D4
MOVW            R1, #:lower16:aHwp ; "hwp"
MOV             R2, R0
MOVT            R1, #:upper16:aHwp ; "hwp"
MOV             R0, R5
BL              sub_49894
LDR             R3, [R4,#0x200]
CMP             R3, #0
BNE             loc_4363C

loc_435C4
MOV             R1, R5
LDR             R0, [SP,#0x54+var_50]
BL              sub_49D54
LDR             R3, [R6,#(dword_7631C - 0x76318)]
ADD             R10, R10, #1
ADD             R4, R4, #0x610
CMP             R3, R10
BGT             loc_43304
LDR             R10, [SP,#0x54+var_3C]

loc_435E8
MOVW            R1, #:lower16:aChain ; "chain"
LDR             R2, [SP,#0x54+var_50]
MOVT            R1, #:upper16:aChain ; "chain"
MOV             R0, R10
BL              sub_49894
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_436F8

loc_43610
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOV             R0, R10
ADD             SP, SP, #0x54 ; 'T'
VPOP            {D8-D10}
POP             {R4-R11,PC}

loc_43630
BL              sub_49414
MOV             R2, R0
B               loc_43534

loc_4363C
BL              sub_48E00
LDR             R3, [R4,#0x200]
STR             R0, [SP,#0x54+var_40]
CMP             R3, #0
BLE             loc_436D0
MOV             R9, #0x184
MOV             R7, #0
MUL             R9, R9, R10
MOV             R11, R0
STR             R5, [SP,#0x54+var_38]

loc_43664
BL              sub_48E00
LDR             R3, [R4,#0x204]
MOV             R8, R0
CMP             R3, #0
BLE             loc_436B0
MOV             R5, #0

loc_4367C
ADD             R2, R9, R5
ADD             R5, R5, #1
MLA             R3, R7, R3, R2
ADD             R3, R3, #0xDE
LDR             R0, [R6,R3,LSL#2]
MOV             R1, R0,ASR#31
BL              sub_49250
MOV             R1, R0
MOV             R0, R8
BL              sub_49D54
LDR             R3, [R4,#0x204]
CMP             R3, R5
BGT             loc_4367C

loc_436B0
MOV             R1, R8
MOV             R0, R11
BL              sub_49D54
LDR             R3, [R4,#0x200]
ADD             R7, R7, #1
CMP             R3, R7
BGT             loc_43664
LDR             R5, [SP,#0x54+var_38]

loc_436D0
MOVW            R1, #:lower16:aTpl ; "tpl"
LDR             R2, [SP,#0x54+var_40]
MOVT            R1, #:upper16:aTpl ; "tpl"
MOV             R0, R5
BL              sub_49894
B               loc_435C4

loc_436E8
MOVW            R1, #0x1B1
LDR             R0, =aBitmainApiStat ; "bitmain_api_stats"
BL              sub_42F74
B               loc_43020

loc_436F8
MOV             R1, #0x21C
LDR             R0, =aBitmainApiStat ; "bitmain_api_stats"
BL              sub_42F10
; End of function sub_42FD8



; Attributes: thunk

sub_43704
B               loc_43610
; End of function sub_43704




; __int64 sub_43708()
sub_43708
PUSH            {R4,R6,R7,LR}
MOV             R4, #qword_6A7E8
LDRD            R6, R7, [R4]
ORRS            R3, R6, R7
BNE             loc_43734

loc_43720
MOV             R0, #2
BL              sub_208D4
MOV             R0, R6
MOV             R1, R7
POP             {R4,R6,R7,PC}

loc_43734               ; mutex
MOV             R0, #stru_77D28
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_4377C

loc_43748
MOVW            R0, #:lower16:stru_77D28
MOV             R2, #0
MOV             R3, #0
MOVT            R0, #:upper16:stru_77D28 ; mutex
STRD            R2, R3, [R4]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_4378C

loc_43768
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
B               loc_43720

loc_4377C
MOV             R1, #0xB8
LDR             R0, =aBitmainC5Scanh ; "bitmain_c5_scanhash"
BL              sub_42F74
B               loc_43748

loc_4378C
MOV             R1, #0xBA
LDR             R0, =aBitmainC5Scanh ; "bitmain_c5_scanhash"
BL              sub_42F10
; End of function sub_43708

B               loc_43768
off_4379C DCD aBitmainC5Scanh ; "bitmain_c5_scanhash"



; int sub_437A0()
sub_437A0

var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_808= -0x808
var_804= -0x804
var_C= -0xC

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #0xC
MOV             R1, #0x188 ; size
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R9, R0, #0
BEQ             loc_43AF0
MOVW            R3, #:lower16:unk_684F0
MOV             R1, #0
MOVT            R3, #:upper16:unk_684F0
MOV             R2, #1
STR             R3, [R9,#4]
MOVW            R10, #:lower16:byte_72D90
STR             R1, [R9,#0x20]
MOVT            R10, #:upper16:byte_72D90
STR             R2, [R9,#0x94]
BL              sub_42818
CMP             R0, #0
LDRB            R3, [R10]
BNE             loc_4394C
CMP             R3, #0
BNE             loc_43810
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_43A68

loc_43810
MOVW            LR, #:lower16:aCgminerSocketI ; "cgminer socket init succeeds."
ADD             R8, SP, #0x81C+var_804
MOVT            LR, #:upper16:aCgminerSocketI ; "cgminer socket init succeeds."
MOV             R12, R8
LDM             LR!, {R0-R3} ; "cgminer socket init succeeds."
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "nit succeeds."
STM             R12!, {R0-R2}
MOV             R1, R8
MOV             R2, #0
MOV             R0, #6
STRH            R3, [R12]
BL              sub_1DD60

loc_43844
MOV             R3, #dword_688F8
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_4385C
BL              sub_3DA90

loc_4385C
ADD             R6, SP, #0x81C+var_C
MOV             R3, #0
ADD             R6, R6, #8
MOVW            R7, #:lower16:unk_76318
MOVW            R5, #:lower16:off_67964
MOVW            R4, #:lower16:stru_76300
MOVW            R11, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOV             R0, #0x7D0
MOVT            R7, #:upper16:unk_76318
MOVT            R5, #:upper16:off_67964
MOVT            R4, #:upper16:stru_76300
MOVT            R11, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
STRB            R3, [R6,#-0x804]!
BL              sub_208D4
B               loc_438B0

loc_43898               ; mutex
MOV             R0, R4
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_43A1C

loc_438A8
LDR             R3, [R5] ; sub_1EAA0
BLX             R3      ; sub_1EAA0

loc_438B0
MOV             R1, #1
MOV             R0, R6
BL              sub_42680
MOV             R0, #0x3E8
BL              sub_208D4
MOV             R0, R4  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_439D0

loc_438D4
LDR             R3, [R7,#(dword_76320 - 0x76318)]
CMP             R3, #0
BEQ             loc_43898
MOV             R0, #stru_76300 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_43A9C

loc_438F4
LDR             R3, [R5] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_4399C
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_4399C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_4399C

loc_43930
MOV             R0, R9
BL              sub_3C720
CMP             R0, #0
BEQ             loc_43B0C
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_4394C
CMP             R3, #0
BNE             loc_43968
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_43A84

loc_43968
MOVW            R12, #:lower16:aCgminerSocketI_0 ; "cgminer socket init failes."
ADD             R8, SP, #0x81C+var_804
MOVT            R12, #:upper16:aCgminerSocketI_0 ; "cgminer socket init failes."
MOV             LR, R8
LDM             R12!, {R0-R3} ; "cgminer socket init failes."
STM             LR!, {R0-R3}
LDM             R12, {R0-R2} ; "nit failes."
STM             LR, {R0-R2}
MOV             R1, R8
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
B               loc_43844

loc_4399C
MOVW            R12, #:lower16:aBmminerInitDon ; "bmminer init done!!!"
MOV             LR, R8
MOVT            R12, #:upper16:aBmminerInitDon ; "bmminer init done!!!"
LDM             R12!, {R0-R3} ; "bmminer init done!!!"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "e!!!"
STR             R0, [LR],#4
MOV             R0, #5
STRB            R1, [LR]
MOV             R1, R8
BL              sub_1DD60
B               loc_43930

loc_439D0
BL              __errno_location
LDR             R3, [R0]
MOV             R1, #0x4D ; 'M'
LDR             R0, =aBitmainC5Detec ; "bitmain_c5_detect"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP,#0x81C+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R11, [SP,#0x81C+var_81C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x81C+var_818]
MOV             R0, R8  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R8
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_438D4

loc_43A1C
BL              __errno_location
LDR             R3, [R0]
MOV             R1, #0x53 ; 'S'
LDR             R0, =aBitmainC5Detec ; "bitmain_c5_detect"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x81C+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R11, [SP,#0x81C+var_81C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x81C+var_818]
MOV             R0, R8  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R8
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_438A8

loc_43A68
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_43810

loc_43A7C
ADD             R8, SP, #0x81C+var_804
B               loc_43844

loc_43A84
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_43968
B               loc_43A7C

loc_43A9C
BL              __errno_location
LDR             R12, =aBitmainC5Detec ; "bitmain_c5_detect"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOV             R0, #0x4F ; 'O'
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x81C+var_81C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x81C+var_818]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x81C+var_814]
MOV             R0, R8  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R8
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_438F4

loc_43AF0
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R0, #:lower16:aCgpu ; "cgpu"
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVT            R0, #:upper16:aCgpu ; "cgpu"
LDR             R3, =aBitmainC5Detec_0 ; "bitmain_c5_detect"
MOV             R2, #0x33 ; '3' ; line
BL              __assert_fail

loc_43B0C
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R0, #:lower16:aAddCgpuCgpu ; "add_cgpu(cgpu)"
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVT            R0, #:upper16:aAddCgpuCgpu ; "add_cgpu(cgpu)"
LDR             R3, =aBitmainC5Detec_0 ; "bitmain_c5_detect"
MOV             R2, #0x55 ; 'U' ; line
BL              __assert_fail
; End of function sub_437A0

off_43B28 DCD aBitmainC5Detec ; "bitmain_c5_detect"
off_43B2C DCD aBitmainC5Detec_0 ; "bitmain_c5_detect"



; char *__fastcall sub_43B30(int, size_t *)
sub_43B30

var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R11,LR}
ADD             R4, R0, #0xD4
SUB             SP, SP, #0x820
MOV             R2, #0
SUB             SP, SP, #0xC
MOV             R3, #0
MOV             R5, R0
MOV             R0, R4  ; mutex
STR             R1, [SP,#0x82C+var_818]
STRD            R2, R3, [SP,#0x82C+var_80C]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_43EE8

loc_43B64
ADD             R11, R5, #0xEC
MOV             R0, R11 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_43F3C

loc_43B78               ; mutex
MOV             R0, R4
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_43E94

loc_43B88
LDR             R9, [R5,#0x2B0]
LDR             R6, [R5,#0x6BC]
LDR             R10, [R5,#0x634]
MOV             R0, R9  ; s
BL              strlen
LDR             R8, [R5,#0x274]
MOV             R3, R6,LSL#5
MOV             R7, R0
MOV             R4, R3
STR             R3, [SP,#0x82C+var_814]
MOV             R0, R8  ; s
BL              strlen
ADD             R3, R10, #0x750
ADD             R3, R3, #0xA
ADD             R4, R3, R4
ADD             R4, R4, R7
ADD             R4, R4, R0
MOV             R0, #1  ; nmemb
MOV             R1, R4  ; size
BL              calloc
SUBS            R7, R0, #0
BEQ             loc_43DCC
MOVW            R3, #0x748
MOV             R1, R5  ; src
MOV             R2, R3  ; n
BL              memcpy
MOVW            R3, #0x748
MOV             R2, R10 ; n
ADD             R0, R7, R3 ; dest
LDR             R1, [R5,#0x630] ; src
BL              memcpy
MOVW            R3, #0x748
CMP             R6, #0
ADD             R3, R10, R3
STR             R3, [SP,#0x82C+var_810]
MOV             R10, R3
BLE             loc_43C80
LDR             R5, [R5,#0x2B4]
ADD             R3, R7, R3
ADD             R6, R5, R6,LSL#2

loc_43C28
LDR             R2, [R5],#4
ADD             R3, R3, #0x20 ; ' '
LDR             LR, [R2]
CMP             R6, R5
LDR             R12, [R2,#4]
LDR             R0, [R2,#8]
LDR             R1, [R2,#0xC]
STR             LR, [R3,#-0x20]
STR             R12, [R3,#-0x1C]
STR             R0, [R3,#-0x18]
STR             R1, [R3,#-0x14]
LDR             LR, [R2,#0x10]
LDR             R12, [R2,#0x14]
LDR             R0, [R2,#0x18]
LDR             R1, [R2,#0x1C]
STR             LR, [R3,#-0x10]
STR             R12, [R3,#-0xC]
STR             R0, [R3,#-8]
STR             R1, [R3,#-4]
BNE             loc_43C28
LDRD            R2, R3, [SP,#0x82C+var_814]
ADD             R10, R3, R2

loc_43C80               ; s
MOV             R0, R9
BL              strlen
ADD             R5, R0, #1
MOV             R1, R9  ; src
MOV             R2, R5  ; n
ADD             R0, R7, R10 ; dest
BL              memcpy
MOV             R0, R8  ; s
ADD             R10, R5, R10
BL              strlen
MOV             R5, R0
MOV             R1, R8  ; src
ADD             R2, R5, #1 ; n
ADD             R0, R7, R10 ; dest
BL              memcpy
MOV             R0, R11 ; rwlock
ADD             R10, R10, R5
BL              pthread_rwlock_unlock
CMP             R0, #0
ADD             R5, R10, #1
BNE             loc_43E40

loc_43CD4
MOV             R3, #off_67964
LDR             R3, [R3] ; sub_1EAA0
BLX             R3      ; sub_1EAA0
MOVW            R1, #:lower16:a2lf ; "%.2lf"
MOVW            R0, #:lower16:byte_6A6B8
ADD             R2, SP, #0x82C+var_80C
MOVT            R1, #:upper16:a2lf ; "%.2lf"
MOVT            R0, #:upper16:byte_6A6B8 ; s
BL              sscanf
ADD             R3, SP, #0x82C+var_80C
MOVW            R2, #:lower16:byte_686E1
LDM             R3!, {R0,R1}
MOVT            R2, #:upper16:byte_686E1
LDRB            R12, [R2]
MOV             R3, #dbl_681E8
ADD             LR, R7, R5
STR             R0, [R7,R5]
ADD             R2, R10, #9
STR             R1, [LR,#4]
CMP             R12, #0
LDM             R3!, {R0,R1}
MOV             R3, R2
ADD             R2, R7, R2
STR             R0, [R7,R3]
STR             R1, [R2,#4]
BNE             loc_43D5C

loc_43D44
LDR             R3, [SP,#0x82C+var_818]
STR             R4, [R3]

loc_43D4C
MOV             R0, R7
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_43D5C
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_43D98
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_43D98
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_43D44

loc_43D98
ADD             R10, R10, #0x11
MOVW            R2, #:lower16:aJobBufTotalLen ; "job buf total len:%d, offset:%d\n"
STR             R10, [SP,#0x82C+var_82C]
MOVT            R2, #:upper16:aJobBufTotalLen ; "job buf total len:%d, offset:%d\n"
MOV             R3, R4
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x82C+s ; s
BL              snprintf
ADD             R1, SP, #0x82C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_1DD60
B               loc_43D44

loc_43DCC
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_43E08
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_43E08
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_43D4C

loc_43E08
MOVW            R2, #:lower16:aMallocTempJobD ; "malloc temp job data buf failed: %d\n"
MOV             R3, R4
MOVT            R2, #:upper16:aMallocTempJobD ; "malloc temp job data buf failed: %d\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x82C+s ; s
BL              snprintf
ADD             R1, SP, #0x82C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
MOV             R0, R7
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_43E40
BL              __errno_location
LDR             R12, =aRebuildJobBuf ; "rebuild_job_buf"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R0, #0x102
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x82C+var_82C]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#0x82C+var_828]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x82C+var_824]
ADD             R0, SP, #0x82C+s ; s
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x82C+s
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_43CD4

loc_43E94
BL              __errno_location
LDR             R12, =aRebuildJobBuf ; "rebuild_job_buf"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOV             R0, #0xDE
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x82C+var_82C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x82C+var_828]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x82C+var_824]
ADD             R0, SP, #0x82C+s ; s
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x82C+s
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_43B88

loc_43EE8
BL              __errno_location
LDR             R12, =aRebuildJobBuf ; "rebuild_job_buf"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOV             R0, #0xDE
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP,#0x82C+var_82C]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R12, [SP,#0x82C+var_828]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x82C+var_824]
ADD             R0, SP, #0x82C+s ; s
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x82C+s
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
B               loc_43B64

loc_43F3C
BL              __errno_location
LDR             R12, =aRebuildJobBuf ; "rebuild_job_buf"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOV             R0, #0xDE
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP,#0x82C+var_82C]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R12, [SP,#0x82C+var_828]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x82C+var_824]
ADD             R0, SP, #0x82C+s ; s
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x82C+s
MOV             R0, #3
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_43B30

B               loc_43B78
off_43F90 DCD aRebuildJobBuf ; "rebuild_job_buf"



; void __fastcall sub_43F94(int)
sub_43F94

var_80C= -0x80C
var_808= -0x808
var_804= -0x804

MOVW            R3, #:lower16:byte_686E1
PUSH            {R4,R5,LR}
MOVT            R3, #:upper16:byte_686E1
LDR             R2, [R0,#0x98]
SUB             SP, SP, #0x800
LDRB            R3, [R3]
SUB             SP, SP, #0xC
LDR             R4, [R2]
CMP             R3, #0
BEQ             loc_44030
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_43FE4
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_4401C

loc_43FE4
MOVW            R2, #:lower16:aUpdateJob ; "update job"
ADD             R5, SP, #0x80C+var_804
MOVT            R2, #:upper16:aUpdateJob ; "update job"
MOV             R3, R5
LDM             R2, {R0-R2} ; "update job"
STM             R3!, {R0,R1}
MOV             R1, R5
MOV             R12, R2,LSR#16
STRH            R2, [R3],#2
MOV             R0, #7
MOV             R2, #0
STRB            R12, [R3]
BL              sub_1DD60
B               loc_44034

loc_4401C
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_43FE4

loc_44030
ADD             R5, SP, #0x80C+var_804

loc_44034
MOV             R3, #0
LDR             R1, [R4]
STRB            R3, [R4,#0x3F]
MOV             R0, R4
STRB            R3, [R4,#0x3E]
BL              sub_341EC
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOV             R3, #0x120
STR             R0, [SP,#0x80C+var_80C]
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
LDR             R2, =aBitmainC5Updat ; "bitmain_c5_update"
SUB             R0, R5, #8
BL              sub_2AA08
BL              sub_2FB78
LDRB            R3, [R0,#0x290]
MOV             R4, R0
CMP             R3, #0
BEQ             loc_44140

loc_4407C
MOVW            R3, #:lower16:dword_6A254
MOV             R0, R4
MOVT            R3, #:upper16:dword_6A254
LDR             R2, [R3]
CMP             R2, #0
MOVNE           R1, #1
MOVNE           R2, #0
STRBNE          R1, [R4,#0x2B8]
SUB             R1, R5, #4
STRNE           R2, [R3]
BL              sub_43B30
LDR             R1, [SP,#0x80C+var_808]
MOV             R4, R0
CMP             R1, #0
BNE             loc_440CC

loc_440B8               ; ptr
MOV             R0, R4
BL              free
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_440CC
BL              sub_425B8
CMP             R0, #0
BEQ             loc_440B8
MOV             R3, #byte_72D90
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_44114
MOV             R3, #byte_686E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_44114
MOV             R3, #dword_67840
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_440B8

loc_44114
MOVW            R2, #:lower16:aSUpdateJobFail ; "%s: update job failed."
LDR             R3, =aBitmainC5Updat_0 ; "bitmain_c5_update"
MOVT            R2, #:upper16:aSUpdateJobFail ; "%s: update job failed."
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #3
BL              sub_1DD60
B               loc_440B8

loc_44140
MOVW            R12, #:lower16:aBitmainS9HasTo ; "Bitmain S9 has to use stratum pools"
MOV             LR, R5
MOVT            R12, #:upper16:aBitmainS9HasTo ; "Bitmain S9 has to use stratum pools"
LDM             R12!, {R0-R3} ; "Bitmain S9 has to use stratum pools"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "o use stratum pools"
LDR             R12, [R12] ; "ols"
STM             LR!, {R0-R3}
MOV             R2, #1
MOV             R1, R5
MOV             R0, #3
STR             R12, [LR]
BL              sub_1DD60
MOV             R0, #1
BL              sub_3C2EC
; End of function sub_43F94

B               loc_4407C
off_44180 DCD aBitmainC5Updat ; "bitmain_c5_update"
off_44184 DCD aBitmainC5Updat_0 ; "bitmain_c5_update"



; int __fastcall sub_44188(int)
sub_44188

var_214= -0x214
var_210= -0x210
var_20C= -0x20C
var_200= -0x200
newthread= -0x1FC
var_1F8= -0x1F8
var_1F0= -0x1F0
var_1EC= -0x1EC
src= -0x1E8
var_1E4= -0x1E4
var_1E0= -0x1E0
var_1DC= -0x1DC
var_1D8= -0x1D8
var_1D4= -0x1D4
var_1D0= -0x1D0
var_1CC= -0x1CC
s1= -0x1C8
var_1C4= -0x1C4
var_1C0= -0x1C0
var_1BC= -0x1BC
var_1B8= -0x1B8
var_1B4= -0x1B4
var_1B0= -0x1B0
var_1AC= -0x1AC
attr= -0x1A8
buf= -0x184
s= -0x180
var_104= -0x104
var_100= -0x100

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x214
MOV             R4, R0
MOVW            R9, #:lower16:aXSS ; "%x%s%s"
MOVW            R8, #:lower16:aRegist ; "regist"
MOVW            R6, #:lower16:dword_6A7F0
BL              pthread_self
BL              pthread_detach
MOVW            R2, #:lower16:aCtAMain ; "ct_a/main"
MOV             R12, #0
MOVT            R2, #:upper16:aCtAMain ; "ct_a/main"
ADD             R3, SP, #0x214+var_1F8
LDM             R2, {R0-R2} ; "ct_a/main"
MOVT            R9, #:upper16:aXSS ; "%x%s%s"
MOVT            R8, #:upper16:aRegist ; "regist"
MOVT            R6, #:upper16:dword_6A7F0
STR             R12, [SP,#0x214+var_1F0]
STR             R12, [SP,#0x214+var_1EC]
STM             R3!, {R0,R1}
ADD             R1, SP, #0x214+var_1F8
STRH            R2, [R3]
MOV             R0, #0xF ; option
BL              prctl
ADD             R0, SP, #0x214+attr ; attr
BL              pthread_attr_init
ADD             R0, SP, #0x214+attr ; attr
MOV             R1, #0x100000 ; stacksize
BL              pthread_attr_setstacksize
LDR             R7, [R4,#8]

loc_441FC
MOV             R4, #0
MOV             R2, #0x7C ; '|' ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x214+s ; s
STR             R4, [SP,#0x214+buf]
BL              memset
MOV             R3, R4  ; flags
MOV             R2, #0x80 ; n
ADD             R1, SP, #0x214+buf ; buf
MOV             R0, R7  ; fd
BL              recv
CMP             R0, R4
BLE             loc_44434
ADD             R2, SP, #0x214+src
ADD             R3, SP, #0x214+s1
STR             R2, [SP,#0x214+var_214]
MOV             R1, R9
ADD             R2, SP, #0x214+var_200
ADD             R0, SP, #0x214+buf
STR             R4, [SP,#0x214+src]
STR             R4, [SP,#0x214+var_1E4]
STR             R4, [SP,#0x214+s1]
STR             R4, [SP,#0x214+var_1C4]
STR             R4, [SP,#0x214+var_200]
STR             R4, [SP,#0x214+var_1E0]
STR             R4, [SP,#0x214+var_1DC]
STR             R4, [SP,#0x214+var_1D8]
STR             R4, [SP,#0x214+var_1D4]
STR             R4, [SP,#0x214+var_1D0]
STR             R4, [SP,#0x214+var_1CC]
STR             R4, [SP,#0x214+var_1C0]
STR             R4, [SP,#0x214+var_1BC]
STR             R4, [SP,#0x214+var_1B8]
STR             R4, [SP,#0x214+var_1B4]
STR             R4, [SP,#0x214+var_1B0]
STR             R4, [SP,#0x214+var_1AC]
BL              __isoc99_sscanf
MOV             R1, R8  ; s2
ADD             R0, SP, #0x214+s1 ; s1
BL              strcmp
SUBS            R4, R0, #0
BEQ             loc_442CC
LDR             R4, [R6]
MOV             R0, #unk_6A818
MOV             R2, #0x80 ; n
ADD             R1, SP, #0x214+buf ; src
ADD             R0, R0, R4,LSL#7 ; dest
ADD             R4, R4, #1
BL              memcpy
STR             R4, [R6]
B               loc_441FC

loc_442CC               ; size
MOV             R1, #1
MOV             R0, #0x98 ; nmemb
BL              calloc
LDR             R11, [R6,#(dword_6A7F4 - 0x6A7F0)]
MOV             R10, R0
CMP             R11, #0
LDRNE           R5, =s2
BNE             loc_442FC
B               loc_44440

loc_442F0
ADD             R4, R4, #1
CMP             R4, R11
BEQ             loc_44334

loc_442FC               ; s2
MOV             R1, R5
ADD             R0, SP, #0x214+src ; s1
BL              strcmp
CMP             R0, #0
ADD             R5, R5, #0x88
BNE             loc_442F0
ADD             R2, R4, R4,LSL#4
MOV             R3, #unk_6E818
ADD             R1, R3, R2,LSL#3
LDR             R2, [R3,R2,LSL#3]
LDR             R3, [R1,#0x84]
STR             R2, [R10,#0xC]
STR             R3, [R10,#0x94]

loc_44334
CMP             R11, R4
BEQ             loc_44440
MOVW            R4, #:lower16:dword_68568
MOV             R5, R10
MOVT            R4, #:upper16:dword_68568
ADD             R0, SP, #0x214+src ; s
LDR             R3, [R4]
STR             R3, [R5],#0x10
BL              strlen
ADD             R1, SP, #0x214+src ; src
ADD             R2, R0, #1 ; n
MOV             R0, R5  ; dest
BL              memcpy
MOV             R12, #0
MOVW            R2, #:lower16:sub_444BC
MOV             R3, R10 ; arg
MOVT            R2, #:upper16:sub_444BC ; start_routine
ADD             R1, SP, #0x214+attr ; attr
ADD             R0, SP, #0x214+newthread ; newthread
STR             R12, [R10,#0x90]
BL              pthread_create
LDR             R3, [R10,#0x90]
CMP             R3, #0
BNE             loc_443A8

loc_44394               ; useconds
MOVW            R0, #0x2710
BL              usleep
LDR             R3, [R10,#0x90]
CMP             R3, #0
BEQ             loc_44394

loc_443A8
LDR             R10, [R10]
MOV             R5, #0
LDR             R3, [R4]
MOV             R2, #0xFC ; n
MOV             R1, R5  ; c
ADD             R0, SP, #0x214+var_100 ; s
STR             R5, [SP,#0x214+var_104]
CMP             R10, R3
STRNE           R10, [R4]
BL              memset
MOVW            R0, #:lower16:aOk ; "OK"
MOVW            R2, #:lower16:aRegResp ; "reg_resp"
MOVT            R0, #:upper16:aOk ; "OK"
MOVT            R2, #:upper16:aRegResp ; "reg_resp"
ADD             R3, SP, #0x214+src
MOV             R1, #aXDSSS ; "%x %d %s %s %s"
STR             R3, [SP,#0x214+var_20C]
STR             R0, [SP,#0x214+var_210]
MOV             R3, R10
STR             R2, [SP,#0x214+var_214]
ADD             R0, SP, #0x214+var_104 ; s
MOV             R2, #0x3F ; '?'
BL              sprintf
ADD             R0, SP, #0x214+var_104 ; s
BL              strlen
MOV             R3, R5  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x214+var_104 ; buf
MOV             R0, R7  ; fd
BL              send
LDR             R3, [R4]
ADD             R3, R3, #1
STR             R3, [R4]
B               loc_441FC

loc_44434
MOV             R0, R4
ADD             SP, SP, #0x214
POP             {R4-R11,PC}

loc_44440
MOV             R4, #0
MOV             R2, #0xFC ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x214+var_100 ; s
STR             R4, [SP,#0x214+var_104]
BL              memset
MOVW            R3, #:lower16:aNoName ; "no_name"
MOVW            R2, #:lower16:aRegResp ; "reg_resp"
ADD             R0, SP, #0x214+src
MOVT            R3, #:upper16:aNoName ; "no_name"
MOVT            R2, #:upper16:aRegResp ; "reg_resp"
MOVW            R1, #:lower16:aXDSSS ; "%x %d %s %s %s"
STR             R0, [SP,#0x214+var_20C]
MOVT            R1, #:upper16:aXDSSS ; "%x %d %s %s %s"
STR             R3, [SP,#0x214+var_210]
ADD             R0, SP, #0x214+var_104 ; s
MOV             R3, R4
STR             R2, [SP,#0x214+var_214]
MOV             R2, #0x3F ; '?'
BL              sprintf
ADD             R0, SP, #0x214+var_104 ; s
BL              strlen
MOV             R3, R4  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x214+var_104 ; buf
MOV             R0, R7  ; fd
BL              send
MOV             R0, R10 ; ptr
BL              free
B               loc_441FC
; End of function sub_44188

off_444B8 DCD s2



; int __fastcall sub_444BC(int)
sub_444BC

optlen= -0x24C
var_248= -0x248
n= -0x240
var_23C= -0x23C
var_238= -0x238
s= -0x234
var_230= -0x230
var_22C= -0x22C
var_228= -0x228
addr= -0x224
var_214= -0x214
buf= -0x204
var_200= -0x200
var_104= -0x104
var_100= -0x100
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x24C
MOV             R7, R0
MOV             R4, #0
MOV             R5, #2
BL              pthread_self
BL              pthread_detach
MOVW            R1, #:lower16:aCtAFcbD ; "ct_a/fcb/%d"
LDR             R2, [R7]
MOVT            R1, #:upper16:aCtAFcbD ; "ct_a/fcb/%d"
ADD             R0, SP, #0x24C+s ; s
STR             R4, [SP,#0x24C+s]
STR             R4, [SP,#0x24C+var_230]
STR             R4, [SP,#0x24C+var_22C]
STR             R4, [SP,#0x24C+var_228]
BL              sprintf
ADD             R1, SP, #0x24C+s
MOV             R0, #0xF ; option
BL              prctl
MOVW            R0, #:lower16:a127001 ; "127.0.0.1"
STRH            R5, [SP,#0x24C+addr]
MOVT            R0, #:upper16:a127001 ; "127.0.0.1"
BL              inet_addr
MOV             R2, R4  ; protocol
STR             R0, [SP,#0x24C+addr.sa_data+2]
MOV             R1, #1  ; type
MOV             R0, R5  ; domain
BL              socket
SUBS            R4, R0, #0
BLT             loc_4471C
MOV             R1, #1  ; level
ADD             R3, SP, #0x24C+var_4
MOV             R12, #4
STR             R1, [R3,#-0x238]! ; optval
MOV             R2, R5  ; optname
STR             R12, [SP,#0x24C+optlen] ; optlen
BL              setsockopt
CMP             R0, #0
BLT             loc_44704
LDR             R3, [R7]
MOV             R5, #aBindError ; "bind error"

loc_44564
REV16           R3, R3
MOV             R2, #0x10 ; len
ADD             R1, SP, #0x24C+addr ; addr
MOV             R0, R4  ; fd
STRH            R3, [SP,#0x24C+addr.sa_data]
BL              bind
CMP             R0, #0
MOV             R0, R5  ; s
BGE             loc_4459C
BL              perror
LDR             R3, [R7]
ADD             R3, R3, #1
STR             R3, [R7]
B               loc_44564

loc_4459C               ; n
MOV             R1, #5
MOV             R0, R4  ; fd
BL              listen
CMP             R0, #0
BLT             loc_446EC
MOV             R1, #0x10
ADD             R2, SP, #0x24C+var_4
MOV             R3, #1
STR             R1, [R2,#-0x234]! ; addr_len
MOV             R0, R4  ; fd
ADD             R1, SP, #0x24C+var_214 ; addr
STR             R3, [R7,#0x90]
BL              accept
SUBS            R5, R0, #0
BLT             loc_44734
MOV             R4, #0
MOV             R2, #0xFC ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x24C+var_200 ; s
STR             R4, [SP,#0x24C+buf]
ADD             R10, R7, #0x10
BL              memset
MOVW            R1, #:lower16:aXS ; "%x %s\n"
MOV             R3, R10
MOVT            R1, #:upper16:aXS ; "%x %s\n"
MOV             R2, #0x3F ; '?'
ADD             R0, SP, #0x24C+buf ; s
MOVW            R9, #:lower16:aOk ; "OK"
BL              sprintf
ADD             R0, SP, #0x24C+buf ; s
MOVW            R8, #:lower16:aXDSS ; "%x %d %s %s"
BL              strlen
MOV             R3, R4  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x24C+buf ; buf
MOV             R0, R5  ; fd
BL              send
LDR             R2, [R7,#0x94]
MOV             R11, R4
MOVT            R9, #:upper16:aOk ; "OK"
MOVT            R8, #:upper16:aXDSS ; "%x %d %s %s"
MOV             R0, R2  ; size
STR             R2, [SP,#0x24C+n]
BL              malloc
MOV             R3, R4  ; flags
MOV             R6, R0
MOV             R1, R0  ; buf
LDR             R2, [SP,#0x24C+n] ; n
MOV             R0, R5  ; fd
BL              recv

loc_44664               ; buf
MOV             R1, R6
MOV             R3, #0  ; flags
LDR             R2, [R7,#0x94] ; n
MOV             R0, R5  ; fd
BL              recv
SUBS            R1, R0, #0
MOV             R0, R6
MOVLE           R4, #0
BLE             loc_4469C
LDR             R4, [R7,#0xC]
CMP             R4, #0
BEQ             loc_4469C
BLX             R4
MOV             R4, R0

loc_4469C               ; n
MOV             R2, #0xFC
MOV             R1, #0  ; c
ADD             R0, SP, #0x24C+var_100 ; s
STR             R11, [SP,#0x24C+var_104]
BL              memset
MOV             R3, R4
MOV             R1, R8  ; format
MOV             R2, #0x3F ; '?'
STR             R9, [SP,#0x24C+var_248]
STR             R10, [SP,#0x24C+optlen]
ADD             R0, SP, #0x24C+var_104 ; s
BL              sprintf
ADD             R0, SP, #0x24C+var_104 ; s
BL              strlen
MOV             R3, #0  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x24C+var_104 ; buf
MOV             R0, R5  ; fd
BL              send
B               loc_44664

loc_446EC
MOV             R0, #aListenError ; "listen error"
BL              perror

loc_446F8
MOV             R0, #0
ADD             SP, SP, #0x24C
POP             {R4-R11,PC}

loc_44704
MOV             R0, #aSetSockoptErr ; "set sockopt err"
BL              perror
MOV             R0, #0
ADD             SP, SP, #0x24C
POP             {R4-R11,PC}

loc_4471C
MOV             R0, #aSocketError ; "socket error"
BL              perror
MOV             R0, #0
ADD             SP, SP, #0x24C
POP             {R4-R11,PC}

loc_44734
MOV             R0, #aAcceptError ; "accept error"
BL              perror
B               loc_446F8
; End of function sub_444BC




; int __fastcall sub_44744(int, int)
sub_44744

var_338= -0x338
addr= -0x334
attr= -0x324
var_300= -0x300
var_2FC= -0x2FC
var_2F8= -0x2F8
var_2F4= -0x2F4
var_2F0= -0x2F0
var_2EC= -0x2EC
var_2E8= -0x2E8
buf= -0x200
s= -0x1FC
var_s0=  0

PUSH            {R4-R8,LR}
MOV             R5, #dword_6A7F0
SUB             SP, SP, #0x338
LDR             R6, [R5,#(dword_6A7F8 - 0x6A7F0)]
CMP             R6, #0
BNE             loc_44978
MOV             R4, R0
ADD             R0, SP, #0x338+attr ; attr
MOV             R8, R1
BL              pthread_attr_init
MOV             R1, #0x100000 ; stacksize
ADD             R0, SP, #0x338+attr ; attr
BL              pthread_attr_setstacksize
MOV             R1, R6  ; mutexattr
ADD             R0, R5, #0xC ; mutex
BL              pthread_mutex_init
CMP             R8, #0
BEQ             loc_447D4
ADD             R7, R8, R8,LSL#4
ADD             R4, R4, #4
LDR             R3, =s2
ADD             R7, R4, R7,LSL#3

loc_447A0               ; n
MOV             R2, #0x80
MOV             R1, R4  ; src
MOV             R0, R3  ; dest
BL              memcpy
ADD             R4, R4, #0x88
MOV             R3, R0
LDR             R2, [R4,#-8]
ADD             R3, R3, #0x88
LDR             R0, [R4,#-0x8C]
CMP             R4, R7
STR             R2, [R3,#-8]
STR             R0, [R3,#-0x8C]
BNE             loc_447A0

loc_447D4
MOVW            R0, #:lower16:a127001 ; "127.0.0.1"
MOV             R4, #0
MOV             R7, #2
MOVT            R0, #:upper16:a127001 ; "127.0.0.1"
STR             R4, [SP,#0x338+addr.sa_data+4]
STR             R4, [SP,#0x338+addr.sa_data+8]
STRH            R4, [SP,#0x338+addr.sa_data+0xC]
STR             R4, [SP,#0x338+addr.sa_data]
STR             R8, [R5,#(dword_6A7F4 - 0x6A7F0)]
STRH            R7, [SP,#0x338+addr]
BL              inet_addr
MOV             R2, R4  ; protocol
STR             R0, [SP,#0x338+addr.sa_data+2]
MOVW            R3, #0xA56
MOV             R0, R7  ; domain
MOV             R1, #1  ; type
STRH            R3, [SP,#0x338+addr.sa_data]
BL              socket
SUBS            R4, R0, #0
BLT             loc_44980
MOV             R7, #aConnectErr ; "connect err:"
B               loc_4483C

loc_44830
BL              perror
MOV             R0, #1  ; seconds
BL              sleep

loc_4483C               ; len
MOV             R2, #0x10
ADD             R1, SP, #0x338+addr ; addr
MOV             R0, R4  ; fd
BL              connect
CMP             R0, #0
MOV             R0, R7  ; s
BLT             loc_44830
MOV             R7, #0
MOV             R2, #0x1FC ; n
MOV             R1, R7  ; c
ADD             R0, SP, #0x338+s ; s
STR             R7, [SP,#0x338+buf]
BL              memset
MOV             R3, R7  ; flags
ADD             R1, SP, #0x338+buf ; buf
MOV             R2, #0x100 ; n
MOV             R0, R4  ; fd
BL              recv
CMP             R0, #0
MOVW            R12, #:lower16:aFunc1Func2Func ; "func1 func2 func3 func4"
ADDGT           R3, SP, #0x338+var_s0
MOVT            R12, #:upper16:aFunc1Func2Func ; "func1 func2 func3 func4"
ADDGT           R0, R3, R0
ADD             LR, SP, #0x338+var_300
STRBGT          R7, [R0,#-0x200]
LDM             R12!, {R0-R3} ; "func1 func2 func3 func4"
STM             LR!, {R0-R3}
MOV             R2, #0xE8 ; n
LDM             R12, {R0,R1} ; "3 func4"
STM             LR, {R0,R1}
MOV             R1, #0  ; c
ADD             R0, SP, #0x338+var_2E8 ; s
BL              memset
ADD             R1, SP, #0x338+var_300 ; buf
MOV             R3, #0  ; flags
MOV             R2, #0x18 ; n
MOV             R0, R4  ; fd
BL              send
MOV             R3, #0  ; flags
ADD             R1, SP, #0x338+buf ; buf
MOV             R2, #0x100 ; n
MOV             R0, R4  ; fd
BL              recv
CMP             R0, #0
MOVW            R12, #:lower16:a3fHeartBeats22 ; "3f heart-beats 22027"
ADDGT           R3, SP, #0x338+var_s0
MOVT            R12, #:upper16:a3fHeartBeats22 ; "3f heart-beats 22027"
ADDGT           R0, R3, R0
MOVGT           R3, #0
STRBGT          R3, [R0,#-0x200]
ADD             LR, SP, #0x338+var_300
LDM             R12!, {R0-R3} ; "3f heart-beats 22027"
STM             LR!, {R0-R3}
MOV             R3, #0  ; flags
LDM             R12, {R0,R1} ; "2027"
MOV             R2, #0x15 ; n
STR             R0, [LR],#4
MOV             R0, R4  ; fd
STRB            R1, [LR]
ADD             R1, SP, #0x338+var_300 ; buf
BL              send
MOV             R0, #0xC ; size
STR             R4, [R5,#(dword_6A814 - 0x6A7F0)]
BL              malloc
MOVW            LR, #0x560A
MOV             R12, R0
MOVW            R2, #:lower16:sub_44188
MOV             R3, R12 ; arg
MOV             R0, SP  ; newthread
ADD             R1, SP, #0x338+attr ; attr
MOVT            R2, #:upper16:sub_44188 ; start_routine
STR             R4, [R12,#8]
STR             LR, [R12]
BL              pthread_create
MOV             R3, #1
STR             R3, [R5,#(dword_6A7F8 - 0x6A7F0)]

loc_4496C
MOV             R0, R6
ADD             SP, SP, #0x338
POP             {R4-R8,PC}

loc_44978
MOV             R6, #0xFFFFFFFF
B               loc_4496C

loc_44980
MOVW            R0, #:lower16:aSocketErr ; "socket err:"
MOV             R6, #0xFFFFFFFC
MOVT            R0, #:upper16:aSocketErr ; "socket err:"
BL              perror
B               loc_4496C
; End of function sub_44744

off_44994 DCD s2



; int __fastcall sub_44998(int)
sub_44998

var_48C= -0x48C
var_488= -0x488
var_484= -0x484
var_47C= -0x47C
var_478= -0x478
addr= -0x474
var_464= -0x464
var_460= -0x460
var_45C= -0x45C
var_458= -0x458
var_454= -0x454
var_450= -0x450
var_44C= -0x44C
var_448= -0x448
var_444= -0x444
var_440= -0x440
var_43C= -0x43C
var_438= -0x438
var_434= -0x434
var_430= -0x430
var_42C= -0x42C
var_428= -0x428
var_424= -0x424
var_420= -0x420
var_41C= -0x41C
var_418= -0x418
var_414= -0x414
var_410= -0x410
var_40C= -0x40C
var_408= -0x408
dest= -0x404
var_400= -0x400
var_384= -0x384
var_380= -0x380
buf= -0x304
s= -0x300
var_204= -0x204
var_200= -0x200
var_C= -0xC

PUSH            {R4-R9,LR}
MOV             R4, #dword_6A7F0
SUB             SP, SP, #0x480
SUB             SP, SP, #0xC
LDR             R3, [R4,#(dword_6A7F8 - 0x6A7F0)]
CMP             R3, #0
BEQ             loc_44C08
MOV             R6, #0
MOV             R7, R0
MOV             R0, #0x24 ; '$' ; size
BL              malloc
MOV             R1, R6  ; mutexattr
MOV             R8, R0
BL              pthread_mutex_init
MOV             R1, R6  ; c
MOV             R2, #0xFC ; n
ADD             R0, SP, #0x48C+s ; s
LDR             R9, [R4,#(dword_6A814 - 0x6A7F0)]
STR             R6, [SP,#0x48C+buf]
BL              memset
MOVW            R1, #:lower16:aXRegistS ; "%x regist %s"
MOV             R3, R7
MOVT            R1, #:upper16:aXRegistS ; "%x regist %s"
MOV             R2, #0x3F ; '?'
ADD             R0, SP, #0x48C+buf ; s
BL              sprintf
ADD             R0, SP, #0x48C+buf ; s
LDR             R5, [R4]
BL              strlen
MOV             R3, R6  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x48C+buf ; buf
MOV             R0, R9  ; fd
BL              send
MOV             R1, R6  ; c
MOV             R2, #0x7C ; '|' ; n
ADD             R0, SP, #0x48C+var_400 ; s
STR             R6, [SP,#0x48C+dest]
BL              memset
LDR             R3, [R4]
CMP             R5, R3
BNE             loc_44A58

loc_44A44               ; useconds
MOV             R0, #0x3E8
BL              usleep
LDR             R3, [R4]
CMP             R3, R5
BEQ             loc_44A44

loc_44A58
MOVW            R1, #:lower16:unk_6A818
MOV             R2, #0x80 ; n
MOVT            R1, #:upper16:unk_6A818
ADD             R0, SP, #0x48C+dest ; dest
ADD             R1, R1, R5,LSL#7 ; src
ADD             R4, SP, #0x48C+var_424
BL              memcpy
ADD             LR, SP, #0x48C+var_444
ADD             R12, SP, #0x48C+var_464
MOVW            R1, #:lower16:aXDSSS_0 ; "%x%d%s%s%s"
ADD             R3, SP, #0x48C+var_47C
STR             R4, [SP,#0x48C+var_484]
ADD             R0, SP, #0x48C+dest
MOV             R4, #0
ADD             R2, SP, #0x48C+var_478
STR             LR, [SP,#0x48C+var_488]
MOVT            R1, #:upper16:aXDSSS_0 ; "%x%d%s%s%s"
STR             R12, [SP,#0x48C+var_48C]
STR             R4, [SP,#0x48C+var_47C]
STR             R4, [SP,#0x48C+var_478]
STR             R4, [SP,#0x48C+var_464]
STR             R4, [SP,#0x48C+var_460]
STR             R4, [SP,#0x48C+var_444]
STR             R4, [SP,#0x48C+var_440]
STR             R4, [SP,#0x48C+var_424]
STR             R4, [SP,#0x48C+var_420]
STR             R4, [SP,#0x48C+var_45C]
STR             R4, [SP,#0x48C+var_458]
STR             R4, [SP,#0x48C+var_454]
STR             R4, [SP,#0x48C+var_450]
STR             R4, [SP,#0x48C+var_44C]
STR             R4, [SP,#0x48C+var_448]
STR             R4, [SP,#0x48C+var_43C]
STR             R4, [SP,#0x48C+var_438]
STR             R4, [SP,#0x48C+var_434]
STR             R4, [SP,#0x48C+var_430]
STR             R4, [SP,#0x48C+var_42C]
STR             R4, [SP,#0x48C+var_428]
STR             R4, [SP,#0x48C+var_41C]
STR             R4, [SP,#0x48C+var_418]
STR             R4, [SP,#0x48C+var_414]
STR             R4, [SP,#0x48C+var_410]
STR             R4, [SP,#0x48C+var_40C]
STR             R4, [SP,#0x48C+var_408]
BL              __isoc99_sscanf
LDR             R3, [SP,#0x48C+var_47C]
CMP             R3, R4
BEQ             loc_44C10
MOVW            R0, #:lower16:a127001 ; "127.0.0.1"
MOV             R5, #2
MOVT            R0, #:upper16:a127001 ; "127.0.0.1"
STRH            R5, [SP,#0x48C+addr]
STR             R4, [SP,#0x48C+addr.sa_data]
STR             R4, [SP,#0x48C+addr.sa_data+4]
STR             R4, [SP,#0x48C+addr.sa_data+8]
STRH            R4, [SP,#0x48C+addr.sa_data+0xC]
BL              inet_addr
LDR             R3, [SP,#0x48C+var_47C]
MOV             R2, R4  ; protocol
STR             R0, [SP,#0x48C+addr.sa_data+2]
MOV             R1, #1  ; type
MOV             R0, R5  ; domain
REV16           R3, R3
STRH            R3, [SP,#0x48C+addr.sa_data]
BL              socket
SUBS            R5, R0, #0
BLT             loc_44C2C
ADD             R1, SP, #0x48C+addr ; addr
MOV             R2, #0x10 ; len
BL              connect
CMP             R0, #0
BLT             loc_44C18
MOV             R1, R4  ; c
MOV             R2, #0x1FC ; n
ADD             R0, SP, #0x48C+var_200 ; s
STR             R4, [SP,#0x48C+var_204]
BL              memset
MOV             R3, R4  ; flags
MOV             R2, #0x200 ; n
ADD             R1, SP, #0x48C+var_204 ; buf
MOV             R0, R5  ; fd
BL              recv
CMP             R0, #0
MOV             R2, #0x7C ; '|' ; n
ADDGT           R3, SP, #0x48C+var_C
ADDGT           R3, R3, #8
ADDGT           R0, R3, R0
STRBGT          R4, [R0,#-0x200]
MOV             R4, #0
MOV             R1, R4  ; c
ADD             R0, SP, #0x48C+var_380 ; s
BL              memset
MOVW            R12, #0x4B4F
MOV             R3, R4  ; flags
MOVT            R12, #0x21 ; '!'
MOV             R2, #4  ; n
ADD             R1, SP, #0x48C+var_384 ; buf
MOV             R0, R5  ; fd
STR             R12, [SP,#0x48C+var_384]
BL              send
LDR             R3, [SP,#0x48C+var_47C]
MOV             R0, R4
STR             R5, [R8,#0x20]
STR             R8, [R7,#0x80]
STR             R3, [R8,#0x18]

loc_44BFC
ADD             SP, SP, #0x480
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_44C08
MOV             R0, #0xFFFFFFFF
B               loc_44BFC

loc_44C10
MOV             R0, #0xFFFFFFFC
B               loc_44BFC

loc_44C18
MOV             R0, #aConnectErr ; "connect err:"
BL              perror
MOV             R0, #0xFFFFFFFD
B               loc_44BFC

loc_44C2C
MOV             R0, #aSocketErr ; "socket err:"
BL              perror
MOV             R0, #0xFFFFFFFC
B               loc_44BFC
; End of function sub_44998




; int sub_44C40()
sub_44C40
SUB             SP, SP, #0x10
SUB             R12, SP, #4
ADD             SP, SP, #0x10
STMIB           R12, {R0-R3}
MOV             R0, #0
BX              LR
; End of function sub_44C40




; int __fastcall sub_44C58(int, const void *, size_t, _DWORD *)
sub_44C58

var_150= -0x150
var_14C= -0x14C
var_148= -0x148
var_144= -0x144
var_140= -0x140
var_13C= -0x13C
var_138= -0x138
var_134= -0x134
var_130= -0x130
var_12C= -0x12C
var_128= -0x128
var_124= -0x124
var_120= -0x120
var_11C= -0x11C
var_118= -0x118
var_114= -0x114
var_110= -0x110
var_10C= -0x10C
var_108= -0x108
var_104= -0x104
buf= -0x100
s= -0xFC

MOVW            R12, #:lower16:dword_6A7F0
PUSH            {R4-R8,LR}
MOVT            R12, #:upper16:dword_6A7F0
SUB             SP, SP, #0x150
LDR             R12, [R12,#(dword_6A7F8 - 0x6A7F0)]
CMP             R12, #0
BEQ             loc_44D84
LDR             R5, [R0,#0x80]
CMP             R5, #0
BEQ             loc_44D8C
MOV             R0, R5  ; mutex
MOV             R6, R3
MOV             R8, R2
MOV             R7, R1
BL              pthread_mutex_trylock
SUBS            R4, R0, #0
BNE             loc_44D7C
MOV             R2, R8  ; n
MOV             R1, R7  ; buf
MOV             R3, R4  ; flags
LDR             R0, [R5,#0x20] ; fd
BL              send
CMP             R0, #0
BLE             loc_44D94
MOV             R2, #0xFC ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x150+s ; s
STR             R4, [SP,#0x150+buf]
BL              memset
ADD             R1, SP, #0x150+buf ; buf
MOV             R3, R4  ; flags
MOV             R2, #0x100 ; n
LDR             R0, [R5,#0x20] ; fd
BL              recv
CMP             R0, #0
STR             R4, [SP,#0x150+var_148]
STR             R4, [SP,#0x150+var_144]
STR             R4, [SP,#0x150+var_140]
STR             R4, [SP,#0x150+var_13C]
STR             R4, [SP,#0x150+var_120]
STR             R4, [SP,#0x150+var_11C]
STR             R4, [SP,#0x150+var_138]
STR             R4, [SP,#0x150+var_134]
STR             R4, [SP,#0x150+var_130]
STR             R4, [SP,#0x150+var_12C]
STR             R4, [SP,#0x150+var_128]
STR             R4, [SP,#0x150+var_124]
STR             R4, [SP,#0x150+var_118]
STR             R4, [SP,#0x150+var_114]
STR             R4, [SP,#0x150+var_110]
STR             R4, [SP,#0x150+var_10C]
STR             R4, [SP,#0x150+var_108]
STR             R4, [SP,#0x150+var_104]
BGT             loc_44D50

loc_44D30
CMP             R6, #0
MOV             R0, R5  ; mutex
LDRNE           R3, [SP,#0x150+var_144]
STRNE           R3, [R6]
BL              pthread_mutex_unlock

loc_44D44
MOV             R0, R4
ADD             SP, SP, #0x150
POP             {R4-R8,PC}

loc_44D50
ADD             R2, SP, #0x150+var_120
ADD             R3, SP, #0x150+var_140
MOVW            R1, #:lower16:aXDSS_0 ; "%x%d%s%s"
STR             R2, [SP,#0x150+var_14C]
STR             R3, [SP,#0x150+var_150]
ADD             R0, SP, #0x150+buf
MOVT            R1, #:upper16:aXDSS_0 ; "%x%d%s%s"
ADD             R3, SP, #0x150+var_144
ADD             R2, SP, #0x150+var_148
BL              __isoc99_sscanf
B               loc_44D30

loc_44D7C
MOV             R4, #0xFFFFFFFD
B               loc_44D44

loc_44D84
MOV             R4, #0xFFFFFFFF
B               loc_44D44

loc_44D8C
MOV             R4, #0xFFFFFFFE
B               loc_44D44

loc_44D94               ; mutex
MOV             R0, R5
MOV             R4, #0xFFFFFFFC
BL              pthread_mutex_unlock
B               loc_44D44
; End of function sub_44C58




; int sub_44DA4()
sub_44DA4
MOV             R0, #0
BX              LR
; End of function sub_44DA4




; int __fastcall sub_44DAC(void *src, size_t n, const void **)
sub_44DAC
MOV             R3, R2
MOV             R2, R1  ; n
MOV             R1, R0  ; src
MOV             R0, R3  ; int
B               sub_482A8
; End of function sub_44DAC




; int __fastcall sub_44DC0(void *src, size_t n, _DWORD *)
sub_44DC0
PUSH            {R4-R6,LR}
MOV             R4, R2
LDM             R2, {R2,R12}
ADD             R3, R12, R1
CMP             R3, R2
BHI             loc_44DF8
LDR             R3, [R4,#8]
MOV             R5, R1
MOV             R2, R5  ; n
MOV             R1, R0  ; src
ADD             R0, R3, R12 ; dest
BL              memcpy
LDR             R3, [R4,#4]
ADD             R3, R5, R3

loc_44DF8
STR             R3, [R4,#4]
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_44DC0




; size_t __fastcall sub_44E04(const void *, size_t, FILE *s)
sub_44E04
MOV             R3, R2  ; s
PUSH            {R4,LR}
MOV             R2, #1  ; n
BL              fwrite
SUBS            R0, R0, #1
MOVNE           R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_44E04




; int __fastcall sub_44E20(void *buf, size_t n, int *)
sub_44E20
LDR             R3, [R2]
MOV             R2, R1  ; n
PUSH            {R4,LR}
MOV             R4, R1
MOV             R1, R0  ; buf
MOV             R0, R3  ; fd
BL              write
SUBS            R0, R4, R0
MOVNE           R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_44E20




; int __fastcall sub_44E48(const char **, const char **)
sub_44E48
LDR             R1, [R1] ; s2
LDR             R0, [R0] ; s1
B               strcmp
; End of function sub_44E48




; int __fastcall sub_44E54(char *, int, int (__fastcall *)(char *, int, int), int, unsigned int)
sub_44E54

var_2C= -0x2C
format= -0x20
var_18= -0x18
s= -0x14
arg_0=  0x24

PUSH            {R4-R11,LR}
MOV             R6, R2
SUB             SP, SP, #0x2C
MOV             R2, R3
MOV             R4, R0
MOV             R7, R3
MOVW            R0, #:lower16:(aRotateD+0x10) ; "\""
MOV             R3, #0
MOV             R8, R1
MOVT            R0, #:upper16:(aRotateD+0x10) ; "\""
MOV             R1, #1
STR             R3, [SP,#0x2C+var_18]
BLX             R6
CMP             R0, #0
BNE             loc_44EDC
MOVW            R9, #:lower16:aF ; "\\f"
MOVW            R11, #:lower16:aU04xU04x ; "\\u%04X\\u%04X"
MOVW            R3, #:lower16:aU04x ; "\\u%04X"
ADD             R8, R4, R8
MOVT            R9, #:upper16:aF ; "\\f"
MOVT            R11, #:upper16:aU04xU04x ; "\\u%04X\\u%04X"
MOV             R10, R4
MOVT            R3, #:upper16:aU04x ; "\\u%04X"
STR             R3, [SP,#0x2C+format]

loc_44EB4
CMP             R10, R8
BCC             loc_44EE8
CMP             R4, R10
BEQ             loc_450C0
SUB             R1, R10, R4
MOV             R0, R4
MOV             R2, R7
BLX             R6
CMP             R0, #0
BEQ             loc_450C0

loc_44EDC
MOV             R0, #0xFFFFFFFF
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_44EE8
ADD             R2, SP, #0x2C+var_18
SUB             R1, R8, R10
MOV             R0, R10
BL              sub_48830
SUBS            R5, R0, #0
BEQ             loc_44EDC
LDR             R2, [SP,#0x2C+var_18]
CMP             R2, #0x22 ; '"'
CMPNE           R2, #0x5C ; '\'
MOVEQ           R1, #1
MOVNE           R1, #0
CMP             R2, #0x1F
ORRLE           R1, R1, #1
CMP             R1, #0
BEQ             loc_4508C

loc_44F24
CMP             R4, R10
BEQ             loc_44F44
MOV             R2, R7
SUB             R1, R10, R4
MOV             R0, R4
BLX             R6
CMP             R0, #0
BNE             loc_44EDC

loc_44F44
CMP             R10, R5
BEQ             loc_450C0
LDR             R3, [SP,#0x2C+var_18]
CMP             R3, #0xC
BEQ             loc_45040
BLE             loc_44FA0
CMP             R3, #0x22 ; '"'
BEQ             loc_45030
BLE             loc_44FDC
CMP             R3, #0x2F ; '/'
BEQ             loc_4507C
CMP             R3, #0x5C ; '\'
BNE             loc_44FB8
MOVW            R0, #:lower16:asc_56794 ; "\\\\"
MOV             R1, #2
MOVT            R0, #:upper16:asc_56794 ; "\\\\"

loc_44F84
MOV             R2, R7
BLX             R6
CMP             R0, #0
BNE             loc_44EDC
MOV             R4, R5

loc_44F98
MOV             R10, R5
B               loc_44EB4

loc_44FA0
CMP             R3, #9
BEQ             loc_4506C
CMP             R3, #0xA
BEQ             loc_4505C
CMP             R3, #8
BEQ             loc_4504C

loc_44FB8
CMP             R3, #0x10000
BGE             loc_44FF8

loc_44FC0               ; maxlen
MOV             R1, #0xD
ADD             R0, SP, #0x2C+s ; s
LDR             R2, [SP,#0x2C+format] ; format
BL              snprintf
ADD             R0, SP, #0x2C+s
MOV             R1, #6
B               loc_44F84

loc_44FDC
CMP             R3, #0xD
MOVWEQ          R0, #:lower16:aR ; "\\r"
MOVEQ           R1, #2
MOVTEQ          R0, #:upper16:aR ; "\\r"
BEQ             loc_44F84
CMP             R3, #0x10000
BLT             loc_44FC0

loc_44FF8
SUB             R12, R3, #0x10000
MOV             R1, #0xD ; maxlen
UBFX            R2, R12, #0, #0xA
UBFX            R3, R12, #0xA, #0xA
ORR             R2, R2, #0xDC00
ORR             R3, R3, #0xD800
STR             R2, [SP,#0x2C+var_2C]
ADD             R0, SP, #0x2C+s ; s
MOV             R2, R11 ; format
STR             R12, [SP,#0x2C+var_18]
BL              snprintf
ADD             R0, SP, #0x2C+s
MOV             R1, #0xC
B               loc_44F84

loc_45030
MOVW            R0, #:lower16:asc_56798 ; "\\\""
MOV             R1, #2
MOVT            R0, #:upper16:asc_56798 ; "\\\""
B               loc_44F84

loc_45040
MOV             R1, #2
MOV             R0, R9
B               loc_44F84

loc_4504C
MOVW            R0, #:lower16:aB ; "\\b"
MOV             R1, #2
MOVT            R0, #:upper16:aB ; "\\b"
B               loc_44F84

loc_4505C
MOVW            R0, #:lower16:aN_0 ; "\\n"
MOV             R1, #2
MOVT            R0, #:upper16:aN_0 ; "\\n"
B               loc_44F84

loc_4506C
MOVW            R0, #:lower16:aT ; "\\t"
MOV             R1, #2
MOVT            R0, #:upper16:aT ; "\\t"
B               loc_44F84

loc_4507C
MOVW            R0, #:lower16:asc_567B0 ; "\\/"
MOV             R1, #2
MOVT            R0, #:upper16:asc_567B0 ; "\\/"
B               loc_44F84

loc_4508C
SUB             R1, R2, #0x2F ; '/'
LDR             R3, [SP,#0x2C+arg_0]
CLZ             R1, R1
MOV             R1, R1,LSR#5
ANDS            R3, R1, R3,LSR#10
BNE             loc_44F24
LDR             R3, [SP,#0x2C+arg_0]
CMP             R2, #0x7F
MOVLE           R2, #0
MOVGT           R2, #1
ANDS            R3, R2, R3,LSR#6
BEQ             loc_44F98
B               loc_44F24

loc_450C0
MOVW            R0, #:lower16:(aRotateD+0x10) ; "\""
MOV             R2, R7
MOV             R1, #1
MOVT            R0, #:upper16:(aRotateD+0x10) ; "\""
BLX             R6
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}
; End of function sub_44E54




; int __fastcall sub_450DC(char, int, int, int (__fastcall *)(__int16 *, int, int), int)
sub_450DC

arg_0=  0x18

ANDS            R12, R0, #0x1F
PUSH            {R4-R8,LR}
LDR             R8, [SP,#arg_0]
BEQ             loc_45164
MOVW            R0, #:lower16:word_4C1E4
MOV             R4, R1
MOV             R2, R8
MOVT            R0, #:upper16:word_4C1E4
MOV             R1, #1
MOV             R6, R3
MUL             R4, R12, R4
BLX             R3
CMP             R0, #0
BNE             loc_45154
CMP             R4, #0
BEQ             loc_4515C
MOV             R7, #asc_56768 ; "                                "
B               loc_45130

loc_45128
SUBS            R4, R4, R5
BEQ             loc_4515C

loc_45130
CMP             R4, #0x20 ; ' '
MOV             R2, R8
MOVCC           R5, R4
MOVCS           R5, #0x20 ; ' '
MOV             R0, R7
MOV             R1, R5
BLX             R6
CMP             R0, #0
BEQ             loc_45128

loc_45154
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}

loc_4515C
MOV             R0, #0
POP             {R4-R8,PC}

loc_45164
CMP             R2, #0
BEQ             loc_4515C
TST             R0, #0x20
BNE             loc_4515C
MOVW            R0, #:lower16:(aSD+4) ; " "
MOV             R2, R8
MOVT            R0, #:upper16:(aSD+4) ; " "
MOV             R1, #1
POP             {R4-R8,LR}
BX              R3
; End of function sub_450DC




; int __fastcall sub_4518C(int, const void *, char *s)
sub_4518C
PUSH            {R4-R6,LR}
MOV             R4, R2
MOVW            R2, #:lower16:aP ; "%p"
MOV             R3, R1
MOV             R5, R0
MOVT            R2, #:upper16:aP ; "%p"
MOV             R1, #0xB ; maxlen
MOV             R0, R4  ; s
BL              snprintf
MOV             R1, R4  ; s
MOV             R0, R5  ; int
BL              sub_46508
CMP             R0, #0
BNE             loc_451DC
BL              sub_49420
MOV             R1, R4
MOV             R2, R0
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_46274

loc_451DC
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_4518C




; int __fastcall sub_451E4(_DWORD *, int, int, int, int (__fastcall *)(__int16 *, int, int), int)
sub_451E4

var_A4= -0xA4
var_A0= -0xA0
var_98= -0x98
var_94= -0x94
var_90= -0x90
nmemb= -0x8C
var_88= -0x88
var_84= -0x84
base= -0x80
var_7C= -0x7C
var_78= -0x78
var_74= -0x74
var_70= -0x70
s= -0x68
arg_0=  0x24
arg_4=  0x28

PUSH            {R4-R11,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0xA4
BEQ             def_45210 ; jumptable 00045210 default case
MOV             R5, R3
LDR             R3, [R4]
AND             R8, R1, #0x10000
BIC             R7, R1, #0x10000
MOV             R10, R2
MOV             R9, R1
CMP             R3, #7  ; switch 8 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_45210 ; jumptable 00045210 default case
jpt_45210 DCD loc_45238 ; jump table for switch statement
DCD loc_452B8
DCD loc_45340
DCD loc_4537C
DCD loc_453C0
DCD loc_45400
DCD loc_45428
DCD loc_45290

loc_45238               ; jumptable 00045210 case 0
AND             R2, R1, #0x20 ; ' '
MOVW            R12, #:lower16:asc_567D0 ; ": "
CMP             R2, #0
MOVT            R12, #:upper16:asc_567D0 ; ": "
MOVW            R3, #:lower16:(aHttp+4) ; ":"
ADD             R11, SP, #0xA4+s
MOVT            R3, #:upper16:(aHttp+4) ; ":"
MOVEQ           R3, R12
STR             R3, [SP,#0xA4+var_98]
MOV             R2, R11 ; s
MOVEQ           R3, #2
MOVNE           R3, #1
MOV             R1, R4  ; int
MOV             R0, R5  ; int
STR             R3, [SP,#0xA4+var_94]
BL              sub_4518C
SUBS            R6, R0, #0
BEQ             loc_45450

def_45210               ; jumptable 00045210 default case
MOV             R6, #0xFFFFFFFF

loc_45284
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_45290               ; jumptable 00045210 case 7
MOVW            R0, #:lower16:aNull ; "null"
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #4
LDR             R3, [SP,#0xA4+arg_0]
MOVT            R0, #:upper16:aNull ; "null"
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_452B8               ; jumptable 00045210 case 1
ADD             R11, SP, #0xA4+s
MOV             R1, R4  ; int
MOV             R2, R11 ; s
MOV             R0, R5  ; int
BL              sub_4518C
SUBS            R6, R0, #0
BNE             def_45210 ; jumptable 00045210 default case
MOV             R0, R4
BL              sub_48E60
CMP             R8, #0
STR             R0, [SP,#0xA4+var_98]
BNE             loc_456D8
MOVW            R0, #:lower16:(aPools_1+0xC) ; "["
LDR             R2, [SP,#0xA4+arg_4]
MOVT            R0, #:upper16:(aPools_1+0xC) ; "["
MOV             R1, #1
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_45210 ; jumptable 00045210 default case
LDR             R3, [SP,#0xA4+var_98]
CMP             R3, #0
BNE             loc_455C0
MOV             R1, R11 ; s
MOV             R0, R5  ; int
BL              sub_46568
MOVW            R0, #:lower16:word_563F8
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
MOVT            R0, #:upper16:word_563F8
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
B               loc_45284

loc_45340               ; jumptable 00045210 case 2
MOV             R0, R4
BL              sub_49028
MOV             R5, R0
MOV             R0, R4
BL              sub_49044
STR             R7, [SP,#0xA4+var_A4]
MOV             R1, R0
LDR             R3, [SP,#0xA4+arg_4]
MOV             R0, R5
LDR             R2, [SP,#0xA4+arg_0]
BL              sub_44E54
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_4537C               ; jumptable 00045210 case 3
MOV             R0, R4
BL              sub_49284
MOVW            R2, #:lower16:(aShareSubmissio_0+0x14) ; "%lld"
STRD            R0, R1, [SP,#0xA4+var_A4]
MOVT            R2, #:upper16:(aShareSubmissio_0+0x14) ; format
ADD             R0, SP, #0xA4+s ; s
MOV             R1, #0x64 ; 'd' ; maxlen
BL              snprintf
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, R0
LDR             R3, [SP,#0xA4+arg_0]
ADD             R0, SP, #0xA4+s
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_453C0               ; jumptable 00045210 case 4
MOV             R0, R4
BL              sub_49330
MOV             R1, #0x64 ; 'd'
UBFX            R2, R7, #0xB, #5
ADD             R0, SP, #0xA4+s
BL              sub_484B0
SUBS            R1, R0, #0
BLT             def_45210 ; jumptable 00045210 default case
ADD             R0, SP, #0xA4+s
LDR             R2, [SP,#0xA4+arg_4]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_45400               ; jumptable 00045210 case 5
MOVW            R0, #:lower16:aTrue ; "true"
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #4
LDR             R3, [SP,#0xA4+arg_0]
MOVT            R0, #:upper16:aTrue ; "true"
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_45428               ; jumptable 00045210 case 6
MOVW            R0, #:lower16:aFalse ; "false"
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #5
LDR             R3, [SP,#0xA4+arg_0]
MOVT            R0, #:upper16:aFalse ; "false"
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_45450
MOV             R0, R4
BL              sub_48D5C
CMP             R8, #0
STR             R0, [SP,#0xA4+var_90]
BNE             loc_45720
MOVW            R0, #:lower16:asc_567DC ; "{"
LDR             R2, [SP,#0xA4+arg_4]
MOVT            R0, #:upper16:asc_567DC ; "{"
MOV             R1, #1
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_45210 ; jumptable 00045210 default case
LDR             R3, [SP,#0xA4+var_90]
CMP             R3, #0
BEQ             loc_456F4

loc_45490
LDR             R2, [SP,#0xA4+arg_4]
ADD             R3, R10, #1
STR             R3, [SP,#0xA4+var_88]
MOV             R1, R3
MOV             R0, R7
LDR             R3, [SP,#0xA4+arg_0]
STR             R2, [SP,#0xA4+var_A4]
MOV             R2, #0
BL              sub_450DC
SUBS            R6, R0, #0
BNE             def_45210 ; jumptable 00045210 default case
TST             R9, #0x80
BNE             loc_45730
MOVW            R3, #:lower16:word_51D00
STR             R8, [SP,#0xA4+var_84]
MOVT            R3, #:upper16:word_51D00
LDR             R8, [SP,#0xA4+var_88]
STR             R3, [SP,#0xA4+nmemb]
STR             R6, [SP,#0xA4+var_88]
LDR             R6, [SP,#0xA4+var_90]
STR             R11, [SP,#0xA4+var_90]
LDR             R11, [SP,#0xA4+var_94]
STR             R10, [SP,#0xA4+var_94]

loc_454EC
MOV             R1, R6
MOV             R0, R4
BL              sub_48DA8
MOV             R9, R0
MOV             R0, R6
BL              sub_48DDC
MOV             R10, R0
BL              strlen
LDR             R3, [SP,#0xA4+arg_4]
MOV             R1, R0
LDR             R2, [SP,#0xA4+arg_0]
MOV             R0, R10
STR             R7, [SP,#0xA4+var_A4]
BL              sub_44E54
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, R11
LDR             R0, [SP,#0xA4+var_98]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_45210 ; jumptable 00045210 default case
MOV             R0, R6
BL              sub_48DE8
LDR             R3, [SP,#0xA4+arg_4]
MOV             R1, R7
LDR             R2, [SP,#0xA4+arg_0]
STR             R3, [SP,#0xA4+var_A0]
MOV             R3, R5
STR             R2, [SP,#0xA4+var_A4]
MOV             R2, R8
BL              sub_451E4
CMP             R0, #0
BNE             def_45210 ; jumptable 00045210 default case
CMP             R9, #0
BEQ             loc_4593C
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
LDR             R0, [SP,#0xA4+nmemb]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_45210 ; jumptable 00045210 default case
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, #1
MOV             R1, R8
MOV             R0, R7
MOV             R6, R9
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_450DC
CMP             R0, #0
BEQ             loc_454EC
B               def_45210 ; jumptable 00045210 default case

loc_455C0
LDR             R3, [SP,#0xA4+arg_4]
ADD             R6, R10, #1
MOV             R1, R6
MOV             R2, #0
MOV             R0, R7
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_450DC
SUBS            R9, R0, #0
BNE             def_45210 ; jumptable 00045210 default case
MOVW            R3, #:lower16:word_51D00
STR             R8, [SP,#0xA4+var_90]
MOVT            R3, #:upper16:word_51D00
STR             R11, [SP,#0xA4+nmemb]
STR             R3, [SP,#0xA4+var_94]
MOV             R8, R6
LDR             R3, [SP,#0xA4+var_98]
STR             R10, [SP,#0xA4+var_98]
SUB             R2, R3, #1
MOV             R11, R3
MOV             R10, R2

loc_45614
MOV             R1, R9
MOV             R0, R4
BL              sub_48E7C
LDR             R3, [SP,#0xA4+arg_4]
MOV             R1, R7
LDR             R2, [SP,#0xA4+arg_0]
STR             R3, [SP,#0xA4+var_A0]
MOV             R3, R5
STR             R2, [SP,#0xA4+var_A4]
MOV             R2, R8
BL              sub_451E4
SUBS            R6, R0, #0
BNE             def_45210 ; jumptable 00045210 default case
CMP             R10, R9
BLS             loc_45914
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
LDR             R0, [SP,#0xA4+var_94]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_45210 ; jumptable 00045210 default case
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, #1
MOV             R1, R8
MOV             R0, R7
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_450DC
CMP             R0, #0
BNE             def_45210 ; jumptable 00045210 default case

loc_45690
ADD             R9, R9, #1
CMP             R11, R9
BNE             loc_45614
LDR             R11, [SP,#0xA4+nmemb]
MOV             R0, R5  ; int
LDR             R8, [SP,#0xA4+var_90]
MOV             R1, R11 ; s
BL              sub_46568
CMP             R8, #0
BNE             loc_45284
MOVW            R0, #:lower16:word_563F8
LDR             R2, [SP,#0xA4+arg_4]
MOVT            R0, #:upper16:word_563F8
MOV             R1, #1
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
B               loc_45284

loc_456D8
LDR             R3, [SP,#0xA4+var_98]
CMP             R3, #0
BNE             loc_455C0

loc_456E4               ; s
MOV             R1, R11
MOV             R0, R5  ; int
BL              sub_46568
B               loc_45284

loc_456F4               ; s
MOV             R1, R11
MOV             R0, R5  ; int
BL              sub_46568
MOVW            R0, #:lower16:(aIdDMethodMinin_0+0x3C) ; "}"
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
MOVT            R0, #:upper16:(aIdDMethodMinin_0+0x3C) ; "}"
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
B               loc_45284

loc_45720
LDR             R3, [SP,#0xA4+var_90]
CMP             R3, #0
BNE             loc_45490
B               loc_456E4

loc_45730
MOV             R0, R4
BL              sub_48AD8
STR             R0, [SP,#0xA4+var_7C]
MOV             R0, R0,LSL#2
BL              sub_48144
SUBS            R3, R0, #0
STR             R3, [SP,#0xA4+base]
BEQ             def_45210 ; jumptable 00045210 default case
SUB             R3, R3, #4
STR             R7, [SP,#0xA4+var_74]
STR             R5, [SP,#0xA4+var_70]
MOV             R9, R3
STR             R3, [SP,#0xA4+var_78]
MOV             R7, R6
STR             R8, [SP,#0xA4+var_84]
LDR             R5, [SP,#0xA4+var_90]
B               loc_45778

loc_45774
MOV             R7, R8

loc_45778
MOV             R0, R5
ADD             R8, R7, #1
BL              sub_48DDC
MOV             R1, R5
STR             R0, [R9,#4]!
MOV             R0, R4
BL              sub_48DA8
SUBS            R5, R0, #0
BNE             loc_45774
LDR             R2, [SP,#0xA4+var_7C]
MOV             R3, R8
STR             R5, [SP,#0xA4+var_90]
STR             R8, [SP,#0xA4+nmemb]
CMP             R2, R3
LDR             R8, [SP,#0xA4+var_84]
LDR             R5, [SP,#0xA4+var_70]
STR             R7, [SP,#0xA4+var_84]
LDR             R7, [SP,#0xA4+var_74]
BNE             loc_459D4
LDR             R9, [SP,#0xA4+var_90]
MOV             R2, #word_51D00
MOVW            R3, #:lower16:sub_44E48
STR             R2, [SP,#0xA4+var_90]
MOVT            R3, #:upper16:sub_44E48 ; compar
MOV             R2, #4  ; size
LDR             R1, [SP,#0xA4+nmemb] ; nmemb
LDR             R0, [SP,#0xA4+base] ; base
BL              qsort
STR             R8, [SP,#0xA4+var_7C]
STR             R11, [SP,#0xA4+var_74]
LDR             R8, [SP,#0xA4+var_78]
LDR             R11, [SP,#0xA4+var_88]
STR             R6, [SP,#0xA4+var_78]
MOV             R6, R9
STR             R10, [SP,#0xA4+var_88]
B               loc_4585C

loc_4580C
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
LDR             R0, [SP,#0xA4+var_90]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             loc_45904
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, #1
MOV             R1, R11
MOV             R0, R7
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_450DC
CMP             R0, #0
BNE             loc_45904

loc_4584C
LDR             R3, [SP,#0xA4+nmemb]
ADD             R6, R6, #1
CMP             R6, R3
BEQ             loc_459A0

loc_4585C
LDR             R10, [R8,#4]!
MOV             R0, R4
MOV             R1, R10
BL              sub_48AF4
SUBS            R9, R0, #0
BEQ             loc_459B8
MOV             R0, R10 ; s
BL              strlen
LDR             R3, [SP,#0xA4+arg_4]
MOV             R1, R0
LDR             R2, [SP,#0xA4+arg_0]
MOV             R0, R10
STR             R7, [SP,#0xA4+var_A4]
BL              sub_44E54
LDR             R2, [SP,#0xA4+arg_4]
LDRD            R0, R1, [SP,#0xA4+var_98]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             loc_45904
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, R11
MOV             R0, R9
MOV             R1, R7
STR             R3, [SP,#0xA4+var_A0]
LDR             R3, [SP,#0xA4+arg_0]
STR             R3, [SP,#0xA4+var_A4]
MOV             R3, R5
BL              sub_451E4
SUBS            R2, R0, #0
BNE             loc_45904
LDR             R3, [SP,#0xA4+var_84]
CMP             R6, R3
BCC             loc_4580C
LDR             R3, [SP,#0xA4+arg_4]
MOV             R0, R7
LDR             R1, [SP,#0xA4+var_88]
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_450DC
CMP             R0, #0
BEQ             loc_4584C

loc_45904
LDR             R0, [SP,#0xA4+base]
MOV             R6, #0xFFFFFFFF
BL              sub_4815C
B               loc_45284

loc_45914
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, R6
LDR             R1, [SP,#0xA4+var_98]
MOV             R0, R7
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_450DC
CMP             R0, #0
BEQ             loc_45690
B               def_45210 ; jumptable 00045210 default case

loc_4593C
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, R9
LDRD            R10, R11, [SP,#0xA4+var_94]
MOV             R0, R7
LDR             R8, [SP,#0xA4+var_84]
STR             R3, [SP,#0xA4+var_A4]
MOV             R1, R10
LDR             R3, [SP,#0xA4+arg_0]
LDR             R6, [SP,#0xA4+var_88]
BL              sub_450DC
CMP             R0, #0
BNE             def_45210 ; jumptable 00045210 default case

loc_4596C               ; s
MOV             R1, R11
MOV             R0, R5  ; int
BL              sub_46568
CMP             R8, #0
BNE             loc_45284
MOVW            R0, #:lower16:(aIdDMethodMinin_0+0x3C) ; "}"
LDR             R2, [SP,#0xA4+arg_4]
MOVT            R0, #:upper16:(aIdDMethodMinin_0+0x3C) ; "}"
MOV             R1, #1
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
B               loc_45284

loc_459A0
LDR             R0, [SP,#0xA4+base]
LDR             R8, [SP,#0xA4+var_7C]
LDR             R6, [SP,#0xA4+var_78]
LDR             R11, [SP,#0xA4+var_74]
BL              sub_4815C
B               loc_4596C

loc_459B8
MOVW            R1, #:lower16:aDumpC ; "dump.c"
MOVW            R0, #:lower16:(aInvalidValue+8) ; "value"
MOVT            R1, #:upper16:aDumpC ; "dump.c"
MOVT            R0, #:upper16:(aInvalidValue+8) ; assertion
LDR             R3, =aDoDump ; "do_dump"
MOVW            R2, #0x16B ; line
BL              __assert_fail

loc_459D4
MOVW            R1, #:lower16:aDumpC ; "dump.c"
MOVW            R0, #:lower16:aISize ; "i == size"
MOVT            R1, #:upper16:aDumpC ; "dump.c"
MOVT            R0, #:upper16:aISize ; "i == size"
LDR             R3, =aDoDump ; "do_dump"
MOV             R2, #0x160 ; line
BL              __assert_fail
; End of function sub_451E4

off_459F0 DCD aDoDump   ; "do_dump"



; int __fastcall sub_459F4(_DWORD *, int (__fastcall *)(__int16 *, int, int), int, int)
sub_459F4

var_2C= -0x2C
var_20= -0x20

TST             R3, #0x200
PUSH            {R4-R7,LR}
SUB             SP, SP, #0x2C
BNE             loc_45A18
CMP             R0, #0
BEQ             loc_45A64
LDR             R12, [R0]
CMP             R12, #1
BHI             loc_45A64

loc_45A18
MOV             R4, R0
ADD             R0, SP, #0x2C+var_20
MOV             R7, R2
MOV             R6, R1
MOV             R5, R3
BL              sub_461E0
SUBS            R2, R0, #0
BNE             loc_45A64
MOV             R0, R4
STRD            R6, R7, [SP,#0x2C+var_2C]
MOV             R1, R5
ADD             R3, SP, #0x2C+var_20
BL              sub_451E4
MOV             R4, R0
ADD             R0, SP, #0x2C+var_20
BL              sub_4625C

loc_45A58
MOV             R0, R4
ADD             SP, SP, #0x2C ; ','
POP             {R4-R7,PC}

loc_45A64
MOV             R4, #0xFFFFFFFF
B               loc_45A58
; End of function sub_459F4




; _BYTE *__fastcall sub_45A6C(_DWORD *, int)
sub_45A6C

var_C= -0xC

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x10
MOV             R5, R0
ADD             R0, SP, #0x10+var_C
MOV             R6, R1
BL              sub_48218
SUBS            R4, R0, #0
MOVNE           R4, #0
BNE             loc_45AB8
MOVW            R1, #:lower16:sub_44DAC
MOV             R3, R6
MOV             R0, R5
MOVT            R1, #:upper16:sub_44DAC
ADD             R2, SP, #0x10+var_C
BL              sub_459F4
CMP             R0, #0
BEQ             loc_45AC4

loc_45AB0
ADD             R0, SP, #0x10+var_C
BL              sub_4824C

loc_45AB8
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_45AC4
ADD             R0, SP, #0x10+var_C
BL              sub_4828C
BL              sub_481C0
MOV             R4, R0
B               loc_45AB0
; End of function sub_45A6C

PUSH            {R4,LR}
SUB             SP, SP, #0x10
STR             R1, [SP,#0xC]
MOVW            R1, #:lower16:sub_44DC0
MOV             R4, #0
MOVT            R1, #:upper16:sub_44DC0
STR             R2, [SP,#4]
ADD             R2, SP, #4
STR             R4, [SP,#8]
BL              sub_459F4
CMP             R0, R4
LDREQ           R0, [SP,#8]
MOVNE           R0, R4
ADD             SP, SP, #0x10
POP             {R4,PC}



; int __fastcall sub_45B14(_DWORD *, int, int)
sub_45B14
MOV             R3, R2
MOV             R2, R1
MOV             R1, #sub_44E04
B               sub_459F4
; End of function sub_45B14




; int __fastcall sub_45B28(_DWORD *, int, int)
sub_45B28
MOV             R3, R1
MOVW            R1, #:lower16:aW ; "w"
PUSH            {R4-R6,LR}
MOVT            R1, #:upper16:aW ; "w"
MOV             R5, R0
MOV             R0, R3
MOV             R6, R2
BL              fopen64
SUBS            R4, R0, #0
BEQ             loc_45B84
MOVW            R1, #:lower16:sub_44E04
MOV             R3, R6
MOV             R0, R5
MOVT            R1, #:upper16:sub_44E04
MOV             R2, R4
BL              sub_459F4
MOV             R5, R0
MOV             R0, R4  ; stream
BL              fclose
CMP             R0, #0
BNE             loc_45B84

loc_45B7C
MOV             R0, R5
POP             {R4-R6,PC}

loc_45B84
MOV             R5, #0xFFFFFFFF
B               loc_45B7C
; End of function sub_45B28




; int __fastcall sub_45B8C(_DWORD *, int, int)
sub_45B8C

var_8= -8
var_4= -4

PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R12, SP, #0xC+var_4
MOV             R3, R2
STR             R1, [R12,#-4]!
MOVW            R1, #:lower16:sub_44E20
MOV             R2, R12
MOVT            R1, #:upper16:sub_44E20
BL              sub_459F4
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_45B8C




; int __fastcall sub_45BB8(unsigned __int16 *, unsigned int, int)
sub_45BB8
MOVW            R12, #0xBEEF
TST             R0, #3
MOVT            R12, #0xDEAD
PUSH            {R4-R9,LR}
ADD             R12, R2, R12
ADD             R12, R12, R1
BNE             loc_45C9C
CMP             R1, #0xC
BLS             loc_45F48
ADD             R4, R0, #0xC
MOV             R3, R12
MOV             LR, R12

loc_45BE8
LDR             R2, [R4,#-4]
SUB             R1, R1, #0xC
LDR             R6, [R4,#-0xC]
CMP             R1, #0xC
LDR             R5, [R4,#-8]
MOV             R0, R4
ADD             R3, R3, R2
ADD             R4, R4, #0xC
SUB             R2, R6, R3
ADD             R2, R2, R12
ADD             LR, LR, R5
EOR             R2, R2, R3,ROR#28
ADD             R3, LR, R3
SUB             LR, LR, R2
ADD             R5, R2, R3
EOR             R2, LR, R2,ROR#26
SUB             R3, R3, R2
ADD             R12, R2, R5
EOR             R2, R3, R2,ROR#24
SUB             R3, R5, R2
ADD             LR, R2, R12
EOR             R3, R3, R2,ROR#16
SUB             R2, R12, R3
ADD             R12, R3, LR
EOR             R2, R2, R3,ROR#13
SUB             R3, LR, R2
ADD             LR, R2, R12
EOR             R3, R3, R2,ROR#28
BHI             loc_45BE8

loc_45C5C
SUB             R1, R1, #1
CMP             R1, #0xB ; switch 12 cases
LDRLS           PC, [PC,R1,LSL#2] ; switch jump
B               def_45C64 ; jumptable 00045C64 default case
                        ; jumptable 00045D4C default case
                        ; jumptable 00045E70 default case
jpt_45C64 DCD loc_45F00 ; jump table for switch statement
DCD loc_45F5C
DCD loc_46004
DCD loc_45F68
DCD loc_45FB4
DCD loc_45FC8
DCD loc_45FDC
DCD loc_45FF0
DCD loc_45F74
DCD loc_45F90
DCD loc_45F98
DCD loc_460C0

loc_45C9C
TST             R0, #1
BNE             loc_45D84
CMP             R1, #0xC
BLS             loc_460B4
ADD             R4, R0, #0xC
MOV             R3, R12
MOV             LR, R12

loc_45CB8
LDRH            R6, [R4,#-2]
SUB             R1, R1, #0xC
LDRH            R5, [R4,#-4]
CMP             R1, #0xC
LDRH            R7, [R4,#-0xA]
MOV             R0, R4
LDRH            R2, [R4,#-0xC]
ADD             R4, R4, #0xC
ADD             R5, R5, R6,LSL#16
LDRH            R6, [R4,#-0x12]
ADD             R3, R5, R3
LDRH            R5, [R4,#-0x14]
ADD             R2, R2, R7,LSL#16
SUB             R2, R2, R3
ADD             R12, R2, R12
ADD             R2, R5, R6,LSL#16
EOR             R12, R12, R3,ROR#28
ADD             LR, R2, LR
SUB             R2, LR, R12
ADD             LR, LR, R3
EOR             R3, R2, R12,ROR#26
ADD             R12, R12, LR
SUB             R2, LR, R3
ADD             LR, R3, R12
EOR             R2, R2, R3,ROR#24
SUB             R12, R12, R2
ADD             R5, R2, LR
EOR             R2, R12, R2,ROR#16
SUB             R3, LR, R2
ADD             R12, R2, R5
EOR             R2, R3, R2,ROR#13
SUB             R3, R5, R2
ADD             LR, R2, R12
EOR             R3, R3, R2,ROR#28
BHI             loc_45CB8

loc_45D44
SUB             R1, R1, #1
CMP             R1, #0xB ; switch 12 cases
LDRLS           PC, [PC,R1,LSL#2] ; switch jump
B               def_45C64 ; jumptable 00045C64 default case
                        ; jumptable 00045D4C default case
                        ; jumptable 00045E70 default case
jpt_45D4C DCD loc_45F00 ; jump table for switch statement
DCD loc_45F5C
DCD loc_45F54
DCD loc_460A0
DCD loc_46098
DCD loc_4601C
DCD loc_46014
DCD loc_46040
DCD loc_46038
DCD loc_4606C
DCD loc_46064
DCD loc_460C8

loc_45D84
CMP             R1, #0xC
MOVLS           R3, R12
MOVLS           LR, R12
BLS             loc_45E68
ADD             R4, R0, #0xC
MOV             R3, R12
MOV             LR, R12

loc_45DA0
LDRB            R6, [R4,#-2]
SUB             R1, R1, #0xC
LDRB            R2, [R4,#-0xA]
CMP             R1, #0xC
LDRB            R7, [R4,#-3]
MOV             R0, R4
LDRB            R8, [R4,#-0xB]
ADD             R4, R4, #0xC
MOV             R6, R6,LSL#16
LDRB            R5, [R4,#-0x12]
MOV             R2, R2,LSL#16
LDRB            R9, [R4,#-0x18]
ADD             R6, R6, R7,LSL#8
LDRB            R7, [R4,#-0x10]
ADD             R2, R2, R8,LSL#8
LDRB            R8, [R4,#-0xD]
MOV             R5, R5,LSL#16
ADD             R6, R6, R7
LDRB            R7, [R4,#-0x15]
ADD             R2, R2, R9
ADD             R6, R6, R8,LSL#24
LDRB            R8, [R4,#-0x13]
ADD             R3, R6, R3
ADD             R2, R2, R7,LSL#24
LDRB            R6, [R4,#-0x11]
LDRB            R7, [R4,#-0x14]
ADD             R5, R5, R8,LSL#8
SUB             R2, R2, R3
ADD             R12, R2, R12
ADD             R5, R5, R7
EOR             R12, R12, R3,ROR#28
ADD             R2, R5, R6,LSL#24
ADD             LR, R2, LR
SUB             R2, LR, R12
ADD             LR, LR, R3
EOR             R3, R2, R12,ROR#26
ADD             R12, R12, LR
SUB             R2, LR, R3
ADD             LR, R3, R12
EOR             R2, R2, R3,ROR#24
SUB             R12, R12, R2
ADD             R5, R2, LR
EOR             R2, R12, R2,ROR#16
SUB             R3, LR, R2
ADD             R12, R2, R5
EOR             R2, R3, R2,ROR#13
SUB             R3, R5, R2
ADD             LR, R2, R12
EOR             R3, R3, R2,ROR#28
BHI             loc_45DA0

loc_45E68
SUB             R1, R1, #1
CMP             R1, #0xB ; switch 12 cases
LDRLS           PC, [PC,R1,LSL#2] ; switch jump
B               def_45C64 ; jumptable 00045C64 default case
                        ; jumptable 00045D4C default case
                        ; jumptable 00045E70 default case
jpt_45E70 DCD loc_45F00 ; jump table for switch statement
DCD loc_45EF8
DCD loc_45EF0
DCD loc_45EE8
DCD loc_45EE0
DCD loc_45ED8
DCD loc_45ED0
DCD loc_45EC8
DCD loc_45EC0
DCD loc_45EB8
DCD loc_45EB0
DCD loc_45EA8

loc_45EA8               ; jumptable 00045E70 case 11
LDRB            R2, [R0,#0xB]
ADD             R3, R3, R2,LSL#24

loc_45EB0               ; jumptable 00045E70 case 10
LDRB            R2, [R0,#0xA]
ADD             R3, R3, R2,LSL#16

loc_45EB8               ; jumptable 00045E70 case 9
LDRB            R2, [R0,#9]
ADD             R3, R3, R2,LSL#8

loc_45EC0               ; jumptable 00045E70 case 8
LDRB            R2, [R0,#8]
ADD             R3, R3, R2

loc_45EC8               ; jumptable 00045E70 case 7
LDRB            R2, [R0,#7]
ADD             LR, LR, R2,LSL#24

loc_45ED0               ; jumptable 00045E70 case 6
LDRB            R2, [R0,#6]
ADD             LR, LR, R2,LSL#16

loc_45ED8               ; jumptable 00045E70 case 5
LDRB            R2, [R0,#5]
ADD             LR, LR, R2,LSL#8

loc_45EE0               ; jumptable 00045E70 case 4
LDRB            R2, [R0,#4]
ADD             LR, LR, R2

loc_45EE8               ; jumptable 00045E70 case 3
LDRB            R2, [R0,#3]
ADD             R12, R12, R2,LSL#24

loc_45EF0               ; jumptable 00045E70 case 2
LDRB            R2, [R0,#2]
ADD             R12, R12, R2,LSL#16

loc_45EF8               ; jumptable 00045E70 case 1
LDRB            R2, [R0,#1]
ADD             R12, R12, R2,LSL#8

loc_45F00               ; jumptable 00045C64 case 0
LDRB            R2, [R0] ; jumptable 00045D4C case 0
                        ; jumptable 00045E70 case 0
ADD             R12, R2, R12

loc_45F08
EOR             R3, R3, LR
SUB             R3, R3, LR,ROR#18
EOR             R12, R12, R3
SUB             R12, R12, R3,ROR#21
EOR             LR, LR, R12
SUB             LR, LR, R12,ROR#7
EOR             R3, R3, LR
SUB             R3, R3, LR,ROR#16
EOR             R12, R12, R3
SUB             R12, R12, R3,ROR#28
EOR             LR, LR, R12
SUB             R12, LR, R12,ROR#18
EOR             R3, R3, R12
SUB             R3, R3, R12,ROR#8

def_45C64               ; jumptable 00045C64 default case
MOV             R0, R3  ; jumptable 00045D4C default case
                        ; jumptable 00045E70 default case
POP             {R4-R9,PC}

loc_45F48
MOV             R3, R12
MOV             LR, R12
B               loc_45C5C

loc_45F54               ; jumptable 00045D4C case 2
LDRB            R2, [R0,#2]
ADD             R12, R12, R2,LSL#16

loc_45F5C               ; jumptable 00045C64 case 1
LDRH            R2, [R0] ; jumptable 00045D4C case 1
ADD             R12, R2, R12
B               loc_45F08

loc_45F68               ; jumptable 00045C64 case 3
LDR             R2, [R0]
ADD             R12, R12, R2
B               loc_45F08

loc_45F74               ; jumptable 00045C64 case 8
LDRB            R4, [R0,#8]

loc_45F78
LDR             R1, [R0,#4]
ADD             R3, R3, R4
LDR             R2, [R0]
ADD             LR, LR, R1
ADD             R12, R12, R2
B               loc_45F08

loc_45F90               ; jumptable 00045C64 case 9
LDRH            R4, [R0,#8]
B               loc_45F78

loc_45F98               ; jumptable 00045C64 case 10
LDR             R2, [R0,#8]
LDM             R0, {R1,R4}
BIC             R2, R2, #0xFF000000
ADD             R3, R3, R2
ADD             LR, LR, R4
ADD             R12, R12, R1
B               loc_45F08

loc_45FB4               ; jumptable 00045C64 case 4
LDRB            R1, [R0,#4]
LDR             R2, [R0]
ADD             LR, LR, R1
ADD             R12, R12, R2
B               loc_45F08

loc_45FC8               ; jumptable 00045C64 case 5
LDRH            R1, [R0,#4]
LDR             R2, [R0]
ADD             LR, LR, R1
ADD             R12, R12, R2
B               loc_45F08

loc_45FDC               ; jumptable 00045C64 case 6
LDM             R0, {R1,R2}
BIC             R2, R2, #0xFF000000
ADD             R12, R12, R1
ADD             LR, LR, R2
B               loc_45F08

loc_45FF0               ; jumptable 00045C64 case 7
LDR             R1, [R0,#4]
LDR             R2, [R0]
ADD             LR, LR, R1
ADD             R12, R12, R2
B               loc_45F08

loc_46004               ; jumptable 00045C64 case 2
LDR             R2, [R0]
BIC             R2, R2, #0xFF000000
ADD             R12, R2, R12
B               loc_45F08

loc_46014               ; jumptable 00045D4C case 6
LDRB            R2, [R0,#6]
ADD             LR, LR, R2,LSL#16

loc_4601C               ; jumptable 00045D4C case 5
LDRH            R2, [R0]
LDRH            R4, [R0,#2]
LDRH            R1, [R0,#4]
ADD             R12, R2, R12
ADD             R12, R12, R4,LSL#16
ADD             LR, LR, R1
B               loc_45F08

loc_46038               ; jumptable 00045D4C case 8
LDRB            R2, [R0,#8]
ADD             R3, R3, R2

loc_46040               ; jumptable 00045D4C case 7
LDRH            R1, [R0,#4]
LDRH            R4, [R0,#6]
LDRH            R2, [R0]
LDRH            R0, [R0,#2]
ADD             LR, R1, LR
ADD             R12, R2, R12
ADD             LR, LR, R4,LSL#16
ADD             R12, R12, R0,LSL#16
B               loc_45F08

loc_46064               ; jumptable 00045D4C case 10
LDRB            R2, [R0,#0xA]
ADD             R3, R3, R2,LSL#16

loc_4606C               ; jumptable 00045D4C case 9
LDRH            R1, [R0,#4]
LDRH            R5, [R0,#6]
LDRH            R2, [R0]
LDRH            R4, [R0,#2]
ADD             LR, R1, LR
LDRH            R1, [R0,#8]
ADD             R12, R2, R12
ADD             LR, LR, R5,LSL#16
ADD             R12, R12, R4,LSL#16
ADD             R3, R3, R1
B               loc_45F08

loc_46098               ; jumptable 00045D4C case 4
LDRB            R2, [R0,#4]
ADD             LR, LR, R2

loc_460A0               ; jumptable 00045D4C case 3
LDRH            R2, [R0]
LDRH            R1, [R0,#2]
ADD             R12, R2, R12
ADD             R12, R12, R1,LSL#16
B               loc_45F08

loc_460B4
MOV             R3, R12
MOV             LR, R12
B               loc_45D44

loc_460C0               ; jumptable 00045C64 case 11
LDR             R4, [R0,#8]
B               loc_45F78

loc_460C8               ; jumptable 00045D4C case 11
LDRH            R2, [R0,#8]
LDRH            R5, [R0,#0xA]
LDRH            R1, [R0,#4]
ADD             R3, R2, R3
LDRH            R4, [R0,#6]
LDRH            R2, [R0]
LDRH            R0, [R0,#2]
ADD             LR, R1, LR
ADD             R3, R3, R5,LSL#16
ADD             R12, R2, R12
ADD             LR, LR, R4,LSL#16
ADD             R12, R12, R0,LSL#16
B               loc_45F08
; End of function sub_45BB8




; int __fastcall sub_460FC(int, int *, char *s2, int)
sub_460FC
PUSH            {R4-R8,LR}
ADD             R0, R0, #0xC
LDR             R4, [R1]
MOV             R5, R1
MOV             R7, R2
MOV             R6, R3
CMP             R4, R0
BNE             loc_46130
B               loc_46158

loc_46120
LDR             R2, [R5,#4]
CMP             R2, R4
BEQ             loc_46164
LDR             R4, [R4,#4]

loc_46130
LDR             R2, [R4,#0x10]
CMP             R2, R6
BNE             loc_46120
MOV             R1, R7  ; s2
ADD             R0, R4, #0x18 ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_46120
MOV             R0, R4
POP             {R4-R8,PC}

loc_46158
LDR             R3, [R1,#4]
CMP             R4, R3
BNE             loc_46130

loc_46164
MOV             R4, #0
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_460FC




; void __fastcall sub_46170(int)
sub_46170
PUSH            {R4-R6,LR}
ADD             R6, R0, #0xC
LDR             R4, [R0,#0x10]
CMP             R4, R6
POPEQ           {R4-R6,PC}

loc_46184
LDR             R0, [R4,#0x14]
LDR             R5, [R4,#4]
CMP             R0, #0
BEQ             loc_461C8
LDR             R2, [R0,#4]
ADD             R3, R0, #4
CMN             R2, #1
BEQ             loc_461C8
DMB             ISH

loc_461A8
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_461A8
CMP             R2, #0
BNE             loc_461C8
BL              sub_4942C

loc_461C8
MOV             R0, R4
MOV             R4, R5
BL              sub_4815C
CMP             R5, R6
BNE             loc_46184
POP             {R4-R6,PC}
; End of function sub_46170




; int __fastcall sub_461E0(_DWORD *)
sub_461E0
MOV             R2, #0
MOV             R3, #3
PUSH            {R4,LR}
MOV             R4, R0
STR             R2, [R0]
STR             R3, [R0,#8]
MOV             R0, #0x40 ; '@'
BL              sub_48144
CMP             R0, #0
STR             R0, [R4,#4]
BEQ             loc_46254
LDR             R12, [R4,#8]
MOV             R2, #1
ADD             R3, R4, #0xC
ADD             R1, R4, #0x14
STR             R3, [R4,#0x10]
MOVS            R2, R2,LSL R12
STR             R3, [R4,#0xC]
STR             R1, [R4,#0x18]
STR             R1, [R4,#0x14]
BEQ             loc_4624C
MOV             R2, #8
ADD             R2, R0, R2,LSL R12

loc_4623C
STR             R3, [R0,#4]
STR             R3, [R0],#8
CMP             R0, R2
BNE             loc_4623C

loc_4624C
MOV             R0, #0
POP             {R4,PC}

loc_46254
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_461E0




; void __fastcall sub_4625C(int)
sub_4625C
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_46170
LDR             R0, [R4,#4]
POP             {R4,LR}
B               sub_4815C
; End of function sub_4625C




; int __fastcall sub_46274(int, char *, int)
sub_46274
PUSH            {R4-R10,LR}
MOV             R4, R0
LDR             R8, [R0,#8]
MOV             R6, R1
MOV             R7, R2
LDR             R3, [R0]
MOVS            R3, R3,LSR R8
BEQ             loc_46398
ADD             R8, R8, #1
MOV             R0, #8
MOV             R9, R0,LSL R8
MOV             R3, #1
MOV             R10, R3,LSL R8
MOV             R0, R9
BL              sub_48144
SUBS            R5, R0, #0
BEQ             loc_46500
LDR             R0, [R4,#4]
BL              sub_4815C
CMP             R10, #0
STMIB           R4, {R5,R8}
ADD             R1, R4, #0xC
BEQ             loc_462E8
ADD             R0, R9, R5
MOV             R3, R5

loc_462D8
STR             R1, [R3,#4]
STR             R1, [R3],#8
CMP             R0, R3
BNE             loc_462D8

loc_462E8
LDR             R3, [R4,#0x10]
MOV             R2, #0xFFFFFFFF
STR             R1, [R4,#0xC]
MVN             R8, R2,LSL R8
STR             R1, [R4,#0x10]
CMP             R3, R1
BNE             loc_46330
B               loc_463A4

loc_46308
LDR             LR, [R2]
CMP             R12, R1
STR             R2, [R3,#4]
STR             LR, [R3]
LDR             LR, [R2]
STR             R3, [LR,#4]
STR             R3, [R2]
STR             R3, [R0]
MOV             R3, R12
BEQ             loc_46384

loc_46330
LDR             R0, [R3,#0x10]
LDR             R12, [R3,#4]
AND             R0, R0, R8
LDR             R2, [R5,R0,LSL#3]
ADD             R0, R5, R0,LSL#3
CMP             R2, R1
BNE             loc_46308
LDR             LR, [R0,#4]
CMP             R1, LR
BNE             loc_46308
LDR             R2, [R4,#0xC]
CMP             R12, R1
STR             R1, [R3,#4]
STR             R2, [R3]
LDR             R2, [R4,#0xC]
STR             R3, [R2,#4]
STR             R3, [R4,#0xC]
STR             R3, [R0,#4]
STR             R3, [R0]
MOV             R3, R12
BNE             loc_46330

loc_46384
LDR             R3, [R4,#8]
MOV             R8, #0xFFFFFFFF
LDR             R5, [R4,#4]
MVN             R8, R8,LSL R3
B               loc_463A4

loc_46398
MOV             R3, #0xFFFFFFFF
LDR             R5, [R0,#4]
MVN             R8, R3,LSL R8

loc_463A4               ; s
MOV             R0, R6
BL              strlen
MOVW            R3, #:lower16:dword_72C18
MOV             R10, R0
MOVT            R3, #:upper16:dword_72C18
MOV             R1, R10
LDR             R2, [R3]
MOV             R0, R6
BL              sub_45BB8
MOV             R9, R0
MOV             R2, R6  ; s2
AND             R8, R8, R9
MOV             R0, R4  ; int
ADD             R5, R5, R8,LSL#3
MOV             R3, R9
MOV             R1, R5  ; int
BL              sub_460FC
SUBS            R8, R0, #0
BEQ             loc_46440
LDR             R0, [R8,#0x14]
CMP             R0, #0
BEQ             loc_4642C
LDR             R3, [R0,#4]
CMN             R3, #1
BEQ             loc_4642C
ADD             R3, R0, #4
DMB             ISH

loc_46410
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_46410
CMP             R2, #0
BEQ             loc_46438

loc_4642C
STR             R7, [R8,#0x14]
MOV             R0, #0
POP             {R4-R10,PC}

loc_46438
BL              sub_4942C
B               loc_4642C

loc_46440
ADD             R0, R10, #0x19
BL              sub_48144
SUBS            R8, R0, #0
BEQ             loc_46500
ADD             R2, R10, #1 ; n
MOV             R1, R6  ; src
STR             R9, [R8,#0x10]
ADD             R0, R8, #0x18 ; dest
BL              strncpy
LDR             R3, [R5]
ADD             R1, R4, #0xC
ADD             R2, R8, #8
STR             R7, [R8,#0x14]
STR             R8, [R8,#4]
CMP             R3, R1
STR             R8, [R8]
STR             R2, [R8,#0xC]
STR             R2, [R8,#8]
BEQ             loc_464D4

loc_4648C
LDR             R1, [R3]
STM             R8, {R1,R3}
LDR             R1, [R3]
STR             R8, [R1,#4]
STR             R8, [R3]
STR             R8, [R5]

loc_464A4
LDR             R1, [R4,#0x14]
ADD             R12, R4, #0x14
LDR             R3, [R4]
MOV             R0, #0
STR             R12, [R8,#0xC]
STR             R1, [R8,#8]
LDR             R1, [R4,#0x14]
ADD             R3, R3, #1
STR             R2, [R1,#4]
STR             R2, [R4,#0x14]
STR             R3, [R4]
POP             {R4-R10,PC}

loc_464D4
LDR             R1, [R5,#4]
CMP             R3, R1
BNE             loc_4648C
LDR             R1, [R4,#0xC]
STM             R8, {R1,R3}
LDR             R3, [R4,#0xC]
STR             R8, [R3,#4]
STR             R8, [R4,#0xC]
STR             R8, [R5,#4]
STR             R8, [R5]
B               loc_464A4

loc_46500
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}
; End of function sub_46274




; int __fastcall sub_46508(int, char *s)
sub_46508
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, R1  ; s
MOV             R4, R1
MOV             R6, #0xFFFFFFFF
BL              strlen
MOVW            R3, #:lower16:dword_72C18
MOV             R1, R0
MOVT            R3, #:upper16:dword_72C18
MOV             R0, R4
LDR             R2, [R3]
BL              sub_45BB8
LDR             LR, [R5,#8]
MOV             R12, R0
LDR             R1, [R5,#4]
MOV             R3, R12
MOV             R0, R5  ; int
MOV             R2, R4  ; s2
BIC             R12, R12, R6,LSL LR
ADD             R1, R1, R12,LSL#3 ; int
BL              sub_460FC
CMP             R0, #0
LDRNE           R0, [R0,#0x14]
POP             {R4-R6,PC}
; End of function sub_46508




; int __fastcall sub_46568(_DWORD *, char *s)
sub_46568
PUSH            {R4-R10,LR}
MOV             R6, R0
MOV             R0, R1  ; s
MOV             R4, R1
MOV             R8, #0xFFFFFFFF
BL              strlen
MOVW            R3, #:lower16:dword_72C18
MOV             R1, R0
MOVT            R3, #:upper16:dword_72C18
MOV             R0, R4
LDR             R2, [R3]
BL              sub_45BB8
LDR             R1, [R6,#8]
MOV             R5, R0
LDR             R9, [R6,#4]
MOV             R3, R5
MOV             R2, R4  ; s2
MOV             R0, R6  ; int
BIC             R5, R5, R8,LSL R1
ADD             R7, R9, R5,LSL#3
MOV             R1, R7  ; int
BL              sub_460FC
SUBS            R4, R0, #0
BEQ             loc_46680
LDR             R3, [R9,R5,LSL#3]
LDR             R1, [R7,#4]
LDR             R2, [R4,#4]
CMP             R4, R3
LDR             R3, [R4]
BEQ             loc_46668
CMP             R4, R1
STREQ           R3, [R7,#4]

loc_465E8
STR             R2, [R3,#4]
LDR             R1, [R4,#4]
LDR             R2, [R4,#0xC]
LDR             R0, [R4,#0x14]
STR             R3, [R1]
LDR             R3, [R4,#8]
CMP             R0, #0
STR             R2, [R3,#4]
LDR             R2, [R4,#0xC]
STR             R3, [R2]
BEQ             loc_46620
LDR             R3, [R0,#4]
CMN             R3, #1
BNE             loc_4663C

loc_46620
MOV             R0, R4
BL              sub_4815C
LDR             R3, [R6]
MOV             R0, #0
SUB             R3, R3, #1
STR             R3, [R6]
POP             {R4-R10,PC}

loc_4663C
ADD             R3, R0, #4
DMB             ISH

loc_46644
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_46644
CMP             R2, #0
BNE             loc_46620
BL              sub_4942C
B               loc_46620

loc_46668
CMP             R4, R1
ADDEQ           R1, R6, #0xC
STRNE           R2, [R9,R5,LSL#3]
STREQ           R1, [R7,#4]
STREQ           R1, [R9,R5,LSL#3]
B               loc_465E8

loc_46680
MOV             R0, R8
POP             {R4-R10,PC}
; End of function sub_46568




; int __fastcall sub_46688(_DWORD *)
sub_46688
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_46170
MOV             R3, #1
ADD             R2, R4, #0xC
LDR             R0, [R4,#8]
MOVS            R3, R3,LSL R0
BEQ             loc_466C4
LDR             R3, [R4,#4]
MOV             R1, #8
ADD             R1, R3, R1,LSL R0

loc_466B4
STR             R2, [R3,#4]
STR             R2, [R3],#8
CMP             R3, R1
BNE             loc_466B4

loc_466C4
ADD             R3, R4, #0x14
MOV             R1, #0
STR             R2, [R4,#0x10]
STR             R2, [R4,#0xC]
STR             R3, [R4,#0x18]
STR             R3, [R4,#0x14]
STR             R1, [R4]
POP             {R4,PC}
; End of function sub_46688




; int __fastcall sub_466E4(int)
sub_466E4
LDR             R3, [R0,#0x18]
ADD             R0, R0, #0x14
CMP             R3, R0
MOVNE           R0, R3
MOVEQ           R0, #0
BX              LR
; End of function sub_466E4




; int __fastcall sub_466FC(int, char *s)
sub_466FC
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, R1  ; s
MOV             R4, R1
MOV             R6, #0xFFFFFFFF
BL              strlen
MOVW            R3, #:lower16:dword_72C18
MOV             R1, R0
MOVT            R3, #:upper16:dword_72C18
MOV             R0, R4
LDR             R2, [R3]
BL              sub_45BB8
LDR             LR, [R5,#8]
MOV             R12, R0
LDR             R1, [R5,#4]
MOV             R3, R12
MOV             R0, R5  ; int
MOV             R2, R4  ; s2
BIC             R12, R12, R6,LSL LR
ADD             R1, R1, R12,LSL#3 ; int
BL              sub_460FC
CMP             R0, #0
ADDNE           R0, R0, #8
POP             {R4-R6,PC}
; End of function sub_466FC




; int __fastcall sub_4675C(int, int)
sub_4675C
LDR             R3, [R1,#4]
ADD             R0, R0, #0x14
CMP             R3, R0
MOVNE           R0, R3
MOVEQ           R0, #0
BX              LR
; End of function sub_4675C




; int __fastcall sub_46774(int)
sub_46774
ADD             R0, R0, #0x10
BX              LR
; End of function sub_46774




; int __fastcall sub_4677C(int)
sub_4677C
LDR             R0, [R0,#0xC]
BX              LR
; End of function sub_4677C




; void __fastcall sub_46784(int, int)
sub_46784

var_4= -4

PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0,#0xC]
SUB             SP, SP, #8
CMP             R0, #0
BEQ             loc_467CC
LDR             R3, [R0,#4]
CMN             R3, #1
BEQ             loc_467CC
ADD             R3, R0, #4
DMB             ISH

loc_467B0
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R12, R2, [R3]
CMP             R12, #0
BNE             loc_467B0
CMP             R2, #0
BEQ             loc_467D8

loc_467CC
STR             R1, [R4,#0xC]
ADD             SP, SP, #8
POP             {R4,PC}

loc_467D8
STR             R1, [SP,#8+var_4]
BL              sub_4942C
LDR             R1, [SP,#8+var_4]
STR             R1, [R4,#0xC]
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_46784




; int __fastcall sub_467F0(int result)
sub_467F0

var_C= -0xC
var_B= -0xB
var_A= -0xA
var_9= -9

PUSH            {R4-R7,LR}
MOV             R4, #dword_72C18
SUB             SP, SP, #0xC
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_46814

loc_4680C
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_46814
MOV             R1, R0
ADD             R3, R4, #4
MOV             R0, #1

loc_46820
LDREXB          R2, [R3]
STREXB          R12, R0, [R3]
CMP             R12, #0
BNE             loc_46820
TST             R2, #0xFF
BNE             loc_46850
CMP             R1, #0
BEQ             loc_46868

loc_46840
DMB             ISH
STR             R1, [R4]
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_46850
BL              sched_yield
LDR             R3, [R4]
DMB             ISH
CMP             R3, #0
BEQ             loc_46850
B               loc_4680C

loc_46868
MOVW            R0, #:lower16:aDevUrandom ; "/dev/urandom"
MOV             R6, SP
MOVT            R0, #:upper16:aDevUrandom ; "/dev/urandom"
BL              open64
CMN             R0, #1
MOV             R5, R0
BEQ             loc_468C4
MOV             R2, #4  ; nbytes
MOV             R1, R6  ; buf
BL              read
MOV             R7, R0
MOV             R0, R5  ; fd
BL              close
CMP             R7, #4
BNE             loc_468C4
LDRB            R0, [SP,#0xC+var_C]
LDRB            R2, [SP,#0xC+var_B]
LDRB            R3, [SP,#0xC+var_A]
LDRB            R1, [SP,#0xC+var_9]
ORR             R2, R2, R0,LSL#8
ORR             R3, R3, R2,LSL#8
ORR             R1, R1, R3,LSL#8
B               loc_468E0

loc_468C4               ; tz
MOV             R1, #0
MOV             R0, R6  ; tv
BL              gettimeofday
LDMFD           SP, {R1,R5}
EOR             R5, R5, R1
BL              getpid
EOR             R1, R0, R5

loc_468E0
CMP             R1, #0
MOVEQ           R1, #1
B               loc_46840
; End of function sub_467F0




; int __fastcall sub_468EC(_DWORD *)
sub_468EC
LDR             R2, [R0,#4]
LDR             R3, [R0]
LDRB            R3, [R3,R2]
CMP             R3, #0
ADDNE           R2, R2, #1
MOVEQ           R3, #0xFFFFFFFF
STRNE           R2, [R0,#4]
MOV             R0, R3
BX              LR
; End of function sub_468EC




; int __fastcall sub_46910(int)
sub_46910
LDRD            R2, R3, [R0,#4]
CMP             R3, R2
LDRCC           R1, [R0]
ADDCC           R2, R3, #1
LDRBCC          R3, [R1,R3]
STRCC           R2, [R0,#8]
MOVCC           R0, R3
MOVCS           R0, #0xFFFFFFFF
BX              LR
; End of function sub_46910




; int __fastcall sub_46934(_DWORD *)
sub_46934
LDR             R3, [R0,#0x404]
LDR             R2, [R0,#0x400]
PUSH            {R4,LR}
MOV             R4, R0
CMP             R3, R2
BCC             loc_46978
MOV             R2, #0
LDR             R3, [R0,#0x408]
STR             R2, [R0,#0x404]
MOV             R1, #0x400
LDR             R2, [R0,#0x40C]
BLX             R3
SUB             R3, R0, #1
STR             R0, [R4,#0x400]
CMN             R3, #3
BHI             loc_46988
LDR             R3, [R4,#0x404]

loc_46978
LDRB            R0, [R4,R3]
ADD             R3, R3, #1
STR             R3, [R4,#0x404]
POP             {R4,PC}

loc_46988
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_46934




; int sub_46990(int result, _DWORD *, int, const char *, ...)
sub_46990

var_15C= -0x15C
format= -0x158
var_154= -0x154
var_148= -0x148
s= -0x144
var_A5= -0xA5
var_A4= -0xA4
var_5= -5
varg_r3=  0x20
arg=  0x24

PUSH            {R3}
PUSH            {R4-R10,LR}
SUBS            R6, R0, #0
SUB             SP, SP, #0x15C
BEQ             loc_46A4C
ADD             R12, SP, #0x15C+arg
MOV             R4, R1
MOV             R10, #0
MOV             R5, R2
MOV             R3, R12 ; arg
ADD             R0, SP, #0x15C+s ; s
LDR             R2, [SP,#0x15C+varg_r3] ; format
MOV             R1, #0xA0 ; maxlen
STR             R12, [SP,#0x15C+var_148]
BL              vsnprintf
CMP             R4, R10
STRB            R10, [SP,#0x15C+var_A5]
BEQ             loc_46A14
ADD             R0, R4, #0x28 ; '('
BL              sub_4828C
CMP             R0, #0
LDR             R8, [R4,#0x18]
LDR             R7, [R4,#0x1C]
LDR             R9, [R4,#0x24]
BEQ             loc_46A5C
LDRB            R3, [R0]
CMP             R3, R10
BEQ             loc_46A5C
LDR             R3, [R4,#0x2C]
CMP             R3, #0x14
BLS             loc_46A98

loc_46A0C
ADD             R3, SP, #0x15C+s
B               loc_46A24

loc_46A14
MOV             R7, #0xFFFFFFFF
ADD             R3, SP, #0x15C+s
MOV             R9, R4
MOV             R8, R7

loc_46A24
MOVW            R12, #:lower16:(aReceivedFromPr+0x1C) ; "%s"
STR             R3, [SP,#0x15C+var_154] ; arg
MOVT            R12, #:upper16:(aReceivedFromPr+0x1C) ; "%s"
STR             R5, [SP,#0x15C+var_15C] ; int
MOV             R3, R9  ; int
MOV             R2, R7  ; int
MOV             R1, R8  ; int
MOV             R0, R6  ; int
STR             R12, [SP,#0x15C+format] ; format
BL              sub_4A21C

loc_46A4C
ADD             SP, SP, #0x15C
POP             {R4-R10,LR}
ADD             SP, SP, #4
BX              LR

loc_46A5C
LDR             R3, [R4,#0x14]
CMP             R5, #8
MOVEQ           R5, #6
CMN             R3, #2
BEQ             loc_46A0C
MOVW            R2, #:lower16:aSNearEndOfFile ; "%s near end of file"
ADD             R3, SP, #0x15C+s
MOVT            R2, #:upper16:aSNearEndOfFile ; "%s near end of file"
ADD             R0, SP, #0x15C+var_A4 ; s
MOV             R1, #0xA0 ; maxlen
BL              snprintf
MOV             R2, #0
ADD             R3, SP, #0x15C+var_A4
STRB            R2, [SP,#0x15C+var_5]
B               loc_46A24

loc_46A98
MOVW            R2, #:lower16:aSNearS ; "%s near '%s'"
STR             R0, [SP,#0x15C+var_15C]
ADD             R3, SP, #0x15C+s
ADD             R0, SP, #0x15C+var_A4 ; s
MOVT            R2, #:upper16:aSNearS ; "%s near '%s'"
MOV             R1, #0xA0 ; maxlen
BL              snprintf
ADD             R3, SP, #0x15C+var_A4
STRB            R10, [SP,#0x15C+var_5]
B               loc_46A24
; End of function sub_46990




; void __fastcall sub_46AC0(int)
sub_46AC0
LDR             R3, [R0,#0x3C]
PUSH            {R4,LR}
MOV             R4, R0
CMP             R3, #0x100
BEQ             loc_46AE0
ADD             R0, R4, #0x28 ; '('
POP             {R4,LR}
B               sub_4824C

loc_46AE0
LDR             R0, [R0,#0x40]
BL              sub_4815C
MOV             R3, #0
ADD             R0, R4, #0x28 ; '('
STR             R3, [R4,#0x40]
STR             R3, [R4,#0x44]
POP             {R4,LR}
B               sub_4824C
; End of function sub_46AC0




; int __fastcall sub_46B00(int *)
sub_46B00

buf= -5

PUSH            {LR}
SUB             SP, SP, #0xC
MOV             R2, #1  ; nbytes
ADD             R1, SP, #0xC+buf ; buf
LDR             R0, [R0] ; fd
BL              read
CMP             R0, #1
LDRBEQ          R0, [SP,#0xC+buf]
MOVNE           R0, #0xFFFFFFFF
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_46B00




; int __fastcall sub_46B2C(_BYTE *)
sub_46B2C
PUSH            {R4,LR}
LDRB            R3, [R0]
CMP             R3, #0x75 ; 'u'
MOVEQ           R3, R0
MOVEQ           R0, #0
ADDEQ           LR, R3, #4
BNE             loc_46BA0

loc_46B48
LDRB            R2, [R3,#1]!
MOV             R0, R0,LSL#4
SUB             R1, R2, #0x30 ; '0'
UXTB            R12, R1
CMP             R12, #9
ADDLS           R0, R1, R0
BLS             loc_46B8C
SUB             R1, R2, #0x61 ; 'a'
CMP             R1, #0x19
SUBLS           R2, R2, #0x57 ; 'W'
ADDLS           R0, R2, R0
BLS             loc_46B8C
SUB             R1, R2, #0x41 ; 'A'
CMP             R1, #0x19
BHI             loc_46B98
SUB             R2, R2, #0x37 ; '7'
ADD             R0, R2, R0

loc_46B8C
CMP             R3, LR
BNE             loc_46B48
POP             {R4,PC}

loc_46B98
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_46BA0
MOVW            R3, #:lower16:aDecodeUnicodeE ; "decode_unicode_escape"
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aStr0U ; "str[0] == 'u'"
MOVT            R3, #:upper16:aDecodeUnicodeE ; "decode_unicode_escape"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aStr0U ; "str[0] == 'u'"
MOVW            R2, #0x135 ; line
BL              __assert_fail
; End of function sub_46B2C




; _DWORD *__fastcall sub_46BC0(_DWORD *result, int)
sub_46BC0
ADD             R3, R1, #2
CMP             R3, #1
BXLS            LR
LDR             R3, [R0,#0x24]
CMP             R1, #0xA
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
SUB             R3, R3, #1
STR             R3, [R0,#0x24]
BNE             loc_46C40
LDR             R3, [R0,#0x18]
LDR             R2, [R0,#0x20]
SUB             R3, R3, #1
STR             R3, [R0,#0x18]
STR             R2, [R0,#0x1C]

loc_46C00
LDR             R3, [R4,#0x10]
CMP             R3, #0
BEQ             loc_46C5C
SUB             R3, R3, #1
ADD             R2, R4, R3
STR             R3, [R4,#0x10]
LDRB            R3, [R2,#8]
CMP             R3, R5
POPEQ           {R4-R6,PC}
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aStreamBufferSt ; "stream->buffer[stream->buffer_pos] == c"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aStreamBufferSt ; "stream->buffer[stream->buffer_pos] == c"
LDR             R3, =aStreamUnget ; "stream_unget"
MOV             R2, #0xF0 ; line
BL              __assert_fail

loc_46C40
UXTB            R0, R1
BL              sub_486DC
CMP             R0, #0
LDRNE           R3, [R4,#0x1C]
SUBNE           R3, R3, #1
STRNE           R3, [R4,#0x1C]
B               loc_46C00

loc_46C5C
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aStreamBufferPo ; "stream->buffer_pos > 0"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aStreamBufferPo ; "stream->buffer_pos > 0"
LDR             R3, =aStreamUnget ; "stream_unget"
MOV             R2, #0xEE ; line
BL              __assert_fail
; End of function sub_46BC0

off_46C78 DCD aStreamUnget ; "stream_unget"



; int __fastcall sub_46C7C(int, int)
sub_46C7C

arg= -8

LDR             R2, [R0,#0x10]
PUSH            {R4-R10,LR}
MOV             R4, R0
SUB             SP, SP, #8
ADD             R3, R0, R2
LDRB            R6, [R3,#8]
CMP             R6, #0
ADDNE           R1, R2, #1
BNE             loc_46CE4
LDR             R3, [R0]
MOV             R7, R1
LDR             R0, [R0,#4]
BLX             R3
CMN             R0, #1
MOV             R5, R0
STREQ           R0, [R4,#0x14]
BEQ             loc_46D18
SUB             R3, R0, #0x80
UXTB            R0, R0
CMP             R3, #0x7F
STR             R6, [R4,#0x10]
STRB            R0, [R4,#8]
MOVHI           R1, #1
MOVHI           R3, R4
STRBHI          R6, [R4,#9]
BLS             loc_46D4C

loc_46CE4
STR             R1, [R4,#0x10]
LDRB            R5, [R3,#8]
LDR             R3, [R4,#0x24]
CMP             R5, #0xA
ADD             R3, R3, #1
STR             R3, [R4,#0x24]
BEQ             loc_46D24
MOV             R0, R5
BL              sub_486DC
CMP             R0, #0
LDRNE           R3, [R4,#0x1C]
ADDNE           R3, R3, #1
STRNE           R3, [R4,#0x1C]

loc_46D18
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_46D24
LDR             R3, [R4,#0x18]
MOV             R1, #0
LDR             R2, [R4,#0x1C]
MOV             R0, R5
STR             R1, [R4,#0x1C]
ADD             R3, R3, #1
STR             R3, [R4,#0x18]
STR             R2, [R4,#0x20]
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_46D4C
BL              sub_486DC
SUBS            R8, R0, #0
BEQ             loc_46DB8
CMP             R8, #1
ADDHI           R10, R4, #8
ADDHI           R6, R4, #9
ADDHI           R9, R10, R8
BLS             loc_46DE4

loc_46D6C
LDR             R3, [R4]
LDR             R0, [R4,#4]
BLX             R3
STRB            R0, [R6],#1
CMP             R9, R6
BNE             loc_46D6C
MOV             R0, R10
MOV             R2, #0
MOV             R1, R8
BL              sub_48748
CMP             R0, #0
BEQ             loc_46DB8
MOV             R3, #0
ADD             R8, R4, R8
STRB            R3, [R8,#8]
LDR             R2, [R4,#0x10]
ADD             R1, R2, #1
ADD             R3, R4, R2
B               loc_46CE4

loc_46DB8
MOV             R2, #0xFFFFFFFE
MOVW            R3, #:lower16:aUnableToDecode ; "unable to decode byte 0x%x"
STR             R5, [SP,#8+arg] ; arg
MOV             R0, R7  ; int
MOV             R5, R2
STR             R2, [R4,#0x14]
MOV             R1, R4  ; int
MOVT            R3, #:upper16:aUnableToDecode ; "unable to decode byte 0x%x"
MOV             R2, #5  ; int
BL              sub_46990
B               loc_46D18

loc_46DE4
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aCount2 ; "count >= 2"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aCount2 ; "count >= 2"
LDR             R3, =aStreamGet ; "stream_get"
MOV             R2, #0xBD ; line
BL              __assert_fail
; End of function sub_46C7C

off_46E00 DCD aStreamGet ; "stream_get"



; int __fastcall sub_46E04(int, int)
sub_46E04
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, [R0,#0x14]
CMP             R4, #0
BEQ             loc_46E38

loc_46E18
ADD             R3, R4, #2
CMP             R3, #1
BLS             loc_46E30
ADD             R0, R5, #0x28 ; '('
UXTB            R1, R4
BL              sub_48374

loc_46E30
MOV             R0, R4
POP             {R4-R6,PC}

loc_46E38
BL              sub_46C7C
MOV             R4, R0
B               loc_46E18
; End of function sub_46E04




; _DWORD *__fastcall sub_46E44(_DWORD *result, int)
sub_46E44
ADD             R12, R1, #2
CMP             R12, #1
BXLS            LR
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
BL              sub_46BC0
ADD             R0, R5, #0x28 ; '('
BL              sub_48398
CMP             R0, R4
POPEQ           {R4-R6,PC}
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aCD ; "c == d"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aCD ; "c == d"
LDR             R3, =aLexUngetUnsave ; "lex_unget_unsave"
MOVW            R2, #0x11A ; line
BL              __assert_fail
; End of function sub_46E44

off_46E8C DCD aLexUngetUnsave ; "lex_unget_unsave"



; unsigned int __fastcall sub_46E90(int, int)
sub_46E90

arg= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
endptr= -0xC

PUSH            {R4-R11,LR}
ADD             R7, R0, #0x28 ; '('
MOV             R5, R0
SUB             SP, SP, #0x1C
MOV             R0, R7
MOV             R6, R1
BL              sub_48278
LDR             R3, [R5,#0x3C]
CMP             R3, #0x100
BEQ             loc_47014

loc_46EB8
LDR             R4, [R5,#0x14]
CMP             R4, #0
BEQ             loc_46FEC

loc_46EC4
SUB             R3, R4, #9
CMP             R4, #0x20 ; ' '
CMPNE           R3, #1
MOVLS           R3, #1
MOVHI           R3, #0
BLS             loc_46EB8
CMP             R4, #0xD
BEQ             loc_46EB8
CMN             R4, #1
STREQ           R3, [R5,#0x3C]
MOVEQ           R4, R3
BEQ             loc_46FE0
CMN             R4, #2
BEQ             loc_46FD8
UXTB            R1, R4
MOV             R0, R7
BL              sub_48374
BIC             R3, R4, #0x20 ; ' '
SUB             R2, R3, #0x5B ; '['
BICS            R2, R2, #2
BEQ             loc_47004
CMP             R4, #0x2C ; ','
CMPNE           R4, #0x3A ; ':'
MOVEQ           R2, #1
MOVNE           R2, #0
BEQ             loc_47004
CMP             R4, #0x22 ; '"'
BEQ             loc_4702C
SUB             R2, R4, #0x30 ; '0'
CMP             R4, #0x2D ; '-'
CMPNE           R2, #9
BLS             loc_470E8
SUB             R3, R3, #0x41 ; 'A'
CMP             R3, #0x19
BHI             loc_4719C

loc_46F50
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04
BIC             R3, R0, #0x20 ; ' '
SUB             R3, R3, #0x41 ; 'A'
CMP             R3, #0x19
BLS             loc_46F50
MOV             R1, R0
MOV             R0, R5
BL              sub_46E44
MOV             R0, R7
BL              sub_4828C
MOVW            R1, #:lower16:aTrue ; "true"
MOV             R4, R0
MOVT            R1, #:upper16:aTrue ; "true"
BL              strcmp
CMP             R0, #0
MOVWEQ          R4, #0x103
STREQ           R4, [R5,#0x3C]
BEQ             loc_46FE0
MOVW            R1, #:lower16:aFalse ; "false"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aFalse ; "false"
BL              strcmp
CMP             R0, #0
BEQ             loc_47000
MOVW            R1, #:lower16:aNull ; "null"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aNull ; "null"
BL              strcmp
CMP             R0, #0
MOVWEQ          R4, #0x105
STREQ           R4, [R5,#0x3C]
BEQ             loc_46FE0

loc_46FD8
MOV             R4, #0xFFFFFFFF
STR             R4, [R5,#0x3C]

loc_46FE0
MOV             R0, R4
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_46FEC
MOV             R1, R6
MOV             R0, R5
BL              sub_46C7C
MOV             R4, R0
B               loc_46EC4

loc_47000
MOV             R4, #0x104

loc_47004
MOV             R0, R4
STR             R4, [R5,#0x3C]
ADD             SP, SP, #0x1C
POP             {R4-R11,PC} ; arg

loc_47014
LDR             R0, [R5,#0x40]
BL              sub_4815C
MOV             R3, #0
STR             R3, [R5,#0x40]
STR             R3, [R5,#0x44]
B               loc_46EB8

loc_4702C
MOV             R3, #0xFFFFFFFF
STR             R2, [R5,#0x40]
STR             R3, [R5,#0x3C]

loc_47038
MOV             R1, R6
MOV             R0, R5

loc_47040
BL              sub_46E04
MOV             R4, R0

loc_47048
CMP             R4, #0x22 ; '"'
BEQ             loc_47344
CMN             R4, #2
BEQ             loc_470CC
CMN             R4, #1
BEQ             loc_47524
CMP             R4, #0x1F
BLS             loc_47310
CMP             R4, #0x5C ; '\'
MOV             R1, R6
MOV             R0, R5
BNE             loc_47040
BL              sub_46E04
CMP             R0, #0x75 ; 'u'
BEQ             loc_47278
BIC             R3, R0, #0x40 ; '@'
CMP             R0, #0x5C ; '\'
CMPNE           R3, #0x22 ; '"'
BEQ             loc_47038
CMP             R0, #0x2F ; '/'
BEQ             loc_47038
BIC             R3, R0, #8
CMP             R3, #0x66 ; 'f'
BEQ             loc_47038
SUB             R0, R0, #0x72 ; 'r'
BICS            R3, R0, #2
BEQ             loc_47038

loc_470B4
MOVW            R3, #:lower16:aInvalidEscape ; "invalid escape"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aInvalidEscape ; "invalid escape"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_46990

loc_470CC
LDR             R0, [R5,#0x40]
BL              sub_4815C
MOV             R3, #0
LDR             R4, [R5,#0x3C]
STR             R3, [R5,#0x40]
STR             R3, [R5,#0x44]
B               loc_46FE0

loc_470E8
CMP             R4, #0x2D ; '-'
MOV             R3, #0xFFFFFFFF
STR             R3, [R5,#0x3C]
BEQ             loc_4749C
CMP             R4, #0x30 ; '0'
BEQ             loc_47470

loc_47100
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_47100

loc_47118
LDR             R3, [R5,#0x34]
ANDS            R8, R3, #8
BNE             loc_471E4
CMP             R0, #0x2E ; '.'
CMPNE           R0, #0x45 ; 'E'
BEQ             loc_471E4
CMP             R0, #0x65 ; 'e'
BEQ             loc_4722C
MOV             R1, R0
MOV             R0, R5
BL              sub_46E44
MOV             R0, R7
BL              sub_4828C
MOV             R4, R0
BL              __errno_location
MOV             R7, R0
MOV             R2, #0xA ; base
MOV             R0, R4  ; nptr
STR             R8, [R7]
ADD             R1, SP, #0x1C+endptr ; endptr
BL              strtoll
LDR             R3, [R7]
CMP             R3, #0x22 ; '"'
BEQ             loc_4762C
LDR             R2, [R5,#0x2C]
LDR             R3, [SP,#0x1C+endptr]
ADD             R4, R4, R2
CMP             R3, R4
BNE             loc_47610
MOVW            R4, #0x101
STRD            R0, R1, [R5,#0x40]
STR             R4, [R5,#0x3C]
B               loc_46FE0

loc_4719C
LDR             R3, [R5,#0x10]
ADD             R3, R5, R3
LDRB            R1, [R3,#8]
CMP             R1, #0
BEQ             loc_46FD8

loc_471B0
MOV             R0, R7
BL              sub_48374
LDR             R3, [R5,#0x10]
LDR             R2, [R5,#0x24]
ADD             R3, R3, #1
ADD             R1, R5, R3
ADD             R2, R2, #1
STR             R3, [R5,#0x10]
STR             R2, [R5,#0x24]
LDRB            R1, [R1,#8]
CMP             R1, #0
BNE             loc_471B0
B               loc_46FD8

loc_471E4
CMP             R0, #0x2E ; '.'
BEQ             loc_472C0

loc_471EC
BIC             R3, R0, #0x20 ; ' '
CMP             R3, #0x45 ; 'E'
BEQ             loc_4722C

loc_471F8
MOV             R1, R0
MOV             R0, R5
BL              sub_46E44
MOV             R0, R7
ADD             R1, SP, #0x1C+endptr
BL              sub_483C0
CMP             R0, #0
BNE             loc_475C4
LDRD            R2, R3, [SP,#0x1C+endptr]
MOVW            R4, #0x102
STR             R4, [R5,#0x3C]
STRD            R2, R3, [R5,#0x40]
B               loc_46FE0

loc_4722C
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04
SUB             R3, R0, #0x2B ; '+'
BICS            R3, R3, #2
BNE             loc_47250
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04

loc_47250
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BHI             loc_47488

loc_4725C
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_4725C
B               loc_471F8

loc_47278
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04
MOV             R8, #4
MOV             R4, R0

loc_4728C
BIC             R3, R4, #0x20 ; ' '
SUB             R4, R4, #0x30 ; '0'
SUB             R3, R3, #0x41 ; 'A'
CMP             R3, #5
CMPHI           R4, #9
BHI             loc_470B4
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04
SUBS            R8, R8, #1
MOV             R4, R0
BNE             loc_4728C
B               loc_47048

loc_472C0
LDR             R1, [R5,#0x14]
CMP             R1, #0
BNE             loc_472DC
MOV             R1, R6
MOV             R0, R5
BL              sub_46C7C
MOV             R1, R0

loc_472DC
SUB             R3, R1, #0x30 ; '0'
CMP             R3, #9
BHI             loc_475B4
UXTB            R1, R1
MOV             R0, R7
BL              sub_48374

loc_472F4
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_472F4
B               loc_471EC

loc_47310
MOV             R1, R4
MOV             R0, R5
BL              sub_46E44
CMP             R4, #0xA
BEQ             loc_47540
MOVW            R3, #:lower16:aControlCharact ; "control character 0x%x"
STR             R4, [SP,#0x1C+arg] ; arg
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aControlCharact ; "control character 0x%x"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_46990
B               loc_470CC

loc_47344
LDR             R0, [R5,#0x2C]
ADD             R0, R0, #1
BL              sub_48144
SUBS            R8, R0, #0
BEQ             loc_470CC
MOV             R0, R7
STR             R8, [R5,#0x40]
BL              sub_4828C
MOV             R10, #8
ADD             R4, R0, #1
MOV             R9, #0xA
MOV             R7, #0xD

loc_47374
LDRB            R3, [R4]
CMP             R3, #0x22 ; '"'
BEQ             loc_4755C
CMP             R3, #0x5C ; '\'
ADD             R0, R4, #1
STRBNE          R3, [R8]
MOVNE           R4, R0
ADDNE           R8, R8, #1
BNE             loc_47374
LDRB            R3, [R4,#1]
CMP             R3, #0x75 ; 'u'
BEQ             loc_473E0
CMP             R3, #0x62 ; 'b'
BEQ             loc_4751C
BLS             loc_474E8
CMP             R3, #0x6E ; 'n'
BEQ             loc_474E0
BLS             loc_474CC
CMP             R3, #0x72 ; 'r'
BEQ             loc_474C4
CMP             R3, #0x74 ; 't'
BNE             loc_47500
MOV             R3, #9
STRB            R3, [R8]

loc_473D4
ADD             R8, R8, #1
ADD             R4, R4, #2
B               loc_47374

loc_473E0
BL              sub_46B2C
SUBS            R11, R0, #0
BLT             loc_47594
SUB             R1, R11, #0xD800
ADD             R2, R4, #6
CMP             R1, #0x400
STR             R1, [SP,#0x1C+var_10]
BCS             loc_47580
LDRB            R3, [R4,#6]
STR             R2, [SP,#0x1C+var_14]
CMP             R3, #0x5C ; '\'
BNE             loc_475F0
LDRB            R3, [R4,#7]
CMP             R3, #0x75 ; 'u'
BNE             loc_475F0
ADD             R0, R4, #7
BL              sub_46B2C
CMP             R0, #0
LDR             R2, [SP,#0x1C+var_14]
LDR             R1, [SP,#0x1C+var_10]
BLT             loc_475E4
SUB             R3, R0, #0xDC00
ADD             R4, R4, #0xC
CMP             R3, #0x400
BCS             loc_4767C
ADD             R3, R3, R1,LSL#10
ADD             R11, R3, #0x10000

loc_4744C
MOV             R0, R11
ADD             R2, SP, #0x1C+endptr
MOV             R1, R8
BL              sub_485F0
CMP             R0, #0
BNE             loc_47660
LDR             R3, [SP,#0x1C+endptr]
ADD             R8, R8, R3
B               loc_47374

loc_47470
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BHI             loc_47118

loc_47488
MOV             R1, R0

loc_4748C
MOV             R0, R5
BL              sub_46E44
LDR             R4, [R5,#0x3C]
B               loc_46FE0

loc_4749C
MOV             R1, R6
MOV             R0, R5
BL              sub_46E04
CMP             R0, #0x30 ; '0'
MOV             R1, R0
BEQ             loc_47470
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_47100
B               loc_4748C

loc_474C4
STRB            R7, [R8]
B               loc_473D4

loc_474CC
CMP             R3, #0x66 ; 'f'
BNE             loc_47500
MOV             R3, #0xC

loc_474D8
STRB            R3, [R8]
B               loc_473D4

loc_474E0
STRB            R9, [R8]
B               loc_473D4

loc_474E8
CMP             R3, #0x2F ; '/'
BEQ             loc_474D8
CMP             R3, #0x5C ; '\'
BEQ             loc_474D8
CMP             R3, #0x22 ; '"'
BEQ             loc_474D8

loc_47500
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:word_55C44
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:word_55C44 ; assertion
LDR             R3, =aLexScanString ; "lex_scan_string"
MOV             R2, #0x1D0 ; line
BL              __assert_fail

loc_4751C
STRB            R10, [R8]
B               loc_473D4

loc_47524
MOVW            R3, #:lower16:aPrematureEndOf ; "premature end of input"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aPrematureEndOf ; "premature end of input"
MOV             R2, #6  ; int
MOV             R1, R5  ; int
BL              sub_46990
B               loc_470CC

loc_47540
MOVW            R3, #:lower16:aUnexpectedNewl ; "unexpected newline"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aUnexpectedNewl ; "unexpected newline"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_46990
B               loc_470CC

loc_4755C
MOV             R2, #0
MOV             R3, #0x100
STRB            R2, [R8]
MOV             R4, R3
LDR             R2, [R5,#0x40]
STR             R3, [R5,#0x3C]
SUB             R8, R8, R2
STR             R8, [R5,#0x44]
B               loc_46FE0

loc_47580
SUB             R3, R11, #0xDC00
CMP             R3, #0x400
BCC             loc_475F0
MOV             R4, R2
B               loc_4744C

loc_47594
MOVW            R3, #:lower16:aInvalidUnicode ; "invalid Unicode escape '%.6s'"
STR             R4, [SP,#0x1C+arg] ; arg

loc_4759C               ; int
MOV             R0, R6
MOVT            R3, #:upper16:aInvalidUnicode ; "invalid Unicode escape '%.6s'"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_46990
B               loc_470CC

loc_475B4
MOV             R0, R5
BL              sub_46BC0
LDR             R4, [R5,#0x3C]
B               loc_46FE0

loc_475C4
MOVW            R3, #:lower16:aRealNumberOver ; "real number overflow"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aRealNumberOver ; "real number overflow"
MOV             R2, #0xF ; int
MOV             R1, R5  ; int
BL              sub_46990
LDR             R4, [R5,#0x3C]
B               loc_46FE0

loc_475E4
MOVW            R3, #0x6970
STR             R2, [SP,#0x1C+arg]
B               loc_4759C

loc_475F0
MOVW            R3, #:lower16:aInvalidUnicode_0 ; "invalid Unicode '\\u%04X'"
STR             R11, [SP,#0x1C+arg] ; arg
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aInvalidUnicode_0 ; "invalid Unicode '\\u%04X'"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_46990
B               loc_470CC

loc_47610
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aEndSavedTextLe ; "end == saved_text + lex->saved_text.len"...
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aEndSavedTextLe ; "end == saved_text + lex->saved_text.len"...
LDR             R3, =aLexScanNumber ; "lex_scan_number"
MOVW            R2, #0x21D ; line
BL              __assert_fail

loc_4762C
CMP             R0, #0
MOV             R2, #0xF ; int
SBCS            R3, R1, #0
MOV             R1, R5  ; int
MOVWLT          R3, #0x69CC
MOVWGE          R3, #0x69E8
MOVLT           R0, R6
MOVTLT          R3, #5
MOVGE           R0, R6  ; int
MOVTGE          R3, #5  ; int
BL              sub_46990
LDR             R4, [R5,#0x3C]
B               loc_46FE0

loc_47660
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:word_55C44
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:word_55C44 ; assertion
LDR             R3, =aLexScanString ; "lex_scan_string"
MOV             R2, #0x1C4 ; line
BL              __assert_fail

loc_4767C
MOVW            R3, #:lower16:aInvalidUnicode_1 ; "invalid Unicode '\\u%04X\\u%04X'"
STR             R0, [SP,#0x1C+var_18]
STR             R11, [SP,#0x1C+arg] ; arg
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aInvalidUnicode_1 ; "invalid Unicode '\\u%04X\\u%04X'"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_46990
B               loc_470CC
; End of function sub_46E90

off_476A0 DCD aLexScanString ; "lex_scan_string"
off_476A4 DCD aLexScanNumber ; "lex_scan_number"



; _DWORD *__fastcall sub_476A8(int, int, int)
sub_476A8
LDR             R3, [R0,#0x38]
PUSH            {R4-R10,LR} ; arg
MOV             R4, R0
MOV             R5, R2
ADD             R3, R3, #1
CMP             R3, #0x800
STR             R3, [R0,#0x38]
BHI             loc_47A4C
LDR             R3, [R0,#0x3C]
MOVW            R2, #0x101
CMP             R3, R2
BEQ             loc_47938
BLE             loc_47724
MOVW            R2, #0x103
CMP             R3, R2
BEQ             loc_47A40
BLT             loc_47A30
CMP             R3, #0x104
BEQ             loc_4778C
MOVW            R2, #0x105
CMP             R3, R2
BNE             loc_47A10
BL              sub_49420
MOV             R6, R0

loc_47708
CMP             R6, #0
BEQ             loc_4792C

loc_47710
LDR             R3, [R4,#0x38]
SUB             R3, R3, #1
STR             R3, [R4,#0x38]

loc_4771C
MOV             R0, R6
POP             {R4-R10,PC}

loc_47724
CMP             R3, #0x5B ; '['
MOV             R8, R1
BEQ             loc_47948
BLE             loc_47904
CMP             R3, #0x7B ; '{'
BEQ             loc_47798
CMP             R3, #0x100
BNE             loc_47A10
ANDS            R8, R1, #0x10
LDR             R7, [R0,#0x40]
LDR             R9, [R0,#0x44]
BNE             loc_4776C
MOV             R2, R9  ; n
MOV             R1, R8  ; c
MOV             R0, R7  ; s
BL              memchr
CMP             R0, #0
BNE             loc_47B08

loc_4776C
MOV             R1, R9
MOV             R0, R7
BL              sub_48FB8
MOV             R3, #0
MOV             R6, R0
STR             R3, [R4,#0x40]
STR             R3, [R4,#0x44]
B               loc_47708

loc_4778C
BL              sub_49414
MOV             R6, R0
B               loc_47708

loc_47798
BL              sub_48A70
SUBS            R6, R0, #0
BEQ             loc_4792C
MOV             R1, R5
MOV             R0, R4
BL              sub_46E90
LDR             R3, [R4,#0x3C]
CMP             R3, #0x7D ; '}'
BEQ             loc_47710
CMP             R3, #0x100
BNE             loc_47A90
LDR             R7, [R4,#0x40]
MOV             R3, #0
LDR             R2, [R4,#0x44]
STR             R3, [R4,#0x40]
CMP             R7, R3
STR             R3, [R4,#0x44]
BEQ             loc_4792C
AND             R10, R8, #1
B               loc_4789C

loc_477E8
CMP             R10, #0
BEQ             loc_477FC
BL              sub_48AF4
CMP             R0, #0
BNE             loc_47B28

loc_477FC
MOV             R1, R5
MOV             R0, R4
BL              sub_46E90
LDR             R3, [R4,#0x3C]
MOV             R1, R5
MOV             R0, R4
CMP             R3, #0x3A ; ':'
BNE             loc_47AAC
BL              sub_46E90
MOV             R2, R5
MOV             R1, R8
MOV             R0, R4
BL              sub_476A8
SUBS            R2, R0, #0
MOV             R1, R7
MOV             R0, R6
BEQ             loc_47AD0
BL              sub_496EC
SUBS            R9, R0, #0
MOV             R0, R7
BNE             loc_47ADC
BL              sub_4815C
MOV             R1, R5
MOV             R0, R4
BL              sub_46E90
LDR             R3, [R4,#0x3C]
MOV             R1, R5
MOV             R0, R4
CMP             R3, #0x2C ; ','
BNE             loc_47AE4
BL              sub_46E90
LDR             R3, [R4,#0x3C]
CMP             R3, #0x100
BNE             loc_47A90
LDR             R7, [R4,#0x40]
LDR             R2, [R4,#0x44] ; n
STR             R9, [R4,#0x40]
CMP             R7, #0
STR             R9, [R4,#0x44]
BEQ             loc_4792C

loc_4789C               ; c
MOV             R1, #0
MOV             R0, R7  ; s
BL              memchr
CMP             R0, #0
MOV             R1, R7
MOV             R0, R6
BEQ             loc_477E8
MOV             R0, R7
BL              sub_4815C
MOVW            R3, #:lower16:aNulByteInObjec ; "NUL byte in object key not supported"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aNulByteInObjec ; "NUL byte in object key not supported"
MOV             R2, #0xD ; int
BL              sub_46990

loc_478D8
LDR             R3, [R6,#4]
CMN             R3, #1
BEQ             loc_4792C
ADD             R3, R6, #4
DMB             ISH

loc_478EC
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BEQ             loc_479F8
B               loc_478EC

loc_47904
CMN             R3, #1
BNE             loc_47A10
MOVW            R3, #:lower16:aInvalidToken ; "invalid token"
MOV             R1, R0  ; int
MOVT            R3, #:upper16:aInvalidToken ; "invalid token"
MOV             R0, R5  ; int
MOV             R2, #8  ; int
MOV             R6, #0
BL              sub_46990
B               loc_4771C

loc_4792C
MOV             R6, #0
MOV             R0, R6
POP             {R4-R10,PC}

loc_47938
LDRD            R0, R1, [R0,#0x40]
BL              sub_49250
MOV             R6, R0
B               loc_47708

loc_47948
BL              sub_48E00
SUBS            R6, R0, #0
BEQ             loc_4792C
MOV             R1, R5
MOV             R0, R4
BL              sub_46E90
LDR             R3, [R4,#0x3C]
CMP             R3, #0x5D ; ']'
BEQ             loc_47710
CMP             R3, #0
BNE             loc_479B4
B               loc_47A74

loc_47978
BL              sub_49D54
CMP             R0, #0
MOV             R1, R5
MOV             R0, R4
BNE             loc_479D0
BL              sub_46E90
LDR             R3, [R4,#0x3C]
MOV             R1, R5
MOV             R0, R4
CMP             R3, #0x2C ; ','
BNE             loc_47A6C
BL              sub_46E90
LDR             R3, [R4,#0x3C]
CMP             R3, #0
BEQ             loc_47A74

loc_479B4
MOV             R1, R8
MOV             R2, R5
MOV             R0, R4
BL              sub_476A8
SUBS            R1, R0, #0
MOV             R0, R6
BNE             loc_47978

loc_479D0
LDR             R3, [R6,#4]
CMN             R3, #1
BEQ             loc_4792C
ADD             R3, R6, #4
DMB             ISH

loc_479E4
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_479E4

loc_479F8
CMP             R2, #0
BNE             loc_4792C
MOV             R0, R6
MOV             R6, R2
BL              sub_4942C
B               loc_4771C

loc_47A10
MOVW            R3, #:lower16:aUnexpectedToke ; "unexpected token"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aUnexpectedToke ; "unexpected token"
MOV             R2, #8  ; int
MOV             R6, #0
BL              sub_46990
B               loc_4771C

loc_47A30
VLDR            D0, [R0,#0x40]
BL              sub_492D4
MOV             R6, R0
B               loc_47708

loc_47A40
BL              sub_49408
MOV             R6, R0
B               loc_47708

loc_47A4C
MOVW            R3, #:lower16:aMaximumParsing ; "maximum parsing depth reached"
MOV             R1, R0  ; int
MOVT            R3, #:upper16:aMaximumParsing ; "maximum parsing depth reached"
MOV             R0, R2  ; int
MOV             R2, #2  ; int
MOV             R6, #0
BL              sub_46990
B               loc_4771C

loc_47A6C
CMP             R3, #0x5D ; ']'
BEQ             loc_47710

loc_47A74
MOVW            R3, #:lower16:aExpected ; "']' expected"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aExpected ; "']' expected"
MOV             R2, #8  ; int
BL              sub_46990
B               loc_479D0

loc_47A90
MOVW            R3, #:lower16:aStringOrExpect ; "string or '}' expected"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aStringOrExpect ; "string or '}' expected"
MOV             R2, #8  ; int
BL              sub_46990
B               loc_478D8

loc_47AAC
MOV             R0, R7
BL              sub_4815C
MOVW            R3, #:lower16:aExpected_0 ; "':' expected"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aExpected_0 ; "':' expected"
MOV             R2, #8  ; int
BL              sub_46990
B               loc_478D8

loc_47AD0
MOV             R0, R7
BL              sub_4815C
B               loc_478D8

loc_47ADC
BL              sub_4815C
B               loc_478D8

loc_47AE4
CMP             R3, #0x7D ; '}'
BEQ             loc_47710
MOVW            R3, #:lower16:aExpected_1 ; "'}' expected"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aExpected_1 ; "'}' expected"
MOV             R2, #8  ; int
BL              sub_46990
B               loc_478D8

loc_47B08
MOVW            R3, #:lower16:aU0000IsNotAllo ; "\\u0000 is not allowed without JSON_ALL"...
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aU0000IsNotAllo ; "\\u0000 is not allowed without JSON_ALL"...
MOV             R2, #0xB ; int
MOV             R6, R8
BL              sub_46990
B               loc_4771C

loc_47B28
MOV             R0, R7
BL              sub_4815C
MOVW            R3, #:lower16:aDuplicateObjec ; "duplicate object key"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aDuplicateObjec ; "duplicate object key"
MOV             R2, #0xE ; int
BL              sub_46990
B               loc_478D8
; End of function sub_476A8




; _DWORD *__fastcall sub_47B4C(_DWORD *, int, int)
sub_47B4C
MOV             R3, #0
PUSH            {R4-R8,LR} ; arg
MOV             R5, R1
STR             R3, [R0,#0x38]
MOV             R1, R2
MOV             R6, R2
MOV             R4, R0
BL              sub_46E90
ANDS            R7, R5, #4
BNE             loc_47B84
LDR             R3, [R4,#0x3C]
BIC             R3, R3, #0x20 ; ' '
CMP             R3, #0x5B ; '['
BNE             loc_47C34

loc_47B84
MOV             R2, R6
MOV             R1, R5
MOV             R0, R4
BL              sub_476A8
SUBS            R7, R0, #0
BEQ             loc_47BF4
TST             R5, #2
BEQ             loc_47BB8

loc_47BA4
CMP             R6, #0
LDRNE           R3, [R4,#0x24]
STRNE           R3, [R6,#8]

loc_47BB0
MOV             R0, R7
POP             {R4-R8,PC}

loc_47BB8
MOV             R1, R6
MOV             R0, R4
BL              sub_46E90
LDR             R3, [R4,#0x3C]
CMP             R3, #0
BEQ             loc_47BA4
MOVW            R3, #:lower16:aEndOfFileExpec ; "end of file expected"
MOV             R1, R4  ; int
MOVT            R3, #:upper16:aEndOfFileExpec ; "end of file expected"
MOV             R0, R6  ; int
MOV             R2, #7  ; int
BL              sub_46990
LDR             R3, [R7,#4]
CMN             R3, #1
BNE             loc_47C00

loc_47BF4
MOV             R7, #0
MOV             R0, R7
POP             {R4-R8,PC}

loc_47C00
ADD             R3, R7, #4
DMB             ISH

loc_47C08
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_47C08
CMP             R2, #0
BNE             loc_47BF4
MOV             R0, R7
MOV             R7, R2
BL              sub_4942C
B               loc_47BB0

loc_47C34
MOVW            R3, #:lower16:aOrExpected ; "'[' or '{' expected"
MOV             R1, R4  ; int
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aOrExpected ; "'[' or '{' expected"
MOV             R2, #8  ; int
BL              sub_46990
B               loc_47BB0
; End of function sub_47B4C




; _DWORD *__fastcall sub_47C50(int, int, char *)
sub_47C50

var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_28= -0x28
var_24= -0x24
var_18= -0x18
var_10= -0x10

PUSH            {R4-R7,LR}
MOV             R7, R1
MOVW            R1, #:lower16:aString ; "<string>"
MOV             R5, R0
SUB             SP, SP, #0x54
MOVT            R1, #:upper16:aString ; "<string>"
MOV             R0, R2
MOV             R6, R2
BL              sub_4A1CC
CMP             R5, #0
BEQ             loc_47CF8
MOVW            R3, #:lower16:sub_468EC
MOV             R4, #0
MOVT            R3, #:upper16:sub_468EC
MOV             R2, #1
ADD             R0, SP, #0x54+var_24
STR             R5, [SP,#0x54+var_54]
STR             R3, [SP,#0x54+var_4C]
STR             R4, [SP,#0x54+var_50]
STRB            R4, [SP,#0x54+var_44]
STR             R4, [SP,#0x54+var_3C]
STR             R4, [SP,#0x54+var_38]
STR             R4, [SP,#0x54+var_30]
STR             R4, [SP,#0x54+var_28]
STR             SP, [SP,#0x54+var_48]
STR             R2, [SP,#0x54+var_34]
BL              sub_48218
CMP             R0, R4
BNE             loc_47CEC
MOV             R3, #0xFFFFFFFF
MOV             R2, R6
MOV             R1, R7
ADD             R0, SP, #0x54+var_4C
STR             R7, [SP,#0x54+var_18]
STR             R3, [SP,#0x54+var_10]
BL              sub_47B4C
MOV             R4, R0
ADD             R0, SP, #0x54+var_4C
BL              sub_46AC0

loc_47CEC
MOV             R0, R4
ADD             SP, SP, #0x54 ; 'T'
POP             {R4-R7,PC} ; arg

loc_47CF8
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R1, R5  ; int
MOV             R4, R5
BL              sub_46990
B               loc_47CEC
; End of function sub_47C50




; _DWORD *__fastcall sub_47D18(int, int, int, char *)
sub_47D18

var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_24= -0x24
var_20= -0x20
var_14= -0x14
var_C= -0xC

PUSH            {R4-R8,LR}
MOV             R8, R1
MOVW            R1, #:lower16:aBuffer ; "<buffer>"
MOV             R5, R0
SUB             SP, SP, #0x58
MOVT            R1, #:upper16:aBuffer ; "<buffer>"
MOV             R0, R3
MOV             R6, R3
MOV             R7, R2
BL              sub_4A1CC
CMP             R5, #0
BEQ             loc_47DCC
MOVW            R3, #:lower16:sub_46910
MOV             R4, #0
MOVT            R3, #:upper16:sub_46910
ADD             R1, SP, #0x58+var_54
MOV             R2, #1
ADD             R0, SP, #0x58+var_20
STR             R5, [SP,#0x58+var_54]
STR             R8, [SP,#0x58+var_50]
STR             R3, [SP,#0x58+var_48]
STR             R4, [SP,#0x58+var_4C]
STRB            R4, [SP,#0x58+var_40]
STR             R4, [SP,#0x58+var_38]
STR             R4, [SP,#0x58+var_34]
STR             R4, [SP,#0x58+var_2C]
STR             R4, [SP,#0x58+var_24]
STR             R1, [SP,#0x58+var_44]
STR             R2, [SP,#0x58+var_30]
BL              sub_48218
CMP             R0, R4
BNE             loc_47DC0
MOV             R3, #0xFFFFFFFF
MOV             R2, R6
MOV             R1, R7
ADD             R0, SP, #0x58+var_48
STR             R7, [SP,#0x58+var_14]
STR             R3, [SP,#0x58+var_C]
BL              sub_47B4C
MOV             R4, R0
ADD             R0, SP, #0x58+var_48
BL              sub_46AC0

loc_47DC0
MOV             R0, R4
ADD             SP, SP, #0x58 ; 'X'
POP             {R4-R8,PC} ; arg

loc_47DCC
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R1, R5  ; int
MOV             R4, R5
BL              sub_46990
B               loc_47DC0
; End of function sub_47D18




; _DWORD *__fastcall sub_47DEC(int, int, char *)
sub_47DEC

var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_28= -0x28
var_24= -0x24
var_18= -0x18
var_10= -0x10

PUSH            {R4-R7,LR}
MOV             LR, #stdin
MOVW            R12, #:lower16:aStdin_0 ; "<stdin>"
MOVW            R3, #:lower16:aStream ; "<stream>"
MOVT            R12, #:upper16:aStdin_0 ; "<stdin>"
LDR             LR, [LR]
MOVT            R3, #:upper16:aStream ; "<stream>"
MOV             R7, R1
MOV             R5, R0
SUB             SP, SP, #0x4C
MOV             R6, R2
CMP             LR, R0
MOV             R0, R2
MOVEQ           R1, R12
MOVNE           R1, R3
BL              sub_4A1CC
CMP             R5, #0
BEQ             loc_47EAC
MOVW            R3, #:lower16:fgetc
MOV             R4, #0
MOVT            R3, #:upper16:fgetc
MOV             R2, #1
ADD             R0, SP, #0x4C+var_24
STR             R5, [SP,#0x4C+var_48]
STR             R3, [SP,#0x4C+var_4C]
STRB            R4, [SP,#0x4C+var_44]
STR             R4, [SP,#0x4C+var_3C]
STR             R4, [SP,#0x4C+var_38]
STR             R4, [SP,#0x4C+var_30]
STR             R4, [SP,#0x4C+var_28]
STR             R2, [SP,#0x4C+var_34]
BL              sub_48218
CMP             R0, R4
BNE             loc_47EA0
MOV             R3, #0xFFFFFFFF
MOV             R2, R6
MOV             R1, R7
MOV             R0, SP
STR             R7, [SP,#0x4C+var_18]
STR             R3, [SP,#0x4C+var_10]
BL              sub_47B4C
MOV             R4, R0
MOV             R0, SP
BL              sub_46AC0

loc_47EA0
MOV             R0, R4
ADD             SP, SP, #0x4C ; 'L'
POP             {R4-R7,PC} ; arg

loc_47EAC
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R1, R5  ; int
MOV             R4, R5
BL              sub_46990
B               loc_47EA0
; End of function sub_47DEC




; _DWORD *__fastcall sub_47ECC(int, int, char *)
sub_47ECC

var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_24= -0x24
var_20= -0x20
var_14= -0x14
var_C= -0xC

MOVW            R12, #:lower16:aStdin_0 ; "<stdin>"
MOVW            R3, #:lower16:aStream ; "<stream>"
PUSH            {R4-R6,LR}
CMP             R0, #0
SUB             SP, SP, #0x50
MOVT            R3, #:upper16:aStream ; "<stream>"
MOVT            R12, #:upper16:aStdin_0 ; "<stdin>"
MOV             R6, R1
STR             R0, [SP,#0x50+var_4C]
MOVNE           R1, R3
MOVEQ           R1, R12
MOV             R0, R2
MOV             R5, R2
BL              sub_4A1CC
LDR             R3, [SP,#0x50+var_4C]
CMP             R3, #0
BLT             loc_47F88
MOVW            R3, #:lower16:sub_46B00
MOV             R4, #0
ADD             R1, SP, #0x50+var_4C
MOVT            R3, #:upper16:sub_46B00
MOV             R2, #1
ADD             R0, SP, #0x50+var_20
STR             R3, [SP,#0x50+var_48]
STR             R1, [SP,#0x50+var_44]
STRB            R4, [SP,#0x50+var_40]
STR             R4, [SP,#0x50+var_38]
STR             R4, [SP,#0x50+var_34]
STR             R4, [SP,#0x50+var_2C]
STR             R4, [SP,#0x50+var_24]
STR             R2, [SP,#0x50+var_30]
BL              sub_48218
CMP             R0, R4
BNE             loc_47F7C
MOV             R3, #0xFFFFFFFF
MOV             R2, R5
MOV             R1, R6
ADD             R0, SP, #0x50+var_48
STR             R6, [SP,#0x50+var_14]
STR             R3, [SP,#0x50+var_C]
BL              sub_47B4C
MOV             R4, R0
ADD             R0, SP, #0x50+var_48
BL              sub_46AC0

loc_47F7C
MOV             R0, R4
ADD             SP, SP, #0x50 ; 'P'
POP             {R4-R6,PC} ; arg

loc_47F88
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R1, #0  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R4, R1
BL              sub_46990
B               loc_47F7C
; End of function sub_47ECC




; _DWORD *__fastcall sub_47FA8(char *, int, char *)
sub_47FA8

arg= -0xC
var_8= -8

PUSH            {R4-R7,LR}
MOV             R4, R0
SUB             SP, SP, #0xC
MOV             R6, R1
MOV             R0, R2
MOV             R1, R4
MOV             R5, R2
BL              sub_4A1CC
CMP             R4, #0
BEQ             loc_4800C
MOVW            R1, #:lower16:aRb ; "rb"
MOV             R0, R4
MOVT            R1, #:upper16:aRb ; "rb"
BL              fopen64
SUBS            R7, R0, #0
BEQ             loc_4802C
MOV             R1, R6
MOV             R2, R5
BL              sub_47DEC
MOV             R6, R0
MOV             R0, R7  ; stream
BL              fclose

loc_48000
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R7,PC} ; arg

loc_4800C
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R1, R4  ; int
MOV             R6, R4
BL              sub_46990
B               loc_48000

loc_4802C
BL              __errno_location
LDR             R0, [R0] ; errnum
MOV             R6, R7
BL              strerror
MOVW            R3, #:lower16:aUnableToOpenSS ; "unable to open %s: %s"
STR             R0, [SP,#0xC+var_8]
STR             R4, [SP,#0xC+arg] ; arg
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aUnableToOpenSS ; "unable to open %s: %s"
MOV             R2, #3  ; int
MOV             R1, R7  ; int
BL              sub_46990
B               loc_48000
; End of function sub_47FA8

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x450
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R7, R1
MOV             R6, R2
MOV             R1, #0
MOV             R2, #0x410
ADD             R0, SP, #0x48 ; 'H'
MOV             R5, R3
BL              memset
MOVW            R1, #:lower16:aCallback ; "<callback>"
MOV             R0, R5
MOVT            R1, #:upper16:aCallback ; "<callback>"
STR             R7, [SP,#0x454]
STR             R4, [SP,#0x450]
BL              sub_4A1CC
CMP             R4, #0
BEQ             loc_48128
MOVW            R3, #:lower16:sub_46934
MOV             R4, #0
MOVT            R3, #:upper16:sub_46934
MOV             R2, #1
ADD             R1, SP, #0x48 ; 'H'
ADD             R0, SP, #0x28 ; '('
STR             R1, [SP,#4]
STR             R3, [SP]
STRB            R4, [SP,#8]
STR             R4, [SP,#0x10]
STR             R4, [SP,#0x14]
STR             R4, [SP,#0x1C]
STR             R4, [SP,#0x24]
STR             R2, [SP,#0x18]
BL              sub_48218
CMP             R0, R4
BNE             loc_48118
MOV             R3, #0xFFFFFFFF
MOV             R2, R5
MOV             R1, R6
MOV             R0, SP
STR             R6, [SP,#0x34]
STR             R3, [SP,#0x3C]
BL              sub_47B4C
MOV             R4, R0
MOV             R0, SP
BL              sub_46AC0

loc_48118
MOV             R0, R4
ADD             SP, SP, #0x450
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_48128
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R5
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4
MOV             R1, R4
BL              sub_46990
B               loc_48118



; void *__fastcall sub_48144(void *result)
sub_48144
CMP             R0, #0
BXEQ            LR
MOV             R3, #off_6856C
LDR             R3, [R3] ; malloc
BX              R3 ; malloc
; End of function sub_48144




; void __fastcall sub_4815C(void *)
sub_4815C
CMP             R0, #0
BXEQ            LR
MOV             R3, #0x6856C
LDR             R3, [R3,#(off_68570 - 0x6856C)] ; free
BX              R3 ; free
; End of function sub_4815C




; _BYTE *__fastcall sub_48174(const void *, size_t)
sub_48174
PUSH            {R4-R6,LR}
ADDS            R5, R1, #1
BEQ             loc_481B8
MOVW            R3, #:lower16:off_6856C
MOV             R6, R0
MOVT            R3, #:upper16:off_6856C
MOV             R0, R5  ; size
LDR             R3, [R3] ; malloc
MOV             R4, R1
BLX             R3      ; malloc
SUBS            R5, R0, #0
BEQ             loc_481B8
MOV             R1, R6  ; src
MOV             R2, R4  ; n
BL              memcpy
MOV             R3, #0
STRB            R3, [R5,R4]

loc_481B8
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_48174




; _BYTE *__fastcall sub_481C0(const char *)
sub_481C0
PUSH            {R4,LR}
MOV             R4, R0
BL              strlen
MOV             R1, R0
MOV             R0, R4
POP             {R4,LR}
B               sub_48174
; End of function sub_481C0




; int __fastcall sub_481DC(__int64)
sub_481DC
MOV             R3, #off_6856C
STRD            R0, R1, [R3]
BX              LR
; End of function sub_481DC




; _DWORD *__fastcall sub_481EC(_DWORD *result, _DWORD *)
sub_481EC
CMP             R0, #0
MOVNE           R3, #off_6856C
LDRNE           R3, [R3] ; malloc
STRNE           R3, [R0]
CMP             R1, #0
MOVNE           R3, #off_6856C
LDRNE           R3, [R3,#(off_68570 - 0x6856C)] ; free
STRNE           R3, [R1]
BX              LR
; End of function sub_481EC




; int __fastcall sub_48218(_DWORD *)
sub_48218
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, #0
MOV             R0, #0x10
STR             R0, [R5,#8]
STR             R4, [R5,#4]
BL              sub_48144
CMP             R0, R4
STR             R0, [R5]
STRBNE          R4, [R0]
MOVNE           R0, R4
MOVEQ           R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_48218




; void __fastcall sub_4824C(int)
sub_4824C
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0]
CMP             R0, #0
BEQ             loc_48264
BL              sub_4815C

loc_48264
MOV             R3, #0
STR             R3, [R4,#8]
STR             R3, [R4,#4]
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_4824C




; int __fastcall sub_48278(int result)
sub_48278
LDR             R2, [R0]
MOV             R3, #0
STR             R3, [R0,#4]
STRB            R3, [R2]
BX              LR
; End of function sub_48278




; int __fastcall sub_4828C(int)
sub_4828C
LDR             R0, [R0]
BX              LR
; End of function sub_4828C




; int __fastcall sub_48294(int *)
sub_48294
MOV             R3, R0
MOV             R2, #0
LDR             R0, [R0]
STR             R2, [R3]
BX              LR
; End of function sub_48294




; int __fastcall sub_482A8(const void **, void *src, size_t n)
sub_482A8
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R3, [R0,#8]
MOV             R5, R2
MOV             R7, R1
LDR             R0, [R0,#4]
SUB             R2, R3, R0
CMP             R2, R5
LDRHI           R8, [R4]
BHI             loc_4833C
CMN             R5, #1
MOVNE           R2, #0
MOVEQ           R2, #1
ORRS            R2, R2, R3,LSR#31
BNE             loc_4836C
MOV             R2, #0xFFFFFFFE
SUB             R2, R2, R5
CMP             R2, R0
BCC             loc_4836C
MOV             R3, R3,LSL#1
ADD             R2, R5, #1
ADD             R0, R2, R0
CMP             R0, R3
MOVCS           R6, R0
MOVCC           R6, R3
MOV             R0, R6
BL              sub_48144
SUBS            R8, R0, #0
BEQ             loc_4836C
LDM             R4, {R1,R2} ; n
BL              memcpy
LDR             R0, [R4]
BL              sub_4815C
LDR             R0, [R4,#4]
STR             R8, [R4]
STR             R6, [R4,#8]

loc_4833C               ; src
MOV             R1, R7
MOV             R2, R5  ; n
ADD             R0, R8, R0 ; dest
BL              memcpy
LDR             R1, [R4,#4]
MOV             R3, #0
LDR             R2, [R4]
MOV             R0, R3
ADD             R5, R5, R1
STR             R5, [R4,#4]
STRB            R3, [R2,R5]
POP             {R4-R8,PC}

loc_4836C
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}
; End of function sub_482A8




; int __fastcall sub_48374(const void **, char)
sub_48374

var_5= -5
var_4= -4

PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R3, SP, #0xC+var_4
MOV             R2, #1  ; n
STRB            R1, [R3,#-1]!
MOV             R1, R3  ; src
BL              sub_482A8
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_48374




; int __fastcall sub_48398(int *, char, int)
sub_48398
LDR             R3, [R0,#4]
CMP             R3, #0
LDRNE           R2, [R0]
SUBNE           R3, R3, #1
MOVNE           R1, #0
STRNE           R3, [R0,#4]
LDRBNE          R0, [R2,R3]
MOVEQ           R0, R3
STRBNE          R1, [R2,R3]
BX              LR
; End of function sub_48398




; int __fastcall sub_483C0(int, double *)
sub_483C0

endptr= -8

PUSH            {R4-R7,LR}
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R7, R1
BL              localeconv
LDR             R3, [R0]
LDR             R5, [R4]
LDRB            R6, [R3]
CMP             R6, #0x2E ; '.'
BEQ             loc_48400
MOV             R0, R5  ; s
MOV             R1, #0x2E ; '.' ; c
BL              strchr
CMP             R0, #0
STRBNE          R6, [R0]
LDRNE           R5, [R4]

loc_48400
BL              __errno_location
MOV             R3, #0
MOV             R6, R0
ADD             R1, SP, #0xC+endptr ; endptr
STR             R3, [R6]
MOV             R0, R5  ; nptr
BL              strtod
LDR             R3, [R4]
LDR             R1, [R4,#4]
LDR             R2, [SP,#0xC+endptr]
ADD             R3, R3, R1
CMP             R2, R3
BNE             loc_4847C
VLDR            D7, =1.79769313e308
VCMPE.F64       D0, D7
VMRS            APSR_nzcv, FPSCR
BLE             loc_48460

loc_48444
LDR             R3, [R6]
CMP             R3, #0x22 ; '"'
BEQ             loc_48474

loc_48450
MOV             R0, #0
VSTR            D0, [R7]

loc_48458
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_48460
VLDR            D7, =-1.79769313e308
VCMPE.F64       D0, D7
VMRS            APSR_nzcv, FPSCR
BPL             loc_48450
B               loc_48444

loc_48474
MOV             R0, #0xFFFFFFFF
B               loc_48458

loc_4847C
MOVW            R3, #:lower16:aJsonpStrtod ; "jsonp_strtod"
MOVW            R1, #:lower16:aStrconvC ; "strconv.c"
MOVW            R0, #:lower16:aEndStrbufferVa ; "end == strbuffer->value + strbuffer->le"...
MOVT            R3, #:upper16:aJsonpStrtod ; "jsonp_strtod"
MOVT            R1, #:upper16:aStrconvC ; "strconv.c"
MOVT            R0, #:upper16:aEndStrbufferVa ; "end == strbuffer->value + strbuffer->le"...
MOV             R2, #0x4E ; 'N' ; line
BL              __assert_fail
; End of function sub_483C0

ALIGN 0x10
dbl_484A0 DCFD 1.79769313e308
dbl_484A8 DCFD -1.79769313e308



; int __fastcall sub_484B0(char *, size_t, int)
sub_484B0

var_C= -0xC

CMP             R2, #0
PUSH            {R4-R7,LR}
MOVNE           R3, R2
SUB             SP, SP, #0xC
MOVW            R2, #:lower16:aG ; "%.*g"
MOVEQ           R3, #0x11
MOV             R4, R1
VSTR            D0, [SP,#0xC+var_C]
MOVT            R2, #:upper16:aG ; "%.*g"
MOV             R7, R0
BL              snprintf
CMP             R4, R0
BLS             loc_485E8
MOV             R6, R0
BL              localeconv
LDR             R3, [R0]
LDRB            R1, [R3] ; c
CMP             R1, #0x2E ; '.'
BEQ             loc_48510
MOV             R0, R7  ; s
BL              strchr
CMP             R0, #0
MOVNE           R3, #0x2E ; '.'
STRBNE          R3, [R0]

loc_48510               ; c
MOV             R1, #0x2E ; '.'
MOV             R0, R7  ; s
BL              strchr
MOV             R1, #0x65 ; 'e' ; c
MOV             R5, R0
MOV             R0, R7  ; s
BL              strchr
CMP             R5, #0
BEQ             loc_485A8

loc_48534
CMP             R0, #0
BEQ             loc_4858C

loc_4853C
LDRB            R2, [R0,#1]
ADD             R4, R0, #2
LDRB            R3, [R0,#2]
CMP             R2, #0x2D ; '-'
BEQ             loc_48598
CMP             R3, #0x30 ; '0'
ADD             R5, R0, #1
BNE             loc_48568

loc_4855C
LDRB            R3, [R4,#1]!
CMP             R3, #0x30 ; '0'
BEQ             loc_4855C

loc_48568
CMP             R4, R5
BEQ             loc_4858C
SUB             R2, R4, R7
MOV             R1, R4  ; src
SUB             R4, R4, R5
SUB             R2, R6, R2 ; n
SUB             R6, R6, R4
MOV             R0, R5  ; dest
BL              memmove

loc_4858C
MOV             R0, R6

loc_48590
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_48598
CMP             R3, #0x30 ; '0'
MOVEQ           R5, R4
BEQ             loc_4855C
B               loc_4858C

loc_485A8
CMP             R0, #0
BNE             loc_4853C
ADD             R3, R6, #3
CMP             R3, R4
BCS             loc_485E8
MOV             R3, R7
MOV             R2, #0x2E ; '.'
STRB            R2, [R3,R6]!
MOV             R2, #0x30 ; '0'
ADD             R6, R6, #2
STRB            R2, [R3,#1]
MOV             R1, #0x65 ; 'e' ; c
STRB            R0, [R7,R6]
MOV             R0, R7  ; s
BL              strchr
B               loc_48534

loc_485E8
MOV             R0, #0xFFFFFFFF
B               loc_48590
; End of function sub_484B0




; int __fastcall sub_485F0(int, _BYTE *, _DWORD *)
sub_485F0
CMP             R0, #0
BLT             loc_486CC
CMP             R0, #0x7F
BLE             loc_48684
CMP             R0, #0x800
BLT             loc_4865C
CMP             R0, #0x10000
PUSH            {R4,LR}
BLT             loc_48698
CMP             R0, #0x110000
BGE             loc_486D4
MOV             R4, R0,ASR#18
UBFX            LR, R0, #0xC, #6
UBFX            R12, R0, #6, #6
SUB             R4, R4, #0x10
AND             R0, R0, #0x3F ; '?'
SUB             R3, R0, #0x80
STRB            R4, [R1]
SUB             LR, LR, #0x80
SUB             R12, R12, #0x80
MOV             R4, #4
STRB            LR, [R1,#1]
STRB            R12, [R1,#2]
MOV             R0, #0
STRB            R3, [R1,#3]
STR             R4, [R2]
POP             {R4,PC}

loc_4865C
MOV             R12, R0,ASR#6
AND             R0, R0, #0x3F ; '?'
SUB             R3, R0, #0x80
SUB             R0, R12, #0x40 ; '@'
MOV             R12, #2
STRB            R0, [R1]
MOV             R0, #0
STRB            R3, [R1,#1]
STR             R12, [R2]
BX              LR

loc_48684
MOV             R3, #1
STRB            R0, [R1]
MOV             R0, #0
STR             R3, [R2]
BX              LR

loc_48698
MOV             LR, R0,ASR#12
UBFX            R12, R0, #6, #6
AND             R0, R0, #0x3F ; '?'
SUB             R3, R0, #0x80
SUB             LR, LR, #0x20 ; ' '
SUB             R12, R12, #0x80
MOV             R4, #3
STRB            LR, [R1]
MOV             R0, #0
STRB            R12, [R1,#1]
STRB            R3, [R1,#2]
STR             R4, [R2]
POP             {R4,PC}

loc_486CC
MOV             R0, #0xFFFFFFFF
BX              LR

loc_486D4
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_485F0




; int __fastcall sub_486DC(int)
sub_486DC
TST             R0, #0x80
BNE             loc_486EC
MOV             R0, #1
BX              LR

loc_486EC
EOR             R3, R0, #0x80
CMP             R3, #0x41 ; 'A'
BLS             loc_48738
ADD             R3, R0, #0x3E ; '>'
UXTB            R3, R3
CMP             R3, #0x1D
BLS             loc_48730
ADD             R3, R0, #0x20 ; ' '
UXTB            R3, R3
CMP             R3, #0xF
BLS             loc_48740
ADD             R0, R0, #0x10
UXTB            R0, R0
CMP             R0, #4
MOVHI           R0, #0
MOVLS           R0, #4
BX              LR

loc_48730
MOV             R0, #2
BX              LR

loc_48738
MOV             R0, #0
BX              LR

loc_48740
MOV             R0, #3
BX              LR
; End of function sub_486DC




; int __fastcall sub_48748(char *, unsigned int, int *)
sub_48748
PUSH            {R4,R5,LR}
CMP             R1, #2
LDRB            LR, [R0]
MOV             R5, R1
ANDEQ           LR, LR, #0x1F
BEQ             loc_48780
CMP             R1, #3
ANDEQ           LR, LR, #0xF
BEQ             loc_48780
CMP             R1, #4
ANDEQ           LR, LR, #7
BEQ             loc_48780

loc_48778
MOV             R0, #0
POP             {R4,R5,PC}

loc_48780
LDRB            R3, [R0,#1]
EOR             R12, R3, #0x80
CMP             R12, #0x3F ; '?'
BHI             loc_48778
ADD             R0, R0, #1
MOV             R12, #1
B               loc_487AC

loc_4879C
LDRB            R3, [R0,#1]!
EOR             R4, R3, #0x80
CMP             R4, #0x3F ; '?'
BHI             loc_48778

loc_487AC
ADD             R12, R12, #1
AND             R3, R3, #0x3F ; '?'
CMP             R5, R12
ADD             LR, R3, LR,LSL#6
BHI             loc_4879C
CMP             LR, #0x110000
BGE             loc_48778
SUB             R3, LR, #0xD800
CMP             R3, #0x800
BCC             loc_48778
CMP             LR, #0x7F
CMPLE           R5, #2
MOVEQ           R0, #1
MOVNE           R0, #0
BEQ             loc_48778
SUB             R3, R5, #3
CMP             LR, #0x800
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVGE           R3, #0
CMP             R3, #0
POPNE           {R4,R5,PC}
SUB             R1, R5, #4
CMP             LR, #0x10000
CLZ             R1, R1
MOV             R1, R1,LSR#5
MOVGE           R1, #0
CMP             R1, #0
BNE             loc_48778
CMP             R2, #0
MOV             R0, #1
STRNE           LR, [R2]
POP             {R4,R5,PC}
; End of function sub_48748




; char *__fastcall sub_48830(char *result, int, _DWORD *)
sub_48830

var_14= -0x14

CMP             R1, #0
BXEQ            LR
PUSH            {R4-R6,LR}
MOV             R5, R2
LDRB            R2, [R0]
SUB             SP, SP, #8
MOV             R4, R0
MOV             R0, R2
BL              sub_486DC
SUBS            R6, R0, #0
BEQ             loc_488A0
CMP             R6, #1
STREQ           R2, [SP,#0x18+var_14]
BEQ             loc_48888
CMP             R1, R6
BCC             loc_488A0
ADD             R2, SP, #0x18+var_14
MOV             R1, R6
MOV             R0, R4
BL              sub_48748
CMP             R0, #0
BEQ             loc_488A0

loc_48888
CMP             R5, #0
ADD             R0, R4, R6
LDRNE           R3, [SP,#0x18+var_14]
STRNE           R3, [R5]
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_488A0
MOV             R0, #0
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_48830




; int __fastcall sub_488AC(int, unsigned int)
sub_488AC
PUSH            {R4-R8,LR}
SUBS            R8, R1, #0
BEQ             loc_48920
MOV             R7, R0
MOV             R4, #0
B               loc_488F4

loc_488C4
CMP             R5, #1
BLS             loc_488E8
CMP             R3, R5
BCC             loc_48918
BL              sub_48748
CMP             R0, #0
ADD             R4, R5, R4
SUB             R4, R4, #1
BEQ             loc_48918

loc_488E8
ADD             R4, R4, #1
CMP             R8, R4
BLS             loc_48920

loc_488F4
LDRB            R0, [R7,R4]
ADD             R6, R7, R4
BL              sub_486DC
SUBS            R5, R0, #0
SUB             R3, R8, R4
MOV             R2, #0
MOV             R0, R6
MOV             R1, R5
BNE             loc_488C4

loc_48918
MOV             R0, #0
POP             {R4-R8,PC}

loc_48920
MOV             R0, #1
POP             {R4-R8,PC}
; End of function sub_488AC




; _QWORD *__fastcall sub_48928(int)
sub_48928
CMP             R0, #0
PUSH            {R4-R6,LR}
BEQ             loc_48940
LDR             R3, [R0]
CMP             R3, #3
BEQ             loc_48970

loc_48940
MOV             R4, #0
MOV             R5, #0

loc_48948
MOV             R0, #0x10
BL              sub_48144
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R2, #3
MOV             R3, #1
STRD            R4, R5, [R0,#8]
STR             R2, [R0]
STR             R3, [R0,#4]
POP             {R4-R6,PC}

loc_48970
LDRD            R4, R5, [R0,#8]
B               loc_48948
; End of function sub_48928




; void *__fastcall sub_48978(_DWORD *, int, int)
sub_48978
LDR             R3, [R0,#0xC]
LDR             R12, [R0,#8]
PUSH            {R4-R8,LR}
ADD             R3, R1, R3
LDR             R5, [R0,#0x10]
CMP             R3, R12
BHI             loc_4899C

loc_48994
MOV             R0, R5
POP             {R4-R8,PC}

loc_4899C
MOV             R3, R12,LSL#1
ADD             R12, R12, R1
MOV             R4, R0
CMP             R3, R12
MOV             R6, R2
MOVCS           R7, R3
MOVCC           R7, R12
MOV             R0, R7,LSL#2
BL              sub_48144
SUBS            R3, R0, #0
BEQ             loc_489FC
CMP             R6, #0
STR             R7, [R4,#8]
STR             R3, [R4,#0x10]
BEQ             loc_48994
LDR             R2, [R4,#0xC]
MOV             R1, R5  ; src
MOV             R2, R2,LSL#2 ; n
BL              memcpy
MOV             R0, R5
BL              sub_4815C
LDR             R5, [R4,#0x10]
MOV             R0, R5
POP             {R4-R8,PC}

loc_489FC
MOV             R5, R3
B               loc_48994
; End of function sub_48978




; _DWORD *__fastcall sub_48A04(_BYTE *, size_t, int)
sub_48A04
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
BEQ             loc_48A58
CMP             R2, #0
MOV             R6, R1
BEQ             loc_48A4C

loc_48A1C
MOV             R0, #0x10
BL              sub_48144
SUBS            R4, R0, #0
BEQ             loc_48A60
MOV             R2, #2
MOV             R3, #1
MOV             R0, R4
STR             R5, [R4,#8]
STR             R6, [R4,#0xC]
STR             R2, [R4]
STR             R3, [R4,#4]
POP             {R4-R6,PC}

loc_48A4C
BL              sub_48174
SUBS            R5, R0, #0
BNE             loc_48A1C

loc_48A58
MOV             R0, #0
POP             {R4-R6,PC}

loc_48A60
MOV             R0, R5
BL              sub_4815C
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_48A04




; _DWORD *sub_48A70()
sub_48A70
PUSH            {R4-R6,LR}
MOV             R0, #0x24 ; '$'
BL              sub_48144
SUBS            R4, R0, #0
BEQ             loc_48AB8
MOV             R3, #dword_72C18
LDR             R0, [R3]
CMP             R0, #0
BEQ             loc_48AC0

loc_48A98
MOV             R3, #1
MOV             R5, #0
STR             R3, [R4,#4]
ADD             R0, R4, #8
STR             R5, [R4]
BL              sub_461E0
CMP             R0, R5
BNE             loc_48AC8

loc_48AB8
MOV             R0, R4
POP             {R4-R6,PC}

loc_48AC0
BL              sub_467F0
B               loc_48A98

loc_48AC8
MOV             R0, R4
MOV             R4, R5
BL              sub_4815C
B               loc_48AB8
; End of function sub_48A70




; _DWORD *__fastcall sub_48AD8(_DWORD *result)
sub_48AD8
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #0
LDREQ           R0, [R0,#8]
MOVNE           R0, #0
BX              LR
; End of function sub_48AD8




; int __fastcall sub_48AF4(_DWORD *, char *)
sub_48AF4
CMP             R0, #0
CMPNE           R1, #0
BEQ             loc_48B14
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_48B14
ADD             R0, R0, #8 ; int
B               sub_46508

loc_48B14
MOV             R0, #0
BX              LR
; End of function sub_48AF4




; bool __fastcall sub_48B1C(int *, int *)
sub_48B1C
LDR             R3, [R0]
LDR             R2, [R1]
CMP             R3, R2
BEQ             loc_48B34
MOV             R0, #0
BX              LR

loc_48B34
CMP             R0, R1
BEQ             loc_48CDC
PUSH            {R4-R8,LR}
MOV             R5, R1
MOV             R4, R0
CMP             R3, #4  ; switch 5 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_48B4C ; jumptable 00048B4C default case
jpt_48B4C DCD loc_48C20 ; jump table for switch statement
DCD loc_48B68
DCD loc_48CB0
DCD loc_48C04
DCD loc_48BE8

loc_48B68               ; jumptable 00048B4C case 1
LDR             R7, [R0,#0xC]
LDR             R2, [R1,#0xC]
CMP             R7, R2
BNE             def_48B4C ; jumptable 00048B4C default case
CMP             R7, #0
BEQ             loc_48CD4
MOV             R2, R3
MOV             R6, #0
B               loc_48BCC

loc_48B8C
LDR             R3, [R5,#0xC]
CMP             R3, R6
BLS             def_48B4C ; jumptable 00048B4C default case
LDR             R3, [R5,#0x10]
LDR             R1, [R3,R6,LSL#2]
CMP             R1, #0
CMPNE           R0, #0
BEQ             def_48B4C ; jumptable 00048B4C default case
BL              sub_48B1C
CMP             R0, #0
BEQ             def_48B4C ; jumptable 00048B4C default case
ADD             R6, R6, #1
CMP             R7, R6
BEQ             loc_48CD4
LDR             R3, [R4]
LDR             R2, [R5]

loc_48BCC
CMP             R3, #1
BEQ             loc_48CE4

loc_48BD4
MOV             R0, #0

loc_48BD8
CMP             R2, #1
BEQ             loc_48B8C

def_48B4C               ; jumptable 00048B4C default case
MOV             R0, #0
POP             {R4-R8,PC}

loc_48BE8               ; jumptable 00048B4C case 4
VLDR            D6, [R0,#8]
VLDR            D7, [R1,#8]
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
MOVEQ           R0, #1
MOVNE           R0, #0
POP             {R4-R8,PC}

loc_48C04               ; jumptable 00048B4C case 3
LDRD            R0, R1, [R0,#8]
LDRD            R2, R3, [R5,#8]
CMP             R1, R3
CMPEQ           R0, R2
MOVEQ           R0, #1
MOVNE           R0, #0
POP             {R4-R8,PC}

loc_48C20               ; jumptable 00048B4C case 0
LDR             R2, [R0,#8]
LDR             R3, [R1,#8]
CMP             R2, R3
BNE             def_48B4C ; jumptable 00048B4C default case
ADD             R8, R0, #8
MOV             R0, R8
BL              sub_466E4
CMP             R0, #0
BNE             loc_48C84
B               loc_48CD4

loc_48C48
BL              sub_48AF4
SUBS            R1, R0, #0
MOV             R0, R6
BEQ             def_48B4C ; jumptable 00048B4C default case
BL              sub_48B1C
CMP             R0, #0
MOV             R1, R7
MOV             R0, R8
BEQ             def_48B4C ; jumptable 00048B4C default case
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_48CD4
BL              sub_4675C
CMP             R0, #0
BEQ             loc_48CD4

loc_48C84
BL              sub_46774
SUBS            R6, R0, #0
BEQ             loc_48CD4
SUB             R7, R6, #0x10
MOV             R0, R7
BL              sub_4677C
MOV             R1, R6
SUBS            R6, R0, #0
MOV             R0, R5
BNE             loc_48C48
B               loc_48CD4

loc_48CB0               ; jumptable 00048B4C case 2
LDR             R2, [R0,#0xC]
LDR             R3, [R1,#0xC]
CMP             R2, R3
BNE             def_48B4C ; jumptable 00048B4C default case
LDR             R1, [R1,#8] ; s2
LDR             R0, [R0,#8] ; s1
BL              memcmp
CMP             R0, #0
BNE             def_48B4C ; jumptable 00048B4C default case

loc_48CD4
MOV             R0, #1
POP             {R4-R8,PC}

loc_48CDC
MOV             R0, #1
BX              LR

loc_48CE4
LDR             R3, [R4,#0xC]
CMP             R3, R6
BLS             loc_48BD4
LDR             R3, [R4,#0x10]
LDR             R0, [R3,R6,LSL#2]
B               loc_48BD8
; End of function sub_48B1C




; int __fastcall sub_48CFC(_DWORD *, char *)
sub_48CFC
CMP             R0, #0
CMPNE           R1, #0
BEQ             loc_48D1C
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_48D1C
ADD             R0, R0, #8 ; int
B               sub_46568

loc_48D1C
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_48CFC

CMP             R0, #0
BEQ             loc_48D54
PUSH            {R4,LR}
LDR             R4, [R0]
CMP             R4, #0
BNE             loc_48D4C
ADD             R0, R0, #8
BL              sub_46688
MOV             R0, R4
POP             {R4,PC}

loc_48D4C
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_48D54
MOV             R0, #0xFFFFFFFF
BX              LR



; int __fastcall sub_48D5C(_DWORD *)
sub_48D5C
CMP             R0, #0
BEQ             loc_48D78
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_48D78
ADD             R0, R0, #8
B               sub_466E4

loc_48D78
MOV             R0, #0
BX              LR
; End of function sub_48D5C




; int __fastcall sub_48D80(_DWORD *, char *)
sub_48D80
CMP             R0, #0
CMPNE           R1, #0
BEQ             loc_48DA0
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_48DA0
ADD             R0, R0, #8 ; int
B               sub_466FC

loc_48DA0
MOV             R0, #0
BX              LR
; End of function sub_48D80




; int __fastcall sub_48DA8(_DWORD *, int)
sub_48DA8
CMP             R0, #0
BEQ             loc_48DD4
LDR             R2, [R0]
CLZ             R3, R1
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_48DD4
ADD             R0, R0, #8
B               sub_4675C

loc_48DD4
MOV             R0, #0
BX              LR
; End of function sub_48DA8




; int __fastcall sub_48DDC(int)
sub_48DDC
CMP             R0, #0
BXEQ            LR
B               sub_46774
; End of function sub_48DDC




; int __fastcall sub_48DE8(int)
sub_48DE8
CMP             R0, #0
BXEQ            LR
B               sub_4677C
; End of function sub_48DE8




; int __fastcall sub_48DF4(int result)
sub_48DF4
CMP             R0, #0
SUBNE           R0, R0, #0x10
BX              LR
; End of function sub_48DF4




; _DWORD *sub_48E00()
sub_48E00
PUSH            {R4,LR}
MOV             R0, #0x14
BL              sub_48144
SUBS            R4, R0, #0
BEQ             loc_48E48
MOV             R3, #1
MOV             R1, #0
MOV             R2, #8
STR             R3, [R4]
STR             R3, [R4,#4]
MOV             R0, #0x20 ; ' '
STR             R1, [R4,#0xC]
STR             R2, [R4,#8]
BL              sub_48144
CMP             R0, #0
MOV             R3, R0
STR             R0, [R4,#0x10]
BEQ             loc_48E50

loc_48E48
MOV             R0, R4
POP             {R4,PC}

loc_48E50
MOV             R0, R4
MOV             R4, R3
BL              sub_4815C
B               loc_48E48
; End of function sub_48E00




; _DWORD *__fastcall sub_48E60(_DWORD *result)
sub_48E60
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #1
LDREQ           R0, [R0,#0xC]
MOVNE           R0, #0
BX              LR
; End of function sub_48E60




; _DWORD *__fastcall sub_48E7C(_DWORD *result, unsigned int)
sub_48E7C
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #1
BNE             loc_48EA8
LDR             R3, [R0,#0xC]
CMP             R3, R1
BLS             loc_48EA8
LDR             R3, [R0,#0x10]
LDR             R0, [R3,R1,LSL#2]
BX              LR

loc_48EA8
MOV             R0, #0
BX              LR
; End of function sub_48E7C




; int __fastcall sub_48EB0(_DWORD *, _DWORD *)
sub_48EB0
PUSH            {R4-R6,LR}
SUBS            R6, R0, #0
BEQ             loc_48F80
CLZ             R3, R1
LDR             R4, [R6]
MOV             R3, R3,LSR#5
CMP             R4, #1
MOVEQ           R4, R3
ORRNE           R4, R3, #1
CMP             R4, #0
BNE             loc_48F80
LDR             R2, [R1]
CMP             R2, #1
BNE             loc_48F80
MOV             R5, R1
LDR             R1, [R1,#0xC]
BL              sub_48978
CMP             R0, #0
BEQ             loc_48F80
LDRD            R0, R1, [R5,#0xC]
CMP             R0, #0
MOV             R2, R0
BEQ             loc_48F58
MOV             R3, R4

loc_48F10
LDR             R2, [R1,R3,LSL#2]
CMP             R2, #0
BEQ             loc_48F48
LDR             R12, [R2,#4]
ADD             R2, R2, #4
CMN             R12, #1
BEQ             loc_48F48

loc_48F2C
LDREX           R1, [R2]
ADD             R1, R1, #1
STREX           R0, R1, [R2]
CMP             R0, #0
BNE             loc_48F2C
DMB             ISH
LDRD            R0, R1, [R5,#0xC] ; src

loc_48F48
ADD             R3, R3, #1
CMP             R0, R3
BHI             loc_48F10
MOV             R2, R0,LSL#2 ; n

loc_48F58
LDR             R3, [R6,#0x10]
LDR             R0, [R6,#0xC]
ADD             R0, R3, R0,LSL#2 ; dest
BL              memcpy
LDR             R2, [R5,#0xC]
MOV             R0, #0
LDR             R3, [R6,#0xC]
ADD             R3, R3, R2
STR             R3, [R6,#0xC]
POP             {R4-R6,PC}

loc_48F80
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_48EB0




; const char *__fastcall sub_48F88(const char *result)
sub_48F88
SUBS            R3, R0, #0
BXEQ            LR
PUSH            {R4,LR}
MOV             R4, R3
BL              strlen
MOV             R2, #0
MOV             R1, R0
MOV             R0, R4
POP             {R4,LR}
B               sub_48A04
; End of function sub_48F88




; _DWORD *__fastcall sub_48FB0(_BYTE *, size_t)
sub_48FB0
MOV             R2, #0
B               sub_48A04
; End of function sub_48FB0




; _DWORD *__fastcall sub_48FB8(_BYTE *, size_t)
sub_48FB8
MOV             R2, #1
B               sub_48A04
; End of function sub_48FB8




; _DWORD *__fastcall sub_48FC0(_BYTE *, size_t)
sub_48FC0
SUBS            R3, R0, #0
BEQ             loc_48FFC
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R3
BL              sub_488AC
CMP             R0, #0
BEQ             loc_48FF4
MOV             R1, R5
MOV             R0, R4
MOV             R2, #0
POP             {R4-R6,LR}
B               sub_48A04

loc_48FF4
MOV             R0, #0
POP             {R4-R6,PC}

loc_48FFC
MOV             R0, #0
BX              LR
; End of function sub_48FC0




; const char *__fastcall sub_49004(const char *result)
sub_49004
SUBS            R3, R0, #0
BXEQ            LR
PUSH            {R4,LR}
MOV             R4, R3
BL              strlen
MOV             R1, R0
MOV             R0, R4
POP             {R4,LR}
B               sub_48FC0
; End of function sub_49004




; _DWORD *__fastcall sub_49028(_DWORD *result)
sub_49028
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #2
LDREQ           R0, [R0,#8]
MOVNE           R0, #0
BX              LR
; End of function sub_49028




; _DWORD *__fastcall sub_49044(_DWORD *result)
sub_49044
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #2
LDREQ           R0, [R0,#0xC]
MOVNE           R0, #0
BX              LR
; End of function sub_49044




; int __fastcall sub_49060(int, const void *, size_t)
sub_49060
PUSH            {R4-R8,LR}
SUBS            R5, R0, #0
BEQ             loc_490BC
CLZ             R3, R1
LDR             R4, [R5]
MOV             R3, R3,LSR#5
CMP             R4, #2
MOVEQ           R4, R3
ORRNE           R4, R3, #1
CMP             R4, #0
BNE             loc_490BC
MOV             R0, R1
MOV             R1, R2
MOV             R6, R2
BL              sub_48174
SUBS            R7, R0, #0
BEQ             loc_490BC
LDR             R0, [R5,#8]
BL              sub_4815C
MOV             R0, R4
STR             R7, [R5,#8]
STR             R6, [R5,#0xC]
POP             {R4-R8,PC}

loc_490BC
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}
; End of function sub_49060




; int __fastcall sub_490C4(int, const char *)
sub_490C4
PUSH            {R4-R6,LR}
SUBS            R4, R1, #0
BEQ             loc_490F0
MOV             R5, R0
MOV             R0, R4  ; s
BL              strlen
MOV             R1, R4
MOV             R2, R0
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_49060

loc_490F0
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_490C4




; int __fastcall sub_490F8(int, const void *, size_t)
sub_490F8
PUSH            {R4-R6,LR}
SUBS            R4, R1, #0
BEQ             loc_49134
MOV             R6, R0
MOV             R1, R2
MOV             R0, R4
MOV             R5, R2
BL              sub_488AC
CMP             R0, #0
BEQ             loc_49134
MOV             R2, R5
MOV             R1, R4
MOV             R0, R6
POP             {R4-R6,LR}
B               sub_49060

loc_49134
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_490F8




; int __fastcall sub_4913C(int, const char *)
sub_4913C
PUSH            {R4-R6,LR}
SUBS            R4, R1, #0
BEQ             loc_49168
MOV             R5, R0
MOV             R0, R4  ; s
BL              strlen
MOV             R1, R4
MOV             R2, R0
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_490F8

loc_49168
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_4913C




; _DWORD *__fastcall sub_49170(char *format, __gnuc_va_list arg)
sub_49170

arg= -8

MOV             R12, R1
MOV             R1, #0  ; maxlen
PUSH            {R4-R7,LR}
MOV             R2, R0  ; format
SUB             SP, SP, #0xC
MOV             R5, R0
MOV             R3, R12 ; arg
MOV             R0, R1  ; s
STR             R12, [SP,#0xC+arg]
BL              vsnprintf
SUBS            R4, R0, #0
BEQ             loc_491F0
ADD             R6, R4, #1
MOV             R0, R6
BL              sub_48144
SUBS            R7, R0, #0
BEQ             loc_49208
MOV             R2, R5  ; format
MOV             R1, R6  ; maxlen
LDR             R3, [SP,#0xC+arg] ; arg
BL              vsnprintf
MOV             R1, R4
MOV             R0, R7
BL              sub_488AC
SUBS            R5, R0, #0
BEQ             loc_49210
MOV             R1, R4
MOV             R0, R7
MOV             R2, #1
BL              sub_48A04

loc_491E8
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_491F0
MOVW            R0, #:lower16:(asc_4CF84+4) ; ""
MOV             R1, R4
MOVT            R0, #:upper16:(asc_4CF84+4) ; ""
BL              sub_48FC0
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_49208
MOV             R0, R7
B               loc_491E8

loc_49210
MOV             R0, R7
BL              sub_4815C
MOV             R0, R5
B               loc_491E8
; End of function sub_49170




; _DWORD *sub_49220(char *, ...)
sub_49220

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R3, SP, #0xC+varg_r1
MOV             R1, R3  ; arg
LDR             R0, [SP,#0xC+varg_r0] ; format
STR             R3, [SP,#0xC+var_8]
BL              sub_49170
ADD             SP, SP, #0xC
POP             {LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_49220




; _QWORD *__fastcall sub_49250(__int64)
sub_49250
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, #0x10
MOV             R5, R1
BL              sub_48144
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R2, #3
MOV             R3, #1
STRD            R4, R5, [R0,#8]
STR             R2, [R0]
STR             R3, [R0,#4]
POP             {R4-R6,PC}
; End of function sub_49250




; __int64 __fastcall sub_49284(int)
sub_49284
CMP             R0, #0
BEQ             loc_49298
LDR             R3, [R0]
CMP             R3, #3
BEQ             loc_492A4

loc_49298
MOV             R0, #0
MOV             R1, #0
BX              LR

loc_492A4
LDRD            R0, R1, [R0,#8]
BX              LR
; End of function sub_49284




; int __fastcall sub_492AC(int, __int64)
sub_492AC
CMP             R0, #0
BEQ             loc_492CC
LDR             R1, [R0]
CMP             R1, #3
BNE             loc_492CC
STRD            R2, R3, [R0,#8]
MOV             R0, #0
BX              LR

loc_492CC
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_492AC




; double *sub_492D4()
sub_492D4
VCMP.F64        D0, D0
VMRS            APSR_nzcv, FPSCR
BVS             loc_49320
VLDR            D7, =1.79769313e308
VABS.F64        D6, D0
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
BGT             loc_49320
PUSH            {R4-R6,LR}
MOV             R0, #0x10
VMOV            R4, R5, D0
BL              sub_48144
CMP             R0, #0
MOVNE           R2, #4
MOVNE           R3, #1
STRDNE          R4, R5, [R0,#8]
STRNE           R2, [R0]
STRNE           R3, [R0,#4]
POP             {R4-R6,PC}

loc_49320
MOV             R0, #0
BX              LR
; End of function sub_492D4

dbl_49328 DCFD 1.79769313e308



; void sub_49330()
sub_49330
CMP             R0, #0
BEQ             loc_49344
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_4934C

loc_49344
VLDR            D0, =0.0
BX              LR

loc_4934C
VLDR            D0, [R0,#8]
BX              LR
; End of function sub_49330

ALIGN 8
dbl_49358 DCFD 0.0
SUBS            R2, R0, #0
BEQ             loc_493AC
VCMP.F64        D0, D0
LDR             R0, [R2]
VMRS            APSR_nzcv, FPSCR
MOVVS           R3, #1
MOVVC           R3, #0
CMP             R0, #4
MOVEQ           R0, R3
ORRNE           R0, R3, #1
CMP             R0, #0
BNE             loc_493AC
VLDR            D7, =1.79769313e308
VABS.F64        D6, D0
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
BGT             loc_493AC
VSTR            D0, [R2,#8]
BX              LR

loc_493AC
MOV             R0, #0xFFFFFFFF
BX              LR
ALIGN 8
dbl_493B8 DCFD 1.79769313e308



; int __fastcall sub_493C0(int result)
sub_493C0
CMP             R0, #0
BEQ             loc_493DC
LDR             R3, [R0]
CMP             R3, #3
BEQ             loc_493EC
CMP             R3, #4
BEQ             loc_493E4

loc_493DC
VLDR            D0, =0.0
BX              LR

loc_493E4
VLDR            D0, [R0,#8]
BX              LR

loc_493EC
PUSH            {R4,LR}
LDRD            R0, R1, [R0,#8]
BLX             sub_4AB14
VMOV            D0, R0, R1
POP             {R4,PC}
; End of function sub_493C0

dbl_49400 DCFD 0.0



; void *sub_49408()
sub_49408
MOV             R0, #unk_68574
BX              LR
; End of function sub_49408




; void *sub_49414()
sub_49414
LDR             R0, =unk_6857C
BX              LR
; End of function sub_49414

off_4941C DCD unk_6857C



; void *sub_49420()
sub_49420
LDR             R0, =unk_68584
BX              LR
; End of function sub_49420

off_49428 DCD unk_68584



; void __fastcall sub_4942C(_DWORD *)
sub_4942C
PUSH            {R4-R6,LR}
SUBS            R4, R0, #0
POPEQ           {R4-R6,PC}
LDR             R3, [R4]
CMP             R3, #4  ; switch 5 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_49440 ; jumptable 00049440 default case
jpt_49440 DCD loc_49474 ; jump table for switch statement
DCD loc_49488
DCD loc_4945C
DCD loc_49464
DCD loc_49464

loc_4945C               ; jumptable 00049440 case 2
LDR             R0, [R4,#8]

loc_49460
BL              sub_4815C

loc_49464               ; jumptable 00049440 cases 3,4
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_4815C

def_49440               ; jumptable 00049440 default case
POP             {R4-R6,PC}

loc_49474               ; jumptable 00049440 case 0
ADD             R0, R4, #8
BL              sub_4625C
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_4815C

loc_49488               ; jumptable 00049440 case 1
LDR             R1, [R4,#0xC]
LDR             R0, [R4,#0x10]
CMP             R1, #0
MOVNE           R5, #0
BEQ             loc_49460

loc_4949C
LDR             R3, [R0,R5,LSL#2]
CMP             R3, #0
BEQ             loc_494E8
LDR             R12, [R3,#4]
ADD             R2, R3, #4
CMN             R12, #1
BEQ             loc_494E8
DMB             ISH

loc_494BC
LDREX           R1, [R2]
SUB             R1, R1, #1
STREX           R0, R1, [R2]
CMP             R0, #0
BNE             loc_494BC
CMP             R1, #0
BNE             loc_494E0
MOV             R0, R3
BL              sub_4942C

loc_494E0
LDR             R0, [R4,#0x10]
LDR             R1, [R4,#0xC]

loc_494E8
ADD             R5, R5, #1
CMP             R5, R1
BCC             loc_4949C
B               loc_49460
; End of function sub_4942C




; int __fastcall sub_494F8(_DWORD *)
sub_494F8
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
BEQ             loc_49580
LDR             R3, [R5]
CMP             R3, #1
BNE             loc_49580
LDR             R2, [R5,#0xC]
CMP             R2, #0
BEQ             loc_49574
MOV             R4, #0

loc_49520
LDR             R3, [R5,#0x10]
LDR             R0, [R3,R4,LSL#2]
CMP             R0, #0
BEQ             loc_49568
LDR             R1, [R0,#4]
ADD             R3, R0, #4
CMN             R1, #1
BEQ             loc_49568
DMB             ISH

loc_49544
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_49544
CMP             R2, #0
BNE             loc_49564
BL              sub_4942C

loc_49564
LDR             R2, [R5,#0xC]

loc_49568
ADD             R4, R4, #1
CMP             R2, R4
BHI             loc_49520

loc_49574
MOV             R0, #0
STR             R0, [R5,#0xC]
POP             {R4-R6,PC}

loc_49580
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_494F8




; int __fastcall sub_49588(_DWORD *, int, _DWORD *)
sub_49588
SUBS            R3, R0, #0
PUSH            {R4,LR}
BEQ             loc_495A0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_495F0

loc_495A0
CMP             R2, #0
BEQ             loc_495B4
LDR             R3, [R2,#4]
CMN             R3, #1
BNE             loc_495BC

loc_495B4
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_495BC
ADD             R3, R2, #4
DMB             ISH

loc_495C4
LDREX           R1, [R3]
SUB             R1, R1, #1
STREX           R0, R1, [R3]
CMP             R0, #0
BNE             loc_495C4
CMP             R1, #0
BNE             loc_495B4
MOV             R0, R2
BL              sub_4942C
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_495F0
CLZ             R3, R2
CMP             R1, #0
MOV             R3, R3,LSR#5
MOVEQ           R4, #1
MOV             R0, R1
MOVNE           R4, R3
CMP             R4, #0
BNE             loc_495A0
MOV             R1, R2
BL              sub_46784
MOV             R0, R4
POP             {R4,PC}
; End of function sub_49588




; int __fastcall sub_49620(_DWORD *, unsigned int)
sub_49620
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
BEQ             loc_496E4
LDR             R3, [R5]
CMP             R3, #1
BNE             loc_496E4
LDR             R12, [R5,#0xC]
CMP             R12, R1
BLS             loc_496E4
LDR             R3, [R5,#0x10]
MOV             R4, R1
MOV             R6, R1,LSL#2
LDR             R0, [R3,R1,LSL#2]
CMP             R0, #0
BEQ             loc_49668
LDR             R3, [R0,#4]
CMN             R3, #1
BNE             loc_49680

loc_49668
SUB             R3, R12, #1
CMP             R3, R4
BHI             loc_496B8

loc_49674
STR             R3, [R5,#0xC]
MOV             R0, #0
POP             {R4-R6,PC}

loc_49680
ADD             R3, R0, #4
DMB             ISH

loc_49688
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_49688
CMP             R2, #0
BNE             loc_496A8
BL              sub_4942C

loc_496A8
LDR             R12, [R5,#0xC]
SUB             R3, R12, #1
CMP             R3, R4
BLS             loc_49674

loc_496B8
LDR             R0, [R5,#0x10]
MVN             R4, R4
ADD             R2, R4, R12
ADD             R1, R6, #4
MOV             R2, R2,LSL#2 ; n
ADD             R1, R0, R1 ; src
ADD             R0, R0, R6 ; dest
BL              memmove
LDR             R3, [R5,#0xC]
SUB             R3, R3, #1
B               loc_49674

loc_496E4
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_49620




; int __fastcall sub_496EC(_DWORD *, char *, _DWORD *)
sub_496EC
PUSH            {R4,LR}
SUBS            R4, R2, #0
BEQ             loc_49710
CMP             R0, #0
CMPNE           R1, #0
BNE             loc_49718

loc_49704
LDR             R3, [R4,#4]
CMN             R3, #1
BNE             loc_49774

loc_49710
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_49718
LDR             R12, [R0]
SUB             R3, R4, R0
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R12, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_49704
ADD             R0, R0, #8
BL              sub_46274
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R3, [R4,#4]
CMN             R3, #1
BEQ             loc_49710
ADD             R3, R4, #4
DMB             ISH

loc_4975C
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BEQ             loc_49790
B               loc_4975C

loc_49774
ADD             R3, R4, #4
DMB             ISH

loc_4977C
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_4977C

loc_49790
CMP             R2, #0
BNE             loc_49710
MOV             R0, R4
BL              sub_4942C
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_496EC




; int __fastcall sub_497A8(_DWORD *, _DWORD *)
sub_497A8
PUSH            {R4-R10,LR}
SUBS            R7, R0, #0
BEQ             loc_4988C
LDR             R2, [R7]
CLZ             R3, R1
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_4988C
LDR             R3, [R1]
CMP             R3, #0
BNE             loc_4988C
ADD             R9, R1, #8
MOV             R6, R1
MOV             R0, R9
BL              sub_466E4
CMP             R0, #0
BNE             loc_49854

loc_497F4
MOV             R0, #0
POP             {R4-R10,PC}

loc_497FC
LDR             R2, [R8,#4]
ADD             R3, R8, #4
CMN             R2, #1
BEQ             loc_49824

loc_4980C
LDREX           R2, [R3]
ADD             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_4980C
DMB             ISH

loc_49824
MOV             R2, R8
MOV             R1, R4
MOV             R0, R7
BL              sub_496EC

loc_49834
LDR             R3, [R6]
MOV             R1, R5
MOV             R0, R9
CMP             R3, #0
BNE             loc_497F4
BL              sub_4675C
CMP             R0, #0
BEQ             loc_497F4

loc_49854
BL              sub_46774
SUBS            R4, R0, #0
BEQ             loc_497F4
SUB             R5, R4, #0x10
MOV             R0, R5
BL              sub_4677C
SUBS            R8, R0, #0
MOV             R1, R4
MOV             R0, R7
BEQ             loc_497F4
BL              sub_48AF4
CMP             R0, #0
BNE             loc_49834
B               loc_497FC

loc_4988C
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}
; End of function sub_497A8




; int __fastcall sub_49894(_DWORD *, char *, _DWORD *)
sub_49894
PUSH            {R4-R6,LR}
SUBS            R5, R1, #0
MOV             R4, R2
BEQ             loc_498C4
MOV             R6, R0
MOV             R0, R5  ; s
BL              strlen
MOV             R1, R0
MOV             R0, R5
BL              sub_488AC
CMP             R0, #0
BNE             loc_49914

loc_498C4
CMP             R4, #0
BEQ             loc_498D8
LDR             R3, [R4,#4]
CMN             R3, #1
BNE             loc_498E0

loc_498D8
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_498E0
ADD             R3, R4, #4
DMB             ISH

loc_498E8
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_498E8
CMP             R2, #0
BNE             loc_498D8
MOV             R0, R4
BL              sub_4942C
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_49914
MOV             R2, R4
MOV             R1, R5
MOV             R0, R6
POP             {R4-R6,LR}
B               sub_496EC
; End of function sub_49894




; int __fastcall sub_49928(_DWORD *, _DWORD *)
sub_49928
PUSH            {R4-R8,LR}
SUBS            R7, R0, #0
BEQ             loc_49A00
LDR             R2, [R7]
CLZ             R3, R1
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_49A00
LDR             R3, [R1]
CMP             R3, #0
BNE             loc_49A00
ADD             R8, R1, #8
MOV             R6, R1
MOV             R0, R8
BL              sub_466E4
CMP             R0, #0
BNE             loc_499D4

loc_49974
MOV             R0, #0
POP             {R4-R8,PC}

loc_4997C
LDR             R1, [R2,#4]
CMN             R1, #1
BEQ             loc_499A0

loc_49988
LDREX           R1, [R3]
ADD             R1, R1, #1
STREX           R0, R1, [R3]
CMP             R0, #0
BNE             loc_49988
DMB             ISH

loc_499A0
MOV             R1, R5
MOV             R0, R7
BL              sub_496EC
CMP             R0, #0
MOV             R1, R4
MOV             R0, R8
BNE             loc_49A00
LDR             R3, [R6]
CMP             R3, #0
BNE             loc_49974
BL              sub_4675C
CMP             R0, #0
BEQ             loc_49974

loc_499D4
BL              sub_46774
SUBS            R5, R0, #0
BEQ             loc_49974
SUB             R4, R5, #0x10
MOV             R0, R4
BL              sub_4677C
SUBS            R2, R0, #0
ADD             R3, R2, #4
BNE             loc_4997C
MOV             R0, #0
POP             {R4-R8,PC}

loc_49A00
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}
; End of function sub_49928




; int __fastcall sub_49A08(_DWORD *, _DWORD *)
sub_49A08
PUSH            {R4-R10,LR}
SUBS            R7, R0, #0
BEQ             loc_49AF0
LDR             R2, [R7]
CLZ             R3, R1
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_49AF0
LDR             R3, [R1]
CMP             R3, #0
BNE             loc_49AF0
ADD             R9, R1, #8
MOV             R8, R1
MOV             R0, R9
BL              sub_466E4
CMP             R0, #0
BNE             loc_49AC0

loc_49A54
MOV             R0, #0
POP             {R4-R10,PC}

loc_49A5C
BL              sub_48AF4
CMP             R0, #0
BEQ             loc_49AA0
LDR             R2, [R6,#4]
ADD             R3, R6, #4
CMN             R2, #1
BEQ             loc_49A90

loc_49A78
LDREX           R2, [R3]
ADD             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_49A78
DMB             ISH

loc_49A90
MOV             R2, R6
MOV             R1, R4
MOV             R0, R7
BL              sub_496EC

loc_49AA0
LDR             R3, [R8]
MOV             R1, R5
MOV             R0, R9
CMP             R3, #0
BNE             loc_49A54
BL              sub_4675C
CMP             R0, #0
BEQ             loc_49A54

loc_49AC0
BL              sub_46774
SUBS            R4, R0, #0
BEQ             loc_49A54
SUB             R5, R4, #0x10
MOV             R0, R5
BL              sub_4677C
SUBS            R6, R0, #0
MOV             R1, R4
MOV             R0, R7
BNE             loc_49A5C
MOV             R0, #0
POP             {R4-R10,PC}

loc_49AF0
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}
; End of function sub_49A08




; int __fastcall sub_49AF8(_DWORD *, unsigned int, _DWORD *)
sub_49AF8
PUSH            {R4-R10,LR}
SUBS            R6, R2, #0
BEQ             loc_49B40
CMP             R0, #0
MOV             R4, R0
MOV             R5, R1
BEQ             loc_49B34
SUB             R2, R6, R0
LDR             R3, [R0]
CLZ             R2, R2
MOV             R2, R2,LSR#5
CMP             R3, #1
ORRNE           R2, R2, #1
CMP             R2, #0
BEQ             loc_49B7C

loc_49B34
LDR             R3, [R6,#4]
CMN             R3, #1
BNE             loc_49B48

loc_49B40
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}

loc_49B48
ADD             R3, R6, #4
DMB             ISH

loc_49B50
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_49B50

loc_49B64
CMP             R2, #0
BNE             loc_49B40
MOV             R0, R6
BL              sub_4942C
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}

loc_49B7C
LDR             R3, [R0,#0xC]
CMP             R3, R1
BCC             loc_49B34
MOV             R1, #1
BL              sub_48978
SUBS            R8, R0, #0
BEQ             loc_49C00
LDR             R0, [R4,#0x10] ; dest
ADD             R7, R5, #1
MOV             R7, R7,LSL#2
CMP             R0, R8
SUB             R9, R7, #4
ADD             R10, R8, R9
BEQ             loc_49C2C
MOV             R2, R9  ; n
MOV             R1, R8  ; src
BL              memcpy
LDR             R2, [R4,#0xC]
MOV             R1, R10 ; src
LDR             R0, [R4,#0x10]
SUB             R2, R2, R5
MOV             R2, R2,LSL#2 ; n
ADD             R0, R0, R7 ; dest
BL              memcpy
MOV             R0, R8
BL              sub_4815C

loc_49BE4
LDR             R3, [R4,#0xC]
MOV             R0, #0
LDR             R2, [R4,#0x10]
ADD             R3, R3, #1
STR             R6, [R2,R9]
STR             R3, [R4,#0xC]
POP             {R4-R10,PC}

loc_49C00
LDR             R3, [R6,#4]
CMN             R3, #1
BEQ             loc_49B40
ADD             R3, R6, #4
DMB             ISH

loc_49C14
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BEQ             loc_49B64
B               loc_49C14

loc_49C2C
LDR             R2, [R4,#0xC]
MOV             R1, R10 ; src
ADD             R0, R0, R7 ; dest
SUB             R2, R2, R5
MOV             R2, R2,LSL#2 ; n
BL              memmove
B               loc_49BE4
; End of function sub_49AF8

CMP             R2, #0
BEQ             loc_49D4C
CMP             R0, #0
PUSH            {R4,R5,LR}
MOV             R4, R0
SUB             SP, SP, #0xC
BEQ             loc_49C84
SUB             R3, R2, R4
LDR             R0, [R0]
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R0, #1
ORRNE           R3, R3, #1
CMP             R3, #0
BEQ             loc_49CCC

loc_49C84
LDR             R3, [R2,#4]
CMN             R3, #1
BNE             loc_49C9C

loc_49C90
MOV             R0, #0xFFFFFFFF

loc_49C94
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_49C9C
ADD             R3, R2, #4
DMB             ISH

loc_49CA4
LDREX           R1, [R3]
SUB             R1, R1, #1
STREX           R0, R1, [R3]
CMP             R0, #0
BNE             loc_49CA4
CMP             R1, #0
BNE             loc_49C90
MOV             R0, R2
BL              sub_4942C
B               loc_49C90

loc_49CCC
LDR             R3, [R4,#0xC]
CMP             R3, R1
BLS             loc_49C84
LDR             R3, [R4,#0x10]
MOV             R5, R1,LSL#2
LDR             R0, [R3,R1,LSL#2]
ADD             R3, R3, R5
CMP             R0, #0
BEQ             loc_49CFC
LDR             R1, [R0,#4]
CMN             R1, #1
BNE             loc_49D08

loc_49CFC
MOV             R0, #0
STR             R2, [R3]
B               loc_49C94

loc_49D08
ADD             R3, R0, #4
DMB             ISH

loc_49D10
LDREX           R1, [R3]
SUB             R1, R1, #1
STREX           R12, R1, [R3]
CMP             R12, #0
BNE             loc_49D10
CMP             R1, #0
LDRNE           R3, [R4,#0x10]
ADDNE           R3, R3, R5
BNE             loc_49CFC
STR             R2, [SP,#4]
BL              sub_4942C
LDR             R3, [R4,#0x10]
LDR             R2, [SP,#4]
ADD             R3, R3, R5
B               loc_49CFC

loc_49D4C
MOV             R0, #0xFFFFFFFF
BX              LR



; int __fastcall sub_49D54(_DWORD *, _DWORD *)
sub_49D54
PUSH            {R4-R6,LR}
SUBS            R6, R1, #0
BEQ             loc_49D98
CMP             R0, #0
MOV             R4, R0
BEQ             loc_49D8C
SUB             R5, R6, R0
LDR             R3, [R0]
CLZ             R5, R5
MOV             R5, R5,LSR#5
CMP             R3, #1
ORRNE           R5, R5, #1
CMP             R5, #0
BEQ             loc_49DD4

loc_49D8C
LDR             R3, [R6,#4]
CMN             R3, #1
BNE             loc_49DA0

loc_49D98
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_49DA0
ADD             R3, R6, #4
DMB             ISH

loc_49DA8
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_49DA8

loc_49DBC
CMP             R2, #0
BNE             loc_49D98
MOV             R0, R6
BL              sub_4942C
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_49DD4
MOV             R2, #1
MOV             R1, R2
BL              sub_48978
CMP             R0, #0
BEQ             loc_49E04
LDR             R3, [R4,#0xC]
MOV             R0, R5
LDR             R1, [R4,#0x10]
ADD             R2, R3, #1
STR             R6, [R1,R3,LSL#2]
STR             R2, [R4,#0xC]
POP             {R4-R6,PC}

loc_49E04
LDR             R3, [R6,#4]
CMN             R3, #1
BEQ             loc_49D98
ADD             R3, R6, #4
DMB             ISH

loc_49E18
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BEQ             loc_49DBC
B               loc_49E18
; End of function sub_49D54




; bool __fastcall sub_49E30(int *, int *)
sub_49E30
CMP             R1, #0
CMPNE           R0, #0
BEQ             loc_49E40
B               sub_48B1C

loc_49E40
MOV             R0, #0
BX              LR
; End of function sub_49E30




; double *__fastcall sub_49E48(int)
sub_49E48
PUSH            {R4-R8,LR}
SUBS            R4, R0, #0
BEQ             def_49E5C ; jumptable 00049E5C default case
LDR             R3, [R4]
CMP             R3, #7  ; switch 8 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_49E5C ; jumptable 00049E5C default case
jpt_49E5C DCD loc_49E90 ; jump table for switch statement
DCD loc_49F38
DCD loc_49FD4
DCD loc_49FE4
DCD loc_49FF0
DCD loc_49E84
DCD loc_49E84
DCD loc_49E84

loc_49E84               ; jumptable 00049E5C cases 5-7
MOV             R7, R4

loc_49E88
MOV             R0, R7
POP             {R4-R8,PC}

loc_49E90               ; jumptable 00049E5C case 0
BL              sub_48A70
SUBS            R7, R0, #0
BEQ             def_49E5C ; jumptable 00049E5C default case
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_49E88
ADD             R8, R4, #8
MOV             R0, R8
BL              sub_466E4
CMP             R0, #0
BNE             loc_49F10
B               loc_49E88

loc_49EC0
LDR             R1, [R2,#4]
CMN             R1, #1
BEQ             loc_49EE4

loc_49ECC
LDREX           R1, [R3]
ADD             R1, R1, #1
STREX           R0, R1, [R3]
CMP             R0, #0
BNE             loc_49ECC
DMB             ISH

loc_49EE4
MOV             R1, R5
MOV             R0, R7
BL              sub_496EC
LDR             R3, [R4]
MOV             R1, R6
MOV             R0, R8
CMP             R3, #0
BNE             loc_49E88
BL              sub_4675C
CMP             R0, #0
BEQ             loc_49E88

loc_49F10
BL              sub_46774
SUBS            R5, R0, #0
BEQ             loc_49E88
SUB             R6, R5, #0x10
MOV             R0, R6
BL              sub_4677C
SUBS            R2, R0, #0
ADD             R3, R2, #4
BNE             loc_49EC0
B               loc_49E88

loc_49F38               ; jumptable 00049E5C case 1
BL              sub_48E00
SUBS            R7, R0, #0
BEQ             def_49E5C ; jumptable 00049E5C default case
LDR             R3, [R4]
CMP             R3, #1
BNE             loc_49E88
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_49E88
MOV             R5, #0
B               loc_49F74

loc_49F64
LDR             R3, [R4,#0xC]
ADD             R5, R5, #1
CMP             R5, R3
BCS             loc_49E88

loc_49F74
CMP             R3, R5
MOV             R1, #0
BLS             loc_49FB8
LDR             R3, [R4,#0x10]
LDR             R1, [R3,R5,LSL#2]
CMP             R1, #0
ADD             R2, R1, #4
BEQ             loc_49FB8
LDR             R3, [R1,#4]
CMN             R3, #1
BEQ             loc_49FB8

loc_49FA0
LDREX           R3, [R2]
ADD             R3, R3, #1
STREX           R0, R3, [R2]
CMP             R0, #0
BNE             loc_49FA0
DMB             ISH

loc_49FB8
MOV             R0, R7
BL              sub_49D54
LDR             R3, [R4]
CMP             R3, #1
BEQ             loc_49F64
MOV             R0, R7
POP             {R4-R8,PC}

loc_49FD4               ; jumptable 00049E5C case 2
LDRD            R0, R1, [R4,#8]
MOV             R2, #0
POP             {R4-R8,LR}
B               sub_48A04

loc_49FE4               ; jumptable 00049E5C case 3
MOV             R0, R4
POP             {R4-R8,LR}
B               sub_48928

loc_49FF0               ; jumptable 00049E5C case 4
VLDR            D0, [R4,#8]
POP             {R4-R8,LR}
B               sub_492D4

def_49E5C               ; jumptable 00049E5C default case
MOV             R7, #0
B               loc_49E88
; End of function sub_49E48




; double *__fastcall sub_4A004(int)
sub_4A004
PUSH            {R4-R8,LR}
SUBS            R4, R0, #0
BEQ             def_4A018 ; jumptable 0004A018 default case
LDR             R3, [R4]
CMP             R3, #7  ; switch 8 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_4A018 ; jumptable 0004A018 default case
jpt_4A018 DCD loc_4A04C ; jump table for switch statement
DCD loc_4A0C8
DCD loc_4A138
DCD loc_4A148
DCD loc_4A154
DCD loc_4A040
DCD loc_4A040
DCD loc_4A040

loc_4A040               ; jumptable 0004A018 cases 5-7
MOV             R6, R4

loc_4A044
MOV             R0, R6
POP             {R4-R8,PC}

loc_4A04C               ; jumptable 0004A018 case 0
BL              sub_48A70
SUBS            R6, R0, #0
BEQ             def_4A018 ; jumptable 0004A018 default case
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_4A044
ADD             R8, R4, #8
MOV             R0, R8
BL              sub_466E4
SUBS            R5, R0, #0
BNE             loc_4A088
B               loc_4A044

loc_4A07C
BL              sub_4675C
SUBS            R5, R0, #0
BEQ             loc_4A044

loc_4A088
MOV             R0, R5
BL              sub_46774
MOV             R7, R0
MOV             R0, R5
BL              sub_4677C
BL              sub_4A004
MOV             R1, R7
MOV             R2, R0
MOV             R0, R6
BL              sub_496EC
LDR             R3, [R4]
MOV             R1, R5
MOV             R0, R8
CMP             R3, #0
BEQ             loc_4A07C
B               loc_4A044

loc_4A0C8               ; jumptable 0004A018 case 1
BL              sub_48E00
SUBS            R6, R0, #0
BEQ             def_4A018 ; jumptable 0004A018 default case
LDR             R3, [R4]
CMP             R3, #1
BNE             loc_4A044
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_4A044
MOV             R5, #0
B               loc_4A104

loc_4A0F4
LDR             R3, [R4,#0xC]
ADD             R5, R5, #1
CMP             R5, R3
BCS             loc_4A044

loc_4A104
CMP             R3, R5
MOV             R0, #0
LDRHI           R3, [R4,#0x10]
LDRHI           R0, [R3,R5,LSL#2]
BL              sub_4A004
MOV             R1, R0
MOV             R0, R6
BL              sub_49D54
LDR             R3, [R4]
CMP             R3, #1
BEQ             loc_4A0F4
MOV             R0, R6
POP             {R4-R8,PC}

loc_4A138               ; jumptable 0004A018 case 2
LDRD            R0, R1, [R4,#8]
MOV             R2, #0
POP             {R4-R8,LR}
B               sub_48A04

loc_4A148               ; jumptable 0004A018 case 3
MOV             R0, R4
POP             {R4-R8,LR}
B               sub_48928

loc_4A154               ; jumptable 0004A018 case 4
VLDR            D0, [R4,#8]
POP             {R4-R8,LR}
B               sub_492D4

def_4A018               ; jumptable 0004A018 default case
MOV             R6, #0
B               loc_4A044
; End of function sub_4A004




; char *__fastcall sub_4A168(char *, char *s)
sub_4A168
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, R1  ; s
MOV             R5, R1
BL              strlen
CMP             R0, #0x4F ; 'O'
ADD             R12, R4, #0xC
BLS             loc_4A1B8
MOVW            R3, #:lower16:word_56C14
SUB             R0, R0, #0x4C ; 'L'
MOVT            R3, #:upper16:word_56C14
ADD             R1, R5, R0 ; src
LDRH            LR, [R3]
ADD             R0, R4, #0xF ; dest
LDRB            R3, [R3,#(byte_56C16 - 0x56C14)]
MOV             R2, #0x4D ; 'M' ; n
STRH            LR, [R4,#0xC]
STRB            R3, [R12,#2]
POP             {R4-R6,LR}
B               strncpy

loc_4A1B8               ; n
ADD             R2, R0, #1
MOV             R1, R5  ; src
MOV             R0, R12 ; dest
POP             {R4-R6,LR}
B               strncpy
; End of function sub_4A168




; char *__fastcall sub_4A1CC(char *result, char *)
sub_4A1CC
SUBS            R3, R0, #0
BXEQ            LR
CMP             R1, #0
MOV             R12, #0
MOV             R2, #0xFFFFFFFF
PUSH            {LR}
MOV             LR, R1
STRB            R12, [R3,#0x5C]
STR             R12, [R3,#8]
STR             R2, [R3]
STR             R2, [R3,#4]
BNE             loc_4A204
STRB            R1, [R3,#0xC]
POP             {PC}

loc_4A204
POP             {LR}
B               sub_4A168
; End of function sub_4A1CC




; char *__fastcall sub_4A20C(char *, char *s)
sub_4A20C
CMP             R1, #0
CMPNE           R0, #0
BXEQ            LR
B               sub_4A168
; End of function sub_4A20C




; int sub_4A21C(int result, int, int, int, char, char *format, ...)
sub_4A21C

var_8= -8
arg_0=  0xC
format=  0x10
arg=  0x14

PUSH            {R4,R5,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0xC
ADD             R12, SP, #0xC+arg
STR             R12, [SP,#0xC+var_8]
BEQ             loc_4A240
LDRB            R5, [R4,#0x5C]
CMP             R5, #0
BEQ             loc_4A248

loc_4A240
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_4A248
MOV             LR, R3
STR             R1, [R4]
MOV             R3, R12 ; arg
STR             R2, [R4,#4]
STR             LR, [R4,#8]
MOV             R1, #0x9F ; maxlen
LDR             R2, [SP,#0xC+format] ; format
ADD             R0, R4, #0x5C ; '\' ; s
BL              vsnprintf
LDR             R3, [SP,#0xC+arg_0]
STRB            R5, [R4,#0xFA]
STRB            R3, [R4,#0xFB]
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_4A21C




; int __fastcall sub_4A280(int result, int, int, int, char, char *format, __gnuc_va_list arg)
sub_4A280

arg_0=  0x10
format=  0x14
arg=  0x18

PUSH            {R4-R6,LR}
SUBS            R4, R0, #0
POPEQ           {R4-R6,PC}
LDRB            R5, [R4,#0x5C]
CMP             R5, #0
POPNE           {R4-R6,PC}
MOV             R12, R3
STR             R1, [R4]
LDR             R3, [SP,#arg] ; arg
MOV             R1, #0x9F ; maxlen
STR             R2, [R4,#4]
ADD             R0, R4, #0x5C ; '\' ; s
LDR             R2, [SP,#format] ; format
STR             R12, [R4,#8]
BL              vsnprintf
LDR             R3, [SP,#arg_0]
STRB            R5, [R4,#0xFA]
STRB            R3, [R4,#0xFB]
POP             {R4-R6,PC}
; End of function sub_4A280

ALIGN 0x10
CODE16



; unsigned int __fastcall sub_4A2D0(unsigned int result, unsigned int)
sub_4A2D0
SUBS            R2, R1, #1
IT EQ
BXEQ            LR
BCC.W           loc_4A522
CMP             R0, R1
BLS.W           loc_4A50C
TST             R1, R2
BEQ.W           loc_4A514
CLZ.W           R3, R0
CLZ.W           R2, R1
SUB.W           R3, R2, R3
RSB.W           R3, R3, #0x1F
ADR             R2, loc_4A308
ADD.W           R3, R2, R3,LSL#4
MOV.W           R2, #0
MOV             PC, R3
ALIGN 8

loc_4A308
CMP.W           R0, R1,LSL#31
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#31
CMP.W           R0, R1,LSL#30
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#30
CMP.W           R0, R1,LSL#29
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#29
CMP.W           R0, R1,LSL#28
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#28
CMP.W           R0, R1,LSL#27
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#27
CMP.W           R0, R1,LSL#26
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#26
CMP.W           R0, R1,LSL#25
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#25
CMP.W           R0, R1,LSL#24
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#24
CMP.W           R0, R1,LSL#23
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#23
CMP.W           R0, R1,LSL#22
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#22
CMP.W           R0, R1,LSL#21
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#21
CMP.W           R0, R1,LSL#20
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#20
CMP.W           R0, R1,LSL#19
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#19
CMP.W           R0, R1,LSL#18
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#18
CMP.W           R0, R1,LSL#17
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#17
CMP.W           R0, R1,LSL#16
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#16
CMP.W           R0, R1,LSL#15
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#15
CMP.W           R0, R1,LSL#14
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#14
CMP.W           R0, R1,LSL#13
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#13
CMP.W           R0, R1,LSL#12
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#12
CMP.W           R0, R1,LSL#11
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#11
CMP.W           R0, R1,LSL#10
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#10
CMP.W           R0, R1,LSL#9
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#9
CMP.W           R0, R1,LSL#8
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#8
CMP.W           R0, R1,LSL#7
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#7
CMP.W           R0, R1,LSL#6
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#6
CMP.W           R0, R1,LSL#5
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#5
CMP.W           R0, R1,LSL#4
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#4
CMP.W           R0, R1,LSL#3
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#3
CMP.W           R0, R1,LSL#2
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#2
CMP.W           R0, R1,LSL#1
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#1
CMP.W           R0, R1
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1
MOV             R0, R2
BX              LR

loc_4A50C
ITE EQ
MOVEQ           R0, #1
MOVNE           R0, #0
BX              LR

loc_4A514
CLZ.W           R2, R1
RSB.W           R2, R2, #0x1F
LSR.W           R0, R0, R2
BX              LR

loc_4A522
CBZ             R0, loc_4A528
MOV.W           R0, #0xFFFFFFFF

loc_4A528
B.W             loc_4ABA0
; End of function sub_4A2D0




; unsigned int __fastcall sub_4A52C(unsigned int, unsigned int)
sub_4A52C
CMP             R1, #0
BEQ             loc_4A522
PUSH.W          {R0,R1,LR}
BL              sub_4A2D0
POP.W           {R1,R2,LR}
MUL             R3, R2, R0
SUB.W           R1, R1, R3
BX              LR
; End of function sub_4A52C

ALIGN 4



; int __fastcall sub_4A548(int result, unsigned int)
sub_4A548
CMP             R1, #0
BEQ.W           loc_4A7CA

loc_4A54E
EOR.W           R12, R0, R1
IT MI
NEGMI           R1, R1
SUBS            R2, R1, #1
BEQ.W           loc_4A79A
MOVS            R3, R0
IT MI
NEGMI           R3, R0
CMP             R3, R1
BLS.W           loc_4A7A4
TST             R1, R2
BEQ.W           loc_4A7B4
CLZ.W           R2, R3
CLZ.W           R0, R1
SUB.W           R2, R0, R2
RSB.W           R2, R2, #0x1F
ADR             R0, loc_4A590
ADD.W           R2, R0, R2,LSL#4
MOV.W           R0, #0
MOV             PC, R2
ALIGN 0x10

loc_4A590
CMP.W           R3, R1,LSL#31
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#31
CMP.W           R3, R1,LSL#30
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#30
CMP.W           R3, R1,LSL#29
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#29
CMP.W           R3, R1,LSL#28
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#28
CMP.W           R3, R1,LSL#27
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#27
CMP.W           R3, R1,LSL#26
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#26
CMP.W           R3, R1,LSL#25
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#25
CMP.W           R3, R1,LSL#24
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#24
CMP.W           R3, R1,LSL#23
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#23
CMP.W           R3, R1,LSL#22
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#22
CMP.W           R3, R1,LSL#21
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#21
CMP.W           R3, R1,LSL#20
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#20
CMP.W           R3, R1,LSL#19
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#19
CMP.W           R3, R1,LSL#18
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#18
CMP.W           R3, R1,LSL#17
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#17
CMP.W           R3, R1,LSL#16
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#16
CMP.W           R3, R1,LSL#15
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#15
CMP.W           R3, R1,LSL#14
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#14
CMP.W           R3, R1,LSL#13
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#13
CMP.W           R3, R1,LSL#12
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#12
CMP.W           R3, R1,LSL#11
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#11
CMP.W           R3, R1,LSL#10
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#10
CMP.W           R3, R1,LSL#9
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#9
CMP.W           R3, R1,LSL#8
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#8
CMP.W           R3, R1,LSL#7
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#7
CMP.W           R3, R1,LSL#6
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#6
CMP.W           R3, R1,LSL#5
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#5
CMP.W           R3, R1,LSL#4
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#4
CMP.W           R3, R1,LSL#3
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#3
CMP.W           R3, R1,LSL#2
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#2
CMP.W           R3, R1,LSL#1
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#1
CMP.W           R3, R1
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1
CMP.W           R12, #0
IT MI
NEGMI           R0, R0
BX              LR

loc_4A79A
TEQ.W           R12, R0
IT MI
NEGMI           R0, R0
BX              LR

loc_4A7A4
IT CC
MOVCC           R0, #0
ITT EQ
MOVEQ.W         R0, R12,ASR#31
ORREQ.W         R0, R0, #1
BX              LR

loc_4A7B4
CLZ.W           R2, R1
RSB.W           R2, R2, #0x1F
CMP.W           R12, #0
LSR.W           R0, R3, R2
IT MI
NEGMI           R0, R0
BX              LR

loc_4A7CA
CMP             R0, #0
IT GT
MOVGT           R0, #0x7FFFFFFF
IT LT
MOVLT.W         R0, #0x80000000
B.W             loc_4ABA0
; End of function sub_4A548

CMP             R1, #0
BEQ             loc_4A7CA
PUSH.W          {R0,R1,LR}
BL              loc_4A54E
POP.W           {R1,R2,LR}
MUL             R3, R2, R0
SUB.W           R1, R1, R3
BX              LR
ALIGN 4
EOR.W           R1, R1, #0x80000000
B               loc_4A804
ALIGN 0x10
EOR.W           R3, R3, #0x80000000

loc_4A804
PUSH            {R4,R5,LR}
MOV.W           R4, R1,LSL#1
MOV.W           R5, R3,LSL#1
TEQ.W           R4, R5
IT EQ
TEQEQ.W         R0, R2
ITTTT NE
ORRSNE.W        R12, R4, R0
ORRSNE.W        R12, R5, R2
MVNSNE.W        R12, R4,ASR#21
MVNSNE.W        R12, R5,ASR#21
BEQ.W           loc_4A9F2
MOV.W           R4, R4,LSR#21
RSBS.W          R5, R4, R5,LSR#21
IT LT
NEGLT           R5, R5
BLE             loc_4A856
ADD             R4, R5
EOR.W           R2, R0, R2
EOR.W           R3, R1, R3
EOR.W           R0, R2, R0
EOR.W           R1, R3, R1
EOR.W           R2, R0, R2
EOR.W           R3, R1, R3

loc_4A856
CMP             R5, #0x36 ; '6'
IT HI
POPHI           {R4,R5,PC}
TST.W           R1, #0x80000000
MOV.W           R1, R1,LSL#12
MOV.W           R12, #0x100000
ORR.W           R1, R12, R1,LSR#12
BEQ             loc_4A874
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1

loc_4A874
TST.W           R3, #0x80000000
MOV.W           R3, R3,LSL#12
ORR.W           R3, R12, R3,LSR#12
BEQ             loc_4A888
NEGS            R2, R2
SBC.W           R3, R3, R3,LSL#1

loc_4A888
TEQ.W           R4, R5
BEQ.W           loc_4A9DE

loc_4A890
SUB.W           R4, R4, #1
RSBS.W          LR, R5, #0x20 ; ' '
BLT             loc_4A8B6
LSL.W           R12, R2, LR
LSR.W           R2, R2, R5
ADDS            R0, R0, R2
ADC.W           R1, R1, #0
LSL.W           R2, R3, LR
ADDS            R0, R0, R2
ASR.W           R3, R3, R5
ADCS            R1, R3
B               loc_4A8D4

loc_4A8B6
SUB.W           R5, R5, #0x20 ; ' '
ADD.W           LR, LR, #0x20 ; ' '
CMP             R2, #1
LSL.W           R12, R3, LR
IT CS
ORRCS.W         R12, R12, #2
ASR.W           R3, R3, R5
ADDS            R0, R0, R3
ADCS.W          R1, R1, R3,ASR#31

loc_4A8D4
AND.W           R5, R1, #0x80000000
BPL             loc_4A8EA
MOV.W           LR, #0
RSBS.W          R12, R12, #0
SBCS.W          R0, LR, R0
SBC.W           R1, LR, R1
; START OF FUNCTION CHUNK FOR sub_4AB14

loc_4A8EA
CMP.W           R1, #0x100000
BCC             loc_4A928
CMP.W           R1, #0x200000
BCC             loc_4A910
LSRS            R1, R1, #1
MOVS.W          R0, R0,RRX
MOV.W           R12, R12,RRX
ADD.W           R4, R4, #1
MOV.W           R2, R4,LSL#21
CMN.W           R2, #0x400000
BCS.W           loc_4AA44

loc_4A910
CMP.W           R12, #0x80000000
IT EQ
MOVSEQ.W        R12, R0,LSR#1
ADCS.W          R0, R0, #0
ADC.W           R1, R1, R4,LSL#20
ORR.W           R1, R1, R5
POP             {R4,R5,PC}

loc_4A928
MOVS.W          R12, R12,LSL#1
ADCS            R0, R0
ADC.W           R1, R1, R1
TST.W           R1, #0x100000
SUB.W           R4, R4, #1
BNE             loc_4A910

loc_4A93C
TEQ.W           R1, #0
ITT EQ
MOVEQ           R1, R0
MOVEQ           R0, #0
CLZ.W           R3, R1
IT EQ
ADDEQ           R3, #0x20 ; ' '
SUB.W           R3, R3, #0xB
SUBS.W          R2, R3, #0x20 ; ' '
BGE             loc_4A972
ADDS            R2, #0xC
BLE             loc_4A96E
ADD.W           R12, R2, #0x14
RSB.W           R2, R2, #0xC
LSL.W           R0, R1, R12
LSR.W           R1, R1, R2
B               loc_4A988

loc_4A96E
ADD.W           R2, R2, #0x14

loc_4A972
IT LE
RSBLE.W         R12, R2, #0x20 ; ' '
LSL.W           R1, R1, R2
LSR.W           R12, R0, R12
ITT LE
ORRLE.W         R1, R1, R12
LSLLE           R0, R2

loc_4A988
SUBS            R4, R4, R3
ITTT GE
ADDGE.W         R1, R1, R4,LSL#20
ORRGE           R1, R5
POPGE           {R4,R5,PC}
MVN.W           R4, R4
SUBS            R4, #0x1F
BGE             loc_4A9D6
ADDS            R4, #0xC
BGT             loc_4A9BE
ADD.W           R4, R4, #0x14
RSB.W           R2, R4, #0x20 ; ' '
LSR.W           R0, R0, R4
LSL.W           R3, R1, R2
ORR.W           R0, R0, R3
LSR.W           R3, R1, R4
ORR.W           R1, R5, R3
POP             {R4,R5,PC}

loc_4A9BE
RSB.W           R4, R4, #0xC
RSB.W           R2, R4, #0x20 ; ' '
LSR.W           R0, R0, R2
LSL.W           R3, R1, R4
ORR.W           R0, R0, R3
MOV             R1, R5
POP             {R4,R5,PC}

loc_4A9D6
LSR.W           R0, R1, R4
MOV             R1, R5
POP             {R4,R5,PC}
; END OF FUNCTION CHUNK FOR sub_4AB14

loc_4A9DE
TEQ.W           R4, #0
EOR.W           R3, R3, #0x100000
ITTE EQ
EOREQ.W         R1, R1, #0x100000
ADDEQ           R4, #1
SUBNE           R5, #1
B               loc_4A890

loc_4A9F2
MVNS.W          R12, R4,ASR#21
IT NE
MVNSNE.W        R12, R5,ASR#21
BEQ             loc_4AA52
TEQ.W           R4, R5
IT EQ
TEQEQ.W         R0, R2
BEQ             loc_4AA16
ORRS.W          R12, R4, R0
ITT EQ
MOVEQ           R1, R3
MOVEQ           R0, R2
POP             {R4,R5,PC}

loc_4AA16
TEQ.W           R1, R3
ITTT NE
MOVNE           R1, #0
MOVNE           R0, #0
POPNE           {R4,R5,PC}
MOVS.W          R12, R4,LSR#21
BNE             loc_4AA34
LSLS            R0, R0, #1
ADCS            R1, R1
IT CS
ORRCS.W         R1, R1, #0x80000000
POP             {R4,R5,PC}

loc_4AA34
ADDS.W          R4, R4, #0x400000
ITT CC
ADDCC.W         R1, R1, #0x100000
POPCC           {R4,R5,PC}
AND.W           R5, R1, #0x80000000
; START OF FUNCTION CHUNK FOR sub_4AB14

loc_4AA44
ORR.W           R1, R5, #0x7F000000
ORR.W           R1, R1, #0xF00000
MOV.W           R0, #0
POP             {R4,R5,PC}
; END OF FUNCTION CHUNK FOR sub_4AB14

loc_4AA52
MVNS.W          R12, R4,ASR#21
ITTE NE
MOVNE           R1, R3
MOVNE           R0, R2
MVNSEQ.W        R12, R5,ASR#21
ITT NE
MOVNE           R3, R1
MOVNE           R2, R0
ORRS.W          R4, R0, R1,LSL#12
ITTE EQ
ORRSEQ.W        R5, R2, R3,LSL#12
TEQEQ.W         R1, R3
ORRNE.W         R1, R1, #0x80000
POP             {R4,R5,PC}
ALIGN 4
TEQ.W           R0, #0
ITT EQ
MOVEQ           R1, #0
BXEQ            LR
PUSH            {R4,R5,LR}
MOV             R4, #0x432
MOV.W           R5, #0
MOV.W           R1, #0
B               loc_4A93C
ALIGN 4
TEQ.W           R0, #0
ITT EQ
MOVEQ           R1, #0
BXEQ            LR
PUSH            {R4,R5,LR}
MOV             R4, #0x432
ANDS.W          R5, R0, #0x80000000
IT MI
NEGMI           R0, R0
MOV.W           R1, #0
B               loc_4A93C
ALIGN 0x10
LSLS            R2, R0, #1
MOV.W           R1, R2,ASR#3
MOV.W           R1, R1,RRX
MOV.W           R0, R2,LSL#28
ITTTT NE
ANDSNE.W        R3, R2, #0xFF000000
TEQNE.W         R3, #0xFF000000
EORNE.W         R1, R1, #0x38000000
BXNE            LR
BICS.W          R2, R2, #0xFF000000
IT EQ
BXEQ            LR
TEQ.W           R3, #0xFF000000
ITT EQ
ORREQ.W         R1, R1, #0x80000
BXEQ            LR
PUSH            {R4,R5,LR}
MOV.W           R4, #0x380
AND.W           R5, R1, #0x80000000
BIC.W           R1, R1, #0x80000000
B               loc_4A93C
ALIGN 4



; int __fastcall sub_4AB04(__int64)
sub_4AB04
ORRS.W          R2, R0, R1
IT EQ
BXEQ            LR
PUSH            {R4,R5,LR}
MOV.W           R5, #0
B               loc_4AB2A
; End of function sub_4AB04




; int __fastcall sub_4AB14(__int64)
sub_4AB14

; FUNCTION CHUNK AT 0004A8EA SIZE 000000F4 BYTES
; FUNCTION CHUNK AT 0004AA44 SIZE 0000000E BYTES

ORRS.W          R2, R0, R1
IT EQ
BXEQ            LR
PUSH            {R4,R5,LR}
ANDS.W          R5, R1, #0x80000000
BPL             loc_4AB2A
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1

loc_4AB2A
MOV             R4, #0x432
MOVS.W          R12, R1,LSR#22
BEQ.W           loc_4A8EA
MOV.W           R2, #3
MOVS.W          R12, R12,LSR#3
IT NE
ADDNE           R2, #3
MOVS.W          R12, R12,LSR#3
IT NE
ADDNE           R2, #3
ADD.W           R2, R2, R12,LSR#3
RSB.W           R3, R2, #0x20 ; ' '
LSL.W           R12, R0, R3
LSR.W           R0, R0, R2
LSL.W           LR, R1, R3
ORR.W           R0, R0, LR
LSR.W           R1, R1, R2
ADD             R4, R2
B               loc_4A8EA
; End of function sub_4AB14

ALIGN 0x10



; int __fastcall sub_4AB70(unsigned __int64, unsigned __int64)
sub_4AB70

var_10= -0x10
var_C= -0xC
var_8= -8

CBNZ            R3, loc_4AB88
CBNZ            R2, loc_4AB88
CMP             R1, #0
IT EQ
CMPEQ           R0, #0
ITT NE
MOVNE.W         R1, #0xFFFFFFFF
MOVNE.W         R0, #0xFFFFFFFF
B.W             loc_4ABA0

loc_4AB88
SUB.W           R12, SP, #8
STRD.W          R12, LR, [SP,#var_10]!
BL              sub_4AC10
LDR.W           LR, [SP,#0x10+var_C]
LDRD.W          R2, R3, [SP,#0x10+var_8]
ADD             SP, SP, #0x10
BX              LR

loc_4ABA0
PUSH            {R1,LR}
MOV.W           R0, #8  ; sig
BLX             raise
POP             {R1,PC}
; End of function sub_4AB70




; unsigned int __fastcall sub_4ABAC(double)
sub_4ABAC
VMOV            D7, R0, R1
VCMPE.F64       D7, #0.0
VMRS            APSR_nzcv, FPSCR
BMI             loc_4ABBE
B.W             sub_4ABD0

loc_4ABBE
PUSH            {R3,LR}
EOR.W           R1, R1, #0x80000000
BL              sub_4ABD0
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1
POP             {R3,PC}
; End of function sub_4ABAC




; unsigned int __fastcall sub_4ABD0(double)
sub_4ABD0
VLDR            D7, =2.32830644e-10
VMOV            D6, R0, R1
VLDR            D5, =4.2949673e9
VMUL.F64        D7, D6, D7
VCVT.U32.F64    S14, D7
VCVT.F64.U32    D4, S14
VMOV            R1, S14
VMLS.F64        D6, D4, D5
VCVT.U32.F64    S15, D6
VMOV            R0, S15
BX              LR
; End of function sub_4ABD0

ALIGN 0x10
dbl_4AC00 DCFD 2.32830644e-10
dbl_4AC08 DCFD 4.2949673e9



; int __fastcall sub_4AC10(unsigned __int64, unsigned __int64, unsigned __int64 *)
sub_4AC10

arg_0=  0x24

CMP             R1, R3
PUSH.W          {R4-R11,LR}
IT EQ
CMPEQ           R0, R2
MOV             R4, R0
IT CC
MOVCC           R0, #0
MOV             R5, R1
LDR.W           LR, [SP,#arg_0]
IT CC
MOVCC           R1, R0
BCC             loc_4ACFE
MOV             R10, R2
MOV             R11, R3
CLZ.W           R12, R3
CMP             R3, #0
BEQ             loc_4AD14
CLZ.W           R1, R5
CMP             R5, #0
BEQ             loc_4AD0C

loc_4AC40
SUB.W           R12, R12, R1
SUB.W           R8, R12, #0x20 ; ' '
LSL.W           R7, R11, R12
LSL.W           R1, R10, R8
RSB.W           R9, R12, #0x20 ; ' '
LSR.W           R3, R10, R9
LSL.W           R6, R10, R12
ORRS            R7, R1
ORRS            R7, R3
CMP             R5, R7
IT EQ
CMPEQ           R4, R6
ITT CC
MOVCC           R0, #0
MOVCC           R1, R0
BCC             loc_4AC84
MOVS            R0, #1
SUBS            R4, R4, R6
LSL.W           R1, R0, R8
LSR.W           R3, R0, R9
LSL.W           R0, R0, R12
SBC.W           R5, R5, R7
ORRS            R1, R3

loc_4AC84
CMP.W           R12, #0
BEQ             loc_4ACFE
LSRS            R7, R7, #1
MOV.W           R6, R6,RRX
MOV             R2, R12
B               loc_4ACAA

loc_4AC94
SUBS            R3, R4, R6
SBC.W           R10, R5, R7
ADDS            R3, R3, R3
ADC.W           R10, R10, R10
ADDS            R4, R3, #1
ADC.W           R5, R10, #0
SUBS            R2, #1
BEQ             loc_4ACBA

loc_4ACAA
CMP             R5, R7
IT EQ
CMPEQ           R4, R6
BCS             loc_4AC94
ADDS            R4, R4, R4
ADCS            R5, R5
SUBS            R2, #1
BNE             loc_4ACAA

loc_4ACBA
LSR.W           R3, R4, R12
LSL.W           R9, R5, R9
LSR.W           R2, R5, R12
LSR.W           R8, R5, R8
ADDS            R0, R0, R4
ORR.W           R3, R3, R9
ORR.W           R4, R3, R8
ADC.W           R1, R5, R1
MOV             R5, R2
SUB.W           R2, R12, #0x20 ; ' '
LSL.W           R3, R5, R12
LSL.W           R6, R4, R12
LSL.W           R2, R4, R2
RSB.W           R12, R12, #0x20 ; ' '
LSR.W           R12, R4, R12
ORRS            R3, R2
SUBS            R0, R0, R6
ORR.W           R3, R3, R12
SBC.W           R1, R1, R3

loc_4ACFE
CMP.W           LR, #0
BEQ             locret_4AD08
STRD.W          R4, R5, [LR]

locret_4AD08
POP.W           {R4-R11,PC}

loc_4AD0C
CLZ.W           R1, R4
ADDS            R1, #0x20 ; ' '
B               loc_4AC40

loc_4AD14
CLZ.W           R12, R2
CLZ.W           R1, R5
ADD.W           R12, R12, #0x20 ; ' '
CMP             R5, #0
BNE             loc_4AC40
B               loc_4AD0C
; End of function sub_4AC10

ALIGN 4



; int __fastcall init(int, int, int)
init
PUSH.W          {R3-R9,LR}
MOV             R7, R0
LDR             R6, =(off_66EE4 - 0x4AD3A)
MOV             R8, R1
MOV             R9, R2
LDR             R5, =(off_66EE0 - 0x4AD40)
ADD             R6, PC  ; off_66EE4
BLX             .init_proc
ADD             R5, PC  ; off_66EE0
SUBS            R6, R6, R5
ASRS            R6, R6, #2
BEQ             locret_4AD58
MOVS            R4, #0

loc_4AD46
ADDS            R4, #1
LDR.W           R3, [R5],#4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R7
BLX             R3
CMP             R6, R4
BNE             loc_4AD46

locret_4AD58
POP.W           {R3-R9,PC}
; End of function init

off_4AD5C DCD off_66EE4 - 0x4AD3A
off_4AD60 DCD off_66EE0 - 0x4AD40
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_9]
ALIGN 4
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x4AD68
CODE32



; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY
; ORG 0x4AD70
DCB    1
DCB    0
DCB    2
DCB    0
aErrorInterface DCB "Error: Interface name '%s' is too "
DCB "long. Max length is %d.",0xA,0
ALIGN 0x10
aFailedToCreate_3 DCB "Failed to create socket for IPv4",0
ALIGN 4
aFailedToCreate_4 DCB "Failed to create socket for IPv6",0
ALIGN 4
aIoctlFailedToG DCB "IOCTL failed to get IP address",0
ALIGN 4
aUnknownAddress DCB "Unknown address family.",0xA,0
ALIGN 4
aFailedToGetIpA DCB "Failed to get IP address from inte"
DCB "rface '%s'.",0xA,0
ALIGN 4
aEth0 DCB "eth0",0
ALIGN 4
aFailedToRetrie_0 DCB "Failed to retrieve and modify IP a"
DCB "ddress for eth0.",0xA,0
aGetVersionOld DCB "get_version_old",0
aGetStats DCB "get_stats",0
ALIGN 4
aGetPools DCB "get_pools",0
ALIGN 4
aGetPoolsOld DCB "get_pools_old",0
ALIGN 4
aEnterSleep DCB "enter_sleep",0
aGetWarning DCB "get_warning",0
aReloadConfig DCB "reload_config",0
ALIGN 0x10
aSendApiResult DCB "send_api_result",0
aGetStatsOld DCB "get_stats_old",0
ALIGN 0x10
aGetDevsOld DCB "get_devs_old",0
ALIGN 0x10
aNumascs DCB "numascs",0
aAscdevice DCB "ascdevice",0
ALIGN 4
aGetRate DCB "get_rate",0
ALIGN 0x10
aGetSummary DCB "get_summary",0
aGetSummaryOld DCB "get_summary_old",0
aApi_0 DCB "api",0
aApiInitSocket DCB "api_init_socket",0
; const char function[]
function DCB "api",0
aParseRecvBuf DCB "parse_recv_buf",0
ALIGN 4
DCD aSummary            ; "SUMMARY"
DCD aPools              ; "POOLS"
DCD aStats              ; "STATS"
DCD aDevs               ; "DEVS"
DCD aVersion            ; "VERSION"
DCD asc_4CF84+4         ; ""
DCD aTempIsTooHigh      ; "Temp is too high"
DCD aWrongNumber        ; "Wrong number"
ALIGN 8
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFE
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xAC
DCB 0xDA
DCB    4
DCB    0
DCB 0x38 ; 8
DCB 0x51 ; Q
DCB    5
DCB    0
DCB 0x38 ; 8
DCB 0x51 ; Q
DCB    5
DCB    0
DCB 0x88
DCB 0xCF
DCB    4
DCB    0
DCB 0xB4
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xAC
DCB 0xDA
DCB    4
DCB    0
DCB 0x38 ; 8
DCB 0x51 ; Q
DCB    5
DCB    0
DCB 0x88
DCB 0xCF
DCB    4
DCB    0
DCB 0xC4
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xAC
DCB 0xDA
DCB    4
DCB    0
DCB 0x38 ; 8
DCB 0x51 ; Q
DCB    5
DCB    0
DCB 0x88
DCB 0xCF
DCB    4
DCB    0
DCB 0xDC
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xAC
DCB 0xDA
DCB    4
DCB    0
DCB 0x38 ; 8
DCB 0x51 ; Q
DCB    5
DCB    0
aMinerVersion DCB "miner_version",0
ALIGN 4
aCompiletime DCB "CompileTime",0
aType DCB "type",0
ALIGN 4
aInfo DCB "INFO",0
ALIGN 0x10
aStatus DCB "STATUS",0
ALIGN 4
aWhen DCB "When",0
ALIGN 0x10
aCode DCB "Code",0
ALIGN 4
aMsg DCB "Msg",0
aDescription DCB "Description",0
aId DCB "id",0
ALIGN 4
aSInputBadApiPa DCB "%s: input bad api param",0xA,0
ALIGN 4
aBmminer_0 DCB "BMMiner",0
a31 DCB "3.1",0
aApi DCB "API",0
aMiner DCB "Miner",0
ALIGN 0x10
aType_0 DCB "Type",0
ALIGN 4
aVersion DCB "VERSION",0
aWhen_0 DCB "when",0
ALIGN 4
aApiVersion DCB "api_version",0
aTotalMhashesDo DCB "total_mhashes_done = %lf",0xA
DCB " new_total_mhashes_done = %lf",0xA
DCB " total_secs = %lf",0xA
DCB ", new_total_secs = %lf",0
aStats DCB "STATS",0
ALIGN 4
aIndex DCB "index",0
ALIGN 4
aUrl DCB "url",0
aUser DCB "user",0
ALIGN 0x10
aDisabled DCB "Disabled",0
ALIGN 4
aRejecting DCB "Rejecting",0
ALIGN 4
aDead DCB "Dead",0
ALIGN 0x10
aAlive DCB "Alive",0
ALIGN 4
aUnknown DCB "Unknown",0
aStatus_0 DCB "status",0
ALIGN 4
aGetworks DCB "getworks",0
ALIGN 4
aAccepted DCB "accepted",0
ALIGN 0x10
aRejected DCB "rejected",0
ALIGN 4
aDiscarded DCB "discarded",0
ALIGN 4
aDiff DCB "diff",0
ALIGN 0x10
aDiff1 DCB "diff1",0
ALIGN 4
aDiffa DCB "diffa",0
ALIGN 0x10
aDiffr DCB "diffr",0
ALIGN 4
aDiffs DCB "diffs",0
ALIGN 0x10
aLsdiff DCB "lsdiff",0
ALIGN 4
aD02d02d DCB "%d:%02d:%02d",0
ALIGN 4
aLstime DCB "lstime",0
ALIGN 0x10
aPools DCB "POOLS",0
ALIGN 4
aNoPools DCB "No pools",0
ALIGN 4
aPool DCB "POOL",0
ALIGN 4
aDeed DCB "Deed",0
ALIGN 4
aStatus_1 DCB "Status",0
ALIGN 4
aPriority DCB "Priority",0
ALIGN 4
aQuota DCB "Quota",0
ALIGN 0x10
aY DCB "Y",0
ALIGN 4
aLongPoll DCB "Long Poll",0
ALIGN 0x10
aN DCB "N",0
ALIGN 4
aGetworks_0 DCB "Getworks",0
ALIGN 0x10
aAccepted_0 DCB "Accepted",0
ALIGN 4
aRejected_0 DCB "Rejected",0
ALIGN 4
aDiscarded_0 DCB "Discarded",0
ALIGN 4
aStale_0 DCB "Stale",0
ALIGN 4
aGetFailures DCB "Get Failures",0
ALIGN 4
aRemoteFailures DCB "Remote Failures",0
aUser_0 DCB "User",0
ALIGN 4
aLastShareTime DCB "Last Share Time",0
aDiff_0 DCB "Diff",0
ALIGN 4
aDiff1Shares DCB "Diff1 Shares",0
ALIGN 4
aProxyType DCB "Proxy Type",0
ALIGN 4
aProxy DCB "Proxy",0
ALIGN 0x10
aDifficultyAcce DCB "Difficulty Accepted",0
aDifficultyReje DCB "Difficulty Rejected",0
aDifficultyStal DCB "Difficulty Stale",0
ALIGN 4
aLastShareDiffi DCB "Last Share Difficulty",0
ALIGN 4
aHasStratum DCB "Has Stratum",0
aStratumActive DCB "Stratum Active",0
ALIGN 0x10
aStratumUrl DCB "Stratum URL",0
aHasGbt DCB "Has GBT",0
aBestShare DCB "Best Share",0
ALIGN 0x10
aPoolRejected DCB "Pool Rejected%",0
ALIGN 0x10
aPoolStale DCB "Pool Stale%%",0
ALIGN 0x10
aExecSStart DCB "<<<<<<<<<<<<<<<<<<<<exec %s start>"
DCB ">>>>>>>>>>>>>>>",0
ALIGN 4
a127001 DCB "127.0.0.1",0
ALIGN 0x10
aExecSEnd DCB "<<<<<<<<<<<<<<<<<<<<exec %s end>>>"
DCB ">>>>>>>>>>>>>>>",0
ALIGN 4
aSleep DCB "sleep",0
ALIGN 4
aTmpWarningLog DCB "/tmp/warning.log",0
ALIGN 0x10
aS DCB "%[^;]; %[^;]; %[^;]; %s",0
aCause DCB "cause",0
ALIGN 0x10
aSuggestion DCB "suggestion",0
ALIGN 4
aTimestamp DCB "timestamp",0
ALIGN 4
aWarning DCB "WARNING",0
aErrorMessage DCB "error_message",0
ALIGN 0x10
aNotSupportS DCB "not support (%s)",0
ALIGN 4
aInvalidCommand DCB "Invalid command",0
aFalse DCB "false",0
ALIGN 4
aTrue DCB "true",0
ALIGN 4
a2lf DCB "%.2lf",0
ALIGN 4
aMsg_0 DCB "msg",0
aSSendSelectFai DCB "%s: send select failed, ret = %d",0
ALIGN 4
aSSendEagain DCB "%s: send EAGAIN ",0
ALIGN 4
aSSendDDFailedS DCB "%s: send (%d:%d) failed %s",0
ALIGN 4
aWtfMutexErrorO_0 DCB "WTF MUTEX ERROR ON LOCK! errno=%d "
DCB "in %s %s():%d",0
aApiNewC DCB "api_new.c",0
ALIGN 0x10
aBtmSocD DCB "BTM_SOC%d",0
ALIGN 4
aId_0 DCB "ID",0
ALIGN 0x10
aElapsed DCB "Elapsed",0
aCalls DCB "Calls",0
ALIGN 0x10
aWait DCB "Wait",0
ALIGN 4
aMax DCB "Max",0
aMin DCB "Min",0
aGhs5s DCB "GHS 5s",0
ALIGN 4
aGhsAv DCB "GHS av",0
ALIGN 0x10
aRate30m DCB "rate_30m",0
ALIGN 4
aMode DCB "Mode",0
ALIGN 4
aMinerCount DCB "miner_count",0
aFrequency DCB "frequency",0
ALIGN 4
aFanNum DCB "fan_num",0
aFanD DCB "fan%d",0
ALIGN 4
aTempNum DCB "temp_num",0
ALIGN 4
aTempD DCB "temp%d",0
ALIGN 0x10
aTemp2D DCB "temp2_%d",0
ALIGN 4
aTempPcbD DCB "temp_pcb%d",0
ALIGN 4
aDDDD DCB "%d-%d-%d-%d",0
a0000_0 DCB "0-0-0-0",0
aTempChipD DCB "temp_chip%d",0
aTempPicD DCB "temp_pic%d",0
ALIGN 4
aTotalRateideal DCB "total_rateideal",0
aGh DCB "GH",0
ALIGN 4
aRateUnit DCB "rate_unit",0
ALIGN 4
aTotalFreqavg DCB "total_freqavg",0
ALIGN 4
aTotalAcn DCB "total_acn",0
ALIGN 0x10
aTotalRate DCB "total rate",0
ALIGN 4
aTempMax DCB "temp_max",0
ALIGN 4
aNoMatchingWork DCB "no_matching_work",0
ALIGN 4
aChainAcnD DCB "chain_acn%d",0
aChainAcsD DCB "chain_acs%d",0
aChainHwD DCB "chain_hw%d",0
ALIGN 0x10
aChainRateD DCB "chain_rate%d",0
ALIGN 0x10
aFreqD DCB "freq%d",0
ALIGN 4
aMinerId DCB "miner_id",0
ALIGN 4
aWtfMutexErrorO DCB "WTF MUTEX ERROR ON UNLOCK! errno=%"
DCB "d in %s %s():%d",0
ALIGN 4
aWtfRdlockError DCB "WTF RDLOCK ERROR ON LOCK! errno=%d"
DCB " in %s %s():%d",0
ALIGN 4
aWtfRwlockError DCB "WTF RWLOCK ERROR ON UNLOCK! errno="
DCB "%d in %s %s():%d",0
ALIGN 0x10
aNoAscs DCB "No ASCs",0
aAsc DCB "ASC",0
aName DCB "Name",0
ALIGN 4
aEnabled DCB "Enabled",0
aTenperature DCB "Tenperature",0
aMhsAv DCB "MHS av",0
ALIGN 0x10
aMhsDs DCB "MHS %ds",0
aHardwareErrors_0 DCB "Hardware Errors",0
aUtility DCB "Utility",0
aLastSharePool DCB "Last Share Pool",0
aTotalMh DCB "Total MH",0
ALIGN 4
aDiff1Work DCB "Diff1 Work",0
ALIGN 4
aLastValidWork DCB "Last Valid Work",0
aDeviceHardware DCB "Device Hardware%",0
ALIGN 4
aDeviceRejected DCB "Device Rejected%",0
ALIGN 0x10
aDeviceElapsed DCB "Device Elapsed",0
ALIGN 0x10
aDevs DCB "DEVS",0
ALIGN 4
aSS_0 DCB "%s/s",0
ALIGN 0x10
aUnit DCB "unit",0
ALIGN 4
aDmin DCB "%dmin",0
ALIGN 0x10
aXaxis DCB "xAxis",0
ALIGN 4
aChainD DCB "chain%d",0
aName_0 DCB "name",0
ALIGN 4
aData DCB "data",0
ALIGN 0x10
aSeries DCB "series",0
ALIGN 4
aRate DCB "RATE",0
ALIGN 0x10
aElapsed_0 DCB "elapsed",0
aRate5s DCB "rate_5s",0
aRateAvg DCB "rate_avg",0
ALIGN 4
aRateIdeal DCB "rate_ideal",0
ALIGN 4
aHwAll DCB "hw_all",0
ALIGN 0x10
aBestshare DCB "bestshare",0
ALIGN 4
aSummary DCB "SUMMARY",0
aGhs30m DCB "GHS 30m",0
aFoundBlocks DCB "Found Blocks",0
ALIGN 4
aGetwork DCB "Getwork",0
aLocalWork DCB "Local Work",0
ALIGN 0x10
aNetworkBlocks DCB "Network Blocks",0
ALIGN 0x10
aWorkUtility DCB "Work Utility",0
ALIGN 0x10
aPoolStale_0 DCB "Pool Stale%",0
aLastGetwork DCB "Last getwork",0
ALIGN 4
aStartSFunction DCB "Start %s function",0xA,0
ALIGN 0x10
a0000 DCB "0.0.0.0",0
aSExecGetaddrin DCB "%s: exec getaddrinfo() failed",0xA
DCB 0
ALIGN 4
aSExecSocketFai DCB "%s: exec socket() failed",0xA,0
ALIGN 4
aSApiBindToPort DCB "%s: api bind to port %d failed, tr"
DCB "ying again in 30sec",0
ALIGN 4
aApiBindToPortD DCB "api bind to port %d, failed (%s)",0
ALIGN 0x10
aSExecListenFai DCB "%s: exec listen() failed (%s)",0
ALIGN 0x10
aSInitSocketFai DCB "%s: init socket failed",0
ALIGN 4
aCgminerRestart DCB "cgminer restart",0
aSExecAcceptFai DCB "%s: exec accept failed (%s)",0
aSSetsocketSoSn DCB "%s:setsocket SO_SNDTIMEO failed",0xA
DCB 0
ALIGN 4
aSSetsocketSoRc DCB "%s:setsocket SO_RCVTIMEO failed",0xA
DCB 0
ALIGN 4
aConnectAddrS DCB "connect_addr: %s",0
ALIGN 0x10
aNewApi DCB "new_api",0
aReload DCB "reload",0
ALIGN 0x10
aSErrorFormatEr DCB "%s error: format error about comma"
DCB "nd",0xA,0
ALIGN 4
aSInputInvaildP DCB "%s: input invaild param format",0
ALIGN 4
aMissingJsonCom DCB "Missing JSON 'command'",0
ALIGN 0x10
asc_4BB00 DCB "=",0
ALIGN 4
aS_3 DCB "%s,",0
aEndSFunction DCB "End %s function !!!",0
aSummary_0 DCB "summary",0
aPools_0 DCB "pools",0
ALIGN 4
aWarning_0 DCB "warning",0
aRate_0 DCB "rate",0
ALIGN 4
aSummary_1 DCB "Summary",0
aDPoolS DCB "%d Pool(s)",0
ALIGN 0x10
aCgminerStats DCB "CGMiner stats",0
ALIGN 0x10
aDevs_0 DCB "devs",0
ALIGN 4
a1AscS DCB "1 ASC(s)",0
ALIGN 4
aCgminerVersion DCB "CGMiner versions",0
ALIGN 4
aNetwork DCB "network",0
aFans DCB "fans",0
ALIGN 4
aTemp DCB "temp",0
ALIGN 0x10
aTempIsTooHigh DCB "Temp is too high",0
ALIGN 4
aWrongNumber DCB "Wrong number",0
ALIGN 4
aCanNotConnectT DCB "Can not connect to pool",0
aRateIsLowerTha DCB "Rate is lower than ideal rate",0
ALIGN 4
aKAllocItems DCB "k_alloc_items",0
ALIGN 4
aKNewStore DCB "k_new_store",0
aKNewList DCB "_k_new_list",0
aKUnlinkTail DCB "_k_unlink_tail",0
ALIGN 4
aKAddHead DCB "_k_add_head",0
aKAddTail DCB "_k_add_tail",0
aKInsertBefore DCB "_k_insert_before",0
ALIGN 0x10
aKInsertAfter DCB "_k_insert_after",0
aKUnlinkItem DCB "_k_unlink_item",0
ALIGN 0x10
aKListTransferT DCB "_k_list_transfer_to_head",0
ALIGN 4
aKListTransferT_0 DCB "_k_list_transfer_to_tail",0
ALIGN 4
aKFreeList DCB "_k_free_list",0
ALIGN 4
aKFreeStore DCB "_k_free_store",0
ALIGN 4
aListSStoreCanT DCB "List %s store can't %s() - from %s"
DCB " %s() line %d in %s %s():%d",0
ALIGN 4
aKlistC DCB "klist.c",0
aListSItemMemor DCB "List %s item_memory failed to real"
DCB "loc count=%d in %s %s():%d",0
ALIGN 0x10
aListSFailedToC_0 DCB "List %s failed to calloc %d new it"
DCB "ems - total was %d, limit was %d i"
DCB "n %s %s():%d",0
ALIGN 4
aListSDataMemor DCB "List %s data_memory failed to real"
DCB "loc count=%d in %s %s():%d",0
ALIGN 4
aListSFailedToC DCB "List %s failed to calloc item data"
DCB " in %s %s():%d",0
ALIGN 4
aFailedToCalloc_0 DCB "Failed to calloc store for %s in %"
DCB "s %s():%d",0
aInvalidNewList DCB "Invalid new list %s with allocate "
DCB "%d must be > 0 in %s %s():%d",0
ALIGN 4
aInvalidNewList_0 DCB "Invalid new list %s with limit %d "
DCB "must be >= 0 in %s %s():%d",0
ALIGN 4
aFailedToCalloc_2 DCB "Failed to calloc list %s in %s %s("
DCB "):%d",0
ALIGN 4
aFailedToCalloc_1 DCB "Failed to calloc lock for list %s "
DCB "in %s %s():%d",0
aFailedToPthrea_4 DCB "Failed to pthread_mutex_init errno"
DCB "=%d in %s %s():%d",0
aFailedToPthrea_3 DCB "Failed to pthread_rwlock_init errn"
DCB "o=%d in %s %s():%d",0
ALIGN 4
aListSCanTSDoTa DCB "List %s can't %s() - do_tail is fa"
DCB "lse - from %s %s() line %d in %s %"
DCB "s():%d",0
ALIGN 4
aListSCanTSASIt DCB "List %s can't %s() a %s item - fro"
DCB "m %s %s() line %d in %s %s():%d",0
ALIGN 4
aSSCanTBeforeAN DCB "%s() (%s) can't before a null item"
DCB " - from %s %s() line %d in %s %s()"
DCB ":%d",0
aSSCanTAfterANu DCB "%s() (%s) can't after a null item "
DCB "- from %s %s() line %d in %s %s():"
DCB "%d",0
ALIGN 4
aListSCanTSToAS DCB "List %s can't %s() to a %s list - "
DCB "from %s %s() line %d in %s %s():%d"
DCB 0
ALIGN 0x10
aListSCanTSASto DCB "List %s can't %s() a store - from "
DCB "%s %s() line %d in %s %s():%d",0
aStoreSCanTSThe DCB "Store %s can't %s() the list - fro"
DCB "m %s %s() line %d in %s %s():%d",0
ALIGN 4
aMyLogCurses DCB "my_log_curses",0
ALIGN 4
aD02d02d02d02d0 DCB " [%d-%02d-%02d %02d:%02d:%02d.%03d"
DCB "] ",0
ALIGN 4
aSS_1 DCB "%s%s",0xA,0
ALIGN 4
aLoggingC DCB "logging.c",0
ALIGN 0x10
; const char asc_4C1D0[]
asc_4C1D0 DCB "                    "
word_4C1E4 DCW 0xA
ALIGN 4
aDupalloc DCB "dupalloc",0
ALIGN 4
aIsdupnonce DCB "isdupnonce",0
ALIGN 0x10
aNoncedupC DCB "noncedup.c",0
ALIGN 4
aFailedToCalloc_3 DCB "Failed to calloc dupdata in %s %s("
DCB "):%d",0
ALIGN 4
aNonces DCB "Nonces",0
ALIGN 4
aWtfWrlockError DCB "WTF WRLOCK ERROR ON LOCK! errno=%d"
DCB " in %s %s():%d",0
ALIGN 0x10
aSDDuplicateNon DCB "%s%d: Duplicate nonce %08x",0
ALIGN 4
; _DWORD dword_4C28C[256]
dword_4C28C DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xA, 0xB, 0xC
DCD 0xD, 0xE, 0xF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
aClearSock DCB "clear_sock",0
ALIGN 4
aTqFreezethaw DCB "tq_freezethaw",0
ALIGN 4
off_4C6A8 DCD aHttp     ; "http:"
ALIGN 0x10
DCD aHttp0              ; "http0:"
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0xE9
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x5C ; \
DCB 0xE9
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0xE9
DCB    4
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0xE9
DCB    4
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x34 ; 4
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x37 ; 7
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x61 ; a
DCB 0x62 ; b
DCB 0x63 ; c
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x66 ; f
aBin2hex DCB "bin2hex",0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    6
DCB    0
DCB    0
DCB    0
DCB    7
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB    9
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB  0xD
DCB    0
DCB    0
DCB    0
DCB  0xE
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x11
DCB    0
DCB    0
DCB    0
DCB 0x12
DCB    0
DCB    0
DCB    0
DCB 0x13
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB    0
DCB    0
DCB    0
DCB 0x15
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x16
DCB    0
DCB    0
DCB    0
DCB 0x17
DCB    0
DCB    0
DCB    0
DCB 0x18
DCB    0
DCB    0
DCB    0
DCB 0x19
DCB    0
DCB    0
DCB    0
DCB 0x1A
DCB    0
DCB    0
DCB    0
DCB 0x1B
DCB    0
DCB    0
DCB    0
DCB 0x1C
DCB    0
DCB    0
DCB    0
DCB 0x1D
DCB    0
DCB    0
DCB    0
DCB 0x1E
DCB    0
DCB    0
DCB    0
DCB 0x1F
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x21 ; !
DCB    0
DCB    0
DCB    0
DCB 0x22 ; "
DCB    0
DCB    0
DCB    0
DCB 0x23 ; #
DCB    0
DCB    0
DCB    0
DCB 0x24 ; $
DCB    0
DCB    0
DCB    0
DCB 0x25 ; %
DCB    0
DCB    0
DCB    0
DCB 0x26 ; &
DCB    0
DCB    0
DCB    0
DCB 0x27 ; '
DCB    0
DCB    0
DCB    0
DCB 0x28 ; (
DCB    0
DCB    0
DCB    0
DCB 0x29 ; )
DCB    0
DCB    0
DCB    0
DCB 0x2A ; *
DCB    0
DCB    0
DCB    0
DCB 0x2B ; +
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x2C ; ,
DCB    0
DCB    0
DCB    0
DCB 0x2D ; -
DCB    0
DCB    0
DCB    0
DCB 0x2E ; .
DCB    0
DCB    0
DCB    0
DCB 0x2F ; /
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB 0x31 ; 1
DCB    0
DCB    0
DCB    0
DCB 0x32 ; 2
DCB    0
DCB    0
DCB    0
DCB 0x33 ; 3
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB    0
DCB    0
DCB    0
DCB 0x35 ; 5
DCB    0
DCB    0
DCB    0
DCB 0x36 ; 6
DCB    0
DCB    0
DCB    0
DCB 0x37 ; 7
DCB    0
DCB    0
DCB    0
DCB 0x38 ; 8
DCB    0
DCB    0
DCB    0
DCB 0x39 ; 9
DCB    0
DCB    0
DCB    0
aTqNew DCB "tq_new",0
ALIGN 4
aTqPush DCB "tq_push",0
aTqPop DCB "tq_pop",0
ALIGN 4
aGetProxy DCB "get_proxy",0
ALIGN 4
a000000000 DCB "000000000",0
ALIGN 4
aSuspendStratum DCB "suspend_stratum",0
aStratumSend DCB "stratum_send",0
ALIGN 4
aRecallocSock DCB "recalloc_sock",0
ALIGN 4
aInitiateStratu_0 DCB "initiate_stratum",0
ALIGN 4
aReallocStrcat DCB "realloc_strcat",0
ALIGN 4
aStrText DCB "str_text",0
ALIGN 4
aThrInfoCreate DCB "thr_info_create",0
aCompletionThre DCB "completion_thread",0
ALIGN 4
aCgCompletionTi DCB "cg_completion_timeout",0
ALIGN 0x10
aAddressToPubke DCB "address_to_pubkeyhash",0
ALIGN 4
aSerString DCB "ser_string",0
ALIGN 4
aCopyTime DCB "copy_time",0
ALIGN 0x10
aParseNotify DCB "parse_notify",0
ALIGN 0x10
aSocks4Negotiat DCB "socks4_negotiate",0
ALIGN 4
aSetupStratumSo DCB "setup_stratum_socket",0
ALIGN 4
aSocks5Negotiat DCB "socks5_negotiate",0
ALIGN 0x10
aParseReconnect DCB "parse_reconnect",0
aParseDiff DCB "parse_diff",0
ALIGN 4
aParseExtranonc DCB "parse_extranonce",0
ALIGN 0x10
DCB    2
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    3
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    4
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    5
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    6
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    7
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    8
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    9
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xA
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xB
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xC
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xD
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xE
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xF
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x10
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x11
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x12
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x13
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x14
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x15
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x16
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x17
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x18
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x19
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1A
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1B
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1C
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1D
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1E
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1F
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    2
DCB    1
DCB    1
DCB    1
DCB    3
DCB    1
DCB    1
DCB    1
DCB    4
DCB    1
DCB    1
DCB    1
DCB    5
DCB    1
DCB    1
DCB    1
DCB    6
DCB    1
DCB    1
DCB    1
DCB    7
DCB    1
DCB    1
DCB    1
DCB    8
DCB    1
DCB    1
DCB    1
DCB    9
DCB    1
DCB    1
DCB    1
DCB  0xA
DCB    1
DCB    1
DCB    1
DCB  0xB
DCB    1
DCB    1
DCB    1
DCB  0xC
DCB    1
DCB    1
DCB    1
DCB  0xD
DCB    1
DCB    1
DCB    1
DCB  0xE
DCB    1
DCB    1
DCB    1
DCB  0xF
DCB    1
DCB    1
DCB    1
DCB 0x10
DCB    1
DCB    1
DCB    1
DCB 0x11
DCB    1
DCB    1
DCB    1
DCB 0x12
DCB    1
DCB    1
DCB    1
DCB 0x13
DCB    1
DCB    1
DCB    1
DCB 0x14
DCB    1
DCB    1
DCB    1
DCB 0x15
DCB    1
DCB    1
DCB    1
DCB 0x16
DCB    1
DCB    1
DCB    1
DCB 0x17
DCB    1
DCB    1
DCB    1
DCB 0x18
DCB    1
DCB    1
DCB    1
DCB 0x19
DCB    1
DCB    1
DCB    1
DCB 0x1A
DCB    1
DCB    1
DCB    1
DCB 0x1B
DCB    1
DCB    1
DCB    1
DCB 0x1C
DCB    1
DCB    1
DCB    1
DCB 0x1D
DCB    1
DCB    1
DCB    1
DCB 0x1E
DCB    1
DCB    1
DCB    1
DCB 0x1F
DCB    1
DCB    1
DCB    1
DCB 0x20
DCB    1
DCB    1
DCB    1
DCB 0x21 ; !
DCB    1
DCB    1
DCB    1
DCB 0x22 ; "
DCB    1
DCB    1
DCB    1
DCB 0x23 ; #
DCB    1
DCB    1
DCB    1
DCB 0x24 ; $
DCB    1
DCB    1
DCB    1
DCB 0x25 ; %
DCB    1
DCB    1
DCB    1
DCB 0x26 ; &
DCB    1
DCB    1
DCB    1
DCB 0x27 ; '
DCB    1
DCB    1
DCB    1
DCB 0x28 ; (
DCB    1
DCB    1
DCB    1
DCB 0x29 ; )
DCB    1
DCB    1
DCB    1
DCB 0x2A ; *
DCB    1
DCB    1
DCB    1
DCB 0x2B ; +
DCB    1
DCB    1
DCB    1
DCB 0x2C ; ,
DCB    1
DCB    1
DCB    1
DCB 0x2D ; -
DCB    1
DCB    1
DCB    1
DCB 0x2E ; .
DCB    1
DCB    1
DCB    1
DCB 0x2F ; /
DCB    1
DCB    1
DCB    1
DCB 0x30 ; 0
DCB    1
DCB    1
DCB    1
DCB 0x31 ; 1
DCB    1
DCB    1
DCB    1
DCB 0x32 ; 2
DCB    1
DCB    1
DCB    1
DCB 0x33 ; 3
DCB    1
DCB    1
DCB    1
DCB 0x34 ; 4
DCB    1
DCB    1
DCB    1
DCB 0x35 ; 5
DCB    1
DCB    1
DCB    1
DCB 0x36 ; 6
DCB    1
DCB    1
DCB    1
DCB 0x37 ; 7
DCB    1
DCB    1
DCB    1
DCB 0x38 ; 8
DCB    1
DCB    1
DCB    1
DCB 0x39 ; 9
DCB    1
DCB    1
DCB    1
DCB 0x3A ; :
DCB    1
DCB    1
DCB    1
DCB 0x3B ; ;
DCB    1
DCB    1
DCB    1
DCB 0x3C ; <
DCB    1
DCB    1
DCB    1
DCB 0x3D ; =
DCB    1
DCB    1
DCB    1
DCB 0x3E ; >
DCB    1
DCB    1
DCB    1
DCB 0x3F ; ?
DCB    1
DCB    1
DCB    1
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC0
DCB 0xC1
DCB    1
DCB 0xC3
DCB    3
DCB    2
DCB 0xC2
DCB 0xC6
DCB    6
DCB    7
DCB 0xC7
DCB    5
DCB 0xC5
DCB 0xC4
DCB    4
DCB 0xCC
DCB  0xC
DCB  0xD
DCB 0xCD
DCB  0xF
DCB 0xCF
DCB 0xCE
DCB  0xE
DCB  0xA
DCB 0xCA
DCB 0xCB
DCB  0xB
DCB 0xC9
DCB    9
DCB    8
DCB 0xC8
DCB 0xD8
DCB 0x18
DCB 0x19
DCB 0xD9
DCB 0x1B
DCB 0xDB
DCB 0xDA
DCB 0x1A
DCB 0x1E
DCB 0xDE
DCB 0xDF
DCB 0x1F
DCB 0xDD
DCB 0x1D
DCB 0x1C
DCB 0xDC
DCB 0x14
DCB 0xD4
DCB 0xD5
DCB 0x15
DCB 0xD7
DCB 0x17
DCB 0x16
DCB 0xD6
DCB 0xD2
DCB 0x12
DCB 0x13
DCB 0xD3
DCB 0x11
DCB 0xD1
DCB 0xD0
DCB 0x10
DCB 0xF0
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0xF1
DCB 0x33 ; 3
DCB 0xF3
DCB 0xF2
DCB 0x32 ; 2
DCB 0x36 ; 6
DCB 0xF6
DCB 0xF7
DCB 0x37 ; 7
DCB 0xF5
DCB 0x35 ; 5
DCB 0x34 ; 4
DCB 0xF4
DCB 0x3C ; <
DCB 0xFC
DCB 0xFD
DCB 0x3D ; =
DCB 0xFF
DCB 0x3F ; ?
DCB 0x3E ; >
DCB 0xFE
DCB 0xFA
DCB 0x3A ; :
DCB 0x3B ; ;
DCB 0xFB
DCB 0x39 ; 9
DCB 0xF9
DCB 0xF8
DCB 0x38 ; 8
DCB 0x28 ; (
DCB 0xE8
DCB 0xE9
DCB 0x29 ; )
DCB 0xEB
DCB 0x2B ; +
DCB 0x2A ; *
DCB 0xEA
DCB 0xEE
DCB 0x2E ; .
DCB 0x2F ; /
DCB 0xEF
DCB 0x2D ; -
DCB 0xED
DCB 0xEC
DCB 0x2C ; ,
DCB 0xE4
DCB 0x24 ; $
DCB 0x25 ; %
DCB 0xE5
DCB 0x27 ; '
DCB 0xE7
DCB 0xE6
DCB 0x26 ; &
DCB 0x22 ; "
DCB 0xE2
DCB 0xE3
DCB 0x23 ; #
DCB 0xE1
DCB 0x21 ; !
DCB 0x20
DCB 0xE0
DCB 0xA0
DCB 0x60 ; `
DCB 0x61 ; a
DCB 0xA1
DCB 0x63 ; c
DCB 0xA3
DCB 0xA2
DCB 0x62 ; b
DCB 0x66 ; f
DCB 0xA6
DCB 0xA7
DCB 0x67 ; g
DCB 0xA5
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0xA4
DCB 0x6C ; l
DCB 0xAC
DCB 0xAD
DCB 0x6D ; m
DCB 0xAF
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0xAE
DCB 0xAA
DCB 0x6A ; j
DCB 0x6B ; k
DCB 0xAB
DCB 0x69 ; i
DCB 0xA9
DCB 0xA8
DCB 0x68 ; h
DCB 0x78 ; x
DCB 0xB8
DCB 0xB9
DCB 0x79 ; y
DCB 0xBB
DCB 0x7B ; {
DCB 0x7A ; z
DCB 0xBA
DCB 0xBE
DCB 0x7E ; ~
DCB 0x7F ; 
DCB 0xBF
DCB 0x7D ; }
DCB 0xBD
DCB 0xBC
DCB 0x7C ; |
DCB 0xB4
DCB 0x74 ; t
DCB 0x75 ; u
DCB 0xB5
DCB 0x77 ; w
DCB 0xB7
DCB 0xB6
DCB 0x76 ; v
DCB 0x72 ; r
DCB 0xB2
DCB 0xB3
DCB 0x73 ; s
DCB 0xB1
DCB 0x71 ; q
DCB 0x70 ; p
DCB 0xB0
DCB 0x50 ; P
DCB 0x90
DCB 0x91
DCB 0x51 ; Q
DCB 0x93
DCB 0x53 ; S
DCB 0x52 ; R
DCB 0x92
DCB 0x96
DCB 0x56 ; V
DCB 0x57 ; W
DCB 0x97
DCB 0x55 ; U
DCB 0x95
DCB 0x94
DCB 0x54 ; T
DCB 0x9C
DCB 0x5C ; \
DCB 0x5D ; ]
DCB 0x9D
DCB 0x5F ; _
DCB 0x9F
DCB 0x9E
DCB 0x5E ; ^
DCB 0x5A ; Z
DCB 0x9A
DCB 0x9B
DCB 0x5B ; [
DCB 0x99
DCB 0x59 ; Y
DCB 0x58 ; X
DCB 0x98
DCB 0x88
DCB 0x48 ; H
DCB 0x49 ; I
DCB 0x89
DCB 0x4B ; K
DCB 0x8B
DCB 0x8A
DCB 0x4A ; J
DCB 0x4E ; N
DCB 0x8E
DCB 0x8F
DCB 0x4F ; O
DCB 0x8D
DCB 0x4D ; M
DCB 0x4C ; L
DCB 0x8C
DCB 0x44 ; D
DCB 0x84
DCB 0x85
DCB 0x45 ; E
DCB 0x87
DCB 0x47 ; G
DCB 0x46 ; F
DCB 0x86
DCB 0x82
DCB 0x42 ; B
DCB 0x43 ; C
DCB 0x83
DCB 0x41 ; A
DCB 0x81
DCB 0x80
DCB 0x40 ; @
aSendS DCB "SEND: %s",0
ALIGN 4
aConnectSSHttp1 DCB "CONNECT %s:%s HTTP/1.0",0xD,0xA
DCB 0xD,0xA,0
ALIGN 4
aConnectSSHttp1_0 DCB "CONNECT %s:%s HTTP/1.1",0xD,0xA
DCB "Host: %s:%s",0xD,0xA
DCB 0xD,0xA,0
aSendingProxySS DCB "Sending proxy %s:%s - %s",0
ALIGN 4
aCouldnTReadFro DCB "Couldn't read from proxy %s:%s aft"
DCB "er sending CONNECT",0
ALIGN 4
aReceivedFromPr DCB "Received from proxy %s:%s - %s",0
ALIGN 4
aHttp11200 DCB "HTTP/1.1 200",0
ALIGN 4
aHttp10200 DCB "HTTP/1.0 200",0
ALIGN 4
aHttpErrorFromP DCB "HTTP Error from proxy %s:%s - %s",0
ALIGN 4
aCouldnTReadHtt DCB "Couldn't read HTTP byte from proxy"
DCB " %s:%s",0
ALIGN 4
asc_4CF84 DCB 0xD,0xA
DCB 0xD,0xA,0
ALIGN 4
aSuccessNegotia DCB "Success negotiating with %s:%s HTT"
DCB "P proxy",0
ALIGN 4
aFailedToSemPos DCB "Failed to sem_post errno=%d cgsem="
DCB "0x%p in %s %s():%d",0
ALIGN 0x10
aUtilC DCB "util.c",0
ALIGN 4
aNullStringPass DCB "Null string passed to valid_hex fr"
DCB "om in %s %s():%d",0
ALIGN 4
aInvalidChar0xX DCB "Invalid char 0x%x passed to valid_"
DCB "hex from in %s %s():%d",0
ALIGN 4
aFailedToMalloc DCB "Failed to malloc size %d from %s %"
DCB "s:%d",0
ALIGN 0x10
aFailedToCalloc_4 DCB "Failed to calloc memb %d size %d f"
DCB "rom %s %s:%d",0
ALIGN 0x10
aFailedToReallo DCB "Failed to realloc size %d from %s "
DCB "%s:%d",0
aHttp0 DCB "http0:",0
ALIGN 0x10
aHttp DCB "http:",0
ALIGN 4
aHex2binStrTrun DCB "hex2bin str truncated",0
ALIGN 0x10
aHex2binScanFai DCB "hex2bin scan failed",0
aYesHashTarget DCB "YES (hash <= target)",0
ALIGN 4
aNoFalsePositiv DCB "no (false positive; hash > target)"
DCB 0
ALIGN 0x10
aProofSTargetST DCB " Proof: %s",0xA
DCB "Target: %s",0xA
DCB "TrgVal? %s",0
ALIGN 4
aS_0 DCB "%.*s",0
ALIGN 4
asc_4D18C DCB "/#",0
ALIGN 0x10
dword_4D190 DCD 0x3038
aMaskReturnedBy DCB "mask returned by pool is %s, swape"
DCB "d = 0x%x",0
ALIGN 0x10
aRealMask0xXBit DCB "real mask = 0x%x, bit_num = %d",0
ALIGN 0x10
aPoolDRollingMa DCB "Pool %d rolling mask do not match!"
DCB 0
ALIGN 4
aJsonDecodeFail DCB "JSON decode failed(%d): %s",0
ALIGN 0x10
aResult DCB "result",0
ALIGN 4
aVersionRolling_0 DCB "version-rolling",0
aPoolDDonTSuppo DCB "Pool %d don't support ab!",0
ALIGN 4
aPoolDSupportAb DCB "POOL %d support ab mode!",0
ALIGN 0x10
aVersionRolling DCB "version-rolling.mask",0
ALIGN 4
aJsonRpcUnexpec DCB "JSON-RPC unexpected mining.configu"
DCB "re value: %s",0
ALIGN 4
aClosingSocketF DCB "Closing socket for stratum pool %d"
DCB 0
ALIGN 4
aWriteSelectFai DCB "Write select failed on pool %d soc"
DCB "k",0
aFailedToSendIn DCB "Failed to send in stratum_send",0
ALIGN 0x10
aStratumSendFai DCB "Stratum send failed due to no pool"
DCB " stratum_active",0
ALIGN 4
aTimedOutWaitin DCB "Timed out waiting for data on sock"
DCB "et_full",0
ALIGN 0x10
aSocketClosedWa DCB "Socket closed waiting in recv_line"
DCB 0
ALIGN 4
aFailedToRecvSo DCB "Failed to recv sock in recv_line",0
ALIGN 4
aFailedToParseA DCB "Failed to parse a \n terminated st"
DCB "ring in recv_line",0
aRecvdS DCB "RECVD: %s",0
ALIGN 4
aIdDMethodMinin_1 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.subs"
DCB "cribe",0x22,", ",0x22,"params",0x22
DCB ": []}",0
ALIGN 0x10
aIdDMethodMinin DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.subs"
DCB "cribe",0x22,", ",0x22,"params",0x22
DCB ": [",0x22,"%s/%s",0x22,", ",0x22,"%"
DCB "s",0x22,"]}",0
aIdDMethodMinin_0 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.subs"
DCB "cribe",0x22,", ",0x22,"params",0x22
DCB ": [",0x22,"%s/%s",0x22,"]}",0
ALIGN 4
aFailedToSendSI DCB "Failed to send s in initiate_strat"
DCB "um",0
ALIGN 4
aTimedOutWaitin_0 DCB "Timed out waiting for response in "
DCB "initiate_stratum",0
ALIGN 0x10
aUnknownReason DCB "(unknown reason)",0
ALIGN 4
aJsonRpcDecodeF DCB "JSON-RPC decode failed: %s",0
ALIGN 0x10
aMiningNotify DCB "mining.notify",0
ALIGN 0x10
aFailedToGetSes DCB "Failed to get sessionid in initiat"
DCB "e_stratum",0
aFailedToGetVal DCB "Failed to get valid nonce1 in init"
DCB "iate_stratum",0
ALIGN 4
aFailedToGetVal_0 DCB "Failed to get valid n2size in init"
DCB "iate_stratum",0
ALIGN 4
aPoolDSuccessfu DCB "Pool %d successfully negotiated re"
DCB "sume with the same session ID",0
aPoolDStratumSe DCB "Pool %d stratum session id: %s",0
ALIGN 4
aPoolDConfirmed DCB "Pool %d confirmed mining.subscribe"
DCB " with extranonce1 %s extran2size %"
DCB "d",0
ALIGN 4
aFailedToResume DCB "Failed to resume stratum, trying a"
DCB "fresh",0
aInitiateStratu DCB "Initiate stratum failed",0
aNull_0 DCB "(null)",0
ALIGN 4
a0x02x DCB "0x%02x",0
ALIGN 4
aFailedToMalloc_0 DCB "Failed to malloc null in %s %s():%"
DCB "d",0
aCgS DCB "cg@%s",0
ALIGN 0x10
aFailedToSemIni DCB "Failed to sem_init ret=%d errno=%d"
DCB " in %s %s():%d",0
ALIGN 4
aFailedToSemWai DCB "Failed to sem_wait errno=%d cgsem="
DCB "0x%p in %s %s():%d",0
ALIGN 4
aFailedToSemTim DCB "Failed to sem_timedwait errno=%d c"
DCB "gsem=0x%p in %s %s():%d",0
ALIGN 4
aErrAskedToMemc DCB "ERR: Asked to memcpy %u bytes from"
DCB " %s %s():%d",0
ALIGN 4
aErrAskedToMemc_0 DCB "ERR: Asked to memcpy %u bytes to N"
DCB "ULL from %s %s():%d",0
ALIGN 0x10
aErrAskedToMemc_1 DCB "ERR: Asked to memcpy %u bytes from"
DCB " NULL from %s %s():%d",0
aYes DCB "yes",0
aNo DCB "no",0
ALIGN 0x10
aMerkleDS DCB "merkle %d: %s",0
ALIGN 0x10
aFailedToConver DCB "Failed to convert merkle to merkle"
DCB "_bin in parse_notify",0
ALIGN 4
aSettimeNotifyN DCB "settime notify.ntime successfuly",0
ALIGN 4
aNullStringPass_0 DCB "Null string passed to valid_ascii "
DCB "from in %s %s():%d",0
ALIGN 4
aZeroLengthStri DCB "Zero length string passed to valid"
DCB "_ascii from in %s %s():%d",0
aInvalidChar0xX_0 DCB "Invalid char 0x%x passed to valid_"
DCB "ascii from in %s %s():%d",0
ALIGN 4
aSSSSSSS DCB "%s%s%s%s%s%s%s",0
ALIGN 4
a00000000000000 DCB "0000000000000000000000000000000000"
DCB "000000000000000000000000000000",0
ALIGN 0x10
aFailedToConver_0 DCB "Failed to convert header to header"
DCB "_bin in parse_notify",0
ALIGN 4
unk_4DA08 DCB 0x46 ; F
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x74 ; t
DCB 0x20
DCB 0x63 ; c
DCB 0x62 ; b
DCB 0x31 ; 1
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x62 ; b
DCB 0x31 ; 1
DCB 0x5F ; _
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x20
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x20
DCB 0x70 ; p
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x66 ; f
DCB 0x79 ; y
dword_4DA38 DCD 0
unk_4DA3C DCB 0x46 ; F
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x74 ; t
DCB 0x20
DCB 0x63 ; c
DCB 0x62 ; b
DCB 0x32 ; 2
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x62 ; b
DCB 0x32 ; 2
DCB 0x5F ; _
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x20
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x20
DCB 0x70 ; p
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x66 ; f
DCB 0x79 ; y
dword_4DA6C DCD 0
aPoolDCoinbaseS DCB "Pool %d coinbase %s",0
aJobIdS DCB "job_id: %s",0
ALIGN 0x10
aPrevHashS DCB "prev_hash: %s",0
ALIGN 0x10
aCoinbase1S DCB "coinbase1: %s",0
ALIGN 0x10
aCoinbase2S DCB "coinbase2: %s",0
ALIGN 0x10
aBbversionS DCB "bbversion: %s",0
ALIGN 0x10
aNbitS DCB "nbit: %s",0
ALIGN 4
aNtimeS DCB "ntime: %s",0
ALIGN 4
aCleanS DCB "clean: %s",0
ALIGN 4
aCgminer DCB "CGMINER",0
aInvalidIpAddre DCB "Invalid IP address specified for s"
DCB "ocks4 proxy: %s",0
ALIGN 0x10
aBadResponseFro DCB "Bad response from %s:%s SOCKS4 ser"
DCB "ver",0
ALIGN 4
aFailedToResolv DCB "Failed to resolve (?wrong URL) %s:"
DCB "%s",0
ALIGN 0x10
aFailedToGetadd DCB "Failed to getaddrinfo for %s:%s",0
aFailedSocket DCB "Failed socket",0
ALIGN 0x10
aFailedSockConn DCB "Failed sock connect",0
aSucceededDelay DCB "Succeeded delayed connect",0
ALIGN 0x10
aSelectTimeoutF DCB "Select timeout/failed connect",0
ALIGN 0x10
aSucceededImmed DCB "Succeeded immediate connect",0
aFailedToConnec DCB "Failed to connect to stratum on %s"
DCB ":%s",0
ALIGN 4
aAttemptingToNe DCB "Attempting to negotiate with %s:%s"
DCB " SOCKS5 proxy",0
aBadResponseFro_0 DCB "Bad response from %s:%s SOCKS5 ser"
DCB "ver",0
ALIGN 4
aSuccessNegotia_0 DCB "Success negotiating with %s:%s SOC"
DCB "KS5 proxy",0
aUnsupportedPro DCB "Unsupported proxy type for %s:%s",0
ALIGN 4
aStartSslConnec DCB "start ssl connect",0xA,0
ALIGN 0x10
aBeginCertifica DCB "-----BEGIN CERTIFICATE-----",0xA
DCB "MIIC7zCCAdcCFFbqE9PJlIVF9gfzurkXzS"
DCB "6t7SPIMA0GCSqGSIb3DQEBCwUAMDQx",0xA
DCB "CzAJBgNVBAYTAlNHMRMwEQYDVQQIDApTb2"
DCB "1lLVN0YXRlMRAwDgYDVQQKDAdBTlRQ",0xA
DCB "T09MMB4XDTI0MDgzMDAyNDAwMloXDTM0MD"
DCB "gyODAyNDAwMlowNDELMAkGA1UEBhMC",0xA
DCB "U0cxEzARBgNVBAgMClNvbWUtU3RhdGUxED"
DCB "AOBgNVBAoMB0FOVFBPT0wwggEiMA0G",0xA
DCB "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQ"
DCB "CeWq27wElC20BA1ro6WSp/vQkVMJvK",0xA
DCB "dOPkWjARKZcz+SE3ruEGo/x/Wqt3uBfzzK"
DCB "lGuae4nbEfBEj1yNl6bCA847RNurV4",0xA
DCB "t7c4n7pK969hGXi9P77ckBlG69xMKvk4hf"
DCB "DvpJBWxHD9GF7Zi2ntfxkH7lsFiLwK",0xA
DCB "SaMtvdVIBDY6lOIPfKMdmYeJxbl5wWtXlX"
DCB "SF2cYvLcZa4s6TsT2ead8lLEy7jVR2",0xA
DCB "4MPAbc+EdPlFIH96hSvJjGSO+27RqiiUwG"
DCB "zA8BSZTa7yXjypGuIhizsjPqQSc7rN",0xA
DCB "qKr+0Cebblw7X0UxDvr/0LQSZTQj2lF9MZ"
DCB "1O7MyTq6sCQLTIehuUdZj5AgMBAAEw",0xA
DCB "DQYJKoZIhvcNAQELBQADggEBAE7SpQFMU8"
DCB "fXKQUKmhYn+LbSLyYUJcYBFfyjicZt",0xA
DCB "H6FjmzTqaHApzjj013kwMfKQ5ymWAyDSnf"
DCB "9fwZUTh8jzw9UaRXfvkSkw1OBY3WzH",0xA
DCB "ROJb6MA4nOaahPDvVxoCV/Ypvky17BH0Vk"
DCB "t+p7gs+58dDDRAVg6C5iSueYXHUmAs",0xA
DCB "6vxAKX1XnkIkTakxjJAx1h+i1FCCsuWrO1"
DCB "wwZLgivXnmltcVRxkPkrz7k+XsKfa7",0xA
DCB "70HDg1PN1fL6L5pFQhb3NfVonYaVZAbsxM"
DCB "jnXVFGbsTrnc+1IfJ5rTBAbK67Sa2r",0xA
DCB "uAJMOjhJj0foq2v9TmSVqCjpK++9ToviWu"
DCB "f+8/C7Kc/EJEk=",0xA
DCB "-----END CERTIFICATE-----",0xA,0
ALIGN 4
aUnableToParseC DCB "unable to parse certificate in mem"
DCB "ory",0xA,0
ALIGN 0x10
aUnableToConnec DCB "unable to connect pool by ssl, con"
DCB "nect ret %d",0xA,0
ALIGN 0x10
aSslErrorDInAcc DCB "SSL error #%d in accept,program te"
DCB "rminated",0xA,0
aConnectedWithS DCB "Connected with %s encryption",0xA,0
ALIGN 4
aVerifyReturnCo DCB "Verify return code: %ld (%s)",0xA,0
ALIGN 4
aCertOfPoolIsVe DCB "cert of pool is verify fail",0xA,0
ALIGN 4
aCertCheckFail DCB "cert check fail",0xA,0
ALIGN 0x10
aIdDMethodMinin_2 DCB "{",0x22,"id",0x22,":%d, ",0x22,"me"
DCB "thod",0x22,":",0x22,"mining.config"
DCB "ure",0x22,", ",0x22,"params",0x22,":"
DCB "[[",0x22,"version-rolling",0x22,"]"
DCB ",{",0x22,"version-rolling.mask",0x22
DCB ":",0x22,"%08x",0x22,",",0x22,"vers"
DCB "ion-rolling.min-bit-count",0x22,":"
DCB "%d}]}",0
ALIGN 4
aDeniedStratumR DCB "Denied stratum reconnect request f"
DCB "or pool without domain '%s'",0
ALIGN 4
aDeniedStratumR_1 DCB "Denied stratum reconnect request t"
DCB "o url without domain '%s'",0
aDeniedStratumR_0 DCB "Denied stratum reconnect request t"
DCB "o non-matching domain url '%s'",0
ALIGN 4
aStratumReconne DCB "Stratum reconnect requested from p"
DCB "ool %d to %s",0
ALIGN 4
aMethod DCB "method",0
ALIGN 4
aParams DCB "params",0
ALIGN 4
aJsonRpcMethodD DCB "JSON-RPC method decode failed: %s",0
ALIGN 0x10
aMiningMultiVer DCB "mining.multi_version",0
ALIGN 4
aPoolSupportMul DCB "Pool support multi version",0
ALIGN 4
aMiningSetVersi DCB "mining.set_version_mask",0
aMiningSetDiffi DCB "mining.set_difficulty",0
ALIGN 4
aPoolDDifficult DCB "Pool %d difficulty changed to %d",0
ALIGN 4
aPoolDDifficult_1 DCB "Pool %d difficulty changed to %.1f"
DCB 0
ALIGN 4
aPoolDDifficult_0 DCB "Pool %d difficulty set to %f",0
ALIGN 4
aMiningSetExtra DCB "mining.set_extranonce",0
ALIGN 4
aFailedToGetVal_1 DCB "Failed to get valid nonce1 in pars"
DCB "e_extranonce",0
ALIGN 4
aFailedToGetVal_2 DCB "Failed to get valid n2size in pars"
DCB "e_extranonce",0
ALIGN 4
aFailedToCalloc_5 DCB "Failed to calloc pool->nonce1bin i"
DCB "n %s %s():%d",0
ALIGN 4
aPoolDExtranonc DCB "Pool %d extranonce change requeste"
DCB "d",0
aClientReconnec DCB "client.reconnect",0
ALIGN 4
aClientGetVersi DCB "client.get_version",0
ALIGN 0x10
aIdDResultCgmin DCB "{",0x22,"id",0x22,": %d, ",0x22,"r"
DCB "esult",0x22,": ",0x22,"cgminer/1.0"
DCB ".0",0x22,", ",0x22,"error",0x22,":"
DCB " null}",0
ALIGN 4
aClientShowMess DCB "client.show_message",0
aPoolDMessageS DCB "Pool %d message: %s",0
aMiningPing DCB "mining.ping",0
aPoolDPing DCB "Pool %d ping",0
ALIGN 4
aIdDResultPongE DCB "{",0x22,"id",0x22,": %d, ",0x22,"r"
DCB "esult",0x22,": ",0x22,"pong",0x22,","
DCB " ",0x22,"error",0x22,": null}",0
aIdDMethodMinin_3 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.extr"
DCB "anonce.subscribe",0x22,", ",0x22,"p"
DCB "arams",0x22,": []}",0
ALIGN 4
aTimedOutWaitin_1 DCB "Timed out waiting for response ext"
DCB "ranonce.subscribe",0
aMethodSubscrib DCB "Method 'subscribe' not found for s"
DCB "ervice 'mining.extranonce'",0
ALIGN 0x10
aCannotSubscrib DCB "Cannot subscribe to mining.extrano"
DCB "nce for pool %d",0
ALIGN 4
aUnrecognizedRe DCB "Unrecognized request provided",0
ALIGN 4
aPoolDJsonExtra DCB "Pool %d JSON extranonce subscribe "
DCB "failed: %s",0
ALIGN 4
aStratumExtrano DCB "Stratum extranonce subscribe for p"
DCB "ool %d",0
ALIGN 0x10
aIdDMethodMinin_4 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.auth"
DCB "orize",0x22,", ",0x22,"params",0x22
DCB ": [",0x22,"%s",0x22,", ",0x22,"%s",0x22
DCB "]}",0
ALIGN 4
aPoolDJsonStrat DCB "pool %d JSON stratum auth failed: "
DCB "%s",0
ALIGN 4
aStratumAuthori DCB "Stratum authorisation success for "
DCB "pool %d",0
ALIGN 4
aIdDMethodMinin_5 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.sugg"
DCB "est_difficulty",0x22,", ",0x22,"pa"
DCB "rams",0x22,": [%d]}",0
ALIGN 4
aO DCB "o",0
ALIGN 0x10
aS08xMidstateSD DCB "%s %08x midstate %s data %s nonce "
DCB "%s hash %s diff %lld",0
ALIGN 4
aScreen DCB "screen",0
ALIGN 0x10
aS08xWorkSMidst DCB "%s %08x work %s midstate %s data %"
DCB "s nonce %s hash %s diff %lld",0
ALIGN 0x10
aMidstateSDataS DCB "midstate %s data %s nonce %s hash "
DCB "%s",0
ALIGN 4
aWorkDiffLldDif DCB "work diff %lld diffnum %d",0
ALIGN 4
aSocks4 DCB "socks4:",0
aSocks5 DCB "socks5:",0
aSocks4a DCB "socks4a:",0
ALIGN 0x10
aSocks5h DCB "socks5h:",0
ALIGN 4
aJsonEscape DCB "json_escape",0
aCalcMidstate DCB "calc_midstate",0
ALIGN 4
aMinerThread DCB "miner_thread",0
ALIGN 4
aLoadConfig DCB "load_config",0
; const char aParseConfig[]
aParseConfig DCB "parse_config",0
ALIGN 4
aMtDisable DCB "mt_disable",0
ALIGN 0x10
aSetupUrl DCB "setup_url",0
ALIGN 4
aCopyWork DCB "_copy_work",0
ALIGN 4
aLoadDefaultCon DCB "load_default_config",0
aSetTarget DCB "set_target",0
ALIGN 4
aGetStatline DCB "get_statline",0
ALIGN 4
; _DWORD dword_4EA18[10]
dword_4EA18 DCD 1, 0x55C48, 0x40, 0x55C50, 0x40, 0x55C5C
DCD 8, 0x55C68, 0xA, 0x520BC
aPoolTset DCB "pool_tset",0
ALIGN 4
aPoolTclear DCB "pool_tclear",0
aIncDevStatus DCB "inc_dev_status",0
ALIGN 4
aWakeGws DCB "wake_gws",0
ALIGN 4
aRestartWait DCB "restart_wait",0
ALIGN 4
aTotalWorkInc DCB "total_work_inc",0
ALIGN 4
aMakeWork DCB "make_work",0
ALIGN 0x10
aAddQueued DCB "add_queued",0
ALIGN 4
aWorkCompleted DCB "work_completed",0
ALIGN 4
aTakeQueuedWork DCB "take_queued_work_bymidstate",0
aAgeQueuedWork DCB "age_queued_work",0
aCloneQueuedWor DCB "clone_queued_work_byid",0
ALIGN 0x10
aCloneQueuedWor_0 DCB "clone_queued_work_bymidstate",0
ALIGN 0x10
aFindQueuedWork DCB "find_queued_work_byid",0
ALIGN 4
aFindQueuedWork_0 DCB "find_queued_work_bymidstate",0
aGetDevices DCB "get_devices",0
aGetThread DCB "get_thread",0
ALIGN 4
aCurrentPool DCB "current_pool",0
ALIGN 4
aIncWorkStats DCB "inc_work_stats",0
ALIGN 4
aCpPrio DCB "cp_prio",0
aAddPool DCB "add_pool",0
ALIGN 0x10
aFlushQueue DCB "flush_queue",0
aZeroStats DCB "zero_stats",0
ALIGN 4
aIncHwErrors DCB "inc_hw_errors",0
ALIGN 4
aIncHwErrorsWit DCB "inc_hw_errors_with_diff",0
aShareDiff DCB "share_diff",0
ALIGN 4
aUpdateWorkStat DCB "update_work_stats",0
ALIGN 0x10
aClearPoolWork DCB "clear_pool_work",0
aSwitchPools DCB "switch_pools",0
ALIGN 0x10
aReapCurl DCB "reap_curl",0
ALIGN 4
aPruneStratumSh DCB "prune_stratum_shares",0
ALIGN 4
aClearStratumSh DCB "clear_stratum_shares",0
ALIGN 4
aHashPop DCB "hash_pop",0
ALIGN 4
aTestPoolThread DCB "test_pool_thread",0
ALIGN 4
aSharelog DCB "sharelog",0
ALIGN 4
aGenStratumWork DCB "gen_stratum_work",0
ALIGN 4
aGetWorkByNonce DCB "get_work_by_nonce2",0
ALIGN 0x10
aStaleWork DCB "stale_work",0
ALIGN 4
aGetWork DCB "get_work",0
ALIGN 4
aSetBenchmarkWo DCB "set_benchmark_work",0
ALIGN 4
aGetQueued DCB "__get_queued",0
ALIGN 4
aGetQueued_0 DCB "get_queued",0
ALIGN 4
aDiscardStale DCB "discard_stale",0
ALIGN 4
aRestartThread DCB "restart_thread",0
ALIGN 4
aHashmeter DCB "hashmeter",0
ALIGN 4
aFillQueue DCB "fill_queue",0
ALIGN 0x10
aHashDriverWork DCB "hash_driver_work",0
ALIGN 4
aHashSoleWork DCB "hash_sole_work",0
ALIGN 4
aWatchdogThread_0 DCB "watchdog_thread",0
aStratumSthread DCB "stratum_sthread",0
aStratumSthread_0 DCB "stratum_sthread",0
aTestWorkCurren DCB "test_work_current",0
ALIGN 4
aBlockExists DCB "block_exists",0
ALIGN 4
aSetCurblock DCB "set_curblock",0
ALIGN 4
aWaitLpcurrent DCB "wait_lpcurrent",0
ALIGN 4
aSupportsResume DCB "supports_resume",0
aParseStratumRe DCB "parse_stratum_response",0
ALIGN 0x10
aShareResult DCB "share_result",0
ALIGN 0x10
aReject DCB "reject",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aStratumRthread DCB "stratum_rthread",0
aHashPush DCB "hash_push",0
ALIGN 0x10
aSubmitWorkAsyn DCB "submit_work_async",0
ALIGN 4
aSubmitTestedWo DCB "submit_tested_work",0
ALIGN 4
aSubmitNoffsetN DCB "submit_noffset_nonce",0
ALIGN 0x10
aAddPoolDetails DCB "add_pool_details",0
ALIGN 4
aEnableDevice DCB "enable_device",0
ALIGN 4
aAddCgpu DCB "add_cgpu",0
ALIGN 0x10
aCopyDrv DCB "copy_drv",0
ALIGN 4
aReadVersionFil DCB "read_version_file",0
ALIGN 0x10
aLoadDefaultCon_0 DCB "load_default_config_without_restar"
DCB "t",0
aJudgeLoadConfi DCB "judge_load_config",0
ALIGN 4
aMain DCB "main",0
ALIGN 0x10
aLoadTempCutoff DCB "load_temp_cutoffs",0
ALIGN 4
aSignalWorkUpda DCB "signal_work_update",0
ALIGN 4
aGetBenchmarkWo DCB "get_benchmark_work",0
ALIGN 4
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x5F ; _
DCB    0
DCB    0
DCB    0
a00000002c01f50 DCB "00000002c01f502cb3e9fdb053230ec12a"
DCB "4954c1021a6b35862b5e29000000000000"
DCB "000084d1b83ae44057025e8c5b5756b44f"
DCB "04df5fffe4a7a30e5c12d12a97a7a4c2ea"
DCB "536dce431900896cb6d60e000000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000d08f7e14c50dad77"
DCB "dc238b4db2901a0578e657b1954779ab9c"
DCB "d82a73829edf7f",0
ALIGN 4
a000000023bf53e DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "0000c1a174254a6593ffba987f68fe26e7"
DCB "16e3c129a7f33a9c43ae7ecf90c8cd0d2c"
DCB "536dc4e61900896c8f8100100000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200006700aeedada2b387"
DCB "7900b58a183c42c40949956bb8b4a8d214"
DCB "81f8936b572922",0
ALIGN 4
a00000002138cf4 DCB "00000002138cf4b61dff74e3c26b2d8004"
DCB "5064e8ab4802521bab2cda000000000000"
DCB "000071eef64a7ef4e47cda16e96673197d"
DCB "36c7235a4aadd23c21a38ce53827d1f8bc"
DCB "536dc4d71900896ce96b00200000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200000730cf7a6b8a85eb"
DCB "1cc017b109d23c392464f99aa8c020ea10"
DCB "7c525b671adde0",0
ALIGN 0x10
a000000023bf53e_0 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "0000fe2c6b926468565e524ab7c2f11103"
DCB "5dcde7c60955842111930589eccb410f83"
DCB "536dc66b1900896cf42900300000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000027dbb374a97f15c5"
DCB "9587256662f36904d075d0e61f74961818"
DCB "2711288ac617c7",0
ALIGN 4
a000000023bf53e_1 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "000003073385e05c29f0435a6001c8eca9"
DCB "c8d5602890aeff9d4d103d3383cf80dae5"
DCB "536dc57c1900896c821d00400000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200007da3b97e82c0c312"
DCB "5a58dad8a0d1d0369244731f3b096e9724"
DCB "84298d15b843d9",0
ALIGN 4
a000000029ca55e DCB "000000029ca55e5f1bc0328c84f358fdda"
DCB "dc13cb232599bc2ca9dbe1000000000000"
DCB "0000b5b4d19c20a7fc2b174ff673c006ed"
DCB "d2247c4b2336571864df93eb7ec0c8c276"
DCB "536dfe041900896ce63c00500000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001514bd586511e531"
DCB "e2b6277a6d112b171f9e008d56ef4a971e"
DCB "619acf22e75072",0
ALIGN 4
a000000023bf53e_2 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "00003e3030629ff4258056dc9efaf922bd"
DCB "173a65f65ee799b0c765097d3deeddef10"
DCB "536dc4d81900896c144300600000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000dcb77a9c36d894d2"
DCB "dbc31437e5c2a1564e927937848ea2eb20"
DCB "b38638afc64b96",0
ALIGN 0x10
a000000023bf53e_3 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "00005513c22bb99e9daa9936b0df5dce64"
DCB "d7737e3706be99e5098d112002492cf81b"
DCB "536dc5691900896cd44100700000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200000d896267fda5dda0"
DCB "f85308e77f754c8b94b7b88e3cb315475c"
DCB "d9efd16401e3ce",0
ALIGN 4
a00000002e155f0 DCB "00000002e155f07e652e4d671ca4db51bb"
DCB "de14d2b5ae34ee67ecc744000000000000"
DCB "00004af5cffd7e5a7087f1b484b526c735"
DCB "0c86d8389283509ca878502f792115e8dc"
DCB "536dc6ad1900896c999d00800000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000339354568f506ac3"
DCB "cd69bb427b1af83a0473b87c16bf3b562a"
DCB "93d0a2ffc53e54",0
ALIGN 4
a000000029ca55e_0 DCB "000000029ca55e5f1bc0328c84f358fdda"
DCB "dc13cb232599bc2ca9dbe1000000000000"
DCB "00005925a624e5c84f96d2c34dce3b6a73"
DCB "6addb891724b48a36320c7494435f9c915"
DCB "536dfe621900896c14fb00900000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200008362009c07cf4824"
DCB "9f481be6b79e67247cab1d20050cf11c27"
DCB "6085b90732110c",0
ALIGN 4
a00000002e155f0_0 DCB "00000002e155f07e652e4d671ca4db51bb"
DCB "de14d2b5ae34ee67ecc744000000000000"
DCB "00001e69f1d6507f4b7b50980930f7d808"
DCB "9834fbe65f0980b8592d53cdda08e50d24"
DCB "536dc7da1900896c5eeb00a00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000021e4f654d26ab8c9"
DCB "164ff311657a9f9c4cdc0e8a09334925f7"
DCB "c02138819d7e61",0
ALIGN 0x10
a000000023bf53e_4 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "000064923b63f53c72c04ebe6c1c9140b6"
DCB "377132b6e50865814fe562291bd023d348"
DCB "536dc65a1900896cc52e00b00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000055db91a25401a89d"
DCB "af9ff7d7954bab722b894ba480fefaf1f0"
DCB "a95aaf5f600567",0
ALIGN 4
a000000023bf53e_5 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "0000ee9817160e35d4410601c8dc741c1a"
DCB "810c485f3b40a0859be5f58f0bf6ef1694"
DCB "536dc6321900896c6e1f00c00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000ae215785178ff635"
DCB "0064060ebbb219a71716a10e88528fc4bb"
DCB "1cb5c8fdd0cf60",0
ALIGN 4
a000000029ca55e_1 DCB "000000029ca55e5f1bc0328c84f358fdda"
DCB "dc13cb232599bc2ca9dbe1000000000000"
DCB "00001e514cf738455a54f004ec86edafcf"
DCB "d9fd2022017bb31c245340353911744fb7"
DCB "536dfe1f1900896c265f00d00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000dcafaa86defe850b"
DCB "057ae74f7218a79b0ede086a196f18f0e7"
DCB "c585eb88d1139a",0
ALIGN 4
a000000023bf53e_6 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "00005edbd53fcc64850b5334678199d769"
DCB "514818fbcc79861fc77e572bb4753b7fe2"
DCB "536dc5d91900896c938900e00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200005e653df5956ece51"
DCB "8a78a5d11297431af94ce8ba91d80cfb2a"
DCB "a8c5b3095fa256",0
ALIGN 0x10
a000000023bf53e_7 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "0000596fc4aa5da839ba267c36aa1a5b29"
DCB "d813747b2273dc03aa9e404c4da0238e2b"
DCB "536dc4cc1900896c9e7000f00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200000e23806a533bd956"
DCB "787eef52dd8edee456c60d6cecbb617545"
DCB "8ee53fc8c6c813",0
ALIGN 4
a000000029c6bf4 DCB "000000029c6bf469abe4ad37605c097a86"
DCB "0cff3cf5c1ef4377618f74000000000000"
DCB "000082b1514e7b6565941e5824f0842921"
DCB "64ec5f97e7ea20c494bd96e524d478977b"
DCB "536dd2261900896c8b1002000000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000064e4e3becc01064d"
DCB "808269b330f40f4de82dc92e894d635025"
DCB "daa3e2e2c410b4",0
ALIGN 4
a00000002e790c2 DCB "00000002e790c23987181950eeb144591c"
DCB "3ac4d06c0705f2801d0976000000000000"
DCB "00009ebbce2f5f0d6cc0aca284ecb1059c"
DCB "856ef2f7f42e7edd403d246754ee4c905a"
DCB "536dd2a91900896ccfda03100000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200004a78daf1b5eb3397"
DCB "af1c00dbd9b06659cdc04183c8baaf5be1"
DCB "dbf32f79e00459",0
ALIGN 4
a000000023e91fc DCB "000000023e91fce7300a792bfbaa0c76e1"
DCB "aa5f9b546c1db582aee4ff000000000000"
DCB "0000f04650a8e748d2e6fde86a8a920b28"
DCB "5f3e22398f583700236958323ef9ea8321"
DCB "536dcf431900896cb4570e200000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200000a1d654ae2b06f21"
DCB "9ccf4601933fab408de1c3b7c8c9c85e03"
DCB "231d4aaf5a26cd",0
ALIGN 0x10
a000000023e91fc_0 DCB "000000023e91fce7300a792bfbaa0c76e1"
DCB "aa5f9b546c1db582aee4ff000000000000"
DCB "000074b39134c2930d2f2e7339f9d502c7"
DCB "76c44d6ee599f7efebec6c9bbd04787aae"
DCB "536dce561900896ce2710f300000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000094e60c1180022f33"
DCB "7232ab3d298f838304b6008ab237cf7e17"
DCB "17f1933407e592",0
ALIGN 4
a000000023e91fc_1 DCB "000000023e91fce7300a792bfbaa0c76e1"
DCB "aa5f9b546c1db582aee4ff000000000000"
DCB "0000c5b821fb0b26d63b00cc26e7ac4d6c"
DCB "fd1d3fc109b0db188e7e792e3d18342919"
DCB "536dce501900896ced4805400000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000a290eac61642949c"
DCB "00d17f7cd5980abedb8647fc5df9955dcf"
DCB "e4d56a50a0c564",0
ALIGN 4
a00000002e790c2_0 DCB "00000002e790c23987181950eeb144591c"
DCB "3ac4d06c0705f2801d0976000000000000"
DCB "00006e9d94bf5a0ab7b202d39e1200af96"
DCB "074e4f641f4e55e3e9e3aee72aa00a70e9"
DCB "536dd2ae1900896c60f701500000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001477ca8536702eac"
DCB "bd65a6a162cfe90d62016a14ffe58d52b7"
DCB "dd4c3628a27e5b",0
ALIGN 4
a00000002194bb5 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "000003bbb250f2dc23717e8192c0b8bec6"
DCB "a175cd059e4089d325006eaee3446254c9"
DCB "536dd39e1900896c16980c600000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000068db599d6b7a55fd"
DCB "61d4244a3dfa465055ead6b5c0a37c7a3d"
DCB "4555b58e99065e",0
ALIGN 0x10
a000000023e91fc_2 DCB "000000023e91fce7300a792bfbaa0c76e1"
DCB "aa5f9b546c1db582aee4ff000000000000"
DCB "000072e17babd4089b204797cebda7dc6e"
DCB "277950eab1b2908991ae1d72335f82d204"
DCB "536dcf441900896c5f2d09700000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000c7d601ce3b01e569"
DCB "a49508d541bbcba9b3c8394b1834523ef1"
DCB "e5cb2c60bd34a3",0
ALIGN 4
a000000029c6bf4_0 DCB "000000029c6bf469abe4ad37605c097a86"
DCB "0cff3cf5c1ef4377618f74000000000000"
DCB "000022388b6f022144db134af1bc8e61b3"
DCB "85ca37cae038c1d165ae98c496b3b41e8b"
DCB "536dd2101900896ca8ea0e800000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000410761e97e67b494"
DCB "fd547cfe9ffbb36893da7aec75c6b51b8d"
DCB "5f38f87b5d63cf",0
ALIGN 4
a000000029c6bf4_1 DCB "000000029c6bf469abe4ad37605c097a86"
DCB "0cff3cf5c1ef4377618f74000000000000"
DCB "00000e1f0cfdf5ad8248fc4520f3bb0b20"
DCB "40226430348cddeff5ca9181beeb78870d"
DCB "536dd2161900896c0d600f900000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000ad1a8d354a7e8b13"
DCB "ec47f4c3d907d00945a61e86059f4943e4"
DCB "2c1e52398eba5d",0
ALIGN 4
a00000002194bb5_0 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "00002232a16d38cc0e13e4b16d917bff4c"
DCB "34727deb3b5c50e424fb8453ff9b2adcb4"
DCB "536dd4231900896cbf1002a00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000adc67d38f31f589b"
DCB "18b9d8e531b994ce5733c021a03d88d386"
DCB "11ee6b4c2710a5",0
ALIGN 0x10
a00000002194bb5_1 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "0000a2860471277b4a93fea2a8b6d8c281"
DCB "fab7bde3b78f2acd1bfdc89d464ed3bb3c"
DCB "536dd35e1900896c9d3004b00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000537686c611aae439"
DCB "7c7c04b2c190708453d00e8c9563525610"
DCB "c31ba46e80dbc2",0
ALIGN 4
a00000002194bb5_2 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "0000f370230607998fbbd10275c5890885"
DCB "fcd81b68018ba2373abf0f93a06d02ab28"
DCB "536dd33e1900896c37750bc00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001fdda952da6abd70"
DCB "022a6e5f2b9dc5e1b66011128c3fa249f0"
DCB "b7439f00d5943e",0
ALIGN 4
a00000002c0a2c9 DCB "00000002c0a2c91fc41254539a5b2a27be"
DCB "28de2a6187e2af3f129d63000000000000"
DCB "00005e45ffc512d5ca3bc4d2063dd3af16"
DCB "69c296ae126a5a2ef896d1e190cedf67b9"
DCB "536dd46b1900896cd55b00d00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000007094d6cbe76538a"
DCB "88612624fc5e655cc405cb8198dcad516b"
DCB "88dbac5bf8b906",0
ALIGN 4
a00000002194bb5_3 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "000027c548815127c125147af91c356c29"
DCB "3f0defbd2771f8dc3b1142b367528656db"
DCB "536dd37c1900896c96770ae00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001bdbb3b1be721687"
DCB "2ea787627b03c389a527451f6dd832d854"
DCB "0874306f9c07c6",0
ALIGN 0x10
a00000002194bb5_4 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "0000adef758770bb90c5b13769c5b61aff"
DCB "b322b24c747573b38ebe2ee81748d0b557"
DCB "536dd4071900896c29f001f00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001ac8eea632853539"
DCB "44e40eec54d2dd6cd0994b447429bb0ed0"
DCB "598d38f42da0e2",0
ALIGN 4
aCgminerC DCB "cgminer.c",0
ALIGN 0x10
aFailedToOpenFd DCB "Failed to open fd %u for share log"
DCB 0
ALIGN 4
aStandardOutput DCB "Standard output missing for share "
DCB "log",0
ALIGN 4
aFailedToOpenSF DCB "Failed to open %s for share log",0
aSBuiltWithBitm DCB "%s",0xA
DCB "Built with bitmain_c5 mining suppo"
DCB "rt.",0xA,0
ALIGN 4
a3gS DCB "%.3g%s",0
ALIGN 0x10
aDS DCB "%d%s",0
ALIGN 4
aFS DCB "%*.*f%s",0
aCreateTestPool DCB "create test_pool_thread pool[%d]",0xA
DCB 0
ALIGN 4
aDMiner DCB "%d/Miner",0
ALIGN 0x10
aWaitingOnSemIn DCB "Waiting on sem in miner thread",0
ALIGN 0x10
aWtfNoPoolDFoun DCB "WTF No pool %d found!",0
ALIGN 4
aInvalidTimeSet DCB "Invalid time set, should be HH:MM",0
ALIGN 4
aInvalidTimeSet_0 DCB "Invalid time set.",0
ALIGN 0x10
aDD DCB "%d:%d",0
ALIGN 4
aTooManyLevelsO DCB "Too many levels of JSON includes ("
DCB "limit 10) or a loop",0
ALIGN 0x10
aInvalidValue DCB "Invalid value",0
ALIGN 0x10
aInclude DCB "include",0
aOptTypeOptSubt DCB "!(opt->type & OPT_SUBTABLE)",0
asc_519A4 DCB "|",0
ALIGN 4
aInvalidConfigO DCB "Invalid config option %s: %s",0
ALIGN 4
aParsingJsonOpt DCB "Parsing JSON option %s: %s",0
ALIGN 4
aValueOutOfRang DCB "Value out of range",0
ALIGN 4
aFailedToCreate_5 DCB "Failed to create pool_change_threa"
DCB "d",0
aConfigTooFastP DCB "config too fast, pool is changing,"
DCB " please wait",0xA,0
aThreadDBeingDi DCB "Thread %d being disabled",0
ALIGN 4
aThreadDBeingRe DCB "Thread %d being re-enabled",0
ALIGN 4
aUnableToSetThr_0 DCB "Unable to set thread to low priori"
DCB "ty",0
ALIGN 4
aStratumTcp DCB "stratum+tcp://",0
ALIGN 4
aPoolDIsTcpPool DCB "Pool %d is tcp pool.",0
ALIGN 4
aStratumTls DCB "stratum+tls://",0
ALIGN 4
aPoolDIsTlsPool DCB "Pool %d is tls pool.",0
ALIGN 4
aFreeWorkCalled DCB "Free work called with NULL work fr"
DCB "om %s %s:%d",0
ALIGN 4
aD02d02d02d02d0_0 DCB "[%d-%02d-%02d %02d:%02d:%02d.%03d]"
DCB 0
ALIGN 0x10
aGlobalQuotaGre DCB "Global quota greatest common denom"
DCB "inator set to %lu",0
aDD_0 DCB "%d-%d",0
ALIGN 4
aHttp_0 DCB "http://",0
aHttps DCB "https://",0
ALIGN 0x10
aInvalidParamet DCB "Invalid parameters for set temp cu"
DCB "toff",0
ALIGN 4
aInvalidValuePa DCB "Invalid value passed to set temp c"
DCB "utoff",0
aBenchfileNonce DCB "BENCHFILE nonce %u=0x%08x for work"
DCB "=%s",0
ALIGN 4
aDiscardWorkCal DCB "Discard work called with NULL work"
DCB " from %s %s:%d",0
ALIGN 4
aDiscardedWork DCB "Discarded work",0
ALIGN 4
aDiscardedClone DCB "Discarded cloned or rolled work",0
aPools_1 DCB "{",0xA
DCB 0x22,"pools",0x22," : [",0
ALIGN 4
aSQuotaSSSDS DCB "%s",0xA
DCB 9,"{",0xA
DCB 9,9,0x22,"quota",0x22," : ",0x22,"%"
DCB "s%s%s%d;%s",0x22,",",0
ALIGN 0x10
aSUrlSSSS DCB "%s",0xA
DCB 9,"{",0xA
DCB 9,9,0x22,"url",0x22," : ",0x22,"%s%"
DCB "s%s%s",0x22,",",0
aExtranonceSubs DCB 0xA
DCB 9,9,0x22,"extranonce-subscribe",0x22
DCB " : true,",0
ALIGN 0x10
; const char aUserS[]
aUserS DCB 0xA
DCB 9,9,0x22,"user",0x22," : ",0x22,"%s"
DCB 0x22
word_51D00 DCW 0x2C
ALIGN 4
aPassS DCB 0xA
DCB 9,9,0x22,"pass",0x22," : ",0x22,"%s"
DCB 0x22,0xA
DCB 9,"}",0
asc_51D18 DCB 0xA
DCB "]",0xA,0
aSTrue DCB ",",0xA
DCB 0x22,"%s",0x22," : true",0
ALIGN 4
aSD_1 DCB ",",0xA
DCB 0x22,"%s",0x22," : ",0x22,"%d",0x22
DCB 0
ALIGN 4
aS1f DCB ",",0xA
DCB 0x22,"%s",0x22," : ",0x22,"%.1f",0x22
DCB 0
aSS_2 DCB ",",0xA
DCB 0x22,"%s",0x22," : ",0x22,"%s",0x22
DCB 0
ALIGN 4
aBalanceTrue DCB ",",0xA
DCB 0x22,"balance",0x22," : true",0
ALIGN 0x10
aLoadBalanceTru DCB ",",0xA
DCB 0x22,"load-balance",0x22," : true",0
aRoundRobinTrue DCB ",",0xA
DCB 0x22,"round-robin",0x22," : true",0
ALIGN 0x10
aRotateD DCB ",",0xA
DCB 0x22,"rotate",0x22," : ",0x22,"%d",0x22
DCB 0
ALIGN 4
asc_51DB4 DCB 0xA
DCB "}",0xA,0
aHome DCB "HOME",0
ALIGN 0x10
aBmminer DCB ".bmminer/",0
ALIGN 4
aBmminerConf DCB "bmminer.conf",0
ALIGN 4
aDiffZeroPassed DCB "Diff zero passed to set_target",0
ALIGN 4
aGeneratedTarge DCB "Generated target %s",0
aSDDuplicateSha DCB "%s %d duplicate share detected as "
DCB "HW error",0
ALIGN 4
aWb DCB "wb",0
ALIGN 0x10
aNvdataWorklogT DCB "/nvdata/worklog.txt",0
aMidstateSDataS_0 DCB "midstate %s data %s nonce %s versi"
DCB "on %s ",0xD,0xA,0
ALIGN 0x10
aShutdownSignal DCB "Shutdown signal received.",0
ALIGN 4
aSD DCB "%s%d ",0
ALIGN 4
aDsSAvgShSA0fR0 DCB "(%ds):%s (avg):%sh/s | A:%.0f R:%."
DCB "0f HW:%d WU:%.1f/m",0
ALIGN 4
aTailsprintfBuf DCB "tailsprintf buffer overflow in %s "
DCB "%s line %d",0
ALIGN 4
aFailedToCreate DCB "Failed to create restart thread",0
aBenchfileInval DCB "BENCHFILE Invalid benchfile NULL",0
ALIGN 0x10
aBenchfileFaile_0 DCB "BENCHFILE Failed to open benchfile"
DCB " '%s'",0
aBenchfileFaile DCB "BENCHFILE Failed to read benchfile"
DCB " '%s'",0
aBenchfileNoWor DCB "BENCHFILE No work in benchfile '%s"
DCB "'",0
aBenchfileInval_1 DCB "BENCHFILE Invalid input file line "
DCB "%d - field count is %d but should "
DCB "be %d",0
ALIGN 0x10
aBenchfileInval_0 DCB "BENCHFILE Invalid input file line "
DCB "%d field %d (%s) length is %d but "
DCB "should be %d",0
ALIGN 4
aBenchfileInval_2 DCB "BENCHFILE Invalid input file line "
DCB "%d field %d (%s) length is %d but "
DCB "should be least %d",0
ALIGN 4
aNoncetime DCB "NonceTime",0
ALIGN 4
a0000000C DCB "0000000%c",0
ALIGN 4
a8s DCB "%.8s",0
ALIGN 4
a08lx DCB "%08lx",0
ALIGN 4
aRetrievingBloc DCB "Retrieving block template from poo"
DCB "l %s",0
ALIGN 4
aTestingPoolS DCB "Testing pool %s",0
unk_5211C DCB 0x46 ; F
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x20
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x75 ; u
DCB 0x6D ; m
DCB 0x20
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x68 ; h
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x64 ; d
dword_5213C DCD 0
unk_52140 DCB 0x46 ; F
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x20
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x75 ; u
DCB 0x6D ; m
DCB 0x20
DCB 0x72 ; r
DCB 0x74 ; t
DCB 0x68 ; h
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x64 ; d
dword_52160 DCD 0
aCurlInitialisa DCB "CURL initialisation failed",0
ALIGN 0x10
aProbingForGbtS DCB "Probing for GBT support",0
aGbtCoinbaseApp DCB "GBT coinbase + append support foun"
DCB "d, switching to GBT protocol",0
ALIGN 4
aGbtCoinbaseWit DCB "GBT coinbase without append found,"
DCB " switching to GBT solo protocol",0
ALIGN 4
aNoGbtCoinbaseA DCB "No GBT coinbase + append support f"
DCB "ound, pool unusable if it has no s"
DCB "tratum",0
ALIGN 4
aTestingPoolDSt DCB "Testing pool %d stratum %s",0
ALIGN 4
aSwitchingPoolD DCB "Switching pool %d %s to %s",0
ALIGN 0x10
aNoStratumGbtOr DCB "No Stratum, GBT or Solo support in"
DCB " pool %d %s unable to use",0
aFailedToRetrie DCB "FAILED to retrieve work from pool "
DCB "%u %s",0
aPoolUSlowDownO DCB "Pool %u slow/down or URL or creden"
DCB "tials invalid",0
aSuccessfullyRo DCB "Successfully rolled work",0
ALIGN 0x10
aFailedToCalloc DCB "Failed to calloc work in make_work"
DCB 0
ALIGN 4
aSummaryOfRunti DCB 0xA
DCB "Summary of runtime statistics:",0xA
DCB 0
ALIGN 4
aStartedAtS DCB "Started at %s",0
ALIGN 4
aPoolS DCB "Pool: %s",0
ALIGN 4
aRuntimeDHrsDMi DCB "Runtime: %d hrs : %d mins : %d sec"
DCB "s",0
aAverageHashrat DCB "Average hashrate: %.1f Mhash/s",0
ALIGN 4
aSolvedBlocksD DCB "Solved blocks: %d",0
ALIGN 4
aBestShareDiffi DCB "Best share difficulty: %s",0
ALIGN 4
aShareSubmissio DCB "Share submissions: %lld",0
aAcceptedShares DCB "Accepted shares: %lld",0
ALIGN 4
aRejectedShares DCB "Rejected shares: %lld",0
ALIGN 0x10
aAcceptedDiffic DCB "Accepted difficulty shares: %1.f",0
ALIGN 4
aRejectedDiffic DCB "Rejected difficulty shares: %1.f",0
ALIGN 4
aRejectRatio1f DCB "Reject ratio: %.1f%%",0
ALIGN 0x10
aHardwareErrors DCB "Hardware errors: %d",0
aUtilityAccepte DCB "Utility (accepted shares / min): %"
DCB ".2f/min",0
ALIGN 0x10
aWorkUtilityDif DCB "Work Utility (diff1 shares solved "
DCB "/ min): %.2f/min",0xA,0
aStaleSubmissio DCB "Stale submissions discarded due to"
DCB " new blocks: %lld",0
aUnableToGetWor DCB "Unable to get work from server occ"
DCB "asions: %d",0
ALIGN 4
aWorkItemsGener DCB "Work items generated locally: %d",0
ALIGN 4
aSubmittingWork DCB "Submitting work remotely delay occ"
DCB "asions: %d",0
ALIGN 4
aNewBlocksDetec DCB "New blocks detected on network: %d"
DCB 0xA,0
aSolvedDBlockS DCB "SOLVED %d BLOCK%s!",0
ALIGN 4
aShareSubmissio_0 DCB " Share submissions: %lld",0
ALIGN 0x10
aAcceptedShares_0 DCB " Accepted shares: %lld",0
ALIGN 4
aRejectedShares_0 DCB " Rejected shares: %lld",0
ALIGN 0x10
aAcceptedDiffic_0 DCB " Accepted difficulty shares: %1.f",0
ALIGN 4
aRejectedDiffic_0 DCB " Rejected difficulty shares: %1.f",0
ALIGN 4
aRejectRatio1f_0 DCB " Reject ratio: %.1f%%",0
ALIGN 0x10
aItemsWorkedOnD DCB " Items worked on: %d",0
ALIGN 4
aStaleSubmissio_0 DCB " Stale submissions discarded due t"
DCB "o new blocks: %d",0
ALIGN 4
aUnableToGetWor_0 DCB " Unable to get work from server oc"
DCB "casions: %d",0
ALIGN 4
aSubmittingWork_0 DCB " Submitting work remotely delay oc"
DCB "casions: %d",0xA,0
ALIGN 4
aSummaryOfPerDe DCB "Summary of per device statistics:",0xA
DCB 0
ALIGN 0x10
aMined0fAccepte DCB "Mined %.0f accepted shares of %d r"
DCB "equested",0xA,0
aWarningMinedOn DCB "WARNING - Mined only %.0f shares o"
DCB "f %d requested.",0
ALIGN 0x10
aFailedToGetSys DCB "Failed to get sysinfo, errno:%u, r"
DCB "eason:%s",0xA,0
aAttemptingToRe DCB "Attempting to restart %s",0
ALIGN 4
aFailedToRestar DCB "Failed to restart application",0
ALIGN 4
aReceivedKillMe DCB "Received kill message",0
ALIGN 0x10
aKillingOffWatc DCB "Killing off watchpool thread",0
ALIGN 0x10
aKillingOffWatc_0 DCB "Killing off watchdog thread",0
aShuttingDownMi DCB "Shutting down mining threads",0
ALIGN 4
aKillingOffApiT DCB "Killing off API thread",0
ALIGN 4
aKillingOffMini DCB "Killing off mining threads",0
ALIGN 0x10
aPoolDSAliveTes DCB "Pool %d %s alive, testing stabilit"
DCB "y",0
aPoolDSAlive DCB "Pool %d %s alive",0
ALIGN 4
aStratumConnect DCB "Stratum connection to pool %d resu"
DCB "med",0
ALIGN 0x10
aFailedToPthrea DCB "Failed to pthread_cond_init in add"
DCB "_pool",0
aMethodGetworkP DCB "{",0x22,"method",0x22,": ",0x22,"g"
DCB "etwork",0x22,", ",0x22,"params",0x22
DCB ": [], ",0x22,"id",0x22,":0}",0xA,0
ALIGN 4
aUseOnlyUserPas DCB "Use only user + pass or userpass, "
DCB "but not both",0
ALIGN 4
aFailedToFindDe DCB "Failed to find : delimited user in"
DCB "fo",0
ALIGN 0x10
aFailedToGetMod DCB "Failed to get modified IP address",0
ALIGN 4
aMemoryAllocati DCB "Memory allocation failed",0
ALIGN 0x10
aSS_3 DCB "%s.%s",0
ALIGN 4
aOptBitmainUser DCB "opt_bitmain_user_ip_cat %d ",0
aNicehashCom DCB ".nicehash.com",0
ALIGN 4
aXnsub DCB "#xnsub",0
ALIGN 4
aPoolDExtranonc_0 DCB "Pool %d extranonce subscribing ena"
DCB "bled.",0
aNoSemicolonSep DCB "No semicolon separated quota;URL p"
DCB "air found",0
aNoParameterFor DCB "No parameter for quota found",0
ALIGN 0x10
aNoParameterFor_0 DCB "No parameter for URL found",0
ALIGN 4
aInvalidNegativ DCB "Invalid negative parameter for quo"
DCB "ta set",0
ALIGN 4
aSettingPoolDTo DCB "Setting pool %d to quota %d",0
aEnableExtranon DCB "Enable extranonce subscribe on %d",0
ALIGN 4
aDiscardedQueue DCB "Discarded queued work item",0
ALIGN 4
aSDInvalidNonce DCB "%s %d: invalid nonce - HW error",0
aSDInvalidNonce_0 DCB "%s%d: invalid nonce - HW error",0
ALIGN 4
aNewBestShareS DCB "New best share: %s",0
ALIGN 4
aFoundBlockForP DCB "Found block for pool %d!",0
ALIGN 4
aShareAboveTarg DCB "Share above target",0
ALIGN 4
aClearedDWorkIt DCB "Cleared %d work items due to strat"
DCB "um disconnect on pool %d",0
ALIGN 4
aSwitchingToPoo DCB "Switching to pool %d %s",0
aPoolDSNotRespo DCB "Pool %d %s not responding!",0
ALIGN 4
aPoolDSFailedTo DCB "Pool %d %s failed to return work",0
ALIGN 4
aWatchpool DCB "Watchpool",0
ALIGN 4
aReapedDCurlSFr DCB "Reaped %d curl%s from pool %d",0
ALIGN 4
aLostDSharesDue DCB "Lost %d shares due to no stratum s"
DCB "hare response from pool %d",0
ALIGN 4
aPoolDSStableFo DCB "Pool %d %s stable for >%d seconds",0
ALIGN 4
aLostDSharesDue_0 DCB "Lost %d shares due to stratum disc"
DCB "onnect on pool %d",0
aWaitingForWork DCB "Waiting for work to be available f"
DCB "rom pools.",0
ALIGN 0x10
aWorkAvailableF DCB "Work available from pools, resumin"
DCB "g.",0
ALIGN 4
aSwitchingToPoo_0 DCB "Switching to pool %d %s - first al"
DCB "ive pool",0
ALIGN 4
aLuSSSSUUSS DCB "%lu,%s,%s,%s,%s%u,%u,%s,%s",0xA,0
aSharelogPrintf DCB "sharelog printf error",0
ALIGN 4
aSharelogFwrite DCB "sharelog fwrite error",0
ALIGN 0x10
aGeneratedStrat_0 DCB "Generated stratum merkle %s",0
aGeneratedStrat_1 DCB "Generated stratum header %s",0
aWorkJobIdSNonc DCB "Work job_id %s nonce2 %llu ntime %"
DCB "s",0
aWorkStaleDueTo DCB "Work stale due to block mismatch",0
ALIGN 0x10
aWorkStaleDueTo_0 DCB "Work stale due to stratum inactive"
DCB 0
ALIGN 4
aWorkStaleDueTo_3 DCB "Work stale due to stratum job_id m"
DCB "ismatch",0
ALIGN 0x10
aWorkStaleDueTo_1 DCB "Work stale due to expiry",0
ALIGN 4
aWorkStaleDueTo_2 DCB "Work stale due to fail only pool m"
DCB "ismatch",0
ALIGN 4
aPoppingWorkFro DCB "Popping work from get queue to get"
DCB " work",0
aGetWorkBlocked DCB "Get work blocked for %ld seconds",0
ALIGN 4
aGotWorkFromGet DCB "Got work from get queue to get wor"
DCB "k for thread %d",0
ALIGN 4
aDiscardedDStal DCB "Discarded %d stales that didn't ma"
DCB "tch current hash",0
ALIGN 4
aThreadDLluHash DCB "[thread %d: %llu hashes, %.1f mhas"
DCB "h/sec]",0
ALIGN 4
aS_1 DCB "%s          ",0xD,0
ALIGN 4
aCgminerTimeErr DCB "cgminer time error total_secs = %f"
DCB " last_total_secs = %f",0
aDsS1mS5mS15mSA DCB "(%ds):%s (1m):%s (5m):%s (15m):%s "
DCB "(avg):%sh/s",0
ALIGN 0x10
aSDFailureDisab DCB "%s %d failure, disabling!",0
ALIGN 4
aWorkPrepareFai DCB "work prepare failed, exiting minin"
DCB "g thread %d",0
ALIGN 4
aWatchdog DCB "Watchdog",0
ALIGN 4
aPausingExecuti DCB "Pausing execution as per stop time"
DCB " %02d:%02d scheduled",0
ALIGN 0x10
aTerminatingExe DCB "Terminating execution as planned",0
ALIGN 4
aWillRestartExe DCB "Will restart execution as schedule"
DCB "d at %02d:%02d",0
ALIGN 4
aRestartingExec DCB "Restarting execution as per start "
DCB "time %02d:%02d scheduled",0
ALIGN 4
aWillPauseExecu DCB "Will pause execution as scheduled "
DCB "at %02d:%02d",0
ALIGN 4
aPushingSemPost DCB "Pushing sem post to thread %d",0
ALIGN 4
aSD_0 DCB "%s %d",0
ALIGN 4
aSRecoveredDecl DCB "%s: Recovered, declaring WELL!",0
ALIGN 4
aSIdleForMoreTh DCB "%s: Idle for more than 60 seconds,"
DCB " declaring SICK!",0
ALIGN 0x10
aSAttemptingToR DCB "%s: Attempting to restart",0
ALIGN 4
aSNotRespondedF DCB "%s: Not responded for more than 10"
DCB " minutes, declaring DEAD!",0
aDSstratum DCB "%d/SStratum",0
aFailedToCreate_0 DCB "Failed to create stratum_q in stra"
DCB "tum_sthread",0
ALIGN 4
aInSPoolDPoolUr DCB "in %s , pool: %d, pool_url: %s, mi"
DCB "ner_name: %s",0
ALIGN 4
aStratumQReturn DCB "Stratum q returned empty work",0
ALIGN 4
aPoolDAskingFor DCB "Pool %d asking for inappropriately"
DCB " long nonce2 length %d",0
ALIGN 0x10
aNotAttemptingT DCB "Not attempting to submit shares",0
aFilteringDupli DCB "Filtering duplicate share to pool "
DCB "%d",0
ALIGN 4
aFilteringHighH DCB "Filtering high hash share to pool "
DCB "%d",0
ALIGN 0x10
aParamsSSSSS08x DCB "{",0x22,"params",0x22,": [",0x22,"%"
DCB "s",0x22,", ",0x22,"%s",0x22,", ",0x22
DCB "%s",0x22,", ",0x22,"%s",0x22,", ",0x22
DCB "%s",0x22,", ",0x22,"%08x",0x22,"],"
DCB " ",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.subm"
DCB "it",0x22,"}",0
aParamsSSSSSIdD DCB "{",0x22,"params",0x22,": [",0x22,"%"
DCB "s",0x22,", ",0x22,"%s",0x22,", ",0x22
DCB "%s",0x22,", ",0x22,"%s",0x22,", ",0x22
DCB "%s",0x22,"], ",0x22,"id",0x22,": %"
DCB "d, ",0x22,"method",0x22,": ",0x22,"m"
DCB "ining.submit",0x22,"}",0
aSubmittingShar DCB "Submitting share %08lx to pool %d",0
ALIGN 4
aPoolDCommunica DCB "Pool %d communication resumed, sub"
DCB "mitting work",0
ALIGN 4
aSuccessfullySu DCB "Successfully submitted, adding to "
DCB "stratum_shares db",0
aPoolDStratumSh DCB "Pool %d stratum share submission f"
DCB "ailure",0
ALIGN 4
aLowmemOptionPr DCB "Lowmem option prevents resubmittin"
DCB "g stratum share",0
ALIGN 0x10
aNoMatchingSess DCB "No matching session id for resubmi"
DCB "tting stratum share",0
ALIGN 4
aFailedToSubmit DCB "Failed to submit stratum share, di"
DCB "scarding",0
ALIGN 4
aPoolDStratumSh_0 DCB "Pool %d stratum share submission l"
DCB "ag time %d seconds",0
ALIGN 4
aGbt DCB "GBT ",0
ALIGN 4
aBlockExistsOom DCB "block_exists OOM",0
ALIGN 4
aNetworkDiffSet DCB "Network diff set to %s",0
ALIGN 0x10
aDeletedBlockDF DCB "Deleted block %d from database",0
ALIGN 0x10
a02d02d02d03d DCB "[%02d:%02d:%02d.%03d]",0
ALIGN 4
aNewBlockSDiffS DCB "New block: %s... diff %s",0
ALIGN 4
aStratumFromPoo_0 DCB "Stratum from pool %d detected new "
DCB "block at height %d",0
ALIGN 4
aSlongpollFromP_0 DCB "%sLONGPOLL from pool %d detected n"
DCB "ew block",0
ALIGN 4
aNewBlockDetect DCB "New block detected on network befo"
DCB "re pool notification",0
ALIGN 0x10
aNewBlockDetect_0 DCB "New block detected on network",0
ALIGN 0x10
aStaleDataFromP DCB "Stale data from pool %d at height "
DCB "%d",0
ALIGN 4
aPoolDNowUpToDa DCB "Pool %d now up to date at height %"
DCB "d",0
aStratumFromPoo DCB "Stratum from pool %d requested wor"
DCB "k restart",0
aSlongpollFromP DCB "%sLONGPOLL from pool %d requested "
DCB "work restart",0
ALIGN 4
aBlock DCB " BLOCK!",0
aDRstratum DCB "%d/RStratum",0
aStratumSelectF DCB "Stratum select failed on pool %d w"
DCB "ith value %d",0
ALIGN 4
aStratumConnect_0 DCB "Stratum connection to pool %d inte"
DCB "rrupted",0
ALIGN 4
aJsonRpcNonMeth DCB "JSON-RPC non method decode failed:"
DCB " %s",0
ALIGN 0x10
aMiningConfigur DCB "mining.configure",0
ALIGN 4
aAcceptedUntrac DCB "Accepted untracked stratum share f"
DCB "rom pool %d",0
ALIGN 4
aRejectedUntrac DCB "Rejected untracked stratum share f"
DCB "rom pool %d",0
ALIGN 4
aPoolDStratumSh_1 DCB "Pool %d stratum share result lag t"
DCB "ime %d seconds",0
ALIGN 4
a08lxDiffSLluS DCB "%08lx Diff %s/%llu%s",0
ALIGN 0x10
aProofOfWorkRes_0 DCB "PROOF OF WORK RESULT: true (yay!!!"
DCB ")",0
aAcceptedSSDPoo DCB "Accepted %s %s %d pool %d %s%s",0
ALIGN 4
aAcceptedSSDSS DCB "Accepted %s %s %d %s%s",0
ALIGN 4
aAccept_0 DCB "accept",0
ALIGN 4
aSuccessfullyMi DCB "Successfully mined %d accepted sha"
DCB "res as requested and exiting.",0
aRejectingPoolD DCB "Rejecting pool %d now accepting sh"
DCB "ares, re-enabling!",0
ALIGN 4
aProofOfWorkRes DCB "PROOF OF WORK RESULT: false (boooo"
DCB "o)",0
ALIGN 4
aRejectReason DCB "reject-reason",0
ALIGN 4
aRejectedSSDSSS DCB "Rejected %s %s %d %s%s %s%s versio"
DCB "n 0x%x",0
ALIGN 0x10
aPoolDRejectedD DCB "Pool %d rejected %d sequential sha"
DCB "res, disabling!",0
ALIGN 4
aUnknownStratum DCB "Unknown stratum msg: %s",0
aPushingWorkFro DCB "Pushing work from pool %d to hash "
DCB "queue",0
aAcceptedSDBenc DCB "Accepted %s %d benchmark share non"
DCB "ce %08x",0
ALIGN 0x10
aPoolDStaleShar DCB "Pool %d stale share detected, subm"
DCB "itting as user requested",0
ALIGN 4
aPoolDStaleShar_0 DCB "Pool %d stale share detected, subm"
DCB "itting as pool requested",0
ALIGN 4
aPoolDStaleShar_1 DCB "Pool %d stale share detected, disc"
DCB "arding",0
ALIGN 4
aDiscard DCB "discard",0
aPushingPoolDWo DCB "Pushing pool %d work to stratum qu"
DCB "eue",0
ALIGN 4
aDiscardingWork DCB "Discarding work from removed pool",0
ALIGN 4
aPushingSubmitW DCB "Pushing submit work to work thread"
DCB 0
ALIGN 4
aFailedToCreate_1 DCB "Failed to create submit_work_threa"
DCB "d",0
aSSDShareAboveT DCB "%s %s %d: Share above target",0
ALIGN 0x10
aSDShareAboveTa DCB "%s %d: Share above target",0
ALIGN 4
aSetStartTimePo DCB "set_start_time_point total_tv_star"
DCB "t_sys=%ld total_tv_end_sys=%ld",0xA
DCB 0
ALIGN 0x10
aBeforeAddPoolP DCB "before add pool, pool->pool_no = %"
DCB "d, pool->rpc_url = %s",0xA,0
ALIGN 4
aInputPoolError DCB "Input pool error, try again",0xA,0
ALIGN 4
aTotalPoolsDNee DCB "total_pools = %d, need to remove %"
DCB "d pools",0xA,0
ALIGN 4
aAfterAddPoolPo DCB "after add pool, pool->pool_no = %d"
DCB ", pool->rpc_url = %s",0xA,0
aTotalPoolsAfte DCB "total_pools after removed = %d",0xA
DCB 0
aAfterReloadPoo DCB "after reload pool, pool->pool_no ="
DCB " %d, pool->rpc_url = %s",0xA,0
ALIGN 4
aPoolChangeSucc DCB "pool change success, send %s",0
ALIGN 4
aErrorPoolInput DCB "error pool input",0
ALIGN 0x10
aPoolDUrlSUserS_0 DCB "pool%d, url = %s, user = %s, pass "
DCB "= %s",0xA,0
aWatchpoolThrea DCB "watchpool thread create failed",0
ALIGN 4
aRb DCB "rb",0
ALIGN 4
aOpenMinerVersi DCB "Open miner version file %s error",0
ALIGN 0x10
aReadMinerVersi DCB "Read miner version file %s error %"
DCB "d",0
aMinerCompileTi DCB "Miner compile time: %s type: %s",0
aStartS DCB "START %s",0
ALIGN 0x10
aStartS_0 DCB "start %s",0xA,0
ALIGN 4
aSBadParam DCB "%s: bad param",0
ALIGN 4
aSJsonDecodeOfF DCB "%s: JSON decode of file '%s' faile"
DCB "d",0xA
DCB " %s",0
aSAfterJsonLoad DCB "%s: after json_load_file",0xA,0
ALIGN 0x10
aPass DCB "pass",0
ALIGN 4
aSSS DCB "%s",0xA
DCB "%s",0xA
DCB "%s",0xA,0
ALIGN 4
aBitmainFreqLev DCB "bitmain-freq-level",0
ALIGN 4
aRet0xX DCB "ret = 0x%x",0
ALIGN 4
aPidofS DCB "pidof %s",0
ALIGN 0x10
aPidofSCommandR DCB "pidof %s command result is: %s",0xA
DCB 0
aStrlenIsD DCB "strlen is: %d",0xA,0
ALIGN 0x10
aParsedProcIdIs DCB "Parsed proc id is: %d",0xA,0
ALIGN 4
aAppServiceSNot DCB " app-service:%s Not Found!!!",0
ALIGN 4
aDInstanceOfSIs DCB " %d instance of %s is  already Run"
DCB "ning on this machine",0
ALIGN 0x10
aSIsForbiddenTo DCB "%s is forbidden to start twice, wi"
DCB "ll exit immediately!",0
ALIGN 4
aBmminerLog DCB "bmminer.log",0
word_540E4 DCW 0x2B61
byte_540E6 DCB 0
ALIGN 4
aFailedToPthrea_0 DCB "Failed to pthread_cond_init lp_con"
DCB "d",0
aFailedToPthrea_1 DCB "Failed to pthread_cond_init restar"
DCB "t_cond",0
ALIGN 4
aFailedToPthrea_2 DCB "Failed to pthread_cond_init gws_co"
DCB "nd",0
ALIGN 0x10
aFailedToCreate_2 DCB "Failed to create getq",0
ALIGN 4
aCgminer_0 DCB "cgminer",0
aSS DCB "%s %s",0
ALIGN 4
aUsrBin DCB "/usr/bin",0
ALIGN 4
aOptionsForBoth DCB "Options for both config file and c"
DCB "ommand line",0
ALIGN 4
aOptionsForComm DCB "Options for command line only",0
ALIGN 4
aUnexpectedExtr DCB "Unexpected extra commandline argum"
DCB "ents",0
ALIGN 4
aApiThreadCreat DCB "API thread create failed",0
ALIGN 4
aBenchfile DCB "Benchfile",0
ALIGN 4
aBenchmark DCB "Benchmark",0
ALIGN 0x10
asc_54240 DCB "?",0
ALIGN 4
aLogFilePathSOp DCB "Log file path: %s Open flag: %s",0
aLogWorkAsicNum_0 DCB "Log work asic num empty",0
aLogWorkAsicNum DCB "Log work asic num must be 1, 32, 6"
DCB "4",0
aLogWorkPathSAs DCB "Log work path: %s Asic num: %s",0
ALIGN 0x10
aLogWorkPathS DCB "Log work path: %s",0
ALIGN 4
aSTxt DCB "%s.txt",0
ALIGN 4
aLogWorkOpenFil DCB "Log work open file %s",0
ALIGN 4
aS02dTxt DCB "%s%02d.txt",0
ALIGN 0x10
aLogWorkOpenAsi DCB "Log work open asic %d file %s",0
ALIGN 0x10
aS02d02dTxt DCB "%s%02d_%02d.txt",0
aSDiff02dTxt DCB "%s_diff_%02d.txt",0
ALIGN 4
aLogWorkOpenDif DCB "Log work open diff file %s",0
ALIGN 0x10
aStartedS DCB "Started %s",0
ALIGN 4
aLoadedConfigur DCB "Loaded configuration file %s",0
ALIGN 4
aFatalJsonError DCB "Fatal JSON error in configuration "
DCB "file.",0
aConfigurationF DCB "Configuration file could not be us"
DCB "ed.",0
ALIGN 4
aErrorInConfigu DCB "Error in configuration file, parti"
DCB "ally loaded.",0
ALIGN 4
aStartCgminerWi DCB "Start cgminer with -T to see what "
DCB "failed to load.",0
ALIGN 0x10
aAllDevicesDisa DCB "All devices disabled, cannot mint!"
DCB 0
ALIGN 4
aTooManyValuesP DCB "Too many values passed to set temp"
DCB " cutoff",0
ALIGN 0x10
aBlankWorkerExi DCB "Blank worker exists.",0xA,0
ALIGN 4
aNoValidPoolsPl DCB "No valid pools, please configure t"
DCB "hem first!",0xA,0
ALIGN 4
aCheckNoPoolAnd DCB "check no pool and user retry!",0
ALIGN 4
aNeedToSpecifyA DCB "Need to specify at least one pool "
DCB "server.",0
ALIGN 4
aPoolSetupFaile DCB "Pool setup failed",0
ALIGN 4
aNoLoginCredent DCB "No login credentials supplied for "
DCB "pool %u %s",0
ALIGN 4
aPipeFailedToCr DCB "pipe - failed to create pipe for -"
DCB "-monitor",0
ALIGN 4
aDup2FailedToAl DCB "dup2 - failed to alias stderr to w"
DCB "rite end of pipe for --monitor",0
ALIGN 4
aCloseFailedToC_0 DCB "close - failed to close write end "
DCB "of pipe for --monitor",0
aSignalFailedTo DCB "signal - failed to edit signal mas"
DCB "k for --monitor",0
ALIGN 4
aForkFailedToFo DCB "fork - failed to fork child proces"
DCB "s for --monitor",0
ALIGN 4
aDup2InChildFai DCB "dup2 - in child, failed to alias r"
DCB "ead end of pipe to stdin for --mon"
DCB "itor",0
ALIGN 4
aC DCB "-c",0
ALIGN 4
aBinBash DCB "/bin/bash",0
ALIGN 4
aExeclInChildFa DCB "execl - in child failed to exec us"
DCB "er specified command for --monitor"
DCB 0
ALIGN 4
aCloseFailedToC DCB "close - failed to close read end o"
DCB "f pipe for --monitor",0
ALIGN 4
aThreadDCreateF DCB "thread %d create failed",0
aProbingForAnAl DCB "Probing for an alive pool",0
ALIGN 4
aNoServersWereF DCB "No servers were found that could b"
DCB "e used to get work from.",0
ALIGN 4
aPleaseCheckThe DCB "Please check the details from the "
DCB "list below of the servers you have"
DCB " input",0
ALIGN 0x10
aMostLikelyYouH DCB "Most likely you have input the wro"
DCB "ng URL, forgotten to add a port, o"
DCB "r have not set up workers",0
ALIGN 0x10
aPoolDUrlSUserS DCB "Pool: %d  URL: %s  User: %s  Passw"
DCB "ord: %s",0
ALIGN 4
aPressAnyKeyToE DCB "Press any key to exit, or cgminer "
DCB "will wait indefinitely for an aliv"
DCB "e pool.",0
aNoServersCould DCB "No servers could be used! Exiting."
DCB 0
ALIGN 4
aCheckSuccessSe DCB "check success, send %s",0
ALIGN 4
aCheckSuccessSe_0 DCB "check success, send %s, times=%d",0
ALIGN 4
aBitmainFlushAp DCB "bitmain_flush_api fail: send %s, t"
DCB "imes=%d, ret=%d",0
ALIGN 4
aWatchdogThread DCB "watchdog thread create failed",0
ALIGN 4
aIncorrectTotal DCB "incorrect total_control_threads (%"
DCB "d) should be 8",0
ALIGN 0x10
aUnableToSetThr DCB "Unable to set thread to high prior"
DCB "ity",0
ALIGN 4
aWorkUpdateMess DCB "Work update message received",0
ALIGN 4
aSelectingPoolD DCB "Selecting pool %d for work",0
ALIGN 4
aGeneratedStrat DCB "Generated stratum work",0
ALIGN 4
aGeneratedBench_0 DCB "Generated benchfile work",0
ALIGN 4
aGeneratedBench DCB "Generated benchmark work",0
ALIGN 4
a00000080000000 DCB "0000008000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000080020000",0
ALIGN 4
aConfigC DCB "--config|-c",0
aLoadAJsonForma DCB "Load a JSON-format configuration f"
DCB "ile",0xA
DCB "See example-S7.conf or S9.conf for"
DCB " an example configuration.",0
ALIGN 4
aDefaultConfig DCB "--default-config",0
ALIGN 4
aSpecifyTheFile DCB "Specify the filename of the defaul"
DCB "t config file",0xA
DCB "Loaded at start and used when savi"
DCB "ng without a name.",0
ALIGN 4
aHelpH DCB "--help|-h",0
ALIGN 0x10
aPrintThisMessa DCB "Print this message",0
ALIGN 4
aVersionV DCB "--version|-V",0
ALIGN 4
aDisplayVersion DCB "Display version and exit",0
ALIGN 0x10
aVersionFile DCB "--version-file",0
ALIGN 0x10
aSetMinerVersio DCB "Set miner version file",0
ALIGN 4
aLogfileOpenfla DCB "--logfile-openflag",0
ALIGN 4
aSetLogFileOpen DCB "Set log file open flag, default: a"
DCB "+",0
aLogwork DCB "--logwork",0
ALIGN 4
aSetLogWorkFile DCB "Set log work file path, following:"
DCB " minertext",0
ALIGN 4
aLogworkAsicnum DCB "--logwork-asicnum",0
ALIGN 0x10
aSetLogWorkAsic DCB "Set log work asic num, following: "
DCB "1, 32, 64",0
aLogworkDiff DCB "--logwork-diff",0
ALIGN 4
aAllowLogWorkDi DCB "Allow log work diff",0
aLogfile DCB "--logfile",0
ALIGN 4
aSetLogFileDefa DCB "Set log file, default: bmminer.log"
DCB 0
ALIGN 0x10
aApiAllow DCB "--api-allow",0
aAllowApiAccess DCB "Allow API access only to the given"
DCB " list of [G:]IP[/Prefix] addresses"
DCB "[/subnets]",0
ALIGN 4
aApiDescription DCB "--api-description",0
ALIGN 0x10
aDescriptionPla DCB "Description placed in the API stat"
DCB "us header, default: cgminer versio"
DCB "n",0
ALIGN 4
aApiGroups DCB "--api-groups",0
ALIGN 4
aApiOneLetterGr DCB "API one letter groups G:cmd:cmd[,P"
DCB ":cmd:*...] defining the cmds a gro"
DCB "ups can use",0
aBitmainUserIpC DCB "--bitmain-user-ip-cat",0
ALIGN 0x10
aEnableBitmainM DCB "Enable bitmain miner to  automatic"
DCB "ally catch user ip",0
ALIGN 4
aApiListen DCB "--api-listen",0
ALIGN 4
aEnableApiDefau DCB "Enable API, default: disabled",0
ALIGN 4
aApiMcast DCB "--api-mcast",0
aEnableApiMulti DCB "Enable API Multicast listener, def"
DCB "ault: disabled",0
ALIGN 4
aApiMcastAddr DCB "--api-mcast-addr",0
ALIGN 4
aApiMulticastLi DCB "API Multicast listen address",0
ALIGN 4
aApiMcastCode DCB "--api-mcast-code",0
ALIGN 0x10
aCodeExpectedIn DCB "Code expected in the API Multicast"
DCB " message, don't use '-'",0
ALIGN 4
aApiMcastDes DCB "--api-mcast-des",0
aDescriptionApp DCB "Description appended to the API Mu"
DCB "lticast reply, default: ''",0
ALIGN 4
aApiMcastPort DCB "--api-mcast-port",0
ALIGN 0x10
aApiMulticastLi_0 DCB "API Multicast listen port",0
ALIGN 4
aApiNetwork DCB "--api-network",0
ALIGN 4
aAllowApiIfEnab DCB "Allow API (if enabled) to listen o"
DCB "n/for any address, default: only 1"
DCB "27.0.0.1",0
ALIGN 4
aApiPort DCB "--api-port",0
ALIGN 4
aPortNumberOfMi DCB "Port number of miner API",0
ALIGN 4
aApiHost DCB "--api-host",0
ALIGN 0x10
aSpecifyApiList DCB "Specify API listen address, defaul"
DCB "t: 0.0.0.0",0
ALIGN 0x10
aBalance DCB "--balance",0
ALIGN 4
aChangeMultipoo DCB "Change multipool strategy from fai"
DCB "lover to even share balance",0
ALIGN 4
aBenchfile_0 DCB "--benchfile",0
aRunCgminerInBe DCB "Run cgminer in benchmark mode usin"
DCB "g a work file - produces no shares"
DCB 0
ALIGN 0x10
aBenchfileDispl DCB "--benchfile-display",0
aDisplayEachBen DCB "Display each benchfile nonce found"
DCB 0
ALIGN 4
aBenchmark_0 DCB "--benchmark",0
aRunCgminerInBe_0 DCB "Run cgminer in benchmark mode - pr"
DCB "oduces no shares",0
ALIGN 4
aDebugD DCB "--debug|-D",0
ALIGN 4
aEnableDebugOut DCB "Enable debug output",0
aDisableRejecti DCB "--disable-rejecting",0
aAutomaticallyD DCB "Automatically disable pools that c"
DCB "ontinually reject shares",0
ALIGN 4
aExpiryE DCB "--expiry|-E",0
aUpperBoundOnHo DCB "Upper bound on how many seconds af"
DCB "ter getting work we consider a sha"
DCB "re from it stale",0
ALIGN 4
aExtranonceSubs_0 DCB "--extranonce-subscribe",0
ALIGN 4
aEnableExtranon_0 DCB "Enable 'extranonce' stratum subscr"
DCB "ibe for MinToRRo by Zwilla",0
ALIGN 4
aFailoverOnly DCB "--failover-only",0
aDonTLeakWorkTo DCB "Don't leak work to backup pools wh"
DCB "en primary pool is lagging",0
ALIGN 4
aFixProtocol DCB "--fix-protocol",0
ALIGN 4
aDoNotRedirectT DCB "Do not redirect to a different get"
DCB "work protocol (eg. stratum)",0
ALIGN 4
aFallbackTime DCB "--fallback-time",0
aSetTimeInSecon DCB "Set time in seconds to fall back t"
DCB "o a higher priority pool after per"
DCB "iod of instability",0
ALIGN 4
aHotplug DCB "--hotplug",0
ALIGN 4
aLoadBalance DCB "--load-balance",0
ALIGN 4
aChangeMultipoo_0 DCB "Change multipool strategy from fai"
DCB "lover to quota based balance",0
ALIGN 4
aLogL DCB "--log|-l",0
ALIGN 4
aIntervalInSeco DCB "Interval in seconds between log ou"
DCB "tput",0
ALIGN 4
aLowmem DCB "--lowmem",0
ALIGN 4
aMinimiseCachin DCB "Minimise caching of shares for low"
DCB " memory applications",0
ALIGN 0x10
aMonitorM DCB "--monitor|-m",0
ALIGN 0x10
aUseCustomPipeC DCB "Use custom pipe cmd for output mes"
DCB "sages",0
aNetDelay DCB "--net-delay",0
aImposeSmallDel DCB "Impose small delays in networking "
DCB "to not overload slow routers",0
ALIGN 4
aNoPoolDisable DCB "--no-pool-disable",0
ALIGN 4
aNoSubmitStale DCB "--no-submit-stale",0
ALIGN 4
aDonTSubmitShar DCB "Don't submit shares if they are de"
DCB "tected as stale",0
ALIGN 0x10
aPerDeviceStats DCB "--per-device-stats",0
ALIGN 4
aForceVerboseMo DCB "Force verbose mode and output per-"
DCB "device statistics",0
aPools_2 DCB "--pools",0
aProtocolDumpP DCB "--protocol-dump|-P",0
ALIGN 4
aVerboseDumpOfP DCB "Verbose dump of protocol-level act"
DCB "ivities",0
ALIGN 0x10
aQueueQ DCB "--queue|-Q",0
ALIGN 4
aMaximumNumberO DCB "Maximum number of work items to ha"
DCB "ve queued",0
aQuietQ DCB "--quiet|-q",0
ALIGN 4
aDisableLogging DCB "Disable logging output, display st"
DCB "atus and errors",0
ALIGN 4
aQuotaU DCB "--quota|-U",0
ALIGN 4
aQuotaUrlCombin DCB "quota;URL combination for server w"
DCB "ith load-balance strategy quotas",0
ALIGN 4
aRealQuiet DCB "--real-quiet",0
ALIGN 4
aDisableAllOutp DCB "Disable all output",0
ALIGN 4
aRetries DCB "--retries",0
ALIGN 4
aRetryPause DCB "--retry-pause",0
ALIGN 4
aRotate DCB "--rotate",0
ALIGN 4
aChangeMultipoo_1 DCB "Change multipool strategy from fai"
DCB "lover to regularly rotate at N min"
DCB "utes",0
ALIGN 0x10
aRoundRobin DCB "--round-robin",0
ALIGN 0x10
aChangeMultipoo_2 DCB "Change multipool strategy from fai"
DCB "lover to round robin on failure",0
ALIGN 4
aScanTimeS DCB "--scan-time|-s",0
ALIGN 4
aUpperBoundOnTi DCB "Upper bound on time spent scanning"
DCB " current work, in seconds",0
aSchedStart DCB "--sched-start",0
ALIGN 0x10
aSetATimeOfDayI DCB "Set a time of day in HH:MM to star"
DCB "t mining (a once off without a sto"
DCB "p time)",0
aSchedStop DCB "--sched-stop",0
ALIGN 4
aSetATimeOfDayI_0 DCB "Set a time of day in HH:MM to stop"
DCB " mining (will quit without a start"
DCB " time)",0
ALIGN 4
aSharelog_0 DCB "--sharelog",0
ALIGN 4
aAppendShareLog DCB "Append share log to file",0
ALIGN 0x10
aShares DCB "--shares",0
ALIGN 4
aQuitAfterMinin DCB "Quit after mining N shares (defaul"
DCB "t: unlimited)",0
aSocksProxy DCB "--socks-proxy",0
ALIGN 4
aSetSocks4Proxy DCB "Set socks4 proxy (host:port)",0
ALIGN 4
aSuggestDiff DCB "--suggest-diff",0
ALIGN 4
aSuggestMinerDi DCB "Suggest miner difficulty for pool "
DCB "to user (default: none)",0
ALIGN 4
aMultiVersion DCB "--multi-version",0
aMultiVersionMi DCB "Multi version mining!",0
ALIGN 0x10
aSyslog_0 DCB "--syslog",0
ALIGN 4
aUseSystemLogFo DCB "Use system log for output messages"
DCB " (default: standard error)",0
ALIGN 4
aTextOnlyT DCB "--text-only|-T",0
ALIGN 4
aPassP DCB "--pass|-p",0
ALIGN 4
aPasswordForBit DCB "Password for bitcoin JSON-RPC serv"
DCB "er",0
ALIGN 0x10
aUrlO DCB "--url|-o",0
ALIGN 4
aUrlForBitcoinJ DCB "URL for bitcoin JSON-RPC server",0
aUserU DCB "--user|-u",0
ALIGN 4
aUsernameForBit DCB "Username for bitcoin JSON-RPC serv"
DCB "er",0
ALIGN 0x10
aUserpassO DCB "--userpass|-O",0
ALIGN 0x10
aUsernamePasswo DCB "Username:Password pair for bitcoin"
DCB " JSON-RPC server",0
ALIGN 4
aVerbose DCB "--verbose",0
ALIGN 0x10
aLogVerboseOutp DCB "Log verbose output to stderr as we"
DCB "ll as status output",0
ALIGN 4
aWidescreen DCB "--widescreen",0
ALIGN 4
aUseExtraWideDi DCB "Use extra wide display without tog"
DCB "gling",0
aWorktime DCB "--worktime",0
ALIGN 4
aDisplayExtraWo DCB "Display extra work time debug info"
DCB "rmation",0
ALIGN 4
aFtw DCB "FTW",0
a2240075 DCB "224.0.0.75",0
ALIGN 4
unk_55C38 DCB 0x63 ; c
DCB 0x67 ; g
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x20
; const char a10[]
a10 DCB "1.0."
word_55C44 DCW 0x30
ALIGN 4
aVersion_0 DCB "Version",0
aMerkleroot DCB "MerkleRoot",0
ALIGN 4
aPrevhash DCB "PrevHash",0
ALIGN 4
aDifficultybits DCB "DifficultyBits",0
ALIGN 4
aFailover DCB "Failover",0
ALIGN 4
aRoundRobin_0 DCB "Round Robin",0
aRotate_0 DCB "Rotate",0
ALIGN 4
aLoadBalance_0 DCB "Load Balance",0
ALIGN 4
aBalance_0 DCB "Balance",0
aD DCB ":D",0
ALIGN 4
aSIsNotANumber DCB "'%s' is not a number",0
ALIGN 4
aSIsOutOfRange DCB "'%s' is out of range",0
ALIGN 4
aSIsNegative DCB "'%s' is negative",0
ALIGN 4
aI DCB "%i",0
ALIGN 4
a1f DCB "%.1f",0
ALIGN 4
aU DCB "%u",0
ALIGN 4
aLi DCB "%li",0
asc_55D0C DCB "|= ",0
aOptionSUnknown DCB "Option %s: unknown entry type %u",0
ALIGN 4
aOptionSDescrip DCB "Option %s: description cannot be N"
DCB "ULL",0
ALIGN 4
aOptionSDoesNot_0 DCB "Option %s: does not begin with '-'"
DCB 0
ALIGN 0x10
aOptionSInvalid_0 DCB "Option %s: invalid long option '--"
DCB "'",0
aOptionSInvalid DCB "Option %s: invalid short option '%"
DCB ".*s'",0
ALIGN 4
aOptionSDoesNot DCB "Option %s: does not take arguments"
DCB " '%s'",0
aInvalidArgumen DCB "Invalid argument '%s'",0
ALIGN 4
aParseOne DCB "parse_one",0
ALIGN 4
aPosixlyCorrect DCB "POSIXLY_CORRECT",0
aCcanOptParseC DCB "ccan/opt/parse.c",0
ALIGN 4
aOffset0 DCB "*offset == 0",0
ALIGN 4
aSSS_0 DCB "%s: %.*s: %s",0
ALIGN 4
aDoesnTAllowAnA DCB "doesn't allow an argument",0
ALIGN 4
aRequiresAnArgu DCB "requires an argument",0
ALIGN 0x10
aUnrecognizedOp DCB "unrecognized option",0
aUsageS DCB "Usage: %s",0
ALIGN 0x10
asc_55EB0 DCB " [-",0
aS_2 DCB "%s:",0xA,0
ALIGN 4
aArg DCB " <arg>",0
ALIGN 4
asc_55EC4 DCB "                    ",0
ALIGN 4
aDefaultS DCB " (default: %s)",0
ALIGN 4
aCbBitmainSubmi DCB "cb_bitmain_submit_nonce",0
aCbBitmainApiSt DCB "cb_bitmain_api_stats",0
ALIGN 4
aCgminerSocketI_2 DCB "cgminer_socket_init",0
off_55F30 DCD sub_42448
aBitmainApiStat_0 DCB "bitmain_api_status",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    2
DCB    4
DCB    0
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x5F ; _
DCB 0x73 ; s
DCB 0x75 ; u
DCB 0x62 ; b
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x74 ; t
DCB 0x5F ; _
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x63 ; c
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
aCgminerSocketI_1 DCB "cgminer_socket_init",0
aGotNonceSzD DCB "got nonce sz %d",0
aSNonceSubmited DCB "%s nonce submited",0
ALIGN 4
aSocketaApiC DCB "socketa_api.c",0
ALIGN 4
aSDS DCB "%s(%d) : %s",0
aSLoadDataIsFai DCB "%s: load data is failed(%s)",0
aInited DCB "inited",0
ALIGN 4
aSLoadJsonFaile DCB "%s: load json failed",0
ALIGN 0x10
aChainNum DCB "chain_num",0
ALIGN 4
aRealMinerType DCB "real_miner_type",0
aFan DCB "fan",0
aChain DCB "chain",0
ALIGN 4
aFreqAvg DCB "freq_avg",0
ALIGN 4
aRateReal DCB "rate_real",0
ALIGN 0x10
aAsicNum DCB "asic_num",0
ALIGN 4
aAsic DCB "asic",0
ALIGN 4
aTempPic DCB "temp_pic",0
ALIGN 0x10
aTempPcb DCB "temp_pcb",0
ALIGN 4
aTempChip DCB "temp_chip",0
ALIGN 4
aHw DCB "hw",0
ALIGN 4
aRateArray DCB "rate_array",0
ALIGN 4
aEeprom DCB "eeprom",0
ALIGN 0x10
aSn DCB "sn",0
ALIGN 4
aEepromVol DCB "eeprom_vol",0
ALIGN 0x10
aEepromFreq DCB "eeprom_freq",0
aEepromBin DCB "eeprom_bin",0
ALIGN 4
aEepromFt DCB "eeprom_ft",0
ALIGN 4
aEepromCode DCB "eeprom_code",0
aTpl DCB "tpl",0
aTotalHash DCB "total_hash",0
ALIGN 0x10
aErrorCode DCB "error_code",0
ALIGN 4
aSInputErrDataP DCB "%s input err: data @ %p, len is %d"
DCB 0
ALIGN 0x10
aAboutToSendDet DCB "about to send detect",0
ALIGN 4
aAboutToSendJob DCB "about to send job, size is %d",0
ALIGN 4
aAboutToSendAFl DCB "about to send a flush api semaphor"
DCB "e",0
aAboutToSendShu DCB "about to send shutdown",0
ALIGN 4
aSTransInitFail DCB "%s trans init failed: %d",0
ALIGN 0x10
aSRegSReturnD DCB "%s reg %s return: %d",0
ALIGN 4
aSRegFailedWait DCB "%s reg failed wait 5s",0
ALIGN 0x10
aLoadConfInfo DCB "load_conf_info",0
ALIGN 0x10
aBitmainC5Shutd DCB "bitmain_c5_shutdown",0
aBitmainC5Prepa DCB "bitmain_c5_prepare",0
ALIGN 4
aBitmainApiStat DCB "bitmain_api_stats",0
ALIGN 4
aBitmainC5Scanh DCB "bitmain_c5_scanhash",0
; const char aBitmainC5Detec_0[]
aBitmainC5Detec_0 DCB "bitmain_c5_detect",0
ALIGN 4
aBitmainC5Detec DCB "bitmain_c5_detect",0
ALIGN 4
aRebuildJobBuf DCB "rebuild_job_buf",0
aBitmainC5Updat DCB "bitmain_c5_update",0
ALIGN 4
aBitmainC5Updat_0 DCB "bitmain_c5_update",0
ALIGN 0x10
aBitmainWorkMod DCB "bitmain-work-mode",0
ALIGN 4
aMinerMode DCB "miner-mode",0
ALIGN 0x10
aCgminerCallShu DCB "cgminer call shutdown",0
ALIGN 4
aShutdown DCB "shutdown",0
ALIGN 4
aSBitmainShutdo DCB "%s: bitmain_shutdown failed.",0
ALIGN 4
aSApiDetectFail DCB "%s: api detect failed.",0
ALIGN 4
unk_563DC DCB 0x5B ; [
DCB 0x25 ; %
DCB 0x64 ; d
DCB 0x2D ; -
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
DCB 0x2D ; -
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
DCB 0x20
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
DCB 0x3A ; :
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
DCB 0x3A ; :
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
word_563F8 DCW 0x5D
ALIGN 4
aBitmainOpensou DCB "BITMAIN_OPENSOURCE",0
ALIGN 0x10
aDriverBtmC5Soc DCB "driver-btm-c5_socketa.c",0
aHwpTotal DCB "hwp_total",0
ALIGN 4
aEepromLoaded DCB "eeprom_loaded",0
ALIGN 4
aHwp DCB "hwp",0
aCgpu DCB "cgpu",0
ALIGN 0x10
aCgminerSocketI DCB "cgminer socket init succeeds.",0
ALIGN 0x10
aCgminerSocketI_0 DCB "cgminer socket init failes.",0
aBmminerInitDon DCB "bmminer init done!!!",0
ALIGN 4
aAddCgpuCgpu DCB "add_cgpu(cgpu)",0
ALIGN 4
aMallocTempJobD DCB "malloc temp job data buf failed: %"
DCB "d",0xA,0
ALIGN 4
aJobBufTotalLen DCB "job buf total len:%d, offset:%d",0xA
DCB 0
ALIGN 0x10
aUpdateJob DCB "update job",0
ALIGN 4
aBitmainS9HasTo DCB "Bitmain S9 has to use stratum pool"
DCB "s",0
aSUpdateJobFail DCB "%s: update job failed.",0
ALIGN 4
aBitmainSoc DCB "Bitmain_SOC",0
aBtmSoc DCB "BTM_SOC",0
aFunc1Func2Func DCB "func1 func2 func3 func4",0
ALIGN 8
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aCtAMain DCB "ct_a/main",0
ALIGN 4
aXSS DCB "%x%s%s",0
ALIGN 0x10
aRegist DCB "regist",0
ALIGN 4
aXDSSS DCB "%x %d %s %s %s",0
ALIGN 4
aNoName DCB "no_name",0
aRegResp DCB "reg_resp",0
ALIGN 4
aOk DCB "OK",0
ALIGN 0x10
aCtAFcbD DCB "ct_a/fcb/%d",0
aSocketError DCB "socket error",0
ALIGN 4
aSetSockoptErr DCB "set sockopt err",0
aBindError DCB "bind error",0
ALIGN 4
aListenError DCB "listen error",0
ALIGN 4
aAcceptError DCB "accept error",0
ALIGN 4
aXS DCB "%x %s",0xA,0
ALIGN 0x10
aXDSS DCB "%x %d %s %s",0
aSocketErr DCB "socket err:",0
aConnectErr DCB "connect err:",0
ALIGN 4
a3fHeartBeats22 DCB "3f heart-beats 22027",0
ALIGN 0x10
aXRegistS DCB "%x regist %s",0
ALIGN 0x10
aXDSSS_0 DCB "%x%d%s%s%s",0
ALIGN 4
aXDSS_0 DCB "%x%d%s%s",0
ALIGN 4
asc_56768 DCB "                                ",0
ALIGN 4
; const char aDoDump[]
aDoDump DCB "do_dump",0
asc_56794 DCB "\\",0
ALIGN 4
asc_56798 DCB "\",0x22,0
ALIGN 4
aB DCB "\b",0
ALIGN 0x10
aF DCB "\f",0
ALIGN 4
aN_0 DCB "\n",0
ALIGN 4
aR DCB "\r",0
ALIGN 4
aT DCB "\t",0
ALIGN 0x10
asc_567B0 DCB "\/",0
ALIGN 4
aU04x DCB "\u%04X",0
ALIGN 4
aU04xU04x DCB "\u%04X\u%04X",0
ALIGN 4
aP DCB "%p",0
ALIGN 0x10
asc_567D0 DCB ": ",0
ALIGN 4
aNull DCB "null",0
ALIGN 4
asc_567DC DCB "{",0
ALIGN 0x10
aDumpC DCB "dump.c",0
ALIGN 4
aISize DCB "i == size",0
ALIGN 4
aW DCB "w",0
ALIGN 4
aDevUrandom DCB "/dev/urandom",0
ALIGN 4
aDecodeUnicodeE DCB "decode_unicode_escape",0
ALIGN 0x10
; const char aStreamUnget[]
aStreamUnget DCB "stream_unget",0
ALIGN 0x10
; const char aStreamGet[]
aStreamGet DCB "stream_get",0
ALIGN 4
; const char aLexUngetUnsave[]
aLexUngetUnsave DCB "lex_unget_unsave",0
ALIGN 0x10
; const char aLexScanString[]
aLexScanString DCB "lex_scan_string",0
; const char aLexScanNumber[]
aLexScanNumber DCB "lex_scan_number",0
aSNearS DCB "%s near '%s'",0
ALIGN 0x10
aSNearEndOfFile DCB "%s near end of file",0
aLoadC DCB "load.c",0
ALIGN 4
aStr0U DCB "str[0] == 'u'",0
ALIGN 4
aStreamBufferPo DCB "stream->buffer_pos > 0",0
ALIGN 4
aStreamBufferSt DCB "stream->buffer[stream->buffer_pos]"
DCB " == c",0
aCount2 DCB "count >= 2",0
ALIGN 4
aUnableToDecode DCB "unable to decode byte 0x%x",0
ALIGN 4
aCD DCB "c == d",0
ALIGN 4
aPrematureEndOf DCB "premature end of input",0
ALIGN 4
aUnexpectedNewl DCB "unexpected newline",0
ALIGN 4
aControlCharact DCB "control character 0x%x",0
ALIGN 0x10
aInvalidEscape DCB "invalid escape",0
ALIGN 0x10
aInvalidUnicode DCB "invalid Unicode escape '%.6s'",0
ALIGN 0x10
aInvalidUnicode_1 DCB "invalid Unicode '\u%04X\u%04X'",0
ALIGN 0x10
aInvalidUnicode_0 DCB "invalid Unicode '\u%04X'",0
ALIGN 4
aTooBigNegative DCB "too big negative integer",0
ALIGN 4
aTooBigInteger DCB "too big integer",0
aEndSavedTextLe DCB "end == saved_text + lex->saved_tex"
DCB "t.length",0
ALIGN 4
aRealNumberOver DCB "real number overflow",0
ALIGN 4
aMaximumParsing DCB "maximum parsing depth reached",0
ALIGN 4
aU0000IsNotAllo DCB "\u0000 is not allowed without JSON"
DCB "_ALLOW_NUL",0
ALIGN 4
aStringOrExpect DCB "string or '}' expected",0
ALIGN 4
aNulByteInObjec DCB "NUL byte in object key not support"
DCB "ed",0
ALIGN 4
aDuplicateObjec DCB "duplicate object key",0
ALIGN 4
aExpected_0 DCB "':' expected",0
ALIGN 4
aExpected_1 DCB "'}' expected",0
ALIGN 4
aInvalidToken DCB "invalid token",0
ALIGN 4
aUnexpectedToke DCB "unexpected token",0
ALIGN 4
aExpected DCB "']' expected",0
ALIGN 4
aOrExpected DCB "'[' or '{' expected",0
aEndOfFileExpec DCB "end of file expected",0
ALIGN 4
aString DCB "<string>",0
ALIGN 0x10
aWrongArguments DCB "wrong arguments",0
aBuffer DCB "<buffer>",0
ALIGN 4
aStdin_0 DCB "<stdin>",0
aStream DCB "<stream>",0
ALIGN 0x10
aUnableToOpenSS DCB "unable to open %s: %s",0
ALIGN 4
aCallback DCB "<callback>",0
ALIGN 4
aJsonpStrtod DCB "jsonp_strtod",0
ALIGN 4
aStrconvC DCB "strconv.c",0
ALIGN 0x10
aEndStrbufferVa DCB "end == strbuffer->value + strbuffe"
DCB "r->length",0
aG DCB "%.*g",0
ALIGN 4
word_56C14 DCW 0x2E2E
byte_56C16 DCB 0x2E
ALIGN 4
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x56C18
unk_56C18 DCB 0xC0
DCB 0xF9
DCB 0xFB
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x56C20
DCB    0
DCB    0
DCB    0
DCB    0
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x66EE0
off_66EE0 DCD sub_16694+1
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x66EE4
off_66EE4 DCD sub_1667C+1
; .fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x66EE8
stru_66EE8 Elf32_Dyn <1, <1>> ; DT_NEEDED libpthread.so.0
Elf32_Dyn <1, <0x321>>  ; DT_NEEDED libm.so.6
Elf32_Dyn <1, <0x350>>  ; DT_NEEDED librt.so.1
Elf32_Dyn <1, <0x379>>  ; DT_NEEDED libz.so.1
Elf32_Dyn <1, <0x383>>  ; DT_NEEDED libssl.so.1.1
Elf32_Dyn <1, <0x494>>  ; DT_NEEDED libcrypto.so.1.1
Elf32_Dyn <1, <0x542>>  ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x123FC>> ; DT_INIT
Elf32_Dyn <0xD, <0x4AD68>> ; DT_FINI
Elf32_Dyn <0x19, <0x66EE0>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x66EE4>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x101B4>> ; DT_HASH
Elf32_Dyn <5, <0x11304>> ; DT_STRTAB
Elf32_Dyn <6, <0x106D4>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0x8A1>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x67000>> ; DT_PLTGOT
Elf32_Dyn <2, <0x5E0>>  ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x11E1C>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x11DFC>> ; DT_REL
Elf32_Dyn <0x12, <0x20>> ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x11D2C>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <6>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x11BA6>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x40
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x67000
_GLOBAL_OFFSET_TABLE_ DCD stru_66EE8
DCD 0
off_67008 DCD 0
getnameinfo_ptr DCD __imp_getnameinfo
pthread_rwlock_unlock_ptr DCD __imp_pthread_rwlock_unlock
X509_check_host_ptr DCD __imp_X509_check_host
qsort_ptr DCD __imp_qsort
sigemptyset_ptr DCD __imp_sigemptyset
strerror_ptr DCD __imp_strerror
fileno_ptr DCD __imp_fileno
inet_ntop_ptr DCD __imp_inet_ntop
mkdir_ptr DCD __imp_mkdir
__sigsetjmp_ptr DCD __imp___sigsetjmp
abort_ptr DCD __imp_abort
connect_ptr DCD __imp_connect
TLS_client_method_ptr DCD __imp_TLS_client_method
localtime_ptr DCD __imp_localtime
pthread_rwlock_rdlock_ptr DCD __imp_pthread_rwlock_rdlock
memcmp_ptr DCD __imp_memcmp
SSL_CTX_free_ptr DCD __imp_SSL_CTX_free
sysconf_ptr DCD __imp_sysconf
syslog_ptr DCD __imp_syslog
clock_gettime_ptr DCD __imp_clock_gettime
__libc_start_main_ptr DCD __imp___libc_start_main
signal_ptr DCD __imp_signal
__gmon_start___ptr DCD __imp___gmon_start__
SSL_get_current_cipher_ptr DCD __imp_SSL_get_current_cipher
sched_yield_ptr DCD __imp_sched_yield
__isoc99_sscanf_ptr DCD __imp___isoc99_sscanf
vsnprintf_ptr DCD __imp_vsnprintf
inet_addr_ptr DCD __imp_inet_addr
strncpy_ptr DCD __imp_strncpy
fclose_ptr DCD __imp_fclose
fgets_ptr DCD __imp_fgets
recv_ptr DCD __imp_recv
getenv_ptr DCD __imp_getenv
strtod_ptr DCD __imp_strtod
strchr_ptr DCD __imp_strchr
strcasecmp_ptr DCD __imp_strcasecmp
dirname_ptr DCD __imp_dirname
setlogmask_ptr DCD __imp_setlogmask
pclose_ptr DCD __imp_pclose
listen_ptr DCD __imp_listen
calloc_ptr DCD __imp_calloc
SSL_write_ptr DCD __imp_SSL_write
pthread_cond_wait_ptr DCD __imp_pthread_cond_wait
sem_init_ptr DCD __imp_sem_init
stpcpy_ptr DCD __imp_stpcpy
memset_ptr DCD __imp_memset
sem_destroy_ptr DCD __imp_sem_destroy
pthread_cond_timedwait_ptr DCD __imp_pthread_cond_timedwait
freeaddrinfo_ptr DCD __imp_freeaddrinfo
perror_ptr DCD __imp_perror
SSL_set_fd_ptr DCD __imp_SSL_set_fd
strtoll_ptr DCD __imp_strtoll
floor_ptr DCD __imp_floor
__assert_fail_ptr DCD __imp___assert_fail
exp_ptr DCD __imp_exp
pthread_cond_broadcast_ptr DCD __imp_pthread_cond_broadcast
SSL_CIPHER_get_name_ptr DCD __imp_SSL_CIPHER_get_name
usleep_ptr DCD __imp_usleep
pthread_mutex_trylock_ptr DCD __imp_pthread_mutex_trylock
free_ptr DCD __imp_free
read_ptr DCD __imp_read
write_ptr DCD __imp_write
SSL_new_ptr DCD __imp_SSL_new
access_ptr DCD __imp_access
openlog_ptr DCD __imp_openlog
gettimeofday_ptr DCD __imp_gettimeofday
sem_trywait_ptr DCD __imp_sem_trywait
accept_ptr DCD __imp_accept
__res_init_ptr DCD __imp___res_init
pthread_mutex_unlock_ptr DCD __imp_pthread_mutex_unlock
SSL_read_ptr DCD __imp_SSL_read
round_ptr DCD __imp_round
BIO_new_ptr DCD __imp_BIO_new
socket_ptr DCD __imp_socket
execl_ptr DCD __imp_execl
getaddrinfo_ptr DCD __imp_getaddrinfo
fflush_ptr DCD __imp_fflush
ioctl_ptr DCD __imp_ioctl
isatty_ptr DCD __imp_isatty
SSL_CTX_get_cert_store_ptr DCD __imp_SSL_CTX_get_cert_store
pthread_mutex_lock_ptr DCD __imp_pthread_mutex_lock
strlen_ptr DCD __imp_strlen
sscanf_ptr DCD __imp_sscanf
pthread_create_ptr DCD __imp_pthread_create
execv_ptr DCD __imp_execv
lldiv_ptr DCD __imp_lldiv
memcpy_ptr DCD __imp_memcpy
fopen64_ptr DCD __imp_fopen64
pthread_cond_signal_ptr DCD __imp_pthread_cond_signal
__ctype_tolower_loc_ptr DCD __imp___ctype_tolower_loc
localeconv_ptr DCD __imp_localeconv
BIO_s_mem_ptr DCD __imp_BIO_s_mem
fgetc_ptr DCD __imp_fgetc
strtol_ptr DCD __imp_strtol
strcpy_ptr DCD __imp_strcpy
sem_post_ptr DCD __imp_sem_post
pthread_cond_destroy_ptr DCD __imp_pthread_cond_destroy
strncat_ptr DCD __imp_strncat
X509_STORE_add_cert_ptr DCD __imp_X509_STORE_add_cert
settimeofday_ptr DCD __imp_settimeofday
pthread_mutex_destroy_ptr DCD __imp_pthread_mutex_destroy
SSL_connect_ptr DCD __imp_SSL_connect
printf_ptr DCD __imp_printf
open64_ptr DCD __imp_open64
raise_ptr DCD __imp_raise
errx_ptr DCD __imp_errx
strtof_ptr DCD __imp_strtof
pthread_mutex_init_ptr DCD __imp_pthread_mutex_init
shutdown_ptr DCD __imp_shutdown
bind_ptr DCD __imp_bind
fdopen_ptr DCD __imp_fdopen
strstr_ptr DCD __imp_strstr
nice_ptr DCD __imp_nice
select_ptr DCD __imp_select
close_ptr DCD __imp_close
SSL_free_ptr DCD __imp_SSL_free
fwrite_ptr DCD __imp_fwrite
pthread_attr_setstacksize_ptr DCD __imp_pthread_attr_setstacksize
strncasecmp_ptr DCD __imp_strncasecmp
time_ptr DCD __imp_time
log10_ptr DCD __imp_log10
__ctype_b_loc_ptr DCD __imp___ctype_b_loc
fprintf_ptr DCD __imp_fprintf
BIO_write_ptr DCD __imp_BIO_write
malloc_ptr DCD __imp_malloc
sigaction_ptr DCD __imp_sigaction
sem_timedwait_ptr DCD __imp_sem_timedwait
pthread_attr_init_ptr DCD __imp_pthread_attr_init
SSL_get_peer_certificate_ptr DCD __imp_SSL_get_peer_certificate
SSL_get_verify_result_ptr DCD __imp_SSL_get_verify_result
fputc_ptr DCD __imp_fputc
strtok_ptr DCD __imp_strtok
OPENSSL_init_ssl_ptr DCD __imp_OPENSSL_init_ssl
pthread_rwlock_wrlock_ptr DCD __imp_pthread_rwlock_wrlock
sleep_ptr DCD __imp_sleep
send_ptr DCD __imp_send
SSL_shutdown_ptr DCD __imp_SSL_shutdown
pthread_rwlock_destroy_ptr DCD __imp_pthread_rwlock_destroy
strcat_ptr DCD __imp_strcat
memmove_ptr DCD __imp_memmove
pthread_testcancel_ptr DCD __imp_pthread_testcancel
popen_ptr DCD __imp_popen
X509_verify_cert_error_string_ptr DCD __imp_X509_verify_cert_error_string
dup2_ptr DCD __imp_dup2
puts_ptr DCD __imp_puts
getpid_ptr DCD __imp_getpid
prctl_ptr DCD __imp_prctl
fcntl_ptr DCD __imp_fcntl
fork_ptr DCD __imp_fork
PEM_read_bio_X509_ptr DCD __imp_PEM_read_bio_X509
SSL_CTX_new_ptr DCD __imp_SSL_CTX_new
__pthread_register_cancel_ptr DCD __imp___pthread_register_cancel
__pthread_unregister_cancel_ptr DCD __imp___pthread_unregister_cancel
BIO_free_ptr DCD __imp_BIO_free
vfprintf_ptr DCD __imp_vfprintf
snprintf_ptr DCD __imp_snprintf
OPENSSL_init_crypto_ptr DCD __imp_OPENSSL_init_crypto
strcspn_ptr DCD __imp_strcspn
fread_ptr DCD __imp_fread
pthread_cond_init_ptr DCD __imp_pthread_cond_init
strncmp_ptr DCD __imp_strncmp
kill_ptr DCD __imp_kill
nanosleep_ptr DCD __imp_nanosleep
pthread_detach_ptr DCD __imp_pthread_detach
realloc_ptr DCD __imp_realloc
pthread_rwlock_trywrlock_ptr DCD __imp_pthread_rwlock_trywrlock
pthread_setcancelstate_ptr DCD __imp_pthread_setcancelstate
sysinfo_ptr DCD __imp_sysinfo
X509_free_ptr DCD __imp_X509_free
getsockopt_ptr DCD __imp_getsockopt
pipe_ptr DCD __imp_pipe
__strdup_ptr DCD __imp___strdup
setsockopt_ptr DCD __imp_setsockopt
strpbrk_ptr DCD __imp_strpbrk
SSL_get_error_ptr DCD __imp_SSL_get_error
sem_wait_ptr DCD __imp_sem_wait
memchr_ptr DCD __imp_memchr
strcmp_ptr DCD __imp_strcmp
exit_ptr DCD __imp_exit
pthread_setcanceltype_ptr DCD __imp_pthread_setcanceltype
clock_nanosleep_ptr DCD __imp_clock_nanosleep
pthread_rwlock_init_ptr DCD __imp_pthread_rwlock_init
__pthread_unwind_next_ptr DCD __imp___pthread_unwind_next
__errno_location_ptr DCD __imp___errno_location
pthread_self_ptr DCD __imp_pthread_self
pthread_cancel_ptr DCD __imp_pthread_cancel
sprintf_ptr DCD __imp_sprintf
pthread_join_ptr DCD __imp_pthread_join
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA, ALIGN=3
; ORG 0x67300
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_67308 DCD aSummary_0 ; "summary"
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB 0x3C ; <
DCB 0xBB
DCB    4
DCB    0
DCB 0x38 ; 8
DCB 0xAF
DCB    1
DCB    0
DCB 0x24 ; $
DCB 0xBB
DCB    4
DCB    0
DCB    7
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0xBB
DCB    4
DCB    0
DCB 0x40 ; @
DCB 0x76 ; v
DCB    1
DCB    0
DCB 0x58 ; X
DCB 0xBB
DCB    4
DCB    0
DCB 0x46 ; F
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0xBB
DCB    4
DCB    0
DCB 0x70 ; p
DCB 0x8C
DCB    1
DCB    0
DCB 0x60 ; `
DCB 0xBB
DCB    4
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB 0xBB
DCB    4
DCB    0
DCB 0xF0
DCB 0x9D
DCB    1
DCB    0
DCB 0x20
DCB 0x5A ; Z
DCB    5
DCB    0
DCB 0x16
DCB    0
DCB    0
DCB    0
DCB 0x74 ; t
DCB 0xBB
DCB    4
DCB    0
DCB 0xB0
DCB 0x6B ; k
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_67368 DCD aSummary_0 ; "summary"
DCD a10                 ; "1.0."
DCD sub_1AA98
DCD aPools_0            ; "pools"
DCD a10                 ; "1.0."
DCD sub_170D4
DCD aWarning_0          ; "warning"
DCD a10                 ; "1.0."
DCD sub_18098
DCD aCgminerStats+8     ; "stats"
DCD a10                 ; "1.0."
DCD sub_16EC8
DCD aRate_0             ; "rate"
DCD a10                 ; "1.0."
DCD sub_1A6C8
DCD aReload             ; "reload"
DCD a10                 ; "1.0."
DCD sub_187D4
DCD aSleep              ; "sleep"
DCD a10                 ; "1.0."
DCD sub_17F44
ALIGN 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_673C8 DCD aRate_0   ; "rate"
DCD sub_18724
DCB    2
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB 0xB0
DCB    4
DCB    0
DCB    4
DCB 0xB0
DCB    4
DCB    0
DCB 0xFC
DCB 0xAF
DCB    4
DCB    0
DCB 0x88
DCB 0xBB
DCB    4
DCB    0
DCB  0xC
DCB 0x89
DCB    1
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0xF4
DCB 0xAF
DCB    4
DCB    0
DCB 0xEC
DCB 0xAF
DCB    4
DCB    0
DCB 0xE4
DCB 0xAF
DCB    4
DCB    0
DCB 0x90
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB 0x87
DCB    1
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0xDC
DCB 0xAF
DCB    4
DCB    0
DCB 0xD4
DCB 0xAF
DCB    4
DCB    0
DCB 0xCC
DCB 0xAF
DCB    4
DCB    0
DCB 0x98
DCB 0xBB
DCB    4
DCB    0
DCB 0xD4
DCB 0x86
DCB    1
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0xC0
DCB 0xAF
DCB    4
DCB    0
DCB 0xB4
DCB 0xAF
DCB    4
DCB    0
DCB 0xA8
DCB 0xAF
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_67440 DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x21 ; !
DCB 0x10
DCB    0
DCB    0
DCB 0x42 ; B
DCB 0x20
DCB    0
DCB    0
DCB 0x63 ; c
DCB 0x30 ; 0
DCB    0
DCB    0
DCB 0x84
DCB 0x40 ; @
DCB    0
DCB    0
DCB 0xA5
DCB 0x50 ; P
DCB    0
DCB    0
DCB 0xC6
DCB 0x60 ; `
DCB    0
DCB    0
DCB 0xE7
DCB 0x70 ; p
DCB    0
DCB    0
DCB    8
DCB 0x81
DCB    0
DCB    0
DCB 0x29 ; )
DCB 0x91
DCB    0
DCB    0
DCB 0x4A ; J
DCB 0xA1
DCB    0
DCB    0
DCB 0x6B ; k
DCB 0xB1
DCB    0
DCB    0
DCB 0x8C
DCB 0xC1
DCB    0
DCB    0
DCB 0xAD
DCB 0xD1
DCB    0
DCB    0
DCB 0xCE
DCB 0xE1
DCB    0
DCB    0
DCB 0xEF
DCB 0xF1
DCB    0
DCB    0
DCB 0x31 ; 1
DCB 0x12
DCB    0
DCB    0
DCB 0x10
DCB    2
DCB    0
DCB    0
DCB 0x73 ; s
DCB 0x32 ; 2
DCB    0
DCB    0
DCB 0x52 ; R
DCB 0x22 ; "
DCB    0
DCB    0
DCB 0xB5
DCB 0x52 ; R
DCB    0
DCB    0
DCB 0x94
DCB 0x42 ; B
DCB    0
DCB    0
DCB 0xF7
DCB 0x72 ; r
DCB    0
DCB    0
DCB 0xD6
DCB 0x62 ; b
DCB    0
DCB    0
DCB 0x39 ; 9
DCB 0x93
DCB    0
DCB    0
DCB 0x18
DCB 0x83
DCB    0
DCB    0
DCB 0x7B ; {
DCB 0xB3
DCB    0
DCB    0
DCB 0x5A ; Z
DCB 0xA3
DCB    0
DCB    0
DCB 0xBD
DCB 0xD3
DCB    0
DCB    0
DCB 0x9C
DCB 0xC3
DCB    0
DCB    0
DCB 0xFF
DCB 0xF3
DCB    0
DCB    0
DCB 0xDE
DCB 0xE3
DCB    0
DCB    0
DCB 0x62 ; b
DCB 0x24 ; $
DCB    0
DCB    0
DCB 0x43 ; C
DCB 0x34 ; 4
DCB    0
DCB    0
DCB 0x20
DCB    4
DCB    0
DCB    0
DCB    1
DCB 0x14
DCB    0
DCB    0
DCB 0xE6
DCB 0x64 ; d
DCB    0
DCB    0
DCB 0xC7
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0xA4
DCB 0x44 ; D
DCB    0
DCB    0
DCB 0x85
DCB 0x54 ; T
DCB    0
DCB    0
DCB 0x6A ; j
DCB 0xA5
DCB    0
DCB    0
DCB 0x4B ; K
DCB 0xB5
DCB    0
DCB    0
DCB 0x28 ; (
DCB 0x85
DCB    0
DCB    0
DCB    9
DCB 0x95
DCB    0
DCB    0
DCB 0xEE
DCB 0xE5
DCB    0
DCB    0
DCB 0xCF
DCB 0xF5
DCB    0
DCB    0
DCB 0xAC
DCB 0xC5
DCB    0
DCB    0
DCB 0x8D
DCB 0xD5
DCB    0
DCB    0
DCB 0x53 ; S
DCB 0x36 ; 6
DCB    0
DCB    0
DCB 0x72 ; r
DCB 0x26 ; &
DCB    0
DCB    0
DCB 0x11
DCB 0x16
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    6
DCB    0
DCB    0
DCB 0xD7
DCB 0x76 ; v
DCB    0
DCB    0
DCB 0xF6
DCB 0x66 ; f
DCB    0
DCB    0
DCB 0x95
DCB 0x56 ; V
DCB    0
DCB    0
DCB 0xB4
DCB 0x46 ; F
DCB    0
DCB    0
DCB 0x5B ; [
DCB 0xB7
DCB    0
DCB    0
DCB 0x7A ; z
DCB 0xA7
DCB    0
DCB    0
DCB 0x19
DCB 0x97
DCB    0
DCB    0
DCB 0x38 ; 8
DCB 0x87
DCB    0
DCB    0
DCB 0xDF
DCB 0xF7
DCB    0
DCB    0
DCB 0xFE
DCB 0xE7
DCB    0
DCB    0
DCB 0x9D
DCB 0xD7
DCB    0
DCB    0
DCB 0xBC
DCB 0xC7
DCB    0
DCB    0
DCB 0xC4
DCB 0x48 ; H
DCB    0
DCB    0
DCB 0xE5
DCB 0x58 ; X
DCB    0
DCB    0
DCB 0x86
DCB 0x68 ; h
DCB    0
DCB    0
DCB 0xA7
DCB 0x78 ; x
DCB    0
DCB    0
DCB 0x40 ; @
DCB    8
DCB    0
DCB    0
DCB 0x61 ; a
DCB 0x18
DCB    0
DCB    0
DCB    2
DCB 0x28 ; (
DCB    0
DCB    0
DCB 0x23 ; #
DCB 0x38 ; 8
DCB    0
DCB    0
DCB 0xCC
DCB 0xC9
DCB    0
DCB    0
DCB 0xED
DCB 0xD9
DCB    0
DCB    0
DCB 0x8E
DCB 0xE9
DCB    0
DCB    0
DCB 0xAF
DCB 0xF9
DCB    0
DCB    0
DCB 0x48 ; H
DCB 0x89
DCB    0
DCB    0
DCB 0x69 ; i
DCB 0x99
DCB    0
DCB    0
DCB  0xA
DCB 0xA9
DCB    0
DCB    0
DCB 0x2B ; +
DCB 0xB9
DCB    0
DCB    0
DCB 0xF5
DCB 0x5A ; Z
DCB    0
DCB    0
DCB 0xD4
DCB 0x4A ; J
DCB    0
DCB    0
DCB 0xB7
DCB 0x7A ; z
DCB    0
DCB    0
DCB 0x96
DCB 0x6A ; j
DCB    0
DCB    0
DCB 0x71 ; q
DCB 0x1A
DCB    0
DCB    0
DCB 0x50 ; P
DCB  0xA
DCB    0
DCB    0
DCB 0x33 ; 3
DCB 0x3A ; :
DCB    0
DCB    0
DCB 0x12
DCB 0x2A ; *
DCB    0
DCB    0
DCB 0xFD
DCB 0xDB
DCB    0
DCB    0
DCB 0xDC
DCB 0xCB
DCB    0
DCB    0
DCB 0xBF
DCB 0xFB
DCB    0
DCB    0
DCB 0x9E
DCB 0xEB
DCB    0
DCB    0
DCB 0x79 ; y
DCB 0x9B
DCB    0
DCB    0
DCB 0x58 ; X
DCB 0x8B
DCB    0
DCB    0
DCB 0x3B ; ;
DCB 0xBB
DCB    0
DCB    0
DCB 0x1A
DCB 0xAB
DCB    0
DCB    0
DCB 0xA6
DCB 0x6C ; l
DCB    0
DCB    0
DCB 0x87
DCB 0x7C ; |
DCB    0
DCB    0
DCB 0xE4
DCB 0x4C ; L
DCB    0
DCB    0
DCB 0xC5
DCB 0x5C ; \
DCB    0
DCB    0
DCB 0x22 ; "
DCB 0x2C ; ,
DCB    0
DCB    0
DCB    3
DCB 0x3C ; <
DCB    0
DCB    0
DCB 0x60 ; `
DCB  0xC
DCB    0
DCB    0
DCB 0x41 ; A
DCB 0x1C
DCB    0
DCB    0
DCB 0xAE
DCB 0xED
DCB    0
DCB    0
DCB 0x8F
DCB 0xFD
DCB    0
DCB    0
DCB 0xEC
DCB 0xCD
DCB    0
DCB    0
DCB 0xCD
DCB 0xDD
DCB    0
DCB    0
DCB 0x2A ; *
DCB 0xAD
DCB    0
DCB    0
DCB  0xB
DCB 0xBD
DCB    0
DCB    0
DCB 0x68 ; h
DCB 0x8D
DCB    0
DCB    0
DCB 0x49 ; I
DCB 0x9D
DCB    0
DCB    0
DCB 0x97
DCB 0x7E ; ~
DCB    0
DCB    0
DCB 0xB6
DCB 0x6E ; n
DCB    0
DCB    0
DCB 0xD5
DCB 0x5E ; ^
DCB    0
DCB    0
DCB 0xF4
DCB 0x4E ; N
DCB    0
DCB    0
DCB 0x13
DCB 0x3E ; >
DCB    0
DCB    0
DCB 0x32 ; 2
DCB 0x2E ; .
DCB    0
DCB    0
DCB 0x51 ; Q
DCB 0x1E
DCB    0
DCB    0
DCB 0x70 ; p
DCB  0xE
DCB    0
DCB    0
DCB 0x9F
DCB 0xFF
DCB    0
DCB    0
DCB 0xBE
DCB 0xEF
DCB    0
DCB    0
DCB 0xDD
DCB 0xDF
DCB    0
DCB    0
DCB 0xFC
DCB 0xCF
DCB    0
DCB    0
DCB 0x1B
DCB 0xBF
DCB    0
DCB    0
DCB 0x3A ; :
DCB 0xAF
DCB    0
DCB    0
DCB 0x59 ; Y
DCB 0x9F
DCB    0
DCB    0
DCB 0x78 ; x
DCB 0x8F
DCB    0
DCB    0
DCB 0x88
DCB 0x91
DCB    0
DCB    0
DCB 0xA9
DCB 0x81
DCB    0
DCB    0
DCB 0xCA
DCB 0xB1
DCB    0
DCB    0
DCB 0xEB
DCB 0xA1
DCB    0
DCB    0
DCB  0xC
DCB 0xD1
DCB    0
DCB    0
DCB 0x2D ; -
DCB 0xC1
DCB    0
DCB    0
DCB 0x4E ; N
DCB 0xF1
DCB    0
DCB    0
DCB 0x6F ; o
DCB 0xE1
DCB    0
DCB    0
DCB 0x80
DCB 0x10
DCB    0
DCB    0
DCB 0xA1
DCB    0
DCB    0
DCB    0
DCB 0xC2
DCB 0x30 ; 0
DCB    0
DCB    0
DCB 0xE3
DCB 0x20
DCB    0
DCB    0
DCB    4
DCB 0x50 ; P
DCB    0
DCB    0
DCB 0x25 ; %
DCB 0x40 ; @
DCB    0
DCB    0
DCB 0x46 ; F
DCB 0x70 ; p
DCB    0
DCB    0
DCB 0x67 ; g
DCB 0x60 ; `
DCB    0
DCB    0
DCB 0xB9
DCB 0x83
DCB    0
DCB    0
DCB 0x98
DCB 0x93
DCB    0
DCB    0
DCB 0xFB
DCB 0xA3
DCB    0
DCB    0
DCB 0xDA
DCB 0xB3
DCB    0
DCB    0
DCB 0x3D ; =
DCB 0xC3
DCB    0
DCB    0
DCB 0x1C
DCB 0xD3
DCB    0
DCB    0
DCB 0x7F ; 
DCB 0xE3
DCB    0
DCB    0
DCB 0x5E ; ^
DCB 0xF3
DCB    0
DCB    0
DCB 0xB1
DCB    2
DCB    0
DCB    0
DCB 0x90
DCB 0x12
DCB    0
DCB    0
DCB 0xF3
DCB 0x22 ; "
DCB    0
DCB    0
DCB 0xD2
DCB 0x32 ; 2
DCB    0
DCB    0
DCB 0x35 ; 5
DCB 0x42 ; B
DCB    0
DCB    0
DCB 0x14
DCB 0x52 ; R
DCB    0
DCB    0
DCB 0x77 ; w
DCB 0x62 ; b
DCB    0
DCB    0
DCB 0x56 ; V
DCB 0x72 ; r
DCB    0
DCB    0
DCB 0xEA
DCB 0xB5
DCB    0
DCB    0
DCB 0xCB
DCB 0xA5
DCB    0
DCB    0
DCB 0xA8
DCB 0x95
DCB    0
DCB    0
DCB 0x89
DCB 0x85
DCB    0
DCB    0
DCB 0x6E ; n
DCB 0xF5
DCB    0
DCB    0
DCB 0x4F ; O
DCB 0xE5
DCB    0
DCB    0
DCB 0x2C ; ,
DCB 0xD5
DCB    0
DCB    0
DCB  0xD
DCB 0xC5
DCB    0
DCB    0
DCB 0xE2
DCB 0x34 ; 4
DCB    0
DCB    0
DCB 0xC3
DCB 0x24 ; $
DCB    0
DCB    0
DCB 0xA0
DCB 0x14
DCB    0
DCB    0
DCB 0x81
DCB    4
DCB    0
DCB    0
DCB 0x66 ; f
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x47 ; G
DCB 0x64 ; d
DCB    0
DCB    0
DCB 0x24 ; $
DCB 0x54 ; T
DCB    0
DCB    0
DCB    5
DCB 0x44 ; D
DCB    0
DCB    0
DCB 0xDB
DCB 0xA7
DCB    0
DCB    0
DCB 0xFA
DCB 0xB7
DCB    0
DCB    0
DCB 0x99
DCB 0x87
DCB    0
DCB    0
DCB 0xB8
DCB 0x97
DCB    0
DCB    0
DCB 0x5F ; _
DCB 0xE7
DCB    0
DCB    0
DCB 0x7E ; ~
DCB 0xF7
DCB    0
DCB    0
DCB 0x1D
DCB 0xC7
DCB    0
DCB    0
DCB 0x3C ; <
DCB 0xD7
DCB    0
DCB    0
DCB 0xD3
DCB 0x26 ; &
DCB    0
DCB    0
DCB 0xF2
DCB 0x36 ; 6
DCB    0
DCB    0
DCB 0x91
DCB    6
DCB    0
DCB    0
DCB 0xB0
DCB 0x16
DCB    0
DCB    0
DCB 0x57 ; W
DCB 0x66 ; f
DCB    0
DCB    0
DCB 0x76 ; v
DCB 0x76 ; v
DCB    0
DCB    0
DCB 0x15
DCB 0x46 ; F
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0x56 ; V
DCB    0
DCB    0
DCB 0x4C ; L
DCB 0xD9
DCB    0
DCB    0
DCB 0x6D ; m
DCB 0xC9
DCB    0
DCB    0
DCB  0xE
DCB 0xF9
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0xE9
DCB    0
DCB    0
DCB 0xC8
DCB 0x99
DCB    0
DCB    0
DCB 0xE9
DCB 0x89
DCB    0
DCB    0
DCB 0x8A
DCB 0xB9
DCB    0
DCB    0
DCB 0xAB
DCB 0xA9
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0x58 ; X
DCB    0
DCB    0
DCB 0x65 ; e
DCB 0x48 ; H
DCB    0
DCB    0
DCB    6
DCB 0x78 ; x
DCB    0
DCB    0
DCB 0x27 ; '
DCB 0x68 ; h
DCB    0
DCB    0
DCB 0xC0
DCB 0x18
DCB    0
DCB    0
DCB 0xE1
DCB    8
DCB    0
DCB    0
DCB 0x82
DCB 0x38 ; 8
DCB    0
DCB    0
DCB 0xA3
DCB 0x28 ; (
DCB    0
DCB    0
DCB 0x7D ; }
DCB 0xCB
DCB    0
DCB    0
DCB 0x5C ; \
DCB 0xDB
DCB    0
DCB    0
DCB 0x3F ; ?
DCB 0xEB
DCB    0
DCB    0
DCB 0x1E
DCB 0xFB
DCB    0
DCB    0
DCB 0xF9
DCB 0x8B
DCB    0
DCB    0
DCB 0xD8
DCB 0x9B
DCB    0
DCB    0
DCB 0xBB
DCB 0xAB
DCB    0
DCB    0
DCB 0x9A
DCB 0xBB
DCB    0
DCB    0
DCB 0x75 ; u
DCB 0x4A ; J
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0x5A ; Z
DCB    0
DCB    0
DCB 0x37 ; 7
DCB 0x6A ; j
DCB    0
DCB    0
DCB 0x16
DCB 0x7A ; z
DCB    0
DCB    0
DCB 0xF1
DCB  0xA
DCB    0
DCB    0
DCB 0xD0
DCB 0x1A
DCB    0
DCB    0
DCB 0xB3
DCB 0x2A ; *
DCB    0
DCB    0
DCB 0x92
DCB 0x3A ; :
DCB    0
DCB    0
DCB 0x2E ; .
DCB 0xFD
DCB    0
DCB    0
DCB  0xF
DCB 0xED
DCB    0
DCB    0
DCB 0x6C ; l
DCB 0xDD
DCB    0
DCB    0
DCB 0x4D ; M
DCB 0xCD
DCB    0
DCB    0
DCB 0xAA
DCB 0xBD
DCB    0
DCB    0
DCB 0x8B
DCB 0xAD
DCB    0
DCB    0
DCB 0xE8
DCB 0x9D
DCB    0
DCB    0
DCB 0xC9
DCB 0x8D
DCB    0
DCB    0
DCB 0x26 ; &
DCB 0x7C ; |
DCB    0
DCB    0
DCB    7
DCB 0x6C ; l
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0x5C ; \
DCB    0
DCB    0
DCB 0x45 ; E
DCB 0x4C ; L
DCB    0
DCB    0
DCB 0xA2
DCB 0x3C ; <
DCB    0
DCB    0
DCB 0x83
DCB 0x2C ; ,
DCB    0
DCB    0
DCB 0xE0
DCB 0x1C
DCB    0
DCB    0
DCB 0xC1
DCB  0xC
DCB    0
DCB    0
DCB 0x1F
DCB 0xEF
DCB    0
DCB    0
DCB 0x3E ; >
DCB 0xFF
DCB    0
DCB    0
DCB 0x5D ; ]
DCB 0xCF
DCB    0
DCB    0
DCB 0x7C ; |
DCB 0xDF
DCB    0
DCB    0
DCB 0x9B
DCB 0xAF
DCB    0
DCB    0
DCB 0xBA
DCB 0xBF
DCB    0
DCB    0
DCB 0xD9
DCB 0x8F
DCB    0
DCB    0
DCB 0xF8
DCB 0x9F
DCB    0
DCB    0
DCB 0x17
DCB 0x6E ; n
DCB    0
DCB    0
DCB 0x36 ; 6
DCB 0x7E ; ~
DCB    0
DCB    0
DCB 0x55 ; U
DCB 0x4E ; N
DCB    0
DCB    0
DCB 0x74 ; t
DCB 0x5E ; ^
DCB    0
DCB    0
DCB 0x93
DCB 0x2E ; .
DCB    0
DCB    0
DCB 0xB2
DCB 0x3E ; >
DCB    0
DCB    0
DCB 0xD1
DCB  0xE
DCB    0
DCB    0
DCB 0xF0
DCB 0x1E
DCB    0
DCB    0
dword_67840 DCD 5
; _DWORD dword_67844[63]
dword_67844 DCD 0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5
DCD 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5
DCD 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3
DCD 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174
DCD 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC
DCD 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA
DCD 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7
DCD 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967
DCD 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13
DCD 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85
DCD 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3
DCD 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070
DCD 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5
DCD 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3
DCD 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208
DCD 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7
unk_67940 DCB 0xF2
DCB 0x78 ; x
DCB 0x71 ; q
DCB 0xC6
DCB 0x67 ; g
DCB 0xE6
DCB    9
DCB 0x6A ; j
DCB 0x85
DCB 0xAE
DCB 0x67 ; g
DCB 0xBB
DCB 0x72 ; r
DCB 0xF3
DCB 0x6E ; n
DCB 0x3C ; <
DCB 0x3A ; :
DCB 0xF5
DCB 0x4F ; O
DCB 0xA5
DCB 0x7F ; 
DCB 0x52 ; R
DCB  0xE
DCB 0x51 ; Q
DCB 0x8C
DCB 0x68 ; h
DCB    5
DCB 0x9B
DCB 0xAB
DCB 0xD9
DCB 0x83
DCB 0x1F
unk_67960 DCB 0x19
DCB 0xCD
DCB 0xE0
DCB 0x5B ; [
; int (*off_67964)()
off_67964 DCD sub_1EAA0
DCB    0
DCB 0x80
DCB 0x40 ; @
DCB 0xC0
DCB 0x20
DCB 0xA0
DCB 0x60 ; `
DCB 0xE0
DCB 0x10
DCB 0x90
DCB 0x50 ; P
DCB 0xD0
DCB 0x30 ; 0
DCB 0xB0
DCB 0x70 ; p
DCB 0xF0
DCB    8
DCB 0x88
DCB 0x48 ; H
DCB 0xC8
DCB 0x28 ; (
DCB 0xA8
DCB 0x68 ; h
DCB 0xE8
DCB 0x18
DCB 0x98
DCB 0x58 ; X
DCB 0xD8
DCB 0x38 ; 8
DCB 0xB8
DCB 0x78 ; x
DCB 0xF8
DCB    4
DCB 0x84
DCB 0x44 ; D
DCB 0xC4
DCB 0x24 ; $
DCB 0xA4
DCB 0x64 ; d
DCB 0xE4
DCB 0x14
DCB 0x94
DCB 0x54 ; T
DCB 0xD4
DCB 0x34 ; 4
DCB 0xB4
DCB 0x74 ; t
DCB 0xF4
DCB  0xC
DCB 0x8C
DCB 0x4C ; L
DCB 0xCC
DCB 0x2C ; ,
DCB 0xAC
DCB 0x6C ; l
DCB 0xEC
DCB 0x1C
DCB 0x9C
DCB 0x5C ; \
DCB 0xDC
DCB 0x3C ; <
DCB 0xBC
DCB 0x7C ; |
DCB 0xFC
DCB    2
DCB 0x82
DCB 0x42 ; B
DCB 0xC2
DCB 0x22 ; "
DCB 0xA2
DCB 0x62 ; b
DCB 0xE2
DCB 0x12
DCB 0x92
DCB 0x52 ; R
DCB 0xD2
DCB 0x32 ; 2
DCB 0xB2
DCB 0x72 ; r
DCB 0xF2
DCB  0xA
DCB 0x8A
DCB 0x4A ; J
DCB 0xCA
DCB 0x2A ; *
DCB 0xAA
DCB 0x6A ; j
DCB 0xEA
DCB 0x1A
DCB 0x9A
DCB 0x5A ; Z
DCB 0xDA
DCB 0x3A ; :
DCB 0xBA
DCB 0x7A ; z
DCB 0xFA
DCB    6
DCB 0x86
DCB 0x46 ; F
DCB 0xC6
DCB 0x26 ; &
DCB 0xA6
DCB 0x66 ; f
DCB 0xE6
DCB 0x16
DCB 0x96
DCB 0x56 ; V
DCB 0xD6
DCB 0x36 ; 6
DCB 0xB6
DCB 0x76 ; v
DCB 0xF6
DCB  0xE
DCB 0x8E
DCB 0x4E ; N
DCB 0xCE
DCB 0x2E ; .
DCB 0xAE
DCB 0x6E ; n
DCB 0xEE
DCB 0x1E
DCB 0x9E
DCB 0x5E ; ^
DCB 0xDE
DCB 0x3E ; >
DCB 0xBE
DCB 0x7E ; ~
DCB 0xFE
DCB    1
DCB 0x81
DCB 0x41 ; A
DCB 0xC1
DCB 0x21 ; !
DCB 0xA1
DCB 0x61 ; a
DCB 0xE1
DCB 0x11
DCB 0x91
DCB 0x51 ; Q
DCB 0xD1
DCB 0x31 ; 1
DCB 0xB1
DCB 0x71 ; q
DCB 0xF1
DCB    9
DCB 0x89
DCB 0x49 ; I
DCB 0xC9
DCB 0x29 ; )
DCB 0xA9
DCB 0x69 ; i
DCB 0xE9
DCB 0x19
DCB 0x99
DCB 0x59 ; Y
DCB 0xD9
DCB 0x39 ; 9
DCB 0xB9
DCB 0x79 ; y
DCB 0xF9
DCB    5
DCB 0x85
DCB 0x45 ; E
DCB 0xC5
DCB 0x25 ; %
DCB 0xA5
DCB 0x65 ; e
DCB 0xE5
DCB 0x15
DCB 0x95
DCB 0x55 ; U
DCB 0xD5
DCB 0x35 ; 5
DCB 0xB5
DCB 0x75 ; u
DCB 0xF5
DCB  0xD
DCB 0x8D
DCB 0x4D ; M
DCB 0xCD
DCB 0x2D ; -
DCB 0xAD
DCB 0x6D ; m
DCB 0xED
DCB 0x1D
DCB 0x9D
DCB 0x5D ; ]
DCB 0xDD
DCB 0x3D ; =
DCB 0xBD
DCB 0x7D ; }
DCB 0xFD
DCB    3
DCB 0x83
DCB 0x43 ; C
DCB 0xC3
DCB 0x23 ; #
DCB 0xA3
DCB 0x63 ; c
DCB 0xE3
DCB 0x13
DCB 0x93
DCB 0x53 ; S
DCB 0xD3
DCB 0x33 ; 3
DCB 0xB3
DCB 0x73 ; s
DCB 0xF3
DCB  0xB
DCB 0x8B
DCB 0x4B ; K
DCB 0xCB
DCB 0x2B ; +
DCB 0xAB
DCB 0x6B ; k
DCB 0xEB
DCB 0x1B
DCB 0x9B
DCB 0x5B ; [
DCB 0xDB
DCB 0x3B ; ;
DCB 0xBB
DCB 0x7B ; {
DCB 0xFB
DCB    7
DCB 0x87
DCB 0x47 ; G
DCB 0xC7
DCB 0x27 ; '
DCB 0xA7
DCB 0x67 ; g
DCB 0xE7
DCB 0x17
DCB 0x97
DCB 0x57 ; W
DCB 0xD7
DCB 0x37 ; 7
DCB 0xB7
DCB 0x77 ; w
DCB 0xF7
DCB  0xF
DCB 0x8F
DCB 0x4F ; O
DCB 0xCF
DCB 0x2F ; /
DCB 0xAF
DCB 0x6F ; o
DCB 0xEF
DCB 0x1F
DCB 0x9F
DCB 0x5F ; _
DCB 0xDF
DCB 0x3F ; ?
DCB 0xBF
DCB 0x7F ; 
DCB 0xFF
off_67A68 DCD aVersionFile ; "--version-file"
dword_67A6C DCD 2
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x18
DCB 0x84
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x30 ; 0
DCB 0x4C ; L
DCB    5
DCB    0
unk_67A84 DCB 0x48 ; H
DCB 0x4C ; L
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x84
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x5C ; \
DCB 0x4C ; L
DCB    5
DCB    0
DCB 0x80
DCB 0x4C ; L
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x83
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x8C
DCB 0x4C ; L
DCB    5
DCB    0
DCB 0xBC
DCB 0x4C ; L
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD0
DCB 0x83
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0xD0
DCB 0x4C ; L
DCB    5
DCB    0
DCB 0xFC
DCB 0x4C ; L
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x90
DCB 0xA5
DCB    6
DCB    0
DCB  0xC
DCB 0x4D ; M
DCB    5
DCB    0
DCB 0x20
DCB 0x4D ; M
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB8
DCB 0x83
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x2C ; ,
DCB 0x4D ; M
DCB    5
DCB    0
DCB 0x50 ; P
DCB 0x4D ; M
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xA7
DCB    6
DCB    0
DCB 0x5C ; \
DCB 0x4D ; M
DCB    5
DCB    0
DCB 0xAC
DCB 0x4D ; M
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC0
DCB 0x82
DCB    6
DCB    0
DCB 0xC0
DCB 0x4D ; M
DCB    5
DCB    0
DCB    8
DCB 0x4E ; N
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x7C ; |
DCB 0x60 ; `
DCB    7
DCB    0
DCB 0x18
DCB 0x4E ; N
DCB    5
DCB    0
DCB 0x68 ; h
DCB 0x4E ; N
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0x9C
DCB    2
DCB    0
DCB 0xC0
DCB 0xE8
DCB    3
DCB    0
DCB 0x88
DCB 0x8B
DCB    6
DCB    0
DCB 0x80
DCB 0x4E ; N
DCB    5
DCB    0
DCB 0xB8
DCB 0x4E ; N
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x11
DCB 0x50 ; P
DCB    7
DCB    0
DCB 0xC8
DCB 0x4E ; N
DCB    5
DCB    0
DCB 0xE8
DCB 0x4E ; N
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0x4F ; O
DCB    7
DCB    0
DCB 0xF4
DCB 0x4E ; N
DCB    5
DCB    0
DCB 0x28 ; (
DCB 0x4F ; O
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB4
DCB 0x82
DCB    6
DCB    0
DCB 0x3C ; <
DCB 0x4F ; O
DCB    5
DCB    0
DCB 0x5C ; \
DCB 0x4F ; O
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB0
DCB 0x82
DCB    6
DCB    0
DCB 0x70 ; p
DCB 0x4F ; O
DCB    5
DCB    0
DCB 0xAC
DCB 0x4F ; O
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xAC
DCB 0x82
DCB    6
DCB    0
DCB 0xBC
DCB 0x4F ; O
DCB    5
DCB    0
DCB 0xFC
DCB 0x4F ; O
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB0
DCB 0x9C
DCB    2
DCB    0
DCB 0xC0
DCB 0xE8
DCB    3
DCB    0
DCB 0xA8
DCB 0x82
DCB    6
DCB    0
DCB 0x10
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0x2C ; ,
DCB 0x50 ; P
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB    7
DCB    0
DCB 0x3C ; <
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0x8C
DCB 0x50 ; P
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB0
DCB 0x9C
DCB    2
DCB    0
DCB 0xC0
DCB 0xE8
DCB    3
DCB    0
DCB 0xBC
DCB 0x82
DCB    6
DCB    0
DCB 0x98
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0xB4
DCB 0x50 ; P
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB8
DCB 0x82
DCB    6
DCB    0
DCB 0xC0
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0xF0
DCB 0x50 ; P
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD0
DCB 0x82
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0x8A
DCB    6
DCB    0
DCB 0xFC
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0x3C ; <
DCB 0x51 ; Q
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB0
DCB 0x2D ; -
DCB    7
DCB    0
DCB 0x48 ; H
DCB 0x51 ; Q
DCB    5
DCB    0
DCB 0x90
DCB 0x51 ; Q
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0x2E ; .
DCB    7
DCB    0
DCB 0xA4
DCB 0x51 ; Q
DCB    5
DCB    0
DCB 0xC8
DCB 0x51 ; Q
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x8C
DCB    6
DCB    0
DCB 0xD4
DCB 0x51 ; Q
DCB    5
DCB    0
DCB    8
DCB 0x52 ; R
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x83
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE1
DCB 0x86
DCB    6
DCB    0
DCB 0x14
DCB 0x52 ; R
DCB    5
DCB    0
DCB 0x28 ; (
DCB 0x52 ; R
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x98
DCB 0x2E ; .
DCB    7
DCB    0
DCB 0x3C ; <
DCB 0x52 ; R
DCB    5
DCB    0
DCB 0x78 ; x
DCB 0x52 ; R
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB 0x9C
DCB    2
DCB    0
DCB 0xC0
DCB 0xE8
DCB    3
DCB    0
DCB 0xF8
DCB 0x81
DCB    6
DCB    0
DCB 0x84
DCB 0x52 ; R
DCB    5
DCB    0
DCB 0xDC
DCB 0x52 ; R
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xF8
DCB    7
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF4
DCB 0x52 ; R
DCB    5
DCB    0
DCB 0x34 ; 4
DCB 0x53 ; S
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x65 ; e
DCB 0x4F ; O
DCB    7
DCB    0
DCB 0x44 ; D
DCB 0x53 ; S
DCB    5
DCB    0
DCB 0x84
DCB 0x53 ; S
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x1C
DCB 0x8B
DCB    6
DCB    0
DCB 0x94
DCB 0x53 ; S
DCB    5
DCB    0
DCB 0xD4
DCB 0x53 ; S
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE6
DCB    3
DCB    0
DCB 0xC0
DCB 0xE8
DCB    3
DCB    0
DCB 0xF0
DCB 0x81
DCB    6
DCB    0
DCB 0xE4
DCB 0x53 ; S
DCB    5
DCB    0
DCB 0x3C ; <
DCB 0x54 ; T
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB 0x9C
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9C
DCB 0x82
DCB    6
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x48 ; H
DCB 0x54 ; T
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0x82
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0x8A
DCB    6
DCB    0
DCB 0x58 ; X
DCB 0x54 ; T
DCB    5
DCB    0
DCB 0x98
DCB 0x54 ; T
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB 0x9C
DCB    2
DCB    0
DCB 0xC0
DCB 0xE8
DCB    3
DCB    0
DCB 0xD0
DCB 0x81
DCB    6
DCB    0
DCB 0xA4
DCB 0x54 ; T
DCB    5
DCB    0
DCB 0xCC
DCB 0x54 ; T
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x84
DCB 0x4F ; O
DCB    7
DCB    0
DCB 0xD8
DCB 0x54 ; T
DCB    5
DCB    0
DCB 0x10
DCB 0x55 ; U
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9C
DCB 0xA6
DCB    6
DCB    0
DCB 0x20
DCB 0x55 ; U
DCB    5
DCB    0
DCB 0x48 ; H
DCB 0x55 ; U
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x54 ; T
DCB 0x55 ; U
DCB    5
DCB    0
DCB 0x94
DCB 0x55 ; U
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xF8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x98
DCB 0x2E ; .
DCB    7
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0xA8
DCB 0x55 ; U
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xF8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFD
DCB 0x81
DCB    6
DCB    0
DCB 0xBC
DCB 0x55 ; U
DCB    5
DCB    0
DCB 0xF0
DCB 0x55 ; U
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB 0x60 ; `
DCB    7
DCB    0
DCB    4
DCB 0x56 ; V
DCB    5
DCB    0
DCB 0x38 ; 8
DCB 0x56 ; V
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x40 ; @
DCB 0x56 ; V
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC8
DCB 0x2E ; .
DCB    7
DCB    0
DCB 0x54 ; T
DCB 0x56 ; V
DCB    5
DCB    0
DCB 0x80
DCB 0x56 ; V
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB 0x9C
DCB    2
DCB    0
DCB 0xC0
DCB 0xE8
DCB    3
DCB    0
DCB 0xC8
DCB 0x82
DCB    6
DCB    0
DCB 0x8C
DCB 0x56 ; V
DCB    5
DCB    0
DCB 0xB8
DCB 0x56 ; V
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0xC4
DCB 0x56 ; V
DCB    5
DCB    0
DCB 0xF8
DCB 0x56 ; V
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    6
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB    4
DCB 0x57 ; W
DCB    5
DCB    0
DCB 0x48 ; H
DCB 0x57 ; W
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD0
DCB 0x61 ; a
DCB    7
DCB    0
DCB 0x58 ; X
DCB 0x57 ; W
DCB    5
DCB    0
DCB 0x6C ; l
DCB 0x57 ; W
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x1C
DCB 0x83
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x78 ; x
DCB 0x57 ; W
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x1C
DCB 0x83
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x88
DCB 0x57 ; W
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x38 ; 8
DCB 0x9C
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB 0x94
DCB 0x57 ; W
DCB    5
DCB    0
DCB 0xE0
DCB 0x57 ; W
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xF0
DCB 0x82
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0x8A
DCB    6
DCB    0
DCB 0xF0
DCB 0x57 ; W
DCB    5
DCB    0
DCB 0x34 ; 4
DCB 0x58 ; X
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB 0x9C
DCB    2
DCB    0
DCB 0xC0
DCB 0xE8
DCB    3
DCB    0
DCB 0xF4
DCB 0x81
DCB    6
DCB    0
DCB 0x44 ; D
DCB 0x58 ; X
DCB    5
DCB    0
DCB 0x80
DCB 0x58 ; X
DCB    5
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0xA1
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xAC
DCB 0xA6
DCB    6
DCB    0
DCB 0x90
DCB 0x58 ; X
DCB    5
DCB    0
DCB 0xDC
DCB 0x58 ; X
DCB    5
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x91
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xA8
DCB 0xA6
DCB    6
DCB    0
DCB 0xEC
DCB 0x58 ; X
DCB    5
DCB    0
DCB 0x38 ; 8
DCB 0x59 ; Y
DCB    5
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x85
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xA4
DCB 0xA6
DCB    6
DCB    0
DCB 0x44 ; D
DCB 0x59 ; Y
DCB    5
DCB    0
DCB 0x60 ; `
DCB 0x59 ; Y
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE6
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB 0x8B
DCB    6
DCB    0
DCB 0x6C ; l
DCB 0x59 ; Y
DCB    5
DCB    0
DCB 0x9C
DCB 0x59 ; Y
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xE5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB0
DCB 0xA6
DCB    6
DCB    0
DCB 0xAC
DCB 0x59 ; Y
DCB    5
DCB    0
DCB 0xCC
DCB 0x59 ; Y
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE6
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0x61 ; a
DCB    7
DCB    0
DCB 0xDC
DCB 0x59 ; Y
DCB    5
DCB    0
DCB 0x18
DCB 0x5A ; Z
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE6
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x94
DCB 0x82
DCB    6
DCB    0
DCB 0x28 ; (
DCB 0x5A ; Z
DCB    5
DCB    0
DCB 0x40 ; @
DCB 0x5A ; Z
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x90
DCB 0x2D ; -
DCB    7
DCB    0
DCB 0x4C ; L
DCB 0x5A ; Z
DCB    5
DCB    0
DCB 0x8C
DCB 0x5A ; Z
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xF8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x7A ; z
DCB 0x60 ; `
DCB    7
DCB    0
DCB 0xFC
DCB 0x62 ; b
DCB    7
DCB    0
DCB 0x9C
DCB 0x5A ; Z
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x7C ; |
DCB    7
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB 0xA8
DCB 0x5A ; Z
DCB    5
DCB    0
DCB 0xD0
DCB 0x5A ; Z
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB    5
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB 0xDC
DCB 0x5A ; Z
DCB    5
DCB    0
DCB 0xFC
DCB 0x5A ; Z
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF0
DCB    4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB    8
DCB 0x5B ; [
DCB    5
DCB    0
DCB 0x30 ; 0
DCB 0x5B ; [
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB    2
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB 0x40 ; @
DCB 0x5B ; [
DCB    5
DCB    0
DCB 0x74 ; t
DCB 0x5B ; [
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0x86
DCB    6
DCB    0
DCB 0x80
DCB 0x5B ; [
DCB    5
DCB    0
DCB 0xB8
DCB 0x5B ; [
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xDC
DCB 0xA7
DCB    6
DCB    0
DCB 0xC8
DCB 0x5B ; [
DCB    5
DCB    0
DCB 0xF0
DCB 0x5B ; [
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE4
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x15
DCB 0x60 ; `
DCB    7
DCB    0
DCB 0xFC
DCB 0x5B ; [
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
dword_681BC DCD 1
dbl_681C0 DCFD 1.0
; char dword_681C8[]
dword_681C8 DCD 0x30
dword_681CC DCD 0
dword_681D0 DCD 5
off_681D4 DCD aD        ; ":D"
dword_681D8 DCD 0
dword_681DC DCD 0x3FF00000
dbl_681E0 DCFD 1.0
dbl_681E8 DCFD 1.84467441e19
dword_681F0 DCD 0x78
dword_681F4 DCD 0xFFFFFFFF
dword_681F8 DCD 0x78
byte_681FC DCB 1
byte_681FD DCB 1
ALIGN 0x10
dword_68200 DCD 0x64
off_68204 DCD aConfigC  ; "--config|-c"
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0x91
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB 0xF4
DCB 0x4A ; J
DCB    5
DCB    0
DCB 0x58 ; X
DCB 0x4B ; K
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB 0x84
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0x8A
DCB    6
DCB    0
DCB 0x6C ; l
DCB 0x4B ; K
DCB    5
DCB    0
DCB 0xD4
DCB 0x4B ; K
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB 0x87
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0x4B ; K
DCB    5
DCB    0
DCB 0xF4
DCB 0x4B ; K
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xB8
DCB 0xE7
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB 0x89
DCB    6
DCB    0
DCB    4
DCB 0x4C ; L
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_68290 DCD a00000080000000 ; "000000800000000000000000000000000000000"...
DCB    1
DCB    0
DCB    0
DCB    0
dword_68298 DCD 2
DCB    5
DCB    0
DCB    0
DCB    0
DCB    8
DCB    7
DCB    0
DCB    0
DCB 0x26 ; &
DCB    2
DCB    0
DCB    0
DCB 0xBC
DCB  0xF
DCB    0
DCB    0
DCB 0x88
DCB 0xCF
DCB    4
DCB    0
DCB 0x28 ; (
DCB 0x5C ; \
DCB    5
DCB    0
DCB 0x2C ; ,
DCB 0x5C ; \
DCB    5
DCB    0
DCB 0x30 ; 0
DCB 0xB9
DCB    4
DCB    0
DCB 0xBC
DCB  0xF
DCB    0
DCB    0
off_682C0 DCD unk_55C38
byte_682C4 DCB 1
ALIGN 4
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x78 ; x
DCB 0x5C ; \
DCB    5
DCB    0
DCB 0x84
DCB 0x5C ; \
DCB    5
DCB    0
DCB 0x90
DCB 0x5C ; \
DCB    5
DCB    0
DCB 0x98
DCB 0x5C ; \
DCB    5
DCB    0
DCB 0xA8
DCB 0x5C ; \
DCB    5
DCB    0
aBitmainApiDete DCB "bitmain_api_detect",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aBitmainUpdateJ DCB "bitmain_update_job",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aBitmainShutdow DCB "bitmain_shutdown",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aBitmainFlushAp_0 DCB "bitmain_flush_api",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_684F0 DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x48 ; H
DCB 0x65 ; e
DCB    5
DCB    0
DCB 0x54 ; T
DCB 0x65 ; e
DCB    5
DCB    0
off_684FC DCD sub_437A0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0x2F ; /
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC8
DCB 0x2D ; -
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB 0x59 ; Y
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    8
DCB 0x37 ; 7
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x94
DCB 0x3F ; ?
DCB    4
DCB    0
DCB 0x94
DCB 0x3F ; ?
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x84
DCB 0x2C ; ,
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
dword_68568 DCD 0x61A8
; void *(*off_6856C)(size_t size)
off_6856C DCD malloc
; void (*off_68570)(void *ptr)
off_68570 DCD free
unk_68574 DCB    5
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
unk_6857C DCB    6
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
unk_68584 DCB    7
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
; .data ends


; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x6858C
unk_6858C % 1
% 1
% 1
% 1
; LOAD ends


; Segment type: Uninitialized
AREA .bss, DATA, ALIGN=3
; ORG 0x68590
EXPORT stdin
stdin % 4               ; Copy of shared data
EXPORT stdout
stdout % 4              ; Copy of shared data
EXPORT stderr
stderr % 4              ; Copy of shared data
byte_6859C % 1
ALIGN 0x10
dword_685A0 % 4
; char s1[16]
s1 % 0x10
byte_685B4 % 1
ALIGN 4
byte_685B8 % 1
ALIGN 4
dword_685BC % 4
word_685C0 % 2
byte_685C2 % 1
ALIGN 0x20
dword_685E0 % 4
dword_685E4 % 4
dword_685E8 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
byte_686E0 % 1
byte_686E1 % 1
byte_686E2 % 1
ALIGN 8
; char byte_686E8[512]
byte_686E8 % 0x200
dword_688E8 % 4
dword_688EC % 4
dword_688F0 % 4
dword_688F4 % 4
dword_688F8 % 4
dword_688FC % 4
dword_68900 % 4
; char s[256]
s % 0x100
byte_68A04 % 1
ALIGN 4
dword_68A08 % 4
dword_68A0C % 4
byte_68A10 % 1
ALIGN 4
; char byte_68A14[200]
byte_68A14 % 0xC8
dword_68ADC % 4
dword_68AE0 % 4
dword_68AE4 % 4
dword_68AE8 % 4
; __time_t dword_68AEC[2]
dword_68AEC % 8
; __time_t dword_68AF4[2]
dword_68AF4 % 8
unk_68AFC % 1
% 1
% 1
% 1
qword_68B00 % 8
dword_68B08 % 4
dword_68B0C % 4
dword_68B10 % 4
dword_68B14 % 4
dword_68B18 % 4
byte_68B1C % 1
ALIGN 0x10
dword_68B20 % 4
dword_68B24 % 4
dword_68B28 % 4
dword_68B2C % 4
dword_68B30 % 4
dword_68B34 % 4
; char byte_68B38[40]
byte_68B38 % 0x28
dword_68B60 % 4
dword_68B64 % 4
dword_68B68 % 4
dword_68B6C % 4
dword_68B70 % 4
dword_68B74 % 4
byte_68B78 % 1
ALIGN 4
dword_68B7C % 4
dword_68B80 % 4
dword_68B84 % 4
dword_68B88 % 4
dword_68B8C % 4
dword_68B90 % 4
; __time_t dword_68B94[3]
dword_68B94 % 0xC
unk_68BA0 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; double dbl_68BA8[11]
dbl_68BA8 % 0x58
dword_68C00 % 4
dword_68C04 % 4
; pthread_mutex_t mutex
mutex pthread_mutex_t <?>
; pthread_cond_t cond
cond pthread_cond_t <?>
byte_68C50 % 1
ALIGN 4
; pthread_mutex_t stru_68C54
stru_68C54 pthread_mutex_t <?>
dword_68C6C % 4
dword_68C70 % 4
ALIGN 8
dword_68C78 % 4
; pthread_mutex_t stru_68C7C
stru_68C7C pthread_mutex_t <?>
dword_68C94 % 4
dword_68C98 % 4
dword_68C9C % 4
unk_68CA0 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_696A0 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_6A0A0 % 4
ALIGN 8
dbl_6A0A8 % 8
; char byte_6A0B0[256]
byte_6A0B0 % 0x100
; pthread_rwlock_t stru_6A1B0
stru_6A1B0 pthread_rwlock_t <?>
dword_6A1D0 % 4
; char byte_6A1D4[8]
byte_6A1D4 % 8
unk_6A1DC % 1
% 1
% 1
% 1
unk_6A1E0 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; char byte_6A1FC[32]
byte_6A1FC % 0x20
; char dest[8]
dest % 8
byte_6A224 % 1
ALIGN 4
dword_6A228 % 4
dword_6A22C % 4
dword_6A230 % 4
dword_6A234 % 4
dword_6A238 % 4
unk_6A23C % 1
% 1
% 1
% 1
unk_6A240 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_6A254 % 4
dword_6A258 % 4
; char byte_6A25C[4]
byte_6A25C % 4
unk_6A260 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; char byte_6A35C[256]
byte_6A35C % 0x100
dword_6A45C % 4
dword_6A460 % 4
unk_6A464 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_6A484 % 4
dword_6A488 % 4
; int dword_6A48C[65]
dword_6A48C % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
byte_6A590 % 1
ALIGN 4
unk_6A594 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_6A698 % 4
dword_6A69C % 4
dword_6A6A0 % 4
ALIGN 0x10
dword_6A6B0 % 4
ALIGN 8
; char byte_6A6B8[24]
byte_6A6B8 % 0x18
; char byte_6A6D0[16]
byte_6A6D0 % 0x10
; unsigned __int8 byte_6A6E0[253]
byte_6A6E0 % 0xFD
byte_6A7DD % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
qword_6A7E8 % 8
dword_6A7F0 % 4
dword_6A7F4 % 4
dword_6A7F8 % 4
; pthread_mutex_t stru_6A7FC
stru_6A7FC pthread_mutex_t <?>
dword_6A814 % 4
unk_6A818 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_6E818 % 1
% 1
% 1
% 1
; char s2[17404]
s2 % 0x43FC
dword_72C18 % 4
algn_72C1C ALIGN 0x10
unk_72C20 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; int (__fastcall *off_72C2C)(_DWORD)
off_72C2C % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_72C98 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_72D10 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; int (__fastcall *off_72D1C)(_DWORD)
off_72D1C % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dbl_72D88 % 8
byte_72D90 % 1
ALIGN 4
; pthread_mutex_t stru_72D94
stru_72D94 pthread_mutex_t <?>
dword_72DAC % 4
dword_72DB0 % 4
dword_72DB4 % 4
dword_72DB8 % 4
dword_72DBC % 4
dword_72DC0 % 4
ALIGN 8
qword_72DC8 % 8
; struct sigaction stru_72DD0
stru_72DD0 sigaction <?>
byte_72E5C % 1
ALIGN 0x10
dword_72E60 % 4
byte_72E64 % 1
ALIGN 4
; pthread_cond_t stru_72E68
stru_72E68 pthread_cond_t <?>
byte_72E98 % 1
ALIGN 4
; pthread_rwlock_t stru_72E9C
stru_72E9C pthread_rwlock_t <?>
% 1
% 1
% 1
% 1
dbl_72EC0 % 8
byte_72EC8 % 1
ALIGN 0x10
dword_72ED0 % 4
% 4
; pthread_mutex_t stru_72ED8
stru_72ED8 pthread_mutex_t <?>
qword_72EF0 % 8
dbl_72EF8 % 8
% 1
% 1
% 1
% 1
dword_72F04 % 4
dword_72F08 % 4
dword_72F0C % 4
dword_72F10 % 4
dword_72F14 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_73F1C % 4
dword_73F20 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_74F24 % 4
dbl_74F28 % 8
byte_74F30 % 1
ALIGN 8
dword_74F38 % 4
dword_74F3C % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_74F60 % 4
% 1
byte_74F65 % 1
ALIGN 4
dword_74F68 % 4
; pthread_mutex_t stru_74F6C
stru_74F6C pthread_mutex_t <?>
byte_74F84 % 1
ALIGN 4
dword_74F88 % 4
dword_74F8C % 4
; pthread_rwlock_t stru_74F90
stru_74F90 pthread_rwlock_t <?>
dbl_74FB0 % 8
qword_74FB8 % 8
; pthread_rwlock_t stru_74FC0
stru_74FC0 pthread_rwlock_t <?>
dword_74FE0 % 4
; pthread_mutex_t stru_74FE4
stru_74FE4 pthread_mutex_t <?>
; int dword_74FFC[3]
dword_74FFC % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
qword_75008 % 8
byte_75010 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
byte_76014 % 1
ALIGN 4
; pthread_mutex_t stru_76018
stru_76018 pthread_mutex_t <?>
byte_76030 % 1
ALIGN 8
dword_76038 % 4
dword_7603C % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_76060 % 4
dword_76064 % 4
byte_76068 % 1
ALIGN 4
dword_7606C % 4
dword_76070 % 4
dword_76074 % 4
byte_76078 % 1
ALIGN 2
byte_7607A % 1
ALIGN 0x10
dword_76080 % 4
; struct sigaction stru_76084
stru_76084 sigaction <?>
; pthread_mutex_t stru_76110
stru_76110 pthread_mutex_t <?>
; pthread_rwlock_t stru_76128
stru_76128 pthread_rwlock_t <?>
; pthread_mutex_t stru_76148
stru_76148 pthread_mutex_t <?>
; pthread_rwlock_t rwlock
rwlock pthread_rwlock_t <?>
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_76188 % 4
% 4
% 1
% 1
% 1
% 1
dword_76194 % 4
; pthread_cond_t stru_76198
stru_76198 pthread_cond_t <?>
dbl_761C8 % 8
byte_761D0 % 1
ALIGN 4
dword_761D4 % 4
dword_761D8 % 4
dword_761DC % 4
dword_761E0 % 4
; char byte_761E4[68]
byte_761E4 % 0x44
dword_76228 % 4
ALIGN 0x10
dword_76230 % 4
byte_76234 % 1
ALIGN 4
; struct sigaction stru_76238
stru_76238 sigaction <?>
byte_762C4 % 1
ALIGN 4
qword_762C8 % 8
dbl_762D0 % 8
dbl_762D8 % 8
byte_762E0 % 1
ALIGN 4
dword_762E4 % 4
dword_762E8 % 4
dword_762EC % 4
dword_762F0 % 4
dword_762F4 % 4
dword_762F8 % 4
unk_762FC % 1
% 1
% 1
% 1
; pthread_mutex_t stru_76300
stru_76300 pthread_mutex_t <?>
unk_76318 % 1
% 1
% 1
% 1
dword_7631C % 4
dword_76320 % 4
byte_76324 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; char byte_76424[16]
byte_76424 % 0x10
; char byte_76434[32]
byte_76434 % 0x20
; char byte_76454[3780]
byte_76454 % 0xEC4
unk_77318 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; char src[48]
src % 0x30
dbl_77CF0 % 8
; char byte_77CF8[32]
byte_77CF8 % 0x20
dword_77D18 % 4
dword_77D1C % 4
dword_77D20 % 4
ALIGN 8
; pthread_mutex_t stru_77D28
stru_77D28 pthread_mutex_t <?>
; .bss ends


; Segment type: Externs
; int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, socklen_t hostlen, char *serv, socklen_t servlen, unsigned int flags)
IMPORT __imp_getnameinfo
; int pthread_rwlock_unlock(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_unlock
IMPORT __imp_X509_check_host
; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
IMPORT __imp_qsort
; int sigemptyset(sigset_t *set)
IMPORT __imp_sigemptyset
; char *strerror(int errnum)
IMPORT __imp_strerror
; int fileno(FILE *stream)
IMPORT __imp_fileno
; const char *inet_ntop(int af, const void *cp, char *buf, socklen_t len)
IMPORT __imp_inet_ntop
; int mkdir(const char *path, __mode_t mode)
IMPORT __imp_mkdir
; int __sigsetjmp(struct __jmp_buf_tag *env, int savemask)
IMPORT __imp___sigsetjmp
; void abort(void)
IMPORT __imp_abort
; int connect(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_connect
IMPORT __imp_TLS_client_method
; struct tm *localtime(const time_t *timer)
IMPORT __imp_localtime
; int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_rdlock
; int memcmp(const void *s1, const void *s2, size_t n)
IMPORT __imp_memcmp
IMPORT __imp_SSL_CTX_free
; int sysconf(int name)
IMPORT __imp_sysconf
; void syslog(int pri, const char *fmt, ...)
IMPORT __imp_syslog
; int clock_gettime(clockid_t clock_id, struct timespec *tp)
IMPORT __imp_clock_gettime
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; __sighandler_t signal(int sig, __sighandler_t handler)
IMPORT __imp_signal
IMPORT __imp_SSL_get_current_cipher
; int sched_yield(void)
IMPORT __imp_sched_yield
IMPORT __imp___isoc99_sscanf
; int vsnprintf(char *s, size_t maxlen, const char *format, __gnuc_va_list arg)
IMPORT __imp_vsnprintf
; in_addr_t inet_addr(const char *cp)
IMPORT __imp_inet_addr
; char *strncpy(char *dest, const char *src, size_t n)
IMPORT __imp_strncpy
; int fclose(FILE *stream)
IMPORT __imp_fclose
; char *fgets(char *s, int n, FILE *stream)
IMPORT __imp_fgets
; ssize_t recv(int fd, void *buf, size_t n, int flags)
IMPORT __imp_recv
; char *getenv(const char *name)
IMPORT __imp_getenv
; double strtod(const char *nptr, char **endptr)
IMPORT __imp_strtod
; char *strchr(const char *s, int c)
IMPORT __imp_strchr
; int strcasecmp(const char *s1, const char *s2)
IMPORT __imp_strcasecmp
; char *dirname(char *path)
IMPORT __imp_dirname
; int setlogmask(int mask)
IMPORT __imp_setlogmask
; int pclose(FILE *stream)
IMPORT __imp_pclose
; int listen(int fd, int n)
IMPORT __imp_listen
; void *calloc(size_t nmemb, size_t size)
IMPORT __imp_calloc
IMPORT __imp_SSL_write
; int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)
IMPORT __imp_pthread_cond_wait
; int sem_init(sem_t *sem, int pshared, unsigned int value)
IMPORT __imp_sem_init
IMPORT __imp_stpcpy
; void *memset(void *s, int c, size_t n)
IMPORT __imp_memset
; int sem_destroy(sem_t *sem)
IMPORT __imp_sem_destroy
; int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime)
IMPORT __imp_pthread_cond_timedwait
; void freeaddrinfo(struct addrinfo *ai)
IMPORT __imp_freeaddrinfo
; void perror(const char *s)
IMPORT __imp_perror
IMPORT __imp_SSL_set_fd
; __int64 strtoll(const char *nptr, char **endptr, int base)
IMPORT __imp_strtoll
; double floor(double x)
IMPORT __imp_floor
; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
IMPORT __imp___assert_fail
; double exp(double x)
IMPORT __imp_exp
; int pthread_cond_broadcast(pthread_cond_t *cond)
IMPORT __imp_pthread_cond_broadcast
IMPORT __imp_SSL_CIPHER_get_name
; int usleep(__useconds_t useconds)
IMPORT __imp_usleep
; int pthread_mutex_trylock(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_trylock
; void free(void *ptr)
IMPORT __imp_free
; ssize_t read(int fd, void *buf, size_t nbytes)
IMPORT __imp_read
; ssize_t write(int fd, const void *buf, size_t n)
IMPORT __imp_write
IMPORT __imp_SSL_new
; int access(const char *name, int type)
IMPORT __imp_access
; void openlog(const char *ident, int option, int facility)
IMPORT __imp_openlog
; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
IMPORT __imp_gettimeofday
; int sem_trywait(sem_t *sem)
IMPORT __imp_sem_trywait
; int accept(int fd, struct sockaddr *addr, socklen_t *addr_len)
IMPORT __imp_accept
; int __res_init(void)
IMPORT __imp___res_init
; int pthread_mutex_unlock(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_unlock
IMPORT __imp_SSL_read
IMPORT __imp_round
IMPORT __imp_BIO_new
; int socket(int domain, int type, int protocol)
IMPORT __imp_socket
; int execl(const char *path, const char *arg, ...)
IMPORT __imp_execl
; int getaddrinfo(const char *name, const char *service, const struct addrinfo *req, struct addrinfo **pai)
IMPORT __imp_getaddrinfo
; int fflush(FILE *stream)
IMPORT __imp_fflush
; int ioctl(int fd, unsigned int request, ...)
IMPORT __imp_ioctl
; int isatty(int fd)
IMPORT __imp_isatty
IMPORT __imp_SSL_CTX_get_cert_store
; int pthread_mutex_lock(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_lock
; size_t strlen(const char *s)
IMPORT __imp_strlen
; int sscanf(const char *s, const char *format, ...)
IMPORT __imp_sscanf
; int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg)
IMPORT __imp_pthread_create
; int execv(const char *path, char *const argv[])
IMPORT __imp_execv
IMPORT __imp_lldiv
; void *memcpy(void *dest, const void *src, size_t n)
IMPORT __imp_memcpy
IMPORT __imp_fopen64
; int pthread_cond_signal(pthread_cond_t *cond)
IMPORT __imp_pthread_cond_signal
; const __int32_t **__ctype_tolower_loc(void)
IMPORT __imp___ctype_tolower_loc
; struct lconv *localeconv(void)
IMPORT __imp_localeconv
IMPORT __imp_BIO_s_mem
; int fgetc(FILE *stream)
IMPORT __imp_fgetc
; int strtol(const char *nptr, char **endptr, int base)
IMPORT __imp_strtol
; char *strcpy(char *dest, const char *src)
IMPORT __imp_strcpy
; int sem_post(sem_t *sem)
IMPORT __imp_sem_post
; int pthread_cond_destroy(pthread_cond_t *cond)
IMPORT __imp_pthread_cond_destroy
; char *strncat(char *dest, const char *src, size_t n)
IMPORT __imp_strncat
IMPORT __imp_X509_STORE_add_cert
; int settimeofday(const struct timeval *tv, const struct timezone *tz)
IMPORT __imp_settimeofday
; int pthread_mutex_destroy(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_destroy
IMPORT __imp_SSL_connect
; int printf(const char *format, ...)
IMPORT __imp_printf
IMPORT __imp_open64
; int raise(int sig)
IMPORT __imp_raise
; void errx(int status, const char *format, ...)
IMPORT __imp_errx
IMPORT __imp_strtof
; int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr)
IMPORT __imp_pthread_mutex_init
; int shutdown(int fd, int how)
IMPORT __imp_shutdown
; int bind(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_bind
; FILE *fdopen(int fd, const char *modes)
IMPORT __imp_fdopen
; char *strstr(const char *haystack, const char *needle)
IMPORT __imp_strstr
; int nice(int inc)
IMPORT __imp_nice
; int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)
IMPORT __imp_select
; int close(int fd)
IMPORT __imp_close
IMPORT __imp_SSL_free
; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
IMPORT __imp_fwrite
; int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize)
IMPORT __imp_pthread_attr_setstacksize
; int strncasecmp(const char *s1, const char *s2, size_t n)
IMPORT __imp_strncasecmp
; time_t time(time_t *timer)
IMPORT __imp_time
; double log10(double x)
IMPORT __imp_log10
; const unsigned __int16 **__ctype_b_loc(void)
IMPORT __imp___ctype_b_loc
; int fprintf(FILE *stream, const char *format, ...)
IMPORT __imp_fprintf
IMPORT __imp_BIO_write
; void *malloc(size_t size)
IMPORT __imp_malloc
; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
IMPORT __imp_sigaction
; int sem_timedwait(sem_t *sem, const struct timespec *abstime)
IMPORT __imp_sem_timedwait
; int pthread_attr_init(pthread_attr_t *attr)
IMPORT __imp_pthread_attr_init
IMPORT __imp_SSL_get_peer_certificate
IMPORT __imp_SSL_get_verify_result
; int fputc(int c, FILE *stream)
IMPORT __imp_fputc
; char *strtok(char *s, const char *delim)
IMPORT __imp_strtok
IMPORT __imp_OPENSSL_init_ssl
; int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_wrlock
; unsigned int sleep(unsigned int seconds)
IMPORT __imp_sleep
; ssize_t send(int fd, const void *buf, size_t n, int flags)
IMPORT __imp_send
IMPORT __imp_SSL_shutdown
; int pthread_rwlock_destroy(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_destroy
; char *strcat(char *dest, const char *src)
IMPORT __imp_strcat
; void *memmove(void *dest, const void *src, size_t n)
IMPORT __imp_memmove
; void pthread_testcancel(void)
IMPORT __imp_pthread_testcancel
; FILE *popen(const char *command, const char *modes)
IMPORT __imp_popen
IMPORT __imp_X509_verify_cert_error_string
; int dup2(int fd, int fd2)
IMPORT __imp_dup2
; int puts(const char *s)
IMPORT __imp_puts
; __pid_t getpid(void)
IMPORT __imp_getpid
; int prctl(int option, ...)
IMPORT __imp_prctl
; int fcntl(int fd, int cmd, ...)
IMPORT __imp_fcntl
; __pid_t fork(void)
IMPORT __imp_fork
IMPORT __imp_PEM_read_bio_X509
IMPORT __imp_SSL_CTX_new
; void __pthread_register_cancel(__pthread_unwind_buf_t *buf)
IMPORT __imp___pthread_register_cancel
; void __pthread_unregister_cancel(__pthread_unwind_buf_t *buf)
IMPORT __imp___pthread_unregister_cancel
IMPORT __imp_BIO_free
; int vfprintf(FILE *s, const char *format, __gnuc_va_list arg)
IMPORT __imp_vfprintf
; int snprintf(char *s, size_t maxlen, const char *format, ...)
IMPORT __imp_snprintf
IMPORT __imp_OPENSSL_init_crypto
; size_t strcspn(const char *s, const char *reject)
IMPORT __imp_strcspn
; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
IMPORT __imp_fread
; int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *cond_attr)
IMPORT __imp_pthread_cond_init
; int strncmp(const char *s1, const char *s2, size_t n)
IMPORT __imp_strncmp
; int kill(__pid_t pid, int sig)
IMPORT __imp_kill
; int nanosleep(const struct timespec *requested_time, struct timespec *remaining)
IMPORT __imp_nanosleep
; int pthread_detach(pthread_t th)
IMPORT __imp_pthread_detach
; void *realloc(void *ptr, size_t size)
IMPORT __imp_realloc
; int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_trywrlock
; int pthread_setcancelstate(int state, int *oldstate)
IMPORT __imp_pthread_setcancelstate
; int sysinfo(struct sysinfo *info)
IMPORT __imp_sysinfo
IMPORT __imp_X509_free
; int getsockopt(int fd, int level, int optname, void *optval, socklen_t *optlen)
IMPORT __imp_getsockopt
; int pipe(int pipedes[2])
IMPORT __imp_pipe
; char *__strdup(const char *s)
IMPORT __imp___strdup
; int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen)
IMPORT __imp_setsockopt
; char *strpbrk(const char *s, const char *accept)
IMPORT __imp_strpbrk
IMPORT __imp_SSL_get_error
; int sem_wait(sem_t *sem)
IMPORT __imp_sem_wait
; void *memchr(const void *s, int c, size_t n)
IMPORT __imp_memchr
; int strcmp(const char *s1, const char *s2)
IMPORT __imp_strcmp
; void exit(int status)
IMPORT __imp_exit
; int pthread_setcanceltype(int type, int *oldtype)
IMPORT __imp_pthread_setcanceltype
; int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *req, struct timespec *rem)
IMPORT __imp_clock_nanosleep
; int pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr)
IMPORT __imp_pthread_rwlock_init
; void __pthread_unwind_next(__pthread_unwind_buf_t *buf)
IMPORT __imp___pthread_unwind_next, WEAK
; int *__errno_location(void)
IMPORT __imp___errno_location
; pthread_t pthread_self(void)
IMPORT __imp_pthread_self
; int pthread_cancel(pthread_t th)
IMPORT __imp_pthread_cancel
; int sprintf(char *s, const char *format, ...)
IMPORT __imp_sprintf
; int pthread_join(pthread_t th, void **thread_return)
IMPORT __imp_pthread_join
IMPORT __imp___gmon_start__, WEAK
IMPORT _ITM_deregisterTMCloneTable, WEAK
IMPORT _ITM_registerTMCloneTable, WEAK

END start

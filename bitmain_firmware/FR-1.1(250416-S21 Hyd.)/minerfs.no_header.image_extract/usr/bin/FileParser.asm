;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : B6F64A433BC48059C29081E2AC28E3C1A4570DEF47E2973C4CE4EDCD320F07BA
; Input MD5    : F8CF225246F8FA8331737BE509240EED
; Input CRC32  : C902549F
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/hashsource_antminer_S21x/bitmain_firmware/FR-1.1(250416-S21 Hyd.)/minerfs.no_header.image_extract/usr/bin/FileParser
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libcrypto.so.1.1'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD _start+1            ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x5958              ; SHT file offset
DCD 0x5000400           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 9                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x1A                ; Number of entries in SHT
DCW 0x19                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0x4378              ; File offset
DCD unk_14378           ; Virtual address
DCD 0x14378             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x154               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x10154             ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0x4384              ; Size in file image
DCD 0x4384              ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0x4F08              ; File offset
DCD off_24F08           ; Virtual address
DCD 0x24F08             ; Physical address
DCD 0x930               ; Size in file image
DCD 0x934               ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0x4F10              ; File offset
DCD stru_24F10          ; Virtual address
DCD 0x24F10             ; Physical address
DCD 0xF0                ; Size in file image
DCD 0xF0                ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x170               ; File offset
DCD dword_10170         ; Virtual address
DCD 0x10170             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHT Entry 8
DCD 0x6474E552          ; Type: RO-AFTER
DCD 0x4F08              ; File offset
DCD off_24F08           ; Virtual address
DCD 0x24F08             ; Physical address
DCD 0xF8                ; Size in file image
DCD 0xF8                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10154
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10170 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 3, 2, 0          ; ABI: Linux 3.2.0
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0x25, 0x65, 0x58, 0x2E, 0xB1, 0xF4, 0xCA ; Desc
DCB 5, 0x82, 0x37, 0x7C, 0xBD, 0xB2, 0x72
DCB 0x53, 0x80, 0xB8, 0x60, 0xAC, 0xB7
; ELF Hash Table
elf_hash_nbucket DCD 0x11
elf_hash_nchain DCD 0x1C
elf_hash_bucket DCD 0, 0, 0, 9, 0x16, 0x19, 0, 0x1B, 0xF
DCD 0x15, 0x1A, 0, 0x11, 6, 0xC, 0x17, 0
elf_hash_chain DCD 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 0, 1, 0
DCD 0, 0, 0xE, 0xD, 8, 0xB, 0xA, 0x12, 0x13
DCD 0x10, 4, 3, 2, 0x14, 0x18
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aAbort - byte_10430, 0, 0, \ ; "abort"
           0x12, 0, 0>
Elf32_Sym <aErrGetError - byte_10430, 0,\ ; "ERR_get_error"
           0, 0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_10430, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_10430, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aFclose - byte_10430, 0, 0, \ ; "fclose"
           0x12, 0, 0>
Elf32_Sym <aMemset - byte_10430, 0, 0, \ ; "memset"
           0x12, 0, 0>
Elf32_Sym <aRsaVerify - byte_10430, 0, \ ; "RSA_verify"
           0, 0x12, 0, 0>
Elf32_Sym <aItmDeregistert - byte_10430,\ ; "_ITM_deregisterTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aItmRegistertmc - byte_10430,\ ; "_ITM_registerTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aFseek - byte_10430, 0, 0, \ ; "fseek"
           0x12, 0, 0>
Elf32_Sym <aPemReadBioRsaP - byte_10430,\ ; "PEM_read_bio_RSA_PUBKEY"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSha256Final - byte_10430, 0,\ ; "SHA256_Final"
           0, 0x12, 0, 0>
Elf32_Sym <aStrlen - byte_10430, 0, 0, \ ; "strlen"
           0x12, 0, 0>
Elf32_Sym <aMemcpy - byte_10430, 0, 0, \ ; "memcpy"
           0x12, 0, 0>
Elf32_Sym <aFopen64 - byte_10430, 0, 0, \ ; "fopen64"
           0x12, 0, 0>
Elf32_Sym <aBioNewMemBuf - byte_10430, \ ; "BIO_new_mem_buf"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrcpy - byte_10430, 0, 0, \ ; "strcpy"
           0x12, 0, 0>
Elf32_Sym <aPrintf - byte_10430, 0, 0, \ ; "printf"
           0x12, 0, 0>
Elf32_Sym <aErrErrorString - byte_10430,\ ; "ERR_error_string"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFwrite - byte_10430, 0, 0, \ ; "fwrite"
           0x12, 0, 0>
Elf32_Sym <aXstat64 - byte_10430, 0, 0, \ ; "__xstat64"
           0x12, 0, 0>
Elf32_Sym <aPuts - byte_10430, 0, 0, \ ; "puts"
           0x12, 0, 0>
Elf32_Sym <aRsaFree - byte_10430, 0, 0, \ ; "RSA_free"
           0x12, 0, 0>
Elf32_Sym <aSha256Update - byte_10430, \ ; "SHA256_Update"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aBioFree - byte_10430, 0, 0, \ ; "BIO_free"
           0x12, 0, 0>
Elf32_Sym <aSha256Init - byte_10430, 0, \ ; "SHA256_Init"
           0, 0x12, 0, 0>
Elf32_Sym <aFread - byte_10430, 0, 0, \ ; "fread"
           0x12, 0, 0>
; ELF String Table
byte_10430 DCB 0
aLibcryptoSo11 DCB "libcrypto.so.1.1",0
aGmonStart DCB "__gmon_start__",0
aItmDeregistert DCB "_ITM_deregisterTMCloneTable",0
aItmRegistertmc DCB "_ITM_registerTMCloneTable",0
aBioNewMemBuf DCB "BIO_new_mem_buf",0
aPemReadBioRsaP DCB "PEM_read_bio_RSA_PUBKEY",0
aErrGetError DCB "ERR_get_error",0
aErrErrorString DCB "ERR_error_string",0
aSha256Init DCB "SHA256_Init",0
aSha256Update DCB "SHA256_Update",0
aSha256Final DCB "SHA256_Final",0
aRsaVerify DCB "RSA_verify",0
aRsaFree DCB "RSA_free",0
aBioFree DCB "BIO_free",0
aLibcSo6 DCB "libc.so.6",0
aStrcpy DCB "strcpy",0
aPuts DCB "puts",0
aAbort DCB "abort",0
aPrintf DCB "printf",0
aStrlen DCB "strlen",0
aMemset DCB "memset",0
aFseek DCB "fseek",0
aMemcpy DCB "memcpy",0
aFclose DCB "fclose",0
aFwrite DCB "fwrite",0
aFread DCB "fread",0
aFopen64 DCB "fopen64",0
aLibcStartMain DCB "__libc_start_main",0
aXstat64 DCB "__xstat64",0
aOpenssl110 DCB "OPENSSL_1_1_0",0
aGlibc24 DCB "GLIBC_2.4",0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; abort@@GLIBC_2.4
DCW 3                   ; ERR_get_error@@OPENSSL_1_1_0
DCW 2                   ; __libc_start_main@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 2                   ; fclose@@GLIBC_2.4
DCW 2                   ; memset@@GLIBC_2.4
DCW 3                   ; RSA_verify@@OPENSSL_1_1_0
DCW 0                   ; local  symbol: _ITM_deregisterTMCloneTable
DCW 0                   ; local  symbol: _ITM_registerTMCloneTable
DCW 2                   ; fseek@@GLIBC_2.4
DCW 3                   ; PEM_read_bio_RSA_PUBKEY@@OPENSSL_1_1_0
DCW 3                   ; SHA256_Final@@OPENSSL_1_1_0
DCW 2                   ; strlen@@GLIBC_2.4
DCW 2                   ; memcpy@@GLIBC_2.4
DCW 2                   ; fopen64@@GLIBC_2.4
DCW 3                   ; BIO_new_mem_buf@@OPENSSL_1_1_0
DCW 2                   ; strcpy@@GLIBC_2.4
DCW 2                   ; printf@@GLIBC_2.4
DCW 3                   ; ERR_error_string@@OPENSSL_1_1_0
DCW 2                   ; fwrite@@GLIBC_2.4
DCW 2                   ; __xstat64@@GLIBC_2.4
DCW 2                   ; puts@@GLIBC_2.4
DCW 3                   ; RSA_free@@OPENSSL_1_1_0
DCW 3                   ; SHA256_Update@@OPENSSL_1_1_0
DCW 3                   ; BIO_free@@OPENSSL_1_1_0
DCW 3                   ; SHA256_Init@@OPENSSL_1_1_0
DCW 2                   ; fread@@GLIBC_2.4
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libcrypto.so.1.1"
               aLibcryptoSo11 - byte_10430,\
               0x10, 0x20>
Elf32_Vernaux <0x66D1F10, 0, 3, \ ; "OPENSSL_1_1_0"
               aOpenssl110 - byte_10430,\
               0>
Elf32_Verneed <1, 1, \  ; "libc.so.6"
               aLibcSo6 - byte_10430, \
               0x10, 0>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_10430, 0>
; ELF REL Relocation Table
Elf32_Rel <0x25070, 0x415> ; R_ARM_GLOB_DAT __gmon_start__
; ELF JMPREL Relocation Table
Elf32_Rel <0x2500C, 0x116> ; R_ARM_JUMP_SLOT abort
Elf32_Rel <0x25010, 0x216> ; R_ARM_JUMP_SLOT ERR_get_error
Elf32_Rel <0x25014, 0x316> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x25018, 0x416> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x2501C, 0x516> ; R_ARM_JUMP_SLOT fclose
Elf32_Rel <0x25020, 0x616> ; R_ARM_JUMP_SLOT memset
Elf32_Rel <0x25024, 0x716> ; R_ARM_JUMP_SLOT RSA_verify
Elf32_Rel <0x25028, 0xA16> ; R_ARM_JUMP_SLOT fseek
Elf32_Rel <0x2502C, 0xB16> ; R_ARM_JUMP_SLOT PEM_read_bio_RSA_PUBKEY
Elf32_Rel <0x25030, 0xC16> ; R_ARM_JUMP_SLOT SHA256_Final
Elf32_Rel <0x25034, 0xD16> ; R_ARM_JUMP_SLOT strlen
Elf32_Rel <0x25038, 0xE16> ; R_ARM_JUMP_SLOT memcpy
Elf32_Rel <0x2503C, 0xF16> ; R_ARM_JUMP_SLOT fopen64
Elf32_Rel <0x25040, 0x1016> ; R_ARM_JUMP_SLOT BIO_new_mem_buf
Elf32_Rel <0x25044, 0x1116> ; R_ARM_JUMP_SLOT strcpy
Elf32_Rel <0x25048, 0x1216> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x2504C, 0x1316> ; R_ARM_JUMP_SLOT ERR_error_string
Elf32_Rel <0x25050, 0x1416> ; R_ARM_JUMP_SLOT fwrite
Elf32_Rel <0x25054, 0x1516> ; R_ARM_JUMP_SLOT __xstat64
Elf32_Rel <0x25058, 0x1616> ; R_ARM_JUMP_SLOT puts
Elf32_Rel <0x2505C, 0x1716> ; R_ARM_JUMP_SLOT RSA_free
Elf32_Rel <0x25060, 0x1816> ; R_ARM_JUMP_SLOT SHA256_Update
Elf32_Rel <0x25064, 0x1916> ; R_ARM_JUMP_SLOT BIO_free
Elf32_Rel <0x25068, 0x1A16> ; R_ARM_JUMP_SLOT SHA256_Init
Elf32_Rel <0x2506C, 0x1B16> ; R_ARM_JUMP_SLOT fread
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x106E8
CODE32



; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              sub_10868
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x106F4
CODE32



; void sub_106F4()
sub_106F4
PUSH            {LR}
LDR             LR, =(_GLOBAL_OFFSET_TABLE_ - 0x10704)
ADD             LR, PC, LR ; _GLOBAL_OFFSET_TABLE_
LDR             PC, [LR,#(off_25008 - 0x25000)]!
; End of function sub_106F4

off_10704 DCD _GLOBAL_OFFSET_TABLE_ - 0x10704
; [0000000C BYTES: COLLAPSED FUNCTION abort]
; [0000000C BYTES: COLLAPSED FUNCTION ERR_get_error]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION fclose]
; [0000000C BYTES: COLLAPSED FUNCTION memset]
; [0000000C BYTES: COLLAPSED FUNCTION RSA_verify]
; [0000000C BYTES: COLLAPSED FUNCTION fseek]
; [0000000C BYTES: COLLAPSED FUNCTION PEM_read_bio_RSA_PUBKEY]
; [0000000C BYTES: COLLAPSED FUNCTION SHA256_Final]
; [0000000C BYTES: COLLAPSED FUNCTION strlen]
; [0000000C BYTES: COLLAPSED FUNCTION memcpy]
; [0000000C BYTES: COLLAPSED FUNCTION fopen64]
; [0000000C BYTES: COLLAPSED FUNCTION BIO_new_mem_buf]
; [0000000C BYTES: COLLAPSED FUNCTION strcpy]
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION ERR_error_string]
; [0000000C BYTES: COLLAPSED FUNCTION fwrite]
CODE16
; [00000004 BYTES: COLLAPSED FUNCTION j___xstat64]
CODE32
; [0000000C BYTES: COLLAPSED FUNCTION __xstat64]
; [0000000C BYTES: COLLAPSED FUNCTION puts]
; [0000000C BYTES: COLLAPSED FUNCTION RSA_free]
; [0000000C BYTES: COLLAPSED FUNCTION SHA256_Update]
; [0000000C BYTES: COLLAPSED FUNCTION BIO_free]
; [0000000C BYTES: COLLAPSED FUNCTION SHA256_Init]
; [0000000C BYTES: COLLAPSED FUNCTION fread]

; Segment type: Pure code
AREA .text, CODE, ALIGN=3
; ORG 0x10838
CODE16


; Attributes: noreturn info_from_lumina

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT _start
_start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(nullsub_1+1)
PUSH.W          {R12}   ; fini
LDR             R0, =main ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function _start

off_1085C DCD nullsub_1+1
off_10860 DCD main
off_10864 DCD init+1
CODE32



; int sub_10868()
sub_10868
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x10878)
LDR             R2, =(__gmon_start___ptr_0 - 0x25000)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function sub_10868

off_10884 DCD _GLOBAL_OFFSET_TABLE_ - 0x10878
off_10888 DCD __gmon_start___ptr_0 - 0x25000
CODE16


; Attributes: info_from_lumina

; int deregister_tm_clones()
deregister_tm_clones
MOVW            R0, #0x5838
MOVW            R3, #0x5838
MOVT            R0, #2
MOVT            R3, #2
CMP             R3, R0
BEQ             locret_108AC
MOV             R3, #0
CBZ             R3, locret_108AC
BX              R3

locret_108AC
BX              LR
; End of function deregister_tm_clones

ALIGN 0x10


; Attributes: info_from_lumina

; int register_tm_clones()
register_tm_clones
MOVW            R0, #0x5838
MOVW            R1, #0x5838
MOVT            R0, #2
MOVT            R1, #2
SUBS            R1, R1, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_108D8
MOV             R3, #0
CBZ             R3, locret_108D8
BX              R3

locret_108D8
BX              LR
; End of function register_tm_clones

ALIGN 4



; int sub_108DC()
sub_108DC
PUSH            {R4,LR}
MOV             R4, #byte_25838
LDRB            R3, [R4]
CBNZ            R3, locret_108F2
BL              deregister_tm_clones
MOVS            R3, #1
STRB            R3, [R4]

locret_108F2
POP             {R4,PC}
; End of function sub_108DC

; [00000002 BYTES: COLLAPSED FUNCTION j_register_tm_clones]
ALIGN 4
CODE32


; Attributes: bp-based frame fpd=0xFFFFFFFC

; int __fastcall sub_108F8(const char *)
sub_108F8

var_4= -4

PUSH            {R11,LR}
ADD             R11, SP, #4
SUB             SP, SP, #8
STR             R0, [R11,#-4+var_4]
MOV             R0, #aUseage ; "Useage:\r"
BL              puts
LDR             R1, [R11,#-4+var_4]
MOV             R0, #aSOptionParamat ; "\t%s [option] [paramaters]\n\n"
BL              printf
MOV             R0, #aOptionFSPNXQ ; "\tOption:{-f} {-s} {-p} {-n} {-x} {-q}"...
BL              puts
MOV             R0, #aFMinertypeFile ; "\t\t-f [minerType] [fileName] [rootPubl"...
BL              puts
MOV             R0, #aSMinertypeFile ; "\t\t-s [minerType] [fileName] [rootPubl"...
BL              puts
MOV             R0, #aPMinertypeFile ; "\t\t-p [minerType] [fileName] [rootPubl"...
BL              puts
MOV             R0, #aXMinertypeFile ; "\t\t-x [minerType] [fileName] [rootPubl"...
BL              puts
MOV             R0, #aNNandbinfileSp ; "\t\t-n [nandBinFile]: \n\t\t\tSplite Si"...
BL              puts
MOV             R0, #aQGenerateA256b ; "\t\t-q: \n\t\t\tGenerate A 256Bytes 0xf"...
BL              puts
MOV             R0, #aReturns ; "\tReturns:"
BL              puts
MOV             R0, #a0WellDone ; "\t\t0: \n\t\t\tWell Done!\n"
BL              puts
MOV             R0, #aOthersSomethin ; "\t\tOthers: \n\t\t\tSomething Wrong!\n"
BL              puts
NOP
SUB             SP, R11, #4
POP             {R11,PC}
; End of function sub_108F8



; Attributes: bp-based frame fpd=0xFFFFFFFC

; int __fastcall sub_109A8(int)
sub_109A8

var_7FFC= -0x7FFC
s= -0xC
stream= -8
var_4= -4

PUSH            {R11,LR}
ADD             R11, SP, #4
SUB             SP, SP, #0x8000
SUB             SP, SP, #0x18
SUB             R3, R11, #-(-4+var_7FFC)
SUB             R3, R3, #4
STR             R0, [R3,#-0x14]
SUB             R3, R11, #-(-4+var_7FFC)
SUB             R3, R3, #4
MOV             R2, #0
STR             R2, [R3,#-0xC]
SUB             R3, R3, #8
MOVW            R2, #0x7FFC ; n
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
SUB             R3, R11, #-(-4+var_7FFC)
SUB             R3, R3, #4
MOV             R1, #aRb ; "rb"
LDR             R0, [R3,#-0x14]
BL              fopen64
STR             R0, [R11,#-4+stream]
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BNE             loc_10A24
MOV             R0, #aLoadNandImageF ; "Load Nand Image File Failed!"
BL              puts
MOV             R3, #1
B               loc_10B90

loc_10A24
MOV             R3, #0
STR             R3, [R11,#-4+var_4]
MOV             R3, #0
STR             R3, [R11,#-4+var_4]
B               loc_10B6C

loc_10A38
MOV             R2, #unk_2507C
LDR             R1, [R11,#-4+var_4]
MOV             R3, R1
MOV             R3, R3,LSL#5
ADD             R3, R3, R1
MOV             R3, R3,LSL#2
ADD             R3, R2, R3
LDR             R1, [R3] ; size
SUB             R0, R11, #-(-4+var_7FFC)
SUB             R0, R0, #4
SUB             R0, R0, #0xC ; ptr
LDR             R3, [R11,#-4+stream] ; stream
MOV             R2, #1  ; n
BL              fread
LDR             R2, [R11,#-4+var_4]
MOV             R3, R2
MOV             R3, R3,LSL#5
ADD             R3, R3, R2
MOV             R3, R3,LSL#2
MOV             R2, #unk_2507C
ADD             R3, R3, R2
ADD             R3, R3, #4
MOV             R1, #aWb ; "wb"
MOV             R0, R3
BL              fopen64
STR             R0, [R11,#-4+s]
LDR             R3, [R11,#-4+s]
CMP             R3, #0
BNE             loc_10B08
LDR             R2, [R11,#-4+var_4]
MOV             R3, R2
MOV             R3, R3,LSL#5
ADD             R3, R3, R2
MOV             R3, R3,LSL#2
MOV             R2, #unk_2507C
ADD             R3, R3, R2
ADD             R3, R3, #4
MOV             R1, R3
MOV             R0, #aTryToWriteToFi ; "Try To Write To File '%s' Failed!\n"
BL              printf
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BEQ             loc_10B00
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose

loc_10B00
MOV             R3, #2
B               loc_10B90

loc_10B08
MOV             R2, #unk_2507C
LDR             R1, [R11,#-4+var_4]
MOV             R3, R1
MOV             R3, R3,LSL#5
ADD             R3, R3, R1
MOV             R3, R3,LSL#2
ADD             R3, R2, R3
LDR             R1, [R3] ; size
SUB             R0, R11, #-(-4+var_7FFC)
SUB             R0, R0, #4
SUB             R0, R0, #0xC ; ptr
LDR             R3, [R11,#-4+s] ; s
MOV             R2, #1  ; n
BL              fwrite
LDR             R3, [R11,#-4+s]
CMP             R3, #0
BEQ             loc_10B58
LDR             R0, [R11,#-4+s] ; stream
BL              fclose

loc_10B58
MOV             R3, #0
STR             R3, [R11,#-4+s]
LDR             R3, [R11,#-4+var_4]
ADD             R3, R3, #1
STR             R3, [R11,#-4+var_4]

loc_10B6C
LDR             R3, [R11,#-4+var_4]
CMP             R3, #0xE
BLE             loc_10A38
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BEQ             loc_10B8C
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose

loc_10B8C
MOV             R3, #0

loc_10B90
MOV             R0, R3
SUB             SP, R11, #4
POP             {R11,PC}
; End of function sub_109A8



; Attributes: bp-based frame fpd=0xFFFFFFFC

; int sub_10B9C()
sub_10B9C

ptr= -0x108
s= -0x104
stream= -8
var_4= -4

PUSH            {R11,LR}
ADD             R11, SP, #4
SUB             SP, SP, #0x108
MOV             R1, #aWb ; "wb"
MOV             R0, #aTmp256bff ; "/tmp/256BFF"
BL              fopen64
STR             R0, [R11,#-4+stream]
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BNE             loc_10BE0
MOV             R0, #aGenfileFailed ; "GenFile Failed!"
BL              puts
MOV             R3, #1
B               loc_10C64

loc_10BE0
MOV             R3, #0
STR             R3, [R11,#-4+ptr]
SUB             R3, R11, #-(-4+s)
MOV             R2, #0xFC ; n
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
MOV             R3, #0
STR             R3, [R11,#-4+var_4]
MOV             R3, #0
STR             R3, [R11,#-4+var_4]
B               loc_10C30

loc_10C10
SUB             R2, R11, #-(-4+ptr)
LDR             R3, [R11,#-4+var_4]
ADD             R3, R2, R3
MOV             R2, #0xFFFFFFFF
STRB            R2, [R3]
LDR             R3, [R11,#-4+var_4]
ADD             R3, R3, #1
STR             R3, [R11,#-4+var_4]

loc_10C30
LDR             R3, [R11,#-4+var_4]
CMP             R3, #0xFF
BLE             loc_10C10
SUB             R0, R11, #-(-4+ptr) ; ptr
LDR             R3, [R11,#-4+stream] ; s
MOV             R2, #1  ; n
MOV             R1, #0x100 ; size
BL              fwrite
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose
MOV             R3, #0
STR             R3, [R11,#-4+stream]
MOV             R3, #0

loc_10C64
MOV             R0, R3
SUB             SP, R11, #4
POP             {R11,PC}
; End of function sub_10B9C



; Attributes: bp-based frame fpd=0xFFFFFFFC

; int __fastcall sub_10C70(int, int, int, int)
sub_10C70

var_B8= -0xB8
var_B4= -0xB4
var_B0= -0xB0
var_AC= -0xAC
var_A8= -0xA8
var_A4= -0xA4
var_9C= -0x9C
var_2C= -0x2C
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R11,LR}
ADD             R11, SP, #4
SUB             SP, SP, #0xB8
STR             R0, [R11,#-4+var_A4]
STR             R1, [R11,#-4+var_A8]
STR             R2, [R11,#-4+var_AC]
STR             R3, [R11,#-4+var_B0]
MOV             R3, #0
STR             R3, [R11,#-4+var_4]
MOV             R3, #0
STR             R3, [R11,#-4+var_8]
MOV             R1, #0x400
LDR             R0, [R11,#-4+var_B0]
BL              BIO_new_mem_buf
STR             R0, [R11,#-4+var_4]
MOV             R3, #0
MOV             R2, #0
MOV             R1, #0
LDR             R0, [R11,#-4+var_4]
BL              PEM_read_bio_RSA_PUBKEY
STR             R0, [R11,#-4+var_8]
LDR             R3, [R11,#-4+var_8]
CMP             R3, #0
BNE             loc_10D0C
BL              ERR_get_error
MOV             R3, R0
MOV             R1, #0
MOV             R0, R3
BL              ERR_error_string
MOV             R3, R0
MOV             R1, R3
MOV             R0, #aOpensslErrorS ; "OpenSSL error: %s\n"
BL              printf
MOV             R0, #aReadRootPubkFa ; "Read Root PubK Failed!"
BL              puts
MOV             R3, #0xC
B               loc_10DDC

loc_10D0C
SUB             R3, R11, #-(-4+var_9C)
MOV             R0, R3
BL              SHA256_Init
SUB             R3, R11, #-(-4+var_9C)
LDR             R2, [R11,#-4+var_A8]
LDR             R1, [R11,#-4+var_A4]
MOV             R0, R3
BL              SHA256_Update
SUB             R2, R11, #-(-4+var_9C)
SUB             R3, R11, #-(-4+var_2C)
MOV             R1, R2
MOV             R0, R3
BL              SHA256_Final
SUB             R1, R11, #-(-4+var_2C)
LDR             R3, [R11,#-4+var_8]
STR             R3, [SP,#0xB8+var_B4]
MOV             R3, #0x100
STR             R3, [SP,#0xB8+var_B8]
LDR             R3, [R11,#-4+var_AC]
MOV             R2, #0x20 ; ' '
MOV             R0, #0x2A0
BL              RSA_verify
STR             R0, [R11,#-4+var_C]
LDR             R3, [R11,#-4+var_8]
CMP             R3, #0
BEQ             loc_10D7C
LDR             R0, [R11,#-4+var_8]
BL              RSA_free

loc_10D7C
LDR             R3, [R11,#-4+var_4]
CMP             R3, #0
BEQ             loc_10D90
LDR             R0, [R11,#-4+var_4]
BL              BIO_free

loc_10D90
LDR             R3, [R11,#-4+var_C]
CMP             R3, #1
BNE             loc_10DA4
MOV             R3, #0
B               loc_10DDC

loc_10DA4
BL              ERR_get_error
MOV             R3, R0
MOV             R1, #0
MOV             R0, R3
BL              ERR_error_string
MOV             R3, R0
MOV             R1, R3
MOV             R0, #aOpensslErrorS ; "OpenSSL error: %s\n"
BL              printf
MOV             R0, #aCheckMinerPemF ; "Check miner.pem Failed!"
BL              puts
MOV             R3, #0xD

loc_10DDC
MOV             R0, R3
SUB             SP, R11, #4
POP             {R11,PC}
; End of function sub_10C70



; Attributes: bp-based frame fpd=0xFFFFFFFC

; int __fastcall sub_10DE8(FILE *, int, _DWORD *, char, char, char)
sub_10DE8

var_52D= -0x52D
var_52C= -0x52C
var_528= -0x528
stream= -0x524
var_51C= -0x51C
var_50C= -0x50C
var_49C= -0x49C
var_498= -0x498
var_494= -0x494
var_490= -0x490
var_48C= -0x48C
var_488= -0x488
var_484= -0x484
var_480= -0x480
var_46C= -0x46C
var_40C= -0x40C
var_3FC= -0x3FC
n= -0xC
s= -8
var_4= -4
arg_0=  8
arg_4=  0xC

PUSH            {R11,LR}
ADD             R11, SP, #4
SUB             SP, SP, #0x530
STR             R0, [R11,#-4+stream]
STR             R1, [R11,#-4+var_528]
STR             R2, [R11,#-4+var_52C]
STRB            R3, [R11,#-4+var_52D]
MOV             R3, #0
STR             R3, [R11,#-4+var_40C]
SUB             R3, R11, #-(-4+var_3FC)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R2, #0x3FC ; n
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
SUB             R3, R11, #-(-4+var_46C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3
BL              SHA256_Init
MOV             R3, #0
STR             R3, [R11,#-4+var_4]
MOV             R3, #0
STR             R3, [R11,#-4+n]
MOV             R3, #0
STR             R3, [R11,#-4+s]
LDRB            R3, [R11,#-4+arg_4]
CMP             R3, #0
BEQ             loc_112FC
MOV             R2, #aTmpTmpfw ; "/tmp/tmpfw/"
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
LDM             R2, {R0-R2} ; "/tmp/tmpfw/"
STM             R3, {R0-R2}
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
MOV             R2, #0x74 ; 't' ; n
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
LDRB            R3, [R11,#-4+var_52D]
CMP             R3, #9  ; switch 10 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_10E9C ; jumptable 00010E9C default case, case 8
jpt_10E9C DCD loc_10ECC ; jump table for switch statement
DCD loc_10F18
DCD loc_10F74
DCD loc_10FC4
DCD loc_11020
DCD loc_11074
DCD loc_110C8
DCD loc_11124
DCD def_10E9C
DCD loc_11168

loc_10ECC               ; jumptable 00010E9C case 0
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R2, R3, R2
MOV             R3, #aBootBin ; "BOOT.bin"
LDM             R3!, {R0,R1} ; "BOOT.bin"
STR             R0, [R2]
STR             R1, [R2,#4]
LDRB            R3, [R3] ; ""
STRB            R3, [R2,#8]
B               def_10E9C ; jumptable 00010E9C default case, case 8

loc_10F18               ; jumptable 00010E9C case 1
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R2, R3, R2
MOV             R3, #aDevicetreeDtb ; "devicetree.dtb"
MOV             R12, R2
LDM             R3!, {R0-R2} ; "devicetree.dtb"
STR             R0, [R12]
STR             R1, [R12,#4]
STR             R2, [R12,#8]
LDRH            R2, [R3] ; "tb"
LDRB            R3, [R3,#(aDevicetreeDtb+0xE - 0x13F3C)] ; ""
STRH            R2, [R12,#0xC]
STRB            R3, [R12,#0xE]
B               def_10E9C ; jumptable 00010E9C default case, case 8

loc_10F74               ; jumptable 00010E9C case 2
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R3, R3, R2
MOV             R2, #aUimage ; "uImage"
LDR             R0, [R2] ; "uImage"
STR             R0, [R3]
LDRH            R1, [R2,#(aUimage+4 - 0x13F40)] ; "ge"
LDRB            R2, [R2,#(aUimage+6 - 0x13F40)] ; ""
STRH            R1, [R3,#4]
STRB            R2, [R3,#6]
B               def_10E9C ; jumptable 00010E9C default case, case 8

loc_10FC4               ; jumptable 00010E9C case 3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R2, R3, R2
MOV             R3, #aMinerfsImageGz ; "minerfs.image.gz"
MOV             LR, R2
MOV             R12, R3
LDM             R12!, {R0-R3} ; "minerfs.image.gz"
STR             R0, [LR]
STR             R1, [LR,#4]
STR             R2, [LR,#8]
STR             R3, [LR,#0xC]
LDRB            R3, [R12] ; ""
STRB            R3, [LR,#0x10]
B               def_10E9C ; jumptable 00010E9C default case, case 8

loc_11020               ; jumptable 00010E9C case 4
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R2, R3, R2
MOV             R3, #aUpdateImageGz ; "update.image.gz"
MOV             R12, R2
MOV             LR, R3
LDM             LR!, {R0-R3} ; "update.image.gz"
STR             R0, [R12]
STR             R1, [R12,#4]
STR             R2, [R12,#8]
STR             R3, [R12,#0xC]
B               def_10E9C ; jumptable 00010E9C default case, case 8

loc_11074               ; jumptable 00010E9C case 5
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R2, R3, R2
MOV             R3, #aCrlTarGz ; "crl.tar.gz"
LDM             R3!, {R0,R1} ; "crl.tar.gz"
STR             R0, [R2]
STR             R1, [R2,#4]
LDRH            R1, [R3] ; "gz"
LDRB            R3, [R3,#(aCrlTarGz+0xA - 0x13F74)] ; ""
STRH            R1, [R2,#8]
STRB            R3, [R2,#0xA]
B               def_10E9C ; jumptable 00010E9C default case, case 8

loc_110C8               ; jumptable 00010E9C case 6
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R2, R3, R2
MOV             R3, #aMinerBtmTarGz ; "miner.btm.tar.gz"
MOV             LR, R2
MOV             R12, R3
LDM             R12!, {R0-R3} ; "miner.btm.tar.gz"
STR             R0, [LR]
STR             R1, [LR,#4]
STR             R2, [LR,#8]
STR             R3, [LR,#0xC]
LDRB            R3, [R12] ; ""
STRB            R3, [LR,#0x10]
B               def_10E9C ; jumptable 00010E9C default case, case 8

loc_11124               ; jumptable 00010E9C case 7
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R2, R3, R2
MOV             R3, #aReserve ; "reserve"
LDM             R3!, {R0,R1} ; "reserve"
STR             R0, [R2]
STR             R1, [R2,#4]
B               def_10E9C ; jumptable 00010E9C default case, case 8

loc_11168               ; jumptable 00010E9C case 9
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R2, R3, R2
MOV             R3, #aDatafile ; "datafile"
LDM             R3!, {R0,R1} ; "datafile"
STR             R0, [R2]
STR             R1, [R2,#4]
LDRB            R3, [R3] ; ""
STRB            R3, [R2,#8]
NOP

def_10E9C               ; jumptable 00010E9C default case, case 8
LDRB            R3, [R11,#-4+arg_0]
CMP             R3, #0
BEQ             loc_11204
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              strlen
MOV             R3, R0
MOV             R2, R3
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
ADD             R2, R3, R2
MOV             R3, #aSig ; ".sig"
LDR             R0, [R3] ; ".sig"
STR             R0, [R2]
LDRB            R3, [R3,#(aSig+4 - 0x13FA0)] ; ""
STRB            R3, [R2,#4]

loc_11204
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
LDR             R2, [R11,#-4+var_528]
MOV             R1, R3
MOV             R0, #aFilenameSSizeD ; "fileName:'%s', size:[%d]\r\n"
BL              printf
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R1, #aWb ; "wb"
MOV             R0, R3
BL              fopen64
STR             R0, [R11,#-4+s]
LDR             R3, [R11,#-4+s]
CMP             R3, #0
BNE             loc_112FC
SUB             R3, R11, #-(-4+var_50C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R1, R3
MOV             R0, #aCreateFileSFai ; "Create File '%s' Failed!\r\n"
BL              printf
B               loc_112FC

loc_11270
SUB             R0, R11, #-(-4+var_3FC)
SUB             R0, R0, #4
SUB             R0, R0, #0xC ; ptr
LDR             R3, [R11,#-4+stream] ; stream
MOV             R2, #0x400 ; n
MOV             R1, #1  ; size
BL              fread
MOV             R3, R0
STR             R3, [R11,#-4+n]
LDR             R3, [R11,#-4+n]
LDR             R2, [R11,#-4+var_4]
ADD             R3, R2, R3
STR             R3, [R11,#-4+var_4]
SUB             R1, R11, #-(-4+var_3FC)
SUB             R1, R1, #4
SUB             R1, R1, #0xC
SUB             R3, R11, #-(-4+var_46C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R2, #0x400
MOV             R0, R3
BL              SHA256_Update
LDRB            R3, [R11,#-4+arg_4]
CMP             R3, #0
BEQ             loc_112FC
LDR             R3, [R11,#-4+s]
CMP             R3, #0
BEQ             loc_112FC
SUB             R0, R11, #-(-4+var_3FC)
SUB             R0, R0, #4
SUB             R0, R0, #0xC ; ptr
LDR             R3, [R11,#-4+s] ; s
MOV             R2, #0x400 ; n
MOV             R1, #1  ; size
BL              fwrite

loc_112FC
LDR             R2, [R11,#-4+var_528]
LDR             R3, [R11,#-4+var_4]
SUB             R3, R2, R3
CMP             R3, #0x400
BHI             loc_11270
LDR             R2, [R11,#-4+var_528]
LDR             R3, [R11,#-4+var_4]
SUB             R2, R2, R3 ; n
SUB             R0, R11, #-(-4+var_3FC)
SUB             R0, R0, #4
SUB             R0, R0, #0xC ; ptr
LDR             R3, [R11,#-4+stream] ; stream
MOV             R1, #1  ; size
BL              fread
MOV             R3, R0
STR             R3, [R11,#-4+n]
LDR             R2, [R11,#-4+n]
SUB             R1, R11, #-(-4+var_3FC)
SUB             R1, R1, #4
SUB             R1, R1, #0xC
SUB             R3, R11, #-(-4+var_46C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3
BL              SHA256_Update
LDRB            R3, [R11,#-4+arg_4]
CMP             R3, #0
BEQ             loc_11394
LDR             R3, [R11,#-4+s]
CMP             R3, #0
BEQ             loc_11394
LDR             R2, [R11,#-4+n] ; n
SUB             R0, R11, #-(-4+var_3FC)
SUB             R0, R0, #4
SUB             R0, R0, #0xC ; ptr
LDR             R3, [R11,#-4+s] ; s
MOV             R1, #1  ; size
BL              fwrite

loc_11394
MOV             R3, #0
STR             R3, [R11,#-4+var_49C]
SUB             R3, R11, #-(-4+var_48C)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R2, #0
STR             R2, [R3]
STR             R2, [R3,#4]
STR             R2, [R3,#8]
STR             R2, [R3,#0xC]
STR             R2, [R3,#0x10]
STR             R2, [R3,#0x14]
STR             R2, [R3,#0x18]
SUB             R2, R11, #-(-4+var_46C)
SUB             R2, R2, #4
SUB             R2, R2, #0xC
SUB             R3, R11, #-(-4+var_48C)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R1, R2
MOV             R0, R3
BL              SHA256_Final
LDRB            R3, [R11,#-4+arg_4]
CMP             R3, #0
BEQ             loc_11414
LDR             R3, [R11,#-4+s]
CMP             R3, #0
BEQ             loc_11414
LDR             R0, [R11,#-4+s] ; stream
BL              fclose
MOV             R3, #0
STR             R3, [R11,#-4+s]

loc_11414
LDR             R3, [R11,#-4+var_52C]
MOV             LR, R3
SUB             R12, R11, #-(-4+var_48C)
SUB             R12, R12, #4
SUB             R12, R12, #0xC
LDM             R12!, {R0-R3}
STR             R0, [LR]
STR             R1, [LR,#4]
STR             R2, [LR,#8]
STR             R3, [LR,#0xC]
LDM             R12!, {R0-R3}
STR             R0, [LR,#0x10]
STR             R1, [LR,#0x14]
STR             R2, [LR,#0x18]
STR             R3, [LR,#0x1C]
NOP
MOV             R0, R3
SUB             SP, R11, #4
POP             {R11,PC}
; End of function sub_10DE8



; Attributes: bp-based frame

; int __fastcall sub_11460(int)
sub_11460

var_10= -0x10
var_8= -8

PUSH            {R11}
ADD             R11, SP, #0
SUB             SP, SP, #0x14
STR             R0, [R11,#var_10]
LDR             R3, [R11,#var_10]
LDR             R3, [R3]
STR             R3, [R11,#var_8]
LDR             R3, [R11,#var_8]
MOV             R0, R3
MOV             SP, R11
POP             {R11}
BX              LR
; End of function sub_11460



; Attributes: bp-based frame fpd=0xFFFFFFFC

; __int64 __fastcall sub_11490(const void *)
sub_11490

src= -0xC
dest= -8

PUSH            {R11,LR}
ADD             R11, SP, #4
SUB             SP, SP, #0x10
STR             R0, [R11,#-4+src]
SUB             R3, R11, #-(-4+dest)
MOV             R2, #8  ; n
LDR             R1, [R11,#-4+src] ; src
MOV             R0, R3  ; dest
BL              memcpy
LDRD            R2, R3, [R11,#-4+dest]
MOV             R0, R2
MOV             R1, R3
SUB             SP, R11, #4
POP             {R11,PC}
; End of function sub_11490



; Attributes: bp-based frame fpd=0xFFFFFFF8

; int __fastcall sub_114C8(int, unsigned int)
sub_114C8

var_C= -0xC

PUSH            {R4,R5,R11}
ADD             R11, SP, #8
SUB             SP, SP, #0xC
STRD            R0, R1, [R11,#-8+var_C]
LDRD            R0, R1, [R11,#-8+var_C]
MOV             R2, #0
MOV             R3, #0
MOV             R2, R1,LSR#15
MOV             R3, #0
LDRD            R0, R1, [R11,#-8+var_C]
EOR             R4, R2, R0
EOR             R5, R3, R1
MOV             R2, R4
MOV             R3, R5
MOV             R0, R2
MOV             R1, R3
SUB             SP, R11, #8
POP             {R4,R5,R11}
BX              LR
; End of function sub_114C8



; Attributes: bp-based frame fpd=0xFFFFFFE8

; unsigned __int64 __fastcall sub_11514(unsigned __int64, char)
sub_11514

var_10= -0x10
var_C= -0xC

PUSH            {R4-R9,R11}
ADD             R11, SP, #0x18
SUB             SP, SP, #0x14
STRD            R0, R1, [R11,#-0x18+var_C]
STR             R2, [R11,#-0x18+var_10]
LDRD            R2, R3, [R11,#-0x18+var_C]
LDR             R1, [R11,#-0x18+var_10]
RSB             R12, R1, #0x20 ; ' '
SUB             R0, R1, #0x20 ; ' '
MOV             R6, R2,LSR R1
ORR             R6, R6, R3,LSL R12
ORR             R6, R6, R3,LSR R0
MOV             R7, R3,LSR R1
LDR             R1, [R11,#-0x18+var_10]
RSB             R1, R1, #0
AND             R1, R1, #0x3F ; '?'
SUB             R12, R1, #0x20 ; ' '
RSB             R0, R1, #0x20 ; ' '
MOV             R5, R3,LSL R1
ORR             R5, R5, R2,LSL R12
ORR             R5, R5, R2,LSR R0
MOV             R4, R2,LSL R1
ORR             R8, R6, R4
ORR             R9, R7, R5
MOV             R4, R8
MOV             R5, R9
MOV             R2, R4
MOV             R3, R5
MOV             R0, R2
MOV             R1, R3
SUB             SP, R11, #0x18
POP             {R4-R9,R11}
BX              LR
; End of function sub_11514



; Attributes: bp-based frame fpd=0xFFFFFFE8

; unsigned __int64 __fastcall sub_11598(int, int, __int64, __int64)
sub_11598

var_2C= -0x2C
var_24= -0x24
var_1C= -0x1C
var_14= -0x14
var_10= -0x10
var_C= -0xC
arg_0=  0x1C

PUSH            {R4-R9,R11}
ADD             R11, SP, #0x18
SUB             SP, SP, #0x2C
STRD            R0, R1, [R11,#-0x18+var_1C]
STRD            R2, R3, [R11,#-0x18+var_24]
LDRD            R0, R1, [R11,#-0x18+var_1C]
LDRD            R2, R3, [R11,#-0x18+var_24]
EOR             R6, R0, R2
EOR             R7, R1, R3
LDR             R3, [R11,#-0x18+arg_0+4]
MUL             R2, R6, R3
LDR             R3, [R11,#-0x18+arg_0]
MUL             R3, R7, R3
ADD             R1, R2, R3
LDR             R3, [R11,#-0x18+arg_0]
UMULL           R2, R3, R3, R6
ADD             R1, R1, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x18+var_C]
STRD            R2, R3, [R11,#-0x18+var_C]
LDRD            R0, R1, [R11,#-0x18+var_C]
MOV             R2, #0
MOV             R3, #0
MOV             R2, R1,LSR#15
MOV             R3, #0
LDRD            R0, R1, [R11,#-0x18+var_C]
EOR             R12, R0, R2
STR             R12, [R11,#-0x18+var_2C]
EOR             R3, R1, R3
STR             R3, [R11,#-0x18+var_2C+4]
LDRD            R2, R3, [R11,#-0x18+var_2C]
STRD            R2, R3, [R11,#-0x18+var_C]
LDRD            R0, R1, [R11,#-0x18+var_24]
LDRD            R2, R3, [R11,#-0x18+var_C]
EOR             R4, R0, R2
EOR             R5, R1, R3
LDR             R3, [R11,#-0x18+arg_0+4]
MUL             R2, R4, R3
LDR             R3, [R11,#-0x18+arg_0]
MUL             R3, R5, R3
ADD             R1, R2, R3
LDR             R3, [R11,#-0x18+arg_0]
UMULL           R2, R3, R3, R4
ADD             R1, R1, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x18+var_14]
STRD            R2, R3, [R11,#-0x18+var_14]
LDRD            R0, R1, [R11,#-0x18+var_14]
MOV             R2, #0
MOV             R3, #0
MOV             R2, R1,LSR#15
MOV             R3, #0
LDRD            R0, R1, [R11,#-0x18+var_14]
EOR             R8, R0, R2
EOR             R9, R1, R3
STRD            R8, R9, [R11,#-0x18+var_14]
LDR             R3, [R11,#-0x18+var_10]
LDR             R2, [R11,#-0x18+arg_0]
MUL             R2, R2, R3
LDR             R3, [R11,#-0x18+arg_0+4]
LDR             R1, [R11,#-0x18+var_14]
MUL             R3, R1, R3
ADD             R1, R2, R3
LDR             R2, [R11,#-0x18+var_14]
LDR             R3, [R11,#-0x18+arg_0]
UMULL           R2, R3, R2, R3
ADD             R1, R1, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x18+var_14]
STRD            R2, R3, [R11,#-0x18+var_14]
LDRD            R2, R3, [R11,#-0x18+var_14]
MOV             R0, R2
MOV             R1, R3
SUB             SP, R11, #0x18
POP             {R4-R9,R11}
BX              LR
; End of function sub_11598



; Attributes: bp-based frame fpd=0xFFFFFFE4

; unsigned __int64 __fastcall sub_116C8(unsigned __int8 *, unsigned int)
sub_116C8

var_80= -0x80
var_78= -0x78
var_70= -0x70
var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_40= -0x40
var_38= -0x38
var_30= -0x30
var_28= -0x28
var_20= -0x20
var_18= -0x18
var_C= -0xC
var_8= -8
var_3= -3
var_2= -2
var_1= -1

PUSH            {R4-R9,R11,LR}
ADD             R11, SP, #0x1C
SUB             SP, SP, #0x80
STR             R0, [R11,#-0x1C+var_4C]
STR             R1, [R11,#-0x1C+var_50]
LDR             R3, [R11,#-0x1C+var_50]
CMP             R3, #7
BLS             loc_11814
LDR             R3, [R11,#-0x1C+var_50]
MOV             R3, R3,LSL#1
MOV             R2, R3
MOV             R3, #0
ADR             R1, dword_119F0
LDRD            R0, R1, [R1]
ADDS            R12, R2, R0
STR             R12, [R11,#-0x1C+var_68]
ADC             R3, R3, R1
STR             R3, [R11,#-0x1C+var_64]
LDRD            R2, R3, [R11,#-0x1C+var_68]
STRD            R2, R3, [R11,#-0x1C+var_28]
LDR             R0, [R11,#-0x1C+var_4C]
BL              sub_11490
ADR             R3, dword_119F0
LDRD            R2, R3, [R3]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_70]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_70+4]
LDRD            R2, R3, [R11,#-0x1C+var_70]
STRD            R2, R3, [R11,#-0x1C+var_30]
LDR             R3, [R11,#-0x1C+var_50]
SUB             R3, R3, #8
LDR             R2, [R11,#-0x1C+var_4C]
ADD             R3, R2, R3
MOV             R0, R3
BL              sub_11490
STRD            R0, R1, [R11,#-0x1C+var_38]
MOV             R2, #0x25 ; '%'
LDRD            R0, R1, [R11,#-0x1C+var_38]
BL              sub_11514
MOV             R2, R0
MOV             R3, R1
LDR             R1, [R11,#-0x1C+var_28]
MUL             R0, R3, R1
LDR             R1, [R11,#-0x1C+var_28+4]
MUL             R1, R2, R1
ADD             R1, R0, R1
LDR             R0, [R11,#-0x1C+var_28]
UMULL           R2, R3, R0, R2
ADD             R1, R1, R3
MOV             R3, R1
LDRD            R0, R1, [R11,#-0x1C+var_30]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_78]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_78+4]
LDRD            R2, R3, [R11,#-0x1C+var_78]
STRD            R2, R3, [R11,#-0x1C+var_40]
MOV             R2, #0x19
LDRD            R0, R1, [R11,#-0x1C+var_30]
BL              sub_11514
LDRD            R2, R3, [R11,#-0x1C+var_38]
ADDS            R4, R0, R2
ADC             R5, R1, R3
LDR             R3, [R11,#-0x1C+var_28+4]
MUL             R2, R4, R3
LDR             R3, [R11,#-0x1C+var_28]
MUL             R3, R5, R3
ADD             R1, R2, R3
LDR             R3, [R11,#-0x1C+var_28]
UMULL           R2, R3, R3, R4
ADD             R1, R1, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_48]
STRD            R2, R3, [R11,#-0x1C+var_48]
LDRD            R2, R3, [R11,#-0x1C+var_28]
STRD            R2, R3, [SP,#0x80+var_80]
LDRD            R2, R3, [R11,#-0x1C+var_48]
LDRD            R0, R1, [R11,#-0x1C+var_40]
BL              sub_11598
MOV             R2, R0
MOV             R3, R1
B               loc_119DC

loc_11814
LDR             R3, [R11,#-0x1C+var_50]
CMP             R3, #3
BLS             loc_118D0
LDR             R3, [R11,#-0x1C+var_50]
MOV             R3, R3,LSL#1
MOV             R2, R3
MOV             R3, #0
ADR             R1, dword_119F0
LDRD            R0, R1, [R1]
ADDS            R8, R2, R0
ADC             R9, R3, R1
STRD            R8, R9, [R11,#-0x1C+var_18]
LDR             R0, [R11,#-0x1C+var_4C]
BL              sub_11460
MOV             R3, R0
MOV             R2, R3
MOV             R3, #0
STRD            R2, R3, [R11,#-0x1C+var_20]
LDR             R3, [R11,#-0x1C+var_50]
MOV             R2, R3
MOV             R3, #0
LDR             R1, [R11,#-0x1C+var_20]
MOV             R7, R1,LSR#29
LDR             R1, [R11,#-0x1C+var_20]
MOV             R6, R1,LSL#3
ADDS            R1, R2, R6
STR             R1, [R11,#-0x1C+var_58]
ADC             R3, R3, R7
STR             R3, [R11,#-0x1C+var_58+4]
LDR             R3, [R11,#-0x1C+var_50]
SUB             R3, R3, #4
LDR             R2, [R11,#-0x1C+var_4C]
ADD             R3, R2, R3
MOV             R0, R3
BL              sub_11460
MOV             R3, R0
MOV             R0, R3
MOV             R1, #0
LDRD            R2, R3, [R11,#-0x1C+var_18]
STRD            R2, R3, [SP,#0x80+var_80]
MOV             R2, R0
MOV             R3, R1
LDRD            R0, R1, [R11,#-0x1C+var_58]
BL              sub_11598
MOV             R2, R0
MOV             R3, R1
B               loc_119DC

loc_118D0
LDR             R3, [R11,#-0x1C+var_50]
CMP             R3, #0
BEQ             loc_119D4
LDR             R3, [R11,#-0x1C+var_4C]
LDRB            R3, [R3]
STRB            R3, [R11,#-0x1C+var_1]
LDR             R3, [R11,#-0x1C+var_50]
MOV             R3, R3,LSR#1
LDR             R2, [R11,#-0x1C+var_4C]
ADD             R3, R2, R3
LDRB            R3, [R3]
STRB            R3, [R11,#-0x1C+var_2]
LDR             R3, [R11,#-0x1C+var_50]
SUB             R3, R3, #1
LDR             R2, [R11,#-0x1C+var_4C]
ADD             R3, R2, R3
LDRB            R3, [R3]
STRB            R3, [R11,#-0x1C+var_3]
LDRB            R2, [R11,#-0x1C+var_1]
LDRB            R3, [R11,#-0x1C+var_2]
MOV             R3, R3,LSL#8
ADD             R3, R2, R3
STR             R3, [R11,#-0x1C+var_8]
LDRB            R3, [R11,#-0x1C+var_3]
MOV             R3, R3,LSL#2
LDR             R2, [R11,#-0x1C+var_50]
ADD             R3, R2, R3
STR             R3, [R11,#-0x1C+var_C]
LDR             R3, [R11,#-0x1C+var_8]
MOV             R2, R3
MOV             R3, #0
ADR             R1, dword_119F0
LDRD            R0, R1, [R1]
MUL             LR, R0, R3
MUL             R12, R2, R1
ADD             R12, LR, R12
UMULL           R0, R1, R2, R0
ADD             R3, R12, R1
MOV             R1, R3
LDR             R3, [R11,#-0x1C+var_C]
MOV             R2, R3
MOV             R3, #0
ADR             R5, dword_119F8
LDRD            R4, R5, [R5]
MUL             LR, R4, R3
MUL             R12, R2, R5
ADD             R12, LR, R12
UMULL           R2, R3, R2, R4
ADD             R12, R12, R3
MOV             R3, R12
EOR             R12, R0, R2
STR             R12, [R11,#-0x1C+var_60]
EOR             R3, R1, R3
STR             R3, [R11,#-0x1C+var_5C]
LDRD            R0, R1, [R11,#-0x1C+var_60]
BL              sub_114C8
ADR             R3, dword_119F0
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
B               loc_119DC

loc_119D4
ADR             R3, dword_119F0
LDRD            R2, R3, [R3]

loc_119DC
MOV             R0, R2
MOV             R1, R3
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}
; End of function sub_116C8

ALIGN 0x10
dword_119F0 DCD 0x2F90404F
DCD 0x9AE16A3B
dword_119F8 DCD 0x97CB3127
DCD 0xC3A5C85C


; Attributes: bp-based frame fpd=0xFFFFFFE4

; unsigned __int64 __fastcall sub_11A00(int, int)
sub_11A00

var_58= -0x58
var_50= -0x50
var_48= -0x48
var_40= -0x40
var_38= -0x38
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
var_20= -0x20
var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4-R9,R11,LR}
ADD             R11, SP, #0x1C
SUB             SP, SP, #0x58
STR             R0, [R11,#-0x1C+var_2C]
STR             R1, [R11,#-0x1C+var_30]
LDR             R3, [R11,#-0x1C+var_30]
MOV             R3, R3,LSL#1
MOV             R0, R3
MOV             R1, #0
ADR             R3, dword_11BD0
LDRD            R2, R3, [R3]
ADDS            R4, R0, R2
ADC             R5, R1, R3
STRD            R4, R5, [R11,#-0x1C+var_8]
LDR             R0, [R11,#-0x1C+var_2C]
BL              sub_11490
ADR             R3, dword_11BD8
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_10]
STRD            R2, R3, [R11,#-0x1C+var_10]
LDR             R3, [R11,#-0x1C+var_2C]
ADD             R3, R3, #8
MOV             R0, R3
BL              sub_11490
STRD            R0, R1, [R11,#-0x1C+var_18]
LDR             R3, [R11,#-0x1C+var_30]
SUB             R3, R3, #8
LDR             R2, [R11,#-0x1C+var_2C]
ADD             R3, R2, R3
MOV             R0, R3
BL              sub_11490
LDR             R3, [R11,#-0x1C+var_8+4]
MUL             R2, R0, R3
LDR             R3, [R11,#-0x1C+var_8]
MUL             R3, R1, R3
ADD             R12, R2, R3
LDR             R3, [R11,#-0x1C+var_8]
UMULL           R2, R3, R3, R0
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_20]
STRD            R2, R3, [R11,#-0x1C+var_20]
LDR             R3, [R11,#-0x1C+var_30]
SUB             R3, R3, #0x10
LDR             R2, [R11,#-0x1C+var_2C]
ADD             R3, R2, R3
MOV             R0, R3
BL              sub_11490
ADR             R3, dword_11BD0
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_28]
STRD            R2, R3, [R11,#-0x1C+var_28]
LDRD            R0, R1, [R11,#-0x1C+var_10]
LDRD            R2, R3, [R11,#-0x1C+var_18]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_38]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_38+4]
MOV             R2, #0x2B ; '+'
LDRD            R0, R1, [R11,#-0x1C+var_38]
BL              sub_11514
MOV             R4, R0
MOV             R5, R1
MOV             R2, #0x1E
LDRD            R0, R1, [R11,#-0x1C+var_20]
BL              sub_11514
MOV             R2, R0
MOV             R3, R1
ADDS            R8, R4, R2
ADC             R9, R5, R3
LDRD            R2, R3, [R11,#-0x1C+var_28]
ADDS            R1, R8, R2
STR             R1, [R11,#-0x1C+var_40]
ADC             R3, R9, R3
STR             R3, [R11,#-0x1C+var_40+4]
ADR             R1, dword_11BD0
LDRD            R0, R1, [R1]
LDRD            R2, R3, [R11,#-0x1C+var_18]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_48]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_48+4]
MOV             R2, #0x12
LDRD            R0, R1, [R11,#-0x1C+var_48]
BL              sub_11514
LDRD            R2, R3, [R11,#-0x1C+var_10]
ADDS            R6, R0, R2
ADC             R7, R1, R3
LDRD            R2, R3, [R11,#-0x1C+var_20]
ADDS            R1, R6, R2
STR             R1, [R11,#-0x1C+var_50]
ADC             R3, R7, R3
STR             R3, [R11,#-0x1C+var_50+4]
LDRD            R2, R3, [R11,#-0x1C+var_8]
STRD            R2, R3, [SP,#0x58+var_58]
LDRD            R2, R3, [R11,#-0x1C+var_50]
LDRD            R0, R1, [R11,#-0x1C+var_40]
BL              sub_11598
MOV             R2, R0
MOV             R3, R1
MOV             R0, R2
MOV             R1, R3
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}
; End of function sub_11A00

dword_11BD0 DCD 0x2F90404F
DCD 0x9AE16A3B
dword_11BD8 DCD 0xBE98F273
DCD 0xB492B66F


; Attributes: bp-based frame fpd=0xFFFFFFE4

; unsigned __int64 __fastcall sub_11BE0(int, int)
sub_11BE0

var_C8= -0xC8
var_C0= -0xC0
var_B8= -0xB8
var_B0= -0xB0
var_A8= -0xA8
var_A0= -0xA0
var_98= -0x98
var_90= -0x90
var_88= -0x88
var_80= -0x80
var_78= -0x78
var_70= -0x70
var_68= -0x68
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_50= -0x50
var_48= -0x48
var_40= -0x40
var_38= -0x38
var_30= -0x30
var_28= -0x28
var_20= -0x20
var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4-R9,R11,LR}
ADD             R11, SP, #0x1C
SUB             SP, SP, #0xC8
STR             R0, [R11,#-0x1C+var_5C]
STR             R1, [R11,#-0x1C+var_60]
LDR             R3, [R11,#-0x1C+var_60]
MOV             R3, R3,LSL#1
MOV             R0, R3
MOV             R1, #0
ADR             R3, dword_11F50
LDRD            R2, R3, [R3]
ADDS            R4, R0, R2
ADC             R5, R1, R3
STRD            R4, R5, [R11,#-0x1C+var_8]
LDR             R0, [R11,#-0x1C+var_5C]
BL              sub_11490
ADR             R3, dword_11F50
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_10]
STRD            R2, R3, [R11,#-0x1C+var_10]
LDR             R3, [R11,#-0x1C+var_5C]
ADD             R3, R3, #8
MOV             R0, R3
BL              sub_11490
STRD            R0, R1, [R11,#-0x1C+var_18]
LDR             R3, [R11,#-0x1C+var_60]
SUB             R2, R3, #8
LDR             R3, [R11,#-0x1C+var_5C]
ADD             R3, R3, R2
MOV             R0, R3
BL              sub_11490
LDR             R3, [R11,#-0x1C+var_8+4]
MUL             R2, R0, R3
LDR             R3, [R11,#-0x1C+var_8]
MUL             R3, R1, R3
ADD             R12, R2, R3
LDR             R3, [R11,#-0x1C+var_8]
UMULL           R2, R3, R3, R0
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_20]
STRD            R2, R3, [R11,#-0x1C+var_20]
LDR             R3, [R11,#-0x1C+var_60]
SUB             R2, R3, #0x10
LDR             R3, [R11,#-0x1C+var_5C]
ADD             R3, R3, R2
MOV             R0, R3
BL              sub_11490
ADR             R3, dword_11F50
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_28]
STRD            R2, R3, [R11,#-0x1C+var_28]
LDRD            R0, R1, [R11,#-0x1C+var_10]
LDRD            R2, R3, [R11,#-0x1C+var_18]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_68]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_68+4]
MOV             R2, #0x2B ; '+'
LDRD            R0, R1, [R11,#-0x1C+var_68]
BL              sub_11514
MOV             R4, R0
MOV             R5, R1
MOV             R2, #0x1E
LDRD            R0, R1, [R11,#-0x1C+var_20]
BL              sub_11514
MOV             R2, R0
MOV             R3, R1
ADDS            R6, R4, R2
ADC             R7, R5, R3
LDRD            R2, R3, [R11,#-0x1C+var_28]
ADDS            R1, R2, R6
STR             R1, [R11,#-0x1C+var_C0]
ADC             R3, R3, R7
STR             R3, [R11,#-0x1C+var_C0+4]
LDRD            R2, R3, [R11,#-0x1C+var_C0]
STRD            R2, R3, [R11,#-0x1C+var_30]
ADR             R1, dword_11F50
LDRD            R0, R1, [R1]
LDRD            R2, R3, [R11,#-0x1C+var_18]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_70]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_70+4]
MOV             R2, #0x12
LDRD            R0, R1, [R11,#-0x1C+var_70]
BL              sub_11514
LDRD            R2, R3, [R11,#-0x1C+var_10]
ADDS            R8, R0, R2
ADC             R9, R1, R3
LDRD            R2, R3, [R11,#-0x1C+var_20]
ADDS            R1, R8, R2
STR             R1, [R11,#-0x1C+var_78]
ADC             R3, R9, R3
STR             R3, [R11,#-0x1C+var_78+4]
LDRD            R2, R3, [R11,#-0x1C+var_8]
STRD            R2, R3, [SP,#0xC8+var_C8]
LDRD            R2, R3, [R11,#-0x1C+var_78]
LDRD            R0, R1, [R11,#-0x1C+var_30]
BL              sub_11598
STRD            R0, R1, [R11,#-0x1C+var_38]
LDR             R3, [R11,#-0x1C+var_5C]
ADD             R3, R3, #0x10
MOV             R0, R3
BL              sub_11490
LDR             R3, [R11,#-0x1C+var_8+4]
MUL             R2, R0, R3
LDR             R3, [R11,#-0x1C+var_8]
MUL             R3, R1, R3
ADD             R12, R2, R3
LDR             R3, [R11,#-0x1C+var_8]
UMULL           R2, R3, R3, R0
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_40]
STRD            R2, R3, [R11,#-0x1C+var_40]
LDR             R3, [R11,#-0x1C+var_5C]
ADD             R3, R3, #0x18
MOV             R0, R3
BL              sub_11490
STRD            R0, R1, [R11,#-0x1C+var_48]
LDR             R3, [R11,#-0x1C+var_60]
SUB             R2, R3, #0x20 ; ' '
LDR             R3, [R11,#-0x1C+var_5C]
ADD             R3, R3, R2
MOV             R0, R3
BL              sub_11490
LDRD            R2, R3, [R11,#-0x1C+var_30]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_80]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_80+4]
LDR             R3, [R11,#-0x1C+var_8+4]
LDRD            R4, R5, [R11,#-0x1C+var_80]
MOV             R2, R4
MUL             R2, R2, R3
LDR             R3, [R11,#-0x1C+var_8]
MOV             R1, R5
MUL             R3, R1, R3
ADD             R1, R2, R3
LDR             R3, [R11,#-0x1C+var_8]
MOV             R2, R4
UMULL           R2, R3, R3, R2
ADD             R1, R1, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_50]
STRD            R2, R3, [R11,#-0x1C+var_50]
LDR             R3, [R11,#-0x1C+var_60]
SUB             R2, R3, #0x18
LDR             R3, [R11,#-0x1C+var_5C]
ADD             R3, R3, R2
MOV             R0, R3
BL              sub_11490
LDRD            R2, R3, [R11,#-0x1C+var_38]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_88]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_88+4]
LDR             R3, [R11,#-0x1C+var_8+4]
LDRD            R4, R5, [R11,#-0x1C+var_88]
MOV             R2, R4
MUL             R2, R2, R3
LDR             R3, [R11,#-0x1C+var_8]
MOV             R1, R5
MUL             R3, R1, R3
ADD             R1, R2, R3
LDR             R3, [R11,#-0x1C+var_8]
MOV             R2, R4
UMULL           R2, R3, R3, R2
ADD             R1, R1, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_58]
STRD            R2, R3, [R11,#-0x1C+var_58]
LDRD            R0, R1, [R11,#-0x1C+var_40]
LDRD            R2, R3, [R11,#-0x1C+var_48]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_90]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_90+4]
MOV             R2, #0x2B ; '+'
LDRD            R0, R1, [R11,#-0x1C+var_90]
BL              sub_11514
MOV             R4, R0
MOV             R5, R1
MOV             R2, #0x1E
LDRD            R0, R1, [R11,#-0x1C+var_50]
BL              sub_11514
MOV             R2, R0
MOV             R3, R1
ADDS            R1, R4, R2
STR             R1, [R11,#-0x1C+var_98]
ADC             R3, R5, R3
STR             R3, [R11,#-0x1C+var_98+4]
LDRD            R2, R3, [R11,#-0x1C+var_58]
LDRD            R0, R1, [R11,#-0x1C+var_98]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_A0]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_A0+4]
LDRD            R0, R1, [R11,#-0x1C+var_48]
LDRD            R2, R3, [R11,#-0x1C+var_10]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_A8]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_A8+4]
MOV             R2, #0x12
B               loc_11F58
dword_11F50 DCD 0x2F90404F
DCD 0x9AE16A3B

loc_11F58
LDRD            R0, R1, [R11,#-0x1C+var_A8]
BL              sub_11514
LDRD            R2, R3, [R11,#-0x1C+var_40]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_B0]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_B0+4]
LDRD            R2, R3, [R11,#-0x1C+var_50]
LDRD            R0, R1, [R11,#-0x1C+var_B0]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_B8]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_B8+4]
LDRD            R2, R3, [R11,#-0x1C+var_8]
STRD            R2, R3, [SP,#0xC8+var_C8]
LDRD            R2, R3, [R11,#-0x1C+var_B8]
LDRD            R0, R1, [R11,#-0x1C+var_A0]
BL              sub_11598
MOV             R2, R0
MOV             R3, R1
MOV             R0, R2
MOV             R1, R3
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}
; End of function sub_11BE0



; Attributes: bp-based frame fpd=0xFFFFFFE4

; _QWORD *__fastcall sub_11FBC(_QWORD *, __int64, __int64, __int64, __int64, unsigned __int64, __int64)
sub_11FBC

var_50= -0x50
var_48= -0x48
var_40= -0x40
var_38= -0x38
var_30= -0x30
var_28= -0x28
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
var_8= -8
arg_0=  0x20
arg_8=  0x28
arg_10=  0x30
arg_18=  0x38
arg_20=  0x40

PUSH            {R4-R9,R11,LR}
ADD             R11, SP, #0x1C
SUB             SP, SP, #0x50
STR             R0, [R11,#-0x1C+var_1C]
STRD            R2, R3, [R11,#-0x1C+var_28]
LDRD            R0, R1, [R11,#-0x1C+arg_18]
LDRD            R2, R3, [R11,#-0x1C+var_28]
ADDS            R6, R0, R2
ADC             R7, R1, R3
STRD            R6, R7, [R11,#-0x1C+arg_18]
LDRD            R0, R1, [R11,#-0x1C+arg_20]
LDRD            R2, R3, [R11,#-0x1C+arg_18]
ADDS            R4, R0, R2
ADC             R5, R1, R3
LDRD            R2, R3, [R11,#-0x1C+arg_10]
ADDS            R1, R4, R2
STR             R1, [R11,#-0x1C+var_30]
ADC             R3, R5, R3
STR             R3, [R11,#-0x1C+var_30+4]
MOV             R2, #0x15
LDRD            R0, R1, [R11,#-0x1C+var_30]
BL              sub_11514
STRD            R0, R1, [R11,#-0x1C+arg_20]
LDRD            R2, R3, [R11,#-0x1C+arg_18]
STRD            R2, R3, [R11,#-0x1C+var_8]
LDRD            R0, R1, [R11,#-0x1C+arg_18]
LDRD            R2, R3, [R11,#-0x1C+arg_0]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_40]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_40+4]
LDRD            R2, R3, [R11,#-0x1C+var_40]
STRD            R2, R3, [R11,#-0x1C+arg_18]
LDRD            R0, R1, [R11,#-0x1C+arg_18]
LDRD            R2, R3, [R11,#-0x1C+arg_8]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_48]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_48+4]
LDRD            R2, R3, [R11,#-0x1C+var_48]
STRD            R2, R3, [R11,#-0x1C+arg_18]
MOV             R2, #0x2C ; ','
LDRD            R0, R1, [R11,#-0x1C+arg_18]
BL              sub_11514
LDRD            R2, R3, [R11,#-0x1C+arg_20]
ADDS            R12, R2, R0
STR             R12, [R11,#-0x1C+var_50]
ADC             R3, R3, R1
STR             R3, [R11,#-0x1C+var_50+4]
LDRD            R2, R3, [R11,#-0x1C+var_50]
STRD            R2, R3, [R11,#-0x1C+arg_20]
LDRD            R0, R1, [R11,#-0x1C+arg_18]
LDRD            R2, R3, [R11,#-0x1C+arg_10]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_38]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_38+4]
LDRD            R2, R3, [R11,#-0x1C+var_38]
STRD            R2, R3, [R11,#-0x1C+var_18]
LDRD            R0, R1, [R11,#-0x1C+arg_20]
LDRD            R2, R3, [R11,#-0x1C+var_8]
ADDS            R8, R0, R2
ADC             R9, R1, R3
STRD            R8, R9, [R11,#-0x1C+var_10]
LDR             R3, [R11,#-0x1C+var_1C]
MOV             R12, R3
SUB             R3, R11, #-(-0x1C+var_18)
LDM             R3, {R0-R3}
STM             R12, {R0-R3}
LDR             R0, [R11,#-0x1C+var_1C]
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}
; End of function sub_11FBC



; Attributes: bp-based frame fpd=0xFFFFFFE4

; _QWORD *__fastcall sub_120DC(_QWORD *, int, unsigned __int64, __int64)
sub_120DC

var_38= -0x38
var_30= -0x30
var_28= -0x28
var_20= -0x20
var_18= -0x18
var_10= -0x10
var_8= -8
var_4= -4
arg_0=  0x20

PUSH            {R4-R9,R11,LR}
ADD             R11, SP, #0x1C
SUB             SP, SP, #0x38
STR             R0, [R11,#-0x1C+var_4]
STR             R1, [R11,#-0x1C+var_8]
STRD            R2, R3, [R11,#-0x1C+var_10]
LDR             R0, [R11,#-0x1C+var_8]
BL              sub_11490
MOV             R8, R0
MOV             R9, R1
LDR             R3, [R11,#-0x1C+var_8]
ADD             R3, R3, #8
MOV             R0, R3
BL              sub_11490
MOV             R4, R0
MOV             R5, R1
LDR             R3, [R11,#-0x1C+var_8]
ADD             R3, R3, #0x10
MOV             R0, R3
BL              sub_11490
MOV             R6, R0
MOV             R7, R1
LDR             R3, [R11,#-0x1C+var_8]
ADD             R3, R3, #0x18
MOV             R0, R3
BL              sub_11490
LDR             R12, [R11,#-0x1C+var_4]
LDRD            R2, R3, [R11,#-0x1C+arg_0]
STRD            R2, R3, [SP,#0x38+var_18]
LDRD            R2, R3, [R11,#-0x1C+var_10]
STRD            R2, R3, [SP,#0x38+var_20]
STRD            R0, R1, [SP,#0x38+var_28]
STRD            R6, R7, [SP,#0x38+var_30]
STRD            R4, R5, [SP,#0x38+var_38]
MOV             R2, R8
MOV             R3, R9
MOV             R0, R12
BL              sub_11FBC
LDR             R0, [R11,#-0x1C+var_4]
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}
; End of function sub_120DC



; Attributes: bp-based frame fpd=0xFFFFFFE4

; unsigned __int64 __fastcall sub_12180(unsigned __int8 *, unsigned int)
sub_12180

var_1C0= -0x1C0
var_1B8= -0x1B8
var_1B0= -0x1B0
var_1A8= -0x1A8
var_1A0= -0x1A0
var_198= -0x198
var_190= -0x190
var_188= -0x188
var_180= -0x180
var_178= -0x178
var_170= -0x170
var_168= -0x168
var_160= -0x160
var_158= -0x158
var_150= -0x150
var_148= -0x148
var_140= -0x140
var_138= -0x138
var_130= -0x130
var_128= -0x128
var_120= -0x120
var_118= -0x118
var_110= -0x110
var_108= -0x108
var_100= -0x100
var_F8= -0xF8
var_F0= -0xF0
var_E8= -0xE8
var_E0= -0xE0
var_D8= -0xD8
var_D0= -0xD0
var_C8= -0xC8
var_C0= -0xC0
var_B8= -0xB8
var_B0= -0xB0
var_A8= -0xA8
var_A0= -0xA0
var_98= -0x98
var_90= -0x90
var_88= -0x88
var_80= -0x80
var_78= -0x78
var_70= -0x70
var_68= -0x68
var_60= -0x60
var_58= -0x58
var_54= -0x54
var_50= -0x50
var_48= -0x48
var_40= -0x40
var_38= -0x38
var_30= -0x30
var_28= -0x28
var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R9,R11,LR}
ADD             R11, SP, #0x1C
SUB             SP, SP, #0x1C0
STR             R0, [R11,#-0x1C+var_54]
STR             R1, [R11,#-0x1C+var_58]
MOV             R2, #0x51 ; 'Q'
MOV             R3, #0
STRD            R2, R3, [R11,#-0x1C+var_20]
LDR             R3, [R11,#-0x1C+var_58]
CMP             R3, #0x10
BHI             loc_121C4
LDR             R1, [R11,#-0x1C+var_58]
LDR             R0, [R11,#-0x1C+var_54]
BL              sub_116C8
MOV             R2, R0
MOV             R3, R1
B               loc_12C24

loc_121C4
LDR             R3, [R11,#-0x1C+var_58]
CMP             R3, #0x20 ; ' '
BHI             loc_121E8
LDR             R1, [R11,#-0x1C+var_58]
LDR             R0, [R11,#-0x1C+var_54]
BL              sub_11A00
MOV             R2, R0
MOV             R3, R1
B               loc_12C24

loc_121E8
LDR             R3, [R11,#-0x1C+var_58]
CMP             R3, #0x40 ; '@'
BHI             loc_1220C
LDR             R1, [R11,#-0x1C+var_58]
LDR             R0, [R11,#-0x1C+var_54]
BL              sub_11BE0
MOV             R2, R0
MOV             R3, R1
B               loc_12C24

loc_1220C
LDRD            R2, R3, [R11,#-0x1C+var_20]
STRD            R2, R3, [R11,#-0x1C+var_8]
ADR             R3, dword_12570
LDRD            R2, R3, [R3]
LDR             R1, [R11,#-0x1C+var_20]
MUL             R0, R3, R1
LDR             R1, [R11,#-0x1C+var_1C]
MUL             R1, R2, R1
ADD             R0, R0, R1
LDR             R1, [R11,#-0x1C+var_20]
UMULL           R2, R3, R1, R2
ADD             R1, R0, R3
MOV             R3, R1
ADDS            R4, R2, #0x71 ; 'q'
ADC             R5, R3, #0
STRD            R4, R5, [R11,#-0x1C+var_10]
ADR             R3, dword_12578
LDRD            R2, R3, [R3]
LDR             R1, [R11,#-0x1C+var_10]
MUL             R0, R3, R1
LDR             R1, [R11,#-0x1C+var_C]
MUL             R1, R2, R1
ADD             R0, R0, R1
LDR             R1, [R11,#-0x1C+var_10]
UMULL           R2, R3, R1, R2
ADD             R1, R0, R3
MOV             R3, R1
ADDS            R6, R2, #0x71 ; 'q'
ADC             R7, R3, #0
MOV             R0, R6
MOV             R1, R7
BL              sub_114C8
ADR             R3, dword_12578
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_18]
STRD            R2, R3, [R11,#-0x1C+var_18]
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R11,#-0x1C+var_40]
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R11,#-0x1C+var_38]
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R11,#-0x1C+var_50]
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R11,#-0x1C+var_48]
ADR             R3, dword_12578
LDRD            R2, R3, [R3]
LDR             R1, [R11,#-0x1C+var_8]
MUL             R0, R3, R1
LDR             R1, [R11,#-0x1C+var_8+4]
MUL             R1, R2, R1
ADD             R0, R0, R1
LDR             R1, [R11,#-0x1C+var_8]
UMULL           R4, R5, R1, R2
ADD             R3, R0, R5
MOV             R5, R3
LDR             R0, [R11,#-0x1C+var_54]
BL              sub_11490
MOV             R2, R0
MOV             R3, R1
ADDS            R8, R4, R2
ADC             R9, R5, R3
STRD            R8, R9, [R11,#-0x1C+var_8]
LDR             R3, [R11,#-0x1C+var_58]
SUB             R3, R3, #1
BIC             R2, R3, #0x3F ; '?'
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, R2
STR             R3, [R11,#-0x1C+var_24]
LDR             R3, [R11,#-0x1C+var_58]
SUB             R3, R3, #1
AND             R3, R3, #0x3F ; '?'
SUB             R2, R3, #0x3F ; '?'
LDR             R3, [R11,#-0x1C+var_24]
ADD             R3, R3, R2
STR             R3, [R11,#-0x1C+var_28]

loc_12360
LDRD            R0, R1, [R11,#-0x1C+var_8]
LDRD            R2, R3, [R11,#-0x1C+var_10]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_70]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_70+4]
LDRD            R2, R3, [R11,#-0x1C+var_40]
LDRD            R0, R1, [R11,#-0x1C+var_70]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_78]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_78+4]
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, #8
MOV             R0, R3
BL              sub_11490
MOV             R2, R0
MOV             R3, R1
LDRD            R0, R1, [R11,#-0x1C+var_78]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_80]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_80+4]
MOV             R2, #0x25 ; '%'
LDRD            R0, R1, [R11,#-0x1C+var_80]
BL              sub_11514
ADR             R3, dword_12570
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_8]
STRD            R2, R3, [R11,#-0x1C+var_8]
LDRD            R0, R1, [R11,#-0x1C+var_38]
LDRD            R2, R3, [R11,#-0x1C+var_10]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_88]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_88+4]
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, #0x30 ; '0'
MOV             R0, R3
BL              sub_11490
MOV             R2, R0
MOV             R3, R1
LDRD            R0, R1, [R11,#-0x1C+var_88]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_90]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_90+4]
MOV             R2, #0x2A ; '*'
LDRD            R0, R1, [R11,#-0x1C+var_90]
BL              sub_11514
ADR             R3, dword_12570
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_10]
STRD            R2, R3, [R11,#-0x1C+var_10]
LDRD            R0, R1, [R11,#-0x1C+var_48]
LDRD            R2, R3, [R11,#-0x1C+var_8]
EOR             R12, R2, R0
STR             R12, [R11,#-0x1C+var_160]
EOR             R3, R3, R1
STR             R3, [R11,#-0x1C+var_160+4]
SUB             R3, R11, #-(-0x1C+var_160)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_8]
LDRD            R4, R5, [R11,#-0x1C+var_40]
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, #0x28 ; '('
MOV             R0, R3
BL              sub_11490
MOV             R2, R0
MOV             R3, R1
ADDS            R1, R4, R2
STR             R1, [R11,#-0x1C+var_150]
ADC             R3, R5, R3
STR             R3, [R11,#-0x1C+var_150+4]
LDRD            R2, R3, [R11,#-0x1C+var_10]
SUB             R1, R11, #-(-0x1C+var_150)
LDRD            R0, R1, [R1]
MOV             R12, R0
ADDS            R12, R2, R12
STR             R12, [R11,#-0x1C+var_168]
ADC             R3, R3, R1
STR             R3, [R11,#-0x1C+var_168+4]
SUB             R3, R11, #-(-0x1C+var_168)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_10]
LDRD            R0, R1, [R11,#-0x1C+var_50]
LDRD            R2, R3, [R11,#-0x1C+var_18]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_98]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_98+4]
MOV             R2, #0x21 ; '!'
LDRD            R0, R1, [R11,#-0x1C+var_98]
BL              sub_11514
ADR             R3, dword_12570
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_18]
STRD            R2, R3, [R11,#-0x1C+var_18]
LDRD            R0, R1, [R11,#-0x1C+var_38]
ADR             R3, dword_12570
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R4, R5, R0, R2
ADD             R3, R12, R5
MOV             R5, R3
LDRD            R0, R1, [R11,#-0x1C+var_50]
LDRD            R2, R3, [R11,#-0x1C+var_8]
ADDS            R12, R0, R2
B               loc_12588
dword_12570 DCD 0xBE98F273
DCD 0xB492B66F
dword_12578 DCD 0x2F90404F
DCD 0x9AE16A3B
dword_12580 DCD 0xBE98F273
DCD 0xB492B66F

loc_12588
STR             R12, [R11,#-0x1C+var_A0]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_A0+4]
SUB             R0, R11, #-(-0x1C+var_40)
LDRD            R2, R3, [R11,#-0x1C+var_A0]
STRD            R2, R3, [SP,#0x1C0+var_1C0]
MOV             R2, R4
MOV             R3, R5
LDR             R1, [R11,#-0x1C+var_54]
BL              sub_120DC
LDR             R3, [R11,#-0x1C+var_54]
ADD             R4, R3, #0x20 ; ' '
LDRD            R0, R1, [R11,#-0x1C+var_48]
LDRD            R2, R3, [R11,#-0x1C+var_18]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_A8]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_A8+4]
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, #0x10
MOV             R0, R3
BL              sub_11490
LDRD            R2, R3, [R11,#-0x1C+var_10]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_B0]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_B0+4]
SUB             R0, R11, #-(-0x1C+var_50)
LDRD            R2, R3, [R11,#-0x1C+var_B0]
STRD            R2, R3, [SP,#0x1C0+var_1C0]
LDRD            R2, R3, [R11,#-0x1C+var_A8]
MOV             R1, R4
BL              sub_120DC
LDRD            R0, R1, [R11,#-0x1C+var_18]
LDRD            R2, R3, [R11,#-0x1C+var_8]
EOR             R12, R0, R2
STR             R12, [R11,#-0x1C+var_170]
EOR             R3, R1, R3
STR             R3, [R11,#-0x1C+var_170+4]
SUB             R3, R11, #-(-0x1C+var_170)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_18]
LDRD            R0, R1, [R11,#-0x1C+var_8]
LDRD            R2, R3, [R11,#-0x1C+var_18]
EOR             R12, R0, R2
STR             R12, [R11,#-0x1C+var_178]
EOR             R3, R1, R3
STR             R3, [R11,#-0x1C+var_178+4]
SUB             R3, R11, #-(-0x1C+var_178)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_8]
LDRD            R0, R1, [R11,#-0x1C+var_18]
LDRD            R2, R3, [R11,#-0x1C+var_8]
EOR             R12, R0, R2
STR             R12, [R11,#-0x1C+var_180]
EOR             R3, R1, R3
STR             R3, [R11,#-0x1C+var_180+4]
SUB             R3, R11, #-(-0x1C+var_180)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_18]
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, #0x40 ; '@'
STR             R3, [R11,#-0x1C+var_54]
LDR             R2, [R11,#-0x1C+var_54]
LDR             R3, [R11,#-0x1C+var_24]
CMP             R2, R3
BNE             loc_12360
LDRD            R2, R3, [R11,#-0x1C+var_18]
ADDS            R1, R2, R2
STR             R1, [R11,#-0x1C+var_188]
ADC             R3, R3, R3
STR             R3, [R11,#-0x1C+var_188+4]
SUB             R3, R11, #-(-0x1C+var_188)
LDRD            R0, R1, [R3]
MOVW            R2, #0x1FE
MOV             R3, #0
AND             R12, R0, R2
STR             R12, [R11,#-0x1C+var_B8]
AND             R3, R1, R3
STR             R3, [R11,#-0x1C+var_B8+4]
ADR             R3, dword_12580
LDRD            R2, R3, [R3]
LDRD            R0, R1, [R11,#-0x1C+var_B8]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_190]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_190+4]
SUB             R3, R11, #-(-0x1C+var_190)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_30]
LDR             R3, [R11,#-0x1C+var_28]
STR             R3, [R11,#-0x1C+var_54]
LDRD            R4, R5, [R11,#-0x1C+var_50]
LDR             R3, [R11,#-0x1C+var_58]
SUB             R3, R3, #1
MOV             R0, R3
MOV             R1, #0
MOV             R2, #0x3F ; '?'
MOV             R3, #0
AND             R12, R0, R2
STR             R12, [R11,#-0x1C+var_C0]
AND             R3, R1, R3
STR             R3, [R11,#-0x1C+var_C0+4]
LDRD            R2, R3, [R11,#-0x1C+var_C0]
MOV             R1, R2
ADDS            R1, R4, R1
STR             R1, [R11,#-0x1C+var_C8]
ADC             R3, R5, R3
STR             R3, [R11,#-0x1C+var_C8+4]
LDRD            R2, R3, [R11,#-0x1C+var_C8]
STRD            R2, R3, [R11,#-0x1C+var_50]
LDRD            R0, R1, [R11,#-0x1C+var_40]
LDRD            R2, R3, [R11,#-0x1C+var_50]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_D0]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_D0+4]
LDRD            R2, R3, [R11,#-0x1C+var_D0]
STRD            R2, R3, [R11,#-0x1C+var_40]
LDRD            R0, R1, [R11,#-0x1C+var_50]
LDRD            R2, R3, [R11,#-0x1C+var_40]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_D8]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_D8+4]
LDRD            R2, R3, [R11,#-0x1C+var_D8]
STRD            R2, R3, [R11,#-0x1C+var_50]
LDRD            R0, R1, [R11,#-0x1C+var_8]
LDRD            R2, R3, [R11,#-0x1C+var_10]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_E0]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_E0+4]
LDRD            R2, R3, [R11,#-0x1C+var_40]
LDRD            R0, R1, [R11,#-0x1C+var_E0]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_E8]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_E8+4]
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, #8
MOV             R0, R3
BL              sub_11490
MOV             R2, R0
MOV             R3, R1
SUB             R1, R11, #-(-0x1C+var_E8)
LDRD            R0, R1, [R1]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_F0]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_F0+4]
MOV             R2, #0x25 ; '%'
SUB             R3, R11, #-(-0x1C+var_F0)
LDRD            R0, R1, [R3]
BL              sub_11514
LDR             R3, [R11,#-0x1C+var_30+4]
MUL             R2, R0, R3
LDR             R3, [R11,#-0x1C+var_30]
MUL             R3, R1, R3
ADD             R12, R2, R3
LDR             R3, [R11,#-0x1C+var_30]
UMULL           R2, R3, R3, R0
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_8]
STRD            R2, R3, [R11,#-0x1C+var_8]
LDRD            R0, R1, [R11,#-0x1C+var_38]
LDRD            R2, R3, [R11,#-0x1C+var_10]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_F8]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_F8+4]
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, #0x30 ; '0'
MOV             R0, R3
BL              sub_11490
MOV             R2, R0
MOV             R3, R1
SUB             R1, R11, #-(-0x1C+var_F8)
LDRD            R0, R1, [R1]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_100]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_100+4]
MOV             R2, #0x2A ; '*'
SUB             R3, R11, #-(-0x1C+var_100)
LDRD            R0, R1, [R3]
BL              sub_11514
LDR             R3, [R11,#-0x1C+var_30+4]
MUL             R2, R0, R3
LDR             R3, [R11,#-0x1C+var_30]
MUL             R3, R1, R3
ADD             R12, R2, R3
LDR             R3, [R11,#-0x1C+var_30]
UMULL           R2, R3, R3, R0
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_10]
STRD            R2, R3, [R11,#-0x1C+var_10]
LDRD            R4, R5, [R11,#-0x1C+var_48]
MOV             R2, R4
MOV             R3, R5
MOV             R0, #0
MOV             R1, #0
MOV             R1, R3,LSL#3
ORR             R1, R1, R2,LSR#29
MOV             R0, R2,LSL#3
MOV             R2, R0
MOV             R3, R1
ADDS            R1, R2, R4
STR             R1, [R11,#-0x1C+var_108]
ADC             R3, R3, R5
STR             R3, [R11,#-0x1C+var_108+4]
LDRD            R2, R3, [R11,#-0x1C+var_8]
SUB             R1, R11, #-(-0x1C+var_108)
LDRD            R0, R1, [R1]
MOV             R12, R0
EOR             R12, R2, R12
STR             R12, [R11,#-0x1C+var_198]
EOR             R1, R1, R3
STR             R1, [R11,#-0x1C+var_198+4]
SUB             R3, R11, #-(-0x1C+var_198)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_8]
LDRD            R4, R5, [R11,#-0x1C+var_40]
MOV             R2, R4
MOV             R3, R5
MOV             R0, #0
MOV             R1, #0
MOV             R1, R3,LSL#3
ORR             R1, R1, R2,LSR#29
MOV             R0, R2,LSL#3
MOV             R2, R0
MOV             R3, R1
ADDS            R1, R2, R4
STR             R1, [R11,#-0x1C+var_110]
ADC             R3, R3, R5
STR             R3, [R11,#-0x1C+var_110+4]
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, #0x28 ; '('
MOV             R0, R3
BL              sub_11490
MOV             R2, R0
MOV             R3, R1
SUB             R1, R11, #-(-0x1C+var_110)
LDRD            R0, R1, [R1]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_158]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_158+4]
LDRD            R2, R3, [R11,#-0x1C+var_10]
SUB             R1, R11, #-(-0x1C+var_158)
LDRD            R0, R1, [R1]
MOV             R12, R0
ADDS            R12, R2, R12
STR             R12, [R11,#-0x1C+var_1A0]
ADC             R3, R3, R1
STR             R3, [R11,#-0x1C+var_1A0+4]
SUB             R3, R11, #-(-0x1C+var_1A0)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_10]
LDRD            R0, R1, [R11,#-0x1C+var_50]
LDRD            R2, R3, [R11,#-0x1C+var_18]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_118]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_118+4]
MOV             R2, #0x21 ; '!'
SUB             R3, R11, #-(-0x1C+var_118)
LDRD            R0, R1, [R3]
BL              sub_11514
LDR             R3, [R11,#-0x1C+var_30+4]
MUL             R2, R0, R3
LDR             R3, [R11,#-0x1C+var_30]
MUL             R3, R1, R3
ADD             R12, R2, R3
LDR             R3, [R11,#-0x1C+var_30]
UMULL           R2, R3, R3, R0
ADD             R1, R12, R3
MOV             R3, R1
STRD            R2, R3, [R11,#-0x1C+var_18]
STRD            R2, R3, [R11,#-0x1C+var_18]
LDRD            R2, R3, [R11,#-0x1C+var_38]
LDR             R1, [R11,#-0x1C+var_30]
MUL             R0, R3, R1
LDR             R1, [R11,#-0x1C+var_30+4]
MUL             R1, R2, R1
ADD             R0, R0, R1
LDR             R1, [R11,#-0x1C+var_30]
UMULL           R4, R5, R1, R2
ADD             R3, R0, R5
MOV             R5, R3
LDRD            R0, R1, [R11,#-0x1C+var_50]
LDRD            R2, R3, [R11,#-0x1C+var_8]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_120]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_120+4]
SUB             R0, R11, #-(-0x1C+var_68)
SUB             R3, R11, #-(-0x1C+var_120)
LDRD            R2, R3, [R3]
STRD            R2, R3, [SP,#0x1C0+var_1C0]
MOV             R2, R4
MOV             R3, R5
LDR             R1, [R11,#-0x1C+var_54]
BL              sub_120DC
SUB             R12, R11, #-(-0x1C+var_40)
SUB             R3, R11, #-(-0x1C+var_68)
LDM             R3, {R0-R3}
STM             R12, {R0-R3}
LDR             R3, [R11,#-0x1C+var_54]
ADD             R4, R3, #0x20 ; ' '
LDRD            R0, R1, [R11,#-0x1C+var_48]
LDRD            R2, R3, [R11,#-0x1C+var_18]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_128]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_128+4]
LDR             R3, [R11,#-0x1C+var_54]
ADD             R3, R3, #0x10
MOV             R0, R3
BL              sub_11490
LDRD            R2, R3, [R11,#-0x1C+var_10]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_130]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_130+4]
SUB             R0, R11, #-(-0x1C+var_68)
SUB             R3, R11, #-(-0x1C+var_130)
LDRD            R2, R3, [R3]
STRD            R2, R3, [SP,#0x1C0+var_1C0]
SUB             R3, R11, #-(-0x1C+var_128)
LDRD            R2, R3, [R3]
MOV             R1, R4
BL              sub_120DC
SUB             R12, R11, #-(-0x1C+var_50)
SUB             R3, R11, #-(-0x1C+var_68)
LDM             R3, {R0-R3}
STM             R12, {R0-R3}
LDRD            R0, R1, [R11,#-0x1C+var_18]
LDRD            R2, R3, [R11,#-0x1C+var_8]
EOR             R12, R0, R2
STR             R12, [R11,#-0x1C+var_1A8]
EOR             R3, R1, R3
STR             R3, [R11,#-0x1C+var_1A8+4]
SUB             R3, R11, #-(-0x1C+var_1A8)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_18]
LDRD            R0, R1, [R11,#-0x1C+var_8]
LDRD            R2, R3, [R11,#-0x1C+var_18]
EOR             R12, R0, R2
STR             R12, [R11,#-0x1C+var_1B0]
EOR             R3, R1, R3
STR             R3, [R11,#-0x1C+var_1B0+4]
SUB             R3, R11, #-(-0x1C+var_1B0)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_8]
LDRD            R0, R1, [R11,#-0x1C+var_18]
LDRD            R2, R3, [R11,#-0x1C+var_8]
EOR             R12, R0, R2
STR             R12, [R11,#-0x1C+var_1B8]
EOR             R3, R1, R3
STR             R3, [R11,#-0x1C+var_1B8+4]
SUB             R3, R11, #-(-0x1C+var_1B8)
LDRD            R2, R3, [R3]
STRD            R2, R3, [R11,#-0x1C+var_18]
LDRD            R0, R1, [R11,#-0x1C+var_40]
LDRD            R4, R5, [R11,#-0x1C+var_50]
LDRD            R2, R3, [R11,#-0x1C+var_30]
STRD            R2, R3, [SP,#0x1C0+var_1C0]
MOV             R2, R4
MOV             R3, R5
BL              sub_11598
MOV             R4, R0
MOV             R5, R1
LDRD            R0, R1, [R11,#-0x1C+var_10]
BL              sub_114C8
ADR             R3, dword_12C38
LDRD            R2, R3, [R3]
MUL             LR, R2, R1
MUL             R12, R0, R3
ADD             R12, LR, R12
UMULL           R2, R3, R0, R2
ADD             R1, R12, R3
MOV             R3, R1
ADDS            R1, R4, R2
STR             R1, [R11,#-0x1C+var_138]
ADC             R3, R5, R3
STR             R3, [R11,#-0x1C+var_138+4]
LDRD            R2, R3, [R11,#-0x1C+var_18]
SUB             R1, R11, #-(-0x1C+var_138)
LDRD            R0, R1, [R1]
MOV             R12, R0
ADDS            R12, R12, R2
STR             R12, [R11,#-0x1C+var_140]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_140+4]
LDRD            R0, R1, [R11,#-0x1C+var_38]
LDRD            R4, R5, [R11,#-0x1C+var_48]
LDRD            R2, R3, [R11,#-0x1C+var_30]
STRD            R2, R3, [SP,#0x1C0+var_1C0]
MOV             R2, R4
MOV             R3, R5
BL              sub_11598
LDRD            R2, R3, [R11,#-0x1C+var_8]
ADDS            R12, R0, R2
STR             R12, [R11,#-0x1C+var_148]
ADC             R3, R1, R3
STR             R3, [R11,#-0x1C+var_148+4]
LDRD            R2, R3, [R11,#-0x1C+var_30]
STRD            R2, R3, [SP,#0x1C0+var_1C0]
SUB             R3, R11, #-(-0x1C+var_148)
LDRD            R2, R3, [R3]
SUB             R1, R11, #-(-0x1C+var_140)
LDRD            R0, R1, [R1]
BL              sub_11598
MOV             R2, R0
MOV             R3, R1

loc_12C24
MOV             R0, R2
MOV             R1, R3
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}
; End of function sub_12180

ALIGN 8
dword_12C38 DCD 0x97CB3127
DCD 0xC3A5C85C


; Attributes: bp-based frame fpd=0xFFFFFFFC

; int __fastcall sub_12C40(const char *, char *, const char *, _BYTE *, char, char, char)
sub_12C40

var_C08= -0xC08
ptr= -0xC00
var_BFC= -0xBFC
s= -0xBF8
var_BF4= -0xBF4
var_BEC= -0xBEC
var_BDC= -0xBDC
var_ADC= -0xADC
var_A78= -0xA78
var_A6C= -0xA6C
var_A58= -0xA58
var_A4C= -0xA4C
var_94C= -0x94C
var_8DC= -0x8DC
var_4C8= -0x4C8
var_4BC= -0x4BC
dest= -0xC8
var_C0= -0xC0
var_90= -0x90
var_58= -0x58
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_3C= -0x3C
n= -0x38
var_34= -0x34
var_30= -0x30
var_2A= -0x2A
var_28= -0x28
stream= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_1= -1
arg_0=  8
arg_4=  0xC
arg_8=  0x10

PUSH            {R11,LR}
ADD             R11, SP, #4
SUB             SP, SP, #0xC00
SUB             SP, SP, #8
STR             R0, [R11,#-4+var_BF4]
STR             R1, [R11,#-4+s]
STR             R2, [R11,#-4+var_BFC]
STR             R3, [R11,#-4+ptr]
SUB             R3, R11, #-(-4+var_C0)
MOV             R1, R3
LDR             R0, [R11,#-4+var_BF4]
BLX             sub_13BA4
LDRD            R2, R3, [R11,#-4+var_90]
MOV             R3, R2
STR             R3, [R11,#-4+var_1C]
LDR             R3, [R11,#-4+var_1C]
CMP             R3, #0x800
BGE             loc_12CA4
MOV             R2, #0x800
LDR             R1, [R11,#-4+var_BF4]
MOV             R0, #aFileSNotEnough ; "File '%s' Not Enough %d, Something Wron"...
BL              printf
MOV             R3, #6
B               loc_13774

loc_12CA4
MOV             R1, #aRb ; "rb"
LDR             R0, [R11,#-4+var_BF4]
BL              fopen64
STR             R0, [R11,#-4+stream]
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BNE             loc_12CDC
LDR             R1, [R11,#-4+var_BF4]
MOV             R0, #aReadFileSFaile ; "Read File '%s' Failed!\n"
BL              printf
MOV             R3, #7
B               loc_13774

loc_12CDC               ; stream
LDR             R3, [R11,#-4+stream]
MOV             R2, #1  ; n
MOV             R1, #0x800 ; size
LDR             R0, [R11,#-4+ptr] ; ptr
BL              fread
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3]
CMP             R3, #0x26 ; '&'
BEQ             loc_12D2C
LDR             R1, [R11,#-4+var_BF4]
MOV             R0, #aSNotABtmuFile ; "'%s' Not A Btmu File!\n"
BL              printf
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BEQ             loc_12D24
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose

loc_12D24
MOV             R3, #8
B               loc_13774

loc_12D2C
LDR             R1, [R11,#-4+s]
MOV             R0, #aMinerTypeS ; "miner_type %s\n"
BL              printf
LDR             R0, [R11,#-4+s] ; s
BL              strlen
MOV             R3, R0
MOV             R1, R3
LDR             R0, [R11,#-4+s]
BL              sub_12180
STRD            R0, R1, [R11,#-4+var_28]
LDR             R3, [R11,#-4+ptr]
ADD             R1, R3, #2 ; src
SUB             R3, R11, #-(-4+dest)
MOV             R2, #8  ; n
MOV             R0, R3  ; dest
BL              memcpy
LDRD            R2, R3, [R11,#-4+dest]
STRD            R2, R3, [SP,#0xC08+var_C08]
LDRD            R2, R3, [R11,#-4+var_28]
MOV             R0, #aMinerTypeHash1 ; "miner_type_hash %16llx, bmu_hash %16llx"...
BL              printf
LDRD            R2, R3, [R11,#-4+dest]
LDRD            R0, R1, [R11,#-4+var_28]
CMP             R1, R3
CMPEQ           R0, R2
BEQ             loc_12DC4
MOV             R0, #aInputMinerType ; "input miner_type and bmu miner type don"...
BL              puts
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BEQ             loc_12DBC
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose

loc_12DBC
MOV             R3, #0x1E
B               loc_13774

loc_12DC4
MOV             R3, #0
STRB            R3, [R11,#-4+var_1]
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3,#0xB]
MOV             R3, R3,LSL#8
SXTH            R2, R3
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3,#0xC]
SXTH            R3, R3
ORR             R3, R2, R3
SXTH            R3, R3
STRH            R3, [R11,#-4+var_2A]
LDRB            R3, [R11,#-4+arg_8]
CMP             R3, #0
BEQ             loc_12E38
LDRH            R3, [R11,#-4+var_2A]
MOV             R1, R3
MOV             R0, #aContentX ; "content:%x\n"
BL              printf
LDRH            R3, [R11,#-4+var_2A]
AND             R3, R3, #0xFE00
CMP             R3, #0xFE00
BEQ             loc_12E38
MOV             R0, #aThisPackageWas ; "This Package Was Not Full Package!"
BL              puts
MOV             R3, #0x14
B               loc_13774

loc_12E38
MOV             R3, #0
STR             R3, [R11,#-4+var_8]
B               loc_12E74

loc_12E44
LDRH            R2, [R11,#-4+var_2A]
LDR             R3, [R11,#-4+var_8]
MOV             R3, R2,ASR R3
AND             R3, R3, #1
CMP             R3, #0
BEQ             loc_12E68
LDRB            R3, [R11,#-4+var_1]
ADD             R3, R3, #1
STRB            R3, [R11,#-4+var_1]

loc_12E68
LDR             R3, [R11,#-4+var_8]
ADD             R3, R3, #1
STR             R3, [R11,#-4+var_8]

loc_12E74
LDR             R3, [R11,#-4+var_8]
CMP             R3, #0xF
BLE             loc_12E44
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3,#0x518]
LDRB            R2, [R11,#-4+var_1]
CMP             R2, R3
BEQ             loc_12ED0
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3,#0x518]
MOV             R1, R3
LDRB            R3, [R11,#-4+var_1]
MOV             R2, R3
MOV             R0, #aContentDoesnTM ; "Content Doesn't Match![%d][%d]\n"
BL              printf
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BEQ             loc_12EC8
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose

loc_12EC8
MOV             R3, #9
B               loc_13774

loc_12ED0
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3,#0x518]
ADD             R3, R3, #9
MOV             R3, R3,LSL#8
STR             R3, [R11,#-4+var_C]
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3,#0x519]
MOV             R2, R3,LSL#24
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3,#0x51A]
MOV             R3, R3,LSL#16
ORR             R2, R2, R3
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3,#0x51B]
MOV             R3, R3,LSL#8
ORR             R3, R2, R3
LDR             R2, [R11,#-4+ptr]
LDRB            R2, [R2,#0x51C]
ORR             R3, R3, R2
STR             R3, [R11,#-4+var_30]
MOV             R3, #0
STR             R3, [R11,#-4+var_10]
B               loc_13004

loc_12F2C
LDR             R1, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_10]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R1, R3
ADD             R3, R3, #0x510
ADD             R3, R3, #0xE
LDRB            R3, [R3]
MOV             R1, R3,LSL#24
LDR             R0, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_10]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R0, R3
ADD             R3, R3, #0x510
ADD             R3, R3, #0xF
LDRB            R3, [R3]
MOV             R3, R3,LSL#16
ORR             R1, R1, R3
LDR             R0, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_10]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R0, R3
ADD             R3, R3, #0x520
LDRB            R3, [R3]
MOV             R3, R3,LSL#8
ORR             R1, R1, R3
LDR             R0, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_10]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R0, R3
ADD             R3, R3, #0x520
ADD             R3, R3, #1
LDRB            R3, [R3]
ORR             R3, R1, R3
STR             R3, [R11,#-4+var_58]
LDR             R2, [R11,#-4+var_C]
LDR             R3, [R11,#-4+var_58]
ADD             R3, R2, R3
STR             R3, [R11,#-4+var_C]
LDR             R2, [R11,#-4+var_58]
LDR             R1, [R11,#-4+var_10]
MOV             R0, #aFileDSizeD ; "file[%d] size:[%d]\n"
BL              printf
LDR             R3, [R11,#-4+var_10]
ADD             R3, R3, #1
STR             R3, [R11,#-4+var_10]

loc_13004
LDRB            R3, [R11,#-4+var_1]
LDR             R2, [R11,#-4+var_10]
CMP             R2, R3
BLT             loc_12F2C
LDR             R2, [R11,#-4+var_C]
LDR             R3, [R11,#-4+var_1C]
CMP             R2, R3
BEQ             loc_13058
LDR             R3, [R11,#-4+var_C]
LDR             R2, [R11,#-4+var_1C]
LDR             R1, [R11,#-4+var_30]
MOV             R0, #aCheckFilesizeF ; "Check FileSize Failed, FileSize Should "...
BL              printf
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BEQ             loc_13050
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose

loc_13050
MOV             R3, #0xA
B               loc_13774

loc_13058
MOV             R1, #aR ; "r"
LDR             R0, [R11,#-4+var_BFC]
BL              fopen64
STR             R0, [R11,#-4+var_34]
LDR             R3, [R11,#-4+var_34]
CMP             R3, #0
BNE             loc_130A4
LDR             R1, [R11,#-4+var_BFC]
MOV             R0, #aCannotOpenRoot ; "Cannot Open Root PublicKey '%s'!\n"
BL              printf
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BEQ             loc_1309C
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose

loc_1309C
MOV             R3, #0xB
B               loc_13774

loc_130A4
MOV             R3, #0
STR             R3, [R11,#-4+var_4C8]
SUB             R3, R11, #-(-4+var_4BC)
SUB             R3, R3, #4
SUB             R3, R3, #4
MOV             R2, #0x3FC ; n
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
SUB             R0, R11, #-(-4+var_4BC)
SUB             R0, R0, #4
SUB             R0, R0, #8 ; ptr
LDR             R3, [R11,#-4+var_34] ; stream
MOV             R2, #1  ; n
MOV             R1, #0x400 ; size
BL              fread
LDR             R0, [R11,#-4+var_34] ; stream
BL              fclose
MOV             R3, #0
STR             R3, [R11,#-4+var_34]
LDR             R3, [R11,#-4+ptr]
LDRB            R3, [R3,#0x16]
MOV             R3, R3,LSL#8
LDR             R2, [R11,#-4+ptr]
LDRB            R2, [R2,#0x17]
ORR             R3, R3, R2
STR             R3, [R11,#-4+n]
LDR             R3, [R11,#-4+ptr]
ADD             R0, R3, #0x18
LDR             R1, [R11,#-4+n]
LDR             R3, [R11,#-4+ptr]
ADD             R2, R3, #0x410
ADD             R2, R2, #8
SUB             R3, R11, #-(-4+var_4BC)
SUB             R3, R3, #4
SUB             R3, R3, #8
BL              sub_10C70
STR             R0, [R11,#-4+var_3C]
LDR             R3, [R11,#-4+var_3C]
CMP             R3, #0
BEQ             loc_13174
LDR             R1, [R11,#-4+var_3C]
MOV             R0, #aCheckPemPayloa ; "Check pem payload failed! ret:[%d]\n"
BL              printf
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BEQ             loc_1316C
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose

loc_1316C
LDR             R3, [R11,#-4+var_3C]
B               loc_13774

loc_13174
MOV             R1, #aW ; "w"
MOV             R0, #aUsrBinFwVersio ; "/usr/bin/fw_version"
BL              fopen64
STR             R0, [R11,#-4+var_40]
LDR             R3, [R11,#-4+var_40]
CMP             R3, #0
BEQ             loc_131B8
LDR             R3, [R11,#-4+ptr]
ADD             R0, R3, #0xD ; ptr
LDR             R3, [R11,#-4+var_40] ; s
MOV             R2, #8  ; n
MOV             R1, #1  ; size
BL              fwrite
LDR             R0, [R11,#-4+var_40] ; stream
BL              fclose

loc_131B8
LDRB            R3, [R11,#-4+arg_0]
CMP             R3, #0
BEQ             loc_13280
MOV             R1, #aW ; "w"
MOV             R0, #aTmpTmpfwMinerP ; "/tmp/tmpfw/miner.pem"
BL              fopen64
STR             R0, [R11,#-4+var_44]
LDR             R3, [R11,#-4+var_44]
CMP             R3, #0
BEQ             loc_13230
LDR             R3, [R11,#-4+ptr]
ADD             R0, R3, #0x18 ; ptr
LDR             R2, [R11,#-4+n] ; n
LDR             R3, [R11,#-4+var_44] ; s
MOV             R1, #1  ; size
BL              fwrite
LDR             R0, [R11,#-4+var_44] ; stream
BL              fclose
MOV             R1, #aW ; "w"
MOV             R0, #aTmpTmpfwMinerP_0 ; "/tmp/tmpfw/miner.pem.sig"
BL              fopen64
STR             R0, [R11,#-4+var_44]
LDR             R3, [R11,#-4+var_44]
CMP             R3, #0
BEQ             loc_1326C
B               loc_13244

loc_13230
MOV             R0, #aDumpMinerPemFa ; "Dump Miner.pem Failed!\r"
BL              puts
MOV             R3, #0xF
B               loc_13774

loc_13244
LDR             R3, [R11,#-4+ptr]
ADD             R0, R3, #0x410
ADD             R0, R0, #8 ; ptr
LDR             R3, [R11,#-4+var_44] ; s
MOV             R2, #0x100 ; n
MOV             R1, #1  ; size
BL              fwrite
LDR             R0, [R11,#-4+var_44] ; stream
BL              fclose
B               loc_13280

loc_1326C
MOV             R0, #aDumpMinerPemSi ; "Dump Miner.pem.sig Failed!\r"
BL              puts
MOV             R3, #0x10
B               loc_13774

loc_13280
SUB             R3, R11, #-(-4+var_8DC)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R2, #0x420 ; n
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
SUB             R3, R11, #-(-4+var_94C)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R0, R3
BL              SHA256_Init
SUB             R3, R11, #-(-4+var_94C)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R2, #0x800
LDR             R1, [R11,#-4+ptr]
MOV             R0, R3
BL              SHA256_Update
SUB             R2, R11, #-(-4+var_94C)
SUB             R2, R2, #4
SUB             R2, R2, #8
SUB             R3, R11, #-(-4+var_8DC)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R1, R2
MOV             R0, R3
BL              SHA256_Final
MOV             R3, #0
STR             R3, [R11,#-4+var_14]
B               loc_13418

loc_132FC
LDR             R1, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_14]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R1, R3
ADD             R3, R3, #0x510
ADD             R3, R3, #0xE
LDRB            R3, [R3]
MOV             R1, R3,LSL#24
LDR             R0, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_14]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R0, R3
ADD             R3, R3, #0x510
ADD             R3, R3, #0xF
LDRB            R3, [R3]
MOV             R3, R3,LSL#16
ORR             R1, R1, R3
LDR             R0, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_14]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R0, R3
ADD             R3, R3, #0x520
LDRB            R3, [R3]
MOV             R3, R3,LSL#8
ORR             R1, R1, R3
LDR             R0, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_14]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R0, R3
ADD             R3, R3, #0x520
ADD             R3, R3, #1
LDRB            R3, [R3]
ORR             R3, R1, R3
STR             R3, [R11,#-4+var_54]
LDR             R0, [R11,#-4+var_54]
LDR             R3, [R11,#-4+var_14]
ADD             R3, R3, #1
MOV             R2, R3,LSL#5
SUB             R3, R11, #-(-4+var_8DC)
SUB             R3, R3, #4
SUB             R3, R3, #8
ADD             R12, R3, R2
LDR             R1, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_14]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R1, R3
ADD             R3, R3, #0x510
ADD             R3, R3, #0xD
LDRB            R2, [R3]
LDRB            R3, [R11,#-4+arg_0]
STR             R3, [SP,#0xC08+var_C08+4]
MOV             R3, #0
STR             R3, [SP,#0xC08+var_C08]
MOV             R3, R2
MOV             R2, R12
MOV             R1, R0
LDR             R0, [R11,#-4+stream]
BL              sub_10DE8
LDR             R3, [R11,#-4+var_14]
ADD             R3, R3, #1
STR             R3, [R11,#-4+var_14]

loc_13418
LDRB            R3, [R11,#-4+var_1]
LDR             R2, [R11,#-4+var_14]
CMP             R2, R3
BLT             loc_132FC
MOV             R3, #0
STR             R3, [R11,#-4+var_18]
B               loc_134AC

loc_13434
LDRB            R3, [R11,#-4+var_1]
ADD             R2, R3, #1
LDR             R3, [R11,#-4+var_18]
ADD             R3, R2, R3
MOV             R2, R3,LSL#5
SUB             R3, R11, #-(-4+var_8DC)
SUB             R3, R3, #4
SUB             R3, R3, #8
ADD             R0, R3, R2
LDR             R1, [R11,#-4+ptr]
LDR             R2, [R11,#-4+var_18]
MOV             R3, R2
MOV             R3, R3,LSL#2
ADD             R3, R3, R2
ADD             R3, R1, R3
ADD             R3, R3, #0x510
ADD             R3, R3, #0xD
LDRB            R2, [R3]
LDRB            R3, [R11,#-4+arg_0]
STR             R3, [SP,#0xC08+var_C08+4]
MOV             R3, #1
STR             R3, [SP,#0xC08+var_C08]
MOV             R3, R2
MOV             R2, R0
MOV             R1, #0x100
LDR             R0, [R11,#-4+stream]
BL              sub_10DE8
LDR             R3, [R11,#-4+var_18]
ADD             R3, R3, #1
STR             R3, [R11,#-4+var_18]

loc_134AC
LDRB            R3, [R11,#-4+var_1]
LDR             R2, [R11,#-4+var_18]
CMP             R2, R3
BLT             loc_13434
MOV             R3, #0
STR             R3, [R11,#-4+var_A58]
SUB             R3, R11, #-(-4+var_A4C)
SUB             R3, R3, #4
SUB             R3, R3, #4
MOV             R2, #0xFC ; n
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
MOV             R2, #2  ; whence
MOV             R1, #0xFFFFFF00 ; off
LDR             R0, [R11,#-4+stream] ; stream
BL              fseek
SUB             R0, R11, #-(-4+var_A4C)
SUB             R0, R0, #4
SUB             R0, R0, #8 ; ptr
LDR             R3, [R11,#-4+stream] ; stream
MOV             R2, #1  ; n
MOV             R1, #0x100 ; size
BL              fread
MOV             R3, #0
STR             R3, [R11,#-4+var_A78]
SUB             R3, R11, #-(-4+var_A6C)
SUB             R3, R3, #4
SUB             R3, R3, #4
MOV             R2, #0
STR             R2, [R3]
STR             R2, [R3,#4]
STR             R2, [R3,#8]
STR             R2, [R3,#0xC]
STR             R2, [R3,#0x10]
STR             R2, [R3,#0x14]
STR             R2, [R3,#0x18]
SUB             R3, R11, #-(-4+var_ADC)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R0, R3
BL              SHA256_Init
LDRB            R3, [R11,#-4+var_1]
MOV             R3, R3,LSL#6
ADD             R3, R3, #0x20 ; ' '
MOV             R2, R3
SUB             R1, R11, #-(-4+var_8DC)
SUB             R1, R1, #4
SUB             R1, R1, #8
SUB             R3, R11, #-(-4+var_ADC)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R0, R3
BL              SHA256_Update
SUB             R2, R11, #-(-4+var_ADC)
SUB             R2, R2, #4
SUB             R2, R2, #8
SUB             R3, R11, #-(-4+var_A6C)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R1, R2
MOV             R0, R3
BL              SHA256_Final
MOV             R3, #0
STR             R3, [R11,#-4+var_48]
MOV             R3, #0
STR             R3, [R11,#-4+var_4C]
LDR             R3, [R11,#-4+ptr]
ADD             R3, R3, #0x18
MOV             R1, #0x400
MOV             R0, R3
BL              BIO_new_mem_buf
STR             R0, [R11,#-4+var_48]
MOV             R3, #0
MOV             R2, #0
MOV             R1, #0
LDR             R0, [R11,#-4+var_48]
BL              PEM_read_bio_RSA_PUBKEY
STR             R0, [R11,#-4+var_4C]
LDR             R3, [R11,#-4+var_4C]
CMP             R3, #0
BNE             loc_13630
BL              ERR_get_error
MOV             R3, R0
MOV             R1, #0
MOV             R0, R3
BL              ERR_error_string
MOV             R3, R0
MOV             R1, R3
MOV             R0, #aOpensslErrorS ; "OpenSSL error: %s\n"
BL              printf
MOV             R0, #aLoadPemFailed ; "Load Pem Failed!"
BL              puts
MOV             R3, #0x11
B               loc_13774

loc_13630
SUB             R3, R11, #-(-4+var_A4C)
SUB             R3, R3, #4
SUB             R3, R3, #8
SUB             R1, R11, #-(-4+var_A6C)
SUB             R1, R1, #4
SUB             R1, R1, #8
LDR             R2, [R11,#-4+var_4C]
STR             R2, [SP,#0xC08+var_C08+4]
MOV             R2, #0x100
STR             R2, [SP,#0xC08+var_C08]
MOV             R2, #0x20 ; ' '
MOV             R0, #0x2A0
BL              RSA_verify
STR             R0, [R11,#-4+var_50]
LDR             R3, [R11,#-4+var_4C]
CMP             R3, #0
BEQ             loc_1367C
LDR             R0, [R11,#-4+var_4C]
BL              RSA_free

loc_1367C
LDR             R3, [R11,#-4+var_48]
CMP             R3, #0
BEQ             loc_13690
LDR             R0, [R11,#-4+var_48]
BL              BIO_free

loc_13690
LDR             R3, [R11,#-4+var_50]
CMP             R3, #1
BEQ             loc_136D8
MOV             R0, #aCheckFileSigFa ; "Check File Sig failed!\r"
BL              puts
BL              ERR_get_error
MOV             R3, R0
MOV             R1, #0
MOV             R0, R3
BL              ERR_error_string
MOV             R3, R0
MOV             R1, R3
MOV             R0, #aOpensslErrorS ; "OpenSSL error: %s\n"
BL              printf
MOV             R3, #0x12
B               loc_13774

loc_136D8
LDR             R3, [R11,#-4+stream]
CMP             R3, #0
BEQ             loc_136EC
LDR             R0, [R11,#-4+stream] ; stream
BL              fclose

loc_136EC
MOV             R3, #0
STR             R3, [R11,#-4+stream]
MOV             R0, #aAllDone ; "All Done!\r"
BL              puts
LDRB            R3, [R11,#-4+arg_4]
CMP             R3, #0
BEQ             loc_13770
MOV             R0, #aThisCommentOfT ; "This Comment Of This Package:"
BL              puts
MOV             R3, #0
STR             R3, [R11,#-4+var_BEC]
SUB             R3, R11, #-(-4+var_BDC)
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R2, #0xFD ; n
MOV             R1, #0  ; c
MOV             R0, R3  ; s
BL              memset
LDR             R3, [R11,#-4+ptr]
ADD             R1, R3, #0x550 ; src
SUB             R3, R11, #-(-4+var_BDC)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R2, #0x100 ; n
MOV             R0, R3  ; dest
BL              memcpy
SUB             R3, R11, #-(-4+var_BDC)
SUB             R3, R3, #4
SUB             R3, R3, #0xC
MOV             R0, R3  ; s
BL              puts

loc_13770
MOV             R3, #0

loc_13774
MOV             R0, R3
SUB             SP, R11, #4
POP             {R11,PC}
; End of function sub_12C40


; int main(int, char **, char **)
main
PUSH            {R11,LR}
DCD 0xE28DB004
SUB             SP, SP, #0xB20
SUB             SP, SP, #8
STR             R0, [R11,#-0xB18]
STR             R1, [R11,#-0xB1C]
LDR             R3, [R11,#-0xB18]
CMP             R3, #1
BGT             loc_137BC
LDR             R3, [R11,#-0xB1C]
LDR             R3, [R3]
MOV             R0, R3
BL              sub_108F8
MOV             R3, #1
B               loc_13B58

loc_137BC
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #4
LDR             R3, [R3]
LDRB            R3, [R3]
CMP             R3, #0x2D ; '-'
BEQ             loc_137EC
LDR             R3, [R11,#-0xB1C]
LDR             R3, [R3]
MOV             R0, R3
BL              sub_108F8
MOV             R3, #2
B               loc_13B58

loc_137EC
MOV             R3, #0
STR             R3, [R11,#-0x10C]
SUB             R3, R11, #0x108
MOV             R2, #0xFC
MOV             R1, #0
MOV             R0, R3
BL              memset
MOV             R3, #0
STR             R3, [R11,#-0x18C]
SUB             R3, R11, #0x188
MOV             R2, #0x7C ; '|'
MOV             R1, #0
MOV             R0, R3
BL              memset
MOV             R3, #0
STR             R3, [R11,#-0x20C]
SUB             R3, R11, #0x208
MOV             R2, #0x7C ; '|'
MOV             R1, #0
MOV             R0, R3
BL              memset
SUB             R3, R11, #0xA00
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R2, #0x800
MOV             R1, #0
MOV             R0, R3
BL              memset
MOV             R3, #0
STRB            R3, [R11,#-5]
MOV             R3, #0
STRB            R3, [R11,#-6]
MOV             R3, #0
STRB            R3, [R11,#-7]
MOV             R3, #0
STR             R3, [R11,#-0xB10]
SUB             R3, R11, #0xB00
SUB             R3, R3, #4
SUB             R3, R3, #8
MOV             R2, #0xFD
MOV             R1, #0
MOV             R0, R3
BL              memset
LDR             R3, [R11,#-0xB18]
CMP             R3, #5
BNE             loc_13998
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #8
LDR             R3, [R3]
MOV             R0, R3
BL              strlen
MOV             R3, R0
CMP             R3, #0xFF
BLS             loc_138D8
MOV             R0, #aFilenameTooLon ; "fileName Too Long!"
BL              puts
MOV             R3, #3
B               loc_13B58

loc_138D8
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #8
LDR             R2, [R3]
SUB             R3, R11, #0x10C
MOV             R1, R2
MOV             R0, R3
BL              strcpy
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #0xC
LDR             R3, [R3]
MOV             R0, R3
BL              strlen
MOV             R3, R0
CMP             R3, #0x7F
BLS             loc_13928
MOV             R0, #aFilenameTooLon ; "fileName Too Long!"
BL              puts
MOV             R3, #3
B               loc_13B58

loc_13928
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #0xC
LDR             R2, [R3]
SUB             R3, R11, #0x18C
MOV             R1, R2
MOV             R0, R3
BL              strcpy
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #0x10
LDR             R3, [R3]
MOV             R0, R3
BL              strlen
MOV             R3, R0
CMP             R3, #0x7F
BLS             loc_13978
MOV             R0, #aPemnameTooLong ; "pemName Too Long!"
BL              puts
MOV             R3, #4
B               loc_13B58

loc_13978
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #0x10
LDR             R2, [R3]
SUB             R3, R11, #0x20C
MOV             R1, R2
MOV             R0, R3
BL              strcpy
B               loc_13A28

loc_13998
LDR             R3, [R11,#-0xB18]
CMP             R3, #3
BNE             loc_139F8
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #8
LDR             R3, [R3]
MOV             R0, R3
BL              strlen
MOV             R3, R0
CMP             R3, #0x7F
BLS             loc_139D8
MOV             R0, #aFilenameTooLon ; "fileName Too Long!"
BL              puts
MOV             R3, #3
B               loc_13B58

loc_139D8
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #8
LDR             R2, [R3]
SUB             R3, R11, #0x18C
MOV             R1, R2
MOV             R0, R3
BL              strcpy
B               loc_13A28

loc_139F8
LDR             R3, [R11,#-0xB18]
CMP             R3, #2
BEQ             loc_13A28
MOV             R0, #aParamErr ; "Param Err!"
BL              puts
LDR             R3, [R11,#-0xB1C]
LDR             R3, [R3]
MOV             R0, R3
BL              sub_108F8
MOV             R3, #3
B               loc_13B58

loc_13A28
MOV             R3, #0
STR             R3, [R11,#-0xC]
LDR             R3, [R11,#-0xB1C]
ADD             R3, R3, #4
LDR             R3, [R3]
ADD             R3, R3, #1
LDRB            R3, [R3]
SUB             R3, R3, #0x66 ; 'f'
CMP             R3, #0x12 ; switch 19 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_13A4C ; jumptable 00013A4C default case, cases 1-7,9,12,14-17
jpt_13A4C DCD loc_13AD0 ; jump table for switch statement
DCD def_13A4C
DCD def_13A4C
DCD def_13A4C
DCD def_13A4C
DCD def_13A4C
DCD def_13A4C
DCD def_13A4C
DCD loc_13B10
DCD def_13A4C
DCD loc_13AA8
DCD loc_13B24
DCD def_13A4C
DCD loc_13ABC
DCD def_13A4C
DCD def_13A4C
DCD def_13A4C
DCD def_13A4C
DCD loc_13AA0

loc_13AA0               ; jumptable 00013A4C case 18
MOV             R3, #1
STRB            R3, [R11,#-7]

loc_13AA8               ; jumptable 00013A4C case 10
LDRB            R3, [R11,#-7]
CMP             R3, #0
BNE             loc_13ABC ; jumptable 00013A4C case 13
MOV             R3, #1
STRB            R3, [R11,#-6]

loc_13ABC               ; jumptable 00013A4C case 13
LDRB            R3, [R11,#-6]
CMP             R3, #0
BNE             loc_13AD0 ; jumptable 00013A4C case 0
MOV             R3, #1
STRB            R3, [R11,#-5]

loc_13AD0               ; jumptable 00013A4C case 0
SUB             R3, R11, #0xA00
SUB             R3, R3, #4
SUB             R3, R3, #8
SUB             R12, R11, #0x20C
SUB             R1, R11, #0x10C
SUB             R0, R11, #0x18C
LDRB            R2, [R11,#-7]
STR             R2, [SP,#8]
LDRB            R2, [R11,#-6]
STR             R2, [SP,#4]
LDRB            R2, [R11,#-5]
STR             R2, [SP]
MOV             R2, R12
BL              sub_12C40
STR             R0, [R11,#-0xC]
B               loc_13B54

loc_13B10               ; jumptable 00013A4C case 8
SUB             R3, R11, #0x18C
MOV             R0, R3
BL              sub_109A8
STR             R0, [R11,#-0xC]
B               loc_13B54

loc_13B24               ; jumptable 00013A4C case 11
BL              sub_10B9C
STR             R0, [R11,#-0xC]
B               loc_13B54

def_13A4C               ; jumptable 00013A4C default case, cases 1-7,9,12,14-17
MOV             R0, #aCommandNotSupp ; "Command Not Support!"
BL              puts
LDR             R3, [R11,#-0xB1C]
LDR             R3, [R3]
MOV             R0, R3
BL              sub_108F8
MOV             R3, #5
STR             R3, [R11,#-0xC]

loc_13B54
LDR             R3, [R11,#-0xC]

loc_13B58
MOV             R0, R3
SUB             SP, R11, #4
POP             {R11,PC}
CODE16



; int __fastcall init(int, int, int)
init
PUSH.W          {R3-R9,LR}
MOV             R7, R0
LDR             R6, =(off_24F0C - 0x13B76)
MOV             R8, R1
MOV             R9, R2
LDR             R5, =(off_24F08 - 0x13B7C)
ADD             R6, PC  ; off_24F0C
BLX             .init_proc
ADD             R5, PC  ; off_24F08
SUBS            R6, R6, R5
ASRS            R6, R6, #2
BEQ             locret_13B94
MOVS            R4, #0

loc_13B82
ADDS            R4, #1
LDR.W           R3, [R5],#4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R7
BLX             R3
CMP             R6, R4
BNE             loc_13B82

locret_13B94
POP.W           {R3-R9,PC}
; End of function init

off_13B98 DCD off_24F0C - 0x13B76
off_13B9C DCD off_24F08 - 0x13B7C
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
ALIGN 4



; int sub_13BA4()
sub_13BA4
MOV             R2, R1
MOV             R1, R0
MOVS            R0, #3
B.W             j___xstat64
; End of function sub_13BA4

ALIGN 0x10
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x13BB0
CODE32



; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY, ALIGN=3
; ORG 0x13BB8
DCB    1
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aUseage DCB "Useage:",0xD,0
ALIGN 4
aSOptionParamat DCB 9,"%s [option] [paramaters]",0xA
DCB 0xA,0
aOptionFSPNXQ DCB 9,"Option:{-f} {-s} {-p} {-n} {-x} "
DCB "{-q}",0xA,0
ALIGN 0x10
aFMinertypeFile DCB 9,9,"-f [minerType] [fileName] [roo"
DCB "tPublicKeyFile]: ",0xA
DCB 9,9,9,"Only Check If Filename was V"
DCB "alided.",0xA,0
ALIGN 4
aSMinertypeFile DCB 9,9,"-s [minerType] [fileName] [roo"
DCB "tPublicKeyFile]: ",0xA
DCB 9,9,9,"Check If Filename Was Valide"
DCB "d, and Splite Bmu To ",0x22,"/tmp/"
DCB "tmpfw/",0x22,0xA,0
ALIGN 4
aPMinertypeFile DCB 9,9,"-p [minerType] [fileName] [roo"
DCB "tPublicKeyFile]: ",0xA
DCB 9,9,9,"Check If Filename Was Valide"
DCB "d, and Dump BmuComments",0xA,0
ALIGN 0x10
aXMinertypeFile DCB 9,9,"-x [minerType] [fileName] [roo"
DCB "tPublicKeyFile]: ",0xA
DCB 9,9,9,"Check If Filename Was FullSi"
DCB "ze BMU",0xA,0
ALIGN 4
aNNandbinfileSp DCB 9,9,"-n [nandBinFile]: ",0xA
DCB 9,9,9,"Splite SigImg To Single File"
DCB " To ",0x22,"/tmp/tmpNand/",0x22,0xA
DCB 0
ALIGN 4
aQGenerateA256b DCB 9,9,"-q: ",0xA
DCB 9,9,9,"Generate A 256Bytes 0xff Fil"
DCB "e To ",0x22,"/tmp/256BFF",0x22,0xA
DCB 0
ALIGN 4
aReturns DCB 9,"Returns:",0
ALIGN 0x10
a0WellDone DCB 9,9,"0: ",0xA
DCB 9,9,9,"Well Done!",0xA,0
ALIGN 4
aOthersSomethin DCB 9,9,"Others: ",0xA
DCB 9,9,9,"Something Wrong!",0xA,0
aRb DCB "rb",0
ALIGN 4
aLoadNandImageF DCB "Load Nand Image File Failed!",0
ALIGN 4
aWb DCB "wb",0
ALIGN 0x10
aTryToWriteToFi DCB "Try To Write To File '%s' Failed!",0xA
DCB 0
ALIGN 4
aTmp256bff DCB "/tmp/256BFF",0
aGenfileFailed DCB "GenFile Failed!",0
aOpensslErrorS DCB "OpenSSL error: %s",0xA,0
ALIGN 4
aReadRootPubkFa DCB "Read Root PubK Failed!",0
ALIGN 4
aCheckMinerPemF DCB "Check miner.pem Failed!",0
aBootBin DCB "BOOT.bin",0
ALIGN 0x10
aDevicetreeDtb DCB "devicetree.dtb",0
ALIGN 0x10
aUimage DCB "uImage",0
ALIGN 4
aMinerfsImageGz DCB "minerfs.image.gz",0
ALIGN 4
aUpdateImageGz DCB "update.image.gz",0
aCrlTarGz DCB "crl.tar.gz",0
ALIGN 4
aMinerBtmTarGz DCB "miner.btm.tar.gz",0
ALIGN 4
aReserve DCB "reserve",0
aDatafile DCB "datafile",0
ALIGN 0x10
aSig DCB ".sig",0
ALIGN 4
aFilenameSSizeD DCB "fileName:'%s', size:[%d]",0xD,0xA,0
ALIGN 4
aCreateFileSFai DCB "Create File '%s' Failed!",0xD,0xA,0
ALIGN 0x10
aTmpTmpfw DCB "/tmp/tmpfw/",0
ALIGN 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x27 ; '
DCB 0x31 ; 1
DCB 0xCB
DCB 0x97
DCB 0x5C ; \
DCB 0xC8
DCB 0xA5
DCB 0xC3
DCB 0x73 ; s
DCB 0xF2
DCB 0x98
DCB 0xBE
DCB 0x6F ; o
DCB 0xB6
DCB 0x92
DCB 0xB4
DCB 0x4F ; O
DCB 0x40 ; @
DCB 0x90
DCB 0x2F ; /
DCB 0x3B ; ;
DCB 0x6A ; j
DCB 0xE1
DCB 0x9A
aFileSNotEnough DCB "File '%s' Not Enough %d, Something"
DCB " Wrong!",0xA,0
ALIGN 4
aReadFileSFaile DCB "Read File '%s' Failed!",0xA,0
aSNotABtmuFile DCB "'%s' Not A Btmu File!",0xA,0
ALIGN 4
aMinerTypeS DCB "miner_type %s",0xA,0
ALIGN 4
aMinerTypeHash1 DCB "miner_type_hash %16llx, bmu_hash %"
DCB "16llx",0xA,0
ALIGN 0x10
aInputMinerType DCB "input miner_type and bmu miner typ"
DCB "e donot match!",0
ALIGN 4
aContentX DCB "content:%x",0xA,0
aThisPackageWas DCB "This Package Was Not Full Package!"
DCB 0
ALIGN 4
aContentDoesnTM DCB "Content Doesn't Match![%d][%d]",0xA
DCB 0
aFileDSizeD DCB "file[%d] size:[%d]",0xA,0
aCheckFilesizeF DCB "Check FileSize Failed, FileSize Sh"
DCB "ould Be [%d]Bytes, But It Was [%d]"
DCB " Bytes, And Total Says[%d]",0xA,0
aR DCB "r",0
ALIGN 4
aCannotOpenRoot DCB "Cannot Open Root PublicKey '%s'!",0xA
DCB 0
ALIGN 0x10
aCheckPemPayloa DCB "Check pem payload failed! ret:[%d]"
DCB 0xA,0
aW DCB "w",0
ALIGN 4
aUsrBinFwVersio DCB "/usr/bin/fw_version",0
aTmpTmpfwMinerP DCB "/tmp/tmpfw/miner.pem",0
ALIGN 4
aDumpMinerPemFa DCB "Dump Miner.pem Failed!",0xD,0
aTmpTmpfwMinerP_0 DCB "/tmp/tmpfw/miner.pem.sig",0
ALIGN 4
aDumpMinerPemSi DCB "Dump Miner.pem.sig Failed!",0xD,0
aLoadPemFailed DCB "Load Pem Failed!",0
ALIGN 4
aCheckFileSigFa DCB "Check File Sig failed!",0xD,0
aAllDone DCB "All Done!",0xD,0
ALIGN 4
aThisCommentOfT DCB "This Comment Of This Package:",0
ALIGN 4
aFilenameTooLon DCB "fileName Too Long!",0
ALIGN 0x10
aPemnameTooLong DCB "pemName Too Long!",0
ALIGN 4
aParamErr DCB "Param Err!",0
ALIGN 0x10
aCommandNotSupp DCB "Command Not Support!",0
; .rodata ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x14375
CODE32
DCB 0, 0, 0
; LOAD ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x14378
unk_14378 DCB 0xC0
DCB 0xC4
DCB 0xFF
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x14380
DCB    0
DCB    0
DCB    0
DCB    0
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x24F08
off_24F08 DCD j_register_tm_clones+1
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x24F0C
off_24F0C DCD sub_108DC+1
; .fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x24F10
stru_24F10 Elf32_Dyn <1, <1>> ; DT_NEEDED libcrypto.so.1.1
Elf32_Dyn <1, <0xE2>>   ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x106E8>> ; DT_INIT
Elf32_Dyn <0xD, <0x13BB0>> ; DT_FINI
Elf32_Dyn <0x19, <0x24F08>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x24F0C>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x101B4>> ; DT_HASH
Elf32_Dyn <5, <0x10430>> ; DT_STRTAB
Elf32_Dyn <6, <0x10270>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0x170>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x25000>> ; DT_PLTGOT
Elf32_Dyn <2, <0xC8>>   ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x10620>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x10618>> ; DT_REL
Elf32_Dyn <0x12, <8>>   ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x105D8>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <2>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x105A0>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x40
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x25000
_GLOBAL_OFFSET_TABLE_ DCD stru_24F10
DCD 0
off_25008 DCD 0
abort_ptr DCD __imp_abort
ERR_get_error_ptr DCD __imp_ERR_get_error
__libc_start_main_ptr DCD __imp___libc_start_main
__gmon_start___ptr DCD __imp___gmon_start__
fclose_ptr DCD __imp_fclose
memset_ptr DCD __imp_memset
RSA_verify_ptr DCD __imp_RSA_verify
fseek_ptr DCD __imp_fseek
PEM_read_bio_RSA_PUBKEY_ptr DCD __imp_PEM_read_bio_RSA_PUBKEY
SHA256_Final_ptr DCD __imp_SHA256_Final
strlen_ptr DCD __imp_strlen
memcpy_ptr DCD __imp_memcpy
fopen64_ptr DCD __imp_fopen64
BIO_new_mem_buf_ptr DCD __imp_BIO_new_mem_buf
strcpy_ptr DCD __imp_strcpy
printf_ptr DCD __imp_printf
ERR_error_string_ptr DCD __imp_ERR_error_string
fwrite_ptr DCD __imp_fwrite
__xstat64_ptr DCD __imp___xstat64
puts_ptr DCD __imp_puts
RSA_free_ptr DCD __imp_RSA_free
SHA256_Update_ptr DCD __imp_SHA256_Update
BIO_free_ptr DCD __imp_BIO_free
SHA256_Init_ptr DCD __imp_SHA256_Init
fread_ptr DCD __imp_fread
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x25074
ALIGN 8
DCB    0
DCB    0
DCB    0
DCB    0
unk_2507C DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x4E ; N
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x2F ; /
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x69 ; i
DCB 0x63 ; c
DCB 0x65 ; e
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x65 ; e
DCB 0x2E ; .
DCB 0x64 ; d
DCB 0x74 ; t
DCB 0x62 ; b
DCB 0x2E ; .
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x67 ; g
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x75 ; u
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x4E ; N
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x2F ; /
DCB 0x75 ; u
DCB 0x49 ; I
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x67 ; g
DCB 0x65 ; e
DCB 0x2E ; .
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x67 ; g
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x75 ; u
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x4E ; N
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x2F ; /
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x66 ; f
DCB 0x73 ; s
DCB 0x2E ; .
DCB 0x69 ; i
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x67 ; g
DCB 0x65 ; e
DCB 0x2E ; .
DCB 0x67 ; g
DCB 0x7A ; z
DCB 0x2E ; .
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x67 ; g
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x75 ; u
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x4E ; N
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x2F ; /
DCB 0x75 ; u
DCB 0x70 ; p
DCB 0x64 ; d
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x2E ; .
DCB 0x69 ; i
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x67 ; g
DCB 0x65 ; e
DCB 0x2E ; .
DCB 0x67 ; g
DCB 0x7A ; z
DCB 0x2E ; .
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x67 ; g
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x75 ; u
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x4E ; N
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x2F ; /
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x2E ; .
DCB 0x62 ; b
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x2E ; .
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x67 ; g
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x75 ; u
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x4E ; N
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x2F ; /
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x6C ; l
DCB 0x2E ; .
DCB 0x73 ; s
DCB 0x69 ; i
DCB 0x67 ; g
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x75 ; u
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x1C
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x4E ; N
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x2F ; /
DCB 0x37 ; 7
DCB 0x6B ; k
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x76 ; v
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x4E ; N
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x2F ; /
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x2E ; .
DCB 0x62 ; b
DCB 0x74 ; t
DCB 0x6D ; m
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x28 ; (
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x2F ; /
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x70 ; p
DCB 0x4E ; N
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x2F ; /
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x6C ; l
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; .data ends


; Segment type: Uninitialized
AREA .bss, DATA, ALIGN=0
; ORG 0x25838
byte_25838 % 1
ALIGN 4
; .bss ends


; Segment type: Externs
; void abort(void)
IMPORT __imp_abort
IMPORT __imp_ERR_get_error
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; int fclose(FILE *stream)
IMPORT __imp_fclose
; void *memset(void *s, int c, size_t n)
IMPORT __imp_memset
IMPORT __imp_RSA_verify
; int fseek(FILE *stream, int off, int whence)
IMPORT __imp_fseek
IMPORT __imp_PEM_read_bio_RSA_PUBKEY
IMPORT __imp_SHA256_Final
; size_t strlen(const char *s)
IMPORT __imp_strlen
; void *memcpy(void *dest, const void *src, size_t n)
IMPORT __imp_memcpy
IMPORT __imp_fopen64
IMPORT __imp_BIO_new_mem_buf
; char *strcpy(char *dest, const char *src)
IMPORT __imp_strcpy
; int printf(const char *format, ...)
IMPORT __imp_printf
IMPORT __imp_ERR_error_string
; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
IMPORT __imp_fwrite
IMPORT __imp___xstat64
; int puts(const char *s)
IMPORT __imp_puts
IMPORT __imp_RSA_free
IMPORT __imp_SHA256_Update
IMPORT __imp_BIO_free
IMPORT __imp_SHA256_Init
; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
IMPORT __imp_fread
IMPORT __imp___gmon_start__, WEAK
IMPORT _ITM_deregisterTMCloneTable, WEAK
IMPORT _ITM_registerTMCloneTable, WEAK

END _start

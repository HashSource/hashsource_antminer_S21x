;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : C0AF885F84CE73DA21D8D6CB497FF1B3F5E354BE10016834C2DCE421A15C9147
; Input MD5    : E3411BD138E547B6DCEAD9444910393B
; Input CRC32  : AFC4E532
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/hashsource_antminer_S21x/bitmain_firmware/FR-1.1(250416-S21 Hyd.)/minerfs.no_header.image_extract/sbin/id2mac
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD start+1             ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x1560              ; SHT file offset
DCD 0x5000400           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 9                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x1A                ; Number of entries in SHT
DCW 0x19                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0xD70               ; File offset
DCD unk_10D70           ; Virtual address
DCD 0x10D70             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x154               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x10154             ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0xD7C               ; Size in file image
DCD 0xD7C               ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0xF10               ; File offset
DCD off_20F10           ; Virtual address
DCD 0x20F10             ; Physical address
DCD 0x530               ; Size in file image
DCD 0x550               ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0xF18               ; File offset
DCD stru_20F18          ; Virtual address
DCD 0x20F18             ; Physical address
DCD 0xE8                ; Size in file image
DCD 0xE8                ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x170               ; File offset
DCD dword_10170         ; Virtual address
DCD 0x10170             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHT Entry 8
DCD 0x6474E552          ; Type: RO-AFTER
DCD 0xF10               ; File offset
DCD off_20F10           ; Virtual address
DCD 0x20F10             ; Physical address
DCD 0xF0                ; Size in file image
DCD 0xF0                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10154
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10170 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 3, 2, 0          ; ABI: Linux 3.2.0
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0xC2, 0xF9, 0xE4, 0x60, 0xA8, 0x6B, 0xAB ; Desc
DCB 0x61, 0x81, 2, 0x92, 0x27, 0x28, 0x4F
DCB 0x74, 0x87, 0x2E, 0x26, 0x88, 0x6A
; ELF Hash Table
elf_hash_nbucket DCD 3
elf_hash_nchain DCD 0xB
elf_hash_bucket DCD 9, 6, 0xA
elf_hash_chain DCD 0, 0, 1, 2, 3, 0, 4, 5, 0, 7, 8
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aFread - byte_102A4, 0, 0, \ ; "fread"
           0x12, 0, 0>
Elf32_Sym <aGetenv - byte_102A4, 0, 0, \ ; "getenv"
           0x12, 0, 0>
Elf32_Sym <aPuts - byte_102A4, 0, 0, \ ; "puts"
           0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_102A4, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_102A4, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aStrlen - byte_102A4, 0, 0, \ ; "strlen"
           0x12, 0, 0>
Elf32_Sym <aFclose - byte_102A4, 0, 0, \ ; "fclose"
           0x12, 0, 0>
Elf32_Sym <aSprintf - byte_102A4, 0, 0, \ ; "sprintf"
           0x12, 0, 0>
Elf32_Sym <aFopen64 - byte_102A4, 0, 0, \ ; "fopen64"
           0x12, 0, 0>
Elf32_Sym <aAbort - byte_102A4, 0, 0, \ ; "abort"
           0x12, 0, 0>
; ELF String Table
byte_102A4 DCB 0
aLibcSo6 DCB "libc.so.6",0
aSprintf DCB "sprintf",0
aPuts DCB "puts",0
aAbort DCB "abort",0
aStrlen DCB "strlen",0
aFclose DCB "fclose",0
aGetenv DCB "getenv",0
aFread DCB "fread",0
aFopen64 DCB "fopen64",0
aLibcStartMain DCB "__libc_start_main",0
aGmonStart DCB "__gmon_start__",0
aGlibc24 DCB "GLIBC_2.4",0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; fread@@GLIBC_2.4
DCW 2                   ; getenv@@GLIBC_2.4
DCW 2                   ; puts@@GLIBC_2.4
DCW 2                   ; __libc_start_main@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 2                   ; strlen@@GLIBC_2.4
DCW 2                   ; fclose@@GLIBC_2.4
DCW 2                   ; sprintf@@GLIBC_2.4
DCW 2                   ; fopen64@@GLIBC_2.4
DCW 2                   ; abort@@GLIBC_2.4
DCW 0
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libc.so.6"
               aLibcSo6 - byte_102A4, \
               0x10, 0>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_102A4, 0>
; ELF REL Relocation Table
Elf32_Rel <0x21034, 0x515> ; R_ARM_GLOB_DAT __gmon_start__
; ELF JMPREL Relocation Table
Elf32_Rel <0x2100C, 0x116> ; R_ARM_JUMP_SLOT fread
Elf32_Rel <0x21010, 0x216> ; R_ARM_JUMP_SLOT getenv
Elf32_Rel <0x21014, 0x316> ; R_ARM_JUMP_SLOT puts
Elf32_Rel <0x21018, 0x416> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x2101C, 0x516> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x21020, 0x616> ; R_ARM_JUMP_SLOT strlen
Elf32_Rel <0x21024, 0x716> ; R_ARM_JUMP_SLOT fclose
Elf32_Rel <0x21028, 0x816> ; R_ARM_JUMP_SLOT sprintf
Elf32_Rel <0x2102C, 0x916> ; R_ARM_JUMP_SLOT fopen64
Elf32_Rel <0x21030, 0xA16> ; R_ARM_JUMP_SLOT abort
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x103A0
CODE32



; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              sub_10498
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x103AC
CODE32



; void sub_103AC()
sub_103AC
PUSH            {LR}
LDR             LR, =(_GLOBAL_OFFSET_TABLE_ - 0x103BC)
ADD             LR, PC, LR ; _GLOBAL_OFFSET_TABLE_
LDR             PC, [LR,#(off_21008 - 0x21000)]!
; End of function sub_103AC

off_103BC DCD _GLOBAL_OFFSET_TABLE_ - 0x103BC
; [0000000C BYTES: COLLAPSED FUNCTION fread]
; [0000000C BYTES: COLLAPSED FUNCTION getenv]
; [0000000C BYTES: COLLAPSED FUNCTION puts]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION strlen]
; [0000000C BYTES: COLLAPSED FUNCTION fclose]
; [0000000C BYTES: COLLAPSED FUNCTION sprintf]
; [0000000C BYTES: COLLAPSED FUNCTION fopen64]
; [0000000C BYTES: COLLAPSED FUNCTION abort]

; Segment type: Pure code
AREA .text, CODE
; ORG 0x10438
CODE32



; int main(int, char **, char **)
main

s= -0x40
var_2C= -0x2C

PUSH            {LR}
SUB             SP, SP, #0x44
ADD             R0, SP, #0x44+var_2C
BL              sub_106C8
ADD             R0, SP, #0x44+var_2C
ADD             R1, SP, #0x44+s
BL              sub_105B0
ADD             R0, SP, #0x44+s ; s
BL              puts
MOV             R0, #0
ADD             SP, SP, #0x44 ; 'D'
POP             {PC}
; End of function main

CODE16


; Attributes: noreturn

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT start
start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(nullsub_1+1)
PUSH.W          {R12}   ; fini
LDR             R0, =main ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function start

off_1048C DCD nullsub_1+1
off_10490 DCD main
off_10494 DCD init+1
CODE32



; int sub_10498()
sub_10498
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x104A8)
LDR             R2, =(__gmon_start___ptr_0 - 0x21000)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function sub_10498

off_104B4 DCD _GLOBAL_OFFSET_TABLE_ - 0x104A8
off_104B8 DCD __gmon_start___ptr_0 - 0x21000
CODE16



; char *sub_104BC()
sub_104BC
MOVW            R0, #:lower16:byte_21440
MOVW            R3, #:lower16:byte_21440
MOVT            R0, #:upper16:byte_21440
MOVT            R3, #:upper16:byte_21440
CMP             R3, R0
BEQ             locret_104DC
MOV             R3, #0
CBZ             R3, locret_104DC
BX              R3

locret_104DC
BX              LR
; End of function sub_104BC

ALIGN 0x10



; __int64 sub_104E0()
sub_104E0
MOVW            R0, #:lower16:byte_21440
MOVW            R1, #:lower16:byte_21440
MOVT            R0, #:upper16:byte_21440
MOVT            R1, #:upper16:byte_21440
SUBS            R1, R1, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_10508
MOV             R3, #0
CBZ             R3, locret_10508
BX              R3

locret_10508
BX              LR
; End of function sub_104E0

ALIGN 4



; char *sub_1050C()
sub_1050C
PUSH            {R4,LR}
MOV             R4, #byte_21440
LDRB            R3, [R4]
CBNZ            R3, locret_10522
BL              sub_104BC
MOVS            R3, #1
STRB            R3, [R4]

locret_10522
POP             {R4,PC}
; End of function sub_1050C



; Attributes: thunk

sub_10524
B               sub_104E0
; End of function sub_10524

ALIGN 4
DCD 0xE3510000, 0xDA00000F
CODE32
PUSH            {LR}
MOVW            LR, #:lower16:dword_21040
ADD             R1, R0, R1
MOVT            LR, #:upper16:dword_21040
MOV             R3, #0

loc_10544
LDRB            R12, [R0],#1
MOV             R2, R3,LSL#8
UXTH            R2, R2
CMP             R0, R1
EOR             R3, R12, R3,LSR#8
LDR             R3, [LR,R3,LSL#2]
UXTH            R3, R3
EOR             R3, R3, R2
BNE             loc_10544
MOV             R0, R3
POP             {PC}



; int sub_10570()
sub_10570
MOV             R3, #0
MOV             R0, R3
BX              LR
; End of function sub_10570

CMP             R1, #0
BEQ             loc_105A8
MOVW            R12, #:lower16:dword_108FC
ADD             R1, R0, R1
MOVT            R12, #:upper16:dword_108FC

loc_10590
LDRB            R3, [R0],#1
CMP             R0, R1
EOR             R3, R3, R2,LSR#24
LDR             R3, [R12,R3,LSL#2]
EOR             R2, R3, R2,LSL#8
BNE             loc_10590

loc_105A8
MOV             R0, R2
BX              LR



; int __fastcall sub_105B0(char *, char *)
sub_105B0

var_14= -0x14
var_8= -8

PUSH            {R4,R5,LR}
MOV             R5, R0
MOVW            R0, #:lower16:aCpuid ; "CPUID"
SUB             SP, SP, #0x14
MOVT            R0, #:upper16:aCpuid ; "CPUID"
MOV             R4, R1
BL              getenv
CMP             R0, #0
BNE             loc_1067C
MOV             R0, R5  ; s
BL              strlen
CMP             R0, #0
BEQ             loc_106AC

loc_105E4
MOVW            LR, #:lower16:dword_21040
ADD             R0, R5, R0
MOVT            LR, #:upper16:dword_21040
MOV             R12, R5
MOV             R2, #0

loc_105F8
LDRB            R1, [R12],#1
MOV             R3, R2,LSL#8
UXTH            R3, R3
CMP             R12, R0
EOR             R2, R1, R2,LSR#8
LDR             R2, [LR,R2,LSL#2]
UXTH            R2, R2
EOR             R2, R2, R3
BNE             loc_105F8
MOVW            R12, #:lower16:dword_108FC
MOV             R1, #0xFFFFFFFF
MOVT            R12, #:upper16:dword_108FC

loc_10628
LDRB            R3, [R5],#1
CMP             R5, R0
EOR             R3, R3, R1,LSR#24
LDR             R3, [R12,R3,LSL#2]
EOR             R1, R3, R1,LSL#8
BNE             loc_10628
UXTB            LR, R1
MOV             R0, R1,LSR#24
MOV             R3, R2,LSR#8
UBFX            R5, R1, #8, #8
AND             R2, R2, #0xFE
UBFX            R12, R1, #0x10, #8

loc_10658
MOVW            R1, #:lower16:a02x02x02x02x02 ; "%02x:%02x:%02x:%02x:%02x:%02x"
STR             R0, [SP,#0x14+var_8]
STMFA           SP, {R5,R12}
MOV             R0, R4  ; s
STR             LR, [SP,#0x14+var_14]
MOVT            R1, #:upper16:a02x02x02x02x02 ; "%02x:%02x:%02x:%02x:%02x:%02x"
BL              sprintf
ADD             SP, SP, #0x14
POP             {R4,R5,PC}

loc_1067C
LDR             R12, [R0]
LDR             R1, [R0,#4]
LDR             R2, [R0,#8]
LDR             R3, [R0,#0xC]
MOV             R0, R5  ; s
STR             R12, [R5]
STR             R1, [R5,#4]
STR             R2, [R5,#8]
STR             R3, [R5,#0xC]
BL              strlen
CMP             R0, #0
BNE             loc_105E4

loc_106AC
MOV             R3, R0
MOV             R0, #0xFF
MOV             R2, R3
MOV             R12, R0
MOV             R5, R0
MOV             LR, R0
B               loc_10658
; End of function sub_105B0




; int __fastcall sub_106C8(_BYTE *)
sub_106C8

var_10= -0x10
var_C= -0xC
var_8= -8
var_s0=  0

PUSH            {R4-R10,LR}
MOV             R5, #dword_21448
SUB             SP, SP, #0x10
MOV             R4, R0
LDR             R3, [R5]
CMP             R3, #0
BNE             loc_10760
MOVW            R8, #:lower16:aRb ; "rb"
MOVW            R7, #:lower16:aDevUrandom ; "/dev/urandom"
MOVT            R8, #:upper16:aRb ; "rb"
MOVT            R7, #:upper16:aDevUrandom ; "/dev/urandom"
ADD             R9, R5, #8
B               loc_10708

loc_10700
ORRS            R12, R2, R3
BNE             loc_10754

loc_10708
MOV             R1, R8
MOV             R0, R7
BL              fopen64
SUBS            R6, R0, #0
MOV             R2, #0x10 ; n
MOV             R1, #1  ; size
MOV             R0, R9  ; ptr
MOV             R3, R6  ; stream
BEQ             loc_108A4
BL              fread
MOV             R10, R0
MOV             R0, R6  ; stream
BL              fclose
CMP             R10, #0x10
BNE             loc_108A4
LDRD            R0, R1, [R5,#(qword_21450 - 0x21448)]
LDRD            R2, R3, [R5,#(qword_21458 - 0x21448)]
ORRS            R12, R0, R1
BEQ             loc_10700

loc_10754
MOV             R12, #1
STR             R12, [R5]
B               loc_10768

loc_10760
LDRD            R0, R1, [R5,#(qword_21450 - 0x21448)]
LDRD            R2, R3, [R5,#(qword_21458 - 0x21448)]

loc_10768
MOV             R6, R1,LSL#23
EOR             R12, R0, R0,LSL#23
MOV             R7, R2,LSR#5
MOV             LR, R3,LSL#23
ORR             R6, R6, R0,LSR#9
MOV             R9, R12,LSR#18
ORR             R7, R7, R3,LSL#27
EOR             R0, R2, R2,LSL#23
ORR             LR, LR, R2,LSR#9
EOR             R8, R6, R1
EOR             R6, R3, R3,LSR#5
ORR             R9, R9, R8,LSL#14
EOR             R1, R7, R2
EOR             R1, R1, R12
MOV             R12, R0,LSR#18
EOR             R1, R1, R9
EOR             LR, LR, R3
EOR             R6, R6, R8
EOR             R6, R6, R8,LSR#18
ORR             R12, R12, LR,LSL#14
MOV             R7, R1,LSR#5
EOR             LR, LR, LR,LSR#18
STR             R6, [R5,#(qword_21450+4 - 0x21448)]
ORR             R7, R7, R6,LSL#27
EOR             R0, R0, R12
EOR             R0, R0, R1
STR             R1, [R5,#(qword_21450 - 0x21448)]
EOR             LR, LR, R6
ADDS            R9, R1, R2
EOR             R0, R0, R7
EOR             LR, LR, R6,LSR#5
ADC             R3, R6, R3
STR             R0, [R5,#(qword_21458 - 0x21448)]
MOVW            R12, #:lower16:a0123456789abcd ; "0123456789abcdef"
ADDS            R0, R0, R1
MOVT            R12, #:upper16:a0123456789abcd ; "0123456789abcdef"
MOVW            R7, #:lower16:aXxxxxxxxxxxx4x ; "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx"
ADC             R6, LR, R6
MOVT            R7, #:upper16:aXxxxxxxxxxxx4x ; "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx"
ADD             R8, R12, #8
MOV             R1, #0
STR             LR, [R5,#(qword_21458+4 - 0x21448)]
MOV             R2, #0x78 ; 'x'
STR             R6, [SP,#0x10+var_8+4]
STR             R0, [SP,#0x10+var_8]
STR             R3, [SP,#0x10+var_C]
STR             R9, [SP,#0x10+var_10]
B               loc_10844

loc_10828
LDRB            R3, [R3,R8]
ADD             R1, R1, #1
STRB            R3, [R4]

loc_10834
LDRB            R2, [R7,#1]!
ADD             R4, R4, #1
CMP             R2, #0
BEQ             loc_10884

loc_10844
ADD             R3, SP, #0x10+var_s0
TST             R1, #1
ADD             R3, R3, R1,ASR#1
LDRB            R3, [R3,#-0x10]
ANDEQ           R3, R3, #0xF
MOVNE           R3, R3,ASR#4
CMP             R2, #0x78 ; 'x'
BEQ             loc_10894
CMP             R2, #0x79 ; 'y'
AND             R3, R3, #3
BEQ             loc_10828
STRB            R2, [R4]
ADD             R4, R4, #1
LDRB            R2, [R7,#1]!
CMP             R2, #0
BNE             loc_10844

loc_10884
MOV             R0, R2
STRB            R2, [R4]
ADD             SP, SP, #0x10
POP             {R4-R10,PC}

loc_10894
LDRB            R3, [R12,R3]
ADD             R1, R1, #1
STRB            R3, [R4]
B               loc_10834

loc_108A4
MOV             R0, #0xFFFFFFFF
ADD             SP, SP, #0x10
POP             {R4-R10,PC}
; End of function sub_106C8

CODE16



; int __fastcall init(int, int, int)
init
PUSH.W          {R3-R9,LR}
MOV             R7, R0
LDR             R6, =(off_20F14 - 0x108C2)
MOV             R8, R1
MOV             R9, R2
LDR             R5, =(off_20F10 - 0x108C8)
ADD             R6, PC  ; off_20F14
BLX             .init_proc
ADD             R5, PC  ; off_20F10
SUBS            R6, R6, R5
ASRS            R6, R6, #2
BEQ             locret_108E0
MOVS            R4, #0

loc_108CE
ADDS            R4, #1
LDR.W           R3, [R5],#4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R7
BLX             R3
CMP             R6, R4
BNE             loc_108CE

locret_108E0
POP.W           {R3-R9,PC}
; End of function init

off_108E4 DCD off_20F14 - 0x108C2
off_108E8 DCD off_20F10 - 0x108C8
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
ALIGN 0x10
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x108F0
CODE32



; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY
; ORG 0x108F8
DCB    1
DCB    0
DCB    2
DCB    0
; _DWORD dword_108FC[256]
dword_108FC DCD 0, 0x4C11DB7, 0x9823B6E, 0xD4326D9, 0x130476DC
DCD 0x17C56B6B, 0x1A864DB2, 0x1E475005, 0x2608EDB8
DCD 0x22C9F00F, 0x2F8AD6D6, 0x2B4BCB61, 0x350C9B64
DCD 0x31CD86D3, 0x3C8EA00A, 0x384FBDBD, 0x4C11DB70
DCD 0x48D0C6C7, 0x4593E01E, 0x4152FDA9, 0x5F15ADAC
DCD 0x5BD4B01B, 0x569796C2, 0x52568B75, 0x6A1936C8
DCD 0x6ED82B7F, 0x639B0DA6, 0x675A1011, 0x791D4014
DCD 0x7DDC5DA3, 0x709F7B7A, 0x745E66CD, 0x9823B6E0
DCD 0x9CE2AB57, 0x91A18D8E, 0x95609039, 0x8B27C03C
DCD 0x8FE6DD8B, 0x82A5FB52, 0x8664E6E5, 0xBE2B5B58
DCD 0xBAEA46EF, 0xB7A96036, 0xB3687D81, 0xAD2F2D84
DCD 0xA9EE3033, 0xA4AD16EA, 0xA06C0B5D, 0xD4326D90
DCD 0xD0F37027, 0xDDB056FE, 0xD9714B49, 0xC7361B4C
DCD 0xC3F706FB, 0xCEB42022, 0xCA753D95, 0xF23A8028
DCD 0xF6FB9D9F, 0xFBB8BB46, 0xFF79A6F1, 0xE13EF6F4
DCD 0xE5FFEB43, 0xE8BCCD9A, 0xEC7DD02D, 0x34867077
DCD 0x30476DC0, 0x3D044B19, 0x39C556AE, 0x278206AB
DCD 0x23431B1C, 0x2E003DC5, 0x2AC12072, 0x128E9DCF
DCD 0x164F8078, 0x1B0CA6A1, 0x1FCDBB16, 0x18AEB13
DCD 0x54BF6A4, 0x808D07D, 0xCC9CDCA, 0x7897AB07
DCD 0x7C56B6B0, 0x71159069, 0x75D48DDE, 0x6B93DDDB
DCD 0x6F52C06C, 0x6211E6B5, 0x66D0FB02, 0x5E9F46BF
DCD 0x5A5E5B08, 0x571D7DD1, 0x53DC6066, 0x4D9B3063
DCD 0x495A2DD4, 0x44190B0D, 0x40D816BA, 0xACA5C697
DCD 0xA864DB20, 0xA527FDF9, 0xA1E6E04E, 0xBFA1B04B
DCD 0xBB60ADFC, 0xB6238B25, 0xB2E29692, 0x8AAD2B2F
DCD 0x8E6C3698, 0x832F1041, 0x87EE0DF6, 0x99A95DF3
DCD 0x9D684044, 0x902B669D, 0x94EA7B2A, 0xE0B41DE7
DCD 0xE4750050, 0xE9362689, 0xEDF73B3E, 0xF3B06B3B
DCD 0xF771768C, 0xFA325055, 0xFEF34DE2, 0xC6BCF05F
DCD 0xC27DEDE8, 0xCF3ECB31, 0xCBFFD686, 0xD5B88683
DCD 0xD1799B34, 0xDC3ABDED, 0xD8FBA05A, 0x690CE0EE
DCD 0x6DCDFD59, 0x608EDB80, 0x644FC637, 0x7A089632
DCD 0x7EC98B85, 0x738AAD5C, 0x774BB0EB, 0x4F040D56
DCD 0x4BC510E1, 0x46863638, 0x42472B8F, 0x5C007B8A
DCD 0x58C1663D, 0x558240E4, 0x51435D53, 0x251D3B9E
DCD 0x21DC2629, 0x2C9F00F0, 0x285E1D47, 0x36194D42
DCD 0x32D850F5, 0x3F9B762C, 0x3B5A6B9B, 0x315D626
DCD 0x7D4CB91, 0xA97ED48, 0xE56F0FF, 0x1011A0FA
DCD 0x14D0BD4D, 0x19939B94, 0x1D528623, 0xF12F560E
DCD 0xF5EE4BB9, 0xF8AD6D60, 0xFC6C70D7, 0xE22B20D2
DCD 0xE6EA3D65, 0xEBA91BBC, 0xEF68060B, 0xD727BBB6
DCD 0xD3E6A601, 0xDEA580D8, 0xDA649D6F, 0xC423CD6A
DCD 0xC0E2D0DD, 0xCDA1F604, 0xC960EBB3, 0xBD3E8D7E
DCD 0xB9FF90C9, 0xB4BCB610, 0xB07DABA7, 0xAE3AFBA2
DCD 0xAAFBE615, 0xA7B8C0CC, 0xA379DD7B, 0x9B3660C6
DCD 0x9FF77D71, 0x92B45BA8, 0x9675461F, 0x8832161A
DCD 0x8CF30BAD, 0x81B02D74, 0x857130C3, 0x5D8A9099
DCD 0x594B8D2E, 0x5408ABF7, 0x50C9B640, 0x4E8EE645
DCD 0x4A4FFBF2, 0x470CDD2B, 0x43CDC09C, 0x7B827D21
DCD 0x7F436096, 0x7200464F, 0x76C15BF8, 0x68860BFD
DCD 0x6C47164A, 0x61043093, 0x65C52D24, 0x119B4BE9
DCD 0x155A565E, 0x18197087, 0x1CD86D30, 0x29F3D35
DCD 0x65E2082, 0xB1D065B, 0xFDC1BEC, 0x3793A651
DCD 0x3352BBE6, 0x3E119D3F, 0x3AD08088, 0x2497D08D
DCD 0x2056CD3A, 0x2D15EBE3, 0x29D4F654, 0xC5A92679
DCD 0xC1683BCE, 0xCC2B1D17, 0xC8EA00A0, 0xD6AD50A5
DCD 0xD26C4D12, 0xDF2F6BCB, 0xDBEE767C, 0xE3A1CBC1
DCD 0xE760D676, 0xEA23F0AF, 0xEEE2ED18, 0xF0A5BD1D
DCD 0xF464A0AA, 0xF9278673, 0xFDE69BC4, 0x89B8FD09
DCD 0x8D79E0BE, 0x803AC667, 0x84FBDBD0, 0x9ABC8BD5
DCD 0x9E7D9662, 0x933EB0BB, 0x97FFAD0C, 0xAFB010B1
DCD 0xAB710D06, 0xA6322BDF, 0xA2F33668, 0xBCB4666D
DCD 0xB8757BDA, 0xB5365D03, 0xB1F740B4
aCpuid DCB "CPUID",0
ALIGN 4
a02x02x02x02x02 DCB "%02x:%02x:%02x:%02x:%02x:%02x",0
ALIGN 4
aXxxxxxxxxxxx4x DCB "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx",0
ALIGN 4
aRb DCB "rb",0
ALIGN 4
aDevUrandom DCB "/dev/urandom",0
ALIGN 4
a0123456789abcd DCB "0123456789abcdef",0
ALIGN 0x10
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x10D70
unk_10D70 DCB 0xF8
DCB 0xF6
DCB 0xFF
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x10D78
DCB    0
DCB    0
DCB    0
DCB    0
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x20F10
off_20F10 DCD sub_10524+1
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x20F14
off_20F14 DCD sub_1050C+1
; .fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x20F18
stru_20F18 Elf32_Dyn <1, <1>> ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x103A0>> ; DT_INIT
Elf32_Dyn <0xD, <0x108F0>> ; DT_FINI
Elf32_Dyn <0x19, <0x20F10>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x20F14>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x101B4>> ; DT_HASH
Elf32_Dyn <5, <0x102A4>> ; DT_STRTAB
Elf32_Dyn <6, <0x101F4>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0x6C>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x21000>> ; DT_PLTGOT
Elf32_Dyn <2, <0x50>>   ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x10350>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x10348>> ; DT_REL
Elf32_Dyn <0x12, <8>>   ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x10328>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <1>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x10310>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x40
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x21000
_GLOBAL_OFFSET_TABLE_ DCD stru_20F18
DCD 0
off_21008 DCD 0
fread_ptr DCD __imp_fread
getenv_ptr DCD __imp_getenv
puts_ptr DCD __imp_puts
__libc_start_main_ptr DCD __imp___libc_start_main
__gmon_start___ptr DCD __imp___gmon_start__
strlen_ptr DCD __imp_strlen
fclose_ptr DCD __imp_fclose
sprintf_ptr DCD __imp_sprintf
fopen64_ptr DCD __imp_fopen64
abort_ptr DCD __imp_abort
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x21038
ALIGN 0x10
; _DWORD dword_21040[256]
dword_21040 DCD 0, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5
DCD 0x60C6, 0x70E7, 0x8108, 0x9129, 0xA14A
DCD 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF
DCD 0x1231, 0x210, 0x3273, 0x2252, 0x52B5
DCD 0x4294, 0x72F7, 0x62D6, 0x9339, 0x8318
DCD 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF
DCD 0xE3DE, 0x2462, 0x3443, 0x420, 0x1401
DCD 0x64E6, 0x74C7, 0x44A4, 0x5485, 0xA56A
DCD 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF
DCD 0xC5AC, 0xD58D, 0x3653, 0x2672, 0x1611
DCD 0x630, 0x76D7, 0x66F6, 0x5695, 0x46B4
DCD 0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF
DCD 0xE7FE, 0xD79D, 0xC7BC, 0x48C4, 0x58E5
DCD 0x6886, 0x78A7, 0x840, 0x1861, 0x2802
DCD 0x3823, 0xC9CC, 0xD9ED, 0xE98E, 0xF9AF
DCD 0x8948, 0x9969, 0xA90A, 0xB92B, 0x5AF5
DCD 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0xA50
DCD 0x3A33, 0x2A12, 0xDBFD, 0xCBDC, 0xFBBF
DCD 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A
DCD 0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22
DCD 0x3C03, 0xC60, 0x1C41, 0xEDAE, 0xFD8F
DCD 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68
DCD 0x9D49, 0x7E97, 0x6EB6, 0x5ED5, 0x4EF4
DCD 0x3E13, 0x2E32, 0x1E51, 0xE70, 0xFF9F
DCD 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A
DCD 0x9F59, 0x8F78, 0x9188, 0x81A9, 0xB1CA
DCD 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F
DCD 0x1080, 0xA1, 0x30C2, 0x20E3, 0x5004
DCD 0x4025, 0x7046, 0x6067, 0x83B9, 0x9398
DCD 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F
DCD 0xF35E, 0x2B1, 0x1290, 0x22F3, 0x32D2
DCD 0x4235, 0x5214, 0x6277, 0x7256, 0xB5EA
DCD 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F
DCD 0xD52C, 0xC50D, 0x34E2, 0x24C3, 0x14A0
DCD 0x481, 0x7466, 0x6447, 0x5424, 0x4405
DCD 0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F
DCD 0xF77E, 0xC71D, 0xD73C, 0x26D3, 0x36F2
DCD 0x691, 0x16B0, 0x6657, 0x7676, 0x4615
DCD 0x5634, 0xD94C, 0xC96D, 0xF90E, 0xE92F
DCD 0x99C8, 0x89E9, 0xB98A, 0xA9AB, 0x5844
DCD 0x4865, 0x7806, 0x6827, 0x18C0, 0x8E1
DCD 0x3882, 0x28A3, 0xCB7D, 0xDB5C, 0xEB3F
DCD 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A
DCD 0x4A75, 0x5A54, 0x6A37, 0x7A16, 0xAF1
DCD 0x1AD0, 0x2AB3, 0x3A92, 0xFD2E, 0xED0F
DCD 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8
DCD 0x8DC9, 0x7C26, 0x6C07, 0x5C64, 0x4C45
DCD 0x3CA2, 0x2C83, 0x1CE0, 0xCC1, 0xEF1F
DCD 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA
DCD 0x8FD9, 0x9FF8, 0x6E17, 0x7E36, 0x4E55
DCD 0x5E74, 0x2E93, 0x3EB2, 0xED1, 0x1EF0
; .data ends


; Segment type: Uninitialized
AREA .bss, DATA, ALIGN=3
; ORG 0x21440
byte_21440 % 1
ALIGN 8
dword_21448 % 4
ALIGN 0x10
qword_21450 % 8
qword_21458 % 8
; .bss ends


; Segment type: Externs
; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
IMPORT __imp_fread
; char *getenv(const char *name)
IMPORT __imp_getenv
; int puts(const char *s)
IMPORT __imp_puts
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; size_t strlen(const char *s)
IMPORT __imp_strlen
; int fclose(FILE *stream)
IMPORT __imp_fclose
; int sprintf(char *s, const char *format, ...)
IMPORT __imp_sprintf
IMPORT __imp_fopen64
; void abort(void)
IMPORT __imp_abort
IMPORT __imp___gmon_start__, WEAK

END start
